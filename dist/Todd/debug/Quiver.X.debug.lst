

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Mar 21 23:05:15 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    19                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    20                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,delta=2
   132                           	psect	intentry,global,class=CODE,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	text107,local,class=CODE,merge=1,delta=2
   136                           	psect	text108,local,class=CODE,merge=1,delta=2
   137                           	psect	text109,local,class=CODE,merge=1,delta=2
   138                           	psect	text110,local,class=CODE,merge=1,delta=2
   139                           	psect	text111,local,class=CODE,merge=1,delta=2
   140                           	psect	text112,local,class=CODE,merge=1,delta=2
   141                           	psect	text113,local,class=CODE,merge=1,delta=2
   142                           	psect	text114,local,class=CODE,merge=1,delta=2
   143                           	psect	text115,local,class=CODE,merge=1,delta=2
   144                           	psect	text116,local,class=CODE,merge=1,delta=2
   145                           	psect	text117,local,class=CODE,merge=1,delta=2
   146                           	psect	text118,local,class=CODE,merge=1,delta=2
   147                           	psect	text119,local,class=CODE,merge=1,delta=2
   148                           	psect	text120,local,class=CODE,merge=1,delta=2
   149                           	psect	maintext_split_1,global,class=CODE,merge=1,split=1,delta=2
   150                           	dabs	1,0x920,80
   151                           	dabs	1,0x8A0,80
   152                           	dabs	1,0x820,80
   153                           	dabs	1,0x7A0,80
   154                           	dabs	1,0x742,46
   155                           	dabs	1,0x720,34
   156                           	dabs	1,0x6A0,80
   157                           	dabs	1,0x620,80
   158                           	dabs	1,0x5BA,54
   159                           	dabs	1,0x2482,0,_cosArray
   160                           	dabs	1,0x238A,0,_modArray
   161                           	dabs	1,0x7E,2
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0110                     	;# 
   216  0116                     	;# 
   217  0117                     	;# 
   218  011D                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  018F                     	;# 
   222  0190                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0194                     	;# 
   229  0195                     	;# 
   230  0196                     	;# 
   231  0197                     	;# 
   232  0199                     	;# 
   233  0199                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019A                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019C                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019D                     	;# 
   248  019D                     	;# 
   249  019E                     	;# 
   250  019E                     	;# 
   251  019E                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  019F                     	;# 
   255  020D                     	;# 
   256  020F                     	;# 
   257  0210                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  0219                     	;# 
   274  021A                     	;# 
   275  021B                     	;# 
   276  021C                     	;# 
   277  021D                     	;# 
   278  021E                     	;# 
   279  021F                     	;# 
   280  028C                     	;# 
   281  028D                     	;# 
   282  0291                     	;# 
   283  0291                     	;# 
   284  0292                     	;# 
   285  0293                     	;# 
   286  0298                     	;# 
   287  0298                     	;# 
   288  0299                     	;# 
   289  029A                     	;# 
   290  029D                     	;# 
   291  029E                     	;# 
   292  029F                     	;# 
   293  030C                     	;# 
   294  030D                     	;# 
   295  0311                     	;# 
   296  0311                     	;# 
   297  0312                     	;# 
   298  0313                     	;# 
   299  0318                     	;# 
   300  0318                     	;# 
   301  0319                     	;# 
   302  031A                     	;# 
   303  031C                     	;# 
   304  031C                     	;# 
   305  031D                     	;# 
   306  031E                     	;# 
   307  038C                     	;# 
   308  038D                     	;# 
   309  0394                     	;# 
   310  0395                     	;# 
   311  0396                     	;# 
   312  040C                     	;# 
   313  040D                     	;# 
   314  0411                     	;# 
   315  0411                     	;# 
   316  0412                     	;# 
   317  0413                     	;# 
   318  0414                     	;# 
   319  0415                     	;# 
   320  0416                     	;# 
   321  0417                     	;# 
   322  0418                     	;# 
   323  0418                     	;# 
   324  0419                     	;# 
   325  041A                     	;# 
   326  041B                     	;# 
   327  041C                     	;# 
   328  041D                     	;# 
   329  041E                     	;# 
   330  048D                     	;# 
   331  0491                     	;# 
   332  0491                     	;# 
   333  0492                     	;# 
   334  0492                     	;# 
   335  0493                     	;# 
   336  0493                     	;# 
   337  0493                     	;# 
   338  0494                     	;# 
   339  0494                     	;# 
   340  0495                     	;# 
   341  0495                     	;# 
   342  0496                     	;# 
   343  0496                     	;# 
   344  0497                     	;# 
   345  0497                     	;# 
   346  0595                     	;# 
   347  0596                     	;# 
   348  0597                     	;# 
   349  059C                     	;# 
   350  059D                     	;# 
   351  059E                     	;# 
   352  0611                     	;# 
   353  0611                     	;# 
   354  0612                     	;# 
   355  0613                     	;# 
   356  0614                     	;# 
   357  0614                     	;# 
   358  0615                     	;# 
   359  0616                     	;# 
   360  0617                     	;# 
   361  0617                     	;# 
   362  0618                     	;# 
   363  0619                     	;# 
   364  061A                     	;# 
   365  061A                     	;# 
   366  061B                     	;# 
   367  061C                     	;# 
   368  061D                     	;# 
   369  061D                     	;# 
   370  061E                     	;# 
   371  061F                     	;# 
   372  0FE4                     	;# 
   373  0FE5                     	;# 
   374  0FE6                     	;# 
   375  0FE7                     	;# 
   376  0FE8                     	;# 
   377  0FE9                     	;# 
   378  0FEA                     	;# 
   379  0FEB                     	;# 
   380  0FED                     	;# 
   381  0FEE                     	;# 
   382  0FEF                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  008F                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0094                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  010F                     	;# 
   436  0110                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018F                     	;# 
   443  0190                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0197                     	;# 
   453  0199                     	;# 
   454  0199                     	;# 
   455  0199                     	;# 
   456  019A                     	;# 
   457  019A                     	;# 
   458  019A                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019C                     	;# 
   465  019C                     	;# 
   466  019C                     	;# 
   467  019D                     	;# 
   468  019D                     	;# 
   469  019D                     	;# 
   470  019E                     	;# 
   471  019E                     	;# 
   472  019E                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  019F                     	;# 
   476  020D                     	;# 
   477  020F                     	;# 
   478  0210                     	;# 
   479  0211                     	;# 
   480  0211                     	;# 
   481  0212                     	;# 
   482  0212                     	;# 
   483  0213                     	;# 
   484  0213                     	;# 
   485  0214                     	;# 
   486  0214                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0219                     	;# 
   495  021A                     	;# 
   496  021B                     	;# 
   497  021C                     	;# 
   498  021D                     	;# 
   499  021E                     	;# 
   500  021F                     	;# 
   501  028C                     	;# 
   502  028D                     	;# 
   503  0291                     	;# 
   504  0291                     	;# 
   505  0292                     	;# 
   506  0293                     	;# 
   507  0298                     	;# 
   508  0298                     	;# 
   509  0299                     	;# 
   510  029A                     	;# 
   511  029D                     	;# 
   512  029E                     	;# 
   513  029F                     	;# 
   514  030C                     	;# 
   515  030D                     	;# 
   516  0311                     	;# 
   517  0311                     	;# 
   518  0312                     	;# 
   519  0313                     	;# 
   520  0318                     	;# 
   521  0318                     	;# 
   522  0319                     	;# 
   523  031A                     	;# 
   524  031C                     	;# 
   525  031C                     	;# 
   526  031D                     	;# 
   527  031E                     	;# 
   528  038C                     	;# 
   529  038D                     	;# 
   530  0394                     	;# 
   531  0395                     	;# 
   532  0396                     	;# 
   533  040C                     	;# 
   534  040D                     	;# 
   535  0411                     	;# 
   536  0411                     	;# 
   537  0412                     	;# 
   538  0413                     	;# 
   539  0414                     	;# 
   540  0415                     	;# 
   541  0416                     	;# 
   542  0417                     	;# 
   543  0418                     	;# 
   544  0418                     	;# 
   545  0419                     	;# 
   546  041A                     	;# 
   547  041B                     	;# 
   548  041C                     	;# 
   549  041D                     	;# 
   550  041E                     	;# 
   551  048D                     	;# 
   552  0491                     	;# 
   553  0491                     	;# 
   554  0492                     	;# 
   555  0492                     	;# 
   556  0493                     	;# 
   557  0493                     	;# 
   558  0493                     	;# 
   559  0494                     	;# 
   560  0494                     	;# 
   561  0495                     	;# 
   562  0495                     	;# 
   563  0496                     	;# 
   564  0496                     	;# 
   565  0497                     	;# 
   566  0497                     	;# 
   567  0595                     	;# 
   568  0596                     	;# 
   569  0597                     	;# 
   570  059C                     	;# 
   571  059D                     	;# 
   572  059E                     	;# 
   573  0611                     	;# 
   574  0611                     	;# 
   575  0612                     	;# 
   576  0613                     	;# 
   577  0614                     	;# 
   578  0614                     	;# 
   579  0615                     	;# 
   580  0616                     	;# 
   581  0617                     	;# 
   582  0617                     	;# 
   583  0618                     	;# 
   584  0619                     	;# 
   585  061A                     	;# 
   586  061A                     	;# 
   587  061B                     	;# 
   588  061C                     	;# 
   589  061D                     	;# 
   590  061D                     	;# 
   591  061E                     	;# 
   592  061F                     	;# 
   593  0FE4                     	;# 
   594  0FE5                     	;# 
   595  0FE6                     	;# 
   596  0FE7                     	;# 
   597  0FE8                     	;# 
   598  0FE9                     	;# 
   599  0FEA                     	;# 
   600  0FEB                     	;# 
   601  0FED                     	;# 
   602  0FEE                     	;# 
   603  0FEF                     	;# 
   604  0000                     	;# 
   605  0001                     	;# 
   606  0002                     	;# 
   607  0003                     	;# 
   608  0004                     	;# 
   609  0005                     	;# 
   610  0006                     	;# 
   611  0007                     	;# 
   612  0008                     	;# 
   613  0009                     	;# 
   614  000A                     	;# 
   615  000B                     	;# 
   616  000C                     	;# 
   617  000D                     	;# 
   618  000E                     	;# 
   619  000F                     	;# 
   620  0010                     	;# 
   621  0011                     	;# 
   622  0012                     	;# 
   623  0013                     	;# 
   624  0014                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  008F                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0093                     	;# 
   642  0094                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  010F                     	;# 
   657  0110                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018F                     	;# 
   664  0190                     	;# 
   665  0191                     	;# 
   666  0191                     	;# 
   667  0192                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0197                     	;# 
   674  0199                     	;# 
   675  0199                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019A                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019D                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019E                     	;# 
   693  019E                     	;# 
   694  019F                     	;# 
   695  019F                     	;# 
   696  019F                     	;# 
   697  020D                     	;# 
   698  020F                     	;# 
   699  0210                     	;# 
   700  0211                     	;# 
   701  0211                     	;# 
   702  0212                     	;# 
   703  0212                     	;# 
   704  0213                     	;# 
   705  0213                     	;# 
   706  0214                     	;# 
   707  0214                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0216                     	;# 
   712  0216                     	;# 
   713  0217                     	;# 
   714  0217                     	;# 
   715  0219                     	;# 
   716  021A                     	;# 
   717  021B                     	;# 
   718  021C                     	;# 
   719  021D                     	;# 
   720  021E                     	;# 
   721  021F                     	;# 
   722  028C                     	;# 
   723  028D                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0298                     	;# 
   729  0298                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  029D                     	;# 
   733  029E                     	;# 
   734  029F                     	;# 
   735  030C                     	;# 
   736  030D                     	;# 
   737  0311                     	;# 
   738  0311                     	;# 
   739  0312                     	;# 
   740  0313                     	;# 
   741  0318                     	;# 
   742  0318                     	;# 
   743  0319                     	;# 
   744  031A                     	;# 
   745  031C                     	;# 
   746  031C                     	;# 
   747  031D                     	;# 
   748  031E                     	;# 
   749  038C                     	;# 
   750  038D                     	;# 
   751  0394                     	;# 
   752  0395                     	;# 
   753  0396                     	;# 
   754  040C                     	;# 
   755  040D                     	;# 
   756  0411                     	;# 
   757  0411                     	;# 
   758  0412                     	;# 
   759  0413                     	;# 
   760  0414                     	;# 
   761  0415                     	;# 
   762  0416                     	;# 
   763  0417                     	;# 
   764  0418                     	;# 
   765  0418                     	;# 
   766  0419                     	;# 
   767  041A                     	;# 
   768  041B                     	;# 
   769  041C                     	;# 
   770  041D                     	;# 
   771  041E                     	;# 
   772  048D                     	;# 
   773  0491                     	;# 
   774  0491                     	;# 
   775  0492                     	;# 
   776  0492                     	;# 
   777  0493                     	;# 
   778  0493                     	;# 
   779  0493                     	;# 
   780  0494                     	;# 
   781  0494                     	;# 
   782  0495                     	;# 
   783  0495                     	;# 
   784  0496                     	;# 
   785  0496                     	;# 
   786  0497                     	;# 
   787  0497                     	;# 
   788  0595                     	;# 
   789  0596                     	;# 
   790  0597                     	;# 
   791  059C                     	;# 
   792  059D                     	;# 
   793  059E                     	;# 
   794  0611                     	;# 
   795  0611                     	;# 
   796  0612                     	;# 
   797  0613                     	;# 
   798  0614                     	;# 
   799  0614                     	;# 
   800  0615                     	;# 
   801  0616                     	;# 
   802  0617                     	;# 
   803  0617                     	;# 
   804  0618                     	;# 
   805  0619                     	;# 
   806  061A                     	;# 
   807  061A                     	;# 
   808  061B                     	;# 
   809  061C                     	;# 
   810  061D                     	;# 
   811  061D                     	;# 
   812  061E                     	;# 
   813  061F                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  000F                     	;# 
   841  0010                     	;# 
   842  0011                     	;# 
   843  0012                     	;# 
   844  0013                     	;# 
   845  0014                     	;# 
   846  0015                     	;# 
   847  0016                     	;# 
   848  0016                     	;# 
   849  0017                     	;# 
   850  0018                     	;# 
   851  0019                     	;# 
   852  001A                     	;# 
   853  001B                     	;# 
   854  001C                     	;# 
   855  008C                     	;# 
   856  008D                     	;# 
   857  008E                     	;# 
   858  008F                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0093                     	;# 
   863  0094                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  010F                     	;# 
   878  0110                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018F                     	;# 
   885  0190                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  0199                     	;# 
   897  0199                     	;# 
   898  019A                     	;# 
   899  019A                     	;# 
   900  019A                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019C                     	;# 
   909  019D                     	;# 
   910  019D                     	;# 
   911  019D                     	;# 
   912  019E                     	;# 
   913  019E                     	;# 
   914  019E                     	;# 
   915  019F                     	;# 
   916  019F                     	;# 
   917  019F                     	;# 
   918  020D                     	;# 
   919  020F                     	;# 
   920  0210                     	;# 
   921  0211                     	;# 
   922  0211                     	;# 
   923  0212                     	;# 
   924  0212                     	;# 
   925  0213                     	;# 
   926  0213                     	;# 
   927  0214                     	;# 
   928  0214                     	;# 
   929  0215                     	;# 
   930  0215                     	;# 
   931  0215                     	;# 
   932  0216                     	;# 
   933  0216                     	;# 
   934  0217                     	;# 
   935  0217                     	;# 
   936  0219                     	;# 
   937  021A                     	;# 
   938  021B                     	;# 
   939  021C                     	;# 
   940  021D                     	;# 
   941  021E                     	;# 
   942  021F                     	;# 
   943  028C                     	;# 
   944  028D                     	;# 
   945  0291                     	;# 
   946  0291                     	;# 
   947  0292                     	;# 
   948  0293                     	;# 
   949  0298                     	;# 
   950  0298                     	;# 
   951  0299                     	;# 
   952  029A                     	;# 
   953  029D                     	;# 
   954  029E                     	;# 
   955  029F                     	;# 
   956  030C                     	;# 
   957  030D                     	;# 
   958  0311                     	;# 
   959  0311                     	;# 
   960  0312                     	;# 
   961  0313                     	;# 
   962  0318                     	;# 
   963  0318                     	;# 
   964  0319                     	;# 
   965  031A                     	;# 
   966  031C                     	;# 
   967  031C                     	;# 
   968  031D                     	;# 
   969  031E                     	;# 
   970  038C                     	;# 
   971  038D                     	;# 
   972  0394                     	;# 
   973  0395                     	;# 
   974  0396                     	;# 
   975  040C                     	;# 
   976  040D                     	;# 
   977  0411                     	;# 
   978  0411                     	;# 
   979  0412                     	;# 
   980  0413                     	;# 
   981  0414                     	;# 
   982  0415                     	;# 
   983  0416                     	;# 
   984  0417                     	;# 
   985  0418                     	;# 
   986  0418                     	;# 
   987  0419                     	;# 
   988  041A                     	;# 
   989  041B                     	;# 
   990  041C                     	;# 
   991  041D                     	;# 
   992  041E                     	;# 
   993  048D                     	;# 
   994  0491                     	;# 
   995  0491                     	;# 
   996  0492                     	;# 
   997  0492                     	;# 
   998  0493                     	;# 
   999  0493                     	;# 
  1000  0493                     	;# 
  1001  0494                     	;# 
  1002  0494                     	;# 
  1003  0495                     	;# 
  1004  0495                     	;# 
  1005  0496                     	;# 
  1006  0496                     	;# 
  1007  0497                     	;# 
  1008  0497                     	;# 
  1009  0595                     	;# 
  1010  0596                     	;# 
  1011  0597                     	;# 
  1012  059C                     	;# 
  1013  059D                     	;# 
  1014  059E                     	;# 
  1015  0611                     	;# 
  1016  0611                     	;# 
  1017  0612                     	;# 
  1018  0613                     	;# 
  1019  0614                     	;# 
  1020  0614                     	;# 
  1021  0615                     	;# 
  1022  0616                     	;# 
  1023  0617                     	;# 
  1024  0617                     	;# 
  1025  0618                     	;# 
  1026  0619                     	;# 
  1027  061A                     	;# 
  1028  061A                     	;# 
  1029  061B                     	;# 
  1030  061C                     	;# 
  1031  061D                     	;# 
  1032  061D                     	;# 
  1033  061E                     	;# 
  1034  061F                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000F                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  008C                     	;# 
  1077  008D                     	;# 
  1078  008E                     	;# 
  1079  008F                     	;# 
  1080  0090                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  010F                     	;# 
  1099  0110                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018F                     	;# 
  1106  0190                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  0199                     	;# 
  1118  0199                     	;# 
  1119  019A                     	;# 
  1120  019A                     	;# 
  1121  019A                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019C                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019D                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019E                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  019F                     	;# 
  1138  019F                     	;# 
  1139  020D                     	;# 
  1140  020F                     	;# 
  1141  0210                     	;# 
  1142  0211                     	;# 
  1143  0211                     	;# 
  1144  0212                     	;# 
  1145  0212                     	;# 
  1146  0213                     	;# 
  1147  0213                     	;# 
  1148  0214                     	;# 
  1149  0214                     	;# 
  1150  0215                     	;# 
  1151  0215                     	;# 
  1152  0215                     	;# 
  1153  0216                     	;# 
  1154  0216                     	;# 
  1155  0217                     	;# 
  1156  0217                     	;# 
  1157  0219                     	;# 
  1158  021A                     	;# 
  1159  021B                     	;# 
  1160  021C                     	;# 
  1161  021D                     	;# 
  1162  021E                     	;# 
  1163  021F                     	;# 
  1164  028C                     	;# 
  1165  028D                     	;# 
  1166  0291                     	;# 
  1167  0291                     	;# 
  1168  0292                     	;# 
  1169  0293                     	;# 
  1170  0298                     	;# 
  1171  0298                     	;# 
  1172  0299                     	;# 
  1173  029A                     	;# 
  1174  029D                     	;# 
  1175  029E                     	;# 
  1176  029F                     	;# 
  1177  030C                     	;# 
  1178  030D                     	;# 
  1179  0311                     	;# 
  1180  0311                     	;# 
  1181  0312                     	;# 
  1182  0313                     	;# 
  1183  0318                     	;# 
  1184  0318                     	;# 
  1185  0319                     	;# 
  1186  031A                     	;# 
  1187  031C                     	;# 
  1188  031C                     	;# 
  1189  031D                     	;# 
  1190  031E                     	;# 
  1191  038C                     	;# 
  1192  038D                     	;# 
  1193  0394                     	;# 
  1194  0395                     	;# 
  1195  0396                     	;# 
  1196  040C                     	;# 
  1197  040D                     	;# 
  1198  0411                     	;# 
  1199  0411                     	;# 
  1200  0412                     	;# 
  1201  0413                     	;# 
  1202  0414                     	;# 
  1203  0415                     	;# 
  1204  0416                     	;# 
  1205  0417                     	;# 
  1206  0418                     	;# 
  1207  0418                     	;# 
  1208  0419                     	;# 
  1209  041A                     	;# 
  1210  041B                     	;# 
  1211  041C                     	;# 
  1212  041D                     	;# 
  1213  041E                     	;# 
  1214  048D                     	;# 
  1215  0491                     	;# 
  1216  0491                     	;# 
  1217  0492                     	;# 
  1218  0492                     	;# 
  1219  0493                     	;# 
  1220  0493                     	;# 
  1221  0493                     	;# 
  1222  0494                     	;# 
  1223  0494                     	;# 
  1224  0495                     	;# 
  1225  0495                     	;# 
  1226  0496                     	;# 
  1227  0496                     	;# 
  1228  0497                     	;# 
  1229  0497                     	;# 
  1230  0595                     	;# 
  1231  0596                     	;# 
  1232  0597                     	;# 
  1233  059C                     	;# 
  1234  059D                     	;# 
  1235  059E                     	;# 
  1236  0611                     	;# 
  1237  0611                     	;# 
  1238  0612                     	;# 
  1239  0613                     	;# 
  1240  0614                     	;# 
  1241  0614                     	;# 
  1242  0615                     	;# 
  1243  0616                     	;# 
  1244  0617                     	;# 
  1245  0617                     	;# 
  1246  0618                     	;# 
  1247  0619                     	;# 
  1248  061A                     	;# 
  1249  061A                     	;# 
  1250  061B                     	;# 
  1251  061C                     	;# 
  1252  061D                     	;# 
  1253  061D                     	;# 
  1254  061E                     	;# 
  1255  061F                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  000F                     	;# 
  1283  0010                     	;# 
  1284  0011                     	;# 
  1285  0012                     	;# 
  1286  0013                     	;# 
  1287  0014                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008D                     	;# 
  1299  008E                     	;# 
  1300  008F                     	;# 
  1301  0090                     	;# 
  1302  0091                     	;# 
  1303  0092                     	;# 
  1304  0093                     	;# 
  1305  0094                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0110                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018F                     	;# 
  1327  0190                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  0199                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019A                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019D                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019E                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  019F                     	;# 
  1359  019F                     	;# 
  1360  020D                     	;# 
  1361  020F                     	;# 
  1362  0210                     	;# 
  1363  0211                     	;# 
  1364  0211                     	;# 
  1365  0212                     	;# 
  1366  0212                     	;# 
  1367  0213                     	;# 
  1368  0213                     	;# 
  1369  0214                     	;# 
  1370  0214                     	;# 
  1371  0215                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0216                     	;# 
  1375  0216                     	;# 
  1376  0217                     	;# 
  1377  0217                     	;# 
  1378  0219                     	;# 
  1379  021A                     	;# 
  1380  021B                     	;# 
  1381  021C                     	;# 
  1382  021D                     	;# 
  1383  021E                     	;# 
  1384  021F                     	;# 
  1385  028C                     	;# 
  1386  028D                     	;# 
  1387  0291                     	;# 
  1388  0291                     	;# 
  1389  0292                     	;# 
  1390  0293                     	;# 
  1391  0298                     	;# 
  1392  0298                     	;# 
  1393  0299                     	;# 
  1394  029A                     	;# 
  1395  029D                     	;# 
  1396  029E                     	;# 
  1397  029F                     	;# 
  1398  030C                     	;# 
  1399  030D                     	;# 
  1400  0311                     	;# 
  1401  0311                     	;# 
  1402  0312                     	;# 
  1403  0313                     	;# 
  1404  0318                     	;# 
  1405  0318                     	;# 
  1406  0319                     	;# 
  1407  031A                     	;# 
  1408  031C                     	;# 
  1409  031C                     	;# 
  1410  031D                     	;# 
  1411  031E                     	;# 
  1412  038C                     	;# 
  1413  038D                     	;# 
  1414  0394                     	;# 
  1415  0395                     	;# 
  1416  0396                     	;# 
  1417  040C                     	;# 
  1418  040D                     	;# 
  1419  0411                     	;# 
  1420  0411                     	;# 
  1421  0412                     	;# 
  1422  0413                     	;# 
  1423  0414                     	;# 
  1424  0415                     	;# 
  1425  0416                     	;# 
  1426  0417                     	;# 
  1427  0418                     	;# 
  1428  0418                     	;# 
  1429  0419                     	;# 
  1430  041A                     	;# 
  1431  041B                     	;# 
  1432  041C                     	;# 
  1433  041D                     	;# 
  1434  041E                     	;# 
  1435  048D                     	;# 
  1436  0491                     	;# 
  1437  0491                     	;# 
  1438  0492                     	;# 
  1439  0492                     	;# 
  1440  0493                     	;# 
  1441  0493                     	;# 
  1442  0493                     	;# 
  1443  0494                     	;# 
  1444  0494                     	;# 
  1445  0495                     	;# 
  1446  0495                     	;# 
  1447  0496                     	;# 
  1448  0496                     	;# 
  1449  0497                     	;# 
  1450  0497                     	;# 
  1451  0595                     	;# 
  1452  0596                     	;# 
  1453  0597                     	;# 
  1454  059C                     	;# 
  1455  059D                     	;# 
  1456  059E                     	;# 
  1457  0611                     	;# 
  1458  0611                     	;# 
  1459  0612                     	;# 
  1460  0613                     	;# 
  1461  0614                     	;# 
  1462  0614                     	;# 
  1463  0615                     	;# 
  1464  0616                     	;# 
  1465  0617                     	;# 
  1466  0617                     	;# 
  1467  0618                     	;# 
  1468  0619                     	;# 
  1469  061A                     	;# 
  1470  061A                     	;# 
  1471  061B                     	;# 
  1472  061C                     	;# 
  1473  061D                     	;# 
  1474  061D                     	;# 
  1475  061E                     	;# 
  1476  061F                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  000F                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  008F                     	;# 
  1522  0090                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0093                     	;# 
  1526  0094                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  010C                     	;# 
  1538  010D                     	;# 
  1539  010E                     	;# 
  1540  010F                     	;# 
  1541  0110                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018F                     	;# 
  1548  0190                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  0199                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019A                     	;# 
  1563  019A                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019C                     	;# 
  1570  019C                     	;# 
  1571  019C                     	;# 
  1572  019D                     	;# 
  1573  019D                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019E                     	;# 
  1577  019E                     	;# 
  1578  019F                     	;# 
  1579  019F                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  020F                     	;# 
  1583  0210                     	;# 
  1584  0211                     	;# 
  1585  0211                     	;# 
  1586  0212                     	;# 
  1587  0212                     	;# 
  1588  0213                     	;# 
  1589  0213                     	;# 
  1590  0214                     	;# 
  1591  0214                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0216                     	;# 
  1596  0216                     	;# 
  1597  0217                     	;# 
  1598  0217                     	;# 
  1599  0219                     	;# 
  1600  021A                     	;# 
  1601  021B                     	;# 
  1602  021C                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  028C                     	;# 
  1607  028D                     	;# 
  1608  0291                     	;# 
  1609  0291                     	;# 
  1610  0292                     	;# 
  1611  0293                     	;# 
  1612  0298                     	;# 
  1613  0298                     	;# 
  1614  0299                     	;# 
  1615  029A                     	;# 
  1616  029D                     	;# 
  1617  029E                     	;# 
  1618  029F                     	;# 
  1619  030C                     	;# 
  1620  030D                     	;# 
  1621  0311                     	;# 
  1622  0311                     	;# 
  1623  0312                     	;# 
  1624  0313                     	;# 
  1625  0318                     	;# 
  1626  0318                     	;# 
  1627  0319                     	;# 
  1628  031A                     	;# 
  1629  031C                     	;# 
  1630  031C                     	;# 
  1631  031D                     	;# 
  1632  031E                     	;# 
  1633  038C                     	;# 
  1634  038D                     	;# 
  1635  0394                     	;# 
  1636  0395                     	;# 
  1637  0396                     	;# 
  1638  040C                     	;# 
  1639  040D                     	;# 
  1640  0411                     	;# 
  1641  0411                     	;# 
  1642  0412                     	;# 
  1643  0413                     	;# 
  1644  0414                     	;# 
  1645  0415                     	;# 
  1646  0416                     	;# 
  1647  0417                     	;# 
  1648  0418                     	;# 
  1649  0418                     	;# 
  1650  0419                     	;# 
  1651  041A                     	;# 
  1652  041B                     	;# 
  1653  041C                     	;# 
  1654  041D                     	;# 
  1655  041E                     	;# 
  1656  048D                     	;# 
  1657  0491                     	;# 
  1658  0491                     	;# 
  1659  0492                     	;# 
  1660  0492                     	;# 
  1661  0493                     	;# 
  1662  0493                     	;# 
  1663  0493                     	;# 
  1664  0494                     	;# 
  1665  0494                     	;# 
  1666  0495                     	;# 
  1667  0495                     	;# 
  1668  0496                     	;# 
  1669  0496                     	;# 
  1670  0497                     	;# 
  1671  0497                     	;# 
  1672  0595                     	;# 
  1673  0596                     	;# 
  1674  0597                     	;# 
  1675  059C                     	;# 
  1676  059D                     	;# 
  1677  059E                     	;# 
  1678  0611                     	;# 
  1679  0611                     	;# 
  1680  0612                     	;# 
  1681  0613                     	;# 
  1682  0614                     	;# 
  1683  0614                     	;# 
  1684  0615                     	;# 
  1685  0616                     	;# 
  1686  0617                     	;# 
  1687  0617                     	;# 
  1688  0618                     	;# 
  1689  0619                     	;# 
  1690  061A                     	;# 
  1691  061A                     	;# 
  1692  061B                     	;# 
  1693  061C                     	;# 
  1694  061D                     	;# 
  1695  061D                     	;# 
  1696  061E                     	;# 
  1697  061F                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  000F                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0013                     	;# 
  1729  0014                     	;# 
  1730  0015                     	;# 
  1731  0016                     	;# 
  1732  0016                     	;# 
  1733  0017                     	;# 
  1734  0018                     	;# 
  1735  0019                     	;# 
  1736  001A                     	;# 
  1737  001B                     	;# 
  1738  001C                     	;# 
  1739  008C                     	;# 
  1740  008D                     	;# 
  1741  008E                     	;# 
  1742  008F                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0093                     	;# 
  1747  0094                     	;# 
  1748  0095                     	;# 
  1749  0096                     	;# 
  1750  0097                     	;# 
  1751  0099                     	;# 
  1752  009A                     	;# 
  1753  009B                     	;# 
  1754  009B                     	;# 
  1755  009C                     	;# 
  1756  009D                     	;# 
  1757  009E                     	;# 
  1758  010C                     	;# 
  1759  010D                     	;# 
  1760  010E                     	;# 
  1761  010F                     	;# 
  1762  0110                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018F                     	;# 
  1769  0190                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  0199                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019A                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019C                     	;# 
  1791  019C                     	;# 
  1792  019C                     	;# 
  1793  019D                     	;# 
  1794  019D                     	;# 
  1795  019D                     	;# 
  1796  019E                     	;# 
  1797  019E                     	;# 
  1798  019E                     	;# 
  1799  019F                     	;# 
  1800  019F                     	;# 
  1801  019F                     	;# 
  1802  020D                     	;# 
  1803  020F                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0219                     	;# 
  1821  021A                     	;# 
  1822  021B                     	;# 
  1823  021C                     	;# 
  1824  021D                     	;# 
  1825  021E                     	;# 
  1826  021F                     	;# 
  1827  028C                     	;# 
  1828  028D                     	;# 
  1829  0291                     	;# 
  1830  0291                     	;# 
  1831  0292                     	;# 
  1832  0293                     	;# 
  1833  0298                     	;# 
  1834  0298                     	;# 
  1835  0299                     	;# 
  1836  029A                     	;# 
  1837  029D                     	;# 
  1838  029E                     	;# 
  1839  029F                     	;# 
  1840  030C                     	;# 
  1841  030D                     	;# 
  1842  0311                     	;# 
  1843  0311                     	;# 
  1844  0312                     	;# 
  1845  0313                     	;# 
  1846  0318                     	;# 
  1847  0318                     	;# 
  1848  0319                     	;# 
  1849  031A                     	;# 
  1850  031C                     	;# 
  1851  031C                     	;# 
  1852  031D                     	;# 
  1853  031E                     	;# 
  1854  038C                     	;# 
  1855  038D                     	;# 
  1856  0394                     	;# 
  1857  0395                     	;# 
  1858  0396                     	;# 
  1859  040C                     	;# 
  1860  040D                     	;# 
  1861  0411                     	;# 
  1862  0411                     	;# 
  1863  0412                     	;# 
  1864  0413                     	;# 
  1865  0414                     	;# 
  1866  0415                     	;# 
  1867  0416                     	;# 
  1868  0417                     	;# 
  1869  0418                     	;# 
  1870  0418                     	;# 
  1871  0419                     	;# 
  1872  041A                     	;# 
  1873  041B                     	;# 
  1874  041C                     	;# 
  1875  041D                     	;# 
  1876  041E                     	;# 
  1877  048D                     	;# 
  1878  0491                     	;# 
  1879  0491                     	;# 
  1880  0492                     	;# 
  1881  0492                     	;# 
  1882  0493                     	;# 
  1883  0493                     	;# 
  1884  0493                     	;# 
  1885  0494                     	;# 
  1886  0494                     	;# 
  1887  0495                     	;# 
  1888  0495                     	;# 
  1889  0496                     	;# 
  1890  0496                     	;# 
  1891  0497                     	;# 
  1892  0497                     	;# 
  1893  0595                     	;# 
  1894  0596                     	;# 
  1895  0597                     	;# 
  1896  059C                     	;# 
  1897  059D                     	;# 
  1898  059E                     	;# 
  1899  0611                     	;# 
  1900  0611                     	;# 
  1901  0612                     	;# 
  1902  0613                     	;# 
  1903  0614                     	;# 
  1904  0614                     	;# 
  1905  0615                     	;# 
  1906  0616                     	;# 
  1907  0617                     	;# 
  1908  0617                     	;# 
  1909  0618                     	;# 
  1910  0619                     	;# 
  1911  061A                     	;# 
  1912  061A                     	;# 
  1913  061B                     	;# 
  1914  061C                     	;# 
  1915  061D                     	;# 
  1916  061D                     	;# 
  1917  061E                     	;# 
  1918  061F                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  000F                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0013                     	;# 
  1950  0014                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  008F                     	;# 
  1964  0090                     	;# 
  1965  0091                     	;# 
  1966  0092                     	;# 
  1967  0093                     	;# 
  1968  0094                     	;# 
  1969  0095                     	;# 
  1970  0096                     	;# 
  1971  0097                     	;# 
  1972  0099                     	;# 
  1973  009A                     	;# 
  1974  009B                     	;# 
  1975  009B                     	;# 
  1976  009C                     	;# 
  1977  009D                     	;# 
  1978  009E                     	;# 
  1979  010C                     	;# 
  1980  010D                     	;# 
  1981  010E                     	;# 
  1982  010F                     	;# 
  1983  0110                     	;# 
  1984  0116                     	;# 
  1985  0117                     	;# 
  1986  011D                     	;# 
  1987  018C                     	;# 
  1988  018D                     	;# 
  1989  018F                     	;# 
  1990  0190                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  0199                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019A                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019C                     	;# 
  2014  019D                     	;# 
  2015  019D                     	;# 
  2016  019D                     	;# 
  2017  019E                     	;# 
  2018  019E                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  019F                     	;# 
  2022  019F                     	;# 
  2023  020D                     	;# 
  2024  020F                     	;# 
  2025  0210                     	;# 
  2026  0211                     	;# 
  2027  0211                     	;# 
  2028  0212                     	;# 
  2029  0212                     	;# 
  2030  0213                     	;# 
  2031  0213                     	;# 
  2032  0214                     	;# 
  2033  0214                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0216                     	;# 
  2038  0216                     	;# 
  2039  0217                     	;# 
  2040  0217                     	;# 
  2041  0219                     	;# 
  2042  021A                     	;# 
  2043  021B                     	;# 
  2044  021C                     	;# 
  2045  021D                     	;# 
  2046  021E                     	;# 
  2047  021F                     	;# 
  2048  028C                     	;# 
  2049  028D                     	;# 
  2050  0291                     	;# 
  2051  0291                     	;# 
  2052  0292                     	;# 
  2053  0293                     	;# 
  2054  0298                     	;# 
  2055  0298                     	;# 
  2056  0299                     	;# 
  2057  029A                     	;# 
  2058  029D                     	;# 
  2059  029E                     	;# 
  2060  029F                     	;# 
  2061  030C                     	;# 
  2062  030D                     	;# 
  2063  0311                     	;# 
  2064  0311                     	;# 
  2065  0312                     	;# 
  2066  0313                     	;# 
  2067  0318                     	;# 
  2068  0318                     	;# 
  2069  0319                     	;# 
  2070  031A                     	;# 
  2071  031C                     	;# 
  2072  031C                     	;# 
  2073  031D                     	;# 
  2074  031E                     	;# 
  2075  038C                     	;# 
  2076  038D                     	;# 
  2077  0394                     	;# 
  2078  0395                     	;# 
  2079  0396                     	;# 
  2080  040C                     	;# 
  2081  040D                     	;# 
  2082  0411                     	;# 
  2083  0411                     	;# 
  2084  0412                     	;# 
  2085  0413                     	;# 
  2086  0414                     	;# 
  2087  0415                     	;# 
  2088  0416                     	;# 
  2089  0417                     	;# 
  2090  0418                     	;# 
  2091  0418                     	;# 
  2092  0419                     	;# 
  2093  041A                     	;# 
  2094  041B                     	;# 
  2095  041C                     	;# 
  2096  041D                     	;# 
  2097  041E                     	;# 
  2098  048D                     	;# 
  2099  0491                     	;# 
  2100  0491                     	;# 
  2101  0492                     	;# 
  2102  0492                     	;# 
  2103  0493                     	;# 
  2104  0493                     	;# 
  2105  0493                     	;# 
  2106  0494                     	;# 
  2107  0494                     	;# 
  2108  0495                     	;# 
  2109  0495                     	;# 
  2110  0496                     	;# 
  2111  0496                     	;# 
  2112  0497                     	;# 
  2113  0497                     	;# 
  2114  0595                     	;# 
  2115  0596                     	;# 
  2116  0597                     	;# 
  2117  059C                     	;# 
  2118  059D                     	;# 
  2119  059E                     	;# 
  2120  0611                     	;# 
  2121  0611                     	;# 
  2122  0612                     	;# 
  2123  0613                     	;# 
  2124  0614                     	;# 
  2125  0614                     	;# 
  2126  0615                     	;# 
  2127  0616                     	;# 
  2128  0617                     	;# 
  2129  0617                     	;# 
  2130  0618                     	;# 
  2131  0619                     	;# 
  2132  061A                     	;# 
  2133  061A                     	;# 
  2134  061B                     	;# 
  2135  061C                     	;# 
  2136  061D                     	;# 
  2137  061D                     	;# 
  2138  061E                     	;# 
  2139  061F                     	;# 
  2140  0FE4                     	;# 
  2141  0FE5                     	;# 
  2142  0FE6                     	;# 
  2143  0FE7                     	;# 
  2144  0FE8                     	;# 
  2145  0FE9                     	;# 
  2146  0FEA                     	;# 
  2147  0FEB                     	;# 
  2148  0FED                     	;# 
  2149  0FEE                     	;# 
  2150  0FEF                     	;# 
  2151  0000                     	;# 
  2152  0001                     	;# 
  2153  0002                     	;# 
  2154  0003                     	;# 
  2155  0004                     	;# 
  2156  0005                     	;# 
  2157  0006                     	;# 
  2158  0007                     	;# 
  2159  0008                     	;# 
  2160  0009                     	;# 
  2161  000A                     	;# 
  2162  000B                     	;# 
  2163  000C                     	;# 
  2164  000D                     	;# 
  2165  000E                     	;# 
  2166  000F                     	;# 
  2167  0010                     	;# 
  2168  0011                     	;# 
  2169  0012                     	;# 
  2170  0013                     	;# 
  2171  0014                     	;# 
  2172  0015                     	;# 
  2173  0016                     	;# 
  2174  0016                     	;# 
  2175  0017                     	;# 
  2176  0018                     	;# 
  2177  0019                     	;# 
  2178  001A                     	;# 
  2179  001B                     	;# 
  2180  001C                     	;# 
  2181  008C                     	;# 
  2182  008D                     	;# 
  2183  008E                     	;# 
  2184  008F                     	;# 
  2185  0090                     	;# 
  2186  0091                     	;# 
  2187  0092                     	;# 
  2188  0093                     	;# 
  2189  0094                     	;# 
  2190  0095                     	;# 
  2191  0096                     	;# 
  2192  0097                     	;# 
  2193  0099                     	;# 
  2194  009A                     	;# 
  2195  009B                     	;# 
  2196  009B                     	;# 
  2197  009C                     	;# 
  2198  009D                     	;# 
  2199  009E                     	;# 
  2200  010C                     	;# 
  2201  010D                     	;# 
  2202  010E                     	;# 
  2203  010F                     	;# 
  2204  0110                     	;# 
  2205  0116                     	;# 
  2206  0117                     	;# 
  2207  011D                     	;# 
  2208  018C                     	;# 
  2209  018D                     	;# 
  2210  018F                     	;# 
  2211  0190                     	;# 
  2212  0191                     	;# 
  2213  0191                     	;# 
  2214  0192                     	;# 
  2215  0193                     	;# 
  2216  0193                     	;# 
  2217  0194                     	;# 
  2218  0195                     	;# 
  2219  0196                     	;# 
  2220  0197                     	;# 
  2221  0199                     	;# 
  2222  0199                     	;# 
  2223  0199                     	;# 
  2224  019A                     	;# 
  2225  019A                     	;# 
  2226  019A                     	;# 
  2227  019B                     	;# 
  2228  019B                     	;# 
  2229  019B                     	;# 
  2230  019B                     	;# 
  2231  019B                     	;# 
  2232  019C                     	;# 
  2233  019C                     	;# 
  2234  019C                     	;# 
  2235  019D                     	;# 
  2236  019D                     	;# 
  2237  019D                     	;# 
  2238  019E                     	;# 
  2239  019E                     	;# 
  2240  019E                     	;# 
  2241  019F                     	;# 
  2242  019F                     	;# 
  2243  019F                     	;# 
  2244  020D                     	;# 
  2245  020F                     	;# 
  2246  0210                     	;# 
  2247  0211                     	;# 
  2248  0211                     	;# 
  2249  0212                     	;# 
  2250  0212                     	;# 
  2251  0213                     	;# 
  2252  0213                     	;# 
  2253  0214                     	;# 
  2254  0214                     	;# 
  2255  0215                     	;# 
  2256  0215                     	;# 
  2257  0215                     	;# 
  2258  0216                     	;# 
  2259  0216                     	;# 
  2260  0217                     	;# 
  2261  0217                     	;# 
  2262  0219                     	;# 
  2263  021A                     	;# 
  2264  021B                     	;# 
  2265  021C                     	;# 
  2266  021D                     	;# 
  2267  021E                     	;# 
  2268  021F                     	;# 
  2269  028C                     	;# 
  2270  028D                     	;# 
  2271  0291                     	;# 
  2272  0291                     	;# 
  2273  0292                     	;# 
  2274  0293                     	;# 
  2275  0298                     	;# 
  2276  0298                     	;# 
  2277  0299                     	;# 
  2278  029A                     	;# 
  2279  029D                     	;# 
  2280  029E                     	;# 
  2281  029F                     	;# 
  2282  030C                     	;# 
  2283  030D                     	;# 
  2284  0311                     	;# 
  2285  0311                     	;# 
  2286  0312                     	;# 
  2287  0313                     	;# 
  2288  0318                     	;# 
  2289  0318                     	;# 
  2290  0319                     	;# 
  2291  031A                     	;# 
  2292  031C                     	;# 
  2293  031C                     	;# 
  2294  031D                     	;# 
  2295  031E                     	;# 
  2296  038C                     	;# 
  2297  038D                     	;# 
  2298  0394                     	;# 
  2299  0395                     	;# 
  2300  0396                     	;# 
  2301  040C                     	;# 
  2302  040D                     	;# 
  2303  0411                     	;# 
  2304  0411                     	;# 
  2305  0412                     	;# 
  2306  0413                     	;# 
  2307  0414                     	;# 
  2308  0415                     	;# 
  2309  0416                     	;# 
  2310  0417                     	;# 
  2311  0418                     	;# 
  2312  0418                     	;# 
  2313  0419                     	;# 
  2314  041A                     	;# 
  2315  041B                     	;# 
  2316  041C                     	;# 
  2317  041D                     	;# 
  2318  041E                     	;# 
  2319  048D                     	;# 
  2320  0491                     	;# 
  2321  0491                     	;# 
  2322  0492                     	;# 
  2323  0492                     	;# 
  2324  0493                     	;# 
  2325  0493                     	;# 
  2326  0493                     	;# 
  2327  0494                     	;# 
  2328  0494                     	;# 
  2329  0495                     	;# 
  2330  0495                     	;# 
  2331  0496                     	;# 
  2332  0496                     	;# 
  2333  0497                     	;# 
  2334  0497                     	;# 
  2335  0595                     	;# 
  2336  0596                     	;# 
  2337  0597                     	;# 
  2338  059C                     	;# 
  2339  059D                     	;# 
  2340  059E                     	;# 
  2341  0611                     	;# 
  2342  0611                     	;# 
  2343  0612                     	;# 
  2344  0613                     	;# 
  2345  0614                     	;# 
  2346  0614                     	;# 
  2347  0615                     	;# 
  2348  0616                     	;# 
  2349  0617                     	;# 
  2350  0617                     	;# 
  2351  0618                     	;# 
  2352  0619                     	;# 
  2353  061A                     	;# 
  2354  061A                     	;# 
  2355  061B                     	;# 
  2356  061C                     	;# 
  2357  061D                     	;# 
  2358  061D                     	;# 
  2359  061E                     	;# 
  2360  061F                     	;# 
  2361  0FE4                     	;# 
  2362  0FE5                     	;# 
  2363  0FE6                     	;# 
  2364  0FE7                     	;# 
  2365  0FE8                     	;# 
  2366  0FE9                     	;# 
  2367  0FEA                     	;# 
  2368  0FEB                     	;# 
  2369  0FED                     	;# 
  2370  0FEE                     	;# 
  2371  0FEF                     	;# 
  2372  0000                     	;# 
  2373  0001                     	;# 
  2374  0002                     	;# 
  2375  0003                     	;# 
  2376  0004                     	;# 
  2377  0005                     	;# 
  2378  0006                     	;# 
  2379  0007                     	;# 
  2380  0008                     	;# 
  2381  0009                     	;# 
  2382  000A                     	;# 
  2383  000B                     	;# 
  2384  000C                     	;# 
  2385  000D                     	;# 
  2386  000E                     	;# 
  2387  000F                     	;# 
  2388  0010                     	;# 
  2389  0011                     	;# 
  2390  0012                     	;# 
  2391  0013                     	;# 
  2392  0014                     	;# 
  2393  0015                     	;# 
  2394  0016                     	;# 
  2395  0016                     	;# 
  2396  0017                     	;# 
  2397  0018                     	;# 
  2398  0019                     	;# 
  2399  001A                     	;# 
  2400  001B                     	;# 
  2401  001C                     	;# 
  2402  008C                     	;# 
  2403  008D                     	;# 
  2404  008E                     	;# 
  2405  008F                     	;# 
  2406  0090                     	;# 
  2407  0091                     	;# 
  2408  0092                     	;# 
  2409  0093                     	;# 
  2410  0094                     	;# 
  2411  0095                     	;# 
  2412  0096                     	;# 
  2413  0097                     	;# 
  2414  0099                     	;# 
  2415  009A                     	;# 
  2416  009B                     	;# 
  2417  009B                     	;# 
  2418  009C                     	;# 
  2419  009D                     	;# 
  2420  009E                     	;# 
  2421  010C                     	;# 
  2422  010D                     	;# 
  2423  010E                     	;# 
  2424  010F                     	;# 
  2425  0110                     	;# 
  2426  0116                     	;# 
  2427  0117                     	;# 
  2428  011D                     	;# 
  2429  018C                     	;# 
  2430  018D                     	;# 
  2431  018F                     	;# 
  2432  0190                     	;# 
  2433  0191                     	;# 
  2434  0191                     	;# 
  2435  0192                     	;# 
  2436  0193                     	;# 
  2437  0193                     	;# 
  2438  0194                     	;# 
  2439  0195                     	;# 
  2440  0196                     	;# 
  2441  0197                     	;# 
  2442  0199                     	;# 
  2443  0199                     	;# 
  2444  0199                     	;# 
  2445  019A                     	;# 
  2446  019A                     	;# 
  2447  019A                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019B                     	;# 
  2452  019B                     	;# 
  2453  019C                     	;# 
  2454  019C                     	;# 
  2455  019C                     	;# 
  2456  019D                     	;# 
  2457  019D                     	;# 
  2458  019D                     	;# 
  2459  019E                     	;# 
  2460  019E                     	;# 
  2461  019E                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  020D                     	;# 
  2466  020F                     	;# 
  2467  0210                     	;# 
  2468  0211                     	;# 
  2469  0211                     	;# 
  2470  0212                     	;# 
  2471  0212                     	;# 
  2472  0213                     	;# 
  2473  0213                     	;# 
  2474  0214                     	;# 
  2475  0214                     	;# 
  2476  0215                     	;# 
  2477  0215                     	;# 
  2478  0215                     	;# 
  2479  0216                     	;# 
  2480  0216                     	;# 
  2481  0217                     	;# 
  2482  0217                     	;# 
  2483  0219                     	;# 
  2484  021A                     	;# 
  2485  021B                     	;# 
  2486  021C                     	;# 
  2487  021D                     	;# 
  2488  021E                     	;# 
  2489  021F                     	;# 
  2490  028C                     	;# 
  2491  028D                     	;# 
  2492  0291                     	;# 
  2493  0291                     	;# 
  2494  0292                     	;# 
  2495  0293                     	;# 
  2496  0298                     	;# 
  2497  0298                     	;# 
  2498  0299                     	;# 
  2499  029A                     	;# 
  2500  029D                     	;# 
  2501  029E                     	;# 
  2502  029F                     	;# 
  2503  030C                     	;# 
  2504  030D                     	;# 
  2505  0311                     	;# 
  2506  0311                     	;# 
  2507  0312                     	;# 
  2508  0313                     	;# 
  2509  0318                     	;# 
  2510  0318                     	;# 
  2511  0319                     	;# 
  2512  031A                     	;# 
  2513  031C                     	;# 
  2514  031C                     	;# 
  2515  031D                     	;# 
  2516  031E                     	;# 
  2517  038C                     	;# 
  2518  038D                     	;# 
  2519  0394                     	;# 
  2520  0395                     	;# 
  2521  0396                     	;# 
  2522  040C                     	;# 
  2523  040D                     	;# 
  2524  0411                     	;# 
  2525  0411                     	;# 
  2526  0412                     	;# 
  2527  0413                     	;# 
  2528  0414                     	;# 
  2529  0415                     	;# 
  2530  0416                     	;# 
  2531  0417                     	;# 
  2532  0418                     	;# 
  2533  0418                     	;# 
  2534  0419                     	;# 
  2535  041A                     	;# 
  2536  041B                     	;# 
  2537  041C                     	;# 
  2538  041D                     	;# 
  2539  041E                     	;# 
  2540  048D                     	;# 
  2541  0491                     	;# 
  2542  0491                     	;# 
  2543  0492                     	;# 
  2544  0492                     	;# 
  2545  0493                     	;# 
  2546  0493                     	;# 
  2547  0493                     	;# 
  2548  0494                     	;# 
  2549  0494                     	;# 
  2550  0495                     	;# 
  2551  0495                     	;# 
  2552  0496                     	;# 
  2553  0496                     	;# 
  2554  0497                     	;# 
  2555  0497                     	;# 
  2556  0595                     	;# 
  2557  0596                     	;# 
  2558  0597                     	;# 
  2559  059C                     	;# 
  2560  059D                     	;# 
  2561  059E                     	;# 
  2562  0611                     	;# 
  2563  0611                     	;# 
  2564  0612                     	;# 
  2565  0613                     	;# 
  2566  0614                     	;# 
  2567  0614                     	;# 
  2568  0615                     	;# 
  2569  0616                     	;# 
  2570  0617                     	;# 
  2571  0617                     	;# 
  2572  0618                     	;# 
  2573  0619                     	;# 
  2574  061A                     	;# 
  2575  061A                     	;# 
  2576  061B                     	;# 
  2577  061C                     	;# 
  2578  061D                     	;# 
  2579  061D                     	;# 
  2580  061E                     	;# 
  2581  061F                     	;# 
  2582  0FE4                     	;# 
  2583  0FE5                     	;# 
  2584  0FE6                     	;# 
  2585  0FE7                     	;# 
  2586  0FE8                     	;# 
  2587  0FE9                     	;# 
  2588  0FEA                     	;# 
  2589  0FEB                     	;# 
  2590  0FED                     	;# 
  2591  0FEE                     	;# 
  2592  0FEF                     	;# 
  2593  0000                     	;# 
  2594  0001                     	;# 
  2595  0002                     	;# 
  2596  0003                     	;# 
  2597  0004                     	;# 
  2598  0005                     	;# 
  2599  0006                     	;# 
  2600  0007                     	;# 
  2601  0008                     	;# 
  2602  0009                     	;# 
  2603  000A                     	;# 
  2604  000B                     	;# 
  2605  000C                     	;# 
  2606  000D                     	;# 
  2607  000E                     	;# 
  2608  000F                     	;# 
  2609  0010                     	;# 
  2610  0011                     	;# 
  2611  0012                     	;# 
  2612  0013                     	;# 
  2613  0014                     	;# 
  2614  0015                     	;# 
  2615  0016                     	;# 
  2616  0016                     	;# 
  2617  0017                     	;# 
  2618  0018                     	;# 
  2619  0019                     	;# 
  2620  001A                     	;# 
  2621  001B                     	;# 
  2622  001C                     	;# 
  2623  008C                     	;# 
  2624  008D                     	;# 
  2625  008E                     	;# 
  2626  008F                     	;# 
  2627  0090                     	;# 
  2628  0091                     	;# 
  2629  0092                     	;# 
  2630  0093                     	;# 
  2631  0094                     	;# 
  2632  0095                     	;# 
  2633  0096                     	;# 
  2634  0097                     	;# 
  2635  0099                     	;# 
  2636  009A                     	;# 
  2637  009B                     	;# 
  2638  009B                     	;# 
  2639  009C                     	;# 
  2640  009D                     	;# 
  2641  009E                     	;# 
  2642  010C                     	;# 
  2643  010D                     	;# 
  2644  010E                     	;# 
  2645  010F                     	;# 
  2646  0110                     	;# 
  2647  0116                     	;# 
  2648  0117                     	;# 
  2649  011D                     	;# 
  2650  018C                     	;# 
  2651  018D                     	;# 
  2652  018F                     	;# 
  2653  0190                     	;# 
  2654  0191                     	;# 
  2655  0191                     	;# 
  2656  0192                     	;# 
  2657  0193                     	;# 
  2658  0193                     	;# 
  2659  0194                     	;# 
  2660  0195                     	;# 
  2661  0196                     	;# 
  2662  0197                     	;# 
  2663  0199                     	;# 
  2664  0199                     	;# 
  2665  0199                     	;# 
  2666  019A                     	;# 
  2667  019A                     	;# 
  2668  019A                     	;# 
  2669  019B                     	;# 
  2670  019B                     	;# 
  2671  019B                     	;# 
  2672  019B                     	;# 
  2673  019B                     	;# 
  2674  019C                     	;# 
  2675  019C                     	;# 
  2676  019C                     	;# 
  2677  019D                     	;# 
  2678  019D                     	;# 
  2679  019D                     	;# 
  2680  019E                     	;# 
  2681  019E                     	;# 
  2682  019E                     	;# 
  2683  019F                     	;# 
  2684  019F                     	;# 
  2685  019F                     	;# 
  2686  020D                     	;# 
  2687  020F                     	;# 
  2688  0210                     	;# 
  2689  0211                     	;# 
  2690  0211                     	;# 
  2691  0212                     	;# 
  2692  0212                     	;# 
  2693  0213                     	;# 
  2694  0213                     	;# 
  2695  0214                     	;# 
  2696  0214                     	;# 
  2697  0215                     	;# 
  2698  0215                     	;# 
  2699  0215                     	;# 
  2700  0216                     	;# 
  2701  0216                     	;# 
  2702  0217                     	;# 
  2703  0217                     	;# 
  2704  0219                     	;# 
  2705  021A                     	;# 
  2706  021B                     	;# 
  2707  021C                     	;# 
  2708  021D                     	;# 
  2709  021E                     	;# 
  2710  021F                     	;# 
  2711  028C                     	;# 
  2712  028D                     	;# 
  2713  0291                     	;# 
  2714  0291                     	;# 
  2715  0292                     	;# 
  2716  0293                     	;# 
  2717  0298                     	;# 
  2718  0298                     	;# 
  2719  0299                     	;# 
  2720  029A                     	;# 
  2721  029D                     	;# 
  2722  029E                     	;# 
  2723  029F                     	;# 
  2724  030C                     	;# 
  2725  030D                     	;# 
  2726  0311                     	;# 
  2727  0311                     	;# 
  2728  0312                     	;# 
  2729  0313                     	;# 
  2730  0318                     	;# 
  2731  0318                     	;# 
  2732  0319                     	;# 
  2733  031A                     	;# 
  2734  031C                     	;# 
  2735  031C                     	;# 
  2736  031D                     	;# 
  2737  031E                     	;# 
  2738  038C                     	;# 
  2739  038D                     	;# 
  2740  0394                     	;# 
  2741  0395                     	;# 
  2742  0396                     	;# 
  2743  040C                     	;# 
  2744  040D                     	;# 
  2745  0411                     	;# 
  2746  0411                     	;# 
  2747  0412                     	;# 
  2748  0413                     	;# 
  2749  0414                     	;# 
  2750  0415                     	;# 
  2751  0416                     	;# 
  2752  0417                     	;# 
  2753  0418                     	;# 
  2754  0418                     	;# 
  2755  0419                     	;# 
  2756  041A                     	;# 
  2757  041B                     	;# 
  2758  041C                     	;# 
  2759  041D                     	;# 
  2760  041E                     	;# 
  2761  048D                     	;# 
  2762  0491                     	;# 
  2763  0491                     	;# 
  2764  0492                     	;# 
  2765  0492                     	;# 
  2766  0493                     	;# 
  2767  0493                     	;# 
  2768  0493                     	;# 
  2769  0494                     	;# 
  2770  0494                     	;# 
  2771  0495                     	;# 
  2772  0495                     	;# 
  2773  0496                     	;# 
  2774  0496                     	;# 
  2775  0497                     	;# 
  2776  0497                     	;# 
  2777  0595                     	;# 
  2778  0596                     	;# 
  2779  0597                     	;# 
  2780  059C                     	;# 
  2781  059D                     	;# 
  2782  059E                     	;# 
  2783  0611                     	;# 
  2784  0611                     	;# 
  2785  0612                     	;# 
  2786  0613                     	;# 
  2787  0614                     	;# 
  2788  0614                     	;# 
  2789  0615                     	;# 
  2790  0616                     	;# 
  2791  0617                     	;# 
  2792  0617                     	;# 
  2793  0618                     	;# 
  2794  0619                     	;# 
  2795  061A                     	;# 
  2796  061A                     	;# 
  2797  061B                     	;# 
  2798  061C                     	;# 
  2799  061D                     	;# 
  2800  061D                     	;# 
  2801  061E                     	;# 
  2802  061F                     	;# 
  2803  0FE4                     	;# 
  2804  0FE5                     	;# 
  2805  0FE6                     	;# 
  2806  0FE7                     	;# 
  2807  0FE8                     	;# 
  2808  0FE9                     	;# 
  2809  0FEA                     	;# 
  2810  0FEB                     	;# 
  2811  0FED                     	;# 
  2812  0FEE                     	;# 
  2813  0FEF                     	;# 
  2814  0000                     	;# 
  2815  0001                     	;# 
  2816  0002                     	;# 
  2817  0003                     	;# 
  2818  0004                     	;# 
  2819  0005                     	;# 
  2820  0006                     	;# 
  2821  0007                     	;# 
  2822  0008                     	;# 
  2823  0009                     	;# 
  2824  000A                     	;# 
  2825  000B                     	;# 
  2826  000C                     	;# 
  2827  000D                     	;# 
  2828  000E                     	;# 
  2829  000F                     	;# 
  2830  0010                     	;# 
  2831  0011                     	;# 
  2832  0012                     	;# 
  2833  0013                     	;# 
  2834  0014                     	;# 
  2835  0015                     	;# 
  2836  0016                     	;# 
  2837  0016                     	;# 
  2838  0017                     	;# 
  2839  0018                     	;# 
  2840  0019                     	;# 
  2841  001A                     	;# 
  2842  001B                     	;# 
  2843  001C                     	;# 
  2844  008C                     	;# 
  2845  008D                     	;# 
  2846  008E                     	;# 
  2847  008F                     	;# 
  2848  0090                     	;# 
  2849  0091                     	;# 
  2850  0092                     	;# 
  2851  0093                     	;# 
  2852  0094                     	;# 
  2853  0095                     	;# 
  2854  0096                     	;# 
  2855  0097                     	;# 
  2856  0099                     	;# 
  2857  009A                     	;# 
  2858  009B                     	;# 
  2859  009B                     	;# 
  2860  009C                     	;# 
  2861  009D                     	;# 
  2862  009E                     	;# 
  2863  010C                     	;# 
  2864  010D                     	;# 
  2865  010E                     	;# 
  2866  010F                     	;# 
  2867  0110                     	;# 
  2868  0116                     	;# 
  2869  0117                     	;# 
  2870  011D                     	;# 
  2871  018C                     	;# 
  2872  018D                     	;# 
  2873  018F                     	;# 
  2874  0190                     	;# 
  2875  0191                     	;# 
  2876  0191                     	;# 
  2877  0192                     	;# 
  2878  0193                     	;# 
  2879  0193                     	;# 
  2880  0194                     	;# 
  2881  0195                     	;# 
  2882  0196                     	;# 
  2883  0197                     	;# 
  2884  0199                     	;# 
  2885  0199                     	;# 
  2886  0199                     	;# 
  2887  019A                     	;# 
  2888  019A                     	;# 
  2889  019A                     	;# 
  2890  019B                     	;# 
  2891  019B                     	;# 
  2892  019B                     	;# 
  2893  019B                     	;# 
  2894  019B                     	;# 
  2895  019C                     	;# 
  2896  019C                     	;# 
  2897  019C                     	;# 
  2898  019D                     	;# 
  2899  019D                     	;# 
  2900  019D                     	;# 
  2901  019E                     	;# 
  2902  019E                     	;# 
  2903  019E                     	;# 
  2904  019F                     	;# 
  2905  019F                     	;# 
  2906  019F                     	;# 
  2907  020D                     	;# 
  2908  020F                     	;# 
  2909  0210                     	;# 
  2910  0211                     	;# 
  2911  0211                     	;# 
  2912  0212                     	;# 
  2913  0212                     	;# 
  2914  0213                     	;# 
  2915  0213                     	;# 
  2916  0214                     	;# 
  2917  0214                     	;# 
  2918  0215                     	;# 
  2919  0215                     	;# 
  2920  0215                     	;# 
  2921  0216                     	;# 
  2922  0216                     	;# 
  2923  0217                     	;# 
  2924  0217                     	;# 
  2925  0219                     	;# 
  2926  021A                     	;# 
  2927  021B                     	;# 
  2928  021C                     	;# 
  2929  021D                     	;# 
  2930  021E                     	;# 
  2931  021F                     	;# 
  2932  028C                     	;# 
  2933  028D                     	;# 
  2934  0291                     	;# 
  2935  0291                     	;# 
  2936  0292                     	;# 
  2937  0293                     	;# 
  2938  0298                     	;# 
  2939  0298                     	;# 
  2940  0299                     	;# 
  2941  029A                     	;# 
  2942  029D                     	;# 
  2943  029E                     	;# 
  2944  029F                     	;# 
  2945  030C                     	;# 
  2946  030D                     	;# 
  2947  0311                     	;# 
  2948  0311                     	;# 
  2949  0312                     	;# 
  2950  0313                     	;# 
  2951  0318                     	;# 
  2952  0318                     	;# 
  2953  0319                     	;# 
  2954  031A                     	;# 
  2955  031C                     	;# 
  2956  031C                     	;# 
  2957  031D                     	;# 
  2958  031E                     	;# 
  2959  038C                     	;# 
  2960  038D                     	;# 
  2961  0394                     	;# 
  2962  0395                     	;# 
  2963  0396                     	;# 
  2964  040C                     	;# 
  2965  040D                     	;# 
  2966  0411                     	;# 
  2967  0411                     	;# 
  2968  0412                     	;# 
  2969  0413                     	;# 
  2970  0414                     	;# 
  2971  0415                     	;# 
  2972  0416                     	;# 
  2973  0417                     	;# 
  2974  0418                     	;# 
  2975  0418                     	;# 
  2976  0419                     	;# 
  2977  041A                     	;# 
  2978  041B                     	;# 
  2979  041C                     	;# 
  2980  041D                     	;# 
  2981  041E                     	;# 
  2982  048D                     	;# 
  2983  0491                     	;# 
  2984  0491                     	;# 
  2985  0492                     	;# 
  2986  0492                     	;# 
  2987  0493                     	;# 
  2988  0493                     	;# 
  2989  0493                     	;# 
  2990  0494                     	;# 
  2991  0494                     	;# 
  2992  0495                     	;# 
  2993  0495                     	;# 
  2994  0496                     	;# 
  2995  0496                     	;# 
  2996  0497                     	;# 
  2997  0497                     	;# 
  2998  0595                     	;# 
  2999  0596                     	;# 
  3000  0597                     	;# 
  3001  059C                     	;# 
  3002  059D                     	;# 
  3003  059E                     	;# 
  3004  0611                     	;# 
  3005  0611                     	;# 
  3006  0612                     	;# 
  3007  0613                     	;# 
  3008  0614                     	;# 
  3009  0614                     	;# 
  3010  0615                     	;# 
  3011  0616                     	;# 
  3012  0617                     	;# 
  3013  0617                     	;# 
  3014  0618                     	;# 
  3015  0619                     	;# 
  3016  061A                     	;# 
  3017  061A                     	;# 
  3018  061B                     	;# 
  3019  061C                     	;# 
  3020  061D                     	;# 
  3021  061D                     	;# 
  3022  061E                     	;# 
  3023  061F                     	;# 
  3024  0FE4                     	;# 
  3025  0FE5                     	;# 
  3026  0FE6                     	;# 
  3027  0FE7                     	;# 
  3028  0FE8                     	;# 
  3029  0FE9                     	;# 
  3030  0FEA                     	;# 
  3031  0FEB                     	;# 
  3032  0FED                     	;# 
  3033  0FEE                     	;# 
  3034  0FEF                     	;# 
  3035  0000                     	;# 
  3036  0001                     	;# 
  3037  0002                     	;# 
  3038  0003                     	;# 
  3039  0004                     	;# 
  3040  0005                     	;# 
  3041  0006                     	;# 
  3042  0007                     	;# 
  3043  0008                     	;# 
  3044  0009                     	;# 
  3045  000A                     	;# 
  3046  000B                     	;# 
  3047  000C                     	;# 
  3048  000D                     	;# 
  3049  000E                     	;# 
  3050  000F                     	;# 
  3051  0010                     	;# 
  3052  0011                     	;# 
  3053  0012                     	;# 
  3054  0013                     	;# 
  3055  0014                     	;# 
  3056  0015                     	;# 
  3057  0016                     	;# 
  3058  0016                     	;# 
  3059  0017                     	;# 
  3060  0018                     	;# 
  3061  0019                     	;# 
  3062  001A                     	;# 
  3063  001B                     	;# 
  3064  001C                     	;# 
  3065  008C                     	;# 
  3066  008D                     	;# 
  3067  008E                     	;# 
  3068  008F                     	;# 
  3069  0090                     	;# 
  3070  0091                     	;# 
  3071  0092                     	;# 
  3072  0093                     	;# 
  3073  0094                     	;# 
  3074  0095                     	;# 
  3075  0096                     	;# 
  3076  0097                     	;# 
  3077  0099                     	;# 
  3078  009A                     	;# 
  3079  009B                     	;# 
  3080  009B                     	;# 
  3081  009C                     	;# 
  3082  009D                     	;# 
  3083  009E                     	;# 
  3084  010C                     	;# 
  3085  010D                     	;# 
  3086  010E                     	;# 
  3087  010F                     	;# 
  3088  0110                     	;# 
  3089  0116                     	;# 
  3090  0117                     	;# 
  3091  011D                     	;# 
  3092  018C                     	;# 
  3093  018D                     	;# 
  3094  018F                     	;# 
  3095  0190                     	;# 
  3096  0191                     	;# 
  3097  0191                     	;# 
  3098  0192                     	;# 
  3099  0193                     	;# 
  3100  0193                     	;# 
  3101  0194                     	;# 
  3102  0195                     	;# 
  3103  0196                     	;# 
  3104  0197                     	;# 
  3105  0199                     	;# 
  3106  0199                     	;# 
  3107  0199                     	;# 
  3108  019A                     	;# 
  3109  019A                     	;# 
  3110  019A                     	;# 
  3111  019B                     	;# 
  3112  019B                     	;# 
  3113  019B                     	;# 
  3114  019B                     	;# 
  3115  019B                     	;# 
  3116  019C                     	;# 
  3117  019C                     	;# 
  3118  019C                     	;# 
  3119  019D                     	;# 
  3120  019D                     	;# 
  3121  019D                     	;# 
  3122  019E                     	;# 
  3123  019E                     	;# 
  3124  019E                     	;# 
  3125  019F                     	;# 
  3126  019F                     	;# 
  3127  019F                     	;# 
  3128  020D                     	;# 
  3129  020F                     	;# 
  3130  0210                     	;# 
  3131  0211                     	;# 
  3132  0211                     	;# 
  3133  0212                     	;# 
  3134  0212                     	;# 
  3135  0213                     	;# 
  3136  0213                     	;# 
  3137  0214                     	;# 
  3138  0214                     	;# 
  3139  0215                     	;# 
  3140  0215                     	;# 
  3141  0215                     	;# 
  3142  0216                     	;# 
  3143  0216                     	;# 
  3144  0217                     	;# 
  3145  0217                     	;# 
  3146  0219                     	;# 
  3147  021A                     	;# 
  3148  021B                     	;# 
  3149  021C                     	;# 
  3150  021D                     	;# 
  3151  021E                     	;# 
  3152  021F                     	;# 
  3153  028C                     	;# 
  3154  028D                     	;# 
  3155  0291                     	;# 
  3156  0291                     	;# 
  3157  0292                     	;# 
  3158  0293                     	;# 
  3159  0298                     	;# 
  3160  0298                     	;# 
  3161  0299                     	;# 
  3162  029A                     	;# 
  3163  029D                     	;# 
  3164  029E                     	;# 
  3165  029F                     	;# 
  3166  030C                     	;# 
  3167  030D                     	;# 
  3168  0311                     	;# 
  3169  0311                     	;# 
  3170  0312                     	;# 
  3171  0313                     	;# 
  3172  0318                     	;# 
  3173  0318                     	;# 
  3174  0319                     	;# 
  3175  031A                     	;# 
  3176  031C                     	;# 
  3177  031C                     	;# 
  3178  031D                     	;# 
  3179  031E                     	;# 
  3180  038C                     	;# 
  3181  038D                     	;# 
  3182  0394                     	;# 
  3183  0395                     	;# 
  3184  0396                     	;# 
  3185  040C                     	;# 
  3186  040D                     	;# 
  3187  0411                     	;# 
  3188  0411                     	;# 
  3189  0412                     	;# 
  3190  0413                     	;# 
  3191  0414                     	;# 
  3192  0415                     	;# 
  3193  0416                     	;# 
  3194  0417                     	;# 
  3195  0418                     	;# 
  3196  0418                     	;# 
  3197  0419                     	;# 
  3198  041A                     	;# 
  3199  041B                     	;# 
  3200  041C                     	;# 
  3201  041D                     	;# 
  3202  041E                     	;# 
  3203  048D                     	;# 
  3204  0491                     	;# 
  3205  0491                     	;# 
  3206  0492                     	;# 
  3207  0492                     	;# 
  3208  0493                     	;# 
  3209  0493                     	;# 
  3210  0493                     	;# 
  3211  0494                     	;# 
  3212  0494                     	;# 
  3213  0495                     	;# 
  3214  0495                     	;# 
  3215  0496                     	;# 
  3216  0496                     	;# 
  3217  0497                     	;# 
  3218  0497                     	;# 
  3219  0595                     	;# 
  3220  0596                     	;# 
  3221  0597                     	;# 
  3222  059C                     	;# 
  3223  059D                     	;# 
  3224  059E                     	;# 
  3225  0611                     	;# 
  3226  0611                     	;# 
  3227  0612                     	;# 
  3228  0613                     	;# 
  3229  0614                     	;# 
  3230  0614                     	;# 
  3231  0615                     	;# 
  3232  0616                     	;# 
  3233  0617                     	;# 
  3234  0617                     	;# 
  3235  0618                     	;# 
  3236  0619                     	;# 
  3237  061A                     	;# 
  3238  061A                     	;# 
  3239  061B                     	;# 
  3240  061C                     	;# 
  3241  061D                     	;# 
  3242  061D                     	;# 
  3243  061E                     	;# 
  3244  061F                     	;# 
  3245  0FE4                     	;# 
  3246  0FE5                     	;# 
  3247  0FE6                     	;# 
  3248  0FE7                     	;# 
  3249  0FE8                     	;# 
  3250  0FE9                     	;# 
  3251  0FEA                     	;# 
  3252  0FEB                     	;# 
  3253  0FED                     	;# 
  3254  0FEE                     	;# 
  3255  0FEF                     	;# 
  3256  0000                     	;# 
  3257  0001                     	;# 
  3258  0002                     	;# 
  3259  0003                     	;# 
  3260  0004                     	;# 
  3261  0005                     	;# 
  3262  0006                     	;# 
  3263  0007                     	;# 
  3264  0008                     	;# 
  3265  0009                     	;# 
  3266  000A                     	;# 
  3267  000B                     	;# 
  3268  000C                     	;# 
  3269  000D                     	;# 
  3270  000E                     	;# 
  3271  000F                     	;# 
  3272  0010                     	;# 
  3273  0011                     	;# 
  3274  0012                     	;# 
  3275  0013                     	;# 
  3276  0014                     	;# 
  3277  0015                     	;# 
  3278  0016                     	;# 
  3279  0016                     	;# 
  3280  0017                     	;# 
  3281  0018                     	;# 
  3282  0019                     	;# 
  3283  001A                     	;# 
  3284  001B                     	;# 
  3285  001C                     	;# 
  3286  008C                     	;# 
  3287  008D                     	;# 
  3288  008E                     	;# 
  3289  008F                     	;# 
  3290  0090                     	;# 
  3291  0091                     	;# 
  3292  0092                     	;# 
  3293  0093                     	;# 
  3294  0094                     	;# 
  3295  0095                     	;# 
  3296  0096                     	;# 
  3297  0097                     	;# 
  3298  0099                     	;# 
  3299  009A                     	;# 
  3300  009B                     	;# 
  3301  009B                     	;# 
  3302  009C                     	;# 
  3303  009D                     	;# 
  3304  009E                     	;# 
  3305  010C                     	;# 
  3306  010D                     	;# 
  3307  010E                     	;# 
  3308  010F                     	;# 
  3309  0110                     	;# 
  3310  0116                     	;# 
  3311  0117                     	;# 
  3312  011D                     	;# 
  3313  018C                     	;# 
  3314  018D                     	;# 
  3315  018F                     	;# 
  3316  0190                     	;# 
  3317  0191                     	;# 
  3318  0191                     	;# 
  3319  0192                     	;# 
  3320  0193                     	;# 
  3321  0193                     	;# 
  3322  0194                     	;# 
  3323  0195                     	;# 
  3324  0196                     	;# 
  3325  0197                     	;# 
  3326  0199                     	;# 
  3327  0199                     	;# 
  3328  0199                     	;# 
  3329  019A                     	;# 
  3330  019A                     	;# 
  3331  019A                     	;# 
  3332  019B                     	;# 
  3333  019B                     	;# 
  3334  019B                     	;# 
  3335  019B                     	;# 
  3336  019B                     	;# 
  3337  019C                     	;# 
  3338  019C                     	;# 
  3339  019C                     	;# 
  3340  019D                     	;# 
  3341  019D                     	;# 
  3342  019D                     	;# 
  3343  019E                     	;# 
  3344  019E                     	;# 
  3345  019E                     	;# 
  3346  019F                     	;# 
  3347  019F                     	;# 
  3348  019F                     	;# 
  3349  020D                     	;# 
  3350  020F                     	;# 
  3351  0210                     	;# 
  3352  0211                     	;# 
  3353  0211                     	;# 
  3354  0212                     	;# 
  3355  0212                     	;# 
  3356  0213                     	;# 
  3357  0213                     	;# 
  3358  0214                     	;# 
  3359  0214                     	;# 
  3360  0215                     	;# 
  3361  0215                     	;# 
  3362  0215                     	;# 
  3363  0216                     	;# 
  3364  0216                     	;# 
  3365  0217                     	;# 
  3366  0217                     	;# 
  3367  0219                     	;# 
  3368  021A                     	;# 
  3369  021B                     	;# 
  3370  021C                     	;# 
  3371  021D                     	;# 
  3372  021E                     	;# 
  3373  021F                     	;# 
  3374  028C                     	;# 
  3375  028D                     	;# 
  3376  0291                     	;# 
  3377  0291                     	;# 
  3378  0292                     	;# 
  3379  0293                     	;# 
  3380  0298                     	;# 
  3381  0298                     	;# 
  3382  0299                     	;# 
  3383  029A                     	;# 
  3384  029D                     	;# 
  3385  029E                     	;# 
  3386  029F                     	;# 
  3387  030C                     	;# 
  3388  030D                     	;# 
  3389  0311                     	;# 
  3390  0311                     	;# 
  3391  0312                     	;# 
  3392  0313                     	;# 
  3393  0318                     	;# 
  3394  0318                     	;# 
  3395  0319                     	;# 
  3396  031A                     	;# 
  3397  031C                     	;# 
  3398  031C                     	;# 
  3399  031D                     	;# 
  3400  031E                     	;# 
  3401  038C                     	;# 
  3402  038D                     	;# 
  3403  0394                     	;# 
  3404  0395                     	;# 
  3405  0396                     	;# 
  3406  040C                     	;# 
  3407  040D                     	;# 
  3408  0411                     	;# 
  3409  0411                     	;# 
  3410  0412                     	;# 
  3411  0413                     	;# 
  3412  0414                     	;# 
  3413  0415                     	;# 
  3414  0416                     	;# 
  3415  0417                     	;# 
  3416  0418                     	;# 
  3417  0418                     	;# 
  3418  0419                     	;# 
  3419  041A                     	;# 
  3420  041B                     	;# 
  3421  041C                     	;# 
  3422  041D                     	;# 
  3423  041E                     	;# 
  3424  048D                     	;# 
  3425  0491                     	;# 
  3426  0491                     	;# 
  3427  0492                     	;# 
  3428  0492                     	;# 
  3429  0493                     	;# 
  3430  0493                     	;# 
  3431  0493                     	;# 
  3432  0494                     	;# 
  3433  0494                     	;# 
  3434  0495                     	;# 
  3435  0495                     	;# 
  3436  0496                     	;# 
  3437  0496                     	;# 
  3438  0497                     	;# 
  3439  0497                     	;# 
  3440  0595                     	;# 
  3441  0596                     	;# 
  3442  0597                     	;# 
  3443  059C                     	;# 
  3444  059D                     	;# 
  3445  059E                     	;# 
  3446  0611                     	;# 
  3447  0611                     	;# 
  3448  0612                     	;# 
  3449  0613                     	;# 
  3450  0614                     	;# 
  3451  0614                     	;# 
  3452  0615                     	;# 
  3453  0616                     	;# 
  3454  0617                     	;# 
  3455  0617                     	;# 
  3456  0618                     	;# 
  3457  0619                     	;# 
  3458  061A                     	;# 
  3459  061A                     	;# 
  3460  061B                     	;# 
  3461  061C                     	;# 
  3462  061D                     	;# 
  3463  061D                     	;# 
  3464  061E                     	;# 
  3465  061F                     	;# 
  3466  0FE4                     	;# 
  3467  0FE5                     	;# 
  3468  0FE6                     	;# 
  3469  0FE7                     	;# 
  3470  0FE8                     	;# 
  3471  0FE9                     	;# 
  3472  0FEA                     	;# 
  3473  0FEB                     	;# 
  3474  0FED                     	;# 
  3475  0FEE                     	;# 
  3476  0FEF                     	;# 
  3477  0000                     	;# 
  3478  0001                     	;# 
  3479  0002                     	;# 
  3480  0003                     	;# 
  3481  0004                     	;# 
  3482  0005                     	;# 
  3483  0006                     	;# 
  3484  0007                     	;# 
  3485  0008                     	;# 
  3486  0009                     	;# 
  3487  000A                     	;# 
  3488  000B                     	;# 
  3489  000C                     	;# 
  3490  000D                     	;# 
  3491  000E                     	;# 
  3492  000F                     	;# 
  3493  0010                     	;# 
  3494  0011                     	;# 
  3495  0012                     	;# 
  3496  0013                     	;# 
  3497  0014                     	;# 
  3498  0015                     	;# 
  3499  0016                     	;# 
  3500  0016                     	;# 
  3501  0017                     	;# 
  3502  0018                     	;# 
  3503  0019                     	;# 
  3504  001A                     	;# 
  3505  001B                     	;# 
  3506  001C                     	;# 
  3507  008C                     	;# 
  3508  008D                     	;# 
  3509  008E                     	;# 
  3510  008F                     	;# 
  3511  0090                     	;# 
  3512  0091                     	;# 
  3513  0092                     	;# 
  3514  0093                     	;# 
  3515  0094                     	;# 
  3516  0095                     	;# 
  3517  0096                     	;# 
  3518  0097                     	;# 
  3519  0099                     	;# 
  3520  009A                     	;# 
  3521  009B                     	;# 
  3522  009B                     	;# 
  3523  009C                     	;# 
  3524  009D                     	;# 
  3525  009E                     	;# 
  3526  010C                     	;# 
  3527  010D                     	;# 
  3528  010E                     	;# 
  3529  010F                     	;# 
  3530  0110                     	;# 
  3531  0116                     	;# 
  3532  0117                     	;# 
  3533  011D                     	;# 
  3534  018C                     	;# 
  3535  018D                     	;# 
  3536  018F                     	;# 
  3537  0190                     	;# 
  3538  0191                     	;# 
  3539  0191                     	;# 
  3540  0192                     	;# 
  3541  0193                     	;# 
  3542  0193                     	;# 
  3543  0194                     	;# 
  3544  0195                     	;# 
  3545  0196                     	;# 
  3546  0197                     	;# 
  3547  0199                     	;# 
  3548  0199                     	;# 
  3549  0199                     	;# 
  3550  019A                     	;# 
  3551  019A                     	;# 
  3552  019A                     	;# 
  3553  019B                     	;# 
  3554  019B                     	;# 
  3555  019B                     	;# 
  3556  019B                     	;# 
  3557  019B                     	;# 
  3558  019C                     	;# 
  3559  019C                     	;# 
  3560  019C                     	;# 
  3561  019D                     	;# 
  3562  019D                     	;# 
  3563  019D                     	;# 
  3564  019E                     	;# 
  3565  019E                     	;# 
  3566  019E                     	;# 
  3567  019F                     	;# 
  3568  019F                     	;# 
  3569  019F                     	;# 
  3570  020D                     	;# 
  3571  020F                     	;# 
  3572  0210                     	;# 
  3573  0211                     	;# 
  3574  0211                     	;# 
  3575  0212                     	;# 
  3576  0212                     	;# 
  3577  0213                     	;# 
  3578  0213                     	;# 
  3579  0214                     	;# 
  3580  0214                     	;# 
  3581  0215                     	;# 
  3582  0215                     	;# 
  3583  0215                     	;# 
  3584  0216                     	;# 
  3585  0216                     	;# 
  3586  0217                     	;# 
  3587  0217                     	;# 
  3588  0219                     	;# 
  3589  021A                     	;# 
  3590  021B                     	;# 
  3591  021C                     	;# 
  3592  021D                     	;# 
  3593  021E                     	;# 
  3594  021F                     	;# 
  3595  028C                     	;# 
  3596  028D                     	;# 
  3597  0291                     	;# 
  3598  0291                     	;# 
  3599  0292                     	;# 
  3600  0293                     	;# 
  3601  0298                     	;# 
  3602  0298                     	;# 
  3603  0299                     	;# 
  3604  029A                     	;# 
  3605  029D                     	;# 
  3606  029E                     	;# 
  3607  029F                     	;# 
  3608  030C                     	;# 
  3609  030D                     	;# 
  3610  0311                     	;# 
  3611  0311                     	;# 
  3612  0312                     	;# 
  3613  0313                     	;# 
  3614  0318                     	;# 
  3615  0318                     	;# 
  3616  0319                     	;# 
  3617  031A                     	;# 
  3618  031C                     	;# 
  3619  031C                     	;# 
  3620  031D                     	;# 
  3621  031E                     	;# 
  3622  038C                     	;# 
  3623  038D                     	;# 
  3624  0394                     	;# 
  3625  0395                     	;# 
  3626  0396                     	;# 
  3627  040C                     	;# 
  3628  040D                     	;# 
  3629  0411                     	;# 
  3630  0411                     	;# 
  3631  0412                     	;# 
  3632  0413                     	;# 
  3633  0414                     	;# 
  3634  0415                     	;# 
  3635  0416                     	;# 
  3636  0417                     	;# 
  3637  0418                     	;# 
  3638  0418                     	;# 
  3639  0419                     	;# 
  3640  041A                     	;# 
  3641  041B                     	;# 
  3642  041C                     	;# 
  3643  041D                     	;# 
  3644  041E                     	;# 
  3645  048D                     	;# 
  3646  0491                     	;# 
  3647  0491                     	;# 
  3648  0492                     	;# 
  3649  0492                     	;# 
  3650  0493                     	;# 
  3651  0493                     	;# 
  3652  0493                     	;# 
  3653  0494                     	;# 
  3654  0494                     	;# 
  3655  0495                     	;# 
  3656  0495                     	;# 
  3657  0496                     	;# 
  3658  0496                     	;# 
  3659  0497                     	;# 
  3660  0497                     	;# 
  3661  0595                     	;# 
  3662  0596                     	;# 
  3663  0597                     	;# 
  3664  059C                     	;# 
  3665  059D                     	;# 
  3666  059E                     	;# 
  3667  0611                     	;# 
  3668  0611                     	;# 
  3669  0612                     	;# 
  3670  0613                     	;# 
  3671  0614                     	;# 
  3672  0614                     	;# 
  3673  0615                     	;# 
  3674  0616                     	;# 
  3675  0617                     	;# 
  3676  0617                     	;# 
  3677  0618                     	;# 
  3678  0619                     	;# 
  3679  061A                     	;# 
  3680  061A                     	;# 
  3681  061B                     	;# 
  3682  061C                     	;# 
  3683  061D                     	;# 
  3684  061D                     	;# 
  3685  061E                     	;# 
  3686  061F                     	;# 
  3687  0FE4                     	;# 
  3688  0FE5                     	;# 
  3689  0FE6                     	;# 
  3690  0FE7                     	;# 
  3691  0FE8                     	;# 
  3692  0FE9                     	;# 
  3693  0FEA                     	;# 
  3694  0FEB                     	;# 
  3695  0FED                     	;# 
  3696  0FEE                     	;# 
  3697  0FEF                     	;# 
  3698  0000                     	;# 
  3699  0001                     	;# 
  3700  0002                     	;# 
  3701  0003                     	;# 
  3702  0004                     	;# 
  3703  0005                     	;# 
  3704  0006                     	;# 
  3705  0007                     	;# 
  3706  0008                     	;# 
  3707  0009                     	;# 
  3708  000A                     	;# 
  3709  000B                     	;# 
  3710  000C                     	;# 
  3711  000D                     	;# 
  3712  000E                     	;# 
  3713  000F                     	;# 
  3714  0010                     	;# 
  3715  0011                     	;# 
  3716  0012                     	;# 
  3717  0013                     	;# 
  3718  0014                     	;# 
  3719  0015                     	;# 
  3720  0016                     	;# 
  3721  0016                     	;# 
  3722  0017                     	;# 
  3723  0018                     	;# 
  3724  0019                     	;# 
  3725  001A                     	;# 
  3726  001B                     	;# 
  3727  001C                     	;# 
  3728  008C                     	;# 
  3729  008D                     	;# 
  3730  008E                     	;# 
  3731  008F                     	;# 
  3732  0090                     	;# 
  3733  0091                     	;# 
  3734  0092                     	;# 
  3735  0093                     	;# 
  3736  0094                     	;# 
  3737  0095                     	;# 
  3738  0096                     	;# 
  3739  0097                     	;# 
  3740  0099                     	;# 
  3741  009A                     	;# 
  3742  009B                     	;# 
  3743  009B                     	;# 
  3744  009C                     	;# 
  3745  009D                     	;# 
  3746  009E                     	;# 
  3747  010C                     	;# 
  3748  010D                     	;# 
  3749  010E                     	;# 
  3750  010F                     	;# 
  3751  0110                     	;# 
  3752  0116                     	;# 
  3753  0117                     	;# 
  3754  011D                     	;# 
  3755  018C                     	;# 
  3756  018D                     	;# 
  3757  018F                     	;# 
  3758  0190                     	;# 
  3759  0191                     	;# 
  3760  0191                     	;# 
  3761  0192                     	;# 
  3762  0193                     	;# 
  3763  0193                     	;# 
  3764  0194                     	;# 
  3765  0195                     	;# 
  3766  0196                     	;# 
  3767  0197                     	;# 
  3768  0199                     	;# 
  3769  0199                     	;# 
  3770  0199                     	;# 
  3771  019A                     	;# 
  3772  019A                     	;# 
  3773  019A                     	;# 
  3774  019B                     	;# 
  3775  019B                     	;# 
  3776  019B                     	;# 
  3777  019B                     	;# 
  3778  019B                     	;# 
  3779  019C                     	;# 
  3780  019C                     	;# 
  3781  019C                     	;# 
  3782  019D                     	;# 
  3783  019D                     	;# 
  3784  019D                     	;# 
  3785  019E                     	;# 
  3786  019E                     	;# 
  3787  019E                     	;# 
  3788  019F                     	;# 
  3789  019F                     	;# 
  3790  019F                     	;# 
  3791  020D                     	;# 
  3792  020F                     	;# 
  3793  0210                     	;# 
  3794  0211                     	;# 
  3795  0211                     	;# 
  3796  0212                     	;# 
  3797  0212                     	;# 
  3798  0213                     	;# 
  3799  0213                     	;# 
  3800  0214                     	;# 
  3801  0214                     	;# 
  3802  0215                     	;# 
  3803  0215                     	;# 
  3804  0215                     	;# 
  3805  0216                     	;# 
  3806  0216                     	;# 
  3807  0217                     	;# 
  3808  0217                     	;# 
  3809  0219                     	;# 
  3810  021A                     	;# 
  3811  021B                     	;# 
  3812  021C                     	;# 
  3813  021D                     	;# 
  3814  021E                     	;# 
  3815  021F                     	;# 
  3816  028C                     	;# 
  3817  028D                     	;# 
  3818  0291                     	;# 
  3819  0291                     	;# 
  3820  0292                     	;# 
  3821  0293                     	;# 
  3822  0298                     	;# 
  3823  0298                     	;# 
  3824  0299                     	;# 
  3825  029A                     	;# 
  3826  029D                     	;# 
  3827  029E                     	;# 
  3828  029F                     	;# 
  3829  030C                     	;# 
  3830  030D                     	;# 
  3831  0311                     	;# 
  3832  0311                     	;# 
  3833  0312                     	;# 
  3834  0313                     	;# 
  3835  0318                     	;# 
  3836  0318                     	;# 
  3837  0319                     	;# 
  3838  031A                     	;# 
  3839  031C                     	;# 
  3840  031C                     	;# 
  3841  031D                     	;# 
  3842  031E                     	;# 
  3843  038C                     	;# 
  3844  038D                     	;# 
  3845  0394                     	;# 
  3846  0395                     	;# 
  3847  0396                     	;# 
  3848  040C                     	;# 
  3849  040D                     	;# 
  3850  0411                     	;# 
  3851  0411                     	;# 
  3852  0412                     	;# 
  3853  0413                     	;# 
  3854  0414                     	;# 
  3855  0415                     	;# 
  3856  0416                     	;# 
  3857  0417                     	;# 
  3858  0418                     	;# 
  3859  0418                     	;# 
  3860  0419                     	;# 
  3861  041A                     	;# 
  3862  041B                     	;# 
  3863  041C                     	;# 
  3864  041D                     	;# 
  3865  041E                     	;# 
  3866  048D                     	;# 
  3867  0491                     	;# 
  3868  0491                     	;# 
  3869  0492                     	;# 
  3870  0492                     	;# 
  3871  0493                     	;# 
  3872  0493                     	;# 
  3873  0493                     	;# 
  3874  0494                     	;# 
  3875  0494                     	;# 
  3876  0495                     	;# 
  3877  0495                     	;# 
  3878  0496                     	;# 
  3879  0496                     	;# 
  3880  0497                     	;# 
  3881  0497                     	;# 
  3882  0595                     	;# 
  3883  0596                     	;# 
  3884  0597                     	;# 
  3885  059C                     	;# 
  3886  059D                     	;# 
  3887  059E                     	;# 
  3888  0611                     	;# 
  3889  0611                     	;# 
  3890  0612                     	;# 
  3891  0613                     	;# 
  3892  0614                     	;# 
  3893  0614                     	;# 
  3894  0615                     	;# 
  3895  0616                     	;# 
  3896  0617                     	;# 
  3897  0617                     	;# 
  3898  0618                     	;# 
  3899  0619                     	;# 
  3900  061A                     	;# 
  3901  061A                     	;# 
  3902  061B                     	;# 
  3903  061C                     	;# 
  3904  061D                     	;# 
  3905  061D                     	;# 
  3906  061E                     	;# 
  3907  061F                     	;# 
  3908  0FE4                     	;# 
  3909  0FE5                     	;# 
  3910  0FE6                     	;# 
  3911  0FE7                     	;# 
  3912  0FE8                     	;# 
  3913  0FE9                     	;# 
  3914  0FEA                     	;# 
  3915  0FEB                     	;# 
  3916  0FED                     	;# 
  3917  0FEE                     	;# 
  3918  0FEF                     	;_modArray
  3919                           
  3920                           	psect	idataBANK0
  3921  3FF6                     __pidataBANK0:	
  3922                           
  3923                           ;initializer for _delay_time
  3924  3FF6  34D0               	retlw	208
  3925  3FF7  3407               	retlw	7
  3926  3FF8  3400               	retlw	0
  3927  3FF9  3400               	retlw	0
  3928                           
  3929                           ;initializer for _baseline_mod_time
  3930  3FFA  34D0               	retlw	208
  3931  3FFB  3407               	retlw	7
  3932                           
  3933                           ;initializer for _top_push_state
  3934  3FFC  3406               	retlw	6
  3935  3FFD  3400               	retlw	0
  3936                           
  3937                           ;initializer for _blink_rate
  3938  3FFE  3414               	retlw	20
  3939                           
  3940                           ;initializer for _longTap_state
  3941  3FFF  34FF               	retlw	255
  3942                           
  3943                           	psect	idataBANK3
  3944  3084                     __pidataBANK3:	
  3945                           
  3946                           ;initializer for _bottom_push_state
  3947  3084  3401               	retlw	1
  3948  3085  3400               	retlw	0
  3949                           
  3950                           ;initializer for _knob1_prev
  3951  3086  34D0               	retlw	208
  3952  3087  3407               	retlw	7
  3953                           
  3954                           ;initializer for _knob2_prev
  3955  3088  34D0               	retlw	208
  3956  3089  3407               	retlw	7
  3957                           
  3958                           ;initializer for _knob5_prev
  3959  308A  34D0               	retlw	208
  3960  308B  3407               	retlw	7
  3961                           
  3962                           ;initializer for _symmetry
  3963  308C  34B4               	retlw	180
  3964  308D  3400               	retlw	0
  3965                           
  3966                           ;initializer for _num_taps
  3967  308E  3404               	retlw	4
  3968                           
  3969                           ;initializer for _presetChannel
  3970  308F  3401               	retlw	1
  3971                           
  3972                           ;initializer for _switchBypass_state
  3973  3090  34FF               	retlw	255
  3974                           
  3975                           	psect	idataBANK4
  3976  3150                     __pidataBANK4:	
  3977                           
  3978                           ;initializer for _blink_delay
  3979  3150  3464               	retlw	100
  3980  3151  3400               	retlw	0
  3981                           
  3982                           ;initializer for _knob3_prev
  3983  3152  34D0               	retlw	208
  3984  3153  3407               	retlw	7
  3985                           
  3986                           ;initializer for _knob4_prev
  3987  3154  34D0               	retlw	208
  3988  3155  3407               	retlw	7
  3989                           
  3990                           ;initializer for _long_press_limit
  3991  3156  34E8               	retlw	232
  3992  3157  3403               	retlw	3
  3993                           
  3994                           ;initializer for _mod_counter
  3995  3158  3401               	retlw	1
  3996  3159  3400               	retlw	0
  3997                           
  3998                           ;initializer for _mod_delay_time
  3999  315A  34D0               	retlw	208
  4000  315B  3407               	retlw	7
  4001                           
  4002                           ;initializer for _tap_iteration
  4003  315C  3401               	retlw	1
  4004  315D  3400               	retlw	0
  4005                           
  4006                           ;initializer for _blink_state
  4007  315E  3401               	retlw	1
  4008                           
  4009                           ;initializer for _currentBypassState
  4010  315F  34FF               	retlw	-1
  4011                           
  4012                           ;initializer for _expSwitchState
  4013  3160  34FF               	retlw	255
  4014                           
  4015                           ;initializer for _expressModeCnst
  4016  3161  3402               	retlw	2
  4017                           
  4018                           ;initializer for _expressionChannel
  4019  3162  3401               	retlw	1
  4020                           
  4021                           ;initializer for _mod_time_changed
  4022  3163  3401               	retlw	1
  4023                           
  4024                           ;initializer for _presetModeCnst
  4025  3164  3401               	retlw	1
  4026                           
  4027                           ;initializer for _switchBypass_up
  4028  3165  3401               	retlw	1
  4029                           
  4030                           ;initializer for _switchTap_state
  4031  3166  34FF               	retlw	255
  4032                           
  4033                           	psect	stringtext
  4034  3000                     __pstringtext:	
  4035  3000                     exp@coeff:	
  4036  3000  3400               	retlw	0
  4037  3001  3480               	retlw	128
  4038  3002  343F               	retlw	63
  4039  3003  3472               	retlw	114
  4040  3004  3431               	retlw	49
  4041  3005  343F               	retlw	63
  4042  3006  34FE               	retlw	254
  4043  3007  3475               	retlw	117
  4044  3008  343E               	retlw	62
  4045  3009  3458               	retlw	88
  4046  300A  3463               	retlw	99
  4047  300B  343D               	retlw	61
  4048  300C  3495               	retlw	149
  4049  300D  341D               	retlw	29
  4050  300E  343C               	retlw	60
  4051  300F  34C5               	retlw	197
  4052  3010  34AE               	retlw	174
  4053  3011  343A               	retlw	58
  4054  3012  3479               	retlw	121
  4055  3013  3421               	retlw	33
  4056  3014  3439               	retlw	57
  4057  3015  3494               	retlw	148
  4058  3016  3480               	retlw	128
  4059  3017  3437               	retlw	55
  4060  3018  3493               	retlw	147
  4061  3019  34A7               	retlw	167
  4062  301A  3435               	retlw	53
  4063  301B  3456               	retlw	86
  4064  301C  3415               	retlw	21
  4065  301D  3434               	retlw	52
  4066  301E                     __end_ofexp@coeff:	
  4067  301E                     log@coeff:	
  4068  301E  3400               	retlw	0
  4069  301F  3400               	retlw	0
  4070  3020  3400               	retlw	0
  4071  3021  3400               	retlw	0
  4072  3022  3480               	retlw	128
  4073  3023  343F               	retlw	63
  4074  3024  34F0               	retlw	240
  4075  3025  34FF               	retlw	255
  4076  3026  34BE               	retlw	190
  4077  3027  34E2               	retlw	226
  4078  3028  34A9               	retlw	169
  4079  3029  343E               	retlw	62
  4080  302A  3483               	retlw	131
  4081  302B  3476               	retlw	118
  4082  302C  34BE               	retlw	190
  4083  302D  34AE               	retlw	174
  4084  302E  342B               	retlw	43
  4085  302F  343E               	retlw	62
  4086  3030  343C               	retlw	60
  4087  3031  34C3               	retlw	195
  4088  3032  34BD               	retlw	189
  4089  3033  34D2               	retlw	210
  4090  3034  3413               	retlw	19
  4091  3035  343D               	retlw	61
  4092  3036  3478               	retlw	120
  4093  3037  34D3               	retlw	211
  4094  3038  34BB               	retlw	187
  4095  3039                     __end_oflog@coeff:	
  4096  3039                     sin@coeff_a:	
  4097  3039  34F4               	retlw	244
  4098  303A  344A               	retlw	74
  4099  303B  3448               	retlw	72
  4100  303C  3495               	retlw	149
  4101  303D  3495               	retlw	149
  4102  303E  34C7               	retlw	199
  4103  303F  34C1               	retlw	193
  4104  3040  34DC               	retlw	220
  4105  3041  3445               	retlw	69
  4106  3042  34DC               	retlw	220
  4107  3043  346D               	retlw	109
  4108  3044  34C3               	retlw	195
  4109  3045  34B3               	retlw	179
  4110  3046  3433               	retlw	51
  4111  3047  3440               	retlw	64
  4112  3048                     __end_ofsin@coeff_a:	
  4113  3048                     sin@coeff_b:	
  4114  3048  3434               	retlw	52
  4115  3049  3401               	retlw	1
  4116  304A  3448               	retlw	72
  4117  304B  349D               	retlw	157
  4118  304C  34B0               	retlw	176
  4119  304D  3445               	retlw	69
  4120  304E  3400               	retlw	0
  4121  304F  34DA               	retlw	218
  4122  3050  3442               	retlw	66
  4123  3051  3400               	retlw	0
  4124  3052  3480               	retlw	128
  4125  3053  343F               	retlw	63
  4126  3054                     __end_ofsin@coeff_b:	
  4127  000B                     _INTCONbits	set	11
  4128  0011                     _PIR1bits	set	17
  4129  000C                     _PORTAbits	set	12
  4130  000E                     _PORTCbits	set	14
  4131  000F                     _PORTDbits	set	15
  4132  0010                     _PORTEbits	set	16
  4133  001B                     _PR2	set	27
  4134  001C                     _T2CONbits	set	28
  4135  005F                     _GIE	set	95
  4136  005E                     _PEIE	set	94
  4137  008D                     _RCIF	set	141
  4138  009D                     _ADCON0bits	set	157
  4139  009E                     _ADCON1bits	set	158
  4140  009C                     _ADRESH	set	156
  4141  009B                     _ADRESL	set	155
  4142  0095                     _OPTION_REGbits	set	149
  4143  0099                     _OSCCONbits	set	153
  4144  008D                     _TRISBbits	set	141
  4145  008E                     _TRISCbits	set	142
  4146  008F                     _TRISDbits	set	143
  4147  0090                     _TRISEbits	set	144
  4148  048D                     _RCIE	set	1165
  4149  011D                     _APFCONbits	set	285
  4150  010D                     _LATBbits	set	269
  4151  010F                     _LATDbits	set	271
  4152  0191                     _PMADR	set	401
  4153  0190                     _ANSELEbits	set	400
  4154  0192                     _PMADRH	set	402
  4155  0191                     _PMADRL	set	401
  4156  0195                     _PMCON1bits	set	405
  4157  0196                     _PMCON2	set	406
  4158  0194                     _PMDATH	set	404
  4159  0193                     _PMDATL	set	403
  4160  0199                     _RCREG	set	409
  4161  019D                     _RCSTAbits	set	413
  4162  019B                     _SPBRG	set	411
  4163  019A                     _TXREG	set	410
  4164  019E                     _TXSTAbits	set	414
  4165  0291                     _CCPR1	set	657
  4166  0298                     _CCPR2	set	664
  4167  0293                     _CCP1CONbits	set	659
  4168  029A                     _CCP2CONbits	set	666
  4169  029D                     _CCPTMRS0	set	669
  4170  029E                     _CCPTMRS1	set	670
  4171  029F                     _CCPTMRS2	set	671
  4172  0311                     _CCPR3	set	785
  4173  0318                     _CCPR4	set	792
  4174  031C                     _CCPR5	set	796
  4175  0313                     _CCP3CONbits	set	787
  4176  031A                     _CCP4CONbits	set	794
  4177  031E                     _CCP5CONbits	set	798
  4178  030C                     _TRISFbits	set	780
  4179  030D                     _TRISGbits	set	781
  4180  038C                     _LATFbits	set	908
  4181  038D                     _LATGbits	set	909
  4182  040C                     _ANSELFbits	set	1036
  4183  061F                     _CCP10CONbits	set	1567
  4184  0613                     _CCP6CONbits	set	1555
  4185  0616                     _CCP7CONbits	set	1558
  4186  0619                     _CCP8CONbits	set	1561
  4187  061C                     _CCP9CONbits	set	1564
  4188                           
  4189                           ; #config settings
  4190  0000                     
  4191                           	psect	cinit
  4192  0346                     start_initialization:	
  4193  0346                     __initialization:		;BIGRAM
  4194                           
  4195                           ; Clear objects allocated to BIGRAM
  4196  0346  308A               	movlw	low (0+9098)
  4197  0347  0084               	movwf	4
  4198  0348  3023               	movlw	high (0+9098)
  4199  0349  0085               	movwf	5
  4200  034A  3066               	movlw	102
  4201  034B  00FE               	movwf	btemp
  4202  034C  3002               	movlw	2
  4203  034D  00FF               	movwf	btemp+1
  4204  034E  31B0  2078  3183   	fcall	clear_ram0
  4205                           
  4206                           ; Clear objects allocated to BANK0
  4207  0351  3059               	movlw	low __pbssBANK0
  4208  0352  0084               	movwf	4
  4209  0353  3000               	movlw	high __pbssBANK0
  4210  0354  0085               	movwf	5
  4211  0355  300D               	movlw	13
  4212  0356  00FE               	movwf	btemp
  4213  0357  3000               	movlw	0
  4214  0358  00FF               	movwf	btemp+1
  4215  0359  31B0  2078  3183   	fcall	clear_ram0
  4216                           
  4217                           ; Clear objects allocated to BANK2
  4218  035C  0022               	movlb	2	; select bank2
  4219  035D  01EF               	clrf	__pbssBANK2& (0+127)
  4220                           
  4221                           ; Clear objects allocated to BANK3
  4222  035E  0023               	movlb	3	; select bank3
  4223  035F  01EF               	clrf	__pbssBANK3& (0+127)
  4224                           
  4225                           ; Clear objects allocated to BANK4
  4226  0360  3020               	movlw	low __pbssBANK4
  4227  0361  0084               	movwf	4
  4228  0362  3002               	movlw	high __pbssBANK4
  4229  0363  0085               	movwf	5
  4230  0364  3039               	movlw	57
  4231  0365  00FE               	movwf	btemp
  4232  0366  3000               	movlw	0
  4233  0367  00FF               	movwf	btemp+1
  4234  0368  31B0  2078  3183   	fcall	clear_ram0
  4235                           
  4236                           ; Clear objects allocated to BANK5
  4237  036B  30A0               	movlw	low __pbssBANK5
  4238  036C  0084               	movwf	4
  4239  036D  3002               	movlw	high __pbssBANK5
  4240  036E  0085               	movwf	5
  4241  036F  304E               	movlw	78
  4242  0370  00FE               	movwf	btemp
  4243  0371  3000               	movlw	0
  4244  0372  00FF               	movwf	btemp+1
  4245  0373  31B0  2078  3183   	fcall	clear_ram0
  4246                           
  4247                           ; Clear objects allocated to BANK6
  4248  0376  3020               	movlw	low __pbssBANK6
  4249  0377  0084               	movwf	4
  4250  0378  3003               	movlw	high __pbssBANK6
  4251  0379  0085               	movwf	5
  4252  037A  3040               	movlw	64
  4253  037B  00FE               	movwf	btemp
  4254  037C  3000               	movlw	0
  4255  037D  00FF               	movwf	btemp+1
  4256  037E  31B0  2078  3183   	fcall	clear_ram0
  4257                           
  4258                           ; Clear objects allocated to BANK7
  4259  0381  30A0               	movlw	low __pbssBANK7
  4260  0382  0084               	movwf	4
  4261  0383  3003               	movlw	high __pbssBANK7
  4262  0384  0085               	movwf	5
  4263  0385  302C               	movlw	44
  4264  0386  00FE               	movwf	btemp
  4265  0387  3000               	movlw	0
  4266  0388  00FF               	movwf	btemp+1
  4267  0389  31B0  2078  3183   	fcall	clear_ram0
  4268                           
  4269                           ; Clear objects allocated to BANK8
  4270  038C  3020               	movlw	low __pbssBANK8
  4271  038D  0084               	movwf	4
  4272  038E  3004               	movlw	high __pbssBANK8
  4273  038F  0085               	movwf	5
  4274  0390  3040               	movlw	64
  4275  0391  00FE               	movwf	btemp
  4276  0392  3000               	movlw	0
  4277  0393  00FF               	movwf	btemp+1
  4278  0394  31B0  2078  3183   	fcall	clear_ram0
  4279                           
  4280                           ; Clear objects allocated to BANK9
  4281  0397  30A0               	movlw	low __pbssBANK9
  4282  0398  0084               	movwf	4
  4283  0399  3004               	movlw	high __pbssBANK9
  4284  039A  0085               	movwf	5
  4285  039B  3040               	movlw	64
  4286  039C  00FE               	movwf	btemp
  4287  039D  3000               	movlw	0
  4288  039E  00FF               	movwf	btemp+1
  4289  039F  31B0  2078  3183   	fcall	clear_ram0
  4290                           
  4291                           ; Initialize objects allocated to BANK0
  4292  03A2  30F6               	movlw	low __pidataBANK0
  4293  03A3  0084               	movwf	4
  4294  03A4  30BF               	movlw	(high __pidataBANK0)| (0+128)
  4295  03A5  0085               	movwf	5
  4296  03A6  3066               	movlw	low __pdataBANK0
  4297  03A7  0086               	movwf	6
  4298  03A8  3000               	movlw	high __pdataBANK0
  4299  03A9  0087               	movwf	7
  4300  03AA  3000               	movlw	0
  4301  03AB  00FF               	movwf	btemp+1
  4302  03AC  300A               	movlw	10
  4303  03AD  31B0  206C  3183   	fcall	init_ram
  4304                           
  4305                           ; Initialize objects allocated to BANK3
  4306  03B0  3084               	movlw	low __pidataBANK3
  4307  03B1  0084               	movwf	4
  4308  03B2  30B0               	movlw	(high __pidataBANK3)| (0+128)
  4309  03B3  0085               	movwf	5
  4310  03B4  30E2               	movlw	low __pdataBANK3
  4311  03B5  0086               	movwf	6
  4312  03B6  3001               	movlw	high __pdataBANK3
  4313  03B7  0087               	movwf	7
  4314  03B8  3000               	movlw	0
  4315  03B9  00FF               	movwf	btemp+1
  4316  03BA  300D               	movlw	13
  4317  03BB  31B0  206C  3183   	fcall	init_ram
  4318                           
  4319                           ; Initialize objects allocated to BANK4
  4320  03BE  3050               	movlw	low __pidataBANK4
  4321  03BF  0084               	movwf	4
  4322  03C0  30B1               	movlw	(high __pidataBANK4)| (0+128)
  4323  03C1  0085               	movwf	5
  4324  03C2  3059               	movlw	low __pdataBANK4
  4325  03C3  0086               	movwf	6
  4326  03C4  3002               	movlw	high __pdataBANK4
  4327  03C5  0087               	movwf	7
  4328  03C6  3000               	movlw	0
  4329  03C7  00FF               	movwf	btemp+1
  4330  03C8  3017               	movlw	23
  4331  03C9  31B0  206C         	fcall	init_ram
  4332  03CB                     end_of_initialization:	
  4333                           ;End of C runtime variable initialization code
  4334                           
  4335  03CB                     __end_of__initialization:	
  4336  03CB  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4337  03CC  0020               	movlb	0
  4338  03CD  3199  2901         	ljmp	_main	;jump to C main() function
  4339                           
  4340                           	psect	bssBANK0
  4341  0059                     __pbssBANK0:	
  4342  0059                     _tap_timer:	
  4343  0059                     	ds	4
  4344  005D                     _isStateInitialized:	
  4345  005D                     	ds	2
  4346  005F                     _UQEnd:	
  4347  005F                     	ds	1
  4348  0060                     _UQFront:	
  4349  0060                     	ds	1
  4350  0061                     _doubleTap_state:	
  4351  0061                     	ds	1
  4352  0062                     _isInitialized:	
  4353  0062                     	ds	1
  4354  0063                     _longBypass_state:	
  4355  0063                     	ds	1
  4356  0064                     _mode2_state:	
  4357  0064                     	ds	1
  4358  0065                     _presetSaveMode:	
  4359  0065                     	ds	1
  4360                           
  4361                           	psect	dataBANK0
  4362  0066                     __pdataBANK0:	
  4363  0066                     _delay_time:	
  4364  0066                     	ds	4
  4365  006A                     _baseline_mod_time:	
  4366  006A                     	ds	2
  4367  006C                     _top_push_state:	
  4368  006C                     	ds	2
  4369  006E                     _blink_rate:	
  4370  006E                     	ds	1
  4371  006F                     _longTap_state:	
  4372  006F                     	ds	1
  4373                           
  4374                           	psect	bssBANK2
  4375  016F                     __pbssBANK2:	
  4376  016F                     _suspend_blink:	
  4377  016F                     	ds	1
  4378                           
  4379                           	psect	bssBANK3
  4380  01EF                     __pbssBANK3:	
  4381  01EF                     _iCnt:	
  4382  01EF                     	ds	1
  4383                           
  4384                           	psect	dataBANK3
  4385  01E2                     __pdataBANK3:	
  4386  01E2                     _bottom_push_state:	
  4387  01E2                     	ds	2
  4388  01E4                     _knob1_prev:	
  4389  01E4                     	ds	2
  4390  01E6                     _knob2_prev:	
  4391  01E6                     	ds	2
  4392  01E8                     _knob5_prev:	
  4393  01E8                     	ds	2
  4394  01EA                     _symmetry:	
  4395  01EA                     	ds	2
  4396  01EC                     _num_taps:	
  4397  01EC                     	ds	1
  4398  01ED                     _presetChannel:	
  4399  01ED                     	ds	1
  4400  01EE                     _switchBypass_state:	
  4401  01EE                     	ds	1
  4402                           
  4403                           	psect	bssBANK4
  4404  0220                     __pbssBANK4:	
  4405  0220                     _double_timer:	
  4406  0220                     	ds	4
  4407  0224                     _mod_timer:	
  4408  0224                     	ds	4
  4409  0228                     _sub_timer:	
  4410  0228                     	ds	4
  4411  022C                     _timer:	
  4412  022C                     	ds	4
  4413  0230                     _knob_1_pos:	
  4414  0230                     	ds	2
  4415  0232                     _knob_2_pos:	
  4416  0232                     	ds	2
  4417  0234                     _knob_3_pos:	
  4418  0234                     	ds	2
  4419  0236                     _knob_4_pos:	
  4420  0236                     	ds	2
  4421  0238                     _knob_5_pos:	
  4422  0238                     	ds	2
  4423  023A                     _longBypass_timer:	
  4424  023A                     	ds	2
  4425  023C                     _longTap_timer:	
  4426  023C                     	ds	2
  4427  023E                     _midiLevel:	
  4428  023E                     	ds	2
  4429  0240                     _mod_value:	
  4430  0240                     	ds	2
  4431  0242                     _modulationSubdivision:	
  4432  0242                     	ds	2
  4433  0244                     _tmpModDelay:	
  4434  0244                     	ds	2
  4435  0246                     _adjust_mod_delay:	
  4436  0246                     	ds	1
  4437  0247                     _bottomTactile_pressed:	
  4438  0247                     	ds	1
  4439  0248                     _bypass_turning_on:	
  4440  0248                     	ds	1
  4441  0249                     _longBypass_down:	
  4442  0249                     	ds	1
  4443  024A                     _longBypass_save:	
  4444  024A                     	ds	1
  4445  024B                     _longBypass_start:	
  4446  024B                     	ds	1
  4447  024C                     _longTap_start:	
  4448  024C                     	ds	1
  4449  024D                     _mode1_state:	
  4450  024D                     	ds	1
  4451  024E                     _modulation_changed:	
  4452  024E                     	ds	1
  4453  024F                     _n:	
  4454  024F                     	ds	1
  4455  0250                     _preset_blink:	
  4456  0250                     	ds	1
  4457  0251                     _preset_programmning_on:	
  4458  0251                     	ds	1
  4459  0252                     _reset_sub_delay:	
  4460  0252                     	ds	1
  4461  0253                     _switchBypass_pressed:	
  4462  0253                     	ds	1
  4463  0254                     _switchBypass_toggle:	
  4464  0254                     	ds	1
  4465  0255                     _switchTap_down:	
  4466  0255                     	ds	1
  4467  0256                     _switchTap_pressed:	
  4468  0256                     	ds	1
  4469  0257                     _topTactile_pressed:	
  4470  0257                     	ds	1
  4471  0258                     _useInitVals:	
  4472  0258                     	ds	1
  4473                           
  4474                           	psect	dataBANK4
  4475  0259                     __pdataBANK4:	
  4476  0259                     _blink_delay:	
  4477  0259                     	ds	2
  4478  025B                     _knob3_prev:	
  4479  025B                     	ds	2
  4480  025D                     _knob4_prev:	
  4481  025D                     	ds	2
  4482  025F                     _long_press_limit:	
  4483  025F                     	ds	2
  4484  0261                     _mod_counter:	
  4485  0261                     	ds	2
  4486  0263                     _mod_delay_time:	
  4487  0263                     	ds	2
  4488  0265                     _tap_iteration:	
  4489  0265                     	ds	2
  4490  0267                     _blink_state:	
  4491  0267                     	ds	1
  4492  0268                     _currentBypassState:	
  4493  0268                     	ds	1
  4494  0269                     _expSwitchState:	
  4495  0269                     	ds	1
  4496  026A                     _expressModeCnst:	
  4497  026A                     	ds	1
  4498  026B                     _expressionChannel:	
  4499  026B                     	ds	1
  4500  026C                     _mod_time_changed:	
  4501  026C                     	ds	1
  4502  026D                     _presetModeCnst:	
  4503  026D                     	ds	1
  4504  026E                     _switchBypass_up:	
  4505  026E                     	ds	1
  4506  026F                     _switchTap_state:	
  4507  026F                     	ds	1
  4508                           
  4509                           	psect	bssBANK5
  4510  02A0                     __pbssBANK5:	
  4511  02A0                     _tap_history:	
  4512  02A0                     	ds	20
  4513  02B4                     _pedalState:	
  4514  02B4                     	ds	15
  4515  02C3                     _ledState:	
  4516  02C3                     	ds	6
  4517  02C9                     USARTWriteInt@F3536:	
  4518  02C9                     	ds	5
  4519  02CE                     _save_counter:	
  4520  02CE                     	ds	4
  4521  02D2                     _save_timer:	
  4522  02D2                     	ds	4
  4523  02D6                     _tap_total:	
  4524  02D6                     	ds	4
  4525  02DA                     _adjusted_pot_value:	
  4526  02DA                     	ds	2
  4527  02DC                     _debounce_bypass:	
  4528  02DC                     	ds	2
  4529  02DE                     _debounce_count:	
  4530  02DE                     	ds	2
  4531  02E0                     _debounce_mode1:	
  4532  02E0                     	ds	2
  4533  02E2                     _debounce_mode2:	
  4534  02E2                     	ds	2
  4535  02E4                     _delayfound:	
  4536  02E4                     	ds	2
  4537  02E6                     _errno:	
  4538  02E6                     	ds	2
  4539  02E8                     _oldBaseTime:	
  4540  02E8                     	ds	2
  4541  02EA                     _oldSymmetry:	
  4542  02EA                     	ds	2
  4543  02EC                     _tmpVal:	
  4544  02EC                     	ds	2
  4545                           
  4546                           	psect	bssBANK6
  4547  0320                     __pbssBANK6:	
  4548  0320                     _midiBuff:	
  4549  0320                     	ds	64
  4550                           
  4551                           	psect	bssBANK7
  4552  03A0                     __pbssBANK7:	
  4553  03A0                     _tap:	
  4554  03A0                     	ds	44
  4555                           
  4556                           	psect	bssBANK8
  4557  0420                     __pbssBANK8:	
  4558  0420                     _URBuff:	
  4559  0420                     	ds	64
  4560                           
  4561                           	psect	bssBANK9
  4562  04A0                     __pbssBANK9:	
  4563  04A0                     _myBuf:	
  4564  04A0                     	ds	64
  4565                           
  4566                           	psect	clrtext
  4567  3078                     clear_ram0:	
  4568                           ;	Called with FSR0 containing the base address, and
  4569                           ;	btemp/btemp+1 has the size to clear
  4570                           
  4571  3078  0064               	clrwdt	;clear the watchdog before getting into this loop
  4572  3079                     clrloop0:	
  4573  3079  0180               	clrf	0	;clear RAM location pointed to by FSR
  4574  307A  3101               	addfsr 0,1
  4575  307B  3001               	movlw	1
  4576  307C  02FE               	subwf	126,f
  4577  307D  3000               	movlw	0
  4578  307E  3BFF               	subwfb	127,f
  4579  307F  087F               	movf	127,w
  4580  3080  047E               	iorwf	126,w
  4581  3081  1903               	btfsc	3,2
  4582  3082  3400               	retlw	0	;all done for this memory range, return
  4583  3083  2879               	goto	clrloop0	;have we reached the end yet?
  4584                           
  4585                           	psect	inittext
  4586  306C                     init_ram:	
  4587  306C  00FE               	movwf	126
  4588  306D                     initloop:	
  4589  306D  0012               	moviw fsr0++
  4590  306E  001E               	movwi fsr1++
  4591  306F  3001               	movlw	1
  4592  3070  02FE               	subwf	126,f
  4593  3071  3000               	movlw	0
  4594  3072  3BFF               	subwfb	127,f
  4595  3073  087F               	movf	127,w
  4596  3074  047E               	iorwf	126,w
  4597  3075  1903               	btfsc	3,2
  4598  3076  3400               	retlw	0
  4599  3077  286D               	goto	initloop
  4600                           
  4601                           	psect	cstackBANK3
  4602  01A0                     __pcstackBANK3:	
  4603  01A0                     getPreset@r:	
  4604  01A0                     scaleA100kPot@pwm:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  01A0                     scaleA10kPot@pwm:	
  4608                           ; 3 bytes @ 0x0
  4609                           
  4610  01A0                     scaleiA10kPot@pwm:	
  4611                           ; 3 bytes @ 0x0
  4612                           
  4613                           
  4614                           ; 3 bytes @ 0x0
  4615  01A0                     	ds	1
  4616  01A1                     getPreset@presetChannel:	
  4617                           
  4618                           ; 1 bytes @ 0x1
  4619  01A1                     	ds	1
  4620  01A2                     getPreset@bankID:	
  4621                           
  4622                           ; 1 bytes @ 0x2
  4623  01A2                     	ds	1
  4624  01A3                     _scaleA100kPot$3253:	
  4625  01A3                     _scaleA10kPot$3257:	
  4626                           ; 3 bytes @ 0x3
  4627                           
  4628  01A3                     _scaleiA10kPot$3259:	
  4629                           ; 3 bytes @ 0x3
  4630                           
  4631  01A3                     getPreset@presets:	
  4632                           ; 3 bytes @ 0x3
  4633                           
  4634                           
  4635                           ; 30 bytes @ 0x3
  4636  01A3                     	ds	3
  4637  01A6                     _scaleA100kPot$3254:	
  4638  01A6                     _scaleA10kPot$3258:	
  4639                           ; 3 bytes @ 0x6
  4640                           
  4641  01A6                     _scaleiA10kPot$3260:	
  4642                           ; 3 bytes @ 0x6
  4643                           
  4644                           
  4645                           ; 3 bytes @ 0x6
  4646  01A6                     	ds	3
  4647  01A9                     _setVolume$3271:	
  4648                           
  4649                           ; 3 bytes @ 0x9
  4650  01A9                     	ds	3
  4651  01AC                     _setVolume$3272:	
  4652                           
  4653                           ; 3 bytes @ 0xC
  4654  01AC                     	ds	21
  4655  01C1                     getPreset@bankChannel:	
  4656                           
  4657                           ; 1 bytes @ 0x21
  4658  01C1                     	ds	1
  4659  01C2                     getPreset@pedalPreset:	
  4660                           
  4661                           ; 15 bytes @ 0x22
  4662  01C2                     	ds	15
  4663  01D1                     ??_main:	
  4664                           
  4665                           ; 1 bytes @ 0x31
  4666  01D1                     	ds	6
  4667  01D7                     _main$3248:	
  4668                           
  4669                           ; 3 bytes @ 0x37
  4670  01D7                     	ds	3
  4671  01DA                     _main$3249:	
  4672                           
  4673                           ; 3 bytes @ 0x3A
  4674  01DA                     	ds	3
  4675  01DD                     main@tapCntDivisor:	
  4676                           
  4677                           ; 2 bytes @ 0x3D
  4678  01DD                     	ds	2
  4679  01DF                     _main$3250:	
  4680                           
  4681                           ; 3 bytes @ 0x3F
  4682  01DF                     	ds	3
  4683                           
  4684                           	psect	cstackBANK2
  4685  0120                     __pcstackBANK2:	
  4686  0120                     ?___fttol:	
  4687  0120                     ___fttol@f1:	
  4688                           ; 4 bytes @ 0x0
  4689                           
  4690                           
  4691                           ; 3 bytes @ 0x0
  4692  0120                     	ds	4
  4693  0124                     ??___fttol:	
  4694                           
  4695                           ; 1 bytes @ 0x4
  4696  0124                     	ds	4
  4697  0128                     ___fttol@sign1:	
  4698                           
  4699                           ; 1 bytes @ 0x8
  4700  0128                     	ds	1
  4701  0129                     ___fttol@lval:	
  4702                           
  4703                           ; 4 bytes @ 0x9
  4704  0129                     	ds	4
  4705  012D                     ___fttol@exp1:	
  4706                           
  4707                           ; 1 bytes @ 0xD
  4708  012D                     	ds	1
  4709  012E                     ?_setSymmetry:	
  4710  012E                     ?_set_subdivision:	
  4711                           ; 1 bytes @ 0xE
  4712                           
  4713  012E                     ?_modTri:	
  4714                           ; 2 bytes @ 0xE
  4715                           
  4716  012E                     ?_modSaw:	
  4717                           ; 2 bytes @ 0xE
  4718                           
  4719  012E                     ?___wmul:	
  4720                           ; 2 bytes @ 0xE
  4721                           
  4722  012E                     ?_floor:	
  4723                           ; 2 bytes @ 0xE
  4724                           
  4725  012E                     set_subdivision@x:	
  4726                           ; 3 bytes @ 0xE
  4727                           
  4728  012E                     setSymmetry@rawValue:	
  4729                           ; 2 bytes @ 0xE
  4730                           
  4731  012E                     ___wmul@multiplier:	
  4732                           ; 2 bytes @ 0xE
  4733                           
  4734  012E                     modTri@angle:	
  4735                           ; 2 bytes @ 0xE
  4736                           
  4737  012E                     modSaw@angle:	
  4738                           ; 3 bytes @ 0xE
  4739                           
  4740  012E                     floor@x:	
  4741                           ; 3 bytes @ 0xE
  4742                           
  4743                           
  4744                           ; 3 bytes @ 0xE
  4745  012E                     	ds	2
  4746  0130                     set_subdivision@y:	
  4747  0130                     ___wmul@multiplicand:	
  4748                           ; 2 bytes @ 0x10
  4749                           
  4750                           
  4751                           ; 2 bytes @ 0x10
  4752  0130                     	ds	1
  4753  0131                     ??_floor:	
  4754  0131                     modTri@inflection:	
  4755                           ; 1 bytes @ 0x11
  4756                           
  4757  0131                     modSaw@inflection:	
  4758                           ; 3 bytes @ 0x11
  4759                           
  4760                           
  4761                           ; 3 bytes @ 0x11
  4762  0131                     	ds	1
  4763  0132                     ___wmul@product:	
  4764  0132                     set_subdivision@scalar:	
  4765                           ; 2 bytes @ 0x12
  4766                           
  4767  0132                     floor@i:	
  4768                           ; 3 bytes @ 0x12
  4769                           
  4770                           
  4771                           ; 3 bytes @ 0x12
  4772  0132                     	ds	2
  4773  0134                     ?_GetBitMask:	
  4774  0134                     ?_modCos:	
  4775                           ; 2 bytes @ 0x14
  4776                           
  4777  0134                     ?_eval_poly:	
  4778                           ; 2 bytes @ 0x14
  4779                           
  4780  0134                     GetBitMask@storage:	
  4781                           ; 3 bytes @ 0x14
  4782                           
  4783  0134                     modCos@angle:	
  4784                           ; 2 bytes @ 0x14
  4785                           
  4786  0134                     eval_poly@x:	
  4787                           ; 3 bytes @ 0x14
  4788                           
  4789  0134                     _modTri$3268:	
  4790                           ; 3 bytes @ 0x14
  4791                           
  4792  0134                     _modSaw$3269:	
  4793                           ; 3 bytes @ 0x14
  4794                           
  4795                           
  4796                           ; 3 bytes @ 0x14
  4797  0134                     	ds	1
  4798  0135                     set_subdivision@tmpX:	
  4799  0135                     floor@expon:	
  4800                           ; 2 bytes @ 0x15
  4801                           
  4802                           
  4803                           ; 2 bytes @ 0x15
  4804  0135                     	ds	1
  4805  0136                     GetBitMask@index:	
  4806                           
  4807                           ; 1 bytes @ 0x16
  4808  0136                     	ds	1
  4809  0137                     ?___ftsub:	
  4810  0137                     GetBitMask@shift:	
  4811                           ; 3 bytes @ 0x17
  4812                           
  4813  0137                     eval_poly@d:	
  4814                           ; 1 bytes @ 0x17
  4815                           
  4816  0137                     modCos@inflection:	
  4817                           ; 2 bytes @ 0x17
  4818                           
  4819  0137                     modTri@shift:	
  4820                           ; 3 bytes @ 0x17
  4821                           
  4822  0137                     ___ftsub@f2:	
  4823                           ; 3 bytes @ 0x17
  4824                           
  4825  0137                     _modSaw$3270:	
  4826                           ; 3 bytes @ 0x17
  4827                           
  4828                           
  4829                           ; 3 bytes @ 0x17
  4830  0137                     	ds	1
  4831  0138                     ??_GetBitMask:	
  4832                           
  4833                           ; 1 bytes @ 0x18
  4834  0138                     	ds	1
  4835  0139                     eval_poly@n:	
  4836                           
  4837                           ; 2 bytes @ 0x19
  4838  0139                     	ds	1
  4839  013A                     ??_modCos:	
  4840  013A                     modSaw@mod:	
  4841                           ; 1 bytes @ 0x1A
  4842                           
  4843  013A                     modTri@period:	
  4844                           ; 2 bytes @ 0x1A
  4845                           
  4846  013A                     ___ftsub@f1:	
  4847                           ; 3 bytes @ 0x1A
  4848                           
  4849                           
  4850                           ; 3 bytes @ 0x1A
  4851  013A                     	ds	1
  4852  013B                     eval_poly@res:	
  4853                           
  4854                           ; 3 bytes @ 0x1B
  4855  013B                     	ds	1
  4856  013C                     GetBitMask@mask:	
  4857  013C                     modSaw@shift:	
  4858                           ; 2 bytes @ 0x1C
  4859                           
  4860  013C                     _modCos$3267:	
  4861                           ; 3 bytes @ 0x1C
  4862                           
  4863                           
  4864                           ; 3 bytes @ 0x1C
  4865  013C                     	ds	1
  4866  013D                     modTri@tmpVal:	
  4867                           
  4868                           ; 3 bytes @ 0x1D
  4869  013D                     	ds	1
  4870  013E                     ?_sin:	
  4871  013E                     ?_log:	
  4872                           ; 3 bytes @ 0x1E
  4873                           
  4874  013E                     ?_ldexp:	
  4875                           ; 3 bytes @ 0x1E
  4876                           
  4877  013E                     GetBitMask@shiftCount:	
  4878                           ; 3 bytes @ 0x1E
  4879                           
  4880  013E                     sin@f:	
  4881                           ; 2 bytes @ 0x1E
  4882                           
  4883  013E                     ldexp@value:	
  4884                           ; 3 bytes @ 0x1E
  4885                           
  4886  013E                     log@x:	
  4887                           ; 3 bytes @ 0x1E
  4888                           
  4889                           
  4890                           ; 3 bytes @ 0x1E
  4891  013E                     	ds	1
  4892  013F                     modCos@shift:	
  4893  013F                     modSaw@period:	
  4894                           ; 3 bytes @ 0x1F
  4895                           
  4896                           
  4897                           ; 3 bytes @ 0x1F
  4898  013F                     	ds	1
  4899  0140                     ?_getPreset:	
  4900                           
  4901                           ; 15 bytes @ 0x20
  4902  0140                     	ds	1
  4903  0141                     ??_sin:	
  4904  0141                     ??_log:	
  4905                           ; 1 bytes @ 0x21
  4906                           
  4907  0141                     ldexp@newexp:	
  4908                           ; 1 bytes @ 0x21
  4909                           
  4910                           
  4911                           ; 2 bytes @ 0x21
  4912  0141                     	ds	1
  4913  0142                     ?_modSawRev:	
  4914  0142                     log@exponent:	
  4915                           ; 2 bytes @ 0x22
  4916                           
  4917  0142                     modCos@period:	
  4918                           ; 2 bytes @ 0x22
  4919                           
  4920  0142                     modSawRev@angle:	
  4921                           ; 3 bytes @ 0x22
  4922                           
  4923  0142                     sin@y:	
  4924                           ; 3 bytes @ 0x22
  4925                           
  4926                           
  4927                           ; 3 bytes @ 0x22
  4928  0142                     	ds	1
  4929  0143                     ??_ldexp:	
  4930                           
  4931                           ; 1 bytes @ 0x23
  4932  0143                     	ds	2
  4933  0145                     modCos@tmpVal:	
  4934  0145                     modSawRev@inflection:	
  4935                           ; 3 bytes @ 0x25
  4936                           
  4937  0145                     _ldexp$3018:	
  4938                           ; 3 bytes @ 0x25
  4939                           
  4940  0145                     _sin$3277:	
  4941                           ; 3 bytes @ 0x25
  4942                           
  4943                           
  4944                           ; 3 bytes @ 0x25
  4945  0145                     	ds	3
  4946  0148                     ??_modSawRev:	
  4947  0148                     ?_modSquare:	
  4948                           ; 1 bytes @ 0x28
  4949                           
  4950  0148                     ?_exp:	
  4951                           ; 2 bytes @ 0x28
  4952                           
  4953  0148                     modSquare@angle:	
  4954                           ; 3 bytes @ 0x28
  4955                           
  4956  0148                     sin@x2:	
  4957                           ; 3 bytes @ 0x28
  4958                           
  4959  0148                     exp@x:	
  4960                           ; 3 bytes @ 0x28
  4961                           
  4962                           
  4963                           ; 3 bytes @ 0x28
  4964  0148                     	ds	3
  4965  014B                     ??_exp:	
  4966  014B                     sin@sgn:	
  4967                           ; 1 bytes @ 0x2B
  4968                           
  4969  014B                     modSquare@inflection:	
  4970                           ; 1 bytes @ 0x2B
  4971                           
  4972                           
  4973                           ; 3 bytes @ 0x2B
  4974  014B                     	ds	1
  4975  014C                     ?_cos:	
  4976  014C                     cos@f:	
  4977                           ; 3 bytes @ 0x2C
  4978                           
  4979  014C                     _exp$3278:	
  4980                           ; 3 bytes @ 0x2C
  4981                           
  4982                           
  4983                           ; 3 bytes @ 0x2C
  4984  014C                     	ds	2
  4985  014E                     modSquare@tmpVal:	
  4986                           
  4987                           ; 2 bytes @ 0x2E
  4988  014E                     	ds	1
  4989  014F                     ??_getPreset:	
  4990  014F                     _exp$2981:	
  4991                           ; 1 bytes @ 0x2F
  4992                           
  4993  014F                     _cos$3274:	
  4994                           ; 3 bytes @ 0x2F
  4995                           
  4996                           
  4997                           ; 3 bytes @ 0x2F
  4998  014F                     	ds	1
  4999  0150                     ??_updateModulationArray:	
  5000                           
  5001                           ; 1 bytes @ 0x30
  5002  0150                     	ds	2
  5003  0152                     ??_calcCosArray:	
  5004  0152                     exp@exponent:	
  5005                           ; 1 bytes @ 0x32
  5006                           
  5007                           
  5008                           ; 2 bytes @ 0x32
  5009  0152                     	ds	1
  5010  0153                     ??_getCurrentState:	
  5011                           
  5012                           ; 1 bytes @ 0x33
  5013  0153                     	ds	1
  5014  0154                     ?_getVolume:	
  5015  0154                     ?_getFrequency:	
  5016                           ; 2 bytes @ 0x34
  5017                           
  5018  0154                     ?_getSymmetry:	
  5019                           ; 2 bytes @ 0x34
  5020                           
  5021  0154                     ?_getDepth:	
  5022                           ; 2 bytes @ 0x34
  5023                           
  5024  0154                     ?_getWaveFormState:	
  5025                           ; 2 bytes @ 0x34
  5026                           
  5027  0154                     ?_getSubdivisionState:	
  5028                           ; 2 bytes @ 0x34
  5029                           
  5030  0154                     ?_getSwitchBypassState:	
  5031                           ; 2 bytes @ 0x34
  5032                           
  5033  0154                     ?_getTapTime:	
  5034                           ; 2 bytes @ 0x34
  5035                           
  5036  0154                     exp@sign:	
  5037                           ; 4 bytes @ 0x34
  5038                           
  5039  0154                     updateModulationArray@angleFactor:	
  5040                           ; 1 bytes @ 0x34
  5041                           
  5042                           
  5043                           ; 2 bytes @ 0x34
  5044  0154                     	ds	1
  5045  0155                     ?_pow:	
  5046  0155                     pow@x:	
  5047                           ; 3 bytes @ 0x35
  5048                           
  5049                           
  5050                           ; 3 bytes @ 0x35
  5051  0155                     	ds	1
  5052  0156                     ??_getWaveFormState:	
  5053  0156                     ??_getSubdivisionState:	
  5054                           ; 1 bytes @ 0x36
  5055                           
  5056  0156                     ??_getSwitchBypassState:	
  5057                           ; 1 bytes @ 0x36
  5058                           
  5059  0156                     updateModulationArray@iAngle_2595:	
  5060                           ; 1 bytes @ 0x36
  5061                           
  5062  0156                     calcCosArray@tmpVal:	
  5063                           ; 1 bytes @ 0x36
  5064                           
  5065                           
  5066                           ; 3 bytes @ 0x36
  5067  0156                     	ds	1
  5068  0157                     updateModulationArray@subDiv:	
  5069                           
  5070                           ; 2 bytes @ 0x37
  5071  0157                     	ds	1
  5072  0158                     ??_InitWaveform:	
  5073  0158                     ??_InitSubdivision:	
  5074                           ; 1 bytes @ 0x38
  5075                           
  5076  0158                     initSwitchBypass@initState:	
  5077                           ; 1 bytes @ 0x38
  5078                           
  5079  0158                     pow@y:	
  5080                           ; 2 bytes @ 0x38
  5081                           
  5082                           
  5083                           ; 3 bytes @ 0x38
  5084  0158                     	ds	1
  5085  0159                     calcCosArray@iAngle:	
  5086  0159                     updateModulationArray@thisAngle:	
  5087                           ; 1 bytes @ 0x39
  5088                           
  5089                           
  5090                           ; 2 bytes @ 0x39
  5091  0159                     	ds	2
  5092  015B                     ??_pow:	
  5093  015B                     updateModulationArray@iAngle:	
  5094                           ; 1 bytes @ 0x3B
  5095                           
  5096                           
  5097                           ; 1 bytes @ 0x3B
  5098  015B                     	ds	1
  5099  015C                     _pow$3275:	
  5100                           
  5101                           ; 3 bytes @ 0x3C
  5102  015C                     	ds	3
  5103  015F                     _pow$3276:	
  5104                           
  5105                           ; 3 bytes @ 0x3F
  5106  015F                     	ds	3
  5107  0162                     pow@sign:	
  5108                           
  5109                           ; 1 bytes @ 0x42
  5110  0162                     	ds	1
  5111  0163                     pow@yi:	
  5112                           
  5113                           ; 4 bytes @ 0x43
  5114  0163                     	ds	4
  5115  0167                     ?_scaleA10kPot:	
  5116  0167                     ?_scaleiA10kPot:	
  5117                           ; 2 bytes @ 0x47
  5118                           
  5119  0167                     ?_scaleA100kPot:	
  5120                           ; 2 bytes @ 0x47
  5121                           
  5122  0167                     scaleA100kPot@input:	
  5123                           ; 2 bytes @ 0x47
  5124                           
  5125  0167                     scaleA10kPot@input:	
  5126                           ; 3 bytes @ 0x47
  5127                           
  5128  0167                     scaleiA10kPot@input:	
  5129                           ; 3 bytes @ 0x47
  5130                           
  5131                           
  5132                           ; 3 bytes @ 0x47
  5133  0167                     	ds	3
  5134  016A                     ?_setVolume:	
  5135  016A                     ?_setFrequency:	
  5136                           ; 1 bytes @ 0x4A
  5137                           
  5138  016A                     setVolume@rawValue:	
  5139                           ; 1 bytes @ 0x4A
  5140                           
  5141  016A                     setFrequency@rawValue:	
  5142                           ; 2 bytes @ 0x4A
  5143                           
  5144                           
  5145                           ; 2 bytes @ 0x4A
  5146  016A                     	ds	2
  5147  016C                     _setFrequency$3273:	
  5148                           
  5149                           ; 3 bytes @ 0x4C
  5150  016C                     	ds	3
  5151                           
  5152                           	psect	cstackBANK1
  5153  00A0                     __pcstackBANK1:	
  5154  00A0                     ?___ftge:	
  5155  00A0                     ?_set_leds_top:	
  5156                           ; 1 bit 
  5157                           
  5158  00A0                     ?_USARTInit:	
  5159                           ; 1 bytes @ 0x0
  5160                           
  5161  00A0                     ??_ConfigureOscillator:	
  5162                           ; 1 bytes @ 0x0
  5163                           
  5164  00A0                     ??_InitApp:	
  5165                           ; 1 bytes @ 0x0
  5166                           
  5167  00A0                     ??_InitializeTaps:	
  5168                           ; 1 bytes @ 0x0
  5169                           
  5170  00A0                     ??_USARTDataAvailable:	
  5171                           ; 1 bytes @ 0x0
  5172                           
  5173  00A0                     ?_setLongBypassState:	
  5174                           ; 1 bytes @ 0x0
  5175                           
  5176  00A0                     ??_updateTapTime:	
  5177                           ; 1 bytes @ 0x0
  5178                           
  5179  00A0                     ??_updateSubdivisionState:	
  5180                           ; 1 bytes @ 0x0
  5181                           
  5182  00A0                     ?_set_leds_bottom:	
  5183                           ; 1 bytes @ 0x0
  5184                           
  5185  00A0                     ??_updateWaveFormState:	
  5186                           ; 1 bytes @ 0x0
  5187                           
  5188  00A0                     ??_init_adc:	
  5189                           ; 1 bytes @ 0x0
  5190                           
  5191  00A0                     ??_init_pwm:	
  5192                           ; 1 bytes @ 0x0
  5193                           
  5194  00A0                     ??_init_timer2:	
  5195                           ; 1 bytes @ 0x0
  5196                           
  5197  00A0                     ??_init_timer0:	
  5198                           ; 1 bytes @ 0x0
  5199                           
  5200  00A0                     ??_updatePedalMode:	
  5201                           ; 1 bytes @ 0x0
  5202                           
  5203  00A0                     ?_setLongTapState:	
  5204                           ; 1 bytes @ 0x0
  5205                           
  5206  00A0                     ??_updateSwitchBypassState:	
  5207                           ; 1 bytes @ 0x0
  5208                           
  5209  00A0                     ?_updateVolume:	
  5210                           ; 1 bytes @ 0x0
  5211                           
  5212  00A0                     ?_updateFrequency:	
  5213                           ; 1 bytes @ 0x0
  5214                           
  5215  00A0                     ?_updateDepth:	
  5216                           ; 1 bytes @ 0x0
  5217                           
  5218  00A0                     ??_USARTReadData:	
  5219                           ; 1 bytes @ 0x0
  5220                           
  5221  00A0                     ?___bmul:	
  5222                           ; 1 bytes @ 0x0
  5223                           
  5224  00A0                     ?_getModulationSubdivision:	
  5225                           ; 1 bytes @ 0x0
  5226                           
  5227  00A0                     ?_adc_convert:	
  5228                           ; 2 bytes @ 0x0
  5229                           
  5230  00A0                     ?_FLASH_ReadWord:	
  5231                           ; 2 bytes @ 0x0
  5232                           
  5233  00A0                     ?___awdiv:	
  5234                           ; 2 bytes @ 0x0
  5235                           
  5236  00A0                     ?___ftpack:	
  5237                           ; 2 bytes @ 0x0
  5238                           
  5239  00A0                     ?_frexp:	
  5240                           ; 3 bytes @ 0x0
  5241                           
  5242  00A0                     ?___lmul:	
  5243                           ; 3 bytes @ 0x0
  5244                           
  5245  00A0                     ?___aldiv:	
  5246                           ; 4 bytes @ 0x0
  5247                           
  5248  00A0                     ___bmul@multiplicand:	
  5249                           ; 4 bytes @ 0x0
  5250                           
  5251  00A0                     FLASH_ReadWord@flashAddr:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  00A0                     set_leds_top@x:	
  5255                           ; 2 bytes @ 0x0
  5256                           
  5257  00A0                     set_leds_bottom@x:	
  5258                           ; 2 bytes @ 0x0
  5259                           
  5260  00A0                     updateVolume@currentValue:	
  5261                           ; 2 bytes @ 0x0
  5262                           
  5263  00A0                     updateFrequency@currentValue:	
  5264                           ; 2 bytes @ 0x0
  5265                           
  5266  00A0                     updateDepth@currentValue:	
  5267                           ; 2 bytes @ 0x0
  5268                           
  5269  00A0                     setLongBypassState@f_state:	
  5270                           ; 2 bytes @ 0x0
  5271                           
  5272  00A0                     setLongTapState@f_state:	
  5273                           ; 2 bytes @ 0x0
  5274                           
  5275  00A0                     USARTInit@baud_rate:	
  5276                           ; 2 bytes @ 0x0
  5277                           
  5278  00A0                     ___awdiv@divisor:	
  5279                           ; 2 bytes @ 0x0
  5280                           
  5281  00A0                     ___ftpack@arg:	
  5282                           ; 2 bytes @ 0x0
  5283                           
  5284  00A0                     ___ftge@ff1:	
  5285                           ; 3 bytes @ 0x0
  5286                           
  5287  00A0                     frexp@value:	
  5288                           ; 3 bytes @ 0x0
  5289                           
  5290  00A0                     ___lmul@multiplier:	
  5291                           ; 3 bytes @ 0x0
  5292                           
  5293  00A0                     ___aldiv@divisor:	
  5294                           ; 4 bytes @ 0x0
  5295                           
  5296                           
  5297                           ; 4 bytes @ 0x0
  5298  00A0                     	ds	1
  5299  00A1                     ??___bmul:	
  5300  00A1                     updateSwitchBypassState@state:	
  5301                           ; 1 bytes @ 0x1
  5302                           
  5303  00A1                     USARTReadData@data:	
  5304                           ; 1 bytes @ 0x1
  5305                           
  5306  00A1                     InitializeTaps@itap:	
  5307                           ; 1 bytes @ 0x1
  5308                           
  5309                           
  5310                           ; 2 bytes @ 0x1
  5311  00A1                     	ds	1
  5312  00A2                     ??_getModulationSubdivision:	
  5313  00A2                     ??_USARTInit:	
  5314                           ; 1 bytes @ 0x2
  5315                           
  5316  00A2                     ?_USARTReadBuffer:	
  5317                           ; 1 bytes @ 0x2
  5318                           
  5319  00A2                     ??_setLongBypassState:	
  5320                           ; 1 bytes @ 0x2
  5321                           
  5322  00A2                     ??_set_leds_bottom:	
  5323                           ; 1 bytes @ 0x2
  5324                           
  5325  00A2                     ??_adc_convert:	
  5326                           ; 1 bytes @ 0x2
  5327                           
  5328  00A2                     ?_setDepth:	
  5329                           ; 1 bytes @ 0x2
  5330                           
  5331  00A2                     ??_setLongTapState:	
  5332                           ; 1 bytes @ 0x2
  5333                           
  5334  00A2                     ??_FLASH_ReadWord:	
  5335                           ; 1 bytes @ 0x2
  5336                           
  5337  00A2                     ??_updateVolume:	
  5338                           ; 1 bytes @ 0x2
  5339                           
  5340  00A2                     ??_updateFrequency:	
  5341                           ; 1 bytes @ 0x2
  5342                           
  5343  00A2                     ??_updateDepth:	
  5344                           ; 1 bytes @ 0x2
  5345                           
  5346  00A2                     FLASH_ReadWord@GIEBitValue:	
  5347                           ; 1 bytes @ 0x2
  5348                           
  5349  00A2                     ___bmul@product:	
  5350                           ; 1 bytes @ 0x2
  5351                           
  5352  00A2                     set_leds_top@ledState:	
  5353                           ; 1 bytes @ 0x2
  5354                           
  5355  00A2                     USARTReadBuffer@len:	
  5356                           ; 2 bytes @ 0x2
  5357                           
  5358  00A2                     setDepth@rawValue:	
  5359                           ; 2 bytes @ 0x2
  5360                           
  5361  00A2                     ___awdiv@dividend:	
  5362                           ; 2 bytes @ 0x2
  5363                           
  5364                           
  5365                           ; 2 bytes @ 0x2
  5366  00A2                     	ds	1
  5367  00A3                     ?_HEF_ByteArrayRead:	
  5368  00A3                     adc_convert@channel:	
  5369                           ; 1 bytes @ 0x3
  5370                           
  5371  00A3                     ___bmul@multiplier:	
  5372                           ; 1 bytes @ 0x3
  5373                           
  5374  00A3                     ___ftpack@exp:	
  5375                           ; 1 bytes @ 0x3
  5376                           
  5377  00A3                     frexp@eptr:	
  5378                           ; 1 bytes @ 0x3
  5379                           
  5380  00A3                     HEF_ByteArrayRead@bArray:	
  5381                           ; 1 bytes @ 0x3
  5382                           
  5383  00A3                     ___ftge@ff2:	
  5384                           ; 2 bytes @ 0x3
  5385                           
  5386                           
  5387                           ; 3 bytes @ 0x3
  5388  00A3                     	ds	1
  5389  00A4                     ??_set_leds_top:	
  5390  00A4                     ??_USARTReadBuffer:	
  5391                           ; 1 bytes @ 0x4
  5392                           
  5393  00A4                     ??_setDepth:	
  5394                           ; 1 bytes @ 0x4
  5395                           
  5396  00A4                     ??_resetRingLEDs:	
  5397                           ; 1 bytes @ 0x4
  5398                           
  5399  00A4                     ??_setPresetDisplay:	
  5400                           ; 1 bytes @ 0x4
  5401                           
  5402  00A4                     ??_setExpressionDisplay:	
  5403                           ; 1 bytes @ 0x4
  5404                           
  5405  00A4                     ??_frexp:	
  5406                           ; 1 bytes @ 0x4
  5407                           
  5408  00A4                     ??___awdiv:	
  5409                           ; 1 bytes @ 0x4
  5410                           
  5411  00A4                     ___ftpack@sign:	
  5412                           ; 1 bytes @ 0x4
  5413                           
  5414  00A4                     ___lmul@multiplicand:	
  5415                           ; 1 bytes @ 0x4
  5416                           
  5417  00A4                     ___aldiv@dividend:	
  5418                           ; 4 bytes @ 0x4
  5419                           
  5420                           
  5421                           ; 4 bytes @ 0x4
  5422  00A4                     	ds	1
  5423  00A5                     ??___ftpack:	
  5424  00A5                     HEF_ByteArrayRead@block:	
  5425                           ; 1 bytes @ 0x5
  5426                           
  5427  00A5                     ___awdiv@counter:	
  5428                           ; 1 bytes @ 0x5
  5429                           
  5430                           
  5431                           ; 1 bytes @ 0x5
  5432  00A5                     	ds	1
  5433  00A6                     ??___ftge:	
  5434  00A6                     setPresetDisplay@ledChannel:	
  5435                           ; 1 bytes @ 0x6
  5436                           
  5437  00A6                     setExpressionDisplay@ledChannel:	
  5438                           ; 1 bytes @ 0x6
  5439                           
  5440  00A6                     USARTReadBuffer@buff:	
  5441                           ; 1 bytes @ 0x6
  5442                           
  5443  00A6                     HEF_ByteArrayRead@count:	
  5444                           ; 1 bytes @ 0x6
  5445                           
  5446  00A6                     ___awdiv@sign:	
  5447                           ; 1 bytes @ 0x6
  5448                           
  5449                           
  5450                           ; 1 bytes @ 0x6
  5451  00A6                     	ds	1
  5452  00A7                     ??_update_mode:	
  5453  00A7                     ??_update_selectMode:	
  5454                           ; 1 bytes @ 0x7
  5455                           
  5456  00A7                     ??_setPedalMode:	
  5457                           ; 1 bytes @ 0x7
  5458                           
  5459  00A7                     ??_HEF_ByteArrayRead:	
  5460                           ; 1 bytes @ 0x7
  5461                           
  5462  00A7                     USARTReadBuffer@i:	
  5463                           ; 1 bytes @ 0x7
  5464                           
  5465  00A7                     ___awdiv@quotient:	
  5466                           ; 2 bytes @ 0x7
  5467                           
  5468                           
  5469                           ; 2 bytes @ 0x7
  5470  00A7                     	ds	1
  5471  00A8                     ??___lmul:	
  5472  00A8                     ??___aldiv:	
  5473                           ; 1 bytes @ 0x8
  5474                           
  5475  00A8                     ?___altoft:	
  5476                           ; 1 bytes @ 0x8
  5477                           
  5478  00A8                     ?___awtoft:	
  5479                           ; 3 bytes @ 0x8
  5480                           
  5481  00A8                     ?___lbtoft:	
  5482                           ; 3 bytes @ 0x8
  5483                           
  5484  00A8                     ?___lltoft:	
  5485                           ; 3 bytes @ 0x8
  5486                           
  5487  00A8                     ___awtoft@c:	
  5488                           ; 3 bytes @ 0x8
  5489                           
  5490  00A8                     ___lmul@product:	
  5491                           ; 2 bytes @ 0x8
  5492                           
  5493  00A8                     ___altoft@c:	
  5494                           ; 4 bytes @ 0x8
  5495                           
  5496  00A8                     ___lltoft@c:	
  5497                           ; 4 bytes @ 0x8
  5498                           
  5499                           
  5500                           ; 4 bytes @ 0x8
  5501  00A8                     	ds	1
  5502  00A9                     ___aldiv@counter:	
  5503  00A9                     HEF_ByteArrayRead@wordAdd:	
  5504                           ; 1 bytes @ 0x9
  5505                           
  5506                           
  5507                           ; 2 bytes @ 0x9
  5508  00A9                     	ds	1
  5509  00AA                     ___aldiv@sign:	
  5510                           
  5511                           ; 1 bytes @ 0xA
  5512  00AA                     	ds	1
  5513  00AB                     ??___awtoft:	
  5514  00AB                     ??___lbtoft:	
  5515                           ; 1 bytes @ 0xB
  5516                           
  5517  00AB                     ___aldiv@quotient:	
  5518                           ; 1 bytes @ 0xB
  5519                           
  5520                           
  5521                           ; 4 bytes @ 0xB
  5522  00AB                     	ds	1
  5523  00AC                     ?_wait_ms:	
  5524  00AC                     ??___altoft:	
  5525                           ; 1 bytes @ 0xC
  5526                           
  5527  00AC                     ??___lltoft:	
  5528                           ; 1 bytes @ 0xC
  5529                           
  5530  00AC                     wait_ms@timeSec:	
  5531                           ; 1 bytes @ 0xC
  5532                           
  5533                           
  5534                           ; 2 bytes @ 0xC
  5535  00AC                     	ds	1
  5536  00AD                     ___awtoft@sign:	
  5537  00AD                     ___lltoft@exp:	
  5538                           ; 1 bytes @ 0xD
  5539                           
  5540                           
  5541                           ; 1 bytes @ 0xD
  5542  00AD                     	ds	1
  5543  00AE                     ??_wait_ms:	
  5544  00AE                     ?___ftmul:	
  5545                           ; 1 bytes @ 0xE
  5546                           
  5547  00AE                     ___altoft@exp:	
  5548                           ; 3 bytes @ 0xE
  5549                           
  5550  00AE                     ___ftmul@f1:	
  5551                           ; 1 bytes @ 0xE
  5552                           
  5553  00AE                     wait_ms@timemsl:	
  5554                           ; 3 bytes @ 0xE
  5555                           
  5556                           
  5557                           ; 4 bytes @ 0xE
  5558  00AE                     	ds	1
  5559  00AF                     ___altoft@sign:	
  5560  00AF                     ___lbtoft@c:	
  5561                           ; 1 bytes @ 0xF
  5562                           
  5563                           
  5564                           ; 1 bytes @ 0xF
  5565  00AF                     	ds	2
  5566  00B1                     ___ftmul@f2:	
  5567                           
  5568                           ; 3 bytes @ 0x11
  5569  00B1                     	ds	1
  5570  00B2                     ??_read_bottom_tactile:	
  5571  00B2                     ??_read_top_tactile:	
  5572                           ; 1 bytes @ 0x12
  5573                           
  5574  00B2                     ??_solidring_tactiles:	
  5575                           ; 1 bytes @ 0x12
  5576                           
  5577  00B2                     ??_ring_tactiles:	
  5578                           ; 1 bytes @ 0x12
  5579                           
  5580  00B2                     ?_setSwitchBypassRelays:	
  5581                           ; 1 bytes @ 0x12
  5582                           
  5583  00B2                     setSwitchBypassRelays@f_state:	
  5584                           ; 1 bytes @ 0x12
  5585                           
  5586                           
  5587                           ; 2 bytes @ 0x12
  5588  00B2                     	ds	1
  5589  00B3                     ring_tactiles@iLed:	
  5590                           
  5591                           ; 2 bytes @ 0x13
  5592  00B3                     	ds	1
  5593  00B4                     ??_setSwitchBypassRelays:	
  5594  00B4                     ??___ftmul:	
  5595                           ; 1 bytes @ 0x14
  5596                           
  5597  00B4                     solidring_tactiles@ring_delay:	
  5598                           ; 1 bytes @ 0x14
  5599                           
  5600                           
  5601                           ; 1 bytes @ 0x14
  5602  00B4                     	ds	1
  5603  00B5                     ?_setSwitchBypassState:	
  5604  00B5                     ring_tactiles@iLed_1609:	
  5605                           ; 1 bytes @ 0x15
  5606                           
  5607  00B5                     setSwitchBypassState@f_state:	
  5608                           ; 2 bytes @ 0x15
  5609                           
  5610                           
  5611                           ; 2 bytes @ 0x15
  5612  00B5                     	ds	2
  5613  00B7                     ??_setSwitchBypassState:	
  5614  00B7                     ??_showSave:	
  5615                           ; 1 bytes @ 0x17
  5616                           
  5617                           
  5618                           ; 1 bytes @ 0x17
  5619  00B7                     	ds	1
  5620  00B8                     ?_setDoublePressState:	
  5621  00B8                     ___ftmul@exp:	
  5622                           ; 1 bytes @ 0x18
  5623                           
  5624  00B8                     setDoublePressState@f_state:	
  5625                           ; 1 bytes @ 0x18
  5626                           
  5627                           
  5628                           ; 2 bytes @ 0x18
  5629  00B8                     	ds	1
  5630  00B9                     ___ftmul@f3_as_product:	
  5631                           
  5632                           ; 3 bytes @ 0x19
  5633  00B9                     	ds	1
  5634  00BA                     ??_setDoublePressState:	
  5635                           
  5636                           ; 1 bytes @ 0x1A
  5637  00BA                     	ds	2
  5638  00BC                     ??_updateSwitchBypass:	
  5639  00BC                     ??_updateSwitchTap:	
  5640                           ; 1 bytes @ 0x1C
  5641                           
  5642  00BC                     ___ftmul@cntr:	
  5643                           ; 1 bytes @ 0x1C
  5644                           
  5645                           
  5646                           ; 1 bytes @ 0x1C
  5647  00BC                     	ds	1
  5648  00BD                     ___ftmul@sign:	
  5649                           
  5650                           ; 1 bytes @ 0x1D
  5651  00BD                     	ds	1
  5652  00BE                     ?___ftneg:	
  5653  00BE                     ___ftneg@f1:	
  5654                           ; 3 bytes @ 0x1E
  5655                           
  5656                           
  5657                           ; 3 bytes @ 0x1E
  5658  00BE                     	ds	3
  5659  00C1                     ??___ftneg:	
  5660  00C1                     ?___ftadd:	
  5661                           ; 1 bytes @ 0x21
  5662                           
  5663  00C1                     ___ftadd@f1:	
  5664                           ; 3 bytes @ 0x21
  5665                           
  5666                           
  5667                           ; 3 bytes @ 0x21
  5668  00C1                     	ds	1
  5669  00C2                     updateSwitchTap@tapCntDivisor:	
  5670                           
  5671                           ; 2 bytes @ 0x22
  5672  00C2                     	ds	2
  5673  00C4                     updateSwitchTap@iCnt:	
  5674  00C4                     ___ftadd@f2:	
  5675                           ; 1 bytes @ 0x24
  5676                           
  5677                           
  5678                           ; 3 bytes @ 0x24
  5679  00C4                     	ds	3
  5680  00C7                     ??___ftadd:	
  5681                           
  5682                           ; 1 bytes @ 0x27
  5683  00C7                     	ds	4
  5684  00CB                     ___ftadd@sign:	
  5685                           
  5686                           ; 1 bytes @ 0x2B
  5687  00CB                     	ds	1
  5688  00CC                     ___ftadd@exp2:	
  5689                           
  5690                           ; 1 bytes @ 0x2C
  5691  00CC                     	ds	1
  5692  00CD                     ___ftadd@exp1:	
  5693                           
  5694                           ; 1 bytes @ 0x2D
  5695  00CD                     	ds	1
  5696  00CE                     ?___ftdiv:	
  5697  00CE                     ___ftdiv@f2:	
  5698                           ; 3 bytes @ 0x2E
  5699                           
  5700                           
  5701                           ; 3 bytes @ 0x2E
  5702  00CE                     	ds	3
  5703  00D1                     ___ftdiv@f1:	
  5704                           
  5705                           ; 3 bytes @ 0x31
  5706  00D1                     	ds	3
  5707  00D4                     ??___ftdiv:	
  5708                           
  5709                           ; 1 bytes @ 0x34
  5710  00D4                     	ds	4
  5711  00D8                     ___ftdiv@cntr:	
  5712                           
  5713                           ; 1 bytes @ 0x38
  5714  00D8                     	ds	1
  5715  00D9                     ___ftdiv@f3:	
  5716                           
  5717                           ; 3 bytes @ 0x39
  5718  00D9                     	ds	3
  5719  00DC                     ___ftdiv@exp:	
  5720                           
  5721                           ; 1 bytes @ 0x3C
  5722  00DC                     	ds	1
  5723  00DD                     ___ftdiv@sign:	
  5724                           
  5725                           ; 1 bytes @ 0x3D
  5726  00DD                     	ds	1
  5727  00DE                     ?_map:	
  5728  00DE                     map@x:	
  5729                           ; 3 bytes @ 0x3E
  5730                           
  5731                           
  5732                           ; 3 bytes @ 0x3E
  5733  00DE                     	ds	3
  5734  00E1                     map@in_min:	
  5735                           
  5736                           ; 3 bytes @ 0x41
  5737  00E1                     	ds	3
  5738  00E4                     map@in_max:	
  5739                           
  5740                           ; 3 bytes @ 0x44
  5741  00E4                     	ds	3
  5742  00E7                     map@out_min:	
  5743                           
  5744                           ; 3 bytes @ 0x47
  5745  00E7                     	ds	3
  5746  00EA                     map@out_max:	
  5747                           
  5748                           ; 3 bytes @ 0x4A
  5749  00EA                     	ds	3
  5750  00ED                     ??_map:	
  5751  00ED                     _map$3251:	
  5752                           ; 1 bytes @ 0x4D
  5753                           
  5754                           
  5755                           ; 3 bytes @ 0x4D
  5756  00ED                     	ds	3
  5757  00F0                     ??_setSymmetry:	
  5758  00F0                     ??_initSwitchTap:	
  5759                           ; 1 bytes @ 0x50
  5760                           
  5761  00F0                     ??_initSwitchBypass:	
  5762                           ; 1 bytes @ 0x50
  5763                           
  5764  00F0                     ??_getVolume:	
  5765                           ; 1 bytes @ 0x50
  5766                           
  5767  00F0                     ??_getFrequency:	
  5768                           ; 1 bytes @ 0x50
  5769                           
  5770  00F0                     ??_getSymmetry:	
  5771                           ; 1 bytes @ 0x50
  5772                           
  5773  00F0                     ??_getDepth:	
  5774                           ; 1 bytes @ 0x50
  5775                           
  5776  00F0                     ??_setVolume:	
  5777                           ; 1 bytes @ 0x50
  5778                           
  5779  00F0                     ??_setFrequency:	
  5780                           ; 1 bytes @ 0x50
  5781                           
  5782  00F0                     ??_scaleA10kPot:	
  5783                           ; 1 bytes @ 0x50
  5784                           
  5785  00F0                     ??_scaleiA10kPot:	
  5786                           ; 1 bytes @ 0x50
  5787                           
  5788  00F0                     ??_scaleA100kPot:	
  5789                           ; 1 bytes @ 0x50
  5790                           
  5791  00F0                     ??_set_subdivision:	
  5792                           ; 1 bytes @ 0x50
  5793                           
  5794  00F0                     ??_getModulationDelayTime:	
  5795                           ; 1 bytes @ 0x50
  5796                           
  5797  00F0                     ??_cos:	
  5798                           ; 1 bytes @ 0x50
  5799                           
  5800  00F0                     ??_modTri:	
  5801                           ; 1 bytes @ 0x50
  5802                           
  5803  00F0                     ??_modSquare:	
  5804                           ; 1 bytes @ 0x50
  5805                           
  5806  00F0                     ??_modSaw:	
  5807                           ; 1 bytes @ 0x50
  5808                           
  5809  00F0                     ??_eval_poly:	
  5810                           ; 1 bytes @ 0x50
  5811                           
  5812  00F0                     ??_initStateManager:	
  5813                           ; 1 bytes @ 0x50
  5814                           
  5815  00F0                     ??_getTapTime:	
  5816                           ; 1 bytes @ 0x50
  5817                           
  5818  00F0                     ??___wmul:	
  5819                           ; 1 bytes @ 0x50
  5820                           
  5821  00F0                     ??___ftsub:	
  5822                           ; 1 bytes @ 0x50
  5823                           
  5824                           
  5825                           	psect	cstackCOMMON
  5826  0070                     __pcstackCOMMON:	
  5827                           ; 1 bytes @ 0x50
  5828                           
  5829  0070                     ?_USARTHandleRxInt:	
  5830  0070                     ??_USARTHandleRxInt:	
  5831                           ; 1 bytes @ 0x0
  5832                           
  5833  0070                     ?_calcCosArray:	
  5834                           ; 1 bytes @ 0x0
  5835                           
  5836  0070                     ?_ConfigureOscillator:	
  5837                           ; 1 bytes @ 0x0
  5838                           
  5839  0070                     ?_InitApp:	
  5840                           ; 1 bytes @ 0x0
  5841                           
  5842  0070                     ?_initSwitchTap:	
  5843                           ; 1 bytes @ 0x0
  5844                           
  5845  0070                     ?_InitWaveform:	
  5846                           ; 1 bytes @ 0x0
  5847                           
  5848  0070                     ?_InitSubdivision:	
  5849                           ; 1 bytes @ 0x0
  5850                           
  5851  0070                     ?_InitializeTaps:	
  5852                           ; 1 bytes @ 0x0
  5853                           
  5854  0070                     ?_initSwitchBypass:	
  5855                           ; 1 bytes @ 0x0
  5856                           
  5857  0070                     ?_USARTDataAvailable:	
  5858                           ; 1 bytes @ 0x0
  5859                           
  5860  0070                     ?_updateTapTime:	
  5861                           ; 1 bytes @ 0x0
  5862                           
  5863  0070                     ?_updateSubdivisionState:	
  5864                           ; 1 bytes @ 0x0
  5865                           
  5866  0070                     ?_updateWaveFormState:	
  5867                           ; 1 bytes @ 0x0
  5868                           
  5869  0070                     ?_update_mode:	
  5870                           ; 1 bytes @ 0x0
  5871                           
  5872  0070                     ?_update_selectMode:	
  5873                           ; 1 bytes @ 0x0
  5874                           
  5875  0070                     ?_updateSwitchBypass:	
  5876                           ; 1 bytes @ 0x0
  5877                           
  5878  0070                     ?_updateSwitchTap:	
  5879                           ; 1 bytes @ 0x0
  5880                           
  5881  0070                     ?_read_bottom_tactile:	
  5882                           ; 1 bytes @ 0x0
  5883                           
  5884  0070                     ?_read_top_tactile:	
  5885                           ; 1 bytes @ 0x0
  5886                           
  5887  0070                     ?_getModulationDelayTime:	
  5888                           ; 1 bytes @ 0x0
  5889                           
  5890  0070                     ?_updateModulationArray:	
  5891                           ; 1 bytes @ 0x0
  5892                           
  5893  0070                     ?_init_adc:	
  5894                           ; 1 bytes @ 0x0
  5895                           
  5896  0070                     ?_init_pwm:	
  5897                           ; 1 bytes @ 0x0
  5898                           
  5899  0070                     ?_init_timer2:	
  5900                           ; 1 bytes @ 0x0
  5901                           
  5902  0070                     ?_init_timer0:	
  5903                           ; 1 bytes @ 0x0
  5904                           
  5905  0070                     ?_FLASH_EraseBlock:	
  5906                           ; 1 bytes @ 0x0
  5907                           
  5908  0070                     ?_solidring_tactiles:	
  5909                           ; 1 bytes @ 0x0
  5910                           
  5911  0070                     ?_ring_tactiles:	
  5912                           ; 1 bytes @ 0x0
  5913                           
  5914  0070                     ?_resetRingLEDs:	
  5915                           ; 1 bytes @ 0x0
  5916                           
  5917  0070                     ?_setPedalMode:	
  5918                           ; 1 bytes @ 0x0
  5919                           
  5920  0070                     ?_setPresetDisplay:	
  5921                           ; 1 bytes @ 0x0
  5922                           
  5923  0070                     ?_setExpressionDisplay:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0070                     ?_updatePedalMode:	
  5927                           ; 1 bytes @ 0x0
  5928                           
  5929  0070                     ?_isr:	
  5930                           ; 1 bytes @ 0x0
  5931                           
  5932  0070                     ?_main:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0070                     ?_showSave:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0070                     ?_initStateManager:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0070                     ?_savePreset:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0070                     ?_updateSwitchBypassState:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0070                     ?_USARTReadData:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0070                     ?i1_set_leds_top:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0070                     ?i1___bmul:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0070                     ?_saveState:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0070                     ?i1_FLASH_ReadWord:	
  5960                           ; 2 bytes @ 0x0
  5961                           
  5962  0070                     ?i1_getModulationSubdivision:	
  5963                           ; 2 bytes @ 0x0
  5964                           
  5965  0070                     ?i1___wmul:	
  5966                           ; 2 bytes @ 0x0
  5967                           
  5968  0070                     ?i1___awdiv:	
  5969                           ; 2 bytes @ 0x0
  5970                           
  5971  0070                     ?i1___lmul:	
  5972                           ; 2 bytes @ 0x0
  5973                           
  5974  0070                     ?_getCurrentState:	
  5975                           ; 4 bytes @ 0x0
  5976                           
  5977  0070                     i1___bmul@multiplicand:	
  5978                           ; 15 bytes @ 0x0
  5979                           
  5980  0070                     FLASH_EraseBlock@startAddr:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0070                     i1FLASH_ReadWord@flashAddr:	
  5984                           ; 2 bytes @ 0x0
  5985                           
  5986  0070                     i1set_leds_top@x:	
  5987                           ; 2 bytes @ 0x0
  5988                           
  5989  0070                     i1___wmul@multiplier:	
  5990                           ; 2 bytes @ 0x0
  5991                           
  5992  0070                     i1___awdiv@divisor:	
  5993                           ; 2 bytes @ 0x0
  5994                           
  5995  0070                     i1___lmul@multiplier:	
  5996                           ; 2 bytes @ 0x0
  5997                           
  5998                           
  5999                           ; 4 bytes @ 0x0
  6000  0070                     	ds	1
  6001  0071                     ??i1___bmul:	
  6002                           
  6003                           ; 1 bytes @ 0x1
  6004  0071                     	ds	1
  6005  0072                     ??_FLASH_EraseBlock:	
  6006  0072                     ??i1_FLASH_ReadWord:	
  6007                           ; 1 bytes @ 0x2
  6008                           
  6009  0072                     ??i1_getModulationSubdivision:	
  6010                           ; 1 bytes @ 0x2
  6011                           
  6012  0072                     FLASH_EraseBlock@GIEBitValue:	
  6013                           ; 1 bytes @ 0x2
  6014                           
  6015  0072                     i1FLASH_ReadWord@GIEBitValue:	
  6016                           ; 1 bytes @ 0x2
  6017                           
  6018  0072                     i1___bmul@product:	
  6019                           ; 1 bytes @ 0x2
  6020                           
  6021  0072                     i1set_leds_top@ledState:	
  6022                           ; 1 bytes @ 0x2
  6023                           
  6024  0072                     i1___wmul@multiplicand:	
  6025                           ; 2 bytes @ 0x2
  6026                           
  6027  0072                     i1___awdiv@dividend:	
  6028                           ; 2 bytes @ 0x2
  6029                           
  6030                           
  6031                           ; 2 bytes @ 0x2
  6032  0072                     	ds	1
  6033  0073                     ?_HEF_ByteArrayWrite:	
  6034  0073                     ?i1_HEF_ByteArrayRead:	
  6035                           ; 1 bytes @ 0x3
  6036                           
  6037  0073                     HEF_ByteArrayWrite@byteArray:	
  6038                           ; 1 bytes @ 0x3
  6039                           
  6040  0073                     i1___bmul@multiplier:	
  6041                           ; 1 bytes @ 0x3
  6042                           
  6043  0073                     i1HEF_ByteArrayRead@bArray:	
  6044                           ; 1 bytes @ 0x3
  6045                           
  6046                           
  6047                           ; 2 bytes @ 0x3
  6048  0073                     	ds	1
  6049  0074                     ??i1_set_leds_top:	
  6050  0074                     ??i1___wmul:	
  6051                           ; 1 bytes @ 0x4
  6052                           
  6053  0074                     ??i1___awdiv:	
  6054                           ; 1 bytes @ 0x4
  6055                           
  6056  0074                     USARTHandleRxInt@data:	
  6057                           ; 1 bytes @ 0x4
  6058                           
  6059  0074                     HEF_ByteArrayWrite@count:	
  6060                           ; 1 bytes @ 0x4
  6061                           
  6062  0074                     i1___wmul@product:	
  6063                           ; 1 bytes @ 0x4
  6064                           
  6065  0074                     i1___lmul@multiplicand:	
  6066                           ; 2 bytes @ 0x4
  6067                           
  6068                           
  6069                           ; 4 bytes @ 0x4
  6070  0074                     	ds	1
  6071  0075                     ??_HEF_ByteArrayWrite:	
  6072  0075                     i1HEF_ByteArrayRead@block:	
  6073                           ; 1 bytes @ 0x5
  6074                           
  6075  0075                     i1___awdiv@counter:	
  6076                           ; 1 bytes @ 0x5
  6077                           
  6078                           
  6079                           ; 1 bytes @ 0x5
  6080  0075                     	ds	1
  6081  0076                     ?_SetBitMask:	
  6082  0076                     i1HEF_ByteArrayRead@count:	
  6083                           ; 2 bytes @ 0x6
  6084                           
  6085  0076                     i1___awdiv@sign:	
  6086                           ; 1 bytes @ 0x6
  6087                           
  6088  0076                     SetBitMask@storage:	
  6089                           ; 1 bytes @ 0x6
  6090                           
  6091                           
  6092                           ; 2 bytes @ 0x6
  6093  0076                     	ds	1
  6094  0077                     ??i1_HEF_ByteArrayRead:	
  6095  0077                     HEF_ByteArrayWrite@GIEBitValue:	
  6096                           ; 1 bytes @ 0x7
  6097                           
  6098  0077                     i1___awdiv@quotient:	
  6099                           ; 1 bytes @ 0x7
  6100                           
  6101                           
  6102                           ; 2 bytes @ 0x7
  6103  0077                     	ds	1
  6104  0078                     ??i1___lmul:	
  6105  0078                     HEF_ByteArrayWrite@block:	
  6106                           ; 1 bytes @ 0x8
  6107                           
  6108  0078                     SetBitMask@value:	
  6109                           ; 1 bytes @ 0x8
  6110                           
  6111  0078                     i1___lmul@product:	
  6112                           ; 2 bytes @ 0x8
  6113                           
  6114                           
  6115                           ; 4 bytes @ 0x8
  6116  0078                     	ds	1
  6117  0079                     HEF_ByteArrayWrite@blockAddr:	
  6118  0079                     i1HEF_ByteArrayRead@wordAdd:	
  6119                           ; 2 bytes @ 0x9
  6120                           
  6121                           
  6122                           ; 2 bytes @ 0x9
  6123  0079                     	ds	1
  6124  007A                     SetBitMask@index:	
  6125                           
  6126                           ; 2 bytes @ 0xA
  6127  007A                     	ds	2
  6128  007C                     ??i1___aldiv:	
  6129  007C                     SetBitMask@shift:	
  6130                           ; 1 bytes @ 0xC
  6131                           
  6132                           
  6133                           ; 2 bytes @ 0xC
  6134  007C                     	ds	2
  6135  007E                     ??_saveState:	
  6136                           
  6137                           	psect	cstackBANK0
  6138  0020                     __pcstackBANK0:	
  6139                           ; 1 bytes @ 0xE
  6140                           
  6141  0020                     ??_SetBitMask:	
  6142  0020                     ?i1___aldiv:	
  6143                           ; 1 bytes @ 0x0
  6144                           
  6145  0020                     i1___aldiv@divisor:	
  6146                           ; 4 bytes @ 0x0
  6147                           
  6148                           
  6149                           ; 4 bytes @ 0x0
  6150  0020                     	ds	4
  6151  0024                     i1___aldiv@dividend:	
  6152                           
  6153                           ; 4 bytes @ 0x4
  6154  0024                     	ds	2
  6155  0026                     SetBitMask@mask:	
  6156                           
  6157                           ; 2 bytes @ 0x6
  6158  0026                     	ds	2
  6159  0028                     i1___aldiv@counter:	
  6160  0028                     SetBitMask@shiftCount:	
  6161                           ; 1 bytes @ 0x8
  6162                           
  6163                           
  6164                           ; 2 bytes @ 0x8
  6165  0028                     	ds	1
  6166  0029                     i1___aldiv@sign:	
  6167                           
  6168                           ; 1 bytes @ 0x9
  6169  0029                     	ds	1
  6170  002A                     ??_savePreset:	
  6171  002A                     i1___aldiv@quotient:	
  6172                           ; 1 bytes @ 0xA
  6173                           
  6174                           
  6175                           ; 4 bytes @ 0xA
  6176  002A                     	ds	4
  6177  002E                     ?_modulation:	
  6178  002E                     savePreset@r:	
  6179                           ; 4 bytes @ 0xE
  6180                           
  6181  002E                     modulation@x:	
  6182                           ; 1 bytes @ 0xE
  6183                           
  6184                           
  6185                           ; 4 bytes @ 0xE
  6186  002E                     	ds	1
  6187  002F                     savePreset@symm:	
  6188                           
  6189                           ; 1 bytes @ 0xF
  6190  002F                     	ds	1
  6191  0030                     savePreset@dep:	
  6192                           
  6193                           ; 1 bytes @ 0x10
  6194  0030                     	ds	1
  6195  0031                     savePreset@presetChannel:	
  6196                           
  6197                           ; 1 bytes @ 0x11
  6198  0031                     	ds	1
  6199  0032                     savePreset@bankID:	
  6200  0032                     modulation@y:	
  6201                           ; 1 bytes @ 0x12
  6202                           
  6203                           
  6204                           ; 4 bytes @ 0x12
  6205  0032                     	ds	1
  6206  0033                     savePreset@presets:	
  6207                           
  6208                           ; 30 bytes @ 0x13
  6209  0033                     	ds	3
  6210  0036                     ??_modulation:	
  6211                           
  6212                           ; 1 bytes @ 0x16
  6213  0036                     	ds	27
  6214  0051                     savePreset@bankChannel:	
  6215                           
  6216                           ; 1 bytes @ 0x31
  6217  0051                     	ds	1
  6218  0052                     ??_isr:	
  6219                           
  6220                           ; 1 bytes @ 0x32
  6221  0052                     	ds	6
  6222  0058                     isr@subDiv:	
  6223                           
  6224                           ; 1 bytes @ 0x38
  6225  0058                     	ds	1
  6226                           
  6227                           	psect	maintext
  6228  1901                     __pmaintext:	
  6229 ;;
  6230 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  6231 ;;
  6232 ;; *************** function _main *****************
  6233 ;; Defined at:
  6234 ;;		line 80 in file "main.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;  tapCntDiviso    2   61[BANK3 ] int 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : B1F/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0      11       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6251 ;;      Totals:         0       0       0       0      17       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6252 ;;Total ram usage:       17 bytes
  6253 ;; Hardware stack levels required when called:   12
  6254 ;; This function calls:
  6255 ;;		_ConfigureOscillator
  6256 ;;		_InitApp
  6257 ;;		_InitSubdivision
  6258 ;;		_InitWaveform
  6259 ;;		_InitializeTaps
  6260 ;;		_USARTDataAvailable
  6261 ;;		_USARTInit
  6262 ;;		_USARTReadBuffer
  6263 ;;		___aldiv
  6264 ;;		___awtoft
  6265 ;;		___fttol
  6266 ;;		___lbtoft
  6267 ;;		_adc_convert
  6268 ;;		_calcCosArray
  6269 ;;		_getDepth
  6270 ;;		_getFrequency
  6271 ;;		_getModulationDelayTime
  6272 ;;		_getSymmetry
  6273 ;;		_getVolume
  6274 ;;		_initSwitchBypass
  6275 ;;		_initSwitchTap
  6276 ;;		_map
  6277 ;;		_read_bottom_tactile
  6278 ;;		_read_top_tactile
  6279 ;;		_scaleA100kPot
  6280 ;;		_scaleA10kPot
  6281 ;;		_scaleiA10kPot
  6282 ;;		_setDepth
  6283 ;;		_setFrequency
  6284 ;;		_setLongBypassState
  6285 ;;		_setSwitchBypassState
  6286 ;;		_setSymmetry
  6287 ;;		_setVolume
  6288 ;;		_set_leds_bottom
  6289 ;;		_set_leds_top
  6290 ;;		_set_subdivision
  6291 ;;		_updateModulationArray
  6292 ;;		_updateSubdivisionState
  6293 ;;		_updateSwitchBypass
  6294 ;;		_updateSwitchTap
  6295 ;;		_updateTapTime
  6296 ;;		_updateWaveFormState
  6297 ;;		_update_mode
  6298 ;;		_update_selectMode
  6299 ;; This function is called by:
  6300 ;;		Startup code after reset
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _main
  6306  1901                     _main:	
  6307                           
  6308                           ;main.c: 81: LATBbits.LATB5 = 0;
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6312  1901  0022               	movlb	2	; select bank2
  6313  1902  128D               	bcf	13,5	;volatile
  6314                           
  6315                           ;main.c: 82: setSymmetry(1023);
  6316  1903  30FF               	movlw	255
  6317  1904  00AE               	movwf	setSymmetry@rawValue^(0+256)
  6318  1905  3003               	movlw	3
  6319  1906  00AF               	movwf	(setSymmetry@rawValue^(0+256)+1)
  6320  1907  31AC  24ED  3199   	fcall	_setSymmetry
  6321                           
  6322                           ;main.c: 83: calcCosArray();
  6323  190A  31AE  26FD  3199   	fcall	_calcCosArray
  6324                           
  6325                           ;main.c: 85: USARTInit(31250);
  6326  190D  3012               	movlw	18
  6327  190E  0021               	movlb	1	; select bank1
  6328  190F  00A0               	movwf	USARTInit@baud_rate^(0+128)
  6329  1910  307A               	movlw	122
  6330  1911  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  6331  1912  31A9  2149  3199   	fcall	_USARTInit
  6332                           
  6333                           ;main.c: 86: ConfigureOscillator();
  6334  1915  31A0  2000  3199   	fcall	_ConfigureOscillator
  6335                           
  6336                           ;main.c: 87: InitApp();
  6337  1918  31B4  24E9  3199   	fcall	_InitApp
  6338                           
  6339                           ;main.c: 89: LATBbits.LATB0 = 0;
  6340  191B  0022               	movlb	2	; select bank2
  6341  191C  100D               	bcf	13,0	;volatile
  6342                           
  6343                           ;main.c: 90: LATBbits.LATB1 = 0;
  6344  191D  108D               	bcf	13,1	;volatile
  6345                           
  6346                           ;main.c: 91: LATBbits.LATB4 = 0;
  6347  191E  120D               	bcf	13,4	;volatile
  6348                           
  6349                           ;main.c: 92: LATBbits.LATB5 = 0;
  6350  191F  128D               	bcf	13,5	;volatile
  6351                           
  6352                           ;main.c: 94: PORTEbits.RE0 = 1;
  6353  1920  0020               	movlb	0	; select bank0
  6354  1921  1410               	bsf	16,0	;volatile
  6355                           
  6356                           ;main.c: 95: PORTEbits.RE1 = 1;
  6357  1922  1490               	bsf	16,1	;volatile
  6358                           
  6359                           ;main.c: 96: PORTDbits.RD6 = 1;
  6360  1923  170F               	bsf	15,6	;volatile
  6361                           
  6362                           ;main.c: 97: PORTDbits.RD5 = 1;
  6363  1924  168F               	bsf	15,5	;volatile
  6364                           
  6365                           ;main.c: 98: PORTCbits.RC0 = 1;
  6366  1925  140E               	bsf	14,0	;volatile
  6367                           
  6368                           ;main.c: 99: PORTDbits.RD7 = 1;
  6369  1926  178F               	bsf	15,7	;volatile
  6370                           
  6371                           ;main.c: 101: initSwitchTap();
  6372  1927  3198  2000  3199   	fcall	_initSwitchTap
  6373                           
  6374                           ;main.c: 102: InitWaveform();
  6375  192A  31B6  2621  3199   	fcall	_InitWaveform
  6376                           
  6377                           ;main.c: 103: InitSubdivision();
  6378  192D  31B7  270B  3199   	fcall	_InitSubdivision
  6379                           
  6380                           ;main.c: 104: InitializeTaps();
  6381  1930  31B3  2334  3199   	fcall	_InitializeTaps
  6382                           
  6383                           ;main.c: 106: initSwitchBypass();
  6384  1933  31B1  2117  3199   	fcall	_initSwitchBypass
  6385                           
  6386                           ;main.c: 109: knob1_prev = getVolume();
  6387  1936  31B0  20B1  3199   	fcall	_getVolume
  6388  1939  0022               	movlb	2	; select bank2
  6389  193A  0855               	movf	(?_getVolume+1)^(0+256),w
  6390  193B  0023               	movlb	3	; select bank3
  6391  193C  00E5               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  6392  193D  0022               	movlb	2	; select bank2
  6393  193E  0854               	movf	?_getVolume^(0+256),w
  6394  193F  0023               	movlb	3	; select bank3
  6395  1940  00E4               	movwf	_knob1_prev^(0+384)	;volatile
  6396                           
  6397                           ;main.c: 110: knob2_prev = getFrequency();
  6398  1941  31B0  20A1  3199   	fcall	_getFrequency
  6399  1944  0022               	movlb	2	; select bank2
  6400  1945  0855               	movf	(?_getFrequency+1)^(0+256),w
  6401  1946  0023               	movlb	3	; select bank3
  6402  1947  00E7               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  6403  1948  0022               	movlb	2	; select bank2
  6404  1949  0854               	movf	?_getFrequency^(0+256),w
  6405  194A  0023               	movlb	3	; select bank3
  6406  194B  00E6               	movwf	_knob2_prev^(0+384)	;volatile
  6407                           
  6408                           ;main.c: 111: knob3_prev = getSymmetry();
  6409  194C  31B2  22AF  3199   	fcall	_getSymmetry
  6410  194F  0022               	movlb	2	; select bank2
  6411  1950  0855               	movf	(?_getSymmetry+1)^(0+256),w
  6412  1951  0024               	movlb	4	; select bank4
  6413  1952  00DC               	movwf	(_knob3_prev+1)^(0+512)	;volatile
  6414  1953  0022               	movlb	2	; select bank2
  6415  1954  0854               	movf	?_getSymmetry^(0+256),w
  6416  1955  0024               	movlb	4	; select bank4
  6417  1956  00DB               	movwf	_knob3_prev^(0+512)	;volatile
  6418                           
  6419                           ;main.c: 112: knob5_prev = getDepth();
  6420  1957  31B0  2091  3199   	fcall	_getDepth
  6421  195A  0022               	movlb	2	; select bank2
  6422  195B  0855               	movf	(?_getDepth+1)^(0+256),w
  6423  195C  0023               	movlb	3	; select bank3
  6424  195D  00E9               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6425  195E  0022               	movlb	2	; select bank2
  6426  195F  0854               	movf	?_getDepth^(0+256),w
  6427  1960  0023               	movlb	3	; select bank3
  6428  1961  00E8               	movwf	_knob5_prev^(0+384)	;volatile
  6429                           
  6430                           ;main.c: 115: setVolume(knob1_prev);
  6431  1962  0865               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  6432  1963  0022               	movlb	2	; select bank2
  6433  1964  00EB               	movwf	(setVolume@rawValue+1)^(0+256)
  6434  1965  0023               	movlb	3	; select bank3
  6435  1966  0864               	movf	_knob1_prev^(0+384),w	;volatile
  6436  1967  0022               	movlb	2	; select bank2
  6437  1968  00EA               	movwf	setVolume@rawValue^(0+256)
  6438  1969  31AD  25A6  3199   	fcall	_setVolume
  6439                           
  6440                           ;main.c: 116: setFrequency(knob2_prev);
  6441  196C  0023               	movlb	3	; select bank3
  6442  196D  0867               	movf	(_knob2_prev+1)^(0+384),w	;volatile
  6443  196E  0022               	movlb	2	; select bank2
  6444  196F  00EB               	movwf	(setFrequency@rawValue+1)^(0+256)
  6445  1970  0023               	movlb	3	; select bank3
  6446  1971  0866               	movf	_knob2_prev^(0+384),w	;volatile
  6447  1972  0022               	movlb	2	; select bank2
  6448  1973  00EA               	movwf	setFrequency@rawValue^(0+256)
  6449  1974  31A3  2301  3199   	fcall	_setFrequency
  6450  1977                     l8609:	
  6451                           ;main.c: 125: while (1) {
  6452                           
  6453                           
  6454                           ;main.c: 127: oldSymmetry = symmetry;
  6455  1977  0023               	movlb	3	; select bank3
  6456  1978  086B               	movf	(_symmetry+1)^(0+384),w
  6457  1979  0025               	movlb	5	; select bank5
  6458  197A  00EB               	movwf	(_oldSymmetry+1)^(0+640)
  6459  197B  0023               	movlb	3	; select bank3
  6460  197C  086A               	movf	_symmetry^(0+384),w
  6461  197D  0025               	movlb	5	; select bank5
  6462  197E  00EA               	movwf	_oldSymmetry^(0+640)
  6463                           
  6464                           ;main.c: 128: oldBaseTime = baseline_mod_time;
  6465  197F  0020               	movlb	0	; select bank0
  6466  1980  086B               	movf	_baseline_mod_time+1,w	;volatile
  6467  1981  0025               	movlb	5	; select bank5
  6468  1982  00E9               	movwf	(_oldBaseTime+1)^(0+640)
  6469  1983  0020               	movlb	0	; select bank0
  6470  1984  086A               	movf	_baseline_mod_time,w	;volatile
  6471  1985  0025               	movlb	5	; select bank5
  6472  1986  00E8               	movwf	_oldBaseTime^(0+640)
  6473                           
  6474                           ;main.c: 131: n = USARTDataAvailable();
  6475  1987  31B3  23D7  3199   	fcall	_USARTDataAvailable
  6476  198A  0023               	movlb	3	; select bank3
  6477  198B  00D1               	movwf	??_main^(0+384)
  6478  198C  0851               	movf	??_main^(0+384),w
  6479  198D  0024               	movlb	4	; select bank4
  6480  198E  00CF               	movwf	_n^(0+512)
  6481                           
  6482                           ;main.c: 134: if (n > 2) {
  6483  198F  3003               	movlw	3
  6484  1990  024F               	subwf	_n^(0+512),w
  6485  1991  1C03               	skipc
  6486  1992  29BA               	goto	L26
  6487                           
  6488                           ;main.c: 135: LATBbits.LATB1 = 1;
  6489  1993  0022               	movlb	2	; select bank2
  6490  1994  148D               	bsf	13,1	;volatile
  6491                           
  6492                           ;main.c: 137: USARTReadBuffer(midiBuff, n);
  6493  1995  0024               	movlb	4	; select bank4
  6494  1996  084F               	movf	_n^(0+512),w
  6495  1997  0023               	movlb	3	; select bank3
  6496  1998  00D1               	movwf	??_main^(0+384)
  6497  1999  01D2               	clrf	(??_main^(0+384)+1)
  6498  199A  0851               	movf	??_main^(0+384),w
  6499  199B  0021               	movlb	1	; select bank1
  6500  199C  00A2               	movwf	USARTReadBuffer@len^(0+128)
  6501  199D  0023               	movlb	3	; select bank3
  6502  199E  0852               	movf	(??_main+1)^(0+384),w
  6503  199F  0021               	movlb	1	; select bank1
  6504  19A0  00A3               	movwf	(USARTReadBuffer@len+1)^(0+128)
  6505  19A1  3020               	movlw	(low (_midiBuff| (0+768)))& (0+255)
  6506  19A2  31B2  2270  3199   	fcall	_USARTReadBuffer
  6507                           
  6508                           ;main.c: 138: if (n > 2) {
  6509  19A5  3003               	movlw	3
  6510  19A6  0024               	movlb	4	; select bank4
  6511  19A7  024F               	subwf	_n^(0+512),w
  6512  19A8  1C03               	skipc
  6513  19A9  29BA               	goto	L26
  6514                           
  6515                           ;main.c: 139: if (midiBuff[0] >= 176 && midiBuff[0] < 192) {
  6516  19AA  30B0               	movlw	176
  6517  19AB  0026               	movlb	6	; select bank6
  6518  19AC  0220               	subwf	_midiBuff^(0+768),w
  6519  19AD  1C03               	skipc
  6520  19AE  29BA               	goto	L26
  6521  19AF  30C0               	movlw	192
  6522  19B0  0220               	subwf	_midiBuff^(0+768),w
  6523  19B1  1803               	skipnc
  6524  19B2  29BA               	goto	L26
  6525                           
  6526                           ;main.c: 141: midiBuff[0] -= 175;
  6527  19B3  30AF               	movlw	175
  6528  19B4  02A0               	subwf	_midiBuff^(0+768),f
  6529                           
  6530                           ;main.c: 142: if (midiBuff[0] == 14) {
  6531  19B5  300E               	movlw	14
  6532  19B6  0620               	xorwf	_midiBuff^(0+768),w
  6533  19B7  318C  1903         	btfsc	3,2
  6534  19B9  2C74               	goto	l8739
  6535  19BA                     L26:	
  6536  19BA  318C  2C92         	goto	l8741
  6537  19BC                     l8631:	
  6538                           ;main.c: 144: case 102:
  6539                           
  6540                           ;main.c: 143: switch (midiBuff[1]) {
  6541                           
  6542                           
  6543                           ;main.c: 145: if (midiBuff[2] == 127) {
  6544  19BC  307F               	movlw	127
  6545  19BD  0622               	xorwf	(_midiBuff^(0+768)+2),w
  6546  19BE  1D03               	btfss	3,2
  6547  19BF  29D7               	goto	l8639
  6548                           
  6549                           ;main.c: 146: if (switchBypass_state == 0) {setSwitchBypassState(1);}
  6550  19C0  0023               	movlb	3	; select bank3
  6551  19C1  086E               	movf	_switchBypass_state^(0+384),w
  6552  19C2  1D03               	btfss	3,2
  6553  19C3  29CC               	goto	l8637
  6554  19C4  3001               	movlw	1
  6555  19C5  0021               	movlb	1	; select bank1
  6556  19C6  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  6557  19C7  3000               	movlw	0
  6558  19C8  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  6559  19C9  31B2  2238  3199   	fcall	_setSwitchBypassState
  6560  19CC                     l8637:	
  6561                           
  6562                           ;main.c: 147: LATBbits.LATB2 = 0;
  6563  19CC  0022               	movlb	2	; select bank2
  6564  19CD  110D               	bcf	13,2	;volatile
  6565                           
  6566                           ;main.c: 148: setLongBypassState(1);
  6567  19CE  3001               	movlw	1
  6568  19CF  0021               	movlb	1	; select bank1
  6569  19D0  00A0               	movwf	setLongBypassState@f_state^(0+128)
  6570  19D1  3000               	movlw	0
  6571  19D2  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  6572  19D3  31B2  22CF  3199   	fcall	_setLongBypassState
  6573                           
  6574                           ;main.c: 149: } else if (midiBuff[2] == 126) {
  6575  19D6  29BA               	goto	L26
  6576  19D7                     l8639:	
  6577  19D7  307E               	movlw	126
  6578  19D8  0026               	movlb	6	; select bank6
  6579  19D9  0622               	xorwf	(_midiBuff^(0+768)+2),w
  6580  19DA  1D03               	btfss	3,2
  6581  19DB  29EC               	goto	l8643
  6582                           
  6583                           ;main.c: 150: setSwitchBypassState(1);
  6584  19DC  3001               	movlw	1
  6585  19DD  0021               	movlb	1	; select bank1
  6586  19DE  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  6587  19DF  3000               	movlw	0
  6588  19E0  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  6589  19E1  31B2  2238  3199   	fcall	_setSwitchBypassState
  6590                           
  6591                           ;main.c: 151: setLongBypassState(0);
  6592  19E4  3000               	movlw	0
  6593  19E5  0021               	movlb	1	; select bank1
  6594  19E6  00A0               	movwf	setLongBypassState@f_state^(0+128)
  6595  19E7  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  6596  19E8  31B2  22CF  3199   	fcall	_setLongBypassState
  6597                           
  6598                           ;main.c: 152: } else if (midiBuff[2] < 64) {
  6599  19EB  29BA               	goto	L26
  6600  19EC                     l8643:	
  6601  19EC  3040               	movlw	64
  6602  19ED  0026               	movlb	6	; select bank6
  6603  19EE  0222               	subwf	(_midiBuff^(0+768)+2),w
  6604  19EF  3188  1803         	skipnc
  6605  19F1  2897               	goto	l8647
  6606                           
  6607                           ;main.c: 153: setSwitchBypassState(0);
  6608  19F2  3000               	movlw	0
  6609  19F3  0021               	movlb	1	; select bank1
  6610  19F4  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  6611  19F5  00B6               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  6612  19F6  31B2  2238  3199   	fcall	_setSwitchBypassState
  6613                           
  6614                           ;main.c: 154: } else {
  6615  19F9  29BA               	goto	L26
  6616                           
  6617                           	psect	text1
  6618  2004                     __ptext1:	
  6619 ;; *************** function _update_selectMode *****************
  6620 ;; Defined at:
  6621 ;;		line 162 in file "tactiles.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6637 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6638 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6639 ;;Total ram usage:        1 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    7
  6642 ;; This function calls:
  6643 ;;		_setExpressionDisplay
  6644 ;;		_setPresetDisplay
  6645 ;; This function is called by:
  6646 ;;		_main
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           
  6651                           ;psect for function _update_selectMode
  6652  2004                     _update_selectMode:	
  6653                           
  6654                           ;tactiles.c: 163: if (mode2_state == 0 && presetSaveMode != 1) {
  6655                           
  6656                           ;incstack = 0
  6657                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6658  2004  0020               	movlb	0	; select bank0
  6659  2005  0864               	movf	_mode2_state,w
  6660  2006  1D03               	btfss	3,2
  6661  2007  280B               	goto	l1163
  6662  2008  0365               	decf	_presetSaveMode,w
  6663  2009  1D03               	btfss	3,2
  6664  200A  0008               	return
  6665  200B                     l1163:	
  6666                           ;tactiles.c: 165: return;
  6667                           
  6668                           
  6669                           ;tactiles.c: 166: }
  6670                           ;tactiles.c: 167: if (PORTDbits.RD7 == 0) {
  6671  200B  1B8F               	btfsc	15,7	;volatile
  6672  200C  2859               	goto	l8003
  6673                           
  6674                           ;tactiles.c: 168: debounce_mode1++;
  6675  200D  3001               	movlw	1
  6676  200E  0025               	movlb	5	; select bank5
  6677  200F  07E0               	addwf	_debounce_mode1^(0+640),f
  6678  2010  3000               	movlw	0
  6679  2011  3DE1               	addwfc	(_debounce_mode1+1)^(0+640),f
  6680                           
  6681                           ;tactiles.c: 169: if (debounce_mode1 > 25) {
  6682  2012  0861               	movf	(_debounce_mode1+1)^(0+640),w
  6683  2013  3A80               	xorlw	128
  6684  2014  0021               	movlb	1	; select bank1
  6685  2015  00A7               	movwf	??_update_selectMode^(0+128)
  6686  2016  3080               	movlw	128
  6687  2017  0227               	subwf	??_update_selectMode^(0+128),w
  6688  2018  1D03               	skipz
  6689  2019  281D               	goto	u7635
  6690  201A  301A               	movlw	26
  6691  201B  0025               	movlb	5	; select bank5
  6692  201C  0260               	subwf	_debounce_mode1^(0+640),w
  6693  201D                     u7635:	
  6694  201D  1C03               	skipc
  6695  201E  0008               	return
  6696                           
  6697                           ;tactiles.c: 170: debounce_mode1 = 25;
  6698  201F  3019               	movlw	25
  6699  2020  0025               	movlb	5	; select bank5
  6700  2021  00E0               	movwf	_debounce_mode1^(0+640)
  6701  2022  3000               	movlw	0
  6702  2023  00E1               	movwf	(_debounce_mode1^(0+640)+1)
  6703                           
  6704                           ;tactiles.c: 171: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6705  2024  0020               	movlb	0	; select bank0
  6706  2025  0864               	movf	_mode2_state,w
  6707  2026  0024               	movlb	4	; select bank4
  6708  2027  066D               	xorwf	_presetModeCnst^(0+512),w
  6709  2028  1903               	skipnz
  6710  2029  282E               	goto	l7985
  6711  202A  0020               	movlb	0	; select bank0
  6712  202B  0365               	decf	_presetSaveMode,w
  6713  202C  1D03               	btfss	3,2
  6714  202D  283F               	goto	l7993
  6715  202E                     l7985:	
  6716                           
  6717                           ;tactiles.c: 172: presetChannel++;
  6718  202E  3001               	movlw	1
  6719  202F  0021               	movlb	1	; select bank1
  6720  2030  00A7               	movwf	??_update_selectMode^(0+128)
  6721  2031  0827               	movf	??_update_selectMode^(0+128),w
  6722  2032  0023               	movlb	3	; select bank3
  6723  2033  07ED               	addwf	_presetChannel^(0+384),f
  6724                           
  6725                           ;tactiles.c: 173: if (presetChannel > 10) {
  6726  2034  300B               	movlw	11
  6727  2035  026D               	subwf	_presetChannel^(0+384),w
  6728  2036  1C03               	skipc
  6729  2037  283A               	goto	l7991
  6730                           
  6731                           ;tactiles.c: 174: presetChannel = 1;
  6732  2038  01ED               	clrf	_presetChannel^(0+384)
  6733  2039  0AED               	incf	_presetChannel^(0+384),f
  6734  203A                     l7991:	
  6735                           
  6736                           ;tactiles.c: 175: }
  6737                           ;tactiles.c: 176: setPresetDisplay(presetChannel);
  6738  203A  086D               	movf	_presetChannel^(0+384),w
  6739  203B  31B6  265A  31A0   	fcall	_setPresetDisplay
  6740                           
  6741                           ;tactiles.c: 177: } else if (mode2_state == expressModeCnst) {
  6742  203E  2855               	goto	l1174
  6743  203F                     l7993:	
  6744  203F  0020               	movlb	0	; select bank0
  6745  2040  0864               	movf	_mode2_state,w
  6746  2041  0024               	movlb	4	; select bank4
  6747  2042  066A               	xorwf	_expressModeCnst^(0+512),w
  6748  2043  1D03               	skipz
  6749  2044  2855               	goto	l1174
  6750                           
  6751                           ;tactiles.c: 178: expressionChannel++;
  6752  2045  3001               	movlw	1
  6753  2046  0021               	movlb	1	; select bank1
  6754  2047  00A7               	movwf	??_update_selectMode^(0+128)
  6755  2048  0827               	movf	??_update_selectMode^(0+128),w
  6756  2049  0024               	movlb	4	; select bank4
  6757  204A  07EB               	addwf	_expressionChannel^(0+512),f
  6758                           
  6759                           ;tactiles.c: 179: if (expressionChannel > 5) {
  6760  204B  3006               	movlw	6
  6761  204C  026B               	subwf	_expressionChannel^(0+512),w
  6762  204D  1C03               	skipc
  6763  204E  2851               	goto	l8001
  6764                           
  6765                           ;tactiles.c: 180: expressionChannel = 1;
  6766  204F  01EB               	clrf	_expressionChannel^(0+512)
  6767  2050  0AEB               	incf	_expressionChannel^(0+512),f
  6768  2051                     l8001:	
  6769                           
  6770                           ;tactiles.c: 181: }
  6771                           ;tactiles.c: 182: setExpressionDisplay(expressionChannel);
  6772  2051  086B               	movf	_expressionChannel^(0+512),w
  6773  2052  31B1  2167  31A0   	fcall	_setExpressionDisplay
  6774  2055                     l1174:	
  6775                           ;tactiles.c: 183: }
  6776                           ;tactiles.c: 190: while (PORTDbits.RD7 == 0) {
  6777                           
  6778  2055  0020               	movlb	0	; select bank0
  6779  2056  1B8F               	btfsc	15,7	;volatile
  6780  2057  0008               	return
  6781  2058  2855               	goto	l1174
  6782  2059                     l8003:	
  6783                           ;tactiles.c: 191: }
  6784                           ;tactiles.c: 192: }
  6785                           ;tactiles.c: 193: } else {
  6786                           
  6787                           
  6788                           ;tactiles.c: 194: debounce_mode1 = 0;
  6789  2059  0025               	movlb	5	; select bank5
  6790  205A  01E0               	clrf	_debounce_mode1^(0+640)
  6791  205B  01E1               	clrf	(_debounce_mode1+1)^(0+640)
  6792  205C  0008               	return
  6793  205D                     __end_of_update_selectMode:	
  6794                           
  6795                           	psect	text2
  6796  35E9                     __ptext2:	
  6797 ;; *************** function _update_mode *****************
  6798 ;; Defined at:
  6799 ;;		line 109 in file "tactiles.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6815 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6816 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6817 ;;Total ram usage:        1 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    8
  6820 ;; This function calls:
  6821 ;;		_resetRingLEDs
  6822 ;;		_setPedalMode
  6823 ;; This function is called by:
  6824 ;;		_main
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           
  6829                           ;psect for function _update_mode
  6830  35E9                     _update_mode:	
  6831                           
  6832                           ;tactiles.c: 114: if (PORTCbits.RC0 == 0) {
  6833                           
  6834                           ;incstack = 0
  6835                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6836  35E9  0020               	movlb	0	; select bank0
  6837  35EA  180E               	btfsc	14,0	;volatile
  6838  35EB  2E1D               	goto	l7971
  6839                           
  6840                           ;tactiles.c: 117: debounce_mode2++;
  6841  35EC  3001               	movlw	1
  6842  35ED  0025               	movlb	5	; select bank5
  6843  35EE  07E2               	addwf	_debounce_mode2^(0+640),f
  6844  35EF  3000               	movlw	0
  6845  35F0  3DE3               	addwfc	(_debounce_mode2+1)^(0+640),f
  6846                           
  6847                           ;tactiles.c: 118: if (debounce_mode2 > 25) {
  6848  35F1  0863               	movf	(_debounce_mode2+1)^(0+640),w
  6849  35F2  3A80               	xorlw	128
  6850  35F3  0021               	movlb	1	; select bank1
  6851  35F4  00A7               	movwf	??_update_mode^(0+128)
  6852  35F5  3080               	movlw	128
  6853  35F6  0227               	subwf	??_update_mode^(0+128),w
  6854  35F7  1D03               	skipz
  6855  35F8  2DFC               	goto	u7565
  6856  35F9  301A               	movlw	26
  6857  35FA  0025               	movlb	5	; select bank5
  6858  35FB  0262               	subwf	_debounce_mode2^(0+640),w
  6859  35FC                     u7565:	
  6860  35FC  1C03               	skipc
  6861  35FD  0008               	return
  6862                           
  6863                           ;tactiles.c: 119: debounce_mode2 = 25;
  6864  35FE  3019               	movlw	25
  6865  35FF  0025               	movlb	5	; select bank5
  6866  3600  00E2               	movwf	_debounce_mode2^(0+640)
  6867  3601  3000               	movlw	0
  6868  3602  00E3               	movwf	(_debounce_mode2^(0+640)+1)
  6869                           
  6870                           ;tactiles.c: 121: if (presetSaveMode == 1) {
  6871  3603  0020               	movlb	0	; select bank0
  6872  3604  0365               	decf	_presetSaveMode,w
  6873  3605  1D03               	btfss	3,2
  6874  3606  2E0C               	goto	l7963
  6875                           
  6876                           ;tactiles.c: 122: presetSaveMode = 0;
  6877  3607  01E5               	clrf	_presetSaveMode
  6878                           
  6879                           ;tactiles.c: 123: resetRingLEDs();
  6880  3608  31B1  21B1  31B5   	fcall	_resetRingLEDs
  6881                           
  6882                           ;tactiles.c: 124: } else {
  6883  360B  2E16               	goto	l7969
  6884  360C                     l7963:	
  6885                           
  6886                           ;tactiles.c: 125: mode2_state++;
  6887  360C  3001               	movlw	1
  6888  360D  0021               	movlb	1	; select bank1
  6889  360E  00A7               	movwf	??_update_mode^(0+128)
  6890  360F  0827               	movf	??_update_mode^(0+128),w
  6891  3610  0020               	movlb	0	; select bank0
  6892  3611  07E4               	addwf	_mode2_state,f
  6893                           
  6894                           ;tactiles.c: 126: if (mode2_state > 2) {
  6895  3612  3003               	movlw	3
  6896  3613  0264               	subwf	_mode2_state,w
  6897  3614  1803               	btfsc	3,0
  6898                           
  6899                           ;tactiles.c: 127: mode2_state = 0;
  6900  3615  01E4               	clrf	_mode2_state
  6901  3616                     l7969:	
  6902                           
  6903                           ;tactiles.c: 128: }
  6904                           ;tactiles.c: 129: }
  6905                           ;tactiles.c: 131: setPedalMode();
  6906  3616  31B3  235A  31B5   	fcall	_setPedalMode
  6907  3619                     l1148:	
  6908                           ;tactiles.c: 132: while (PORTCbits.RC0 == 0) {
  6909                           
  6910  3619  0020               	movlb	0	; select bank0
  6911  361A  180E               	btfsc	14,0	;volatile
  6912  361B  0008               	return
  6913  361C  2E19               	goto	l1148
  6914  361D                     l7971:	
  6915                           ;tactiles.c: 133: }
  6916                           ;tactiles.c: 134: }
  6917                           ;tactiles.c: 135: } else {
  6918                           
  6919                           
  6920                           ;tactiles.c: 136: debounce_mode2 = 0;
  6921  361D  0025               	movlb	5	; select bank5
  6922  361E  01E2               	clrf	_debounce_mode2^(0+640)
  6923  361F  01E3               	clrf	(_debounce_mode2+1)^(0+640)
  6924  3620  0008               	return
  6925  3621                     __end_of_update_mode:	
  6926                           
  6927                           	psect	text3
  6928  1623                     __ptext3:	
  6929 ;; *************** function _updateSwitchTap *****************
  6930 ;; Defined at:
  6931 ;;		line 52 in file "SwitchTap.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6936 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6947 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6948 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6949 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6950 ;;Total ram usage:        9 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:   10
  6953 ;; This function calls:
  6954 ;;		___aldiv
  6955 ;;		_setDoublePressState
  6956 ;;		_setLongTapState
  6957 ;;		_updateTapTime
  6958 ;; This function is called by:
  6959 ;;		_main
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           
  6964                           ;psect for function _updateSwitchTap
  6965  1623                     _updateSwitchTap:	
  6966                           
  6967                           ;SwitchTap.c: 53: uint8_t iCnt = 0;
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6971  1623  0021               	movlb	1	; select bank1
  6972  1624  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6973                           
  6974                           ;SwitchTap.c: 61: if (PORTEbits.RE0 == 0) {
  6975  1625  0020               	movlb	0	; select bank0
  6976  1626  1810               	btfsc	16,0	;volatile
  6977  1627  2E2F               	goto	l8121
  6978                           
  6979                           ;SwitchTap.c: 62: if (switchTap_pressed > 0) {
  6980  1628  0024               	movlb	4	; select bank4
  6981  1629  0856               	movf	_switchTap_pressed^(0+512),w
  6982  162A  1903               	btfsc	3,2
  6983  162B  2E3A               	goto	l1719
  6984                           
  6985                           ;SwitchTap.c: 63: switchTap_pressed--;
  6986  162C  3001               	movlw	1
  6987  162D  02D6               	subwf	_switchTap_pressed^(0+512),f
  6988                           
  6989                           ;SwitchTap.c: 64: }
  6990                           ;SwitchTap.c: 65: } else if (switchTap_pressed < 25) {
  6991  162E  2E3A               	goto	l1719
  6992  162F                     l8121:	
  6993  162F  3019               	movlw	25
  6994  1630  0024               	movlb	4	; select bank4
  6995  1631  0256               	subwf	_switchTap_pressed^(0+512),w
  6996  1632  1803               	skipnc
  6997  1633  2E3A               	goto	l1719
  6998                           
  6999                           ;SwitchTap.c: 66: switchTap_pressed++;
  7000  1634  3001               	movlw	1
  7001  1635  0021               	movlb	1	; select bank1
  7002  1636  00BC               	movwf	??_updateSwitchTap^(0+128)
  7003  1637  083C               	movf	??_updateSwitchTap^(0+128),w
  7004  1638  0024               	movlb	4	; select bank4
  7005  1639  07D6               	addwf	_switchTap_pressed^(0+512),f
  7006  163A                     l1719:	
  7007                           
  7008                           ;SwitchTap.c: 67: }
  7009                           ;SwitchTap.c: 73: if (switchTap_pressed == 0) {
  7010  163A  0856               	movf	_switchTap_pressed^(0+512),w
  7011  163B  1D03               	btfss	3,2
  7012  163C  2FE8               	goto	l8207
  7013                           
  7014                           ;SwitchTap.c: 77: if (tap_timer >= 1563) {
  7015  163D  0020               	movlb	0	; select bank0
  7016  163E  1BDC               	btfsc	_tap_timer+3,7	;volatile
  7017  163F  2EC0               	goto	l8165
  7018  1640  085C               	movf	_tap_timer+3,w	;volatile
  7019  1641  1D03               	btfss	3,2
  7020  1642  2E4C               	goto	l8127
  7021  1643  085B               	movf	_tap_timer+2,w	;volatile
  7022  1644  1D03               	btfss	3,2
  7023  1645  2E4C               	goto	l8127
  7024  1646  301B               	movlw	27
  7025  1647  0259               	subwf	_tap_timer,w	;volatile
  7026  1648  3006               	movlw	6
  7027  1649  3B5A               	subwfb	_tap_timer+1,w	;volatile
  7028  164A  1C03               	btfss	3,0
  7029  164B  2EC0               	goto	l8165
  7030  164C                     l8127:	
  7031                           
  7032                           ;SwitchTap.c: 80: if (switchTap_down != 1) {
  7033  164C  0024               	movlb	4	; select bank4
  7034  164D  0355               	decf	_switchTap_down^(0+512),w
  7035  164E  1903               	btfsc	3,2
  7036  164F  2E8B               	goto	l8143
  7037                           
  7038                           ;SwitchTap.c: 82: switchTap_down = 1;
  7039  1650  01D5               	clrf	_switchTap_down^(0+512)
  7040  1651  0AD5               	incf	_switchTap_down^(0+512),f
  7041                           
  7042                           ;SwitchTap.c: 83: tap_timer = 0;
  7043  1652  3000               	movlw	0
  7044  1653  0020               	movlb	0	; select bank0
  7045  1654  00DC               	movwf	_tap_timer+3	;volatile
  7046  1655  3000               	movlw	0
  7047  1656  00DB               	movwf	_tap_timer+2	;volatile
  7048  1657  3000               	movlw	0
  7049  1658  00DA               	movwf	_tap_timer+1	;volatile
  7050  1659  3000               	movlw	0
  7051  165A  00D9               	movwf	_tap_timer	;volatile
  7052                           
  7053                           ;SwitchTap.c: 84: tap_iteration = 1;
  7054  165B  3001               	movlw	1
  7055  165C  0024               	movlb	4	; select bank4
  7056  165D  00E5               	movwf	_tap_iteration^(0+512)
  7057  165E  3000               	movlw	0
  7058  165F  00E6               	movwf	(_tap_iteration^(0+512)+1)
  7059                           
  7060                           ;SwitchTap.c: 85: tap_total = 0;
  7061  1660  3000               	movlw	0
  7062  1661  0025               	movlb	5	; select bank5
  7063  1662  00D9               	movwf	(_tap_total+3)^(0+640)
  7064  1663  3000               	movlw	0
  7065  1664  00D8               	movwf	(_tap_total+2)^(0+640)
  7066  1665  3000               	movlw	0
  7067  1666  00D7               	movwf	(_tap_total+1)^(0+640)
  7068  1667  3000               	movlw	0
  7069  1668  00D6               	movwf	_tap_total^(0+640)
  7070                           
  7071                           ;SwitchTap.c: 86: mod_time_changed = 0;
  7072  1669  0024               	movlb	4	; select bank4
  7073  166A  01EC               	clrf	_mod_time_changed^(0+512)
  7074                           
  7075                           ;SwitchTap.c: 88: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7076  166B  0021               	movlb	1	; select bank1
  7077  166C  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7078  166D  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7079  166E                     l8141:	
  7080  166E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7081  166F  0023               	movlb	3	; select bank3
  7082  1670  026C               	subwf	_num_taps^(0+384),w
  7083  1671  1C03               	btfss	3,0
  7084  1672  2E8B               	goto	l8143
  7085                           
  7086                           ;SwitchTap.c: 89: tap_history[iCnt] = 0;
  7087  1673  0021               	movlb	1	; select bank1
  7088  1674  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7089  1675  00BC               	movwf	??_updateSwitchTap^(0+128)
  7090  1676  3001               	movlw	1
  7091  1677                     u8005:	
  7092  1677  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7093  1678  3EFF               	addlw	-1
  7094  1679  1D03               	skipz
  7095  167A  2E77               	goto	u8005
  7096  167B  353C               	lslf	??_updateSwitchTap^(0+128),w
  7097  167C  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7098  167D  0086               	movwf	6
  7099  167E  3002               	movlw	2	; select bank5/6
  7100  167F  0087               	movwf	7
  7101  1680  3000               	movlw	0
  7102  1681  3FC0               	movwi [0]fsr1
  7103  1682  3000               	movlw	0
  7104  1683  3FC1               	movwi [1]fsr1
  7105  1684  3FC2               	movwi [2]fsr1
  7106  1685  3FC3               	movwi [3]fsr1
  7107  1686  3001               	movlw	1
  7108  1687  00BC               	movwf	??_updateSwitchTap^(0+128)
  7109  1688  083C               	movf	??_updateSwitchTap^(0+128),w
  7110  1689  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7111  168A  2E6E               	goto	l8141
  7112  168B                     l8143:	
  7113                           
  7114                           ;SwitchTap.c: 90: }
  7115                           ;SwitchTap.c: 91: }
  7116                           ;SwitchTap.c: 94: if (longTap_start == 0) {
  7117  168B  0024               	movlb	4	; select bank4
  7118  168C  084C               	movf	_longTap_start^(0+512),w
  7119  168D  1D03               	btfss	3,2
  7120  168E  2E96               	goto	l8149
  7121                           
  7122                           ;SwitchTap.c: 95: longTap_start = 1;
  7123  168F  01CC               	clrf	_longTap_start^(0+512)
  7124  1690  0ACC               	incf	_longTap_start^(0+512),f
  7125                           
  7126                           ;SwitchTap.c: 96: longTap_state = 0;
  7127  1691  0020               	movlb	0	; select bank0
  7128  1692  01EF               	clrf	_longTap_state	;volatile
  7129                           
  7130                           ;SwitchTap.c: 97: longTap_timer = 0;
  7131  1693  0024               	movlb	4	; select bank4
  7132  1694  01BC               	clrf	_longTap_timer^(0+512)	;volatile
  7133  1695  01BD               	clrf	(_longTap_timer+1)^(0+512)	;volatile
  7134  1696                     l8149:	
  7135                           
  7136                           ;SwitchTap.c: 98: }
  7137                           ;SwitchTap.c: 102: if (longTap_timer >= long_press_limit && longTap_state == 0 && double
      +                          Tap_state == 0) {
  7138  1696  0860               	movf	(_long_press_limit+1)^(0+512),w
  7139  1697  023D               	subwf	(_longTap_timer+1)^(0+512),w	;volatile
  7140  1698  1D03               	skipz
  7141  1699  2E9C               	goto	u8035
  7142  169A  085F               	movf	_long_press_limit^(0+512),w
  7143  169B  023C               	subwf	_longTap_timer^(0+512),w	;volatile
  7144  169C                     u8035:	
  7145  169C  1C03               	skipc
  7146  169D  0008               	return
  7147  169E  0020               	movlb	0	; select bank0
  7148  169F  086F               	movf	_longTap_state,w	;volatile
  7149  16A0  1D03               	btfss	3,2
  7150  16A1  0008               	return
  7151  16A2  0861               	movf	_doubleTap_state,w	;volatile
  7152  16A3  1D03               	btfss	3,2
  7153  16A4  0008               	return
  7154                           
  7155                           ;SwitchTap.c: 104: longTap_timer = long_press_limit;
  7156  16A5  0024               	movlb	4	; select bank4
  7157  16A6  0860               	movf	(_long_press_limit+1)^(0+512),w
  7158  16A7  00BD               	movwf	(_longTap_timer+1)^(0+512)	;volatile
  7159  16A8  085F               	movf	_long_press_limit^(0+512),w
  7160  16A9  00BC               	movwf	_longTap_timer^(0+512)	;volatile
  7161                           
  7162                           ;SwitchTap.c: 106: LATBbits.LATB4 = 0;
  7163  16AA  0022               	movlb	2	; select bank2
  7164  16AB  120D               	bcf	13,4	;volatile
  7165                           
  7166                           ;SwitchTap.c: 107: if (longBypass_start != 1) {
  7167  16AC  0024               	movlb	4	; select bank4
  7168  16AD  034B               	decf	_longBypass_start^(0+512),w
  7169  16AE  1903               	btfsc	3,2
  7170  16AF  2EB8               	goto	l8163
  7171                           
  7172                           ;SwitchTap.c: 108: setLongTapState(1);
  7173  16B0  3001               	movlw	1
  7174  16B1  0021               	movlb	1	; select bank1
  7175  16B2  00A0               	movwf	setLongTapState@f_state^(0+128)
  7176  16B3  3000               	movlw	0
  7177  16B4  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7178  16B5  31B1  21CB         	fcall	_setLongTapState
  7179                           
  7180                           ;SwitchTap.c: 109: } else {
  7181  16B7  0008               	return
  7182  16B8                     l8163:	
  7183                           
  7184                           ;SwitchTap.c: 110: setDoublePressState(1);
  7185  16B8  3001               	movlw	1
  7186  16B9  0021               	movlb	1	; select bank1
  7187  16BA  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7188  16BB  3000               	movlw	0
  7189  16BC  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7190  16BD  31B7  27C2         	fcall	_setDoublePressState
  7191                           
  7192                           ;SwitchTap.c: 111: }
  7193                           ;SwitchTap.c: 112: }
  7194                           ;SwitchTap.c: 114: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7195  16BF  0008               	return
  7196  16C0                     l8165:	
  7197  16C0  0020               	movlb	0	; select bank0
  7198  16C1  1BDC               	btfsc	_tap_timer+3,7	;volatile
  7199  16C2  2ECF               	goto	l8167
  7200  16C3  085C               	movf	_tap_timer+3,w	;volatile
  7201  16C4  1D03               	btfss	3,2
  7202  16C5  0008               	return
  7203  16C6  085B               	movf	_tap_timer+2,w	;volatile
  7204  16C7  1D03               	btfss	3,2
  7205  16C8  0008               	return
  7206  16C9  301B               	movlw	27
  7207  16CA  0259               	subwf	_tap_timer,w	;volatile
  7208  16CB  3006               	movlw	6
  7209  16CC  3B5A               	subwfb	_tap_timer+1,w	;volatile
  7210  16CD  1803               	btfsc	3,0
  7211  16CE  0008               	return
  7212  16CF                     l8167:	
  7213  16CF  086F               	movf	_longTap_state,w	;volatile
  7214  16D0  1D03               	btfss	3,2
  7215  16D1  0008               	return
  7216  16D2  0024               	movlb	4	; select bank4
  7217  16D3  0355               	decf	_switchTap_down^(0+512),w
  7218  16D4  1903               	btfsc	3,2
  7219  16D5  0008               	return
  7220                           
  7221                           ;SwitchTap.c: 116: switchTap_down = 1;
  7222  16D6  01D5               	clrf	_switchTap_down^(0+512)
  7223  16D7  0AD5               	incf	_switchTap_down^(0+512),f
  7224                           
  7225                           ;SwitchTap.c: 117: if (tap_timer >= 1172) {
  7226  16D8  0020               	movlb	0	; select bank0
  7227  16D9  1BDC               	btfsc	_tap_timer+3,7	;volatile
  7228  16DA  2EEF               	goto	l1733
  7229  16DB  085C               	movf	_tap_timer+3,w	;volatile
  7230  16DC  1D03               	btfss	3,2
  7231  16DD  2EE7               	goto	l8175
  7232  16DE  085B               	movf	_tap_timer+2,w	;volatile
  7233  16DF  1D03               	btfss	3,2
  7234  16E0  2EE7               	goto	l8175
  7235  16E1  3094               	movlw	148
  7236  16E2  0259               	subwf	_tap_timer,w	;volatile
  7237  16E3  3004               	movlw	4
  7238  16E4  3B5A               	subwfb	_tap_timer+1,w	;volatile
  7239  16E5  1C03               	btfss	3,0
  7240  16E6  2EEF               	goto	l1733
  7241  16E7                     l8175:	
  7242                           
  7243                           ;SwitchTap.c: 118: tap_timer = 1172;
  7244  16E7  3000               	movlw	0
  7245  16E8  00DC               	movwf	_tap_timer+3	;volatile
  7246  16E9  3000               	movlw	0
  7247  16EA  00DB               	movwf	_tap_timer+2	;volatile
  7248  16EB  3004               	movlw	4
  7249  16EC  00DA               	movwf	_tap_timer+1	;volatile
  7250  16ED  3094               	movlw	148
  7251  16EE  00D9               	movwf	_tap_timer	;volatile
  7252  16EF                     l1733:	
  7253                           
  7254                           ;SwitchTap.c: 119: }
  7255                           ;SwitchTap.c: 121: int tapCntDivisor = num_taps;
  7256  16EF  0023               	movlb	3	; select bank3
  7257  16F0  086C               	movf	_num_taps^(0+384),w
  7258  16F1  0021               	movlb	1	; select bank1
  7259  16F2  00BC               	movwf	??_updateSwitchTap^(0+128)
  7260  16F3  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7261  16F4  083C               	movf	??_updateSwitchTap^(0+128),w
  7262  16F5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7263  16F6  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7264  16F7  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7265                           
  7266                           ;SwitchTap.c: 122: if (tap_iteration <= num_taps) {
  7267  16F8  0024               	movlb	4	; select bank4
  7268  16F9  0866               	movf	(_tap_iteration+1)^(0+512),w
  7269  16FA  3A80               	xorlw	128
  7270  16FB  3C80               	sublw	128
  7271  16FC  1D03               	skipz
  7272  16FD  2F01               	goto	u8115
  7273  16FE  0865               	movf	_tap_iteration^(0+512),w
  7274  16FF  0023               	movlb	3	; select bank3
  7275  1700  026C               	subwf	_num_taps^(0+384),w
  7276  1701                     u8115:	
  7277  1701  1C03               	skipc
  7278  1702  2F33               	goto	l8183
  7279                           
  7280                           ;SwitchTap.c: 123: tap_total += tap_timer;
  7281  1703  0020               	movlb	0	; select bank0
  7282  1704  0859               	movf	_tap_timer,w	;volatile
  7283  1705  0025               	movlb	5	; select bank5
  7284  1706  07D6               	addwf	_tap_total^(0+640),f
  7285  1707  0020               	movlb	0	; select bank0
  7286  1708  085A               	movf	_tap_timer+1,w	;volatile
  7287  1709  0025               	movlb	5	; select bank5
  7288  170A  3DD7               	addwfc	(_tap_total+1)^(0+640),f
  7289  170B  0020               	movlb	0	; select bank0
  7290  170C  085B               	movf	_tap_timer+2,w	;volatile
  7291  170D  0025               	movlb	5	; select bank5
  7292  170E  3DD8               	addwfc	(_tap_total+2)^(0+640),f
  7293  170F  0020               	movlb	0	; select bank0
  7294  1710  085C               	movf	_tap_timer+3,w	;volatile
  7295  1711  0025               	movlb	5	; select bank5
  7296  1712  3DD9               	addwfc	(_tap_total+3)^(0+640),f
  7297                           
  7298                           ;SwitchTap.c: 124: tap_history[tap_iteration] = tap_timer;
  7299  1713  0024               	movlb	4	; select bank4
  7300  1714  0865               	movf	_tap_iteration^(0+512),w
  7301  1715  0021               	movlb	1	; select bank1
  7302  1716  00BC               	movwf	??_updateSwitchTap^(0+128)
  7303  1717  3001               	movlw	1
  7304  1718                     u8125:	
  7305  1718  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7306  1719  3EFF               	addlw	-1
  7307  171A  1D03               	skipz
  7308  171B  2F18               	goto	u8125
  7309  171C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7310  171D  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7311  171E  0086               	movwf	6
  7312  171F  3002               	movlw	2	; select bank5/6
  7313  1720  0087               	movwf	7
  7314  1721  0020               	movlb	0	; select bank0
  7315  1722  0859               	movf	_tap_timer,w	;volatile
  7316  1723  3FC0               	movwi [0]fsr1
  7317  1724  085A               	movf	_tap_timer+1,w	;volatile
  7318  1725  3FC1               	movwi [1]fsr1
  7319  1726  085B               	movf	_tap_timer+2,w	;volatile
  7320  1727  3FC2               	movwi [2]fsr1
  7321  1728  085C               	movf	_tap_timer+3,w	;volatile
  7322  1729  3FC3               	movwi [3]fsr1
  7323                           
  7324                           ;SwitchTap.c: 125: tapCntDivisor = tap_iteration;
  7325  172A  0024               	movlb	4	; select bank4
  7326  172B  0866               	movf	(_tap_iteration+1)^(0+512),w
  7327  172C  0021               	movlb	1	; select bank1
  7328  172D  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7329  172E  0024               	movlb	4	; select bank4
  7330  172F  0865               	movf	_tap_iteration^(0+512),w
  7331  1730  0021               	movlb	1	; select bank1
  7332  1731  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7333                           
  7334                           ;SwitchTap.c: 126: } else {
  7335  1732  2FAF               	goto	l8197
  7336  1733                     l8183:	
  7337                           
  7338                           ;SwitchTap.c: 127: tap_total = 0;
  7339  1733  3000               	movlw	0
  7340  1734  0025               	movlb	5	; select bank5
  7341  1735  00D9               	movwf	(_tap_total+3)^(0+640)
  7342  1736  3000               	movlw	0
  7343  1737  00D8               	movwf	(_tap_total+2)^(0+640)
  7344  1738  3000               	movlw	0
  7345  1739  00D7               	movwf	(_tap_total+1)^(0+640)
  7346  173A  3000               	movlw	0
  7347  173B  00D6               	movwf	_tap_total^(0+640)
  7348                           
  7349                           ;SwitchTap.c: 128: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7350  173C  0021               	movlb	1	; select bank1
  7351  173D  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7352  173E  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7353  173F                     l8191:	
  7354  173F  0023               	movlb	3	; select bank3
  7355  1740  086C               	movf	_num_taps^(0+384),w
  7356  1741  0021               	movlb	1	; select bank1
  7357  1742  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7358  1743  1803               	btfsc	3,0
  7359  1744  2F89               	goto	l8193
  7360                           
  7361                           ;SwitchTap.c: 129: tap_history[iCnt] = tap_history[iCnt + 1];
  7362  1745  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7363  1746  00BC               	movwf	??_updateSwitchTap^(0+128)
  7364  1747  3001               	movlw	1
  7365  1748                     u8135:	
  7366  1748  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7367  1749  3EFF               	addlw	-1
  7368  174A  1D03               	skipz
  7369  174B  2F48               	goto	u8135
  7370  174C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7371  174D  3E04               	addlw	4
  7372  174E  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7373  174F  0086               	movwf	6
  7374  1750  3002               	movlw	2	; select bank5/6
  7375  1751  0087               	movwf	7
  7376  1752  3F40               	moviw [0]fsr1
  7377  1753  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7378  1754  3F41               	moviw [1]fsr1
  7379  1755  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7380  1756  3F42               	moviw [2]fsr1
  7381  1757  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7382  1758  3F43               	moviw [3]fsr1
  7383  1759  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7384  175A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7385  175B  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7386  175C  3001               	movlw	1
  7387  175D                     u8145:	
  7388  175D  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7389  175E  3EFF               	addlw	-1
  7390  175F  1D03               	skipz
  7391  1760  2F5D               	goto	u8145
  7392  1761  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7393  1762  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7394  1763  0086               	movwf	6
  7395  1764  3002               	movlw	2	; select bank5/6
  7396  1765  0087               	movwf	7
  7397  1766  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7398  1767  3FC0               	movwi [0]fsr1
  7399  1768  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7400  1769  3FC1               	movwi [1]fsr1
  7401  176A  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7402  176B  3FC2               	movwi [2]fsr1
  7403  176C  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7404  176D  3FC3               	movwi [3]fsr1
  7405                           
  7406                           ;SwitchTap.c: 130: tap_total += tap_history[iCnt];
  7407  176E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7408  176F  00BC               	movwf	??_updateSwitchTap^(0+128)
  7409  1770  3001               	movlw	1
  7410  1771                     u8155:	
  7411  1771  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7412  1772  3EFF               	addlw	-1
  7413  1773  1D03               	skipz
  7414  1774  2F71               	goto	u8155
  7415  1775  353C               	lslf	??_updateSwitchTap^(0+128),w
  7416  1776  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7417  1777  0086               	movwf	6
  7418  1778  3002               	movlw	2	; select bank5/6
  7419  1779  0087               	movwf	7
  7420  177A  3F40               	moviw [0]fsr1
  7421  177B  0025               	movlb	5	; select bank5
  7422  177C  07D6               	addwf	_tap_total^(0+640),f
  7423  177D  3F41               	moviw [1]fsr1
  7424  177E  3DD7               	addwfc	(_tap_total+1)^(0+640),f
  7425  177F  3F42               	moviw [2]fsr1
  7426  1780  3DD8               	addwfc	(_tap_total+2)^(0+640),f
  7427  1781  3F43               	moviw [3]fsr1
  7428  1782  3DD9               	addwfc	(_tap_total+3)^(0+640),f
  7429  1783  3001               	movlw	1
  7430  1784  0021               	movlb	1	; select bank1
  7431  1785  00BC               	movwf	??_updateSwitchTap^(0+128)
  7432  1786  083C               	movf	??_updateSwitchTap^(0+128),w
  7433  1787  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7434  1788  2F3F               	goto	l8191
  7435  1789                     l8193:	
  7436                           
  7437                           ;SwitchTap.c: 131: }
  7438                           ;SwitchTap.c: 132: tap_history[num_taps] = tap_timer;
  7439  1789  0023               	movlb	3	; select bank3
  7440  178A  086C               	movf	_num_taps^(0+384),w
  7441  178B  0021               	movlb	1	; select bank1
  7442  178C  00BC               	movwf	??_updateSwitchTap^(0+128)
  7443  178D  3001               	movlw	1
  7444  178E                     u8175:	
  7445  178E  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7446  178F  3EFF               	addlw	-1
  7447  1790  1D03               	skipz
  7448  1791  2F8E               	goto	u8175
  7449  1792  353C               	lslf	??_updateSwitchTap^(0+128),w
  7450  1793  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7451  1794  0086               	movwf	6
  7452  1795  3002               	movlw	2	; select bank5/6
  7453  1796  0087               	movwf	7
  7454  1797  0020               	movlb	0	; select bank0
  7455  1798  0859               	movf	_tap_timer,w	;volatile
  7456  1799  3FC0               	movwi [0]fsr1
  7457  179A  085A               	movf	_tap_timer+1,w	;volatile
  7458  179B  3FC1               	movwi [1]fsr1
  7459  179C  085B               	movf	_tap_timer+2,w	;volatile
  7460  179D  3FC2               	movwi [2]fsr1
  7461  179E  085C               	movf	_tap_timer+3,w	;volatile
  7462  179F  3FC3               	movwi [3]fsr1
  7463                           
  7464                           ;SwitchTap.c: 133: tap_total += tap_timer;
  7465  17A0  0859               	movf	_tap_timer,w	;volatile
  7466  17A1  0025               	movlb	5	; select bank5
  7467  17A2  07D6               	addwf	_tap_total^(0+640),f
  7468  17A3  0020               	movlb	0	; select bank0
  7469  17A4  085A               	movf	_tap_timer+1,w	;volatile
  7470  17A5  0025               	movlb	5	; select bank5
  7471  17A6  3DD7               	addwfc	(_tap_total+1)^(0+640),f
  7472  17A7  0020               	movlb	0	; select bank0
  7473  17A8  085B               	movf	_tap_timer+2,w	;volatile
  7474  17A9  0025               	movlb	5	; select bank5
  7475  17AA  3DD8               	addwfc	(_tap_total+2)^(0+640),f
  7476  17AB  0020               	movlb	0	; select bank0
  7477  17AC  085C               	movf	_tap_timer+3,w	;volatile
  7478  17AD  0025               	movlb	5	; select bank5
  7479  17AE  3DD9               	addwfc	(_tap_total+3)^(0+640),f
  7480  17AF                     l8197:	
  7481                           
  7482                           ;SwitchTap.c: 134: }
  7483                           ;SwitchTap.c: 136: baseline_mod_time = tap_total / tapCntDivisor;
  7484  17AF  0021               	movlb	1	; select bank1
  7485  17B0  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7486  17B1  00A0               	movwf	___aldiv@divisor^(0+128)
  7487  17B2  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7488  17B3  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7489  17B4  0D89               	rlf	9,f
  7490  17B5  3B89               	subwfb	9,f
  7491  17B6  0989               	comf	9,f
  7492  17B7  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7493  17B8  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7494  17B9  0025               	movlb	5	; select bank5
  7495  17BA  0859               	movf	(_tap_total+3)^(0+640),w
  7496  17BB  0021               	movlb	1	; select bank1
  7497  17BC  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7498  17BD  0025               	movlb	5	; select bank5
  7499  17BE  0858               	movf	(_tap_total+2)^(0+640),w
  7500  17BF  0021               	movlb	1	; select bank1
  7501  17C0  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7502  17C1  0025               	movlb	5	; select bank5
  7503  17C2  0857               	movf	(_tap_total+1)^(0+640),w
  7504  17C3  0021               	movlb	1	; select bank1
  7505  17C4  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7506  17C5  0025               	movlb	5	; select bank5
  7507  17C6  0856               	movf	_tap_total^(0+640),w
  7508  17C7  0021               	movlb	1	; select bank1
  7509  17C8  00A4               	movwf	___aldiv@dividend^(0+128)
  7510  17C9  31A0  205D  3196   	fcall	___aldiv
  7511  17CC  0021               	movlb	1	; select bank1
  7512  17CD  0821               	movf	(?___aldiv^(0+128)+1),w
  7513  17CE  0020               	movlb	0	; select bank0
  7514  17CF  00EB               	movwf	_baseline_mod_time+1	;volatile
  7515  17D0  0021               	movlb	1	; select bank1
  7516  17D1  0820               	movf	?___aldiv^(0+128),w
  7517  17D2  0020               	movlb	0	; select bank0
  7518  17D3  00EA               	movwf	_baseline_mod_time	;volatile
  7519                           
  7520                           ;SwitchTap.c: 137: mod_time_changed = 1;
  7521  17D4  0024               	movlb	4	; select bank4
  7522  17D5  01EC               	clrf	_mod_time_changed^(0+512)
  7523  17D6  0AEC               	incf	_mod_time_changed^(0+512),f
  7524                           
  7525                           ;SwitchTap.c: 138: tap_timer = 0;
  7526  17D7  3000               	movlw	0
  7527  17D8  0020               	movlb	0	; select bank0
  7528  17D9  00DC               	movwf	_tap_timer+3	;volatile
  7529  17DA  3000               	movlw	0
  7530  17DB  00DB               	movwf	_tap_timer+2	;volatile
  7531  17DC  3000               	movlw	0
  7532  17DD  00DA               	movwf	_tap_timer+1	;volatile
  7533  17DE  3000               	movlw	0
  7534  17DF  00D9               	movwf	_tap_timer	;volatile
  7535                           
  7536                           ;SwitchTap.c: 140: tap_iteration++;
  7537  17E0  3001               	movlw	1
  7538  17E1  0024               	movlb	4	; select bank4
  7539  17E2  07E5               	addwf	_tap_iteration^(0+512),f
  7540  17E3  3000               	movlw	0
  7541  17E4  3DE6               	addwfc	(_tap_iteration+1)^(0+512),f
  7542                           
  7543                           ;SwitchTap.c: 141: updateTapTime();
  7544  17E5  3187  27F7         	fcall	_updateTapTime
  7545                           
  7546                           ;SwitchTap.c: 142: }
  7547                           ;SwitchTap.c: 144: } else if (switchTap_pressed >= 25) {
  7548  17E7  0008               	return
  7549  17E8                     l8207:	
  7550  17E8  3019               	movlw	25
  7551  17E9  0024               	movlb	4	; select bank4
  7552  17EA  0256               	subwf	_switchTap_pressed^(0+512),w
  7553  17EB  1C03               	skipc
  7554  17EC  0008               	return
  7555                           
  7556                           ;SwitchTap.c: 145: switchTap_down = 0;
  7557  17ED  01D5               	clrf	_switchTap_down^(0+512)
  7558                           
  7559                           ;SwitchTap.c: 146: switchTap_state = 0;
  7560  17EE  01EF               	clrf	_switchTap_state^(0+512)
  7561                           
  7562                           ;SwitchTap.c: 152: setLongTapState(0);
  7563  17EF  3000               	movlw	0
  7564  17F0  0021               	movlb	1	; select bank1
  7565  17F1  00A0               	movwf	setLongTapState@f_state^(0+128)
  7566  17F2  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7567  17F3  31B1  21CB         	fcall	_setLongTapState
  7568                           
  7569                           ;SwitchTap.c: 154: longTap_timer = 0;
  7570  17F5  0024               	movlb	4	; select bank4
  7571  17F6  01BC               	clrf	_longTap_timer^(0+512)	;volatile
  7572  17F7  01BD               	clrf	(_longTap_timer+1)^(0+512)	;volatile
  7573                           
  7574                           ;SwitchTap.c: 155: longTap_start = 0;
  7575  17F8  01CC               	clrf	_longTap_start^(0+512)
  7576                           
  7577                           ;SwitchTap.c: 157: switchTap_pressed = 25;
  7578  17F9  3019               	movlw	25
  7579  17FA  0021               	movlb	1	; select bank1
  7580  17FB  00BC               	movwf	??_updateSwitchTap^(0+128)
  7581  17FC  083C               	movf	??_updateSwitchTap^(0+128),w
  7582  17FD  0024               	movlb	4	; select bank4
  7583  17FE  00D6               	movwf	_switchTap_pressed^(0+512)
  7584  17FF  0008               	return
  7585  1800                     __end_of_updateSwitchTap:	
  7586                           
  7587                           	psect	text4
  7588  07F7                     __ptext4:	
  7589 ;; *************** function _updateTapTime *****************
  7590 ;; Defined at:
  7591 ;;		line 311 in file "state_manager.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;		None
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;		None
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      void 
  7598 ;; Registers used:
  7599 ;;		wreg
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7609 ;;Total ram usage:        0 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; Hardware stack levels required when called:    5
  7612 ;; This function calls:
  7613 ;;		Nothing
  7614 ;; This function is called by:
  7615 ;;		_main
  7616 ;;		_updateSwitchTap
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           
  7621                           ;psect for function _updateTapTime
  7622  07F7                     _updateTapTime:	
  7623                           
  7624                           ;state_manager.c: 312: pedalState.baseTapTime = baseline_mod_time;
  7625                           
  7626                           ;incstack = 0
  7627                           ; Regs used in _updateTapTime: [wreg]
  7628  07F7  0020               	movlb	0	; select bank0
  7629  07F8  086B               	movf	_baseline_mod_time+1,w	;volatile
  7630  07F9  0025               	movlb	5	; select bank5
  7631  07FA  00B6               	movwf	((_pedalState+1)^(0+640)+1)
  7632  07FB  0020               	movlb	0	; select bank0
  7633  07FC  086A               	movf	_baseline_mod_time,w	;volatile
  7634  07FD  0025               	movlb	5	; select bank5
  7635  07FE  00B5               	movwf	(_pedalState^(0+640)+1)
  7636  07FF  0008               	return
  7637  0800                     __end_of_updateTapTime:	
  7638                           
  7639                           	psect	text5
  7640  31CB                     __ptext5:	
  7641 ;; *************** function _setLongTapState *****************
  7642 ;; Defined at:
  7643 ;;		line 172 in file "SwitchTap.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;  f_state         2    0[BANK1 ] int 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      void 
  7650 ;; Registers used:
  7651 ;;		wreg, status,0
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7657 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7659 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7660 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7661 ;;Total ram usage:        4 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    5
  7664 ;; This function calls:
  7665 ;;		Nothing
  7666 ;; This function is called by:
  7667 ;;		_updateSwitchTap
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _setLongTapState
  7673  31CB                     _setLongTapState:	
  7674                           
  7675                           ;SwitchTap.c: 173: if (longTap_state == f_state) {return;}
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _setLongTapState: [wreg+status,0]
  7679  31CB  0020               	movlb	0	; select bank0
  7680  31CC  086F               	movf	_longTap_state,w	;volatile
  7681  31CD  0021               	movlb	1	; select bank1
  7682  31CE  00A2               	movwf	??_setLongTapState^(0+128)
  7683  31CF  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7684  31D0  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7685  31D1  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7686  31D2  1D03               	skipz
  7687  31D3  29D6               	goto	u6935
  7688  31D4  0820               	movf	setLongTapState@f_state^(0+128),w
  7689  31D5  0622               	xorwf	??_setLongTapState^(0+128),w
  7690  31D6                     u6935:	
  7691  31D6  1903               	btfsc	3,2
  7692  31D7  0008               	return
  7693                           
  7694                           ;SwitchTap.c: 174: longTap_state = f_state;
  7695  31D8  0820               	movf	setLongTapState@f_state^(0+128),w
  7696  31D9  00A2               	movwf	??_setLongTapState^(0+128)
  7697  31DA  0822               	movf	??_setLongTapState^(0+128),w
  7698  31DB  0020               	movlb	0	; select bank0
  7699  31DC  00EF               	movwf	_longTap_state	;volatile
  7700                           
  7701                           ;SwitchTap.c: 175: LATBbits.LATB5 = f_state;
  7702  31DD  0021               	movlb	1	; select bank1
  7703  31DE  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7704  31DF  0022               	movlb	2	; select bank2
  7705  31E0  1C03               	skipc
  7706  31E1  128D               	bcf	13,5	;volatile
  7707  31E2  1803               	skipnc
  7708  31E3  168D               	bsf	13,5	;volatile
  7709  31E4  0008               	return
  7710  31E5                     __end_of_setLongTapState:	
  7711                           
  7712                           	psect	text6
  7713  205D                     __ptext6:	
  7714 ;; *************** function ___aldiv *****************
  7715 ;; Defined at:
  7716 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  divisor         4    0[BANK1 ] long 
  7719 ;;  dividend        4    4[BANK1 ] long 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  quotient        4   11[BANK1 ] long 
  7722 ;;  sign            1   10[BANK1 ] unsigned char 
  7723 ;;  counter         1    9[BANK1 ] unsigned char 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  4    0[BANK1 ] long 
  7726 ;; Registers used:
  7727 ;;		wreg, status,2, status,0
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7733 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7734 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7735 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7736 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7737 ;;Total ram usage:       15 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    5
  7740 ;; This function calls:
  7741 ;;		Nothing
  7742 ;; This function is called by:
  7743 ;;		_main
  7744 ;;		_updateSwitchTap
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function ___aldiv
  7750  205D                     ___aldiv:	
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7754  205D  0021               	movlb	1	; select bank1
  7755  205E  01AA               	clrf	___aldiv@sign^(0+128)
  7756  205F  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7757  2060  286E               	goto	l2504
  7758  2061  09A0               	comf	___aldiv@divisor^(0+128),f
  7759  2062  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7760  2063  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7761  2064  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7762  2065  0AA0               	incf	___aldiv@divisor^(0+128),f
  7763  2066  1903               	skipnz
  7764  2067  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7765  2068  1903               	skipnz
  7766  2069  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7767  206A  1903               	skipnz
  7768  206B  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7769  206C  01AA               	clrf	___aldiv@sign^(0+128)
  7770  206D  0AAA               	incf	___aldiv@sign^(0+128),f
  7771  206E                     l2504:	
  7772  206E  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7773  206F  287F               	goto	l7639
  7774  2070  09A4               	comf	___aldiv@dividend^(0+128),f
  7775  2071  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7776  2072  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7777  2073  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7778  2074  0AA4               	incf	___aldiv@dividend^(0+128),f
  7779  2075  1903               	skipnz
  7780  2076  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7781  2077  1903               	skipnz
  7782  2078  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7783  2079  1903               	skipnz
  7784  207A  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7785  207B  3001               	movlw	1
  7786  207C  00A8               	movwf	??___aldiv^(0+128)
  7787  207D  0828               	movf	??___aldiv^(0+128),w
  7788  207E  06AA               	xorwf	___aldiv@sign^(0+128),f
  7789  207F                     l7639:	
  7790  207F  3000               	movlw	0
  7791  2080  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7792  2081  3000               	movlw	0
  7793  2082  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7794  2083  3000               	movlw	0
  7795  2084  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7796  2085  3000               	movlw	0
  7797  2086  00AB               	movwf	___aldiv@quotient^(0+128)
  7798  2087  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7799  2088  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7800  2089  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7801  208A  0420               	iorwf	___aldiv@divisor^(0+128),w
  7802  208B  1903               	skipnz
  7803  208C  28C8               	goto	l7661
  7804  208D  01A9               	clrf	___aldiv@counter^(0+128)
  7805  208E  0AA9               	incf	___aldiv@counter^(0+128),f
  7806  208F                     l7647:	
  7807  208F  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7808  2090  289D               	goto	l7649
  7809  2091  3001               	movlw	1
  7810  2092                     u7045:	
  7811  2092  35A0               	lslf	___aldiv@divisor^(0+128),f
  7812  2093  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7813  2094  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7814  2095  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7815  2096  0B89               	decfsz	9,f
  7816  2097  2892               	goto	u7045
  7817  2098  3001               	movlw	1
  7818  2099  00A8               	movwf	??___aldiv^(0+128)
  7819  209A  0828               	movf	??___aldiv^(0+128),w
  7820  209B  07A9               	addwf	___aldiv@counter^(0+128),f
  7821  209C  288F               	goto	l7647
  7822  209D                     l7649:	
  7823  209D  3001               	movlw	1
  7824  209E                     u7065:	
  7825  209E  35AB               	lslf	___aldiv@quotient^(0+128),f
  7826  209F  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7827  20A0  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7828  20A1  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7829  20A2  0B89               	decfsz	9,f
  7830  20A3  289E               	goto	u7065
  7831  20A4  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7832  20A5  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7833  20A6  1D03               	skipz
  7834  20A7  28B2               	goto	u7075
  7835  20A8  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7836  20A9  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7837  20AA  1D03               	skipz
  7838  20AB  28B2               	goto	u7075
  7839  20AC  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7840  20AD  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7841  20AE  1D03               	skipz
  7842  20AF  28B2               	goto	u7075
  7843  20B0  0820               	movf	___aldiv@divisor^(0+128),w
  7844  20B1  0224               	subwf	___aldiv@dividend^(0+128),w
  7845  20B2                     u7075:	
  7846  20B2  1C03               	skipc
  7847  20B3  28BD               	goto	l7657
  7848  20B4  0820               	movf	___aldiv@divisor^(0+128),w
  7849  20B5  02A4               	subwf	___aldiv@dividend^(0+128),f
  7850  20B6  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7851  20B7  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7852  20B8  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7853  20B9  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7854  20BA  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7855  20BB  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7856  20BC  142B               	bsf	___aldiv@quotient^(0+128),0
  7857  20BD                     l7657:	
  7858  20BD  3001               	movlw	1
  7859  20BE                     u7085:	
  7860  20BE  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7861  20BF  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7862  20C0  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7863  20C1  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7864  20C2  0B89               	decfsz	9,f
  7865  20C3  28BE               	goto	u7085
  7866  20C4  3001               	movlw	1
  7867  20C5  02A9               	subwf	___aldiv@counter^(0+128),f
  7868  20C6  1D03               	btfss	3,2
  7869  20C7  289D               	goto	l7649
  7870  20C8                     l7661:	
  7871  20C8  082A               	movf	___aldiv@sign^(0+128),w
  7872  20C9  1903               	btfsc	3,2
  7873  20CA  28D6               	goto	l7665
  7874  20CB  09AB               	comf	___aldiv@quotient^(0+128),f
  7875  20CC  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7876  20CD  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7877  20CE  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7878  20CF  0AAB               	incf	___aldiv@quotient^(0+128),f
  7879  20D0  1903               	skipnz
  7880  20D1  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7881  20D2  1903               	skipnz
  7882  20D3  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7883  20D4  1903               	skipnz
  7884  20D5  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7885  20D6                     l7665:	
  7886  20D6  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7887  20D7  00A3               	movwf	(?___aldiv+3)^(0+128)
  7888  20D8  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7889  20D9  00A2               	movwf	(?___aldiv+2)^(0+128)
  7890  20DA  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7891  20DB  00A1               	movwf	(?___aldiv+1)^(0+128)
  7892  20DC  082B               	movf	___aldiv@quotient^(0+128),w
  7893  20DD  00A0               	movwf	?___aldiv^(0+128)
  7894  20DE  0008               	return
  7895  20DF                     __end_of___aldiv:	
  7896                           
  7897                           	psect	text7
  7898  270F                     __ptext7:	
  7899 ;; *************** function _updateSwitchBypass *****************
  7900 ;; Defined at:
  7901 ;;		line 34 in file "SwitchBypass.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7917 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7918 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7919 ;;Total ram usage:        1 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:   10
  7922 ;; This function calls:
  7923 ;;		_setDoublePressState
  7924 ;;		_setLongBypassState
  7925 ;;		_setSwitchBypassRelays
  7926 ;;		_setSwitchBypassState
  7927 ;; This function is called by:
  7928 ;;		_main
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _updateSwitchBypass
  7934  270F                     _updateSwitchBypass:	
  7935                           
  7936                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7937                           
  7938                           ;incstack = 0
  7939                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7940  270F  0020               	movlb	0	; select bank0
  7941  2710  1890               	btfsc	16,1	;volatile
  7942  2711  2F19               	goto	l8011
  7943                           
  7944                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7945  2712  0024               	movlb	4	; select bank4
  7946  2713  0853               	movf	_switchBypass_pressed^(0+512),w
  7947  2714  1903               	btfsc	3,2
  7948  2715  2F24               	goto	l1555
  7949                           
  7950                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7951  2716  3001               	movlw	1
  7952  2717  02D3               	subwf	_switchBypass_pressed^(0+512),f
  7953                           
  7954                           ;SwitchBypass.c: 44: }
  7955                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7956  2718  2F24               	goto	l1555
  7957  2719                     l8011:	
  7958  2719  3019               	movlw	25
  7959  271A  0024               	movlb	4	; select bank4
  7960  271B  0253               	subwf	_switchBypass_pressed^(0+512),w
  7961  271C  1803               	skipnc
  7962  271D  2F24               	goto	l1555
  7963                           
  7964                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7965  271E  3001               	movlw	1
  7966  271F  0021               	movlb	1	; select bank1
  7967  2720  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7968  2721  083C               	movf	??_updateSwitchBypass^(0+128),w
  7969  2722  0024               	movlb	4	; select bank4
  7970  2723  07D3               	addwf	_switchBypass_pressed^(0+512),f
  7971  2724                     l1555:	
  7972                           
  7973                           ;SwitchBypass.c: 47: }
  7974                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7975  2724  0853               	movf	_switchBypass_pressed^(0+512),w
  7976  2725  1D03               	btfss	3,2
  7977  2726  2F9E               	goto	l8071
  7978                           
  7979                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7980  2727  084B               	movf	_longBypass_start^(0+512),w
  7981  2728  1D03               	btfss	3,2
  7982  2729  2F2E               	goto	l8021
  7983                           
  7984                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7985  272A  01CB               	clrf	_longBypass_start^(0+512)
  7986  272B  0ACB               	incf	_longBypass_start^(0+512),f
  7987                           
  7988                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7989  272C  01BA               	clrf	_longBypass_timer^(0+512)	;volatile
  7990  272D  01BB               	clrf	(_longBypass_timer+1)^(0+512)	;volatile
  7991  272E                     l8021:	
  7992                           
  7993                           ;SwitchBypass.c: 59: }
  7994                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7995  272E  0860               	movf	(_long_press_limit+1)^(0+512),w
  7996  272F  023B               	subwf	(_longBypass_timer+1)^(0+512),w	;volatile
  7997  2730  1D03               	skipz
  7998  2731  2F34               	goto	u7755
  7999  2732  085F               	movf	_long_press_limit^(0+512),w
  8000  2733  023A               	subwf	_longBypass_timer^(0+512),w	;volatile
  8001  2734                     u7755:	
  8002  2734  1C03               	skipc
  8003  2735  2F73               	goto	l8047
  8004  2736  0849               	movf	_longBypass_down^(0+512),w
  8005  2737  1D03               	btfss	3,2
  8006  2738  2F73               	goto	l8047
  8007  2739  0020               	movlb	0	; select bank0
  8008  273A  0861               	movf	_doubleTap_state,w	;volatile
  8009  273B  1D03               	btfss	3,2
  8010  273C  2F73               	goto	l8047
  8011                           
  8012                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  8013  273D  0022               	movlb	2	; select bank2
  8014  273E  110D               	bcf	13,2	;volatile
  8015                           
  8016                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  8017  273F  0024               	movlb	4	; select bank4
  8018  2740  034C               	decf	_longTap_start^(0+512),w
  8019  2741  1903               	btfsc	3,2
  8020  2742  2F6B               	goto	l8045
  8021                           
  8022                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  8023  2743  0023               	movlb	3	; select bank3
  8024  2744  036E               	decf	_switchBypass_state^(0+384),w
  8025  2745  1D03               	btfss	3,2
  8026  2746  2F73               	goto	l8047
  8027                           
  8028                           ;SwitchBypass.c: 67: longBypass_down = 1;
  8029  2747  0024               	movlb	4	; select bank4
  8030  2748  01C9               	clrf	_longBypass_down^(0+512)
  8031  2749  0AC9               	incf	_longBypass_down^(0+512),f
  8032                           
  8033                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  8034  274A  0020               	movlb	0	; select bank0
  8035  274B  0863               	movf	_longBypass_state,w	;volatile
  8036  274C  1D03               	btfss	3,2
  8037  274D  2F59               	goto	l8041
  8038                           
  8039                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  8040  274E  0022               	movlb	2	; select bank2
  8041  274F  110D               	bcf	13,2	;volatile
  8042                           
  8043                           ;SwitchBypass.c: 70: setLongBypassState(1);
  8044  2750  3001               	movlw	1
  8045  2751  0021               	movlb	1	; select bank1
  8046  2752  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8047  2753  3000               	movlw	0
  8048  2754  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8049  2755  31B2  22CF  31A7   	fcall	_setLongBypassState
  8050                           
  8051                           ;SwitchBypass.c: 71: } else {
  8052  2758  2F73               	goto	l8047
  8053  2759                     l8041:	
  8054                           
  8055                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  8056  2759  3001               	movlw	1
  8057  275A  0021               	movlb	1	; select bank1
  8058  275B  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8059  275C  3000               	movlw	0
  8060  275D  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8061  275E  31B2  2238  31A7   	fcall	_setSwitchBypassState
  8062                           
  8063                           ;SwitchBypass.c: 73: setLongBypassState(0);
  8064  2761  3000               	movlw	0
  8065  2762  0021               	movlb	1	; select bank1
  8066  2763  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8067  2764  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  8068  2765  31B2  22CF  31A7   	fcall	_setLongBypassState
  8069                           
  8070                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  8071  2768  0022               	movlb	2	; select bank2
  8072  2769  150D               	bsf	13,2	;volatile
  8073                           
  8074                           ;SwitchBypass.c: 75: }
  8075                           ;SwitchBypass.c: 76: }
  8076                           ;SwitchBypass.c: 77: } else {
  8077  276A  2F73               	goto	l8047
  8078  276B                     l8045:	
  8079                           
  8080                           ;SwitchBypass.c: 78: setDoublePressState(1);
  8081  276B  3001               	movlw	1
  8082  276C  0021               	movlb	1	; select bank1
  8083  276D  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8084  276E  3000               	movlw	0
  8085  276F  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8086  2770  31B7  27C2  31A7   	fcall	_setDoublePressState
  8087  2773                     l8047:	
  8088                           
  8089                           ;SwitchBypass.c: 79: }
  8090                           ;SwitchBypass.c: 80: }
  8091                           ;SwitchBypass.c: 83: if (doubleTap_state == 0 && longBypass_down == 0) {
  8092  2773  0020               	movlb	0	; select bank0
  8093  2774  0861               	movf	_doubleTap_state,w	;volatile
  8094  2775  1D03               	btfss	3,2
  8095  2776  2F9B               	goto	l8069
  8096  2777  0024               	movlb	4	; select bank4
  8097  2778  0849               	movf	_longBypass_down^(0+512),w
  8098  2779  1D03               	btfss	3,2
  8099  277A  2F9B               	goto	l8069
  8100                           
  8101                           ;SwitchBypass.c: 84: if (switchBypass_state == 1) {
  8102  277B  0023               	movlb	3	; select bank3
  8103  277C  036E               	decf	_switchBypass_state^(0+384),w
  8104  277D  1D03               	btfss	3,2
  8105  277E  2F88               	goto	l8057
  8106                           
  8107                           ;SwitchBypass.c: 86: if (switchBypass_up == 1) {
  8108  277F  0024               	movlb	4	; select bank4
  8109  2780  036E               	decf	_switchBypass_up^(0+512),w
  8110  2781  1D03               	btfss	3,2
  8111  2782  2F9B               	goto	l8069
  8112                           
  8113                           ;SwitchBypass.c: 87: currentBypassState = 1;
  8114  2783  01E8               	clrf	_currentBypassState^(0+512)
  8115  2784  0AE8               	incf	_currentBypassState^(0+512),f
  8116                           
  8117                           ;SwitchBypass.c: 88: switchBypass_toggle = 1;
  8118  2785  01D4               	clrf	_switchBypass_toggle^(0+512)
  8119  2786  0AD4               	incf	_switchBypass_toggle^(0+512),f
  8120                           
  8121                           ;SwitchBypass.c: 89: }
  8122                           ;SwitchBypass.c: 90: } else {
  8123  2787  2F9B               	goto	l8069
  8124  2788                     l8057:	
  8125                           
  8126                           ;SwitchBypass.c: 91: if (bypass_turning_on != 1) {
  8127  2788  0024               	movlb	4	; select bank4
  8128  2789  0348               	decf	_bypass_turning_on^(0+512),w
  8129  278A  1903               	btfsc	3,2
  8130  278B  2F9B               	goto	l8069
  8131                           
  8132                           ;SwitchBypass.c: 93: currentBypassState = 0;
  8133  278C  01E8               	clrf	_currentBypassState^(0+512)
  8134                           
  8135                           ;SwitchBypass.c: 95: bypass_turning_on = 1;
  8136  278D  01C8               	clrf	_bypass_turning_on^(0+512)
  8137  278E  0AC8               	incf	_bypass_turning_on^(0+512),f
  8138                           
  8139                           ;SwitchBypass.c: 96: switchBypass_toggle = 0;
  8140  278F  01D4               	clrf	_switchBypass_toggle^(0+512)
  8141                           
  8142                           ;SwitchBypass.c: 98: longBypass_save = longBypass_state;
  8143  2790  0020               	movlb	0	; select bank0
  8144  2791  0863               	movf	_longBypass_state,w	;volatile
  8145  2792  0021               	movlb	1	; select bank1
  8146  2793  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8147  2794  083C               	movf	??_updateSwitchBypass^(0+128),w
  8148  2795  0024               	movlb	4	; select bank4
  8149  2796  00CA               	movwf	_longBypass_save^(0+512)
  8150                           
  8151                           ;SwitchBypass.c: 99: longBypass_state = 0;
  8152  2797  0020               	movlb	0	; select bank0
  8153  2798  01E3               	clrf	_longBypass_state	;volatile
  8154                           
  8155                           ;SwitchBypass.c: 100: longBypass_start = 0;
  8156  2799  0024               	movlb	4	; select bank4
  8157  279A  01CB               	clrf	_longBypass_start^(0+512)
  8158  279B                     l8069:	
  8159                           
  8160                           ;SwitchBypass.c: 101: }
  8161                           ;SwitchBypass.c: 102: }
  8162                           ;SwitchBypass.c: 104: }
  8163                           ;SwitchBypass.c: 105: switchBypass_up = 0;
  8164  279B  0024               	movlb	4	; select bank4
  8165  279C  01EE               	clrf	_switchBypass_up^(0+512)
  8166                           
  8167                           ;SwitchBypass.c: 106: } else if (switchBypass_pressed >= 25) {
  8168  279D  0008               	return
  8169  279E                     l8071:	
  8170  279E  3019               	movlw	25
  8171  279F  0253               	subwf	_switchBypass_pressed^(0+512),w
  8172  27A0  1C03               	skipc
  8173  27A1  0008               	return
  8174                           
  8175                           ;SwitchBypass.c: 107: if (doubleTap_state == 1) {
  8176  27A2  0020               	movlb	0	; select bank0
  8177  27A3  0361               	decf	_doubleTap_state,w	;volatile
  8178  27A4  1D03               	btfss	3,2
  8179  27A5  2FAE               	goto	l8077
  8180                           
  8181                           ;SwitchBypass.c: 108: setSwitchBypassState(currentBypassState);
  8182  27A6  0024               	movlb	4	; select bank4
  8183  27A7  0868               	movf	_currentBypassState^(0+512),w
  8184  27A8  0021               	movlb	1	; select bank1
  8185  27A9  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8186  27AA  01B6               	clrf	(setSwitchBypassState@f_state+1)^(0+128)
  8187  27AB  1BB5               	btfsc	setSwitchBypassState@f_state^(0+128),7
  8188  27AC  03B6               	decf	(setSwitchBypassState@f_state+1)^(0+128),f
  8189  27AD  2FDD               	goto	L1
  8190  27AE                     l8077:	
  8191                           ;SwitchBypass.c: 109: } else if (bypass_turning_on == 1) {
  8192                           
  8193  27AE  0024               	movlb	4	; select bank4
  8194  27AF  0348               	decf	_bypass_turning_on^(0+512),w
  8195  27B0  1D03               	btfss	3,2
  8196  27B1  2FCE               	goto	l8087
  8197                           
  8198                           ;SwitchBypass.c: 111: if (longBypass_save == 1) {
  8199  27B2  034A               	decf	_longBypass_save^(0+512),w
  8200  27B3  1D03               	btfss	3,2
  8201  27B4  2FC8               	goto	l8085
  8202                           
  8203                           ;SwitchBypass.c: 112: LATBbits.LATB2 = 0;
  8204  27B5  0022               	movlb	2	; select bank2
  8205  27B6  110D               	bcf	13,2	;volatile
  8206                           
  8207                           ;SwitchBypass.c: 113: setLongBypassState(1);
  8208  27B7  3001               	movlw	1
  8209  27B8  0021               	movlb	1	; select bank1
  8210  27B9  00A0               	movwf	setLongBypassState@f_state^(0+128)
  8211  27BA  3000               	movlw	0
  8212  27BB  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8213  27BC  31B2  22CF  31A7   	fcall	_setLongBypassState
  8214                           
  8215                           ;SwitchBypass.c: 114: setSwitchBypassRelays(1);
  8216  27BF  3001               	movlw	1
  8217  27C0  0021               	movlb	1	; select bank1
  8218  27C1  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8219  27C2  3000               	movlw	0
  8220  27C3  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8221  27C4  31B4  24BA  31A7   	fcall	_setSwitchBypassRelays
  8222                           
  8223                           ;SwitchBypass.c: 115: } else {
  8224  27C7  2FE0               	goto	l8095
  8225  27C8                     l8085:	
  8226                           
  8227                           ;SwitchBypass.c: 116: setSwitchBypassState(1);
  8228  27C8  3001               	movlw	1
  8229  27C9  0021               	movlb	1	; select bank1
  8230  27CA  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8231  27CB  3000               	movlw	0
  8232  27CC  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8233  27CD  2FDD               	goto	L1
  8234  27CE                     l8087:	
  8235                           ;SwitchBypass.c: 117: }
  8236                           ;SwitchBypass.c: 119: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8237                           
  8238  27CE  0024               	movlb	4	; select bank4
  8239  27CF  0354               	decf	_switchBypass_toggle^(0+512),w
  8240  27D0  1D03               	btfss	3,2
  8241  27D1  2FE0               	goto	l8095
  8242  27D2  0849               	movf	_longBypass_down^(0+512),w
  8243  27D3  1D03               	btfss	3,2
  8244  27D4  2FE0               	goto	l8095
  8245  27D5  0020               	movlb	0	; select bank0
  8246  27D6  0861               	movf	_doubleTap_state,w	;volatile
  8247  27D7  1D03               	btfss	3,2
  8248  27D8  2FE0               	goto	l8095
  8249                           
  8250                           ;SwitchBypass.c: 120: setSwitchBypassState(0);
  8251  27D9  3000               	movlw	0
  8252  27DA  0021               	movlb	1	; select bank1
  8253  27DB  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
  8254  27DC  00B6               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8255  27DD                     L1:	
  8256  27DD  31B2  2238  31A7   	fcall	_setSwitchBypassState
  8257  27E0                     l8095:	
  8258                           
  8259                           ;SwitchBypass.c: 121: }
  8260                           ;SwitchBypass.c: 123: longBypass_down = 0;
  8261  27E0  0024               	movlb	4	; select bank4
  8262  27E1  01C9               	clrf	_longBypass_down^(0+512)
  8263                           
  8264                           ;SwitchBypass.c: 124: if (longBypass_state == 0) {
  8265  27E2  0020               	movlb	0	; select bank0
  8266  27E3  0863               	movf	_longBypass_state,w	;volatile
  8267  27E4  1D03               	btfss	3,2
  8268  27E5  2FED               	goto	l8101
  8269                           
  8270                           ;SwitchBypass.c: 125: LATBbits.LATB2 = switchBypass_state;
  8271  27E6  0023               	movlb	3	; select bank3
  8272  27E7  0C6E               	rrf	_switchBypass_state^(0+384),w
  8273  27E8  0022               	movlb	2	; select bank2
  8274  27E9  1C03               	skipc
  8275  27EA  110D               	bcf	13,2	;volatile
  8276  27EB  1803               	skipnc
  8277  27EC  150D               	bsf	13,2	;volatile
  8278  27ED                     l8101:	
  8279                           
  8280                           ;SwitchBypass.c: 126: }
  8281                           ;SwitchBypass.c: 128: setDoublePressState(0);
  8282  27ED  3000               	movlw	0
  8283  27EE  0021               	movlb	1	; select bank1
  8284  27EF  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8285  27F0  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8286  27F1  31B7  27C2         	fcall	_setDoublePressState
  8287                           
  8288                           ;SwitchBypass.c: 129: longBypass_start = 0;
  8289  27F3  0024               	movlb	4	; select bank4
  8290  27F4  01CB               	clrf	_longBypass_start^(0+512)
  8291                           
  8292                           ;SwitchBypass.c: 130: bypass_turning_on = 0;
  8293  27F5  01C8               	clrf	_bypass_turning_on^(0+512)
  8294                           
  8295                           ;SwitchBypass.c: 131: switchBypass_toggle = 0;
  8296  27F6  01D4               	clrf	_switchBypass_toggle^(0+512)
  8297                           
  8298                           ;SwitchBypass.c: 132: switchBypass_up = 1;
  8299  27F7  01EE               	clrf	_switchBypass_up^(0+512)
  8300  27F8  0AEE               	incf	_switchBypass_up^(0+512),f
  8301                           
  8302                           ;SwitchBypass.c: 134: switchBypass_pressed = 25;
  8303  27F9  3019               	movlw	25
  8304  27FA  0021               	movlb	1	; select bank1
  8305  27FB  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8306  27FC  083C               	movf	??_updateSwitchBypass^(0+128),w
  8307  27FD  0024               	movlb	4	; select bank4
  8308  27FE  00D3               	movwf	_switchBypass_pressed^(0+512)
  8309  27FF  0008               	return
  8310  2800                     __end_of_updateSwitchBypass:	
  8311                           
  8312                           	psect	text8
  8313  32CF                     __ptext8:	
  8314 ;; *************** function _setLongBypassState *****************
  8315 ;; Defined at:
  8316 ;;		line 164 in file "SwitchBypass.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  f_state         2    0[BANK1 ] int 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      void 
  8323 ;; Registers used:
  8324 ;;		wreg, status,0
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8330 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8332 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8333 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8334 ;;Total ram usage:        4 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    5
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_main
  8341 ;;		_updateSwitchBypass
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           
  8346                           ;psect for function _setLongBypassState
  8347  32CF                     _setLongBypassState:	
  8348                           
  8349                           ;SwitchBypass.c: 165: if (longBypass_state == f_state) {return;}
  8350                           
  8351                           ;incstack = 0
  8352                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8353  32CF  0020               	movlb	0	; select bank0
  8354  32D0  0863               	movf	_longBypass_state,w	;volatile
  8355  32D1  0021               	movlb	1	; select bank1
  8356  32D2  00A2               	movwf	??_setLongBypassState^(0+128)
  8357  32D3  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8358  32D4  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8359  32D5  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8360  32D6  1D03               	skipz
  8361  32D7  2ADA               	goto	u6775
  8362  32D8  0820               	movf	setLongBypassState@f_state^(0+128),w
  8363  32D9  0622               	xorwf	??_setLongBypassState^(0+128),w
  8364  32DA                     u6775:	
  8365  32DA  1903               	btfsc	3,2
  8366  32DB  0008               	return
  8367                           
  8368                           ;SwitchBypass.c: 166: longBypass_state = f_state;
  8369  32DC  0820               	movf	setLongBypassState@f_state^(0+128),w
  8370  32DD  00A2               	movwf	??_setLongBypassState^(0+128)
  8371  32DE  0822               	movf	??_setLongBypassState^(0+128),w
  8372  32DF  0020               	movlb	0	; select bank0
  8373  32E0  00E3               	movwf	_longBypass_state	;volatile
  8374                           
  8375                           ;SwitchBypass.c: 167: LATBbits.LATB3 = f_state;
  8376  32E1  0021               	movlb	1	; select bank1
  8377  32E2  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8378  32E3  0022               	movlb	2	; select bank2
  8379  32E4  1C03               	skipc
  8380  32E5  118D               	bcf	13,3	;volatile
  8381  32E6  1803               	skipnc
  8382  32E7  158D               	bsf	13,3	;volatile
  8383                           
  8384                           ;SwitchBypass.c: 168: PORTCbits.RC4 = f_state;
  8385  32E8  0021               	movlb	1	; select bank1
  8386  32E9  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8387  32EA  0020               	movlb	0	; select bank0
  8388  32EB  1C03               	skipc
  8389  32EC  120E               	bcf	14,4	;volatile
  8390  32ED  1803               	skipnc
  8391  32EE  160E               	bsf	14,4	;volatile
  8392  32EF  0008               	return
  8393  32F0                     __end_of_setLongBypassState:	
  8394                           
  8395                           	psect	text9
  8396  37C2                     __ptext9:	
  8397 ;; *************** function _setDoublePressState *****************
  8398 ;; Defined at:
  8399 ;;		line 22 in file "preset_programming.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  f_state         2   24[BANK1 ] int 
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;		None
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      void 
  8406 ;; Registers used:
  8407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8413 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8415 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8416 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8417 ;;Total ram usage:        4 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    9
  8420 ;; This function calls:
  8421 ;;		_resetRingLEDs
  8422 ;;		_setPedalMode
  8423 ;;		_setPresetDisplay
  8424 ;;		_showSave
  8425 ;;		_wait_ms
  8426 ;; This function is called by:
  8427 ;;		_updateSwitchBypass
  8428 ;;		_updateSwitchTap
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _setDoublePressState
  8434  37C2                     _setDoublePressState:	
  8435                           
  8436                           ;preset_programming.c: 23: if (doubleTap_state == f_state) {return;}
  8437                           
  8438                           ;incstack = 0
  8439                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8440  37C2  0020               	movlb	0	; select bank0
  8441  37C3  0861               	movf	_doubleTap_state,w	;volatile
  8442  37C4  0021               	movlb	1	; select bank1
  8443  37C5  00BA               	movwf	??_setDoublePressState^(0+128)
  8444  37C6  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8445  37C7  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8446  37C8  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8447  37C9  1D03               	skipz
  8448  37CA  2FCD               	goto	u6895
  8449  37CB  0838               	movf	setDoublePressState@f_state^(0+128),w
  8450  37CC  063A               	xorwf	??_setDoublePressState^(0+128),w
  8451  37CD                     u6895:	
  8452  37CD  1903               	btfsc	3,2
  8453  37CE  0008               	return
  8454                           
  8455                           ;preset_programming.c: 24: doubleTap_state = f_state;
  8456  37CF  0838               	movf	setDoublePressState@f_state^(0+128),w
  8457  37D0  00BA               	movwf	??_setDoublePressState^(0+128)
  8458  37D1  083A               	movf	??_setDoublePressState^(0+128),w
  8459  37D2  0020               	movlb	0	; select bank0
  8460  37D3  00E1               	movwf	_doubleTap_state	;volatile
  8461                           
  8462                           ;preset_programming.c: 25: if (f_state == 1) {
  8463  37D4  0021               	movlb	1	; select bank1
  8464  37D5  0338               	decf	setDoublePressState@f_state^(0+128),w
  8465  37D6  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8466  37D7  1D03               	btfss	3,2
  8467  37D8  2FDC               	goto	l7541
  8468                           
  8469                           ;preset_programming.c: 26: LATBbits.LATB4 = 0;
  8470  37D9  0022               	movlb	2	; select bank2
  8471  37DA  120D               	bcf	13,4	;volatile
  8472                           
  8473                           ;preset_programming.c: 28: LATBbits.LATB5 = 0;
  8474  37DB  128D               	bcf	13,5	;volatile
  8475  37DC                     l7541:	
  8476                           
  8477                           ;preset_programming.c: 31: }
  8478                           ;preset_programming.c: 33: if (doubleTap_state == 1) {
  8479  37DC  0020               	movlb	0	; select bank0
  8480  37DD  0361               	decf	_doubleTap_state,w	;volatile
  8481  37DE  1D03               	btfss	3,2
  8482  37DF  2FF8               	goto	l7557
  8483                           
  8484                           ;preset_programming.c: 34: if (presetSaveMode == 0) {
  8485  37E0  0865               	movf	_presetSaveMode,w
  8486  37E1  1D03               	btfss	3,2
  8487  37E2  2FED               	goto	l7549
  8488                           
  8489                           ;preset_programming.c: 35: presetSaveMode = 1;
  8490  37E3  01E5               	clrf	_presetSaveMode
  8491  37E4  0AE5               	incf	_presetSaveMode,f
  8492                           
  8493                           ;preset_programming.c: 36: LATBbits.LATB1 = 0;
  8494  37E5  0022               	movlb	2	; select bank2
  8495  37E6  108D               	bcf	13,1	;volatile
  8496                           
  8497                           ;preset_programming.c: 37: setPresetDisplay(presetChannel);
  8498  37E7  0023               	movlb	3	; select bank3
  8499  37E8  086D               	movf	_presetChannel^(0+384),w
  8500  37E9  31B6  265A  31B7   	fcall	_setPresetDisplay
  8501                           
  8502                           ;preset_programming.c: 38: } else {
  8503  37EC  2FF8               	goto	l7557
  8504  37ED                     l7549:	
  8505                           
  8506                           ;preset_programming.c: 40: presetSaveMode = 0;
  8507  37ED  0020               	movlb	0	; select bank0
  8508  37EE  01E5               	clrf	_presetSaveMode
  8509                           
  8510                           ;preset_programming.c: 41: setPedalMode();
  8511  37EF  31B3  235A  31B7   	fcall	_setPedalMode
  8512                           
  8513                           ;preset_programming.c: 42: resetRingLEDs();
  8514  37F2  31B1  21B1  31B7   	fcall	_resetRingLEDs
  8515                           
  8516                           ;preset_programming.c: 43: showSave();
  8517  37F5  31B1  213C  31B7   	fcall	_showSave
  8518  37F8                     l7557:	
  8519                           
  8520                           ;preset_programming.c: 45: }
  8521                           ;preset_programming.c: 46: }
  8522                           ;preset_programming.c: 48: wait_ms(20);
  8523  37F8  3014               	movlw	20
  8524  37F9  0021               	movlb	1	; select bank1
  8525  37FA  00AC               	movwf	wait_ms@timeSec^(0+128)
  8526  37FB  3000               	movlw	0
  8527  37FC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8528  37FD  31B5  2549         	fcall	_wait_ms
  8529  37FF  0008               	return
  8530  3800                     __end_of_setDoublePressState:	
  8531                           
  8532                           	psect	text10
  8533  313C                     __ptext10:	
  8534 ;; *************** function _showSave *****************
  8535 ;; Defined at:
  8536 ;;		line 114 in file "LEDs.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;		None
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8552 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8553 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8554 ;;Total ram usage:        1 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    8
  8557 ;; This function calls:
  8558 ;;		_ring_tactiles
  8559 ;;		_solidring_tactiles
  8560 ;; This function is called by:
  8561 ;;		_setDoublePressState
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function _showSave
  8567  313C                     _showSave:	
  8568                           
  8569                           ;LEDs.c: 115: suspend_blink = 1;
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8573  313C  3001               	movlw	1
  8574  313D  0021               	movlb	1	; select bank1
  8575  313E  00B7               	movwf	??_showSave^(0+128)
  8576  313F  0837               	movf	??_showSave^(0+128),w
  8577  3140  0022               	movlb	2	; select bank2
  8578  3141  00EF               	movwf	_suspend_blink^(0+256)	;volatile
  8579                           
  8580                           ;LEDs.c: 116: ring_tactiles();
  8581  3142  31AB  2303  31B1   	fcall	_ring_tactiles
  8582                           
  8583                           ;LEDs.c: 117: ring_tactiles();
  8584  3145  31AB  2303  31B1   	fcall	_ring_tactiles
  8585                           
  8586                           ;LEDs.c: 118: solidring_tactiles();
  8587  3148  31A8  2044  31B1   	fcall	_solidring_tactiles
  8588                           
  8589                           ;LEDs.c: 119: solidring_tactiles();
  8590  314B  31A8  2044         	fcall	_solidring_tactiles
  8591                           
  8592                           ;LEDs.c: 120: suspend_blink = 0;
  8593  314D  0022               	movlb	2	; select bank2
  8594  314E  01EF               	clrf	_suspend_blink^(0+256)	;volatile
  8595  314F  0008               	return
  8596  3150                     __end_of_showSave:	
  8597                           
  8598                           	psect	text11
  8599  2844                     __ptext11:	
  8600 ;; *************** function _solidring_tactiles *****************
  8601 ;; Defined at:
  8602 ;;		line 210 in file "LEDs.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      void 
  8609 ;; Registers used:
  8610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8617 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8618 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8619 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8620 ;;Total ram usage:        3 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    7
  8623 ;; This function calls:
  8624 ;;		_set_leds_bottom
  8625 ;;		_set_leds_top
  8626 ;;		_wait_ms
  8627 ;; This function is called by:
  8628 ;;		_showSave
  8629 ;;		_showBootSequence
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _solidring_tactiles
  8635  2844                     _solidring_tactiles:	
  8636                           
  8637                           ;LEDs.c: 211: uint8_t ring_delay = 30;
  8638                           
  8639                           ;incstack = 0
  8640                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8641  2844  301E               	movlw	30
  8642  2845  0021               	movlb	1	; select bank1
  8643  2846  00B2               	movwf	??_solidring_tactiles^(0+128)
  8644  2847  0832               	movf	??_solidring_tactiles^(0+128),w
  8645  2848  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8646                           
  8647                           ;LEDs.c: 212: set_leds_top(100, 1);
  8648  2849  3064               	movlw	100
  8649  284A  00A0               	movwf	set_leds_top@x^(0+128)
  8650  284B  3000               	movlw	0
  8651  284C  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8652  284D  3001               	movlw	1
  8653  284E  00A2               	movwf	set_leds_top@ledState^(0+128)
  8654  284F  3000               	movlw	0
  8655  2850  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8656  2851  31AC  2499  31A8   	fcall	_set_leds_top
  8657                           
  8658                           ;LEDs.c: 213: set_leds_bottom(100);
  8659  2854  3064               	movlw	100
  8660  2855  0021               	movlb	1	; select bank1
  8661  2856  00A0               	movwf	set_leds_bottom@x^(0+128)
  8662  2857  3000               	movlw	0
  8663  2858  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8664  2859  31B6  2694  31A8   	fcall	_set_leds_bottom
  8665                           
  8666                           ;LEDs.c: 214: wait_ms(ring_delay);
  8667  285C  0021               	movlb	1	; select bank1
  8668  285D  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8669  285E  00B2               	movwf	??_solidring_tactiles^(0+128)
  8670  285F  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8671  2860  0832               	movf	??_solidring_tactiles^(0+128),w
  8672  2861  00AC               	movwf	wait_ms@timeSec^(0+128)
  8673  2862  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8674  2863  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8675  2864  31B5  2549  31A8   	fcall	_wait_ms
  8676                           
  8677                           ;LEDs.c: 216: set_leds_top(0, 1);
  8678  2867  3000               	movlw	0
  8679  2868  0021               	movlb	1	; select bank1
  8680  2869  00A0               	movwf	set_leds_top@x^(0+128)
  8681  286A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8682  286B  3001               	movlw	1
  8683  286C  00A2               	movwf	set_leds_top@ledState^(0+128)
  8684  286D  3000               	movlw	0
  8685  286E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8686  286F  31AC  2499  31A8   	fcall	_set_leds_top
  8687                           
  8688                           ;LEDs.c: 217: set_leds_bottom(0);
  8689  2872  3000               	movlw	0
  8690  2873  0021               	movlb	1	; select bank1
  8691  2874  00A0               	movwf	set_leds_bottom@x^(0+128)
  8692  2875  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8693  2876  31B6  2694  31A8   	fcall	_set_leds_bottom
  8694                           
  8695                           ;LEDs.c: 218: wait_ms(ring_delay);
  8696  2879  0021               	movlb	1	; select bank1
  8697  287A  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8698  287B  00B2               	movwf	??_solidring_tactiles^(0+128)
  8699  287C  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8700  287D  0832               	movf	??_solidring_tactiles^(0+128),w
  8701  287E  00AC               	movwf	wait_ms@timeSec^(0+128)
  8702  287F  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8703  2880  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8704  2881  31B5  2549         	fcall	_wait_ms
  8705  2883  0008               	return
  8706  2884                     __end_of_solidring_tactiles:	
  8707                           
  8708                           	psect	text12
  8709  2B03                     __ptext12:	
  8710 ;; *************** function _ring_tactiles *****************
  8711 ;; Defined at:
  8712 ;;		line 198 in file "LEDs.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;		None
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  iLed            2   21[BANK1 ] int 
  8717 ;;  iLed            2   19[BANK1 ] int 
  8718 ;; Return value:  Size  Location     Type
  8719 ;;                  1    wreg      void 
  8720 ;; Registers used:
  8721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8722 ;; Tracked objects:
  8723 ;;		On entry : 0/0
  8724 ;;		On exit  : 0/0
  8725 ;;		Unchanged: 0/0
  8726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8728 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8729 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8730 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8731 ;;Total ram usage:        5 bytes
  8732 ;; Hardware stack levels used:    1
  8733 ;; Hardware stack levels required when called:    7
  8734 ;; This function calls:
  8735 ;;		_set_leds_bottom
  8736 ;;		_set_leds_top
  8737 ;;		_wait_ms
  8738 ;; This function is called by:
  8739 ;;		_showSave
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function _ring_tactiles
  8745  2B03                     _ring_tactiles:	
  8746                           
  8747                           ;LEDs.c: 199: for (int iLed = 1; iLed < 7; iLed++) {
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8751  2B03  3001               	movlw	1
  8752  2B04  0021               	movlb	1	; select bank1
  8753  2B05  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8754  2B06  3000               	movlw	0
  8755  2B07  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8756  2B08  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8757  2B09  3A80               	xorlw	128
  8758  2B0A  00B2               	movwf	??_ring_tactiles^(0+128)
  8759  2B0B  3080               	movlw	128
  8760  2B0C  0232               	subwf	??_ring_tactiles^(0+128),w
  8761  2B0D  1D03               	skipz
  8762  2B0E  2B11               	goto	u6105
  8763  2B0F  3007               	movlw	7
  8764  2B10  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8765  2B11                     u6105:	
  8766  2B11  1803               	btfsc	3,0
  8767  2B12  2B37               	goto	l6881
  8768  2B13                     l6873:	
  8769                           
  8770                           ;LEDs.c: 200: set_leds_top(iLed, 1);
  8771  2B13  0021               	movlb	1	; select bank1
  8772  2B14  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8773  2B15  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8774  2B16  0833               	movf	ring_tactiles@iLed^(0+128),w
  8775  2B17  00A0               	movwf	set_leds_top@x^(0+128)
  8776  2B18  3001               	movlw	1
  8777  2B19  00A2               	movwf	set_leds_top@ledState^(0+128)
  8778  2B1A  3000               	movlw	0
  8779  2B1B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8780  2B1C  31AC  2499  31AB   	fcall	_set_leds_top
  8781                           
  8782                           ;LEDs.c: 201: wait_ms(5);
  8783  2B1F  3005               	movlw	5
  8784  2B20  0021               	movlb	1	; select bank1
  8785  2B21  00AC               	movwf	wait_ms@timeSec^(0+128)
  8786  2B22  3000               	movlw	0
  8787  2B23  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8788  2B24  31B5  2549  31AB   	fcall	_wait_ms
  8789  2B27  3001               	movlw	1
  8790  2B28  0021               	movlb	1	; select bank1
  8791  2B29  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8792  2B2A  3000               	movlw	0
  8793  2B2B  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8794  2B2C  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8795  2B2D  3A80               	xorlw	128
  8796  2B2E  00B2               	movwf	??_ring_tactiles^(0+128)
  8797  2B2F  3080               	movlw	128
  8798  2B30  0232               	subwf	??_ring_tactiles^(0+128),w
  8799  2B31  1D03               	skipz
  8800  2B32  2B35               	goto	u6115
  8801  2B33  3007               	movlw	7
  8802  2B34  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8803  2B35                     u6115:	
  8804  2B35  1C03               	skipc
  8805  2B36  2B13               	goto	l6873
  8806  2B37                     l6881:	
  8807                           
  8808                           ;LEDs.c: 202: }
  8809                           ;LEDs.c: 203: for (int iLed = 5; iLed > -1; iLed--) {
  8810  2B37  3005               	movlw	5
  8811  2B38  0021               	movlb	1	; select bank1
  8812  2B39  00B5               	movwf	ring_tactiles@iLed_1609^(0+128)
  8813  2B3A  3000               	movlw	0
  8814  2B3B  00B6               	movwf	(ring_tactiles@iLed_1609^(0+128)+1)
  8815  2B3C                     L2:	
  8816  2B3C  1BB6               	btfsc	(ring_tactiles@iLed_1609+1)^(0+128),7
  8817  2B3D  0008               	return
  8818                           
  8819                           ;LEDs.c: 204: set_leds_bottom(iLed);
  8820  2B3E  0836               	movf	(ring_tactiles@iLed_1609+1)^(0+128),w
  8821  2B3F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8822  2B40  0835               	movf	ring_tactiles@iLed_1609^(0+128),w
  8823  2B41  00A0               	movwf	set_leds_bottom@x^(0+128)
  8824  2B42  31B6  2694  31AB   	fcall	_set_leds_bottom
  8825                           
  8826                           ;LEDs.c: 205: wait_ms(5);
  8827  2B45  3005               	movlw	5
  8828  2B46  0021               	movlb	1	; select bank1
  8829  2B47  00AC               	movwf	wait_ms@timeSec^(0+128)
  8830  2B48  3000               	movlw	0
  8831  2B49  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8832  2B4A  31B5  2549  31AB   	fcall	_wait_ms
  8833  2B4D  30FF               	movlw	255
  8834  2B4E  0021               	movlb	1	; select bank1
  8835  2B4F  07B5               	addwf	ring_tactiles@iLed_1609^(0+128),f
  8836  2B50  30FF               	movlw	255
  8837  2B51  3DB6               	addwfc	(ring_tactiles@iLed_1609+1)^(0+128),f
  8838  2B52  2B3C               	goto	L2
  8839  2B53                     __end_of_ring_tactiles:	
  8840                           
  8841                           	psect	text13
  8842  335A                     __ptext13:	
  8843 ;; *************** function _setPedalMode *****************
  8844 ;; Defined at:
  8845 ;;		line 141 in file "tactiles.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      void 
  8852 ;; Registers used:
  8853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8863 ;;Total ram usage:        0 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    7
  8866 ;; This function calls:
  8867 ;;		_resetRingLEDs
  8868 ;;		_setExpressionDisplay
  8869 ;;		_setPresetDisplay
  8870 ;;		_updatePedalMode
  8871 ;; This function is called by:
  8872 ;;		_update_mode
  8873 ;;		_setDoublePressState
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           
  8878                           ;psect for function _setPedalMode
  8879  335A                     _setPedalMode:	
  8880                           
  8881                           ;tactiles.c: 142: switch (mode2_state) {
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8885  335A  2B74               	goto	l7111
  8886  335B                     l1156:	
  8887                           ;tactiles.c: 143: case 0:
  8888                           
  8889                           
  8890                           ;tactiles.c: 144: LATBbits.LATB1 = 0;
  8891  335B  0022               	movlb	2	; select bank2
  8892  335C  108D               	bcf	13,1	;volatile
  8893                           
  8894                           ;tactiles.c: 145: LATBbits.LATB0 = 0;
  8895  335D  100D               	bcf	13,0	;volatile
  8896                           
  8897                           ;tactiles.c: 146: resetRingLEDs();
  8898  335E  31B1  21B1  31B3   	fcall	_resetRingLEDs
  8899                           
  8900                           ;tactiles.c: 147: break;
  8901  3361  2B80               	goto	l7113
  8902  3362                     l1158:	
  8903                           ;tactiles.c: 148: case 1:
  8904                           
  8905                           
  8906                           ;tactiles.c: 149: LATBbits.LATB1 = 0;
  8907  3362  0022               	movlb	2	; select bank2
  8908  3363  108D               	bcf	13,1	;volatile
  8909                           
  8910                           ;tactiles.c: 150: LATBbits.LATB0 = 1;
  8911  3364  140D               	bsf	13,0	;volatile
  8912                           
  8913                           ;tactiles.c: 151: setPresetDisplay(presetChannel);
  8914  3365  0023               	movlb	3	; select bank3
  8915  3366  086D               	movf	_presetChannel^(0+384),w
  8916  3367  31B6  265A  31B3   	fcall	_setPresetDisplay
  8917                           
  8918                           ;tactiles.c: 152: break;
  8919  336A  2B80               	goto	l7113
  8920  336B                     l1159:	
  8921                           ;tactiles.c: 153: case 2:
  8922                           
  8923                           
  8924                           ;tactiles.c: 154: LATBbits.LATB1 = 1;
  8925  336B  0022               	movlb	2	; select bank2
  8926  336C  148D               	bsf	13,1	;volatile
  8927                           
  8928                           ;tactiles.c: 155: LATBbits.LATB0 = 0;
  8929  336D  100D               	bcf	13,0	;volatile
  8930                           
  8931                           ;tactiles.c: 156: setExpressionDisplay(expressionChannel);
  8932  336E  0024               	movlb	4	; select bank4
  8933  336F  086B               	movf	_expressionChannel^(0+512),w
  8934  3370  31B1  2167  31B3   	fcall	_setExpressionDisplay
  8935                           
  8936                           ;tactiles.c: 158: }
  8937                           
  8938                           ;tactiles.c: 157: break;
  8939  3373  2B80               	goto	l7113
  8940  3374                     l7111:	
  8941  3374  0020               	movlb	0	; select bank0
  8942  3375  0864               	movf	_mode2_state,w
  8943                           
  8944                           ; Switch size 1, requested type "space"
  8945                           ; Number of cases is 3, Range of values is 0 to 2
  8946                           ; switch strategies available:
  8947                           ; Name         Instructions Cycles
  8948                           ; simple_byte           10     6 (average)
  8949                           ; direct_byte           12     6 (fixed)
  8950                           ; jumptable            260     6 (fixed)
  8951                           ;	Chosen strategy is simple_byte
  8952  3376  3A00               	xorlw	0	; case 0
  8953  3377  1903               	skipnz
  8954  3378  2B5B               	goto	l1156
  8955  3379  3A01               	xorlw	1	; case 1
  8956  337A  1903               	skipnz
  8957  337B  2B62               	goto	l1158
  8958  337C  3A03               	xorlw	3	; case 2
  8959  337D  1903               	skipnz
  8960  337E  2B6B               	goto	l1159
  8961  337F  2B80               	goto	l7113
  8962  3380                     l7113:	
  8963                           
  8964                           ;tactiles.c: 159: updatePedalMode();
  8965  3380  31BF  27AE         	fcall	_updatePedalMode
  8966  3382  0008               	return
  8967  3383                     __end_of_setPedalMode:	
  8968                           
  8969                           	psect	text14
  8970  3FAE                     __ptext14:	
  8971 ;; *************** function _updatePedalMode *****************
  8972 ;; Defined at:
  8973 ;;		line 240 in file "state_manager.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      void 
  8980 ;; Registers used:
  8981 ;;		wreg
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8989 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8990 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8991 ;;Total ram usage:        1 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    5
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_setPedalMode
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function _updatePedalMode
  9003  3FAE                     _updatePedalMode:	
  9004                           
  9005                           ;state_manager.c: 241: pedalState.pedalMode = mode2_state;
  9006                           
  9007                           ;incstack = 0
  9008                           ; Regs used in _updatePedalMode: [wreg]
  9009  3FAE  0020               	movlb	0	; select bank0
  9010  3FAF  0864               	movf	_mode2_state,w
  9011  3FB0  0021               	movlb	1	; select bank1
  9012  3FB1  00A0               	movwf	??_updatePedalMode^(0+128)
  9013  3FB2  0820               	movf	??_updatePedalMode^(0+128),w
  9014  3FB3  0025               	movlb	5	; select bank5
  9015  3FB4  00C2               	movwf	(_pedalState^(0+640)+14)
  9016  3FB5  0008               	return
  9017  3FB6                     __end_of_updatePedalMode:	
  9018                           
  9019                           	psect	text15
  9020  365A                     __ptext15:	
  9021 ;; *************** function _setPresetDisplay *****************
  9022 ;; Defined at:
  9023 ;;		line 52 in file "preset_programming.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  ledChannel      1    wreg     unsigned char 
  9026 ;; Auto vars:     Size  Location     Type
  9027 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  1    wreg      void 
  9030 ;; Registers used:
  9031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9038 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9039 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9040 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9041 ;;Total ram usage:        3 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; Hardware stack levels required when called:    6
  9044 ;; This function calls:
  9045 ;;		_set_leds_bottom
  9046 ;;		_set_leds_top
  9047 ;; This function is called by:
  9048 ;;		_setPedalMode
  9049 ;;		_update_selectMode
  9050 ;;		_setDoublePressState
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           
  9055                           ;psect for function _setPresetDisplay
  9056  365A                     _setPresetDisplay:	
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9060                           ;setPresetDisplay@ledChannel stored from wreg
  9061  365A  0021               	movlb	1	; select bank1
  9062  365B  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  9063                           
  9064                           ;preset_programming.c: 53: if (ledChannel < 6) {
  9065  365C  3006               	movlw	6
  9066  365D  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  9067  365E  1803               	skipnc
  9068  365F  2E76               	goto	l6901
  9069                           
  9070                           ;preset_programming.c: 54: set_leds_top(ledChannel, 1);
  9071  3660  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9072  3661  00A4               	movwf	??_setPresetDisplay^(0+128)
  9073  3662  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9074  3663  0824               	movf	??_setPresetDisplay^(0+128),w
  9075  3664  00A0               	movwf	set_leds_top@x^(0+128)
  9076  3665  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9077  3666  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9078  3667  3001               	movlw	1
  9079  3668  00A2               	movwf	set_leds_top@ledState^(0+128)
  9080  3669  3000               	movlw	0
  9081  366A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9082  366B  31AC  2499  31B6   	fcall	_set_leds_top
  9083                           
  9084                           ;preset_programming.c: 55: set_leds_bottom(6);
  9085  366E  3006               	movlw	6
  9086  366F  0021               	movlb	1	; select bank1
  9087  3670  00A0               	movwf	set_leds_bottom@x^(0+128)
  9088  3671  3000               	movlw	0
  9089  3672  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9090  3673  31B6  2694         	fcall	_set_leds_bottom
  9091                           
  9092                           ;preset_programming.c: 56: } else {
  9093  3675  0008               	return
  9094  3676                     l6901:	
  9095                           
  9096                           ;preset_programming.c: 57: set_leds_top(6, 1);
  9097  3676  3006               	movlw	6
  9098  3677  0021               	movlb	1	; select bank1
  9099  3678  00A0               	movwf	set_leds_top@x^(0+128)
  9100  3679  3000               	movlw	0
  9101  367A  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9102  367B  3001               	movlw	1
  9103  367C  00A2               	movwf	set_leds_top@ledState^(0+128)
  9104  367D  3000               	movlw	0
  9105  367E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9106  367F  31AC  2499  31B6   	fcall	_set_leds_top
  9107                           
  9108                           ;preset_programming.c: 58: set_leds_bottom(10 - ledChannel + 1);
  9109  3682  0021               	movlb	1	; select bank1
  9110  3683  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9111  3684  00A4               	movwf	??_setPresetDisplay^(0+128)
  9112  3685  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9113  3686  09A4               	comf	??_setPresetDisplay^(0+128),f
  9114  3687  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9115  3688  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9116  3689  1903               	skipnz
  9117  368A  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9118  368B  0824               	movf	??_setPresetDisplay^(0+128),w
  9119  368C  3E0B               	addlw	11
  9120  368D  00A0               	movwf	set_leds_bottom@x^(0+128)
  9121  368E  3000               	movlw	0
  9122  368F  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9123  3690  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9124  3691  31B6  2694         	fcall	_set_leds_bottom
  9125  3693  0008               	return
  9126  3694                     __end_of_setPresetDisplay:	
  9127                           
  9128                           	psect	text16
  9129  3167                     __ptext16:	
  9130 ;; *************** function _setExpressionDisplay *****************
  9131 ;; Defined at:
  9132 ;;		line 67 in file "preset_programming.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  ledChannel      1    wreg     unsigned char 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9147 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9148 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9149 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9150 ;;Total ram usage:        3 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    6
  9153 ;; This function calls:
  9154 ;;		_set_leds_bottom
  9155 ;;		_set_leds_top
  9156 ;; This function is called by:
  9157 ;;		_setPedalMode
  9158 ;;		_update_selectMode
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           
  9163                           ;psect for function _setExpressionDisplay
  9164  3167                     _setExpressionDisplay:	
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9168                           ;setExpressionDisplay@ledChannel stored from wreg
  9169  3167  0021               	movlb	1	; select bank1
  9170  3168  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9171                           
  9172                           ;preset_programming.c: 68: set_leds_top(ledChannel, 1);
  9173  3169  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9174  316A  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9175  316B  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9176  316C  0824               	movf	??_setExpressionDisplay^(0+128),w
  9177  316D  00A0               	movwf	set_leds_top@x^(0+128)
  9178  316E  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9179  316F  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9180  3170  3001               	movlw	1
  9181  3171  00A2               	movwf	set_leds_top@ledState^(0+128)
  9182  3172  3000               	movlw	0
  9183  3173  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9184  3174  31AC  2499  31B1   	fcall	_set_leds_top
  9185                           
  9186                           ;preset_programming.c: 69: set_leds_bottom(6);
  9187  3177  3006               	movlw	6
  9188  3178  0021               	movlb	1	; select bank1
  9189  3179  00A0               	movwf	set_leds_bottom@x^(0+128)
  9190  317A  3000               	movlw	0
  9191  317B  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9192  317C  31B6  2694         	fcall	_set_leds_bottom
  9193  317E  0008               	return
  9194  317F                     __end_of_setExpressionDisplay:	
  9195                           
  9196                           	psect	text17
  9197  31B1                     __ptext17:	
  9198 ;; *************** function _resetRingLEDs *****************
  9199 ;; Defined at:
  9200 ;;		line 62 in file "preset_programming.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      void 
  9207 ;; Registers used:
  9208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9218 ;;Total ram usage:        0 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    6
  9221 ;; This function calls:
  9222 ;;		_set_leds_bottom
  9223 ;;		_set_leds_top
  9224 ;; This function is called by:
  9225 ;;		_update_mode
  9226 ;;		_setPedalMode
  9227 ;;		_setDoublePressState
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _resetRingLEDs
  9233  31B1                     _resetRingLEDs:	
  9234                           
  9235                           ;preset_programming.c: 63: set_leds_top(top_push_state, 1);
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9239  31B1  0020               	movlb	0	; select bank0
  9240  31B2  086D               	movf	_top_push_state+1,w
  9241  31B3  0021               	movlb	1	; select bank1
  9242  31B4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9243  31B5  0020               	movlb	0	; select bank0
  9244  31B6  086C               	movf	_top_push_state,w
  9245  31B7  0021               	movlb	1	; select bank1
  9246  31B8  00A0               	movwf	set_leds_top@x^(0+128)
  9247  31B9  3001               	movlw	1
  9248  31BA  00A2               	movwf	set_leds_top@ledState^(0+128)
  9249  31BB  3000               	movlw	0
  9250  31BC  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9251  31BD  31AC  2499  31B1   	fcall	_set_leds_top
  9252                           
  9253                           ;preset_programming.c: 64: set_leds_bottom(bottom_push_state);
  9254  31C0  0023               	movlb	3	; select bank3
  9255  31C1  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9256  31C2  0021               	movlb	1	; select bank1
  9257  31C3  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9258  31C4  0023               	movlb	3	; select bank3
  9259  31C5  0862               	movf	_bottom_push_state^(0+384),w
  9260  31C6  0021               	movlb	1	; select bank1
  9261  31C7  00A0               	movwf	set_leds_bottom@x^(0+128)
  9262  31C8  31B6  2694         	fcall	_set_leds_bottom
  9263  31CA  0008               	return
  9264  31CB                     __end_of_resetRingLEDs:	
  9265                           
  9266                           	psect	text18
  9267  03CF                     __ptext18:	
  9268 ;; *************** function _updateModulationArray *****************
  9269 ;; Defined at:
  9270 ;;		line 46 in file "modulation.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  thisAngle       2   57[BANK2 ] int 
  9275 ;;  iAngle          1   54[BANK2 ] unsigned char 
  9276 ;;  iAngle          1   59[BANK2 ] unsigned char 
  9277 ;;  subDiv          2   55[BANK2 ] int 
  9278 ;;  angleFactor     2   52[BANK2 ] int 
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      void 
  9281 ;; Registers used:
  9282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9289 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9290 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9291 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9292 ;;Total ram usage:       12 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; Hardware stack levels required when called:    9
  9295 ;; This function calls:
  9296 ;;		___awdiv
  9297 ;;		___awtoft
  9298 ;;		___wmul
  9299 ;;		_getModulationSubdivision
  9300 ;;		_modCos
  9301 ;;		_modSaw
  9302 ;;		_modSawRev
  9303 ;;		_modSquare
  9304 ;;		_modTri
  9305 ;; This function is called by:
  9306 ;;		_main
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           
  9311                           ;psect for function _updateModulationArray
  9312  03CF                     _updateModulationArray:	
  9313                           
  9314                           ;modulation.c: 47: int subDiv = getModulationSubdivision();
  9315                           
  9316                           ;incstack = 0
  9317                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9318  03CF  31B4  248B  3183   	fcall	_getModulationSubdivision
  9319  03D2  0021               	movlb	1	; select bank1
  9320  03D3  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9321  03D4  0022               	movlb	2	; select bank2
  9322  03D5  00D8               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9323  03D6  0021               	movlb	1	; select bank1
  9324  03D7  0820               	movf	?_getModulationSubdivision^(0+128),w
  9325  03D8  0022               	movlb	2	; select bank2
  9326  03D9  00D7               	movwf	updateModulationArray@subDiv^(0+256)
  9327                           
  9328                           ;modulation.c: 48: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9329  03DA  307A               	movlw	122
  9330  03DB  0086               	movwf	6
  9331  03DC  3024               	movlw	36
  9332  03DD  0087               	movwf	7
  9333  03DE  3F40               	moviw [0]fsr1
  9334  03DF  00D0               	movwf	??_updateModulationArray^(0+256)
  9335  03E0  3F41               	moviw [1]fsr1
  9336  03E1  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9337  03E2  0023               	movlb	3	; select bank3
  9338  03E3  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9339  03E4  0022               	movlb	2	; select bank2
  9340  03E5  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9341  03E6  1D03               	skipz
  9342  03E7  2BEC               	goto	u8345
  9343  03E8  0023               	movlb	3	; select bank3
  9344  03E9  0862               	movf	_bottom_push_state^(0+384),w
  9345  03EA  0022               	movlb	2	; select bank2
  9346  03EB  0650               	xorwf	??_updateModulationArray^(0+256),w
  9347  03EC                     u8345:	
  9348  03EC  1D03               	skipz
  9349  03ED  2C12               	goto	l8331
  9350  03EE  307C               	movlw	124
  9351  03EF  0086               	movwf	6
  9352  03F0  3024               	movlw	36
  9353  03F1  0087               	movwf	7
  9354  03F2  3F40               	moviw [0]fsr1
  9355  03F3  00D0               	movwf	??_updateModulationArray^(0+256)
  9356  03F4  3F41               	moviw [1]fsr1
  9357  03F5  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9358  03F6  0023               	movlb	3	; select bank3
  9359  03F7  086B               	movf	(_symmetry+1)^(0+384),w
  9360  03F8  0022               	movlb	2	; select bank2
  9361  03F9  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9362  03FA  1D03               	skipz
  9363  03FB  2C00               	goto	u8355
  9364  03FC  0023               	movlb	3	; select bank3
  9365  03FD  086A               	movf	_symmetry^(0+384),w
  9366  03FE  0022               	movlb	2	; select bank2
  9367  03FF  0650               	xorwf	??_updateModulationArray^(0+256),w
  9368  0400                     u8355:	
  9369  0400  1D03               	skipz
  9370  0401  2C12               	goto	l8331
  9371  0402  307E               	movlw	126
  9372  0403  0086               	movwf	6
  9373  0404  3024               	movlw	36
  9374  0405  0087               	movwf	7
  9375  0406  3F40               	moviw [0]fsr1
  9376  0407  00D0               	movwf	??_updateModulationArray^(0+256)
  9377  0408  3F41               	moviw [1]fsr1
  9378  0409  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9379  040A  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9380  040B  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9381  040C  1D03               	skipz
  9382  040D  2C10               	goto	u8365
  9383  040E  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9384  040F  0650               	xorwf	??_updateModulationArray^(0+256),w
  9385  0410                     u8365:	
  9386  0410  1903               	btfsc	3,2
  9387  0411  0008               	return
  9388  0412                     l8331:	
  9389                           ;modulation.c: 50: return;
  9390                           
  9391                           
  9392                           ;modulation.c: 51: }
  9393                           ;modulation.c: 53: int angleFactor = 360/subDiv;
  9394  0412  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9395  0413  0021               	movlb	1	; select bank1
  9396  0414  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9397  0415  0022               	movlb	2	; select bank2
  9398  0416  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9399  0417  0021               	movlb	1	; select bank1
  9400  0418  00A0               	movwf	___awdiv@divisor^(0+128)
  9401  0419  3068               	movlw	104
  9402  041A  00A2               	movwf	___awdiv@dividend^(0+128)
  9403  041B  3001               	movlw	1
  9404  041C  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9405  041D  31AC  2447  3183   	fcall	___awdiv
  9406  0420  0021               	movlb	1	; select bank1
  9407  0421  0821               	movf	(?___awdiv+1)^(0+128),w
  9408  0422  0022               	movlb	2	; select bank2
  9409  0423  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9410  0424  0021               	movlb	1	; select bank1
  9411  0425  0820               	movf	?___awdiv^(0+128),w
  9412  0426  0022               	movlb	2	; select bank2
  9413  0427  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9414                           
  9415                           ;modulation.c: 54: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9416  0428  01DB               	clrf	updateModulationArray@iAngle^(0+256)
  9417  0429                     l8355:	
  9418  0429  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9419  042A  3A80               	xorlw	128
  9420  042B  3C80               	sublw	128
  9421  042C  1D03               	skipz
  9422  042D  2C30               	goto	u8375
  9423  042E  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9424  042F  025B               	subwf	updateModulationArray@iAngle^(0+256),w
  9425  0430                     u8375:	
  9426  0430  1803               	btfsc	3,0
  9427  0431  2DD6               	goto	l8357
  9428                           
  9429                           ;modulation.c: 55: int thisAngle = angleFactor * iAngle;
  9430  0432  0022               	movlb	2	; select bank2
  9431  0433  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9432  0434  00D0               	movwf	??_updateModulationArray^(0+256)
  9433  0435  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9434  0436  0850               	movf	??_updateModulationArray^(0+256),w
  9435  0437  00AE               	movwf	___wmul@multiplier^(0+256)
  9436  0438  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9437  0439  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9438  043A  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9439  043B  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9440  043C  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9441  043D  00B0               	movwf	___wmul@multiplicand^(0+256)
  9442  043E  31B2  221C  3183   	fcall	___wmul
  9443  0441  0022               	movlb	2	; select bank2
  9444  0442  082F               	movf	(?___wmul+1)^(0+256),w
  9445  0443  00DA               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9446  0444  082E               	movf	?___wmul^(0+256),w
  9447  0445  00D9               	movwf	updateModulationArray@thisAngle^(0+256)
  9448                           
  9449                           ;modulation.c: 56: switch (bottom_push_state) {
  9450  0446  2DB9               	goto	l8351
  9451  0447                     l8337:	
  9452                           ;modulation.c: 57: case 1:
  9453                           
  9454                           
  9455                           ;modulation.c: 58: modArray[iAngle] = modCos(thisAngle, symmetry);
  9456  0447  0022               	movlb	2	; select bank2
  9457  0448  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9458  0449  0021               	movlb	1	; select bank1
  9459  044A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9460  044B  0022               	movlb	2	; select bank2
  9461  044C  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9462  044D  0021               	movlb	1	; select bank1
  9463  044E  00A8               	movwf	___awtoft@c^(0+128)
  9464  044F  31B2  22F0  3183   	fcall	___awtoft
  9465  0452  0021               	movlb	1	; select bank1
  9466  0453  0828               	movf	?___awtoft^(0+128),w
  9467  0454  0022               	movlb	2	; select bank2
  9468  0455  00B4               	movwf	modCos@angle^(0+256)
  9469  0456  0021               	movlb	1	; select bank1
  9470  0457  0829               	movf	(?___awtoft+1)^(0+128),w
  9471  0458  0022               	movlb	2	; select bank2
  9472  0459  00B5               	movwf	(modCos@angle+1)^(0+256)
  9473  045A  0021               	movlb	1	; select bank1
  9474  045B  082A               	movf	(?___awtoft+2)^(0+128),w
  9475  045C  0022               	movlb	2	; select bank2
  9476  045D  00B6               	movwf	(modCos@angle+2)^(0+256)
  9477  045E  0023               	movlb	3	; select bank3
  9478  045F  086B               	movf	(_symmetry+1)^(0+384),w
  9479  0460  0021               	movlb	1	; select bank1
  9480  0461  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9481  0462  0023               	movlb	3	; select bank3
  9482  0463  086A               	movf	_symmetry^(0+384),w
  9483  0464  0021               	movlb	1	; select bank1
  9484  0465  00A8               	movwf	___awtoft@c^(0+128)
  9485  0466  31B2  22F0  3183   	fcall	___awtoft
  9486  0469  0021               	movlb	1	; select bank1
  9487  046A  0828               	movf	?___awtoft^(0+128),w
  9488  046B  0022               	movlb	2	; select bank2
  9489  046C  00B7               	movwf	modCos@inflection^(0+256)
  9490  046D  0021               	movlb	1	; select bank1
  9491  046E  0829               	movf	(?___awtoft+1)^(0+128),w
  9492  046F  0022               	movlb	2	; select bank2
  9493  0470  00B8               	movwf	(modCos@inflection+1)^(0+256)
  9494  0471  0021               	movlb	1	; select bank1
  9495  0472  082A               	movf	(?___awtoft+2)^(0+128),w
  9496  0473  0022               	movlb	2	; select bank2
  9497  0474  00B9               	movwf	(modCos@inflection+2)^(0+256)
  9498  0475  3190  20EC  3183   	fcall	_modCos
  9499  0478  0022               	movlb	2	; select bank2
  9500  0479  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9501  047A  00D0               	movwf	??_updateModulationArray^(0+256)
  9502  047B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9503  047C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9504  047D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9505  047E  308A               	movlw	138
  9506  047F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9507  0480  3023               	movlw	35
  9508  0481  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9509  0482  0850               	movf	??_updateModulationArray^(0+256),w
  9510  0483  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9511  0484  0086               	movwf	6
  9512  0485  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9513  0486  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9514  0487  0087               	movwf	7
  9515  0488  0834               	movf	?_modCos^(0+256),w
  9516  0489  3FC0               	movwi [0]fsr1
  9517  048A  0835               	movf	(?_modCos+1)^(0+256),w
  9518  048B  3FC1               	movwi [1]fsr1
  9519                           
  9520                           ;modulation.c: 59: break;
  9521  048C  2DD0               	goto	l8353
  9522  048D                     l8339:	
  9523                           ;modulation.c: 60: case 2:
  9524                           
  9525                           
  9526                           ;modulation.c: 61: modArray[iAngle] = modTri(thisAngle, symmetry);
  9527  048D  0022               	movlb	2	; select bank2
  9528  048E  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9529  048F  0021               	movlb	1	; select bank1
  9530  0490  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9531  0491  0022               	movlb	2	; select bank2
  9532  0492  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9533  0493  0021               	movlb	1	; select bank1
  9534  0494  00A8               	movwf	___awtoft@c^(0+128)
  9535  0495  31B2  22F0  3183   	fcall	___awtoft
  9536  0498  0021               	movlb	1	; select bank1
  9537  0499  0828               	movf	?___awtoft^(0+128),w
  9538  049A  0022               	movlb	2	; select bank2
  9539  049B  00AE               	movwf	modTri@angle^(0+256)
  9540  049C  0021               	movlb	1	; select bank1
  9541  049D  0829               	movf	(?___awtoft+1)^(0+128),w
  9542  049E  0022               	movlb	2	; select bank2
  9543  049F  00AF               	movwf	(modTri@angle+1)^(0+256)
  9544  04A0  0021               	movlb	1	; select bank1
  9545  04A1  082A               	movf	(?___awtoft+2)^(0+128),w
  9546  04A2  0022               	movlb	2	; select bank2
  9547  04A3  00B0               	movwf	(modTri@angle+2)^(0+256)
  9548  04A4  0023               	movlb	3	; select bank3
  9549  04A5  086B               	movf	(_symmetry+1)^(0+384),w
  9550  04A6  0021               	movlb	1	; select bank1
  9551  04A7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9552  04A8  0023               	movlb	3	; select bank3
  9553  04A9  086A               	movf	_symmetry^(0+384),w
  9554  04AA  0021               	movlb	1	; select bank1
  9555  04AB  00A8               	movwf	___awtoft@c^(0+128)
  9556  04AC  31B2  22F0  3183   	fcall	___awtoft
  9557  04AF  0021               	movlb	1	; select bank1
  9558  04B0  0828               	movf	?___awtoft^(0+128),w
  9559  04B1  0022               	movlb	2	; select bank2
  9560  04B2  00B1               	movwf	modTri@inflection^(0+256)
  9561  04B3  0021               	movlb	1	; select bank1
  9562  04B4  0829               	movf	(?___awtoft+1)^(0+128),w
  9563  04B5  0022               	movlb	2	; select bank2
  9564  04B6  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9565  04B7  0021               	movlb	1	; select bank1
  9566  04B8  082A               	movf	(?___awtoft+2)^(0+128),w
  9567  04B9  0022               	movlb	2	; select bank2
  9568  04BA  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9569  04BB  3186  2614  3183   	fcall	_modTri
  9570  04BE  0022               	movlb	2	; select bank2
  9571  04BF  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9572  04C0  00D0               	movwf	??_updateModulationArray^(0+256)
  9573  04C1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9574  04C2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9575  04C3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9576  04C4  308A               	movlw	138
  9577  04C5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9578  04C6  3023               	movlw	35
  9579  04C7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9580  04C8  0850               	movf	??_updateModulationArray^(0+256),w
  9581  04C9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9582  04CA  0086               	movwf	6
  9583  04CB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9584  04CC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9585  04CD  0087               	movwf	7
  9586  04CE  082E               	movf	?_modTri^(0+256),w
  9587  04CF  3FC0               	movwi [0]fsr1
  9588  04D0  082F               	movf	(?_modTri+1)^(0+256),w
  9589  04D1  3FC1               	movwi [1]fsr1
  9590                           
  9591                           ;modulation.c: 62: break;
  9592  04D2  2DD0               	goto	l8353
  9593  04D3                     l8341:	
  9594                           ;modulation.c: 63: case 3:
  9595                           
  9596                           
  9597                           ;modulation.c: 64: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9598  04D3  0022               	movlb	2	; select bank2
  9599  04D4  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9600  04D5  0021               	movlb	1	; select bank1
  9601  04D6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9602  04D7  0022               	movlb	2	; select bank2
  9603  04D8  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9604  04D9  0021               	movlb	1	; select bank1
  9605  04DA  00A8               	movwf	___awtoft@c^(0+128)
  9606  04DB  31B2  22F0  3183   	fcall	___awtoft
  9607  04DE  0021               	movlb	1	; select bank1
  9608  04DF  0828               	movf	?___awtoft^(0+128),w
  9609  04E0  0022               	movlb	2	; select bank2
  9610  04E1  00C8               	movwf	modSquare@angle^(0+256)
  9611  04E2  0021               	movlb	1	; select bank1
  9612  04E3  0829               	movf	(?___awtoft+1)^(0+128),w
  9613  04E4  0022               	movlb	2	; select bank2
  9614  04E5  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9615  04E6  0021               	movlb	1	; select bank1
  9616  04E7  082A               	movf	(?___awtoft+2)^(0+128),w
  9617  04E8  0022               	movlb	2	; select bank2
  9618  04E9  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9619  04EA  0023               	movlb	3	; select bank3
  9620  04EB  086B               	movf	(_symmetry+1)^(0+384),w
  9621  04EC  0021               	movlb	1	; select bank1
  9622  04ED  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9623  04EE  0023               	movlb	3	; select bank3
  9624  04EF  086A               	movf	_symmetry^(0+384),w
  9625  04F0  0021               	movlb	1	; select bank1
  9626  04F1  00A8               	movwf	___awtoft@c^(0+128)
  9627  04F2  31B2  22F0  3183   	fcall	___awtoft
  9628  04F5  0021               	movlb	1	; select bank1
  9629  04F6  0828               	movf	?___awtoft^(0+128),w
  9630  04F7  0022               	movlb	2	; select bank2
  9631  04F8  00CB               	movwf	modSquare@inflection^(0+256)
  9632  04F9  0021               	movlb	1	; select bank1
  9633  04FA  0829               	movf	(?___awtoft+1)^(0+128),w
  9634  04FB  0022               	movlb	2	; select bank2
  9635  04FC  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9636  04FD  0021               	movlb	1	; select bank1
  9637  04FE  082A               	movf	(?___awtoft+2)^(0+128),w
  9638  04FF  0022               	movlb	2	; select bank2
  9639  0500  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9640  0501  31B7  2785  3183   	fcall	_modSquare
  9641  0504  0022               	movlb	2	; select bank2
  9642  0505  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9643  0506  00D0               	movwf	??_updateModulationArray^(0+256)
  9644  0507  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9645  0508  35D0               	lslf	??_updateModulationArray^(0+256),f
  9646  0509  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9647  050A  308A               	movlw	138
  9648  050B  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9649  050C  3023               	movlw	35
  9650  050D  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9651  050E  0850               	movf	??_updateModulationArray^(0+256),w
  9652  050F  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9653  0510  0086               	movwf	6
  9654  0511  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9655  0512  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9656  0513  0087               	movwf	7
  9657  0514  0848               	movf	?_modSquare^(0+256),w
  9658  0515  3FC0               	movwi [0]fsr1
  9659  0516  0849               	movf	(?_modSquare+1)^(0+256),w
  9660  0517  3FC1               	movwi [1]fsr1
  9661                           
  9662                           ;modulation.c: 65: break;
  9663  0518  2DD0               	goto	l8353
  9664  0519                     l8343:	
  9665                           ;modulation.c: 66: case 4:
  9666                           
  9667                           
  9668                           ;modulation.c: 67: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9669  0519  0022               	movlb	2	; select bank2
  9670  051A  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9671  051B  0021               	movlb	1	; select bank1
  9672  051C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9673  051D  0022               	movlb	2	; select bank2
  9674  051E  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9675  051F  0021               	movlb	1	; select bank1
  9676  0520  00A8               	movwf	___awtoft@c^(0+128)
  9677  0521  31B2  22F0  3183   	fcall	___awtoft
  9678  0524  0021               	movlb	1	; select bank1
  9679  0525  0828               	movf	?___awtoft^(0+128),w
  9680  0526  0022               	movlb	2	; select bank2
  9681  0527  00C2               	movwf	modSawRev@angle^(0+256)
  9682  0528  0021               	movlb	1	; select bank1
  9683  0529  0829               	movf	(?___awtoft+1)^(0+128),w
  9684  052A  0022               	movlb	2	; select bank2
  9685  052B  00C3               	movwf	(modSawRev@angle+1)^(0+256)
  9686  052C  0021               	movlb	1	; select bank1
  9687  052D  082A               	movf	(?___awtoft+2)^(0+128),w
  9688  052E  0022               	movlb	2	; select bank2
  9689  052F  00C4               	movwf	(modSawRev@angle+2)^(0+256)
  9690  0530  0023               	movlb	3	; select bank3
  9691  0531  086B               	movf	(_symmetry+1)^(0+384),w
  9692  0532  0021               	movlb	1	; select bank1
  9693  0533  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9694  0534  0023               	movlb	3	; select bank3
  9695  0535  086A               	movf	_symmetry^(0+384),w
  9696  0536  0021               	movlb	1	; select bank1
  9697  0537  00A8               	movwf	___awtoft@c^(0+128)
  9698  0538  31B2  22F0  3183   	fcall	___awtoft
  9699  053B  0021               	movlb	1	; select bank1
  9700  053C  0828               	movf	?___awtoft^(0+128),w
  9701  053D  0022               	movlb	2	; select bank2
  9702  053E  00C5               	movwf	modSawRev@inflection^(0+256)
  9703  053F  0021               	movlb	1	; select bank1
  9704  0540  0829               	movf	(?___awtoft+1)^(0+128),w
  9705  0541  0022               	movlb	2	; select bank2
  9706  0542  00C6               	movwf	(modSawRev@inflection+1)^(0+256)
  9707  0543  0021               	movlb	1	; select bank1
  9708  0544  082A               	movf	(?___awtoft+2)^(0+128),w
  9709  0545  0022               	movlb	2	; select bank2
  9710  0546  00C7               	movwf	(modSawRev@inflection+2)^(0+256)
  9711  0547  31B2  2254  3183   	fcall	_modSawRev
  9712  054A  0022               	movlb	2	; select bank2
  9713  054B  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9714  054C  00D0               	movwf	??_updateModulationArray^(0+256)
  9715  054D  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9716  054E  35D0               	lslf	??_updateModulationArray^(0+256),f
  9717  054F  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9718  0550  308A               	movlw	138
  9719  0551  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9720  0552  3023               	movlw	35
  9721  0553  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9722  0554  0850               	movf	??_updateModulationArray^(0+256),w
  9723  0555  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9724  0556  0086               	movwf	6
  9725  0557  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9726  0558  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9727  0559  0087               	movwf	7
  9728  055A  0842               	movf	?_modSawRev^(0+256),w
  9729  055B  3FC0               	movwi [0]fsr1
  9730  055C  0843               	movf	(?_modSawRev+1)^(0+256),w
  9731  055D  3FC1               	movwi [1]fsr1
  9732                           
  9733                           ;modulation.c: 68: break;
  9734  055E  2DD0               	goto	l8353
  9735  055F                     l8345:	
  9736                           ;modulation.c: 69: case 5:
  9737                           
  9738                           
  9739                           ;modulation.c: 70: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9740  055F  0022               	movlb	2	; select bank2
  9741  0560  085A               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9742  0561  0021               	movlb	1	; select bank1
  9743  0562  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9744  0563  0022               	movlb	2	; select bank2
  9745  0564  0859               	movf	updateModulationArray@thisAngle^(0+256),w
  9746  0565  0021               	movlb	1	; select bank1
  9747  0566  00A8               	movwf	___awtoft@c^(0+128)
  9748  0567  31B2  22F0  3183   	fcall	___awtoft
  9749  056A  0021               	movlb	1	; select bank1
  9750  056B  0828               	movf	?___awtoft^(0+128),w
  9751  056C  0022               	movlb	2	; select bank2
  9752  056D  00AE               	movwf	modSaw@angle^(0+256)
  9753  056E  0021               	movlb	1	; select bank1
  9754  056F  0829               	movf	(?___awtoft+1)^(0+128),w
  9755  0570  0022               	movlb	2	; select bank2
  9756  0571  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9757  0572  0021               	movlb	1	; select bank1
  9758  0573  082A               	movf	(?___awtoft+2)^(0+128),w
  9759  0574  0022               	movlb	2	; select bank2
  9760  0575  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9761  0576  0023               	movlb	3	; select bank3
  9762  0577  086B               	movf	(_symmetry+1)^(0+384),w
  9763  0578  0021               	movlb	1	; select bank1
  9764  0579  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9765  057A  0023               	movlb	3	; select bank3
  9766  057B  086A               	movf	_symmetry^(0+384),w
  9767  057C  0021               	movlb	1	; select bank1
  9768  057D  00A8               	movwf	___awtoft@c^(0+128)
  9769  057E  31B2  22F0  3183   	fcall	___awtoft
  9770  0581  0021               	movlb	1	; select bank1
  9771  0582  0828               	movf	?___awtoft^(0+128),w
  9772  0583  0022               	movlb	2	; select bank2
  9773  0584  00B1               	movwf	modSaw@inflection^(0+256)
  9774  0585  0021               	movlb	1	; select bank1
  9775  0586  0829               	movf	(?___awtoft+1)^(0+128),w
  9776  0587  0022               	movlb	2	; select bank2
  9777  0588  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9778  0589  0021               	movlb	1	; select bank1
  9779  058A  082A               	movf	(?___awtoft+2)^(0+128),w
  9780  058B  0022               	movlb	2	; select bank2
  9781  058C  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9782  058D  319D  25E8  3183   	fcall	_modSaw
  9783  0590  0022               	movlb	2	; select bank2
  9784  0591  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9785  0592  00D0               	movwf	??_updateModulationArray^(0+256)
  9786  0593  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9787  0594  35D0               	lslf	??_updateModulationArray^(0+256),f
  9788  0595  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9789  0596  308A               	movlw	138
  9790  0597  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9791  0598  3023               	movlw	35
  9792  0599  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9793  059A  0850               	movf	??_updateModulationArray^(0+256),w
  9794  059B  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9795  059C  0086               	movwf	6
  9796  059D  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9797  059E  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9798  059F  0087               	movwf	7
  9799  05A0  082E               	movf	?_modSaw^(0+256),w
  9800  05A1  3FC0               	movwi [0]fsr1
  9801  05A2  082F               	movf	(?_modSaw+1)^(0+256),w
  9802  05A3  3FC1               	movwi [1]fsr1
  9803                           
  9804                           ;modulation.c: 71: break;
  9805  05A4  2DD0               	goto	l8353
  9806  05A5                     l8347:	
  9807                           ;modulation.c: 72: default:
  9808                           
  9809                           
  9810                           ;modulation.c: 73: modArray[iAngle] = 0;
  9811  05A5  0022               	movlb	2	; select bank2
  9812  05A6  085B               	movf	updateModulationArray@iAngle^(0+256),w
  9813  05A7  00D0               	movwf	??_updateModulationArray^(0+256)
  9814  05A8  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9815  05A9  35D0               	lslf	??_updateModulationArray^(0+256),f
  9816  05AA  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9817  05AB  308A               	movlw	138
  9818  05AC  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9819  05AD  3023               	movlw	35
  9820  05AE  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9821  05AF  0850               	movf	??_updateModulationArray^(0+256),w
  9822  05B0  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9823  05B1  0086               	movwf	6
  9824  05B2  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9825  05B3  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9826  05B4  0087               	movwf	7
  9827  05B5  3000               	movlw	0
  9828  05B6  3FC0               	movwi [0]fsr1
  9829  05B7  3FC1               	movwi [1]fsr1
  9830                           
  9831                           ;modulation.c: 75: }
  9832                           
  9833                           ;modulation.c: 74: break;
  9834  05B8  2DD0               	goto	l8353
  9835  05B9                     l8351:	
  9836                           
  9837                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9838                           ; Switch size 1, requested type "space"
  9839                           ; Number of cases is 1, Range of values is 0 to 0
  9840                           ; switch strategies available:
  9841                           ; Name         Instructions Cycles
  9842                           ; simple_byte            4     3 (average)
  9843                           ; direct_byte            8     6 (fixed)
  9844                           ; jumptable            260     6 (fixed)
  9845                           ;	Chosen strategy is simple_byte
  9846  05B9  0023               	movlb	3	; select bank3
  9847  05BA  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9848  05BB  3A00               	xorlw	0	; case 0
  9849  05BC  1903               	skipnz
  9850  05BD  2DBF               	goto	l9439
  9851  05BE  2DA5               	goto	l8347
  9852  05BF                     l9439:	
  9853                           
  9854                           ; Switch size 1, requested type "space"
  9855                           ; Number of cases is 5, Range of values is 1 to 5
  9856                           ; switch strategies available:
  9857                           ; Name         Instructions Cycles
  9858                           ; simple_byte           16     9 (average)
  9859                           ; direct_byte           19     9 (fixed)
  9860                           ; jumptable            263     9 (fixed)
  9861                           ;	Chosen strategy is simple_byte
  9862  05BF  0862               	movf	_bottom_push_state^(0+384),w
  9863  05C0  3A01               	xorlw	1	; case 1
  9864  05C1  1903               	skipnz
  9865  05C2  2C47               	goto	l8337
  9866  05C3  3A03               	xorlw	3	; case 2
  9867  05C4  1903               	skipnz
  9868  05C5  2C8D               	goto	l8339
  9869  05C6  3A01               	xorlw	1	; case 3
  9870  05C7  1903               	skipnz
  9871  05C8  2CD3               	goto	l8341
  9872  05C9  3A07               	xorlw	7	; case 4
  9873  05CA  1903               	skipnz
  9874  05CB  2D19               	goto	l8343
  9875  05CC  3A01               	xorlw	1	; case 5
  9876  05CD  1903               	skipnz
  9877  05CE  2D5F               	goto	l8345
  9878  05CF  2DA5               	goto	l8347
  9879  05D0                     l8353:	
  9880  05D0  3001               	movlw	1
  9881  05D1  0022               	movlb	2	; select bank2
  9882  05D2  00D0               	movwf	??_updateModulationArray^(0+256)
  9883  05D3  0850               	movf	??_updateModulationArray^(0+256),w
  9884  05D4  07DB               	addwf	updateModulationArray@iAngle^(0+256),f
  9885  05D5  2C29               	goto	l8355
  9886  05D6                     l8357:	
  9887                           
  9888                           ;modulation.c: 76: }
  9889                           ;modulation.c: 77: for (char iAngle = subDiv; iAngle < 120; iAngle++) {
  9890  05D6  0022               	movlb	2	; select bank2
  9891  05D7  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9892  05D8  00D0               	movwf	??_updateModulationArray^(0+256)
  9893  05D9  0850               	movf	??_updateModulationArray^(0+256),w
  9894  05DA  00D6               	movwf	updateModulationArray@iAngle_2595^(0+256)
  9895  05DB  3078               	movlw	120
  9896  05DC  0256               	subwf	updateModulationArray@iAngle_2595^(0+256),w
  9897  05DD  1803               	btfsc	3,0
  9898  05DE  2DF9               	goto	l8367
  9899  05DF                     l8361:	
  9900                           
  9901                           ;modulation.c: 78: modArray[iAngle] = 0 ;
  9902  05DF  0856               	movf	updateModulationArray@iAngle_2595^(0+256),w
  9903  05E0  00D0               	movwf	??_updateModulationArray^(0+256)
  9904  05E1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9905  05E2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9906  05E3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9907  05E4  308A               	movlw	138
  9908  05E5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9909  05E6  3023               	movlw	35
  9910  05E7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9911  05E8  0850               	movf	??_updateModulationArray^(0+256),w
  9912  05E9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9913  05EA  0086               	movwf	6
  9914  05EB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9915  05EC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9916  05ED  0087               	movwf	7
  9917  05EE  3000               	movlw	0
  9918  05EF  3FC0               	movwi [0]fsr1
  9919  05F0  3FC1               	movwi [1]fsr1
  9920  05F1  3001               	movlw	1
  9921  05F2  00D0               	movwf	??_updateModulationArray^(0+256)
  9922  05F3  0850               	movf	??_updateModulationArray^(0+256),w
  9923  05F4  07D6               	addwf	updateModulationArray@iAngle_2595^(0+256),f
  9924  05F5  3078               	movlw	120
  9925  05F6  0256               	subwf	updateModulationArray@iAngle_2595^(0+256),w
  9926  05F7  1C03               	skipc
  9927  05F8  2DDF               	goto	l8361
  9928  05F9                     l8367:	
  9929                           
  9930                           ;modulation.c: 79: }
  9931                           ;modulation.c: 80: modArray[120] = bottom_push_state;
  9932  05F9  307A               	movlw	122
  9933  05FA  0086               	movwf	6
  9934  05FB  3024               	movlw	36
  9935  05FC  0087               	movwf	7
  9936  05FD  0023               	movlb	3	; select bank3
  9937  05FE  0862               	movf	_bottom_push_state^(0+384),w
  9938  05FF  3FC0               	movwi [0]fsr1
  9939  0600  0863               	movf	(_bottom_push_state+1)^(0+384),w
  9940  0601  3FC1               	movwi [1]fsr1
  9941                           
  9942                           ;modulation.c: 81: modArray[121] = symmetry;
  9943  0602  307C               	movlw	124
  9944  0603  0086               	movwf	6
  9945  0604  3024               	movlw	36
  9946  0605  0087               	movwf	7
  9947  0606  086A               	movf	_symmetry^(0+384),w
  9948  0607  3FC0               	movwi [0]fsr1
  9949  0608  086B               	movf	(_symmetry+1)^(0+384),w
  9950  0609  3FC1               	movwi [1]fsr1
  9951                           
  9952                           ;modulation.c: 82: modArray[122] = subDiv;
  9953  060A  307E               	movlw	126
  9954  060B  0086               	movwf	6
  9955  060C  3024               	movlw	36
  9956  060D  0087               	movwf	7
  9957  060E  0022               	movlb	2	; select bank2
  9958  060F  0857               	movf	updateModulationArray@subDiv^(0+256),w
  9959  0610  3FC0               	movwi [0]fsr1
  9960  0611  0858               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9961  0612  3FC1               	movwi [1]fsr1
  9962  0613  0008               	return
  9963  0614                     __end_of_updateModulationArray:	
  9964                           
  9965                           	psect	text19
  9966  0614                     __ptext19:	
  9967 ;; *************** function _modTri *****************
  9968 ;; Defined at:
  9969 ;;		line 102 in file "modulation.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;  angle           3   14[BANK2 ] void 
  9972 ;;  inflection      3   17[BANK2 ] void 
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;  tmpVal          3   29[BANK2 ] void 
  9975 ;;  period          3   26[BANK2 ] void 
  9976 ;;  shift           3   23[BANK2 ] void 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  2   14[BANK2 ] int 
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9986 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9987 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9989 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9990 ;;Total ram usage:       18 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    7
  9993 ;; This function calls:
  9994 ;;		___ftadd
  9995 ;;		___ftdiv
  9996 ;;		___ftge
  9997 ;;		___ftmul
  9998 ;;		___ftneg
  9999 ;;		___fttol
 10000 ;; This function is called by:
 10001 ;;		_updateModulationArray
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function _modTri
 10007  0614                     _modTri:	
 10008                           
 10009                           ;modulation.c: 103: double period = 1.0;
 10010                           
 10011                           ;incstack = 0
 10012                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
 10013  0614  3000               	movlw	0
 10014  0615  0022               	movlb	2	; select bank2
 10015  0616  00BA               	movwf	modTri@period^(0+256)
 10016  0617  3080               	movlw	128
 10017  0618  00BB               	movwf	(modTri@period+1)^(0+256)
 10018  0619  303F               	movlw	63
 10019  061A  00BC               	movwf	(modTri@period+2)^(0+256)
 10020                           
 10021                           ;modulation.c: 104: double shift = 0;
 10022  061B  3000               	movlw	0
 10023  061C  00B7               	movwf	modTri@shift^(0+256)
 10024  061D  3000               	movlw	0
 10025  061E  00B8               	movwf	(modTri@shift+1)^(0+256)
 10026  061F  3000               	movlw	0
 10027  0620  00B9               	movwf	(modTri@shift+2)^(0+256)
 10028                           
 10029                           ;modulation.c: 106: if(angle<=inflection) {
 10030  0621  0831               	movf	modTri@inflection^(0+256),w
 10031  0622  0021               	movlb	1	; select bank1
 10032  0623  00A0               	movwf	___ftge@ff1^(0+128)
 10033  0624  0022               	movlb	2	; select bank2
 10034  0625  0832               	movf	(modTri@inflection+1)^(0+256),w
 10035  0626  0021               	movlb	1	; select bank1
 10036  0627  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10037  0628  0022               	movlb	2	; select bank2
 10038  0629  0833               	movf	(modTri@inflection+2)^(0+256),w
 10039  062A  0021               	movlb	1	; select bank1
 10040  062B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10041  062C  0022               	movlb	2	; select bank2
 10042  062D  082E               	movf	modTri@angle^(0+256),w
 10043  062E  0021               	movlb	1	; select bank1
 10044  062F  00A3               	movwf	___ftge@ff2^(0+128)
 10045  0630  0022               	movlb	2	; select bank2
 10046  0631  082F               	movf	(modTri@angle+1)^(0+256),w
 10047  0632  0021               	movlb	1	; select bank1
 10048  0633  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10049  0634  0022               	movlb	2	; select bank2
 10050  0635  0830               	movf	(modTri@angle+2)^(0+256),w
 10051  0636  0021               	movlb	1	; select bank1
 10052  0637  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10053  0638  31B6  26CF  3186   	fcall	___ftge
 10054  063B  1C03               	btfss	3,0
 10055  063C  2E49               	goto	l7607
 10056                           
 10057                           ;modulation.c: 107: period = 180.0/inflection;
 10058  063D  0022               	movlb	2	; select bank2
 10059  063E  0831               	movf	modTri@inflection^(0+256),w
 10060  063F  0021               	movlb	1	; select bank1
 10061  0640  00CE               	movwf	___ftdiv@f2^(0+128)
 10062  0641  0022               	movlb	2	; select bank2
 10063  0642  0832               	movf	(modTri@inflection+1)^(0+256),w
 10064  0643  0021               	movlb	1	; select bank1
 10065  0644  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10066  0645  0022               	movlb	2	; select bank2
 10067  0646  0833               	movf	(modTri@inflection+2)^(0+256),w
 10068  0647  0021               	movlb	1	; select bank1
 10069  0648  2F04               	goto	L3
 10070  0649                     l7607:	
 10071                           ;modulation.c: 108: } else {
 10072                           
 10073                           
 10074                           ;modulation.c: 109: shift = -(360-inflection*2)*(180/(360-inflection));
 10075  0649  0022               	movlb	2	; select bank2
 10076  064A  0831               	movf	modTri@inflection^(0+256),w
 10077  064B  0021               	movlb	1	; select bank1
 10078  064C  00B1               	movwf	___ftmul@f2^(0+128)
 10079  064D  0022               	movlb	2	; select bank2
 10080  064E  0832               	movf	(modTri@inflection+1)^(0+256),w
 10081  064F  0021               	movlb	1	; select bank1
 10082  0650  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10083  0651  0022               	movlb	2	; select bank2
 10084  0652  0833               	movf	(modTri@inflection+2)^(0+256),w
 10085  0653  0021               	movlb	1	; select bank1
 10086  0654  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10087  0655  3000               	movlw	0
 10088  0656  00AE               	movwf	___ftmul@f1^(0+128)
 10089  0657  3000               	movlw	0
 10090  0658  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10091  0659  3040               	movlw	64
 10092  065A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10093  065B  31A5  2590  3186   	fcall	___ftmul
 10094  065E  0021               	movlb	1	; select bank1
 10095  065F  082E               	movf	?___ftmul^(0+128),w
 10096  0660  00BE               	movwf	___ftneg@f1^(0+128)
 10097  0661  082F               	movf	(?___ftmul+1)^(0+128),w
 10098  0662  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10099  0663  0830               	movf	(?___ftmul+2)^(0+128),w
 10100  0664  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10101  0665  31BF  27C8  3186   	fcall	___ftneg
 10102  0668  0021               	movlb	1	; select bank1
 10103  0669  083E               	movf	?___ftneg^(0+128),w
 10104  066A  00C4               	movwf	___ftadd@f2^(0+128)
 10105  066B  083F               	movf	(?___ftneg+1)^(0+128),w
 10106  066C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10107  066D  0840               	movf	(?___ftneg+2)^(0+128),w
 10108  066E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10109  066F  3000               	movlw	0
 10110  0670  00C1               	movwf	___ftadd@f1^(0+128)
 10111  0671  30B4               	movlw	180
 10112  0672  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10113  0673  3043               	movlw	67
 10114  0674  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10115  0675  3198  200B  3186   	fcall	___ftadd
 10116  0678  0021               	movlb	1	; select bank1
 10117  0679  0841               	movf	?___ftadd^(0+128),w
 10118  067A  0022               	movlb	2	; select bank2
 10119  067B  00B4               	movwf	_modTri$3268^(0+256)
 10120  067C  0021               	movlb	1	; select bank1
 10121  067D  0842               	movf	(?___ftadd+1)^(0+128),w
 10122  067E  0022               	movlb	2	; select bank2
 10123  067F  00B5               	movwf	(_modTri$3268+1)^(0+256)
 10124  0680  0021               	movlb	1	; select bank1
 10125  0681  0843               	movf	(?___ftadd+2)^(0+128),w
 10126  0682  0022               	movlb	2	; select bank2
 10127  0683  00B6               	movwf	(_modTri$3268+2)^(0+256)
 10128                           
 10129                           ;modulation.c: 109: shift = -(360-inflection*2)*(180/(360-inflection));
 10130  0684  0834               	movf	_modTri$3268^(0+256),w
 10131  0685  0021               	movlb	1	; select bank1
 10132  0686  00BE               	movwf	___ftneg@f1^(0+128)
 10133  0687  0022               	movlb	2	; select bank2
 10134  0688  0835               	movf	(_modTri$3268+1)^(0+256),w
 10135  0689  0021               	movlb	1	; select bank1
 10136  068A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10137  068B  0022               	movlb	2	; select bank2
 10138  068C  0836               	movf	(_modTri$3268+2)^(0+256),w
 10139  068D  0021               	movlb	1	; select bank1
 10140  068E  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10141  068F  31BF  27C8  3186   	fcall	___ftneg
 10142  0692  0021               	movlb	1	; select bank1
 10143  0693  083E               	movf	?___ftneg^(0+128),w
 10144  0694  00AE               	movwf	___ftmul@f1^(0+128)
 10145  0695  083F               	movf	(?___ftneg+1)^(0+128),w
 10146  0696  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10147  0697  0840               	movf	(?___ftneg+2)^(0+128),w
 10148  0698  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10149  0699  3000               	movlw	0
 10150  069A  00C1               	movwf	___ftadd@f1^(0+128)
 10151  069B  30B4               	movlw	180
 10152  069C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10153  069D  3043               	movlw	67
 10154  069E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10155  069F  0022               	movlb	2	; select bank2
 10156  06A0  0831               	movf	modTri@inflection^(0+256),w
 10157  06A1  0021               	movlb	1	; select bank1
 10158  06A2  00BE               	movwf	___ftneg@f1^(0+128)
 10159  06A3  0022               	movlb	2	; select bank2
 10160  06A4  0832               	movf	(modTri@inflection+1)^(0+256),w
 10161  06A5  0021               	movlb	1	; select bank1
 10162  06A6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10163  06A7  0022               	movlb	2	; select bank2
 10164  06A8  0833               	movf	(modTri@inflection+2)^(0+256),w
 10165  06A9  0021               	movlb	1	; select bank1
 10166  06AA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10167  06AB  31BF  27C8  3186   	fcall	___ftneg
 10168  06AE  0021               	movlb	1	; select bank1
 10169  06AF  083E               	movf	?___ftneg^(0+128),w
 10170  06B0  00C4               	movwf	___ftadd@f2^(0+128)
 10171  06B1  083F               	movf	(?___ftneg+1)^(0+128),w
 10172  06B2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10173  06B3  0840               	movf	(?___ftneg+2)^(0+128),w
 10174  06B4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10175  06B5  3198  200B  3186   	fcall	___ftadd
 10176  06B8  0021               	movlb	1	; select bank1
 10177  06B9  0841               	movf	?___ftadd^(0+128),w
 10178  06BA  00CE               	movwf	___ftdiv@f2^(0+128)
 10179  06BB  0842               	movf	(?___ftadd+1)^(0+128),w
 10180  06BC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10181  06BD  0843               	movf	(?___ftadd+2)^(0+128),w
 10182  06BE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10183  06BF  3000               	movlw	0
 10184  06C0  00D1               	movwf	___ftdiv@f1^(0+128)
 10185  06C1  3034               	movlw	52
 10186  06C2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10187  06C3  3043               	movlw	67
 10188  06C4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10189  06C5  31A4  2434  3186   	fcall	___ftdiv
 10190  06C8  0021               	movlb	1	; select bank1
 10191  06C9  084E               	movf	?___ftdiv^(0+128),w
 10192  06CA  00B1               	movwf	___ftmul@f2^(0+128)
 10193  06CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10194  06CC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10195  06CD  0850               	movf	(?___ftdiv+2)^(0+128),w
 10196  06CE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10197  06CF  31A5  2590  3186   	fcall	___ftmul
 10198  06D2  0021               	movlb	1	; select bank1
 10199  06D3  082E               	movf	?___ftmul^(0+128),w
 10200  06D4  0022               	movlb	2	; select bank2
 10201  06D5  00B7               	movwf	modTri@shift^(0+256)
 10202  06D6  0021               	movlb	1	; select bank1
 10203  06D7  082F               	movf	(?___ftmul+1)^(0+128),w
 10204  06D8  0022               	movlb	2	; select bank2
 10205  06D9  00B8               	movwf	(modTri@shift+1)^(0+256)
 10206  06DA  0021               	movlb	1	; select bank1
 10207  06DB  0830               	movf	(?___ftmul+2)^(0+128),w
 10208  06DC  0022               	movlb	2	; select bank2
 10209  06DD  00B9               	movwf	(modTri@shift+2)^(0+256)
 10210                           
 10211                           ;modulation.c: 110: period = 180/(360-inflection);
 10212  06DE  3000               	movlw	0
 10213  06DF  0021               	movlb	1	; select bank1
 10214  06E0  00C1               	movwf	___ftadd@f1^(0+128)
 10215  06E1  30B4               	movlw	180
 10216  06E2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10217  06E3  3043               	movlw	67
 10218  06E4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10219  06E5  0022               	movlb	2	; select bank2
 10220  06E6  0831               	movf	modTri@inflection^(0+256),w
 10221  06E7  0021               	movlb	1	; select bank1
 10222  06E8  00BE               	movwf	___ftneg@f1^(0+128)
 10223  06E9  0022               	movlb	2	; select bank2
 10224  06EA  0832               	movf	(modTri@inflection+1)^(0+256),w
 10225  06EB  0021               	movlb	1	; select bank1
 10226  06EC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10227  06ED  0022               	movlb	2	; select bank2
 10228  06EE  0833               	movf	(modTri@inflection+2)^(0+256),w
 10229  06EF  0021               	movlb	1	; select bank1
 10230  06F0  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10231  06F1  31BF  27C8  3186   	fcall	___ftneg
 10232  06F4  0021               	movlb	1	; select bank1
 10233  06F5  083E               	movf	?___ftneg^(0+128),w
 10234  06F6  00C4               	movwf	___ftadd@f2^(0+128)
 10235  06F7  083F               	movf	(?___ftneg+1)^(0+128),w
 10236  06F8  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10237  06F9  0840               	movf	(?___ftneg+2)^(0+128),w
 10238  06FA  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10239  06FB  3198  200B  3186   	fcall	___ftadd
 10240  06FE  0021               	movlb	1	; select bank1
 10241  06FF  0841               	movf	?___ftadd^(0+128),w
 10242  0700  00CE               	movwf	___ftdiv@f2^(0+128)
 10243  0701  0842               	movf	(?___ftadd+1)^(0+128),w
 10244  0702  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10245  0703  0843               	movf	(?___ftadd+2)^(0+128),w
 10246  0704                     L3:	
 10247  0704  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10248  0705  3000               	movlw	0
 10249  0706  00D1               	movwf	___ftdiv@f1^(0+128)
 10250  0707  3034               	movlw	52
 10251  0708  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10252  0709  3043               	movlw	67
 10253  070A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10254  070B  31A4  2434  3186   	fcall	___ftdiv
 10255  070E  0021               	movlb	1	; select bank1
 10256  070F  084E               	movf	?___ftdiv^(0+128),w
 10257  0710  0022               	movlb	2	; select bank2
 10258  0711  00BA               	movwf	modTri@period^(0+256)
 10259  0712  0021               	movlb	1	; select bank1
 10260  0713  084F               	movf	(?___ftdiv+1)^(0+128),w
 10261  0714  0022               	movlb	2	; select bank2
 10262  0715  00BB               	movwf	(modTri@period+1)^(0+256)
 10263  0716  0021               	movlb	1	; select bank1
 10264  0717  0850               	movf	(?___ftdiv+2)^(0+128),w
 10265  0718  0022               	movlb	2	; select bank2
 10266  0719  00BC               	movwf	(modTri@period+2)^(0+256)
 10267                           
 10268                           ;modulation.c: 112: }
 10269                           ;modulation.c: 113: double tmpVal = (period*angle-shift) ;
 10270  071A  0837               	movf	modTri@shift^(0+256),w
 10271  071B  0021               	movlb	1	; select bank1
 10272  071C  00BE               	movwf	___ftneg@f1^(0+128)
 10273  071D  0022               	movlb	2	; select bank2
 10274  071E  0838               	movf	(modTri@shift+1)^(0+256),w
 10275  071F  0021               	movlb	1	; select bank1
 10276  0720  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10277  0721  0022               	movlb	2	; select bank2
 10278  0722  0839               	movf	(modTri@shift+2)^(0+256),w
 10279  0723  0021               	movlb	1	; select bank1
 10280  0724  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10281  0725  31BF  27C8  3186   	fcall	___ftneg
 10282  0728  0021               	movlb	1	; select bank1
 10283  0729  083E               	movf	?___ftneg^(0+128),w
 10284  072A  00C1               	movwf	___ftadd@f1^(0+128)
 10285  072B  083F               	movf	(?___ftneg+1)^(0+128),w
 10286  072C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10287  072D  0840               	movf	(?___ftneg+2)^(0+128),w
 10288  072E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10289  072F  0022               	movlb	2	; select bank2
 10290  0730  082E               	movf	modTri@angle^(0+256),w
 10291  0731  0021               	movlb	1	; select bank1
 10292  0732  00AE               	movwf	___ftmul@f1^(0+128)
 10293  0733  0022               	movlb	2	; select bank2
 10294  0734  082F               	movf	(modTri@angle+1)^(0+256),w
 10295  0735  0021               	movlb	1	; select bank1
 10296  0736  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10297  0737  0022               	movlb	2	; select bank2
 10298  0738  0830               	movf	(modTri@angle+2)^(0+256),w
 10299  0739  0021               	movlb	1	; select bank1
 10300  073A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10301  073B  0022               	movlb	2	; select bank2
 10302  073C  083A               	movf	modTri@period^(0+256),w
 10303  073D  0021               	movlb	1	; select bank1
 10304  073E  00B1               	movwf	___ftmul@f2^(0+128)
 10305  073F  0022               	movlb	2	; select bank2
 10306  0740  083B               	movf	(modTri@period+1)^(0+256),w
 10307  0741  0021               	movlb	1	; select bank1
 10308  0742  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10309  0743  0022               	movlb	2	; select bank2
 10310  0744  083C               	movf	(modTri@period+2)^(0+256),w
 10311  0745  0021               	movlb	1	; select bank1
 10312  0746  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10313  0747  31A5  2590  3186   	fcall	___ftmul
 10314  074A  0021               	movlb	1	; select bank1
 10315  074B  082E               	movf	?___ftmul^(0+128),w
 10316  074C  00C4               	movwf	___ftadd@f2^(0+128)
 10317  074D  082F               	movf	(?___ftmul+1)^(0+128),w
 10318  074E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10319  074F  0830               	movf	(?___ftmul+2)^(0+128),w
 10320  0750  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10321  0751  3198  200B  3186   	fcall	___ftadd
 10322  0754  0021               	movlb	1	; select bank1
 10323  0755  0841               	movf	?___ftadd^(0+128),w
 10324  0756  0022               	movlb	2	; select bank2
 10325  0757  00BD               	movwf	modTri@tmpVal^(0+256)
 10326  0758  0021               	movlb	1	; select bank1
 10327  0759  0842               	movf	(?___ftadd+1)^(0+128),w
 10328  075A  0022               	movlb	2	; select bank2
 10329  075B  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10330  075C  0021               	movlb	1	; select bank1
 10331  075D  0843               	movf	(?___ftadd+2)^(0+128),w
 10332  075E  0022               	movlb	2	; select bank2
 10333  075F  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10334                           
 10335                           ;modulation.c: 114: if (tmpVal > 180) {
 10336  0760  3000               	movlw	0
 10337  0761  0021               	movlb	1	; select bank1
 10338  0762  00A0               	movwf	___ftge@ff1^(0+128)
 10339  0763  3034               	movlw	52
 10340  0764  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10341  0765  3043               	movlw	67
 10342  0766  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10343  0767  0022               	movlb	2	; select bank2
 10344  0768  083D               	movf	modTri@tmpVal^(0+256),w
 10345  0769  0021               	movlb	1	; select bank1
 10346  076A  00A3               	movwf	___ftge@ff2^(0+128)
 10347  076B  0022               	movlb	2	; select bank2
 10348  076C  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10349  076D  0021               	movlb	1	; select bank1
 10350  076E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10351  076F  0022               	movlb	2	; select bank2
 10352  0770  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10353  0771  0021               	movlb	1	; select bank1
 10354  0772  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10355  0773  31B6  26CF  3186   	fcall	___ftge
 10356  0776  1803               	btfsc	3,0
 10357  0777  2F8B               	goto	l7611
 10358                           
 10359                           ;modulation.c: 115: tmpVal = tmpVal - 270.0;
 10360  0778  3000               	movlw	0
 10361  0779  0021               	movlb	1	; select bank1
 10362  077A  00C1               	movwf	___ftadd@f1^(0+128)
 10363  077B  3087               	movlw	135
 10364  077C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10365  077D  30C3               	movlw	195
 10366  077E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10367  077F  0022               	movlb	2	; select bank2
 10368  0780  083D               	movf	modTri@tmpVal^(0+256),w
 10369  0781  0021               	movlb	1	; select bank1
 10370  0782  00C4               	movwf	___ftadd@f2^(0+128)
 10371  0783  0022               	movlb	2	; select bank2
 10372  0784  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10373  0785  0021               	movlb	1	; select bank1
 10374  0786  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10375  0787  0022               	movlb	2	; select bank2
 10376  0788  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10377  0789  0021               	movlb	1	; select bank1
 10378  078A  2FA7               	goto	L4
 10379  078B                     l7611:	
 10380                           ;modulation.c: 116: } else {
 10381                           
 10382                           
 10383                           ;modulation.c: 117: tmpVal = 90 - tmpVal;
 10384  078B  3000               	movlw	0
 10385  078C  0021               	movlb	1	; select bank1
 10386  078D  00C1               	movwf	___ftadd@f1^(0+128)
 10387  078E  30B4               	movlw	180
 10388  078F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10389  0790  3042               	movlw	66
 10390  0791  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10391  0792  0022               	movlb	2	; select bank2
 10392  0793  083D               	movf	modTri@tmpVal^(0+256),w
 10393  0794  0021               	movlb	1	; select bank1
 10394  0795  00BE               	movwf	___ftneg@f1^(0+128)
 10395  0796  0022               	movlb	2	; select bank2
 10396  0797  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10397  0798  0021               	movlb	1	; select bank1
 10398  0799  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10399  079A  0022               	movlb	2	; select bank2
 10400  079B  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10401  079C  0021               	movlb	1	; select bank1
 10402  079D  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10403  079E  31BF  27C8  3186   	fcall	___ftneg
 10404  07A1  0021               	movlb	1	; select bank1
 10405  07A2  083E               	movf	?___ftneg^(0+128),w
 10406  07A3  00C4               	movwf	___ftadd@f2^(0+128)
 10407  07A4  083F               	movf	(?___ftneg+1)^(0+128),w
 10408  07A5  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10409  07A6  0840               	movf	(?___ftneg+2)^(0+128),w
 10410  07A7                     L4:	
 10411  07A7  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10412  07A8  3198  200B  3186   	fcall	___ftadd
 10413  07AB  0021               	movlb	1	; select bank1
 10414  07AC  0841               	movf	?___ftadd^(0+128),w
 10415  07AD  0022               	movlb	2	; select bank2
 10416  07AE  00BD               	movwf	modTri@tmpVal^(0+256)
 10417  07AF  0021               	movlb	1	; select bank1
 10418  07B0  0842               	movf	(?___ftadd+1)^(0+128),w
 10419  07B1  0022               	movlb	2	; select bank2
 10420  07B2  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10421  07B3  0021               	movlb	1	; select bank1
 10422  07B4  0843               	movf	(?___ftadd+2)^(0+128),w
 10423  07B5  0022               	movlb	2	; select bank2
 10424  07B6  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10425                           
 10426                           ;modulation.c: 118: }
 10427                           ;modulation.c: 119: tmpVal = tmpVal * -10/9;
 10428  07B7  3000               	movlw	0
 10429  07B8  0021               	movlb	1	; select bank1
 10430  07B9  00CE               	movwf	___ftdiv@f2^(0+128)
 10431  07BA  3010               	movlw	16
 10432  07BB  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10433  07BC  3041               	movlw	65
 10434  07BD  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10435  07BE  3000               	movlw	0
 10436  07BF  00AE               	movwf	___ftmul@f1^(0+128)
 10437  07C0  3020               	movlw	32
 10438  07C1  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10439  07C2  30C1               	movlw	193
 10440  07C3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10441  07C4  0022               	movlb	2	; select bank2
 10442  07C5  083D               	movf	modTri@tmpVal^(0+256),w
 10443  07C6  0021               	movlb	1	; select bank1
 10444  07C7  00B1               	movwf	___ftmul@f2^(0+128)
 10445  07C8  0022               	movlb	2	; select bank2
 10446  07C9  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10447  07CA  0021               	movlb	1	; select bank1
 10448  07CB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10449  07CC  0022               	movlb	2	; select bank2
 10450  07CD  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10451  07CE  0021               	movlb	1	; select bank1
 10452  07CF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10453  07D0  31A5  2590  3186   	fcall	___ftmul
 10454  07D3  0021               	movlb	1	; select bank1
 10455  07D4  082E               	movf	?___ftmul^(0+128),w
 10456  07D5  00D1               	movwf	___ftdiv@f1^(0+128)
 10457  07D6  082F               	movf	(?___ftmul+1)^(0+128),w
 10458  07D7  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10459  07D8  0830               	movf	(?___ftmul+2)^(0+128),w
 10460  07D9  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10461  07DA  31A4  2434  3186   	fcall	___ftdiv
 10462  07DD  0021               	movlb	1	; select bank1
 10463  07DE  084E               	movf	?___ftdiv^(0+128),w
 10464  07DF  0022               	movlb	2	; select bank2
 10465  07E0  00BD               	movwf	modTri@tmpVal^(0+256)
 10466  07E1  0021               	movlb	1	; select bank1
 10467  07E2  084F               	movf	(?___ftdiv+1)^(0+128),w
 10468  07E3  0022               	movlb	2	; select bank2
 10469  07E4  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10470  07E5  0021               	movlb	1	; select bank1
 10471  07E6  0850               	movf	(?___ftdiv+2)^(0+128),w
 10472  07E7  0022               	movlb	2	; select bank2
 10473  07E8  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10474                           
 10475                           ;modulation.c: 121: return (int)(tmpVal);
 10476  07E9  083D               	movf	modTri@tmpVal^(0+256),w
 10477  07EA  00A0               	movwf	___fttol@f1^(0+256)
 10478  07EB  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10479  07EC  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10480  07ED  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10481  07EE  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10482  07EF  31A1  2164         	fcall	___fttol
 10483  07F1  0022               	movlb	2	; select bank2
 10484  07F2  0821               	movf	(?___fttol^(0+256)+1),w
 10485  07F3  00AF               	movwf	(?_modTri+1)^(0+256)
 10486  07F4  0820               	movf	?___fttol^(0+256),w
 10487  07F5  00AE               	movwf	?_modTri^(0+256)
 10488  07F6  0008               	return
 10489  07F7                     __end_of_modTri:	
 10490                           
 10491                           	psect	text20
 10492  3785                     __ptext20:	
 10493 ;; *************** function _modSquare *****************
 10494 ;; Defined at:
 10495 ;;		line 145 in file "modulation.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;  angle           3   40[BANK2 ] int 
 10498 ;;  inflection      3   43[BANK2 ] int 
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  tmpVal          2   46[BANK2 ] int 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  2   40[BANK2 ] int 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10510 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10511 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10513 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10514 ;;Total ram usage:        8 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    8
 10517 ;; This function calls:
 10518 ;;		___ftge
 10519 ;;		_modCos
 10520 ;; This function is called by:
 10521 ;;		_updateModulationArray
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           
 10526                           ;psect for function _modSquare
 10527  3785                     _modSquare:	
 10528                           
 10529                           ;modulation.c: 146: int tmpVal = modCos(angle, inflection);
 10530                           
 10531                           ;incstack = 0
 10532                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10533  3785  0022               	movlb	2	; select bank2
 10534  3786  0848               	movf	modSquare@angle^(0+256),w
 10535  3787  00B4               	movwf	modCos@angle^(0+256)
 10536  3788  0849               	movf	(modSquare@angle+1)^(0+256),w
 10537  3789  00B5               	movwf	(modCos@angle+1)^(0+256)
 10538  378A  084A               	movf	(modSquare@angle+2)^(0+256),w
 10539  378B  00B6               	movwf	(modCos@angle+2)^(0+256)
 10540  378C  084B               	movf	modSquare@inflection^(0+256),w
 10541  378D  00B7               	movwf	modCos@inflection^(0+256)
 10542  378E  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10543  378F  00B8               	movwf	(modCos@inflection+1)^(0+256)
 10544  3790  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10545  3791  00B9               	movwf	(modCos@inflection+2)^(0+256)
 10546  3792  3190  20EC  31B7   	fcall	_modCos
 10547  3795  0022               	movlb	2	; select bank2
 10548  3796  0835               	movf	(?_modCos+1)^(0+256),w
 10549  3797  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10550  3798  0834               	movf	?_modCos^(0+256),w
 10551  3799  00CE               	movwf	modSquare@tmpVal^(0+256)
 10552                           
 10553                           ;modulation.c: 147: return (angle <= inflection) ? -100 : 100;
 10554  379A  084B               	movf	modSquare@inflection^(0+256),w
 10555  379B  0021               	movlb	1	; select bank1
 10556  379C  00A0               	movwf	___ftge@ff1^(0+128)
 10557  379D  0022               	movlb	2	; select bank2
 10558  379E  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10559  379F  0021               	movlb	1	; select bank1
 10560  37A0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10561  37A1  0022               	movlb	2	; select bank2
 10562  37A2  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10563  37A3  0021               	movlb	1	; select bank1
 10564  37A4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10565  37A5  0022               	movlb	2	; select bank2
 10566  37A6  0848               	movf	modSquare@angle^(0+256),w
 10567  37A7  0021               	movlb	1	; select bank1
 10568  37A8  00A3               	movwf	___ftge@ff2^(0+128)
 10569  37A9  0022               	movlb	2	; select bank2
 10570  37AA  0849               	movf	(modSquare@angle+1)^(0+256),w
 10571  37AB  0021               	movlb	1	; select bank1
 10572  37AC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10573  37AD  0022               	movlb	2	; select bank2
 10574  37AE  084A               	movf	(modSquare@angle+2)^(0+256),w
 10575  37AF  0021               	movlb	1	; select bank1
 10576  37B0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10577  37B1  31B6  26CF  31B7   	fcall	___ftge
 10578  37B4  1803               	btfsc	3,0
 10579  37B5  2FBC               	goto	l7621
 10580  37B6  3064               	movlw	100
 10581  37B7  0022               	movlb	2	; select bank2
 10582  37B8  00C8               	movwf	?_modSquare^(0+256)
 10583  37B9  3000               	movlw	0
 10584  37BA  00C9               	movwf	(?_modSquare^(0+256)+1)
 10585  37BB  0008               	return
 10586  37BC                     l7621:	
 10587  37BC  309C               	movlw	156
 10588  37BD  0022               	movlb	2	; select bank2
 10589  37BE  00C8               	movwf	?_modSquare^(0+256)
 10590  37BF  30FF               	movlw	255
 10591  37C0  00C9               	movwf	(?_modSquare^(0+256)+1)
 10592  37C1  0008               	return
 10593  37C2                     __end_of_modSquare:	
 10594                           
 10595                           	psect	text21
 10596  10EC                     __ptext21:	
 10597 ;; *************** function _modCos *****************
 10598 ;; Defined at:
 10599 ;;		line 86 in file "modulation.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;  angle           3   20[BANK2 ] int 
 10602 ;;  inflection      3   23[BANK2 ] int 
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;  tmpVal          3   37[BANK2 ] int 
 10605 ;;  period          3   34[BANK2 ] int 
 10606 ;;  shift           3   31[BANK2 ] int 
 10607 ;; Return value:  Size  Location     Type
 10608 ;;                  2   20[BANK2 ] int 
 10609 ;; Registers used:
 10610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10616 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10617 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10618 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10619 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10620 ;;Total ram usage:       20 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    7
 10623 ;; This function calls:
 10624 ;;		___ftadd
 10625 ;;		___ftdiv
 10626 ;;		___ftge
 10627 ;;		___ftmul
 10628 ;;		___ftneg
 10629 ;;		___fttol
 10630 ;;		___wmul
 10631 ;; This function is called by:
 10632 ;;		_updateModulationArray
 10633 ;;		_modSquare
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function _modCos
 10639  10EC                     _modCos:	
 10640                           
 10641                           ;modulation.c: 87: double period = 1.0;
 10642                           
 10643                           ;incstack = 0
 10644                           ; Regs used in _modCos: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10645  10EC  3000               	movlw	0
 10646  10ED  0022               	movlb	2	; select bank2
 10647  10EE  00C2               	movwf	modCos@period^(0+256)
 10648  10EF  3080               	movlw	128
 10649  10F0  00C3               	movwf	(modCos@period+1)^(0+256)
 10650  10F1  303F               	movlw	63
 10651  10F2  00C4               	movwf	(modCos@period+2)^(0+256)
 10652                           
 10653                           ;modulation.c: 88: double shift = 0.0;
 10654  10F3  3000               	movlw	0
 10655  10F4  00BF               	movwf	modCos@shift^(0+256)
 10656  10F5  3000               	movlw	0
 10657  10F6  00C0               	movwf	(modCos@shift+1)^(0+256)
 10658  10F7  3000               	movlw	0
 10659  10F8  00C1               	movwf	(modCos@shift+2)^(0+256)
 10660                           
 10661                           ;modulation.c: 90: if(angle<=inflection) {
 10662  10F9  0837               	movf	modCos@inflection^(0+256),w
 10663  10FA  0021               	movlb	1	; select bank1
 10664  10FB  00A0               	movwf	___ftge@ff1^(0+128)
 10665  10FC  0022               	movlb	2	; select bank2
 10666  10FD  0838               	movf	(modCos@inflection+1)^(0+256),w
 10667  10FE  0021               	movlb	1	; select bank1
 10668  10FF  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10669  1100  0022               	movlb	2	; select bank2
 10670  1101  0839               	movf	(modCos@inflection+2)^(0+256),w
 10671  1102  0021               	movlb	1	; select bank1
 10672  1103  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10673  1104  0022               	movlb	2	; select bank2
 10674  1105  0834               	movf	modCos@angle^(0+256),w
 10675  1106  0021               	movlb	1	; select bank1
 10676  1107  00A3               	movwf	___ftge@ff2^(0+128)
 10677  1108  0022               	movlb	2	; select bank2
 10678  1109  0835               	movf	(modCos@angle+1)^(0+256),w
 10679  110A  0021               	movlb	1	; select bank1
 10680  110B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10681  110C  0022               	movlb	2	; select bank2
 10682  110D  0836               	movf	(modCos@angle+2)^(0+256),w
 10683  110E  0021               	movlb	1	; select bank1
 10684  110F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10685  1110  31B6  26CF  3190   	fcall	___ftge
 10686  1113  1C03               	btfss	3,0
 10687  1114  2921               	goto	l7197
 10688                           
 10689                           ;modulation.c: 91: period = 180.0/inflection;
 10690  1115  0022               	movlb	2	; select bank2
 10691  1116  0837               	movf	modCos@inflection^(0+256),w
 10692  1117  0021               	movlb	1	; select bank1
 10693  1118  00CE               	movwf	___ftdiv@f2^(0+128)
 10694  1119  0022               	movlb	2	; select bank2
 10695  111A  0838               	movf	(modCos@inflection+1)^(0+256),w
 10696  111B  0021               	movlb	1	; select bank1
 10697  111C  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10698  111D  0022               	movlb	2	; select bank2
 10699  111E  0839               	movf	(modCos@inflection+2)^(0+256),w
 10700  111F  0021               	movlb	1	; select bank1
 10701  1120  29DC               	goto	L5
 10702  1121                     l7197:	
 10703                           ;modulation.c: 92: } else {
 10704                           
 10705                           
 10706                           ;modulation.c: 93: shift = -(360-inflection*2)*(180/(360-inflection));
 10707  1121  0022               	movlb	2	; select bank2
 10708  1122  0837               	movf	modCos@inflection^(0+256),w
 10709  1123  0021               	movlb	1	; select bank1
 10710  1124  00B1               	movwf	___ftmul@f2^(0+128)
 10711  1125  0022               	movlb	2	; select bank2
 10712  1126  0838               	movf	(modCos@inflection+1)^(0+256),w
 10713  1127  0021               	movlb	1	; select bank1
 10714  1128  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10715  1129  0022               	movlb	2	; select bank2
 10716  112A  0839               	movf	(modCos@inflection+2)^(0+256),w
 10717  112B  0021               	movlb	1	; select bank1
 10718  112C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10719  112D  3000               	movlw	0
 10720  112E  00AE               	movwf	___ftmul@f1^(0+128)
 10721  112F  3000               	movlw	0
 10722  1130  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10723  1131  3040               	movlw	64
 10724  1132  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10725  1133  31A5  2590  3190   	fcall	___ftmul
 10726  1136  0021               	movlb	1	; select bank1
 10727  1137  082E               	movf	?___ftmul^(0+128),w
 10728  1138  00BE               	movwf	___ftneg@f1^(0+128)
 10729  1139  082F               	movf	(?___ftmul+1)^(0+128),w
 10730  113A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10731  113B  0830               	movf	(?___ftmul+2)^(0+128),w
 10732  113C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10733  113D  31BF  27C8  3190   	fcall	___ftneg
 10734  1140  0021               	movlb	1	; select bank1
 10735  1141  083E               	movf	?___ftneg^(0+128),w
 10736  1142  00C4               	movwf	___ftadd@f2^(0+128)
 10737  1143  083F               	movf	(?___ftneg+1)^(0+128),w
 10738  1144  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10739  1145  0840               	movf	(?___ftneg+2)^(0+128),w
 10740  1146  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10741  1147  3000               	movlw	0
 10742  1148  00C1               	movwf	___ftadd@f1^(0+128)
 10743  1149  30B4               	movlw	180
 10744  114A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10745  114B  3043               	movlw	67
 10746  114C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10747  114D  3198  200B  3190   	fcall	___ftadd
 10748  1150  0021               	movlb	1	; select bank1
 10749  1151  0841               	movf	?___ftadd^(0+128),w
 10750  1152  0022               	movlb	2	; select bank2
 10751  1153  00BC               	movwf	_modCos$3267^(0+256)
 10752  1154  0021               	movlb	1	; select bank1
 10753  1155  0842               	movf	(?___ftadd+1)^(0+128),w
 10754  1156  0022               	movlb	2	; select bank2
 10755  1157  00BD               	movwf	(_modCos$3267+1)^(0+256)
 10756  1158  0021               	movlb	1	; select bank1
 10757  1159  0843               	movf	(?___ftadd+2)^(0+128),w
 10758  115A  0022               	movlb	2	; select bank2
 10759  115B  00BE               	movwf	(_modCos$3267+2)^(0+256)
 10760                           
 10761                           ;modulation.c: 93: shift = -(360-inflection*2)*(180/(360-inflection));
 10762  115C  083C               	movf	_modCos$3267^(0+256),w
 10763  115D  0021               	movlb	1	; select bank1
 10764  115E  00BE               	movwf	___ftneg@f1^(0+128)
 10765  115F  0022               	movlb	2	; select bank2
 10766  1160  083D               	movf	(_modCos$3267+1)^(0+256),w
 10767  1161  0021               	movlb	1	; select bank1
 10768  1162  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10769  1163  0022               	movlb	2	; select bank2
 10770  1164  083E               	movf	(_modCos$3267+2)^(0+256),w
 10771  1165  0021               	movlb	1	; select bank1
 10772  1166  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10773  1167  31BF  27C8  3190   	fcall	___ftneg
 10774  116A  0021               	movlb	1	; select bank1
 10775  116B  083E               	movf	?___ftneg^(0+128),w
 10776  116C  00AE               	movwf	___ftmul@f1^(0+128)
 10777  116D  083F               	movf	(?___ftneg+1)^(0+128),w
 10778  116E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10779  116F  0840               	movf	(?___ftneg+2)^(0+128),w
 10780  1170  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10781  1171  3000               	movlw	0
 10782  1172  00C1               	movwf	___ftadd@f1^(0+128)
 10783  1173  30B4               	movlw	180
 10784  1174  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10785  1175  3043               	movlw	67
 10786  1176  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10787  1177  0022               	movlb	2	; select bank2
 10788  1178  0837               	movf	modCos@inflection^(0+256),w
 10789  1179  0021               	movlb	1	; select bank1
 10790  117A  00BE               	movwf	___ftneg@f1^(0+128)
 10791  117B  0022               	movlb	2	; select bank2
 10792  117C  0838               	movf	(modCos@inflection+1)^(0+256),w
 10793  117D  0021               	movlb	1	; select bank1
 10794  117E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10795  117F  0022               	movlb	2	; select bank2
 10796  1180  0839               	movf	(modCos@inflection+2)^(0+256),w
 10797  1181  0021               	movlb	1	; select bank1
 10798  1182  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10799  1183  31BF  27C8  3190   	fcall	___ftneg
 10800  1186  0021               	movlb	1	; select bank1
 10801  1187  083E               	movf	?___ftneg^(0+128),w
 10802  1188  00C4               	movwf	___ftadd@f2^(0+128)
 10803  1189  083F               	movf	(?___ftneg+1)^(0+128),w
 10804  118A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10805  118B  0840               	movf	(?___ftneg+2)^(0+128),w
 10806  118C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10807  118D  3198  200B  3190   	fcall	___ftadd
 10808  1190  0021               	movlb	1	; select bank1
 10809  1191  0841               	movf	?___ftadd^(0+128),w
 10810  1192  00CE               	movwf	___ftdiv@f2^(0+128)
 10811  1193  0842               	movf	(?___ftadd+1)^(0+128),w
 10812  1194  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10813  1195  0843               	movf	(?___ftadd+2)^(0+128),w
 10814  1196  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10815  1197  3000               	movlw	0
 10816  1198  00D1               	movwf	___ftdiv@f1^(0+128)
 10817  1199  3034               	movlw	52
 10818  119A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10819  119B  3043               	movlw	67
 10820  119C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10821  119D  31A4  2434  3190   	fcall	___ftdiv
 10822  11A0  0021               	movlb	1	; select bank1
 10823  11A1  084E               	movf	?___ftdiv^(0+128),w
 10824  11A2  00B1               	movwf	___ftmul@f2^(0+128)
 10825  11A3  084F               	movf	(?___ftdiv+1)^(0+128),w
 10826  11A4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10827  11A5  0850               	movf	(?___ftdiv+2)^(0+128),w
 10828  11A6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10829  11A7  31A5  2590  3190   	fcall	___ftmul
 10830  11AA  0021               	movlb	1	; select bank1
 10831  11AB  082E               	movf	?___ftmul^(0+128),w
 10832  11AC  0022               	movlb	2	; select bank2
 10833  11AD  00BF               	movwf	modCos@shift^(0+256)
 10834  11AE  0021               	movlb	1	; select bank1
 10835  11AF  082F               	movf	(?___ftmul+1)^(0+128),w
 10836  11B0  0022               	movlb	2	; select bank2
 10837  11B1  00C0               	movwf	(modCos@shift+1)^(0+256)
 10838  11B2  0021               	movlb	1	; select bank1
 10839  11B3  0830               	movf	(?___ftmul+2)^(0+128),w
 10840  11B4  0022               	movlb	2	; select bank2
 10841  11B5  00C1               	movwf	(modCos@shift+2)^(0+256)
 10842                           
 10843                           ;modulation.c: 94: period = 180/(360-inflection);
 10844  11B6  3000               	movlw	0
 10845  11B7  0021               	movlb	1	; select bank1
 10846  11B8  00C1               	movwf	___ftadd@f1^(0+128)
 10847  11B9  30B4               	movlw	180
 10848  11BA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10849  11BB  3043               	movlw	67
 10850  11BC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10851  11BD  0022               	movlb	2	; select bank2
 10852  11BE  0837               	movf	modCos@inflection^(0+256),w
 10853  11BF  0021               	movlb	1	; select bank1
 10854  11C0  00BE               	movwf	___ftneg@f1^(0+128)
 10855  11C1  0022               	movlb	2	; select bank2
 10856  11C2  0838               	movf	(modCos@inflection+1)^(0+256),w
 10857  11C3  0021               	movlb	1	; select bank1
 10858  11C4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10859  11C5  0022               	movlb	2	; select bank2
 10860  11C6  0839               	movf	(modCos@inflection+2)^(0+256),w
 10861  11C7  0021               	movlb	1	; select bank1
 10862  11C8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10863  11C9  31BF  27C8  3190   	fcall	___ftneg
 10864  11CC  0021               	movlb	1	; select bank1
 10865  11CD  083E               	movf	?___ftneg^(0+128),w
 10866  11CE  00C4               	movwf	___ftadd@f2^(0+128)
 10867  11CF  083F               	movf	(?___ftneg+1)^(0+128),w
 10868  11D0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10869  11D1  0840               	movf	(?___ftneg+2)^(0+128),w
 10870  11D2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10871  11D3  3198  200B  3190   	fcall	___ftadd
 10872  11D6  0021               	movlb	1	; select bank1
 10873  11D7  0841               	movf	?___ftadd^(0+128),w
 10874  11D8  00CE               	movwf	___ftdiv@f2^(0+128)
 10875  11D9  0842               	movf	(?___ftadd+1)^(0+128),w
 10876  11DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10877  11DB  0843               	movf	(?___ftadd+2)^(0+128),w
 10878  11DC                     L5:	
 10879  11DC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10880  11DD  3000               	movlw	0
 10881  11DE  00D1               	movwf	___ftdiv@f1^(0+128)
 10882  11DF  3034               	movlw	52
 10883  11E0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10884  11E1  3043               	movlw	67
 10885  11E2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10886  11E3  31A4  2434  3190   	fcall	___ftdiv
 10887  11E6  0021               	movlb	1	; select bank1
 10888  11E7  084E               	movf	?___ftdiv^(0+128),w
 10889  11E8  0022               	movlb	2	; select bank2
 10890  11E9  00C2               	movwf	modCos@period^(0+256)
 10891  11EA  0021               	movlb	1	; select bank1
 10892  11EB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10893  11EC  0022               	movlb	2	; select bank2
 10894  11ED  00C3               	movwf	(modCos@period+1)^(0+256)
 10895  11EE  0021               	movlb	1	; select bank1
 10896  11EF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10897  11F0  0022               	movlb	2	; select bank2
 10898  11F1  00C4               	movwf	(modCos@period+2)^(0+256)
 10899                           
 10900                           ;modulation.c: 96: }
 10901                           ;modulation.c: 97: double tmpVal = (period*angle-shift) /3;
 10902  11F2  3000               	movlw	0
 10903  11F3  0021               	movlb	1	; select bank1
 10904  11F4  00CE               	movwf	___ftdiv@f2^(0+128)
 10905  11F5  3040               	movlw	64
 10906  11F6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10907  11F7  3040               	movlw	64
 10908  11F8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10909  11F9  0022               	movlb	2	; select bank2
 10910  11FA  083F               	movf	modCos@shift^(0+256),w
 10911  11FB  0021               	movlb	1	; select bank1
 10912  11FC  00BE               	movwf	___ftneg@f1^(0+128)
 10913  11FD  0022               	movlb	2	; select bank2
 10914  11FE  0840               	movf	(modCos@shift+1)^(0+256),w
 10915  11FF  0021               	movlb	1	; select bank1
 10916  1200  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10917  1201  0022               	movlb	2	; select bank2
 10918  1202  0841               	movf	(modCos@shift+2)^(0+256),w
 10919  1203  0021               	movlb	1	; select bank1
 10920  1204  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10921  1205  31BF  27C8  3190   	fcall	___ftneg
 10922  1208  0021               	movlb	1	; select bank1
 10923  1209  083E               	movf	?___ftneg^(0+128),w
 10924  120A  00C1               	movwf	___ftadd@f1^(0+128)
 10925  120B  083F               	movf	(?___ftneg+1)^(0+128),w
 10926  120C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10927  120D  0840               	movf	(?___ftneg+2)^(0+128),w
 10928  120E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10929  120F  0022               	movlb	2	; select bank2
 10930  1210  0834               	movf	modCos@angle^(0+256),w
 10931  1211  0021               	movlb	1	; select bank1
 10932  1212  00AE               	movwf	___ftmul@f1^(0+128)
 10933  1213  0022               	movlb	2	; select bank2
 10934  1214  0835               	movf	(modCos@angle+1)^(0+256),w
 10935  1215  0021               	movlb	1	; select bank1
 10936  1216  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10937  1217  0022               	movlb	2	; select bank2
 10938  1218  0836               	movf	(modCos@angle+2)^(0+256),w
 10939  1219  0021               	movlb	1	; select bank1
 10940  121A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10941  121B  0022               	movlb	2	; select bank2
 10942  121C  0842               	movf	modCos@period^(0+256),w
 10943  121D  0021               	movlb	1	; select bank1
 10944  121E  00B1               	movwf	___ftmul@f2^(0+128)
 10945  121F  0022               	movlb	2	; select bank2
 10946  1220  0843               	movf	(modCos@period+1)^(0+256),w
 10947  1221  0021               	movlb	1	; select bank1
 10948  1222  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10949  1223  0022               	movlb	2	; select bank2
 10950  1224  0844               	movf	(modCos@period+2)^(0+256),w
 10951  1225  0021               	movlb	1	; select bank1
 10952  1226  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10953  1227  31A5  2590  3190   	fcall	___ftmul
 10954  122A  0021               	movlb	1	; select bank1
 10955  122B  082E               	movf	?___ftmul^(0+128),w
 10956  122C  00C4               	movwf	___ftadd@f2^(0+128)
 10957  122D  082F               	movf	(?___ftmul+1)^(0+128),w
 10958  122E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10959  122F  0830               	movf	(?___ftmul+2)^(0+128),w
 10960  1230  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10961  1231  3198  200B  3190   	fcall	___ftadd
 10962  1234  0021               	movlb	1	; select bank1
 10963  1235  0841               	movf	?___ftadd^(0+128),w
 10964  1236  00D1               	movwf	___ftdiv@f1^(0+128)
 10965  1237  0842               	movf	(?___ftadd+1)^(0+128),w
 10966  1238  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10967  1239  0843               	movf	(?___ftadd+2)^(0+128),w
 10968  123A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10969  123B  31A4  2434  3190   	fcall	___ftdiv
 10970  123E  0021               	movlb	1	; select bank1
 10971  123F  084E               	movf	?___ftdiv^(0+128),w
 10972  1240  0022               	movlb	2	; select bank2
 10973  1241  00C5               	movwf	modCos@tmpVal^(0+256)
 10974  1242  0021               	movlb	1	; select bank1
 10975  1243  084F               	movf	(?___ftdiv+1)^(0+128),w
 10976  1244  0022               	movlb	2	; select bank2
 10977  1245  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 10978  1246  0021               	movlb	1	; select bank1
 10979  1247  0850               	movf	(?___ftdiv+2)^(0+128),w
 10980  1248  0022               	movlb	2	; select bank2
 10981  1249  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 10982                           
 10983                           ;modulation.c: 98: tmpVal = cosArray[(int)(tmpVal)];
 10984  124A  0845               	movf	modCos@tmpVal^(0+256),w
 10985  124B  00A0               	movwf	___fttol@f1^(0+256)
 10986  124C  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 10987  124D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10988  124E  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 10989  124F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10990  1250  31A1  2164  3190   	fcall	___fttol
 10991  1253  0022               	movlb	2	; select bank2
 10992  1254  0821               	movf	(?___fttol^(0+256)+1),w
 10993  1255  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10994  1256  0820               	movf	?___fttol^(0+256),w
 10995  1257  00AE               	movwf	___wmul@multiplier^(0+256)
 10996  1258  3003               	movlw	3
 10997  1259  00B0               	movwf	___wmul@multiplicand^(0+256)
 10998  125A  3000               	movlw	0
 10999  125B  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 11000  125C  31B2  221C  3190   	fcall	___wmul
 11001  125F  3082               	movlw	130
 11002  1260  0022               	movlb	2	; select bank2
 11003  1261  00BA               	movwf	??_modCos^(0+256)
 11004  1262  3024               	movlw	36
 11005  1263  00BB               	movwf	(??_modCos^(0+256)+1)
 11006  1264  082E               	movf	?___wmul^(0+256),w
 11007  1265  073A               	addwf	??_modCos^(0+256),w
 11008  1266  0086               	movwf	6
 11009  1267  082F               	movf	(?___wmul+1)^(0+256),w
 11010  1268  3D3B               	addwfc	(??_modCos+1)^(0+256),w
 11011  1269  0087               	movwf	7
 11012  126A  3F40               	moviw [0]fsr1
 11013  126B  00C5               	movwf	modCos@tmpVal^(0+256)
 11014  126C  3F41               	moviw [1]fsr1
 11015  126D  00C6               	movwf	(modCos@tmpVal+1)^(0+256)
 11016  126E  3F42               	moviw [2]fsr1
 11017  126F  00C7               	movwf	(modCos@tmpVal+2)^(0+256)
 11018                           
 11019                           ;modulation.c: 99: return (int)(-100.0 * tmpVal);
 11020  1270  0845               	movf	modCos@tmpVal^(0+256),w
 11021  1271  0021               	movlb	1	; select bank1
 11022  1272  00B1               	movwf	___ftmul@f2^(0+128)
 11023  1273  0022               	movlb	2	; select bank2
 11024  1274  0846               	movf	(modCos@tmpVal+1)^(0+256),w
 11025  1275  0021               	movlb	1	; select bank1
 11026  1276  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11027  1277  0022               	movlb	2	; select bank2
 11028  1278  0847               	movf	(modCos@tmpVal+2)^(0+256),w
 11029  1279  0021               	movlb	1	; select bank1
 11030  127A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11031  127B  3000               	movlw	0
 11032  127C  00AE               	movwf	___ftmul@f1^(0+128)
 11033  127D  30C8               	movlw	200
 11034  127E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11035  127F  30C2               	movlw	194
 11036  1280  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11037  1281  31A5  2590  3190   	fcall	___ftmul
 11038  1284  0021               	movlb	1	; select bank1
 11039  1285  082E               	movf	?___ftmul^(0+128),w
 11040  1286  0022               	movlb	2	; select bank2
 11041  1287  00A0               	movwf	___fttol@f1^(0+256)
 11042  1288  0021               	movlb	1	; select bank1
 11043  1289  082F               	movf	(?___ftmul+1)^(0+128),w
 11044  128A  0022               	movlb	2	; select bank2
 11045  128B  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11046  128C  0021               	movlb	1	; select bank1
 11047  128D  0830               	movf	(?___ftmul+2)^(0+128),w
 11048  128E  0022               	movlb	2	; select bank2
 11049  128F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11050  1290  31A1  2164         	fcall	___fttol
 11051  1292  0022               	movlb	2	; select bank2
 11052  1293  0821               	movf	(?___fttol^(0+256)+1),w
 11053  1294  00B5               	movwf	(?_modCos+1)^(0+256)
 11054  1295  0820               	movf	?___fttol^(0+256),w
 11055  1296  00B4               	movwf	?_modCos^(0+256)
 11056  1297  0008               	return
 11057  1298                     __end_of_modCos:	
 11058                           
 11059                           	psect	text22
 11060  3254                     __ptext22:	
 11061 ;; *************** function _modSawRev *****************
 11062 ;; Defined at:
 11063 ;;		line 140 in file "modulation.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;  angle           3   34[BANK2 ] int 
 11066 ;;  inflection      3   37[BANK2 ] int 
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;		None
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  2   34[BANK2 ] int 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2, status,0, pclath, cstack
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11078 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11080 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11081 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11082 ;;Total ram usage:        8 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    8
 11085 ;; This function calls:
 11086 ;;		_modSaw
 11087 ;; This function is called by:
 11088 ;;		_updateModulationArray
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _modSawRev
 11094  3254                     _modSawRev:	
 11095                           
 11096                           ;modulation.c: 141: return -1 * modSaw(angle, inflection);
 11097                           
 11098                           ;incstack = 0
 11099                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 11100  3254  0022               	movlb	2	; select bank2
 11101  3255  0842               	movf	modSawRev@angle^(0+256),w
 11102  3256  00AE               	movwf	modSaw@angle^(0+256)
 11103  3257  0843               	movf	(modSawRev@angle+1)^(0+256),w
 11104  3258  00AF               	movwf	(modSaw@angle+1)^(0+256)
 11105  3259  0844               	movf	(modSawRev@angle+2)^(0+256),w
 11106  325A  00B0               	movwf	(modSaw@angle+2)^(0+256)
 11107  325B  0845               	movf	modSawRev@inflection^(0+256),w
 11108  325C  00B1               	movwf	modSaw@inflection^(0+256)
 11109  325D  0846               	movf	(modSawRev@inflection+1)^(0+256),w
 11110  325E  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 11111  325F  0847               	movf	(modSawRev@inflection+2)^(0+256),w
 11112  3260  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 11113  3261  319D  25E8         	fcall	_modSaw
 11114  3263  0022               	movlb	2	; select bank2
 11115  3264  092E               	comf	?_modSaw^(0+256),w
 11116  3265  00C8               	movwf	??_modSawRev^(0+256)
 11117  3266  092F               	comf	(?_modSaw+1)^(0+256),w
 11118  3267  00C9               	movwf	(??_modSawRev^(0+256)+1)
 11119  3268  0AC8               	incf	??_modSawRev^(0+256),f
 11120  3269  1903               	skipnz
 11121  326A  0AC9               	incf	(??_modSawRev^(0+256)+1),f
 11122  326B  0848               	movf	??_modSawRev^(0+256),w
 11123  326C  00C2               	movwf	?_modSawRev^(0+256)
 11124  326D  0849               	movf	(??_modSawRev+1)^(0+256),w
 11125  326E  00C3               	movwf	(?_modSawRev+1)^(0+256)
 11126  326F  0008               	return
 11127  3270                     __end_of_modSawRev:	
 11128                           
 11129                           	psect	text23
 11130  1DE8                     __ptext23:	
 11131 ;; *************** function _modSaw *****************
 11132 ;; Defined at:
 11133 ;;		line 125 in file "modulation.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  angle           3   14[BANK2 ] int 
 11136 ;;  inflection      3   17[BANK2 ] int 
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;  period          3   31[BANK2 ] int 
 11139 ;;  shift           3   28[BANK2 ] int 
 11140 ;;  mod             2   26[BANK2 ] int 
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  2   14[BANK2 ] int 
 11143 ;; Registers used:
 11144 ;;		wreg, status,2, status,0, pclath, cstack
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11150 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11151 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11153 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11154 ;;Total ram usage:       20 bytes
 11155 ;; Hardware stack levels used:    1
 11156 ;; Hardware stack levels required when called:    7
 11157 ;; This function calls:
 11158 ;;		___ftadd
 11159 ;;		___ftdiv
 11160 ;;		___ftge
 11161 ;;		___ftmul
 11162 ;;		___ftneg
 11163 ;;		___fttol
 11164 ;; This function is called by:
 11165 ;;		_updateModulationArray
 11166 ;;		_modSawRev
 11167 ;; This function uses a non-reentrant model
 11168 ;;
 11169                           
 11170                           
 11171                           ;psect for function _modSaw
 11172  1DE8                     _modSaw:	
 11173                           
 11174                           ;modulation.c: 126: double period = 1.0;
 11175                           
 11176                           ;incstack = 0
 11177                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 11178  1DE8  3000               	movlw	0
 11179  1DE9  0022               	movlb	2	; select bank2
 11180  1DEA  00BF               	movwf	modSaw@period^(0+256)
 11181  1DEB  3080               	movlw	128
 11182  1DEC  00C0               	movwf	(modSaw@period+1)^(0+256)
 11183  1DED  303F               	movlw	63
 11184  1DEE  00C1               	movwf	(modSaw@period+2)^(0+256)
 11185                           
 11186                           ;modulation.c: 127: double shift = 0;
 11187  1DEF  3000               	movlw	0
 11188  1DF0  00BC               	movwf	modSaw@shift^(0+256)
 11189  1DF1  3000               	movlw	0
 11190  1DF2  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11191  1DF3  3000               	movlw	0
 11192  1DF4  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11193                           
 11194                           ;modulation.c: 129: if(angle<=inflection) {
 11195  1DF5  0831               	movf	modSaw@inflection^(0+256),w
 11196  1DF6  0021               	movlb	1	; select bank1
 11197  1DF7  00A0               	movwf	___ftge@ff1^(0+128)
 11198  1DF8  0022               	movlb	2	; select bank2
 11199  1DF9  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11200  1DFA  0021               	movlb	1	; select bank1
 11201  1DFB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11202  1DFC  0022               	movlb	2	; select bank2
 11203  1DFD  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11204  1DFE  0021               	movlb	1	; select bank1
 11205  1DFF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11206  1E00  0022               	movlb	2	; select bank2
 11207  1E01  082E               	movf	modSaw@angle^(0+256),w
 11208  1E02  0021               	movlb	1	; select bank1
 11209  1E03  00A3               	movwf	___ftge@ff2^(0+128)
 11210  1E04  0022               	movlb	2	; select bank2
 11211  1E05  082F               	movf	(modSaw@angle+1)^(0+256),w
 11212  1E06  0021               	movlb	1	; select bank1
 11213  1E07  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11214  1E08  0022               	movlb	2	; select bank2
 11215  1E09  0830               	movf	(modSaw@angle+2)^(0+256),w
 11216  1E0A  0021               	movlb	1	; select bank1
 11217  1E0B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11218  1E0C  31B6  26CF  319D   	fcall	___ftge
 11219  1E0F  1C03               	btfss	3,0
 11220  1E10  2E1D               	goto	l7211
 11221                           
 11222                           ;modulation.c: 130: period = 180.0/inflection;
 11223  1E11  0022               	movlb	2	; select bank2
 11224  1E12  0831               	movf	modSaw@inflection^(0+256),w
 11225  1E13  0021               	movlb	1	; select bank1
 11226  1E14  00CE               	movwf	___ftdiv@f2^(0+128)
 11227  1E15  0022               	movlb	2	; select bank2
 11228  1E16  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11229  1E17  0021               	movlb	1	; select bank1
 11230  1E18  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11231  1E19  0022               	movlb	2	; select bank2
 11232  1E1A  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11233  1E1B  0021               	movlb	1	; select bank1
 11234  1E1C  2ED8               	goto	L6
 11235  1E1D                     l7211:	
 11236                           ;modulation.c: 131: } else {
 11237                           
 11238                           
 11239                           ;modulation.c: 132: shift = -(360-inflection*2)*(180/(360-inflection));
 11240  1E1D  0022               	movlb	2	; select bank2
 11241  1E1E  0831               	movf	modSaw@inflection^(0+256),w
 11242  1E1F  0021               	movlb	1	; select bank1
 11243  1E20  00B1               	movwf	___ftmul@f2^(0+128)
 11244  1E21  0022               	movlb	2	; select bank2
 11245  1E22  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11246  1E23  0021               	movlb	1	; select bank1
 11247  1E24  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11248  1E25  0022               	movlb	2	; select bank2
 11249  1E26  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11250  1E27  0021               	movlb	1	; select bank1
 11251  1E28  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11252  1E29  3000               	movlw	0
 11253  1E2A  00AE               	movwf	___ftmul@f1^(0+128)
 11254  1E2B  3000               	movlw	0
 11255  1E2C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11256  1E2D  3040               	movlw	64
 11257  1E2E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11258  1E2F  31A5  2590  319D   	fcall	___ftmul
 11259  1E32  0021               	movlb	1	; select bank1
 11260  1E33  082E               	movf	?___ftmul^(0+128),w
 11261  1E34  00BE               	movwf	___ftneg@f1^(0+128)
 11262  1E35  082F               	movf	(?___ftmul+1)^(0+128),w
 11263  1E36  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11264  1E37  0830               	movf	(?___ftmul+2)^(0+128),w
 11265  1E38  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11266  1E39  31BF  27C8  319D   	fcall	___ftneg
 11267  1E3C  0021               	movlb	1	; select bank1
 11268  1E3D  083E               	movf	?___ftneg^(0+128),w
 11269  1E3E  00C4               	movwf	___ftadd@f2^(0+128)
 11270  1E3F  083F               	movf	(?___ftneg+1)^(0+128),w
 11271  1E40  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11272  1E41  0840               	movf	(?___ftneg+2)^(0+128),w
 11273  1E42  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11274  1E43  3000               	movlw	0
 11275  1E44  00C1               	movwf	___ftadd@f1^(0+128)
 11276  1E45  30B4               	movlw	180
 11277  1E46  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11278  1E47  3043               	movlw	67
 11279  1E48  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11280  1E49  3198  200B  319D   	fcall	___ftadd
 11281  1E4C  0021               	movlb	1	; select bank1
 11282  1E4D  0841               	movf	?___ftadd^(0+128),w
 11283  1E4E  0022               	movlb	2	; select bank2
 11284  1E4F  00B4               	movwf	_modSaw$3269^(0+256)
 11285  1E50  0021               	movlb	1	; select bank1
 11286  1E51  0842               	movf	(?___ftadd+1)^(0+128),w
 11287  1E52  0022               	movlb	2	; select bank2
 11288  1E53  00B5               	movwf	(_modSaw$3269+1)^(0+256)
 11289  1E54  0021               	movlb	1	; select bank1
 11290  1E55  0843               	movf	(?___ftadd+2)^(0+128),w
 11291  1E56  0022               	movlb	2	; select bank2
 11292  1E57  00B6               	movwf	(_modSaw$3269+2)^(0+256)
 11293                           
 11294                           ;modulation.c: 132: shift = -(360-inflection*2)*(180/(360-inflection));
 11295  1E58  0834               	movf	_modSaw$3269^(0+256),w
 11296  1E59  0021               	movlb	1	; select bank1
 11297  1E5A  00BE               	movwf	___ftneg@f1^(0+128)
 11298  1E5B  0022               	movlb	2	; select bank2
 11299  1E5C  0835               	movf	(_modSaw$3269+1)^(0+256),w
 11300  1E5D  0021               	movlb	1	; select bank1
 11301  1E5E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11302  1E5F  0022               	movlb	2	; select bank2
 11303  1E60  0836               	movf	(_modSaw$3269+2)^(0+256),w
 11304  1E61  0021               	movlb	1	; select bank1
 11305  1E62  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11306  1E63  31BF  27C8  319D   	fcall	___ftneg
 11307  1E66  0021               	movlb	1	; select bank1
 11308  1E67  083E               	movf	?___ftneg^(0+128),w
 11309  1E68  00AE               	movwf	___ftmul@f1^(0+128)
 11310  1E69  083F               	movf	(?___ftneg+1)^(0+128),w
 11311  1E6A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11312  1E6B  0840               	movf	(?___ftneg+2)^(0+128),w
 11313  1E6C  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11314  1E6D  3000               	movlw	0
 11315  1E6E  00C1               	movwf	___ftadd@f1^(0+128)
 11316  1E6F  30B4               	movlw	180
 11317  1E70  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11318  1E71  3043               	movlw	67
 11319  1E72  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11320  1E73  0022               	movlb	2	; select bank2
 11321  1E74  0831               	movf	modSaw@inflection^(0+256),w
 11322  1E75  0021               	movlb	1	; select bank1
 11323  1E76  00BE               	movwf	___ftneg@f1^(0+128)
 11324  1E77  0022               	movlb	2	; select bank2
 11325  1E78  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11326  1E79  0021               	movlb	1	; select bank1
 11327  1E7A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11328  1E7B  0022               	movlb	2	; select bank2
 11329  1E7C  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11330  1E7D  0021               	movlb	1	; select bank1
 11331  1E7E  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11332  1E7F  31BF  27C8  319D   	fcall	___ftneg
 11333  1E82  0021               	movlb	1	; select bank1
 11334  1E83  083E               	movf	?___ftneg^(0+128),w
 11335  1E84  00C4               	movwf	___ftadd@f2^(0+128)
 11336  1E85  083F               	movf	(?___ftneg+1)^(0+128),w
 11337  1E86  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11338  1E87  0840               	movf	(?___ftneg+2)^(0+128),w
 11339  1E88  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11340  1E89  3198  200B  319D   	fcall	___ftadd
 11341  1E8C  0021               	movlb	1	; select bank1
 11342  1E8D  0841               	movf	?___ftadd^(0+128),w
 11343  1E8E  00CE               	movwf	___ftdiv@f2^(0+128)
 11344  1E8F  0842               	movf	(?___ftadd+1)^(0+128),w
 11345  1E90  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11346  1E91  0843               	movf	(?___ftadd+2)^(0+128),w
 11347  1E92  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11348  1E93  3000               	movlw	0
 11349  1E94  00D1               	movwf	___ftdiv@f1^(0+128)
 11350  1E95  3034               	movlw	52
 11351  1E96  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11352  1E97  3043               	movlw	67
 11353  1E98  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11354  1E99  31A4  2434  319D   	fcall	___ftdiv
 11355  1E9C  0021               	movlb	1	; select bank1
 11356  1E9D  084E               	movf	?___ftdiv^(0+128),w
 11357  1E9E  00B1               	movwf	___ftmul@f2^(0+128)
 11358  1E9F  084F               	movf	(?___ftdiv+1)^(0+128),w
 11359  1EA0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11360  1EA1  0850               	movf	(?___ftdiv+2)^(0+128),w
 11361  1EA2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11362  1EA3  31A5  2590  319D   	fcall	___ftmul
 11363  1EA6  0021               	movlb	1	; select bank1
 11364  1EA7  082E               	movf	?___ftmul^(0+128),w
 11365  1EA8  0022               	movlb	2	; select bank2
 11366  1EA9  00BC               	movwf	modSaw@shift^(0+256)
 11367  1EAA  0021               	movlb	1	; select bank1
 11368  1EAB  082F               	movf	(?___ftmul+1)^(0+128),w
 11369  1EAC  0022               	movlb	2	; select bank2
 11370  1EAD  00BD               	movwf	(modSaw@shift+1)^(0+256)
 11371  1EAE  0021               	movlb	1	; select bank1
 11372  1EAF  0830               	movf	(?___ftmul+2)^(0+128),w
 11373  1EB0  0022               	movlb	2	; select bank2
 11374  1EB1  00BE               	movwf	(modSaw@shift+2)^(0+256)
 11375                           
 11376                           ;modulation.c: 133: period = 180/(360-inflection);
 11377  1EB2  3000               	movlw	0
 11378  1EB3  0021               	movlb	1	; select bank1
 11379  1EB4  00C1               	movwf	___ftadd@f1^(0+128)
 11380  1EB5  30B4               	movlw	180
 11381  1EB6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11382  1EB7  3043               	movlw	67
 11383  1EB8  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11384  1EB9  0022               	movlb	2	; select bank2
 11385  1EBA  0831               	movf	modSaw@inflection^(0+256),w
 11386  1EBB  0021               	movlb	1	; select bank1
 11387  1EBC  00BE               	movwf	___ftneg@f1^(0+128)
 11388  1EBD  0022               	movlb	2	; select bank2
 11389  1EBE  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11390  1EBF  0021               	movlb	1	; select bank1
 11391  1EC0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11392  1EC1  0022               	movlb	2	; select bank2
 11393  1EC2  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11394  1EC3  0021               	movlb	1	; select bank1
 11395  1EC4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11396  1EC5  31BF  27C8  319D   	fcall	___ftneg
 11397  1EC8  0021               	movlb	1	; select bank1
 11398  1EC9  083E               	movf	?___ftneg^(0+128),w
 11399  1ECA  00C4               	movwf	___ftadd@f2^(0+128)
 11400  1ECB  083F               	movf	(?___ftneg+1)^(0+128),w
 11401  1ECC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11402  1ECD  0840               	movf	(?___ftneg+2)^(0+128),w
 11403  1ECE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11404  1ECF  3198  200B  319D   	fcall	___ftadd
 11405  1ED2  0021               	movlb	1	; select bank1
 11406  1ED3  0841               	movf	?___ftadd^(0+128),w
 11407  1ED4  00CE               	movwf	___ftdiv@f2^(0+128)
 11408  1ED5  0842               	movf	(?___ftadd+1)^(0+128),w
 11409  1ED6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11410  1ED7  0843               	movf	(?___ftadd+2)^(0+128),w
 11411  1ED8                     L6:	
 11412  1ED8  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11413  1ED9  3000               	movlw	0
 11414  1EDA  00D1               	movwf	___ftdiv@f1^(0+128)
 11415  1EDB  3034               	movlw	52
 11416  1EDC  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11417  1EDD  3043               	movlw	67
 11418  1EDE  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11419  1EDF  31A4  2434  319D   	fcall	___ftdiv
 11420  1EE2  0021               	movlb	1	; select bank1
 11421  1EE3  084E               	movf	?___ftdiv^(0+128),w
 11422  1EE4  0022               	movlb	2	; select bank2
 11423  1EE5  00BF               	movwf	modSaw@period^(0+256)
 11424  1EE6  0021               	movlb	1	; select bank1
 11425  1EE7  084F               	movf	(?___ftdiv+1)^(0+128),w
 11426  1EE8  0022               	movlb	2	; select bank2
 11427  1EE9  00C0               	movwf	(modSaw@period+1)^(0+256)
 11428  1EEA  0021               	movlb	1	; select bank1
 11429  1EEB  0850               	movf	(?___ftdiv+2)^(0+128),w
 11430  1EEC  0022               	movlb	2	; select bank2
 11431  1EED  00C1               	movwf	(modSaw@period+2)^(0+256)
 11432                           
 11433                           ;modulation.c: 134: }
 11434                           ;modulation.c: 136: int mod = (int)((period*angle-shift-180)*5/9);
 11435  1EEE  083F               	movf	modSaw@period^(0+256),w
 11436  1EEF  0021               	movlb	1	; select bank1
 11437  1EF0  00B1               	movwf	___ftmul@f2^(0+128)
 11438  1EF1  0022               	movlb	2	; select bank2
 11439  1EF2  0840               	movf	(modSaw@period+1)^(0+256),w
 11440  1EF3  0021               	movlb	1	; select bank1
 11441  1EF4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11442  1EF5  0022               	movlb	2	; select bank2
 11443  1EF6  0841               	movf	(modSaw@period+2)^(0+256),w
 11444  1EF7  0021               	movlb	1	; select bank1
 11445  1EF8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11446  1EF9  0022               	movlb	2	; select bank2
 11447  1EFA  082E               	movf	modSaw@angle^(0+256),w
 11448  1EFB  0021               	movlb	1	; select bank1
 11449  1EFC  00AE               	movwf	___ftmul@f1^(0+128)
 11450  1EFD  0022               	movlb	2	; select bank2
 11451  1EFE  082F               	movf	(modSaw@angle+1)^(0+256),w
 11452  1EFF  0021               	movlb	1	; select bank1
 11453  1F00  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11454  1F01  0022               	movlb	2	; select bank2
 11455  1F02  0830               	movf	(modSaw@angle+2)^(0+256),w
 11456  1F03  0021               	movlb	1	; select bank1
 11457  1F04  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11458  1F05  31A5  2590  319D   	fcall	___ftmul
 11459  1F08  0021               	movlb	1	; select bank1
 11460  1F09  082E               	movf	?___ftmul^(0+128),w
 11461  1F0A  00C4               	movwf	___ftadd@f2^(0+128)
 11462  1F0B  082F               	movf	(?___ftmul+1)^(0+128),w
 11463  1F0C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11464  1F0D  0830               	movf	(?___ftmul+2)^(0+128),w
 11465  1F0E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11466  1F0F  0022               	movlb	2	; select bank2
 11467  1F10  083C               	movf	modSaw@shift^(0+256),w
 11468  1F11  0021               	movlb	1	; select bank1
 11469  1F12  00BE               	movwf	___ftneg@f1^(0+128)
 11470  1F13  0022               	movlb	2	; select bank2
 11471  1F14  083D               	movf	(modSaw@shift+1)^(0+256),w
 11472  1F15  0021               	movlb	1	; select bank1
 11473  1F16  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11474  1F17  0022               	movlb	2	; select bank2
 11475  1F18  083E               	movf	(modSaw@shift+2)^(0+256),w
 11476  1F19  0021               	movlb	1	; select bank1
 11477  1F1A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11478  1F1B  31BF  27C8  319D   	fcall	___ftneg
 11479  1F1E  0021               	movlb	1	; select bank1
 11480  1F1F  083E               	movf	?___ftneg^(0+128),w
 11481  1F20  00C1               	movwf	___ftadd@f1^(0+128)
 11482  1F21  083F               	movf	(?___ftneg+1)^(0+128),w
 11483  1F22  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11484  1F23  0840               	movf	(?___ftneg+2)^(0+128),w
 11485  1F24  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11486  1F25  3198  200B  319D   	fcall	___ftadd
 11487  1F28  0021               	movlb	1	; select bank1
 11488  1F29  0841               	movf	?___ftadd^(0+128),w
 11489  1F2A  0022               	movlb	2	; select bank2
 11490  1F2B  00B7               	movwf	_modSaw$3270^(0+256)
 11491  1F2C  0021               	movlb	1	; select bank1
 11492  1F2D  0842               	movf	(?___ftadd+1)^(0+128),w
 11493  1F2E  0022               	movlb	2	; select bank2
 11494  1F2F  00B8               	movwf	(_modSaw$3270+1)^(0+256)
 11495  1F30  0021               	movlb	1	; select bank1
 11496  1F31  0843               	movf	(?___ftadd+2)^(0+128),w
 11497  1F32  0022               	movlb	2	; select bank2
 11498  1F33  00B9               	movwf	(_modSaw$3270+2)^(0+256)
 11499                           
 11500                           ;modulation.c: 134: }
 11501                           ;modulation.c: 136: int mod = (int)((period*angle-shift-180)*5/9);
 11502  1F34  0837               	movf	_modSaw$3270^(0+256),w
 11503  1F35  0021               	movlb	1	; select bank1
 11504  1F36  00C4               	movwf	___ftadd@f2^(0+128)
 11505  1F37  0022               	movlb	2	; select bank2
 11506  1F38  0838               	movf	(_modSaw$3270+1)^(0+256),w
 11507  1F39  0021               	movlb	1	; select bank1
 11508  1F3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11509  1F3B  0022               	movlb	2	; select bank2
 11510  1F3C  0839               	movf	(_modSaw$3270+2)^(0+256),w
 11511  1F3D  0021               	movlb	1	; select bank1
 11512  1F3E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11513  1F3F  3000               	movlw	0
 11514  1F40  00C1               	movwf	___ftadd@f1^(0+128)
 11515  1F41  3034               	movlw	52
 11516  1F42  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11517  1F43  30C3               	movlw	195
 11518  1F44  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11519  1F45  3198  200B  319D   	fcall	___ftadd
 11520  1F48  0021               	movlb	1	; select bank1
 11521  1F49  0841               	movf	?___ftadd^(0+128),w
 11522  1F4A  00B1               	movwf	___ftmul@f2^(0+128)
 11523  1F4B  0842               	movf	(?___ftadd+1)^(0+128),w
 11524  1F4C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11525  1F4D  0843               	movf	(?___ftadd+2)^(0+128),w
 11526  1F4E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11527  1F4F  3000               	movlw	0
 11528  1F50  00AE               	movwf	___ftmul@f1^(0+128)
 11529  1F51  30A0               	movlw	160
 11530  1F52  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11531  1F53  3040               	movlw	64
 11532  1F54  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11533  1F55  31A5  2590  319D   	fcall	___ftmul
 11534  1F58  0021               	movlb	1	; select bank1
 11535  1F59  082E               	movf	?___ftmul^(0+128),w
 11536  1F5A  00D1               	movwf	___ftdiv@f1^(0+128)
 11537  1F5B  082F               	movf	(?___ftmul+1)^(0+128),w
 11538  1F5C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11539  1F5D  0830               	movf	(?___ftmul+2)^(0+128),w
 11540  1F5E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11541  1F5F  3000               	movlw	0
 11542  1F60  00CE               	movwf	___ftdiv@f2^(0+128)
 11543  1F61  3010               	movlw	16
 11544  1F62  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11545  1F63  3041               	movlw	65
 11546  1F64  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11547  1F65  31A4  2434  319D   	fcall	___ftdiv
 11548  1F68  0021               	movlb	1	; select bank1
 11549  1F69  084E               	movf	?___ftdiv^(0+128),w
 11550  1F6A  0022               	movlb	2	; select bank2
 11551  1F6B  00A0               	movwf	___fttol@f1^(0+256)
 11552  1F6C  0021               	movlb	1	; select bank1
 11553  1F6D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11554  1F6E  0022               	movlb	2	; select bank2
 11555  1F6F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11556  1F70  0021               	movlb	1	; select bank1
 11557  1F71  0850               	movf	(?___ftdiv+2)^(0+128),w
 11558  1F72  0022               	movlb	2	; select bank2
 11559  1F73  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11560  1F74  31A1  2164         	fcall	___fttol
 11561  1F76  0022               	movlb	2	; select bank2
 11562  1F77  0821               	movf	(?___fttol^(0+256)+1),w
 11563  1F78  00BB               	movwf	(modSaw@mod+1)^(0+256)
 11564  1F79  0820               	movf	?___fttol^(0+256),w
 11565  1F7A  00BA               	movwf	modSaw@mod^(0+256)
 11566                           
 11567                           ;modulation.c: 137: return mod;
 11568  1F7B  083B               	movf	(modSaw@mod+1)^(0+256),w
 11569  1F7C  00AF               	movwf	(?_modSaw+1)^(0+256)
 11570  1F7D  083A               	movf	modSaw@mod^(0+256),w
 11571  1F7E  00AE               	movwf	?_modSaw^(0+256)
 11572  1F7F  0008               	return
 11573  1F80                     __end_of_modSaw:	
 11574                           
 11575                           	psect	text24
 11576  2276                     __ptext24:	
 11577 ;; *************** function _set_subdivision *****************
 11578 ;; Defined at:
 11579 ;;		line 77 in file "user.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;  x               2   14[BANK2 ] int 
 11582 ;;  y               2   16[BANK2 ] int 
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;  scalar          3   18[BANK2 ] float 
 11585 ;;  tmpX            2   21[BANK2 ] int 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  2   14[BANK2 ] int 
 11588 ;; Registers used:
 11589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11595 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11596 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11598 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11599 ;;Total ram usage:        9 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    7
 11602 ;; This function calls:
 11603 ;;		___awtoft
 11604 ;;		___ftmul
 11605 ;;		___fttol
 11606 ;; This function is called by:
 11607 ;;		_main
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           
 11612                           ;psect for function _set_subdivision
 11613  2276                     _set_subdivision:	
 11614                           
 11615                           ;user.c: 81: adjust_mod_delay = 0;
 11616                           
 11617                           ;incstack = 0
 11618                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11619  2276  0024               	movlb	4	; select bank4
 11620  2277  01C6               	clrf	_adjust_mod_delay^(0+512)
 11621                           
 11622                           ;user.c: 82: int tmpX = x;
 11623  2278  0022               	movlb	2	; select bank2
 11624  2279  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11625  227A  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11626  227B  082E               	movf	set_subdivision@x^(0+256),w
 11627  227C  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11628                           
 11629                           ;user.c: 83: float scalar = 1.0;
 11630  227D  3000               	movlw	0
 11631  227E  00B2               	movwf	set_subdivision@scalar^(0+256)
 11632  227F  3080               	movlw	128
 11633  2280  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11634  2281  303F               	movlw	63
 11635  2282  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11636                           
 11637                           ;user.c: 85: switch (y) {
 11638  2283  2AA3               	goto	l8299
 11639  2284                     l8285:	
 11640                           ;user.c: 86: case 1:
 11641                           
 11642                           
 11643                           ;user.c: 87: scalar = 2.0;
 11644  2284  3000               	movlw	0
 11645  2285  00B2               	movwf	set_subdivision@scalar^(0+256)
 11646  2286  3000               	movlw	0
 11647  2287  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11648  2288  3040               	movlw	64
 11649  2289  2AA1               	goto	L11
 11650  228A                     l8287:	
 11651                           ;user.c: 89: case 2:
 11652                           
 11653                           ;user.c: 88: break;
 11654                           
 11655                           
 11656                           ;user.c: 90: scalar = 0.6666;
 11657  228A  30A6               	movlw	166
 11658  228B  00B2               	movwf	set_subdivision@scalar^(0+256)
 11659  228C  302A               	movlw	42
 11660  228D  2A9F               	goto	L12
 11661  228E                     l8289:	
 11662                           ;user.c: 92: case 3:
 11663                           
 11664                           ;user.c: 91: break;
 11665                           
 11666                           
 11667                           ;user.c: 93: scalar = .5;
 11668  228E  3000               	movlw	0
 11669  228F  00B2               	movwf	set_subdivision@scalar^(0+256)
 11670  2290  3000               	movlw	0
 11671  2291  2A9F               	goto	L12
 11672  2292                     l8291:	
 11673                           ;user.c: 95: case 4:
 11674                           
 11675                           ;user.c: 94: break;
 11676                           
 11677                           
 11678                           ;user.c: 96: scalar = 0.3333;
 11679  2292  30A6               	movlw	166
 11680  2293  00B2               	movwf	set_subdivision@scalar^(0+256)
 11681  2294  30AA               	movlw	170
 11682  2295  2A99               	goto	L13
 11683  2296                     l8293:	
 11684                           ;user.c: 98: case 5:
 11685                           
 11686                           ;user.c: 97: break;
 11687                           
 11688                           
 11689                           ;user.c: 99: scalar = 0.25;
 11690  2296  3000               	movlw	0
 11691  2297  00B2               	movwf	set_subdivision@scalar^(0+256)
 11692  2298  3080               	movlw	128
 11693  2299                     L13:	
 11694  2299  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11695  229A  303E               	movlw	62
 11696  229B  2AA1               	goto	L11
 11697  229C                     l8295:	
 11698                           ;user.c: 101: case 6:
 11699                           
 11700                           ;user.c: 100: break;
 11701                           
 11702                           
 11703                           ;user.c: 102: scalar = 1.0;
 11704  229C  3000               	movlw	0
 11705  229D  00B2               	movwf	set_subdivision@scalar^(0+256)
 11706  229E  3080               	movlw	128
 11707  229F                     L12:	
 11708  229F  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11709  22A0  303F               	movlw	63
 11710  22A1                     L11:	
 11711  22A1  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11712                           
 11713                           ;user.c: 104: }
 11714                           
 11715                           ;user.c: 103: break;
 11716  22A2  2ABC               	goto	l8301
 11717  22A3                     l8299:	
 11718                           
 11719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11720                           ; Switch size 1, requested type "space"
 11721                           ; Number of cases is 1, Range of values is 0 to 0
 11722                           ; switch strategies available:
 11723                           ; Name         Instructions Cycles
 11724                           ; simple_byte            4     3 (average)
 11725                           ; direct_byte            8     6 (fixed)
 11726                           ; jumptable            260     6 (fixed)
 11727                           ;	Chosen strategy is simple_byte
 11728  22A3  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11729  22A4  3A00               	xorlw	0	; case 0
 11730  22A5  1903               	skipnz
 11731  22A6  2AA8               	goto	l9441
 11732  22A7  2ABC               	goto	l8301
 11733  22A8                     l9441:	
 11734                           
 11735                           ; Switch size 1, requested type "space"
 11736                           ; Number of cases is 6, Range of values is 1 to 6
 11737                           ; switch strategies available:
 11738                           ; Name         Instructions Cycles
 11739                           ; simple_byte           19    10 (average)
 11740                           ; direct_byte           21     9 (fixed)
 11741                           ; jumptable            263     9 (fixed)
 11742                           ;	Chosen strategy is simple_byte
 11743  22A8  0830               	movf	set_subdivision@y^(0+256),w
 11744  22A9  3A01               	xorlw	1	; case 1
 11745  22AA  1903               	skipnz
 11746  22AB  2A84               	goto	l8285
 11747  22AC  3A03               	xorlw	3	; case 2
 11748  22AD  1903               	skipnz
 11749  22AE  2A8A               	goto	l8287
 11750  22AF  3A01               	xorlw	1	; case 3
 11751  22B0  1903               	skipnz
 11752  22B1  2A8E               	goto	l8289
 11753  22B2  3A07               	xorlw	7	; case 4
 11754  22B3  1903               	skipnz
 11755  22B4  2A92               	goto	l8291
 11756  22B5  3A01               	xorlw	1	; case 5
 11757  22B6  1903               	skipnz
 11758  22B7  2A96               	goto	l8293
 11759  22B8  3A03               	xorlw	3	; case 6
 11760  22B9  1903               	skipnz
 11761  22BA  2A9C               	goto	l8295
 11762  22BB  2ABC               	goto	l8301
 11763  22BC                     l8301:	
 11764                           
 11765                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11766  22BC  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11767  22BD  0021               	movlb	1	; select bank1
 11768  22BE  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11769  22BF  0022               	movlb	2	; select bank2
 11770  22C0  0835               	movf	set_subdivision@tmpX^(0+256),w
 11771  22C1  0021               	movlb	1	; select bank1
 11772  22C2  00A8               	movwf	___awtoft@c^(0+128)
 11773  22C3  31B2  22F0  31A2   	fcall	___awtoft
 11774  22C6  0021               	movlb	1	; select bank1
 11775  22C7  0828               	movf	?___awtoft^(0+128),w
 11776  22C8  00B1               	movwf	___ftmul@f2^(0+128)
 11777  22C9  0829               	movf	(?___awtoft+1)^(0+128),w
 11778  22CA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11779  22CB  082A               	movf	(?___awtoft+2)^(0+128),w
 11780  22CC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11781  22CD  0022               	movlb	2	; select bank2
 11782  22CE  0832               	movf	set_subdivision@scalar^(0+256),w
 11783  22CF  0021               	movlb	1	; select bank1
 11784  22D0  00AE               	movwf	___ftmul@f1^(0+128)
 11785  22D1  0022               	movlb	2	; select bank2
 11786  22D2  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11787  22D3  0021               	movlb	1	; select bank1
 11788  22D4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11789  22D5  0022               	movlb	2	; select bank2
 11790  22D6  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11791  22D7  0021               	movlb	1	; select bank1
 11792  22D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11793  22D9  31A5  2590  31A2   	fcall	___ftmul
 11794  22DC  0021               	movlb	1	; select bank1
 11795  22DD  082E               	movf	?___ftmul^(0+128),w
 11796  22DE  0022               	movlb	2	; select bank2
 11797  22DF  00A0               	movwf	___fttol@f1^(0+256)
 11798  22E0  0021               	movlb	1	; select bank1
 11799  22E1  082F               	movf	(?___ftmul+1)^(0+128),w
 11800  22E2  0022               	movlb	2	; select bank2
 11801  22E3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11802  22E4  0021               	movlb	1	; select bank1
 11803  22E5  0830               	movf	(?___ftmul+2)^(0+128),w
 11804  22E6  0022               	movlb	2	; select bank2
 11805  22E7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11806  22E8  31A1  2164  31A2   	fcall	___fttol
 11807  22EB  0022               	movlb	2	; select bank2
 11808  22EC  0821               	movf	(?___fttol^(0+256)+1),w
 11809  22ED  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11810  22EE  0820               	movf	?___fttol^(0+256),w
 11811  22EF  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11812                           
 11813                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11814  22F0  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11815  22F1  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11816  22F2  1D03               	skipz
 11817  22F3  2AF6               	goto	u8335
 11818  22F4  0835               	movf	set_subdivision@tmpX^(0+256),w
 11819  22F5  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11820  22F6                     u8335:	
 11821  22F6  1903               	skipnz
 11822  22F7  2AFB               	goto	l8307
 11823                           
 11824                           ;user.c: 109: adjust_mod_delay = 1;
 11825  22F8  0024               	movlb	4	; select bank4
 11826  22F9  01C6               	clrf	_adjust_mod_delay^(0+512)
 11827  22FA  0AC6               	incf	_adjust_mod_delay^(0+512),f
 11828  22FB                     l8307:	
 11829                           
 11830                           ;user.c: 110: }
 11831                           ;user.c: 112: return tmpX;
 11832  22FB  0022               	movlb	2	; select bank2
 11833  22FC  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11834  22FD  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11835  22FE  0835               	movf	set_subdivision@tmpX^(0+256),w
 11836  22FF  00AE               	movwf	?_set_subdivision^(0+256)
 11837  2300  0008               	return
 11838  2301                     __end_of_set_subdivision:	
 11839                           
 11840                           	psect	text25
 11841  2DA6                     __ptext25:	
 11842 ;; *************** function _setVolume *****************
 11843 ;; Defined at:
 11844 ;;		line 25 in file "knobs.c"
 11845 ;; Parameters:    Size  Location     Type
 11846 ;;  rawValue        2   74[BANK2 ] int 
 11847 ;; Auto vars:     Size  Location     Type
 11848 ;;		None
 11849 ;; Return value:  Size  Location     Type
 11850 ;;                  1    wreg      void 
 11851 ;; Registers used:
 11852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11853 ;; Tracked objects:
 11854 ;;		On entry : 0/0
 11855 ;;		On exit  : 0/0
 11856 ;;		Unchanged: 0/0
 11857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11858 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11859 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11861 ;;      Totals:         0       0       0       2       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11862 ;;Total ram usage:        8 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:   11
 11865 ;; This function calls:
 11866 ;;		___awtoft
 11867 ;;		_scaleA10kPot
 11868 ;;		_scaleiA10kPot
 11869 ;;		_updateVolume
 11870 ;; This function is called by:
 11871 ;;		_main
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function _setVolume
 11877  2DA6                     _setVolume:	
 11878                           
 11879                           ;knobs.c: 26: CCPR4 = scaleA10kPot(rawValue);
 11880                           
 11881                           ;incstack = 0
 11882                           ; Regs used in _setVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11883  2DA6  0022               	movlb	2	; select bank2
 11884  2DA7  086B               	movf	(setVolume@rawValue+1)^(0+256),w
 11885  2DA8  0021               	movlb	1	; select bank1
 11886  2DA9  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11887  2DAA  0022               	movlb	2	; select bank2
 11888  2DAB  086A               	movf	setVolume@rawValue^(0+256),w
 11889  2DAC  0021               	movlb	1	; select bank1
 11890  2DAD  00A8               	movwf	___awtoft@c^(0+128)
 11891  2DAE  31B2  22F0  31AD   	fcall	___awtoft
 11892  2DB1  0021               	movlb	1	; select bank1
 11893  2DB2  0828               	movf	?___awtoft^(0+128),w
 11894  2DB3  0023               	movlb	3	; select bank3
 11895  2DB4  00A9               	movwf	_setVolume$3271^(0+384)
 11896  2DB5  0021               	movlb	1	; select bank1
 11897  2DB6  0829               	movf	(?___awtoft+1)^(0+128),w
 11898  2DB7  0023               	movlb	3	; select bank3
 11899  2DB8  00AA               	movwf	(_setVolume$3271+1)^(0+384)
 11900  2DB9  0021               	movlb	1	; select bank1
 11901  2DBA  082A               	movf	(?___awtoft+2)^(0+128),w
 11902  2DBB  0023               	movlb	3	; select bank3
 11903  2DBC  00AB               	movwf	(_setVolume$3271+2)^(0+384)
 11904                           
 11905                           ;knobs.c: 26: CCPR4 = scaleA10kPot(rawValue);
 11906  2DBD  0829               	movf	_setVolume$3271^(0+384),w
 11907  2DBE  0022               	movlb	2	; select bank2
 11908  2DBF  00E7               	movwf	scaleA10kPot@input^(0+256)
 11909  2DC0  0023               	movlb	3	; select bank3
 11910  2DC1  082A               	movf	(_setVolume$3271+1)^(0+384),w
 11911  2DC2  0022               	movlb	2	; select bank2
 11912  2DC3  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
 11913  2DC4  0023               	movlb	3	; select bank3
 11914  2DC5  082B               	movf	(_setVolume$3271+2)^(0+384),w
 11915  2DC6  0022               	movlb	2	; select bank2
 11916  2DC7  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
 11917  2DC8  31A3  2396  31AD   	fcall	_scaleA10kPot
 11918  2DCB  0022               	movlb	2	; select bank2
 11919  2DCC  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
 11920  2DCD  0026               	movlb	6	; select bank6
 11921  2DCE  0099               	movwf	25	;volatile
 11922  2DCF  0022               	movlb	2	; select bank2
 11923  2DD0  0867               	movf	?_scaleA10kPot^(0+256),w
 11924  2DD1  0026               	movlb	6	; select bank6
 11925  2DD2  0098               	movwf	24	;volatile
 11926                           
 11927                           ;knobs.c: 27: CCPR5 = scaleiA10kPot(rawValue);
 11928  2DD3  0022               	movlb	2	; select bank2
 11929  2DD4  086B               	movf	(setVolume@rawValue+1)^(0+256),w
 11930  2DD5  0021               	movlb	1	; select bank1
 11931  2DD6  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11932  2DD7  0022               	movlb	2	; select bank2
 11933  2DD8  086A               	movf	setVolume@rawValue^(0+256),w
 11934  2DD9  0021               	movlb	1	; select bank1
 11935  2DDA  00A8               	movwf	___awtoft@c^(0+128)
 11936  2DDB  31B2  22F0  31AD   	fcall	___awtoft
 11937  2DDE  0021               	movlb	1	; select bank1
 11938  2DDF  0828               	movf	?___awtoft^(0+128),w
 11939  2DE0  0023               	movlb	3	; select bank3
 11940  2DE1  00AC               	movwf	_setVolume$3272^(0+384)
 11941  2DE2  0021               	movlb	1	; select bank1
 11942  2DE3  0829               	movf	(?___awtoft+1)^(0+128),w
 11943  2DE4  0023               	movlb	3	; select bank3
 11944  2DE5  00AD               	movwf	(_setVolume$3272+1)^(0+384)
 11945  2DE6  0021               	movlb	1	; select bank1
 11946  2DE7  082A               	movf	(?___awtoft+2)^(0+128),w
 11947  2DE8  0023               	movlb	3	; select bank3
 11948  2DE9  00AE               	movwf	(_setVolume$3272+2)^(0+384)
 11949                           
 11950                           ;knobs.c: 27: CCPR5 = scaleiA10kPot(rawValue);
 11951  2DEA  082C               	movf	_setVolume$3272^(0+384),w
 11952  2DEB  0022               	movlb	2	; select bank2
 11953  2DEC  00E7               	movwf	scaleiA10kPot@input^(0+256)
 11954  2DED  0023               	movlb	3	; select bank3
 11955  2DEE  082D               	movf	(_setVolume$3272+1)^(0+384),w
 11956  2DEF  0022               	movlb	2	; select bank2
 11957  2DF0  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
 11958  2DF1  0023               	movlb	3	; select bank3
 11959  2DF2  082E               	movf	(_setVolume$3272+2)^(0+384),w
 11960  2DF3  0022               	movlb	2	; select bank2
 11961  2DF4  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
 11962  2DF5  31A6  2644  31AD   	fcall	_scaleiA10kPot
 11963  2DF8  0022               	movlb	2	; select bank2
 11964  2DF9  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
 11965  2DFA  0026               	movlb	6	; select bank6
 11966  2DFB  009D               	movwf	29	;volatile
 11967  2DFC  0022               	movlb	2	; select bank2
 11968  2DFD  0867               	movf	?_scaleiA10kPot^(0+256),w
 11969  2DFE  0026               	movlb	6	; select bank6
 11970  2DFF  009C               	movwf	28	;volatile
 11971                           
 11972                           ;knobs.c: 28: if (isInitialized == 1) {updateVolume(rawValue);}
 11973  2E00  0020               	movlb	0	; select bank0
 11974  2E01  0362               	decf	_isInitialized,w
 11975  2E02  1D03               	btfss	3,2
 11976  2E03  0008               	return
 11977  2E04  0022               	movlb	2	; select bank2
 11978  2E05  086B               	movf	(setVolume@rawValue+1)^(0+256),w
 11979  2E06  0021               	movlb	1	; select bank1
 11980  2E07  00A1               	movwf	(updateVolume@currentValue+1)^(0+128)
 11981  2E08  0022               	movlb	2	; select bank2
 11982  2E09  086A               	movf	setVolume@rawValue^(0+256),w
 11983  2E0A  0021               	movlb	1	; select bank1
 11984  2E0B  00A0               	movwf	updateVolume@currentValue^(0+128)
 11985  2E0C  31BF  27E3         	fcall	_updateVolume
 11986  2E0E  0008               	return
 11987  2E0F                     __end_of_setVolume:	
 11988                           
 11989                           	psect	text26
 11990  3FE3                     __ptext26:	
 11991 ;; *************** function _updateVolume *****************
 11992 ;; Defined at:
 11993 ;;		line 253 in file "state_manager.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  currentValue    2    0[BANK1 ] int 
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;		None
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  1    wreg      void 
 12000 ;; Registers used:
 12001 ;;		wreg
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12007 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12010 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12011 ;;Total ram usage:        2 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    5
 12014 ;; This function calls:
 12015 ;;		Nothing
 12016 ;; This function is called by:
 12017 ;;		_setVolume
 12018 ;; This function uses a non-reentrant model
 12019 ;;
 12020                           
 12021                           
 12022                           ;psect for function _updateVolume
 12023  3FE3                     _updateVolume:	
 12024                           
 12025                           ;state_manager.c: 254: pedalState.volume = currentValue;
 12026                           
 12027                           ;incstack = 0
 12028                           ; Regs used in _updateVolume: [wreg]
 12029  3FE3  0021               	movlb	1	; select bank1
 12030  3FE4  0821               	movf	(updateVolume@currentValue+1)^(0+128),w
 12031  3FE5  0025               	movlb	5	; select bank5
 12032  3FE6  00BB               	movwf	((_pedalState+1)^(0+640)+6)
 12033  3FE7  0021               	movlb	1	; select bank1
 12034  3FE8  0820               	movf	updateVolume@currentValue^(0+128),w
 12035  3FE9  0025               	movlb	5	; select bank5
 12036  3FEA  00BA               	movwf	(_pedalState^(0+640)+6)
 12037  3FEB  0008               	return
 12038  3FEC                     __end_of_updateVolume:	
 12039                           
 12040                           	psect	text27
 12041  2644                     __ptext27:	
 12042 ;; *************** function _scaleiA10kPot *****************
 12043 ;; Defined at:
 12044 ;;		line 211 in file "user.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  input           3   71[BANK2 ] void 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  pwm             3    0[BANK3 ] float 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  2   71[BANK2 ] int 
 12051 ;; Registers used:
 12052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12058 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12059 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12061 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12062 ;;Total ram usage:       12 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:   10
 12065 ;; This function calls:
 12066 ;;		___ftadd
 12067 ;;		___ftdiv
 12068 ;;		___ftge
 12069 ;;		___ftmul
 12070 ;;		___ftneg
 12071 ;;		___fttol
 12072 ;;		_pow
 12073 ;; This function is called by:
 12074 ;;		_main
 12075 ;;		_setVolume
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           
 12080                           ;psect for function _scaleiA10kPot
 12081  2644                     _scaleiA10kPot:	
 12082                           
 12083                           ;user.c: 214: if (input < 1.0) {return 0;}
 12084                           
 12085                           ;incstack = 0
 12086                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12087  2644  0022               	movlb	2	; select bank2
 12088  2645  0867               	movf	scaleiA10kPot@input^(0+256),w
 12089  2646  0021               	movlb	1	; select bank1
 12090  2647  00A0               	movwf	___ftge@ff1^(0+128)
 12091  2648  0022               	movlb	2	; select bank2
 12092  2649  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12093  264A  0021               	movlb	1	; select bank1
 12094  264B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12095  264C  0022               	movlb	2	; select bank2
 12096  264D  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12097  264E  0021               	movlb	1	; select bank1
 12098  264F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12099  2650  3000               	movlw	0
 12100  2651  00A3               	movwf	___ftge@ff2^(0+128)
 12101  2652  3080               	movlw	128
 12102  2653  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12103  2654  303F               	movlw	63
 12104  2655  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12105  2656  31B6  26CF  31A6   	fcall	___ftge
 12106  2659  1803               	btfsc	3,0
 12107  265A  2E5F               	goto	l7399
 12108  265B  0022               	movlb	2	; select bank2
 12109  265C  01E7               	clrf	?_scaleiA10kPot^(0+256)
 12110  265D  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 12111  265E  0008               	return
 12112  265F                     l7399:	
 12113                           
 12114                           ;user.c: 216: if (input >= 1022.0) {return 255;}
 12115  265F  0022               	movlb	2	; select bank2
 12116  2660  0867               	movf	scaleiA10kPot@input^(0+256),w
 12117  2661  0021               	movlb	1	; select bank1
 12118  2662  00A0               	movwf	___ftge@ff1^(0+128)
 12119  2663  0022               	movlb	2	; select bank2
 12120  2664  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12121  2665  0021               	movlb	1	; select bank1
 12122  2666  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12123  2667  0022               	movlb	2	; select bank2
 12124  2668  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12125  2669  0021               	movlb	1	; select bank1
 12126  266A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12127  266B  3080               	movlw	128
 12128  266C  00A3               	movwf	___ftge@ff2^(0+128)
 12129  266D  307F               	movlw	127
 12130  266E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12131  266F  3044               	movlw	68
 12132  2670  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12133  2671  31B6  26CF  31A6   	fcall	___ftge
 12134  2674  1C03               	btfss	3,0
 12135  2675  2E7C               	goto	l7405
 12136  2676  30FF               	movlw	255
 12137  2677  0022               	movlb	2	; select bank2
 12138  2678  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12139  2679  3000               	movlw	0
 12140  267A  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 12141  267B  0008               	return
 12142  267C                     l7405:	
 12143                           
 12144                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12145  267C  3000               	movlw	0
 12146  267D  0021               	movlb	1	; select bank1
 12147  267E  00C1               	movwf	___ftadd@f1^(0+128)
 12148  267F  3080               	movlw	128
 12149  2680  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12150  2681  303F               	movlw	63
 12151  2682  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12152  2683  0022               	movlb	2	; select bank2
 12153  2684  0867               	movf	scaleiA10kPot@input^(0+256),w
 12154  2685  0021               	movlb	1	; select bank1
 12155  2686  00D1               	movwf	___ftdiv@f1^(0+128)
 12156  2687  0022               	movlb	2	; select bank2
 12157  2688  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 12158  2689  0021               	movlb	1	; select bank1
 12159  268A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12160  268B  0022               	movlb	2	; select bank2
 12161  268C  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 12162  268D  0021               	movlb	1	; select bank1
 12163  268E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12164  268F  30C0               	movlw	192
 12165  2690  00CE               	movwf	___ftdiv@f2^(0+128)
 12166  2691  307F               	movlw	127
 12167  2692  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12168  2693  3044               	movlw	68
 12169  2694  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12170  2695  31A4  2434  31A6   	fcall	___ftdiv
 12171  2698  0021               	movlb	1	; select bank1
 12172  2699  084E               	movf	?___ftdiv^(0+128),w
 12173  269A  00BE               	movwf	___ftneg@f1^(0+128)
 12174  269B  084F               	movf	(?___ftdiv+1)^(0+128),w
 12175  269C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12176  269D  0850               	movf	(?___ftdiv+2)^(0+128),w
 12177  269E  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12178  269F  31BF  27C8  31A6   	fcall	___ftneg
 12179  26A2  0021               	movlb	1	; select bank1
 12180  26A3  083E               	movf	?___ftneg^(0+128),w
 12181  26A4  00C4               	movwf	___ftadd@f2^(0+128)
 12182  26A5  083F               	movf	(?___ftneg+1)^(0+128),w
 12183  26A6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12184  26A7  0840               	movf	(?___ftneg+2)^(0+128),w
 12185  26A8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12186  26A9  3198  200B  31A6   	fcall	___ftadd
 12187  26AC  0021               	movlb	1	; select bank1
 12188  26AD  0841               	movf	?___ftadd^(0+128),w
 12189  26AE  0023               	movlb	3	; select bank3
 12190  26AF  00A3               	movwf	_scaleiA10kPot$3259^(0+384)
 12191  26B0  0021               	movlb	1	; select bank1
 12192  26B1  0842               	movf	(?___ftadd+1)^(0+128),w
 12193  26B2  0023               	movlb	3	; select bank3
 12194  26B3  00A4               	movwf	(_scaleiA10kPot$3259+1)^(0+384)
 12195  26B4  0021               	movlb	1	; select bank1
 12196  26B5  0843               	movf	(?___ftadd+2)^(0+128),w
 12197  26B6  0023               	movlb	3	; select bank3
 12198  26B7  00A5               	movwf	(_scaleiA10kPot$3259+2)^(0+384)
 12199                           
 12200                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12201  26B8  306A               	movlw	106
 12202  26B9  0022               	movlb	2	; select bank2
 12203  26BA  00D8               	movwf	pow@y^(0+256)
 12204  26BB  309C               	movlw	156
 12205  26BC  00D9               	movwf	(pow@y+1)^(0+256)
 12206  26BD  30BF               	movlw	191
 12207  26BE  00DA               	movwf	(pow@y+2)^(0+256)
 12208  26BF  0023               	movlb	3	; select bank3
 12209  26C0  0823               	movf	_scaleiA10kPot$3259^(0+384),w
 12210  26C1  0022               	movlb	2	; select bank2
 12211  26C2  00D5               	movwf	pow@x^(0+256)
 12212  26C3  0023               	movlb	3	; select bank3
 12213  26C4  0824               	movf	(_scaleiA10kPot$3259+1)^(0+384),w
 12214  26C5  0022               	movlb	2	; select bank2
 12215  26C6  00D6               	movwf	(pow@x+1)^(0+256)
 12216  26C7  0023               	movlb	3	; select bank3
 12217  26C8  0825               	movf	(_scaleiA10kPot$3259+2)^(0+384),w
 12218  26C9  0022               	movlb	2	; select bank2
 12219  26CA  00D7               	movwf	(pow@x+2)^(0+256)
 12220  26CB  3199  21FA  31A6   	fcall	_pow
 12221  26CE  0022               	movlb	2	; select bank2
 12222  26CF  0855               	movf	?_pow^(0+256),w
 12223  26D0  0023               	movlb	3	; select bank3
 12224  26D1  00A6               	movwf	_scaleiA10kPot$3260^(0+384)
 12225  26D2  0022               	movlb	2	; select bank2
 12226  26D3  0856               	movf	(?_pow+1)^(0+256),w
 12227  26D4  0023               	movlb	3	; select bank3
 12228  26D5  00A7               	movwf	(_scaleiA10kPot$3260+1)^(0+384)
 12229  26D6  0022               	movlb	2	; select bank2
 12230  26D7  0857               	movf	(?_pow+2)^(0+256),w
 12231  26D8  0023               	movlb	3	; select bank3
 12232  26D9  00A8               	movwf	(_scaleiA10kPot$3260+2)^(0+384)
 12233                           
 12234                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12235  26DA  30E3               	movlw	227
 12236  26DB  0021               	movlb	1	; select bank1
 12237  26DC  00AE               	movwf	___ftmul@f1^(0+128)
 12238  26DD  300B               	movlw	11
 12239  26DE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12240  26DF  3041               	movlw	65
 12241  26E0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12242  26E1  0023               	movlb	3	; select bank3
 12243  26E2  0826               	movf	_scaleiA10kPot$3260^(0+384),w
 12244  26E3  0021               	movlb	1	; select bank1
 12245  26E4  00B1               	movwf	___ftmul@f2^(0+128)
 12246  26E5  0023               	movlb	3	; select bank3
 12247  26E6  0827               	movf	(_scaleiA10kPot$3260+1)^(0+384),w
 12248  26E7  0021               	movlb	1	; select bank1
 12249  26E8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12250  26E9  0023               	movlb	3	; select bank3
 12251  26EA  0828               	movf	(_scaleiA10kPot$3260+2)^(0+384),w
 12252  26EB  0021               	movlb	1	; select bank1
 12253  26EC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12254  26ED  31A5  2590  31A6   	fcall	___ftmul
 12255  26F0  0021               	movlb	1	; select bank1
 12256  26F1  082E               	movf	?___ftmul^(0+128),w
 12257  26F2  0023               	movlb	3	; select bank3
 12258  26F3  00A0               	movwf	scaleiA10kPot@pwm^(0+384)
 12259  26F4  0021               	movlb	1	; select bank1
 12260  26F5  082F               	movf	(?___ftmul+1)^(0+128),w
 12261  26F6  0023               	movlb	3	; select bank3
 12262  26F7  00A1               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12263  26F8  0021               	movlb	1	; select bank1
 12264  26F9  0830               	movf	(?___ftmul+2)^(0+128),w
 12265  26FA  0023               	movlb	3	; select bank3
 12266  26FB  00A2               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12267                           
 12268                           ;user.c: 219: return (int)(pwm);
 12269  26FC  0820               	movf	scaleiA10kPot@pwm^(0+384),w
 12270  26FD  0022               	movlb	2	; select bank2
 12271  26FE  00A0               	movwf	___fttol@f1^(0+256)
 12272  26FF  0023               	movlb	3	; select bank3
 12273  2700  0821               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12274  2701  0022               	movlb	2	; select bank2
 12275  2702  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12276  2703  0023               	movlb	3	; select bank3
 12277  2704  0822               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12278  2705  0022               	movlb	2	; select bank2
 12279  2706  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12280  2707  31A1  2164         	fcall	___fttol
 12281  2709  0022               	movlb	2	; select bank2
 12282  270A  0821               	movf	(?___fttol^(0+256)+1),w
 12283  270B  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12284  270C  0820               	movf	?___fttol^(0+256),w
 12285  270D  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12286  270E  0008               	return
 12287  270F                     __end_of_scaleiA10kPot:	
 12288                           
 12289                           	psect	text28
 12290  2396                     __ptext28:	
 12291 ;; *************** function _scaleA10kPot *****************
 12292 ;; Defined at:
 12293 ;;		line 202 in file "user.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;  input           3   71[BANK2 ] int 
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;  pwm             3    0[BANK3 ] float 
 12298 ;; Return value:  Size  Location     Type
 12299 ;;                  2   71[BANK2 ] int 
 12300 ;; Registers used:
 12301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12302 ;; Tracked objects:
 12303 ;;		On entry : 0/0
 12304 ;;		On exit  : 0/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12307 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12308 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12310 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12311 ;;Total ram usage:       12 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; Hardware stack levels required when called:   10
 12314 ;; This function calls:
 12315 ;;		___ftdiv
 12316 ;;		___ftge
 12317 ;;		___ftmul
 12318 ;;		___fttol
 12319 ;;		_pow
 12320 ;; This function is called by:
 12321 ;;		_main
 12322 ;;		_setVolume
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           
 12327                           ;psect for function _scaleA10kPot
 12328  2396                     _scaleA10kPot:	
 12329                           
 12330                           ;user.c: 204: if (input == 0.0) {return 255;}
 12331                           
 12332                           ;incstack = 0
 12333                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12334  2396  0022               	movlb	2	; select bank2
 12335  2397  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12336  2398  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12337  2399  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12338  239A  1D03               	skipz
 12339  239B  2BA1               	goto	l7377
 12340  239C  30FF               	movlw	255
 12341  239D  00E7               	movwf	?_scaleA10kPot^(0+256)
 12342  239E  3000               	movlw	0
 12343  239F  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12344  23A0  0008               	return
 12345  23A1                     l7377:	
 12346                           
 12347                           ;user.c: 205: if (input >= 1022.0) {return 0;}
 12348  23A1  0867               	movf	scaleA10kPot@input^(0+256),w
 12349  23A2  0021               	movlb	1	; select bank1
 12350  23A3  00A0               	movwf	___ftge@ff1^(0+128)
 12351  23A4  0022               	movlb	2	; select bank2
 12352  23A5  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12353  23A6  0021               	movlb	1	; select bank1
 12354  23A7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12355  23A8  0022               	movlb	2	; select bank2
 12356  23A9  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12357  23AA  0021               	movlb	1	; select bank1
 12358  23AB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12359  23AC  3080               	movlw	128
 12360  23AD  00A3               	movwf	___ftge@ff2^(0+128)
 12361  23AE  307F               	movlw	127
 12362  23AF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12363  23B0  3044               	movlw	68
 12364  23B1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12365  23B2  31B6  26CF  31A3   	fcall	___ftge
 12366  23B5  1C03               	btfss	3,0
 12367  23B6  2BBB               	goto	l7383
 12368  23B7  0022               	movlb	2	; select bank2
 12369  23B8  01E7               	clrf	?_scaleA10kPot^(0+256)
 12370  23B9  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12371  23BA  0008               	return
 12372  23BB                     l7383:	
 12373                           
 12374                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12375  23BB  30C0               	movlw	192
 12376  23BC  0021               	movlb	1	; select bank1
 12377  23BD  00CE               	movwf	___ftdiv@f2^(0+128)
 12378  23BE  307F               	movlw	127
 12379  23BF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12380  23C0  3044               	movlw	68
 12381  23C1  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12382  23C2  0022               	movlb	2	; select bank2
 12383  23C3  0867               	movf	scaleA10kPot@input^(0+256),w
 12384  23C4  0021               	movlb	1	; select bank1
 12385  23C5  00D1               	movwf	___ftdiv@f1^(0+128)
 12386  23C6  0022               	movlb	2	; select bank2
 12387  23C7  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12388  23C8  0021               	movlb	1	; select bank1
 12389  23C9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12390  23CA  0022               	movlb	2	; select bank2
 12391  23CB  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12392  23CC  0021               	movlb	1	; select bank1
 12393  23CD  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12394  23CE  31A4  2434  31A3   	fcall	___ftdiv
 12395  23D1  0021               	movlb	1	; select bank1
 12396  23D2  084E               	movf	?___ftdiv^(0+128),w
 12397  23D3  0023               	movlb	3	; select bank3
 12398  23D4  00A3               	movwf	_scaleA10kPot$3257^(0+384)
 12399  23D5  0021               	movlb	1	; select bank1
 12400  23D6  084F               	movf	(?___ftdiv+1)^(0+128),w
 12401  23D7  0023               	movlb	3	; select bank3
 12402  23D8  00A4               	movwf	(_scaleA10kPot$3257+1)^(0+384)
 12403  23D9  0021               	movlb	1	; select bank1
 12404  23DA  0850               	movf	(?___ftdiv+2)^(0+128),w
 12405  23DB  0023               	movlb	3	; select bank3
 12406  23DC  00A5               	movwf	(_scaleA10kPot$3257+2)^(0+384)
 12407                           
 12408                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12409  23DD  306A               	movlw	106
 12410  23DE  0022               	movlb	2	; select bank2
 12411  23DF  00D8               	movwf	pow@y^(0+256)
 12412  23E0  309C               	movlw	156
 12413  23E1  00D9               	movwf	(pow@y+1)^(0+256)
 12414  23E2  30BF               	movlw	191
 12415  23E3  00DA               	movwf	(pow@y+2)^(0+256)
 12416  23E4  0023               	movlb	3	; select bank3
 12417  23E5  0823               	movf	_scaleA10kPot$3257^(0+384),w
 12418  23E6  0022               	movlb	2	; select bank2
 12419  23E7  00D5               	movwf	pow@x^(0+256)
 12420  23E8  0023               	movlb	3	; select bank3
 12421  23E9  0824               	movf	(_scaleA10kPot$3257+1)^(0+384),w
 12422  23EA  0022               	movlb	2	; select bank2
 12423  23EB  00D6               	movwf	(pow@x+1)^(0+256)
 12424  23EC  0023               	movlb	3	; select bank3
 12425  23ED  0825               	movf	(_scaleA10kPot$3257+2)^(0+384),w
 12426  23EE  0022               	movlb	2	; select bank2
 12427  23EF  00D7               	movwf	(pow@x+2)^(0+256)
 12428  23F0  3199  21FA  31A3   	fcall	_pow
 12429  23F3  0022               	movlb	2	; select bank2
 12430  23F4  0855               	movf	?_pow^(0+256),w
 12431  23F5  0023               	movlb	3	; select bank3
 12432  23F6  00A6               	movwf	_scaleA10kPot$3258^(0+384)
 12433  23F7  0022               	movlb	2	; select bank2
 12434  23F8  0856               	movf	(?_pow+1)^(0+256),w
 12435  23F9  0023               	movlb	3	; select bank3
 12436  23FA  00A7               	movwf	(_scaleA10kPot$3258+1)^(0+384)
 12437  23FB  0022               	movlb	2	; select bank2
 12438  23FC  0857               	movf	(?_pow+2)^(0+256),w
 12439  23FD  0023               	movlb	3	; select bank3
 12440  23FE  00A8               	movwf	(_scaleA10kPot$3258+2)^(0+384)
 12441                           
 12442                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12443  23FF  30E3               	movlw	227
 12444  2400  0021               	movlb	1	; select bank1
 12445  2401  00AE               	movwf	___ftmul@f1^(0+128)
 12446  2402  300B               	movlw	11
 12447  2403  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12448  2404  3041               	movlw	65
 12449  2405  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12450  2406  0023               	movlb	3	; select bank3
 12451  2407  0826               	movf	_scaleA10kPot$3258^(0+384),w
 12452  2408  0021               	movlb	1	; select bank1
 12453  2409  00B1               	movwf	___ftmul@f2^(0+128)
 12454  240A  0023               	movlb	3	; select bank3
 12455  240B  0827               	movf	(_scaleA10kPot$3258+1)^(0+384),w
 12456  240C  0021               	movlb	1	; select bank1
 12457  240D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12458  240E  0023               	movlb	3	; select bank3
 12459  240F  0828               	movf	(_scaleA10kPot$3258+2)^(0+384),w
 12460  2410  0021               	movlb	1	; select bank1
 12461  2411  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12462  2412  31A5  2590  31A3   	fcall	___ftmul
 12463  2415  0021               	movlb	1	; select bank1
 12464  2416  082E               	movf	?___ftmul^(0+128),w
 12465  2417  0023               	movlb	3	; select bank3
 12466  2418  00A0               	movwf	scaleA10kPot@pwm^(0+384)
 12467  2419  0021               	movlb	1	; select bank1
 12468  241A  082F               	movf	(?___ftmul+1)^(0+128),w
 12469  241B  0023               	movlb	3	; select bank3
 12470  241C  00A1               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12471  241D  0021               	movlb	1	; select bank1
 12472  241E  0830               	movf	(?___ftmul+2)^(0+128),w
 12473  241F  0023               	movlb	3	; select bank3
 12474  2420  00A2               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12475                           
 12476                           ;user.c: 207: return (int)(pwm);
 12477  2421  0820               	movf	scaleA10kPot@pwm^(0+384),w
 12478  2422  0022               	movlb	2	; select bank2
 12479  2423  00A0               	movwf	___fttol@f1^(0+256)
 12480  2424  0023               	movlb	3	; select bank3
 12481  2425  0821               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12482  2426  0022               	movlb	2	; select bank2
 12483  2427  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12484  2428  0023               	movlb	3	; select bank3
 12485  2429  0822               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12486  242A  0022               	movlb	2	; select bank2
 12487  242B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12488  242C  31A1  2164         	fcall	___fttol
 12489  242E  0022               	movlb	2	; select bank2
 12490  242F  0821               	movf	(?___fttol^(0+256)+1),w
 12491  2430  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12492  2431  0820               	movf	?___fttol^(0+256),w
 12493  2432  00E7               	movwf	?_scaleA10kPot^(0+256)
 12494  2433  0008               	return
 12495  2434                     __end_of_scaleA10kPot:	
 12496                           
 12497                           	psect	text29
 12498  2CED                     __ptext29:	
 12499 ;; *************** function _setSymmetry *****************
 12500 ;; Defined at:
 12501 ;;		line 38 in file "knobs.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;  rawValue        2   14[BANK2 ] int 
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;		None
 12506 ;; Return value:  Size  Location     Type
 12507 ;;                  1    wreg      void 
 12508 ;; Registers used:
 12509 ;;		wreg, status,2, status,0, pclath, cstack
 12510 ;; Tracked objects:
 12511 ;;		On entry : 0/0
 12512 ;;		On exit  : 0/0
 12513 ;;		Unchanged: 0/0
 12514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12515 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12518 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12519 ;;Total ram usage:        2 bytes
 12520 ;; Hardware stack levels used:    1
 12521 ;; Hardware stack levels required when called:    8
 12522 ;; This function calls:
 12523 ;;		___awtoft
 12524 ;;		___fttol
 12525 ;;		_map
 12526 ;;		_updateFrequency
 12527 ;; This function is called by:
 12528 ;;		_main
 12529 ;; This function uses a non-reentrant model
 12530 ;;
 12531                           
 12532                           
 12533                           ;psect for function _setSymmetry
 12534  2CED                     _setSymmetry:	
 12535                           
 12536                           ;knobs.c: 39: symmetry = (int) map(rawValue, 0, 1023, 45, 315);
 12537                           
 12538                           ;incstack = 0
 12539                           ; Regs used in _setSymmetry: [wreg+status,2+status,0+pclath+cstack]
 12540  2CED  3080               	movlw	128
 12541  2CEE  0021               	movlb	1	; select bank1
 12542  2CEF  00EA               	movwf	map@out_max^(0+128)
 12543  2CF0  309D               	movlw	157
 12544  2CF1  00EB               	movwf	(map@out_max+1)^(0+128)
 12545  2CF2  3043               	movlw	67
 12546  2CF3  00EC               	movwf	(map@out_max+2)^(0+128)
 12547  2CF4  3000               	movlw	0
 12548  2CF5  00E7               	movwf	map@out_min^(0+128)
 12549  2CF6  3034               	movlw	52
 12550  2CF7  00E8               	movwf	(map@out_min+1)^(0+128)
 12551  2CF8  3042               	movlw	66
 12552  2CF9  00E9               	movwf	(map@out_min+2)^(0+128)
 12553  2CFA  30C0               	movlw	192
 12554  2CFB  00E4               	movwf	map@in_max^(0+128)
 12555  2CFC  307F               	movlw	127
 12556  2CFD  00E5               	movwf	(map@in_max+1)^(0+128)
 12557  2CFE  3044               	movlw	68
 12558  2CFF  00E6               	movwf	(map@in_max+2)^(0+128)
 12559  2D00  3000               	movlw	0
 12560  2D01  00E1               	movwf	map@in_min^(0+128)
 12561  2D02  3000               	movlw	0
 12562  2D03  00E2               	movwf	(map@in_min+1)^(0+128)
 12563  2D04  3000               	movlw	0
 12564  2D05  00E3               	movwf	(map@in_min+2)^(0+128)
 12565  2D06  0022               	movlb	2	; select bank2
 12566  2D07  082F               	movf	(setSymmetry@rawValue+1)^(0+256),w
 12567  2D08  0021               	movlb	1	; select bank1
 12568  2D09  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12569  2D0A  0022               	movlb	2	; select bank2
 12570  2D0B  082E               	movf	setSymmetry@rawValue^(0+256),w
 12571  2D0C  0021               	movlb	1	; select bank1
 12572  2D0D  00A8               	movwf	___awtoft@c^(0+128)
 12573  2D0E  31B2  22F0  31AC   	fcall	___awtoft
 12574  2D11  0021               	movlb	1	; select bank1
 12575  2D12  0828               	movf	?___awtoft^(0+128),w
 12576  2D13  00DE               	movwf	map@x^(0+128)
 12577  2D14  0829               	movf	(?___awtoft+1)^(0+128),w
 12578  2D15  00DF               	movwf	(map@x+1)^(0+128)
 12579  2D16  082A               	movf	(?___awtoft+2)^(0+128),w
 12580  2D17  00E0               	movwf	(map@x+2)^(0+128)
 12581  2D18  31A1  21EB  31AC   	fcall	_map
 12582  2D1B  0021               	movlb	1	; select bank1
 12583  2D1C  085E               	movf	?_map^(0+128),w
 12584  2D1D  0022               	movlb	2	; select bank2
 12585  2D1E  00A0               	movwf	___fttol@f1^(0+256)
 12586  2D1F  0021               	movlb	1	; select bank1
 12587  2D20  085F               	movf	(?_map+1)^(0+128),w
 12588  2D21  0022               	movlb	2	; select bank2
 12589  2D22  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12590  2D23  0021               	movlb	1	; select bank1
 12591  2D24  0860               	movf	(?_map+2)^(0+128),w
 12592  2D25  0022               	movlb	2	; select bank2
 12593  2D26  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12594  2D27  31A1  2164  31AC   	fcall	___fttol
 12595  2D2A  0022               	movlb	2	; select bank2
 12596  2D2B  0821               	movf	(?___fttol^(0+256)+1),w
 12597  2D2C  0023               	movlb	3	; select bank3
 12598  2D2D  00EB               	movwf	(_symmetry+1)^(0+384)
 12599  2D2E  0022               	movlb	2	; select bank2
 12600  2D2F  0820               	movf	?___fttol^(0+256),w
 12601  2D30  0023               	movlb	3	; select bank3
 12602  2D31  00EA               	movwf	_symmetry^(0+384)
 12603                           
 12604                           ;knobs.c: 40: if (isInitialized == 1) {updateFrequency(rawValue);}
 12605  2D32  0020               	movlb	0	; select bank0
 12606  2D33  0362               	decf	_isInitialized,w
 12607  2D34  1D03               	btfss	3,2
 12608  2D35  0008               	return
 12609  2D36  0022               	movlb	2	; select bank2
 12610  2D37  082F               	movf	(setSymmetry@rawValue+1)^(0+256),w
 12611  2D38  0021               	movlb	1	; select bank1
 12612  2D39  00A1               	movwf	(updateFrequency@currentValue+1)^(0+128)
 12613  2D3A  0022               	movlb	2	; select bank2
 12614  2D3B  082E               	movf	setSymmetry@rawValue^(0+256),w
 12615  2D3C  0021               	movlb	1	; select bank1
 12616  2D3D  00A0               	movwf	updateFrequency@currentValue^(0+128)
 12617  2D3E  31BF  27DA         	fcall	_updateFrequency
 12618  2D40  0008               	return
 12619  2D41                     __end_of_setSymmetry:	
 12620                           
 12621                           	psect	text30
 12622  21EB                     __ptext30:	
 12623 ;; *************** function _map *****************
 12624 ;; Defined at:
 12625 ;;		line 177 in file "user.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;  x               3   62[BANK1 ] float 
 12628 ;;  in_min          3   65[BANK1 ] float 
 12629 ;;  in_max          3   68[BANK1 ] float 
 12630 ;;  out_min         3   71[BANK1 ] float 
 12631 ;;  out_max         3   74[BANK1 ] float 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;		None
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  3   62[BANK1 ] float 
 12636 ;; Registers used:
 12637 ;;		wreg, status,2, status,0, pclath, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12643 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12644 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12646 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12647 ;;Total ram usage:       18 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    7
 12650 ;; This function calls:
 12651 ;;		___ftadd
 12652 ;;		___ftdiv
 12653 ;;		___ftmul
 12654 ;;		___ftneg
 12655 ;; This function is called by:
 12656 ;;		_main
 12657 ;;		_setSymmetry
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           
 12662                           ;psect for function _map
 12663  21EB                     _map:	
 12664                           
 12665                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12666                           
 12667                           ;incstack = 0
 12668                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 12669  21EB  0021               	movlb	1	; select bank1
 12670  21EC  0864               	movf	map@in_max^(0+128),w
 12671  21ED  00C1               	movwf	___ftadd@f1^(0+128)
 12672  21EE  0865               	movf	(map@in_max+1)^(0+128),w
 12673  21EF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12674  21F0  0866               	movf	(map@in_max+2)^(0+128),w
 12675  21F1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12676  21F2  0861               	movf	map@in_min^(0+128),w
 12677  21F3  00BE               	movwf	___ftneg@f1^(0+128)
 12678  21F4  0862               	movf	(map@in_min+1)^(0+128),w
 12679  21F5  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12680  21F6  0863               	movf	(map@in_min+2)^(0+128),w
 12681  21F7  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12682  21F8  31BF  27C8  31A1   	fcall	___ftneg
 12683  21FB  0021               	movlb	1	; select bank1
 12684  21FC  083E               	movf	?___ftneg^(0+128),w
 12685  21FD  00C4               	movwf	___ftadd@f2^(0+128)
 12686  21FE  083F               	movf	(?___ftneg+1)^(0+128),w
 12687  21FF  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12688  2200  0840               	movf	(?___ftneg+2)^(0+128),w
 12689  2201  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12690  2202  3198  200B  31A1   	fcall	___ftadd
 12691  2205  0021               	movlb	1	; select bank1
 12692  2206  0841               	movf	?___ftadd^(0+128),w
 12693  2207  00CE               	movwf	___ftdiv@f2^(0+128)
 12694  2208  0842               	movf	(?___ftadd+1)^(0+128),w
 12695  2209  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12696  220A  0843               	movf	(?___ftadd+2)^(0+128),w
 12697  220B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12698  220C  086A               	movf	map@out_max^(0+128),w
 12699  220D  00C1               	movwf	___ftadd@f1^(0+128)
 12700  220E  086B               	movf	(map@out_max+1)^(0+128),w
 12701  220F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12702  2210  086C               	movf	(map@out_max+2)^(0+128),w
 12703  2211  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12704  2212  0867               	movf	map@out_min^(0+128),w
 12705  2213  00BE               	movwf	___ftneg@f1^(0+128)
 12706  2214  0868               	movf	(map@out_min+1)^(0+128),w
 12707  2215  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12708  2216  0869               	movf	(map@out_min+2)^(0+128),w
 12709  2217  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12710  2218  31BF  27C8  31A1   	fcall	___ftneg
 12711  221B  0021               	movlb	1	; select bank1
 12712  221C  083E               	movf	?___ftneg^(0+128),w
 12713  221D  00C4               	movwf	___ftadd@f2^(0+128)
 12714  221E  083F               	movf	(?___ftneg+1)^(0+128),w
 12715  221F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12716  2220  0840               	movf	(?___ftneg+2)^(0+128),w
 12717  2221  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12718  2222  3198  200B  31A1   	fcall	___ftadd
 12719  2225  0021               	movlb	1	; select bank1
 12720  2226  0841               	movf	?___ftadd^(0+128),w
 12721  2227  00AE               	movwf	___ftmul@f1^(0+128)
 12722  2228  0842               	movf	(?___ftadd+1)^(0+128),w
 12723  2229  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12724  222A  0843               	movf	(?___ftadd+2)^(0+128),w
 12725  222B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12726  222C  085E               	movf	map@x^(0+128),w
 12727  222D  00C1               	movwf	___ftadd@f1^(0+128)
 12728  222E  085F               	movf	(map@x+1)^(0+128),w
 12729  222F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12730  2230  0860               	movf	(map@x+2)^(0+128),w
 12731  2231  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12732  2232  0861               	movf	map@in_min^(0+128),w
 12733  2233  00BE               	movwf	___ftneg@f1^(0+128)
 12734  2234  0862               	movf	(map@in_min+1)^(0+128),w
 12735  2235  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12736  2236  0863               	movf	(map@in_min+2)^(0+128),w
 12737  2237  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12738  2238  31BF  27C8  31A1   	fcall	___ftneg
 12739  223B  0021               	movlb	1	; select bank1
 12740  223C  083E               	movf	?___ftneg^(0+128),w
 12741  223D  00C4               	movwf	___ftadd@f2^(0+128)
 12742  223E  083F               	movf	(?___ftneg+1)^(0+128),w
 12743  223F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12744  2240  0840               	movf	(?___ftneg+2)^(0+128),w
 12745  2241  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12746  2242  3198  200B  31A1   	fcall	___ftadd
 12747  2245  0021               	movlb	1	; select bank1
 12748  2246  0841               	movf	?___ftadd^(0+128),w
 12749  2247  00B1               	movwf	___ftmul@f2^(0+128)
 12750  2248  0842               	movf	(?___ftadd+1)^(0+128),w
 12751  2249  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12752  224A  0843               	movf	(?___ftadd+2)^(0+128),w
 12753  224B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12754  224C  31A5  2590  31A1   	fcall	___ftmul
 12755  224F  0021               	movlb	1	; select bank1
 12756  2250  082E               	movf	?___ftmul^(0+128),w
 12757  2251  00D1               	movwf	___ftdiv@f1^(0+128)
 12758  2252  082F               	movf	(?___ftmul+1)^(0+128),w
 12759  2253  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12760  2254  0830               	movf	(?___ftmul+2)^(0+128),w
 12761  2255  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12762  2256  31A4  2434  31A1   	fcall	___ftdiv
 12763  2259  0021               	movlb	1	; select bank1
 12764  225A  084E               	movf	?___ftdiv^(0+128),w
 12765  225B  00ED               	movwf	_map$3251^(0+128)
 12766  225C  084F               	movf	(?___ftdiv+1)^(0+128),w
 12767  225D  00EE               	movwf	(_map$3251+1)^(0+128)
 12768  225E  0850               	movf	(?___ftdiv+2)^(0+128),w
 12769  225F  00EF               	movwf	(_map$3251+2)^(0+128)
 12770                           
 12771                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12772  2260  0867               	movf	map@out_min^(0+128),w
 12773  2261  00C1               	movwf	___ftadd@f1^(0+128)
 12774  2262  0868               	movf	(map@out_min+1)^(0+128),w
 12775  2263  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12776  2264  0869               	movf	(map@out_min+2)^(0+128),w
 12777  2265  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12778  2266  086D               	movf	_map$3251^(0+128),w
 12779  2267  00C4               	movwf	___ftadd@f2^(0+128)
 12780  2268  086E               	movf	(_map$3251+1)^(0+128),w
 12781  2269  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12782  226A  086F               	movf	(_map$3251+2)^(0+128),w
 12783  226B  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12784  226C  3198  200B         	fcall	___ftadd
 12785  226E  0021               	movlb	1	; select bank1
 12786  226F  0841               	movf	?___ftadd^(0+128),w
 12787  2270  00DE               	movwf	?_map^(0+128)
 12788  2271  0842               	movf	(?___ftadd+1)^(0+128),w
 12789  2272  00DF               	movwf	(?_map+1)^(0+128)
 12790  2273  0843               	movf	(?___ftadd+2)^(0+128),w
 12791  2274  00E0               	movwf	(?_map+2)^(0+128)
 12792  2275  0008               	return
 12793  2276                     __end_of_map:	
 12794                           
 12795                           	psect	text31
 12796  2301                     __ptext31:	
 12797 ;; *************** function _setFrequency *****************
 12798 ;; Defined at:
 12799 ;;		line 31 in file "knobs.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  rawValue        2   74[BANK2 ] int 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12813 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12814 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12816 ;;      Totals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12817 ;;Total ram usage:        5 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:   11
 12820 ;; This function calls:
 12821 ;;		___awtoft
 12822 ;;		___ftadd
 12823 ;;		___ftneg
 12824 ;;		_scaleA100kPot
 12825 ;;		_updateFrequency
 12826 ;; This function is called by:
 12827 ;;		_main
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           
 12832                           ;psect for function _setFrequency
 12833  2301                     _setFrequency:	
 12834                           
 12835                           ;knobs.c: 32: CCPR1 = scaleA100kPot(1023.0 - rawValue);
 12836                           
 12837                           ;incstack = 0
 12838                           ; Regs used in _setFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12839  2301  30C0               	movlw	192
 12840  2302  0021               	movlb	1	; select bank1
 12841  2303  00C1               	movwf	___ftadd@f1^(0+128)
 12842  2304  307F               	movlw	127
 12843  2305  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12844  2306  3044               	movlw	68
 12845  2307  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12846  2308  0022               	movlb	2	; select bank2
 12847  2309  086B               	movf	(setFrequency@rawValue+1)^(0+256),w
 12848  230A  0021               	movlb	1	; select bank1
 12849  230B  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12850  230C  0022               	movlb	2	; select bank2
 12851  230D  086A               	movf	setFrequency@rawValue^(0+256),w
 12852  230E  0021               	movlb	1	; select bank1
 12853  230F  00A8               	movwf	___awtoft@c^(0+128)
 12854  2310  31B2  22F0  31A3   	fcall	___awtoft
 12855  2313  0021               	movlb	1	; select bank1
 12856  2314  0828               	movf	?___awtoft^(0+128),w
 12857  2315  00BE               	movwf	___ftneg@f1^(0+128)
 12858  2316  0829               	movf	(?___awtoft+1)^(0+128),w
 12859  2317  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12860  2318  082A               	movf	(?___awtoft+2)^(0+128),w
 12861  2319  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12862  231A  31BF  27C8  31A3   	fcall	___ftneg
 12863  231D  0021               	movlb	1	; select bank1
 12864  231E  083E               	movf	?___ftneg^(0+128),w
 12865  231F  00C4               	movwf	___ftadd@f2^(0+128)
 12866  2320  083F               	movf	(?___ftneg+1)^(0+128),w
 12867  2321  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12868  2322  0840               	movf	(?___ftneg+2)^(0+128),w
 12869  2323  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12870  2324  3198  200B  31A3   	fcall	___ftadd
 12871  2327  0021               	movlb	1	; select bank1
 12872  2328  0841               	movf	?___ftadd^(0+128),w
 12873  2329  0022               	movlb	2	; select bank2
 12874  232A  00EC               	movwf	_setFrequency$3273^(0+256)
 12875  232B  0021               	movlb	1	; select bank1
 12876  232C  0842               	movf	(?___ftadd+1)^(0+128),w
 12877  232D  0022               	movlb	2	; select bank2
 12878  232E  00ED               	movwf	(_setFrequency$3273+1)^(0+256)
 12879  232F  0021               	movlb	1	; select bank1
 12880  2330  0843               	movf	(?___ftadd+2)^(0+128),w
 12881  2331  0022               	movlb	2	; select bank2
 12882  2332  00EE               	movwf	(_setFrequency$3273+2)^(0+256)
 12883                           
 12884                           ;knobs.c: 32: CCPR1 = scaleA100kPot(1023.0 - rawValue);
 12885  2333  086C               	movf	_setFrequency$3273^(0+256),w
 12886  2334  00E7               	movwf	scaleA100kPot@input^(0+256)
 12887  2335  086D               	movf	(_setFrequency$3273+1)^(0+256),w
 12888  2336  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12889  2337  086E               	movf	(_setFrequency$3273+2)^(0+256),w
 12890  2338  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12891  2339  31A0  20DF  31A3   	fcall	_scaleA100kPot
 12892  233C  0022               	movlb	2	; select bank2
 12893  233D  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 12894  233E  0025               	movlb	5	; select bank5
 12895  233F  0092               	movwf	18	;volatile
 12896  2340  0022               	movlb	2	; select bank2
 12897  2341  0867               	movf	?_scaleA100kPot^(0+256),w
 12898  2342  0025               	movlb	5	; select bank5
 12899  2343  0091               	movwf	17	;volatile
 12900                           
 12901                           ;knobs.c: 33: CCPR2 = scaleA100kPot(1023.0 - rawValue);
 12902  2344  30C0               	movlw	192
 12903  2345  0021               	movlb	1	; select bank1
 12904  2346  00C1               	movwf	___ftadd@f1^(0+128)
 12905  2347  307F               	movlw	127
 12906  2348  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12907  2349  3044               	movlw	68
 12908  234A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12909  234B  0022               	movlb	2	; select bank2
 12910  234C  086B               	movf	(setFrequency@rawValue+1)^(0+256),w
 12911  234D  0021               	movlb	1	; select bank1
 12912  234E  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12913  234F  0022               	movlb	2	; select bank2
 12914  2350  086A               	movf	setFrequency@rawValue^(0+256),w
 12915  2351  0021               	movlb	1	; select bank1
 12916  2352  00A8               	movwf	___awtoft@c^(0+128)
 12917  2353  31B2  22F0  31A3   	fcall	___awtoft
 12918  2356  0021               	movlb	1	; select bank1
 12919  2357  0828               	movf	?___awtoft^(0+128),w
 12920  2358  00BE               	movwf	___ftneg@f1^(0+128)
 12921  2359  0829               	movf	(?___awtoft+1)^(0+128),w
 12922  235A  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12923  235B  082A               	movf	(?___awtoft+2)^(0+128),w
 12924  235C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12925  235D  31BF  27C8  31A3   	fcall	___ftneg
 12926  2360  0021               	movlb	1	; select bank1
 12927  2361  083E               	movf	?___ftneg^(0+128),w
 12928  2362  00C4               	movwf	___ftadd@f2^(0+128)
 12929  2363  083F               	movf	(?___ftneg+1)^(0+128),w
 12930  2364  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12931  2365  0840               	movf	(?___ftneg+2)^(0+128),w
 12932  2366  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12933  2367  3198  200B  31A3   	fcall	___ftadd
 12934  236A  0021               	movlb	1	; select bank1
 12935  236B  0841               	movf	?___ftadd^(0+128),w
 12936  236C  0022               	movlb	2	; select bank2
 12937  236D  00EC               	movwf	_setFrequency$3273^(0+256)
 12938  236E  0021               	movlb	1	; select bank1
 12939  236F  0842               	movf	(?___ftadd+1)^(0+128),w
 12940  2370  0022               	movlb	2	; select bank2
 12941  2371  00ED               	movwf	(_setFrequency$3273+1)^(0+256)
 12942  2372  0021               	movlb	1	; select bank1
 12943  2373  0843               	movf	(?___ftadd+2)^(0+128),w
 12944  2374  0022               	movlb	2	; select bank2
 12945  2375  00EE               	movwf	(_setFrequency$3273+2)^(0+256)
 12946                           
 12947                           ;knobs.c: 33: CCPR2 = scaleA100kPot(1023.0 - rawValue);
 12948  2376  086C               	movf	_setFrequency$3273^(0+256),w
 12949  2377  00E7               	movwf	scaleA100kPot@input^(0+256)
 12950  2378  086D               	movf	(_setFrequency$3273+1)^(0+256),w
 12951  2379  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12952  237A  086E               	movf	(_setFrequency$3273+2)^(0+256),w
 12953  237B  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12954  237C  31A0  20DF  31A3   	fcall	_scaleA100kPot
 12955  237F  0022               	movlb	2	; select bank2
 12956  2380  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 12957  2381  0025               	movlb	5	; select bank5
 12958  2382  0099               	movwf	25	;volatile
 12959  2383  0022               	movlb	2	; select bank2
 12960  2384  0867               	movf	?_scaleA100kPot^(0+256),w
 12961  2385  0025               	movlb	5	; select bank5
 12962  2386  0098               	movwf	24	;volatile
 12963                           
 12964                           ;knobs.c: 34: if (isInitialized == 1) {updateFrequency(rawValue);}
 12965  2387  0020               	movlb	0	; select bank0
 12966  2388  0362               	decf	_isInitialized,w
 12967  2389  1D03               	btfss	3,2
 12968  238A  0008               	return
 12969  238B  0022               	movlb	2	; select bank2
 12970  238C  086B               	movf	(setFrequency@rawValue+1)^(0+256),w
 12971  238D  0021               	movlb	1	; select bank1
 12972  238E  00A1               	movwf	(updateFrequency@currentValue+1)^(0+128)
 12973  238F  0022               	movlb	2	; select bank2
 12974  2390  086A               	movf	setFrequency@rawValue^(0+256),w
 12975  2391  0021               	movlb	1	; select bank1
 12976  2392  00A0               	movwf	updateFrequency@currentValue^(0+128)
 12977  2393  31BF  27DA         	fcall	_updateFrequency
 12978  2395  0008               	return
 12979  2396                     __end_of_setFrequency:	
 12980                           
 12981                           	psect	text32
 12982  3FDA                     __ptext32:	
 12983 ;; *************** function _updateFrequency *****************
 12984 ;; Defined at:
 12985 ;;		line 266 in file "state_manager.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  currentValue    2    0[BANK1 ] int 
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;		None
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  1    wreg      void 
 12992 ;; Registers used:
 12993 ;;		wreg
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12999 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13002 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13003 ;;Total ram usage:        2 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    5
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_setFrequency
 13010 ;;		_setSymmetry
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           
 13015                           ;psect for function _updateFrequency
 13016  3FDA                     _updateFrequency:	
 13017                           
 13018                           ;state_manager.c: 267: pedalState.frequency = currentValue;
 13019                           
 13020                           ;incstack = 0
 13021                           ; Regs used in _updateFrequency: [wreg]
 13022  3FDA  0021               	movlb	1	; select bank1
 13023  3FDB  0821               	movf	(updateFrequency@currentValue+1)^(0+128),w
 13024  3FDC  0025               	movlb	5	; select bank5
 13025  3FDD  00BD               	movwf	((_pedalState+1)^(0+640)+8)
 13026  3FDE  0021               	movlb	1	; select bank1
 13027  3FDF  0820               	movf	updateFrequency@currentValue^(0+128),w
 13028  3FE0  0025               	movlb	5	; select bank5
 13029  3FE1  00BC               	movwf	(_pedalState^(0+640)+8)
 13030  3FE2  0008               	return
 13031  3FE3                     __end_of_updateFrequency:	
 13032                           
 13033                           	psect	text33
 13034  20DF                     __ptext33:	
 13035 ;; *************** function _scaleA100kPot *****************
 13036 ;; Defined at:
 13037 ;;		line 188 in file "user.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;  input           3   71[BANK2 ] void 
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;  pwm             3    0[BANK3 ] float 
 13042 ;; Return value:  Size  Location     Type
 13043 ;;                  2   71[BANK2 ] int 
 13044 ;; Registers used:
 13045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13051 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13052 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13054 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13055 ;;Total ram usage:       12 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; Hardware stack levels required when called:   10
 13058 ;; This function calls:
 13059 ;;		___ftdiv
 13060 ;;		___ftmul
 13061 ;;		___fttol
 13062 ;;		_pow
 13063 ;; This function is called by:
 13064 ;;		_main
 13065 ;;		_setFrequency
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           
 13070                           ;psect for function _scaleA100kPot
 13071  20DF                     _scaleA100kPot:	
 13072                           
 13073                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 13074                           
 13075                           ;incstack = 0
 13076                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13077  20DF  0022               	movlb	2	; select bank2
 13078  20E0  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 13079  20E1  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 13080  20E2  0467               	iorwf	scaleA100kPot@input^(0+256),w
 13081  20E3  1D03               	skipz
 13082  20E4  28EB               	goto	l7419
 13083  20E5  3000               	movlw	0
 13084  20E6  00E7               	movwf	scaleA100kPot@input^(0+256)
 13085  20E7  3080               	movlw	128
 13086  20E8  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 13087  20E9  303F               	movlw	63
 13088  20EA  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 13089  20EB                     l7419:	
 13090                           
 13091                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 13092  20EB  30C0               	movlw	192
 13093  20EC  0021               	movlb	1	; select bank1
 13094  20ED  00CE               	movwf	___ftdiv@f2^(0+128)
 13095  20EE  307F               	movlw	127
 13096  20EF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13097  20F0  3044               	movlw	68
 13098  20F1  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13099  20F2  0022               	movlb	2	; select bank2
 13100  20F3  0867               	movf	scaleA100kPot@input^(0+256),w
 13101  20F4  0021               	movlb	1	; select bank1
 13102  20F5  00D1               	movwf	___ftdiv@f1^(0+128)
 13103  20F6  0022               	movlb	2	; select bank2
 13104  20F7  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 13105  20F8  0021               	movlb	1	; select bank1
 13106  20F9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13107  20FA  0022               	movlb	2	; select bank2
 13108  20FB  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 13109  20FC  0021               	movlb	1	; select bank1
 13110  20FD  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13111  20FE  31A4  2434  31A0   	fcall	___ftdiv
 13112  2101  0021               	movlb	1	; select bank1
 13113  2102  084E               	movf	?___ftdiv^(0+128),w
 13114  2103  0023               	movlb	3	; select bank3
 13115  2104  00A3               	movwf	_scaleA100kPot$3253^(0+384)
 13116  2105  0021               	movlb	1	; select bank1
 13117  2106  084F               	movf	(?___ftdiv+1)^(0+128),w
 13118  2107  0023               	movlb	3	; select bank3
 13119  2108  00A4               	movwf	(_scaleA100kPot$3253+1)^(0+384)
 13120  2109  0021               	movlb	1	; select bank1
 13121  210A  0850               	movf	(?___ftdiv+2)^(0+128),w
 13122  210B  0023               	movlb	3	; select bank3
 13123  210C  00A5               	movwf	(_scaleA100kPot$3253+2)^(0+384)
 13124                           
 13125                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 13126  210D  3056               	movlw	86
 13127  210E  0022               	movlb	2	; select bank2
 13128  210F  00D8               	movwf	pow@y^(0+256)
 13129  2110  308E               	movlw	142
 13130  2111  00D9               	movwf	(pow@y+1)^(0+256)
 13131  2112  30BF               	movlw	191
 13132  2113  00DA               	movwf	(pow@y+2)^(0+256)
 13133  2114  0023               	movlb	3	; select bank3
 13134  2115  0823               	movf	_scaleA100kPot$3253^(0+384),w
 13135  2116  0022               	movlb	2	; select bank2
 13136  2117  00D5               	movwf	pow@x^(0+256)
 13137  2118  0023               	movlb	3	; select bank3
 13138  2119  0824               	movf	(_scaleA100kPot$3253+1)^(0+384),w
 13139  211A  0022               	movlb	2	; select bank2
 13140  211B  00D6               	movwf	(pow@x+1)^(0+256)
 13141  211C  0023               	movlb	3	; select bank3
 13142  211D  0825               	movf	(_scaleA100kPot$3253+2)^(0+384),w
 13143  211E  0022               	movlb	2	; select bank2
 13144  211F  00D7               	movwf	(pow@x+2)^(0+256)
 13145  2120  3199  21FA  31A0   	fcall	_pow
 13146  2123  0022               	movlb	2	; select bank2
 13147  2124  0855               	movf	?_pow^(0+256),w
 13148  2125  0023               	movlb	3	; select bank3
 13149  2126  00A6               	movwf	_scaleA100kPot$3254^(0+384)
 13150  2127  0022               	movlb	2	; select bank2
 13151  2128  0856               	movf	(?_pow+1)^(0+256),w
 13152  2129  0023               	movlb	3	; select bank3
 13153  212A  00A7               	movwf	(_scaleA100kPot$3254+1)^(0+384)
 13154  212B  0022               	movlb	2	; select bank2
 13155  212C  0857               	movf	(?_pow+2)^(0+256),w
 13156  212D  0023               	movlb	3	; select bank3
 13157  212E  00A8               	movwf	(_scaleA100kPot$3254+2)^(0+384)
 13158                           
 13159                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 13160  212F  309F               	movlw	159
 13161  2130  0021               	movlb	1	; select bank1
 13162  2131  00AE               	movwf	___ftmul@f1^(0+128)
 13163  2132  3068               	movlw	104
 13164  2133  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13165  2134  3040               	movlw	64
 13166  2135  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13167  2136  0023               	movlb	3	; select bank3
 13168  2137  0826               	movf	_scaleA100kPot$3254^(0+384),w
 13169  2138  0021               	movlb	1	; select bank1
 13170  2139  00B1               	movwf	___ftmul@f2^(0+128)
 13171  213A  0023               	movlb	3	; select bank3
 13172  213B  0827               	movf	(_scaleA100kPot$3254+1)^(0+384),w
 13173  213C  0021               	movlb	1	; select bank1
 13174  213D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13175  213E  0023               	movlb	3	; select bank3
 13176  213F  0828               	movf	(_scaleA100kPot$3254+2)^(0+384),w
 13177  2140  0021               	movlb	1	; select bank1
 13178  2141  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13179  2142  31A5  2590  31A0   	fcall	___ftmul
 13180  2145  0021               	movlb	1	; select bank1
 13181  2146  082E               	movf	?___ftmul^(0+128),w
 13182  2147  0023               	movlb	3	; select bank3
 13183  2148  00A0               	movwf	scaleA100kPot@pwm^(0+384)
 13184  2149  0021               	movlb	1	; select bank1
 13185  214A  082F               	movf	(?___ftmul+1)^(0+128),w
 13186  214B  0023               	movlb	3	; select bank3
 13187  214C  00A1               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 13188  214D  0021               	movlb	1	; select bank1
 13189  214E  0830               	movf	(?___ftmul+2)^(0+128),w
 13190  214F  0023               	movlb	3	; select bank3
 13191  2150  00A2               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 13192                           
 13193                           ;user.c: 192: return (int)(pwm);
 13194  2151  0820               	movf	scaleA100kPot@pwm^(0+384),w
 13195  2152  0022               	movlb	2	; select bank2
 13196  2153  00A0               	movwf	___fttol@f1^(0+256)
 13197  2154  0023               	movlb	3	; select bank3
 13198  2155  0821               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 13199  2156  0022               	movlb	2	; select bank2
 13200  2157  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13201  2158  0023               	movlb	3	; select bank3
 13202  2159  0822               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 13203  215A  0022               	movlb	2	; select bank2
 13204  215B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13205  215C  31A1  2164         	fcall	___fttol
 13206  215E  0022               	movlb	2	; select bank2
 13207  215F  0821               	movf	(?___fttol^(0+256)+1),w
 13208  2160  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 13209  2161  0820               	movf	?___fttol^(0+256),w
 13210  2162  00E7               	movwf	?_scaleA100kPot^(0+256)
 13211  2163  0008               	return
 13212  2164                     __end_of_scaleA100kPot:	
 13213                           
 13214                           	psect	text34
 13215  19FA                     __ptext34:	
 13216 ;; *************** function _pow *****************
 13217 ;; Defined at:
 13218 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 13219 ;; Parameters:    Size  Location     Type
 13220 ;;  x               3   53[BANK2 ] int 
 13221 ;;  y               3   56[BANK2 ] int 
 13222 ;; Auto vars:     Size  Location     Type
 13223 ;;  yi              4   67[BANK2 ] unsigned long 
 13224 ;;  sign            1   66[BANK2 ] unsigned char 
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  3   53[BANK2 ] unsigned char 
 13227 ;; Registers used:
 13228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13234 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13235 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13236 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13237 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13238 ;;Total ram usage:       18 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; Hardware stack levels required when called:    9
 13241 ;; This function calls:
 13242 ;;		___ftge
 13243 ;;		___ftmul
 13244 ;;		___ftneg
 13245 ;;		___fttol
 13246 ;;		___lltoft
 13247 ;;		_exp
 13248 ;;		_log
 13249 ;; This function is called by:
 13250 ;;		_scaleA100kPot
 13251 ;;		_scaleA10kPot
 13252 ;;		_scaleiA10kPot
 13253 ;;		_scaleiA100kPot
 13254 ;;		_scaleA25kPot
 13255 ;;		_scaleiA25kPot
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           
 13260                           ;psect for function _pow
 13261  19FA                     _pow:	
 13262                           
 13263                           ;incstack = 0
 13264                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13265  19FA  0022               	movlb	2	; select bank2
 13266  19FB  01E2               	clrf	pow@sign^(0+256)
 13267  19FC  0857               	movf	(pow@x+2)^(0+256),w
 13268  19FD  0456               	iorwf	(pow@x+1)^(0+256),w
 13269  19FE  0455               	iorwf	pow@x^(0+256),w
 13270  19FF  1D03               	skipz
 13271  1A00  2A26               	goto	l7059
 13272  1A01  3000               	movlw	0
 13273  1A02  0021               	movlb	1	; select bank1
 13274  1A03  00A0               	movwf	___ftge@ff1^(0+128)
 13275  1A04  3000               	movlw	0
 13276  1A05  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13277  1A06  3000               	movlw	0
 13278  1A07  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13279  1A08  0022               	movlb	2	; select bank2
 13280  1A09  0858               	movf	pow@y^(0+256),w
 13281  1A0A  0021               	movlb	1	; select bank1
 13282  1A0B  00A3               	movwf	___ftge@ff2^(0+128)
 13283  1A0C  0022               	movlb	2	; select bank2
 13284  1A0D  0859               	movf	(pow@y+1)^(0+256),w
 13285  1A0E  0021               	movlb	1	; select bank1
 13286  1A0F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13287  1A10  0022               	movlb	2	; select bank2
 13288  1A11  085A               	movf	(pow@y+2)^(0+256),w
 13289  1A12  0021               	movlb	1	; select bank1
 13290  1A13  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13291  1A14  31B6  26CF  3199   	fcall	___ftge
 13292  1A17  1C03               	btfss	3,0
 13293  1A18  2A1E               	goto	l2819
 13294  1A19  3021               	movlw	33
 13295  1A1A  0025               	movlb	5	; select bank5
 13296  1A1B  00E6               	movwf	_errno^(0+640)
 13297  1A1C  3000               	movlw	0
 13298  1A1D  00E7               	movwf	(_errno^(0+640)+1)
 13299  1A1E                     l2819:	
 13300  1A1E  3000               	movlw	0
 13301  1A1F  0022               	movlb	2	; select bank2
 13302  1A20  00D5               	movwf	?_pow^(0+256)
 13303  1A21  3000               	movlw	0
 13304  1A22  00D6               	movwf	(?_pow+1)^(0+256)
 13305  1A23  3000               	movlw	0
 13306  1A24  00D7               	movwf	(?_pow+2)^(0+256)
 13307  1A25  0008               	return
 13308  1A26                     l7059:	
 13309  1A26  085A               	movf	(pow@y+2)^(0+256),w
 13310  1A27  0459               	iorwf	(pow@y+1)^(0+256),w
 13311  1A28  0458               	iorwf	pow@y^(0+256),w
 13312  1A29  1D03               	skipz
 13313  1A2A  2A32               	goto	l7065
 13314  1A2B  3000               	movlw	0
 13315  1A2C  00D5               	movwf	?_pow^(0+256)
 13316  1A2D  3080               	movlw	128
 13317  1A2E  00D6               	movwf	(?_pow+1)^(0+256)
 13318  1A2F  303F               	movlw	63
 13319  1A30  00D7               	movwf	(?_pow+2)^(0+256)
 13320  1A31  0008               	return
 13321  1A32                     l7065:	
 13322  1A32  0855               	movf	pow@x^(0+256),w
 13323  1A33  0021               	movlb	1	; select bank1
 13324  1A34  00A0               	movwf	___ftge@ff1^(0+128)
 13325  1A35  0022               	movlb	2	; select bank2
 13326  1A36  0856               	movf	(pow@x+1)^(0+256),w
 13327  1A37  0021               	movlb	1	; select bank1
 13328  1A38  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13329  1A39  0022               	movlb	2	; select bank2
 13330  1A3A  0857               	movf	(pow@x+2)^(0+256),w
 13331  1A3B  0021               	movlb	1	; select bank1
 13332  1A3C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13333  1A3D  3000               	movlw	0
 13334  1A3E  00A3               	movwf	___ftge@ff2^(0+128)
 13335  1A3F  3000               	movlw	0
 13336  1A40  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13337  1A41  3000               	movlw	0
 13338  1A42  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13339  1A43  31B6  26CF  3199   	fcall	___ftge
 13340  1A46  1803               	btfsc	3,0
 13341  1A47  2AAC               	goto	l7077
 13342  1A48  0022               	movlb	2	; select bank2
 13343  1A49  0858               	movf	pow@y^(0+256),w
 13344  1A4A  00A0               	movwf	___fttol@f1^(0+256)
 13345  1A4B  0859               	movf	(pow@y+1)^(0+256),w
 13346  1A4C  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13347  1A4D  085A               	movf	(pow@y+2)^(0+256),w
 13348  1A4E  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13349  1A4F  31A1  2164  3199   	fcall	___fttol
 13350  1A52  0022               	movlb	2	; select bank2
 13351  1A53  0823               	movf	(?___fttol+3)^(0+256),w
 13352  1A54  00E6               	movwf	(pow@yi+3)^(0+256)
 13353  1A55  0822               	movf	(?___fttol+2)^(0+256),w
 13354  1A56  00E5               	movwf	(pow@yi+2)^(0+256)
 13355  1A57  0821               	movf	(?___fttol+1)^(0+256),w
 13356  1A58  00E4               	movwf	(pow@yi+1)^(0+256)
 13357  1A59  0820               	movf	?___fttol^(0+256),w
 13358  1A5A  00E3               	movwf	pow@yi^(0+256)
 13359  1A5B  0866               	movf	(pow@yi+3)^(0+256),w
 13360  1A5C  0021               	movlb	1	; select bank1
 13361  1A5D  00AB               	movwf	(___lltoft@c+3)^(0+128)
 13362  1A5E  0022               	movlb	2	; select bank2
 13363  1A5F  0865               	movf	(pow@yi+2)^(0+256),w
 13364  1A60  0021               	movlb	1	; select bank1
 13365  1A61  00AA               	movwf	(___lltoft@c+2)^(0+128)
 13366  1A62  0022               	movlb	2	; select bank2
 13367  1A63  0864               	movf	(pow@yi+1)^(0+256),w
 13368  1A64  0021               	movlb	1	; select bank1
 13369  1A65  00A9               	movwf	(___lltoft@c+1)^(0+128)
 13370  1A66  0022               	movlb	2	; select bank2
 13371  1A67  0863               	movf	pow@yi^(0+256),w
 13372  1A68  0021               	movlb	1	; select bank1
 13373  1A69  00A8               	movwf	___lltoft@c^(0+128)
 13374  1A6A  31B3  23AD  3199   	fcall	___lltoft
 13375  1A6D  0022               	movlb	2	; select bank2
 13376  1A6E  085A               	movf	(pow@y+2)^(0+256),w
 13377  1A6F  0021               	movlb	1	; select bank1
 13378  1A70  062A               	xorwf	(?___lltoft+2)^(0+128),w
 13379  1A71  1D03               	skipz
 13380  1A72  2A7D               	goto	u6375
 13381  1A73  0022               	movlb	2	; select bank2
 13382  1A74  0859               	movf	(pow@y+1)^(0+256),w
 13383  1A75  0021               	movlb	1	; select bank1
 13384  1A76  0629               	xorwf	(?___lltoft+1)^(0+128),w
 13385  1A77  1D03               	skipz
 13386  1A78  2A7D               	goto	u6375
 13387  1A79  0022               	movlb	2	; select bank2
 13388  1A7A  0858               	movf	pow@y^(0+256),w
 13389  1A7B  0021               	movlb	1	; select bank1
 13390  1A7C  0628               	xorwf	?___lltoft^(0+128),w
 13391  1A7D                     u6375:	
 13392  1A7D  1903               	skipnz
 13393  1A7E  2A8C               	goto	l7073
 13394  1A7F  3021               	movlw	33
 13395  1A80  0025               	movlb	5	; select bank5
 13396  1A81  00E6               	movwf	_errno^(0+640)
 13397  1A82  3000               	movlw	0
 13398  1A83  00E7               	movwf	(_errno^(0+640)+1)
 13399  1A84  3000               	movlw	0
 13400  1A85  0022               	movlb	2	; select bank2
 13401  1A86  00D5               	movwf	?_pow^(0+256)
 13402  1A87  3000               	movlw	0
 13403  1A88  00D6               	movwf	(?_pow+1)^(0+256)
 13404  1A89  3000               	movlw	0
 13405  1A8A  00D7               	movwf	(?_pow+2)^(0+256)
 13406  1A8B  0008               	return
 13407  1A8C                     l7073:	
 13408  1A8C  0022               	movlb	2	; select bank2
 13409  1A8D  0863               	movf	pow@yi^(0+256),w
 13410  1A8E  3901               	andlw	1
 13411  1A8F  00DB               	movwf	??_pow^(0+256)
 13412  1A90  085B               	movf	??_pow^(0+256),w
 13413  1A91  00E2               	movwf	pow@sign^(0+256)
 13414  1A92  0855               	movf	pow@x^(0+256),w
 13415  1A93  0021               	movlb	1	; select bank1
 13416  1A94  00BE               	movwf	___ftneg@f1^(0+128)
 13417  1A95  0022               	movlb	2	; select bank2
 13418  1A96  0856               	movf	(pow@x+1)^(0+256),w
 13419  1A97  0021               	movlb	1	; select bank1
 13420  1A98  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13421  1A99  0022               	movlb	2	; select bank2
 13422  1A9A  0857               	movf	(pow@x+2)^(0+256),w
 13423  1A9B  0021               	movlb	1	; select bank1
 13424  1A9C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13425  1A9D  31BF  27C8  3199   	fcall	___ftneg
 13426  1AA0  0021               	movlb	1	; select bank1
 13427  1AA1  083E               	movf	?___ftneg^(0+128),w
 13428  1AA2  0022               	movlb	2	; select bank2
 13429  1AA3  00D5               	movwf	pow@x^(0+256)
 13430  1AA4  0021               	movlb	1	; select bank1
 13431  1AA5  083F               	movf	(?___ftneg+1)^(0+128),w
 13432  1AA6  0022               	movlb	2	; select bank2
 13433  1AA7  00D6               	movwf	(pow@x+1)^(0+256)
 13434  1AA8  0021               	movlb	1	; select bank1
 13435  1AA9  0840               	movf	(?___ftneg+2)^(0+128),w
 13436  1AAA  0022               	movlb	2	; select bank2
 13437  1AAB  00D7               	movwf	(pow@x+2)^(0+256)
 13438  1AAC                     l7077:	
 13439  1AAC  0022               	movlb	2	; select bank2
 13440  1AAD  0855               	movf	pow@x^(0+256),w
 13441  1AAE  00BE               	movwf	log@x^(0+256)
 13442  1AAF  0856               	movf	(pow@x+1)^(0+256),w
 13443  1AB0  00BF               	movwf	(log@x+1)^(0+256)
 13444  1AB1  0857               	movf	(pow@x+2)^(0+256),w
 13445  1AB2  00C0               	movwf	(log@x+2)^(0+256)
 13446  1AB3  3190  201B  3199   	fcall	_log
 13447  1AB6  0022               	movlb	2	; select bank2
 13448  1AB7  083E               	movf	?_log^(0+256),w
 13449  1AB8  00DC               	movwf	_pow$3275^(0+256)
 13450  1AB9  083F               	movf	(?_log+1)^(0+256),w
 13451  1ABA  00DD               	movwf	(_pow$3275+1)^(0+256)
 13452  1ABB  0840               	movf	(?_log+2)^(0+256),w
 13453  1ABC  00DE               	movwf	(_pow$3275+2)^(0+256)
 13454  1ABD  0858               	movf	pow@y^(0+256),w
 13455  1ABE  0021               	movlb	1	; select bank1
 13456  1ABF  00AE               	movwf	___ftmul@f1^(0+128)
 13457  1AC0  0022               	movlb	2	; select bank2
 13458  1AC1  0859               	movf	(pow@y+1)^(0+256),w
 13459  1AC2  0021               	movlb	1	; select bank1
 13460  1AC3  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13461  1AC4  0022               	movlb	2	; select bank2
 13462  1AC5  085A               	movf	(pow@y+2)^(0+256),w
 13463  1AC6  0021               	movlb	1	; select bank1
 13464  1AC7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13465  1AC8  0022               	movlb	2	; select bank2
 13466  1AC9  085C               	movf	_pow$3275^(0+256),w
 13467  1ACA  0021               	movlb	1	; select bank1
 13468  1ACB  00B1               	movwf	___ftmul@f2^(0+128)
 13469  1ACC  0022               	movlb	2	; select bank2
 13470  1ACD  085D               	movf	(_pow$3275+1)^(0+256),w
 13471  1ACE  0021               	movlb	1	; select bank1
 13472  1ACF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13473  1AD0  0022               	movlb	2	; select bank2
 13474  1AD1  085E               	movf	(_pow$3275+2)^(0+256),w
 13475  1AD2  0021               	movlb	1	; select bank1
 13476  1AD3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13477  1AD4  31A5  2590  3199   	fcall	___ftmul
 13478  1AD7  0021               	movlb	1	; select bank1
 13479  1AD8  082E               	movf	?___ftmul^(0+128),w
 13480  1AD9  0022               	movlb	2	; select bank2
 13481  1ADA  00DF               	movwf	_pow$3276^(0+256)
 13482  1ADB  0021               	movlb	1	; select bank1
 13483  1ADC  082F               	movf	(?___ftmul+1)^(0+128),w
 13484  1ADD  0022               	movlb	2	; select bank2
 13485  1ADE  00E0               	movwf	(_pow$3276+1)^(0+256)
 13486  1ADF  0021               	movlb	1	; select bank1
 13487  1AE0  0830               	movf	(?___ftmul+2)^(0+128),w
 13488  1AE1  0022               	movlb	2	; select bank2
 13489  1AE2  00E1               	movwf	(_pow$3276+2)^(0+256)
 13490  1AE3  085F               	movf	_pow$3276^(0+256),w
 13491  1AE4  00C8               	movwf	exp@x^(0+256)
 13492  1AE5  0860               	movf	(_pow$3276+1)^(0+256),w
 13493  1AE6  00C9               	movwf	(exp@x+1)^(0+256)
 13494  1AE7  0861               	movf	(_pow$3276+2)^(0+256),w
 13495  1AE8  00CA               	movwf	(exp@x+2)^(0+256)
 13496  1AE9  319B  2310  3199   	fcall	_exp
 13497  1AEC  0022               	movlb	2	; select bank2
 13498  1AED  0848               	movf	?_exp^(0+256),w
 13499  1AEE  00D5               	movwf	pow@x^(0+256)
 13500  1AEF  0849               	movf	(?_exp+1)^(0+256),w
 13501  1AF0  00D6               	movwf	(pow@x+1)^(0+256)
 13502  1AF1  084A               	movf	(?_exp+2)^(0+256),w
 13503  1AF2  00D7               	movwf	(pow@x+2)^(0+256)
 13504  1AF3  0862               	movf	pow@sign^(0+256),w
 13505  1AF4  1903               	btfsc	3,2
 13506  1AF5  0008               	return
 13507  1AF6  0855               	movf	pow@x^(0+256),w
 13508  1AF7  0021               	movlb	1	; select bank1
 13509  1AF8  00BE               	movwf	___ftneg@f1^(0+128)
 13510  1AF9  0022               	movlb	2	; select bank2
 13511  1AFA  0856               	movf	(pow@x+1)^(0+256),w
 13512  1AFB  0021               	movlb	1	; select bank1
 13513  1AFC  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13514  1AFD  0022               	movlb	2	; select bank2
 13515  1AFE  0857               	movf	(pow@x+2)^(0+256),w
 13516  1AFF  0021               	movlb	1	; select bank1
 13517  1B00  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13518  1B01  31BF  27C8         	fcall	___ftneg
 13519  1B03  0021               	movlb	1	; select bank1
 13520  1B04  083E               	movf	?___ftneg^(0+128),w
 13521  1B05  0022               	movlb	2	; select bank2
 13522  1B06  00D5               	movwf	?_pow^(0+256)
 13523  1B07  0021               	movlb	1	; select bank1
 13524  1B08  083F               	movf	(?___ftneg+1)^(0+128),w
 13525  1B09  0022               	movlb	2	; select bank2
 13526  1B0A  00D6               	movwf	(?_pow+1)^(0+256)
 13527  1B0B  0021               	movlb	1	; select bank1
 13528  1B0C  0840               	movf	(?___ftneg+2)^(0+128),w
 13529  1B0D  0022               	movlb	2	; select bank2
 13530  1B0E  00D7               	movwf	(?_pow+2)^(0+256)
 13531  1B0F  0008               	return
 13532  1B10                     __end_of_pow:	
 13533                           
 13534                           	psect	text35
 13535  101B                     __ptext35:	
 13536 ;; *************** function _log *****************
 13537 ;; Defined at:
 13538 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 13539 ;; Parameters:    Size  Location     Type
 13540 ;;  x               3   30[BANK2 ] unsigned char 
 13541 ;; Auto vars:     Size  Location     Type
 13542 ;;  exponent        2   34[BANK2 ] int 
 13543 ;; Return value:  Size  Location     Type
 13544 ;;                  3   30[BANK2 ] int 
 13545 ;; Registers used:
 13546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13547 ;; Tracked objects:
 13548 ;;		On entry : 0/0
 13549 ;;		On exit  : 0/0
 13550 ;;		Unchanged: 0/0
 13551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13552 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13553 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13554 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13555 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13556 ;;Total ram usage:        6 bytes
 13557 ;; Hardware stack levels used:    1
 13558 ;; Hardware stack levels required when called:    8
 13559 ;; This function calls:
 13560 ;;		___awtoft
 13561 ;;		___ftadd
 13562 ;;		___ftge
 13563 ;;		___ftmul
 13564 ;;		_eval_poly
 13565 ;;		_frexp
 13566 ;; This function is called by:
 13567 ;;		_pow
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _log
 13573  101B                     _log:	
 13574                           
 13575                           ;incstack = 0
 13576                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13577  101B  0022               	movlb	2	; select bank2
 13578  101C  083E               	movf	log@x^(0+256),w
 13579  101D  0021               	movlb	1	; select bank1
 13580  101E  00A0               	movwf	___ftge@ff1^(0+128)
 13581  101F  0022               	movlb	2	; select bank2
 13582  1020  083F               	movf	(log@x+1)^(0+256),w
 13583  1021  0021               	movlb	1	; select bank1
 13584  1022  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13585  1023  0022               	movlb	2	; select bank2
 13586  1024  0840               	movf	(log@x+2)^(0+256),w
 13587  1025  0021               	movlb	1	; select bank1
 13588  1026  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13589  1027  3000               	movlw	0
 13590  1028  00A3               	movwf	___ftge@ff2^(0+128)
 13591  1029  3000               	movlw	0
 13592  102A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13593  102B  3000               	movlw	0
 13594  102C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13595  102D  31B6  26CF  3190   	fcall	___ftge
 13596  1030  1803               	btfsc	3,0
 13597  1031  283F               	goto	l6935
 13598  1032  3021               	movlw	33
 13599  1033  0025               	movlb	5	; select bank5
 13600  1034  00E6               	movwf	_errno^(0+640)
 13601  1035  3000               	movlw	0
 13602  1036  00E7               	movwf	(_errno^(0+640)+1)
 13603  1037  3000               	movlw	0
 13604  1038  0022               	movlb	2	; select bank2
 13605  1039  00BE               	movwf	?_log^(0+256)
 13606  103A  3000               	movlw	0
 13607  103B  00BF               	movwf	(?_log+1)^(0+256)
 13608  103C  3000               	movlw	0
 13609  103D  00C0               	movwf	(?_log+2)^(0+256)
 13610  103E  0008               	return
 13611  103F                     l6935:	
 13612  103F  0022               	movlb	2	; select bank2
 13613  1040  0840               	movf	(log@x+2)^(0+256),w
 13614  1041  043F               	iorwf	(log@x+1)^(0+256),w
 13615  1042  043E               	iorwf	log@x^(0+256),w
 13616  1043  1D03               	skipz
 13617  1044  2852               	goto	l6941
 13618  1045  3022               	movlw	34
 13619  1046  0025               	movlb	5	; select bank5
 13620  1047  00E6               	movwf	_errno^(0+640)
 13621  1048  3000               	movlw	0
 13622  1049  00E7               	movwf	(_errno^(0+640)+1)
 13623  104A  3000               	movlw	0
 13624  104B  0022               	movlb	2	; select bank2
 13625  104C  00BE               	movwf	?_log^(0+256)
 13626  104D  3000               	movlw	0
 13627  104E  00BF               	movwf	(?_log+1)^(0+256)
 13628  104F  3000               	movlw	0
 13629  1050  00C0               	movwf	(?_log+2)^(0+256)
 13630  1051  0008               	return
 13631  1052                     l6941:	
 13632  1052  3000               	movlw	0
 13633  1053  0021               	movlb	1	; select bank1
 13634  1054  00C1               	movwf	___ftadd@f1^(0+128)
 13635  1055  3080               	movlw	128
 13636  1056  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13637  1057  30BF               	movlw	191
 13638  1058  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13639  1059  3000               	movlw	0
 13640  105A  00AE               	movwf	___ftmul@f1^(0+128)
 13641  105B  3000               	movlw	0
 13642  105C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13643  105D  3040               	movlw	64
 13644  105E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13645  105F  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 13646  1060  0022               	movlb	2	; select bank2
 13647  1061  00C1               	movwf	??_log^(0+256)
 13648  1062  0841               	movf	??_log^(0+256),w
 13649  1063  0021               	movlb	1	; select bank1
 13650  1064  00A3               	movwf	frexp@eptr^(0+128)
 13651  1065  0022               	movlb	2	; select bank2
 13652  1066  083E               	movf	log@x^(0+256),w
 13653  1067  0021               	movlb	1	; select bank1
 13654  1068  00A0               	movwf	frexp@value^(0+128)
 13655  1069  0022               	movlb	2	; select bank2
 13656  106A  083F               	movf	(log@x+1)^(0+256),w
 13657  106B  0021               	movlb	1	; select bank1
 13658  106C  00A1               	movwf	(frexp@value+1)^(0+128)
 13659  106D  0022               	movlb	2	; select bank2
 13660  106E  0840               	movf	(log@x+2)^(0+256),w
 13661  106F  0021               	movlb	1	; select bank1
 13662  1070  00A2               	movwf	(frexp@value+2)^(0+128)
 13663  1071  31A8  2004  3190   	fcall	_frexp
 13664  1074  0021               	movlb	1	; select bank1
 13665  1075  0820               	movf	?_frexp^(0+128),w
 13666  1076  00B1               	movwf	___ftmul@f2^(0+128)
 13667  1077  0821               	movf	(?_frexp+1)^(0+128),w
 13668  1078  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13669  1079  0822               	movf	(?_frexp+2)^(0+128),w
 13670  107A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13671  107B  31A5  2590  3190   	fcall	___ftmul
 13672  107E  0021               	movlb	1	; select bank1
 13673  107F  082E               	movf	?___ftmul^(0+128),w
 13674  1080  00C4               	movwf	___ftadd@f2^(0+128)
 13675  1081  082F               	movf	(?___ftmul+1)^(0+128),w
 13676  1082  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13677  1083  0830               	movf	(?___ftmul+2)^(0+128),w
 13678  1084  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13679  1085  3198  200B  3190   	fcall	___ftadd
 13680  1088  0021               	movlb	1	; select bank1
 13681  1089  0841               	movf	?___ftadd^(0+128),w
 13682  108A  0022               	movlb	2	; select bank2
 13683  108B  00BE               	movwf	log@x^(0+256)
 13684  108C  0021               	movlb	1	; select bank1
 13685  108D  0842               	movf	(?___ftadd+1)^(0+128),w
 13686  108E  0022               	movlb	2	; select bank2
 13687  108F  00BF               	movwf	(log@x+1)^(0+256)
 13688  1090  0021               	movlb	1	; select bank1
 13689  1091  0843               	movf	(?___ftadd+2)^(0+128),w
 13690  1092  0022               	movlb	2	; select bank2
 13691  1093  00C0               	movwf	(log@x+2)^(0+256)
 13692  1094  30FF               	movlw	255
 13693  1095  07C2               	addwf	log@exponent^(0+256),f
 13694  1096  30FF               	movlw	255
 13695  1097  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 13696  1098  083E               	movf	log@x^(0+256),w
 13697  1099  00B4               	movwf	eval_poly@x^(0+256)
 13698  109A  083F               	movf	(log@x+1)^(0+256),w
 13699  109B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13700  109C  0840               	movf	(log@x+2)^(0+256),w
 13701  109D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13702  109E  301E               	movlw	low (log@coeff| (0+32768))
 13703  109F  00B7               	movwf	eval_poly@d^(0+256)
 13704  10A0  30B0               	movlw	high (log@coeff| (0+32768))
 13705  10A1  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13706  10A2  3008               	movlw	8
 13707  10A3  00B9               	movwf	eval_poly@n^(0+256)
 13708  10A4  3000               	movlw	0
 13709  10A5  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13710  10A6  31AE  260F  3190   	fcall	_eval_poly
 13711  10A9  0022               	movlb	2	; select bank2
 13712  10AA  0834               	movf	?_eval_poly^(0+256),w
 13713  10AB  00BE               	movwf	log@x^(0+256)
 13714  10AC  0835               	movf	(?_eval_poly+1)^(0+256),w
 13715  10AD  00BF               	movwf	(log@x+1)^(0+256)
 13716  10AE  0836               	movf	(?_eval_poly+2)^(0+256),w
 13717  10AF  00C0               	movwf	(log@x+2)^(0+256)
 13718  10B0  083E               	movf	log@x^(0+256),w
 13719  10B1  0021               	movlb	1	; select bank1
 13720  10B2  00C1               	movwf	___ftadd@f1^(0+128)
 13721  10B3  0022               	movlb	2	; select bank2
 13722  10B4  083F               	movf	(log@x+1)^(0+256),w
 13723  10B5  0021               	movlb	1	; select bank1
 13724  10B6  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13725  10B7  0022               	movlb	2	; select bank2
 13726  10B8  0840               	movf	(log@x+2)^(0+256),w
 13727  10B9  0021               	movlb	1	; select bank1
 13728  10BA  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13729  10BB  3072               	movlw	114
 13730  10BC  00AE               	movwf	___ftmul@f1^(0+128)
 13731  10BD  3031               	movlw	49
 13732  10BE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13733  10BF  303F               	movlw	63
 13734  10C0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13735  10C1  0022               	movlb	2	; select bank2
 13736  10C2  0843               	movf	(log@exponent+1)^(0+256),w
 13737  10C3  0021               	movlb	1	; select bank1
 13738  10C4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13739  10C5  0022               	movlb	2	; select bank2
 13740  10C6  0842               	movf	log@exponent^(0+256),w
 13741  10C7  0021               	movlb	1	; select bank1
 13742  10C8  00A8               	movwf	___awtoft@c^(0+128)
 13743  10C9  31B2  22F0  3190   	fcall	___awtoft
 13744  10CC  0021               	movlb	1	; select bank1
 13745  10CD  0828               	movf	?___awtoft^(0+128),w
 13746  10CE  00B1               	movwf	___ftmul@f2^(0+128)
 13747  10CF  0829               	movf	(?___awtoft+1)^(0+128),w
 13748  10D0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13749  10D1  082A               	movf	(?___awtoft+2)^(0+128),w
 13750  10D2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13751  10D3  31A5  2590  3190   	fcall	___ftmul
 13752  10D6  0021               	movlb	1	; select bank1
 13753  10D7  082E               	movf	?___ftmul^(0+128),w
 13754  10D8  00C4               	movwf	___ftadd@f2^(0+128)
 13755  10D9  082F               	movf	(?___ftmul+1)^(0+128),w
 13756  10DA  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13757  10DB  0830               	movf	(?___ftmul+2)^(0+128),w
 13758  10DC  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13759  10DD  3198  200B         	fcall	___ftadd
 13760  10DF  0021               	movlb	1	; select bank1
 13761  10E0  0841               	movf	?___ftadd^(0+128),w
 13762  10E1  0022               	movlb	2	; select bank2
 13763  10E2  00BE               	movwf	?_log^(0+256)
 13764  10E3  0021               	movlb	1	; select bank1
 13765  10E4  0842               	movf	(?___ftadd+1)^(0+128),w
 13766  10E5  0022               	movlb	2	; select bank2
 13767  10E6  00BF               	movwf	(?_log+1)^(0+256)
 13768  10E7  0021               	movlb	1	; select bank1
 13769  10E8  0843               	movf	(?___ftadd+2)^(0+128),w
 13770  10E9  0022               	movlb	2	; select bank2
 13771  10EA  00C0               	movwf	(?_log+2)^(0+256)
 13772  10EB  0008               	return
 13773  10EC                     __end_of_log:	
 13774                           
 13775                           	psect	text36
 13776  1B10                     __ptext36:	
 13777 ;; *************** function _exp *****************
 13778 ;; Defined at:
 13779 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13780 ;; Parameters:    Size  Location     Type
 13781 ;;  x               3   40[BANK2 ] int 
 13782 ;; Auto vars:     Size  Location     Type
 13783 ;;  exponent        2   50[BANK2 ] int 
 13784 ;;  sign            1   52[BANK2 ] unsigned char 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  3   40[BANK2 ] unsigned char 
 13787 ;; Registers used:
 13788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13794 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13795 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13796 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13797 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13798 ;;Total ram usage:       13 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    8
 13801 ;; This function calls:
 13802 ;;		___awtoft
 13803 ;;		___ftdiv
 13804 ;;		___ftge
 13805 ;;		___ftmul
 13806 ;;		___ftneg
 13807 ;;		___ftsub
 13808 ;;		___fttol
 13809 ;;		_eval_poly
 13810 ;;		_floor
 13811 ;;		_ldexp
 13812 ;; This function is called by:
 13813 ;;		_pow
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           
 13818                           ;psect for function _exp
 13819  1B10                     _exp:	
 13820                           
 13821                           ;incstack = 0
 13822                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13823  1B10  0022               	movlb	2	; select bank2
 13824  1B11  084A               	movf	(exp@x+2)^(0+256),w
 13825  1B12  0449               	iorwf	(exp@x+1)^(0+256),w
 13826  1B13  0448               	iorwf	exp@x^(0+256),w
 13827  1B14  1D03               	skipz
 13828  1B15  2B1D               	goto	l6957
 13829  1B16  3000               	movlw	0
 13830  1B17  00C8               	movwf	?_exp^(0+256)
 13831  1B18  3080               	movlw	128
 13832  1B19  00C9               	movwf	(?_exp+1)^(0+256)
 13833  1B1A  303F               	movlw	63
 13834  1B1B  00CA               	movwf	(?_exp+2)^(0+256)
 13835  1B1C  0008               	return
 13836  1B1D                     l6957:	
 13837  1B1D  3072               	movlw	114
 13838  1B1E  0021               	movlb	1	; select bank1
 13839  1B1F  00A0               	movwf	___ftge@ff1^(0+128)
 13840  1B20  3031               	movlw	49
 13841  1B21  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13842  1B22  3044               	movlw	68
 13843  1B23  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13844  1B24  0022               	movlb	2	; select bank2
 13845  1B25  0848               	movf	exp@x^(0+256),w
 13846  1B26  0021               	movlb	1	; select bank1
 13847  1B27  00A3               	movwf	___ftge@ff2^(0+128)
 13848  1B28  0022               	movlb	2	; select bank2
 13849  1B29  0849               	movf	(exp@x+1)^(0+256),w
 13850  1B2A  0021               	movlb	1	; select bank1
 13851  1B2B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13852  1B2C  0022               	movlb	2	; select bank2
 13853  1B2D  084A               	movf	(exp@x+2)^(0+256),w
 13854  1B2E  0021               	movlb	1	; select bank1
 13855  1B2F  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13856  1B30  31B6  26CF  319B   	fcall	___ftge
 13857  1B33  1803               	btfsc	3,0
 13858  1B34  2B42               	goto	l6967
 13859  1B35  3022               	movlw	34
 13860  1B36  0025               	movlb	5	; select bank5
 13861  1B37  00E6               	movwf	_errno^(0+640)
 13862  1B38  3000               	movlw	0
 13863  1B39  00E7               	movwf	(_errno^(0+640)+1)
 13864  1B3A  30FF               	movlw	255
 13865  1B3B  0022               	movlb	2	; select bank2
 13866  1B3C  00C8               	movwf	?_exp^(0+256)
 13867  1B3D  307F               	movlw	127
 13868  1B3E  00C9               	movwf	(?_exp+1)^(0+256)
 13869  1B3F  307F               	movlw	127
 13870  1B40  00CA               	movwf	(?_exp+2)^(0+256)
 13871  1B41  0008               	return
 13872  1B42                     l6967:	
 13873  1B42  0022               	movlb	2	; select bank2
 13874  1B43  0848               	movf	exp@x^(0+256),w
 13875  1B44  0021               	movlb	1	; select bank1
 13876  1B45  00A0               	movwf	___ftge@ff1^(0+128)
 13877  1B46  0022               	movlb	2	; select bank2
 13878  1B47  0849               	movf	(exp@x+1)^(0+256),w
 13879  1B48  0021               	movlb	1	; select bank1
 13880  1B49  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13881  1B4A  0022               	movlb	2	; select bank2
 13882  1B4B  084A               	movf	(exp@x+2)^(0+256),w
 13883  1B4C  0021               	movlb	1	; select bank1
 13884  1B4D  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13885  1B4E  3049               	movlw	73
 13886  1B4F  00A3               	movwf	___ftge@ff2^(0+128)
 13887  1B50  303A               	movlw	58
 13888  1B51  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13889  1B52  30C4               	movlw	196
 13890  1B53  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13891  1B54  31B6  26CF  319B   	fcall	___ftge
 13892  1B57  1803               	btfsc	3,0
 13893  1B58  2B66               	goto	l6973
 13894  1B59  3022               	movlw	34
 13895  1B5A  0025               	movlb	5	; select bank5
 13896  1B5B  00E6               	movwf	_errno^(0+640)
 13897  1B5C  3000               	movlw	0
 13898  1B5D  00E7               	movwf	(_errno^(0+640)+1)
 13899  1B5E  3000               	movlw	0
 13900  1B5F  0022               	movlb	2	; select bank2
 13901  1B60  00C8               	movwf	?_exp^(0+256)
 13902  1B61  3000               	movlw	0
 13903  1B62  00C9               	movwf	(?_exp+1)^(0+256)
 13904  1B63  3000               	movlw	0
 13905  1B64  00CA               	movwf	(?_exp+2)^(0+256)
 13906  1B65  0008               	return
 13907  1B66                     l6973:	
 13908  1B66  0022               	movlb	2	; select bank2
 13909  1B67  0848               	movf	exp@x^(0+256),w
 13910  1B68  0021               	movlb	1	; select bank1
 13911  1B69  00A0               	movwf	___ftge@ff1^(0+128)
 13912  1B6A  0022               	movlb	2	; select bank2
 13913  1B6B  0849               	movf	(exp@x+1)^(0+256),w
 13914  1B6C  0021               	movlb	1	; select bank1
 13915  1B6D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13916  1B6E  0022               	movlb	2	; select bank2
 13917  1B6F  084A               	movf	(exp@x+2)^(0+256),w
 13918  1B70  0021               	movlb	1	; select bank1
 13919  1B71  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13920  1B72  3000               	movlw	0
 13921  1B73  00A3               	movwf	___ftge@ff2^(0+128)
 13922  1B74  3000               	movlw	0
 13923  1B75  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13924  1B76  3000               	movlw	0
 13925  1B77  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13926  1B78  31B6  26CF  319B   	fcall	___ftge
 13927  1B7B  1803               	btfsc	3,0
 13928  1B7C  2B7F               	goto	u6240
 13929  1B7D  3001               	movlw	1
 13930  1B7E  2B80               	goto	u6250
 13931  1B7F                     u6240:	
 13932  1B7F  3000               	movlw	0
 13933  1B80                     u6250:	
 13934  1B80  0022               	movlb	2	; select bank2
 13935  1B81  00CB               	movwf	??_exp^(0+256)
 13936  1B82  084B               	movf	??_exp^(0+256),w
 13937  1B83  00D4               	movwf	exp@sign^(0+256)
 13938  1B84  0854               	movf	exp@sign^(0+256),w
 13939  1B85  1903               	btfsc	3,2
 13940  1B86  2BA1               	goto	l6979
 13941  1B87  0848               	movf	exp@x^(0+256),w
 13942  1B88  0021               	movlb	1	; select bank1
 13943  1B89  00BE               	movwf	___ftneg@f1^(0+128)
 13944  1B8A  0022               	movlb	2	; select bank2
 13945  1B8B  0849               	movf	(exp@x+1)^(0+256),w
 13946  1B8C  0021               	movlb	1	; select bank1
 13947  1B8D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13948  1B8E  0022               	movlb	2	; select bank2
 13949  1B8F  084A               	movf	(exp@x+2)^(0+256),w
 13950  1B90  0021               	movlb	1	; select bank1
 13951  1B91  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13952  1B92  31BF  27C8  319B   	fcall	___ftneg
 13953  1B95  0021               	movlb	1	; select bank1
 13954  1B96  083E               	movf	?___ftneg^(0+128),w
 13955  1B97  0022               	movlb	2	; select bank2
 13956  1B98  00C8               	movwf	exp@x^(0+256)
 13957  1B99  0021               	movlb	1	; select bank1
 13958  1B9A  083F               	movf	(?___ftneg+1)^(0+128),w
 13959  1B9B  0022               	movlb	2	; select bank2
 13960  1B9C  00C9               	movwf	(exp@x+1)^(0+256)
 13961  1B9D  0021               	movlb	1	; select bank1
 13962  1B9E  0840               	movf	(?___ftneg+2)^(0+128),w
 13963  1B9F  0022               	movlb	2	; select bank2
 13964  1BA0  00CA               	movwf	(exp@x+2)^(0+256)
 13965  1BA1                     l6979:	
 13966  1BA1  30AA               	movlw	170
 13967  1BA2  0021               	movlb	1	; select bank1
 13968  1BA3  00AE               	movwf	___ftmul@f1^(0+128)
 13969  1BA4  30B8               	movlw	184
 13970  1BA5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13971  1BA6  303F               	movlw	63
 13972  1BA7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13973  1BA8  0022               	movlb	2	; select bank2
 13974  1BA9  0848               	movf	exp@x^(0+256),w
 13975  1BAA  0021               	movlb	1	; select bank1
 13976  1BAB  00B1               	movwf	___ftmul@f2^(0+128)
 13977  1BAC  0022               	movlb	2	; select bank2
 13978  1BAD  0849               	movf	(exp@x+1)^(0+256),w
 13979  1BAE  0021               	movlb	1	; select bank1
 13980  1BAF  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13981  1BB0  0022               	movlb	2	; select bank2
 13982  1BB1  084A               	movf	(exp@x+2)^(0+256),w
 13983  1BB2  0021               	movlb	1	; select bank1
 13984  1BB3  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13985  1BB4  31A5  2590  319B   	fcall	___ftmul
 13986  1BB7  0021               	movlb	1	; select bank1
 13987  1BB8  082E               	movf	?___ftmul^(0+128),w
 13988  1BB9  0022               	movlb	2	; select bank2
 13989  1BBA  00C8               	movwf	exp@x^(0+256)
 13990  1BBB  0021               	movlb	1	; select bank1
 13991  1BBC  082F               	movf	(?___ftmul+1)^(0+128),w
 13992  1BBD  0022               	movlb	2	; select bank2
 13993  1BBE  00C9               	movwf	(exp@x+1)^(0+256)
 13994  1BBF  0021               	movlb	1	; select bank1
 13995  1BC0  0830               	movf	(?___ftmul+2)^(0+128),w
 13996  1BC1  0022               	movlb	2	; select bank2
 13997  1BC2  00CA               	movwf	(exp@x+2)^(0+256)
 13998  1BC3  0848               	movf	exp@x^(0+256),w
 13999  1BC4  00AE               	movwf	floor@x^(0+256)
 14000  1BC5  0849               	movf	(exp@x+1)^(0+256),w
 14001  1BC6  00AF               	movwf	(floor@x+1)^(0+256)
 14002  1BC7  084A               	movf	(exp@x+2)^(0+256),w
 14003  1BC8  00B0               	movwf	(floor@x+2)^(0+256)
 14004  1BC9  31A4  24DD  319B   	fcall	_floor
 14005  1BCC  0022               	movlb	2	; select bank2
 14006  1BCD  082E               	movf	?_floor^(0+256),w
 14007  1BCE  00CC               	movwf	_exp$3278^(0+256)
 14008  1BCF  082F               	movf	(?_floor+1)^(0+256),w
 14009  1BD0  00CD               	movwf	(_exp$3278+1)^(0+256)
 14010  1BD1  0830               	movf	(?_floor+2)^(0+256),w
 14011  1BD2  00CE               	movwf	(_exp$3278+2)^(0+256)
 14012  1BD3  084C               	movf	_exp$3278^(0+256),w
 14013  1BD4  00A0               	movwf	___fttol@f1^(0+256)
 14014  1BD5  084D               	movf	(_exp$3278+1)^(0+256),w
 14015  1BD6  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14016  1BD7  084E               	movf	(_exp$3278+2)^(0+256),w
 14017  1BD8  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14018  1BD9  31A1  2164  319B   	fcall	___fttol
 14019  1BDC  0022               	movlb	2	; select bank2
 14020  1BDD  0821               	movf	(?___fttol^(0+256)+1),w
 14021  1BDE  00D3               	movwf	(exp@exponent+1)^(0+256)
 14022  1BDF  0820               	movf	?___fttol^(0+256),w
 14023  1BE0  00D2               	movwf	exp@exponent^(0+256)
 14024  1BE1  0853               	movf	(exp@exponent+1)^(0+256),w
 14025  1BE2  0021               	movlb	1	; select bank1
 14026  1BE3  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14027  1BE4  0022               	movlb	2	; select bank2
 14028  1BE5  0852               	movf	exp@exponent^(0+256),w
 14029  1BE6  0021               	movlb	1	; select bank1
 14030  1BE7  00A8               	movwf	___awtoft@c^(0+128)
 14031  1BE8  31B2  22F0  319B   	fcall	___awtoft
 14032  1BEB  0021               	movlb	1	; select bank1
 14033  1BEC  0828               	movf	?___awtoft^(0+128),w
 14034  1BED  0022               	movlb	2	; select bank2
 14035  1BEE  00B7               	movwf	___ftsub@f2^(0+256)
 14036  1BEF  0021               	movlb	1	; select bank1
 14037  1BF0  0829               	movf	(?___awtoft+1)^(0+128),w
 14038  1BF1  0022               	movlb	2	; select bank2
 14039  1BF2  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 14040  1BF3  0021               	movlb	1	; select bank1
 14041  1BF4  082A               	movf	(?___awtoft+2)^(0+128),w
 14042  1BF5  0022               	movlb	2	; select bank2
 14043  1BF6  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 14044  1BF7  0848               	movf	exp@x^(0+256),w
 14045  1BF8  00BA               	movwf	___ftsub@f1^(0+256)
 14046  1BF9  0849               	movf	(exp@x+1)^(0+256),w
 14047  1BFA  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 14048  1BFB  084A               	movf	(exp@x+2)^(0+256),w
 14049  1BFC  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 14050  1BFD  31B4  242E  319B   	fcall	___ftsub
 14051  1C00  0022               	movlb	2	; select bank2
 14052  1C01  0837               	movf	?___ftsub^(0+256),w
 14053  1C02  00C8               	movwf	exp@x^(0+256)
 14054  1C03  0838               	movf	(?___ftsub+1)^(0+256),w
 14055  1C04  00C9               	movwf	(exp@x+1)^(0+256)
 14056  1C05  0839               	movf	(?___ftsub+2)^(0+256),w
 14057  1C06  00CA               	movwf	(exp@x+2)^(0+256)
 14058  1C07  0848               	movf	exp@x^(0+256),w
 14059  1C08  00B4               	movwf	eval_poly@x^(0+256)
 14060  1C09  0849               	movf	(exp@x+1)^(0+256),w
 14061  1C0A  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14062  1C0B  084A               	movf	(exp@x+2)^(0+256),w
 14063  1C0C  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14064  1C0D  3000               	movlw	low (exp@coeff| (0+32768))
 14065  1C0E  00B7               	movwf	eval_poly@d^(0+256)
 14066  1C0F  30B0               	movlw	high (exp@coeff| (0+32768))
 14067  1C10  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14068  1C11  3009               	movlw	9
 14069  1C12  00B9               	movwf	eval_poly@n^(0+256)
 14070  1C13  3000               	movlw	0
 14071  1C14  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14072  1C15  31AE  260F  319B   	fcall	_eval_poly
 14073  1C18  0022               	movlb	2	; select bank2
 14074  1C19  0834               	movf	?_eval_poly^(0+256),w
 14075  1C1A  00BE               	movwf	ldexp@value^(0+256)
 14076  1C1B  0835               	movf	(?_eval_poly+1)^(0+256),w
 14077  1C1C  00BF               	movwf	(ldexp@value+1)^(0+256)
 14078  1C1D  0836               	movf	(?_eval_poly+2)^(0+256),w
 14079  1C1E  00C0               	movwf	(ldexp@value+2)^(0+256)
 14080  1C1F  0853               	movf	(exp@exponent+1)^(0+256),w
 14081  1C20  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 14082  1C21  0852               	movf	exp@exponent^(0+256),w
 14083  1C22  00C1               	movwf	ldexp@newexp^(0+256)
 14084  1C23  3188  2000  319B   	fcall	_ldexp
 14085  1C26  0022               	movlb	2	; select bank2
 14086  1C27  083E               	movf	?_ldexp^(0+256),w
 14087  1C28  00C8               	movwf	exp@x^(0+256)
 14088  1C29  083F               	movf	(?_ldexp+1)^(0+256),w
 14089  1C2A  00C9               	movwf	(exp@x+1)^(0+256)
 14090  1C2B  0840               	movf	(?_ldexp+2)^(0+256),w
 14091  1C2C  00CA               	movwf	(exp@x+2)^(0+256)
 14092  1C2D  0854               	movf	exp@sign^(0+256),w
 14093  1C2E  1903               	btfsc	3,2
 14094  1C2F  0008               	return
 14095  1C30  30FF               	movlw	255
 14096  1C31  00CF               	movwf	_exp$2981^(0+256)
 14097  1C32  307F               	movlw	127
 14098  1C33  00D0               	movwf	(_exp$2981+1)^(0+256)
 14099  1C34  307F               	movlw	127
 14100  1C35  00D1               	movwf	(_exp$2981+2)^(0+256)
 14101  1C36  084A               	movf	(exp@x+2)^(0+256),w
 14102  1C37  0651               	xorwf	(_exp$2981+2)^(0+256),w
 14103  1C38  1D03               	skipz
 14104  1C39  2C40               	goto	u6285
 14105  1C3A  0849               	movf	(exp@x+1)^(0+256),w
 14106  1C3B  0650               	xorwf	(_exp$2981+1)^(0+256),w
 14107  1C3C  1D03               	skipz
 14108  1C3D  2C40               	goto	u6285
 14109  1C3E  0848               	movf	exp@x^(0+256),w
 14110  1C3F  064F               	xorwf	_exp$2981^(0+256),w
 14111  1C40                     u6285:	
 14112  1C40  1D03               	skipz
 14113  1C41  2C49               	goto	l7001
 14114  1C42  3000               	movlw	0
 14115  1C43  00C8               	movwf	?_exp^(0+256)
 14116  1C44  3000               	movlw	0
 14117  1C45  00C9               	movwf	(?_exp+1)^(0+256)
 14118  1C46  3000               	movlw	0
 14119  1C47  00CA               	movwf	(?_exp+2)^(0+256)
 14120  1C48  0008               	return
 14121  1C49                     l7001:	
 14122  1C49  0848               	movf	exp@x^(0+256),w
 14123  1C4A  0021               	movlb	1	; select bank1
 14124  1C4B  00CE               	movwf	___ftdiv@f2^(0+128)
 14125  1C4C  0022               	movlb	2	; select bank2
 14126  1C4D  0849               	movf	(exp@x+1)^(0+256),w
 14127  1C4E  0021               	movlb	1	; select bank1
 14128  1C4F  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14129  1C50  0022               	movlb	2	; select bank2
 14130  1C51  084A               	movf	(exp@x+2)^(0+256),w
 14131  1C52  0021               	movlb	1	; select bank1
 14132  1C53  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14133  1C54  3000               	movlw	0
 14134  1C55  00D1               	movwf	___ftdiv@f1^(0+128)
 14135  1C56  3080               	movlw	128
 14136  1C57  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14137  1C58  303F               	movlw	63
 14138  1C59  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14139  1C5A  31A4  2434         	fcall	___ftdiv
 14140  1C5C  0021               	movlb	1	; select bank1
 14141  1C5D  084E               	movf	?___ftdiv^(0+128),w
 14142  1C5E  0022               	movlb	2	; select bank2
 14143  1C5F  00C8               	movwf	?_exp^(0+256)
 14144  1C60  0021               	movlb	1	; select bank1
 14145  1C61  084F               	movf	(?___ftdiv+1)^(0+128),w
 14146  1C62  0022               	movlb	2	; select bank2
 14147  1C63  00C9               	movwf	(?_exp+1)^(0+256)
 14148  1C64  0021               	movlb	1	; select bank1
 14149  1C65  0850               	movf	(?___ftdiv+2)^(0+128),w
 14150  1C66  0022               	movlb	2	; select bank2
 14151  1C67  00CA               	movwf	(?_exp+2)^(0+256)
 14152  1C68  0008               	return
 14153  1C69                     __end_of_exp:	
 14154                           
 14155                           	psect	text37
 14156  0800                     __ptext37:	
 14157 ;; *************** function _ldexp *****************
 14158 ;; Defined at:
 14159 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;  value           3   30[BANK2 ] unsigned char 
 14162 ;;  newexp          2   33[BANK2 ] int 
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;		None
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  3   30[BANK2 ] int 
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, status,0, pclath, cstack
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14174 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14175 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14176 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14177 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14178 ;;Total ram usage:       10 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    6
 14181 ;; This function calls:
 14182 ;;		___ftge
 14183 ;;		___ftneg
 14184 ;; This function is called by:
 14185 ;;		_exp
 14186 ;; This function uses a non-reentrant model
 14187 ;;
 14188                           
 14189                           
 14190                           ;psect for function _ldexp
 14191  0800                     _ldexp:	
 14192                           
 14193                           ;incstack = 0
 14194                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 14195  0800  0022               	movlb	2	; select bank2
 14196  0801  0840               	movf	(ldexp@value+2)^(0+256),w
 14197  0802  043F               	iorwf	(ldexp@value+1)^(0+256),w
 14198  0803  043E               	iorwf	ldexp@value^(0+256),w
 14199  0804  1D03               	skipz
 14200  0805  280D               	goto	l6791
 14201  0806  3000               	movlw	0
 14202  0807  00BE               	movwf	?_ldexp^(0+256)
 14203  0808  3000               	movlw	0
 14204  0809  00BF               	movwf	(?_ldexp+1)^(0+256)
 14205  080A  3000               	movlw	0
 14206  080B  00C0               	movwf	(?_ldexp+2)^(0+256)
 14207  080C  0008               	return
 14208  080D                     l6791:	
 14209  080D  0840               	movf	(ldexp@value^(0+256)+2),w
 14210  080E  397F               	andlw	127
 14211  080F  00C3               	movwf	??_ldexp^(0+256)
 14212  0810  01C4               	clrf	(??_ldexp^(0+256)+1)
 14213  0811  35C3               	lslf	??_ldexp^(0+256),f
 14214  0812  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 14215  0813  0843               	movf	??_ldexp^(0+256),w
 14216  0814  07C1               	addwf	ldexp@newexp^(0+256),f
 14217  0815  0844               	movf	(??_ldexp+1)^(0+256),w
 14218  0816  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 14219  0817  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 14220  0818  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 14221  0819  3901               	andlw	1
 14222  081A  00C3               	movwf	??_ldexp^(0+256)
 14223  081B  01C4               	clrf	(??_ldexp^(0+256)+1)
 14224  081C  0843               	movf	??_ldexp^(0+256),w
 14225  081D  07C1               	addwf	ldexp@newexp^(0+256),f
 14226  081E  0844               	movf	(??_ldexp+1)^(0+256),w
 14227  081F  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 14228  0820  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 14229  0821  282F               	goto	l6801
 14230  0822  3022               	movlw	34
 14231  0823  0025               	movlb	5	; select bank5
 14232  0824  00E6               	movwf	_errno^(0+640)
 14233  0825  3000               	movlw	0
 14234  0826  00E7               	movwf	(_errno^(0+640)+1)
 14235  0827  3000               	movlw	0
 14236  0828  0022               	movlb	2	; select bank2
 14237  0829  00BE               	movwf	?_ldexp^(0+256)
 14238  082A  3000               	movlw	0
 14239  082B  00BF               	movwf	(?_ldexp+1)^(0+256)
 14240  082C  3000               	movlw	0
 14241  082D  00C0               	movwf	(?_ldexp+2)^(0+256)
 14242  082E  0008               	return
 14243  082F                     l6801:	
 14244  082F  0842               	movf	(ldexp@newexp+1)^(0+256),w
 14245  0830  3A80               	xorlw	128
 14246  0831  00C3               	movwf	??_ldexp^(0+256)
 14247  0832  3081               	movlw	129
 14248  0833  0243               	subwf	??_ldexp^(0+256),w
 14249  0834  1D03               	skipz
 14250  0835  2838               	goto	u6085
 14251  0836  3000               	movlw	0
 14252  0837  0241               	subwf	ldexp@newexp^(0+256),w
 14253  0838                     u6085:	
 14254  0838  1C03               	skipc
 14255  0839  287F               	goto	l6825
 14256  083A  3022               	movlw	34
 14257  083B  0025               	movlb	5	; select bank5
 14258  083C  00E6               	movwf	_errno^(0+640)
 14259  083D  3000               	movlw	0
 14260  083E  00E7               	movwf	(_errno^(0+640)+1)
 14261  083F  0022               	movlb	2	; select bank2
 14262  0840  083E               	movf	ldexp@value^(0+256),w
 14263  0841  0021               	movlb	1	; select bank1
 14264  0842  00A0               	movwf	___ftge@ff1^(0+128)
 14265  0843  0022               	movlb	2	; select bank2
 14266  0844  083F               	movf	(ldexp@value+1)^(0+256),w
 14267  0845  0021               	movlb	1	; select bank1
 14268  0846  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14269  0847  0022               	movlb	2	; select bank2
 14270  0848  0840               	movf	(ldexp@value+2)^(0+256),w
 14271  0849  0021               	movlb	1	; select bank1
 14272  084A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14273  084B  3000               	movlw	0
 14274  084C  00A3               	movwf	___ftge@ff2^(0+128)
 14275  084D  3000               	movlw	0
 14276  084E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14277  084F  3000               	movlw	0
 14278  0850  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14279  0851  31B6  26CF  3188   	fcall	___ftge
 14280  0854  1803               	btfsc	3,0
 14281  0855  2877               	goto	l6821
 14282  0856  30FF               	movlw	255
 14283  0857  0022               	movlb	2	; select bank2
 14284  0858  00C5               	movwf	_ldexp$3018^(0+256)
 14285  0859  307F               	movlw	127
 14286  085A  00C6               	movwf	(_ldexp$3018+1)^(0+256)
 14287  085B  307F               	movlw	127
 14288  085C  00C7               	movwf	(_ldexp$3018+2)^(0+256)
 14289  085D  0845               	movf	_ldexp$3018^(0+256),w
 14290  085E  0021               	movlb	1	; select bank1
 14291  085F  00BE               	movwf	___ftneg@f1^(0+128)
 14292  0860  0022               	movlb	2	; select bank2
 14293  0861  0846               	movf	(_ldexp$3018+1)^(0+256),w
 14294  0862  0021               	movlb	1	; select bank1
 14295  0863  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14296  0864  0022               	movlb	2	; select bank2
 14297  0865  0847               	movf	(_ldexp$3018+2)^(0+256),w
 14298  0866  0021               	movlb	1	; select bank1
 14299  0867  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14300  0868  31BF  27C8         	fcall	___ftneg
 14301  086A  0021               	movlb	1	; select bank1
 14302  086B  083E               	movf	?___ftneg^(0+128),w
 14303  086C  0022               	movlb	2	; select bank2
 14304  086D  00BE               	movwf	?_ldexp^(0+256)
 14305  086E  0021               	movlb	1	; select bank1
 14306  086F  083F               	movf	(?___ftneg+1)^(0+128),w
 14307  0870  0022               	movlb	2	; select bank2
 14308  0871  00BF               	movwf	(?_ldexp+1)^(0+256)
 14309  0872  0021               	movlb	1	; select bank1
 14310  0873  0840               	movf	(?___ftneg+2)^(0+128),w
 14311  0874  0022               	movlb	2	; select bank2
 14312  0875  00C0               	movwf	(?_ldexp+2)^(0+256)
 14313  0876  0008               	return
 14314  0877                     l6821:	
 14315  0877  30FF               	movlw	255
 14316  0878  0022               	movlb	2	; select bank2
 14317  0879  00BE               	movwf	?_ldexp^(0+256)
 14318  087A  307F               	movlw	127
 14319  087B  00BF               	movwf	(?_ldexp+1)^(0+256)
 14320  087C  307F               	movlw	127
 14321  087D  00C0               	movwf	(?_ldexp+2)^(0+256)
 14322  087E  0008               	return
 14323  087F                     l6825:	
 14324  087F  0022               	movlb	2	; select bank2
 14325  0880  0842               	movf	(ldexp@newexp+1)^(0+256),w
 14326  0881  00C4               	movwf	(??_ldexp^(0+256)+1)
 14327  0882  0841               	movf	ldexp@newexp^(0+256),w
 14328  0883  00C3               	movwf	??_ldexp^(0+256)
 14329  0884  0D44               	rlf	(??_ldexp^(0+256)+1),w
 14330  0885  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 14331  0886  0CC3               	rrf	??_ldexp^(0+256),f
 14332  0887  0840               	movf	(ldexp@value^(0+256)+2),w
 14333  0888  0643               	xorwf	??_ldexp^(0+256),w
 14334  0889  3980               	andlw	-128
 14335  088A  0643               	xorwf	??_ldexp^(0+256),w
 14336  088B  00C0               	movwf	(ldexp@value^(0+256)+2)
 14337  088C  0841               	movf	ldexp@newexp^(0+256),w
 14338  088D  3901               	andlw	1
 14339  088E  00C3               	movwf	??_ldexp^(0+256)
 14340  088F  0CC3               	rrf	??_ldexp^(0+256),f
 14341  0890  0CC3               	rrf	??_ldexp^(0+256),f
 14342  0891  083F               	movf	(ldexp@value^(0+256)+1),w
 14343  0892  0643               	xorwf	??_ldexp^(0+256),w
 14344  0893  397F               	andlw	-129
 14345  0894  0643               	xorwf	??_ldexp^(0+256),w
 14346  0895  00BF               	movwf	(ldexp@value^(0+256)+1)
 14347  0896  0008               	return
 14348  0897                     __end_of_ldexp:	
 14349                           
 14350                           	psect	text38
 14351  33AD                     __ptext38:	
 14352 ;; *************** function ___lltoft *****************
 14353 ;; Defined at:
 14354 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;  c               4    8[BANK1 ] unsigned long 
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;  exp             1   13[BANK1 ] unsigned char 
 14359 ;; Return value:  Size  Location     Type
 14360 ;;                  3    8[BANK1 ] float 
 14361 ;; Registers used:
 14362 ;;		wreg, status,2, status,0, pclath, cstack
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14368 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14369 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14370 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14371 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14372 ;;Total ram usage:        6 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    6
 14375 ;; This function calls:
 14376 ;;		___ftpack
 14377 ;; This function is called by:
 14378 ;;		_pow
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           
 14383                           ;psect for function ___lltoft
 14384  33AD                     ___lltoft:	
 14385                           
 14386                           ;incstack = 0
 14387                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 14388  33AD  308E               	movlw	142
 14389  33AE  0021               	movlb	1	; select bank1
 14390  33AF  00AC               	movwf	??___lltoft^(0+128)
 14391  33B0  082C               	movf	??___lltoft^(0+128),w
 14392  33B1  00AD               	movwf	___lltoft@exp^(0+128)
 14393  33B2                     l6923:	
 14394  33B2  30FF               	movlw	255
 14395  33B3  052B               	andwf	(___lltoft@c+3)^(0+128),w
 14396  33B4  1903               	btfsc	3,2
 14397  33B5  2BC2               	goto	l6925
 14398  33B6  3001               	movlw	1
 14399  33B7                     u6175:	
 14400  33B7  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 14401  33B8  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 14402  33B9  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 14403  33BA  0CA8               	rrf	___lltoft@c^(0+128),f
 14404  33BB  0B89               	decfsz	9,f
 14405  33BC  2BB7               	goto	u6175
 14406  33BD  3001               	movlw	1
 14407  33BE  00AC               	movwf	??___lltoft^(0+128)
 14408  33BF  082C               	movf	??___lltoft^(0+128),w
 14409  33C0  07AD               	addwf	___lltoft@exp^(0+128),f
 14410  33C1  2BB2               	goto	l6923
 14411  33C2                     l6925:	
 14412  33C2  0828               	movf	___lltoft@c^(0+128),w
 14413  33C3  00A0               	movwf	___ftpack@arg^(0+128)
 14414  33C4  0829               	movf	(___lltoft@c+1)^(0+128),w
 14415  33C5  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 14416  33C6  082A               	movf	(___lltoft@c+2)^(0+128),w
 14417  33C7  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 14418  33C8  082D               	movf	___lltoft@exp^(0+128),w
 14419  33C9  00AC               	movwf	??___lltoft^(0+128)
 14420  33CA  082C               	movf	??___lltoft^(0+128),w
 14421  33CB  00A3               	movwf	___ftpack@exp^(0+128)
 14422  33CC  01A4               	clrf	___ftpack@sign^(0+128)
 14423  33CD  31AD  2541         	fcall	___ftpack
 14424  33CF  0021               	movlb	1	; select bank1
 14425  33D0  0820               	movf	?___ftpack^(0+128),w
 14426  33D1  00A8               	movwf	?___lltoft^(0+128)
 14427  33D2  0821               	movf	(?___ftpack+1)^(0+128),w
 14428  33D3  00A9               	movwf	(?___lltoft+1)^(0+128)
 14429  33D4  0822               	movf	(?___ftpack+2)^(0+128),w
 14430  33D5  00AA               	movwf	(?___lltoft+2)^(0+128)
 14431  33D6  0008               	return
 14432  33D7                     __end_of___lltoft:	
 14433                           
 14434                           	psect	text39
 14435  3060                     __ptext39:	
 14436 ;; *************** function _setDepth *****************
 14437 ;; Defined at:
 14438 ;;		line 43 in file "knobs.c"
 14439 ;; Parameters:    Size  Location     Type
 14440 ;;  rawValue        2    2[BANK1 ] int 
 14441 ;; Auto vars:     Size  Location     Type
 14442 ;;		None
 14443 ;; Return value:  Size  Location     Type
 14444 ;;                  1    wreg      void 
 14445 ;; Registers used:
 14446 ;;		wreg, status,2, status,0, pclath, cstack
 14447 ;; Tracked objects:
 14448 ;;		On entry : 0/0
 14449 ;;		On exit  : 0/0
 14450 ;;		Unchanged: 0/0
 14451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14452 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14455 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14456 ;;Total ram usage:        2 bytes
 14457 ;; Hardware stack levels used:    1
 14458 ;; Hardware stack levels required when called:    6
 14459 ;; This function calls:
 14460 ;;		_updateDepth
 14461 ;; This function is called by:
 14462 ;;		_main
 14463 ;; This function uses a non-reentrant model
 14464 ;;
 14465                           
 14466                           
 14467                           ;psect for function _setDepth
 14468  3060                     _setDepth:	
 14469                           
 14470                           ;knobs.c: 46: if (isInitialized == 1) {updateDepth(rawValue);}
 14471                           
 14472                           ;incstack = 0
 14473                           ; Regs used in _setDepth: [wreg+status,2+status,0+pclath+cstack]
 14474  3060  0020               	movlb	0	; select bank0
 14475  3061  0362               	decf	_isInitialized,w
 14476  3062  1D03               	btfss	3,2
 14477  3063  0008               	return
 14478  3064  0021               	movlb	1	; select bank1
 14479  3065  0823               	movf	(setDepth@rawValue+1)^(0+128),w
 14480  3066  00A1               	movwf	(updateDepth@currentValue+1)^(0+128)
 14481  3067  0822               	movf	setDepth@rawValue^(0+128),w
 14482  3068  00A0               	movwf	updateDepth@currentValue^(0+128)
 14483  3069  31BF  27D1         	fcall	_updateDepth
 14484  306B  0008               	return
 14485  306C                     __end_of_setDepth:	
 14486                           
 14487                           	psect	text40
 14488  3FD1                     __ptext40:	
 14489 ;; *************** function _updateDepth *****************
 14490 ;; Defined at:
 14491 ;;		line 297 in file "state_manager.c"
 14492 ;; Parameters:    Size  Location     Type
 14493 ;;  currentValue    2    0[BANK1 ] int 
 14494 ;; Auto vars:     Size  Location     Type
 14495 ;;		None
 14496 ;; Return value:  Size  Location     Type
 14497 ;;                  1    wreg      void 
 14498 ;; Registers used:
 14499 ;;		wreg
 14500 ;; Tracked objects:
 14501 ;;		On entry : 0/0
 14502 ;;		On exit  : 0/0
 14503 ;;		Unchanged: 0/0
 14504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14505 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14508 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14509 ;;Total ram usage:        2 bytes
 14510 ;; Hardware stack levels used:    1
 14511 ;; Hardware stack levels required when called:    5
 14512 ;; This function calls:
 14513 ;;		Nothing
 14514 ;; This function is called by:
 14515 ;;		_setDepth
 14516 ;; This function uses a non-reentrant model
 14517 ;;
 14518                           
 14519                           
 14520                           ;psect for function _updateDepth
 14521  3FD1                     _updateDepth:	
 14522                           
 14523                           ;state_manager.c: 298: pedalState.depth = currentValue;
 14524                           
 14525                           ;incstack = 0
 14526                           ; Regs used in _updateDepth: [wreg]
 14527  3FD1  0021               	movlb	1	; select bank1
 14528  3FD2  0821               	movf	(updateDepth@currentValue+1)^(0+128),w
 14529  3FD3  0025               	movlb	5	; select bank5
 14530  3FD4  00C1               	movwf	((_pedalState+1)^(0+640)+12)
 14531  3FD5  0021               	movlb	1	; select bank1
 14532  3FD6  0820               	movf	updateDepth@currentValue^(0+128),w
 14533  3FD7  0025               	movlb	5	; select bank5
 14534  3FD8  00C0               	movwf	(_pedalState^(0+640)+12)
 14535  3FD9  0008               	return
 14536  3FDA                     __end_of_updateDepth:	
 14537                           
 14538                           	psect	text41
 14539  2BA4                     __ptext41:	
 14540 ;; *************** function _read_top_tactile *****************
 14541 ;; Defined at:
 14542 ;;		line 71 in file "tactiles.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;		None
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  1    wreg      void 
 14549 ;; Registers used:
 14550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14558 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14559 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14560 ;;Total ram usage:        1 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    7
 14563 ;; This function calls:
 14564 ;;		_set_leds_top
 14565 ;;		_updateSubdivisionState
 14566 ;;		_wait_ms
 14567 ;; This function is called by:
 14568 ;;		_main
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           
 14573                           ;psect for function _read_top_tactile
 14574  2BA4                     _read_top_tactile:	
 14575                           
 14576                           ;tactiles.c: 81: if (PORTDbits.RD5 == 0) {
 14577                           
 14578                           ;incstack = 0
 14579                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14580  2BA4  0020               	movlb	0	; select bank0
 14581  2BA5  1A8F               	btfsc	15,5	;volatile
 14582  2BA6  2BAE               	goto	l8249
 14583                           
 14584                           ;tactiles.c: 82: if (topTactile_pressed > 0) {
 14585  2BA7  0024               	movlb	4	; select bank4
 14586  2BA8  0857               	movf	_topTactile_pressed^(0+512),w
 14587  2BA9  1903               	btfsc	3,2
 14588  2BAA  2BB9               	goto	l1133
 14589                           
 14590                           ;tactiles.c: 83: topTactile_pressed--;
 14591  2BAB  3001               	movlw	1
 14592  2BAC  02D7               	subwf	_topTactile_pressed^(0+512),f
 14593                           
 14594                           ;tactiles.c: 84: }
 14595                           ;tactiles.c: 85: } else if (topTactile_pressed < 25*3) {
 14596  2BAD  2BB9               	goto	l1133
 14597  2BAE                     l8249:	
 14598  2BAE  304B               	movlw	75
 14599  2BAF  0024               	movlb	4	; select bank4
 14600  2BB0  0257               	subwf	_topTactile_pressed^(0+512),w
 14601  2BB1  1803               	skipnc
 14602  2BB2  2BB9               	goto	l1133
 14603                           
 14604                           ;tactiles.c: 86: topTactile_pressed++;
 14605  2BB3  3001               	movlw	1
 14606  2BB4  0021               	movlb	1	; select bank1
 14607  2BB5  00B2               	movwf	??_read_top_tactile^(0+128)
 14608  2BB6  0832               	movf	??_read_top_tactile^(0+128),w
 14609  2BB7  0024               	movlb	4	; select bank4
 14610  2BB8  07D7               	addwf	_topTactile_pressed^(0+512),f
 14611  2BB9                     l1133:	
 14612                           
 14613                           ;tactiles.c: 87: }
 14614                           ;tactiles.c: 92: if (topTactile_pressed == 0) {
 14615  2BB9  0857               	movf	_topTactile_pressed^(0+512),w
 14616  2BBA  1D03               	btfss	3,2
 14617  2BBB  0008               	return
 14618                           
 14619                           ;tactiles.c: 94: top_push_state = top_push_state + 1;
 14620  2BBC  0020               	movlb	0	; select bank0
 14621  2BBD  086C               	movf	_top_push_state,w
 14622  2BBE  3E01               	addlw	1
 14623  2BBF  00EC               	movwf	_top_push_state
 14624  2BC0  3000               	movlw	0
 14625  2BC1  3D6D               	addwfc	_top_push_state+1,w
 14626  2BC2  00ED               	movwf	_top_push_state+1
 14627                           
 14628                           ;tactiles.c: 95: if (top_push_state >= 7) {
 14629  2BC3  086D               	movf	_top_push_state+1,w
 14630  2BC4  3A80               	xorlw	128
 14631  2BC5  0021               	movlb	1	; select bank1
 14632  2BC6  00B2               	movwf	??_read_top_tactile^(0+128)
 14633  2BC7  3080               	movlw	128
 14634  2BC8  0232               	subwf	??_read_top_tactile^(0+128),w
 14635  2BC9  1D03               	skipz
 14636  2BCA  2BCE               	goto	u8295
 14637  2BCB  3007               	movlw	7
 14638  2BCC  0020               	movlb	0	; select bank0
 14639  2BCD  026C               	subwf	_top_push_state,w
 14640  2BCE                     u8295:	
 14641  2BCE  1C03               	skipc
 14642  2BCF  2BD5               	goto	l8259
 14643                           
 14644                           ;tactiles.c: 96: top_push_state = 1;
 14645  2BD0  3001               	movlw	1
 14646  2BD1  0020               	movlb	0	; select bank0
 14647  2BD2  00EC               	movwf	_top_push_state
 14648  2BD3  3000               	movlw	0
 14649  2BD4  00ED               	movwf	_top_push_state+1
 14650  2BD5                     l8259:	
 14651                           
 14652                           ;tactiles.c: 97: }
 14653                           ;tactiles.c: 98: updateSubdivisionState();
 14654  2BD5  31BF  27A6  31AB   	fcall	_updateSubdivisionState
 14655                           
 14656                           ;tactiles.c: 99: set_leds_top(top_push_state, 1);
 14657  2BD8  0020               	movlb	0	; select bank0
 14658  2BD9  086D               	movf	_top_push_state+1,w
 14659  2BDA  0021               	movlb	1	; select bank1
 14660  2BDB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 14661  2BDC  0020               	movlb	0	; select bank0
 14662  2BDD  086C               	movf	_top_push_state,w
 14663  2BDE  0021               	movlb	1	; select bank1
 14664  2BDF  00A0               	movwf	set_leds_top@x^(0+128)
 14665  2BE0  3001               	movlw	1
 14666  2BE1  00A2               	movwf	set_leds_top@ledState^(0+128)
 14667  2BE2  3000               	movlw	0
 14668  2BE3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 14669  2BE4  31AC  2499  31AB   	fcall	_set_leds_top
 14670                           
 14671                           ;tactiles.c: 100: mod_time_changed = 1;
 14672  2BE7  0024               	movlb	4	; select bank4
 14673  2BE8  01EC               	clrf	_mod_time_changed^(0+512)
 14674  2BE9  0AEC               	incf	_mod_time_changed^(0+512),f
 14675  2BEA                     l1137:	
 14676                           ;tactiles.c: 103: while (PORTDbits.RD5 == 0) {
 14677                           
 14678  2BEA  0020               	movlb	0	; select bank0
 14679  2BEB  1E8F               	btfss	15,5	;volatile
 14680  2BEC  2BEA               	goto	l1137
 14681                           
 14682                           ;tactiles.c: 104: }
 14683                           ;tactiles.c: 105: wait_ms(20);
 14684  2BED  3014               	movlw	20
 14685  2BEE  0021               	movlb	1	; select bank1
 14686  2BEF  00AC               	movwf	wait_ms@timeSec^(0+128)
 14687  2BF0  3000               	movlw	0
 14688  2BF1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14689  2BF2  31B5  2549         	fcall	_wait_ms
 14690  2BF4  0008               	return
 14691  2BF5                     __end_of_read_top_tactile:	
 14692                           
 14693                           	psect	text42
 14694  3FA6                     __ptext42:	
 14695 ;; *************** function _updateSubdivisionState *****************
 14696 ;; Defined at:
 14697 ;;		line 330 in file "state_manager.c"
 14698 ;; Parameters:    Size  Location     Type
 14699 ;;		None
 14700 ;; Auto vars:     Size  Location     Type
 14701 ;;		None
 14702 ;; Return value:  Size  Location     Type
 14703 ;;                  1    wreg      void 
 14704 ;; Registers used:
 14705 ;;		wreg
 14706 ;; Tracked objects:
 14707 ;;		On entry : 0/0
 14708 ;;		On exit  : 0/0
 14709 ;;		Unchanged: 0/0
 14710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14713 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14714 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14715 ;;Total ram usage:        1 bytes
 14716 ;; Hardware stack levels used:    1
 14717 ;; Hardware stack levels required when called:    5
 14718 ;; This function calls:
 14719 ;;		Nothing
 14720 ;; This function is called by:
 14721 ;;		_main
 14722 ;;		_read_top_tactile
 14723 ;; This function uses a non-reentrant model
 14724 ;;
 14725                           
 14726                           
 14727                           ;psect for function _updateSubdivisionState
 14728  3FA6                     _updateSubdivisionState:	
 14729                           
 14730                           ;state_manager.c: 331: pedalState.subdivision = top_push_state;
 14731                           
 14732                           ;incstack = 0
 14733                           ; Regs used in _updateSubdivisionState: [wreg]
 14734  3FA6  0020               	movlb	0	; select bank0
 14735  3FA7  086C               	movf	_top_push_state,w
 14736  3FA8  0021               	movlb	1	; select bank1
 14737  3FA9  00A0               	movwf	??_updateSubdivisionState^(0+128)
 14738  3FAA  0820               	movf	??_updateSubdivisionState^(0+128),w
 14739  3FAB  0025               	movlb	5	; select bank5
 14740  3FAC  00B8               	movwf	(_pedalState^(0+640)+4)
 14741  3FAD  0008               	return
 14742  3FAE                     __end_of_updateSubdivisionState:	
 14743                           
 14744                           	psect	text43
 14745  2A68                     __ptext43:	
 14746 ;; *************** function _read_bottom_tactile *****************
 14747 ;; Defined at:
 14748 ;;		line 29 in file "tactiles.c"
 14749 ;; Parameters:    Size  Location     Type
 14750 ;;		None
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;		None
 14753 ;; Return value:  Size  Location     Type
 14754 ;;                  1    wreg      void 
 14755 ;; Registers used:
 14756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14757 ;; Tracked objects:
 14758 ;;		On entry : 0/0
 14759 ;;		On exit  : 0/0
 14760 ;;		Unchanged: 0/0
 14761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14764 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14765 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14766 ;;Total ram usage:        1 bytes
 14767 ;; Hardware stack levels used:    1
 14768 ;; Hardware stack levels required when called:    7
 14769 ;; This function calls:
 14770 ;;		_set_leds_bottom
 14771 ;;		_updateWaveFormState
 14772 ;;		_wait_ms
 14773 ;; This function is called by:
 14774 ;;		_main
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778                           
 14779                           ;psect for function _read_bottom_tactile
 14780  2A68                     _read_bottom_tactile:	
 14781                           
 14782                           ;tactiles.c: 38: if (PORTDbits.RD6 == 0) {
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14786  2A68  0020               	movlb	0	; select bank0
 14787  2A69  1B0F               	btfsc	15,6	;volatile
 14788  2A6A  2A72               	goto	l8225
 14789                           
 14790                           ;tactiles.c: 39: if (bottomTactile_pressed > 0) {
 14791  2A6B  0024               	movlb	4	; select bank4
 14792  2A6C  0847               	movf	_bottomTactile_pressed^(0+512),w
 14793  2A6D  1903               	btfsc	3,2
 14794  2A6E  2A7D               	goto	l1115
 14795                           
 14796                           ;tactiles.c: 40: bottomTactile_pressed--;
 14797  2A6F  3001               	movlw	1
 14798  2A70  02C7               	subwf	_bottomTactile_pressed^(0+512),f
 14799                           
 14800                           ;tactiles.c: 41: }
 14801                           ;tactiles.c: 42: } else if (bottomTactile_pressed < 25*3) {
 14802  2A71  2A7D               	goto	l1115
 14803  2A72                     l8225:	
 14804  2A72  304B               	movlw	75
 14805  2A73  0024               	movlb	4	; select bank4
 14806  2A74  0247               	subwf	_bottomTactile_pressed^(0+512),w
 14807  2A75  1803               	skipnc
 14808  2A76  2A7D               	goto	l1115
 14809                           
 14810                           ;tactiles.c: 43: bottomTactile_pressed++;
 14811  2A77  3001               	movlw	1
 14812  2A78  0021               	movlb	1	; select bank1
 14813  2A79  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14814  2A7A  0832               	movf	??_read_bottom_tactile^(0+128),w
 14815  2A7B  0024               	movlb	4	; select bank4
 14816  2A7C  07C7               	addwf	_bottomTactile_pressed^(0+512),f
 14817  2A7D                     l1115:	
 14818                           
 14819                           ;tactiles.c: 44: }
 14820                           ;tactiles.c: 47: if (bottomTactile_pressed == 0) {
 14821  2A7D  0847               	movf	_bottomTactile_pressed^(0+512),w
 14822  2A7E  1D03               	btfss	3,2
 14823  2A7F  0008               	return
 14824                           
 14825                           ;tactiles.c: 48: bottom_push_state = bottom_push_state + 1;
 14826  2A80  0023               	movlb	3	; select bank3
 14827  2A81  0862               	movf	_bottom_push_state^(0+384),w
 14828  2A82  3E01               	addlw	1
 14829  2A83  00E2               	movwf	_bottom_push_state^(0+384)
 14830  2A84  3000               	movlw	0
 14831  2A85  3D63               	addwfc	(_bottom_push_state+1)^(0+384),w
 14832  2A86  00E3               	movwf	(_bottom_push_state+1)^(0+384)
 14833                           
 14834                           ;tactiles.c: 49: if (bottom_push_state > 5) {
 14835  2A87  0863               	movf	(_bottom_push_state+1)^(0+384),w
 14836  2A88  3A80               	xorlw	128
 14837  2A89  0021               	movlb	1	; select bank1
 14838  2A8A  00B2               	movwf	??_read_bottom_tactile^(0+128)
 14839  2A8B  3080               	movlw	128
 14840  2A8C  0232               	subwf	??_read_bottom_tactile^(0+128),w
 14841  2A8D  1D03               	skipz
 14842  2A8E  2A92               	goto	u8235
 14843  2A8F  3006               	movlw	6
 14844  2A90  0023               	movlb	3	; select bank3
 14845  2A91  0262               	subwf	_bottom_push_state^(0+384),w
 14846  2A92                     u8235:	
 14847  2A92  1C03               	skipc
 14848  2A93  2A99               	goto	l8235
 14849                           
 14850                           ;tactiles.c: 50: bottom_push_state = 1;
 14851  2A94  3001               	movlw	1
 14852  2A95  0023               	movlb	3	; select bank3
 14853  2A96  00E2               	movwf	_bottom_push_state^(0+384)
 14854  2A97  3000               	movlw	0
 14855  2A98  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 14856  2A99                     l8235:	
 14857                           
 14858                           ;tactiles.c: 51: }
 14859                           ;tactiles.c: 52: modulation_changed = 1;
 14860  2A99  0024               	movlb	4	; select bank4
 14861  2A9A  01CE               	clrf	_modulation_changed^(0+512)
 14862  2A9B  0ACE               	incf	_modulation_changed^(0+512),f
 14863                           
 14864                           ;tactiles.c: 53: set_leds_bottom(bottom_push_state);
 14865  2A9C  0023               	movlb	3	; select bank3
 14866  2A9D  0863               	movf	(_bottom_push_state+1)^(0+384),w
 14867  2A9E  0021               	movlb	1	; select bank1
 14868  2A9F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 14869  2AA0  0023               	movlb	3	; select bank3
 14870  2AA1  0862               	movf	_bottom_push_state^(0+384),w
 14871  2AA2  0021               	movlb	1	; select bank1
 14872  2AA3  00A0               	movwf	set_leds_bottom@x^(0+128)
 14873  2AA4  31B6  2694  31AA   	fcall	_set_leds_bottom
 14874                           
 14875                           ;tactiles.c: 54: updateWaveFormState();
 14876  2AA7  31BF  279E  31AA   	fcall	_updateWaveFormState
 14877  2AAA                     l1119:	
 14878                           ;tactiles.c: 56: while (PORTDbits.RD6 == 0) {
 14879                           
 14880  2AAA  0020               	movlb	0	; select bank0
 14881  2AAB  1F0F               	btfss	15,6	;volatile
 14882  2AAC  2AAA               	goto	l1119
 14883                           
 14884                           ;tactiles.c: 57: }
 14885                           ;tactiles.c: 58: wait_ms(20);
 14886  2AAD  3014               	movlw	20
 14887  2AAE  0021               	movlb	1	; select bank1
 14888  2AAF  00AC               	movwf	wait_ms@timeSec^(0+128)
 14889  2AB0  3000               	movlw	0
 14890  2AB1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14891  2AB2  31B5  2549         	fcall	_wait_ms
 14892  2AB4  0008               	return
 14893  2AB5                     __end_of_read_bottom_tactile:	
 14894                           
 14895                           	psect	text44
 14896  3F9E                     __ptext44:	
 14897 ;; *************** function _updateWaveFormState *****************
 14898 ;; Defined at:
 14899 ;;		line 343 in file "state_manager.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;		None
 14902 ;; Auto vars:     Size  Location     Type
 14903 ;;		None
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  1    wreg      void 
 14906 ;; Registers used:
 14907 ;;		wreg
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14915 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14916 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14917 ;;Total ram usage:        1 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; Hardware stack levels required when called:    5
 14920 ;; This function calls:
 14921 ;;		Nothing
 14922 ;; This function is called by:
 14923 ;;		_main
 14924 ;;		_read_bottom_tactile
 14925 ;; This function uses a non-reentrant model
 14926 ;;
 14927                           
 14928                           
 14929                           ;psect for function _updateWaveFormState
 14930  3F9E                     _updateWaveFormState:	
 14931                           
 14932                           ;state_manager.c: 344: pedalState.waveForm = bottom_push_state;
 14933                           
 14934                           ;incstack = 0
 14935                           ; Regs used in _updateWaveFormState: [wreg]
 14936  3F9E  0023               	movlb	3	; select bank3
 14937  3F9F  0862               	movf	_bottom_push_state^(0+384),w
 14938  3FA0  0021               	movlb	1	; select bank1
 14939  3FA1  00A0               	movwf	??_updateWaveFormState^(0+128)
 14940  3FA2  0820               	movf	??_updateWaveFormState^(0+128),w
 14941  3FA3  0025               	movlb	5	; select bank5
 14942  3FA4  00B9               	movwf	(_pedalState^(0+640)+5)
 14943  3FA5  0008               	return
 14944  3FA6                     __end_of_updateWaveFormState:	
 14945                           
 14946                           	psect	text45
 14947  1800                     __ptext45:	
 14948 ;; *************** function _initSwitchTap *****************
 14949 ;; Defined at:
 14950 ;;		line 29 in file "SwitchTap.c"
 14951 ;; Parameters:    Size  Location     Type
 14952 ;;		None
 14953 ;; Auto vars:     Size  Location     Type
 14954 ;;		None
 14955 ;; Return value:  Size  Location     Type
 14956 ;;                  1    wreg      void 
 14957 ;; Registers used:
 14958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14959 ;; Tracked objects:
 14960 ;;		On entry : 0/0
 14961 ;;		On exit  : 0/0
 14962 ;;		Unchanged: 0/0
 14963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14968 ;;Total ram usage:        0 bytes
 14969 ;; Hardware stack levels used:    1
 14970 ;; Hardware stack levels required when called:   11
 14971 ;; This function calls:
 14972 ;;		_getTapTime
 14973 ;; This function is called by:
 14974 ;;		_main
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           
 14979                           ;psect for function _initSwitchTap
 14980  1800                     _initSwitchTap:	
 14981                           
 14982                           ;SwitchTap.c: 30: baseline_mod_time = getTapTime();
 14983                           
 14984                           ;incstack = 0
 14985                           ; Regs used in _initSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14986  1800  31B3  2312         	fcall	_getTapTime
 14987  1802  0022               	movlb	2	; select bank2
 14988  1803  0855               	movf	(?_getTapTime^(0+256)+1),w
 14989  1804  0020               	movlb	0	; select bank0
 14990  1805  00EB               	movwf	_baseline_mod_time+1	;volatile
 14991  1806  0022               	movlb	2	; select bank2
 14992  1807  0854               	movf	?_getTapTime^(0+256),w
 14993  1808  0020               	movlb	0	; select bank0
 14994  1809  00EA               	movwf	_baseline_mod_time	;volatile
 14995  180A  0008               	return
 14996  180B                     __end_of_initSwitchTap:	
 14997                           
 14998                           	psect	text46
 14999  3312                     __ptext46:	
 15000 ;; *************** function _getTapTime *****************
 15001 ;; Defined at:
 15002 ;;		line 316 in file "state_manager.c"
 15003 ;; Parameters:    Size  Location     Type
 15004 ;;		None
 15005 ;; Auto vars:     Size  Location     Type
 15006 ;;		None
 15007 ;; Return value:  Size  Location     Type
 15008 ;;                  4   52[BANK2 ] long 
 15009 ;; Registers used:
 15010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15011 ;; Tracked objects:
 15012 ;;		On entry : 0/0
 15013 ;;		On exit  : 0/0
 15014 ;;		Unchanged: 0/0
 15015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15016 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15019 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15020 ;;Total ram usage:        4 bytes
 15021 ;; Hardware stack levels used:    1
 15022 ;; Hardware stack levels required when called:   10
 15023 ;; This function calls:
 15024 ;;		_initStateManager
 15025 ;; This function is called by:
 15026 ;;		_initSwitchTap
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           
 15031                           ;psect for function _getTapTime
 15032  3312                     _getTapTime:	
 15033                           
 15034                           ;state_manager.c: 317: if (isStateInitialized != 1) {
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _getTapTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15038  3312  0020               	movlb	0	; select bank0
 15039  3313  035D               	decf	_isStateInitialized,w
 15040  3314  045E               	iorwf	_isStateInitialized+1,w
 15041  3315  1903               	btfsc	3,2
 15042  3316  2B1A               	goto	l7523
 15043                           
 15044                           ;state_manager.c: 318: initStateManager();
 15045  3317  31BF  2791  31B3   	fcall	_initStateManager
 15046  331A                     l7523:	
 15047                           
 15048                           ;state_manager.c: 319: }
 15049                           ;state_manager.c: 321: if (pedalState.baseTapTime < 1 || pedalState.baseTapTime > 3000) 
      +                          {
 15050  331A  0025               	movlb	5	; select bank5
 15051  331B  0835               	movf	(_pedalState^(0+640)+1),w
 15052  331C  0436               	iorwf	((_pedalState+1)^(0+640)+1),w
 15053  331D  1903               	btfsc	3,2
 15054  331E  2B26               	goto	l7527
 15055  331F  300B               	movlw	11
 15056  3320  0236               	subwf	((_pedalState+1)^(0+640)+1),w
 15057  3321  30B9               	movlw	185
 15058  3322  1903               	skipnz
 15059  3323  0235               	subwf	(_pedalState^(0+640)+1),w
 15060  3324  1C03               	skipc
 15061  3325  2B2A               	goto	l1384
 15062  3326                     l7527:	
 15063                           
 15064                           ;state_manager.c: 322: pedalState.baseTapTime = 3000;
 15065  3326  30B8               	movlw	184
 15066  3327  00B5               	movwf	(_pedalState^(0+640)+1)
 15067  3328  300B               	movlw	11
 15068  3329  00B6               	movwf	(_pedalState^(0+640)+2)
 15069  332A                     l1384:	
 15070                           
 15071                           ;state_manager.c: 324: }
 15072                           ;state_manager.c: 326: return pedalState.baseTapTime;
 15073  332A  0835               	movf	(_pedalState^(0+640)+1),w
 15074  332B  0022               	movlb	2	; select bank2
 15075  332C  00D4               	movwf	?_getTapTime^(0+256)
 15076  332D  0025               	movlb	5	; select bank5
 15077  332E  0836               	movf	((_pedalState+1)^(0+640)+1),w
 15078  332F  0022               	movlb	2	; select bank2
 15079  3330  00D5               	movwf	(?_getTapTime^(0+256)+1)
 15080  3331  01D6               	clrf	(?_getTapTime^(0+256)+2)
 15081  3332  01D7               	clrf	(?_getTapTime^(0+256)+3)
 15082  3333  0008               	return
 15083  3334                     __end_of_getTapTime:	
 15084                           
 15085                           	psect	text47
 15086  3117                     __ptext47:	
 15087 ;; *************** function _initSwitchBypass *****************
 15088 ;; Defined at:
 15089 ;;		line 29 in file "SwitchBypass.c"
 15090 ;; Parameters:    Size  Location     Type
 15091 ;;		None
 15092 ;; Auto vars:     Size  Location     Type
 15093 ;;  initState       2   56[BANK2 ] int 
 15094 ;; Return value:  Size  Location     Type
 15095 ;;                  1    wreg      void 
 15096 ;; Registers used:
 15097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15098 ;; Tracked objects:
 15099 ;;		On entry : 0/0
 15100 ;;		On exit  : 0/0
 15101 ;;		Unchanged: 0/0
 15102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15104 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15106 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15107 ;;Total ram usage:        2 bytes
 15108 ;; Hardware stack levels used:    1
 15109 ;; Hardware stack levels required when called:   11
 15110 ;; This function calls:
 15111 ;;		_getSwitchBypassState
 15112 ;;		_setSwitchBypassState
 15113 ;; This function is called by:
 15114 ;;		_main
 15115 ;; This function uses a non-reentrant model
 15116 ;;
 15117                           
 15118                           
 15119                           ;psect for function _initSwitchBypass
 15120  3117                     _initSwitchBypass:	
 15121                           
 15122                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 15123                           
 15124                           ;incstack = 0
 15125                           ; Regs used in _initSwitchBypass: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15126  3117  31B0  20F4  31B1   	fcall	_getSwitchBypassState
 15127  311A  0022               	movlb	2	; select bank2
 15128  311B  0855               	movf	(?_getSwitchBypassState+1)^(0+256),w
 15129  311C  00D9               	movwf	(initSwitchBypass@initState+1)^(0+256)
 15130  311D  0854               	movf	?_getSwitchBypassState^(0+256),w
 15131  311E  00D8               	movwf	initSwitchBypass@initState^(0+256)
 15132                           
 15133                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 15134  311F  0859               	movf	(initSwitchBypass@initState+1)^(0+256),w
 15135  3120  0021               	movlb	1	; select bank1
 15136  3121  00B6               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 15137  3122  0022               	movlb	2	; select bank2
 15138  3123  0858               	movf	initSwitchBypass@initState^(0+256),w
 15139  3124  0021               	movlb	1	; select bank1
 15140  3125  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
 15141  3126  31B2  2238         	fcall	_setSwitchBypassState
 15142  3128  0008               	return
 15143  3129                     __end_of_initSwitchBypass:	
 15144                           
 15145                           	psect	text48
 15146  3238                     __ptext48:	
 15147 ;; *************** function _setSwitchBypassState *****************
 15148 ;; Defined at:
 15149 ;;		line 141 in file "SwitchBypass.c"
 15150 ;; Parameters:    Size  Location     Type
 15151 ;;  f_state         2   21[BANK1 ] int 
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;		None
 15154 ;; Return value:  Size  Location     Type
 15155 ;;                  1    wreg      void 
 15156 ;; Registers used:
 15157 ;;		wreg, status,2, status,0, pclath, cstack
 15158 ;; Tracked objects:
 15159 ;;		On entry : 0/0
 15160 ;;		On exit  : 0/0
 15161 ;;		Unchanged: 0/0
 15162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15163 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15165 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15166 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15167 ;;Total ram usage:        4 bytes
 15168 ;; Hardware stack levels used:    1
 15169 ;; Hardware stack levels required when called:    8
 15170 ;; This function calls:
 15171 ;;		_setSwitchBypassRelays
 15172 ;; This function is called by:
 15173 ;;		_main
 15174 ;;		_initSwitchBypass
 15175 ;;		_updateSwitchBypass
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           
 15180                           ;psect for function _setSwitchBypassState
 15181  3238                     _setSwitchBypassState:	
 15182                           
 15183                           ;SwitchBypass.c: 142: if (switchBypass_state == f_state) {return;}
 15184                           
 15185                           ;incstack = 0
 15186                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 15187  3238  0023               	movlb	3	; select bank3
 15188  3239  086E               	movf	_switchBypass_state^(0+384),w
 15189  323A  0021               	movlb	1	; select bank1
 15190  323B  00B7               	movwf	??_setSwitchBypassState^(0+128)
 15191  323C  01B8               	clrf	(??_setSwitchBypassState^(0+128)+1)
 15192  323D  0836               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 15193  323E  0638               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 15194  323F  1D03               	skipz
 15195  3240  2A43               	goto	u6765
 15196  3241  0835               	movf	setSwitchBypassState@f_state^(0+128),w
 15197  3242  0637               	xorwf	??_setSwitchBypassState^(0+128),w
 15198  3243                     u6765:	
 15199  3243  1903               	btfsc	3,2
 15200  3244  0008               	return
 15201                           
 15202                           ;SwitchBypass.c: 144: LATBbits.LATB2 = f_state;
 15203  3245  0C35               	rrf	setSwitchBypassState@f_state^(0+128),w
 15204  3246  0022               	movlb	2	; select bank2
 15205  3247  1C03               	skipc
 15206  3248  110D               	bcf	13,2	;volatile
 15207  3249  1803               	skipnc
 15208  324A  150D               	bsf	13,2	;volatile
 15209                           
 15210                           ;SwitchBypass.c: 145: LATBbits.LATB3 = 0;
 15211  324B  118D               	bcf	13,3	;volatile
 15212                           
 15213                           ;SwitchBypass.c: 146: setSwitchBypassRelays(f_state);
 15214  324C  0021               	movlb	1	; select bank1
 15215  324D  0836               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 15216  324E  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 15217  324F  0835               	movf	setSwitchBypassState@f_state^(0+128),w
 15218  3250  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 15219  3251  31B4  24BA         	fcall	_setSwitchBypassRelays
 15220  3253  0008               	return
 15221  3254                     __end_of_setSwitchBypassState:	
 15222                           
 15223                           	psect	text49
 15224  34BA                     __ptext49:	
 15225 ;; *************** function _setSwitchBypassRelays *****************
 15226 ;; Defined at:
 15227 ;;		line 149 in file "SwitchBypass.c"
 15228 ;; Parameters:    Size  Location     Type
 15229 ;;  f_state         2   18[BANK1 ] int 
 15230 ;; Auto vars:     Size  Location     Type
 15231 ;;		None
 15232 ;; Return value:  Size  Location     Type
 15233 ;;                  1    wreg      void 
 15234 ;; Registers used:
 15235 ;;		wreg, status,2, status,0, pclath, cstack
 15236 ;; Tracked objects:
 15237 ;;		On entry : 0/0
 15238 ;;		On exit  : 0/0
 15239 ;;		Unchanged: 0/0
 15240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15241 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15243 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15244 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15245 ;;Total ram usage:        3 bytes
 15246 ;; Hardware stack levels used:    1
 15247 ;; Hardware stack levels required when called:    7
 15248 ;; This function calls:
 15249 ;;		_updateSwitchBypassState
 15250 ;;		_wait_ms
 15251 ;; This function is called by:
 15252 ;;		_updateSwitchBypass
 15253 ;;		_setSwitchBypassState
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257                           
 15258                           ;psect for function _setSwitchBypassRelays
 15259  34BA                     _setSwitchBypassRelays:	
 15260                           
 15261                           ;SwitchBypass.c: 150: switchBypass_state = f_state;
 15262                           
 15263                           ;incstack = 0
 15264                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 15265  34BA  0021               	movlb	1	; select bank1
 15266  34BB  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 15267  34BC  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 15268  34BD  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 15269  34BE  0023               	movlb	3	; select bank3
 15270  34BF  00EE               	movwf	_switchBypass_state^(0+384)
 15271                           
 15272                           ;SwitchBypass.c: 151: LATGbits.LATG2 = f_state;
 15273  34C0  0021               	movlb	1	; select bank1
 15274  34C1  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 15275  34C2  0027               	movlb	7	; select bank7
 15276  34C3  1C03               	skipc
 15277  34C4  110D               	bcf	13,2	;volatile
 15278  34C5  1803               	skipnc
 15279  34C6  150D               	bsf	13,2	;volatile
 15280                           
 15281                           ;SwitchBypass.c: 152: LATGbits.LATG1 = !f_state;
 15282  34C7  0021               	movlb	1	; select bank1
 15283  34C8  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 15284  34C9  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 15285  34CA  1D03               	btfss	3,2
 15286  34CB  2CCF               	goto	u6480
 15287  34CC  0027               	movlb	7	; select bank7
 15288  34CD  148D               	bsf	13,1	;volatile
 15289  34CE  2CD1               	goto	l7181
 15290  34CF                     u6480:	
 15291  34CF  0027               	movlb	7	; select bank7
 15292  34D0  108D               	bcf	13,1	;volatile
 15293  34D1                     l7181:	
 15294                           
 15295                           ;SwitchBypass.c: 154: wait_ms(20);
 15296  34D1  3014               	movlw	20
 15297  34D2  0021               	movlb	1	; select bank1
 15298  34D3  00AC               	movwf	wait_ms@timeSec^(0+128)
 15299  34D4  3000               	movlw	0
 15300  34D5  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 15301  34D6  31B5  2549  31B4   	fcall	_wait_ms
 15302                           
 15303                           ;SwitchBypass.c: 156: LATGbits.LATG2 = 0;
 15304  34D9  0027               	movlb	7	; select bank7
 15305  34DA  110D               	bcf	13,2	;volatile
 15306                           
 15307                           ;SwitchBypass.c: 157: LATGbits.LATG1 = 0;
 15308  34DB  108D               	bcf	13,1	;volatile
 15309                           
 15310                           ;SwitchBypass.c: 159: updateSwitchBypassState((char) switchBypass_state);
 15311  34DC  0023               	movlb	3	; select bank3
 15312  34DD  086E               	movf	_switchBypass_state^(0+384),w
 15313  34DE  31B0  2055  31B4   	fcall	_updateSwitchBypassState
 15314                           
 15315                           ;SwitchBypass.c: 160: wait_ms(20);
 15316  34E1  3014               	movlw	20
 15317  34E2  0021               	movlb	1	; select bank1
 15318  34E3  00AC               	movwf	wait_ms@timeSec^(0+128)
 15319  34E4  3000               	movlw	0
 15320  34E5  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 15321  34E6  31B5  2549         	fcall	_wait_ms
 15322  34E8  0008               	return
 15323  34E9                     __end_of_setSwitchBypassRelays:	
 15324                           
 15325                           	psect	text50
 15326  3549                     __ptext50:	
 15327 ;; *************** function _wait_ms *****************
 15328 ;; Defined at:
 15329 ;;		line 23 in file "system.c"
 15330 ;; Parameters:    Size  Location     Type
 15331 ;;  timeSec         2   12[BANK1 ] unsigned int 
 15332 ;; Auto vars:     Size  Location     Type
 15333 ;;  timemsl         4   14[BANK1 ] long 
 15334 ;; Return value:  Size  Location     Type
 15335 ;;                  1    wreg      void 
 15336 ;; Registers used:
 15337 ;;		wreg, status,2, status,0, pclath, cstack
 15338 ;; Tracked objects:
 15339 ;;		On entry : 0/0
 15340 ;;		On exit  : 0/0
 15341 ;;		Unchanged: 0/0
 15342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15343 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15344 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15346 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15347 ;;Total ram usage:        6 bytes
 15348 ;; Hardware stack levels used:    1
 15349 ;; Hardware stack levels required when called:    6
 15350 ;; This function calls:
 15351 ;;		___lmul
 15352 ;; This function is called by:
 15353 ;;		_ring_tactiles
 15354 ;;		_solidring_tactiles
 15355 ;;		_read_bottom_tactile
 15356 ;;		_read_top_tactile
 15357 ;;		_setSwitchBypassRelays
 15358 ;;		_setDoublePressState
 15359 ;;		_showError_Alternating
 15360 ;;		_show_error
 15361 ;;		_show_cancel
 15362 ;;		_star_tactiles
 15363 ;;		_initExpModeState
 15364 ;; This function uses a non-reentrant model
 15365 ;;
 15366                           
 15367                           
 15368                           ;psect for function _wait_ms
 15369  3549                     _wait_ms:	
 15370                           
 15371                           ;system.c: 25: long timemsl = 0;
 15372                           
 15373                           ;incstack = 0
 15374                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 15375  3549  3000               	movlw	0
 15376  354A  0021               	movlb	1	; select bank1
 15377  354B  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 15378  354C  3000               	movlw	0
 15379  354D  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 15380  354E  3000               	movlw	0
 15381  354F  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 15382  3550  3000               	movlw	0
 15383  3551  00AE               	movwf	wait_ms@timemsl^(0+128)
 15384                           
 15385                           ;system.c: 26: timemsl = timeSec * 1000l;
 15386  3552  082C               	movf	wait_ms@timeSec^(0+128),w
 15387  3553  00A0               	movwf	___lmul@multiplier^(0+128)
 15388  3554  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 15389  3555  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 15390  3556  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 15391  3557  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 15392  3558  3000               	movlw	0
 15393  3559  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 15394  355A  3000               	movlw	0
 15395  355B  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 15396  355C  3003               	movlw	3
 15397  355D  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 15398  355E  30E8               	movlw	232
 15399  355F  00A4               	movwf	___lmul@multiplicand^(0+128)
 15400  3560  31B5  2519  31B5   	fcall	___lmul
 15401  3563  0021               	movlb	1	; select bank1
 15402  3564  0823               	movf	(?___lmul+3)^(0+128),w
 15403  3565  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 15404  3566  0822               	movf	(?___lmul+2)^(0+128),w
 15405  3567  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 15406  3568  0821               	movf	(?___lmul+1)^(0+128),w
 15407  3569  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 15408  356A  0820               	movf	?___lmul^(0+128),w
 15409  356B  00AE               	movwf	wait_ms@timemsl^(0+128)
 15410  356C                     l508:	
 15411                           ;system.c: 27: for( ; timemsl; timemsl--);
 15412                           
 15413  356C  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 15414  356D  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 15415  356E  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 15416  356F  042E               	iorwf	wait_ms@timemsl^(0+128),w
 15417  3570  1903               	btfsc	3,2
 15418  3571  0008               	return
 15419  3572  30FF               	movlw	255
 15420  3573  07AE               	addwf	wait_ms@timemsl^(0+128),f
 15421  3574  30FF               	movlw	255
 15422  3575  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 15423  3576  30FF               	movlw	255
 15424  3577  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 15425  3578  30FF               	movlw	255
 15426  3579  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 15427  357A  2D6C               	goto	l508
 15428  357B                     __end_of_wait_ms:	
 15429                           
 15430                           	psect	text51
 15431  3519                     __ptext51:	
 15432 ;; *************** function ___lmul *****************
 15433 ;; Defined at:
 15434 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 15435 ;; Parameters:    Size  Location     Type
 15436 ;;  multiplier      4    0[BANK1 ] unsigned long 
 15437 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 15438 ;; Auto vars:     Size  Location     Type
 15439 ;;  product         4    8[BANK1 ] unsigned long 
 15440 ;; Return value:  Size  Location     Type
 15441 ;;                  4    0[BANK1 ] unsigned long 
 15442 ;; Registers used:
 15443 ;;		wreg, status,2, status,0
 15444 ;; Tracked objects:
 15445 ;;		On entry : 0/0
 15446 ;;		On exit  : 0/0
 15447 ;;		Unchanged: 0/0
 15448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15449 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15450 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15452 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15453 ;;Total ram usage:       12 bytes
 15454 ;; Hardware stack levels used:    1
 15455 ;; Hardware stack levels required when called:    5
 15456 ;; This function calls:
 15457 ;;		Nothing
 15458 ;; This function is called by:
 15459 ;;		_wait_ms
 15460 ;; This function uses a non-reentrant model
 15461 ;;
 15462                           
 15463                           
 15464                           ;psect for function ___lmul
 15465  3519                     ___lmul:	
 15466                           
 15467                           ;incstack = 0
 15468                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 15469  3519  3000               	movlw	0
 15470  351A  0021               	movlb	1	; select bank1
 15471  351B  00AB               	movwf	(___lmul@product+3)^(0+128)
 15472  351C  3000               	movlw	0
 15473  351D  00AA               	movwf	(___lmul@product+2)^(0+128)
 15474  351E  3000               	movlw	0
 15475  351F  00A9               	movwf	(___lmul@product+1)^(0+128)
 15476  3520  3000               	movlw	0
 15477  3521  00A8               	movwf	___lmul@product^(0+128)
 15478  3522                     l6287:	
 15479  3522  1C20               	btfss	___lmul@multiplier^(0+128),0
 15480  3523  2D2C               	goto	l6291
 15481  3524  0824               	movf	___lmul@multiplicand^(0+128),w
 15482  3525  07A8               	addwf	___lmul@product^(0+128),f
 15483  3526  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 15484  3527  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 15485  3528  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 15486  3529  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 15487  352A  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 15488  352B  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 15489  352C                     l6291:	
 15490  352C  3001               	movlw	1
 15491  352D                     u5085:	
 15492  352D  35A4               	lslf	___lmul@multiplicand^(0+128),f
 15493  352E  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 15494  352F  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 15495  3530  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 15496  3531  0B89               	decfsz	9,f
 15497  3532  2D2D               	goto	u5085
 15498  3533  3001               	movlw	1
 15499  3534                     u5095:	
 15500  3534  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 15501  3535  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 15502  3536  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 15503  3537  0CA0               	rrf	___lmul@multiplier^(0+128),f
 15504  3538  0B89               	decfsz	9,f
 15505  3539  2D34               	goto	u5095
 15506  353A  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 15507  353B  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 15508  353C  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 15509  353D  0420               	iorwf	___lmul@multiplier^(0+128),w
 15510  353E  1D03               	skipz
 15511  353F  2D22               	goto	l6287
 15512  3540  082B               	movf	(___lmul@product+3)^(0+128),w
 15513  3541  00A3               	movwf	(?___lmul+3)^(0+128)
 15514  3542  082A               	movf	(___lmul@product+2)^(0+128),w
 15515  3543  00A2               	movwf	(?___lmul+2)^(0+128)
 15516  3544  0829               	movf	(___lmul@product+1)^(0+128),w
 15517  3545  00A1               	movwf	(?___lmul+1)^(0+128)
 15518  3546  0828               	movf	___lmul@product^(0+128),w
 15519  3547  00A0               	movwf	?___lmul^(0+128)
 15520  3548  0008               	return
 15521  3549                     __end_of___lmul:	
 15522                           
 15523                           	psect	text52
 15524  3055                     __ptext52:	
 15525 ;; *************** function _updateSwitchBypassState *****************
 15526 ;; Defined at:
 15527 ;;		line 225 in file "state_manager.c"
 15528 ;; Parameters:    Size  Location     Type
 15529 ;;  state           1    wreg     unsigned char 
 15530 ;; Auto vars:     Size  Location     Type
 15531 ;;  state           1    1[BANK1 ] unsigned char 
 15532 ;; Return value:  Size  Location     Type
 15533 ;;                  1    wreg      void 
 15534 ;; Registers used:
 15535 ;;		wreg, status,2, status,0
 15536 ;; Tracked objects:
 15537 ;;		On entry : 0/0
 15538 ;;		On exit  : 0/0
 15539 ;;		Unchanged: 0/0
 15540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15542 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15543 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15544 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15545 ;;Total ram usage:        2 bytes
 15546 ;; Hardware stack levels used:    1
 15547 ;; Hardware stack levels required when called:    5
 15548 ;; This function calls:
 15549 ;;		Nothing
 15550 ;; This function is called by:
 15551 ;;		_setSwitchBypassRelays
 15552 ;; This function uses a non-reentrant model
 15553 ;;
 15554                           
 15555                           
 15556                           ;psect for function _updateSwitchBypassState
 15557  3055                     _updateSwitchBypassState:	
 15558                           
 15559                           ;incstack = 0
 15560                           ; Regs used in _updateSwitchBypassState: [wreg+status,2+status,0]
 15561                           ;updateSwitchBypassState@state stored from wreg
 15562  3055  0021               	movlb	1	; select bank1
 15563  3056  00A1               	movwf	updateSwitchBypassState@state^(0+128)
 15564                           
 15565                           ;state_manager.c: 226: if (state != 1) {state = 0;}
 15566  3057  0321               	decf	updateSwitchBypassState@state^(0+128),w
 15567  3058  1D03               	btfss	3,2
 15568  3059  01A1               	clrf	updateSwitchBypassState@state^(0+128)
 15569                           
 15570                           ;state_manager.c: 228: pedalState.bypass = state;
 15571  305A  0821               	movf	updateSwitchBypassState@state^(0+128),w
 15572  305B  00A0               	movwf	??_updateSwitchBypassState^(0+128)
 15573  305C  0820               	movf	??_updateSwitchBypassState^(0+128),w
 15574  305D  0025               	movlb	5	; select bank5
 15575  305E  00B7               	movwf	(_pedalState^(0+640)+3)
 15576  305F  0008               	return
 15577  3060                     __end_of_updateSwitchBypassState:	
 15578                           
 15579                           	psect	text53
 15580  30F4                     __ptext53:	
 15581 ;; *************** function _getSwitchBypassState *****************
 15582 ;; Defined at:
 15583 ;;		line 232 in file "state_manager.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;		None
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;		None
 15588 ;; Return value:  Size  Location     Type
 15589 ;;                  2   52[BANK2 ] int 
 15590 ;; Registers used:
 15591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15592 ;; Tracked objects:
 15593 ;;		On entry : 0/0
 15594 ;;		On exit  : 0/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15597 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15599 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15600 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15601 ;;Total ram usage:        4 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:   10
 15604 ;; This function calls:
 15605 ;;		_initStateManager
 15606 ;; This function is called by:
 15607 ;;		_initSwitchBypass
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           
 15612                           ;psect for function _getSwitchBypassState
 15613  30F4                     _getSwitchBypassState:	
 15614                           
 15615                           ;state_manager.c: 233: if (isStateInitialized != 1) {
 15616                           
 15617                           ;incstack = 0
 15618                           ; Regs used in _getSwitchBypassState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15619  30F4  0020               	movlb	0	; select bank0
 15620  30F5  035D               	decf	_isStateInitialized,w
 15621  30F6  045E               	iorwf	_isStateInitialized+1,w
 15622  30F7  1903               	btfsc	3,2
 15623  30F8  28FB               	goto	l7509
 15624                           
 15625                           ;state_manager.c: 234: initStateManager();
 15626  30F9  31BF  2791         	fcall	_initStateManager
 15627  30FB                     l7509:	
 15628                           
 15629                           ;state_manager.c: 235: }
 15630                           ;state_manager.c: 236: return pedalState.bypass;
 15631  30FB  0025               	movlb	5	; select bank5
 15632  30FC  0837               	movf	(_pedalState^(0+640)+3),w
 15633  30FD  0022               	movlb	2	; select bank2
 15634  30FE  00D6               	movwf	??_getSwitchBypassState^(0+256)
 15635  30FF  01D7               	clrf	(??_getSwitchBypassState^(0+256)+1)
 15636  3100  0856               	movf	??_getSwitchBypassState^(0+256),w
 15637  3101  00D4               	movwf	?_getSwitchBypassState^(0+256)
 15638  3102  0857               	movf	(??_getSwitchBypassState+1)^(0+256),w
 15639  3103  00D5               	movwf	(?_getSwitchBypassState+1)^(0+256)
 15640  3104  0008               	return
 15641  3105                     __end_of_getSwitchBypassState:	
 15642                           
 15643                           	psect	text54
 15644  30B1                     __ptext54:	
 15645 ;; *************** function _getVolume *****************
 15646 ;; Defined at:
 15647 ;;		line 259 in file "state_manager.c"
 15648 ;; Parameters:    Size  Location     Type
 15649 ;;		None
 15650 ;; Auto vars:     Size  Location     Type
 15651 ;;		None
 15652 ;; Return value:  Size  Location     Type
 15653 ;;                  2   52[BANK2 ] int 
 15654 ;; Registers used:
 15655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15656 ;; Tracked objects:
 15657 ;;		On entry : 0/0
 15658 ;;		On exit  : 0/0
 15659 ;;		Unchanged: 0/0
 15660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15661 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15664 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15665 ;;Total ram usage:        2 bytes
 15666 ;; Hardware stack levels used:    1
 15667 ;; Hardware stack levels required when called:   10
 15668 ;; This function calls:
 15669 ;;		_initStateManager
 15670 ;; This function is called by:
 15671 ;;		_main
 15672 ;; This function uses a non-reentrant model
 15673 ;;
 15674                           
 15675                           
 15676                           ;psect for function _getVolume
 15677  30B1                     _getVolume:	
 15678                           
 15679                           ;state_manager.c: 260: if (isStateInitialized != 1) {
 15680                           
 15681                           ;incstack = 0
 15682                           ; Regs used in _getVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15683  30B1  0020               	movlb	0	; select bank0
 15684  30B2  035D               	decf	_isStateInitialized,w
 15685  30B3  045E               	iorwf	_isStateInitialized+1,w
 15686  30B4  1903               	btfsc	3,2
 15687  30B5  28B8               	goto	l7865
 15688                           
 15689                           ;state_manager.c: 261: initStateManager();
 15690  30B6  31BF  2791         	fcall	_initStateManager
 15691  30B8                     l7865:	
 15692                           
 15693                           ;state_manager.c: 262: }
 15694                           ;state_manager.c: 263: return pedalState.volume;
 15695  30B8  0025               	movlb	5	; select bank5
 15696  30B9  083B               	movf	((_pedalState+1)^(0+640)+6),w
 15697  30BA  0022               	movlb	2	; select bank2
 15698  30BB  00D5               	movwf	(?_getVolume+1)^(0+256)
 15699  30BC  0025               	movlb	5	; select bank5
 15700  30BD  083A               	movf	(_pedalState^(0+640)+6),w
 15701  30BE  0022               	movlb	2	; select bank2
 15702  30BF  00D4               	movwf	?_getVolume^(0+256)
 15703  30C0  0008               	return
 15704  30C1                     __end_of_getVolume:	
 15705                           
 15706                           	psect	text55
 15707  32AF                     __ptext55:	
 15708 ;; *************** function _getSymmetry *****************
 15709 ;; Defined at:
 15710 ;;		line 285 in file "state_manager.c"
 15711 ;; Parameters:    Size  Location     Type
 15712 ;;		None
 15713 ;; Auto vars:     Size  Location     Type
 15714 ;;		None
 15715 ;; Return value:  Size  Location     Type
 15716 ;;                  2   52[BANK2 ] int 
 15717 ;; Registers used:
 15718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15719 ;; Tracked objects:
 15720 ;;		On entry : 0/0
 15721 ;;		On exit  : 0/0
 15722 ;;		Unchanged: 0/0
 15723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15724 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15727 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15728 ;;Total ram usage:        2 bytes
 15729 ;; Hardware stack levels used:    1
 15730 ;; Hardware stack levels required when called:   10
 15731 ;; This function calls:
 15732 ;;		_initStateManager
 15733 ;; This function is called by:
 15734 ;;		_main
 15735 ;; This function uses a non-reentrant model
 15736 ;;
 15737                           
 15738                           
 15739                           ;psect for function _getSymmetry
 15740  32AF                     _getSymmetry:	
 15741                           
 15742                           ;state_manager.c: 286: if (isStateInitialized != 1) {
 15743                           
 15744                           ;incstack = 0
 15745                           ; Regs used in _getSymmetry: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15746  32AF  0020               	movlb	0	; select bank0
 15747  32B0  035D               	decf	_isStateInitialized,w
 15748  32B1  045E               	iorwf	_isStateInitialized+1,w
 15749  32B2  1903               	btfsc	3,2
 15750  32B3  2AB7               	goto	l7881
 15751                           
 15752                           ;state_manager.c: 287: initStateManager();
 15753  32B4  31BF  2791  31B2   	fcall	_initStateManager
 15754  32B7                     l7881:	
 15755                           
 15756                           ;state_manager.c: 288: }
 15757                           ;state_manager.c: 289: if (pedalState.symmetry < 1 || pedalState.symmetry > 1023) {
 15758  32B7  0025               	movlb	5	; select bank5
 15759  32B8  083E               	movf	(_pedalState^(0+640)+10),w
 15760  32B9  043F               	iorwf	((_pedalState+1)^(0+640)+10),w
 15761  32BA  1903               	btfsc	3,2
 15762  32BB  2AC3               	goto	l7885
 15763  32BC  3004               	movlw	4
 15764  32BD  023F               	subwf	((_pedalState+1)^(0+640)+10),w
 15765  32BE  3000               	movlw	0
 15766  32BF  1903               	skipnz
 15767  32C0  023E               	subwf	(_pedalState^(0+640)+10),w
 15768  32C1  1C03               	skipc
 15769  32C2  2AC7               	goto	l1367
 15770  32C3                     l7885:	
 15771                           
 15772                           ;state_manager.c: 290: pedalState.symmetry = 1023;
 15773  32C3  30FF               	movlw	255
 15774  32C4  00BE               	movwf	(_pedalState^(0+640)+10)
 15775  32C5  3003               	movlw	3
 15776  32C6  00BF               	movwf	(_pedalState^(0+640)+11)
 15777  32C7                     l1367:	
 15778                           
 15779                           ;state_manager.c: 291: }
 15780                           ;state_manager.c: 293: return pedalState.symmetry;
 15781  32C7  083F               	movf	((_pedalState+1)^(0+640)+10),w
 15782  32C8  0022               	movlb	2	; select bank2
 15783  32C9  00D5               	movwf	(?_getSymmetry+1)^(0+256)
 15784  32CA  0025               	movlb	5	; select bank5
 15785  32CB  083E               	movf	(_pedalState^(0+640)+10),w
 15786  32CC  0022               	movlb	2	; select bank2
 15787  32CD  00D4               	movwf	?_getSymmetry^(0+256)
 15788  32CE  0008               	return
 15789  32CF                     __end_of_getSymmetry:	
 15790                           
 15791                           	psect	text56
 15792  2A1D                     __ptext56:	
 15793 ;; *************** function _getModulationDelayTime *****************
 15794 ;; Defined at:
 15795 ;;		line 37 in file "modulation.c"
 15796 ;; Parameters:    Size  Location     Type
 15797 ;;		None
 15798 ;; Auto vars:     Size  Location     Type
 15799 ;;		None
 15800 ;; Return value:  Size  Location     Type
 15801 ;;                  1    wreg      void 
 15802 ;; Registers used:
 15803 ;;		wreg, status,2, status,0, pclath, cstack
 15804 ;; Tracked objects:
 15805 ;;		On entry : 0/0
 15806 ;;		On exit  : 0/0
 15807 ;;		Unchanged: 0/0
 15808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15813 ;;Total ram usage:        0 bytes
 15814 ;; Hardware stack levels used:    1
 15815 ;; Hardware stack levels required when called:    7
 15816 ;; This function calls:
 15817 ;;		___altoft
 15818 ;;		___awtoft
 15819 ;;		___ftdiv
 15820 ;;		___fttol
 15821 ;;		_getModulationSubdivision
 15822 ;; This function is called by:
 15823 ;;		_main
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           
 15828                           ;psect for function _getModulationDelayTime
 15829  2A1D                     _getModulationDelayTime:	
 15830                           
 15831                           ;modulation.c: 38: adjust_mod_delay = 0;
 15832                           
 15833                           ;incstack = 0
 15834                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 15835  2A1D  0024               	movlb	4	; select bank4
 15836  2A1E  01C6               	clrf	_adjust_mod_delay^(0+512)
 15837                           
 15838                           ;modulation.c: 39: getModulationSubdivision();
 15839  2A1F  31B4  248B  31AA   	fcall	_getModulationSubdivision
 15840                           
 15841                           ;modulation.c: 40: mod_delay_time = (int)((float)delay_time/(float)modulationSubdivision
      +                          );
 15842  2A22  0020               	movlb	0	; select bank0
 15843  2A23  0869               	movf	_delay_time+3,w	;volatile
 15844  2A24  0021               	movlb	1	; select bank1
 15845  2A25  00AB               	movwf	(___altoft@c+3)^(0+128)
 15846  2A26  0020               	movlb	0	; select bank0
 15847  2A27  0868               	movf	_delay_time+2,w	;volatile
 15848  2A28  0021               	movlb	1	; select bank1
 15849  2A29  00AA               	movwf	(___altoft@c+2)^(0+128)
 15850  2A2A  0020               	movlb	0	; select bank0
 15851  2A2B  0867               	movf	_delay_time+1,w	;volatile
 15852  2A2C  0021               	movlb	1	; select bank1
 15853  2A2D  00A9               	movwf	(___altoft@c+1)^(0+128)
 15854  2A2E  0020               	movlb	0	; select bank0
 15855  2A2F  0866               	movf	_delay_time,w	;volatile
 15856  2A30  0021               	movlb	1	; select bank1
 15857  2A31  00A8               	movwf	___altoft@c^(0+128)
 15858  2A32  31B7  2748  31AA   	fcall	___altoft
 15859  2A35  0021               	movlb	1	; select bank1
 15860  2A36  0828               	movf	?___altoft^(0+128),w
 15861  2A37  00D1               	movwf	___ftdiv@f1^(0+128)
 15862  2A38  0829               	movf	(?___altoft+1)^(0+128),w
 15863  2A39  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15864  2A3A  082A               	movf	(?___altoft+2)^(0+128),w
 15865  2A3B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15866  2A3C  0024               	movlb	4	; select bank4
 15867  2A3D  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 15868  2A3E  0021               	movlb	1	; select bank1
 15869  2A3F  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15870  2A40  0024               	movlb	4	; select bank4
 15871  2A41  0842               	movf	_modulationSubdivision^(0+512),w
 15872  2A42  0021               	movlb	1	; select bank1
 15873  2A43  00A8               	movwf	___awtoft@c^(0+128)
 15874  2A44  31B2  22F0  31AA   	fcall	___awtoft
 15875  2A47  0021               	movlb	1	; select bank1
 15876  2A48  0828               	movf	?___awtoft^(0+128),w
 15877  2A49  00CE               	movwf	___ftdiv@f2^(0+128)
 15878  2A4A  0829               	movf	(?___awtoft+1)^(0+128),w
 15879  2A4B  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15880  2A4C  082A               	movf	(?___awtoft+2)^(0+128),w
 15881  2A4D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15882  2A4E  31A4  2434  31AA   	fcall	___ftdiv
 15883  2A51  0021               	movlb	1	; select bank1
 15884  2A52  084E               	movf	?___ftdiv^(0+128),w
 15885  2A53  0022               	movlb	2	; select bank2
 15886  2A54  00A0               	movwf	___fttol@f1^(0+256)
 15887  2A55  0021               	movlb	1	; select bank1
 15888  2A56  084F               	movf	(?___ftdiv+1)^(0+128),w
 15889  2A57  0022               	movlb	2	; select bank2
 15890  2A58  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15891  2A59  0021               	movlb	1	; select bank1
 15892  2A5A  0850               	movf	(?___ftdiv+2)^(0+128),w
 15893  2A5B  0022               	movlb	2	; select bank2
 15894  2A5C  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15895  2A5D  31A1  2164         	fcall	___fttol
 15896  2A5F  0022               	movlb	2	; select bank2
 15897  2A60  0821               	movf	(?___fttol^(0+256)+1),w
 15898  2A61  0024               	movlb	4	; select bank4
 15899  2A62  00E4               	movwf	(_mod_delay_time+1)^(0+512)
 15900  2A63  0022               	movlb	2	; select bank2
 15901  2A64  0820               	movf	?___fttol^(0+256),w
 15902  2A65  0024               	movlb	4	; select bank4
 15903  2A66  00E3               	movwf	_mod_delay_time^(0+512)
 15904  2A67  0008               	return
 15905  2A68                     __end_of_getModulationDelayTime:	
 15906                           
 15907                           	psect	text57
 15908  348B                     __ptext57:	
 15909 ;; *************** function _getModulationSubdivision *****************
 15910 ;; Defined at:
 15911 ;;		line 27 in file "modulation.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;		None
 15914 ;; Auto vars:     Size  Location     Type
 15915 ;;		None
 15916 ;; Return value:  Size  Location     Type
 15917 ;;                  2    0[BANK1 ] int 
 15918 ;; Registers used:
 15919 ;;		wreg, status,2, status,0
 15920 ;; Tracked objects:
 15921 ;;		On entry : 0/0
 15922 ;;		On exit  : 0/0
 15923 ;;		Unchanged: 0/0
 15924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15925 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15928 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15929 ;;Total ram usage:        2 bytes
 15930 ;; Hardware stack levels used:    1
 15931 ;; Hardware stack levels required when called:    5
 15932 ;; This function calls:
 15933 ;;		Nothing
 15934 ;; This function is called by:
 15935 ;;		_getModulationDelayTime
 15936 ;;		_updateModulationArray
 15937 ;; This function uses a non-reentrant model
 15938 ;;
 15939                           
 15940                           
 15941                           ;psect for function _getModulationSubdivision
 15942  348B                     _getModulationSubdivision:	
 15943                           
 15944                           ;modulation.c: 28: if (delay_time >= 2400) {
 15945                           
 15946                           ;incstack = 0
 15947                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 15948  348B  0020               	movlb	0	; select bank0
 15949  348C  1BE9               	btfsc	_delay_time+3,7	;volatile
 15950  348D  2C9C               	goto	l7337
 15951  348E  0869               	movf	_delay_time+3,w	;volatile
 15952  348F  1D03               	btfss	3,2
 15953  3490  2C9A               	goto	l7335
 15954  3491  0868               	movf	_delay_time+2,w	;volatile
 15955  3492  1D03               	btfss	3,2
 15956  3493  2C9A               	goto	l7335
 15957  3494  3060               	movlw	96
 15958  3495  0266               	subwf	_delay_time,w	;volatile
 15959  3496  3009               	movlw	9
 15960  3497  3B67               	subwfb	_delay_time+1,w	;volatile
 15961  3498  1C03               	btfss	3,0
 15962  3499  2C9C               	goto	l7337
 15963  349A                     l7335:	
 15964                           
 15965                           ;modulation.c: 29: modulationSubdivision = 120;
 15966  349A  3078               	movlw	120
 15967  349B  2CAE               	goto	L16
 15968  349C                     l7337:	
 15969                           ;modulation.c: 30: } else if (delay_time >= 600) {
 15970                           
 15971  349C  0020               	movlb	0	; select bank0
 15972  349D  1BE9               	btfsc	_delay_time+3,7	;volatile
 15973  349E  2CAD               	goto	l7341
 15974  349F  0869               	movf	_delay_time+3,w	;volatile
 15975  34A0  1D03               	btfss	3,2
 15976  34A1  2CAB               	goto	l7339
 15977  34A2  0868               	movf	_delay_time+2,w	;volatile
 15978  34A3  1D03               	btfss	3,2
 15979  34A4  2CAB               	goto	l7339
 15980  34A5  3058               	movlw	88
 15981  34A6  0266               	subwf	_delay_time,w	;volatile
 15982  34A7  3002               	movlw	2
 15983  34A8  3B67               	subwfb	_delay_time+1,w	;volatile
 15984  34A9  1C03               	btfss	3,0
 15985  34AA  2CAD               	goto	l7341
 15986  34AB                     l7339:	
 15987                           
 15988                           ;modulation.c: 31: modulationSubdivision = 60;
 15989  34AB  303C               	movlw	60
 15990  34AC  2CAE               	goto	L16
 15991  34AD                     l7341:	
 15992                           ;modulation.c: 32: } else {
 15993                           
 15994                           
 15995                           ;modulation.c: 33: modulationSubdivision = 30;
 15996  34AD  301E               	movlw	30
 15997  34AE                     L16:	
 15998  34AE  0024               	movlb	4	; select bank4
 15999  34AF  00C2               	movwf	_modulationSubdivision^(0+512)
 16000  34B0  3000               	movlw	0
 16001  34B1  00C3               	movwf	(_modulationSubdivision^(0+512)+1)
 16002                           
 16003                           ;modulation.c: 34: }
 16004                           ;modulation.c: 35: return modulationSubdivision;
 16005  34B2  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 16006  34B3  0021               	movlb	1	; select bank1
 16007  34B4  00A1               	movwf	(?_getModulationSubdivision+1)^(0+128)
 16008  34B5  0024               	movlb	4	; select bank4
 16009  34B6  0842               	movf	_modulationSubdivision^(0+512),w
 16010  34B7  0021               	movlb	1	; select bank1
 16011  34B8  00A0               	movwf	?_getModulationSubdivision^(0+128)
 16012  34B9  0008               	return
 16013  34BA                     __end_of_getModulationSubdivision:	
 16014                           
 16015                           	psect	text58
 16016  30A1                     __ptext58:	
 16017 ;; *************** function _getFrequency *****************
 16018 ;; Defined at:
 16019 ;;		line 273 in file "state_manager.c"
 16020 ;; Parameters:    Size  Location     Type
 16021 ;;		None
 16022 ;; Auto vars:     Size  Location     Type
 16023 ;;		None
 16024 ;; Return value:  Size  Location     Type
 16025 ;;                  2   52[BANK2 ] int 
 16026 ;; Registers used:
 16027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16028 ;; Tracked objects:
 16029 ;;		On entry : 0/0
 16030 ;;		On exit  : 0/0
 16031 ;;		Unchanged: 0/0
 16032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16033 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16036 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16037 ;;Total ram usage:        2 bytes
 16038 ;; Hardware stack levels used:    1
 16039 ;; Hardware stack levels required when called:   10
 16040 ;; This function calls:
 16041 ;;		_initStateManager
 16042 ;; This function is called by:
 16043 ;;		_main
 16044 ;; This function uses a non-reentrant model
 16045 ;;
 16046                           
 16047                           
 16048                           ;psect for function _getFrequency
 16049  30A1                     _getFrequency:	
 16050                           
 16051                           ;state_manager.c: 274: if (isStateInitialized != 1) {
 16052                           
 16053                           ;incstack = 0
 16054                           ; Regs used in _getFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16055  30A1  0020               	movlb	0	; select bank0
 16056  30A2  035D               	decf	_isStateInitialized,w
 16057  30A3  045E               	iorwf	_isStateInitialized+1,w
 16058  30A4  1903               	btfsc	3,2
 16059  30A5  28A8               	goto	l7873
 16060                           
 16061                           ;state_manager.c: 275: initStateManager();
 16062  30A6  31BF  2791         	fcall	_initStateManager
 16063  30A8                     l7873:	
 16064                           
 16065                           ;state_manager.c: 276: }
 16066                           ;state_manager.c: 277: return pedalState.frequency;
 16067  30A8  0025               	movlb	5	; select bank5
 16068  30A9  083D               	movf	((_pedalState+1)^(0+640)+8),w
 16069  30AA  0022               	movlb	2	; select bank2
 16070  30AB  00D5               	movwf	(?_getFrequency+1)^(0+256)
 16071  30AC  0025               	movlb	5	; select bank5
 16072  30AD  083C               	movf	(_pedalState^(0+640)+8),w
 16073  30AE  0022               	movlb	2	; select bank2
 16074  30AF  00D4               	movwf	?_getFrequency^(0+256)
 16075  30B0  0008               	return
 16076  30B1                     __end_of_getFrequency:	
 16077                           
 16078                           	psect	text59
 16079  3091                     __ptext59:	
 16080 ;; *************** function _getDepth *****************
 16081 ;; Defined at:
 16082 ;;		line 304 in file "state_manager.c"
 16083 ;; Parameters:    Size  Location     Type
 16084 ;;		None
 16085 ;; Auto vars:     Size  Location     Type
 16086 ;;		None
 16087 ;; Return value:  Size  Location     Type
 16088 ;;                  2   52[BANK2 ] int 
 16089 ;; Registers used:
 16090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16091 ;; Tracked objects:
 16092 ;;		On entry : 0/0
 16093 ;;		On exit  : 0/0
 16094 ;;		Unchanged: 0/0
 16095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16096 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16099 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16100 ;;Total ram usage:        2 bytes
 16101 ;; Hardware stack levels used:    1
 16102 ;; Hardware stack levels required when called:   10
 16103 ;; This function calls:
 16104 ;;		_initStateManager
 16105 ;; This function is called by:
 16106 ;;		_main
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           
 16111                           ;psect for function _getDepth
 16112  3091                     _getDepth:	
 16113                           
 16114                           ;state_manager.c: 305: if (isStateInitialized != 1) {
 16115                           
 16116                           ;incstack = 0
 16117                           ; Regs used in _getDepth: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16118  3091  0020               	movlb	0	; select bank0
 16119  3092  035D               	decf	_isStateInitialized,w
 16120  3093  045E               	iorwf	_isStateInitialized+1,w
 16121  3094  1903               	btfsc	3,2
 16122  3095  2898               	goto	l7893
 16123                           
 16124                           ;state_manager.c: 306: initStateManager();
 16125  3096  31BF  2791         	fcall	_initStateManager
 16126  3098                     l7893:	
 16127                           
 16128                           ;state_manager.c: 307: }
 16129                           ;state_manager.c: 308: return pedalState.depth;
 16130  3098  0025               	movlb	5	; select bank5
 16131  3099  0841               	movf	((_pedalState+1)^(0+640)+12),w
 16132  309A  0022               	movlb	2	; select bank2
 16133  309B  00D5               	movwf	(?_getDepth+1)^(0+256)
 16134  309C  0025               	movlb	5	; select bank5
 16135  309D  0840               	movf	(_pedalState^(0+640)+12),w
 16136  309E  0022               	movlb	2	; select bank2
 16137  309F  00D4               	movwf	?_getDepth^(0+256)
 16138  30A0  0008               	return
 16139  30A1                     __end_of_getDepth:	
 16140                           
 16141                           	psect	text60
 16142  2EFD                     __ptext60:	
 16143 ;; *************** function _calcCosArray *****************
 16144 ;; Defined at:
 16145 ;;		line 18 in file "modulation.c"
 16146 ;; Parameters:    Size  Location     Type
 16147 ;;		None
 16148 ;; Auto vars:     Size  Location     Type
 16149 ;;  iAngle          1   57[BANK2 ] unsigned char 
 16150 ;;  tmpVal          3   54[BANK2 ] unsigned char 
 16151 ;; Return value:  Size  Location     Type
 16152 ;;                  1    wreg      void 
 16153 ;; Registers used:
 16154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16155 ;; Tracked objects:
 16156 ;;		On entry : 0/0
 16157 ;;		On exit  : 0/0
 16158 ;;		Unchanged: 0/0
 16159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16161 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16162 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16163 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16164 ;;Total ram usage:        8 bytes
 16165 ;; Hardware stack levels used:    1
 16166 ;; Hardware stack levels required when called:   10
 16167 ;; This function calls:
 16168 ;;		___awtoft
 16169 ;;		___ftdiv
 16170 ;;		___ftmul
 16171 ;;		___wmul
 16172 ;;		_cos
 16173 ;; This function is called by:
 16174 ;;		_main
 16175 ;; This function uses a non-reentrant model
 16176 ;;
 16177                           
 16178                           
 16179                           ;psect for function _calcCosArray
 16180  2EFD                     _calcCosArray:	
 16181                           
 16182                           ;modulation.c: 19: double tmpVal;
 16183                           ;modulation.c: 20: for (char iAngle = 0; iAngle < 120; iAngle++) {
 16184                           
 16185                           ;incstack = 0
 16186                           ; Regs used in _calcCosArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16187  2EFD  0022               	movlb	2	; select bank2
 16188  2EFE  01D9               	clrf	calcCosArray@iAngle^(0+256)
 16189  2EFF                     L17:	
 16190  2EFF  3078               	movlw	120
 16191  2F00  0259               	subwf	calcCosArray@iAngle^(0+256),w
 16192  2F01  1803               	btfsc	3,0
 16193  2F02  0008               	return
 16194                           
 16195                           ;modulation.c: 21: tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 16196  2F03  3000               	movlw	0
 16197  2F04  0021               	movlb	1	; select bank1
 16198  2F05  00CE               	movwf	___ftdiv@f2^(0+128)
 16199  2F06  3034               	movlw	52
 16200  2F07  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 16201  2F08  3043               	movlw	67
 16202  2F09  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 16203  2F0A  3010               	movlw	16
 16204  2F0B  00AE               	movwf	___ftmul@f1^(0+128)
 16205  2F0C  3049               	movlw	73
 16206  2F0D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16207  2F0E  3040               	movlw	64
 16208  2F0F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16209  2F10  0022               	movlb	2	; select bank2
 16210  2F11  0859               	movf	calcCosArray@iAngle^(0+256),w
 16211  2F12  00D2               	movwf	??_calcCosArray^(0+256)
 16212  2F13  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 16213  2F14  0852               	movf	??_calcCosArray^(0+256),w
 16214  2F15  00AE               	movwf	___wmul@multiplier^(0+256)
 16215  2F16  0853               	movf	(??_calcCosArray+1)^(0+256),w
 16216  2F17  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16217  2F18  3003               	movlw	3
 16218  2F19  00B0               	movwf	___wmul@multiplicand^(0+256)
 16219  2F1A  3000               	movlw	0
 16220  2F1B  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16221  2F1C  31B2  221C  31AE   	fcall	___wmul
 16222  2F1F  0022               	movlb	2	; select bank2
 16223  2F20  082F               	movf	(?___wmul+1)^(0+256),w
 16224  2F21  0021               	movlb	1	; select bank1
 16225  2F22  00A9               	movwf	(___awtoft@c+1)^(0+128)
 16226  2F23  0022               	movlb	2	; select bank2
 16227  2F24  082E               	movf	?___wmul^(0+256),w
 16228  2F25  0021               	movlb	1	; select bank1
 16229  2F26  00A8               	movwf	___awtoft@c^(0+128)
 16230  2F27  31B2  22F0  31AE   	fcall	___awtoft
 16231  2F2A  0021               	movlb	1	; select bank1
 16232  2F2B  0828               	movf	?___awtoft^(0+128),w
 16233  2F2C  00B1               	movwf	___ftmul@f2^(0+128)
 16234  2F2D  0829               	movf	(?___awtoft+1)^(0+128),w
 16235  2F2E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16236  2F2F  082A               	movf	(?___awtoft+2)^(0+128),w
 16237  2F30  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16238  2F31  31A5  2590  31AE   	fcall	___ftmul
 16239  2F34  0021               	movlb	1	; select bank1
 16240  2F35  082E               	movf	?___ftmul^(0+128),w
 16241  2F36  00D1               	movwf	___ftdiv@f1^(0+128)
 16242  2F37  082F               	movf	(?___ftmul+1)^(0+128),w
 16243  2F38  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 16244  2F39  0830               	movf	(?___ftmul+2)^(0+128),w
 16245  2F3A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 16246  2F3B  31A4  2434  31AE   	fcall	___ftdiv
 16247  2F3E  0021               	movlb	1	; select bank1
 16248  2F3F  084E               	movf	?___ftdiv^(0+128),w
 16249  2F40  0022               	movlb	2	; select bank2
 16250  2F41  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 16251  2F42  0021               	movlb	1	; select bank1
 16252  2F43  084F               	movf	(?___ftdiv+1)^(0+128),w
 16253  2F44  0022               	movlb	2	; select bank2
 16254  2F45  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 16255  2F46  0021               	movlb	1	; select bank1
 16256  2F47  0850               	movf	(?___ftdiv+2)^(0+128),w
 16257  2F48  0022               	movlb	2	; select bank2
 16258  2F49  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 16259                           
 16260                           ;modulation.c: 22: tmpVal = cos(tmpVal);
 16261  2F4A  0856               	movf	calcCosArray@tmpVal^(0+256),w
 16262  2F4B  00CC               	movwf	cos@f^(0+256)
 16263  2F4C  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 16264  2F4D  00CD               	movwf	(cos@f+1)^(0+256)
 16265  2F4E  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 16266  2F4F  00CE               	movwf	(cos@f+2)^(0+256)
 16267  2F50  31AE  2681  31AE   	fcall	_cos
 16268  2F53  0022               	movlb	2	; select bank2
 16269  2F54  084C               	movf	?_cos^(0+256),w
 16270  2F55  00D6               	movwf	calcCosArray@tmpVal^(0+256)
 16271  2F56  084D               	movf	(?_cos+1)^(0+256),w
 16272  2F57  00D7               	movwf	(calcCosArray@tmpVal+1)^(0+256)
 16273  2F58  084E               	movf	(?_cos+2)^(0+256),w
 16274  2F59  00D8               	movwf	(calcCosArray@tmpVal+2)^(0+256)
 16275                           
 16276                           ;modulation.c: 23: cosArray[iAngle] = tmpVal;
 16277  2F5A  0859               	movf	calcCosArray@iAngle^(0+256),w
 16278  2F5B  00D2               	movwf	??_calcCosArray^(0+256)
 16279  2F5C  01D3               	clrf	(??_calcCosArray^(0+256)+1)
 16280  2F5D  0852               	movf	??_calcCosArray^(0+256),w
 16281  2F5E  00AE               	movwf	___wmul@multiplier^(0+256)
 16282  2F5F  0853               	movf	(??_calcCosArray+1)^(0+256),w
 16283  2F60  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16284  2F61  3003               	movlw	3
 16285  2F62  00B0               	movwf	___wmul@multiplicand^(0+256)
 16286  2F63  3000               	movlw	0
 16287  2F64  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16288  2F65  31B2  221C  31AE   	fcall	___wmul
 16289  2F68  3082               	movlw	130
 16290  2F69  0022               	movlb	2	; select bank2
 16291  2F6A  00D4               	movwf	(??_calcCosArray+2)^(0+256)
 16292  2F6B  3024               	movlw	36
 16293  2F6C  00D5               	movwf	((??_calcCosArray+2)^(0+256)+1)
 16294  2F6D  082E               	movf	?___wmul^(0+256),w
 16295  2F6E  0754               	addwf	(??_calcCosArray+2)^(0+256),w
 16296  2F6F  0086               	movwf	6
 16297  2F70  082F               	movf	(?___wmul+1)^(0+256),w
 16298  2F71  3D55               	addwfc	(??_calcCosArray+3)^(0+256),w
 16299  2F72  0087               	movwf	7
 16300  2F73  0856               	movf	calcCosArray@tmpVal^(0+256),w
 16301  2F74  3FC0               	movwi [0]fsr1
 16302  2F75  0857               	movf	(calcCosArray@tmpVal+1)^(0+256),w
 16303  2F76  3FC1               	movwi [1]fsr1
 16304  2F77  0858               	movf	(calcCosArray@tmpVal+2)^(0+256),w
 16305  2F78  3FC2               	movwi [2]fsr1
 16306  2F79  3001               	movlw	1
 16307  2F7A  00D2               	movwf	??_calcCosArray^(0+256)
 16308  2F7B  0852               	movf	??_calcCosArray^(0+256),w
 16309  2F7C  07D9               	addwf	calcCosArray@iAngle^(0+256),f
 16310  2F7D  2EFF               	goto	L17
 16311  2F7E                     __end_of_calcCosArray:	
 16312                           
 16313                           	psect	text61
 16314  2E81                     __ptext61:	
 16315 ;; *************** function _cos *****************
 16316 ;; Defined at:
 16317 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\cos.c"
 16318 ;; Parameters:    Size  Location     Type
 16319 ;;  f               3   44[BANK2 ] void 
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;		None
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  3   44[BANK2 ] void 
 16324 ;; Registers used:
 16325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16331 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16332 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16334 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16335 ;;Total ram usage:        6 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    9
 16338 ;; This function calls:
 16339 ;;		___ftadd
 16340 ;;		___ftge
 16341 ;;		_sin
 16342 ;; This function is called by:
 16343 ;;		_calcCosArray
 16344 ;; This function uses a non-reentrant model
 16345 ;;
 16346                           
 16347                           
 16348                           ;psect for function _cos
 16349  2E81                     _cos:	
 16350                           
 16351                           ;incstack = 0
 16352                           ; Regs used in _cos: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16353  2E81  3010               	movlw	16
 16354  2E82  0021               	movlb	1	; select bank1
 16355  2E83  00A0               	movwf	___ftge@ff1^(0+128)
 16356  2E84  3049               	movlw	73
 16357  2E85  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16358  2E86  3040               	movlw	64
 16359  2E87  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16360  2E88  0022               	movlb	2	; select bank2
 16361  2E89  084C               	movf	cos@f^(0+256),w
 16362  2E8A  0021               	movlb	1	; select bank1
 16363  2E8B  00A3               	movwf	___ftge@ff2^(0+128)
 16364  2E8C  0022               	movlb	2	; select bank2
 16365  2E8D  084D               	movf	(cos@f+1)^(0+256),w
 16366  2E8E  0021               	movlb	1	; select bank1
 16367  2E8F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16368  2E90  0022               	movlb	2	; select bank2
 16369  2E91  084E               	movf	(cos@f+2)^(0+256),w
 16370  2E92  0021               	movlb	1	; select bank1
 16371  2E93  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16372  2E94  31B6  26CF  31AE   	fcall	___ftge
 16373  2E97  1803               	btfsc	3,0
 16374  2E98  2ECB               	goto	l7595
 16375  2E99  30CC               	movlw	204
 16376  2E9A  0021               	movlb	1	; select bank1
 16377  2E9B  00C1               	movwf	___ftadd@f1^(0+128)
 16378  2E9C  3096               	movlw	150
 16379  2E9D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16380  2E9E  30C0               	movlw	192
 16381  2E9F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16382  2EA0  0022               	movlb	2	; select bank2
 16383  2EA1  084C               	movf	cos@f^(0+256),w
 16384  2EA2  0021               	movlb	1	; select bank1
 16385  2EA3  00C4               	movwf	___ftadd@f2^(0+128)
 16386  2EA4  0022               	movlb	2	; select bank2
 16387  2EA5  084D               	movf	(cos@f+1)^(0+256),w
 16388  2EA6  0021               	movlb	1	; select bank1
 16389  2EA7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16390  2EA8  0022               	movlb	2	; select bank2
 16391  2EA9  084E               	movf	(cos@f+2)^(0+256),w
 16392  2EAA  0021               	movlb	1	; select bank1
 16393  2EAB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16394  2EAC  3198  200B  31AE   	fcall	___ftadd
 16395  2EAF  0021               	movlb	1	; select bank1
 16396  2EB0  0841               	movf	?___ftadd^(0+128),w
 16397  2EB1  0022               	movlb	2	; select bank2
 16398  2EB2  00CF               	movwf	_cos$3274^(0+256)
 16399  2EB3  0021               	movlb	1	; select bank1
 16400  2EB4  0842               	movf	(?___ftadd+1)^(0+128),w
 16401  2EB5  0022               	movlb	2	; select bank2
 16402  2EB6  00D0               	movwf	(_cos$3274+1)^(0+256)
 16403  2EB7  0021               	movlb	1	; select bank1
 16404  2EB8  0843               	movf	(?___ftadd+2)^(0+128),w
 16405  2EB9  0022               	movlb	2	; select bank2
 16406  2EBA  00D1               	movwf	(_cos$3274+2)^(0+256)
 16407  2EBB  084F               	movf	_cos$3274^(0+256),w
 16408  2EBC  00BE               	movwf	sin@f^(0+256)
 16409  2EBD  0850               	movf	(_cos$3274+1)^(0+256),w
 16410  2EBE  00BF               	movwf	(sin@f+1)^(0+256)
 16411  2EBF  0851               	movf	(_cos$3274+2)^(0+256),w
 16412  2EC0  00C0               	movwf	(sin@f+2)^(0+256)
 16413  2EC1  3194  2454         	fcall	_sin
 16414  2EC3  0022               	movlb	2	; select bank2
 16415  2EC4  083E               	movf	?_sin^(0+256),w
 16416  2EC5  00CC               	movwf	?_cos^(0+256)
 16417  2EC6  083F               	movf	(?_sin+1)^(0+256),w
 16418  2EC7  00CD               	movwf	(?_cos+1)^(0+256)
 16419  2EC8  0840               	movf	(?_sin+2)^(0+256),w
 16420  2EC9  00CE               	movwf	(?_cos+2)^(0+256)
 16421  2ECA  0008               	return
 16422  2ECB                     l7595:	
 16423  2ECB  3010               	movlw	16
 16424  2ECC  0021               	movlb	1	; select bank1
 16425  2ECD  00C1               	movwf	___ftadd@f1^(0+128)
 16426  2ECE  30C9               	movlw	201
 16427  2ECF  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16428  2ED0  303F               	movlw	63
 16429  2ED1  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16430  2ED2  0022               	movlb	2	; select bank2
 16431  2ED3  084C               	movf	cos@f^(0+256),w
 16432  2ED4  0021               	movlb	1	; select bank1
 16433  2ED5  00C4               	movwf	___ftadd@f2^(0+128)
 16434  2ED6  0022               	movlb	2	; select bank2
 16435  2ED7  084D               	movf	(cos@f+1)^(0+256),w
 16436  2ED8  0021               	movlb	1	; select bank1
 16437  2ED9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16438  2EDA  0022               	movlb	2	; select bank2
 16439  2EDB  084E               	movf	(cos@f+2)^(0+256),w
 16440  2EDC  0021               	movlb	1	; select bank1
 16441  2EDD  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16442  2EDE  3198  200B  31AE   	fcall	___ftadd
 16443  2EE1  0021               	movlb	1	; select bank1
 16444  2EE2  0841               	movf	?___ftadd^(0+128),w
 16445  2EE3  0022               	movlb	2	; select bank2
 16446  2EE4  00CF               	movwf	_cos$3274^(0+256)
 16447  2EE5  0021               	movlb	1	; select bank1
 16448  2EE6  0842               	movf	(?___ftadd+1)^(0+128),w
 16449  2EE7  0022               	movlb	2	; select bank2
 16450  2EE8  00D0               	movwf	(_cos$3274+1)^(0+256)
 16451  2EE9  0021               	movlb	1	; select bank1
 16452  2EEA  0843               	movf	(?___ftadd+2)^(0+128),w
 16453  2EEB  0022               	movlb	2	; select bank2
 16454  2EEC  00D1               	movwf	(_cos$3274+2)^(0+256)
 16455  2EED  084F               	movf	_cos$3274^(0+256),w
 16456  2EEE  00BE               	movwf	sin@f^(0+256)
 16457  2EEF  0850               	movf	(_cos$3274+1)^(0+256),w
 16458  2EF0  00BF               	movwf	(sin@f+1)^(0+256)
 16459  2EF1  0851               	movf	(_cos$3274+2)^(0+256),w
 16460  2EF2  00C0               	movwf	(sin@f+2)^(0+256)
 16461  2EF3  3194  2454         	fcall	_sin
 16462  2EF5  0022               	movlb	2	; select bank2
 16463  2EF6  083E               	movf	?_sin^(0+256),w
 16464  2EF7  00CC               	movwf	?_cos^(0+256)
 16465  2EF8  083F               	movf	(?_sin+1)^(0+256),w
 16466  2EF9  00CD               	movwf	(?_cos+1)^(0+256)
 16467  2EFA  0840               	movf	(?_sin+2)^(0+256),w
 16468  2EFB  00CE               	movwf	(?_cos+2)^(0+256)
 16469  2EFC  0008               	return
 16470  2EFD                     __end_of_cos:	
 16471                           
 16472                           	psect	text62
 16473  1454                     __ptext62:	
 16474 ;; *************** function _sin *****************
 16475 ;; Defined at:
 16476 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 16477 ;; Parameters:    Size  Location     Type
 16478 ;;  f               3   30[BANK2 ] void 
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;  x2              3   40[BANK2 ] void 
 16481 ;;  y               3   34[BANK2 ] void 
 16482 ;;  sgn             1   43[BANK2 ] unsigned char 
 16483 ;; Return value:  Size  Location     Type
 16484 ;;                  3   30[BANK2 ] unsigned char 
 16485 ;; Registers used:
 16486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16487 ;; Tracked objects:
 16488 ;;		On entry : 0/0
 16489 ;;		On exit  : 0/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16492 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16493 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16494 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16495 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16496 ;;Total ram usage:       14 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; Hardware stack levels required when called:    8
 16499 ;; This function calls:
 16500 ;;		___ftadd
 16501 ;;		___ftdiv
 16502 ;;		___ftge
 16503 ;;		___ftmul
 16504 ;;		___ftneg
 16505 ;;		___ftsub
 16506 ;;		_eval_poly
 16507 ;;		_floor
 16508 ;; This function is called by:
 16509 ;;		_cos
 16510 ;; This function uses a non-reentrant model
 16511 ;;
 16512                           
 16513                           
 16514                           ;psect for function _sin
 16515  1454                     _sin:	
 16516                           
 16517                           ;incstack = 0
 16518                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16519  1454  0022               	movlb	2	; select bank2
 16520  1455  01CB               	clrf	sin@sgn^(0+256)
 16521  1456  083E               	movf	sin@f^(0+256),w
 16522  1457  0021               	movlb	1	; select bank1
 16523  1458  00A0               	movwf	___ftge@ff1^(0+128)
 16524  1459  0022               	movlb	2	; select bank2
 16525  145A  083F               	movf	(sin@f+1)^(0+256),w
 16526  145B  0021               	movlb	1	; select bank1
 16527  145C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16528  145D  0022               	movlb	2	; select bank2
 16529  145E  0840               	movf	(sin@f+2)^(0+256),w
 16530  145F  0021               	movlb	1	; select bank1
 16531  1460  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16532  1461  3000               	movlw	0
 16533  1462  00A3               	movwf	___ftge@ff2^(0+128)
 16534  1463  3000               	movlw	0
 16535  1464  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16536  1465  3000               	movlw	0
 16537  1466  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16538  1467  31B6  26CF  3194   	fcall	___ftge
 16539  146A  1803               	btfsc	3,0
 16540  146B  2C89               	goto	l7225
 16541  146C  0022               	movlb	2	; select bank2
 16542  146D  083E               	movf	sin@f^(0+256),w
 16543  146E  0021               	movlb	1	; select bank1
 16544  146F  00BE               	movwf	___ftneg@f1^(0+128)
 16545  1470  0022               	movlb	2	; select bank2
 16546  1471  083F               	movf	(sin@f+1)^(0+256),w
 16547  1472  0021               	movlb	1	; select bank1
 16548  1473  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 16549  1474  0022               	movlb	2	; select bank2
 16550  1475  0840               	movf	(sin@f+2)^(0+256),w
 16551  1476  0021               	movlb	1	; select bank1
 16552  1477  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 16553  1478  31BF  27C8  3194   	fcall	___ftneg
 16554  147B  0021               	movlb	1	; select bank1
 16555  147C  083E               	movf	?___ftneg^(0+128),w
 16556  147D  0022               	movlb	2	; select bank2
 16557  147E  00BE               	movwf	sin@f^(0+256)
 16558  147F  0021               	movlb	1	; select bank1
 16559  1480  083F               	movf	(?___ftneg+1)^(0+128),w
 16560  1481  0022               	movlb	2	; select bank2
 16561  1482  00BF               	movwf	(sin@f+1)^(0+256)
 16562  1483  0021               	movlb	1	; select bank1
 16563  1484  0840               	movf	(?___ftneg+2)^(0+128),w
 16564  1485  0022               	movlb	2	; select bank2
 16565  1486  00C0               	movwf	(sin@f+2)^(0+256)
 16566  1487  01CB               	clrf	sin@sgn^(0+256)
 16567  1488  0ACB               	incf	sin@sgn^(0+256),f
 16568  1489                     l7225:	
 16569  1489  30FA               	movlw	250
 16570  148A  0021               	movlb	1	; select bank1
 16571  148B  00AE               	movwf	___ftmul@f1^(0+128)
 16572  148C  3022               	movlw	34
 16573  148D  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16574  148E  303E               	movlw	62
 16575  148F  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16576  1490  0022               	movlb	2	; select bank2
 16577  1491  083E               	movf	sin@f^(0+256),w
 16578  1492  0021               	movlb	1	; select bank1
 16579  1493  00B1               	movwf	___ftmul@f2^(0+128)
 16580  1494  0022               	movlb	2	; select bank2
 16581  1495  083F               	movf	(sin@f+1)^(0+256),w
 16582  1496  0021               	movlb	1	; select bank1
 16583  1497  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16584  1498  0022               	movlb	2	; select bank2
 16585  1499  0840               	movf	(sin@f+2)^(0+256),w
 16586  149A  0021               	movlb	1	; select bank1
 16587  149B  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16588  149C  31A5  2590  3194   	fcall	___ftmul
 16589  149F  0021               	movlb	1	; select bank1
 16590  14A0  082E               	movf	?___ftmul^(0+128),w
 16591  14A1  0022               	movlb	2	; select bank2
 16592  14A2  00BE               	movwf	sin@f^(0+256)
 16593  14A3  0021               	movlb	1	; select bank1
 16594  14A4  082F               	movf	(?___ftmul+1)^(0+128),w
 16595  14A5  0022               	movlb	2	; select bank2
 16596  14A6  00BF               	movwf	(sin@f+1)^(0+256)
 16597  14A7  0021               	movlb	1	; select bank1
 16598  14A8  0830               	movf	(?___ftmul+2)^(0+128),w
 16599  14A9  0022               	movlb	2	; select bank2
 16600  14AA  00C0               	movwf	(sin@f+2)^(0+256)
 16601  14AB  083E               	movf	sin@f^(0+256),w
 16602  14AC  00AE               	movwf	floor@x^(0+256)
 16603  14AD  083F               	movf	(sin@f+1)^(0+256),w
 16604  14AE  00AF               	movwf	(floor@x+1)^(0+256)
 16605  14AF  0840               	movf	(sin@f+2)^(0+256),w
 16606  14B0  00B0               	movwf	(floor@x+2)^(0+256)
 16607  14B1  31A4  24DD  3194   	fcall	_floor
 16608  14B4  0022               	movlb	2	; select bank2
 16609  14B5  082E               	movf	?_floor^(0+256),w
 16610  14B6  00B7               	movwf	___ftsub@f2^(0+256)
 16611  14B7  082F               	movf	(?_floor+1)^(0+256),w
 16612  14B8  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 16613  14B9  0830               	movf	(?_floor+2)^(0+256),w
 16614  14BA  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 16615  14BB  083E               	movf	sin@f^(0+256),w
 16616  14BC  00BA               	movwf	___ftsub@f1^(0+256)
 16617  14BD  083F               	movf	(sin@f+1)^(0+256),w
 16618  14BE  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 16619  14BF  0840               	movf	(sin@f+2)^(0+256),w
 16620  14C0  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 16621  14C1  31B4  242E  3194   	fcall	___ftsub
 16622  14C4  0022               	movlb	2	; select bank2
 16623  14C5  0837               	movf	?___ftsub^(0+256),w
 16624  14C6  00BE               	movwf	sin@f^(0+256)
 16625  14C7  0838               	movf	(?___ftsub+1)^(0+256),w
 16626  14C8  00BF               	movwf	(sin@f+1)^(0+256)
 16627  14C9  0839               	movf	(?___ftsub+2)^(0+256),w
 16628  14CA  00C0               	movwf	(sin@f+2)^(0+256)
 16629  14CB  3000               	movlw	0
 16630  14CC  0021               	movlb	1	; select bank1
 16631  14CD  00AE               	movwf	___ftmul@f1^(0+128)
 16632  14CE  3080               	movlw	128
 16633  14CF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16634  14D0  3040               	movlw	64
 16635  14D1  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16636  14D2  0022               	movlb	2	; select bank2
 16637  14D3  083E               	movf	sin@f^(0+256),w
 16638  14D4  0021               	movlb	1	; select bank1
 16639  14D5  00B1               	movwf	___ftmul@f2^(0+128)
 16640  14D6  0022               	movlb	2	; select bank2
 16641  14D7  083F               	movf	(sin@f+1)^(0+256),w
 16642  14D8  0021               	movlb	1	; select bank1
 16643  14D9  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16644  14DA  0022               	movlb	2	; select bank2
 16645  14DB  0840               	movf	(sin@f+2)^(0+256),w
 16646  14DC  0021               	movlb	1	; select bank1
 16647  14DD  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16648  14DE  31A5  2590  3194   	fcall	___ftmul
 16649  14E1  0021               	movlb	1	; select bank1
 16650  14E2  082E               	movf	?___ftmul^(0+128),w
 16651  14E3  0022               	movlb	2	; select bank2
 16652  14E4  00BE               	movwf	sin@f^(0+256)
 16653  14E5  0021               	movlb	1	; select bank1
 16654  14E6  082F               	movf	(?___ftmul+1)^(0+128),w
 16655  14E7  0022               	movlb	2	; select bank2
 16656  14E8  00BF               	movwf	(sin@f+1)^(0+256)
 16657  14E9  0021               	movlb	1	; select bank1
 16658  14EA  0830               	movf	(?___ftmul+2)^(0+128),w
 16659  14EB  0022               	movlb	2	; select bank2
 16660  14EC  00C0               	movwf	(sin@f+2)^(0+256)
 16661  14ED  3000               	movlw	0
 16662  14EE  0021               	movlb	1	; select bank1
 16663  14EF  00A0               	movwf	___ftge@ff1^(0+128)
 16664  14F0  3000               	movlw	0
 16665  14F1  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16666  14F2  3040               	movlw	64
 16667  14F3  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16668  14F4  0022               	movlb	2	; select bank2
 16669  14F5  083E               	movf	sin@f^(0+256),w
 16670  14F6  0021               	movlb	1	; select bank1
 16671  14F7  00A3               	movwf	___ftge@ff2^(0+128)
 16672  14F8  0022               	movlb	2	; select bank2
 16673  14F9  083F               	movf	(sin@f+1)^(0+256),w
 16674  14FA  0021               	movlb	1	; select bank1
 16675  14FB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16676  14FC  0022               	movlb	2	; select bank2
 16677  14FD  0840               	movf	(sin@f+2)^(0+256),w
 16678  14FE  0021               	movlb	1	; select bank1
 16679  14FF  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16680  1500  31B6  26CF  3194   	fcall	___ftge
 16681  1503  1803               	btfsc	3,0
 16682  1504  2D25               	goto	l7237
 16683  1505  3000               	movlw	0
 16684  1506  0022               	movlb	2	; select bank2
 16685  1507  00B7               	movwf	___ftsub@f2^(0+256)
 16686  1508  3000               	movlw	0
 16687  1509  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 16688  150A  3040               	movlw	64
 16689  150B  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 16690  150C  083E               	movf	sin@f^(0+256),w
 16691  150D  00BA               	movwf	___ftsub@f1^(0+256)
 16692  150E  083F               	movf	(sin@f+1)^(0+256),w
 16693  150F  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 16694  1510  0840               	movf	(sin@f+2)^(0+256),w
 16695  1511  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 16696  1512  31B4  242E  3194   	fcall	___ftsub
 16697  1515  0022               	movlb	2	; select bank2
 16698  1516  0837               	movf	?___ftsub^(0+256),w
 16699  1517  00BE               	movwf	sin@f^(0+256)
 16700  1518  0838               	movf	(?___ftsub+1)^(0+256),w
 16701  1519  00BF               	movwf	(sin@f+1)^(0+256)
 16702  151A  0839               	movf	(?___ftsub+2)^(0+256),w
 16703  151B  00C0               	movwf	(sin@f+2)^(0+256)
 16704  151C  084B               	movf	sin@sgn^(0+256),w
 16705  151D  1D03               	btfss	3,2
 16706  151E  2D21               	goto	u6540
 16707  151F  3001               	movlw	1
 16708  1520  2D22               	goto	u6550
 16709  1521                     u6540:	
 16710  1521  3000               	movlw	0
 16711  1522                     u6550:	
 16712  1522  00C1               	movwf	??_sin^(0+256)
 16713  1523  0841               	movf	??_sin^(0+256),w
 16714  1524  00CB               	movwf	sin@sgn^(0+256)
 16715  1525                     l7237:	
 16716  1525  3000               	movlw	0
 16717  1526  0021               	movlb	1	; select bank1
 16718  1527  00A0               	movwf	___ftge@ff1^(0+128)
 16719  1528  3080               	movlw	128
 16720  1529  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16721  152A  303F               	movlw	63
 16722  152B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16723  152C  0022               	movlb	2	; select bank2
 16724  152D  083E               	movf	sin@f^(0+256),w
 16725  152E  0021               	movlb	1	; select bank1
 16726  152F  00A3               	movwf	___ftge@ff2^(0+128)
 16727  1530  0022               	movlb	2	; select bank2
 16728  1531  083F               	movf	(sin@f+1)^(0+256),w
 16729  1532  0021               	movlb	1	; select bank1
 16730  1533  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16731  1534  0022               	movlb	2	; select bank2
 16732  1535  0840               	movf	(sin@f+2)^(0+256),w
 16733  1536  0021               	movlb	1	; select bank1
 16734  1537  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16735  1538  31B6  26CF  3194   	fcall	___ftge
 16736  153B  1803               	btfsc	3,0
 16737  153C  2D69               	goto	l2837
 16738  153D  3000               	movlw	0
 16739  153E  0021               	movlb	1	; select bank1
 16740  153F  00C1               	movwf	___ftadd@f1^(0+128)
 16741  1540  3000               	movlw	0
 16742  1541  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16743  1542  3040               	movlw	64
 16744  1543  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16745  1544  0022               	movlb	2	; select bank2
 16746  1545  083E               	movf	sin@f^(0+256),w
 16747  1546  0021               	movlb	1	; select bank1
 16748  1547  00BE               	movwf	___ftneg@f1^(0+128)
 16749  1548  0022               	movlb	2	; select bank2
 16750  1549  083F               	movf	(sin@f+1)^(0+256),w
 16751  154A  0021               	movlb	1	; select bank1
 16752  154B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 16753  154C  0022               	movlb	2	; select bank2
 16754  154D  0840               	movf	(sin@f+2)^(0+256),w
 16755  154E  0021               	movlb	1	; select bank1
 16756  154F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 16757  1550  31BF  27C8  3194   	fcall	___ftneg
 16758  1553  0021               	movlb	1	; select bank1
 16759  1554  083E               	movf	?___ftneg^(0+128),w
 16760  1555  00C4               	movwf	___ftadd@f2^(0+128)
 16761  1556  083F               	movf	(?___ftneg+1)^(0+128),w
 16762  1557  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16763  1558  0840               	movf	(?___ftneg+2)^(0+128),w
 16764  1559  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16765  155A  3198  200B  3194   	fcall	___ftadd
 16766  155D  0021               	movlb	1	; select bank1
 16767  155E  0841               	movf	?___ftadd^(0+128),w
 16768  155F  0022               	movlb	2	; select bank2
 16769  1560  00BE               	movwf	sin@f^(0+256)
 16770  1561  0021               	movlb	1	; select bank1
 16771  1562  0842               	movf	(?___ftadd+1)^(0+128),w
 16772  1563  0022               	movlb	2	; select bank2
 16773  1564  00BF               	movwf	(sin@f+1)^(0+256)
 16774  1565  0021               	movlb	1	; select bank1
 16775  1566  0843               	movf	(?___ftadd+2)^(0+128),w
 16776  1567  0022               	movlb	2	; select bank2
 16777  1568  00C0               	movwf	(sin@f+2)^(0+256)
 16778  1569                     l2837:	
 16779  1569  0022               	movlb	2	; select bank2
 16780  156A  083E               	movf	sin@f^(0+256),w
 16781  156B  0021               	movlb	1	; select bank1
 16782  156C  00AE               	movwf	___ftmul@f1^(0+128)
 16783  156D  0022               	movlb	2	; select bank2
 16784  156E  083F               	movf	(sin@f+1)^(0+256),w
 16785  156F  0021               	movlb	1	; select bank1
 16786  1570  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16787  1571  0022               	movlb	2	; select bank2
 16788  1572  0840               	movf	(sin@f+2)^(0+256),w
 16789  1573  0021               	movlb	1	; select bank1
 16790  1574  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16791  1575  0022               	movlb	2	; select bank2
 16792  1576  083E               	movf	sin@f^(0+256),w
 16793  1577  0021               	movlb	1	; select bank1
 16794  1578  00B1               	movwf	___ftmul@f2^(0+128)
 16795  1579  0022               	movlb	2	; select bank2
 16796  157A  083F               	movf	(sin@f+1)^(0+256),w
 16797  157B  0021               	movlb	1	; select bank1
 16798  157C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16799  157D  0022               	movlb	2	; select bank2
 16800  157E  0840               	movf	(sin@f+2)^(0+256),w
 16801  157F  0021               	movlb	1	; select bank1
 16802  1580  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16803  1581  31A5  2590  3194   	fcall	___ftmul
 16804  1584  0021               	movlb	1	; select bank1
 16805  1585  082E               	movf	?___ftmul^(0+128),w
 16806  1586  0022               	movlb	2	; select bank2
 16807  1587  00C8               	movwf	sin@x2^(0+256)
 16808  1588  0021               	movlb	1	; select bank1
 16809  1589  082F               	movf	(?___ftmul+1)^(0+128),w
 16810  158A  0022               	movlb	2	; select bank2
 16811  158B  00C9               	movwf	(sin@x2+1)^(0+256)
 16812  158C  0021               	movlb	1	; select bank1
 16813  158D  0830               	movf	(?___ftmul+2)^(0+128),w
 16814  158E  0022               	movlb	2	; select bank2
 16815  158F  00CA               	movwf	(sin@x2+2)^(0+256)
 16816  1590  0848               	movf	sin@x2^(0+256),w
 16817  1591  00B4               	movwf	eval_poly@x^(0+256)
 16818  1592  0849               	movf	(sin@x2+1)^(0+256),w
 16819  1593  00B5               	movwf	(eval_poly@x+1)^(0+256)
 16820  1594  084A               	movf	(sin@x2+2)^(0+256),w
 16821  1595  00B6               	movwf	(eval_poly@x+2)^(0+256)
 16822  1596  3048               	movlw	low (sin@coeff_b| (0+32768))
 16823  1597  00B7               	movwf	eval_poly@d^(0+256)
 16824  1598  30B0               	movlw	high (sin@coeff_b| (0+32768))
 16825  1599  00B8               	movwf	(eval_poly@d^(0+256)+1)
 16826  159A  3003               	movlw	3
 16827  159B  00B9               	movwf	eval_poly@n^(0+256)
 16828  159C  3000               	movlw	0
 16829  159D  00BA               	movwf	(eval_poly@n^(0+256)+1)
 16830  159E  31AE  260F  3194   	fcall	_eval_poly
 16831  15A1  0022               	movlb	2	; select bank2
 16832  15A2  0834               	movf	?_eval_poly^(0+256),w
 16833  15A3  00C2               	movwf	sin@y^(0+256)
 16834  15A4  0835               	movf	(?_eval_poly+1)^(0+256),w
 16835  15A5  00C3               	movwf	(sin@y+1)^(0+256)
 16836  15A6  0836               	movf	(?_eval_poly+2)^(0+256),w
 16837  15A7  00C4               	movwf	(sin@y+2)^(0+256)
 16838  15A8  3004               	movlw	4
 16839  15A9  00B9               	movwf	eval_poly@n^(0+256)
 16840  15AA  3000               	movlw	0
 16841  15AB  00BA               	movwf	(eval_poly@n^(0+256)+1)
 16842  15AC  3039               	movlw	low (sin@coeff_a| (0+32768))
 16843  15AD  00B7               	movwf	eval_poly@d^(0+256)
 16844  15AE  30B0               	movlw	high (sin@coeff_a| (0+32768))
 16845  15AF  00B8               	movwf	(eval_poly@d^(0+256)+1)
 16846  15B0  0848               	movf	sin@x2^(0+256),w
 16847  15B1  00B4               	movwf	eval_poly@x^(0+256)
 16848  15B2  0849               	movf	(sin@x2+1)^(0+256),w
 16849  15B3  00B5               	movwf	(eval_poly@x+1)^(0+256)
 16850  15B4  084A               	movf	(sin@x2+2)^(0+256),w
 16851  15B5  00B6               	movwf	(eval_poly@x+2)^(0+256)
 16852  15B6  31AE  260F  3194   	fcall	_eval_poly
 16853  15B9  0022               	movlb	2	; select bank2
 16854  15BA  0834               	movf	?_eval_poly^(0+256),w
 16855  15BB  0021               	movlb	1	; select bank1
 16856  15BC  00D1               	movwf	___ftdiv@f1^(0+128)
 16857  15BD  0022               	movlb	2	; select bank2
 16858  15BE  0835               	movf	(?_eval_poly+1)^(0+256),w
 16859  15BF  0021               	movlb	1	; select bank1
 16860  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 16861  15C1  0022               	movlb	2	; select bank2
 16862  15C2  0836               	movf	(?_eval_poly+2)^(0+256),w
 16863  15C3  0021               	movlb	1	; select bank1
 16864  15C4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 16865  15C5  0022               	movlb	2	; select bank2
 16866  15C6  0842               	movf	sin@y^(0+256),w
 16867  15C7  0021               	movlb	1	; select bank1
 16868  15C8  00CE               	movwf	___ftdiv@f2^(0+128)
 16869  15C9  0022               	movlb	2	; select bank2
 16870  15CA  0843               	movf	(sin@y+1)^(0+256),w
 16871  15CB  0021               	movlb	1	; select bank1
 16872  15CC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 16873  15CD  0022               	movlb	2	; select bank2
 16874  15CE  0844               	movf	(sin@y+2)^(0+256),w
 16875  15CF  0021               	movlb	1	; select bank1
 16876  15D0  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 16877  15D1  31A4  2434  3194   	fcall	___ftdiv
 16878  15D4  0021               	movlb	1	; select bank1
 16879  15D5  084E               	movf	?___ftdiv^(0+128),w
 16880  15D6  0022               	movlb	2	; select bank2
 16881  15D7  00C5               	movwf	_sin$3277^(0+256)
 16882  15D8  0021               	movlb	1	; select bank1
 16883  15D9  084F               	movf	(?___ftdiv+1)^(0+128),w
 16884  15DA  0022               	movlb	2	; select bank2
 16885  15DB  00C6               	movwf	(_sin$3277+1)^(0+256)
 16886  15DC  0021               	movlb	1	; select bank1
 16887  15DD  0850               	movf	(?___ftdiv+2)^(0+128),w
 16888  15DE  0022               	movlb	2	; select bank2
 16889  15DF  00C7               	movwf	(_sin$3277+2)^(0+256)
 16890  15E0  0845               	movf	_sin$3277^(0+256),w
 16891  15E1  0021               	movlb	1	; select bank1
 16892  15E2  00AE               	movwf	___ftmul@f1^(0+128)
 16893  15E3  0022               	movlb	2	; select bank2
 16894  15E4  0846               	movf	(_sin$3277+1)^(0+256),w
 16895  15E5  0021               	movlb	1	; select bank1
 16896  15E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16897  15E7  0022               	movlb	2	; select bank2
 16898  15E8  0847               	movf	(_sin$3277+2)^(0+256),w
 16899  15E9  0021               	movlb	1	; select bank1
 16900  15EA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16901  15EB  0022               	movlb	2	; select bank2
 16902  15EC  083E               	movf	sin@f^(0+256),w
 16903  15ED  0021               	movlb	1	; select bank1
 16904  15EE  00B1               	movwf	___ftmul@f2^(0+128)
 16905  15EF  0022               	movlb	2	; select bank2
 16906  15F0  083F               	movf	(sin@f+1)^(0+256),w
 16907  15F1  0021               	movlb	1	; select bank1
 16908  15F2  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16909  15F3  0022               	movlb	2	; select bank2
 16910  15F4  0840               	movf	(sin@f+2)^(0+256),w
 16911  15F5  0021               	movlb	1	; select bank1
 16912  15F6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16913  15F7  31A5  2590  3194   	fcall	___ftmul
 16914  15FA  0021               	movlb	1	; select bank1
 16915  15FB  082E               	movf	?___ftmul^(0+128),w
 16916  15FC  0022               	movlb	2	; select bank2
 16917  15FD  00BE               	movwf	sin@f^(0+256)
 16918  15FE  0021               	movlb	1	; select bank1
 16919  15FF  082F               	movf	(?___ftmul+1)^(0+128),w
 16920  1600  0022               	movlb	2	; select bank2
 16921  1601  00BF               	movwf	(sin@f+1)^(0+256)
 16922  1602  0021               	movlb	1	; select bank1
 16923  1603  0830               	movf	(?___ftmul+2)^(0+128),w
 16924  1604  0022               	movlb	2	; select bank2
 16925  1605  00C0               	movwf	(sin@f+2)^(0+256)
 16926  1606  084B               	movf	sin@sgn^(0+256),w
 16927  1607  1903               	btfsc	3,2
 16928  1608  0008               	return
 16929  1609  083E               	movf	sin@f^(0+256),w
 16930  160A  0021               	movlb	1	; select bank1
 16931  160B  00BE               	movwf	___ftneg@f1^(0+128)
 16932  160C  0022               	movlb	2	; select bank2
 16933  160D  083F               	movf	(sin@f+1)^(0+256),w
 16934  160E  0021               	movlb	1	; select bank1
 16935  160F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 16936  1610  0022               	movlb	2	; select bank2
 16937  1611  0840               	movf	(sin@f+2)^(0+256),w
 16938  1612  0021               	movlb	1	; select bank1
 16939  1613  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 16940  1614  31BF  27C8         	fcall	___ftneg
 16941  1616  0021               	movlb	1	; select bank1
 16942  1617  083E               	movf	?___ftneg^(0+128),w
 16943  1618  0022               	movlb	2	; select bank2
 16944  1619  00BE               	movwf	?_sin^(0+256)
 16945  161A  0021               	movlb	1	; select bank1
 16946  161B  083F               	movf	(?___ftneg+1)^(0+128),w
 16947  161C  0022               	movlb	2	; select bank2
 16948  161D  00BF               	movwf	(?_sin+1)^(0+256)
 16949  161E  0021               	movlb	1	; select bank1
 16950  161F  0840               	movf	(?___ftneg+2)^(0+128),w
 16951  1620  0022               	movlb	2	; select bank2
 16952  1621  00C0               	movwf	(?_sin+2)^(0+256)
 16953  1622  0008               	return
 16954  1623                     __end_of_sin:	
 16955                           
 16956                           	psect	text63
 16957  24DD                     __ptext63:	
 16958 ;; *************** function _floor *****************
 16959 ;; Defined at:
 16960 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 16961 ;; Parameters:    Size  Location     Type
 16962 ;;  x               3   14[BANK2 ] unsigned char 
 16963 ;; Auto vars:     Size  Location     Type
 16964 ;;  i               3   18[BANK2 ] unsigned char 
 16965 ;;  expon           2   21[BANK2 ] int 
 16966 ;; Return value:  Size  Location     Type
 16967 ;;                  3   14[BANK2 ] int 
 16968 ;; Registers used:
 16969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16970 ;; Tracked objects:
 16971 ;;		On entry : 0/0
 16972 ;;		On exit  : 0/0
 16973 ;;		Unchanged: 0/0
 16974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16975 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16976 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16977 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16978 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16979 ;;Total ram usage:        9 bytes
 16980 ;; Hardware stack levels used:    1
 16981 ;; Hardware stack levels required when called:    7
 16982 ;; This function calls:
 16983 ;;		___altoft
 16984 ;;		___ftadd
 16985 ;;		___ftge
 16986 ;;		___fttol
 16987 ;;		_frexp
 16988 ;; This function is called by:
 16989 ;;		_sin
 16990 ;;		_exp
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           
 16995                           ;psect for function _floor
 16996  24DD                     _floor:	
 16997                           
 16998                           ;incstack = 0
 16999                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17000  24DD  0022               	movlb	2	; select bank2
 17001  24DE  082E               	movf	floor@x^(0+256),w
 17002  24DF  0021               	movlb	1	; select bank1
 17003  24E0  00A0               	movwf	frexp@value^(0+128)
 17004  24E1  0022               	movlb	2	; select bank2
 17005  24E2  082F               	movf	(floor@x+1)^(0+256),w
 17006  24E3  0021               	movlb	1	; select bank1
 17007  24E4  00A1               	movwf	(frexp@value+1)^(0+128)
 17008  24E5  0022               	movlb	2	; select bank2
 17009  24E6  0830               	movf	(floor@x+2)^(0+256),w
 17010  24E7  0021               	movlb	1	; select bank1
 17011  24E8  00A2               	movwf	(frexp@value+2)^(0+128)
 17012  24E9  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 17013  24EA  0022               	movlb	2	; select bank2
 17014  24EB  00B1               	movwf	??_floor^(0+256)
 17015  24EC  0831               	movf	??_floor^(0+256),w
 17016  24ED  0021               	movlb	1	; select bank1
 17017  24EE  00A3               	movwf	frexp@eptr^(0+128)
 17018  24EF  31A8  2004  31A4   	fcall	_frexp
 17019  24F2  0022               	movlb	2	; select bank2
 17020  24F3  1FB6               	btfss	(floor@expon+1)^(0+256),7
 17021  24F4  2D1B               	goto	l6761
 17022  24F5  082E               	movf	floor@x^(0+256),w
 17023  24F6  0021               	movlb	1	; select bank1
 17024  24F7  00A0               	movwf	___ftge@ff1^(0+128)
 17025  24F8  0022               	movlb	2	; select bank2
 17026  24F9  082F               	movf	(floor@x+1)^(0+256),w
 17027  24FA  0021               	movlb	1	; select bank1
 17028  24FB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 17029  24FC  0022               	movlb	2	; select bank2
 17030  24FD  0830               	movf	(floor@x+2)^(0+256),w
 17031  24FE  0021               	movlb	1	; select bank1
 17032  24FF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 17033  2500  3000               	movlw	0
 17034  2501  00A3               	movwf	___ftge@ff2^(0+128)
 17035  2502  3000               	movlw	0
 17036  2503  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 17037  2504  3000               	movlw	0
 17038  2505  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 17039  2506  31B6  26CF  31A4   	fcall	___ftge
 17040  2509  1803               	btfsc	3,0
 17041  250A  2D13               	goto	l6757
 17042  250B  3000               	movlw	0
 17043  250C  0022               	movlb	2	; select bank2
 17044  250D  00AE               	movwf	?_floor^(0+256)
 17045  250E  3080               	movlw	128
 17046  250F  00AF               	movwf	(?_floor+1)^(0+256)
 17047  2510  30BF               	movlw	191
 17048  2511  00B0               	movwf	(?_floor+2)^(0+256)
 17049  2512  0008               	return
 17050  2513                     l6757:	
 17051  2513  3000               	movlw	0
 17052  2514  0022               	movlb	2	; select bank2
 17053  2515  00AE               	movwf	?_floor^(0+256)
 17054  2516  3000               	movlw	0
 17055  2517  00AF               	movwf	(?_floor+1)^(0+256)
 17056  2518  3000               	movlw	0
 17057  2519  00B0               	movwf	(?_floor+2)^(0+256)
 17058  251A  0008               	return
 17059  251B                     l6761:	
 17060  251B  3000               	movlw	0
 17061  251C  0236               	subwf	(floor@expon+1)^(0+256),w
 17062  251D  3015               	movlw	21
 17063  251E  1903               	skipnz
 17064  251F  0235               	subwf	floor@expon^(0+256),w
 17065  2520  1803               	btfsc	3,0
 17066  2521  0008               	return
 17067  2522  082E               	movf	floor@x^(0+256),w
 17068  2523  00A0               	movwf	___fttol@f1^(0+256)
 17069  2524  082F               	movf	(floor@x+1)^(0+256),w
 17070  2525  00A1               	movwf	(___fttol@f1+1)^(0+256)
 17071  2526  0830               	movf	(floor@x+2)^(0+256),w
 17072  2527  00A2               	movwf	(___fttol@f1+2)^(0+256)
 17073  2528  31A1  2164  31A4   	fcall	___fttol
 17074  252B  0022               	movlb	2	; select bank2
 17075  252C  0823               	movf	(?___fttol+3)^(0+256),w
 17076  252D  0021               	movlb	1	; select bank1
 17077  252E  00AB               	movwf	(___altoft@c+3)^(0+128)
 17078  252F  0022               	movlb	2	; select bank2
 17079  2530  0822               	movf	(?___fttol+2)^(0+256),w
 17080  2531  0021               	movlb	1	; select bank1
 17081  2532  00AA               	movwf	(___altoft@c+2)^(0+128)
 17082  2533  0022               	movlb	2	; select bank2
 17083  2534  0821               	movf	(?___fttol+1)^(0+256),w
 17084  2535  0021               	movlb	1	; select bank1
 17085  2536  00A9               	movwf	(___altoft@c+1)^(0+128)
 17086  2537  0022               	movlb	2	; select bank2
 17087  2538  0820               	movf	?___fttol^(0+256),w
 17088  2539  0021               	movlb	1	; select bank1
 17089  253A  00A8               	movwf	___altoft@c^(0+128)
 17090  253B  31B7  2748  31A4   	fcall	___altoft
 17091  253E  0021               	movlb	1	; select bank1
 17092  253F  0828               	movf	?___altoft^(0+128),w
 17093  2540  0022               	movlb	2	; select bank2
 17094  2541  00B2               	movwf	floor@i^(0+256)
 17095  2542  0021               	movlb	1	; select bank1
 17096  2543  0829               	movf	(?___altoft+1)^(0+128),w
 17097  2544  0022               	movlb	2	; select bank2
 17098  2545  00B3               	movwf	(floor@i+1)^(0+256)
 17099  2546  0021               	movlb	1	; select bank1
 17100  2547  082A               	movf	(?___altoft+2)^(0+128),w
 17101  2548  0022               	movlb	2	; select bank2
 17102  2549  00B4               	movwf	(floor@i+2)^(0+256)
 17103  254A  082E               	movf	floor@x^(0+256),w
 17104  254B  0021               	movlb	1	; select bank1
 17105  254C  00A0               	movwf	___ftge@ff1^(0+128)
 17106  254D  0022               	movlb	2	; select bank2
 17107  254E  082F               	movf	(floor@x+1)^(0+256),w
 17108  254F  0021               	movlb	1	; select bank1
 17109  2550  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 17110  2551  0022               	movlb	2	; select bank2
 17111  2552  0830               	movf	(floor@x+2)^(0+256),w
 17112  2553  0021               	movlb	1	; select bank1
 17113  2554  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 17114  2555  0022               	movlb	2	; select bank2
 17115  2556  0832               	movf	floor@i^(0+256),w
 17116  2557  0021               	movlb	1	; select bank1
 17117  2558  00A3               	movwf	___ftge@ff2^(0+128)
 17118  2559  0022               	movlb	2	; select bank2
 17119  255A  0833               	movf	(floor@i+1)^(0+256),w
 17120  255B  0021               	movlb	1	; select bank1
 17121  255C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 17122  255D  0022               	movlb	2	; select bank2
 17123  255E  0834               	movf	(floor@i+2)^(0+256),w
 17124  255F  0021               	movlb	1	; select bank1
 17125  2560  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 17126  2561  31B6  26CF  31A4   	fcall	___ftge
 17127  2564  1803               	btfsc	3,0
 17128  2565  2D88               	goto	l6771
 17129  2566  3000               	movlw	0
 17130  2567  0021               	movlb	1	; select bank1
 17131  2568  00C1               	movwf	___ftadd@f1^(0+128)
 17132  2569  3080               	movlw	128
 17133  256A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17134  256B  30BF               	movlw	191
 17135  256C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17136  256D  0022               	movlb	2	; select bank2
 17137  256E  0832               	movf	floor@i^(0+256),w
 17138  256F  0021               	movlb	1	; select bank1
 17139  2570  00C4               	movwf	___ftadd@f2^(0+128)
 17140  2571  0022               	movlb	2	; select bank2
 17141  2572  0833               	movf	(floor@i+1)^(0+256),w
 17142  2573  0021               	movlb	1	; select bank1
 17143  2574  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17144  2575  0022               	movlb	2	; select bank2
 17145  2576  0834               	movf	(floor@i+2)^(0+256),w
 17146  2577  0021               	movlb	1	; select bank1
 17147  2578  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17148  2579  3198  200B         	fcall	___ftadd
 17149  257B  0021               	movlb	1	; select bank1
 17150  257C  0841               	movf	?___ftadd^(0+128),w
 17151  257D  0022               	movlb	2	; select bank2
 17152  257E  00AE               	movwf	?_floor^(0+256)
 17153  257F  0021               	movlb	1	; select bank1
 17154  2580  0842               	movf	(?___ftadd+1)^(0+128),w
 17155  2581  0022               	movlb	2	; select bank2
 17156  2582  00AF               	movwf	(?_floor+1)^(0+256)
 17157  2583  0021               	movlb	1	; select bank1
 17158  2584  0843               	movf	(?___ftadd+2)^(0+128),w
 17159  2585  0022               	movlb	2	; select bank2
 17160  2586  00B0               	movwf	(?_floor+2)^(0+256)
 17161  2587  0008               	return
 17162  2588                     l6771:	
 17163  2588  0022               	movlb	2	; select bank2
 17164  2589  0832               	movf	floor@i^(0+256),w
 17165  258A  00AE               	movwf	?_floor^(0+256)
 17166  258B  0833               	movf	(floor@i+1)^(0+256),w
 17167  258C  00AF               	movwf	(?_floor+1)^(0+256)
 17168  258D  0834               	movf	(floor@i+2)^(0+256),w
 17169  258E  00B0               	movwf	(?_floor+2)^(0+256)
 17170  258F  0008               	return
 17171  2590                     __end_of_floor:	
 17172                           
 17173                           	psect	text64
 17174  2804                     __ptext64:	
 17175 ;; *************** function _frexp *****************
 17176 ;; Defined at:
 17177 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 17178 ;; Parameters:    Size  Location     Type
 17179 ;;  value           3    0[BANK1 ] int 
 17180 ;;  eptr            1    3[BANK1 ] PTR int 
 17181 ;;		 -> log@exponent(2), floor@expon(2), 
 17182 ;; Auto vars:     Size  Location     Type
 17183 ;;		None
 17184 ;; Return value:  Size  Location     Type
 17185 ;;                  3    0[BANK1 ] PTR int 
 17186 ;; Registers used:
 17187 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17188 ;; Tracked objects:
 17189 ;;		On entry : 0/0
 17190 ;;		On exit  : 0/0
 17191 ;;		Unchanged: 0/0
 17192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17193 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17195 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17196 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17197 ;;Total ram usage:        6 bytes
 17198 ;; Hardware stack levels used:    1
 17199 ;; Hardware stack levels required when called:    5
 17200 ;; This function calls:
 17201 ;;		Nothing
 17202 ;; This function is called by:
 17203 ;;		_floor
 17204 ;;		_log
 17205 ;; This function uses a non-reentrant model
 17206 ;;
 17207                           
 17208                           
 17209                           ;psect for function _frexp
 17210  2804                     _frexp:	
 17211                           
 17212                           ;incstack = 0
 17213                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 17214  2804  0021               	movlb	1	; select bank1
 17215  2805  0822               	movf	(frexp@value+2)^(0+128),w
 17216  2806  0421               	iorwf	(frexp@value+1)^(0+128),w
 17217  2807  0420               	iorwf	frexp@value^(0+128),w
 17218  2808  1D03               	skipz
 17219  2809  2818               	goto	l6571
 17220  280A  0823               	movf	frexp@eptr^(0+128),w
 17221  280B  0086               	movwf	6
 17222  280C  3001               	movlw	1	; select bank2/3
 17223  280D  0087               	movwf	7
 17224  280E  3000               	movlw	0
 17225  280F  3FC0               	movwi [0]fsr1
 17226  2810  3FC1               	movwi [1]fsr1
 17227  2811  3000               	movlw	0
 17228  2812  00A0               	movwf	?_frexp^(0+128)
 17229  2813  3000               	movlw	0
 17230  2814  00A1               	movwf	(?_frexp+1)^(0+128)
 17231  2815  3000               	movlw	0
 17232  2816  00A2               	movwf	(?_frexp+2)^(0+128)
 17233  2817  0008               	return
 17234  2818                     l6571:	
 17235  2818  0822               	movf	(frexp@value^(0+128)+2),w
 17236  2819  397F               	andlw	127
 17237  281A  00A4               	movwf	??_frexp^(0+128)
 17238  281B  01A5               	clrf	(??_frexp^(0+128)+1)
 17239  281C  35A4               	lslf	??_frexp^(0+128),f
 17240  281D  0DA5               	rlf	(??_frexp^(0+128)+1),f
 17241  281E  0823               	movf	frexp@eptr^(0+128),w
 17242  281F  0086               	movwf	6
 17243  2820  3001               	movlw	1	; select bank2/3
 17244  2821  0087               	movwf	7
 17245  2822  0824               	movf	??_frexp^(0+128),w
 17246  2823  3FC0               	movwi [0]fsr1
 17247  2824  0825               	movf	(??_frexp+1)^(0+128),w
 17248  2825  3FC1               	movwi [1]fsr1
 17249  2826  0D21               	rlf	(frexp@value^(0+128)+1),w
 17250  2827  0D21               	rlf	(frexp@value^(0+128)+1),w
 17251  2828  3901               	andlw	1
 17252  2829  00A4               	movwf	??_frexp^(0+128)
 17253  282A  01A5               	clrf	(??_frexp^(0+128)+1)
 17254  282B  0823               	movf	frexp@eptr^(0+128),w
 17255  282C  0086               	movwf	6
 17256  282D  3001               	movlw	1	; select bank2/3
 17257  282E  0087               	movwf	7
 17258  282F  0824               	movf	??_frexp^(0+128),w
 17259  2830  0481               	iorwf	1,f
 17260  2831  3141               	addfsr 1,1
 17261  2832  0825               	movf	(??_frexp+1)^(0+128),w
 17262  2833  0481               	iorwf	1,f
 17263  2834  0823               	movf	frexp@eptr^(0+128),w
 17264  2835  0086               	movwf	6
 17265  2836  3001               	movlw	1	; select bank2/3
 17266  2837  0087               	movwf	7
 17267  2838  3082               	movlw	130
 17268  2839  0781               	addwf	1,f
 17269  283A  3141               	addfsr 1,1
 17270  283B  30FF               	movlw	255
 17271  283C  3D81               	addwfc	1,f
 17272  283D  317F               	addfsr 1,-1
 17273  283E  0822               	movf	(frexp@value^(0+128)+2),w
 17274  283F  3980               	andlw	-128
 17275  2840  383F               	iorlw	63
 17276  2841  00A2               	movwf	(frexp@value^(0+128)+2)
 17277  2842  13A1               	bcf	(frexp@value^(0+128)+1),7
 17278  2843  0008               	return
 17279  2844                     __end_of_frexp:	
 17280                           
 17281                           	psect	text65
 17282  2164                     __ptext65:	
 17283 ;; *************** function ___fttol *****************
 17284 ;; Defined at:
 17285 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 17286 ;; Parameters:    Size  Location     Type
 17287 ;;  f1              3    0[BANK2 ] float 
 17288 ;; Auto vars:     Size  Location     Type
 17289 ;;  lval            4    9[BANK2 ] unsigned long 
 17290 ;;  exp1            1   13[BANK2 ] unsigned char 
 17291 ;;  sign1           1    8[BANK2 ] unsigned char 
 17292 ;; Return value:  Size  Location     Type
 17293 ;;                  4    0[BANK2 ] long 
 17294 ;; Registers used:
 17295 ;;		wreg, status,2, status,0
 17296 ;; Tracked objects:
 17297 ;;		On entry : 0/0
 17298 ;;		On exit  : 0/0
 17299 ;;		Unchanged: 0/0
 17300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17301 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17302 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17303 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17304 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17305 ;;Total ram usage:       14 bytes
 17306 ;; Hardware stack levels used:    1
 17307 ;; Hardware stack levels required when called:    5
 17308 ;; This function calls:
 17309 ;;		Nothing
 17310 ;; This function is called by:
 17311 ;;		_main
 17312 ;;		_set_subdivision
 17313 ;;		_scaleA100kPot
 17314 ;;		_scaleA10kPot
 17315 ;;		_scaleiA10kPot
 17316 ;;		_getModulationDelayTime
 17317 ;;		_modCos
 17318 ;;		_modTri
 17319 ;;		_modSaw
 17320 ;;		_setSymmetry
 17321 ;;		_pow
 17322 ;;		_exp
 17323 ;;		_floor
 17324 ;;		_scaleiA100kPot
 17325 ;;		_scaleA25kPot
 17326 ;;		_scaleiA25kPot
 17327 ;; This function uses a non-reentrant model
 17328 ;;
 17329                           
 17330                           
 17331                           ;psect for function ___fttol
 17332  2164                     ___fttol:	
 17333                           
 17334                           ;incstack = 0
 17335                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17336  2164  0022               	movlb	2	; select bank2
 17337  2165  0820               	movf	___fttol@f1^(0+256),w
 17338  2166  00A4               	movwf	??___fttol^(0+256)
 17339  2167  0821               	movf	(___fttol@f1+1)^(0+256),w
 17340  2168  00A5               	movwf	(??___fttol^(0+256)+1)
 17341  2169  0822               	movf	(___fttol@f1+2)^(0+256),w
 17342  216A  00A6               	movwf	(??___fttol^(0+256)+2)
 17343  216B  1003               	clrc
 17344  216C  0D25               	rlf	(??___fttol^(0+256)+1),w
 17345  216D  0D26               	rlf	(??___fttol^(0+256)+2),w
 17346  216E  00A7               	movwf	(??___fttol+3)^(0+256)
 17347  216F  0827               	movf	(??___fttol+3)^(0+256),w
 17348  2170  00AD               	movwf	___fttol@exp1^(0+256)
 17349  2171  082D               	movf	___fttol@exp1^(0+256),w
 17350  2172  1D03               	btfss	3,2
 17351  2173  297D               	goto	l6527
 17352  2174  3000               	movlw	0
 17353  2175  00A3               	movwf	(?___fttol+3)^(0+256)
 17354  2176  3000               	movlw	0
 17355  2177  00A2               	movwf	(?___fttol+2)^(0+256)
 17356  2178  3000               	movlw	0
 17357  2179  00A1               	movwf	(?___fttol+1)^(0+256)
 17358  217A  3000               	movlw	0
 17359  217B  00A0               	movwf	?___fttol^(0+256)
 17360  217C  0008               	return
 17361  217D                     l6527:	
 17362  217D  0820               	movf	___fttol@f1^(0+256),w
 17363  217E  00A4               	movwf	??___fttol^(0+256)
 17364  217F  0821               	movf	(___fttol@f1+1)^(0+256),w
 17365  2180  00A5               	movwf	(??___fttol^(0+256)+1)
 17366  2181  0822               	movf	(___fttol@f1+2)^(0+256),w
 17367  2182  00A6               	movwf	(??___fttol^(0+256)+2)
 17368  2183  3017               	movlw	23
 17369  2184                     u5665:	
 17370  2184  36A6               	lsrf	(??___fttol^(0+256)+2),f
 17371  2185  0CA5               	rrf	(??___fttol^(0+256)+1),f
 17372  2186  0CA4               	rrf	??___fttol^(0+256),f
 17373  2187  0B89               	decfsz	9,f
 17374  2188  2984               	goto	u5665
 17375  2189  0824               	movf	??___fttol^(0+256),w
 17376  218A  00A7               	movwf	(??___fttol+3)^(0+256)
 17377  218B  0827               	movf	(??___fttol+3)^(0+256),w
 17378  218C  00A8               	movwf	___fttol@sign1^(0+256)
 17379  218D  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 17380  218E  30FF               	movlw	255
 17381  218F  05A0               	andwf	___fttol@f1^(0+256),f
 17382  2190  30FF               	movlw	255
 17383  2191  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 17384  2192  3000               	movlw	0
 17385  2193  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 17386  2194  0820               	movf	___fttol@f1^(0+256),w
 17387  2195  00A9               	movwf	___fttol@lval^(0+256)
 17388  2196  0821               	movf	(___fttol@f1+1)^(0+256),w
 17389  2197  00AA               	movwf	(___fttol@lval^(0+256)+1)
 17390  2198  0822               	movf	(___fttol@f1+2)^(0+256),w
 17391  2199  00AB               	movwf	(___fttol@lval^(0+256)+2)
 17392  219A  01AC               	clrf	(___fttol@lval^(0+256)+3)
 17393  219B  308E               	movlw	142
 17394  219C  02AD               	subwf	___fttol@exp1^(0+256),f
 17395  219D  1FAD               	btfss	___fttol@exp1^(0+256),7
 17396  219E  29BB               	goto	l6547
 17397  219F  082D               	movf	___fttol@exp1^(0+256),w
 17398  21A0  3A80               	xorlw	128
 17399  21A1  3E8F               	addlw	143
 17400  21A2  1803               	skipnc
 17401  21A3  29AD               	goto	l6545
 17402  21A4  3000               	movlw	0
 17403  21A5  00A3               	movwf	(?___fttol+3)^(0+256)
 17404  21A6  3000               	movlw	0
 17405  21A7  00A2               	movwf	(?___fttol+2)^(0+256)
 17406  21A8  3000               	movlw	0
 17407  21A9  00A1               	movwf	(?___fttol+1)^(0+256)
 17408  21AA  3000               	movlw	0
 17409  21AB  00A0               	movwf	?___fttol^(0+256)
 17410  21AC  0008               	return
 17411  21AD                     l6545:	
 17412  21AD  3001               	movlw	1
 17413  21AE                     u5695:	
 17414  21AE  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 17415  21AF  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 17416  21B0  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 17417  21B1  0CA9               	rrf	___fttol@lval^(0+256),f
 17418  21B2  0B89               	decfsz	9,f
 17419  21B3  29AE               	goto	u5695
 17420  21B4  3001               	movlw	1
 17421  21B5  00A4               	movwf	??___fttol^(0+256)
 17422  21B6  0824               	movf	??___fttol^(0+256),w
 17423  21B7  07AD               	addwf	___fttol@exp1^(0+256),f
 17424  21B8  1903               	btfsc	3,2
 17425  21B9  29D4               	goto	l6555
 17426  21BA  29AD               	goto	l6545
 17427  21BB                     l6547:	
 17428  21BB  3018               	movlw	24
 17429  21BC  022D               	subwf	___fttol@exp1^(0+256),w
 17430  21BD  1C03               	skipc
 17431  21BE  29D1               	goto	l2707
 17432  21BF  3000               	movlw	0
 17433  21C0  00A3               	movwf	(?___fttol+3)^(0+256)
 17434  21C1  3000               	movlw	0
 17435  21C2  00A2               	movwf	(?___fttol+2)^(0+256)
 17436  21C3  3000               	movlw	0
 17437  21C4  00A1               	movwf	(?___fttol+1)^(0+256)
 17438  21C5  3000               	movlw	0
 17439  21C6  00A0               	movwf	?___fttol^(0+256)
 17440  21C7  0008               	return
 17441  21C8                     l6553:	
 17442  21C8  3001               	movlw	1
 17443  21C9                     u5725:	
 17444  21C9  35A9               	lslf	___fttol@lval^(0+256),f
 17445  21CA  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 17446  21CB  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 17447  21CC  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 17448  21CD  0B89               	decfsz	9,f
 17449  21CE  29C9               	goto	u5725
 17450  21CF  3001               	movlw	1
 17451  21D0  02AD               	subwf	___fttol@exp1^(0+256),f
 17452  21D1                     l2707:	
 17453  21D1  082D               	movf	___fttol@exp1^(0+256),w
 17454  21D2  1D03               	btfss	3,2
 17455  21D3  29C8               	goto	l6553
 17456  21D4                     l6555:	
 17457  21D4  0828               	movf	___fttol@sign1^(0+256),w
 17458  21D5  1903               	btfsc	3,2
 17459  21D6  29E2               	goto	l6559
 17460  21D7  09A9               	comf	___fttol@lval^(0+256),f
 17461  21D8  09AA               	comf	(___fttol@lval+1)^(0+256),f
 17462  21D9  09AB               	comf	(___fttol@lval+2)^(0+256),f
 17463  21DA  09AC               	comf	(___fttol@lval+3)^(0+256),f
 17464  21DB  0AA9               	incf	___fttol@lval^(0+256),f
 17465  21DC  1903               	skipnz
 17466  21DD  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 17467  21DE  1903               	skipnz
 17468  21DF  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 17469  21E0  1903               	skipnz
 17470  21E1  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 17471  21E2                     l6559:	
 17472  21E2  082C               	movf	(___fttol@lval+3)^(0+256),w
 17473  21E3  00A3               	movwf	(?___fttol+3)^(0+256)
 17474  21E4  082B               	movf	(___fttol@lval+2)^(0+256),w
 17475  21E5  00A2               	movwf	(?___fttol+2)^(0+256)
 17476  21E6  082A               	movf	(___fttol@lval+1)^(0+256),w
 17477  21E7  00A1               	movwf	(?___fttol+1)^(0+256)
 17478  21E8  0829               	movf	___fttol@lval^(0+256),w
 17479  21E9  00A0               	movwf	?___fttol^(0+256)
 17480  21EA  0008               	return
 17481  21EB                     __end_of___fttol:	
 17482                           
 17483                           	psect	text66
 17484  36CF                     __ptext66:	
 17485 ;; *************** function ___ftge *****************
 17486 ;; Defined at:
 17487 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;  ff1             3    0[BANK1 ] float 
 17490 ;;  ff2             3    3[BANK1 ] float 
 17491 ;; Auto vars:     Size  Location     Type
 17492 ;;		None
 17493 ;; Return value:  Size  Location     Type
 17494 ;;		None               void
 17495 ;; Registers used:
 17496 ;;		wreg, status,2, status,0
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17502 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17504 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17505 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17506 ;;Total ram usage:        9 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    5
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_scaleA10kPot
 17513 ;;		_scaleiA10kPot
 17514 ;;		_modCos
 17515 ;;		_modTri
 17516 ;;		_modSaw
 17517 ;;		_modSquare
 17518 ;;		_cos
 17519 ;;		_pow
 17520 ;;		_sin
 17521 ;;		_exp
 17522 ;;		_floor
 17523 ;;		_ldexp
 17524 ;;		_log
 17525 ;;		_scaleiA100kPot
 17526 ;;		_scaleA25kPot
 17527 ;;		_scaleiA25kPot
 17528 ;; This function uses a non-reentrant model
 17529 ;;
 17530                           
 17531                           
 17532                           ;psect for function ___ftge
 17533  36CF                     ___ftge:	
 17534                           
 17535                           ;incstack = 0
 17536                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 17537  36CF  0021               	movlb	1	; select bank1
 17538  36D0  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 17539  36D1  2EE6               	goto	l6447
 17540  36D2  0920               	comf	___ftge@ff1^(0+128),w
 17541  36D3  00A6               	movwf	??___ftge^(0+128)
 17542  36D4  0921               	comf	(___ftge@ff1+1)^(0+128),w
 17543  36D5  00A7               	movwf	(??___ftge^(0+128)+1)
 17544  36D6  0922               	comf	(___ftge@ff1+2)^(0+128),w
 17545  36D7  00A8               	movwf	(??___ftge^(0+128)+2)
 17546  36D8  0AA6               	incf	??___ftge^(0+128),f
 17547  36D9  1903               	skipnz
 17548  36DA  0AA7               	incf	(??___ftge^(0+128)+1),f
 17549  36DB  1903               	skipnz
 17550  36DC  0AA8               	incf	(??___ftge^(0+128)+2),f
 17551  36DD  3000               	movlw	0
 17552  36DE  0726               	addwf	??___ftge^(0+128),w
 17553  36DF  00A0               	movwf	___ftge@ff1^(0+128)
 17554  36E0  3000               	movlw	0
 17555  36E1  3D27               	addwfc	(??___ftge+1)^(0+128),w
 17556  36E2  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 17557  36E3  3080               	movlw	128
 17558  36E4  3D28               	addwfc	(??___ftge+2)^(0+128),w
 17559  36E5  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 17560  36E6                     l6447:	
 17561  36E6  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 17562  36E7  2EFC               	goto	l6451
 17563  36E8  0923               	comf	___ftge@ff2^(0+128),w
 17564  36E9  00A6               	movwf	??___ftge^(0+128)
 17565  36EA  0924               	comf	(___ftge@ff2+1)^(0+128),w
 17566  36EB  00A7               	movwf	(??___ftge^(0+128)+1)
 17567  36EC  0925               	comf	(___ftge@ff2+2)^(0+128),w
 17568  36ED  00A8               	movwf	(??___ftge^(0+128)+2)
 17569  36EE  0AA6               	incf	??___ftge^(0+128),f
 17570  36EF  1903               	skipnz
 17571  36F0  0AA7               	incf	(??___ftge^(0+128)+1),f
 17572  36F1  1903               	skipnz
 17573  36F2  0AA8               	incf	(??___ftge^(0+128)+2),f
 17574  36F3  3000               	movlw	0
 17575  36F4  0726               	addwf	??___ftge^(0+128),w
 17576  36F5  00A3               	movwf	___ftge@ff2^(0+128)
 17577  36F6  3000               	movlw	0
 17578  36F7  3D27               	addwfc	(??___ftge+1)^(0+128),w
 17579  36F8  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 17580  36F9  3080               	movlw	128
 17581  36FA  3D28               	addwfc	(??___ftge+2)^(0+128),w
 17582  36FB  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 17583  36FC                     l6451:	
 17584  36FC  3080               	movlw	128
 17585  36FD  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 17586  36FE  3080               	movlw	128
 17587  36FF  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 17588  3700  0825               	movf	(___ftge@ff2+2)^(0+128),w
 17589  3701  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 17590  3702  1D03               	skipz
 17591  3703  0008               	return
 17592  3704  0824               	movf	(___ftge@ff2+1)^(0+128),w
 17593  3705  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 17594  3706  1D03               	skipz
 17595  3707  0008               	return
 17596  3708  0823               	movf	___ftge@ff2^(0+128),w
 17597  3709  0220               	subwf	___ftge@ff1^(0+128),w
 17598  370A  0008               	return
 17599  370B                     __end_of___ftge:	
 17600                           
 17601                           	psect	text67
 17602  3748                     __ptext67:	
 17603 ;; *************** function ___altoft *****************
 17604 ;; Defined at:
 17605 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;  c               4    8[BANK1 ] long 
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;  sign            1   15[BANK1 ] unsigned char 
 17610 ;;  exp             1   14[BANK1 ] unsigned char 
 17611 ;; Return value:  Size  Location     Type
 17612 ;;                  3    8[BANK1 ] float 
 17613 ;; Registers used:
 17614 ;;		wreg, status,2, status,0, pclath, cstack
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17620 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17621 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17622 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17623 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17624 ;;Total ram usage:        8 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; Hardware stack levels required when called:    6
 17627 ;; This function calls:
 17628 ;;		___ftpack
 17629 ;; This function is called by:
 17630 ;;		_getModulationDelayTime
 17631 ;;		_floor
 17632 ;; This function uses a non-reentrant model
 17633 ;;
 17634                           
 17635                           
 17636                           ;psect for function ___altoft
 17637  3748                     ___altoft:	
 17638                           
 17639                           ;incstack = 0
 17640                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 17641  3748  0021               	movlb	1	; select bank1
 17642  3749  01AF               	clrf	___altoft@sign^(0+128)
 17643  374A  308E               	movlw	142
 17644  374B  00AC               	movwf	??___altoft^(0+128)
 17645  374C  082C               	movf	??___altoft^(0+128),w
 17646  374D  00AE               	movwf	___altoft@exp^(0+128)
 17647  374E  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 17648  374F  2F5D               	goto	l6323
 17649  3750  09A8               	comf	___altoft@c^(0+128),f
 17650  3751  09A9               	comf	(___altoft@c+1)^(0+128),f
 17651  3752  09AA               	comf	(___altoft@c+2)^(0+128),f
 17652  3753  09AB               	comf	(___altoft@c+3)^(0+128),f
 17653  3754  0AA8               	incf	___altoft@c^(0+128),f
 17654  3755  1903               	skipnz
 17655  3756  0AA9               	incf	(___altoft@c+1)^(0+128),f
 17656  3757  1903               	skipnz
 17657  3758  0AAA               	incf	(___altoft@c+2)^(0+128),f
 17658  3759  1903               	skipnz
 17659  375A  0AAB               	incf	(___altoft@c+3)^(0+128),f
 17660  375B  01AF               	clrf	___altoft@sign^(0+128)
 17661  375C  0AAF               	incf	___altoft@sign^(0+128),f
 17662  375D                     l6323:	
 17663  375D  30FF               	movlw	255
 17664  375E  052B               	andwf	(___altoft@c+3)^(0+128),w
 17665  375F  1903               	btfsc	3,2
 17666  3760  2F6D               	goto	l6325
 17667  3761  3001               	movlw	1
 17668  3762                     u5145:	
 17669  3762  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 17670  3763  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 17671  3764  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 17672  3765  0CA8               	rrf	___altoft@c^(0+128),f
 17673  3766  0B89               	decfsz	9,f
 17674  3767  2F62               	goto	u5145
 17675  3768  3001               	movlw	1
 17676  3769  00AC               	movwf	??___altoft^(0+128)
 17677  376A  082C               	movf	??___altoft^(0+128),w
 17678  376B  07AE               	addwf	___altoft@exp^(0+128),f
 17679  376C  2F5D               	goto	l6323
 17680  376D                     l6325:	
 17681  376D  0828               	movf	___altoft@c^(0+128),w
 17682  376E  00A0               	movwf	___ftpack@arg^(0+128)
 17683  376F  0829               	movf	(___altoft@c+1)^(0+128),w
 17684  3770  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17685  3771  082A               	movf	(___altoft@c+2)^(0+128),w
 17686  3772  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17687  3773  082E               	movf	___altoft@exp^(0+128),w
 17688  3774  00AC               	movwf	??___altoft^(0+128)
 17689  3775  082C               	movf	??___altoft^(0+128),w
 17690  3776  00A3               	movwf	___ftpack@exp^(0+128)
 17691  3777  082F               	movf	___altoft@sign^(0+128),w
 17692  3778  00AD               	movwf	(??___altoft+1)^(0+128)
 17693  3779  082D               	movf	(??___altoft+1)^(0+128),w
 17694  377A  00A4               	movwf	___ftpack@sign^(0+128)
 17695  377B  31AD  2541         	fcall	___ftpack
 17696  377D  0021               	movlb	1	; select bank1
 17697  377E  0820               	movf	?___ftpack^(0+128),w
 17698  377F  00A8               	movwf	?___altoft^(0+128)
 17699  3780  0821               	movf	(?___ftpack+1)^(0+128),w
 17700  3781  00A9               	movwf	(?___altoft+1)^(0+128)
 17701  3782  0822               	movf	(?___ftpack+2)^(0+128),w
 17702  3783  00AA               	movwf	(?___altoft+2)^(0+128)
 17703  3784  0008               	return
 17704  3785                     __end_of___altoft:	
 17705                           
 17706                           	psect	text68
 17707  2E0F                     __ptext68:	
 17708 ;; *************** function _eval_poly *****************
 17709 ;; Defined at:
 17710 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 17711 ;; Parameters:    Size  Location     Type
 17712 ;;  x               3   20[BANK2 ] float 
 17713 ;;  d               2   23[BANK2 ] PTR const 
 17714 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 17715 ;;  n               2   25[BANK2 ] int 
 17716 ;; Auto vars:     Size  Location     Type
 17717 ;;  res             3   27[BANK2 ] int 
 17718 ;; Return value:  Size  Location     Type
 17719 ;;                  3   20[BANK2 ] int 
 17720 ;; Registers used:
 17721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17722 ;; Tracked objects:
 17723 ;;		On entry : 0/0
 17724 ;;		On exit  : 0/0
 17725 ;;		Unchanged: 0/0
 17726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17727 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17728 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17730 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17731 ;;Total ram usage:       10 bytes
 17732 ;; Hardware stack levels used:    1
 17733 ;; Hardware stack levels required when called:    7
 17734 ;; This function calls:
 17735 ;;		___ftadd
 17736 ;;		___ftmul
 17737 ;;		___wmul
 17738 ;; This function is called by:
 17739 ;;		_sin
 17740 ;;		_exp
 17741 ;;		_log
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           
 17746                           ;psect for function _eval_poly
 17747  2E0F                     _eval_poly:	
 17748                           
 17749                           ;incstack = 0
 17750                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17751  2E0F  0022               	movlb	2	; select bank2
 17752  2E10  083A               	movf	(eval_poly@n+1)^(0+256),w
 17753  2E11  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 17754  2E12  0839               	movf	eval_poly@n^(0+256),w
 17755  2E13  00AE               	movwf	___wmul@multiplier^(0+256)
 17756  2E14  3003               	movlw	3
 17757  2E15  00B0               	movwf	___wmul@multiplicand^(0+256)
 17758  2E16  3000               	movlw	0
 17759  2E17  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 17760  2E18  31B2  221C  31AE   	fcall	___wmul
 17761  2E1B  0022               	movlb	2	; select bank2
 17762  2E1C  0837               	movf	eval_poly@d^(0+256),w
 17763  2E1D  072E               	addwf	?___wmul^(0+256),w
 17764  2E1E  0084               	movwf	4
 17765  2E1F  0838               	movf	(eval_poly@d+1)^(0+256),w
 17766  2E20  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 17767  2E21  0085               	movwf	5
 17768  2E22  3F00               	moviw [0]fsr0
 17769  2E23  00BB               	movwf	eval_poly@res^(0+256)
 17770  2E24  3F01               	moviw [1]fsr0
 17771  2E25  00BC               	movwf	(eval_poly@res+1)^(0+256)
 17772  2E26  3F02               	moviw [2]fsr0
 17773  2E27                     L19:	
 17774  2E27  00BD               	movwf	(eval_poly@res+2)^(0+256)
 17775  2E28  0839               	movf	eval_poly@n^(0+256),w
 17776  2E29  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 17777  2E2A  1903               	btfsc	3,2
 17778  2E2B  2E7A               	goto	l6781
 17779  2E2C  30FF               	movlw	255
 17780  2E2D  07B9               	addwf	eval_poly@n^(0+256),f
 17781  2E2E  30FF               	movlw	255
 17782  2E2F  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 17783  2E30  083A               	movf	(eval_poly@n+1)^(0+256),w
 17784  2E31  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 17785  2E32  0839               	movf	eval_poly@n^(0+256),w
 17786  2E33  00AE               	movwf	___wmul@multiplier^(0+256)
 17787  2E34  3003               	movlw	3
 17788  2E35  00B0               	movwf	___wmul@multiplicand^(0+256)
 17789  2E36  3000               	movlw	0
 17790  2E37  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 17791  2E38  31B2  221C  31AE   	fcall	___wmul
 17792  2E3B  0022               	movlb	2	; select bank2
 17793  2E3C  0837               	movf	eval_poly@d^(0+256),w
 17794  2E3D  072E               	addwf	?___wmul^(0+256),w
 17795  2E3E  0084               	movwf	4
 17796  2E3F  0838               	movf	(eval_poly@d+1)^(0+256),w
 17797  2E40  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 17798  2E41  0085               	movwf	5
 17799  2E42  3F00               	moviw [0]fsr0
 17800  2E43  0021               	movlb	1	; select bank1
 17801  2E44  00C1               	movwf	___ftadd@f1^(0+128)
 17802  2E45  3F01               	moviw [1]fsr0
 17803  2E46  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 17804  2E47  3F02               	moviw [2]fsr0
 17805  2E48  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 17806  2E49  0022               	movlb	2	; select bank2
 17807  2E4A  083B               	movf	eval_poly@res^(0+256),w
 17808  2E4B  0021               	movlb	1	; select bank1
 17809  2E4C  00AE               	movwf	___ftmul@f1^(0+128)
 17810  2E4D  0022               	movlb	2	; select bank2
 17811  2E4E  083C               	movf	(eval_poly@res+1)^(0+256),w
 17812  2E4F  0021               	movlb	1	; select bank1
 17813  2E50  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 17814  2E51  0022               	movlb	2	; select bank2
 17815  2E52  083D               	movf	(eval_poly@res+2)^(0+256),w
 17816  2E53  0021               	movlb	1	; select bank1
 17817  2E54  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 17818  2E55  0022               	movlb	2	; select bank2
 17819  2E56  0834               	movf	eval_poly@x^(0+256),w
 17820  2E57  0021               	movlb	1	; select bank1
 17821  2E58  00B1               	movwf	___ftmul@f2^(0+128)
 17822  2E59  0022               	movlb	2	; select bank2
 17823  2E5A  0835               	movf	(eval_poly@x+1)^(0+256),w
 17824  2E5B  0021               	movlb	1	; select bank1
 17825  2E5C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 17826  2E5D  0022               	movlb	2	; select bank2
 17827  2E5E  0836               	movf	(eval_poly@x+2)^(0+256),w
 17828  2E5F  0021               	movlb	1	; select bank1
 17829  2E60  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 17830  2E61  31A5  2590  31AE   	fcall	___ftmul
 17831  2E64  0021               	movlb	1	; select bank1
 17832  2E65  082E               	movf	?___ftmul^(0+128),w
 17833  2E66  00C4               	movwf	___ftadd@f2^(0+128)
 17834  2E67  082F               	movf	(?___ftmul+1)^(0+128),w
 17835  2E68  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 17836  2E69  0830               	movf	(?___ftmul+2)^(0+128),w
 17837  2E6A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 17838  2E6B  3198  200B  31AE   	fcall	___ftadd
 17839  2E6E  0021               	movlb	1	; select bank1
 17840  2E6F  0841               	movf	?___ftadd^(0+128),w
 17841  2E70  0022               	movlb	2	; select bank2
 17842  2E71  00BB               	movwf	eval_poly@res^(0+256)
 17843  2E72  0021               	movlb	1	; select bank1
 17844  2E73  0842               	movf	(?___ftadd+1)^(0+128),w
 17845  2E74  0022               	movlb	2	; select bank2
 17846  2E75  00BC               	movwf	(eval_poly@res+1)^(0+256)
 17847  2E76  0021               	movlb	1	; select bank1
 17848  2E77  0843               	movf	(?___ftadd+2)^(0+128),w
 17849  2E78  0022               	movlb	2	; select bank2
 17850  2E79  2E27               	goto	L19
 17851  2E7A                     l6781:	
 17852  2E7A  083B               	movf	eval_poly@res^(0+256),w
 17853  2E7B  00B4               	movwf	?_eval_poly^(0+256)
 17854  2E7C  083C               	movf	(eval_poly@res+1)^(0+256),w
 17855  2E7D  00B5               	movwf	(?_eval_poly+1)^(0+256)
 17856  2E7E  083D               	movf	(eval_poly@res+2)^(0+256),w
 17857  2E7F  00B6               	movwf	(?_eval_poly+2)^(0+256)
 17858  2E80  0008               	return
 17859  2E81                     __end_of_eval_poly:	
 17860                           
 17861                           	psect	text69
 17862  2590                     __ptext69:	
 17863 ;; *************** function ___ftmul *****************
 17864 ;; Defined at:
 17865 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 17866 ;; Parameters:    Size  Location     Type
 17867 ;;  f1              3   14[BANK1 ] float 
 17868 ;;  f2              3   17[BANK1 ] float 
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 17871 ;;  sign            1   29[BANK1 ] unsigned char 
 17872 ;;  cntr            1   28[BANK1 ] unsigned char 
 17873 ;;  exp             1   24[BANK1 ] unsigned char 
 17874 ;; Return value:  Size  Location     Type
 17875 ;;                  3   14[BANK1 ] float 
 17876 ;; Registers used:
 17877 ;;		wreg, status,2, status,0, pclath, cstack
 17878 ;; Tracked objects:
 17879 ;;		On entry : 0/0
 17880 ;;		On exit  : 0/0
 17881 ;;		Unchanged: 0/0
 17882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17883 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17884 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17885 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17886 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17887 ;;Total ram usage:       16 bytes
 17888 ;; Hardware stack levels used:    1
 17889 ;; Hardware stack levels required when called:    6
 17890 ;; This function calls:
 17891 ;;		___ftpack
 17892 ;; This function is called by:
 17893 ;;		_set_subdivision
 17894 ;;		_map
 17895 ;;		_scaleA100kPot
 17896 ;;		_scaleA10kPot
 17897 ;;		_scaleiA10kPot
 17898 ;;		_calcCosArray
 17899 ;;		_modCos
 17900 ;;		_modTri
 17901 ;;		_modSaw
 17902 ;;		_pow
 17903 ;;		_sin
 17904 ;;		_eval_poly
 17905 ;;		_exp
 17906 ;;		_log
 17907 ;;		_scalePotValue
 17908 ;;		_scaleiA100kPot
 17909 ;;		_scaleA25kPot
 17910 ;;		_scaleiA25kPot
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           
 17915                           ;psect for function ___ftmul
 17916  2590                     ___ftmul:	
 17917                           
 17918                           ;incstack = 0
 17919                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17920  2590  0021               	movlb	1	; select bank1
 17921  2591  082E               	movf	___ftmul@f1^(0+128),w
 17922  2592  00B4               	movwf	??___ftmul^(0+128)
 17923  2593  082F               	movf	(___ftmul@f1+1)^(0+128),w
 17924  2594  00B5               	movwf	(??___ftmul^(0+128)+1)
 17925  2595  0830               	movf	(___ftmul@f1+2)^(0+128),w
 17926  2596  00B6               	movwf	(??___ftmul^(0+128)+2)
 17927  2597  1003               	clrc
 17928  2598  0D35               	rlf	(??___ftmul^(0+128)+1),w
 17929  2599  0D36               	rlf	(??___ftmul^(0+128)+2),w
 17930  259A  00B7               	movwf	(??___ftmul+3)^(0+128)
 17931  259B  0837               	movf	(??___ftmul+3)^(0+128),w
 17932  259C  00B8               	movwf	___ftmul@exp^(0+128)
 17933  259D  0838               	movf	___ftmul@exp^(0+128),w
 17934  259E  1D03               	btfss	3,2
 17935  259F  2DA7               	goto	l6469
 17936  25A0  3000               	movlw	0
 17937  25A1  00AE               	movwf	?___ftmul^(0+128)
 17938  25A2  3000               	movlw	0
 17939  25A3  00AF               	movwf	(?___ftmul+1)^(0+128)
 17940  25A4  3000               	movlw	0
 17941  25A5  00B0               	movwf	(?___ftmul+2)^(0+128)
 17942  25A6  0008               	return
 17943  25A7                     l6469:	
 17944  25A7  0831               	movf	___ftmul@f2^(0+128),w
 17945  25A8  00B4               	movwf	??___ftmul^(0+128)
 17946  25A9  0832               	movf	(___ftmul@f2+1)^(0+128),w
 17947  25AA  00B5               	movwf	(??___ftmul^(0+128)+1)
 17948  25AB  0833               	movf	(___ftmul@f2+2)^(0+128),w
 17949  25AC  00B6               	movwf	(??___ftmul^(0+128)+2)
 17950  25AD  1003               	clrc
 17951  25AE  0D35               	rlf	(??___ftmul^(0+128)+1),w
 17952  25AF  0D36               	rlf	(??___ftmul^(0+128)+2),w
 17953  25B0  00B7               	movwf	(??___ftmul+3)^(0+128)
 17954  25B1  0837               	movf	(??___ftmul+3)^(0+128),w
 17955  25B2  00BD               	movwf	___ftmul@sign^(0+128)
 17956  25B3  083D               	movf	___ftmul@sign^(0+128),w
 17957  25B4  1D03               	btfss	3,2
 17958  25B5  2DBD               	goto	l6475
 17959  25B6  3000               	movlw	0
 17960  25B7  00AE               	movwf	?___ftmul^(0+128)
 17961  25B8  3000               	movlw	0
 17962  25B9  00AF               	movwf	(?___ftmul+1)^(0+128)
 17963  25BA  3000               	movlw	0
 17964  25BB  00B0               	movwf	(?___ftmul+2)^(0+128)
 17965  25BC  0008               	return
 17966  25BD                     l6475:	
 17967  25BD  083D               	movf	___ftmul@sign^(0+128),w
 17968  25BE  3E7B               	addlw	123
 17969  25BF  00B4               	movwf	??___ftmul^(0+128)
 17970  25C0  0834               	movf	??___ftmul^(0+128),w
 17971  25C1  07B8               	addwf	___ftmul@exp^(0+128),f
 17972  25C2  082E               	movf	___ftmul@f1^(0+128),w
 17973  25C3  00B4               	movwf	??___ftmul^(0+128)
 17974  25C4  082F               	movf	(___ftmul@f1+1)^(0+128),w
 17975  25C5  00B5               	movwf	(??___ftmul^(0+128)+1)
 17976  25C6  0830               	movf	(___ftmul@f1+2)^(0+128),w
 17977  25C7  00B6               	movwf	(??___ftmul^(0+128)+2)
 17978  25C8  3010               	movlw	16
 17979  25C9                     u5545:	
 17980  25C9  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 17981  25CA  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 17982  25CB  0CB4               	rrf	??___ftmul^(0+128),f
 17983  25CC  0B89               	decfsz	9,f
 17984  25CD  2DC9               	goto	u5545
 17985  25CE  0834               	movf	??___ftmul^(0+128),w
 17986  25CF  00B7               	movwf	(??___ftmul+3)^(0+128)
 17987  25D0  0837               	movf	(??___ftmul+3)^(0+128),w
 17988  25D1  00BD               	movwf	___ftmul@sign^(0+128)
 17989  25D2  0831               	movf	___ftmul@f2^(0+128),w
 17990  25D3  00B4               	movwf	??___ftmul^(0+128)
 17991  25D4  0832               	movf	(___ftmul@f2+1)^(0+128),w
 17992  25D5  00B5               	movwf	(??___ftmul^(0+128)+1)
 17993  25D6  0833               	movf	(___ftmul@f2+2)^(0+128),w
 17994  25D7  00B6               	movwf	(??___ftmul^(0+128)+2)
 17995  25D8  3010               	movlw	16
 17996  25D9                     u5555:	
 17997  25D9  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 17998  25DA  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 17999  25DB  0CB4               	rrf	??___ftmul^(0+128),f
 18000  25DC  0B89               	decfsz	9,f
 18001  25DD  2DD9               	goto	u5555
 18002  25DE  0834               	movf	??___ftmul^(0+128),w
 18003  25DF  00B7               	movwf	(??___ftmul+3)^(0+128)
 18004  25E0  0837               	movf	(??___ftmul+3)^(0+128),w
 18005  25E1  06BD               	xorwf	___ftmul@sign^(0+128),f
 18006  25E2  3080               	movlw	128
 18007  25E3  00B4               	movwf	??___ftmul^(0+128)
 18008  25E4  0834               	movf	??___ftmul^(0+128),w
 18009  25E5  05BD               	andwf	___ftmul@sign^(0+128),f
 18010  25E6  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 18011  25E7  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 18012  25E8  30FF               	movlw	255
 18013  25E9  05B1               	andwf	___ftmul@f2^(0+128),f
 18014  25EA  30FF               	movlw	255
 18015  25EB  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 18016  25EC  3000               	movlw	0
 18017  25ED  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 18018  25EE  3000               	movlw	0
 18019  25EF  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 18020  25F0  3000               	movlw	0
 18021  25F1  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 18022  25F2  3000               	movlw	0
 18023  25F3  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 18024  25F4  3007               	movlw	7
 18025  25F5  00B4               	movwf	??___ftmul^(0+128)
 18026  25F6  0834               	movf	??___ftmul^(0+128),w
 18027  25F7  00BC               	movwf	___ftmul@cntr^(0+128)
 18028  25F8                     l6487:	
 18029  25F8  1C2E               	btfss	___ftmul@f1^(0+128),0
 18030  25F9  2E00               	goto	l6491
 18031  25FA  0831               	movf	___ftmul@f2^(0+128),w
 18032  25FB  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 18033  25FC  0832               	movf	(___ftmul@f2+1)^(0+128),w
 18034  25FD  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 18035  25FE  0833               	movf	(___ftmul@f2+2)^(0+128),w
 18036  25FF  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 18037  2600                     l6491:	
 18038  2600  3001               	movlw	1
 18039  2601                     u5575:	
 18040  2601  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 18041  2602  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 18042  2603  0CAE               	rrf	___ftmul@f1^(0+128),f
 18043  2604  0B89               	decfsz	9,f
 18044  2605  2E01               	goto	u5575
 18045  2606  3001               	movlw	1
 18046  2607                     u5585:	
 18047  2607  35B1               	lslf	___ftmul@f2^(0+128),f
 18048  2608  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 18049  2609  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 18050  260A  0B89               	decfsz	9,f
 18051  260B  2E07               	goto	u5585
 18052  260C  3001               	movlw	1
 18053  260D  02BC               	subwf	___ftmul@cntr^(0+128),f
 18054  260E  1D03               	btfss	3,2
 18055  260F  2DF8               	goto	l6487
 18056  2610  3009               	movlw	9
 18057  2611  00B4               	movwf	??___ftmul^(0+128)
 18058  2612  0834               	movf	??___ftmul^(0+128),w
 18059  2613  00BC               	movwf	___ftmul@cntr^(0+128)
 18060  2614                     l6499:	
 18061  2614  1C2E               	btfss	___ftmul@f1^(0+128),0
 18062  2615  2E1C               	goto	l6503
 18063  2616  0831               	movf	___ftmul@f2^(0+128),w
 18064  2617  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 18065  2618  0832               	movf	(___ftmul@f2+1)^(0+128),w
 18066  2619  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 18067  261A  0833               	movf	(___ftmul@f2+2)^(0+128),w
 18068  261B  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 18069  261C                     l6503:	
 18070  261C  3001               	movlw	1
 18071  261D                     u5615:	
 18072  261D  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 18073  261E  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 18074  261F  0CAE               	rrf	___ftmul@f1^(0+128),f
 18075  2620  0B89               	decfsz	9,f
 18076  2621  2E1D               	goto	u5615
 18077  2622  3001               	movlw	1
 18078  2623                     u5625:	
 18079  2623  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 18080  2624  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 18081  2625  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 18082  2626  0B89               	decfsz	9,f
 18083  2627  2E23               	goto	u5625
 18084  2628  3001               	movlw	1
 18085  2629  02BC               	subwf	___ftmul@cntr^(0+128),f
 18086  262A  1D03               	btfss	3,2
 18087  262B  2E14               	goto	l6499
 18088  262C  0839               	movf	___ftmul@f3_as_product^(0+128),w
 18089  262D  00A0               	movwf	___ftpack@arg^(0+128)
 18090  262E  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 18091  262F  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18092  2630  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 18093  2631  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18094  2632  0838               	movf	___ftmul@exp^(0+128),w
 18095  2633  00B4               	movwf	??___ftmul^(0+128)
 18096  2634  0834               	movf	??___ftmul^(0+128),w
 18097  2635  00A3               	movwf	___ftpack@exp^(0+128)
 18098  2636  083D               	movf	___ftmul@sign^(0+128),w
 18099  2637  00B5               	movwf	(??___ftmul+1)^(0+128)
 18100  2638  0835               	movf	(??___ftmul+1)^(0+128),w
 18101  2639  00A4               	movwf	___ftpack@sign^(0+128)
 18102  263A  31AD  2541         	fcall	___ftpack
 18103  263C  0021               	movlb	1	; select bank1
 18104  263D  0820               	movf	?___ftpack^(0+128),w
 18105  263E  00AE               	movwf	?___ftmul^(0+128)
 18106  263F  0821               	movf	(?___ftpack+1)^(0+128),w
 18107  2640  00AF               	movwf	(?___ftmul+1)^(0+128)
 18108  2641  0822               	movf	(?___ftpack+2)^(0+128),w
 18109  2642  00B0               	movwf	(?___ftmul+2)^(0+128)
 18110  2643  0008               	return
 18111  2644                     __end_of___ftmul:	
 18112                           
 18113                           	psect	text70
 18114  342E                     __ptext70:	
 18115 ;; *************** function ___ftsub *****************
 18116 ;; Defined at:
 18117 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 18118 ;; Parameters:    Size  Location     Type
 18119 ;;  f2              3   23[BANK2 ] float 
 18120 ;;  f1              3   26[BANK2 ] float 
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;		None
 18123 ;; Return value:  Size  Location     Type
 18124 ;;                  3   23[BANK2 ] float 
 18125 ;; Registers used:
 18126 ;;		wreg, status,2, status,0, pclath, cstack
 18127 ;; Tracked objects:
 18128 ;;		On entry : 0/0
 18129 ;;		On exit  : 0/0
 18130 ;;		Unchanged: 0/0
 18131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18132 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18135 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18136 ;;Total ram usage:        6 bytes
 18137 ;; Hardware stack levels used:    1
 18138 ;; Hardware stack levels required when called:    7
 18139 ;; This function calls:
 18140 ;;		___ftadd
 18141 ;; This function is called by:
 18142 ;;		_sin
 18143 ;;		_exp
 18144 ;; This function uses a non-reentrant model
 18145 ;;
 18146                           
 18147                           
 18148                           ;psect for function ___ftsub
 18149  342E                     ___ftsub:	
 18150                           
 18151                           ;incstack = 0
 18152                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 18153  342E  0022               	movlb	2	; select bank2
 18154  342F  0839               	movf	(___ftsub@f2+2)^(0+256),w
 18155  3430  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 18156  3431  0437               	iorwf	___ftsub@f2^(0+256),w
 18157  3432  1903               	skipnz
 18158  3433  2C36               	goto	l6743
 18159  3434  3080               	movlw	128
 18160  3435  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 18161  3436                     l6743:	
 18162  3436  083A               	movf	___ftsub@f1^(0+256),w
 18163  3437  0021               	movlb	1	; select bank1
 18164  3438  00C1               	movwf	___ftadd@f1^(0+128)
 18165  3439  0022               	movlb	2	; select bank2
 18166  343A  083B               	movf	(___ftsub@f1+1)^(0+256),w
 18167  343B  0021               	movlb	1	; select bank1
 18168  343C  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 18169  343D  0022               	movlb	2	; select bank2
 18170  343E  083C               	movf	(___ftsub@f1+2)^(0+256),w
 18171  343F  0021               	movlb	1	; select bank1
 18172  3440  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 18173  3441  0022               	movlb	2	; select bank2
 18174  3442  0837               	movf	___ftsub@f2^(0+256),w
 18175  3443  0021               	movlb	1	; select bank1
 18176  3444  00C4               	movwf	___ftadd@f2^(0+128)
 18177  3445  0022               	movlb	2	; select bank2
 18178  3446  0838               	movf	(___ftsub@f2+1)^(0+256),w
 18179  3447  0021               	movlb	1	; select bank1
 18180  3448  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 18181  3449  0022               	movlb	2	; select bank2
 18182  344A  0839               	movf	(___ftsub@f2+2)^(0+256),w
 18183  344B  0021               	movlb	1	; select bank1
 18184  344C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 18185  344D  3198  200B         	fcall	___ftadd
 18186  344F  0021               	movlb	1	; select bank1
 18187  3450  0841               	movf	?___ftadd^(0+128),w
 18188  3451  0022               	movlb	2	; select bank2
 18189  3452  00B7               	movwf	?___ftsub^(0+256)
 18190  3453  0021               	movlb	1	; select bank1
 18191  3454  0842               	movf	(?___ftadd+1)^(0+128),w
 18192  3455  0022               	movlb	2	; select bank2
 18193  3456  00B8               	movwf	(?___ftsub+1)^(0+256)
 18194  3457  0021               	movlb	1	; select bank1
 18195  3458  0843               	movf	(?___ftadd+2)^(0+128),w
 18196  3459  0022               	movlb	2	; select bank2
 18197  345A  00B9               	movwf	(?___ftsub+2)^(0+256)
 18198  345B  0008               	return
 18199  345C                     __end_of___ftsub:	
 18200                           
 18201                           	psect	text71
 18202  180B                     __ptext71:	
 18203 ;; *************** function ___ftadd *****************
 18204 ;; Defined at:
 18205 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;  f1              3   33[BANK1 ] float 
 18208 ;;  f2              3   36[BANK1 ] float 
 18209 ;; Auto vars:     Size  Location     Type
 18210 ;;  exp1            1   45[BANK1 ] unsigned char 
 18211 ;;  exp2            1   44[BANK1 ] unsigned char 
 18212 ;;  sign            1   43[BANK1 ] unsigned char 
 18213 ;; Return value:  Size  Location     Type
 18214 ;;                  3   33[BANK1 ] float 
 18215 ;; Registers used:
 18216 ;;		wreg, status,2, status,0, pclath, cstack
 18217 ;; Tracked objects:
 18218 ;;		On entry : 0/0
 18219 ;;		On exit  : 0/0
 18220 ;;		Unchanged: 0/0
 18221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18222 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18223 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18224 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18225 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18226 ;;Total ram usage:       13 bytes
 18227 ;; Hardware stack levels used:    1
 18228 ;; Hardware stack levels required when called:    6
 18229 ;; This function calls:
 18230 ;;		___ftpack
 18231 ;; This function is called by:
 18232 ;;		_map
 18233 ;;		_scaleiA10kPot
 18234 ;;		_modCos
 18235 ;;		_modTri
 18236 ;;		_modSaw
 18237 ;;		_setFrequency
 18238 ;;		_cos
 18239 ;;		___ftsub
 18240 ;;		_sin
 18241 ;;		_eval_poly
 18242 ;;		_floor
 18243 ;;		_log
 18244 ;;		_scalePotValue
 18245 ;; This function uses a non-reentrant model
 18246 ;;
 18247                           
 18248                           
 18249                           ;psect for function ___ftadd
 18250  180B                     ___ftadd:	
 18251                           
 18252                           ;incstack = 0
 18253                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18254  180B  0021               	movlb	1	; select bank1
 18255  180C  0841               	movf	___ftadd@f1^(0+128),w
 18256  180D  00C7               	movwf	??___ftadd^(0+128)
 18257  180E  0842               	movf	(___ftadd@f1+1)^(0+128),w
 18258  180F  00C8               	movwf	(??___ftadd^(0+128)+1)
 18259  1810  0843               	movf	(___ftadd@f1+2)^(0+128),w
 18260  1811  00C9               	movwf	(??___ftadd^(0+128)+2)
 18261  1812  1003               	clrc
 18262  1813  0D48               	rlf	(??___ftadd^(0+128)+1),w
 18263  1814  0D49               	rlf	(??___ftadd^(0+128)+2),w
 18264  1815  00CA               	movwf	(??___ftadd+3)^(0+128)
 18265  1816  084A               	movf	(??___ftadd+3)^(0+128),w
 18266  1817  00CD               	movwf	___ftadd@exp1^(0+128)
 18267  1818  0844               	movf	___ftadd@f2^(0+128),w
 18268  1819  00C7               	movwf	??___ftadd^(0+128)
 18269  181A  0845               	movf	(___ftadd@f2+1)^(0+128),w
 18270  181B  00C8               	movwf	(??___ftadd^(0+128)+1)
 18271  181C  0846               	movf	(___ftadd@f2+2)^(0+128),w
 18272  181D  00C9               	movwf	(??___ftadd^(0+128)+2)
 18273  181E  1003               	clrc
 18274  181F  0D48               	rlf	(??___ftadd^(0+128)+1),w
 18275  1820  0D49               	rlf	(??___ftadd^(0+128)+2),w
 18276  1821  00CA               	movwf	(??___ftadd+3)^(0+128)
 18277  1822  084A               	movf	(??___ftadd+3)^(0+128),w
 18278  1823  00CC               	movwf	___ftadd@exp2^(0+128)
 18279  1824  084D               	movf	___ftadd@exp1^(0+128),w
 18280  1825  1903               	btfsc	3,2
 18281  1826  2833               	goto	l6379
 18282  1827  084C               	movf	___ftadd@exp2^(0+128),w
 18283  1828  024D               	subwf	___ftadd@exp1^(0+128),w
 18284  1829  1803               	skipnc
 18285  182A  283A               	goto	l6383
 18286  182B  034D               	decf	___ftadd@exp1^(0+128),w
 18287  182C  3AFF               	xorlw	255
 18288  182D  074C               	addwf	___ftadd@exp2^(0+128),w
 18289  182E  00C7               	movwf	??___ftadd^(0+128)
 18290  182F  3019               	movlw	25
 18291  1830  0247               	subwf	??___ftadd^(0+128),w
 18292  1831  1C03               	skipc
 18293  1832  283A               	goto	l6383
 18294  1833                     l6379:	
 18295  1833  0844               	movf	___ftadd@f2^(0+128),w
 18296  1834  00C1               	movwf	?___ftadd^(0+128)
 18297  1835  0845               	movf	(___ftadd@f2+1)^(0+128),w
 18298  1836  00C2               	movwf	(?___ftadd+1)^(0+128)
 18299  1837  0846               	movf	(___ftadd@f2+2)^(0+128),w
 18300  1838  00C3               	movwf	(?___ftadd+2)^(0+128)
 18301  1839  0008               	return
 18302  183A                     l6383:	
 18303  183A  084C               	movf	___ftadd@exp2^(0+128),w
 18304  183B  1903               	btfsc	3,2
 18305  183C  0008               	return
 18306  183D  084D               	movf	___ftadd@exp1^(0+128),w
 18307  183E  024C               	subwf	___ftadd@exp2^(0+128),w
 18308  183F  1803               	skipnc
 18309  1840  2849               	goto	l6389
 18310  1841  034C               	decf	___ftadd@exp2^(0+128),w
 18311  1842  3AFF               	xorlw	255
 18312  1843  074D               	addwf	___ftadd@exp1^(0+128),w
 18313  1844  00C7               	movwf	??___ftadd^(0+128)
 18314  1845  3019               	movlw	25
 18315  1846  0247               	subwf	??___ftadd^(0+128),w
 18316  1847  1803               	btfsc	3,0
 18317  1848  0008               	return
 18318  1849                     l6389:	
 18319  1849  3006               	movlw	6
 18320  184A  00C7               	movwf	??___ftadd^(0+128)
 18321  184B  0847               	movf	??___ftadd^(0+128),w
 18322  184C  00CB               	movwf	___ftadd@sign^(0+128)
 18323  184D  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 18324  184E  17CB               	bsf	___ftadd@sign^(0+128),7
 18325  184F  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 18326  1850  174B               	bsf	___ftadd@sign^(0+128),6
 18327  1851  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 18328  1852  30FF               	movlw	255
 18329  1853  05C1               	andwf	___ftadd@f1^(0+128),f
 18330  1854  30FF               	movlw	255
 18331  1855  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 18332  1856  3000               	movlw	0
 18333  1857  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 18334  1858  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 18335  1859  30FF               	movlw	255
 18336  185A  05C4               	andwf	___ftadd@f2^(0+128),f
 18337  185B  30FF               	movlw	255
 18338  185C  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 18339  185D  3000               	movlw	0
 18340  185E  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 18341  185F  084C               	movf	___ftadd@exp2^(0+128),w
 18342  1860  024D               	subwf	___ftadd@exp1^(0+128),w
 18343  1861  1803               	skipnc
 18344  1862  2885               	goto	l6411
 18345  1863                     l6401:	
 18346  1863  3001               	movlw	1
 18347  1864                     u5355:	
 18348  1864  35C4               	lslf	___ftadd@f2^(0+128),f
 18349  1865  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 18350  1866  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 18351  1867  0B89               	decfsz	9,f
 18352  1868  2864               	goto	u5355
 18353  1869  3001               	movlw	1
 18354  186A  02CC               	subwf	___ftadd@exp2^(0+128),f
 18355  186B  084C               	movf	___ftadd@exp2^(0+128),w
 18356  186C  064D               	xorwf	___ftadd@exp1^(0+128),w
 18357  186D  1903               	skipnz
 18358  186E  2880               	goto	l6409
 18359  186F  3001               	movlw	1
 18360  1870  02CB               	subwf	___ftadd@sign^(0+128),f
 18361  1871  084B               	movf	___ftadd@sign^(0+128),w
 18362  1872  3907               	andlw	7
 18363  1873  1903               	btfsc	3,2
 18364  1874  2880               	goto	l6409
 18365  1875  2863               	goto	l6401
 18366  1876                     l6407:	
 18367  1876  3001               	movlw	1
 18368  1877                     u5385:	
 18369  1877  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 18370  1878  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 18371  1879  0CC1               	rrf	___ftadd@f1^(0+128),f
 18372  187A  0B89               	decfsz	9,f
 18373  187B  2877               	goto	u5385
 18374  187C  3001               	movlw	1
 18375  187D  00C7               	movwf	??___ftadd^(0+128)
 18376  187E  0847               	movf	??___ftadd^(0+128),w
 18377  187F  07CD               	addwf	___ftadd@exp1^(0+128),f
 18378  1880                     l6409:	
 18379  1880  084D               	movf	___ftadd@exp1^(0+128),w
 18380  1881  064C               	xorwf	___ftadd@exp2^(0+128),w
 18381  1882  1903               	btfsc	3,2
 18382  1883  28AA               	goto	l2647
 18383  1884  2876               	goto	l6407
 18384  1885                     l6411:	
 18385  1885  084D               	movf	___ftadd@exp1^(0+128),w
 18386  1886  024C               	subwf	___ftadd@exp2^(0+128),w
 18387  1887  1803               	skipnc
 18388  1888  28AA               	goto	l2647
 18389  1889                     l6413:	
 18390  1889  3001               	movlw	1
 18391  188A                     u5415:	
 18392  188A  35C1               	lslf	___ftadd@f1^(0+128),f
 18393  188B  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 18394  188C  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 18395  188D  0B89               	decfsz	9,f
 18396  188E  288A               	goto	u5415
 18397  188F  3001               	movlw	1
 18398  1890  02CD               	subwf	___ftadd@exp1^(0+128),f
 18399  1891  084C               	movf	___ftadd@exp2^(0+128),w
 18400  1892  064D               	xorwf	___ftadd@exp1^(0+128),w
 18401  1893  1903               	skipnz
 18402  1894  28A6               	goto	l6421
 18403  1895  3001               	movlw	1
 18404  1896  02CB               	subwf	___ftadd@sign^(0+128),f
 18405  1897  084B               	movf	___ftadd@sign^(0+128),w
 18406  1898  3907               	andlw	7
 18407  1899  1903               	btfsc	3,2
 18408  189A  28A6               	goto	l6421
 18409  189B  2889               	goto	l6413
 18410  189C                     l6419:	
 18411  189C  3001               	movlw	1
 18412  189D                     u5445:	
 18413  189D  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 18414  189E  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 18415  189F  0CC4               	rrf	___ftadd@f2^(0+128),f
 18416  18A0  0B89               	decfsz	9,f
 18417  18A1  289D               	goto	u5445
 18418  18A2  3001               	movlw	1
 18419  18A3  00C7               	movwf	??___ftadd^(0+128)
 18420  18A4  0847               	movf	??___ftadd^(0+128),w
 18421  18A5  07CC               	addwf	___ftadd@exp2^(0+128),f
 18422  18A6                     l6421:	
 18423  18A6  084D               	movf	___ftadd@exp1^(0+128),w
 18424  18A7  064C               	xorwf	___ftadd@exp2^(0+128),w
 18425  18A8  1D03               	skipz
 18426  18A9  289C               	goto	l6419
 18427  18AA                     l2647:	
 18428  18AA  1FCB               	btfss	___ftadd@sign^(0+128),7
 18429  18AB  28BC               	goto	l6425
 18430  18AC  30FF               	movlw	255
 18431  18AD  06C1               	xorwf	___ftadd@f1^(0+128),f
 18432  18AE  30FF               	movlw	255
 18433  18AF  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 18434  18B0  30FF               	movlw	255
 18435  18B1  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 18436  18B2  3001               	movlw	1
 18437  18B3  07C1               	addwf	___ftadd@f1^(0+128),f
 18438  18B4  3000               	movlw	0
 18439  18B5  1803               	skipnc
 18440  18B6  3001               	movlw	1
 18441  18B7  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 18442  18B8  3000               	movlw	0
 18443  18B9  1803               	skipnc
 18444  18BA  3001               	movlw	1
 18445  18BB  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 18446  18BC                     l6425:	
 18447  18BC  1F4B               	btfss	___ftadd@sign^(0+128),6
 18448  18BD  28CE               	goto	l6429
 18449  18BE  30FF               	movlw	255
 18450  18BF  06C4               	xorwf	___ftadd@f2^(0+128),f
 18451  18C0  30FF               	movlw	255
 18452  18C1  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 18453  18C2  30FF               	movlw	255
 18454  18C3  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 18455  18C4  3001               	movlw	1
 18456  18C5  07C4               	addwf	___ftadd@f2^(0+128),f
 18457  18C6  3000               	movlw	0
 18458  18C7  1803               	skipnc
 18459  18C8  3001               	movlw	1
 18460  18C9  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 18461  18CA  3000               	movlw	0
 18462  18CB  1803               	skipnc
 18463  18CC  3001               	movlw	1
 18464  18CD  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 18465  18CE                     l6429:	
 18466  18CE  01CB               	clrf	___ftadd@sign^(0+128)
 18467  18CF  0841               	movf	___ftadd@f1^(0+128),w
 18468  18D0  07C4               	addwf	___ftadd@f2^(0+128),f
 18469  18D1  0842               	movf	(___ftadd@f1+1)^(0+128),w
 18470  18D2  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 18471  18D3  0843               	movf	(___ftadd@f1+2)^(0+128),w
 18472  18D4  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 18473  18D5  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 18474  18D6  28E9               	goto	l6439
 18475  18D7  30FF               	movlw	255
 18476  18D8  06C4               	xorwf	___ftadd@f2^(0+128),f
 18477  18D9  30FF               	movlw	255
 18478  18DA  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 18479  18DB  30FF               	movlw	255
 18480  18DC  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 18481  18DD  3001               	movlw	1
 18482  18DE  07C4               	addwf	___ftadd@f2^(0+128),f
 18483  18DF  3000               	movlw	0
 18484  18E0  1803               	skipnc
 18485  18E1  3001               	movlw	1
 18486  18E2  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 18487  18E3  3000               	movlw	0
 18488  18E4  1803               	skipnc
 18489  18E5  3001               	movlw	1
 18490  18E6  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 18491  18E7  01CB               	clrf	___ftadd@sign^(0+128)
 18492  18E8  0ACB               	incf	___ftadd@sign^(0+128),f
 18493  18E9                     l6439:	
 18494  18E9  0844               	movf	___ftadd@f2^(0+128),w
 18495  18EA  00A0               	movwf	___ftpack@arg^(0+128)
 18496  18EB  0845               	movf	(___ftadd@f2+1)^(0+128),w
 18497  18EC  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18498  18ED  0846               	movf	(___ftadd@f2+2)^(0+128),w
 18499  18EE  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18500  18EF  084D               	movf	___ftadd@exp1^(0+128),w
 18501  18F0  00C7               	movwf	??___ftadd^(0+128)
 18502  18F1  0847               	movf	??___ftadd^(0+128),w
 18503  18F2  00A3               	movwf	___ftpack@exp^(0+128)
 18504  18F3  084B               	movf	___ftadd@sign^(0+128),w
 18505  18F4  00C8               	movwf	(??___ftadd+1)^(0+128)
 18506  18F5  0848               	movf	(??___ftadd+1)^(0+128),w
 18507  18F6  00A4               	movwf	___ftpack@sign^(0+128)
 18508  18F7  31AD  2541         	fcall	___ftpack
 18509  18F9  0021               	movlb	1	; select bank1
 18510  18FA  0820               	movf	?___ftpack^(0+128),w
 18511  18FB  00C1               	movwf	?___ftadd^(0+128)
 18512  18FC  0821               	movf	(?___ftpack+1)^(0+128),w
 18513  18FD  00C2               	movwf	(?___ftadd+1)^(0+128)
 18514  18FE  0822               	movf	(?___ftpack+2)^(0+128),w
 18515  18FF  00C3               	movwf	(?___ftadd+2)^(0+128)
 18516  1900  0008               	return
 18517  1901                     __end_of___ftadd:	
 18518                           
 18519                           	psect	text72
 18520  3FC8                     __ptext72:	
 18521 ;; *************** function ___ftneg *****************
 18522 ;; Defined at:
 18523 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 18524 ;; Parameters:    Size  Location     Type
 18525 ;;  f1              3   30[BANK1 ] float 
 18526 ;; Auto vars:     Size  Location     Type
 18527 ;;		None
 18528 ;; Return value:  Size  Location     Type
 18529 ;;                  3   30[BANK1 ] float 
 18530 ;; Registers used:
 18531 ;;		wreg
 18532 ;; Tracked objects:
 18533 ;;		On entry : 0/0
 18534 ;;		On exit  : 0/0
 18535 ;;		Unchanged: 0/0
 18536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18537 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18540 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18541 ;;Total ram usage:        3 bytes
 18542 ;; Hardware stack levels used:    1
 18543 ;; Hardware stack levels required when called:    5
 18544 ;; This function calls:
 18545 ;;		Nothing
 18546 ;; This function is called by:
 18547 ;;		_map
 18548 ;;		_scaleiA10kPot
 18549 ;;		_modCos
 18550 ;;		_modTri
 18551 ;;		_modSaw
 18552 ;;		_setFrequency
 18553 ;;		_pow
 18554 ;;		_sin
 18555 ;;		_exp
 18556 ;;		_ldexp
 18557 ;;		_scalePotValue
 18558 ;; This function uses a non-reentrant model
 18559 ;;
 18560                           
 18561                           
 18562                           ;psect for function ___ftneg
 18563  3FC8                     ___ftneg:	
 18564                           
 18565                           ;incstack = 0
 18566                           ; Regs used in ___ftneg: [wreg]
 18567  3FC8  0021               	movlb	1	; select bank1
 18568  3FC9  0840               	movf	(___ftneg@f1+2)^(0+128),w
 18569  3FCA  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 18570  3FCB  043E               	iorwf	___ftneg@f1^(0+128),w
 18571  3FCC  1903               	skipnz
 18572  3FCD  0008               	return
 18573  3FCE  3080               	movlw	128
 18574  3FCF  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 18575  3FD0  0008               	return
 18576  3FD1                     __end_of___ftneg:	
 18577                           
 18578                           	psect	text73
 18579  2434                     __ptext73:	
 18580 ;; *************** function ___ftdiv *****************
 18581 ;; Defined at:
 18582 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 18583 ;; Parameters:    Size  Location     Type
 18584 ;;  f2              3   46[BANK1 ] float 
 18585 ;;  f1              3   49[BANK1 ] float 
 18586 ;; Auto vars:     Size  Location     Type
 18587 ;;  f3              3   57[BANK1 ] float 
 18588 ;;  sign            1   61[BANK1 ] unsigned char 
 18589 ;;  exp             1   60[BANK1 ] unsigned char 
 18590 ;;  cntr            1   56[BANK1 ] unsigned char 
 18591 ;; Return value:  Size  Location     Type
 18592 ;;                  3   46[BANK1 ] float 
 18593 ;; Registers used:
 18594 ;;		wreg, status,2, status,0, pclath, cstack
 18595 ;; Tracked objects:
 18596 ;;		On entry : 0/0
 18597 ;;		On exit  : 0/0
 18598 ;;		Unchanged: 0/0
 18599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18600 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18601 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18602 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18603 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18604 ;;Total ram usage:       16 bytes
 18605 ;; Hardware stack levels used:    1
 18606 ;; Hardware stack levels required when called:    6
 18607 ;; This function calls:
 18608 ;;		___ftpack
 18609 ;; This function is called by:
 18610 ;;		_map
 18611 ;;		_scaleA100kPot
 18612 ;;		_scaleA10kPot
 18613 ;;		_scaleiA10kPot
 18614 ;;		_calcCosArray
 18615 ;;		_getModulationDelayTime
 18616 ;;		_modCos
 18617 ;;		_modTri
 18618 ;;		_modSaw
 18619 ;;		_sin
 18620 ;;		_exp
 18621 ;;		_scalePotValue
 18622 ;;		_scaleiA100kPot
 18623 ;;		_scaleA25kPot
 18624 ;;		_scaleiA25kPot
 18625 ;; This function uses a non-reentrant model
 18626 ;;
 18627                           
 18628                           
 18629                           ;psect for function ___ftdiv
 18630  2434                     ___ftdiv:	
 18631                           
 18632                           ;incstack = 0
 18633                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18634  2434  0021               	movlb	1	; select bank1
 18635  2435  0851               	movf	___ftdiv@f1^(0+128),w
 18636  2436  00D4               	movwf	??___ftdiv^(0+128)
 18637  2437  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 18638  2438  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18639  2439  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 18640  243A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18641  243B  1003               	clrc
 18642  243C  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 18643  243D  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 18644  243E  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18645  243F  0857               	movf	(??___ftdiv+3)^(0+128),w
 18646  2440  00DC               	movwf	___ftdiv@exp^(0+128)
 18647  2441  085C               	movf	___ftdiv@exp^(0+128),w
 18648  2442  1D03               	btfss	3,2
 18649  2443  2C4B               	goto	l6703
 18650  2444  3000               	movlw	0
 18651  2445  00CE               	movwf	?___ftdiv^(0+128)
 18652  2446  3000               	movlw	0
 18653  2447  00CF               	movwf	(?___ftdiv+1)^(0+128)
 18654  2448  3000               	movlw	0
 18655  2449  00D0               	movwf	(?___ftdiv+2)^(0+128)
 18656  244A  0008               	return
 18657  244B                     l6703:	
 18658  244B  084E               	movf	___ftdiv@f2^(0+128),w
 18659  244C  00D4               	movwf	??___ftdiv^(0+128)
 18660  244D  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18661  244E  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18662  244F  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18663  2450  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18664  2451  1003               	clrc
 18665  2452  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 18666  2453  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 18667  2454  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18668  2455  0857               	movf	(??___ftdiv+3)^(0+128),w
 18669  2456  00DD               	movwf	___ftdiv@sign^(0+128)
 18670  2457  085D               	movf	___ftdiv@sign^(0+128),w
 18671  2458  1D03               	btfss	3,2
 18672  2459  2C61               	goto	l6709
 18673  245A  3000               	movlw	0
 18674  245B  00CE               	movwf	?___ftdiv^(0+128)
 18675  245C  3000               	movlw	0
 18676  245D  00CF               	movwf	(?___ftdiv+1)^(0+128)
 18677  245E  3000               	movlw	0
 18678  245F  00D0               	movwf	(?___ftdiv+2)^(0+128)
 18679  2460  0008               	return
 18680  2461                     l6709:	
 18681  2461  3000               	movlw	0
 18682  2462  00D9               	movwf	___ftdiv@f3^(0+128)
 18683  2463  3000               	movlw	0
 18684  2464  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 18685  2465  3000               	movlw	0
 18686  2466  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 18687  2467  3089               	movlw	137
 18688  2468  075D               	addwf	___ftdiv@sign^(0+128),w
 18689  2469  00D4               	movwf	??___ftdiv^(0+128)
 18690  246A  0854               	movf	??___ftdiv^(0+128),w
 18691  246B  02DC               	subwf	___ftdiv@exp^(0+128),f
 18692  246C  0851               	movf	___ftdiv@f1^(0+128),w
 18693  246D  00D4               	movwf	??___ftdiv^(0+128)
 18694  246E  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 18695  246F  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18696  2470  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 18697  2471  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18698  2472  3010               	movlw	16
 18699  2473                     u5945:	
 18700  2473  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 18701  2474  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 18702  2475  0CD4               	rrf	??___ftdiv^(0+128),f
 18703  2476  0B89               	decfsz	9,f
 18704  2477  2C73               	goto	u5945
 18705  2478  0854               	movf	??___ftdiv^(0+128),w
 18706  2479  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18707  247A  0857               	movf	(??___ftdiv+3)^(0+128),w
 18708  247B  00DD               	movwf	___ftdiv@sign^(0+128)
 18709  247C  084E               	movf	___ftdiv@f2^(0+128),w
 18710  247D  00D4               	movwf	??___ftdiv^(0+128)
 18711  247E  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18712  247F  00D5               	movwf	(??___ftdiv^(0+128)+1)
 18713  2480  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18714  2481  00D6               	movwf	(??___ftdiv^(0+128)+2)
 18715  2482  3010               	movlw	16
 18716  2483                     u5955:	
 18717  2483  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 18718  2484  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 18719  2485  0CD4               	rrf	??___ftdiv^(0+128),f
 18720  2486  0B89               	decfsz	9,f
 18721  2487  2C83               	goto	u5955
 18722  2488  0854               	movf	??___ftdiv^(0+128),w
 18723  2489  00D7               	movwf	(??___ftdiv+3)^(0+128)
 18724  248A  0857               	movf	(??___ftdiv+3)^(0+128),w
 18725  248B  06DD               	xorwf	___ftdiv@sign^(0+128),f
 18726  248C  3080               	movlw	128
 18727  248D  00D4               	movwf	??___ftdiv^(0+128)
 18728  248E  0854               	movf	??___ftdiv^(0+128),w
 18729  248F  05DD               	andwf	___ftdiv@sign^(0+128),f
 18730  2490  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 18731  2491  30FF               	movlw	255
 18732  2492  05D1               	andwf	___ftdiv@f1^(0+128),f
 18733  2493  30FF               	movlw	255
 18734  2494  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 18735  2495  3000               	movlw	0
 18736  2496  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 18737  2497  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 18738  2498  30FF               	movlw	255
 18739  2499  05CE               	andwf	___ftdiv@f2^(0+128),f
 18740  249A  30FF               	movlw	255
 18741  249B  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 18742  249C  3000               	movlw	0
 18743  249D  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 18744  249E  3018               	movlw	24
 18745  249F  00D4               	movwf	??___ftdiv^(0+128)
 18746  24A0  0854               	movf	??___ftdiv^(0+128),w
 18747  24A1  00D8               	movwf	___ftdiv@cntr^(0+128)
 18748  24A2                     l6723:	
 18749  24A2  3001               	movlw	1
 18750  24A3                     u5965:	
 18751  24A3  35D9               	lslf	___ftdiv@f3^(0+128),f
 18752  24A4  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 18753  24A5  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 18754  24A6  0B89               	decfsz	9,f
 18755  24A7  2CA3               	goto	u5965
 18756  24A8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18757  24A9  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 18758  24AA  1D03               	skipz
 18759  24AB  2CB2               	goto	u5975
 18760  24AC  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18761  24AD  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 18762  24AE  1D03               	skipz
 18763  24AF  2CB2               	goto	u5975
 18764  24B0  084E               	movf	___ftdiv@f2^(0+128),w
 18765  24B1  0251               	subwf	___ftdiv@f1^(0+128),w
 18766  24B2                     u5975:	
 18767  24B2  1C03               	skipc
 18768  24B3  2CBB               	goto	l6731
 18769  24B4  084E               	movf	___ftdiv@f2^(0+128),w
 18770  24B5  02D1               	subwf	___ftdiv@f1^(0+128),f
 18771  24B6  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 18772  24B7  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 18773  24B8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 18774  24B9  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 18775  24BA  1459               	bsf	___ftdiv@f3^(0+128),0
 18776  24BB                     l6731:	
 18777  24BB  3001               	movlw	1
 18778  24BC                     u5985:	
 18779  24BC  35D1               	lslf	___ftdiv@f1^(0+128),f
 18780  24BD  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 18781  24BE  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 18782  24BF  0B89               	decfsz	9,f
 18783  24C0  2CBC               	goto	u5985
 18784  24C1  3001               	movlw	1
 18785  24C2  02D8               	subwf	___ftdiv@cntr^(0+128),f
 18786  24C3  1D03               	btfss	3,2
 18787  24C4  2CA2               	goto	l6723
 18788  24C5  0859               	movf	___ftdiv@f3^(0+128),w
 18789  24C6  00A0               	movwf	___ftpack@arg^(0+128)
 18790  24C7  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 18791  24C8  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18792  24C9  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 18793  24CA  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 18794  24CB  085C               	movf	___ftdiv@exp^(0+128),w
 18795  24CC  00D4               	movwf	??___ftdiv^(0+128)
 18796  24CD  0854               	movf	??___ftdiv^(0+128),w
 18797  24CE  00A3               	movwf	___ftpack@exp^(0+128)
 18798  24CF  085D               	movf	___ftdiv@sign^(0+128),w
 18799  24D0  00D5               	movwf	(??___ftdiv+1)^(0+128)
 18800  24D1  0855               	movf	(??___ftdiv+1)^(0+128),w
 18801  24D2  00A4               	movwf	___ftpack@sign^(0+128)
 18802  24D3  31AD  2541         	fcall	___ftpack
 18803  24D5  0021               	movlb	1	; select bank1
 18804  24D6  0820               	movf	?___ftpack^(0+128),w
 18805  24D7  00CE               	movwf	?___ftdiv^(0+128)
 18806  24D8  0821               	movf	(?___ftpack+1)^(0+128),w
 18807  24D9  00CF               	movwf	(?___ftdiv+1)^(0+128)
 18808  24DA  0822               	movf	(?___ftpack+2)^(0+128),w
 18809  24DB  00D0               	movwf	(?___ftdiv+2)^(0+128)
 18810  24DC  0008               	return
 18811  24DD                     __end_of___ftdiv:	
 18812                           
 18813                           	psect	text74
 18814  32F0                     __ptext74:	
 18815 ;; *************** function ___awtoft *****************
 18816 ;; Defined at:
 18817 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  c               2    8[BANK1 ] int 
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;  sign            1   13[BANK1 ] unsigned char 
 18822 ;; Return value:  Size  Location     Type
 18823 ;;                  3    8[BANK1 ] float 
 18824 ;; Registers used:
 18825 ;;		wreg, status,2, status,0, pclath, cstack
 18826 ;; Tracked objects:
 18827 ;;		On entry : 0/0
 18828 ;;		On exit  : 0/0
 18829 ;;		Unchanged: 0/0
 18830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18831 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18832 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18833 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18834 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18835 ;;Total ram usage:        6 bytes
 18836 ;; Hardware stack levels used:    1
 18837 ;; Hardware stack levels required when called:    6
 18838 ;; This function calls:
 18839 ;;		___ftpack
 18840 ;; This function is called by:
 18841 ;;		_main
 18842 ;;		_set_subdivision
 18843 ;;		_calcCosArray
 18844 ;;		_getModulationDelayTime
 18845 ;;		_updateModulationArray
 18846 ;;		_setVolume
 18847 ;;		_setFrequency
 18848 ;;		_setSymmetry
 18849 ;;		_exp
 18850 ;;		_log
 18851 ;; This function uses a non-reentrant model
 18852 ;;
 18853                           
 18854                           
 18855                           ;psect for function ___awtoft
 18856  32F0                     ___awtoft:	
 18857                           
 18858                           ;incstack = 0
 18859                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18860  32F0  0021               	movlb	1	; select bank1
 18861  32F1  01AD               	clrf	___awtoft@sign^(0+128)
 18862  32F2  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 18863  32F3  2AFB               	goto	l6693
 18864  32F4  09A8               	comf	___awtoft@c^(0+128),f
 18865  32F5  09A9               	comf	(___awtoft@c+1)^(0+128),f
 18866  32F6  0AA8               	incf	___awtoft@c^(0+128),f
 18867  32F7  1903               	skipnz
 18868  32F8  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 18869  32F9  01AD               	clrf	___awtoft@sign^(0+128)
 18870  32FA  0AAD               	incf	___awtoft@sign^(0+128),f
 18871  32FB                     l6693:	
 18872  32FB  0828               	movf	___awtoft@c^(0+128),w
 18873  32FC  00A0               	movwf	___ftpack@arg^(0+128)
 18874  32FD  0829               	movf	(___awtoft@c+1)^(0+128),w
 18875  32FE  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 18876  32FF  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 18877  3300  308E               	movlw	142
 18878  3301  00AB               	movwf	??___awtoft^(0+128)
 18879  3302  082B               	movf	??___awtoft^(0+128),w
 18880  3303  00A3               	movwf	___ftpack@exp^(0+128)
 18881  3304  082D               	movf	___awtoft@sign^(0+128),w
 18882  3305  00AC               	movwf	(??___awtoft+1)^(0+128)
 18883  3306  082C               	movf	(??___awtoft+1)^(0+128),w
 18884  3307  00A4               	movwf	___ftpack@sign^(0+128)
 18885  3308  31AD  2541         	fcall	___ftpack
 18886  330A  0021               	movlb	1	; select bank1
 18887  330B  0820               	movf	?___ftpack^(0+128),w
 18888  330C  00A8               	movwf	?___awtoft^(0+128)
 18889  330D  0821               	movf	(?___ftpack+1)^(0+128),w
 18890  330E  00A9               	movwf	(?___awtoft+1)^(0+128)
 18891  330F  0822               	movf	(?___ftpack+2)^(0+128),w
 18892  3310  00AA               	movwf	(?___awtoft+2)^(0+128)
 18893  3311  0008               	return
 18894  3312                     __end_of___awtoft:	
 18895                           
 18896                           	psect	text75
 18897  3129                     __ptext75:	
 18898 ;; *************** function _adc_convert *****************
 18899 ;; Defined at:
 18900 ;;		line 122 in file "user.c"
 18901 ;; Parameters:    Size  Location     Type
 18902 ;;  channel         1    wreg     unsigned char 
 18903 ;; Auto vars:     Size  Location     Type
 18904 ;;  channel         1    3[BANK1 ] unsigned char 
 18905 ;; Return value:  Size  Location     Type
 18906 ;;                  2    0[BANK1 ] unsigned int 
 18907 ;; Registers used:
 18908 ;;		wreg, status,2, status,0
 18909 ;; Tracked objects:
 18910 ;;		On entry : 0/0
 18911 ;;		On exit  : 0/0
 18912 ;;		Unchanged: 0/0
 18913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18914 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18915 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18916 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18917 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18918 ;;Total ram usage:        4 bytes
 18919 ;; Hardware stack levels used:    1
 18920 ;; Hardware stack levels required when called:    5
 18921 ;; This function calls:
 18922 ;;		Nothing
 18923 ;; This function is called by:
 18924 ;;		_main
 18925 ;; This function uses a non-reentrant model
 18926 ;;
 18927                           
 18928                           
 18929                           ;psect for function _adc_convert
 18930  3129                     _adc_convert:	
 18931                           
 18932                           ;incstack = 0
 18933                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 18934                           ;adc_convert@channel stored from wreg
 18935  3129  0021               	movlb	1	; select bank1
 18936  312A  00A3               	movwf	adc_convert@channel^(0+128)
 18937                           
 18938                           ;user.c: 123: ADCON0bits.CHS = channel;
 18939  312B  0823               	movf	adc_convert@channel^(0+128),w
 18940  312C  00A2               	movwf	??_adc_convert^(0+128)
 18941  312D  0DA2               	rlf	??_adc_convert^(0+128),f
 18942  312E  0DA2               	rlf	??_adc_convert^(0+128),f
 18943  312F  081D               	movf	29,w	;volatile
 18944  3130  0622               	xorwf	??_adc_convert^(0+128),w
 18945  3131  3983               	andlw	-125
 18946  3132  0622               	xorwf	??_adc_convert^(0+128),w
 18947  3133  009D               	movwf	29	;volatile
 18948                           
 18949                           ;user.c: 124: ADCON0bits.GO = 0b1;
 18950  3134  149D               	bsf	29,1	;volatile
 18951  3135                     l706:	
 18952                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 18953                           
 18954  3135  189D               	btfsc	29,1	;volatile
 18955  3136  2935               	goto	l706
 18956                           
 18957                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 18958  3137  081C               	movf	28,w	;volatile
 18959  3138  00A1               	movwf	(?_adc_convert+1)^(0+128)
 18960  3139  081B               	movf	27,w	;volatile
 18961  313A  00A0               	movwf	?_adc_convert^(0+128)
 18962  313B  0008               	return
 18963  313C                     __end_of_adc_convert:	
 18964                           
 18965                           	psect	text76
 18966  1000                     __ptext76:	
 18967 ;; *************** function ___lbtoft *****************
 18968 ;; Defined at:
 18969 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbtoft.c"
 18970 ;; Parameters:    Size  Location     Type
 18971 ;;  c               1    wreg     unsigned char 
 18972 ;; Auto vars:     Size  Location     Type
 18973 ;;  c               1   15[BANK1 ] unsigned char 
 18974 ;; Return value:  Size  Location     Type
 18975 ;;                  3    8[BANK1 ] float 
 18976 ;; Registers used:
 18977 ;;		wreg, status,2, status,0, pclath, cstack
 18978 ;; Tracked objects:
 18979 ;;		On entry : 0/0
 18980 ;;		On exit  : 0/0
 18981 ;;		Unchanged: 0/0
 18982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18983 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18984 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18985 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18986 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18987 ;;Total ram usage:        8 bytes
 18988 ;; Hardware stack levels used:    1
 18989 ;; Hardware stack levels required when called:    6
 18990 ;; This function calls:
 18991 ;;		___ftpack
 18992 ;; This function is called by:
 18993 ;;		_main
 18994 ;; This function uses a non-reentrant model
 18995 ;;
 18996                           
 18997                           
 18998                           ;psect for function ___lbtoft
 18999  1000                     ___lbtoft:	
 19000                           
 19001                           ;incstack = 0
 19002                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
 19003                           ;___lbtoft@c stored from wreg
 19004  1000  0021               	movlb	1	; select bank1
 19005  1001  00AF               	movwf	___lbtoft@c^(0+128)
 19006  1002  082F               	movf	___lbtoft@c^(0+128),w
 19007  1003  00AB               	movwf	??___lbtoft^(0+128)
 19008  1004  01AC               	clrf	(??___lbtoft^(0+128)+1)
 19009  1005  01AD               	clrf	(??___lbtoft^(0+128)+2)
 19010  1006  082B               	movf	??___lbtoft^(0+128),w
 19011  1007  00A0               	movwf	___ftpack@arg^(0+128)
 19012  1008  082C               	movf	(??___lbtoft+1)^(0+128),w
 19013  1009  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 19014  100A  082D               	movf	(??___lbtoft+2)^(0+128),w
 19015  100B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 19016  100C  308E               	movlw	142
 19017  100D  00AE               	movwf	(??___lbtoft+3)^(0+128)
 19018  100E  082E               	movf	(??___lbtoft+3)^(0+128),w
 19019  100F  00A3               	movwf	___ftpack@exp^(0+128)
 19020  1010  01A4               	clrf	___ftpack@sign^(0+128)
 19021  1011  31AD  2541         	fcall	___ftpack
 19022  1013  0021               	movlb	1	; select bank1
 19023  1014  0820               	movf	?___ftpack^(0+128),w
 19024  1015  00A8               	movwf	?___lbtoft^(0+128)
 19025  1016  0821               	movf	(?___ftpack+1)^(0+128),w
 19026  1017  00A9               	movwf	(?___lbtoft+1)^(0+128)
 19027  1018  0822               	movf	(?___ftpack+2)^(0+128),w
 19028  1019  00AA               	movwf	(?___lbtoft+2)^(0+128)
 19029  101A  0008               	return
 19030  101B                     __end_of___lbtoft:	
 19031                           
 19032                           	psect	text77
 19033  2D41                     __ptext77:	
 19034 ;; *************** function ___ftpack *****************
 19035 ;; Defined at:
 19036 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 19037 ;; Parameters:    Size  Location     Type
 19038 ;;  arg             3    0[BANK1 ] unsigned um
 19039 ;;  exp             1    3[BANK1 ] unsigned char 
 19040 ;;  sign            1    4[BANK1 ] unsigned char 
 19041 ;; Auto vars:     Size  Location     Type
 19042 ;;		None
 19043 ;; Return value:  Size  Location     Type
 19044 ;;                  3    0[BANK1 ] float 
 19045 ;; Registers used:
 19046 ;;		wreg, status,2, status,0
 19047 ;; Tracked objects:
 19048 ;;		On entry : 0/0
 19049 ;;		On exit  : 0/0
 19050 ;;		Unchanged: 0/0
 19051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19052 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19054 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19055 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19056 ;;Total ram usage:        8 bytes
 19057 ;; Hardware stack levels used:    1
 19058 ;; Hardware stack levels required when called:    5
 19059 ;; This function calls:
 19060 ;;		Nothing
 19061 ;; This function is called by:
 19062 ;;		___altoft
 19063 ;;		___awtoft
 19064 ;;		___ftadd
 19065 ;;		___ftdiv
 19066 ;;		___ftmul
 19067 ;;		___lbtoft
 19068 ;;		___lltoft
 19069 ;; This function uses a non-reentrant model
 19070 ;;
 19071                           
 19072                           
 19073                           ;psect for function ___ftpack
 19074  2D41                     ___ftpack:	
 19075                           
 19076                           ;incstack = 0
 19077                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19078  2D41  0021               	movlb	1	; select bank1
 19079  2D42  0823               	movf	___ftpack@exp^(0+128),w
 19080  2D43  1903               	btfsc	3,2
 19081  2D44  2D4A               	goto	l6223
 19082  2D45  0822               	movf	(___ftpack@arg+2)^(0+128),w
 19083  2D46  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 19084  2D47  0420               	iorwf	___ftpack@arg^(0+128),w
 19085  2D48  1D03               	skipz
 19086  2D49  2D5B               	goto	l6229
 19087  2D4A                     l6223:	
 19088  2D4A  3000               	movlw	0
 19089  2D4B  00A0               	movwf	?___ftpack^(0+128)
 19090  2D4C  3000               	movlw	0
 19091  2D4D  00A1               	movwf	(?___ftpack+1)^(0+128)
 19092  2D4E  3000               	movlw	0
 19093  2D4F  00A2               	movwf	(?___ftpack+2)^(0+128)
 19094  2D50  0008               	return
 19095  2D51                     l6227:	
 19096  2D51  3001               	movlw	1
 19097  2D52  00A5               	movwf	??___ftpack^(0+128)
 19098  2D53  0825               	movf	??___ftpack^(0+128),w
 19099  2D54  07A3               	addwf	___ftpack@exp^(0+128),f
 19100  2D55  3001               	movlw	1
 19101  2D56                     u4895:	
 19102  2D56  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 19103  2D57  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 19104  2D58  0CA0               	rrf	___ftpack@arg^(0+128),f
 19105  2D59  0B89               	decfsz	9,f
 19106  2D5A  2D56               	goto	u4895
 19107  2D5B                     l6229:	
 19108  2D5B  30FE               	movlw	254
 19109  2D5C  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 19110  2D5D  1903               	btfsc	3,2
 19111  2D5E  2D74               	goto	l2616
 19112  2D5F  2D51               	goto	l6227
 19113  2D60                     l6231:	
 19114  2D60  3001               	movlw	1
 19115  2D61  00A5               	movwf	??___ftpack^(0+128)
 19116  2D62  0825               	movf	??___ftpack^(0+128),w
 19117  2D63  07A3               	addwf	___ftpack@exp^(0+128),f
 19118  2D64  3001               	movlw	1
 19119  2D65  07A0               	addwf	___ftpack@arg^(0+128),f
 19120  2D66  3000               	movlw	0
 19121  2D67  1803               	skipnc
 19122  2D68  3001               	movlw	1
 19123  2D69  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 19124  2D6A  3000               	movlw	0
 19125  2D6B  1803               	skipnc
 19126  2D6C  3001               	movlw	1
 19127  2D6D  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 19128  2D6E  3001               	movlw	1
 19129  2D6F                     u4915:	
 19130  2D6F  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 19131  2D70  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 19132  2D71  0CA0               	rrf	___ftpack@arg^(0+128),f
 19133  2D72  0B89               	decfsz	9,f
 19134  2D73  2D6F               	goto	u4915
 19135  2D74                     l2616:	
 19136  2D74  30FF               	movlw	255
 19137  2D75  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 19138  2D76  1903               	btfsc	3,2
 19139  2D77  2D81               	goto	l6239
 19140  2D78  2D60               	goto	l6231
 19141  2D79                     l6237:	
 19142  2D79  3001               	movlw	1
 19143  2D7A  02A3               	subwf	___ftpack@exp^(0+128),f
 19144  2D7B  3001               	movlw	1
 19145  2D7C                     u4935:	
 19146  2D7C  35A0               	lslf	___ftpack@arg^(0+128),f
 19147  2D7D  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 19148  2D7E  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 19149  2D7F  0B89               	decfsz	9,f
 19150  2D80  2D7C               	goto	u4935
 19151  2D81                     l6239:	
 19152  2D81  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 19153  2D82  2D87               	goto	l2623
 19154  2D83  3002               	movlw	2
 19155  2D84  0223               	subwf	___ftpack@exp^(0+128),w
 19156  2D85  1803               	skipnc
 19157  2D86  2D79               	goto	l6237
 19158  2D87                     l2623:	
 19159  2D87  1823               	btfsc	___ftpack@exp^(0+128),0
 19160  2D88  2D8F               	goto	l2624
 19161  2D89  30FF               	movlw	255
 19162  2D8A  05A0               	andwf	___ftpack@arg^(0+128),f
 19163  2D8B  307F               	movlw	127
 19164  2D8C  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 19165  2D8D  30FF               	movlw	255
 19166  2D8E  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 19167  2D8F                     l2624:	
 19168  2D8F  1003               	clrc
 19169  2D90  0CA3               	rrf	___ftpack@exp^(0+128),f
 19170  2D91  0823               	movf	___ftpack@exp^(0+128),w
 19171  2D92  00A5               	movwf	??___ftpack^(0+128)
 19172  2D93  01A6               	clrf	(??___ftpack^(0+128)+1)
 19173  2D94  01A7               	clrf	(??___ftpack^(0+128)+2)
 19174  2D95  3010               	movlw	16
 19175  2D96                     u4975:	
 19176  2D96  35A5               	lslf	??___ftpack^(0+128),f
 19177  2D97  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 19178  2D98  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 19179  2D99  0B89               	decfsz	9,f
 19180  2D9A  2D96               	goto	u4975
 19181  2D9B  0825               	movf	??___ftpack^(0+128),w
 19182  2D9C  04A0               	iorwf	___ftpack@arg^(0+128),f
 19183  2D9D  0826               	movf	(??___ftpack+1)^(0+128),w
 19184  2D9E  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 19185  2D9F  0827               	movf	(??___ftpack+2)^(0+128),w
 19186  2DA0  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 19187  2DA1  0824               	movf	___ftpack@sign^(0+128),w
 19188  2DA2  1903               	btfsc	3,2
 19189  2DA3  0008               	return
 19190  2DA4  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 19191  2DA5  0008               	return
 19192  2DA6                     __end_of___ftpack:	
 19193                           
 19194                           	psect	text78
 19195  3270                     __ptext78:	
 19196 ;; *************** function _USARTReadBuffer *****************
 19197 ;; Defined at:
 19198 ;;		line 195 in file "usart_pic16.c"
 19199 ;; Parameters:    Size  Location     Type
 19200 ;;  buff            1    wreg     PTR unsigned char 
 19201 ;;		 -> midiBuff(64), 
 19202 ;;  len             2    2[BANK1 ] unsigned int 
 19203 ;; Auto vars:     Size  Location     Type
 19204 ;;  buff            1    6[BANK1 ] PTR unsigned char 
 19205 ;;		 -> midiBuff(64), 
 19206 ;;  i               2    7[BANK1 ] unsigned int 
 19207 ;; Return value:  Size  Location     Type
 19208 ;;                  1    wreg      void 
 19209 ;; Registers used:
 19210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19211 ;; Tracked objects:
 19212 ;;		On entry : 0/0
 19213 ;;		On exit  : 0/0
 19214 ;;		Unchanged: 0/0
 19215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19216 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19217 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19218 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19219 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19220 ;;Total ram usage:        7 bytes
 19221 ;; Hardware stack levels used:    1
 19222 ;; Hardware stack levels required when called:    6
 19223 ;; This function calls:
 19224 ;;		_USARTReadData
 19225 ;; This function is called by:
 19226 ;;		_main
 19227 ;; This function uses a non-reentrant model
 19228 ;;
 19229                           
 19230                           
 19231                           ;psect for function _USARTReadBuffer
 19232  3270                     _USARTReadBuffer:	
 19233                           
 19234                           ;incstack = 0
 19235                           ; Regs used in _USARTReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19236                           ;USARTReadBuffer@buff stored from wreg
 19237  3270  0021               	movlb	1	; select bank1
 19238  3271  00A6               	movwf	USARTReadBuffer@buff^(0+128)
 19239                           
 19240                           ;usart_pic16.c: 196: uint16_t i;
 19241                           ;usart_pic16.c: 197: for(i=0;i<len;i++) {
 19242  3272  01A7               	clrf	USARTReadBuffer@i^(0+128)
 19243  3273  01A8               	clrf	(USARTReadBuffer@i+1)^(0+128)
 19244  3274                     l7949:	
 19245  3274  0823               	movf	(USARTReadBuffer@len+1)^(0+128),w
 19246  3275  0228               	subwf	(USARTReadBuffer@i+1)^(0+128),w
 19247  3276  1D03               	skipz
 19248  3277  2A7A               	goto	u7545
 19249  3278  0822               	movf	USARTReadBuffer@len^(0+128),w
 19250  3279  0227               	subwf	USARTReadBuffer@i^(0+128),w
 19251  327A                     u7545:	
 19252  327A  1803               	btfsc	3,0
 19253  327B  0008               	return
 19254                           
 19255                           ;usart_pic16.c: 198: buff[i]=USARTReadData();
 19256  327C  31B3  2383  31B2   	fcall	_USARTReadData
 19257  327F  0021               	movlb	1	; select bank1
 19258  3280  00A4               	movwf	??_USARTReadBuffer^(0+128)
 19259  3281  0827               	movf	USARTReadBuffer@i^(0+128),w
 19260  3282  0726               	addwf	USARTReadBuffer@buff^(0+128),w
 19261  3283  00A5               	movwf	(??_USARTReadBuffer+1)^(0+128)
 19262  3284  0825               	movf	(??_USARTReadBuffer+1)^(0+128),w
 19263  3285  0086               	movwf	6
 19264  3286  3003               	movlw	3	; select bank6/7
 19265  3287  0087               	movwf	7
 19266  3288  0824               	movf	??_USARTReadBuffer^(0+128),w
 19267  3289  0081               	movwf	1
 19268  328A  3001               	movlw	1
 19269  328B  07A7               	addwf	USARTReadBuffer@i^(0+128),f
 19270  328C  3000               	movlw	0
 19271  328D  3DA8               	addwfc	(USARTReadBuffer@i+1)^(0+128),f
 19272  328E  2A74               	goto	l7949
 19273  328F                     __end_of_USARTReadBuffer:	
 19274                           
 19275                           	psect	text79
 19276  3383                     __ptext79:	
 19277 ;; *************** function _USARTReadData *****************
 19278 ;; Defined at:
 19279 ;;		line 121 in file "usart_pic16.c"
 19280 ;; Parameters:    Size  Location     Type
 19281 ;;		None
 19282 ;; Auto vars:     Size  Location     Type
 19283 ;;  data            1    1[BANK1 ] unsigned char 
 19284 ;; Return value:  Size  Location     Type
 19285 ;;                  1    wreg      unsigned char 
 19286 ;; Registers used:
 19287 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19288 ;; Tracked objects:
 19289 ;;		On entry : 0/0
 19290 ;;		On exit  : 0/0
 19291 ;;		Unchanged: 0/0
 19292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19294 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19295 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19296 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19297 ;;Total ram usage:        2 bytes
 19298 ;; Hardware stack levels used:    1
 19299 ;; Hardware stack levels required when called:    5
 19300 ;; This function calls:
 19301 ;;		Nothing
 19302 ;; This function is called by:
 19303 ;;		_USARTReadBuffer
 19304 ;;		_USARTFlushBuffer
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           
 19309                           ;psect for function _USARTReadData
 19310  3383                     _USARTReadData:	
 19311                           
 19312                           ;usart_pic16.c: 122: char data;
 19313                           ;usart_pic16.c: 125: if(UQFront == -1)
 19314                           
 19315                           ;incstack = 0
 19316                           ; Regs used in _USARTReadData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19317  3383  0020               	movlb	0	; select bank0
 19318  3384  0A60               	incf	_UQFront,w	;volatile
 19319  3385  1D03               	btfss	3,2
 19320  3386  2B89               	goto	l7573
 19321                           
 19322                           ;usart_pic16.c: 126: return 0;
 19323  3387  3000               	movlw	0
 19324  3388  0008               	return
 19325  3389                     l7573:	
 19326                           
 19327                           ;usart_pic16.c: 128: data = URBuff[UQFront];
 19328  3389  0860               	movf	_UQFront,w
 19329  338A  3E20               	addlw	(low (_URBuff| (0+1024)))& (0+255)
 19330  338B  0086               	movwf	6
 19331  338C  3004               	movlw	4	; select bank8/9
 19332  338D  0087               	movwf	7
 19333  338E  0801               	movf	1,w
 19334  338F  0021               	movlb	1	; select bank1
 19335  3390  00A0               	movwf	??_USARTReadData^(0+128)
 19336  3391  0820               	movf	??_USARTReadData^(0+128),w
 19337  3392  00A1               	movwf	USARTReadData@data^(0+128)
 19338                           
 19339                           ;usart_pic16.c: 130: if(UQFront == UQEnd) {
 19340  3393  0020               	movlb	0	; select bank0
 19341  3394  0860               	movf	_UQFront,w	;volatile
 19342  3395  065F               	xorwf	_UQEnd,w	;volatile
 19343  3396  1D03               	skipz
 19344  3397  2BA0               	goto	l7579
 19345                           
 19346                           ;usart_pic16.c: 133: UQFront = UQEnd = -1;
 19347  3398  30FF               	movlw	255
 19348  3399  00DF               	movwf	_UQEnd	;volatile
 19349  339A  0021               	movlb	1	; select bank1
 19350  339B  00A0               	movwf	??_USARTReadData^(0+128)
 19351  339C  0820               	movf	??_USARTReadData^(0+128),w
 19352  339D  0020               	movlb	0	; select bank0
 19353  339E  00E0               	movwf	_UQFront	;volatile
 19354                           
 19355                           ;usart_pic16.c: 134: } else {
 19356  339F  2BAA               	goto	l7583
 19357  33A0                     l7579:	
 19358                           
 19359                           ;usart_pic16.c: 135: UQFront++;
 19360  33A0  3001               	movlw	1
 19361  33A1  0021               	movlb	1	; select bank1
 19362  33A2  00A0               	movwf	??_USARTReadData^(0+128)
 19363  33A3  0820               	movf	??_USARTReadData^(0+128),w
 19364  33A4  0020               	movlb	0	; select bank0
 19365  33A5  07E0               	addwf	_UQFront,f	;volatile
 19366                           
 19367                           ;usart_pic16.c: 137: if(UQFront==64) {
 19368  33A6  3040               	movlw	64
 19369  33A7  0660               	xorwf	_UQFront,w	;volatile
 19370  33A8  1903               	btfsc	3,2
 19371                           
 19372                           ;usart_pic16.c: 138: UQFront=0;
 19373  33A9  01E0               	clrf	_UQFront	;volatile
 19374  33AA                     l7583:	
 19375                           
 19376                           ;usart_pic16.c: 139: }
 19377                           ;usart_pic16.c: 140: }
 19378                           ;usart_pic16.c: 142: return data;
 19379  33AA  0021               	movlb	1	; select bank1
 19380  33AB  0821               	movf	USARTReadData@data^(0+128),w
 19381  33AC  0008               	return
 19382  33AD                     __end_of_USARTReadData:	
 19383                           
 19384                           	psect	text80
 19385  2949                     __ptext80:	
 19386 ;; *************** function _USARTInit *****************
 19387 ;; Defined at:
 19388 ;;		line 31 in file "usart_pic16.c"
 19389 ;; Parameters:    Size  Location     Type
 19390 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 19391 ;; Auto vars:     Size  Location     Type
 19392 ;;		None
 19393 ;; Return value:  Size  Location     Type
 19394 ;;                  1    wreg      void 
 19395 ;; Registers used:
 19396 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19397 ;; Tracked objects:
 19398 ;;		On entry : 0/0
 19399 ;;		On exit  : 0/0
 19400 ;;		Unchanged: 0/0
 19401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19402 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19404 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19405 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19406 ;;Total ram usage:        3 bytes
 19407 ;; Hardware stack levels used:    1
 19408 ;; Hardware stack levels required when called:    5
 19409 ;; This function calls:
 19410 ;;		Nothing
 19411 ;; This function is called by:
 19412 ;;		_main
 19413 ;; This function uses a non-reentrant model
 19414 ;;
 19415                           
 19416                           
 19417                           ;psect for function _USARTInit
 19418  2949                     _USARTInit:	
 19419                           
 19420                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 19421                           
 19422                           ;incstack = 0
 19423                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 19424  2949  30FF               	movlw	255
 19425  294A  0020               	movlb	0	; select bank0
 19426  294B  00DF               	movwf	_UQEnd	;volatile
 19427  294C  0021               	movlb	1	; select bank1
 19428  294D  00A2               	movwf	??_USARTInit^(0+128)
 19429  294E  0822               	movf	??_USARTInit^(0+128),w
 19430  294F  0020               	movlb	0	; select bank0
 19431  2950  00E0               	movwf	_UQFront	;volatile
 19432                           
 19433                           ;usart_pic16.c: 37: switch(baud_rate) {
 19434  2951  295C               	goto	l7789
 19435  2952                     l7779:	
 19436                           ;usart_pic16.c: 38: case 9600:
 19437                           
 19438                           
 19439                           ;usart_pic16.c: 39: SPBRG=103;
 19440  2952  3067               	movlw	103
 19441  2953  2959               	goto	L22
 19442  2954                     l7781:	
 19443                           ;usart_pic16.c: 41: case 19200:
 19444                           
 19445                           ;usart_pic16.c: 40: break;
 19446                           
 19447                           
 19448                           ;usart_pic16.c: 42: SPBRG=51;
 19449  2954  3033               	movlw	51
 19450  2955  2959               	goto	L22
 19451  2956                     l7783:	
 19452                           ;usart_pic16.c: 44: case 31250:
 19453                           
 19454                           ;usart_pic16.c: 43: break;
 19455                           
 19456                           
 19457                           ;usart_pic16.c: 45: SPBRG = 31;
 19458  2956  301F               	movlw	31
 19459  2957  2959               	goto	L22
 19460  2958                     l7785:	
 19461                           ;usart_pic16.c: 47: case 38400:
 19462                           
 19463                           ;usart_pic16.c: 46: break;
 19464                           
 19465                           
 19466                           ;usart_pic16.c: 48: SPBRG=25;
 19467  2958  3019               	movlw	25
 19468  2959                     L22:	
 19469  2959  0023               	movlb	3	; select bank3
 19470  295A  009B               	movwf	27	;volatile
 19471                           
 19472                           ;usart_pic16.c: 50: }
 19473                           
 19474                           ;usart_pic16.c: 49: break;
 19475  295B  297F               	goto	l2023
 19476  295C                     l7789:	
 19477                           
 19478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19479                           ; Switch size 1, requested type "space"
 19480                           ; Number of cases is 4, Range of values is 37 to 150
 19481                           ; switch strategies available:
 19482                           ; Name         Instructions Cycles
 19483                           ; simple_byte           13     7 (average)
 19484                           ; direct_byte          237     9 (fixed)
 19485                           ; jumptable            263     9 (fixed)
 19486                           ;	Chosen strategy is simple_byte
 19487  295C  0021               	movlb	1	; select bank1
 19488  295D  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 19489  295E  3A25               	xorlw	37	; case 37
 19490  295F  1903               	skipnz
 19491  2960  296B               	goto	l9443
 19492  2961  3A6E               	xorlw	110	; case 75
 19493  2962  1903               	skipnz
 19494  2963  2970               	goto	l9445
 19495  2964  3A31               	xorlw	49	; case 122
 19496  2965  1903               	skipnz
 19497  2966  2975               	goto	l9447
 19498  2967  3AEC               	xorlw	236	; case 150
 19499  2968  1903               	skipnz
 19500  2969  297A               	goto	l9449
 19501  296A  297F               	goto	l2023
 19502  296B                     l9443:	
 19503                           
 19504                           ; Switch size 1, requested type "space"
 19505                           ; Number of cases is 1, Range of values is 128 to 128
 19506                           ; switch strategies available:
 19507                           ; Name         Instructions Cycles
 19508                           ; simple_byte            4     3 (average)
 19509                           ; direct_byte           11     9 (fixed)
 19510                           ; jumptable            263     9 (fixed)
 19511                           ;	Chosen strategy is simple_byte
 19512  296B  0820               	movf	USARTInit@baud_rate^(0+128),w
 19513  296C  3A80               	xorlw	128	; case 128
 19514  296D  1903               	skipnz
 19515  296E  2952               	goto	l7779
 19516  296F  297F               	goto	l2023
 19517  2970                     l9445:	
 19518                           
 19519                           ; Switch size 1, requested type "space"
 19520                           ; Number of cases is 1, Range of values is 0 to 0
 19521                           ; switch strategies available:
 19522                           ; Name         Instructions Cycles
 19523                           ; simple_byte            4     3 (average)
 19524                           ; direct_byte            8     6 (fixed)
 19525                           ; jumptable            260     6 (fixed)
 19526                           ;	Chosen strategy is simple_byte
 19527  2970  0820               	movf	USARTInit@baud_rate^(0+128),w
 19528  2971  3A00               	xorlw	0	; case 0
 19529  2972  1903               	skipnz
 19530  2973  2954               	goto	l7781
 19531  2974  297F               	goto	l2023
 19532  2975                     l9447:	
 19533                           
 19534                           ; Switch size 1, requested type "space"
 19535                           ; Number of cases is 1, Range of values is 18 to 18
 19536                           ; switch strategies available:
 19537                           ; Name         Instructions Cycles
 19538                           ; simple_byte            4     3 (average)
 19539                           ; direct_byte           11     9 (fixed)
 19540                           ; jumptable            263     9 (fixed)
 19541                           ;	Chosen strategy is simple_byte
 19542  2975  0820               	movf	USARTInit@baud_rate^(0+128),w
 19543  2976  3A12               	xorlw	18	; case 18
 19544  2977  1903               	skipnz
 19545  2978  2956               	goto	l7783
 19546  2979  297F               	goto	l2023
 19547  297A                     l9449:	
 19548                           
 19549                           ; Switch size 1, requested type "space"
 19550                           ; Number of cases is 1, Range of values is 0 to 0
 19551                           ; switch strategies available:
 19552                           ; Name         Instructions Cycles
 19553                           ; simple_byte            4     3 (average)
 19554                           ; direct_byte            8     6 (fixed)
 19555                           ; jumptable            260     6 (fixed)
 19556                           ;	Chosen strategy is simple_byte
 19557  297A  0820               	movf	USARTInit@baud_rate^(0+128),w
 19558  297B  3A00               	xorlw	0	; case 0
 19559  297C  1903               	skipnz
 19560  297D  2958               	goto	l7785
 19561  297E  297F               	goto	l2023
 19562  297F                     l2023:	
 19563                           
 19564                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 19565  297F  0023               	movlb	3	; select bank3
 19566  2980  131E               	bcf	30,6	;volatile
 19567                           
 19568                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 19569  2981  169E               	bsf	30,5	;volatile
 19570                           
 19571                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 19572  2982  121E               	bcf	30,4	;volatile
 19573                           
 19574                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 19575  2983  151E               	bsf	30,2	;volatile
 19576                           
 19577                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 19578  2984  179D               	bsf	29,7	;volatile
 19579                           
 19580                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 19581  2985  131D               	bcf	29,6	;volatile
 19582                           
 19583                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 19584  2986  161D               	bsf	29,4	;volatile
 19585                           
 19586                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 19587  2987  119D               	bcf	29,3	;volatile
 19588                           
 19589                           ;usart_pic16.c: 65: RCIE=1;
 19590  2988  0021               	movlb	1	; select bank1
 19591  2989  1691               	bsf	17,5	;volatile
 19592                           
 19593                           ;usart_pic16.c: 66: PEIE=1;
 19594  298A  170B               	bsf	11,6	;volatile
 19595                           
 19596                           ;usart_pic16.c: 68: (GIE = 1);
 19597  298B  178B               	bsf	11,7	;volatile
 19598  298C  0008               	return
 19599  298D                     __end_of_USARTInit:	
 19600                           
 19601                           	psect	text81
 19602  33D7                     __ptext81:	
 19603 ;; *************** function _USARTDataAvailable *****************
 19604 ;; Defined at:
 19605 ;;		line 145 in file "usart_pic16.c"
 19606 ;; Parameters:    Size  Location     Type
 19607 ;;		None
 19608 ;; Auto vars:     Size  Location     Type
 19609 ;;		None
 19610 ;; Return value:  Size  Location     Type
 19611 ;;                  1    wreg      unsigned char 
 19612 ;; Registers used:
 19613 ;;		wreg, status,2, status,0
 19614 ;; Tracked objects:
 19615 ;;		On entry : 0/0
 19616 ;;		On exit  : 0/0
 19617 ;;		Unchanged: 0/0
 19618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19621 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19622 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19623 ;;Total ram usage:        1 bytes
 19624 ;; Hardware stack levels used:    1
 19625 ;; Hardware stack levels required when called:    5
 19626 ;; This function calls:
 19627 ;;		Nothing
 19628 ;; This function is called by:
 19629 ;;		_main
 19630 ;;		_USARTFlushBuffer
 19631 ;; This function uses a non-reentrant model
 19632 ;;
 19633                           
 19634                           
 19635                           ;psect for function _USARTDataAvailable
 19636  33D7                     _USARTDataAvailable:	
 19637                           
 19638                           ;usart_pic16.c: 146: if(UQFront==-1) return 0;
 19639                           
 19640                           ;incstack = 0
 19641                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
 19642  33D7  0020               	movlb	0	; select bank0
 19643  33D8  0A60               	incf	_UQFront,w	;volatile
 19644  33D9  1D03               	btfss	3,2
 19645  33DA  2BDD               	goto	l7923
 19646  33DB  3000               	movlw	0
 19647  33DC  0008               	return
 19648  33DD                     l7923:	
 19649                           
 19650                           ;usart_pic16.c: 148: if(UQFront<UQEnd)
 19651  33DD  0860               	movf	_UQFront,w	;volatile
 19652  33DE  3A80               	xorlw	128
 19653  33DF  0021               	movlb	1	; select bank1
 19654  33E0  00A0               	movwf	??_USARTDataAvailable^(0+128)
 19655  33E1  0020               	movlb	0	; select bank0
 19656  33E2  085F               	movf	_UQEnd,w	;volatile
 19657  33E3  3A80               	xorlw	128
 19658  33E4  0021               	movlb	1	; select bank1
 19659  33E5  02A0               	subwf	??_USARTDataAvailable^(0+128),f
 19660  33E6  1803               	skipnc
 19661  33E7  2BEE               	goto	l7931
 19662                           
 19663                           ;usart_pic16.c: 149: return(UQEnd-UQFront+1);
 19664  33E8  0020               	movlb	0	; select bank0
 19665  33E9  0360               	decf	_UQFront,w	;volatile
 19666  33EA  3AFF               	xorlw	255
 19667  33EB  075F               	addwf	_UQEnd,w	;volatile
 19668  33EC  3E01               	addlw	1
 19669  33ED  0008               	return
 19670  33EE                     l7931:	
 19671                           
 19672                           ;usart_pic16.c: 150: else if(UQFront>UQEnd)
 19673  33EE  0020               	movlb	0	; select bank0
 19674  33EF  085F               	movf	_UQEnd,w	;volatile
 19675  33F0  3A80               	xorlw	128
 19676  33F1  0021               	movlb	1	; select bank1
 19677  33F2  00A0               	movwf	??_USARTDataAvailable^(0+128)
 19678  33F3  0020               	movlb	0	; select bank0
 19679  33F4  0860               	movf	_UQFront,w	;volatile
 19680  33F5  3A80               	xorlw	128
 19681  33F6  0021               	movlb	1	; select bank1
 19682  33F7  02A0               	subwf	??_USARTDataAvailable^(0+128),f
 19683  33F8  1803               	skipnc
 19684  33F9  2C00               	goto	l7939
 19685                           
 19686                           ;usart_pic16.c: 151: return (64-UQFront+UQEnd+1);
 19687  33FA  0020               	movlb	0	; select bank0
 19688  33FB  0360               	decf	_UQFront,w	;volatile
 19689  33FC  3AFF               	xorlw	255
 19690  33FD  075F               	addwf	_UQEnd,w	;volatile
 19691  33FE  3E41               	addlw	65
 19692  33FF  0008               	return
 19693  3400                     l7939:	
 19694                           
 19695                           ;usart_pic16.c: 152: else
 19696                           ;usart_pic16.c: 153: return 1;
 19697  3400  3001               	movlw	1
 19698  3401  0008               	return
 19699  3402                     __end_of_USARTDataAvailable:	
 19700                           
 19701                           	psect	text82
 19702  3334                     __ptext82:	
 19703 ;; *************** function _InitializeTaps *****************
 19704 ;; Defined at:
 19705 ;;		line 246 in file "user.c"
 19706 ;; Parameters:    Size  Location     Type
 19707 ;;		None
 19708 ;; Auto vars:     Size  Location     Type
 19709 ;;  itap            2    1[BANK1 ] int 
 19710 ;; Return value:  Size  Location     Type
 19711 ;;                  1    wreg      void 
 19712 ;; Registers used:
 19713 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19714 ;; Tracked objects:
 19715 ;;		On entry : 0/0
 19716 ;;		On exit  : 0/0
 19717 ;;		Unchanged: 0/0
 19718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19720 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19721 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19722 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19723 ;;Total ram usage:        3 bytes
 19724 ;; Hardware stack levels used:    1
 19725 ;; Hardware stack levels required when called:    5
 19726 ;; This function calls:
 19727 ;;		Nothing
 19728 ;; This function is called by:
 19729 ;;		_main
 19730 ;; This function uses a non-reentrant model
 19731 ;;
 19732                           
 19733                           
 19734                           ;psect for function _InitializeTaps
 19735  3334                     _InitializeTaps:	
 19736                           
 19737                           ;user.c: 247: for (int itap = 0; itap < 12; itap++) {
 19738                           
 19739                           ;incstack = 0
 19740                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 19741  3334  0021               	movlb	1	; select bank1
 19742  3335  01A1               	clrf	InitializeTaps@itap^(0+128)
 19743  3336  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 19744  3337                     L23:	
 19745  3337  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 19746  3338  3A80               	xorlw	128
 19747  3339  00A0               	movwf	??_InitializeTaps^(0+128)
 19748  333A  3080               	movlw	128
 19749  333B  0220               	subwf	??_InitializeTaps^(0+128),w
 19750  333C  1D03               	skipz
 19751  333D  2B40               	goto	u7405
 19752  333E  300C               	movlw	12
 19753  333F  0221               	subwf	InitializeTaps@itap^(0+128),w
 19754  3340                     u7405:	
 19755  3340  1803               	btfsc	3,0
 19756  3341  0008               	return
 19757                           
 19758                           ;user.c: 248: tap[itap] = 0;
 19759  3342  0021               	movlb	1	; select bank1
 19760  3343  0821               	movf	InitializeTaps@itap^(0+128),w
 19761  3344  00A0               	movwf	??_InitializeTaps^(0+128)
 19762  3345  3001               	movlw	1
 19763  3346                     u7415:	
 19764  3346  35A0               	lslf	??_InitializeTaps^(0+128),f
 19765  3347  3EFF               	addlw	-1
 19766  3348  1D03               	skipz
 19767  3349  2B46               	goto	u7415
 19768  334A  3520               	lslf	??_InitializeTaps^(0+128),w
 19769  334B  3EA0               	addlw	(low (_tap| (0+768)))& (0+255)
 19770  334C  0086               	movwf	6
 19771  334D  3003               	movlw	3	; select bank7/8
 19772  334E  0087               	movwf	7
 19773  334F  3000               	movlw	0
 19774  3350  3FC0               	movwi [0]fsr1
 19775  3351  3000               	movlw	0
 19776  3352  3FC1               	movwi [1]fsr1
 19777  3353  3FC2               	movwi [2]fsr1
 19778  3354  3FC3               	movwi [3]fsr1
 19779  3355  3001               	movlw	1
 19780  3356  07A1               	addwf	InitializeTaps@itap^(0+128),f
 19781  3357  3000               	movlw	0
 19782  3358  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 19783  3359  2B37               	goto	L23
 19784  335A                     __end_of_InitializeTaps:	
 19785                           
 19786                           	psect	text83
 19787  3621                     __ptext83:	
 19788 ;; *************** function _InitWaveform *****************
 19789 ;; Defined at:
 19790 ;;		line 20 in file "tactiles.c"
 19791 ;; Parameters:    Size  Location     Type
 19792 ;;		None
 19793 ;; Auto vars:     Size  Location     Type
 19794 ;;		None
 19795 ;; Return value:  Size  Location     Type
 19796 ;;                  1    wreg      void 
 19797 ;; Registers used:
 19798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19799 ;; Tracked objects:
 19800 ;;		On entry : 0/0
 19801 ;;		On exit  : 0/0
 19802 ;;		Unchanged: 0/0
 19803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19806 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19807 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19808 ;;Total ram usage:        1 bytes
 19809 ;; Hardware stack levels used:    1
 19810 ;; Hardware stack levels required when called:   11
 19811 ;; This function calls:
 19812 ;;		_getWaveFormState
 19813 ;;		_set_leds_bottom
 19814 ;; This function is called by:
 19815 ;;		_main
 19816 ;; This function uses a non-reentrant model
 19817 ;;
 19818                           
 19819                           
 19820                           ;psect for function _InitWaveform
 19821  3621                     _InitWaveform:	
 19822                           
 19823                           ;tactiles.c: 21: bottom_push_state = getWaveFormState();
 19824                           
 19825                           ;incstack = 0
 19826                           ; Regs used in _InitWaveform: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19827  3621  31B0  20E3  31B6   	fcall	_getWaveFormState
 19828  3624  0022               	movlb	2	; select bank2
 19829  3625  0855               	movf	(?_getWaveFormState+1)^(0+256),w
 19830  3626  0023               	movlb	3	; select bank3
 19831  3627  00E3               	movwf	(_bottom_push_state+1)^(0+384)
 19832  3628  0022               	movlb	2	; select bank2
 19833  3629  0854               	movf	?_getWaveFormState^(0+256),w
 19834  362A  0023               	movlb	3	; select bank3
 19835  362B  00E2               	movwf	_bottom_push_state^(0+384)
 19836                           
 19837                           ;tactiles.c: 22: if (bottom_push_state < 1 || bottom_push_state > 5) {
 19838  362C  0863               	movf	(_bottom_push_state+1)^(0+384),w
 19839  362D  3A80               	xorlw	128
 19840  362E  0022               	movlb	2	; select bank2
 19841  362F  00D8               	movwf	??_InitWaveform^(0+256)
 19842  3630  3080               	movlw	128
 19843  3631  0258               	subwf	??_InitWaveform^(0+256),w
 19844  3632  1D03               	skipz
 19845  3633  2E37               	goto	u7365
 19846  3634  3001               	movlw	1
 19847  3635  0023               	movlb	3	; select bank3
 19848  3636  0262               	subwf	_bottom_push_state^(0+384),w
 19849  3637                     u7365:	
 19850  3637  1C03               	skipc
 19851  3638  2E47               	goto	l7827
 19852  3639  0023               	movlb	3	; select bank3
 19853  363A  0863               	movf	(_bottom_push_state+1)^(0+384),w
 19854  363B  3A80               	xorlw	128
 19855  363C  0022               	movlb	2	; select bank2
 19856  363D  00D8               	movwf	??_InitWaveform^(0+256)
 19857  363E  3080               	movlw	128
 19858  363F  0258               	subwf	??_InitWaveform^(0+256),w
 19859  3640  1D03               	skipz
 19860  3641  2E45               	goto	u7375
 19861  3642  3006               	movlw	6
 19862  3643  0023               	movlb	3	; select bank3
 19863  3644  0262               	subwf	_bottom_push_state^(0+384),w
 19864  3645                     u7375:	
 19865  3645  1C03               	skipc
 19866  3646  2E4C               	goto	l7829
 19867  3647                     l7827:	
 19868                           
 19869                           ;tactiles.c: 23: bottom_push_state = 1;
 19870  3647  3001               	movlw	1
 19871  3648  0023               	movlb	3	; select bank3
 19872  3649  00E2               	movwf	_bottom_push_state^(0+384)
 19873  364A  3000               	movlw	0
 19874  364B  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 19875  364C                     l7829:	
 19876                           
 19877                           ;tactiles.c: 24: }
 19878                           ;tactiles.c: 25: modulation_changed = 1;
 19879  364C  0024               	movlb	4	; select bank4
 19880  364D  01CE               	clrf	_modulation_changed^(0+512)
 19881  364E  0ACE               	incf	_modulation_changed^(0+512),f
 19882                           
 19883                           ;tactiles.c: 26: set_leds_bottom(bottom_push_state);
 19884  364F  0023               	movlb	3	; select bank3
 19885  3650  0863               	movf	(_bottom_push_state+1)^(0+384),w
 19886  3651  0021               	movlb	1	; select bank1
 19887  3652  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 19888  3653  0023               	movlb	3	; select bank3
 19889  3654  0862               	movf	_bottom_push_state^(0+384),w
 19890  3655  0021               	movlb	1	; select bank1
 19891  3656  00A0               	movwf	set_leds_bottom@x^(0+128)
 19892  3657  31B6  2694         	fcall	_set_leds_bottom
 19893  3659  0008               	return
 19894  365A                     __end_of_InitWaveform:	
 19895                           
 19896                           	psect	text84
 19897  3694                     __ptext84:	
 19898 ;; *************** function _set_leds_bottom *****************
 19899 ;; Defined at:
 19900 ;;		line 53 in file "LEDs.c"
 19901 ;; Parameters:    Size  Location     Type
 19902 ;;  x               2    0[BANK1 ] int 
 19903 ;; Auto vars:     Size  Location     Type
 19904 ;;		None
 19905 ;; Return value:  Size  Location     Type
 19906 ;;                  1    wreg      void 
 19907 ;; Registers used:
 19908 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19909 ;; Tracked objects:
 19910 ;;		On entry : 0/0
 19911 ;;		On exit  : 0/0
 19912 ;;		Unchanged: 0/0
 19913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19914 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19917 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19918 ;;Total ram usage:        2 bytes
 19919 ;; Hardware stack levels used:    1
 19920 ;; Hardware stack levels required when called:    5
 19921 ;; This function calls:
 19922 ;;		Nothing
 19923 ;; This function is called by:
 19924 ;;		_main
 19925 ;;		_ring_tactiles
 19926 ;;		_solidring_tactiles
 19927 ;;		_InitWaveform
 19928 ;;		_read_bottom_tactile
 19929 ;;		_setPresetDisplay
 19930 ;;		_resetRingLEDs
 19931 ;;		_setExpressionDisplay
 19932 ;;		_star_tactiles
 19933 ;; This function uses a non-reentrant model
 19934 ;;
 19935                           
 19936                           
 19937                           ;psect for function _set_leds_bottom
 19938  3694                     _set_leds_bottom:	
 19939                           
 19940                           ;LEDs.c: 54: LATDbits.LATD0 = 0;
 19941                           
 19942                           ;incstack = 0
 19943                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 19944  3694  0022               	movlb	2	; select bank2
 19945  3695  100F               	bcf	15,0	;volatile
 19946                           
 19947                           ;LEDs.c: 55: LATDbits.LATD1 = 0;
 19948  3696  108F               	bcf	15,1	;volatile
 19949                           
 19950                           ;LEDs.c: 56: LATDbits.LATD2 = 0;
 19951  3697  110F               	bcf	15,2	;volatile
 19952                           
 19953                           ;LEDs.c: 57: LATDbits.LATD3 = 0;
 19954  3698  118F               	bcf	15,3	;volatile
 19955                           
 19956                           ;LEDs.c: 58: LATDbits.LATD4 = 0;
 19957  3699  120F               	bcf	15,4	;volatile
 19958                           
 19959                           ;LEDs.c: 59: switch (x) {
 19960  369A  2EB1               	goto	l6607
 19961  369B                     l928:	
 19962                           ;LEDs.c: 60: case 1:
 19963                           
 19964                           
 19965                           ;LEDs.c: 61: LATDbits.LATD0 = 1;
 19966  369B  0022               	movlb	2	; select bank2
 19967  369C  140F               	bsf	15,0	;volatile
 19968                           
 19969                           ;LEDs.c: 62: break;
 19970  369D  0008               	return
 19971  369E                     l930:	
 19972                           ;LEDs.c: 63: case 2:
 19973                           
 19974                           
 19975                           ;LEDs.c: 64: LATDbits.LATD1 = 1;
 19976  369E  0022               	movlb	2	; select bank2
 19977  369F  148F               	bsf	15,1	;volatile
 19978                           
 19979                           ;LEDs.c: 65: break;
 19980  36A0  0008               	return
 19981  36A1                     l931:	
 19982                           ;LEDs.c: 66: case 3:
 19983                           
 19984                           
 19985                           ;LEDs.c: 67: LATDbits.LATD2 = 1;
 19986  36A1  0022               	movlb	2	; select bank2
 19987  36A2  150F               	bsf	15,2	;volatile
 19988                           
 19989                           ;LEDs.c: 68: break;
 19990  36A3  0008               	return
 19991  36A4                     l932:	
 19992                           ;LEDs.c: 69: case 4:
 19993                           
 19994                           
 19995                           ;LEDs.c: 70: LATDbits.LATD3 = 1;
 19996  36A4  0022               	movlb	2	; select bank2
 19997  36A5  158F               	bsf	15,3	;volatile
 19998                           
 19999                           ;LEDs.c: 71: break;
 20000  36A6  0008               	return
 20001  36A7                     l933:	
 20002                           ;LEDs.c: 72: case 5:
 20003                           
 20004                           
 20005                           ;LEDs.c: 73: LATDbits.LATD4 = 1;
 20006  36A7  0022               	movlb	2	; select bank2
 20007  36A8  160F               	bsf	15,4	;volatile
 20008                           
 20009                           ;LEDs.c: 76: break;
 20010                           
 20011                           ;LEDs.c: 75: case 6:
 20012                           
 20013                           ;LEDs.c: 74: break;
 20014  36A9  0008               	return
 20015  36AA                     l935:	
 20016                           ;LEDs.c: 77: case 100:
 20017                           
 20018                           
 20019                           ;LEDs.c: 78: LATDbits.LATD0 = 1;
 20020  36AA  0022               	movlb	2	; select bank2
 20021  36AB  140F               	bsf	15,0	;volatile
 20022                           
 20023                           ;LEDs.c: 79: LATDbits.LATD1 = 1;
 20024  36AC  148F               	bsf	15,1	;volatile
 20025                           
 20026                           ;LEDs.c: 80: LATDbits.LATD2 = 1;
 20027  36AD  150F               	bsf	15,2	;volatile
 20028                           
 20029                           ;LEDs.c: 81: LATDbits.LATD3 = 1;
 20030  36AE  158F               	bsf	15,3	;volatile
 20031                           
 20032                           ;LEDs.c: 82: LATDbits.LATD4 = 1;
 20033  36AF  160F               	bsf	15,4	;volatile
 20034                           
 20035                           ;LEDs.c: 84: }
 20036                           
 20037                           ;LEDs.c: 83: break;
 20038  36B0  0008               	return
 20039  36B1                     l6607:	
 20040                           
 20041                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20042                           ; Switch size 1, requested type "space"
 20043                           ; Number of cases is 1, Range of values is 0 to 0
 20044                           ; switch strategies available:
 20045                           ; Name         Instructions Cycles
 20046                           ; simple_byte            4     3 (average)
 20047                           ; direct_byte            8     6 (fixed)
 20048                           ; jumptable            260     6 (fixed)
 20049                           ;	Chosen strategy is simple_byte
 20050  36B1  0021               	movlb	1	; select bank1
 20051  36B2  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 20052  36B3  3A00               	xorlw	0	; case 0
 20053  36B4  1903               	skipnz
 20054  36B5  2EB7               	goto	l9451
 20055  36B6  2ECE               	goto	l936
 20056  36B7                     l9451:	
 20057                           
 20058                           ; Switch size 1, requested type "space"
 20059                           ; Number of cases is 7, Range of values is 1 to 100
 20060                           ; switch strategies available:
 20061                           ; Name         Instructions Cycles
 20062                           ; simple_byte           22    12 (average)
 20063                           ; direct_byte          209     9 (fixed)
 20064                           ; jumptable            263     9 (fixed)
 20065                           ;	Chosen strategy is simple_byte
 20066  36B7  0820               	movf	set_leds_bottom@x^(0+128),w
 20067  36B8  3A01               	xorlw	1	; case 1
 20068  36B9  1903               	skipnz
 20069  36BA  2E9B               	goto	l928
 20070  36BB  3A03               	xorlw	3	; case 2
 20071  36BC  1903               	skipnz
 20072  36BD  2E9E               	goto	l930
 20073  36BE  3A01               	xorlw	1	; case 3
 20074  36BF  1903               	skipnz
 20075  36C0  2EA1               	goto	l931
 20076  36C1  3A07               	xorlw	7	; case 4
 20077  36C2  1903               	skipnz
 20078  36C3  2EA4               	goto	l932
 20079  36C4  3A01               	xorlw	1	; case 5
 20080  36C5  1903               	skipnz
 20081  36C6  2EA7               	goto	l933
 20082  36C7  3A03               	xorlw	3	; case 6
 20083  36C8  1903               	skipnz
 20084  36C9  2ECE               	goto	l936
 20085  36CA  3A62               	xorlw	98	; case 100
 20086  36CB  1903               	skipnz
 20087  36CC  2EAA               	goto	l935
 20088  36CD  2ECE               	goto	l936
 20089  36CE                     l936:	
 20090  36CE  0008               	return
 20091  36CF                     __end_of_set_leds_bottom:	
 20092                           
 20093                           	psect	text85
 20094  30E3                     __ptext85:	
 20095 ;; *************** function _getWaveFormState *****************
 20096 ;; Defined at:
 20097 ;;		line 348 in file "state_manager.c"
 20098 ;; Parameters:    Size  Location     Type
 20099 ;;		None
 20100 ;; Auto vars:     Size  Location     Type
 20101 ;;		None
 20102 ;; Return value:  Size  Location     Type
 20103 ;;                  2   52[BANK2 ] int 
 20104 ;; Registers used:
 20105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20106 ;; Tracked objects:
 20107 ;;		On entry : 0/0
 20108 ;;		On exit  : 0/0
 20109 ;;		Unchanged: 0/0
 20110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20111 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20113 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20114 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20115 ;;Total ram usage:        4 bytes
 20116 ;; Hardware stack levels used:    1
 20117 ;; Hardware stack levels required when called:   10
 20118 ;; This function calls:
 20119 ;;		_initStateManager
 20120 ;; This function is called by:
 20121 ;;		_InitWaveform
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           
 20126                           ;psect for function _getWaveFormState
 20127  30E3                     _getWaveFormState:	
 20128                           
 20129                           ;state_manager.c: 349: if (isStateInitialized != 1) {
 20130                           
 20131                           ;incstack = 0
 20132                           ; Regs used in _getWaveFormState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20133  30E3  0020               	movlb	0	; select bank0
 20134  30E4  035D               	decf	_isStateInitialized,w
 20135  30E5  045E               	iorwf	_isStateInitialized+1,w
 20136  30E6  1903               	btfsc	3,2
 20137  30E7  28EA               	goto	l7465
 20138                           
 20139                           ;state_manager.c: 350: initStateManager();
 20140  30E8  31BF  2791         	fcall	_initStateManager
 20141  30EA                     l7465:	
 20142                           
 20143                           ;state_manager.c: 351: }
 20144                           ;state_manager.c: 352: return pedalState.waveForm;
 20145  30EA  0025               	movlb	5	; select bank5
 20146  30EB  0839               	movf	(_pedalState^(0+640)+5),w
 20147  30EC  0022               	movlb	2	; select bank2
 20148  30ED  00D6               	movwf	??_getWaveFormState^(0+256)
 20149  30EE  01D7               	clrf	(??_getWaveFormState^(0+256)+1)
 20150  30EF  0856               	movf	??_getWaveFormState^(0+256),w
 20151  30F0  00D4               	movwf	?_getWaveFormState^(0+256)
 20152  30F1  0857               	movf	(??_getWaveFormState+1)^(0+256),w
 20153  30F2  00D5               	movwf	(?_getWaveFormState+1)^(0+256)
 20154  30F3  0008               	return
 20155  30F4                     __end_of_getWaveFormState:	
 20156                           
 20157                           	psect	text86
 20158  370B                     __ptext86:	
 20159 ;; *************** function _InitSubdivision *****************
 20160 ;; Defined at:
 20161 ;;		line 62 in file "tactiles.c"
 20162 ;; Parameters:    Size  Location     Type
 20163 ;;		None
 20164 ;; Auto vars:     Size  Location     Type
 20165 ;;		None
 20166 ;; Return value:  Size  Location     Type
 20167 ;;                  1    wreg      void 
 20168 ;; Registers used:
 20169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20170 ;; Tracked objects:
 20171 ;;		On entry : 0/0
 20172 ;;		On exit  : 0/0
 20173 ;;		Unchanged: 0/0
 20174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20177 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20178 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20179 ;;Total ram usage:        1 bytes
 20180 ;; Hardware stack levels used:    1
 20181 ;; Hardware stack levels required when called:   11
 20182 ;; This function calls:
 20183 ;;		_getSubdivisionState
 20184 ;;		_set_leds_top
 20185 ;; This function is called by:
 20186 ;;		_main
 20187 ;; This function uses a non-reentrant model
 20188 ;;
 20189                           
 20190                           
 20191                           ;psect for function _InitSubdivision
 20192  370B                     _InitSubdivision:	
 20193                           
 20194                           ;tactiles.c: 63: top_push_state = getSubdivisionState();
 20195                           
 20196                           ;incstack = 0
 20197                           ; Regs used in _InitSubdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20198  370B  31B0  20D2  31B7   	fcall	_getSubdivisionState
 20199  370E  0022               	movlb	2	; select bank2
 20200  370F  0855               	movf	(?_getSubdivisionState+1)^(0+256),w
 20201  3710  0020               	movlb	0	; select bank0
 20202  3711  00ED               	movwf	_top_push_state+1
 20203  3712  0022               	movlb	2	; select bank2
 20204  3713  0854               	movf	?_getSubdivisionState^(0+256),w
 20205  3714  0020               	movlb	0	; select bank0
 20206  3715  00EC               	movwf	_top_push_state
 20207                           
 20208                           ;tactiles.c: 64: if (top_push_state < 1 || top_push_state > 6) {
 20209  3716  086D               	movf	_top_push_state+1,w
 20210  3717  3A80               	xorlw	128
 20211  3718  0022               	movlb	2	; select bank2
 20212  3719  00D8               	movwf	??_InitSubdivision^(0+256)
 20213  371A  3080               	movlw	128
 20214  371B  0258               	subwf	??_InitSubdivision^(0+256),w
 20215  371C  1D03               	skipz
 20216  371D  2F21               	goto	u7385
 20217  371E  3001               	movlw	1
 20218  371F  0020               	movlb	0	; select bank0
 20219  3720  026C               	subwf	_top_push_state,w
 20220  3721                     u7385:	
 20221  3721  1C03               	skipc
 20222  3722  2F31               	goto	l7839
 20223  3723  0020               	movlb	0	; select bank0
 20224  3724  086D               	movf	_top_push_state+1,w
 20225  3725  3A80               	xorlw	128
 20226  3726  0022               	movlb	2	; select bank2
 20227  3727  00D8               	movwf	??_InitSubdivision^(0+256)
 20228  3728  3080               	movlw	128
 20229  3729  0258               	subwf	??_InitSubdivision^(0+256),w
 20230  372A  1D03               	skipz
 20231  372B  2F2F               	goto	u7395
 20232  372C  3007               	movlw	7
 20233  372D  0020               	movlb	0	; select bank0
 20234  372E  026C               	subwf	_top_push_state,w
 20235  372F                     u7395:	
 20236  372F  1C03               	skipc
 20237  3730  2F36               	goto	l7841
 20238  3731                     l7839:	
 20239                           
 20240                           ;tactiles.c: 65: top_push_state = 6;
 20241  3731  3006               	movlw	6
 20242  3732  0020               	movlb	0	; select bank0
 20243  3733  00EC               	movwf	_top_push_state
 20244  3734  3000               	movlw	0
 20245  3735  00ED               	movwf	_top_push_state+1
 20246  3736                     l7841:	
 20247                           
 20248                           ;tactiles.c: 66: }
 20249                           ;tactiles.c: 67: set_leds_top(top_push_state, 1);
 20250  3736  0020               	movlb	0	; select bank0
 20251  3737  086D               	movf	_top_push_state+1,w
 20252  3738  0021               	movlb	1	; select bank1
 20253  3739  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 20254  373A  0020               	movlb	0	; select bank0
 20255  373B  086C               	movf	_top_push_state,w
 20256  373C  0021               	movlb	1	; select bank1
 20257  373D  00A0               	movwf	set_leds_top@x^(0+128)
 20258  373E  3001               	movlw	1
 20259  373F  00A2               	movwf	set_leds_top@ledState^(0+128)
 20260  3740  3000               	movlw	0
 20261  3741  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 20262  3742  31AC  2499         	fcall	_set_leds_top
 20263                           
 20264                           ;tactiles.c: 68: mod_time_changed = 1;
 20265  3744  0024               	movlb	4	; select bank4
 20266  3745  01EC               	clrf	_mod_time_changed^(0+512)
 20267  3746  0AEC               	incf	_mod_time_changed^(0+512),f
 20268  3747  0008               	return
 20269  3748                     __end_of_InitSubdivision:	
 20270                           
 20271                           	psect	text87
 20272  2C99                     __ptext87:	
 20273 ;; *************** function _set_leds_top *****************
 20274 ;; Defined at:
 20275 ;;		line 18 in file "LEDs.c"
 20276 ;; Parameters:    Size  Location     Type
 20277 ;;  x               2    0[BANK1 ] int 
 20278 ;;  ledState        2    2[BANK1 ] int 
 20279 ;; Auto vars:     Size  Location     Type
 20280 ;;		None
 20281 ;; Return value:  Size  Location     Type
 20282 ;;                  1    wreg      void 
 20283 ;; Registers used:
 20284 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20285 ;; Tracked objects:
 20286 ;;		On entry : 0/0
 20287 ;;		On exit  : 0/0
 20288 ;;		Unchanged: 0/0
 20289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20290 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20293 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20294 ;;Total ram usage:        4 bytes
 20295 ;; Hardware stack levels used:    1
 20296 ;; Hardware stack levels required when called:    5
 20297 ;; This function calls:
 20298 ;;		Nothing
 20299 ;; This function is called by:
 20300 ;;		_main
 20301 ;;		_ring_tactiles
 20302 ;;		_solidring_tactiles
 20303 ;;		_InitSubdivision
 20304 ;;		_read_top_tactile
 20305 ;;		_setPresetDisplay
 20306 ;;		_resetRingLEDs
 20307 ;;		_setExpressionDisplay
 20308 ;;		_star_tactiles
 20309 ;; This function uses a non-reentrant model
 20310 ;;
 20311                           
 20312                           
 20313                           ;psect for function _set_leds_top
 20314  2C99                     _set_leds_top:	
 20315                           
 20316                           ;LEDs.c: 19: LATFbits.LATF0 = 0;
 20317                           
 20318                           ;incstack = 0
 20319                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 20320  2C99  0027               	movlb	7	; select bank7
 20321  2C9A  100C               	bcf	12,0	;volatile
 20322                           
 20323                           ;LEDs.c: 20: LATFbits.LATF1 = 0;
 20324  2C9B  108C               	bcf	12,1	;volatile
 20325                           
 20326                           ;LEDs.c: 21: LATFbits.LATF2 = 0;
 20327  2C9C  110C               	bcf	12,2	;volatile
 20328                           
 20329                           ;LEDs.c: 22: LATFbits.LATF3 = 0;
 20330  2C9D  118C               	bcf	12,3	;volatile
 20331                           
 20332                           ;LEDs.c: 23: LATFbits.LATF4 = 0;
 20333  2C9E  120C               	bcf	12,4	;volatile
 20334                           
 20335                           ;LEDs.c: 24: switch (x) {
 20336  2C9F  2CCF               	goto	l6597
 20337  2CA0                     l6585:	
 20338                           ;LEDs.c: 25: case 1:
 20339                           
 20340                           
 20341                           ;LEDs.c: 26: LATFbits.LATF0 = ledState;
 20342  2CA0  0021               	movlb	1	; select bank1
 20343  2CA1  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20344  2CA2  0027               	movlb	7	; select bank7
 20345  2CA3  1C03               	skipc
 20346  2CA4  100C               	bcf	12,0	;volatile
 20347  2CA5  1803               	skipnc
 20348  2CA6  140C               	bsf	12,0	;volatile
 20349                           
 20350                           ;LEDs.c: 27: break;
 20351  2CA7  0008               	return
 20352  2CA8                     l6587:	
 20353                           ;LEDs.c: 28: case 2:
 20354                           
 20355                           
 20356                           ;LEDs.c: 29: LATFbits.LATF1 = ledState;
 20357  2CA8  0021               	movlb	1	; select bank1
 20358  2CA9  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20359  2CAA  0027               	movlb	7	; select bank7
 20360  2CAB  1C03               	skipc
 20361  2CAC  108C               	bcf	12,1	;volatile
 20362  2CAD  1803               	skipnc
 20363  2CAE  148C               	bsf	12,1	;volatile
 20364                           
 20365                           ;LEDs.c: 30: break;
 20366  2CAF  0008               	return
 20367  2CB0                     l6589:	
 20368                           ;LEDs.c: 31: case 3:
 20369                           
 20370                           
 20371                           ;LEDs.c: 32: LATFbits.LATF2 = ledState;
 20372  2CB0  0021               	movlb	1	; select bank1
 20373  2CB1  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20374  2CB2  0027               	movlb	7	; select bank7
 20375  2CB3  1C03               	skipc
 20376  2CB4  110C               	bcf	12,2	;volatile
 20377  2CB5  1803               	skipnc
 20378  2CB6  150C               	bsf	12,2	;volatile
 20379                           
 20380                           ;LEDs.c: 33: break;
 20381  2CB7  0008               	return
 20382  2CB8                     l6591:	
 20383                           ;LEDs.c: 34: case 4:
 20384                           
 20385                           
 20386                           ;LEDs.c: 35: LATFbits.LATF3 = ledState;
 20387  2CB8  0021               	movlb	1	; select bank1
 20388  2CB9  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20389  2CBA  0027               	movlb	7	; select bank7
 20390  2CBB  1C03               	skipc
 20391  2CBC  118C               	bcf	12,3	;volatile
 20392  2CBD  1803               	skipnc
 20393  2CBE  158C               	bsf	12,3	;volatile
 20394                           
 20395                           ;LEDs.c: 36: break;
 20396  2CBF  0008               	return
 20397  2CC0                     l6593:	
 20398                           ;LEDs.c: 37: case 5:
 20399                           
 20400                           
 20401                           ;LEDs.c: 38: LATFbits.LATF4 = ledState;
 20402  2CC0  0021               	movlb	1	; select bank1
 20403  2CC1  0C22               	rrf	set_leds_top@ledState^(0+128),w
 20404  2CC2  0027               	movlb	7	; select bank7
 20405  2CC3  1C03               	skipc
 20406  2CC4  120C               	bcf	12,4	;volatile
 20407  2CC5  1803               	skipnc
 20408  2CC6  160C               	bsf	12,4	;volatile
 20409                           
 20410                           ;LEDs.c: 41: break;
 20411                           
 20412                           ;LEDs.c: 40: case 6:
 20413                           
 20414                           ;LEDs.c: 39: break;
 20415  2CC7  0008               	return
 20416  2CC8                     l923:	
 20417                           ;LEDs.c: 42: case 100:
 20418                           
 20419                           
 20420                           ;LEDs.c: 43: LATFbits.LATF0 = 1;
 20421  2CC8  0027               	movlb	7	; select bank7
 20422  2CC9  140C               	bsf	12,0	;volatile
 20423                           
 20424                           ;LEDs.c: 44: LATFbits.LATF1 = 1;
 20425  2CCA  148C               	bsf	12,1	;volatile
 20426                           
 20427                           ;LEDs.c: 45: LATFbits.LATF2 = 1;
 20428  2CCB  150C               	bsf	12,2	;volatile
 20429                           
 20430                           ;LEDs.c: 46: LATFbits.LATF3 = 1;
 20431  2CCC  158C               	bsf	12,3	;volatile
 20432                           
 20433                           ;LEDs.c: 47: LATFbits.LATF4 = 1;
 20434  2CCD  160C               	bsf	12,4	;volatile
 20435                           
 20436                           ;LEDs.c: 49: }
 20437                           
 20438                           ;LEDs.c: 48: break;
 20439  2CCE  0008               	return
 20440  2CCF                     l6597:	
 20441                           
 20442                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20443                           ; Switch size 1, requested type "space"
 20444                           ; Number of cases is 1, Range of values is 0 to 0
 20445                           ; switch strategies available:
 20446                           ; Name         Instructions Cycles
 20447                           ; simple_byte            4     3 (average)
 20448                           ; direct_byte            8     6 (fixed)
 20449                           ; jumptable            260     6 (fixed)
 20450                           ;	Chosen strategy is simple_byte
 20451  2CCF  0021               	movlb	1	; select bank1
 20452  2CD0  0821               	movf	(set_leds_top@x+1)^(0+128),w
 20453  2CD1  3A00               	xorlw	0	; case 0
 20454  2CD2  1903               	skipnz
 20455  2CD3  2CD5               	goto	l9453
 20456  2CD4  2CEC               	goto	l924
 20457  2CD5                     l9453:	
 20458                           
 20459                           ; Switch size 1, requested type "space"
 20460                           ; Number of cases is 7, Range of values is 1 to 100
 20461                           ; switch strategies available:
 20462                           ; Name         Instructions Cycles
 20463                           ; simple_byte           22    12 (average)
 20464                           ; direct_byte          209     9 (fixed)
 20465                           ; jumptable            263     9 (fixed)
 20466                           ;	Chosen strategy is simple_byte
 20467  2CD5  0820               	movf	set_leds_top@x^(0+128),w
 20468  2CD6  3A01               	xorlw	1	; case 1
 20469  2CD7  1903               	skipnz
 20470  2CD8  2CA0               	goto	l6585
 20471  2CD9  3A03               	xorlw	3	; case 2
 20472  2CDA  1903               	skipnz
 20473  2CDB  2CA8               	goto	l6587
 20474  2CDC  3A01               	xorlw	1	; case 3
 20475  2CDD  1903               	skipnz
 20476  2CDE  2CB0               	goto	l6589
 20477  2CDF  3A07               	xorlw	7	; case 4
 20478  2CE0  1903               	skipnz
 20479  2CE1  2CB8               	goto	l6591
 20480  2CE2  3A01               	xorlw	1	; case 5
 20481  2CE3  1903               	skipnz
 20482  2CE4  2CC0               	goto	l6593
 20483  2CE5  3A03               	xorlw	3	; case 6
 20484  2CE6  1903               	skipnz
 20485  2CE7  2CEC               	goto	l924
 20486  2CE8  3A62               	xorlw	98	; case 100
 20487  2CE9  1903               	skipnz
 20488  2CEA  2CC8               	goto	l923
 20489  2CEB  2CEC               	goto	l924
 20490  2CEC                     l924:	
 20491  2CEC  0008               	return
 20492  2CED                     __end_of_set_leds_top:	
 20493                           
 20494                           	psect	text88
 20495  30D2                     __ptext88:	
 20496 ;; *************** function _getSubdivisionState *****************
 20497 ;; Defined at:
 20498 ;;		line 335 in file "state_manager.c"
 20499 ;; Parameters:    Size  Location     Type
 20500 ;;		None
 20501 ;; Auto vars:     Size  Location     Type
 20502 ;;		None
 20503 ;; Return value:  Size  Location     Type
 20504 ;;                  2   52[BANK2 ] int 
 20505 ;; Registers used:
 20506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20507 ;; Tracked objects:
 20508 ;;		On entry : 0/0
 20509 ;;		On exit  : 0/0
 20510 ;;		Unchanged: 0/0
 20511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20512 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20514 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20515 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20516 ;;Total ram usage:        4 bytes
 20517 ;; Hardware stack levels used:    1
 20518 ;; Hardware stack levels required when called:   10
 20519 ;; This function calls:
 20520 ;;		_initStateManager
 20521 ;; This function is called by:
 20522 ;;		_InitSubdivision
 20523 ;; This function uses a non-reentrant model
 20524 ;;
 20525                           
 20526                           
 20527                           ;psect for function _getSubdivisionState
 20528  30D2                     _getSubdivisionState:	
 20529                           
 20530                           ;state_manager.c: 336: if (isStateInitialized != 1) {
 20531                           
 20532                           ;incstack = 0
 20533                           ; Regs used in _getSubdivisionState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20534  30D2  0020               	movlb	0	; select bank0
 20535  30D3  035D               	decf	_isStateInitialized,w
 20536  30D4  045E               	iorwf	_isStateInitialized+1,w
 20537  30D5  1903               	btfsc	3,2
 20538  30D6  28D9               	goto	l7473
 20539                           
 20540                           ;state_manager.c: 337: initStateManager();
 20541  30D7  31BF  2791         	fcall	_initStateManager
 20542  30D9                     l7473:	
 20543                           
 20544                           ;state_manager.c: 338: }
 20545                           ;state_manager.c: 339: return pedalState.subdivision;
 20546  30D9  0025               	movlb	5	; select bank5
 20547  30DA  0838               	movf	(_pedalState^(0+640)+4),w
 20548  30DB  0022               	movlb	2	; select bank2
 20549  30DC  00D6               	movwf	??_getSubdivisionState^(0+256)
 20550  30DD  01D7               	clrf	(??_getSubdivisionState^(0+256)+1)
 20551  30DE  0856               	movf	??_getSubdivisionState^(0+256),w
 20552  30DF  00D4               	movwf	?_getSubdivisionState^(0+256)
 20553  30E0  0857               	movf	(??_getSubdivisionState+1)^(0+256),w
 20554  30E1  00D5               	movwf	(?_getSubdivisionState+1)^(0+256)
 20555  30E2  0008               	return
 20556  30E3                     __end_of_getSubdivisionState:	
 20557                           
 20558                           	psect	text89
 20559  3F91                     __ptext89:	
 20560 ;; *************** function _initStateManager *****************
 20561 ;; Defined at:
 20562 ;;		line 23 in file "state_manager.c"
 20563 ;; Parameters:    Size  Location     Type
 20564 ;;		None
 20565 ;; Auto vars:     Size  Location     Type
 20566 ;;		None
 20567 ;; Return value:  Size  Location     Type
 20568 ;;                  1    wreg      void 
 20569 ;; Registers used:
 20570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20571 ;; Tracked objects:
 20572 ;;		On entry : 0/0
 20573 ;;		On exit  : 0/0
 20574 ;;		Unchanged: 0/0
 20575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20580 ;;Total ram usage:        0 bytes
 20581 ;; Hardware stack levels used:    1
 20582 ;; Hardware stack levels required when called:    9
 20583 ;; This function calls:
 20584 ;;		_getCurrentState
 20585 ;; This function is called by:
 20586 ;;		_getSwitchBypassState
 20587 ;;		_getVolume
 20588 ;;		_getFrequency
 20589 ;;		_getSymmetry
 20590 ;;		_getDepth
 20591 ;;		_getTapTime
 20592 ;;		_getSubdivisionState
 20593 ;;		_getWaveFormState
 20594 ;;		_getPedalMode
 20595 ;;		_getSwitchTapState
 20596 ;; This function uses a non-reentrant model
 20597 ;;
 20598                           
 20599                           
 20600                           ;psect for function _initStateManager
 20601  3F91                     _initStateManager:	
 20602                           
 20603                           ;state_manager.c: 24: isStateInitialized = 0;
 20604                           
 20605                           ;incstack = 0
 20606                           ; Regs used in _initStateManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20607  3F91  0020               	movlb	0	; select bank0
 20608  3F92  01DD               	clrf	_isStateInitialized
 20609  3F93  01DE               	clrf	_isStateInitialized+1
 20610                           
 20611                           ;state_manager.c: 25: getCurrentState();
 20612  3F94  31B1  2198         	fcall	_getCurrentState
 20613  3F96  0008               	return
 20614  3F97                     __end_of_initStateManager:	
 20615                           
 20616                           	psect	text90
 20617  3198                     __ptext90:	
 20618 ;; *************** function _getCurrentState *****************
 20619 ;; Defined at:
 20620 ;;		line 28 in file "state_manager.c"
 20621 ;; Parameters:    Size  Location     Type
 20622 ;;		None
 20623 ;; Auto vars:     Size  Location     Type
 20624 ;;		None
 20625 ;; Return value:  Size  Location     Type
 20626 ;;                  15  1179[None  ] struct .
 20627 ;; Registers used:
 20628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20629 ;; Tracked objects:
 20630 ;;		On entry : 0/0
 20631 ;;		On exit  : 0/0
 20632 ;;		Unchanged: 0/0
 20633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20636 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20637 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20638 ;;Total ram usage:        1 bytes
 20639 ;; Hardware stack levels used:    1
 20640 ;; Hardware stack levels required when called:    8
 20641 ;; This function calls:
 20642 ;;		_getPreset
 20643 ;; This function is called by:
 20644 ;;		_initStateManager
 20645 ;; This function uses a non-reentrant model
 20646 ;;
 20647                           
 20648                           
 20649                           ;psect for function _getCurrentState
 20650  3198                     _getCurrentState:	
 20651                           
 20652                           ;state_manager.c: 30: pedalState = getPreset(0);
 20653                           
 20654                           ;incstack = 0
 20655                           ; Regs used in _getCurrentState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20656  3198  3000               	movlw	0
 20657  3199  3192  2298  31B1   	fcall	_getPreset
 20658  319C  0022               	movlb	2	; select bank2
 20659  319D  3040               	movlw	low ?_getPreset
 20660  319E  0086               	movwf	6
 20661  319F  3001               	movlw	high ?_getPreset
 20662  31A0  0087               	movwf	7
 20663  31A1  30B4               	movlw	low _pedalState
 20664  31A2  0084               	movwf	4
 20665  31A3  3002               	movlw	high _pedalState
 20666  31A4  0085               	movwf	5
 20667  31A5  300F               	movlw	15
 20668  31A6  00D3               	movwf	??_getCurrentState^(0+256)
 20669  31A7                     u6150:	
 20670  31A7  0016               	moviw fsr1++
 20671  31A8  001A               	movwi fsr0++
 20672  31A9  0BD3               	decfsz	??_getCurrentState^(0+256),f
 20673  31AA  29A7               	goto	u6150
 20674                           
 20675                           ;state_manager.c: 31: isStateInitialized = 1;
 20676  31AB  3001               	movlw	1
 20677  31AC  0020               	movlb	0	; select bank0
 20678  31AD  00DD               	movwf	_isStateInitialized
 20679  31AE  3000               	movlw	0
 20680  31AF  00DE               	movwf	_isStateInitialized+1
 20681  31B0  0008               	return
 20682  31B1                     __end_of_getCurrentState:	
 20683                           ;state_manager.c: 32: return pedalState;
 20684                           ;	Return value of _getCurrentState is never used
 20685                           
 20686                           
 20687                           	psect	text91
 20688  1298                     __ptext91:	
 20689 ;; *************** function _getPreset *****************
 20690 ;; Defined at:
 20691 ;;		line 139 in file "state_manager.c"
 20692 ;; Parameters:    Size  Location     Type
 20693 ;;  presetChanne    1    wreg     unsigned char 
 20694 ;; Auto vars:     Size  Location     Type
 20695 ;;  presetChanne    1    1[BANK3 ] unsigned char 
 20696 ;;  presets        30    3[BANK3 ] struct .[3]
 20697 ;;  pedalPreset    15   34[BANK3 ] struct .
 20698 ;;  bankChannel     1   33[BANK3 ] unsigned char 
 20699 ;;  bankID          1    2[BANK3 ] unsigned char 
 20700 ;;  r               1    0[BANK3 ] unsigned char 
 20701 ;; Return value:  Size  Location     Type
 20702 ;;                  15   32[BANK2 ] struct .
 20703 ;; Registers used:
 20704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20705 ;; Tracked objects:
 20706 ;;		On entry : 0/0
 20707 ;;		On exit  : 0/0
 20708 ;;		Unchanged: 0/0
 20709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20710 ;;      Params:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20711 ;;      Locals:         0       0       0       0      49       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20712 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20713 ;;      Totals:         0       0       0      19      49       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20714 ;;Total ram usage:       68 bytes
 20715 ;; Hardware stack levels used:    1
 20716 ;; Hardware stack levels required when called:    7
 20717 ;; This function calls:
 20718 ;;		_GetBitMask
 20719 ;;		_HEF_ByteArrayRead
 20720 ;;		___awdiv
 20721 ;;		___bmul
 20722 ;; This function is called by:
 20723 ;;		_getCurrentState
 20724 ;; This function uses a non-reentrant model
 20725 ;;
 20726                           
 20727                           
 20728                           ;psect for function _getPreset
 20729  1298                     _getPreset:	
 20730                           
 20731                           ;incstack = 0
 20732                           ; Regs used in _getPreset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20733                           ;getPreset@presetChannel stored from wreg
 20734  1298  0023               	movlb	3	; select bank3
 20735  1299  00A1               	movwf	getPreset@presetChannel^(0+384)
 20736                           
 20737                           ;state_manager.c: 140: PedalStorage presets[3];
 20738                           ;state_manager.c: 141: uint8_t r;
 20739                           ;state_manager.c: 143: char bankID = presetChannel / 3;
 20740  129A  3003               	movlw	3
 20741  129B  0021               	movlb	1	; select bank1
 20742  129C  00A0               	movwf	___awdiv@divisor^(0+128)
 20743  129D  3000               	movlw	0
 20744  129E  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
 20745  129F  0023               	movlb	3	; select bank3
 20746  12A0  0821               	movf	getPreset@presetChannel^(0+384),w
 20747  12A1  0022               	movlb	2	; select bank2
 20748  12A2  00CF               	movwf	??_getPreset^(0+256)
 20749  12A3  01D0               	clrf	(??_getPreset^(0+256)+1)
 20750  12A4  084F               	movf	??_getPreset^(0+256),w
 20751  12A5  0021               	movlb	1	; select bank1
 20752  12A6  00A2               	movwf	___awdiv@dividend^(0+128)
 20753  12A7  0022               	movlb	2	; select bank2
 20754  12A8  0850               	movf	(??_getPreset+1)^(0+256),w
 20755  12A9  0021               	movlb	1	; select bank1
 20756  12AA  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
 20757  12AB  31AC  2447  3192   	fcall	___awdiv
 20758  12AE  0021               	movlb	1	; select bank1
 20759  12AF  0820               	movf	?___awdiv^(0+128),w
 20760  12B0  0022               	movlb	2	; select bank2
 20761  12B1  00D1               	movwf	(??_getPreset+2)^(0+256)
 20762  12B2  0851               	movf	(??_getPreset+2)^(0+256),w
 20763  12B3  0023               	movlb	3	; select bank3
 20764  12B4  00A2               	movwf	getPreset@bankID^(0+384)
 20765                           
 20766                           ;state_manager.c: 144: char bankChannel = presetChannel - (bankID * 3);
 20767  12B5  3003               	movlw	3
 20768  12B6  0022               	movlb	2	; select bank2
 20769  12B7  00CF               	movwf	??_getPreset^(0+256)
 20770  12B8  084F               	movf	??_getPreset^(0+256),w
 20771  12B9  0021               	movlb	1	; select bank1
 20772  12BA  00A0               	movwf	___bmul@multiplicand^(0+128)
 20773  12BB  0023               	movlb	3	; select bank3
 20774  12BC  0822               	movf	getPreset@bankID^(0+384),w
 20775  12BD  31B1  2105  3192   	fcall	___bmul
 20776  12C0  3AFF               	xorlw	255
 20777  12C1  3E01               	addlw	1
 20778  12C2  0023               	movlb	3	; select bank3
 20779  12C3  0721               	addwf	getPreset@presetChannel^(0+384),w
 20780  12C4  0022               	movlb	2	; select bank2
 20781  12C5  00D0               	movwf	(??_getPreset+1)^(0+256)
 20782  12C6  0850               	movf	(??_getPreset+1)^(0+256),w
 20783  12C7  0023               	movlb	3	; select bank3
 20784  12C8  00C1               	movwf	getPreset@bankChannel^(0+384)
 20785                           
 20786                           ;state_manager.c: 147: r = HEF_ByteArrayRead((void *) &presets, bankID, sizeof (presets)
      +                          );
 20787  12C9  30A3               	movlw	low getPreset@presets
 20788  12CA  0021               	movlb	1	; select bank1
 20789  12CB  00A3               	movwf	HEF_ByteArrayRead@bArray^(0+128)
 20790  12CC  3001               	movlw	high getPreset@presets
 20791  12CD  00A4               	movwf	(HEF_ByteArrayRead@bArray+1)^(0+128)
 20792  12CE  0023               	movlb	3	; select bank3
 20793  12CF  0822               	movf	getPreset@bankID^(0+384),w
 20794  12D0  0022               	movlb	2	; select bank2
 20795  12D1  00CF               	movwf	??_getPreset^(0+256)
 20796  12D2  084F               	movf	??_getPreset^(0+256),w
 20797  12D3  0021               	movlb	1	; select bank1
 20798  12D4  00A5               	movwf	HEF_ByteArrayRead@block^(0+128)
 20799  12D5  301E               	movlw	30
 20800  12D6  0022               	movlb	2	; select bank2
 20801  12D7  00D0               	movwf	(??_getPreset+1)^(0+256)
 20802  12D8  0850               	movf	(??_getPreset+1)^(0+256),w
 20803  12D9  0021               	movlb	1	; select bank1
 20804  12DA  00A6               	movwf	HEF_ByteArrayRead@count^(0+128)
 20805  12DB  31B5  25B1  3192   	fcall	_HEF_ByteArrayRead
 20806  12DE  0022               	movlb	2	; select bank2
 20807  12DF  00D1               	movwf	(??_getPreset+2)^(0+256)
 20808  12E0  0851               	movf	(??_getPreset+2)^(0+256),w
 20809  12E1  0023               	movlb	3	; select bank3
 20810  12E2  00A0               	movwf	getPreset@r^(0+384)
 20811                           
 20812                           ;state_manager.c: 149: PedalState pedalPreset;
 20813                           ;state_manager.c: 151: pedalPreset.pedalMode = GetBitMask(presets[bankChannel].modeBypas
      +                          sSubdivWave, 0, 4);
 20814  12E3  300A               	movlw	10
 20815  12E4  0022               	movlb	2	; select bank2
 20816  12E5  00CF               	movwf	??_getPreset^(0+256)
 20817  12E6  084F               	movf	??_getPreset^(0+256),w
 20818  12E7  0021               	movlb	1	; select bank1
 20819  12E8  00A0               	movwf	___bmul@multiplicand^(0+128)
 20820  12E9  0023               	movlb	3	; select bank3
 20821  12EA  0841               	movf	getPreset@bankChannel^(0+384),w
 20822  12EB  31B1  2105  3192   	fcall	___bmul
 20823  12EE  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20824  12EF  0086               	movwf	6
 20825  12F0  3001               	movlw	1	; select bank3/4
 20826  12F1  0087               	movwf	7
 20827  12F2  3F40               	moviw [0]fsr1
 20828  12F3  0022               	movlb	2	; select bank2
 20829  12F4  00B4               	movwf	GetBitMask@storage^(0+256)
 20830  12F5  3F41               	moviw [1]fsr1
 20831  12F6  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20832  12F7  01B6               	clrf	GetBitMask@index^(0+256)
 20833  12F8  3004               	movlw	4
 20834  12F9  00D0               	movwf	(??_getPreset+1)^(0+256)
 20835  12FA  0850               	movf	(??_getPreset+1)^(0+256),w
 20836  12FB  00B7               	movwf	GetBitMask@shift^(0+256)
 20837  12FC  31A9  21D5  3192   	fcall	_GetBitMask
 20838  12FF  0022               	movlb	2	; select bank2
 20839  1300  0834               	movf	?_GetBitMask^(0+256),w
 20840  1301  00D1               	movwf	(??_getPreset+2)^(0+256)
 20841  1302  0851               	movf	(??_getPreset+2)^(0+256),w
 20842  1303  0023               	movlb	3	; select bank3
 20843  1304  00D0               	movwf	(getPreset@pedalPreset^(0+384)+14)
 20844                           
 20845                           ;state_manager.c: 152: pedalPreset.bypass = GetBitMask(presets[bankChannel].modeBypassSu
      +                          bdivWave, 1, 4);
 20846  1305  300A               	movlw	10
 20847  1306  0022               	movlb	2	; select bank2
 20848  1307  00CF               	movwf	??_getPreset^(0+256)
 20849  1308  084F               	movf	??_getPreset^(0+256),w
 20850  1309  0021               	movlb	1	; select bank1
 20851  130A  00A0               	movwf	___bmul@multiplicand^(0+128)
 20852  130B  0023               	movlb	3	; select bank3
 20853  130C  0841               	movf	getPreset@bankChannel^(0+384),w
 20854  130D  31B1  2105  3192   	fcall	___bmul
 20855  1310  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20856  1311  0086               	movwf	6
 20857  1312  3001               	movlw	1	; select bank3/4
 20858  1313  0087               	movwf	7
 20859  1314  3F40               	moviw [0]fsr1
 20860  1315  0022               	movlb	2	; select bank2
 20861  1316  00B4               	movwf	GetBitMask@storage^(0+256)
 20862  1317  3F41               	moviw [1]fsr1
 20863  1318  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20864  1319  01B6               	clrf	GetBitMask@index^(0+256)
 20865  131A  0AB6               	incf	GetBitMask@index^(0+256),f
 20866  131B  3004               	movlw	4
 20867  131C  00D0               	movwf	(??_getPreset+1)^(0+256)
 20868  131D  0850               	movf	(??_getPreset+1)^(0+256),w
 20869  131E  00B7               	movwf	GetBitMask@shift^(0+256)
 20870  131F  31A9  21D5  3192   	fcall	_GetBitMask
 20871  1322  0022               	movlb	2	; select bank2
 20872  1323  0834               	movf	?_GetBitMask^(0+256),w
 20873  1324  00D1               	movwf	(??_getPreset+2)^(0+256)
 20874  1325  0851               	movf	(??_getPreset+2)^(0+256),w
 20875  1326  0023               	movlb	3	; select bank3
 20876  1327  00C5               	movwf	(getPreset@pedalPreset^(0+384)+3)
 20877                           
 20878                           ;state_manager.c: 153: pedalPreset.subdivision = GetBitMask(presets[bankChannel].modeByp
      +                          assSubdivWave, 2, 4);
 20879  1328  300A               	movlw	10
 20880  1329  0022               	movlb	2	; select bank2
 20881  132A  00CF               	movwf	??_getPreset^(0+256)
 20882  132B  084F               	movf	??_getPreset^(0+256),w
 20883  132C  0021               	movlb	1	; select bank1
 20884  132D  00A0               	movwf	___bmul@multiplicand^(0+128)
 20885  132E  0023               	movlb	3	; select bank3
 20886  132F  0841               	movf	getPreset@bankChannel^(0+384),w
 20887  1330  31B1  2105  3192   	fcall	___bmul
 20888  1333  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20889  1334  0086               	movwf	6
 20890  1335  3001               	movlw	1	; select bank3/4
 20891  1336  0087               	movwf	7
 20892  1337  3F40               	moviw [0]fsr1
 20893  1338  0022               	movlb	2	; select bank2
 20894  1339  00B4               	movwf	GetBitMask@storage^(0+256)
 20895  133A  3F41               	moviw [1]fsr1
 20896  133B  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20897  133C  3002               	movlw	2
 20898  133D  00D0               	movwf	(??_getPreset+1)^(0+256)
 20899  133E  0850               	movf	(??_getPreset+1)^(0+256),w
 20900  133F  00B6               	movwf	GetBitMask@index^(0+256)
 20901  1340  3004               	movlw	4
 20902  1341  00D1               	movwf	(??_getPreset+2)^(0+256)
 20903  1342  0851               	movf	(??_getPreset+2)^(0+256),w
 20904  1343  00B7               	movwf	GetBitMask@shift^(0+256)
 20905  1344  31A9  21D5  3192   	fcall	_GetBitMask
 20906  1347  0022               	movlb	2	; select bank2
 20907  1348  0834               	movf	?_GetBitMask^(0+256),w
 20908  1349  00D2               	movwf	(??_getPreset+3)^(0+256)
 20909  134A  0852               	movf	(??_getPreset+3)^(0+256),w
 20910  134B  0023               	movlb	3	; select bank3
 20911  134C  00C6               	movwf	(getPreset@pedalPreset^(0+384)+4)
 20912                           
 20913                           ;state_manager.c: 154: pedalPreset.waveForm = GetBitMask(presets[bankChannel].modeBypass
      +                          SubdivWave, 3, 4);
 20914  134D  300A               	movlw	10
 20915  134E  0022               	movlb	2	; select bank2
 20916  134F  00CF               	movwf	??_getPreset^(0+256)
 20917  1350  084F               	movf	??_getPreset^(0+256),w
 20918  1351  0021               	movlb	1	; select bank1
 20919  1352  00A0               	movwf	___bmul@multiplicand^(0+128)
 20920  1353  0023               	movlb	3	; select bank3
 20921  1354  0841               	movf	getPreset@bankChannel^(0+384),w
 20922  1355  31B1  2105  3192   	fcall	___bmul
 20923  1358  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20924  1359  0086               	movwf	6
 20925  135A  3001               	movlw	1	; select bank3/4
 20926  135B  0087               	movwf	7
 20927  135C  3F40               	moviw [0]fsr1
 20928  135D  0022               	movlb	2	; select bank2
 20929  135E  00B4               	movwf	GetBitMask@storage^(0+256)
 20930  135F  3F41               	moviw [1]fsr1
 20931  1360  00B5               	movwf	(GetBitMask@storage+1)^(0+256)
 20932  1361  3003               	movlw	3
 20933  1362  00D0               	movwf	(??_getPreset+1)^(0+256)
 20934  1363  0850               	movf	(??_getPreset+1)^(0+256),w
 20935  1364  00B6               	movwf	GetBitMask@index^(0+256)
 20936  1365  3004               	movlw	4
 20937  1366  00D1               	movwf	(??_getPreset+2)^(0+256)
 20938  1367  0851               	movf	(??_getPreset+2)^(0+256),w
 20939  1368  00B7               	movwf	GetBitMask@shift^(0+256)
 20940  1369  31A9  21D5  3192   	fcall	_GetBitMask
 20941  136C  0022               	movlb	2	; select bank2
 20942  136D  0834               	movf	?_GetBitMask^(0+256),w
 20943  136E  00D2               	movwf	(??_getPreset+3)^(0+256)
 20944  136F  0852               	movf	(??_getPreset+3)^(0+256),w
 20945  1370  0023               	movlb	3	; select bank3
 20946  1371  00C7               	movwf	(getPreset@pedalPreset^(0+384)+5)
 20947                           
 20948                           ;state_manager.c: 156: pedalPreset.baseTapTime = presets[bankChannel].baseTapTime;
 20949  1372  300A               	movlw	10
 20950  1373  0022               	movlb	2	; select bank2
 20951  1374  00CF               	movwf	??_getPreset^(0+256)
 20952  1375  084F               	movf	??_getPreset^(0+256),w
 20953  1376  0021               	movlb	1	; select bank1
 20954  1377  00A0               	movwf	___bmul@multiplicand^(0+128)
 20955  1378  0023               	movlb	3	; select bank3
 20956  1379  0841               	movf	getPreset@bankChannel^(0+384),w
 20957  137A  31B1  2105  3192   	fcall	___bmul
 20958  137D  3E02               	addlw	2
 20959  137E  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20960  137F  0086               	movwf	6
 20961  1380  3001               	movlw	1	; select bank3/4
 20962  1381  0087               	movwf	7
 20963  1382  3F40               	moviw [0]fsr1
 20964  1383  0023               	movlb	3	; select bank3
 20965  1384  00C3               	movwf	(getPreset@pedalPreset^(0+384)+1)
 20966  1385  3F41               	moviw [1]fsr1
 20967  1386  00C4               	movwf	((getPreset@pedalPreset+1)^(0+384)+1)
 20968                           
 20969                           ;state_manager.c: 158: pedalPreset.volume = presets[bankChannel].volume;
 20970  1387  300A               	movlw	10
 20971  1388  0022               	movlb	2	; select bank2
 20972  1389  00CF               	movwf	??_getPreset^(0+256)
 20973  138A  084F               	movf	??_getPreset^(0+256),w
 20974  138B  0021               	movlb	1	; select bank1
 20975  138C  00A0               	movwf	___bmul@multiplicand^(0+128)
 20976  138D  0023               	movlb	3	; select bank3
 20977  138E  0841               	movf	getPreset@bankChannel^(0+384),w
 20978  138F  31B1  2105  3192   	fcall	___bmul
 20979  1392  3E04               	addlw	4
 20980  1393  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 20981  1394  0086               	movwf	6
 20982  1395  3001               	movlw	1	; select bank3/4
 20983  1396  0087               	movwf	7
 20984  1397  3F40               	moviw [0]fsr1
 20985  1398  0023               	movlb	3	; select bank3
 20986  1399  00C8               	movwf	(getPreset@pedalPreset^(0+384)+6)
 20987  139A  3F41               	moviw [1]fsr1
 20988  139B  00C9               	movwf	((getPreset@pedalPreset+1)^(0+384)+6)
 20989                           
 20990                           ;state_manager.c: 159: pedalPreset.frequency = presets[bankChannel].frequency;
 20991  139C  300A               	movlw	10
 20992  139D  0022               	movlb	2	; select bank2
 20993  139E  00CF               	movwf	??_getPreset^(0+256)
 20994  139F  084F               	movf	??_getPreset^(0+256),w
 20995  13A0  0021               	movlb	1	; select bank1
 20996  13A1  00A0               	movwf	___bmul@multiplicand^(0+128)
 20997  13A2  0023               	movlb	3	; select bank3
 20998  13A3  0841               	movf	getPreset@bankChannel^(0+384),w
 20999  13A4  31B1  2105  3192   	fcall	___bmul
 21000  13A7  3E06               	addlw	6
 21001  13A8  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 21002  13A9  0086               	movwf	6
 21003  13AA  3001               	movlw	1	; select bank3/4
 21004  13AB  0087               	movwf	7
 21005  13AC  3F40               	moviw [0]fsr1
 21006  13AD  0023               	movlb	3	; select bank3
 21007  13AE  00CA               	movwf	(getPreset@pedalPreset^(0+384)+8)
 21008  13AF  3F41               	moviw [1]fsr1
 21009  13B0  00CB               	movwf	((getPreset@pedalPreset+1)^(0+384)+8)
 21010                           
 21011                           ;state_manager.c: 161: pedalPreset.symmetry = (int)presets[bankChannel].symmetry * 4;
 21012  13B1  300A               	movlw	10
 21013  13B2  0022               	movlb	2	; select bank2
 21014  13B3  00CF               	movwf	??_getPreset^(0+256)
 21015  13B4  084F               	movf	??_getPreset^(0+256),w
 21016  13B5  0021               	movlb	1	; select bank1
 21017  13B6  00A0               	movwf	___bmul@multiplicand^(0+128)
 21018  13B7  0023               	movlb	3	; select bank3
 21019  13B8  0841               	movf	getPreset@bankChannel^(0+384),w
 21020  13B9  31B1  2105  3192   	fcall	___bmul
 21021  13BC  3E08               	addlw	8
 21022  13BD  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 21023  13BE  0086               	movwf	6
 21024  13BF  3001               	movlw	1	; select bank3/4
 21025  13C0  0087               	movwf	7
 21026  13C1  0801               	movf	1,w
 21027  13C2  0022               	movlb	2	; select bank2
 21028  13C3  00D0               	movwf	(??_getPreset+1)^(0+256)
 21029  13C4  01D1               	clrf	((??_getPreset+1)^(0+256)+1)
 21030  13C5  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21031  13C6  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21032  13C7  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21033  13C8  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21034  13C9  0850               	movf	(??_getPreset+1)^(0+256),w
 21035  13CA  0023               	movlb	3	; select bank3
 21036  13CB  00CC               	movwf	(getPreset@pedalPreset^(0+384)+10)
 21037  13CC  0022               	movlb	2	; select bank2
 21038  13CD  0851               	movf	(??_getPreset+2)^(0+256),w
 21039  13CE  0023               	movlb	3	; select bank3
 21040  13CF  00CD               	movwf	((getPreset@pedalPreset+1)^(0+384)+10)
 21041                           
 21042                           ;state_manager.c: 163: pedalPreset.depth = (int)presets[bankChannel].depth * 4;
 21043  13D0  300A               	movlw	10
 21044  13D1  0022               	movlb	2	; select bank2
 21045  13D2  00CF               	movwf	??_getPreset^(0+256)
 21046  13D3  084F               	movf	??_getPreset^(0+256),w
 21047  13D4  0021               	movlb	1	; select bank1
 21048  13D5  00A0               	movwf	___bmul@multiplicand^(0+128)
 21049  13D6  0023               	movlb	3	; select bank3
 21050  13D7  0841               	movf	getPreset@bankChannel^(0+384),w
 21051  13D8  31B1  2105  3192   	fcall	___bmul
 21052  13DB  3E09               	addlw	9
 21053  13DC  3EA3               	addlw	(low (getPreset@presets| (0+256)))& (0+255)
 21054  13DD  0086               	movwf	6
 21055  13DE  3001               	movlw	1	; select bank3/4
 21056  13DF  0087               	movwf	7
 21057  13E0  0801               	movf	1,w
 21058  13E1  0022               	movlb	2	; select bank2
 21059  13E2  00D0               	movwf	(??_getPreset+1)^(0+256)
 21060  13E3  01D1               	clrf	((??_getPreset+1)^(0+256)+1)
 21061  13E4  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21062  13E5  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21063  13E6  35D0               	lslf	(??_getPreset+1)^(0+256),f
 21064  13E7  0DD1               	rlf	((??_getPreset+1)^(0+256)+1),f
 21065  13E8  0850               	movf	(??_getPreset+1)^(0+256),w
 21066  13E9  0023               	movlb	3	; select bank3
 21067  13EA  00CE               	movwf	(getPreset@pedalPreset^(0+384)+12)
 21068  13EB  0022               	movlb	2	; select bank2
 21069  13EC  0851               	movf	(??_getPreset+2)^(0+256),w
 21070  13ED  0023               	movlb	3	; select bank3
 21071  13EE  00CF               	movwf	((getPreset@pedalPreset+1)^(0+384)+12)
 21072                           
 21073                           ;state_manager.c: 172: if (pedalPreset.tap != 1) {
 21074  13EF  0342               	decf	getPreset@pedalPreset^(0+384),w
 21075  13F0  1D03               	btfss	3,2
 21076                           
 21077                           ;state_manager.c: 173: pedalPreset.tap = 0;
 21078  13F1  01C2               	clrf	getPreset@pedalPreset^(0+384)
 21079                           
 21080                           ;state_manager.c: 174: }
 21081                           ;state_manager.c: 175: if (pedalPreset.bypass != 1) {
 21082  13F2  0345               	decf	(getPreset@pedalPreset^(0+384)+3),w
 21083  13F3  1D03               	btfss	3,2
 21084                           
 21085                           ;state_manager.c: 176: pedalPreset.bypass = 0;
 21086  13F4  01C5               	clrf	(getPreset@pedalPreset^(0+384)+3)
 21087                           
 21088                           ;state_manager.c: 177: }
 21089                           ;state_manager.c: 179: if (pedalPreset.subdivision < 0 || pedalPreset.subdivision > 6) {
 21090  13F5  3007               	movlw	7
 21091  13F6  0246               	subwf	(getPreset@pedalPreset^(0+384)+4),w
 21092  13F7  1C03               	skipc
 21093  13F8  2BFF               	goto	l6653
 21094                           
 21095                           ;state_manager.c: 180: pedalPreset.subdivision = 6;
 21096  13F9  3006               	movlw	6
 21097  13FA  0022               	movlb	2	; select bank2
 21098  13FB  00CF               	movwf	??_getPreset^(0+256)
 21099  13FC  084F               	movf	??_getPreset^(0+256),w
 21100  13FD  0023               	movlb	3	; select bank3
 21101  13FE  00C6               	movwf	(getPreset@pedalPreset^(0+384)+4)
 21102  13FF                     l6653:	
 21103                           
 21104                           ;state_manager.c: 181: }
 21105                           ;state_manager.c: 183: if (pedalPreset.waveForm < 1 || pedalPreset.waveForm > 5) {
 21106  13FF  0847               	movf	(getPreset@pedalPreset^(0+384)+5),w
 21107  1400  1903               	btfsc	3,2
 21108  1401  2C06               	goto	l1312
 21109  1402  3006               	movlw	6
 21110  1403  0247               	subwf	(getPreset@pedalPreset^(0+384)+5),w
 21111  1404  1C03               	skipc
 21112  1405  2C08               	goto	l6657
 21113  1406                     l1312:	
 21114                           
 21115                           ;state_manager.c: 184: pedalPreset.waveForm = 1;
 21116  1406  01C7               	clrf	(getPreset@pedalPreset^(0+384)+5)
 21117  1407  0AC7               	incf	(getPreset@pedalPreset^(0+384)+5),f
 21118  1408                     l6657:	
 21119                           
 21120                           ;state_manager.c: 185: }
 21121                           ;state_manager.c: 187: if (pedalPreset.volume < 1 || pedalPreset.volume > 1023) {
 21122  1408  0848               	movf	(getPreset@pedalPreset^(0+384)+6),w
 21123  1409  0449               	iorwf	((getPreset@pedalPreset+1)^(0+384)+6),w
 21124  140A  1903               	btfsc	3,2
 21125  140B  2C13               	goto	l6661
 21126  140C  3004               	movlw	4
 21127  140D  0249               	subwf	((getPreset@pedalPreset+1)^(0+384)+6),w
 21128  140E  3000               	movlw	0
 21129  140F  1903               	skipnz
 21130  1410  0248               	subwf	(getPreset@pedalPreset^(0+384)+6),w
 21131  1411  1C03               	skipc
 21132  1412  2C17               	goto	l6663
 21133  1413                     l6661:	
 21134                           
 21135                           ;state_manager.c: 188: pedalPreset.volume = 1000;
 21136  1413  30E8               	movlw	232
 21137  1414  00C8               	movwf	(getPreset@pedalPreset^(0+384)+6)
 21138  1415  3003               	movlw	3
 21139  1416  00C9               	movwf	(getPreset@pedalPreset^(0+384)+7)
 21140  1417                     l6663:	
 21141                           
 21142                           ;state_manager.c: 189: }
 21143                           ;state_manager.c: 191: if (pedalPreset.frequency < 1 || pedalPreset.frequency > 1023) {
 21144  1417  084A               	movf	(getPreset@pedalPreset^(0+384)+8),w
 21145  1418  044B               	iorwf	((getPreset@pedalPreset+1)^(0+384)+8),w
 21146  1419  1903               	btfsc	3,2
 21147  141A  2C22               	goto	l6667
 21148  141B  3004               	movlw	4
 21149  141C  024B               	subwf	((getPreset@pedalPreset+1)^(0+384)+8),w
 21150  141D  3000               	movlw	0
 21151  141E  1903               	skipnz
 21152  141F  024A               	subwf	(getPreset@pedalPreset^(0+384)+8),w
 21153  1420  1C03               	skipc
 21154  1421  2C26               	goto	l6669
 21155  1422                     l6667:	
 21156                           
 21157                           ;state_manager.c: 192: pedalPreset.frequency = 1000;
 21158  1422  30E8               	movlw	232
 21159  1423  00CA               	movwf	(getPreset@pedalPreset^(0+384)+8)
 21160  1424  3003               	movlw	3
 21161  1425  00CB               	movwf	(getPreset@pedalPreset^(0+384)+9)
 21162  1426                     l6669:	
 21163                           
 21164                           ;state_manager.c: 193: }
 21165                           ;state_manager.c: 195: if (pedalPreset.symmetry < 1 || pedalPreset.symmetry > 1023) {
 21166  1426  084C               	movf	(getPreset@pedalPreset^(0+384)+10),w
 21167  1427  044D               	iorwf	((getPreset@pedalPreset+1)^(0+384)+10),w
 21168  1428  1903               	btfsc	3,2
 21169  1429  2C31               	goto	l6673
 21170  142A  3004               	movlw	4
 21171  142B  024D               	subwf	((getPreset@pedalPreset+1)^(0+384)+10),w
 21172  142C  3000               	movlw	0
 21173  142D  1903               	skipnz
 21174  142E  024C               	subwf	(getPreset@pedalPreset^(0+384)+10),w
 21175  142F  1C03               	skipc
 21176  1430  2C35               	goto	l6675
 21177  1431                     l6673:	
 21178                           
 21179                           ;state_manager.c: 196: pedalPreset.symmetry = 1000;
 21180  1431  30E8               	movlw	232
 21181  1432  00CC               	movwf	(getPreset@pedalPreset^(0+384)+10)
 21182  1433  3003               	movlw	3
 21183  1434  00CD               	movwf	(getPreset@pedalPreset^(0+384)+11)
 21184  1435                     l6675:	
 21185                           
 21186                           ;state_manager.c: 197: }
 21187                           ;state_manager.c: 199: if (pedalPreset.depth < 1 || pedalPreset.depth > 1023) {
 21188  1435  084E               	movf	(getPreset@pedalPreset^(0+384)+12),w
 21189  1436  044F               	iorwf	((getPreset@pedalPreset+1)^(0+384)+12),w
 21190  1437  1903               	btfsc	3,2
 21191  1438  2C40               	goto	l6679
 21192  1439  3004               	movlw	4
 21193  143A  024F               	subwf	((getPreset@pedalPreset+1)^(0+384)+12),w
 21194  143B  3000               	movlw	0
 21195  143C  1903               	skipnz
 21196  143D  024E               	subwf	(getPreset@pedalPreset^(0+384)+12),w
 21197  143E  1C03               	skipc
 21198  143F  2C44               	goto	l6681
 21199  1440                     l6679:	
 21200                           
 21201                           ;state_manager.c: 200: pedalPreset.depth = 1000;
 21202  1440  30E8               	movlw	232
 21203  1441  00CE               	movwf	(getPreset@pedalPreset^(0+384)+12)
 21204  1442  3003               	movlw	3
 21205  1443  00CF               	movwf	(getPreset@pedalPreset^(0+384)+13)
 21206  1444                     l6681:	
 21207                           
 21208                           ;state_manager.c: 201: }
 21209                           ;state_manager.c: 204: return pedalPreset;
 21210  1444  30C2               	movlw	low getPreset@pedalPreset
 21211  1445  0086               	movwf	6
 21212  1446  3001               	movlw	high getPreset@pedalPreset
 21213  1447  0087               	movwf	7
 21214  1448  3040               	movlw	low ?_getPreset
 21215  1449  0084               	movwf	4
 21216  144A  3001               	movlw	high ?_getPreset
 21217  144B  0085               	movwf	5
 21218  144C  300F               	movlw	15
 21219  144D  0022               	movlb	2	; select bank2
 21220  144E  00CF               	movwf	??_getPreset^(0+256)
 21221  144F                     u5900:	
 21222  144F  0016               	moviw fsr1++
 21223  1450  001A               	movwi fsr0++
 21224  1451  0BCF               	decfsz	??_getPreset^(0+256),f
 21225  1452  2C4F               	goto	u5900
 21226  1453  0008               	return
 21227  1454                     __end_of_getPreset:	
 21228                           
 21229                           	psect	text92
 21230  3105                     __ptext92:	
 21231 ;; *************** function ___bmul *****************
 21232 ;; Defined at:
 21233 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 21234 ;; Parameters:    Size  Location     Type
 21235 ;;  multiplier      1    wreg     unsigned char 
 21236 ;;  multiplicand    1    0[BANK1 ] unsigned char 
 21237 ;; Auto vars:     Size  Location     Type
 21238 ;;  multiplier      1    3[BANK1 ] unsigned char 
 21239 ;;  product         1    2[BANK1 ] unsigned char 
 21240 ;; Return value:  Size  Location     Type
 21241 ;;                  1    wreg      unsigned char 
 21242 ;; Registers used:
 21243 ;;		wreg, status,2, status,0
 21244 ;; Tracked objects:
 21245 ;;		On entry : 0/0
 21246 ;;		On exit  : 0/0
 21247 ;;		Unchanged: 0/0
 21248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21249 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21250 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21251 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21252 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21253 ;;Total ram usage:        4 bytes
 21254 ;; Hardware stack levels used:    1
 21255 ;; Hardware stack levels required when called:    5
 21256 ;; This function calls:
 21257 ;;		Nothing
 21258 ;; This function is called by:
 21259 ;;		_getPreset
 21260 ;; This function uses a non-reentrant model
 21261 ;;
 21262                           
 21263                           
 21264                           ;psect for function ___bmul
 21265  3105                     ___bmul:	
 21266                           
 21267                           ;incstack = 0
 21268                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 21269                           ;___bmul@multiplier stored from wreg
 21270  3105  0021               	movlb	1	; select bank1
 21271  3106  00A3               	movwf	___bmul@multiplier^(0+128)
 21272  3107  01A2               	clrf	___bmul@product^(0+128)
 21273  3108                     l6301:	
 21274  3108  1C23               	btfss	___bmul@multiplier^(0+128),0
 21275  3109  290E               	goto	l6305
 21276  310A  0820               	movf	___bmul@multiplicand^(0+128),w
 21277  310B  00A1               	movwf	??___bmul^(0+128)
 21278  310C  0821               	movf	??___bmul^(0+128),w
 21279  310D  07A2               	addwf	___bmul@product^(0+128),f
 21280  310E                     l6305:	
 21281  310E  1003               	clrc
 21282  310F  0DA0               	rlf	___bmul@multiplicand^(0+128),f
 21283  3110  1003               	clrc
 21284  3111  0CA3               	rrf	___bmul@multiplier^(0+128),f
 21285  3112  0823               	movf	___bmul@multiplier^(0+128),w
 21286  3113  1D03               	btfss	3,2
 21287  3114  2908               	goto	l6301
 21288  3115  0822               	movf	___bmul@product^(0+128),w
 21289  3116  0008               	return
 21290  3117                     __end_of___bmul:	
 21291                           
 21292                           	psect	text93
 21293  2C47                     __ptext93:	
 21294 ;; *************** function ___awdiv *****************
 21295 ;; Defined at:
 21296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 21297 ;; Parameters:    Size  Location     Type
 21298 ;;  divisor         2    0[BANK1 ] int 
 21299 ;;  dividend        2    2[BANK1 ] int 
 21300 ;; Auto vars:     Size  Location     Type
 21301 ;;  quotient        2    7[BANK1 ] int 
 21302 ;;  sign            1    6[BANK1 ] unsigned char 
 21303 ;;  counter         1    5[BANK1 ] unsigned char 
 21304 ;; Return value:  Size  Location     Type
 21305 ;;                  2    0[BANK1 ] int 
 21306 ;; Registers used:
 21307 ;;		wreg, status,2, status,0
 21308 ;; Tracked objects:
 21309 ;;		On entry : 0/0
 21310 ;;		On exit  : 0/0
 21311 ;;		Unchanged: 0/0
 21312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21313 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21314 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21315 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21316 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21317 ;;Total ram usage:        9 bytes
 21318 ;; Hardware stack levels used:    1
 21319 ;; Hardware stack levels required when called:    5
 21320 ;; This function calls:
 21321 ;;		Nothing
 21322 ;; This function is called by:
 21323 ;;		_getPreset
 21324 ;;		_updateModulationArray
 21325 ;;		_USARTWriteInt
 21326 ;; This function uses a non-reentrant model
 21327 ;;
 21328                           
 21329                           
 21330                           ;psect for function ___awdiv
 21331  2C47                     ___awdiv:	
 21332                           
 21333                           ;incstack = 0
 21334                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21335  2C47  0021               	movlb	1	; select bank1
 21336  2C48  01A6               	clrf	___awdiv@sign^(0+128)
 21337  2C49  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 21338  2C4A  2C52               	goto	l6337
 21339  2C4B  09A0               	comf	___awdiv@divisor^(0+128),f
 21340  2C4C  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 21341  2C4D  0AA0               	incf	___awdiv@divisor^(0+128),f
 21342  2C4E  1903               	skipnz
 21343  2C4F  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 21344  2C50  01A6               	clrf	___awdiv@sign^(0+128)
 21345  2C51  0AA6               	incf	___awdiv@sign^(0+128),f
 21346  2C52                     l6337:	
 21347  2C52  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 21348  2C53  2C5D               	goto	l6343
 21349  2C54  09A2               	comf	___awdiv@dividend^(0+128),f
 21350  2C55  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 21351  2C56  0AA2               	incf	___awdiv@dividend^(0+128),f
 21352  2C57  1903               	skipnz
 21353  2C58  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 21354  2C59  3001               	movlw	1
 21355  2C5A  00A4               	movwf	??___awdiv^(0+128)
 21356  2C5B  0824               	movf	??___awdiv^(0+128),w
 21357  2C5C  06A6               	xorwf	___awdiv@sign^(0+128),f
 21358  2C5D                     l6343:	
 21359  2C5D  01A7               	clrf	___awdiv@quotient^(0+128)
 21360  2C5E  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 21361  2C5F  0820               	movf	___awdiv@divisor^(0+128),w
 21362  2C60  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 21363  2C61  1903               	btfsc	3,2
 21364  2C62  2C8C               	goto	l6365
 21365  2C63  01A5               	clrf	___awdiv@counter^(0+128)
 21366  2C64  0AA5               	incf	___awdiv@counter^(0+128),f
 21367  2C65                     l6353:	
 21368  2C65  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 21369  2C66  2C71               	goto	l6355
 21370  2C67  3001               	movlw	1
 21371  2C68                     u5195:	
 21372  2C68  35A0               	lslf	___awdiv@divisor^(0+128),f
 21373  2C69  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 21374  2C6A  0B89               	decfsz	9,f
 21375  2C6B  2C68               	goto	u5195
 21376  2C6C  3001               	movlw	1
 21377  2C6D  00A4               	movwf	??___awdiv^(0+128)
 21378  2C6E  0824               	movf	??___awdiv^(0+128),w
 21379  2C6F  07A5               	addwf	___awdiv@counter^(0+128),f
 21380  2C70  2C65               	goto	l6353
 21381  2C71                     l6355:	
 21382  2C71  3001               	movlw	1
 21383  2C72                     u5215:	
 21384  2C72  35A7               	lslf	___awdiv@quotient^(0+128),f
 21385  2C73  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 21386  2C74  0B89               	decfsz	9,f
 21387  2C75  2C72               	goto	u5215
 21388  2C76  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 21389  2C77  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 21390  2C78  1D03               	skipz
 21391  2C79  2C7C               	goto	u5225
 21392  2C7A  0820               	movf	___awdiv@divisor^(0+128),w
 21393  2C7B  0222               	subwf	___awdiv@dividend^(0+128),w
 21394  2C7C                     u5225:	
 21395  2C7C  1C03               	skipc
 21396  2C7D  2C83               	goto	l6361
 21397  2C7E  0820               	movf	___awdiv@divisor^(0+128),w
 21398  2C7F  02A2               	subwf	___awdiv@dividend^(0+128),f
 21399  2C80  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 21400  2C81  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 21401  2C82  1427               	bsf	___awdiv@quotient^(0+128),0
 21402  2C83                     l6361:	
 21403  2C83  3001               	movlw	1
 21404  2C84                     u5235:	
 21405  2C84  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 21406  2C85  0CA0               	rrf	___awdiv@divisor^(0+128),f
 21407  2C86  0B89               	decfsz	9,f
 21408  2C87  2C84               	goto	u5235
 21409  2C88  3001               	movlw	1
 21410  2C89  02A5               	subwf	___awdiv@counter^(0+128),f
 21411  2C8A  1D03               	btfss	3,2
 21412  2C8B  2C71               	goto	l6355
 21413  2C8C                     l6365:	
 21414  2C8C  0826               	movf	___awdiv@sign^(0+128),w
 21415  2C8D  1903               	btfsc	3,2
 21416  2C8E  2C94               	goto	l6369
 21417  2C8F  09A7               	comf	___awdiv@quotient^(0+128),f
 21418  2C90  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 21419  2C91  0AA7               	incf	___awdiv@quotient^(0+128),f
 21420  2C92  1903               	skipnz
 21421  2C93  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 21422  2C94                     l6369:	
 21423  2C94  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 21424  2C95  00A1               	movwf	(?___awdiv+1)^(0+128)
 21425  2C96  0827               	movf	___awdiv@quotient^(0+128),w
 21426  2C97  00A0               	movwf	?___awdiv^(0+128)
 21427  2C98  0008               	return
 21428  2C99                     __end_of___awdiv:	
 21429                           
 21430                           	psect	text94
 21431  35B1                     __ptext94:	
 21432 ;; *************** function _HEF_ByteArrayRead *****************
 21433 ;; Defined at:
 21434 ;;		line 53 in file "HEF.c"
 21435 ;; Parameters:    Size  Location     Type
 21436 ;;  bArray          2    3[BANK1 ] PTR unsigned char 
 21437 ;;		 -> getPreset@presets(30), savePreset@presets(30), 
 21438 ;;  block           1    5[BANK1 ] unsigned char 
 21439 ;;  count           1    6[BANK1 ] unsigned char 
 21440 ;; Auto vars:     Size  Location     Type
 21441 ;;  wordAdd         2    9[BANK1 ] unsigned int 
 21442 ;; Return value:  Size  Location     Type
 21443 ;;                  1    wreg      char 
 21444 ;; Registers used:
 21445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21446 ;; Tracked objects:
 21447 ;;		On entry : 0/0
 21448 ;;		On exit  : 0/0
 21449 ;;		Unchanged: 0/0
 21450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21451 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21452 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21453 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21454 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21455 ;;Total ram usage:        8 bytes
 21456 ;; Hardware stack levels used:    1
 21457 ;; Hardware stack levels required when called:    6
 21458 ;; This function calls:
 21459 ;;		_FLASH_ReadWord
 21460 ;; This function is called by:
 21461 ;;		_getPreset
 21462 ;; This function uses a non-reentrant model
 21463 ;;
 21464                           
 21465                           
 21466                           ;psect for function _HEF_ByteArrayRead
 21467  35B1                     _HEF_ByteArrayRead:	
 21468                           
 21469                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
 21470                           
 21471                           ;incstack = 0
 21472                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21473  35B1  0021               	movlb	1	; select bank1
 21474  35B2  0825               	movf	HEF_ByteArrayRead@block^(0+128),w
 21475  35B3  00A7               	movwf	??_HEF_ByteArrayRead^(0+128)
 21476  35B4  01A8               	clrf	(??_HEF_ByteArrayRead^(0+128)+1)
 21477  35B5  3005               	movlw	5
 21478  35B6                     u4995:	
 21479  35B6  35A7               	lslf	??_HEF_ByteArrayRead^(0+128),f
 21480  35B7  0DA8               	rlf	(??_HEF_ByteArrayRead^(0+128)+1),f
 21481  35B8  0B89               	decfsz	9,f
 21482  35B9  2DB6               	goto	u4995
 21483  35BA  0827               	movf	??_HEF_ByteArrayRead^(0+128),w
 21484  35BB  3E80               	addlw	128
 21485  35BC  00A9               	movwf	HEF_ByteArrayRead@wordAdd^(0+128)
 21486  35BD  303F               	movlw	63
 21487  35BE  3D28               	addwfc	(??_HEF_ByteArrayRead+1)^(0+128),w
 21488  35BF  00AA               	movwf	(HEF_ByteArrayRead@wordAdd+1)^(0+128)
 21489                           
 21490                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
 21491  35C0  3021               	movlw	33
 21492  35C1  0226               	subwf	HEF_ByteArrayRead@count^(0+128),w
 21493  35C2  1803               	skipnc
 21494  35C3  2DC8               	goto	l6257
 21495  35C4  3004               	movlw	4
 21496  35C5  0225               	subwf	HEF_ByteArrayRead@block^(0+128),w
 21497  35C6  1C03               	skipc
 21498  35C7  2DE4               	goto	l6269
 21499  35C8                     l6257:	
 21500                           
 21501                           ;HEF.c: 60: return -1;
 21502  35C8  30FF               	movlw	255
 21503  35C9  0008               	return
 21504  35CA                     l6261:	
 21505                           ;HEF.c: 63: while ( count > 0)
 21506                           
 21507                           
 21508                           ;HEF.c: 64: {
 21509                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
 21510  35CA  082A               	movf	(HEF_ByteArrayRead@wordAdd+1)^(0+128),w
 21511  35CB  00A1               	movwf	(FLASH_ReadWord@flashAddr+1)^(0+128)
 21512  35CC  0829               	movf	HEF_ByteArrayRead@wordAdd^(0+128),w
 21513  35CD  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 21514  35CE  31B2  228F  31B5   	fcall	_FLASH_ReadWord
 21515  35D1  0021               	movlb	1	; select bank1
 21516  35D2  0820               	movf	?_FLASH_ReadWord^(0+128),w
 21517  35D3  00A7               	movwf	??_HEF_ByteArrayRead^(0+128)
 21518  35D4  0823               	movf	HEF_ByteArrayRead@bArray^(0+128),w
 21519  35D5  0086               	movwf	6
 21520  35D6  0824               	movf	(HEF_ByteArrayRead@bArray+1)^(0+128),w
 21521  35D7  0087               	movwf	7
 21522  35D8  0827               	movf	??_HEF_ByteArrayRead^(0+128),w
 21523  35D9  0081               	movwf	1
 21524  35DA  3001               	movlw	1
 21525  35DB  07A9               	addwf	HEF_ByteArrayRead@wordAdd^(0+128),f
 21526  35DC  3000               	movlw	0
 21527  35DD  3DAA               	addwfc	(HEF_ByteArrayRead@wordAdd+1)^(0+128),f
 21528  35DE  3001               	movlw	1
 21529  35DF  07A3               	addwf	HEF_ByteArrayRead@bArray^(0+128),f
 21530  35E0  3000               	movlw	0
 21531  35E1  3DA4               	addwfc	(HEF_ByteArrayRead@bArray+1)^(0+128),f
 21532                           
 21533                           ;HEF.c: 66: count--;
 21534  35E2  3001               	movlw	1
 21535  35E3  02A6               	subwf	HEF_ByteArrayRead@count^(0+128),f
 21536  35E4                     l6269:	
 21537  35E4  0826               	movf	HEF_ByteArrayRead@count^(0+128),w
 21538  35E5  1D03               	btfss	3,2
 21539  35E6  2DCA               	goto	l6261
 21540                           
 21541                           ;HEF.c: 67: }
 21542                           ;HEF.c: 70: return 0;
 21543  35E7  3000               	movlw	0
 21544  35E8  0008               	return
 21545  35E9                     __end_of_HEF_ByteArrayRead:	
 21546                           
 21547                           	psect	text95
 21548  328F                     __ptext95:	
 21549 ;; *************** function _FLASH_ReadWord *****************
 21550 ;; Defined at:
 21551 ;;		line 58 in file "memory.c"
 21552 ;; Parameters:    Size  Location     Type
 21553 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 21554 ;; Auto vars:     Size  Location     Type
 21555 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 21556 ;; Return value:  Size  Location     Type
 21557 ;;                  2    0[BANK1 ] unsigned int 
 21558 ;; Registers used:
 21559 ;;		wreg, status,2, status,0
 21560 ;; Tracked objects:
 21561 ;;		On entry : 0/0
 21562 ;;		On exit  : 0/0
 21563 ;;		Unchanged: 0/0
 21564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21565 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21566 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21568 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21569 ;;Total ram usage:        3 bytes
 21570 ;; Hardware stack levels used:    1
 21571 ;; Hardware stack levels required when called:    5
 21572 ;; This function calls:
 21573 ;;		Nothing
 21574 ;; This function is called by:
 21575 ;;		_HEF_ByteArrayRead
 21576 ;;		_FLASH_WriteWord
 21577 ;;		_HEF_ByteRead
 21578 ;; This function uses a non-reentrant model
 21579 ;;
 21580                           
 21581                           
 21582                           ;psect for function _FLASH_ReadWord
 21583  328F                     _FLASH_ReadWord:	
 21584                           
 21585                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 21586                           
 21587                           ;incstack = 0
 21588                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 21589  328F  3000               	movlw	0
 21590  3290  1B8B               	btfsc	11,7	;volatile
 21591  3291  3001               	movlw	1
 21592  3292  0021               	movlb	1	; select bank1
 21593  3293  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 21594                           
 21595                           ;memory.c: 61: INTCONbits.GIE = 0;
 21596  3294  138B               	bcf	11,7	;volatile
 21597                           
 21598                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 21599  3295  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 21600  3296  0023               	movlb	3	; select bank3
 21601  3297  0091               	movwf	17	;volatile
 21602                           
 21603                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 21604  3298  0021               	movlb	1	; select bank1
 21605  3299  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 21606  329A  0023               	movlb	3	; select bank3
 21607  329B  0092               	movwf	18	;volatile
 21608                           
 21609                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 21610  329C  1315               	bcf	21,6	;volatile
 21611                           
 21612                           ;memory.c: 66: PMCON1bits.RD = 1;
 21613  329D  1415               	bsf	21,0	;volatile
 21614                           
 21615                           ;memory.c: 67: __nop();
 21616  329E  0000               	nop
 21617                           
 21618                           ;memory.c: 68: __nop();
 21619  329F  0000               	nop
 21620                           
 21621                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 21622  32A0  0021               	movlb	1	; select bank1
 21623  32A1  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 21624  32A2  1C03               	skipc
 21625  32A3  138B               	bcf	11,7	;volatile
 21626  32A4  1803               	skipnc
 21627  32A5  178B               	bsf	11,7	;volatile
 21628                           
 21629                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 21630  32A6  0023               	movlb	3	; select bank3
 21631  32A7  0814               	movf	20,w	;volatile
 21632  32A8  0021               	movlb	1	; select bank1
 21633  32A9  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 21634  32AA  0023               	movlb	3	; select bank3
 21635  32AB  0813               	movf	19,w	;volatile
 21636  32AC  0021               	movlb	1	; select bank1
 21637  32AD  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 21638  32AE  0008               	return
 21639  32AF                     __end_of_FLASH_ReadWord:	
 21640                           
 21641                           	psect	text96
 21642  29D5                     __ptext96:	
 21643 ;; *************** function _GetBitMask *****************
 21644 ;; Defined at:
 21645 ;;		line 390 in file "state_manager.c"
 21646 ;; Parameters:    Size  Location     Type
 21647 ;;  storage         2   20[BANK2 ] unsigned int 
 21648 ;;  index           1   22[BANK2 ] unsigned char 
 21649 ;;  shift           1   23[BANK2 ] unsigned char 
 21650 ;; Auto vars:     Size  Location     Type
 21651 ;;  shiftCount      2   30[BANK2 ] int 
 21652 ;;  mask            2   28[BANK2 ] int 
 21653 ;; Return value:  Size  Location     Type
 21654 ;;                  2   20[BANK2 ] int 
 21655 ;; Registers used:
 21656 ;;		wreg, status,2, status,0, pclath, cstack
 21657 ;; Tracked objects:
 21658 ;;		On entry : 0/0
 21659 ;;		On exit  : 0/0
 21660 ;;		Unchanged: 0/0
 21661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21662 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21663 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21664 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21665 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21666 ;;Total ram usage:       12 bytes
 21667 ;; Hardware stack levels used:    1
 21668 ;; Hardware stack levels required when called:    6
 21669 ;; This function calls:
 21670 ;;		___wmul
 21671 ;; This function is called by:
 21672 ;;		_getPreset
 21673 ;; This function uses a non-reentrant model
 21674 ;;
 21675                           
 21676                           
 21677                           ;psect for function _GetBitMask
 21678  29D5                     _GetBitMask:	
 21679                           
 21680                           ;state_manager.c: 391: int shiftCount = index * shift;
 21681                           
 21682                           ;incstack = 0
 21683                           ; Regs used in _GetBitMask: [wreg+status,2+status,0+pclath+cstack]
 21684  29D5  0022               	movlb	2	; select bank2
 21685  29D6  0836               	movf	GetBitMask@index^(0+256),w
 21686  29D7  00B8               	movwf	??_GetBitMask^(0+256)
 21687  29D8  01B9               	clrf	(??_GetBitMask^(0+256)+1)
 21688  29D9  0838               	movf	??_GetBitMask^(0+256),w
 21689  29DA  00AE               	movwf	___wmul@multiplier^(0+256)
 21690  29DB  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21691  29DC  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 21692  29DD  0837               	movf	GetBitMask@shift^(0+256),w
 21693  29DE  00BA               	movwf	(??_GetBitMask+2)^(0+256)
 21694  29DF  01BB               	clrf	((??_GetBitMask+2)^(0+256)+1)
 21695  29E0  083A               	movf	(??_GetBitMask+2)^(0+256),w
 21696  29E1  00B0               	movwf	___wmul@multiplicand^(0+256)
 21697  29E2  083B               	movf	(??_GetBitMask+3)^(0+256),w
 21698  29E3  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
 21699  29E4  31B2  221C  31A9   	fcall	___wmul
 21700  29E7  0022               	movlb	2	; select bank2
 21701  29E8  082F               	movf	(?___wmul+1)^(0+256),w
 21702  29E9  00BF               	movwf	(GetBitMask@shiftCount+1)^(0+256)
 21703  29EA  082E               	movf	?___wmul^(0+256),w
 21704  29EB  00BE               	movwf	GetBitMask@shiftCount^(0+256)
 21705                           
 21706                           ;state_manager.c: 392: int mask = 0x0f << shiftCount;
 21707  29EC  300F               	movlw	15
 21708  29ED  00B8               	movwf	??_GetBitMask^(0+256)
 21709  29EE  3000               	movlw	0
 21710  29EF  00B9               	movwf	(??_GetBitMask^(0+256)+1)
 21711  29F0  0A3E               	incf	GetBitMask@shiftCount^(0+256),w
 21712  29F1  29F4               	goto	u5034
 21713  29F2                     u5035:	
 21714  29F2  35B8               	lslf	??_GetBitMask^(0+256),f
 21715  29F3  0DB9               	rlf	(??_GetBitMask^(0+256)+1),f
 21716  29F4                     u5034:	
 21717  29F4  0B89               	decfsz	9,f
 21718  29F5  29F2               	goto	u5035
 21719  29F6  0838               	movf	??_GetBitMask^(0+256),w
 21720  29F7  00BC               	movwf	GetBitMask@mask^(0+256)
 21721  29F8  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21722  29F9  00BD               	movwf	(GetBitMask@mask+1)^(0+256)
 21723                           
 21724                           ;state_manager.c: 393: if (shift == 8) {
 21725  29FA  3008               	movlw	8
 21726  29FB  0637               	xorwf	GetBitMask@shift^(0+256),w
 21727  29FC  1D03               	btfss	3,2
 21728  29FD  2A0C               	goto	l1416
 21729                           
 21730                           ;state_manager.c: 394: mask = 0xff << shiftCount;
 21731  29FE  30FF               	movlw	255
 21732  29FF  00B8               	movwf	??_GetBitMask^(0+256)
 21733  2A00  3000               	movlw	0
 21734  2A01  00B9               	movwf	(??_GetBitMask^(0+256)+1)
 21735  2A02  0A3E               	incf	GetBitMask@shiftCount^(0+256),w
 21736  2A03  2A06               	goto	u5054
 21737  2A04                     u5055:	
 21738  2A04  35B8               	lslf	??_GetBitMask^(0+256),f
 21739  2A05  0DB9               	rlf	(??_GetBitMask^(0+256)+1),f
 21740  2A06                     u5054:	
 21741  2A06  0B89               	decfsz	9,f
 21742  2A07  2A04               	goto	u5055
 21743  2A08  0838               	movf	??_GetBitMask^(0+256),w
 21744  2A09  00BC               	movwf	GetBitMask@mask^(0+256)
 21745  2A0A  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21746  2A0B  00BD               	movwf	(GetBitMask@mask+1)^(0+256)
 21747  2A0C                     l1416:	
 21748                           
 21749                           ;state_manager.c: 395: }
 21750                           ;state_manager.c: 397: return (storage & mask) >> shiftCount;
 21751  2A0C  0834               	movf	GetBitMask@storage^(0+256),w
 21752  2A0D  053C               	andwf	GetBitMask@mask^(0+256),w
 21753  2A0E  00B8               	movwf	??_GetBitMask^(0+256)
 21754  2A0F  0835               	movf	(GetBitMask@storage+1)^(0+256),w
 21755  2A10  053D               	andwf	(GetBitMask@mask+1)^(0+256),w
 21756  2A11  00B9               	movwf	(??_GetBitMask+1)^(0+256)
 21757  2A12  0A3E               	incf	GetBitMask@shiftCount^(0+256),w
 21758  2A13  2A16               	goto	u5064
 21759  2A14                     u5065:	
 21760  2A14  36B9               	lsrf	(??_GetBitMask^(0+256)+1),f
 21761  2A15  0CB8               	rrf	??_GetBitMask^(0+256),f
 21762  2A16                     u5064:	
 21763  2A16  0B89               	decfsz	9,f
 21764  2A17  2A14               	goto	u5065
 21765  2A18  0838               	movf	??_GetBitMask^(0+256),w
 21766  2A19  00B4               	movwf	?_GetBitMask^(0+256)
 21767  2A1A  0839               	movf	(??_GetBitMask+1)^(0+256),w
 21768  2A1B  00B5               	movwf	(?_GetBitMask+1)^(0+256)
 21769  2A1C  0008               	return
 21770  2A1D                     __end_of_GetBitMask:	
 21771                           
 21772                           	psect	text97
 21773  321C                     __ptext97:	
 21774 ;; *************** function ___wmul *****************
 21775 ;; Defined at:
 21776 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 21777 ;; Parameters:    Size  Location     Type
 21778 ;;  multiplier      2   14[BANK2 ] unsigned int 
 21779 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 21780 ;; Auto vars:     Size  Location     Type
 21781 ;;  product         2   18[BANK2 ] unsigned int 
 21782 ;; Return value:  Size  Location     Type
 21783 ;;                  2   14[BANK2 ] unsigned int 
 21784 ;; Registers used:
 21785 ;;		wreg, status,2, status,0
 21786 ;; Tracked objects:
 21787 ;;		On entry : 0/0
 21788 ;;		On exit  : 0/0
 21789 ;;		Unchanged: 0/0
 21790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21791 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21792 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21794 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21795 ;;Total ram usage:        6 bytes
 21796 ;; Hardware stack levels used:    1
 21797 ;; Hardware stack levels required when called:    5
 21798 ;; This function calls:
 21799 ;;		Nothing
 21800 ;; This function is called by:
 21801 ;;		_GetBitMask
 21802 ;;		_calcCosArray
 21803 ;;		_updateModulationArray
 21804 ;;		_modCos
 21805 ;;		_eval_poly
 21806 ;; This function uses a non-reentrant model
 21807 ;;
 21808                           
 21809                           
 21810                           ;psect for function ___wmul
 21811  321C                     ___wmul:	
 21812                           
 21813                           ;incstack = 0
 21814                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 21815  321C  0022               	movlb	2	; select bank2
 21816  321D  01B2               	clrf	___wmul@product^(0+256)
 21817  321E  01B3               	clrf	(___wmul@product+1)^(0+256)
 21818  321F                     l6207:	
 21819  321F  1C2E               	btfss	___wmul@multiplier^(0+256),0
 21820  3220  2A25               	goto	l2449
 21821  3221  0830               	movf	___wmul@multiplicand^(0+256),w
 21822  3222  07B2               	addwf	___wmul@product^(0+256),f
 21823  3223  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 21824  3224  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 21825  3225                     l2449:	
 21826  3225  3001               	movlw	1
 21827  3226                     u4845:	
 21828  3226  35B0               	lslf	___wmul@multiplicand^(0+256),f
 21829  3227  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 21830  3228  0B89               	decfsz	9,f
 21831  3229  2A26               	goto	u4845
 21832  322A  3001               	movlw	1
 21833  322B                     u4855:	
 21834  322B  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 21835  322C  0CAE               	rrf	___wmul@multiplier^(0+256),f
 21836  322D  0B89               	decfsz	9,f
 21837  322E  2A2B               	goto	u4855
 21838  322F  082E               	movf	___wmul@multiplier^(0+256),w
 21839  3230  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 21840  3231  1D03               	btfss	3,2
 21841  3232  2A1F               	goto	l6207
 21842  3233  0833               	movf	(___wmul@product+1)^(0+256),w
 21843  3234  00AF               	movwf	(?___wmul+1)^(0+256)
 21844  3235  0832               	movf	___wmul@product^(0+256),w
 21845  3236  00AE               	movwf	?___wmul^(0+256)
 21846  3237  0008               	return
 21847  3238                     __end_of___wmul:	
 21848                           
 21849                           	psect	text98
 21850  34E9                     __ptext98:	
 21851 ;; *************** function _InitApp *****************
 21852 ;; Defined at:
 21853 ;;		line 23 in file "user.c"
 21854 ;; Parameters:    Size  Location     Type
 21855 ;;		None
 21856 ;; Auto vars:     Size  Location     Type
 21857 ;;		None
 21858 ;; Return value:  Size  Location     Type
 21859 ;;                  1    wreg      void 
 21860 ;; Registers used:
 21861 ;;		wreg, status,2, status,0, pclath, cstack
 21862 ;; Tracked objects:
 21863 ;;		On entry : 0/0
 21864 ;;		On exit  : 0/0
 21865 ;;		Unchanged: 0/0
 21866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21871 ;;Total ram usage:        0 bytes
 21872 ;; Hardware stack levels used:    1
 21873 ;; Hardware stack levels required when called:    7
 21874 ;; This function calls:
 21875 ;;		_init_adc
 21876 ;;		_init_pwm
 21877 ;; This function is called by:
 21878 ;;		_main
 21879 ;; This function uses a non-reentrant model
 21880 ;;
 21881                           
 21882                           
 21883                           ;psect for function _InitApp
 21884  34E9                     _InitApp:	
 21885                           
 21886                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 21887                           
 21888                           ;incstack = 0
 21889                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 21890  34E9  0021               	movlb	1	; select bank1
 21891  34EA  100D               	bcf	13,0	;volatile
 21892                           
 21893                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 21894  34EB  108D               	bcf	13,1	;volatile
 21895                           
 21896                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 21897  34EC  110D               	bcf	13,2	;volatile
 21898                           
 21899                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 21900  34ED  118D               	bcf	13,3	;volatile
 21901                           
 21902                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 21903  34EE  120D               	bcf	13,4	;volatile
 21904                           
 21905                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 21906  34EF  128D               	bcf	13,5	;volatile
 21907                           
 21908                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 21909  34F0  140E               	bsf	14,0	;volatile
 21910                           
 21911                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 21912  34F1  120E               	bcf	14,4	;volatile
 21913                           
 21914                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 21915  34F2  128E               	bcf	14,5	;volatile
 21916                           
 21917                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 21918  34F3  100F               	bcf	15,0	;volatile
 21919                           
 21920                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 21921  34F4  108F               	bcf	15,1	;volatile
 21922                           
 21923                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 21924  34F5  110F               	bcf	15,2	;volatile
 21925                           
 21926                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 21927  34F6  118F               	bcf	15,3	;volatile
 21928                           
 21929                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 21930  34F7  120F               	bcf	15,4	;volatile
 21931                           
 21932                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 21933  34F8  168F               	bsf	15,5	;volatile
 21934                           
 21935                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 21936  34F9  170F               	bsf	15,6	;volatile
 21937                           
 21938                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 21939  34FA  178F               	bsf	15,7	;volatile
 21940                           
 21941                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 21942  34FB  1410               	bsf	16,0	;volatile
 21943                           
 21944                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 21945  34FC  1490               	bsf	16,1	;volatile
 21946                           
 21947                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 21948  34FD  0023               	movlb	3	; select bank3
 21949  34FE  1010               	bcf	16,0	;volatile
 21950                           
 21951                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 21952  34FF  1090               	bcf	16,1	;volatile
 21953                           
 21954                           ;user.c: 53: PORTEbits.RE0 = 0;
 21955  3500  0020               	movlb	0	; select bank0
 21956  3501  1010               	bcf	16,0	;volatile
 21957                           
 21958                           ;user.c: 54: PORTEbits.RE1 = 0;
 21959  3502  1090               	bcf	16,1	;volatile
 21960                           
 21961                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 21962  3503  0026               	movlb	6	; select bank6
 21963  3504  100C               	bcf	12,0	;volatile
 21964                           
 21965                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 21966  3505  108C               	bcf	12,1	;volatile
 21967                           
 21968                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 21969  3506  110C               	bcf	12,2	;volatile
 21970                           
 21971                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 21972  3507  118C               	bcf	12,3	;volatile
 21973                           
 21974                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 21975  3508  120C               	bcf	12,4	;volatile
 21976                           
 21977                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 21978  3509  128C               	bcf	12,5	;volatile
 21979                           
 21980                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 21981  350A  170C               	bsf	12,6	;volatile
 21982                           
 21983                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 21984  350B  0028               	movlb	8	; select bank8
 21985  350C  130C               	bcf	12,6	;volatile
 21986                           
 21987                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 21988  350D  0026               	movlb	6	; select bank6
 21989  350E  108D               	bcf	13,1	;volatile
 21990                           
 21991                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 21992  350F  110D               	bcf	13,2	;volatile
 21993                           
 21994                           ;user.c: 68: init_adc();
 21995  3510  31BF  27EC  31B4   	fcall	_init_adc
 21996                           
 21997                           ;user.c: 69: init_pwm();
 21998  3513  31A8  20C5         	fcall	_init_pwm
 21999                           
 22000                           ;user.c: 71: INTCONbits.GIE = 0b1;
 22001  3515  178B               	bsf	11,7	;volatile
 22002                           
 22003                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 22004  3516  168B               	bsf	11,5	;volatile
 22005                           
 22006                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 22007  3517  110B               	bcf	11,2	;volatile
 22008  3518  0008               	return
 22009  3519                     __end_of_InitApp:	
 22010                           
 22011                           	psect	text99
 22012  28C5                     __ptext99:	
 22013 ;; *************** function _init_pwm *****************
 22014 ;; Defined at:
 22015 ;;		line 129 in file "user.c"
 22016 ;; Parameters:    Size  Location     Type
 22017 ;;		None
 22018 ;; Auto vars:     Size  Location     Type
 22019 ;;		None
 22020 ;; Return value:  Size  Location     Type
 22021 ;;                  1    wreg      void 
 22022 ;; Registers used:
 22023 ;;		wreg, status,2, status,0, pclath, cstack
 22024 ;; Tracked objects:
 22025 ;;		On entry : 0/0
 22026 ;;		On exit  : 0/0
 22027 ;;		Unchanged: 0/0
 22028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22033 ;;Total ram usage:        0 bytes
 22034 ;; Hardware stack levels used:    1
 22035 ;; Hardware stack levels required when called:    6
 22036 ;; This function calls:
 22037 ;;		_init_timer0
 22038 ;;		_init_timer2
 22039 ;; This function is called by:
 22040 ;;		_InitApp
 22041 ;; This function uses a non-reentrant model
 22042 ;;
 22043                           
 22044                           
 22045                           ;psect for function _init_pwm
 22046  28C5                     _init_pwm:	
 22047                           
 22048                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 22049                           
 22050                           ;incstack = 0
 22051                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 22052  28C5  0022               	movlb	2	; select bank2
 22053  28C6  101D               	bcf	29,0	;volatile
 22054                           
 22055                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 22056  28C7  0021               	movlb	1	; select bank1
 22057  28C8  110E               	bcf	14,2	;volatile
 22058                           
 22059                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 22060  28C9  108E               	bcf	14,1	;volatile
 22061                           
 22062                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 22063  28CA  0026               	movlb	6	; select bank6
 22064  28CB  100D               	bcf	13,0	;volatile
 22065                           
 22066                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 22067  28CC  118D               	bcf	13,3	;volatile
 22068                           
 22069                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 22070  28CD  120D               	bcf	13,4	;volatile
 22071                           
 22072                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 22073  28CE  0021               	movlb	1	; select bank1
 22074  28CF  1310               	bcf	16,6	;volatile
 22075                           
 22076                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 22077  28D0  1290               	bcf	16,5	;volatile
 22078                           
 22079                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 22080  28D1  1210               	bcf	16,4	;volatile
 22081                           
 22082                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 22083  28D2  1190               	bcf	16,3	;volatile
 22084                           
 22085                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 22086  28D3  1110               	bcf	16,2	;volatile
 22087                           
 22088                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 22089  28D4  300F               	movlw	15
 22090  28D5  0025               	movlb	5	; select bank5
 22091  28D6  0493               	iorwf	19,f	;volatile
 22092                           
 22093                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 22094  28D7  300F               	movlw	15
 22095  28D8  049A               	iorwf	26,f	;volatile
 22096                           
 22097                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 22098  28D9  300F               	movlw	15
 22099  28DA  0026               	movlb	6	; select bank6
 22100  28DB  0493               	iorwf	19,f	;volatile
 22101                           
 22102                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 22103  28DC  300F               	movlw	15
 22104  28DD  049A               	iorwf	26,f	;volatile
 22105                           
 22106                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 22107  28DE  300F               	movlw	15
 22108  28DF  049E               	iorwf	30,f	;volatile
 22109                           
 22110                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 22111  28E0  300F               	movlw	15
 22112  28E1  002C               	movlb	12	; select bank12
 22113  28E2  0493               	iorwf	19,f	;volatile
 22114                           
 22115                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 22116  28E3  300F               	movlw	15
 22117  28E4  0496               	iorwf	22,f	;volatile
 22118                           
 22119                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 22120  28E5  300F               	movlw	15
 22121  28E6  0499               	iorwf	25,f	;volatile
 22122                           
 22123                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 22124  28E7  300F               	movlw	15
 22125  28E8  049C               	iorwf	28,f	;volatile
 22126                           
 22127                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 22128  28E9  300F               	movlw	15
 22129  28EA  049F               	iorwf	31,f	;volatile
 22130                           
 22131                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 22132  28EB  0025               	movlb	5	; select bank5
 22133  28EC  019D               	clrf	29	;volatile
 22134                           
 22135                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 22136  28ED  019E               	clrf	30	;volatile
 22137                           
 22138                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 22139  28EE  019F               	clrf	31	;volatile
 22140                           
 22141                           ;user.c: 154: CCPR1 = 50;
 22142  28EF  3000               	movlw	0
 22143  28F0  0092               	movwf	18	;volatile
 22144  28F1  3032               	movlw	50
 22145  28F2  0091               	movwf	17	;volatile
 22146                           
 22147                           ;user.c: 155: CCPR2 = 100;
 22148  28F3  3000               	movlw	0
 22149  28F4  0099               	movwf	25	;volatile
 22150  28F5  3064               	movlw	100
 22151  28F6  0098               	movwf	24	;volatile
 22152                           
 22153                           ;user.c: 156: CCPR3 = 150;
 22154  28F7  3000               	movlw	0
 22155  28F8  0026               	movlb	6	; select bank6
 22156  28F9  0092               	movwf	18	;volatile
 22157  28FA  3096               	movlw	150
 22158  28FB  0091               	movwf	17	;volatile
 22159                           
 22160                           ;user.c: 157: CCPR4 = 200;
 22161  28FC  3000               	movlw	0
 22162  28FD  0099               	movwf	25	;volatile
 22163  28FE  30C8               	movlw	200
 22164  28FF  0098               	movwf	24	;volatile
 22165                           
 22166                           ;user.c: 158: init_timer2();
 22167  2900  31BF  27BF  31A8   	fcall	_init_timer2
 22168                           
 22169                           ;user.c: 159: init_timer0();
 22170  2903  31BF  2797         	fcall	_init_timer0
 22171  2905  0008               	return
 22172  2906                     __end_of_init_pwm:	
 22173                           
 22174                           	psect	text100
 22175  3FBF                     __ptext100:	
 22176 ;; *************** function _init_timer2 *****************
 22177 ;; Defined at:
 22178 ;;		line 162 in file "user.c"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;		None
 22181 ;; Auto vars:     Size  Location     Type
 22182 ;;		None
 22183 ;; Return value:  Size  Location     Type
 22184 ;;                  1    wreg      void 
 22185 ;; Registers used:
 22186 ;;		wreg, status,2, status,0
 22187 ;; Tracked objects:
 22188 ;;		On entry : 0/0
 22189 ;;		On exit  : 0/0
 22190 ;;		Unchanged: 0/0
 22191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22196 ;;Total ram usage:        0 bytes
 22197 ;; Hardware stack levels used:    1
 22198 ;; Hardware stack levels required when called:    5
 22199 ;; This function calls:
 22200 ;;		Nothing
 22201 ;; This function is called by:
 22202 ;;		_init_pwm
 22203 ;; This function uses a non-reentrant model
 22204 ;;
 22205                           
 22206                           
 22207                           ;psect for function _init_timer2
 22208  3FBF                     _init_timer2:	
 22209                           
 22210                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 22211                           
 22212                           ;incstack = 0
 22213                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 22214  3FBF  3087               	movlw	-121
 22215  3FC0  0020               	movlb	0	; select bank0
 22216  3FC1  059C               	andwf	28,f	;volatile
 22217                           
 22218                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 22219  3FC2  30FC               	movlw	-4
 22220  3FC3  059C               	andwf	28,f	;volatile
 22221                           
 22222                           ;user.c: 165: PR2 = 0xFF;
 22223  3FC4  30FF               	movlw	255
 22224  3FC5  009B               	movwf	27	;volatile
 22225                           
 22226                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 22227  3FC6  151C               	bsf	28,2	;volatile
 22228  3FC7  0008               	return
 22229  3FC8                     __end_of_init_timer2:	
 22230                           
 22231                           	psect	text101
 22232  3F97                     __ptext101:	
 22233 ;; *************** function _init_timer0 *****************
 22234 ;; Defined at:
 22235 ;;		line 169 in file "user.c"
 22236 ;; Parameters:    Size  Location     Type
 22237 ;;		None
 22238 ;; Auto vars:     Size  Location     Type
 22239 ;;		None
 22240 ;; Return value:  Size  Location     Type
 22241 ;;                  1    wreg      void 
 22242 ;; Registers used:
 22243 ;;		None
 22244 ;; Tracked objects:
 22245 ;;		On entry : 0/0
 22246 ;;		On exit  : 0/0
 22247 ;;		Unchanged: 0/0
 22248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22253 ;;Total ram usage:        0 bytes
 22254 ;; Hardware stack levels used:    1
 22255 ;; Hardware stack levels required when called:    5
 22256 ;; This function calls:
 22257 ;;		Nothing
 22258 ;; This function is called by:
 22259 ;;		_init_pwm
 22260 ;; This function uses a non-reentrant model
 22261 ;;
 22262                           
 22263                           
 22264                           ;psect for function _init_timer0
 22265  3F97                     _init_timer0:	
 22266                           
 22267                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 22268                           
 22269                           ;incstack = 0
 22270                           ; Regs used in _init_timer0: []
 22271  3F97  0021               	movlb	1	; select bank1
 22272  3F98  1295               	bcf	21,5	;volatile
 22273                           
 22274                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 22275  3F99  1195               	bcf	21,3	;volatile
 22276                           
 22277                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 22278  3F9A  1015               	bcf	21,0	;volatile
 22279                           
 22280                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 22281  3F9B  1495               	bsf	21,1	;volatile
 22282                           
 22283                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 22284  3F9C  1115               	bcf	21,2	;volatile
 22285  3F9D  0008               	return
 22286  3F9E                     __end_of_init_timer0:	
 22287                           
 22288                           	psect	text102
 22289  3FEC                     __ptext102:	
 22290 ;; *************** function _init_adc *****************
 22291 ;; Defined at:
 22292 ;;		line 115 in file "user.c"
 22293 ;; Parameters:    Size  Location     Type
 22294 ;;		None
 22295 ;; Auto vars:     Size  Location     Type
 22296 ;;		None
 22297 ;; Return value:  Size  Location     Type
 22298 ;;                  1    wreg      void 
 22299 ;; Registers used:
 22300 ;;		wreg, status,2, status,0
 22301 ;; Tracked objects:
 22302 ;;		On entry : 0/0
 22303 ;;		On exit  : 0/0
 22304 ;;		Unchanged: 0/0
 22305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22310 ;;Total ram usage:        0 bytes
 22311 ;; Hardware stack levels used:    1
 22312 ;; Hardware stack levels required when called:    5
 22313 ;; This function calls:
 22314 ;;		Nothing
 22315 ;; This function is called by:
 22316 ;;		_InitApp
 22317 ;; This function uses a non-reentrant model
 22318 ;;
 22319                           
 22320                           
 22321                           ;psect for function _init_adc
 22322  3FEC                     _init_adc:	
 22323                           
 22324                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 22325                           
 22326                           ;incstack = 0
 22327                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 22328  3FEC  0021               	movlb	1	; select bank1
 22329  3FED  179E               	bsf	30,7	;volatile
 22330                           
 22331                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 22332  3FEE  081E               	movf	30,w	;volatile
 22333  3FEF  398F               	andlw	-113
 22334  3FF0  3860               	iorlw	96
 22335  3FF1  009E               	movwf	30	;volatile
 22336                           
 22337                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 22338  3FF2  30FC               	movlw	-4
 22339  3FF3  059E               	andwf	30,f	;volatile
 22340                           
 22341                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 22342  3FF4  141D               	bsf	29,0	;volatile
 22343  3FF5  0008               	return
 22344  3FF6                     __end_of_init_adc:	
 22345                           
 22346                           	psect	text103
 22347  2000                     __ptext103:	
 22348 ;; *************** function _ConfigureOscillator *****************
 22349 ;; Defined at:
 22350 ;;		line 18 in file "system.c"
 22351 ;; Parameters:    Size  Location     Type
 22352 ;;		None
 22353 ;; Auto vars:     Size  Location     Type
 22354 ;;		None
 22355 ;; Return value:  Size  Location     Type
 22356 ;;                  1    wreg      void 
 22357 ;; Registers used:
 22358 ;;		wreg, status,2, status,0
 22359 ;; Tracked objects:
 22360 ;;		On entry : 0/0
 22361 ;;		On exit  : 0/0
 22362 ;;		Unchanged: 0/0
 22363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22368 ;;Total ram usage:        0 bytes
 22369 ;; Hardware stack levels used:    1
 22370 ;; Hardware stack levels required when called:    5
 22371 ;; This function calls:
 22372 ;;		Nothing
 22373 ;; This function is called by:
 22374 ;;		_main
 22375 ;; This function uses a non-reentrant model
 22376 ;;
 22377                           
 22378                           
 22379                           ;psect for function _ConfigureOscillator
 22380  2000                     _ConfigureOscillator:	
 22381                           
 22382                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 22383                           
 22384                           ;incstack = 0
 22385                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 22386  2000  30FC               	movlw	-4
 22387  2001  0021               	movlb	1	; select bank1
 22388  2002  0599               	andwf	25,f	;volatile
 22389  2003  0008               	return
 22390  2004                     __end_of_ConfigureOscillator:	
 22391                           
 22392                           	psect	intentry
 22393  0004                     __pintentry:	
 22394 ;; *************** function _isr *****************
 22395 ;; Defined at:
 22396 ;;		line 30 in file "interrupts.c"
 22397 ;; Parameters:    Size  Location     Type
 22398 ;;		None
 22399 ;; Auto vars:     Size  Location     Type
 22400 ;;  subDiv          1   56[BANK0 ] unsigned char 
 22401 ;; Return value:  Size  Location     Type
 22402 ;;                  1    wreg      void 
 22403 ;; Registers used:
 22404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22405 ;; Tracked objects:
 22406 ;;		On entry : 0/0
 22407 ;;		On exit  : 0/0
 22408 ;;		Unchanged: 0/0
 22409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 22410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22412 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22413 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 22414 ;;Total ram usage:        7 bytes
 22415 ;; Hardware stack levels used:    1
 22416 ;; Hardware stack levels required when called:    4
 22417 ;; This function calls:
 22418 ;;		_USARTHandleRxInt
 22419 ;;		_modulation
 22420 ;;		_saveState
 22421 ;;		i1___awdiv
 22422 ;;		i1_getModulationSubdivision
 22423 ;;		i1_set_leds_top
 22424 ;; This function is called by:
 22425 ;;		Interrupt level 1
 22426 ;; This function uses a non-reentrant model
 22427 ;;
 22428                           
 22429  0004                     _isr:	
 22430                           
 22431                           ;incstack = 0
 22432                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22433  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 22434  0005  3180               	pagesel	$
 22435  0006  0020               	movlb	0	; select bank0
 22436  0007  087F               	movf	127,w
 22437  0008  00D7               	movwf	??_isr+5
 22438                           
 22439                           ;interrupts.c: 33: extern char isInitialized;
 22440                           ;interrupts.c: 34: extern volatile long timer;
 22441                           ;interrupts.c: 35: extern volatile long sub_timer;
 22442                           ;interrupts.c: 36: extern volatile long tap_timer;
 22443                           ;interrupts.c: 38: extern int mod_delay_time;
 22444                           ;interrupts.c: 42: extern int top_push_state;
 22445                           ;interrupts.c: 43: extern uint8_t longBypass_start;
 22446                           ;interrupts.c: 44: extern volatile long mod_timer;
 22447                           ;interrupts.c: 45: extern volatile long delay_time;
 22448                           ;interrupts.c: 48: if (RCIE && RCIF) {
 22449  0009  0021               	movlb	1	; select bank1
 22450  000A  1E91               	btfss	17,5	;volatile
 22451  000B  2812               	goto	i1l8435
 22452  000C  0020               	movlb	0	; select bank0
 22453  000D  1E91               	btfss	17,5	;volatile
 22454  000E  2812               	goto	i1l8435
 22455                           
 22456                           ;interrupts.c: 50: USARTHandleRxInt();
 22457  000F  31A9  2106  3180   	fcall	_USARTHandleRxInt
 22458  0012                     i1l8435:	
 22459                           
 22460                           ;interrupts.c: 76: }
 22461                           ;interrupts.c: 81: if (INTCONbits.TMR0IF == 1) {
 22462  0012  1D0B               	btfss	11,2	;volatile
 22463  0013  2B3F               	goto	i1l150
 22464                           
 22465                           ;interrupts.c: 83: if (isInitialized == 0) {
 22466  0014  0020               	movlb	0	; select bank0
 22467  0015  0862               	movf	_isInitialized,w
 22468  0016  1903               	btfsc	3,2
 22469  0017  2B3E               	goto	i1l8567
 22470                           
 22471                           ;interrupts.c: 88: }
 22472                           ;interrupts.c: 105: if (timer == 0) {
 22473                           
 22474                           ;interrupts.c: 87: return;
 22475                           
 22476                           ;interrupts.c: 86: INTCONbits.TMR0IF = 0;
 22477  0018  0024               	movlb	4	; select bank4
 22478  0019  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22479  001A  042E               	iorwf	(_timer+2)^(0+512),w	;volatile
 22480  001B  042D               	iorwf	(_timer+1)^(0+512),w	;volatile
 22481  001C  042C               	iorwf	_timer^(0+512),w	;volatile
 22482  001D  1D03               	skipz
 22483  001E  2823               	goto	i1l151
 22484                           
 22485                           ;interrupts.c: 106: tmpModDelay = mod_delay_time;
 22486  001F  0864               	movf	(_mod_delay_time+1)^(0+512),w
 22487  0020  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 22488  0021  0863               	movf	_mod_delay_time^(0+512),w
 22489  0022  00C4               	movwf	_tmpModDelay^(0+512)
 22490  0023                     i1l151:	
 22491                           
 22492                           ;interrupts.c: 107: }
 22493                           ;interrupts.c: 115: timer = timer + 1;
 22494  0023  3001               	movlw	1
 22495  0024  0020               	movlb	0	; select bank0
 22496  0025  00D2               	movwf	??_isr
 22497  0026  3000               	movlw	0
 22498  0027  00D3               	movwf	??_isr+1
 22499  0028  3000               	movlw	0
 22500  0029  00D4               	movwf	??_isr+2
 22501  002A  3000               	movlw	0
 22502  002B  00D5               	movwf	??_isr+3
 22503  002C  0024               	movlb	4	; select bank4
 22504  002D  082C               	movf	_timer^(0+512),w	;volatile
 22505  002E  0020               	movlb	0	; select bank0
 22506  002F  07D2               	addwf	??_isr,f
 22507  0030  0024               	movlb	4	; select bank4
 22508  0031  082D               	movf	(_timer+1)^(0+512),w	;volatile
 22509  0032  0020               	movlb	0	; select bank0
 22510  0033  3DD3               	addwfc	??_isr+1,f
 22511  0034  0024               	movlb	4	; select bank4
 22512  0035  082E               	movf	(_timer+2)^(0+512),w	;volatile
 22513  0036  0020               	movlb	0	; select bank0
 22514  0037  3DD4               	addwfc	??_isr+2,f
 22515  0038  0024               	movlb	4	; select bank4
 22516  0039  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22517  003A  0020               	movlb	0	; select bank0
 22518  003B  3DD5               	addwfc	??_isr+3,f
 22519  003C  0855               	movf	??_isr+3,w
 22520  003D  0024               	movlb	4	; select bank4
 22521  003E  00AF               	movwf	(_timer+3)^(0+512)	;volatile
 22522  003F  0020               	movlb	0	; select bank0
 22523  0040  0854               	movf	??_isr+2,w
 22524  0041  0024               	movlb	4	; select bank4
 22525  0042  00AE               	movwf	(_timer+2)^(0+512)	;volatile
 22526  0043  0020               	movlb	0	; select bank0
 22527  0044  0853               	movf	??_isr+1,w
 22528  0045  0024               	movlb	4	; select bank4
 22529  0046  00AD               	movwf	(_timer+1)^(0+512)	;volatile
 22530  0047  0020               	movlb	0	; select bank0
 22531  0048  0852               	movf	??_isr,w
 22532  0049  0024               	movlb	4	; select bank4
 22533  004A  00AC               	movwf	_timer^(0+512)	;volatile
 22534                           
 22535                           ;interrupts.c: 116: sub_timer = sub_timer + 1;
 22536  004B  3001               	movlw	1
 22537  004C  0020               	movlb	0	; select bank0
 22538  004D  00D2               	movwf	??_isr
 22539  004E  3000               	movlw	0
 22540  004F  00D3               	movwf	??_isr+1
 22541  0050  3000               	movlw	0
 22542  0051  00D4               	movwf	??_isr+2
 22543  0052  3000               	movlw	0
 22544  0053  00D5               	movwf	??_isr+3
 22545  0054  0024               	movlb	4	; select bank4
 22546  0055  0828               	movf	_sub_timer^(0+512),w	;volatile
 22547  0056  0020               	movlb	0	; select bank0
 22548  0057  07D2               	addwf	??_isr,f
 22549  0058  0024               	movlb	4	; select bank4
 22550  0059  0829               	movf	(_sub_timer+1)^(0+512),w	;volatile
 22551  005A  0020               	movlb	0	; select bank0
 22552  005B  3DD3               	addwfc	??_isr+1,f
 22553  005C  0024               	movlb	4	; select bank4
 22554  005D  082A               	movf	(_sub_timer+2)^(0+512),w	;volatile
 22555  005E  0020               	movlb	0	; select bank0
 22556  005F  3DD4               	addwfc	??_isr+2,f
 22557  0060  0024               	movlb	4	; select bank4
 22558  0061  082B               	movf	(_sub_timer+3)^(0+512),w	;volatile
 22559  0062  0020               	movlb	0	; select bank0
 22560  0063  3DD5               	addwfc	??_isr+3,f
 22561  0064  0855               	movf	??_isr+3,w
 22562  0065  0024               	movlb	4	; select bank4
 22563  0066  00AB               	movwf	(_sub_timer+3)^(0+512)	;volatile
 22564  0067  0020               	movlb	0	; select bank0
 22565  0068  0854               	movf	??_isr+2,w
 22566  0069  0024               	movlb	4	; select bank4
 22567  006A  00AA               	movwf	(_sub_timer+2)^(0+512)	;volatile
 22568  006B  0020               	movlb	0	; select bank0
 22569  006C  0853               	movf	??_isr+1,w
 22570  006D  0024               	movlb	4	; select bank4
 22571  006E  00A9               	movwf	(_sub_timer+1)^(0+512)	;volatile
 22572  006F  0020               	movlb	0	; select bank0
 22573  0070  0852               	movf	??_isr,w
 22574  0071  0024               	movlb	4	; select bank4
 22575  0072  00A8               	movwf	_sub_timer^(0+512)	;volatile
 22576                           
 22577                           ;interrupts.c: 117: tap_timer = tap_timer + 1;
 22578  0073  3001               	movlw	1
 22579  0074  0020               	movlb	0	; select bank0
 22580  0075  00D2               	movwf	??_isr
 22581  0076  3000               	movlw	0
 22582  0077  00D3               	movwf	??_isr+1
 22583  0078  3000               	movlw	0
 22584  0079  00D4               	movwf	??_isr+2
 22585  007A  3000               	movlw	0
 22586  007B  00D5               	movwf	??_isr+3
 22587  007C  0859               	movf	_tap_timer,w	;volatile
 22588  007D  07D2               	addwf	??_isr,f
 22589  007E  085A               	movf	_tap_timer+1,w	;volatile
 22590  007F  3DD3               	addwfc	??_isr+1,f
 22591  0080  085B               	movf	_tap_timer+2,w	;volatile
 22592  0081  3DD4               	addwfc	??_isr+2,f
 22593  0082  085C               	movf	_tap_timer+3,w	;volatile
 22594  0083  3DD5               	addwfc	??_isr+3,f
 22595  0084  0855               	movf	??_isr+3,w
 22596  0085  00DC               	movwf	_tap_timer+3	;volatile
 22597  0086  0854               	movf	??_isr+2,w
 22598  0087  00DB               	movwf	_tap_timer+2	;volatile
 22599  0088  0853               	movf	??_isr+1,w
 22600  0089  00DA               	movwf	_tap_timer+1	;volatile
 22601  008A  0852               	movf	??_isr,w
 22602  008B  00D9               	movwf	_tap_timer	;volatile
 22603                           
 22604                           ;interrupts.c: 118: mod_timer = mod_timer + 1;
 22605  008C  3001               	movlw	1
 22606  008D  00D2               	movwf	??_isr
 22607  008E  3000               	movlw	0
 22608  008F  00D3               	movwf	??_isr+1
 22609  0090  3000               	movlw	0
 22610  0091  00D4               	movwf	??_isr+2
 22611  0092  3000               	movlw	0
 22612  0093  00D5               	movwf	??_isr+3
 22613  0094  0024               	movlb	4	; select bank4
 22614  0095  0824               	movf	_mod_timer^(0+512),w	;volatile
 22615  0096  0020               	movlb	0	; select bank0
 22616  0097  07D2               	addwf	??_isr,f
 22617  0098  0024               	movlb	4	; select bank4
 22618  0099  0825               	movf	(_mod_timer+1)^(0+512),w	;volatile
 22619  009A  0020               	movlb	0	; select bank0
 22620  009B  3DD3               	addwfc	??_isr+1,f
 22621  009C  0024               	movlb	4	; select bank4
 22622  009D  0826               	movf	(_mod_timer+2)^(0+512),w	;volatile
 22623  009E  0020               	movlb	0	; select bank0
 22624  009F  3DD4               	addwfc	??_isr+2,f
 22625  00A0  0024               	movlb	4	; select bank4
 22626  00A1  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 22627  00A2  0020               	movlb	0	; select bank0
 22628  00A3  3DD5               	addwfc	??_isr+3,f
 22629  00A4  0855               	movf	??_isr+3,w
 22630  00A5  0024               	movlb	4	; select bank4
 22631  00A6  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 22632  00A7  0020               	movlb	0	; select bank0
 22633  00A8  0854               	movf	??_isr+2,w
 22634  00A9  0024               	movlb	4	; select bank4
 22635  00AA  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 22636  00AB  0020               	movlb	0	; select bank0
 22637  00AC  0853               	movf	??_isr+1,w
 22638  00AD  0024               	movlb	4	; select bank4
 22639  00AE  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 22640  00AF  0020               	movlb	0	; select bank0
 22641  00B0  0852               	movf	??_isr,w
 22642  00B1  0024               	movlb	4	; select bank4
 22643  00B2  00A4               	movwf	_mod_timer^(0+512)	;volatile
 22644                           
 22645                           ;interrupts.c: 119: double_timer++;
 22646  00B3  3001               	movlw	1
 22647  00B4  07A0               	addwf	_double_timer^(0+512),f	;volatile
 22648  00B5  3000               	movlw	0
 22649  00B6  3DA1               	addwfc	(_double_timer+1)^(0+512),f	;volatile
 22650  00B7  3000               	movlw	0
 22651  00B8  3DA2               	addwfc	(_double_timer+2)^(0+512),f	;volatile
 22652  00B9  3000               	movlw	0
 22653  00BA  3DA3               	addwfc	(_double_timer+3)^(0+512),f	;volatile
 22654                           
 22655                           ;interrupts.c: 120: save_timer++;
 22656  00BB  3001               	movlw	1
 22657  00BC  0025               	movlb	5	; select bank5
 22658  00BD  07D2               	addwf	_save_timer^(0+640),f	;volatile
 22659  00BE  3000               	movlw	0
 22660  00BF  3DD3               	addwfc	(_save_timer+1)^(0+640),f	;volatile
 22661  00C0  3000               	movlw	0
 22662  00C1  3DD4               	addwfc	(_save_timer+2)^(0+640),f	;volatile
 22663  00C2  3000               	movlw	0
 22664  00C3  3DD5               	addwfc	(_save_timer+3)^(0+640),f	;volatile
 22665                           
 22666                           ;interrupts.c: 121: save_counter++;
 22667  00C4  3001               	movlw	1
 22668  00C5  07CE               	addwf	_save_counter^(0+640),f
 22669  00C6  3000               	movlw	0
 22670  00C7  3DCF               	addwfc	(_save_counter+1)^(0+640),f
 22671  00C8  3000               	movlw	0
 22672  00C9  3DD0               	addwfc	(_save_counter+2)^(0+640),f
 22673  00CA  3000               	movlw	0
 22674  00CB  3DD1               	addwfc	(_save_counter+3)^(0+640),f
 22675                           
 22676                           ;interrupts.c: 124: char subDiv = getModulationSubdivision();
 22677  00CC  31B4  2402  3180   	fcall	i1_getModulationSubdivision
 22678  00CF  0870               	movf	?i1_getModulationSubdivision,w
 22679  00D0  0020               	movlb	0	; select bank0
 22680  00D1  00D2               	movwf	??_isr
 22681  00D2  0852               	movf	??_isr,w
 22682  00D3  00D8               	movwf	isr@subDiv
 22683                           
 22684                           ;interrupts.c: 126: if (save_counter > 1250) {
 22685  00D4  0025               	movlb	5	; select bank5
 22686  00D5  1BD1               	btfsc	(_save_counter+3)^(0+640),7
 22687  00D6  28F1               	goto	i1l8455
 22688  00D7  0851               	movf	(_save_counter+3)^(0+640),w
 22689  00D8  1D03               	btfss	3,2
 22690  00D9  28E3               	goto	i1l8449
 22691  00DA  0850               	movf	(_save_counter+2)^(0+640),w
 22692  00DB  1D03               	btfss	3,2
 22693  00DC  28E3               	goto	i1l8449
 22694  00DD  30E3               	movlw	227
 22695  00DE  024E               	subwf	_save_counter^(0+640),w
 22696  00DF  3004               	movlw	4
 22697  00E0  3B4F               	subwfb	(_save_counter+1)^(0+640),w
 22698  00E1  1C03               	btfss	3,0
 22699  00E2  28F1               	goto	i1l8455
 22700  00E3                     i1l8449:	
 22701                           
 22702                           ;interrupts.c: 127: saveState();
 22703  00E3  31BF  27B6  3180   	fcall	_saveState
 22704                           
 22705                           ;interrupts.c: 128: save_counter = 0;
 22706  00E6  3000               	movlw	0
 22707  00E7  0025               	movlb	5	; select bank5
 22708  00E8  00D1               	movwf	(_save_counter+3)^(0+640)
 22709  00E9  3000               	movlw	0
 22710  00EA  00D0               	movwf	(_save_counter+2)^(0+640)
 22711  00EB  3000               	movlw	0
 22712  00EC  00CF               	movwf	(_save_counter+1)^(0+640)
 22713  00ED  3000               	movlw	0
 22714  00EE  00CE               	movwf	_save_counter^(0+640)
 22715                           
 22716                           ;interrupts.c: 129: LATBbits.LATB0 = 1;
 22717  00EF  0022               	movlb	2	; select bank2
 22718  00F0  140D               	bsf	13,0	;volatile
 22719  00F1                     i1l8455:	
 22720                           
 22721                           ;interrupts.c: 130: }
 22722                           ;interrupts.c: 132: if (save_counter == 10) {
 22723  00F1  300A               	movlw	10
 22724  00F2  0025               	movlb	5	; select bank5
 22725  00F3  064E               	xorwf	_save_counter^(0+640),w
 22726  00F4  044F               	iorwf	(_save_counter+1)^(0+640),w
 22727  00F5  0450               	iorwf	(_save_counter+2)^(0+640),w
 22728  00F6  0451               	iorwf	(_save_counter+3)^(0+640),w
 22729  00F7  1D03               	btfss	3,2
 22730  00F8  28FB               	goto	i1l8459
 22731                           
 22732                           ;interrupts.c: 134: LATBbits.LATB0 = 0;
 22733  00F9  0022               	movlb	2	; select bank2
 22734  00FA  100D               	bcf	13,0	;volatile
 22735  00FB                     i1l8459:	
 22736                           
 22737                           ;interrupts.c: 135: }
 22738                           ;interrupts.c: 138: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpMod
      +                          Delay == mod_delay_time)) {
 22739  00FB  0024               	movlb	4	; select bank4
 22740  00FC  0844               	movf	_tmpModDelay^(0+512),w
 22741  00FD  0020               	movlb	0	; select bank0
 22742  00FE  00D2               	movwf	??_isr
 22743  00FF  0024               	movlb	4	; select bank4
 22744  0100  0845               	movf	(_tmpModDelay+1)^(0+512),w
 22745  0101  0020               	movlb	0	; select bank0
 22746  0102  00D3               	movwf	??_isr+1
 22747  0103  3000               	movlw	0
 22748  0104  1BD3               	btfsc	??_isr+1,7
 22749  0105  30FF               	movlw	255
 22750  0106  00D4               	movwf	??_isr+2
 22751  0107  00D5               	movwf	??_isr+3
 22752  0108  0024               	movlb	4	; select bank4
 22753  0109  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 22754  010A  3A80               	xorlw	128
 22755  010B  0020               	movlb	0	; select bank0
 22756  010C  00D6               	movwf	??_isr+4
 22757  010D  0855               	movf	??_isr+3,w
 22758  010E  3A80               	xorlw	128
 22759  010F  0256               	subwf	??_isr+4,w
 22760  0110  0024               	movlb	4	; select bank4
 22761  0111  1D03               	skipz
 22762  0112  2923               	goto	u852_23
 22763  0113  0020               	movlb	0	; select bank0
 22764  0114  0854               	movf	??_isr+2,w
 22765  0115  0024               	movlb	4	; select bank4
 22766  0116  0226               	subwf	(_mod_timer+2)^(0+512),w	;volatile
 22767  0117  1D03               	skipz
 22768  0118  2923               	goto	u852_23
 22769  0119  0020               	movlb	0	; select bank0
 22770  011A  0853               	movf	??_isr+1,w
 22771  011B  0024               	movlb	4	; select bank4
 22772  011C  0225               	subwf	(_mod_timer+1)^(0+512),w	;volatile
 22773  011D  1D03               	skipz
 22774  011E  2923               	goto	u852_23
 22775  011F  0020               	movlb	0	; select bank0
 22776  0120  0852               	movf	??_isr,w
 22777  0121  0024               	movlb	4	; select bank4
 22778  0122  0224               	subwf	_mod_timer^(0+512),w	;volatile
 22779  0123                     u852_23:	
 22780  0123  1C03               	skipc
 22781  0124  2951               	goto	i1l154
 22782  0125  0020               	movlb	0	; select bank0
 22783  0126  0858               	movf	isr@subDiv,w
 22784  0127  00D2               	movwf	??_isr
 22785  0128  01D3               	clrf	??_isr+1
 22786  0129  0024               	movlb	4	; select bank4
 22787  012A  0862               	movf	(_mod_counter+1)^(0+512),w
 22788  012B  0020               	movlb	0	; select bank0
 22789  012C  0653               	xorwf	??_isr+1,w
 22790  012D  1D03               	skipz
 22791  012E  2933               	goto	u853_25
 22792  012F  0024               	movlb	4	; select bank4
 22793  0130  0861               	movf	_mod_counter^(0+512),w
 22794  0131  0020               	movlb	0	; select bank0
 22795  0132  0652               	xorwf	??_isr,w
 22796  0133                     u853_25:	
 22797  0133  1D03               	skipz
 22798  0134  2951               	goto	i1l154
 22799  0135  0024               	movlb	4	; select bank4
 22800  0136  0864               	movf	(_mod_delay_time+1)^(0+512),w
 22801  0137  0645               	xorwf	(_tmpModDelay+1)^(0+512),w
 22802  0138  1D03               	skipz
 22803  0139  293C               	goto	u854_25
 22804  013A  0863               	movf	_mod_delay_time^(0+512),w
 22805  013B  0644               	xorwf	_tmpModDelay^(0+512),w
 22806  013C                     u854_25:	
 22807  013C  1D03               	skipz
 22808  013D  2951               	goto	i1l154
 22809                           
 22810                           ;interrupts.c: 139: tmpModDelay = (delay_time - sub_timer);
 22811  013E  0928               	comf	_sub_timer^(0+512),w	;volatile
 22812  013F  0020               	movlb	0	; select bank0
 22813  0140  00D2               	movwf	??_isr
 22814  0141  0024               	movlb	4	; select bank4
 22815  0142  0929               	comf	(_sub_timer+1)^(0+512),w	;volatile
 22816  0143  0020               	movlb	0	; select bank0
 22817  0144  00D3               	movwf	??_isr+1
 22818  0145  0AD2               	incf	??_isr,f
 22819  0146  1903               	skipnz
 22820  0147  0AD3               	incf	??_isr+1,f
 22821  0148  0866               	movf	_delay_time,w	;volatile
 22822  0149  0752               	addwf	??_isr,w
 22823  014A  0024               	movlb	4	; select bank4
 22824  014B  00C4               	movwf	_tmpModDelay^(0+512)
 22825  014C  0020               	movlb	0	; select bank0
 22826  014D  0867               	movf	_delay_time+1,w	;volatile
 22827  014E  3D53               	addwfc	??_isr+1,w
 22828  014F  0024               	movlb	4	; select bank4
 22829  0150  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 22830  0151                     i1l154:	
 22831                           
 22832                           ;interrupts.c: 140: }
 22833                           ;interrupts.c: 142: if (longBypass_start == 1) {
 22834  0151  0024               	movlb	4	; select bank4
 22835  0152  034B               	decf	_longBypass_start^(0+512),w
 22836  0153  1D03               	btfss	3,2
 22837  0154  2965               	goto	i1l8471
 22838                           
 22839                           ;interrupts.c: 143: longBypass_timer++;
 22840  0155  3001               	movlw	1
 22841  0156  07BA               	addwf	_longBypass_timer^(0+512),f	;volatile
 22842  0157  3000               	movlw	0
 22843  0158  3DBB               	addwfc	(_longBypass_timer+1)^(0+512),f	;volatile
 22844                           
 22845                           ;interrupts.c: 144: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pr
      +                          ess_limit;}
 22846  0159  083B               	movf	(_longBypass_timer+1)^(0+512),w	;volatile
 22847  015A  0260               	subwf	(_long_press_limit+1)^(0+512),w
 22848  015B  1D03               	skipz
 22849  015C  295F               	goto	u856_25
 22850  015D  083A               	movf	_longBypass_timer^(0+512),w	;volatile
 22851  015E  025F               	subwf	_long_press_limit^(0+512),w
 22852  015F                     u856_25:	
 22853  015F  1803               	skipnc
 22854  0160  2965               	goto	i1l8471
 22855  0161  0860               	movf	(_long_press_limit+1)^(0+512),w
 22856  0162  00BB               	movwf	(_longBypass_timer+1)^(0+512)	;volatile
 22857  0163  085F               	movf	_long_press_limit^(0+512),w
 22858  0164  00BA               	movwf	_longBypass_timer^(0+512)	;volatile
 22859  0165                     i1l8471:	
 22860                           
 22861                           ;interrupts.c: 145: }
 22862                           ;interrupts.c: 146: if (longTap_start == 1) {
 22863  0165  034C               	decf	_longTap_start^(0+512),w
 22864  0166  1D03               	btfss	3,2
 22865  0167  2978               	goto	i1l8477
 22866                           
 22867                           ;interrupts.c: 147: longTap_timer++;
 22868  0168  3001               	movlw	1
 22869  0169  07BC               	addwf	_longTap_timer^(0+512),f	;volatile
 22870  016A  3000               	movlw	0
 22871  016B  3DBD               	addwfc	(_longTap_timer+1)^(0+512),f	;volatile
 22872                           
 22873                           ;interrupts.c: 148: if (longTap_timer > long_press_limit) {
 22874  016C  083D               	movf	(_longTap_timer+1)^(0+512),w	;volatile
 22875  016D  0260               	subwf	(_long_press_limit+1)^(0+512),w
 22876  016E  1D03               	skipz
 22877  016F  2972               	goto	u858_25
 22878  0170  083C               	movf	_longTap_timer^(0+512),w	;volatile
 22879  0171  025F               	subwf	_long_press_limit^(0+512),w
 22880  0172                     u858_25:	
 22881  0172  1803               	skipnc
 22882  0173  2978               	goto	i1l8477
 22883                           
 22884                           ;interrupts.c: 149: longTap_timer = long_press_limit;
 22885  0174  0860               	movf	(_long_press_limit+1)^(0+512),w
 22886  0175  00BD               	movwf	(_longTap_timer+1)^(0+512)	;volatile
 22887  0176  085F               	movf	_long_press_limit^(0+512),w
 22888  0177  00BC               	movwf	_longTap_timer^(0+512)	;volatile
 22889  0178                     i1l8477:	
 22890                           
 22891                           ;interrupts.c: 150: }
 22892                           ;interrupts.c: 151: }
 22893                           ;interrupts.c: 153: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) 
      +                          {
 22894  0178  0020               	movlb	0	; select bank0
 22895  0179  086F               	movf	_longTap_state,w	;volatile
 22896  017A  1D03               	btfss	3,2
 22897  017B  29E6               	goto	i1l8503
 22898  017C  0861               	movf	_doubleTap_state,w	;volatile
 22899  017D  1D03               	btfss	3,2
 22900  017E  29E6               	goto	i1l8503
 22901  017F  0865               	movf	_presetSaveMode,w
 22902  0180  1D03               	btfss	3,2
 22903  0181  29E6               	goto	i1l8503
 22904                           
 22905                           ;interrupts.c: 155: if (timer >= baseline_mod_time) {
 22906  0182  086A               	movf	_baseline_mod_time,w	;volatile
 22907  0183  00D2               	movwf	??_isr
 22908  0184  086B               	movf	_baseline_mod_time+1,w	;volatile
 22909  0185  00D3               	movwf	??_isr+1
 22910  0186  3000               	movlw	0
 22911  0187  1BD3               	btfsc	??_isr+1,7
 22912  0188  30FF               	movlw	255
 22913  0189  00D4               	movwf	??_isr+2
 22914  018A  00D5               	movwf	??_isr+3
 22915  018B  0024               	movlb	4	; select bank4
 22916  018C  082F               	movf	(_timer+3)^(0+512),w	;volatile
 22917  018D  3A80               	xorlw	128
 22918  018E  0020               	movlb	0	; select bank0
 22919  018F  00D6               	movwf	??_isr+4
 22920  0190  0855               	movf	??_isr+3,w
 22921  0191  3A80               	xorlw	128
 22922  0192  0256               	subwf	??_isr+4,w
 22923  0193  0024               	movlb	4	; select bank4
 22924  0194  1D03               	skipz
 22925  0195  29A6               	goto	u862_23
 22926  0196  0020               	movlb	0	; select bank0
 22927  0197  0854               	movf	??_isr+2,w
 22928  0198  0024               	movlb	4	; select bank4
 22929  0199  022E               	subwf	(_timer+2)^(0+512),w	;volatile
 22930  019A  1D03               	skipz
 22931  019B  29A6               	goto	u862_23
 22932  019C  0020               	movlb	0	; select bank0
 22933  019D  0853               	movf	??_isr+1,w
 22934  019E  0024               	movlb	4	; select bank4
 22935  019F  022D               	subwf	(_timer+1)^(0+512),w	;volatile
 22936  01A0  1D03               	skipz
 22937  01A1  29A6               	goto	u862_23
 22938  01A2  0020               	movlb	0	; select bank0
 22939  01A3  0852               	movf	??_isr,w
 22940  01A4  0024               	movlb	4	; select bank4
 22941  01A5  022C               	subwf	_timer^(0+512),w	;volatile
 22942  01A6                     u862_23:	
 22943  01A6  1C03               	skipc
 22944  01A7  29D5               	goto	i1l8499
 22945                           
 22946                           ;interrupts.c: 158: LATBbits.LATB4 = 1;
 22947  01A8  0022               	movlb	2	; select bank2
 22948  01A9  160D               	bsf	13,4	;volatile
 22949                           
 22950                           ;interrupts.c: 160: timer = 0;
 22951  01AA  3000               	movlw	0
 22952  01AB  0024               	movlb	4	; select bank4
 22953  01AC  00AF               	movwf	(_timer+3)^(0+512)	;volatile
 22954  01AD  3000               	movlw	0
 22955  01AE  00AE               	movwf	(_timer+2)^(0+512)	;volatile
 22956  01AF  3000               	movlw	0
 22957  01B0  00AD               	movwf	(_timer+1)^(0+512)	;volatile
 22958  01B1  3000               	movlw	0
 22959  01B2  00AC               	movwf	_timer^(0+512)	;volatile
 22960                           
 22961                           ;interrupts.c: 162: if (modulation_changed == 1) {
 22962  01B3  034E               	decf	_modulation_changed^(0+512),w
 22963  01B4  1D03               	btfss	3,2
 22964  01B5  29D5               	goto	i1l8499
 22965                           
 22966                           ;interrupts.c: 165: modulation_changed = 0;
 22967  01B6  01CE               	clrf	_modulation_changed^(0+512)
 22968                           
 22969                           ;interrupts.c: 166: mod_time_changed = 0;
 22970  01B7  01EC               	clrf	_mod_time_changed^(0+512)
 22971                           
 22972                           ;interrupts.c: 167: sub_timer = delay_time;
 22973  01B8  0020               	movlb	0	; select bank0
 22974  01B9  0869               	movf	_delay_time+3,w	;volatile
 22975  01BA  0024               	movlb	4	; select bank4
 22976  01BB  00AB               	movwf	(_sub_timer+3)^(0+512)	;volatile
 22977  01BC  0020               	movlb	0	; select bank0
 22978  01BD  0868               	movf	_delay_time+2,w	;volatile
 22979  01BE  0024               	movlb	4	; select bank4
 22980  01BF  00AA               	movwf	(_sub_timer+2)^(0+512)	;volatile
 22981  01C0  0020               	movlb	0	; select bank0
 22982  01C1  0867               	movf	_delay_time+1,w	;volatile
 22983  01C2  0024               	movlb	4	; select bank4
 22984  01C3  00A9               	movwf	(_sub_timer+1)^(0+512)	;volatile
 22985  01C4  0020               	movlb	0	; select bank0
 22986  01C5  0866               	movf	_delay_time,w	;volatile
 22987  01C6  0024               	movlb	4	; select bank4
 22988  01C7  00A8               	movwf	_sub_timer^(0+512)	;volatile
 22989                           
 22990                           ;interrupts.c: 168: tmpModDelay = mod_delay_time;
 22991  01C8  0864               	movf	(_mod_delay_time+1)^(0+512),w
 22992  01C9  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 22993  01CA  0863               	movf	_mod_delay_time^(0+512),w
 22994  01CB  00C4               	movwf	_tmpModDelay^(0+512)
 22995                           
 22996                           ;interrupts.c: 169: mod_timer = tmpModDelay;
 22997  01CC  0844               	movf	_tmpModDelay^(0+512),w
 22998  01CD  00A4               	movwf	_mod_timer^(0+512)	;volatile
 22999  01CE  0845               	movf	(_tmpModDelay+1)^(0+512),w
 23000  01CF  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 23001  01D0  0D89               	rlf	9,f
 23002  01D1  3B89               	subwfb	9,f
 23003  01D2  0989               	comf	9,f
 23004  01D3  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 23005  01D4  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 23006  01D5                     i1l8499:	
 23007                           
 23008                           ;interrupts.c: 177: }
 23009                           ;interrupts.c: 178: }
 23010                           ;interrupts.c: 180: if (timer >= 30) {
 23011  01D5  1BAF               	btfsc	(_timer+3)^(0+512),7	;volatile
 23012  01D6  29E6               	goto	i1l8503
 23013  01D7  082F               	movf	(_timer+3)^(0+512),w	;volatile
 23014  01D8  1D03               	btfss	3,2
 23015  01D9  29E4               	goto	i1l8501
 23016  01DA  082E               	movf	(_timer+2)^(0+512),w	;volatile
 23017  01DB  1D03               	btfss	3,2
 23018  01DC  29E4               	goto	i1l8501
 23019  01DD  082D               	movf	(_timer+1)^(0+512),w	;volatile
 23020  01DE  1D03               	btfss	3,2
 23021  01DF  29E4               	goto	i1l8501
 23022  01E0  301E               	movlw	30
 23023  01E1  022C               	subwf	_timer^(0+512),w	;volatile
 23024  01E2  1C03               	btfss	3,0
 23025  01E3  29E6               	goto	i1l8503
 23026  01E4                     i1l8501:	
 23027                           
 23028                           ;interrupts.c: 182: LATBbits.LATB4 = 0;
 23029  01E4  0022               	movlb	2	; select bank2
 23030  01E5  120D               	bcf	13,4	;volatile
 23031  01E6                     i1l8503:	
 23032                           
 23033                           ;interrupts.c: 184: }
 23034                           ;interrupts.c: 185: }
 23035                           ;interrupts.c: 194: if (presetSaveMode < 1 && mode2_state == 0) {
 23036  01E6  0020               	movlb	0	; select bank0
 23037  01E7  0865               	movf	_presetSaveMode,w
 23038  01E8  1D03               	btfss	3,2
 23039  01E9  2A41               	goto	i1l8521
 23040  01EA  0864               	movf	_mode2_state,w
 23041  01EB  1D03               	btfss	3,2
 23042  01EC  2A41               	goto	i1l8521
 23043                           
 23044                           ;interrupts.c: 195: if (sub_timer >= delay_time ) {
 23045  01ED  0024               	movlb	4	; select bank4
 23046  01EE  082B               	movf	(_sub_timer+3)^(0+512),w	;volatile
 23047  01EF  3A80               	xorlw	128
 23048  01F0  0020               	movlb	0	; select bank0
 23049  01F1  00D2               	movwf	??_isr
 23050  01F2  0869               	movf	_delay_time+3,w	;volatile
 23051  01F3  3A80               	xorlw	128
 23052  01F4  0252               	subwf	??_isr,w
 23053  01F5  0024               	movlb	4	; select bank4
 23054  01F6  1D03               	skipz
 23055  01F7  2A08               	goto	u867_23
 23056  01F8  0020               	movlb	0	; select bank0
 23057  01F9  0868               	movf	_delay_time+2,w	;volatile
 23058  01FA  0024               	movlb	4	; select bank4
 23059  01FB  022A               	subwf	(_sub_timer+2)^(0+512),w	;volatile
 23060  01FC  1D03               	skipz
 23061  01FD  2A08               	goto	u867_23
 23062  01FE  0020               	movlb	0	; select bank0
 23063  01FF  0867               	movf	_delay_time+1,w	;volatile
 23064  0200  0024               	movlb	4	; select bank4
 23065  0201  0229               	subwf	(_sub_timer+1)^(0+512),w	;volatile
 23066  0202  1D03               	skipz
 23067  0203  2A08               	goto	u867_23
 23068  0204  0020               	movlb	0	; select bank0
 23069  0205  0866               	movf	_delay_time,w	;volatile
 23070  0206  0024               	movlb	4	; select bank4
 23071  0207  0228               	subwf	_sub_timer^(0+512),w	;volatile
 23072  0208                     u867_23:	
 23073  0208  1C03               	skipc
 23074  0209  2A23               	goto	i1l8515
 23075                           
 23076                           ;interrupts.c: 196: if (suspend_blink == 0) {
 23077  020A  0022               	movlb	2	; select bank2
 23078  020B  086F               	movf	_suspend_blink^(0+256),w	;volatile
 23079  020C  1D03               	btfss	3,2
 23080  020D  2A1A               	goto	i1l8513
 23081                           
 23082                           ;interrupts.c: 197: set_leds_top(top_push_state, 1);
 23083  020E  0020               	movlb	0	; select bank0
 23084  020F  086D               	movf	_top_push_state+1,w
 23085  0210  00F1               	movwf	i1set_leds_top@x+1
 23086  0211  086C               	movf	_top_push_state,w
 23087  0212  00F0               	movwf	i1set_leds_top@x
 23088  0213  3001               	movlw	1
 23089  0214  00F2               	movwf	i1set_leds_top@ledState
 23090  0215  3000               	movlw	0
 23091  0216  00F3               	movwf	i1set_leds_top@ledState+1
 23092  0217  31A9  218D  3180   	fcall	i1_set_leds_top
 23093  021A                     i1l8513:	
 23094                           
 23095                           ;interrupts.c: 198: }
 23096                           ;interrupts.c: 200: sub_timer = 0;
 23097  021A  3000               	movlw	0
 23098  021B  0024               	movlb	4	; select bank4
 23099  021C  00AB               	movwf	(_sub_timer+3)^(0+512)	;volatile
 23100  021D  3000               	movlw	0
 23101  021E  00AA               	movwf	(_sub_timer+2)^(0+512)	;volatile
 23102  021F  3000               	movlw	0
 23103  0220  00A9               	movwf	(_sub_timer+1)^(0+512)	;volatile
 23104  0221  3000               	movlw	0
 23105  0222  00A8               	movwf	_sub_timer^(0+512)	;volatile
 23106  0223                     i1l8515:	
 23107                           
 23108                           ;interrupts.c: 201: }
 23109                           ;interrupts.c: 203: if (sub_timer >= 20) {
 23110  0223  1BAB               	btfsc	(_sub_timer+3)^(0+512),7	;volatile
 23111  0224  2A41               	goto	i1l8521
 23112  0225  082B               	movf	(_sub_timer+3)^(0+512),w	;volatile
 23113  0226  1D03               	btfss	3,2
 23114  0227  2A32               	goto	i1l8517
 23115  0228  082A               	movf	(_sub_timer+2)^(0+512),w	;volatile
 23116  0229  1D03               	btfss	3,2
 23117  022A  2A32               	goto	i1l8517
 23118  022B  0829               	movf	(_sub_timer+1)^(0+512),w	;volatile
 23119  022C  1D03               	btfss	3,2
 23120  022D  2A32               	goto	i1l8517
 23121  022E  3014               	movlw	20
 23122  022F  0228               	subwf	_sub_timer^(0+512),w	;volatile
 23123  0230  1C03               	btfss	3,0
 23124  0231  2A41               	goto	i1l8521
 23125  0232                     i1l8517:	
 23126                           
 23127                           ;interrupts.c: 204: if (suspend_blink == 0) {
 23128  0232  0022               	movlb	2	; select bank2
 23129  0233  086F               	movf	_suspend_blink^(0+256),w	;volatile
 23130  0234  1D03               	btfss	3,2
 23131  0235  2A41               	goto	i1l8521
 23132                           
 23133                           ;interrupts.c: 205: set_leds_top(top_push_state, 0);
 23134  0236  0020               	movlb	0	; select bank0
 23135  0237  086D               	movf	_top_push_state+1,w
 23136  0238  00F1               	movwf	i1set_leds_top@x+1
 23137  0239  086C               	movf	_top_push_state,w
 23138  023A  00F0               	movwf	i1set_leds_top@x
 23139  023B  3000               	movlw	0
 23140  023C  00F2               	movwf	i1set_leds_top@ledState
 23141  023D  00F3               	movwf	i1set_leds_top@ledState+1
 23142  023E  31A9  218D  3180   	fcall	i1_set_leds_top
 23143  0241                     i1l8521:	
 23144                           
 23145                           ;interrupts.c: 206: }
 23146                           ;interrupts.c: 207: }
 23147                           ;interrupts.c: 208: }
 23148                           ;interrupts.c: 213: if (presetSaveMode == 1) {
 23149  0241  0020               	movlb	0	; select bank0
 23150  0242  0365               	decf	_presetSaveMode,w
 23151  0243  1D03               	btfss	3,2
 23152  0244  2A71               	goto	i1l8533
 23153                           
 23154                           ;interrupts.c: 214: if (double_timer >= 250) {
 23155  0245  0024               	movlb	4	; select bank4
 23156  0246  1BA3               	btfsc	(_double_timer+3)^(0+512),7	;volatile
 23157  0247  2A60               	goto	i1l8529
 23158  0248  0823               	movf	(_double_timer+3)^(0+512),w	;volatile
 23159  0249  1D03               	btfss	3,2
 23160  024A  2A55               	goto	i1l8525
 23161  024B  0822               	movf	(_double_timer+2)^(0+512),w	;volatile
 23162  024C  1D03               	btfss	3,2
 23163  024D  2A55               	goto	i1l8525
 23164  024E  0821               	movf	(_double_timer+1)^(0+512),w	;volatile
 23165  024F  1D03               	btfss	3,2
 23166  0250  2A55               	goto	i1l8525
 23167  0251  30FA               	movlw	250
 23168  0252  0220               	subwf	_double_timer^(0+512),w	;volatile
 23169  0253  1C03               	btfss	3,0
 23170  0254  2A60               	goto	i1l8529
 23171  0255                     i1l8525:	
 23172                           
 23173                           ;interrupts.c: 215: LATBbits.LATB0 = 1;
 23174  0255  0022               	movlb	2	; select bank2
 23175  0256  140D               	bsf	13,0	;volatile
 23176                           
 23177                           ;interrupts.c: 216: double_timer = 0;
 23178  0257  3000               	movlw	0
 23179  0258  0024               	movlb	4	; select bank4
 23180  0259  00A3               	movwf	(_double_timer+3)^(0+512)	;volatile
 23181  025A  3000               	movlw	0
 23182  025B  00A2               	movwf	(_double_timer+2)^(0+512)	;volatile
 23183  025C  3000               	movlw	0
 23184  025D  00A1               	movwf	(_double_timer+1)^(0+512)	;volatile
 23185  025E  3000               	movlw	0
 23186  025F  00A0               	movwf	_double_timer^(0+512)	;volatile
 23187  0260                     i1l8529:	
 23188                           
 23189                           ;interrupts.c: 217: }
 23190                           ;interrupts.c: 218: if (double_timer >= 30) {
 23191  0260  1BA3               	btfsc	(_double_timer+3)^(0+512),7	;volatile
 23192  0261  2A71               	goto	i1l8533
 23193  0262  0823               	movf	(_double_timer+3)^(0+512),w	;volatile
 23194  0263  1D03               	btfss	3,2
 23195  0264  2A6F               	goto	i1l8531
 23196  0265  0822               	movf	(_double_timer+2)^(0+512),w	;volatile
 23197  0266  1D03               	btfss	3,2
 23198  0267  2A6F               	goto	i1l8531
 23199  0268  0821               	movf	(_double_timer+1)^(0+512),w	;volatile
 23200  0269  1D03               	btfss	3,2
 23201  026A  2A6F               	goto	i1l8531
 23202  026B  301E               	movlw	30
 23203  026C  0220               	subwf	_double_timer^(0+512),w	;volatile
 23204  026D  1C03               	btfss	3,0
 23205  026E  2A71               	goto	i1l8533
 23206  026F                     i1l8531:	
 23207                           
 23208                           ;interrupts.c: 219: LATBbits.LATB0 = 0;
 23209  026F  0022               	movlb	2	; select bank2
 23210  0270  100D               	bcf	13,0	;volatile
 23211  0271                     i1l8533:	
 23212                           
 23213                           ;interrupts.c: 220: }
 23214                           ;interrupts.c: 221: }
 23215                           ;interrupts.c: 242: if (mod_timer >= tmpModDelay) {
 23216  0271  0024               	movlb	4	; select bank4
 23217  0272  0844               	movf	_tmpModDelay^(0+512),w
 23218  0273  0020               	movlb	0	; select bank0
 23219  0274  00D2               	movwf	??_isr
 23220  0275  0024               	movlb	4	; select bank4
 23221  0276  0845               	movf	(_tmpModDelay+1)^(0+512),w
 23222  0277  0020               	movlb	0	; select bank0
 23223  0278  00D3               	movwf	??_isr+1
 23224  0279  3000               	movlw	0
 23225  027A  1BD3               	btfsc	??_isr+1,7
 23226  027B  30FF               	movlw	255
 23227  027C  00D4               	movwf	??_isr+2
 23228  027D  00D5               	movwf	??_isr+3
 23229  027E  0024               	movlb	4	; select bank4
 23230  027F  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 23231  0280  3A80               	xorlw	128
 23232  0281  0020               	movlb	0	; select bank0
 23233  0282  00D6               	movwf	??_isr+4
 23234  0283  0855               	movf	??_isr+3,w
 23235  0284  3A80               	xorlw	128
 23236  0285  0256               	subwf	??_isr+4,w
 23237  0286  0024               	movlb	4	; select bank4
 23238  0287  1D03               	skipz
 23239  0288  2A99               	goto	u874_23
 23240  0289  0020               	movlb	0	; select bank0
 23241  028A  0854               	movf	??_isr+2,w
 23242  028B  0024               	movlb	4	; select bank4
 23243  028C  0226               	subwf	(_mod_timer+2)^(0+512),w	;volatile
 23244  028D  1D03               	skipz
 23245  028E  2A99               	goto	u874_23
 23246  028F  0020               	movlb	0	; select bank0
 23247  0290  0853               	movf	??_isr+1,w
 23248  0291  0024               	movlb	4	; select bank4
 23249  0292  0225               	subwf	(_mod_timer+1)^(0+512),w	;volatile
 23250  0293  1D03               	skipz
 23251  0294  2A99               	goto	u874_23
 23252  0295  0020               	movlb	0	; select bank0
 23253  0296  0852               	movf	??_isr,w
 23254  0297  0024               	movlb	4	; select bank4
 23255  0298  0224               	subwf	_mod_timer^(0+512),w	;volatile
 23256  0299                     u874_23:	
 23257  0299  1C03               	skipc
 23258  029A  2B09               	goto	i1l8549
 23259                           
 23260                           ;interrupts.c: 243: mod_timer = 0;
 23261  029B  3000               	movlw	0
 23262  029C  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 23263  029D  3000               	movlw	0
 23264  029E  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 23265  029F  3000               	movlw	0
 23266  02A0  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 23267  02A1  3000               	movlw	0
 23268  02A2  00A4               	movwf	_mod_timer^(0+512)	;volatile
 23269                           
 23270                           ;interrupts.c: 245: if (mod_counter >= subDiv) {
 23271  02A3  0862               	movf	(_mod_counter+1)^(0+512),w
 23272  02A4  3A80               	xorlw	128
 23273  02A5  0020               	movlb	0	; select bank0
 23274  02A6  00D2               	movwf	??_isr
 23275  02A7  3080               	movlw	128
 23276  02A8  0252               	subwf	??_isr,w
 23277  02A9  1D03               	skipz
 23278  02AA  2AAE               	goto	u875_25
 23279  02AB  0858               	movf	isr@subDiv,w
 23280  02AC  0024               	movlb	4	; select bank4
 23281  02AD  0261               	subwf	_mod_counter^(0+512),w
 23282  02AE                     u875_25:	
 23283  02AE  1C03               	skipc
 23284  02AF  2AB7               	goto	i1l8541
 23285                           
 23286                           ;interrupts.c: 246: mod_counter = 0;
 23287  02B0  0024               	movlb	4	; select bank4
 23288  02B1  01E1               	clrf	_mod_counter^(0+512)
 23289  02B2  01E2               	clrf	(_mod_counter+1)^(0+512)
 23290                           
 23291                           ;interrupts.c: 247: tmpModDelay = mod_delay_time;
 23292  02B3  0864               	movf	(_mod_delay_time+1)^(0+512),w
 23293  02B4  00C5               	movwf	(_tmpModDelay+1)^(0+512)
 23294  02B5  0863               	movf	_mod_delay_time^(0+512),w
 23295  02B6  00C4               	movwf	_tmpModDelay^(0+512)
 23296  02B7                     i1l8541:	
 23297                           
 23298                           ;interrupts.c: 251: }
 23299                           ;interrupts.c: 255: mod_value = modArray[mod_counter];
 23300  02B7  0024               	movlb	4	; select bank4
 23301  02B8  0862               	movf	(_mod_counter+1)^(0+512),w
 23302  02B9  0020               	movlb	0	; select bank0
 23303  02BA  00D3               	movwf	??_isr+1
 23304  02BB  0024               	movlb	4	; select bank4
 23305  02BC  0861               	movf	_mod_counter^(0+512),w
 23306  02BD  0020               	movlb	0	; select bank0
 23307  02BE  00D2               	movwf	??_isr
 23308  02BF  35D2               	lslf	??_isr,f
 23309  02C0  0DD3               	rlf	??_isr+1,f
 23310  02C1  308A               	movlw	138
 23311  02C2  00D4               	movwf	??_isr+2
 23312  02C3  3023               	movlw	35
 23313  02C4  00D5               	movwf	??_isr+3
 23314  02C5  0852               	movf	??_isr,w
 23315  02C6  0754               	addwf	??_isr+2,w
 23316  02C7  0086               	movwf	6
 23317  02C8  0853               	movf	??_isr+1,w
 23318  02C9  3D55               	addwfc	??_isr+3,w
 23319  02CA  0087               	movwf	7
 23320  02CB  3F40               	moviw [0]fsr1
 23321  02CC  0024               	movlb	4	; select bank4
 23322  02CD  00C0               	movwf	_mod_value^(0+512)
 23323  02CE  3F41               	moviw [1]fsr1
 23324  02CF  00C1               	movwf	(_mod_value+1)^(0+512)
 23325                           
 23326                           ;interrupts.c: 262: mod_value = modulation(mod_value, adjusted_pot_value);
 23327  02D0  0840               	movf	_mod_value^(0+512),w
 23328  02D1  0020               	movlb	0	; select bank0
 23329  02D2  00AE               	movwf	modulation@x
 23330  02D3  0024               	movlb	4	; select bank4
 23331  02D4  0841               	movf	(_mod_value+1)^(0+512),w
 23332  02D5  0020               	movlb	0	; select bank0
 23333  02D6  00AF               	movwf	modulation@x+1
 23334  02D7  0D89               	rlf	9,f
 23335  02D8  3B89               	subwfb	9,f
 23336  02D9  0989               	comf	9,f
 23337  02DA  00B0               	movwf	modulation@x+2
 23338  02DB  00B1               	movwf	modulation@x+3
 23339  02DC  0025               	movlb	5	; select bank5
 23340  02DD  085A               	movf	_adjusted_pot_value^(0+640),w
 23341  02DE  0020               	movlb	0	; select bank0
 23342  02DF  00B2               	movwf	modulation@y
 23343  02E0  0025               	movlb	5	; select bank5
 23344  02E1  085B               	movf	(_adjusted_pot_value+1)^(0+640),w
 23345  02E2  0020               	movlb	0	; select bank0
 23346  02E3  00B3               	movwf	modulation@y+1
 23347  02E4  0D89               	rlf	9,f
 23348  02E5  3B89               	subwfb	9,f
 23349  02E6  0989               	comf	9,f
 23350  02E7  00B4               	movwf	modulation@y+2
 23351  02E8  00B5               	movwf	modulation@y+3
 23352  02E9  31A8  2084  3180   	fcall	_modulation
 23353  02EC  0020               	movlb	0	; select bank0
 23354  02ED  082F               	movf	?_modulation+1,w
 23355  02EE  0024               	movlb	4	; select bank4
 23356  02EF  00C1               	movwf	(_mod_value+1)^(0+512)
 23357  02F0  0020               	movlb	0	; select bank0
 23358  02F1  082E               	movf	?_modulation,w
 23359  02F2  0024               	movlb	4	; select bank4
 23360  02F3  00C0               	movwf	_mod_value^(0+512)
 23361                           
 23362                           ;interrupts.c: 263: CCPR3 = mod_value / 2;
 23363  02F4  3002               	movlw	2
 23364  02F5  00F0               	movwf	i1___awdiv@divisor
 23365  02F6  3000               	movlw	0
 23366  02F7  00F1               	movwf	i1___awdiv@divisor+1
 23367  02F8  0841               	movf	(_mod_value+1)^(0+512),w
 23368  02F9  00F3               	movwf	i1___awdiv@dividend+1
 23369  02FA  0840               	movf	_mod_value^(0+512),w
 23370  02FB  00F2               	movwf	i1___awdiv@dividend
 23371  02FC  31AB  2353  3180   	fcall	i1___awdiv
 23372  02FF  0871               	movf	?i1___awdiv+1,w
 23373  0300  0026               	movlb	6	; select bank6
 23374  0301  0092               	movwf	18	;volatile
 23375  0302  0870               	movf	?i1___awdiv,w
 23376  0303  0091               	movwf	17	;volatile
 23377                           
 23378                           ;interrupts.c: 264: mod_counter++;
 23379  0304  3001               	movlw	1
 23380  0305  0024               	movlb	4	; select bank4
 23381  0306  07E1               	addwf	_mod_counter^(0+512),f
 23382  0307  3000               	movlw	0
 23383  0308  3DE2               	addwfc	(_mod_counter+1)^(0+512),f
 23384  0309                     i1l8549:	
 23385                           
 23386                           ;interrupts.c: 266: }
 23387                           ;interrupts.c: 268: if (preset_programmning_on == 1) {
 23388  0309  0351               	decf	_preset_programmning_on^(0+512),w
 23389  030A  1D03               	btfss	3,2
 23390  030B  2B37               	goto	i1l8561
 23391                           
 23392                           ;interrupts.c: 269: preset_blink++;
 23393  030C  3001               	movlw	1
 23394  030D  0020               	movlb	0	; select bank0
 23395  030E  00D2               	movwf	??_isr
 23396  030F  0852               	movf	??_isr,w
 23397  0310  0024               	movlb	4	; select bank4
 23398  0311  07D0               	addwf	_preset_blink^(0+512),f
 23399                           
 23400                           ;interrupts.c: 271: if (preset_blink >= blink_delay) {
 23401  0312  085A               	movf	(_blink_delay+1)^(0+512),w
 23402  0313  3A80               	xorlw	128
 23403  0314  3C80               	sublw	128
 23404  0315  1D03               	skipz
 23405  0316  2B19               	goto	u877_25
 23406  0317  0859               	movf	_blink_delay^(0+512),w
 23407  0318  0250               	subwf	_preset_blink^(0+512),w
 23408  0319                     u877_25:	
 23409  0319  1C03               	skipc
 23410  031A  2B3C               	goto	i1l8565
 23411                           
 23412                           ;interrupts.c: 272: LATBbits.LATB1 = 1;
 23413  031B  0022               	movlb	2	; select bank2
 23414  031C  148D               	bsf	13,1	;volatile
 23415                           
 23416                           ;interrupts.c: 273: if (preset_blink > blink_delay*2) {
 23417  031D  0024               	movlb	4	; select bank4
 23418  031E  085A               	movf	(_blink_delay+1)^(0+512),w
 23419  031F  0020               	movlb	0	; select bank0
 23420  0320  00D3               	movwf	??_isr+1
 23421  0321  0024               	movlb	4	; select bank4
 23422  0322  0859               	movf	_blink_delay^(0+512),w
 23423  0323  0020               	movlb	0	; select bank0
 23424  0324  00D2               	movwf	??_isr
 23425  0325  35D2               	lslf	??_isr,f
 23426  0326  0DD3               	rlf	??_isr+1,f
 23427  0327  0853               	movf	??_isr+1,w
 23428  0328  3A80               	xorlw	128
 23429  0329  00D4               	movwf	??_isr+2
 23430  032A  3080               	movlw	128
 23431  032B  0254               	subwf	??_isr+2,w
 23432  032C  1D03               	skipz
 23433  032D  2B32               	goto	u878_25
 23434  032E  0024               	movlb	4	; select bank4
 23435  032F  0850               	movf	_preset_blink^(0+512),w
 23436  0330  0020               	movlb	0	; select bank0
 23437  0331  0252               	subwf	??_isr,w
 23438  0332                     u878_25:	
 23439  0332  1803               	skipnc
 23440  0333  2B3E               	goto	i1l8567
 23441                           
 23442                           ;interrupts.c: 274: preset_blink = 0;
 23443  0334  0024               	movlb	4	; select bank4
 23444  0335  01D0               	clrf	_preset_blink^(0+512)
 23445                           
 23446                           ;interrupts.c: 275: }
 23447                           ;interrupts.c: 277: } else {
 23448  0336  2B3E               	goto	i1l8567
 23449  0337                     i1l8561:	
 23450                           ;interrupts.c: 279: }
 23451                           ;interrupts.c: 281: } else {
 23452                           
 23453                           ;interrupts.c: 278: LATBbits.LATB1 = 0;
 23454                           
 23455                           
 23456                           ;interrupts.c: 282: if (preset_blink > 0) {
 23457  0337  0024               	movlb	4	; select bank4
 23458  0338  0850               	movf	_preset_blink^(0+512),w
 23459  0339  1903               	btfsc	3,2
 23460  033A  2B3E               	goto	i1l8567
 23461                           
 23462                           ;interrupts.c: 283: preset_blink = 0;
 23463  033B  01D0               	clrf	_preset_blink^(0+512)
 23464  033C                     i1l8565:	
 23465                           
 23466                           ;interrupts.c: 284: LATBbits.LATB1 = 0;
 23467  033C  0022               	movlb	2	; select bank2
 23468  033D  108D               	bcf	13,1	;volatile
 23469  033E                     i1l8567:	
 23470                           
 23471                           ;interrupts.c: 285: }
 23472                           ;interrupts.c: 286: }
 23473                           ;interrupts.c: 290: INTCONbits.TMR0IF = 0;
 23474  033E  110B               	bcf	11,2	;volatile
 23475  033F                     i1l150:	
 23476  033F  0020               	movlb	0	; select bank0
 23477  0340  0857               	movf	??_isr+5,w
 23478  0341  00FF               	movwf	127
 23479  0342  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 23480  0343  0009               	retfie
 23481  0344                     __end_of_isr:	
 23482                           
 23483                           	psect	text105
 23484  298D                     __ptext105:	
 23485 ;; *************** function i1_set_leds_top *****************
 23486 ;; Defined at:
 23487 ;;		line 18 in file "LEDs.c"
 23488 ;; Parameters:    Size  Location     Type
 23489 ;;  x               2    0[COMMON] int 
 23490 ;;  ledState        2    2[COMMON] int 
 23491 ;; Auto vars:     Size  Location     Type
 23492 ;;		None
 23493 ;; Return value:  Size  Location     Type
 23494 ;;                  1    wreg      void 
 23495 ;; Registers used:
 23496 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 23497 ;; Tracked objects:
 23498 ;;		On entry : 0/0
 23499 ;;		On exit  : 0/0
 23500 ;;		Unchanged: 0/0
 23501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23505 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23506 ;;Total ram usage:        4 bytes
 23507 ;; Hardware stack levels used:    1
 23508 ;; This function calls:
 23509 ;;		Nothing
 23510 ;; This function is called by:
 23511 ;;		_isr
 23512 ;; This function uses a non-reentrant model
 23513 ;;
 23514                           
 23515                           
 23516                           ;psect for function i1_set_leds_top
 23517  298D                     i1_set_leds_top:	
 23518                           
 23519                           ;LEDs.c: 19: LATFbits.LATF0 = 0;
 23520                           
 23521                           ;incstack = 0
 23522                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 23523  298D  0027               	movlb	7	; select bank7
 23524  298E  100C               	bcf	12,0	;volatile
 23525                           
 23526                           ;LEDs.c: 20: LATFbits.LATF1 = 0;
 23527  298F  108C               	bcf	12,1	;volatile
 23528                           
 23529                           ;LEDs.c: 21: LATFbits.LATF2 = 0;
 23530  2990  110C               	bcf	12,2	;volatile
 23531                           
 23532                           ;LEDs.c: 22: LATFbits.LATF3 = 0;
 23533  2991  118C               	bcf	12,3	;volatile
 23534                           
 23535                           ;LEDs.c: 23: LATFbits.LATF4 = 0;
 23536  2992  120C               	bcf	12,4	;volatile
 23537                           
 23538                           ;LEDs.c: 24: switch (x) {
 23539  2993  29B8               	goto	i1l8411
 23540  2994                     i1l8399:	
 23541                           ;LEDs.c: 25: case 1:
 23542                           
 23543                           
 23544                           ;LEDs.c: 26: LATFbits.LATF0 = ledState;
 23545  2994  0C72               	rrf	i1set_leds_top@ledState,w
 23546  2995  1C03               	skipc
 23547  2996  100C               	bcf	12,0	;volatile
 23548  2997  1803               	skipnc
 23549  2998  140C               	bsf	12,0	;volatile
 23550                           
 23551                           ;LEDs.c: 27: break;
 23552  2999  0008               	return
 23553  299A                     i1l8401:	
 23554                           ;LEDs.c: 28: case 2:
 23555                           
 23556                           
 23557                           ;LEDs.c: 29: LATFbits.LATF1 = ledState;
 23558  299A  0C72               	rrf	i1set_leds_top@ledState,w
 23559  299B  1C03               	skipc
 23560  299C  108C               	bcf	12,1	;volatile
 23561  299D  1803               	skipnc
 23562  299E  148C               	bsf	12,1	;volatile
 23563                           
 23564                           ;LEDs.c: 30: break;
 23565  299F  0008               	return
 23566  29A0                     i1l8403:	
 23567                           ;LEDs.c: 31: case 3:
 23568                           
 23569                           
 23570                           ;LEDs.c: 32: LATFbits.LATF2 = ledState;
 23571  29A0  0C72               	rrf	i1set_leds_top@ledState,w
 23572  29A1  1C03               	skipc
 23573  29A2  110C               	bcf	12,2	;volatile
 23574  29A3  1803               	skipnc
 23575  29A4  150C               	bsf	12,2	;volatile
 23576                           
 23577                           ;LEDs.c: 33: break;
 23578  29A5  0008               	return
 23579  29A6                     i1l8405:	
 23580                           ;LEDs.c: 34: case 4:
 23581                           
 23582                           
 23583                           ;LEDs.c: 35: LATFbits.LATF3 = ledState;
 23584  29A6  0C72               	rrf	i1set_leds_top@ledState,w
 23585  29A7  1C03               	skipc
 23586  29A8  118C               	bcf	12,3	;volatile
 23587  29A9  1803               	skipnc
 23588  29AA  158C               	bsf	12,3	;volatile
 23589                           
 23590                           ;LEDs.c: 36: break;
 23591  29AB  0008               	return
 23592  29AC                     i1l8407:	
 23593                           ;LEDs.c: 37: case 5:
 23594                           
 23595                           
 23596                           ;LEDs.c: 38: LATFbits.LATF4 = ledState;
 23597  29AC  0C72               	rrf	i1set_leds_top@ledState,w
 23598  29AD  1C03               	skipc
 23599  29AE  120C               	bcf	12,4	;volatile
 23600  29AF  1803               	skipnc
 23601  29B0  160C               	bsf	12,4	;volatile
 23602                           
 23603                           ;LEDs.c: 41: break;
 23604                           
 23605                           ;LEDs.c: 40: case 6:
 23606                           
 23607                           ;LEDs.c: 39: break;
 23608  29B1  0008               	return
 23609  29B2                     i1l923:	
 23610                           ;LEDs.c: 42: case 100:
 23611                           
 23612                           
 23613                           ;LEDs.c: 43: LATFbits.LATF0 = 1;
 23614  29B2  140C               	bsf	12,0	;volatile
 23615                           
 23616                           ;LEDs.c: 44: LATFbits.LATF1 = 1;
 23617  29B3  148C               	bsf	12,1	;volatile
 23618                           
 23619                           ;LEDs.c: 45: LATFbits.LATF2 = 1;
 23620  29B4  150C               	bsf	12,2	;volatile
 23621                           
 23622                           ;LEDs.c: 46: LATFbits.LATF3 = 1;
 23623  29B5  158C               	bsf	12,3	;volatile
 23624                           
 23625                           ;LEDs.c: 47: LATFbits.LATF4 = 1;
 23626  29B6  160C               	bsf	12,4	;volatile
 23627                           
 23628                           ;LEDs.c: 49: }
 23629                           
 23630                           ;LEDs.c: 48: break;
 23631  29B7  0008               	return
 23632  29B8                     i1l8411:	
 23633                           
 23634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23635                           ; Switch size 1, requested type "space"
 23636                           ; Number of cases is 1, Range of values is 0 to 0
 23637                           ; switch strategies available:
 23638                           ; Name         Instructions Cycles
 23639                           ; simple_byte            4     3 (average)
 23640                           ; direct_byte            8     6 (fixed)
 23641                           ; jumptable            260     6 (fixed)
 23642                           ;	Chosen strategy is simple_byte
 23643  29B8  0871               	movf	i1set_leds_top@x+1,w
 23644  29B9  3A00               	xorlw	0	; case 0
 23645  29BA  1903               	skipnz
 23646  29BB  29BD               	goto	i1l9455
 23647  29BC  29D4               	goto	i1l924
 23648  29BD                     i1l9455:	
 23649                           
 23650                           ; Switch size 1, requested type "space"
 23651                           ; Number of cases is 7, Range of values is 1 to 100
 23652                           ; switch strategies available:
 23653                           ; Name         Instructions Cycles
 23654                           ; simple_byte           22    12 (average)
 23655                           ; direct_byte          209     9 (fixed)
 23656                           ; jumptable            263     9 (fixed)
 23657                           ;	Chosen strategy is simple_byte
 23658  29BD  0870               	movf	i1set_leds_top@x,w
 23659  29BE  3A01               	xorlw	1	; case 1
 23660  29BF  1903               	skipnz
 23661  29C0  2994               	goto	i1l8399
 23662  29C1  3A03               	xorlw	3	; case 2
 23663  29C2  1903               	skipnz
 23664  29C3  299A               	goto	i1l8401
 23665  29C4  3A01               	xorlw	1	; case 3
 23666  29C5  1903               	skipnz
 23667  29C6  29A0               	goto	i1l8403
 23668  29C7  3A07               	xorlw	7	; case 4
 23669  29C8  1903               	skipnz
 23670  29C9  29A6               	goto	i1l8405
 23671  29CA  3A01               	xorlw	1	; case 5
 23672  29CB  1903               	skipnz
 23673  29CC  29AC               	goto	i1l8407
 23674  29CD  3A03               	xorlw	3	; case 6
 23675  29CE  1903               	skipnz
 23676  29CF  29D4               	goto	i1l924
 23677  29D0  3A62               	xorlw	98	; case 100
 23678  29D1  1903               	skipnz
 23679  29D2  29B2               	goto	i1l923
 23680  29D3  29D4               	goto	i1l924
 23681  29D4                     i1l924:	
 23682  29D4  0008               	return
 23683  29D5                     __end_ofi1_set_leds_top:	
 23684                           
 23685                           	psect	text106
 23686  3402                     __ptext106:	
 23687 ;; *************** function i1_getModulationSubdivision *****************
 23688 ;; Defined at:
 23689 ;;		line 27 in file "modulation.c"
 23690 ;; Parameters:    Size  Location     Type
 23691 ;;		None
 23692 ;; Auto vars:     Size  Location     Type
 23693 ;;		None
 23694 ;; Return value:  Size  Location     Type
 23695 ;;                  2    0[COMMON] int 
 23696 ;; Registers used:
 23697 ;;		wreg, status,2, status,0
 23698 ;; Tracked objects:
 23699 ;;		On entry : 0/0
 23700 ;;		On exit  : 0/0
 23701 ;;		Unchanged: 0/0
 23702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23707 ;;Total ram usage:        2 bytes
 23708 ;; Hardware stack levels used:    1
 23709 ;; This function calls:
 23710 ;;		Nothing
 23711 ;; This function is called by:
 23712 ;;		_isr
 23713 ;; This function uses a non-reentrant model
 23714 ;;
 23715                           
 23716                           
 23717                           ;psect for function i1_getModulationSubdivision
 23718  3402                     i1_getModulationSubdivision:	
 23719                           
 23720                           ;modulation.c: 28: if (delay_time >= 2400) {
 23721                           
 23722                           ;incstack = 0
 23723                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 23724  3402  0020               	movlb	0	; select bank0
 23725  3403  1BE9               	btfsc	_delay_time+3,7	;volatile
 23726  3404  2C13               	goto	i1l8421
 23727  3405  0869               	movf	_delay_time+3,w	;volatile
 23728  3406  1D03               	btfss	3,2
 23729  3407  2C11               	goto	i1l8419
 23730  3408  0868               	movf	_delay_time+2,w	;volatile
 23731  3409  1D03               	btfss	3,2
 23732  340A  2C11               	goto	i1l8419
 23733  340B  3060               	movlw	96
 23734  340C  0266               	subwf	_delay_time,w	;volatile
 23735  340D  3009               	movlw	9
 23736  340E  3B67               	subwfb	_delay_time+1,w	;volatile
 23737  340F  1C03               	btfss	3,0
 23738  3410  2C13               	goto	i1l8421
 23739  3411                     i1l8419:	
 23740                           
 23741                           ;modulation.c: 29: modulationSubdivision = 120;
 23742  3411  3078               	movlw	120
 23743  3412  2C25               	goto	L25
 23744  3413                     i1l8421:	
 23745                           ;modulation.c: 30: } else if (delay_time >= 600) {
 23746                           
 23747  3413  0020               	movlb	0	; select bank0
 23748  3414  1BE9               	btfsc	_delay_time+3,7	;volatile
 23749  3415  2C24               	goto	i1l8425
 23750  3416  0869               	movf	_delay_time+3,w	;volatile
 23751  3417  1D03               	btfss	3,2
 23752  3418  2C22               	goto	i1l8423
 23753  3419  0868               	movf	_delay_time+2,w	;volatile
 23754  341A  1D03               	btfss	3,2
 23755  341B  2C22               	goto	i1l8423
 23756  341C  3058               	movlw	88
 23757  341D  0266               	subwf	_delay_time,w	;volatile
 23758  341E  3002               	movlw	2
 23759  341F  3B67               	subwfb	_delay_time+1,w	;volatile
 23760  3420  1C03               	btfss	3,0
 23761  3421  2C24               	goto	i1l8425
 23762  3422                     i1l8423:	
 23763                           
 23764                           ;modulation.c: 31: modulationSubdivision = 60;
 23765  3422  303C               	movlw	60
 23766  3423  2C25               	goto	L25
 23767  3424                     i1l8425:	
 23768                           ;modulation.c: 32: } else {
 23769                           
 23770                           
 23771                           ;modulation.c: 33: modulationSubdivision = 30;
 23772  3424  301E               	movlw	30
 23773  3425                     L25:	
 23774  3425  0024               	movlb	4	; select bank4
 23775  3426  00C2               	movwf	_modulationSubdivision^(0+512)
 23776  3427  3000               	movlw	0
 23777  3428  00C3               	movwf	(_modulationSubdivision^(0+512)+1)
 23778                           
 23779                           ;modulation.c: 34: }
 23780                           ;modulation.c: 35: return modulationSubdivision;
 23781  3429  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 23782  342A  00F1               	movwf	?i1_getModulationSubdivision+1
 23783  342B  0842               	movf	_modulationSubdivision^(0+512),w
 23784  342C  00F0               	movwf	?i1_getModulationSubdivision
 23785  342D  0008               	return
 23786  342E                     __end_ofi1_getModulationSubdivision:	
 23787                           
 23788                           	psect	text107
 23789  3FB6                     __ptext107:	
 23790 ;; *************** function _saveState *****************
 23791 ;; Defined at:
 23792 ;;		line 129 in file "state_manager.c"
 23793 ;; Parameters:    Size  Location     Type
 23794 ;;		None
 23795 ;; Auto vars:     Size  Location     Type
 23796 ;;		None
 23797 ;; Return value:  Size  Location     Type
 23798 ;;                  2   12[None  ] int 
 23799 ;; Registers used:
 23800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23801 ;; Tracked objects:
 23802 ;;		On entry : 0/0
 23803 ;;		On exit  : 0/0
 23804 ;;		Unchanged: 0/0
 23805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23810 ;;Total ram usage:        0 bytes
 23811 ;; Hardware stack levels used:    1
 23812 ;; Hardware stack levels required when called:    3
 23813 ;; This function calls:
 23814 ;;		_savePreset
 23815 ;; This function is called by:
 23816 ;;		_isr
 23817 ;;		_updateSwitchTapState
 23818 ;; This function uses a non-reentrant model
 23819 ;;
 23820                           
 23821                           
 23822                           ;psect for function _saveState
 23823  3FB6                     _saveState:	
 23824                           
 23825                           ;state_manager.c: 130: if (isStateInitialized) {
 23826                           
 23827                           ;incstack = 0
 23828                           ; Regs used in _saveState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23829  3FB6  0020               	movlb	0	; select bank0
 23830  3FB7  085D               	movf	_isStateInitialized,w
 23831  3FB8  045E               	iorwf	_isStateInitialized+1,w
 23832  3FB9  1903               	btfsc	3,2
 23833  3FBA  0008               	return
 23834                           
 23835                           ;state_manager.c: 132: savePreset(0);
 23836  3FBB  3000               	movlw	0
 23837  3FBC  319C  2469         	fcall	_savePreset
 23838  3FBE  0008               	return
 23839  3FBF                     __end_of_saveState:	
 23840                           
 23841                           	psect	text108
 23842  1C69                     __ptext108:	
 23843 ;; *************** function _savePreset *****************
 23844 ;; Defined at:
 23845 ;;		line 88 in file "state_manager.c"
 23846 ;; Parameters:    Size  Location     Type
 23847 ;;  presetChanne    1    wreg     unsigned char 
 23848 ;; Auto vars:     Size  Location     Type
 23849 ;;  presetChanne    1   17[BANK0 ] unsigned char 
 23850 ;;  presets        30   19[BANK0 ] struct .[3]
 23851 ;;  bankChannel     1   49[BANK0 ] unsigned char 
 23852 ;;  bankID          1   18[BANK0 ] unsigned char 
 23853 ;;  dep             1   16[BANK0 ] unsigned char 
 23854 ;;  symm            1   15[BANK0 ] unsigned char 
 23855 ;;  r               1   14[BANK0 ] unsigned char 
 23856 ;; Return value:  Size  Location     Type
 23857 ;;                  1    wreg      void 
 23858 ;; Registers used:
 23859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23860 ;; Tracked objects:
 23861 ;;		On entry : 0/0
 23862 ;;		On exit  : 0/0
 23863 ;;		Unchanged: 0/0
 23864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 23865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23866 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23867 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23868 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 23869 ;;Total ram usage:       40 bytes
 23870 ;; Hardware stack levels used:    1
 23871 ;; Hardware stack levels required when called:    2
 23872 ;; This function calls:
 23873 ;;		_HEF_ByteArrayWrite
 23874 ;;		_SetBitMask
 23875 ;;		i1_HEF_ByteArrayRead
 23876 ;;		i1___awdiv
 23877 ;;		i1___bmul
 23878 ;; This function is called by:
 23879 ;;		_saveState
 23880 ;; This function uses a non-reentrant model
 23881 ;;
 23882                           
 23883                           
 23884                           ;psect for function _savePreset
 23885  1C69                     _savePreset:	
 23886                           
 23887                           ;incstack = 0
 23888                           ; Regs used in _savePreset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23889                           ;savePreset@presetChannel stored from wreg
 23890  1C69  0020               	movlb	0	; select bank0
 23891  1C6A  00B1               	movwf	savePreset@presetChannel
 23892                           
 23893                           ;state_manager.c: 94: uint8_t r;
 23894                           ;state_manager.c: 95: PedalStorage presets[3];
 23895                           ;state_manager.c: 97: char bankID = (char) (presetChannel / 3);
 23896  1C6B  3003               	movlw	3
 23897  1C6C  00F0               	movwf	i1___awdiv@divisor
 23898  1C6D  3000               	movlw	0
 23899  1C6E  00F1               	movwf	i1___awdiv@divisor+1
 23900  1C6F  0831               	movf	savePreset@presetChannel,w
 23901  1C70  00AA               	movwf	??_savePreset
 23902  1C71  01AB               	clrf	??_savePreset+1
 23903  1C72  082A               	movf	??_savePreset,w
 23904  1C73  00F2               	movwf	i1___awdiv@dividend
 23905  1C74  082B               	movf	??_savePreset+1,w
 23906  1C75  00F3               	movwf	i1___awdiv@dividend+1
 23907  1C76  31AB  2353  319C   	fcall	i1___awdiv
 23908  1C79  0870               	movf	?i1___awdiv,w
 23909  1C7A  0020               	movlb	0	; select bank0
 23910  1C7B  00AC               	movwf	??_savePreset+2
 23911  1C7C  082C               	movf	??_savePreset+2,w
 23912  1C7D  00B2               	movwf	savePreset@bankID
 23913                           
 23914                           ;state_manager.c: 98: char bankChannel = (char)(presetChannel - (bankID * 3));
 23915  1C7E  3003               	movlw	3
 23916  1C7F  00AA               	movwf	??_savePreset
 23917  1C80  082A               	movf	??_savePreset,w
 23918  1C81  00F0               	movwf	i1___bmul@multiplicand
 23919  1C82  0832               	movf	savePreset@bankID,w
 23920  1C83  31B0  20C1  319C   	fcall	i1___bmul
 23921  1C86  3AFF               	xorlw	255
 23922  1C87  3E01               	addlw	1
 23923  1C88  0020               	movlb	0	; select bank0
 23924  1C89  0731               	addwf	savePreset@presetChannel,w
 23925  1C8A  00AB               	movwf	??_savePreset+1
 23926  1C8B  082B               	movf	??_savePreset+1,w
 23927  1C8C  00D1               	movwf	savePreset@bankChannel
 23928                           
 23929                           ;state_manager.c: 100: r = HEF_ByteArrayRead((void *) presets, bankID, sizeof (presets))
      +                          ;
 23930  1C8D  3033               	movlw	low savePreset@presets
 23931  1C8E  00F3               	movwf	i1HEF_ByteArrayRead@bArray
 23932  1C8F  3000               	movlw	high savePreset@presets
 23933  1C90  00F4               	movwf	i1HEF_ByteArrayRead@bArray+1
 23934  1C91  0832               	movf	savePreset@bankID,w
 23935  1C92  00AA               	movwf	??_savePreset
 23936  1C93  082A               	movf	??_savePreset,w
 23937  1C94  00F5               	movwf	i1HEF_ByteArrayRead@block
 23938  1C95  301E               	movlw	30
 23939  1C96  00AB               	movwf	??_savePreset+1
 23940  1C97  082B               	movf	??_savePreset+1,w
 23941  1C98  00F6               	movwf	i1HEF_ByteArrayRead@count
 23942  1C99  31B5  257B  319C   	fcall	i1_HEF_ByteArrayRead
 23943  1C9C  0020               	movlb	0	; select bank0
 23944  1C9D  00AC               	movwf	??_savePreset+2
 23945  1C9E  082C               	movf	??_savePreset+2,w
 23946  1C9F  00AE               	movwf	savePreset@r
 23947                           
 23948                           ;state_manager.c: 103: presets[bankChannel].modeBypassSubdivWave = SetBitMask(0, pedalSt
      +                          ate.pedalMode, 0, 4);
 23949  1CA0  300A               	movlw	10
 23950  1CA1  00AA               	movwf	??_savePreset
 23951  1CA2  082A               	movf	??_savePreset,w
 23952  1CA3  00F0               	movwf	i1___bmul@multiplicand
 23953  1CA4  0851               	movf	savePreset@bankChannel,w
 23954  1CA5  31B0  20C1  319C   	fcall	i1___bmul
 23955  1CA8  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 23956  1CA9  0086               	movwf	6
 23957  1CAA  0187               	clrf	7
 23958  1CAB  3000               	movlw	0
 23959  1CAC  00F6               	movwf	SetBitMask@storage
 23960  1CAD  00F7               	movwf	SetBitMask@storage+1
 23961  1CAE  0025               	movlb	5	; select bank5
 23962  1CAF  0842               	movf	(_pedalState^(0+640)+14),w
 23963  1CB0  0020               	movlb	0	; select bank0
 23964  1CB1  00AB               	movwf	??_savePreset+1
 23965  1CB2  01AC               	clrf	??_savePreset+2
 23966  1CB3  082B               	movf	??_savePreset+1,w
 23967  1CB4  00F8               	movwf	SetBitMask@value
 23968  1CB5  082C               	movf	??_savePreset+2,w
 23969  1CB6  00F9               	movwf	SetBitMask@value+1
 23970  1CB7  3000               	movlw	0
 23971  1CB8  00FA               	movwf	SetBitMask@index
 23972  1CB9  00FB               	movwf	SetBitMask@index+1
 23973  1CBA  3004               	movlw	4
 23974  1CBB  00FC               	movwf	SetBitMask@shift
 23975  1CBC  3000               	movlw	0
 23976  1CBD  00FD               	movwf	SetBitMask@shift+1
 23977  1CBE  31AA  22B5  319C   	fcall	_SetBitMask
 23978  1CC1  0876               	movf	?_SetBitMask,w
 23979  1CC2  3FC0               	movwi [0]fsr1
 23980  1CC3  0877               	movf	?_SetBitMask+1,w
 23981  1CC4  3FC1               	movwi [1]fsr1
 23982                           
 23983                           ;state_manager.c: 104: presets[bankChannel].modeBypassSubdivWave = SetBitMask(presets[ba
      +                          nkChannel].modeBypassSubdivWave, pedalState.bypass, 1, 4);
 23984  1CC5  300A               	movlw	10
 23985  1CC6  0020               	movlb	0	; select bank0
 23986  1CC7  00AA               	movwf	??_savePreset
 23987  1CC8  082A               	movf	??_savePreset,w
 23988  1CC9  00F0               	movwf	i1___bmul@multiplicand
 23989  1CCA  0851               	movf	savePreset@bankChannel,w
 23990  1CCB  31B0  20C1  319C   	fcall	i1___bmul
 23991  1CCE  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 23992  1CCF  0086               	movwf	6
 23993  1CD0  0187               	clrf	7
 23994  1CD1  300A               	movlw	10
 23995  1CD2  0020               	movlb	0	; select bank0
 23996  1CD3  00AB               	movwf	??_savePreset+1
 23997  1CD4  082B               	movf	??_savePreset+1,w
 23998  1CD5  00F0               	movwf	i1___bmul@multiplicand
 23999  1CD6  0851               	movf	savePreset@bankChannel,w
 24000  1CD7  31B0  20C1  319C   	fcall	i1___bmul
 24001  1CDA  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24002  1CDB  0084               	movwf	4
 24003  1CDC  0185               	clrf	5
 24004  1CDD  3F00               	moviw [0]fsr0
 24005  1CDE  00F6               	movwf	SetBitMask@storage
 24006  1CDF  3F01               	moviw [1]fsr0
 24007  1CE0  00F7               	movwf	SetBitMask@storage+1
 24008  1CE1  0025               	movlb	5	; select bank5
 24009  1CE2  0837               	movf	(_pedalState^(0+640)+3),w
 24010  1CE3  0020               	movlb	0	; select bank0
 24011  1CE4  00AC               	movwf	??_savePreset+2
 24012  1CE5  01AD               	clrf	??_savePreset+3
 24013  1CE6  082C               	movf	??_savePreset+2,w
 24014  1CE7  00F8               	movwf	SetBitMask@value
 24015  1CE8  082D               	movf	??_savePreset+3,w
 24016  1CE9  00F9               	movwf	SetBitMask@value+1
 24017  1CEA  3001               	movlw	1
 24018  1CEB  00FA               	movwf	SetBitMask@index
 24019  1CEC  3000               	movlw	0
 24020  1CED  00FB               	movwf	SetBitMask@index+1
 24021  1CEE  3004               	movlw	4
 24022  1CEF  00FC               	movwf	SetBitMask@shift
 24023  1CF0  3000               	movlw	0
 24024  1CF1  00FD               	movwf	SetBitMask@shift+1
 24025  1CF2  31AA  22B5  319C   	fcall	_SetBitMask
 24026  1CF5  0876               	movf	?_SetBitMask,w
 24027  1CF6  3FC0               	movwi [0]fsr1
 24028  1CF7  0877               	movf	?_SetBitMask+1,w
 24029  1CF8  3FC1               	movwi [1]fsr1
 24030                           
 24031                           ;state_manager.c: 105: presets[bankChannel].modeBypassSubdivWave = SetBitMask(presets[ba
      +                          nkChannel].modeBypassSubdivWave, pedalState.subdivision, 2, 4);
 24032  1CF9  300A               	movlw	10
 24033  1CFA  0020               	movlb	0	; select bank0
 24034  1CFB  00AA               	movwf	??_savePreset
 24035  1CFC  082A               	movf	??_savePreset,w
 24036  1CFD  00F0               	movwf	i1___bmul@multiplicand
 24037  1CFE  0851               	movf	savePreset@bankChannel,w
 24038  1CFF  31B0  20C1  319C   	fcall	i1___bmul
 24039  1D02  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24040  1D03  0086               	movwf	6
 24041  1D04  0187               	clrf	7
 24042  1D05  300A               	movlw	10
 24043  1D06  0020               	movlb	0	; select bank0
 24044  1D07  00AB               	movwf	??_savePreset+1
 24045  1D08  082B               	movf	??_savePreset+1,w
 24046  1D09  00F0               	movwf	i1___bmul@multiplicand
 24047  1D0A  0851               	movf	savePreset@bankChannel,w
 24048  1D0B  31B0  20C1  319C   	fcall	i1___bmul
 24049  1D0E  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24050  1D0F  0084               	movwf	4
 24051  1D10  0185               	clrf	5
 24052  1D11  3F00               	moviw [0]fsr0
 24053  1D12  00F6               	movwf	SetBitMask@storage
 24054  1D13  3F01               	moviw [1]fsr0
 24055  1D14  00F7               	movwf	SetBitMask@storage+1
 24056  1D15  0025               	movlb	5	; select bank5
 24057  1D16  0838               	movf	(_pedalState^(0+640)+4),w
 24058  1D17  0020               	movlb	0	; select bank0
 24059  1D18  00AC               	movwf	??_savePreset+2
 24060  1D19  01AD               	clrf	??_savePreset+3
 24061  1D1A  082C               	movf	??_savePreset+2,w
 24062  1D1B  00F8               	movwf	SetBitMask@value
 24063  1D1C  082D               	movf	??_savePreset+3,w
 24064  1D1D  00F9               	movwf	SetBitMask@value+1
 24065  1D1E  3002               	movlw	2
 24066  1D1F  00FA               	movwf	SetBitMask@index
 24067  1D20  3000               	movlw	0
 24068  1D21  00FB               	movwf	SetBitMask@index+1
 24069  1D22  3004               	movlw	4
 24070  1D23  00FC               	movwf	SetBitMask@shift
 24071  1D24  3000               	movlw	0
 24072  1D25  00FD               	movwf	SetBitMask@shift+1
 24073  1D26  31AA  22B5  319C   	fcall	_SetBitMask
 24074  1D29  0876               	movf	?_SetBitMask,w
 24075  1D2A  3FC0               	movwi [0]fsr1
 24076  1D2B  0877               	movf	?_SetBitMask+1,w
 24077  1D2C  3FC1               	movwi [1]fsr1
 24078                           
 24079                           ;state_manager.c: 106: presets[bankChannel].modeBypassSubdivWave = SetBitMask(presets[ba
      +                          nkChannel].modeBypassSubdivWave, pedalState.waveForm, 3, 4);
 24080  1D2D  300A               	movlw	10
 24081  1D2E  0020               	movlb	0	; select bank0
 24082  1D2F  00AA               	movwf	??_savePreset
 24083  1D30  082A               	movf	??_savePreset,w
 24084  1D31  00F0               	movwf	i1___bmul@multiplicand
 24085  1D32  0851               	movf	savePreset@bankChannel,w
 24086  1D33  31B0  20C1  319C   	fcall	i1___bmul
 24087  1D36  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24088  1D37  0086               	movwf	6
 24089  1D38  0187               	clrf	7
 24090  1D39  300A               	movlw	10
 24091  1D3A  0020               	movlb	0	; select bank0
 24092  1D3B  00AB               	movwf	??_savePreset+1
 24093  1D3C  082B               	movf	??_savePreset+1,w
 24094  1D3D  00F0               	movwf	i1___bmul@multiplicand
 24095  1D3E  0851               	movf	savePreset@bankChannel,w
 24096  1D3F  31B0  20C1  319C   	fcall	i1___bmul
 24097  1D42  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24098  1D43  0084               	movwf	4
 24099  1D44  0185               	clrf	5
 24100  1D45  3F00               	moviw [0]fsr0
 24101  1D46  00F6               	movwf	SetBitMask@storage
 24102  1D47  3F01               	moviw [1]fsr0
 24103  1D48  00F7               	movwf	SetBitMask@storage+1
 24104  1D49  0025               	movlb	5	; select bank5
 24105  1D4A  0839               	movf	(_pedalState^(0+640)+5),w
 24106  1D4B  0020               	movlb	0	; select bank0
 24107  1D4C  00AC               	movwf	??_savePreset+2
 24108  1D4D  01AD               	clrf	??_savePreset+3
 24109  1D4E  082C               	movf	??_savePreset+2,w
 24110  1D4F  00F8               	movwf	SetBitMask@value
 24111  1D50  082D               	movf	??_savePreset+3,w
 24112  1D51  00F9               	movwf	SetBitMask@value+1
 24113  1D52  3003               	movlw	3
 24114  1D53  00FA               	movwf	SetBitMask@index
 24115  1D54  3000               	movlw	0
 24116  1D55  00FB               	movwf	SetBitMask@index+1
 24117  1D56  3004               	movlw	4
 24118  1D57  00FC               	movwf	SetBitMask@shift
 24119  1D58  3000               	movlw	0
 24120  1D59  00FD               	movwf	SetBitMask@shift+1
 24121  1D5A  31AA  22B5  319C   	fcall	_SetBitMask
 24122  1D5D  0876               	movf	?_SetBitMask,w
 24123  1D5E  3FC0               	movwi [0]fsr1
 24124  1D5F  0877               	movf	?_SetBitMask+1,w
 24125  1D60  3FC1               	movwi [1]fsr1
 24126                           
 24127                           ;state_manager.c: 108: presets[bankChannel].baseTapTime = pedalState.baseTapTime;
 24128  1D61  300A               	movlw	10
 24129  1D62  0020               	movlb	0	; select bank0
 24130  1D63  00AA               	movwf	??_savePreset
 24131  1D64  082A               	movf	??_savePreset,w
 24132  1D65  00F0               	movwf	i1___bmul@multiplicand
 24133  1D66  0851               	movf	savePreset@bankChannel,w
 24134  1D67  31B0  20C1  319C   	fcall	i1___bmul
 24135  1D6A  3E02               	addlw	2
 24136  1D6B  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24137  1D6C  0086               	movwf	6
 24138  1D6D  0187               	clrf	7
 24139  1D6E  0025               	movlb	5	; select bank5
 24140  1D6F  0835               	movf	(_pedalState^(0+640)+1),w
 24141  1D70  3FC0               	movwi [0]fsr1
 24142  1D71  0836               	movf	((_pedalState+1)^(0+640)+1),w
 24143  1D72  3FC1               	movwi [1]fsr1
 24144                           
 24145                           ;state_manager.c: 110: presets[bankChannel].volume = pedalState.volume;
 24146  1D73  300A               	movlw	10
 24147  1D74  0020               	movlb	0	; select bank0
 24148  1D75  00AA               	movwf	??_savePreset
 24149  1D76  082A               	movf	??_savePreset,w
 24150  1D77  00F0               	movwf	i1___bmul@multiplicand
 24151  1D78  0851               	movf	savePreset@bankChannel,w
 24152  1D79  31B0  20C1  319C   	fcall	i1___bmul
 24153  1D7C  3E04               	addlw	4
 24154  1D7D  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24155  1D7E  0086               	movwf	6
 24156  1D7F  0187               	clrf	7
 24157  1D80  0025               	movlb	5	; select bank5
 24158  1D81  083A               	movf	(_pedalState^(0+640)+6),w
 24159  1D82  3FC0               	movwi [0]fsr1
 24160  1D83  083B               	movf	((_pedalState+1)^(0+640)+6),w
 24161  1D84  3FC1               	movwi [1]fsr1
 24162                           
 24163                           ;state_manager.c: 111: presets[bankChannel].frequency = pedalState.frequency;
 24164  1D85  300A               	movlw	10
 24165  1D86  0020               	movlb	0	; select bank0
 24166  1D87  00AA               	movwf	??_savePreset
 24167  1D88  082A               	movf	??_savePreset,w
 24168  1D89  00F0               	movwf	i1___bmul@multiplicand
 24169  1D8A  0851               	movf	savePreset@bankChannel,w
 24170  1D8B  31B0  20C1  319C   	fcall	i1___bmul
 24171  1D8E  3E06               	addlw	6
 24172  1D8F  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24173  1D90  0086               	movwf	6
 24174  1D91  0187               	clrf	7
 24175  1D92  0025               	movlb	5	; select bank5
 24176  1D93  083C               	movf	(_pedalState^(0+640)+8),w
 24177  1D94  3FC0               	movwi [0]fsr1
 24178  1D95  083D               	movf	((_pedalState+1)^(0+640)+8),w
 24179  1D96  3FC1               	movwi [1]fsr1
 24180                           
 24181                           ;state_manager.c: 119: unsigned char symm = (unsigned char)(pedalState.symmetry/4);
 24182  1D97  300A               	movlw	10
 24183  1D98  3EB4               	addlw	(low (_pedalState| (0+512)))& (0+255)
 24184  1D99  0086               	movwf	6
 24185  1D9A  3002               	movlw	2	; select bank5/6
 24186  1D9B  0087               	movwf	7
 24187  1D9C  3F40               	moviw [0]fsr1
 24188  1D9D  0020               	movlb	0	; select bank0
 24189  1D9E  00AA               	movwf	??_savePreset
 24190  1D9F  3F41               	moviw [1]fsr1
 24191  1DA0  00AB               	movwf	??_savePreset+1
 24192  1DA1  36AB               	lsrf	??_savePreset+1,f
 24193  1DA2  0CAA               	rrf	??_savePreset,f
 24194  1DA3  36AB               	lsrf	??_savePreset+1,f
 24195  1DA4  0CAA               	rrf	??_savePreset,f
 24196  1DA5  082A               	movf	??_savePreset,w
 24197  1DA6  00AC               	movwf	??_savePreset+2
 24198  1DA7  082C               	movf	??_savePreset+2,w
 24199  1DA8  00AF               	movwf	savePreset@symm
 24200                           
 24201                           ;state_manager.c: 120: unsigned char dep = (unsigned char)(pedalState.depth/4);
 24202  1DA9  300C               	movlw	12
 24203  1DAA  3EB4               	addlw	(low (_pedalState| (0+512)))& (0+255)
 24204  1DAB  0086               	movwf	6
 24205  1DAC  3002               	movlw	2	; select bank5/6
 24206  1DAD  0087               	movwf	7
 24207  1DAE  3F40               	moviw [0]fsr1
 24208  1DAF  00AA               	movwf	??_savePreset
 24209  1DB0  3F41               	moviw [1]fsr1
 24210  1DB1  00AB               	movwf	??_savePreset+1
 24211  1DB2  36AB               	lsrf	??_savePreset+1,f
 24212  1DB3  0CAA               	rrf	??_savePreset,f
 24213  1DB4  36AB               	lsrf	??_savePreset+1,f
 24214  1DB5  0CAA               	rrf	??_savePreset,f
 24215  1DB6  082A               	movf	??_savePreset,w
 24216  1DB7  00AC               	movwf	??_savePreset+2
 24217  1DB8  082C               	movf	??_savePreset+2,w
 24218  1DB9  00B0               	movwf	savePreset@dep
 24219                           
 24220                           ;state_manager.c: 121: presets[bankChannel].symmetry = symm;
 24221  1DBA  082F               	movf	savePreset@symm,w
 24222  1DBB  00AA               	movwf	??_savePreset
 24223  1DBC  300A               	movlw	10
 24224  1DBD  00AB               	movwf	??_savePreset+1
 24225  1DBE  082B               	movf	??_savePreset+1,w
 24226  1DBF  00F0               	movwf	i1___bmul@multiplicand
 24227  1DC0  0851               	movf	savePreset@bankChannel,w
 24228  1DC1  31B0  20C1  319C   	fcall	i1___bmul
 24229  1DC4  3E08               	addlw	8
 24230  1DC5  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24231  1DC6  0086               	movwf	6
 24232  1DC7  0187               	clrf	7
 24233  1DC8  0020               	movlb	0	; select bank0
 24234  1DC9  082A               	movf	??_savePreset,w
 24235  1DCA  0081               	movwf	1
 24236                           
 24237                           ;state_manager.c: 122: presets[bankChannel].depth = dep;
 24238  1DCB  0830               	movf	savePreset@dep,w
 24239  1DCC  00AA               	movwf	??_savePreset
 24240  1DCD  300A               	movlw	10
 24241  1DCE  00AB               	movwf	??_savePreset+1
 24242  1DCF  082B               	movf	??_savePreset+1,w
 24243  1DD0  00F0               	movwf	i1___bmul@multiplicand
 24244  1DD1  0851               	movf	savePreset@bankChannel,w
 24245  1DD2  31B0  20C1  319C   	fcall	i1___bmul
 24246  1DD5  3E09               	addlw	9
 24247  1DD6  3E33               	addlw	(low (savePreset@presets| 0))& (0+255)
 24248  1DD7  0086               	movwf	6
 24249  1DD8  0187               	clrf	7
 24250  1DD9  0020               	movlb	0	; select bank0
 24251  1DDA  082A               	movf	??_savePreset,w
 24252  1DDB  0081               	movwf	1
 24253                           
 24254                           ;state_manager.c: 124: HEF_ByteArrayWrite(bankID, (void *) &presets, sizeof (presets));
 24255  1DDC  3033               	movlw	(low (savePreset@presets| 0))& (0+255)
 24256  1DDD  00AA               	movwf	??_savePreset
 24257  1DDE  082A               	movf	??_savePreset,w
 24258  1DDF  00F3               	movwf	HEF_ByteArrayWrite@byteArray
 24259  1DE0  301E               	movlw	30
 24260  1DE1  00AB               	movwf	??_savePreset+1
 24261  1DE2  082B               	movf	??_savePreset+1,w
 24262  1DE3  00F4               	movwf	HEF_ByteArrayWrite@count
 24263  1DE4  0832               	movf	savePreset@bankID,w
 24264  1DE5  31AB  23F5         	fcall	_HEF_ByteArrayWrite
 24265  1DE7  0008               	return
 24266  1DE8                     __end_of_savePreset:	
 24267                           
 24268                           	psect	text109
 24269  30C1                     __ptext109:	
 24270 ;; *************** function i1___bmul *****************
 24271 ;; Defined at:
 24272 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 24273 ;; Parameters:    Size  Location     Type
 24274 ;;  multiplier      1    wreg     unsigned char 
 24275 ;;  multiplicand    1    0[COMMON] unsigned char 
 24276 ;; Auto vars:     Size  Location     Type
 24277 ;;  multiplier      1    3[COMMON] unsigned char 
 24278 ;;  __bmul          1    2[COMMON] unsigned char 
 24279 ;; Return value:  Size  Location     Type
 24280 ;;                  1    wreg      unsigned char 
 24281 ;; Registers used:
 24282 ;;		wreg, status,2, status,0
 24283 ;; Tracked objects:
 24284 ;;		On entry : 0/0
 24285 ;;		On exit  : 0/0
 24286 ;;		Unchanged: 0/0
 24287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24288 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24291 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24292 ;;Total ram usage:        4 bytes
 24293 ;; Hardware stack levels used:    1
 24294 ;; This function calls:
 24295 ;;		Nothing
 24296 ;; This function is called by:
 24297 ;;		_savePreset
 24298 ;; This function uses a non-reentrant model
 24299 ;;
 24300                           
 24301                           
 24302                           ;psect for function i1___bmul
 24303  30C1                     i1___bmul:	
 24304                           
 24305                           ;incstack = 0
 24306                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 24307                           ;i1___bmul@multiplier stored from wreg
 24308  30C1  00F3               	movwf	i1___bmul@multiplier
 24309  30C2  01F2               	clrf	i1___bmul@product
 24310  30C3                     i1l7277:	
 24311  30C3  1C73               	btfss	i1___bmul@multiplier,0
 24312  30C4  28C9               	goto	i1l7281
 24313  30C5  0870               	movf	i1___bmul@multiplicand,w
 24314  30C6  00F1               	movwf	??i1___bmul
 24315  30C7  0871               	movf	??i1___bmul,w
 24316  30C8  07F2               	addwf	i1___bmul@product,f
 24317  30C9                     i1l7281:	
 24318  30C9  1003               	clrc
 24319  30CA  0DF0               	rlf	i1___bmul@multiplicand,f
 24320  30CB  1003               	clrc
 24321  30CC  0CF3               	rrf	i1___bmul@multiplier,f
 24322  30CD  0873               	movf	i1___bmul@multiplier,w
 24323  30CE  1D03               	btfss	3,2
 24324  30CF  28C3               	goto	i1l7277
 24325  30D0  0872               	movf	i1___bmul@product,w
 24326  30D1  0008               	return
 24327  30D2                     __end_ofi1___bmul:	
 24328                           
 24329                           	psect	text110
 24330  2B53                     __ptext110:	
 24331 ;; *************** function i1___awdiv *****************
 24332 ;; Defined at:
 24333 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 24334 ;; Parameters:    Size  Location     Type
 24335 ;;  divisor         2    0[COMMON] int 
 24336 ;;  dividend        2    2[COMMON] int 
 24337 ;; Auto vars:     Size  Location     Type
 24338 ;;  __awdiv         2    7[COMMON] int 
 24339 ;;  __awdiv         1    6[COMMON] unsigned char 
 24340 ;;  __awdiv         1    5[COMMON] unsigned char 
 24341 ;; Return value:  Size  Location     Type
 24342 ;;                  2    0[COMMON] int 
 24343 ;; Registers used:
 24344 ;;		wreg, status,2, status,0
 24345 ;; Tracked objects:
 24346 ;;		On entry : 0/0
 24347 ;;		On exit  : 0/0
 24348 ;;		Unchanged: 0/0
 24349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24350 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24351 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24353 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24354 ;;Total ram usage:        9 bytes
 24355 ;; Hardware stack levels used:    1
 24356 ;; This function calls:
 24357 ;;		Nothing
 24358 ;; This function is called by:
 24359 ;;		_isr
 24360 ;;		_savePreset
 24361 ;; This function uses a non-reentrant model
 24362 ;;
 24363                           
 24364                           
 24365                           ;psect for function i1___awdiv
 24366  2B53                     i1___awdiv:	
 24367                           
 24368                           ;incstack = 0
 24369                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 24370  2B53  01F6               	clrf	i1___awdiv@sign
 24371  2B54  1FF1               	btfss	i1___awdiv@divisor+1,7
 24372  2B55  2B5D               	goto	i1l7297
 24373  2B56  09F0               	comf	i1___awdiv@divisor,f
 24374  2B57  09F1               	comf	i1___awdiv@divisor+1,f
 24375  2B58  0AF0               	incf	i1___awdiv@divisor,f
 24376  2B59  1903               	skipnz
 24377  2B5A  0AF1               	incf	i1___awdiv@divisor+1,f
 24378  2B5B  01F6               	clrf	i1___awdiv@sign
 24379  2B5C  0AF6               	incf	i1___awdiv@sign,f
 24380  2B5D                     i1l7297:	
 24381  2B5D  1FF3               	btfss	i1___awdiv@dividend+1,7
 24382  2B5E  2B68               	goto	i1l7303
 24383  2B5F  09F2               	comf	i1___awdiv@dividend,f
 24384  2B60  09F3               	comf	i1___awdiv@dividend+1,f
 24385  2B61  0AF2               	incf	i1___awdiv@dividend,f
 24386  2B62  1903               	skipnz
 24387  2B63  0AF3               	incf	i1___awdiv@dividend+1,f
 24388  2B64  3001               	movlw	1
 24389  2B65  00F4               	movwf	??i1___awdiv
 24390  2B66  0874               	movf	??i1___awdiv,w
 24391  2B67  06F6               	xorwf	i1___awdiv@sign,f
 24392  2B68                     i1l7303:	
 24393  2B68  01F7               	clrf	i1___awdiv@quotient
 24394  2B69  01F8               	clrf	i1___awdiv@quotient+1
 24395  2B6A  0870               	movf	i1___awdiv@divisor,w
 24396  2B6B  0471               	iorwf	i1___awdiv@divisor+1,w
 24397  2B6C  1903               	btfsc	3,2
 24398  2B6D  2B97               	goto	i1l7325
 24399  2B6E  01F5               	clrf	i1___awdiv@counter
 24400  2B6F  0AF5               	incf	i1___awdiv@counter,f
 24401  2B70                     i1l7313:	
 24402  2B70  1BF1               	btfsc	i1___awdiv@divisor+1,7
 24403  2B71  2B7C               	goto	i1l7315
 24404  2B72  3001               	movlw	1
 24405  2B73                     u667_25:	
 24406  2B73  35F0               	lslf	i1___awdiv@divisor,f
 24407  2B74  0DF1               	rlf	i1___awdiv@divisor+1,f
 24408  2B75  0B89               	decfsz	9,f
 24409  2B76  2B73               	goto	u667_25
 24410  2B77  3001               	movlw	1
 24411  2B78  00F4               	movwf	??i1___awdiv
 24412  2B79  0874               	movf	??i1___awdiv,w
 24413  2B7A  07F5               	addwf	i1___awdiv@counter,f
 24414  2B7B  2B70               	goto	i1l7313
 24415  2B7C                     i1l7315:	
 24416  2B7C  3001               	movlw	1
 24417  2B7D                     u669_25:	
 24418  2B7D  35F7               	lslf	i1___awdiv@quotient,f
 24419  2B7E  0DF8               	rlf	i1___awdiv@quotient+1,f
 24420  2B7F  0B89               	decfsz	9,f
 24421  2B80  2B7D               	goto	u669_25
 24422  2B81  0871               	movf	i1___awdiv@divisor+1,w
 24423  2B82  0273               	subwf	i1___awdiv@dividend+1,w
 24424  2B83  1D03               	skipz
 24425  2B84  2B87               	goto	u670_25
 24426  2B85  0870               	movf	i1___awdiv@divisor,w
 24427  2B86  0272               	subwf	i1___awdiv@dividend,w
 24428  2B87                     u670_25:	
 24429  2B87  1C03               	skipc
 24430  2B88  2B8E               	goto	i1l7321
 24431  2B89  0870               	movf	i1___awdiv@divisor,w
 24432  2B8A  02F2               	subwf	i1___awdiv@dividend,f
 24433  2B8B  0871               	movf	i1___awdiv@divisor+1,w
 24434  2B8C  3BF3               	subwfb	i1___awdiv@dividend+1,f
 24435  2B8D  1477               	bsf	i1___awdiv@quotient,0
 24436  2B8E                     i1l7321:	
 24437  2B8E  3001               	movlw	1
 24438  2B8F                     u671_25:	
 24439  2B8F  36F1               	lsrf	i1___awdiv@divisor+1,f
 24440  2B90  0CF0               	rrf	i1___awdiv@divisor,f
 24441  2B91  0B89               	decfsz	9,f
 24442  2B92  2B8F               	goto	u671_25
 24443  2B93  3001               	movlw	1
 24444  2B94  02F5               	subwf	i1___awdiv@counter,f
 24445  2B95  1D03               	btfss	3,2
 24446  2B96  2B7C               	goto	i1l7315
 24447  2B97                     i1l7325:	
 24448  2B97  0876               	movf	i1___awdiv@sign,w
 24449  2B98  1903               	btfsc	3,2
 24450  2B99  2B9F               	goto	i1l7329
 24451  2B9A  09F7               	comf	i1___awdiv@quotient,f
 24452  2B9B  09F8               	comf	i1___awdiv@quotient+1,f
 24453  2B9C  0AF7               	incf	i1___awdiv@quotient,f
 24454  2B9D  1903               	skipnz
 24455  2B9E  0AF8               	incf	i1___awdiv@quotient+1,f
 24456  2B9F                     i1l7329:	
 24457  2B9F  0878               	movf	i1___awdiv@quotient+1,w
 24458  2BA0  00F1               	movwf	?i1___awdiv+1
 24459  2BA1  0877               	movf	i1___awdiv@quotient,w
 24460  2BA2  00F0               	movwf	?i1___awdiv
 24461  2BA3  0008               	return
 24462  2BA4                     __end_ofi1___awdiv:	
 24463                           
 24464                           	psect	text111
 24465  357B                     __ptext111:	
 24466 ;; *************** function i1_HEF_ByteArrayRead *****************
 24467 ;; Defined at:
 24468 ;;		line 53 in file "HEF.c"
 24469 ;; Parameters:    Size  Location     Type
 24470 ;;  bArray          2    3[COMMON] PTR unsigned char 
 24471 ;;		 -> getPreset@presets(30), savePreset@presets(30), 
 24472 ;;  block           1    5[COMMON] unsigned char 
 24473 ;;  count           1    6[COMMON] unsigned char 
 24474 ;; Auto vars:     Size  Location     Type
 24475 ;;  HEF_ByteArra    2    9[COMMON] unsigned int 
 24476 ;; Return value:  Size  Location     Type
 24477 ;;                  1    wreg      char 
 24478 ;; Registers used:
 24479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24480 ;; Tracked objects:
 24481 ;;		On entry : 0/0
 24482 ;;		On exit  : 0/0
 24483 ;;		Unchanged: 0/0
 24484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24488 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24489 ;;Total ram usage:        8 bytes
 24490 ;; Hardware stack levels used:    1
 24491 ;; Hardware stack levels required when called:    1
 24492 ;; This function calls:
 24493 ;;		i1_FLASH_ReadWord
 24494 ;; This function is called by:
 24495 ;;		_savePreset
 24496 ;; This function uses a non-reentrant model
 24497 ;;
 24498                           
 24499                           
 24500                           ;psect for function i1_HEF_ByteArrayRead
 24501  357B                     i1_HEF_ByteArrayRead:	
 24502                           
 24503                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
 24504                           
 24505                           ;incstack = 0
 24506                           ; Regs used in i1_HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24507  357B  0875               	movf	i1HEF_ByteArrayRead@block,w
 24508  357C  00F7               	movwf	??i1_HEF_ByteArrayRead
 24509  357D  01F8               	clrf	??i1_HEF_ByteArrayRead+1
 24510  357E  3005               	movlw	5
 24511  357F                     u658_25:	
 24512  357F  35F7               	lslf	??i1_HEF_ByteArrayRead,f
 24513  3580  0DF8               	rlf	??i1_HEF_ByteArrayRead+1,f
 24514  3581  0B89               	decfsz	9,f
 24515  3582  2D7F               	goto	u658_25
 24516  3583  0877               	movf	??i1_HEF_ByteArrayRead,w
 24517  3584  3E80               	addlw	128
 24518  3585  00F9               	movwf	i1HEF_ByteArrayRead@wordAdd
 24519  3586  303F               	movlw	63
 24520  3587  3D78               	addwfc	??i1_HEF_ByteArrayRead+1,w
 24521  3588  00FA               	movwf	i1HEF_ByteArrayRead@wordAdd+1
 24522                           
 24523                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
 24524  3589  3021               	movlw	33
 24525  358A  0276               	subwf	i1HEF_ByteArrayRead@count,w
 24526  358B  1803               	skipnc
 24527  358C  2D91               	goto	i1l7257
 24528  358D  3004               	movlw	4
 24529  358E  0275               	subwf	i1HEF_ByteArrayRead@block,w
 24530  358F  1C03               	skipc
 24531  3590  2DAC               	goto	i1l7269
 24532  3591                     i1l7257:	
 24533                           
 24534                           ;HEF.c: 60: return -1;
 24535  3591  30FF               	movlw	255
 24536  3592  0008               	return
 24537  3593                     i1l7261:	
 24538                           ;HEF.c: 63: while ( count > 0)
 24539                           
 24540                           
 24541                           ;HEF.c: 64: {
 24542                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
 24543  3593  087A               	movf	i1HEF_ByteArrayRead@wordAdd+1,w
 24544  3594  00F1               	movwf	i1FLASH_ReadWord@flashAddr+1
 24545  3595  0879               	movf	i1HEF_ByteArrayRead@wordAdd,w
 24546  3596  00F0               	movwf	i1FLASH_ReadWord@flashAddr
 24547  3597  31B1  217F  31B5   	fcall	i1_FLASH_ReadWord
 24548  359A  0870               	movf	?i1_FLASH_ReadWord,w
 24549  359B  00F7               	movwf	??i1_HEF_ByteArrayRead
 24550  359C  0873               	movf	i1HEF_ByteArrayRead@bArray,w
 24551  359D  0086               	movwf	6
 24552  359E  0874               	movf	i1HEF_ByteArrayRead@bArray+1,w
 24553  359F  0087               	movwf	7
 24554  35A0  0877               	movf	??i1_HEF_ByteArrayRead,w
 24555  35A1  0081               	movwf	1
 24556  35A2  3001               	movlw	1
 24557  35A3  07F9               	addwf	i1HEF_ByteArrayRead@wordAdd,f
 24558  35A4  3000               	movlw	0
 24559  35A5  3DFA               	addwfc	i1HEF_ByteArrayRead@wordAdd+1,f
 24560  35A6  3001               	movlw	1
 24561  35A7  07F3               	addwf	i1HEF_ByteArrayRead@bArray,f
 24562  35A8  3000               	movlw	0
 24563  35A9  3DF4               	addwfc	i1HEF_ByteArrayRead@bArray+1,f
 24564                           
 24565                           ;HEF.c: 66: count--;
 24566  35AA  3001               	movlw	1
 24567  35AB  02F6               	subwf	i1HEF_ByteArrayRead@count,f
 24568  35AC                     i1l7269:	
 24569  35AC  0876               	movf	i1HEF_ByteArrayRead@count,w
 24570  35AD  1D03               	btfss	3,2
 24571  35AE  2D93               	goto	i1l7261
 24572                           
 24573                           ;HEF.c: 67: }
 24574                           ;HEF.c: 70: return 0;
 24575  35AF  3000               	movlw	0
 24576  35B0  0008               	return
 24577  35B1                     __end_ofi1_HEF_ByteArrayRead:	
 24578                           
 24579                           	psect	text112
 24580  317F                     __ptext112:	
 24581 ;; *************** function i1_FLASH_ReadWord *****************
 24582 ;; Defined at:
 24583 ;;		line 58 in file "memory.c"
 24584 ;; Parameters:    Size  Location     Type
 24585 ;;  flashAddr       2    0[COMMON] unsigned int 
 24586 ;; Auto vars:     Size  Location     Type
 24587 ;;  FLASH_ReadWo    1    2[COMMON] unsigned char 
 24588 ;; Return value:  Size  Location     Type
 24589 ;;                  2    0[COMMON] unsigned int 
 24590 ;; Registers used:
 24591 ;;		wreg, status,2, status,0
 24592 ;; Tracked objects:
 24593 ;;		On entry : 0/0
 24594 ;;		On exit  : 0/0
 24595 ;;		Unchanged: 0/0
 24596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24600 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24601 ;;Total ram usage:        3 bytes
 24602 ;; Hardware stack levels used:    1
 24603 ;; This function calls:
 24604 ;;		Nothing
 24605 ;; This function is called by:
 24606 ;;		i1_HEF_ByteArrayRead
 24607 ;; This function uses a non-reentrant model
 24608 ;;
 24609                           
 24610                           
 24611                           ;psect for function i1_FLASH_ReadWord
 24612  317F                     i1_FLASH_ReadWord:	
 24613                           
 24614                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 24615                           
 24616                           ;incstack = 0
 24617                           ; Regs used in i1_FLASH_ReadWord: [wreg+status,2+status,0]
 24618  317F  3000               	movlw	0
 24619  3180  1B8B               	btfsc	11,7	;volatile
 24620  3181  3001               	movlw	1
 24621  3182  00F2               	movwf	i1FLASH_ReadWord@GIEBitValue
 24622                           
 24623                           ;memory.c: 61: INTCONbits.GIE = 0;
 24624  3183  138B               	bcf	11,7	;volatile
 24625                           
 24626                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 24627  3184  0870               	movf	i1FLASH_ReadWord@flashAddr,w
 24628  3185  0023               	movlb	3	; select bank3
 24629  3186  0091               	movwf	17	;volatile
 24630                           
 24631                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 24632  3187  0871               	movf	i1FLASH_ReadWord@flashAddr+1,w
 24633  3188  0092               	movwf	18	;volatile
 24634                           
 24635                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 24636  3189  1315               	bcf	21,6	;volatile
 24637                           
 24638                           ;memory.c: 66: PMCON1bits.RD = 1;
 24639  318A  1415               	bsf	21,0	;volatile
 24640                           
 24641                           ;memory.c: 67: __nop();
 24642  318B  0000               	nop
 24643                           
 24644                           ;memory.c: 68: __nop();
 24645  318C  0000               	nop
 24646                           
 24647                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 24648  318D  0C72               	rrf	i1FLASH_ReadWord@GIEBitValue,w
 24649  318E  1C03               	skipc
 24650  318F  138B               	bcf	11,7	;volatile
 24651  3190  1803               	skipnc
 24652  3191  178B               	bsf	11,7	;volatile
 24653                           
 24654                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 24655  3192  0023               	movlb	3	; select bank3
 24656  3193  0814               	movf	20,w	;volatile
 24657  3194  00F1               	movwf	?i1_FLASH_ReadWord+1
 24658  3195  0813               	movf	19,w	;volatile
 24659  3196  00F0               	movwf	?i1_FLASH_ReadWord
 24660  3197  0008               	return
 24661  3198                     __end_ofi1_FLASH_ReadWord:	
 24662                           
 24663                           	psect	text113
 24664  2AB5                     __ptext113:	
 24665 ;; *************** function _SetBitMask *****************
 24666 ;; Defined at:
 24667 ;;		line 380 in file "state_manager.c"
 24668 ;; Parameters:    Size  Location     Type
 24669 ;;  storage         2    6[COMMON] int 
 24670 ;;  value           2    8[COMMON] int 
 24671 ;;  index           2   10[COMMON] int 
 24672 ;;  shift           2   12[COMMON] int 
 24673 ;; Auto vars:     Size  Location     Type
 24674 ;;  shiftCount      2    8[BANK0 ] int 
 24675 ;;  mask            2    6[BANK0 ] int 
 24676 ;; Return value:  Size  Location     Type
 24677 ;;                  2    6[COMMON] int 
 24678 ;; Registers used:
 24679 ;;		wreg, status,2, status,0, pclath, cstack
 24680 ;; Tracked objects:
 24681 ;;		On entry : 0/0
 24682 ;;		On exit  : 0/0
 24683 ;;		Unchanged: 0/0
 24684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24685 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24686 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24687 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24688 ;;      Totals:         8      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24689 ;;Total ram usage:       18 bytes
 24690 ;; Hardware stack levels used:    1
 24691 ;; Hardware stack levels required when called:    1
 24692 ;; This function calls:
 24693 ;;		i1___wmul
 24694 ;; This function is called by:
 24695 ;;		_savePreset
 24696 ;; This function uses a non-reentrant model
 24697 ;;
 24698                           
 24699                           
 24700                           ;psect for function _SetBitMask
 24701  2AB5                     _SetBitMask:	
 24702                           
 24703                           ;state_manager.c: 381: int shiftCount = index * shift;
 24704                           
 24705                           ;incstack = 0
 24706                           ; Regs used in _SetBitMask: [wreg+status,2+status,0+pclath+cstack]
 24707  2AB5  087B               	movf	SetBitMask@index+1,w
 24708  2AB6  00F1               	movwf	i1___wmul@multiplier+1
 24709  2AB7  087A               	movf	SetBitMask@index,w
 24710  2AB8  00F0               	movwf	i1___wmul@multiplier
 24711  2AB9  087D               	movf	SetBitMask@shift+1,w
 24712  2ABA  00F3               	movwf	i1___wmul@multiplicand+1
 24713  2ABB  087C               	movf	SetBitMask@shift,w
 24714  2ABC  00F2               	movwf	i1___wmul@multiplicand
 24715  2ABD  31B1  21E5  31AA   	fcall	i1___wmul
 24716  2AC0  0871               	movf	?i1___wmul+1,w
 24717  2AC1  0020               	movlb	0	; select bank0
 24718  2AC2  00A9               	movwf	SetBitMask@shiftCount+1
 24719  2AC3  0870               	movf	?i1___wmul,w
 24720  2AC4  00A8               	movwf	SetBitMask@shiftCount
 24721                           
 24722                           ;state_manager.c: 382: int mask = 0x0f << shiftCount;
 24723  2AC5  300F               	movlw	15
 24724  2AC6  00A0               	movwf	??_SetBitMask
 24725  2AC7  3000               	movlw	0
 24726  2AC8  00A1               	movwf	??_SetBitMask+1
 24727  2AC9  0A28               	incf	SetBitMask@shiftCount,w
 24728  2ACA  2ACD               	goto	u639_24
 24729  2ACB                     u639_25:	
 24730  2ACB  35A0               	lslf	??_SetBitMask,f
 24731  2ACC  0DA1               	rlf	??_SetBitMask+1,f
 24732  2ACD                     u639_24:	
 24733  2ACD  0B89               	decfsz	9,f
 24734  2ACE  2ACB               	goto	u639_25
 24735  2ACF  0820               	movf	??_SetBitMask,w
 24736  2AD0  00A6               	movwf	SetBitMask@mask
 24737  2AD1  0821               	movf	??_SetBitMask+1,w
 24738  2AD2  00A7               	movwf	SetBitMask@mask+1
 24739                           
 24740                           ;state_manager.c: 383: if (shift == 8) {
 24741  2AD3  3008               	movlw	8
 24742  2AD4  067C               	xorwf	SetBitMask@shift,w
 24743  2AD5  047D               	iorwf	SetBitMask@shift+1,w
 24744  2AD6  1D03               	btfss	3,2
 24745  2AD7  2AE6               	goto	i1l1412
 24746                           
 24747                           ;state_manager.c: 384: mask = 0xff << shiftCount;
 24748  2AD8  30FF               	movlw	255
 24749  2AD9  00A0               	movwf	??_SetBitMask
 24750  2ADA  3000               	movlw	0
 24751  2ADB  00A1               	movwf	??_SetBitMask+1
 24752  2ADC  0A28               	incf	SetBitMask@shiftCount,w
 24753  2ADD  2AE0               	goto	u641_24
 24754  2ADE                     u641_25:	
 24755  2ADE  35A0               	lslf	??_SetBitMask,f
 24756  2ADF  0DA1               	rlf	??_SetBitMask+1,f
 24757  2AE0                     u641_24:	
 24758  2AE0  0B89               	decfsz	9,f
 24759  2AE1  2ADE               	goto	u641_25
 24760  2AE2  0820               	movf	??_SetBitMask,w
 24761  2AE3  00A6               	movwf	SetBitMask@mask
 24762  2AE4  0821               	movf	??_SetBitMask+1,w
 24763  2AE5  00A7               	movwf	SetBitMask@mask+1
 24764  2AE6                     i1l1412:	
 24765                           
 24766                           ;state_manager.c: 385: }
 24767                           ;state_manager.c: 386: return (storage & ~mask) | (value << shiftCount);
 24768  2AE6  0879               	movf	SetBitMask@value+1,w
 24769  2AE7  00A1               	movwf	??_SetBitMask+1
 24770  2AE8  0878               	movf	SetBitMask@value,w
 24771  2AE9  00A0               	movwf	??_SetBitMask
 24772  2AEA  0A28               	incf	SetBitMask@shiftCount,w
 24773  2AEB  2AEE               	goto	u642_24
 24774  2AEC                     u642_25:	
 24775  2AEC  35A0               	lslf	??_SetBitMask,f
 24776  2AED  0DA1               	rlf	??_SetBitMask+1,f
 24777  2AEE                     u642_24:	
 24778  2AEE  0B89               	decfsz	9,f
 24779  2AEF  2AEC               	goto	u642_25
 24780  2AF0  0827               	movf	SetBitMask@mask+1,w
 24781  2AF1  00A3               	movwf	??_SetBitMask+3
 24782  2AF2  0826               	movf	SetBitMask@mask,w
 24783  2AF3  00A2               	movwf	??_SetBitMask+2
 24784  2AF4  09A2               	comf	??_SetBitMask+2,f
 24785  2AF5  09A3               	comf	??_SetBitMask+3,f
 24786  2AF6  0876               	movf	SetBitMask@storage,w
 24787  2AF7  0522               	andwf	??_SetBitMask+2,w
 24788  2AF8  00A4               	movwf	??_SetBitMask+4
 24789  2AF9  0877               	movf	SetBitMask@storage+1,w
 24790  2AFA  0523               	andwf	??_SetBitMask+3,w
 24791  2AFB  00A5               	movwf	??_SetBitMask+5
 24792  2AFC  0820               	movf	??_SetBitMask,w
 24793  2AFD  0424               	iorwf	??_SetBitMask+4,w
 24794  2AFE  00F6               	movwf	?_SetBitMask
 24795  2AFF  0821               	movf	??_SetBitMask+1,w
 24796  2B00  0425               	iorwf	??_SetBitMask+5,w
 24797  2B01  00F7               	movwf	?_SetBitMask+1
 24798  2B02  0008               	return
 24799  2B03                     __end_of_SetBitMask:	
 24800                           
 24801                           	psect	text114
 24802  31E5                     __ptext114:	
 24803 ;; *************** function i1___wmul *****************
 24804 ;; Defined at:
 24805 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 24806 ;; Parameters:    Size  Location     Type
 24807 ;;  multiplier      2    0[COMMON] unsigned int 
 24808 ;;  multiplicand    2    2[COMMON] unsigned int 
 24809 ;; Auto vars:     Size  Location     Type
 24810 ;;  __wmul          2    4[COMMON] unsigned int 
 24811 ;; Return value:  Size  Location     Type
 24812 ;;                  2    0[COMMON] unsigned int 
 24813 ;; Registers used:
 24814 ;;		wreg, status,2, status,0
 24815 ;; Tracked objects:
 24816 ;;		On entry : 0/0
 24817 ;;		On exit  : 0/0
 24818 ;;		Unchanged: 0/0
 24819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24823 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24824 ;;Total ram usage:        6 bytes
 24825 ;; Hardware stack levels used:    1
 24826 ;; This function calls:
 24827 ;;		Nothing
 24828 ;; This function is called by:
 24829 ;;		_SetBitMask
 24830 ;; This function uses a non-reentrant model
 24831 ;;
 24832                           
 24833                           
 24834                           ;psect for function i1___wmul
 24835  31E5                     i1___wmul:	
 24836                           
 24837                           ;incstack = 0
 24838                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 24839  31E5  01F4               	clrf	i1___wmul@product
 24840  31E6  01F5               	clrf	i1___wmul@product+1
 24841  31E7                     i1l7029:	
 24842  31E7  1C70               	btfss	i1___wmul@multiplier,0
 24843  31E8  29ED               	goto	i1l2449
 24844  31E9  0872               	movf	i1___wmul@multiplicand,w
 24845  31EA  07F4               	addwf	i1___wmul@product,f
 24846  31EB  0873               	movf	i1___wmul@multiplicand+1,w
 24847  31EC  3DF5               	addwfc	i1___wmul@product+1,f
 24848  31ED                     i1l2449:	
 24849  31ED  3001               	movlw	1
 24850  31EE                     u630_25:	
 24851  31EE  35F2               	lslf	i1___wmul@multiplicand,f
 24852  31EF  0DF3               	rlf	i1___wmul@multiplicand+1,f
 24853  31F0  0B89               	decfsz	9,f
 24854  31F1  29EE               	goto	u630_25
 24855  31F2  3001               	movlw	1
 24856  31F3                     u631_25:	
 24857  31F3  36F1               	lsrf	i1___wmul@multiplier+1,f
 24858  31F4  0CF0               	rrf	i1___wmul@multiplier,f
 24859  31F5  0B89               	decfsz	9,f
 24860  31F6  29F3               	goto	u631_25
 24861  31F7  0870               	movf	i1___wmul@multiplier,w
 24862  31F8  0471               	iorwf	i1___wmul@multiplier+1,w
 24863  31F9  1D03               	btfss	3,2
 24864  31FA  29E7               	goto	i1l7029
 24865  31FB  0875               	movf	i1___wmul@product+1,w
 24866  31FC  00F1               	movwf	?i1___wmul+1
 24867  31FD  0874               	movf	i1___wmul@product,w
 24868  31FE  00F0               	movwf	?i1___wmul
 24869  31FF  0008               	return
 24870  3200                     __end_ofi1___wmul:	
 24871                           
 24872                           	psect	text115
 24873  2BF5                     __ptext115:	
 24874 ;; *************** function _HEF_ByteArrayWrite *****************
 24875 ;; Defined at:
 24876 ;;		line 12 in file "HEF.c"
 24877 ;; Parameters:    Size  Location     Type
 24878 ;;  block           1    wreg     unsigned char 
 24879 ;;  byteArray       1    3[COMMON] PTR unsigned char 
 24880 ;;		 -> savePreset@presets(30), 
 24881 ;;  count           1    4[COMMON] unsigned char 
 24882 ;; Auto vars:     Size  Location     Type
 24883 ;;  block           1    8[COMMON] unsigned char 
 24884 ;;  blockAddr       2    9[COMMON] unsigned int 
 24885 ;;  GIEBitValue     1    7[COMMON] unsigned char 
 24886 ;;  i               1    0        unsigned char 
 24887 ;; Return value:  Size  Location     Type
 24888 ;;                  1    wreg      char 
 24889 ;; Registers used:
 24890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24891 ;; Tracked objects:
 24892 ;;		On entry : 0/0
 24893 ;;		On exit  : 0/0
 24894 ;;		Unchanged: 0/0
 24895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 24896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24897 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24899 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 24900 ;;Total ram usage:        8 bytes
 24901 ;; Hardware stack levels used:    1
 24902 ;; Hardware stack levels required when called:    1
 24903 ;; This function calls:
 24904 ;;		_FLASH_EraseBlock
 24905 ;; This function is called by:
 24906 ;;		_savePreset
 24907 ;; This function uses a non-reentrant model
 24908 ;;
 24909                           
 24910                           
 24911                           ;psect for function _HEF_ByteArrayWrite
 24912  2BF5                     _HEF_ByteArrayWrite:	
 24913                           
 24914                           ;incstack = 0
 24915                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24916                           ;HEF_ByteArrayWrite@block stored from wreg
 24917  2BF5  00F8               	movwf	HEF_ByteArrayWrite@block
 24918                           
 24919                           ;HEF.c: 13: uint16_t blockAddr;
 24920                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
 24921  2BF6  3000               	movlw	0
 24922  2BF7  1B8B               	btfsc	11,7	;volatile
 24923  2BF8  3001               	movlw	1
 24924  2BF9  00F7               	movwf	HEF_ByteArrayWrite@GIEBitValue
 24925                           
 24926                           ;HEF.c: 15: uint8_t i;
 24927                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
 24928  2BFA  3004               	movlw	4
 24929  2BFB  0278               	subwf	HEF_ByteArrayWrite@block,w
 24930  2BFC  1803               	skipnc
 24931  2BFD  0008               	return
 24932  2BFE  3021               	movlw	33
 24933  2BFF  0274               	subwf	HEF_ByteArrayWrite@count,w
 24934  2C00  1803               	btfsc	3,0
 24935  2C01  0008               	return
 24936                           
 24937                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
 24938                           
 24939                           ;HEF.c: 18: return -1;
 24940                           ;	Return value of _HEF_ByteArrayWrite is never used
 24941  2C02  0878               	movf	HEF_ByteArrayWrite@block,w
 24942  2C03  00F5               	movwf	??_HEF_ByteArrayWrite
 24943  2C04  01F6               	clrf	??_HEF_ByteArrayWrite+1
 24944  2C05  3005               	movlw	5
 24945  2C06                     u645_25:	
 24946  2C06  35F5               	lslf	??_HEF_ByteArrayWrite,f
 24947  2C07  0DF6               	rlf	??_HEF_ByteArrayWrite+1,f
 24948  2C08  0B89               	decfsz	9,f
 24949  2C09  2C06               	goto	u645_25
 24950  2C0A  0875               	movf	??_HEF_ByteArrayWrite,w
 24951  2C0B  3E80               	addlw	128
 24952  2C0C  00F9               	movwf	HEF_ByteArrayWrite@blockAddr
 24953  2C0D  303F               	movlw	63
 24954  2C0E  3D76               	addwfc	??_HEF_ByteArrayWrite+1,w
 24955  2C0F  00FA               	movwf	HEF_ByteArrayWrite@blockAddr+1
 24956                           
 24957                           ;HEF.c: 21: INTCONbits.GIE = 0;
 24958  2C10  138B               	bcf	11,7	;volatile
 24959                           
 24960                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
 24961  2C11  087A               	movf	HEF_ByteArrayWrite@blockAddr+1,w
 24962  2C12  00F1               	movwf	FLASH_EraseBlock@startAddr+1
 24963  2C13  0879               	movf	HEF_ByteArrayWrite@blockAddr,w
 24964  2C14  00F0               	movwf	FLASH_EraseBlock@startAddr
 24965  2C15  31B2  2200  31AB   	fcall	_FLASH_EraseBlock
 24966                           
 24967                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
 24968  2C18  0023               	movlb	3	; select bank3
 24969  2C19  1315               	bcf	21,6	;volatile
 24970                           
 24971                           ;HEF.c: 27: PMCON1bits.WREN = 1;
 24972  2C1A  1515               	bsf	21,2	;volatile
 24973                           
 24974                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
 24975  2C1B  1695               	bsf	21,5	;volatile
 24976  2C1C                     i1l7169:	
 24977                           ;HEF.c: 30: while ( count > 0) {
 24978                           
 24979  2C1C  0874               	movf	HEF_ByteArrayWrite@count,w
 24980  2C1D  1903               	btfsc	3,2
 24981  2C1E  2C3F               	goto	i1l2299
 24982                           
 24983                           ;HEF.c: 31: PMADR = blockAddr++;
 24984  2C1F  087A               	movf	HEF_ByteArrayWrite@blockAddr+1,w
 24985  2C20  0023               	movlb	3	; select bank3
 24986  2C21  0092               	movwf	18	;volatile
 24987  2C22  0879               	movf	HEF_ByteArrayWrite@blockAddr,w
 24988  2C23  0091               	movwf	17	;volatile
 24989  2C24  3001               	movlw	1
 24990  2C25  07F9               	addwf	HEF_ByteArrayWrite@blockAddr,f
 24991  2C26  3000               	movlw	0
 24992  2C27  3DFA               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
 24993                           
 24994                           ;HEF.c: 33: PMDATL = *byteArray++;
 24995  2C28  0873               	movf	HEF_ByteArrayWrite@byteArray,w
 24996  2C29  0086               	movwf	6
 24997  2C2A  0187               	clrf	7
 24998  2C2B  0801               	movf	1,w
 24999  2C2C  0093               	movwf	19	;volatile
 25000  2C2D  3001               	movlw	1
 25001  2C2E  00F5               	movwf	??_HEF_ByteArrayWrite
 25002  2C2F  0875               	movf	??_HEF_ByteArrayWrite,w
 25003  2C30  07F3               	addwf	HEF_ByteArrayWrite@byteArray,f
 25004                           
 25005                           ;HEF.c: 34: PMDATH = 0;
 25006  2C31  0194               	clrf	20	;volatile
 25007                           
 25008                           ;HEF.c: 35: if ( count == 1) {
 25009  2C32  0374               	decf	HEF_ByteArrayWrite@count,w
 25010  2C33  1903               	btfsc	3,2
 25011                           
 25012                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
 25013  2C34  1295               	bcf	21,5	;volatile
 25014                           
 25015                           ;HEF.c: 37: }
 25016                           ;HEF.c: 39: PMCON2 = 0x55;
 25017  2C35  3055               	movlw	85
 25018  2C36  0096               	movwf	22	;volsfr
 25019                           
 25020                           ;HEF.c: 40: PMCON2 = 0xAA;
 25021  2C37  30AA               	movlw	170
 25022  2C38  0096               	movwf	22	;volsfr
 25023                           
 25024                           ;HEF.c: 41: PMCON1bits.WR = 1;
 25025  2C39  1495               	bsf	21,1	;volatile
 25026                           
 25027                           ;HEF.c: 42: __nop();
 25028  2C3A  0000               	nop
 25029                           
 25030                           ;HEF.c: 43: __nop();
 25031  2C3B  0000               	nop
 25032                           
 25033                           ;HEF.c: 44: count--;
 25034  2C3C  3001               	movlw	1
 25035  2C3D  02F4               	subwf	HEF_ByteArrayWrite@count,f
 25036  2C3E  2C1C               	goto	i1l7169
 25037  2C3F                     i1l2299:	
 25038                           
 25039                           ;HEF.c: 45: }
 25040                           ;HEF.c: 47: PMCON1bits.WREN = 0;
 25041  2C3F  0023               	movlb	3	; select bank3
 25042  2C40  1115               	bcf	21,2	;volatile
 25043                           
 25044                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
 25045  2C41  0C77               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
 25046  2C42  1C03               	skipc
 25047  2C43  138B               	bcf	11,7	;volatile
 25048  2C44  1803               	skipnc
 25049  2C45  178B               	bsf	11,7	;volatile
 25050  2C46  0008               	return
 25051  2C47                     __end_of_HEF_ByteArrayWrite:	
 25052                           ;HEF.c: 50: return 0;
 25053                           ;	Return value of _HEF_ByteArrayWrite is never used
 25054                           
 25055                           
 25056                           	psect	text116
 25057  3200                     __ptext116:	
 25058 ;; *************** function _FLASH_EraseBlock *****************
 25059 ;; Defined at:
 25060 ;;		line 141 in file "memory.c"
 25061 ;; Parameters:    Size  Location     Type
 25062 ;;  startAddr       2    0[COMMON] unsigned int 
 25063 ;; Auto vars:     Size  Location     Type
 25064 ;;  GIEBitValue     1    2[COMMON] unsigned char 
 25065 ;; Return value:  Size  Location     Type
 25066 ;;                  1    wreg      void 
 25067 ;; Registers used:
 25068 ;;		wreg, status,2, status,0
 25069 ;; Tracked objects:
 25070 ;;		On entry : 0/0
 25071 ;;		On exit  : 0/0
 25072 ;;		Unchanged: 0/0
 25073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25077 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25078 ;;Total ram usage:        3 bytes
 25079 ;; Hardware stack levels used:    1
 25080 ;; This function calls:
 25081 ;;		Nothing
 25082 ;; This function is called by:
 25083 ;;		_HEF_ByteArrayWrite
 25084 ;;		_FLASH_WriteBlock
 25085 ;; This function uses a non-reentrant model
 25086 ;;
 25087                           
 25088                           
 25089                           ;psect for function _FLASH_EraseBlock
 25090  3200                     _FLASH_EraseBlock:	
 25091                           
 25092                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
 25093                           
 25094                           ;incstack = 0
 25095                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 25096  3200  3000               	movlw	0
 25097  3201  1B8B               	btfsc	11,7	;volatile
 25098  3202  3001               	movlw	1
 25099  3203  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
 25100                           
 25101                           ;memory.c: 145: INTCONbits.GIE = 0;
 25102  3204  138B               	bcf	11,7	;volatile
 25103                           
 25104                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
 25105  3205  0870               	movf	FLASH_EraseBlock@startAddr,w
 25106  3206  0023               	movlb	3	; select bank3
 25107  3207  0091               	movwf	17	;volatile
 25108                           
 25109                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
 25110  3208  0871               	movf	FLASH_EraseBlock@startAddr+1,w
 25111  3209  0092               	movwf	18	;volatile
 25112                           
 25113                           ;memory.c: 152: PMCON1bits.CFGS = 0;
 25114  320A  1315               	bcf	21,6	;volatile
 25115                           
 25116                           ;memory.c: 153: PMCON1bits.FREE = 1;
 25117  320B  1615               	bsf	21,4	;volatile
 25118                           
 25119                           ;memory.c: 154: PMCON1bits.WREN = 1;
 25120  320C  1515               	bsf	21,2	;volatile
 25121                           
 25122                           ;memory.c: 157: PMCON2 = 0x55;
 25123  320D  3055               	movlw	85
 25124  320E  0096               	movwf	22	;volsfr
 25125                           
 25126                           ;memory.c: 158: PMCON2 = 0xAA;
 25127  320F  30AA               	movlw	170
 25128  3210  0096               	movwf	22	;volsfr
 25129                           
 25130                           ;memory.c: 159: PMCON1bits.WR = 1;
 25131  3211  1495               	bsf	21,1	;volatile
 25132                           
 25133                           ;memory.c: 160: __nop();
 25134  3212  0000               	nop
 25135                           
 25136                           ;memory.c: 161: __nop();
 25137  3213  0000               	nop
 25138                           
 25139                           ;memory.c: 163: PMCON1bits.WREN = 0;
 25140  3214  0023               	movlb	3	; select bank3
 25141  3215  1115               	bcf	21,2	;volatile
 25142                           
 25143                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
 25144  3216  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
 25145  3217  1C03               	skipc
 25146  3218  138B               	bcf	11,7	;volatile
 25147  3219  1803               	skipnc
 25148  321A  178B               	bsf	11,7	;volatile
 25149  321B  0008               	return
 25150  321C                     __end_of_FLASH_EraseBlock:	
 25151                           
 25152                           	psect	text117
 25153  2884                     __ptext117:	
 25154 ;; *************** function _modulation *****************
 25155 ;; Defined at:
 25156 ;;		line 240 in file "user.c"
 25157 ;; Parameters:    Size  Location     Type
 25158 ;;  x               4   14[BANK0 ] long 
 25159 ;;  y               4   18[BANK0 ] long 
 25160 ;; Auto vars:     Size  Location     Type
 25161 ;;		None
 25162 ;; Return value:  Size  Location     Type
 25163 ;;                  4   14[BANK0 ] long 
 25164 ;; Registers used:
 25165 ;;		wreg, status,2, status,0, pclath, cstack
 25166 ;; Tracked objects:
 25167 ;;		On entry : 0/0
 25168 ;;		On exit  : 0/0
 25169 ;;		Unchanged: 0/0
 25170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25171 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25174 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25175 ;;Total ram usage:       12 bytes
 25176 ;; Hardware stack levels used:    1
 25177 ;; Hardware stack levels required when called:    1
 25178 ;; This function calls:
 25179 ;;		i1___aldiv
 25180 ;;		i1___lmul
 25181 ;; This function is called by:
 25182 ;;		_isr
 25183 ;; This function uses a non-reentrant model
 25184 ;;
 25185                           
 25186                           
 25187                           ;psect for function _modulation
 25188  2884                     _modulation:	
 25189                           
 25190                           ;user.c: 243: return (127500 + (y * x)) / 1000;
 25191                           
 25192                           ;incstack = 0
 25193                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 25194  2884  3000               	movlw	0
 25195  2885  0020               	movlb	0	; select bank0
 25196  2886  00A3               	movwf	i1___aldiv@divisor+3
 25197  2887  3000               	movlw	0
 25198  2888  00A2               	movwf	i1___aldiv@divisor+2
 25199  2889  3003               	movlw	3
 25200  288A  00A1               	movwf	i1___aldiv@divisor+1
 25201  288B  30E8               	movlw	232
 25202  288C  00A0               	movwf	i1___aldiv@divisor
 25203  288D  300C               	movlw	12
 25204  288E  00B6               	movwf	??_modulation
 25205  288F  30F2               	movlw	242
 25206  2890  00B7               	movwf	??_modulation+1
 25207  2891  3001               	movlw	1
 25208  2892  00B8               	movwf	??_modulation+2
 25209  2893  3000               	movlw	0
 25210  2894  00B9               	movwf	??_modulation+3
 25211  2895  0835               	movf	modulation@y+3,w
 25212  2896  00F3               	movwf	i1___lmul@multiplier+3
 25213  2897  0834               	movf	modulation@y+2,w
 25214  2898  00F2               	movwf	i1___lmul@multiplier+2
 25215  2899  0833               	movf	modulation@y+1,w
 25216  289A  00F1               	movwf	i1___lmul@multiplier+1
 25217  289B  0832               	movf	modulation@y,w
 25218  289C  00F0               	movwf	i1___lmul@multiplier
 25219  289D  0831               	movf	modulation@x+3,w
 25220  289E  00F7               	movwf	i1___lmul@multiplicand+3
 25221  289F  0830               	movf	modulation@x+2,w
 25222  28A0  00F6               	movwf	i1___lmul@multiplicand+2
 25223  28A1  082F               	movf	modulation@x+1,w
 25224  28A2  00F5               	movwf	i1___lmul@multiplicand+1
 25225  28A3  082E               	movf	modulation@x,w
 25226  28A4  00F4               	movwf	i1___lmul@multiplicand
 25227  28A5  31B4  245C  31A8   	fcall	i1___lmul
 25228  28A8  0870               	movf	?i1___lmul,w
 25229  28A9  0020               	movlb	0	; select bank0
 25230  28AA  07B6               	addwf	??_modulation,f
 25231  28AB  0871               	movf	?i1___lmul+1,w
 25232  28AC  3DB7               	addwfc	??_modulation+1,f
 25233  28AD  0872               	movf	?i1___lmul+2,w
 25234  28AE  3DB8               	addwfc	??_modulation+2,f
 25235  28AF  0873               	movf	?i1___lmul+3,w
 25236  28B0  3DB9               	addwfc	??_modulation+3,f
 25237  28B1  0839               	movf	??_modulation+3,w
 25238  28B2  00A7               	movwf	i1___aldiv@dividend+3
 25239  28B3  0838               	movf	??_modulation+2,w
 25240  28B4  00A6               	movwf	i1___aldiv@dividend+2
 25241  28B5  0837               	movf	??_modulation+1,w
 25242  28B6  00A5               	movwf	i1___aldiv@dividend+1
 25243  28B7  0836               	movf	??_modulation,w
 25244  28B8  00A4               	movwf	i1___aldiv@dividend
 25245  28B9  31AF  277E         	fcall	i1___aldiv
 25246  28BB  0020               	movlb	0	; select bank0
 25247  28BC  0823               	movf	?i1___aldiv+3,w
 25248  28BD  00B1               	movwf	?_modulation+3
 25249  28BE  0822               	movf	?i1___aldiv+2,w
 25250  28BF  00B0               	movwf	?_modulation+2
 25251  28C0  0821               	movf	?i1___aldiv+1,w
 25252  28C1  00AF               	movwf	?_modulation+1
 25253  28C2  0820               	movf	?i1___aldiv,w
 25254  28C3  00AE               	movwf	?_modulation
 25255  28C4  0008               	return
 25256  28C5                     __end_of_modulation:	
 25257                           
 25258                           	psect	text118
 25259  345C                     __ptext118:	
 25260 ;; *************** function i1___lmul *****************
 25261 ;; Defined at:
 25262 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 25263 ;; Parameters:    Size  Location     Type
 25264 ;;  multiplier      4    0[COMMON] unsigned long 
 25265 ;;  multiplicand    4    4[COMMON] unsigned long 
 25266 ;; Auto vars:     Size  Location     Type
 25267 ;;  __lmul          4    8[COMMON] unsigned long 
 25268 ;; Return value:  Size  Location     Type
 25269 ;;                  4    0[COMMON] unsigned long 
 25270 ;; Registers used:
 25271 ;;		wreg, status,2, status,0
 25272 ;; Tracked objects:
 25273 ;;		On entry : 0/0
 25274 ;;		On exit  : 0/0
 25275 ;;		Unchanged: 0/0
 25276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25277 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25278 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25280 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25281 ;;Total ram usage:       12 bytes
 25282 ;; Hardware stack levels used:    1
 25283 ;; This function calls:
 25284 ;;		Nothing
 25285 ;; This function is called by:
 25286 ;;		_modulation
 25287 ;; This function uses a non-reentrant model
 25288 ;;
 25289                           
 25290                           
 25291                           ;psect for function i1___lmul
 25292  345C                     i1___lmul:	
 25293                           
 25294                           ;incstack = 0
 25295                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 25296  345C  3000               	movlw	0
 25297  345D  00FB               	movwf	i1___lmul@product+3
 25298  345E  3000               	movlw	0
 25299  345F  00FA               	movwf	i1___lmul@product+2
 25300  3460  3000               	movlw	0
 25301  3461  00F9               	movwf	i1___lmul@product+1
 25302  3462  3000               	movlw	0
 25303  3463  00F8               	movwf	i1___lmul@product
 25304  3464                     i1l7671:	
 25305  3464  1C70               	btfss	i1___lmul@multiplier,0
 25306  3465  2C6E               	goto	i1l7675
 25307  3466  0874               	movf	i1___lmul@multiplicand,w
 25308  3467  07F8               	addwf	i1___lmul@product,f
 25309  3468  0875               	movf	i1___lmul@multiplicand+1,w
 25310  3469  3DF9               	addwfc	i1___lmul@product+1,f
 25311  346A  0876               	movf	i1___lmul@multiplicand+2,w
 25312  346B  3DFA               	addwfc	i1___lmul@product+2,f
 25313  346C  0877               	movf	i1___lmul@multiplicand+3,w
 25314  346D  3DFB               	addwfc	i1___lmul@product+3,f
 25315  346E                     i1l7675:	
 25316  346E  3001               	movlw	1
 25317  346F                     u712_25:	
 25318  346F  35F4               	lslf	i1___lmul@multiplicand,f
 25319  3470  0DF5               	rlf	i1___lmul@multiplicand+1,f
 25320  3471  0DF6               	rlf	i1___lmul@multiplicand+2,f
 25321  3472  0DF7               	rlf	i1___lmul@multiplicand+3,f
 25322  3473  0B89               	decfsz	9,f
 25323  3474  2C6F               	goto	u712_25
 25324  3475  3001               	movlw	1
 25325  3476                     u713_25:	
 25326  3476  36F3               	lsrf	i1___lmul@multiplier+3,f
 25327  3477  0CF2               	rrf	i1___lmul@multiplier+2,f
 25328  3478  0CF1               	rrf	i1___lmul@multiplier+1,f
 25329  3479  0CF0               	rrf	i1___lmul@multiplier,f
 25330  347A  0B89               	decfsz	9,f
 25331  347B  2C76               	goto	u713_25
 25332  347C  0873               	movf	i1___lmul@multiplier+3,w
 25333  347D  0472               	iorwf	i1___lmul@multiplier+2,w
 25334  347E  0471               	iorwf	i1___lmul@multiplier+1,w
 25335  347F  0470               	iorwf	i1___lmul@multiplier,w
 25336  3480  1D03               	skipz
 25337  3481  2C64               	goto	i1l7671
 25338  3482  087B               	movf	i1___lmul@product+3,w
 25339  3483  00F3               	movwf	?i1___lmul+3
 25340  3484  087A               	movf	i1___lmul@product+2,w
 25341  3485  00F2               	movwf	?i1___lmul+2
 25342  3486  0879               	movf	i1___lmul@product+1,w
 25343  3487  00F1               	movwf	?i1___lmul+1
 25344  3488  0878               	movf	i1___lmul@product,w
 25345  3489  00F0               	movwf	?i1___lmul
 25346  348A  0008               	return
 25347  348B                     __end_ofi1___lmul:	
 25348                           
 25349                           	psect	text119
 25350  2F7E                     __ptext119:	
 25351 ;; *************** function i1___aldiv *****************
 25352 ;; Defined at:
 25353 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 25354 ;; Parameters:    Size  Location     Type
 25355 ;;  divisor         4    0[BANK0 ] long 
 25356 ;;  dividend        4    4[BANK0 ] long 
 25357 ;; Auto vars:     Size  Location     Type
 25358 ;;  __aldiv         4   10[BANK0 ] long 
 25359 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 25360 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 25361 ;; Return value:  Size  Location     Type
 25362 ;;                  4    0[BANK0 ] long 
 25363 ;; Registers used:
 25364 ;;		wreg, status,2, status,0
 25365 ;; Tracked objects:
 25366 ;;		On entry : 0/0
 25367 ;;		On exit  : 0/0
 25368 ;;		Unchanged: 0/0
 25369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25370 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25371 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25373 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25374 ;;Total ram usage:       15 bytes
 25375 ;; Hardware stack levels used:    1
 25376 ;; This function calls:
 25377 ;;		Nothing
 25378 ;; This function is called by:
 25379 ;;		_modulation
 25380 ;; This function uses a non-reentrant model
 25381 ;;
 25382                           
 25383                           
 25384                           ;psect for function i1___aldiv
 25385  2F7E                     i1___aldiv:	
 25386                           
 25387                           ;incstack = 0
 25388                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 25389  2F7E  0020               	movlb	0	; select bank0
 25390  2F7F  01A9               	clrf	i1___aldiv@sign
 25391  2F80  1FA3               	btfss	i1___aldiv@divisor+3,7
 25392  2F81  2F8F               	goto	i1l2504
 25393  2F82  09A0               	comf	i1___aldiv@divisor,f
 25394  2F83  09A1               	comf	i1___aldiv@divisor+1,f
 25395  2F84  09A2               	comf	i1___aldiv@divisor+2,f
 25396  2F85  09A3               	comf	i1___aldiv@divisor+3,f
 25397  2F86  0AA0               	incf	i1___aldiv@divisor,f
 25398  2F87  1903               	skipnz
 25399  2F88  0AA1               	incf	i1___aldiv@divisor+1,f
 25400  2F89  1903               	skipnz
 25401  2F8A  0AA2               	incf	i1___aldiv@divisor+2,f
 25402  2F8B  1903               	skipnz
 25403  2F8C  0AA3               	incf	i1___aldiv@divisor+3,f
 25404  2F8D  01A9               	clrf	i1___aldiv@sign
 25405  2F8E  0AA9               	incf	i1___aldiv@sign,f
 25406  2F8F                     i1l2504:	
 25407  2F8F  1FA7               	btfss	i1___aldiv@dividend+3,7
 25408  2F90  2FA0               	goto	i1l7693
 25409  2F91  09A4               	comf	i1___aldiv@dividend,f
 25410  2F92  09A5               	comf	i1___aldiv@dividend+1,f
 25411  2F93  09A6               	comf	i1___aldiv@dividend+2,f
 25412  2F94  09A7               	comf	i1___aldiv@dividend+3,f
 25413  2F95  0AA4               	incf	i1___aldiv@dividend,f
 25414  2F96  1903               	skipnz
 25415  2F97  0AA5               	incf	i1___aldiv@dividend+1,f
 25416  2F98  1903               	skipnz
 25417  2F99  0AA6               	incf	i1___aldiv@dividend+2,f
 25418  2F9A  1903               	skipnz
 25419  2F9B  0AA7               	incf	i1___aldiv@dividend+3,f
 25420  2F9C  3001               	movlw	1
 25421  2F9D  00FC               	movwf	??i1___aldiv
 25422  2F9E  087C               	movf	??i1___aldiv,w
 25423  2F9F  06A9               	xorwf	i1___aldiv@sign,f
 25424  2FA0                     i1l7693:	
 25425  2FA0  3000               	movlw	0
 25426  2FA1  00AD               	movwf	i1___aldiv@quotient+3
 25427  2FA2  3000               	movlw	0
 25428  2FA3  00AC               	movwf	i1___aldiv@quotient+2
 25429  2FA4  3000               	movlw	0
 25430  2FA5  00AB               	movwf	i1___aldiv@quotient+1
 25431  2FA6  3000               	movlw	0
 25432  2FA7  00AA               	movwf	i1___aldiv@quotient
 25433  2FA8  0823               	movf	i1___aldiv@divisor+3,w
 25434  2FA9  0422               	iorwf	i1___aldiv@divisor+2,w
 25435  2FAA  0421               	iorwf	i1___aldiv@divisor+1,w
 25436  2FAB  0420               	iorwf	i1___aldiv@divisor,w
 25437  2FAC  1903               	skipnz
 25438  2FAD  2FE9               	goto	i1l7715
 25439  2FAE  01A8               	clrf	i1___aldiv@counter
 25440  2FAF  0AA8               	incf	i1___aldiv@counter,f
 25441  2FB0                     i1l7701:	
 25442  2FB0  1BA3               	btfsc	i1___aldiv@divisor+3,7
 25443  2FB1  2FBE               	goto	i1l7703
 25444  2FB2  3001               	movlw	1
 25445  2FB3                     u718_25:	
 25446  2FB3  35A0               	lslf	i1___aldiv@divisor,f
 25447  2FB4  0DA1               	rlf	i1___aldiv@divisor+1,f
 25448  2FB5  0DA2               	rlf	i1___aldiv@divisor+2,f
 25449  2FB6  0DA3               	rlf	i1___aldiv@divisor+3,f
 25450  2FB7  0B89               	decfsz	9,f
 25451  2FB8  2FB3               	goto	u718_25
 25452  2FB9  3001               	movlw	1
 25453  2FBA  00FC               	movwf	??i1___aldiv
 25454  2FBB  087C               	movf	??i1___aldiv,w
 25455  2FBC  07A8               	addwf	i1___aldiv@counter,f
 25456  2FBD  2FB0               	goto	i1l7701
 25457  2FBE                     i1l7703:	
 25458  2FBE  3001               	movlw	1
 25459  2FBF                     u720_25:	
 25460  2FBF  35AA               	lslf	i1___aldiv@quotient,f
 25461  2FC0  0DAB               	rlf	i1___aldiv@quotient+1,f
 25462  2FC1  0DAC               	rlf	i1___aldiv@quotient+2,f
 25463  2FC2  0DAD               	rlf	i1___aldiv@quotient+3,f
 25464  2FC3  0B89               	decfsz	9,f
 25465  2FC4  2FBF               	goto	u720_25
 25466  2FC5  0823               	movf	i1___aldiv@divisor+3,w
 25467  2FC6  0227               	subwf	i1___aldiv@dividend+3,w
 25468  2FC7  1D03               	skipz
 25469  2FC8  2FD3               	goto	u721_25
 25470  2FC9  0822               	movf	i1___aldiv@divisor+2,w
 25471  2FCA  0226               	subwf	i1___aldiv@dividend+2,w
 25472  2FCB  1D03               	skipz
 25473  2FCC  2FD3               	goto	u721_25
 25474  2FCD  0821               	movf	i1___aldiv@divisor+1,w
 25475  2FCE  0225               	subwf	i1___aldiv@dividend+1,w
 25476  2FCF  1D03               	skipz
 25477  2FD0  2FD3               	goto	u721_25
 25478  2FD1  0820               	movf	i1___aldiv@divisor,w
 25479  2FD2  0224               	subwf	i1___aldiv@dividend,w
 25480  2FD3                     u721_25:	
 25481  2FD3  1C03               	skipc
 25482  2FD4  2FDE               	goto	i1l7711
 25483  2FD5  0820               	movf	i1___aldiv@divisor,w
 25484  2FD6  02A4               	subwf	i1___aldiv@dividend,f
 25485  2FD7  0821               	movf	i1___aldiv@divisor+1,w
 25486  2FD8  3BA5               	subwfb	i1___aldiv@dividend+1,f
 25487  2FD9  0822               	movf	i1___aldiv@divisor+2,w
 25488  2FDA  3BA6               	subwfb	i1___aldiv@dividend+2,f
 25489  2FDB  0823               	movf	i1___aldiv@divisor+3,w
 25490  2FDC  3BA7               	subwfb	i1___aldiv@dividend+3,f
 25491  2FDD  142A               	bsf	i1___aldiv@quotient,0
 25492  2FDE                     i1l7711:	
 25493  2FDE  3001               	movlw	1
 25494  2FDF                     u722_25:	
 25495  2FDF  36A3               	lsrf	i1___aldiv@divisor+3,f
 25496  2FE0  0CA2               	rrf	i1___aldiv@divisor+2,f
 25497  2FE1  0CA1               	rrf	i1___aldiv@divisor+1,f
 25498  2FE2  0CA0               	rrf	i1___aldiv@divisor,f
 25499  2FE3  0B89               	decfsz	9,f
 25500  2FE4  2FDF               	goto	u722_25
 25501  2FE5  3001               	movlw	1
 25502  2FE6  02A8               	subwf	i1___aldiv@counter,f
 25503  2FE7  1D03               	btfss	3,2
 25504  2FE8  2FBE               	goto	i1l7703
 25505  2FE9                     i1l7715:	
 25506  2FE9  0829               	movf	i1___aldiv@sign,w
 25507  2FEA  1903               	btfsc	3,2
 25508  2FEB  2FF7               	goto	i1l7719
 25509  2FEC  09AA               	comf	i1___aldiv@quotient,f
 25510  2FED  09AB               	comf	i1___aldiv@quotient+1,f
 25511  2FEE  09AC               	comf	i1___aldiv@quotient+2,f
 25512  2FEF  09AD               	comf	i1___aldiv@quotient+3,f
 25513  2FF0  0AAA               	incf	i1___aldiv@quotient,f
 25514  2FF1  1903               	skipnz
 25515  2FF2  0AAB               	incf	i1___aldiv@quotient+1,f
 25516  2FF3  1903               	skipnz
 25517  2FF4  0AAC               	incf	i1___aldiv@quotient+2,f
 25518  2FF5  1903               	skipnz
 25519  2FF6  0AAD               	incf	i1___aldiv@quotient+3,f
 25520  2FF7                     i1l7719:	
 25521  2FF7  082D               	movf	i1___aldiv@quotient+3,w
 25522  2FF8  00A3               	movwf	?i1___aldiv+3
 25523  2FF9  082C               	movf	i1___aldiv@quotient+2,w
 25524  2FFA  00A2               	movwf	?i1___aldiv+2
 25525  2FFB  082B               	movf	i1___aldiv@quotient+1,w
 25526  2FFC  00A1               	movwf	?i1___aldiv+1
 25527  2FFD  082A               	movf	i1___aldiv@quotient,w
 25528  2FFE  00A0               	movwf	?i1___aldiv
 25529  2FFF  0008               	return
 25530  3000                     __end_ofi1___aldiv:	
 25531                           
 25532                           	psect	text120
 25533  2906                     __ptext120:	
 25534 ;; *************** function _USARTHandleRxInt *****************
 25535 ;; Defined at:
 25536 ;;		line 91 in file "usart_pic16.c"
 25537 ;; Parameters:    Size  Location     Type
 25538 ;;		None
 25539 ;; Auto vars:     Size  Location     Type
 25540 ;;  data            1    4[COMMON] unsigned char 
 25541 ;; Return value:  Size  Location     Type
 25542 ;;                  1    wreg      void 
 25543 ;; Registers used:
 25544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25545 ;; Tracked objects:
 25546 ;;		On entry : 0/0
 25547 ;;		On exit  : 0/0
 25548 ;;		Unchanged: 0/0
 25549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 25550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25552 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25553 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 25554 ;;Total ram usage:        5 bytes
 25555 ;; Hardware stack levels used:    1
 25556 ;; This function calls:
 25557 ;;		Nothing
 25558 ;; This function is called by:
 25559 ;;		_isr
 25560 ;; This function uses a non-reentrant model
 25561 ;;
 25562                           
 25563                           
 25564                           ;psect for function _USARTHandleRxInt
 25565  2906                     _USARTHandleRxInt:	
 25566                           
 25567                           ;usart_pic16.c: 100: char data=RCREG;
 25568                           
 25569                           ;incstack = 0
 25570                           ; Regs used in _USARTHandleRxInt: [wreg+fsr1l+fsr1h+status,2+status,0]
 25571  2906  0023               	movlb	3	; select bank3
 25572  2907  0819               	movf	25,w	;volatile
 25573  2908  00F0               	movwf	??_USARTHandleRxInt
 25574  2909  0870               	movf	??_USARTHandleRxInt,w
 25575  290A  00F4               	movwf	USARTHandleRxInt@data
 25576                           
 25577                           ;usart_pic16.c: 103: if(((UQEnd == 64 - 1) && UQFront == 0) || ((UQEnd + 1) == UQFront))
      +                           {
 25578  290B  303F               	movlw	63
 25579  290C  0020               	movlb	0	; select bank0
 25580  290D  065F               	xorwf	_UQEnd,w	;volatile
 25581  290E  1903               	btfsc	3,2
 25582  290F  0860               	movf	_UQFront,w	;volatile
 25583  2910  1903               	btfsc	3,2
 25584  2911  2927               	goto	i1l7731
 25585  2912  0860               	movf	_UQFront,w	;volatile
 25586  2913  00F0               	movwf	??_USARTHandleRxInt
 25587  2914  01F1               	clrf	??_USARTHandleRxInt+1
 25588  2915  1BF0               	btfsc	??_USARTHandleRxInt,7
 25589  2916  03F1               	decf	??_USARTHandleRxInt+1,f
 25590  2917  3001               	movlw	1
 25591  2918  075F               	addwf	_UQEnd,w	;volatile
 25592  2919  00F2               	movwf	??_USARTHandleRxInt+2
 25593  291A  01F3               	clrf	??_USARTHandleRxInt+3
 25594  291B  1803               	skipnc
 25595  291C  0AF3               	incf	??_USARTHandleRxInt+3,f
 25596  291D  1BDF               	btfsc	_UQEnd,7	;volatile
 25597  291E  03F3               	decf	??_USARTHandleRxInt+3,f
 25598  291F  0871               	movf	??_USARTHandleRxInt+1,w
 25599  2920  0673               	xorwf	??_USARTHandleRxInt+3,w
 25600  2921  1D03               	skipz
 25601  2922  2925               	goto	u728_25
 25602  2923  0870               	movf	??_USARTHandleRxInt,w
 25603  2924  0672               	xorwf	??_USARTHandleRxInt+2,w
 25604  2925                     u728_25:	
 25605  2925  1D03               	skipz
 25606  2926  2930               	goto	i1l7735
 25607  2927                     i1l7731:	
 25608                           
 25609                           ;usart_pic16.c: 105: UQFront++;
 25610  2927  3001               	movlw	1
 25611  2928  00F0               	movwf	??_USARTHandleRxInt
 25612  2929  0870               	movf	??_USARTHandleRxInt,w
 25613  292A  0020               	movlb	0	; select bank0
 25614  292B  07E0               	addwf	_UQFront,f	;volatile
 25615                           
 25616                           ;usart_pic16.c: 106: if(UQFront == 64) UQFront=0;
 25617  292C  3040               	movlw	64
 25618  292D  0660               	xorwf	_UQFront,w	;volatile
 25619  292E  1903               	btfsc	3,2
 25620  292F  01E0               	clrf	_UQFront	;volatile
 25621  2930                     i1l7735:	
 25622                           
 25623                           ;usart_pic16.c: 107: }
 25624                           ;usart_pic16.c: 109: if(UQEnd==64-1) {
 25625  2930  303F               	movlw	63
 25626  2931  0020               	movlb	0	; select bank0
 25627  2932  065F               	xorwf	_UQEnd,w	;volatile
 25628  2933  1D03               	btfss	3,2
 25629  2934  2937               	goto	i1l7739
 25630                           
 25631                           ;usart_pic16.c: 110: UQEnd=0;
 25632  2935  01DF               	clrf	_UQEnd	;volatile
 25633                           
 25634                           ;usart_pic16.c: 111: } else {
 25635  2936  293B               	goto	i1l7741
 25636  2937                     i1l7739:	
 25637                           
 25638                           ;usart_pic16.c: 112: UQEnd++;
 25639  2937  3001               	movlw	1
 25640  2938  00F0               	movwf	??_USARTHandleRxInt
 25641  2939  0870               	movf	??_USARTHandleRxInt,w
 25642  293A  07DF               	addwf	_UQEnd,f	;volatile
 25643  293B                     i1l7741:	
 25644                           
 25645                           ;usart_pic16.c: 113: }
 25646                           ;usart_pic16.c: 115: URBuff[UQEnd]=data;
 25647  293B  0874               	movf	USARTHandleRxInt@data,w
 25648  293C  00F0               	movwf	??_USARTHandleRxInt
 25649  293D  085F               	movf	_UQEnd,w
 25650  293E  3E20               	addlw	(low (_URBuff| (0+1024)))& (0+255)
 25651  293F  0086               	movwf	6
 25652  2940  3004               	movlw	4	; select bank8/9
 25653  2941  0087               	movwf	7
 25654  2942  0870               	movf	??_USARTHandleRxInt,w
 25655  2943  0081               	movwf	1
 25656                           
 25657                           ;usart_pic16.c: 117: if(UQFront==-1) UQFront=0;
 25658  2944  0A60               	incf	_UQFront,w	;volatile
 25659  2945  1D03               	btfss	3,2
 25660  2946  0008               	return
 25661  2947  01E0               	clrf	_UQFront	;volatile
 25662  2948  0008               	return
 25663  2949                     __end_of_USARTHandleRxInt:	
 25664  007E                     btemp	set	126	;btemp
 25665  007E                     int$flags	set	126
 25666  007E                     wtemp	set	126
 25667  007E                     wtemp0	set	126
 25668  0080                     wtemp1	set	128
 25669  0082                     wtemp2	set	130
 25670  0084                     wtemp3	set	132
 25671  0086                     wtemp4	set	134
 25672  0088                     wtemp5	set	136
 25673  007F                     wtemp6	set	127
 25674  007E                     ttemp	set	126
 25675  007E                     ttemp0	set	126
 25676  0081                     ttemp1	set	129
 25677  0084                     ttemp2	set	132
 25678  0087                     ttemp3	set	135
 25679  007F                     ttemp4	set	127
 25680  007E                     ltemp	set	126
 25681  007E                     ltemp0	set	126
 25682  0082                     ltemp1	set	130
 25683  0086                     ltemp2	set	134
 25684  0080                     ltemp3	set	128
 25685  238A                     
 25686                           	psect	maintext_split_1
 25687  0897                     l8647:	
 25688                           
 25689                           ;main.c: 155: setSwitchBypassState(1);
 25690  0897  3001               	movlw	1
 25691  0898  0021               	movlb	1	; select bank1
 25692  0899  00B5               	movwf	setSwitchBypassState@f_state^(0+128)
 25693  089A  3000               	movlw	0
 25694  089B  00B6               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
 25695  089C  31B2  2238  3188   	fcall	_setSwitchBypassState
 25696                           
 25697                           ;main.c: 156: }
 25698                           ;main.c: 157: break;
 25699  089F  2C92               	goto	l8741
 25700  08A0                     l8649:	
 25701                           ;main.c: 158: case 93:
 25702                           
 25703                           
 25704                           ;main.c: 159: if (tap_timer >= 1563) {
 25705  08A0  0020               	movlb	0	; select bank0
 25706  08A1  1BDC               	btfsc	_tap_timer+3,7	;volatile
 25707  08A2  28E5               	goto	l8663
 25708  08A3  085C               	movf	_tap_timer+3,w	;volatile
 25709  08A4  1D03               	btfss	3,2
 25710  08A5  28AF               	goto	l8651
 25711  08A6  085B               	movf	_tap_timer+2,w	;volatile
 25712  08A7  1D03               	btfss	3,2
 25713  08A8  28AF               	goto	l8651
 25714  08A9  301B               	movlw	27
 25715  08AA  0259               	subwf	_tap_timer,w	;volatile
 25716  08AB  3006               	movlw	6
 25717  08AC  3B5A               	subwfb	_tap_timer+1,w	;volatile
 25718  08AD  1C03               	btfss	3,0
 25719  08AE  28E5               	goto	l8663
 25720  08AF                     l8651:	
 25721                           
 25722                           ;main.c: 160: tap_timer = 0;
 25723  08AF  3000               	movlw	0
 25724  08B0  00DC               	movwf	_tap_timer+3	;volatile
 25725  08B1  3000               	movlw	0
 25726  08B2  00DB               	movwf	_tap_timer+2	;volatile
 25727  08B3  3000               	movlw	0
 25728  08B4  00DA               	movwf	_tap_timer+1	;volatile
 25729  08B5  3000               	movlw	0
 25730  08B6  00D9               	movwf	_tap_timer	;volatile
 25731                           
 25732                           ;main.c: 161: tap_iteration = 1;
 25733  08B7  3001               	movlw	1
 25734  08B8  0024               	movlb	4	; select bank4
 25735  08B9  00E5               	movwf	_tap_iteration^(0+512)
 25736  08BA  3000               	movlw	0
 25737  08BB  00E6               	movwf	(_tap_iteration^(0+512)+1)
 25738                           
 25739                           ;main.c: 162: tap_total = 0;
 25740  08BC  3000               	movlw	0
 25741  08BD  0025               	movlb	5	; select bank5
 25742  08BE  00D9               	movwf	(_tap_total+3)^(0+640)
 25743  08BF  3000               	movlw	0
 25744  08C0  00D8               	movwf	(_tap_total+2)^(0+640)
 25745  08C1  3000               	movlw	0
 25746  08C2  00D7               	movwf	(_tap_total+1)^(0+640)
 25747  08C3  3000               	movlw	0
 25748  08C4  00D6               	movwf	_tap_total^(0+640)
 25749                           
 25750                           ;main.c: 163: mod_time_changed = 0;
 25751  08C5  0024               	movlb	4	; select bank4
 25752  08C6  01EC               	clrf	_mod_time_changed^(0+512)
 25753                           
 25754                           ;main.c: 165: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
 25755  08C7  0023               	movlb	3	; select bank3
 25756  08C8  01EF               	clrf	_iCnt^(0+384)
 25757  08C9  0AEF               	incf	_iCnt^(0+384),f
 25758  08CA                     l8661:	
 25759  08CA  086F               	movf	_iCnt^(0+384),w
 25760  08CB  026C               	subwf	_num_taps^(0+384),w
 25761  08CC  1C03               	btfss	3,0
 25762  08CD  2C92               	goto	l8741
 25763                           
 25764                           ;main.c: 166: tap_history[iCnt] = 0;
 25765  08CE  086F               	movf	_iCnt^(0+384),w
 25766  08CF  00D1               	movwf	??_main^(0+384)
 25767  08D0  3001               	movlw	1
 25768  08D1                     u8905:	
 25769  08D1  35D1               	lslf	??_main^(0+384),f
 25770  08D2  3EFF               	addlw	-1
 25771  08D3  1D03               	skipz
 25772  08D4  28D1               	goto	u8905
 25773  08D5  3551               	lslf	??_main^(0+384),w
 25774  08D6  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25775  08D7  0086               	movwf	6
 25776  08D8  3002               	movlw	2	; select bank5/6
 25777  08D9  0087               	movwf	7
 25778  08DA  3000               	movlw	0
 25779  08DB  3FC0               	movwi [0]fsr1
 25780  08DC  3000               	movlw	0
 25781  08DD  3FC1               	movwi [1]fsr1
 25782  08DE  3FC2               	movwi [2]fsr1
 25783  08DF  3FC3               	movwi [3]fsr1
 25784  08E0  3001               	movlw	1
 25785  08E1  00D1               	movwf	??_main^(0+384)
 25786  08E2  0851               	movf	??_main^(0+384),w
 25787  08E3  07EF               	addwf	_iCnt^(0+384),f
 25788  08E4  28CA               	goto	l8661
 25789  08E5                     l8663:	
 25790                           ;main.c: 167: }
 25791                           ;main.c: 168: } else {
 25792                           
 25793                           
 25794                           ;main.c: 169: if (tap_timer >= 1172) {
 25795  08E5  0020               	movlb	0	; select bank0
 25796  08E6  1BDC               	btfsc	_tap_timer+3,7	;volatile
 25797  08E7  28FC               	goto	l452
 25798  08E8  085C               	movf	_tap_timer+3,w	;volatile
 25799  08E9  1D03               	btfss	3,2
 25800  08EA  28F4               	goto	l8665
 25801  08EB  085B               	movf	_tap_timer+2,w	;volatile
 25802  08EC  1D03               	btfss	3,2
 25803  08ED  28F4               	goto	l8665
 25804  08EE  3094               	movlw	148
 25805  08EF  0259               	subwf	_tap_timer,w	;volatile
 25806  08F0  3004               	movlw	4
 25807  08F1  3B5A               	subwfb	_tap_timer+1,w	;volatile
 25808  08F2  1C03               	btfss	3,0
 25809  08F3  28FC               	goto	l452
 25810  08F4                     l8665:	
 25811                           
 25812                           ;main.c: 170: tap_timer = 1172;
 25813  08F4  3000               	movlw	0
 25814  08F5  00DC               	movwf	_tap_timer+3	;volatile
 25815  08F6  3000               	movlw	0
 25816  08F7  00DB               	movwf	_tap_timer+2	;volatile
 25817  08F8  3004               	movlw	4
 25818  08F9  00DA               	movwf	_tap_timer+1	;volatile
 25819  08FA  3094               	movlw	148
 25820  08FB  00D9               	movwf	_tap_timer	;volatile
 25821  08FC                     l452:	
 25822                           
 25823                           ;main.c: 171: }
 25824                           ;main.c: 173: int tapCntDivisor = num_taps;
 25825  08FC  0023               	movlb	3	; select bank3
 25826  08FD  086C               	movf	_num_taps^(0+384),w
 25827  08FE  00D1               	movwf	??_main^(0+384)
 25828  08FF  01D2               	clrf	(??_main^(0+384)+1)
 25829  0900  0851               	movf	??_main^(0+384),w
 25830  0901  00DD               	movwf	main@tapCntDivisor^(0+384)
 25831  0902  0852               	movf	(??_main+1)^(0+384),w
 25832  0903  00DE               	movwf	(main@tapCntDivisor+1)^(0+384)
 25833                           
 25834                           ;main.c: 174: if (tap_iteration <= num_taps) {
 25835  0904  0024               	movlb	4	; select bank4
 25836  0905  0866               	movf	(_tap_iteration+1)^(0+512),w
 25837  0906  3A80               	xorlw	128
 25838  0907  3C80               	sublw	128
 25839  0908  1D03               	skipz
 25840  0909  290D               	goto	u8935
 25841  090A  0865               	movf	_tap_iteration^(0+512),w
 25842  090B  0023               	movlb	3	; select bank3
 25843  090C  026C               	subwf	_num_taps^(0+384),w
 25844  090D                     u8935:	
 25845  090D  1C03               	skipc
 25846  090E  293F               	goto	l8673
 25847                           
 25848                           ;main.c: 175: tap_total += tap_timer;
 25849  090F  0020               	movlb	0	; select bank0
 25850  0910  0859               	movf	_tap_timer,w	;volatile
 25851  0911  0025               	movlb	5	; select bank5
 25852  0912  07D6               	addwf	_tap_total^(0+640),f
 25853  0913  0020               	movlb	0	; select bank0
 25854  0914  085A               	movf	_tap_timer+1,w	;volatile
 25855  0915  0025               	movlb	5	; select bank5
 25856  0916  3DD7               	addwfc	(_tap_total+1)^(0+640),f
 25857  0917  0020               	movlb	0	; select bank0
 25858  0918  085B               	movf	_tap_timer+2,w	;volatile
 25859  0919  0025               	movlb	5	; select bank5
 25860  091A  3DD8               	addwfc	(_tap_total+2)^(0+640),f
 25861  091B  0020               	movlb	0	; select bank0
 25862  091C  085C               	movf	_tap_timer+3,w	;volatile
 25863  091D  0025               	movlb	5	; select bank5
 25864  091E  3DD9               	addwfc	(_tap_total+3)^(0+640),f
 25865                           
 25866                           ;main.c: 176: tap_history[tap_iteration] = tap_timer;
 25867  091F  0024               	movlb	4	; select bank4
 25868  0920  0865               	movf	_tap_iteration^(0+512),w
 25869  0921  0023               	movlb	3	; select bank3
 25870  0922  00D1               	movwf	??_main^(0+384)
 25871  0923  3001               	movlw	1
 25872  0924                     u8945:	
 25873  0924  35D1               	lslf	??_main^(0+384),f
 25874  0925  3EFF               	addlw	-1
 25875  0926  1D03               	skipz
 25876  0927  2924               	goto	u8945
 25877  0928  3551               	lslf	??_main^(0+384),w
 25878  0929  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25879  092A  0086               	movwf	6
 25880  092B  3002               	movlw	2	; select bank5/6
 25881  092C  0087               	movwf	7
 25882  092D  0020               	movlb	0	; select bank0
 25883  092E  0859               	movf	_tap_timer,w	;volatile
 25884  092F  3FC0               	movwi [0]fsr1
 25885  0930  085A               	movf	_tap_timer+1,w	;volatile
 25886  0931  3FC1               	movwi [1]fsr1
 25887  0932  085B               	movf	_tap_timer+2,w	;volatile
 25888  0933  3FC2               	movwi [2]fsr1
 25889  0934  085C               	movf	_tap_timer+3,w	;volatile
 25890  0935  3FC3               	movwi [3]fsr1
 25891                           
 25892                           ;main.c: 177: tapCntDivisor = tap_iteration;
 25893  0936  0024               	movlb	4	; select bank4
 25894  0937  0866               	movf	(_tap_iteration+1)^(0+512),w
 25895  0938  0023               	movlb	3	; select bank3
 25896  0939  00DE               	movwf	(main@tapCntDivisor+1)^(0+384)
 25897  093A  0024               	movlb	4	; select bank4
 25898  093B  0865               	movf	_tap_iteration^(0+512),w
 25899  093C  0023               	movlb	3	; select bank3
 25900  093D  00DD               	movwf	main@tapCntDivisor^(0+384)
 25901                           
 25902                           ;main.c: 178: } else {
 25903  093E  29B7               	goto	l8687
 25904  093F                     l8673:	
 25905                           
 25906                           ;main.c: 179: tap_total = 0;
 25907  093F  3000               	movlw	0
 25908  0940  0025               	movlb	5	; select bank5
 25909  0941  00D9               	movwf	(_tap_total+3)^(0+640)
 25910  0942  3000               	movlw	0
 25911  0943  00D8               	movwf	(_tap_total+2)^(0+640)
 25912  0944  3000               	movlw	0
 25913  0945  00D7               	movwf	(_tap_total+1)^(0+640)
 25914  0946  3000               	movlw	0
 25915  0947  00D6               	movwf	_tap_total^(0+640)
 25916                           
 25917                           ;main.c: 180: for (iCnt = 1; iCnt < num_taps; iCnt++) {
 25918  0948  0023               	movlb	3	; select bank3
 25919  0949  01EF               	clrf	_iCnt^(0+384)
 25920  094A  0AEF               	incf	_iCnt^(0+384),f
 25921  094B                     l8681:	
 25922  094B  086C               	movf	_num_taps^(0+384),w
 25923  094C  026F               	subwf	_iCnt^(0+384),w
 25924  094D  1803               	btfsc	3,0
 25925  094E  2993               	goto	l8683
 25926                           
 25927                           ;main.c: 181: tap_history[iCnt] = tap_history[iCnt + 1];
 25928  094F  086F               	movf	_iCnt^(0+384),w
 25929  0950  00D1               	movwf	??_main^(0+384)
 25930  0951  3001               	movlw	1
 25931  0952                     u8955:	
 25932  0952  35D1               	lslf	??_main^(0+384),f
 25933  0953  3EFF               	addlw	-1
 25934  0954  1D03               	skipz
 25935  0955  2952               	goto	u8955
 25936  0956  3551               	lslf	??_main^(0+384),w
 25937  0957  3E04               	addlw	4
 25938  0958  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25939  0959  0086               	movwf	6
 25940  095A  3002               	movlw	2	; select bank5/6
 25941  095B  0087               	movwf	7
 25942  095C  3F40               	moviw [0]fsr1
 25943  095D  00D2               	movwf	(??_main+1)^(0+384)
 25944  095E  3F41               	moviw [1]fsr1
 25945  095F  00D3               	movwf	((??_main+1)^(0+384)+1)
 25946  0960  3F42               	moviw [2]fsr1
 25947  0961  00D4               	movwf	((??_main+1)^(0+384)+2)
 25948  0962  3F43               	moviw [3]fsr1
 25949  0963  00D5               	movwf	((??_main+1)^(0+384)+3)
 25950  0964  086F               	movf	_iCnt^(0+384),w
 25951  0965  00D6               	movwf	(??_main+5)^(0+384)
 25952  0966  3001               	movlw	1
 25953  0967                     u8965:	
 25954  0967  35D6               	lslf	(??_main+5)^(0+384),f
 25955  0968  3EFF               	addlw	-1
 25956  0969  1D03               	skipz
 25957  096A  2967               	goto	u8965
 25958  096B  3556               	lslf	(??_main+5)^(0+384),w
 25959  096C  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25960  096D  0086               	movwf	6
 25961  096E  3002               	movlw	2	; select bank5/6
 25962  096F  0087               	movwf	7
 25963  0970  0852               	movf	(??_main+1)^(0+384),w
 25964  0971  3FC0               	movwi [0]fsr1
 25965  0972  0853               	movf	(??_main+2)^(0+384),w
 25966  0973  3FC1               	movwi [1]fsr1
 25967  0974  0854               	movf	(??_main+3)^(0+384),w
 25968  0975  3FC2               	movwi [2]fsr1
 25969  0976  0855               	movf	(??_main+4)^(0+384),w
 25970  0977  3FC3               	movwi [3]fsr1
 25971                           
 25972                           ;main.c: 182: tap_total += tap_history[iCnt];
 25973  0978  086F               	movf	_iCnt^(0+384),w
 25974  0979  00D1               	movwf	??_main^(0+384)
 25975  097A  3001               	movlw	1
 25976  097B                     u8975:	
 25977  097B  35D1               	lslf	??_main^(0+384),f
 25978  097C  3EFF               	addlw	-1
 25979  097D  1D03               	skipz
 25980  097E  297B               	goto	u8975
 25981  097F  3551               	lslf	??_main^(0+384),w
 25982  0980  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 25983  0981  0086               	movwf	6
 25984  0982  3002               	movlw	2	; select bank5/6
 25985  0983  0087               	movwf	7
 25986  0984  3F40               	moviw [0]fsr1
 25987  0985  0025               	movlb	5	; select bank5
 25988  0986  07D6               	addwf	_tap_total^(0+640),f
 25989  0987  3F41               	moviw [1]fsr1
 25990  0988  3DD7               	addwfc	(_tap_total+1)^(0+640),f
 25991  0989  3F42               	moviw [2]fsr1
 25992  098A  3DD8               	addwfc	(_tap_total+2)^(0+640),f
 25993  098B  3F43               	moviw [3]fsr1
 25994  098C  3DD9               	addwfc	(_tap_total+3)^(0+640),f
 25995  098D  3001               	movlw	1
 25996  098E  0023               	movlb	3	; select bank3
 25997  098F  00D1               	movwf	??_main^(0+384)
 25998  0990  0851               	movf	??_main^(0+384),w
 25999  0991  07EF               	addwf	_iCnt^(0+384),f
 26000  0992  294B               	goto	l8681
 26001  0993                     l8683:	
 26002                           
 26003                           ;main.c: 183: }
 26004                           ;main.c: 184: tap_history[num_taps] = tap_timer;
 26005  0993  086C               	movf	_num_taps^(0+384),w
 26006  0994  00D1               	movwf	??_main^(0+384)
 26007  0995  3001               	movlw	1
 26008  0996                     u8995:	
 26009  0996  35D1               	lslf	??_main^(0+384),f
 26010  0997  3EFF               	addlw	-1
 26011  0998  1D03               	skipz
 26012  0999  2996               	goto	u8995
 26013  099A  3551               	lslf	??_main^(0+384),w
 26014  099B  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
 26015  099C  0086               	movwf	6
 26016  099D  3002               	movlw	2	; select bank5/6
 26017  099E  0087               	movwf	7
 26018  099F  0020               	movlb	0	; select bank0
 26019  09A0  0859               	movf	_tap_timer,w	;volatile
 26020  09A1  3FC0               	movwi [0]fsr1
 26021  09A2  085A               	movf	_tap_timer+1,w	;volatile
 26022  09A3  3FC1               	movwi [1]fsr1
 26023  09A4  085B               	movf	_tap_timer+2,w	;volatile
 26024  09A5  3FC2               	movwi [2]fsr1
 26025  09A6  085C               	movf	_tap_timer+3,w	;volatile
 26026  09A7  3FC3               	movwi [3]fsr1
 26027                           
 26028                           ;main.c: 185: tap_total += tap_timer;
 26029  09A8  0859               	movf	_tap_timer,w	;volatile
 26030  09A9  0025               	movlb	5	; select bank5
 26031  09AA  07D6               	addwf	_tap_total^(0+640),f
 26032  09AB  0020               	movlb	0	; select bank0
 26033  09AC  085A               	movf	_tap_timer+1,w	;volatile
 26034  09AD  0025               	movlb	5	; select bank5
 26035  09AE  3DD7               	addwfc	(_tap_total+1)^(0+640),f
 26036  09AF  0020               	movlb	0	; select bank0
 26037  09B0  085B               	movf	_tap_timer+2,w	;volatile
 26038  09B1  0025               	movlb	5	; select bank5
 26039  09B2  3DD8               	addwfc	(_tap_total+2)^(0+640),f
 26040  09B3  0020               	movlb	0	; select bank0
 26041  09B4  085C               	movf	_tap_timer+3,w	;volatile
 26042  09B5  0025               	movlb	5	; select bank5
 26043  09B6  3DD9               	addwfc	(_tap_total+3)^(0+640),f
 26044  09B7                     l8687:	
 26045                           
 26046                           ;main.c: 186: }
 26047                           ;main.c: 188: baseline_mod_time = tap_total / tapCntDivisor;
 26048  09B7  0023               	movlb	3	; select bank3
 26049  09B8  085D               	movf	main@tapCntDivisor^(0+384),w
 26050  09B9  0021               	movlb	1	; select bank1
 26051  09BA  00A0               	movwf	___aldiv@divisor^(0+128)
 26052  09BB  0023               	movlb	3	; select bank3
 26053  09BC  085E               	movf	(main@tapCntDivisor+1)^(0+384),w
 26054  09BD  0021               	movlb	1	; select bank1
 26055  09BE  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
 26056  09BF  0D89               	rlf	9,f
 26057  09C0  3B89               	subwfb	9,f
 26058  09C1  0989               	comf	9,f
 26059  09C2  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
 26060  09C3  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
 26061  09C4  0025               	movlb	5	; select bank5
 26062  09C5  0859               	movf	(_tap_total+3)^(0+640),w
 26063  09C6  0021               	movlb	1	; select bank1
 26064  09C7  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
 26065  09C8  0025               	movlb	5	; select bank5
 26066  09C9  0858               	movf	(_tap_total+2)^(0+640),w
 26067  09CA  0021               	movlb	1	; select bank1
 26068  09CB  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
 26069  09CC  0025               	movlb	5	; select bank5
 26070  09CD  0857               	movf	(_tap_total+1)^(0+640),w
 26071  09CE  0021               	movlb	1	; select bank1
 26072  09CF  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
 26073  09D0  0025               	movlb	5	; select bank5
 26074  09D1  0856               	movf	_tap_total^(0+640),w
 26075  09D2  0021               	movlb	1	; select bank1
 26076  09D3  00A4               	movwf	___aldiv@dividend^(0+128)
 26077  09D4  31A0  205D  3188   	fcall	___aldiv
 26078  09D7  0021               	movlb	1	; select bank1
 26079  09D8  0821               	movf	(?___aldiv^(0+128)+1),w
 26080  09D9  0020               	movlb	0	; select bank0
 26081  09DA  00EB               	movwf	_baseline_mod_time+1	;volatile
 26082  09DB  0021               	movlb	1	; select bank1
 26083  09DC  0820               	movf	?___aldiv^(0+128),w
 26084  09DD  0020               	movlb	0	; select bank0
 26085  09DE  00EA               	movwf	_baseline_mod_time	;volatile
 26086                           
 26087                           ;main.c: 189: mod_time_changed = 1;
 26088  09DF  0024               	movlb	4	; select bank4
 26089  09E0  01EC               	clrf	_mod_time_changed^(0+512)
 26090  09E1  0AEC               	incf	_mod_time_changed^(0+512),f
 26091                           
 26092                           ;main.c: 190: tap_timer = 0;
 26093  09E2  3000               	movlw	0
 26094  09E3  0020               	movlb	0	; select bank0
 26095  09E4  00DC               	movwf	_tap_timer+3	;volatile
 26096  09E5  3000               	movlw	0
 26097  09E6  00DB               	movwf	_tap_timer+2	;volatile
 26098  09E7  3000               	movlw	0
 26099  09E8  00DA               	movwf	_tap_timer+1	;volatile
 26100  09E9  3000               	movlw	0
 26101  09EA  00D9               	movwf	_tap_timer	;volatile
 26102                           
 26103                           ;main.c: 191: updateTapTime();
 26104  09EB  3187  27F7  3188   	fcall	_updateTapTime
 26105                           
 26106                           ;main.c: 192: }
 26107                           ;main.c: 193: break;
 26108  09EE  2C92               	goto	l8741
 26109  09EF                     l8695:	
 26110                           ;main.c: 194: case 14:
 26111                           
 26112                           
 26113                           ;main.c: 195: midiLevel = (int) map(midiBuff[2], 127, 0, 0, 1023);
 26114  09EF  30C0               	movlw	192
 26115  09F0  0021               	movlb	1	; select bank1
 26116  09F1  00EA               	movwf	map@out_max^(0+128)
 26117  09F2  307F               	movlw	127
 26118  09F3  00EB               	movwf	(map@out_max+1)^(0+128)
 26119  09F4  3044               	movlw	68
 26120  09F5  00EC               	movwf	(map@out_max+2)^(0+128)
 26121  09F6  3000               	movlw	0
 26122  09F7  00E7               	movwf	map@out_min^(0+128)
 26123  09F8  3000               	movlw	0
 26124  09F9  00E8               	movwf	(map@out_min+1)^(0+128)
 26125  09FA  3000               	movlw	0
 26126  09FB  00E9               	movwf	(map@out_min+2)^(0+128)
 26127  09FC  3000               	movlw	0
 26128  09FD  00E4               	movwf	map@in_max^(0+128)
 26129  09FE  3000               	movlw	0
 26130  09FF  00E5               	movwf	(map@in_max+1)^(0+128)
 26131  0A00  3000               	movlw	0
 26132  0A01  00E6               	movwf	(map@in_max+2)^(0+128)
 26133  0A02  3000               	movlw	0
 26134  0A03  00E1               	movwf	map@in_min^(0+128)
 26135  0A04  30FE               	movlw	254
 26136  0A05  00E2               	movwf	(map@in_min+1)^(0+128)
 26137  0A06  3042               	movlw	66
 26138  0A07  00E3               	movwf	(map@in_min+2)^(0+128)
 26139  0A08  0026               	movlb	6	; select bank6
 26140  0A09  0822               	movf	(_midiBuff^(0+768)+2),w
 26141  0A0A  3190  2000  3188   	fcall	___lbtoft
 26142  0A0D  0021               	movlb	1	; select bank1
 26143  0A0E  0828               	movf	?___lbtoft^(0+128),w
 26144  0A0F  00DE               	movwf	map@x^(0+128)
 26145  0A10  0829               	movf	(?___lbtoft+1)^(0+128),w
 26146  0A11  00DF               	movwf	(map@x+1)^(0+128)
 26147  0A12  082A               	movf	(?___lbtoft+2)^(0+128),w
 26148  0A13  00E0               	movwf	(map@x+2)^(0+128)
 26149  0A14  31A1  21EB  3188   	fcall	_map
 26150  0A17  0021               	movlb	1	; select bank1
 26151  0A18  085E               	movf	?_map^(0+128),w
 26152  0A19  0022               	movlb	2	; select bank2
 26153  0A1A  00A0               	movwf	___fttol@f1^(0+256)
 26154  0A1B  0021               	movlb	1	; select bank1
 26155  0A1C  085F               	movf	(?_map+1)^(0+128),w
 26156  0A1D  0022               	movlb	2	; select bank2
 26157  0A1E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26158  0A1F  0021               	movlb	1	; select bank1
 26159  0A20  0860               	movf	(?_map+2)^(0+128),w
 26160  0A21  0022               	movlb	2	; select bank2
 26161  0A22  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26162  0A23  31A1  2164  3188   	fcall	___fttol
 26163  0A26  0022               	movlb	2	; select bank2
 26164  0A27  0821               	movf	(?___fttol^(0+256)+1),w
 26165  0A28  0024               	movlb	4	; select bank4
 26166  0A29  00BF               	movwf	(_midiLevel+1)^(0+512)
 26167  0A2A  0022               	movlb	2	; select bank2
 26168  0A2B  0820               	movf	?___fttol^(0+256),w
 26169  0A2C  0024               	movlb	4	; select bank4
 26170  0A2D  00BE               	movwf	_midiLevel^(0+512)
 26171                           
 26172                           ;main.c: 196: CCPR4 = scaleA10kPot(midiLevel);
 26173  0A2E  083F               	movf	(_midiLevel+1)^(0+512),w
 26174  0A2F  0021               	movlb	1	; select bank1
 26175  0A30  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26176  0A31  0024               	movlb	4	; select bank4
 26177  0A32  083E               	movf	_midiLevel^(0+512),w
 26178  0A33  0021               	movlb	1	; select bank1
 26179  0A34  00A8               	movwf	___awtoft@c^(0+128)
 26180  0A35  31B2  22F0  3188   	fcall	___awtoft
 26181  0A38  0021               	movlb	1	; select bank1
 26182  0A39  0828               	movf	?___awtoft^(0+128),w
 26183  0A3A  0023               	movlb	3	; select bank3
 26184  0A3B  00D7               	movwf	_main$3248^(0+384)
 26185  0A3C  0021               	movlb	1	; select bank1
 26186  0A3D  0829               	movf	(?___awtoft+1)^(0+128),w
 26187  0A3E  0023               	movlb	3	; select bank3
 26188  0A3F  00D8               	movwf	(_main$3248+1)^(0+384)
 26189  0A40  0021               	movlb	1	; select bank1
 26190  0A41  082A               	movf	(?___awtoft+2)^(0+128),w
 26191  0A42  0023               	movlb	3	; select bank3
 26192  0A43  00D9               	movwf	(_main$3248+2)^(0+384)
 26193                           
 26194                           ;main.c: 196: CCPR4 = scaleA10kPot(midiLevel);
 26195  0A44  0857               	movf	_main$3248^(0+384),w
 26196  0A45  0022               	movlb	2	; select bank2
 26197  0A46  00E7               	movwf	scaleA10kPot@input^(0+256)
 26198  0A47  0023               	movlb	3	; select bank3
 26199  0A48  0858               	movf	(_main$3248+1)^(0+384),w
 26200  0A49  0022               	movlb	2	; select bank2
 26201  0A4A  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
 26202  0A4B  0023               	movlb	3	; select bank3
 26203  0A4C  0859               	movf	(_main$3248+2)^(0+384),w
 26204  0A4D  0022               	movlb	2	; select bank2
 26205  0A4E  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
 26206  0A4F  31A3  2396  3188   	fcall	_scaleA10kPot
 26207  0A52  0022               	movlb	2	; select bank2
 26208  0A53  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
 26209  0A54  0026               	movlb	6	; select bank6
 26210  0A55  0099               	movwf	25	;volatile
 26211  0A56  0022               	movlb	2	; select bank2
 26212  0A57  0867               	movf	?_scaleA10kPot^(0+256),w
 26213  0A58  0026               	movlb	6	; select bank6
 26214  0A59  0098               	movwf	24	;volatile
 26215                           
 26216                           ;main.c: 197: CCPR5 = scaleiA10kPot(midiLevel);
 26217  0A5A  0024               	movlb	4	; select bank4
 26218  0A5B  083F               	movf	(_midiLevel+1)^(0+512),w
 26219  0A5C  0021               	movlb	1	; select bank1
 26220  0A5D  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26221  0A5E  0024               	movlb	4	; select bank4
 26222  0A5F  083E               	movf	_midiLevel^(0+512),w
 26223  0A60  0021               	movlb	1	; select bank1
 26224  0A61  00A8               	movwf	___awtoft@c^(0+128)
 26225  0A62  31B2  22F0  3188   	fcall	___awtoft
 26226  0A65  0021               	movlb	1	; select bank1
 26227  0A66  0828               	movf	?___awtoft^(0+128),w
 26228  0A67  0023               	movlb	3	; select bank3
 26229  0A68  00DA               	movwf	_main$3249^(0+384)
 26230  0A69  0021               	movlb	1	; select bank1
 26231  0A6A  0829               	movf	(?___awtoft+1)^(0+128),w
 26232  0A6B  0023               	movlb	3	; select bank3
 26233  0A6C  00DB               	movwf	(_main$3249+1)^(0+384)
 26234  0A6D  0021               	movlb	1	; select bank1
 26235  0A6E  082A               	movf	(?___awtoft+2)^(0+128),w
 26236  0A6F  0023               	movlb	3	; select bank3
 26237  0A70  00DC               	movwf	(_main$3249+2)^(0+384)
 26238                           
 26239                           ;main.c: 197: CCPR5 = scaleiA10kPot(midiLevel);
 26240  0A71  085A               	movf	_main$3249^(0+384),w
 26241  0A72  0022               	movlb	2	; select bank2
 26242  0A73  00E7               	movwf	scaleiA10kPot@input^(0+256)
 26243  0A74  0023               	movlb	3	; select bank3
 26244  0A75  085B               	movf	(_main$3249+1)^(0+384),w
 26245  0A76  0022               	movlb	2	; select bank2
 26246  0A77  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
 26247  0A78  0023               	movlb	3	; select bank3
 26248  0A79  085C               	movf	(_main$3249+2)^(0+384),w
 26249  0A7A  0022               	movlb	2	; select bank2
 26250  0A7B  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
 26251  0A7C  31A6  2644  3188   	fcall	_scaleiA10kPot
 26252  0A7F  0022               	movlb	2	; select bank2
 26253  0A80  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
 26254  0A81  0026               	movlb	6	; select bank6
 26255  0A82  009D               	movwf	29	;volatile
 26256  0A83  0022               	movlb	2	; select bank2
 26257  0A84  0867               	movf	?_scaleiA10kPot^(0+256),w
 26258  0A85  0026               	movlb	6	; select bank6
 26259  0A86  009C               	movwf	28	;volatile
 26260                           
 26261                           ;main.c: 198: break;
 26262  0A87  2C92               	goto	l8741
 26263  0A88                     l8701:	
 26264                           ;main.c: 199: case 15:
 26265                           
 26266                           
 26267                           ;main.c: 200: midiLevel = (int) map(midiBuff[2], 127, 0, 0, 1023);
 26268  0A88  30C0               	movlw	192
 26269  0A89  0021               	movlb	1	; select bank1
 26270  0A8A  00EA               	movwf	map@out_max^(0+128)
 26271  0A8B  307F               	movlw	127
 26272  0A8C  00EB               	movwf	(map@out_max+1)^(0+128)
 26273  0A8D  3044               	movlw	68
 26274  0A8E  00EC               	movwf	(map@out_max+2)^(0+128)
 26275  0A8F  3000               	movlw	0
 26276  0A90  00E7               	movwf	map@out_min^(0+128)
 26277  0A91  3000               	movlw	0
 26278  0A92  00E8               	movwf	(map@out_min+1)^(0+128)
 26279  0A93  3000               	movlw	0
 26280  0A94  00E9               	movwf	(map@out_min+2)^(0+128)
 26281  0A95  3000               	movlw	0
 26282  0A96  00E4               	movwf	map@in_max^(0+128)
 26283  0A97  3000               	movlw	0
 26284  0A98  00E5               	movwf	(map@in_max+1)^(0+128)
 26285  0A99  3000               	movlw	0
 26286  0A9A  00E6               	movwf	(map@in_max+2)^(0+128)
 26287  0A9B  3000               	movlw	0
 26288  0A9C  00E1               	movwf	map@in_min^(0+128)
 26289  0A9D  30FE               	movlw	254
 26290  0A9E  00E2               	movwf	(map@in_min+1)^(0+128)
 26291  0A9F  3042               	movlw	66
 26292  0AA0  00E3               	movwf	(map@in_min+2)^(0+128)
 26293  0AA1  0026               	movlb	6	; select bank6
 26294  0AA2  0822               	movf	(_midiBuff^(0+768)+2),w
 26295  0AA3  3190  2000  3188   	fcall	___lbtoft
 26296  0AA6  0021               	movlb	1	; select bank1
 26297  0AA7  0828               	movf	?___lbtoft^(0+128),w
 26298  0AA8  00DE               	movwf	map@x^(0+128)
 26299  0AA9  0829               	movf	(?___lbtoft+1)^(0+128),w
 26300  0AAA  00DF               	movwf	(map@x+1)^(0+128)
 26301  0AAB  082A               	movf	(?___lbtoft+2)^(0+128),w
 26302  0AAC  00E0               	movwf	(map@x+2)^(0+128)
 26303  0AAD  31A1  21EB  3188   	fcall	_map
 26304  0AB0  0021               	movlb	1	; select bank1
 26305  0AB1  085E               	movf	?_map^(0+128),w
 26306  0AB2  0022               	movlb	2	; select bank2
 26307  0AB3  00A0               	movwf	___fttol@f1^(0+256)
 26308  0AB4  0021               	movlb	1	; select bank1
 26309  0AB5  085F               	movf	(?_map+1)^(0+128),w
 26310  0AB6  0022               	movlb	2	; select bank2
 26311  0AB7  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26312  0AB8  0021               	movlb	1	; select bank1
 26313  0AB9  0860               	movf	(?_map+2)^(0+128),w
 26314  0ABA  0022               	movlb	2	; select bank2
 26315  0ABB  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26316  0ABC  31A1  2164  3188   	fcall	___fttol
 26317  0ABF  0022               	movlb	2	; select bank2
 26318  0AC0  0821               	movf	(?___fttol^(0+256)+1),w
 26319  0AC1  0024               	movlb	4	; select bank4
 26320  0AC2  00BF               	movwf	(_midiLevel+1)^(0+512)
 26321  0AC3  0022               	movlb	2	; select bank2
 26322  0AC4  0820               	movf	?___fttol^(0+256),w
 26323  0AC5  0024               	movlb	4	; select bank4
 26324  0AC6  00BE               	movwf	_midiLevel^(0+512)
 26325                           
 26326                           ;main.c: 201: CCPR1 = scaleA100kPot(1023 - midiLevel);
 26327  0AC7  093E               	comf	_midiLevel^(0+512),w
 26328  0AC8  0023               	movlb	3	; select bank3
 26329  0AC9  00D1               	movwf	??_main^(0+384)
 26330  0ACA  0024               	movlb	4	; select bank4
 26331  0ACB  093F               	comf	(_midiLevel+1)^(0+512),w
 26332  0ACC  0023               	movlb	3	; select bank3
 26333  0ACD  00D2               	movwf	(??_main^(0+384)+1)
 26334  0ACE  0AD1               	incf	??_main^(0+384),f
 26335  0ACF  1903               	skipnz
 26336  0AD0  0AD2               	incf	(??_main^(0+384)+1),f
 26337  0AD1  0851               	movf	??_main^(0+384),w
 26338  0AD2  3EFF               	addlw	255
 26339  0AD3  0021               	movlb	1	; select bank1
 26340  0AD4  00A8               	movwf	___awtoft@c^(0+128)
 26341  0AD5  3003               	movlw	3
 26342  0AD6  0023               	movlb	3	; select bank3
 26343  0AD7  3D52               	addwfc	(??_main+1)^(0+384),w
 26344  0AD8  0021               	movlb	1	; select bank1
 26345  0AD9  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26346  0ADA  31B2  22F0  3188   	fcall	___awtoft
 26347  0ADD  0021               	movlb	1	; select bank1
 26348  0ADE  0828               	movf	?___awtoft^(0+128),w
 26349  0ADF  0023               	movlb	3	; select bank3
 26350  0AE0  00DF               	movwf	_main$3250^(0+384)
 26351  0AE1  0021               	movlb	1	; select bank1
 26352  0AE2  0829               	movf	(?___awtoft+1)^(0+128),w
 26353  0AE3  0023               	movlb	3	; select bank3
 26354  0AE4  00E0               	movwf	(_main$3250+1)^(0+384)
 26355  0AE5  0021               	movlb	1	; select bank1
 26356  0AE6  082A               	movf	(?___awtoft+2)^(0+128),w
 26357  0AE7  0023               	movlb	3	; select bank3
 26358  0AE8  00E1               	movwf	(_main$3250+2)^(0+384)
 26359                           
 26360                           ;main.c: 201: CCPR1 = scaleA100kPot(1023 - midiLevel);
 26361  0AE9  085F               	movf	_main$3250^(0+384),w
 26362  0AEA  0022               	movlb	2	; select bank2
 26363  0AEB  00E7               	movwf	scaleA100kPot@input^(0+256)
 26364  0AEC  0023               	movlb	3	; select bank3
 26365  0AED  0860               	movf	(_main$3250+1)^(0+384),w
 26366  0AEE  0022               	movlb	2	; select bank2
 26367  0AEF  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 26368  0AF0  0023               	movlb	3	; select bank3
 26369  0AF1  0861               	movf	(_main$3250+2)^(0+384),w
 26370  0AF2  0022               	movlb	2	; select bank2
 26371  0AF3  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 26372  0AF4  31A0  20DF  3188   	fcall	_scaleA100kPot
 26373  0AF7  0022               	movlb	2	; select bank2
 26374  0AF8  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 26375  0AF9  0025               	movlb	5	; select bank5
 26376  0AFA  0092               	movwf	18	;volatile
 26377  0AFB  0022               	movlb	2	; select bank2
 26378  0AFC  0867               	movf	?_scaleA100kPot^(0+256),w
 26379  0AFD  0025               	movlb	5	; select bank5
 26380  0AFE  0091               	movwf	17	;volatile
 26381                           
 26382                           ;main.c: 202: CCPR2 = scaleA100kPot(1023 - midiLevel);
 26383  0AFF  0024               	movlb	4	; select bank4
 26384  0B00  093E               	comf	_midiLevel^(0+512),w
 26385  0B01  0023               	movlb	3	; select bank3
 26386  0B02  00D1               	movwf	??_main^(0+384)
 26387  0B03  0024               	movlb	4	; select bank4
 26388  0B04  093F               	comf	(_midiLevel+1)^(0+512),w
 26389  0B05  0023               	movlb	3	; select bank3
 26390  0B06  00D2               	movwf	(??_main^(0+384)+1)
 26391  0B07  0AD1               	incf	??_main^(0+384),f
 26392  0B08  1903               	skipnz
 26393  0B09  0AD2               	incf	(??_main^(0+384)+1),f
 26394  0B0A  0851               	movf	??_main^(0+384),w
 26395  0B0B  3EFF               	addlw	255
 26396  0B0C  0021               	movlb	1	; select bank1
 26397  0B0D  00A8               	movwf	___awtoft@c^(0+128)
 26398  0B0E  3003               	movlw	3
 26399  0B0F  0023               	movlb	3	; select bank3
 26400  0B10  3D52               	addwfc	(??_main+1)^(0+384),w
 26401  0B11  0021               	movlb	1	; select bank1
 26402  0B12  00A9               	movwf	(___awtoft@c+1)^(0+128)
 26403  0B13  31B2  22F0  3188   	fcall	___awtoft
 26404  0B16  0021               	movlb	1	; select bank1
 26405  0B17  0828               	movf	?___awtoft^(0+128),w
 26406  0B18  0023               	movlb	3	; select bank3
 26407  0B19  00DF               	movwf	_main$3250^(0+384)
 26408  0B1A  0021               	movlb	1	; select bank1
 26409  0B1B  0829               	movf	(?___awtoft+1)^(0+128),w
 26410  0B1C  0023               	movlb	3	; select bank3
 26411  0B1D  00E0               	movwf	(_main$3250+1)^(0+384)
 26412  0B1E  0021               	movlb	1	; select bank1
 26413  0B1F  082A               	movf	(?___awtoft+2)^(0+128),w
 26414  0B20  0023               	movlb	3	; select bank3
 26415  0B21  00E1               	movwf	(_main$3250+2)^(0+384)
 26416                           
 26417                           ;main.c: 202: CCPR2 = scaleA100kPot(1023 - midiLevel);
 26418  0B22  085F               	movf	_main$3250^(0+384),w
 26419  0B23  0022               	movlb	2	; select bank2
 26420  0B24  00E7               	movwf	scaleA100kPot@input^(0+256)
 26421  0B25  0023               	movlb	3	; select bank3
 26422  0B26  0860               	movf	(_main$3250+1)^(0+384),w
 26423  0B27  0022               	movlb	2	; select bank2
 26424  0B28  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 26425  0B29  0023               	movlb	3	; select bank3
 26426  0B2A  0861               	movf	(_main$3250+2)^(0+384),w
 26427  0B2B  0022               	movlb	2	; select bank2
 26428  0B2C  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 26429  0B2D  31A0  20DF  3188   	fcall	_scaleA100kPot
 26430  0B30  0022               	movlb	2	; select bank2
 26431  0B31  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
 26432  0B32  0025               	movlb	5	; select bank5
 26433  0B33  0099               	movwf	25	;volatile
 26434  0B34  0022               	movlb	2	; select bank2
 26435  0B35  0867               	movf	?_scaleA100kPot^(0+256),w
 26436  0B36  0025               	movlb	5	; select bank5
 26437  0B37  0098               	movwf	24	;volatile
 26438                           
 26439                           ;main.c: 203: break;
 26440  0B38  2C92               	goto	l8741
 26441  0B39                     l8707:	
 26442                           ;main.c: 204: case 16:
 26443                           
 26444                           
 26445                           ;main.c: 205: symmetry = (int) map(midiBuff[2], 127, 0, 45, 315);
 26446  0B39  3080               	movlw	128
 26447  0B3A  0021               	movlb	1	; select bank1
 26448  0B3B  00EA               	movwf	map@out_max^(0+128)
 26449  0B3C  309D               	movlw	157
 26450  0B3D  00EB               	movwf	(map@out_max+1)^(0+128)
 26451  0B3E  3043               	movlw	67
 26452  0B3F  00EC               	movwf	(map@out_max+2)^(0+128)
 26453  0B40  3000               	movlw	0
 26454  0B41  00E7               	movwf	map@out_min^(0+128)
 26455  0B42  3034               	movlw	52
 26456  0B43  00E8               	movwf	(map@out_min+1)^(0+128)
 26457  0B44  3042               	movlw	66
 26458  0B45  00E9               	movwf	(map@out_min+2)^(0+128)
 26459  0B46  3000               	movlw	0
 26460  0B47  00E4               	movwf	map@in_max^(0+128)
 26461  0B48  3000               	movlw	0
 26462  0B49  00E5               	movwf	(map@in_max+1)^(0+128)
 26463  0B4A  3000               	movlw	0
 26464  0B4B  00E6               	movwf	(map@in_max+2)^(0+128)
 26465  0B4C  3000               	movlw	0
 26466  0B4D  00E1               	movwf	map@in_min^(0+128)
 26467  0B4E  30FE               	movlw	254
 26468  0B4F  00E2               	movwf	(map@in_min+1)^(0+128)
 26469  0B50  3042               	movlw	66
 26470  0B51  00E3               	movwf	(map@in_min+2)^(0+128)
 26471  0B52  0026               	movlb	6	; select bank6
 26472  0B53  0822               	movf	(_midiBuff^(0+768)+2),w
 26473  0B54  3190  2000  3188   	fcall	___lbtoft
 26474  0B57  0021               	movlb	1	; select bank1
 26475  0B58  0828               	movf	?___lbtoft^(0+128),w
 26476  0B59  00DE               	movwf	map@x^(0+128)
 26477  0B5A  0829               	movf	(?___lbtoft+1)^(0+128),w
 26478  0B5B  00DF               	movwf	(map@x+1)^(0+128)
 26479  0B5C  082A               	movf	(?___lbtoft+2)^(0+128),w
 26480  0B5D  00E0               	movwf	(map@x+2)^(0+128)
 26481  0B5E  31A1  21EB  3188   	fcall	_map
 26482  0B61  0021               	movlb	1	; select bank1
 26483  0B62  085E               	movf	?_map^(0+128),w
 26484  0B63  0022               	movlb	2	; select bank2
 26485  0B64  00A0               	movwf	___fttol@f1^(0+256)
 26486  0B65  0021               	movlb	1	; select bank1
 26487  0B66  085F               	movf	(?_map+1)^(0+128),w
 26488  0B67  0022               	movlb	2	; select bank2
 26489  0B68  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26490  0B69  0021               	movlb	1	; select bank1
 26491  0B6A  0860               	movf	(?_map+2)^(0+128),w
 26492  0B6B  0022               	movlb	2	; select bank2
 26493  0B6C  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26494  0B6D  31A1  2164  3188   	fcall	___fttol
 26495  0B70  0022               	movlb	2	; select bank2
 26496  0B71  0821               	movf	(?___fttol^(0+256)+1),w
 26497  0B72  0023               	movlb	3	; select bank3
 26498  0B73  00EB               	movwf	(_symmetry+1)^(0+384)
 26499  0B74  0022               	movlb	2	; select bank2
 26500  0B75  0820               	movf	?___fttol^(0+256),w
 26501  0B76  0023               	movlb	3	; select bank3
 26502  0B77  00EA               	movwf	_symmetry^(0+384)
 26503                           
 26504                           ;main.c: 206: break;
 26505  0B78  2C92               	goto	l8741
 26506  0B79                     l8709:	
 26507                           ;main.c: 207: case 17:
 26508                           
 26509                           
 26510                           ;main.c: 208: baseline_mod_time = (int)map(midiBuff[2], 127, 0, 180, 2820);
 26511  0B79  3040               	movlw	64
 26512  0B7A  0021               	movlb	1	; select bank1
 26513  0B7B  00EA               	movwf	map@out_max^(0+128)
 26514  0B7C  3030               	movlw	48
 26515  0B7D  00EB               	movwf	(map@out_max+1)^(0+128)
 26516  0B7E  3045               	movlw	69
 26517  0B7F  00EC               	movwf	(map@out_max+2)^(0+128)
 26518  0B80  3000               	movlw	0
 26519  0B81  00E7               	movwf	map@out_min^(0+128)
 26520  0B82  3034               	movlw	52
 26521  0B83  00E8               	movwf	(map@out_min+1)^(0+128)
 26522  0B84  3043               	movlw	67
 26523  0B85  00E9               	movwf	(map@out_min+2)^(0+128)
 26524  0B86  3000               	movlw	0
 26525  0B87  00E4               	movwf	map@in_max^(0+128)
 26526  0B88  3000               	movlw	0
 26527  0B89  00E5               	movwf	(map@in_max+1)^(0+128)
 26528  0B8A  3000               	movlw	0
 26529  0B8B  00E6               	movwf	(map@in_max+2)^(0+128)
 26530  0B8C  3000               	movlw	0
 26531  0B8D  00E1               	movwf	map@in_min^(0+128)
 26532  0B8E  30FE               	movlw	254
 26533  0B8F  00E2               	movwf	(map@in_min+1)^(0+128)
 26534  0B90  3042               	movlw	66
 26535  0B91  00E3               	movwf	(map@in_min+2)^(0+128)
 26536  0B92  0026               	movlb	6	; select bank6
 26537  0B93  0822               	movf	(_midiBuff^(0+768)+2),w
 26538  0B94  3190  2000  3188   	fcall	___lbtoft
 26539  0B97  0021               	movlb	1	; select bank1
 26540  0B98  0828               	movf	?___lbtoft^(0+128),w
 26541  0B99  00DE               	movwf	map@x^(0+128)
 26542  0B9A  0829               	movf	(?___lbtoft+1)^(0+128),w
 26543  0B9B  00DF               	movwf	(map@x+1)^(0+128)
 26544  0B9C  082A               	movf	(?___lbtoft+2)^(0+128),w
 26545  0B9D  00E0               	movwf	(map@x+2)^(0+128)
 26546  0B9E  31A1  21EB  3188   	fcall	_map
 26547  0BA1  0021               	movlb	1	; select bank1
 26548  0BA2  085E               	movf	?_map^(0+128),w
 26549  0BA3  0022               	movlb	2	; select bank2
 26550  0BA4  00A0               	movwf	___fttol@f1^(0+256)
 26551  0BA5  0021               	movlb	1	; select bank1
 26552  0BA6  085F               	movf	(?_map+1)^(0+128),w
 26553  0BA7  0022               	movlb	2	; select bank2
 26554  0BA8  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26555  0BA9  0021               	movlb	1	; select bank1
 26556  0BAA  0860               	movf	(?_map+2)^(0+128),w
 26557  0BAB  0022               	movlb	2	; select bank2
 26558  0BAC  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26559  0BAD  31A1  2164  3188   	fcall	___fttol
 26560  0BB0  0022               	movlb	2	; select bank2
 26561  0BB1  0821               	movf	(?___fttol^(0+256)+1),w
 26562  0BB2  0020               	movlb	0	; select bank0
 26563  0BB3  00EB               	movwf	_baseline_mod_time+1	;volatile
 26564  0BB4  0022               	movlb	2	; select bank2
 26565  0BB5  0820               	movf	?___fttol^(0+256),w
 26566  0BB6  0020               	movlb	0	; select bank0
 26567  0BB7  00EA               	movwf	_baseline_mod_time	;volatile
 26568                           
 26569                           ;main.c: 209: updateTapTime();
 26570  0BB8  3187  27F7  3188   	fcall	_updateTapTime
 26571                           
 26572                           ;main.c: 210: break;
 26573  0BBB  2C92               	goto	l8741
 26574  0BBC                     l8711:	
 26575                           ;main.c: 211: case 18:
 26576                           
 26577                           
 26578                           ;main.c: 212: adjusted_pot_value = (int)map(midiBuff[2], 127, 0, 1275, 0);
 26579  0BBC  3000               	movlw	0
 26580  0BBD  0021               	movlb	1	; select bank1
 26581  0BBE  00EA               	movwf	map@out_max^(0+128)
 26582  0BBF  3000               	movlw	0
 26583  0BC0  00EB               	movwf	(map@out_max+1)^(0+128)
 26584  0BC1  3000               	movlw	0
 26585  0BC2  00EC               	movwf	(map@out_max+2)^(0+128)
 26586  0BC3  3060               	movlw	96
 26587  0BC4  00E7               	movwf	map@out_min^(0+128)
 26588  0BC5  309F               	movlw	159
 26589  0BC6  00E8               	movwf	(map@out_min+1)^(0+128)
 26590  0BC7  3044               	movlw	68
 26591  0BC8  00E9               	movwf	(map@out_min+2)^(0+128)
 26592  0BC9  3000               	movlw	0
 26593  0BCA  00E4               	movwf	map@in_max^(0+128)
 26594  0BCB  3000               	movlw	0
 26595  0BCC  00E5               	movwf	(map@in_max+1)^(0+128)
 26596  0BCD  3000               	movlw	0
 26597  0BCE  00E6               	movwf	(map@in_max+2)^(0+128)
 26598  0BCF  3000               	movlw	0
 26599  0BD0  00E1               	movwf	map@in_min^(0+128)
 26600  0BD1  30FE               	movlw	254
 26601  0BD2  00E2               	movwf	(map@in_min+1)^(0+128)
 26602  0BD3  3042               	movlw	66
 26603  0BD4  00E3               	movwf	(map@in_min+2)^(0+128)
 26604  0BD5  0026               	movlb	6	; select bank6
 26605  0BD6  0822               	movf	(_midiBuff^(0+768)+2),w
 26606  0BD7  3190  2000  3188   	fcall	___lbtoft
 26607  0BDA  0021               	movlb	1	; select bank1
 26608  0BDB  0828               	movf	?___lbtoft^(0+128),w
 26609  0BDC  00DE               	movwf	map@x^(0+128)
 26610  0BDD  0829               	movf	(?___lbtoft+1)^(0+128),w
 26611  0BDE  00DF               	movwf	(map@x+1)^(0+128)
 26612  0BDF  082A               	movf	(?___lbtoft+2)^(0+128),w
 26613  0BE0  00E0               	movwf	(map@x+2)^(0+128)
 26614  0BE1  31A1  21EB  3188   	fcall	_map
 26615  0BE4  0021               	movlb	1	; select bank1
 26616  0BE5  085E               	movf	?_map^(0+128),w
 26617  0BE6  0022               	movlb	2	; select bank2
 26618  0BE7  00A0               	movwf	___fttol@f1^(0+256)
 26619  0BE8  0021               	movlb	1	; select bank1
 26620  0BE9  085F               	movf	(?_map+1)^(0+128),w
 26621  0BEA  0022               	movlb	2	; select bank2
 26622  0BEB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 26623  0BEC  0021               	movlb	1	; select bank1
 26624  0BED  0860               	movf	(?_map+2)^(0+128),w
 26625  0BEE  0022               	movlb	2	; select bank2
 26626  0BEF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 26627  0BF0  31A1  2164  3188   	fcall	___fttol
 26628  0BF3  0022               	movlb	2	; select bank2
 26629  0BF4  0821               	movf	(?___fttol^(0+256)+1),w
 26630  0BF5  0025               	movlb	5	; select bank5
 26631  0BF6  00DB               	movwf	(_adjusted_pot_value+1)^(0+640)
 26632  0BF7  0022               	movlb	2	; select bank2
 26633  0BF8  0820               	movf	?___fttol^(0+256),w
 26634  0BF9  0025               	movlb	5	; select bank5
 26635  0BFA  00DA               	movwf	_adjusted_pot_value^(0+640)
 26636                           
 26637                           ;main.c: 213: break;
 26638  0BFB  2C92               	goto	l8741
 26639  0BFC                     l8713:	
 26640                           ;main.c: 214: case 19:
 26641                           
 26642                           
 26643                           ;main.c: 215: top_push_state = midiBuff[2];
 26644  0BFC  0026               	movlb	6	; select bank6
 26645  0BFD  0822               	movf	(_midiBuff^(0+768)+2),w
 26646  0BFE  0023               	movlb	3	; select bank3
 26647  0BFF  00D1               	movwf	??_main^(0+384)
 26648  0C00  01D2               	clrf	(??_main^(0+384)+1)
 26649  0C01  0851               	movf	??_main^(0+384),w
 26650  0C02  0020               	movlb	0	; select bank0
 26651  0C03  00EC               	movwf	_top_push_state
 26652  0C04  0023               	movlb	3	; select bank3
 26653  0C05  0852               	movf	(??_main+1)^(0+384),w
 26654  0C06  0020               	movlb	0	; select bank0
 26655  0C07  00ED               	movwf	_top_push_state+1
 26656                           
 26657                           ;main.c: 216: if (top_push_state > 5) {
 26658  0C08  086D               	movf	_top_push_state+1,w
 26659  0C09  3A80               	xorlw	128
 26660  0C0A  0023               	movlb	3	; select bank3
 26661  0C0B  00D1               	movwf	??_main^(0+384)
 26662  0C0C  3080               	movlw	128
 26663  0C0D  0251               	subwf	??_main^(0+384),w
 26664  0C0E  1D03               	skipz
 26665  0C0F  2C13               	goto	u9005
 26666  0C10  3006               	movlw	6
 26667  0C11  0020               	movlb	0	; select bank0
 26668  0C12  026C               	subwf	_top_push_state,w
 26669  0C13                     u9005:	
 26670  0C13  1C03               	skipc
 26671  0C14  2C1A               	goto	l8717
 26672                           
 26673                           ;main.c: 217: top_push_state = 6;
 26674  0C15  3006               	movlw	6
 26675  0C16  0020               	movlb	0	; select bank0
 26676  0C17  00EC               	movwf	_top_push_state
 26677  0C18  3000               	movlw	0
 26678  0C19  00ED               	movwf	_top_push_state+1
 26679  0C1A                     l8717:	
 26680                           
 26681                           ;main.c: 218: }
 26682                           ;main.c: 219: if (top_push_state == 0) {
 26683  0C1A  0020               	movlb	0	; select bank0
 26684  0C1B  086C               	movf	_top_push_state,w
 26685  0C1C  046D               	iorwf	_top_push_state+1,w
 26686  0C1D  1D03               	btfss	3,2
 26687  0C1E  2C23               	goto	l8721
 26688                           
 26689                           ;main.c: 220: top_push_state = 6;
 26690  0C1F  3006               	movlw	6
 26691  0C20  00EC               	movwf	_top_push_state
 26692  0C21  3000               	movlw	0
 26693  0C22  00ED               	movwf	_top_push_state+1
 26694  0C23                     l8721:	
 26695                           
 26696                           ;main.c: 221: }
 26697                           ;main.c: 222: set_leds_top(top_push_state, 1);
 26698  0C23  086D               	movf	_top_push_state+1,w
 26699  0C24  0021               	movlb	1	; select bank1
 26700  0C25  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 26701  0C26  0020               	movlb	0	; select bank0
 26702  0C27  086C               	movf	_top_push_state,w
 26703  0C28  0021               	movlb	1	; select bank1
 26704  0C29  00A0               	movwf	set_leds_top@x^(0+128)
 26705  0C2A  3001               	movlw	1
 26706  0C2B  00A2               	movwf	set_leds_top@ledState^(0+128)
 26707  0C2C  3000               	movlw	0
 26708  0C2D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 26709  0C2E  31AC  2499  3188   	fcall	_set_leds_top
 26710                           
 26711                           ;main.c: 223: mod_time_changed = 1;
 26712  0C31  0024               	movlb	4	; select bank4
 26713  0C32  01EC               	clrf	_mod_time_changed^(0+512)
 26714  0C33  0AEC               	incf	_mod_time_changed^(0+512),f
 26715                           
 26716                           ;main.c: 224: updateSubdivisionState();
 26717  0C34  31BF  27A6  3188   	fcall	_updateSubdivisionState
 26718                           
 26719                           ;main.c: 225: break;
 26720  0C37  2C92               	goto	l8741
 26721  0C38                     l466:	
 26722                           ;main.c: 226: case 20:
 26723                           
 26724                           
 26725                           ;main.c: 227: modulation_changed = 1;
 26726  0C38  0024               	movlb	4	; select bank4
 26727  0C39  01CE               	clrf	_modulation_changed^(0+512)
 26728  0C3A  0ACE               	incf	_modulation_changed^(0+512),f
 26729                           
 26730                           ;main.c: 228: bottom_push_state = midiBuff[2];
 26731  0C3B  0026               	movlb	6	; select bank6
 26732  0C3C  0822               	movf	(_midiBuff^(0+768)+2),w
 26733  0C3D  0023               	movlb	3	; select bank3
 26734  0C3E  00D1               	movwf	??_main^(0+384)
 26735  0C3F  01D2               	clrf	(??_main^(0+384)+1)
 26736  0C40  0851               	movf	??_main^(0+384),w
 26737  0C41  00E2               	movwf	_bottom_push_state^(0+384)
 26738  0C42  0852               	movf	(??_main+1)^(0+384),w
 26739  0C43  00E3               	movwf	(_bottom_push_state+1)^(0+384)
 26740                           
 26741                           ;main.c: 229: if (bottom_push_state > 5) {
 26742  0C44  0863               	movf	(_bottom_push_state+1)^(0+384),w
 26743  0C45  3A80               	xorlw	128
 26744  0C46  00D1               	movwf	??_main^(0+384)
 26745  0C47  3080               	movlw	128
 26746  0C48  0251               	subwf	??_main^(0+384),w
 26747  0C49  1D03               	skipz
 26748  0C4A  2C4D               	goto	u9025
 26749  0C4B  3006               	movlw	6
 26750  0C4C  0262               	subwf	_bottom_push_state^(0+384),w
 26751  0C4D                     u9025:	
 26752  0C4D  1C03               	skipc
 26753  0C4E  2C54               	goto	l467
 26754                           
 26755                           ;main.c: 230: bottom_push_state = 1;
 26756  0C4F  3001               	movlw	1
 26757  0C50  0023               	movlb	3	; select bank3
 26758  0C51  00E2               	movwf	_bottom_push_state^(0+384)
 26759  0C52  3000               	movlw	0
 26760  0C53  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 26761  0C54                     l467:	
 26762                           
 26763                           ;main.c: 231: }
 26764                           ;main.c: 232: if (bottom_push_state < 1) {
 26765  0C54  0023               	movlb	3	; select bank3
 26766  0C55  0863               	movf	(_bottom_push_state+1)^(0+384),w
 26767  0C56  3A80               	xorlw	128
 26768  0C57  00D1               	movwf	??_main^(0+384)
 26769  0C58  3080               	movlw	128
 26770  0C59  0251               	subwf	??_main^(0+384),w
 26771  0C5A  1D03               	skipz
 26772  0C5B  2C5E               	goto	u9035
 26773  0C5C  3001               	movlw	1
 26774  0C5D  0262               	subwf	_bottom_push_state^(0+384),w
 26775  0C5E                     u9035:	
 26776  0C5E  1803               	skipnc
 26777  0C5F  2C65               	goto	l8733
 26778                           
 26779                           ;main.c: 233: bottom_push_state = 1;
 26780  0C60  3001               	movlw	1
 26781  0C61  0023               	movlb	3	; select bank3
 26782  0C62  00E2               	movwf	_bottom_push_state^(0+384)
 26783  0C63  3000               	movlw	0
 26784  0C64  00E3               	movwf	(_bottom_push_state^(0+384)+1)
 26785  0C65                     l8733:	
 26786                           
 26787                           ;main.c: 234: }
 26788                           ;main.c: 235: set_leds_bottom(bottom_push_state);
 26789  0C65  0023               	movlb	3	; select bank3
 26790  0C66  0863               	movf	(_bottom_push_state+1)^(0+384),w
 26791  0C67  0021               	movlb	1	; select bank1
 26792  0C68  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 26793  0C69  0023               	movlb	3	; select bank3
 26794  0C6A  0862               	movf	_bottom_push_state^(0+384),w
 26795  0C6B  0021               	movlb	1	; select bank1
 26796  0C6C  00A0               	movwf	set_leds_bottom@x^(0+128)
 26797  0C6D  31B6  2694  3188   	fcall	_set_leds_bottom
 26798                           
 26799                           ;main.c: 236: updateWaveFormState();
 26800  0C70  31BF  279E  3188   	fcall	_updateWaveFormState
 26801                           
 26802                           ;main.c: 238: }
 26803                           
 26804                           ;main.c: 237: break;
 26805  0C73  2C92               	goto	l8741
 26806  0C74                     l8739:	
 26807  0C74  0026               	movlb	6	; select bank6
 26808  0C75  0821               	movf	(_midiBuff^(0+768)+1),w
 26809                           
 26810                           ; Switch size 1, requested type "space"
 26811                           ; Number of cases is 9, Range of values is 14 to 102
 26812                           ; switch strategies available:
 26813                           ; Name         Instructions Cycles
 26814                           ; simple_byte           28    15 (average)
 26815                           ; direct_byte          187     9 (fixed)
 26816                           ; jumptable            263     9 (fixed)
 26817                           ;	Chosen strategy is simple_byte
 26818  0C76  3A0E               	xorlw	14	; case 14
 26819  0C77  1903               	skipnz
 26820  0C78  29EF               	goto	l8695
 26821  0C79  3A01               	xorlw	1	; case 15
 26822  0C7A  1903               	skipnz
 26823  0C7B  2A88               	goto	l8701
 26824  0C7C  3A1F               	xorlw	31	; case 16
 26825  0C7D  1903               	skipnz
 26826  0C7E  2B39               	goto	l8707
 26827  0C7F  3A01               	xorlw	1	; case 17
 26828  0C80  1903               	skipnz
 26829  0C81  2B79               	goto	l8709
 26830  0C82  3A03               	xorlw	3	; case 18
 26831  0C83  1903               	skipnz
 26832  0C84  2BBC               	goto	l8711
 26833  0C85  3A01               	xorlw	1	; case 19
 26834  0C86  1903               	skipnz
 26835  0C87  2BFC               	goto	l8713
 26836  0C88  3A07               	xorlw	7	; case 20
 26837  0C89  1903               	skipnz
 26838  0C8A  2C38               	goto	l466
 26839  0C8B  3A49               	xorlw	73	; case 93
 26840  0C8C  1903               	skipnz
 26841  0C8D  28A0               	goto	l8649
 26842  0C8E  3A3B               	xorlw	59	; case 102
 26843  0C8F  1903               	skipnz
 26844  0C90  2FFE               	goto	L27
 26845  0C91  2C92               	goto	l8741
 26846  0C92                     l8741:	
 26847                           
 26848                           ;main.c: 239: }
 26849                           ;main.c: 240: }
 26850                           ;main.c: 241: }
 26851                           ;main.c: 242: }
 26852                           ;main.c: 245: update_mode();
 26853  0C92  31B5  25E9  3188   	fcall	_update_mode
 26854                           
 26855                           ;main.c: 246: update_selectMode();
 26856  0C95  31A0  2004  3188   	fcall	_update_selectMode
 26857                           
 26858                           ;main.c: 248: updateSwitchBypass();
 26859  0C98  31A7  270F  3188   	fcall	_updateSwitchBypass
 26860                           
 26861                           ;main.c: 249: if (presetSaveMode != 1) {
 26862  0C9B  0020               	movlb	0	; select bank0
 26863  0C9C  0365               	decf	_presetSaveMode,w
 26864  0C9D  1903               	btfsc	3,2
 26865  0C9E  2CA2               	goto	l8747
 26866                           
 26867                           ;main.c: 250: updateSwitchTap();
 26868  0C9F  3196  2623  3188   	fcall	_updateSwitchTap
 26869  0CA2                     l8747:	
 26870                           
 26871                           ;main.c: 251: }
 26872                           ;main.c: 253: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
 26873  0CA2  0020               	movlb	0	; select bank0
 26874  0CA3  0365               	decf	_presetSaveMode,w
 26875  0CA4  1903               	btfsc	3,2
 26876  0CA5  2CB1               	goto	l8753
 26877  0CA6  0864               	movf	_mode2_state,w
 26878  0CA7  0024               	movlb	4	; select bank4
 26879  0CA8  066D               	xorwf	_presetModeCnst^(0+512),w
 26880  0CA9  1903               	skipnz
 26881  0CAA  2CB1               	goto	l8753
 26882                           
 26883                           ;main.c: 254: read_bottom_tactile();
 26884  0CAB  31AA  2268  3188   	fcall	_read_bottom_tactile
 26885                           
 26886                           ;main.c: 255: read_top_tactile();
 26887  0CAE  31AB  23A4  3188   	fcall	_read_top_tactile
 26888  0CB1                     l8753:	
 26889                           
 26890                           ;main.c: 256: }
 26891                           ;main.c: 259: knob_1_pos = adc_convert(0);
 26892  0CB1  3000               	movlw	0
 26893  0CB2  31B1  2129  3188   	fcall	_adc_convert
 26894  0CB5  0021               	movlb	1	; select bank1
 26895  0CB6  0821               	movf	(?_adc_convert+1)^(0+128),w
 26896  0CB7  0024               	movlb	4	; select bank4
 26897  0CB8  00B1               	movwf	(_knob_1_pos+1)^(0+512)
 26898  0CB9  0021               	movlb	1	; select bank1
 26899  0CBA  0820               	movf	?_adc_convert^(0+128),w
 26900  0CBB  0024               	movlb	4	; select bank4
 26901  0CBC  00B0               	movwf	_knob_1_pos^(0+512)
 26902                           
 26903                           ;main.c: 260: knob_2_pos = adc_convert(1);
 26904  0CBD  3001               	movlw	1
 26905  0CBE  31B1  2129  3188   	fcall	_adc_convert
 26906  0CC1  0021               	movlb	1	; select bank1
 26907  0CC2  0821               	movf	(?_adc_convert+1)^(0+128),w
 26908  0CC3  0024               	movlb	4	; select bank4
 26909  0CC4  00B3               	movwf	(_knob_2_pos+1)^(0+512)
 26910  0CC5  0021               	movlb	1	; select bank1
 26911  0CC6  0820               	movf	?_adc_convert^(0+128),w
 26912  0CC7  0024               	movlb	4	; select bank4
 26913  0CC8  00B2               	movwf	_knob_2_pos^(0+512)
 26914                           
 26915                           ;main.c: 261: knob_3_pos = adc_convert(2);
 26916  0CC9  3002               	movlw	2
 26917  0CCA  31B1  2129  3188   	fcall	_adc_convert
 26918  0CCD  0021               	movlb	1	; select bank1
 26919  0CCE  0821               	movf	(?_adc_convert+1)^(0+128),w
 26920  0CCF  0024               	movlb	4	; select bank4
 26921  0CD0  00B5               	movwf	(_knob_3_pos+1)^(0+512)
 26922  0CD1  0021               	movlb	1	; select bank1
 26923  0CD2  0820               	movf	?_adc_convert^(0+128),w
 26924  0CD3  0024               	movlb	4	; select bank4
 26925  0CD4  00B4               	movwf	_knob_3_pos^(0+512)
 26926                           
 26927                           ;main.c: 262: knob_4_pos = adc_convert(3);
 26928  0CD5  3003               	movlw	3
 26929  0CD6  31B1  2129  3188   	fcall	_adc_convert
 26930  0CD9  0021               	movlb	1	; select bank1
 26931  0CDA  0821               	movf	(?_adc_convert+1)^(0+128),w
 26932  0CDB  0024               	movlb	4	; select bank4
 26933  0CDC  00B7               	movwf	(_knob_4_pos+1)^(0+512)
 26934  0CDD  0021               	movlb	1	; select bank1
 26935  0CDE  0820               	movf	?_adc_convert^(0+128),w
 26936  0CDF  0024               	movlb	4	; select bank4
 26937  0CE0  00B6               	movwf	_knob_4_pos^(0+512)
 26938                           
 26939                           ;main.c: 263: knob_5_pos = adc_convert(4);
 26940  0CE1  3004               	movlw	4
 26941  0CE2  31B1  2129  3188   	fcall	_adc_convert
 26942  0CE5  0021               	movlb	1	; select bank1
 26943  0CE6  0821               	movf	(?_adc_convert+1)^(0+128),w
 26944  0CE7  0024               	movlb	4	; select bank4
 26945  0CE8  00B9               	movwf	(_knob_5_pos+1)^(0+512)
 26946  0CE9  0021               	movlb	1	; select bank1
 26947  0CEA  0820               	movf	?_adc_convert^(0+128),w
 26948  0CEB  0024               	movlb	4	; select bank4
 26949  0CEC  00B8               	movwf	_knob_5_pos^(0+512)
 26950                           
 26951                           ;main.c: 267: if (!isInitialized) {
 26952  0CED  0020               	movlb	0	; select bank0
 26953  0CEE  0862               	movf	_isInitialized,w
 26954  0CEF  1D03               	btfss	3,2
 26955  0CF0  2D09               	goto	l8767
 26956                           
 26957                           ;main.c: 269: knob1_prev = knob_1_pos;
 26958  0CF1  0024               	movlb	4	; select bank4
 26959  0CF2  0831               	movf	(_knob_1_pos+1)^(0+512),w
 26960  0CF3  0023               	movlb	3	; select bank3
 26961  0CF4  00E5               	movwf	(_knob1_prev+1)^(0+384)	;volatile
 26962  0CF5  0024               	movlb	4	; select bank4
 26963  0CF6  0830               	movf	_knob_1_pos^(0+512),w
 26964  0CF7  0023               	movlb	3	; select bank3
 26965  0CF8  00E4               	movwf	_knob1_prev^(0+384)	;volatile
 26966                           
 26967                           ;main.c: 270: knob2_prev = knob_2_pos;
 26968  0CF9  0024               	movlb	4	; select bank4
 26969  0CFA  0833               	movf	(_knob_2_pos+1)^(0+512),w
 26970  0CFB  0023               	movlb	3	; select bank3
 26971  0CFC  00E7               	movwf	(_knob2_prev+1)^(0+384)	;volatile
 26972  0CFD  0024               	movlb	4	; select bank4
 26973  0CFE  0832               	movf	_knob_2_pos^(0+512),w
 26974  0CFF  0023               	movlb	3	; select bank3
 26975  0D00  00E6               	movwf	_knob2_prev^(0+384)	;volatile
 26976                           
 26977                           ;main.c: 272: knob5_prev = knob_5_pos;
 26978  0D01  0024               	movlb	4	; select bank4
 26979  0D02  0839               	movf	(_knob_5_pos+1)^(0+512),w
 26980  0D03  0023               	movlb	3	; select bank3
 26981  0D04  00E9               	movwf	(_knob5_prev+1)^(0+384)	;volatile
 26982  0D05  0024               	movlb	4	; select bank4
 26983  0D06  0838               	movf	_knob_5_pos^(0+512),w
 26984  0D07  0023               	movlb	3	; select bank3
 26985  0D08  00E8               	movwf	_knob5_prev^(0+384)	;volatile
 26986  0D09                     l8767:	
 26987                           
 26988                           ;main.c: 274: }
 26989                           ;main.c: 277: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
 26990  0D09  0023               	movlb	3	; select bank3
 26991  0D0A  0964               	comf	_knob1_prev^(0+384),w	;volatile
 26992  0D0B  00D1               	movwf	??_main^(0+384)
 26993  0D0C  0965               	comf	(_knob1_prev+1)^(0+384),w	;volatile
 26994  0D0D  00D2               	movwf	(??_main^(0+384)+1)
 26995  0D0E  0AD1               	incf	??_main^(0+384),f
 26996  0D0F  1903               	skipnz
 26997  0D10  0AD2               	incf	(??_main^(0+384)+1),f
 26998  0D11  0024               	movlb	4	; select bank4
 26999  0D12  0830               	movf	_knob_1_pos^(0+512),w
 27000  0D13  0023               	movlb	3	; select bank3
 27001  0D14  0751               	addwf	??_main^(0+384),w
 27002  0D15  00D3               	movwf	(??_main+2)^(0+384)
 27003  0D16  0024               	movlb	4	; select bank4
 27004  0D17  0831               	movf	(_knob_1_pos+1)^(0+512),w
 27005  0D18  0023               	movlb	3	; select bank3
 27006  0D19  3D52               	addwfc	(??_main+1)^(0+384),w
 27007  0D1A  00D4               	movwf	(??_main+3)^(0+384)
 27008  0D1B  0854               	movf	(??_main+3)^(0+384),w
 27009  0D1C  3A80               	xorlw	128
 27010  0D1D  00D5               	movwf	(??_main+4)^(0+384)
 27011  0D1E  3080               	movlw	128
 27012  0D1F  0255               	subwf	(??_main+4)^(0+384),w
 27013  0D20  1D03               	skipz
 27014  0D21  2D24               	goto	u9085
 27015  0D22  3004               	movlw	4
 27016  0D23  0253               	subwf	(??_main+2)^(0+384),w
 27017  0D24                     u9085:	
 27018  0D24  1803               	skipnc
 27019  0D25  2D43               	goto	l8771
 27020  0D26  0023               	movlb	3	; select bank3
 27021  0D27  0964               	comf	_knob1_prev^(0+384),w	;volatile
 27022  0D28  00D1               	movwf	??_main^(0+384)
 27023  0D29  0965               	comf	(_knob1_prev+1)^(0+384),w	;volatile
 27024  0D2A  00D2               	movwf	(??_main^(0+384)+1)
 27025  0D2B  0AD1               	incf	??_main^(0+384),f
 27026  0D2C  1903               	skipnz
 27027  0D2D  0AD2               	incf	(??_main^(0+384)+1),f
 27028  0D2E  0024               	movlb	4	; select bank4
 27029  0D2F  0830               	movf	_knob_1_pos^(0+512),w
 27030  0D30  0023               	movlb	3	; select bank3
 27031  0D31  0751               	addwf	??_main^(0+384),w
 27032  0D32  00D3               	movwf	(??_main+2)^(0+384)
 27033  0D33  0024               	movlb	4	; select bank4
 27034  0D34  0831               	movf	(_knob_1_pos+1)^(0+512),w
 27035  0D35  0023               	movlb	3	; select bank3
 27036  0D36  3D52               	addwfc	(??_main+1)^(0+384),w
 27037  0D37  00D4               	movwf	(??_main+3)^(0+384)
 27038  0D38  0854               	movf	(??_main+3)^(0+384),w
 27039  0D39  3A80               	xorlw	128
 27040  0D3A  00D5               	movwf	(??_main+4)^(0+384)
 27041  0D3B  307F               	movlw	127
 27042  0D3C  0255               	subwf	(??_main+4)^(0+384),w
 27043  0D3D  1D03               	skipz
 27044  0D3E  2D41               	goto	u9095
 27045  0D3F  30FD               	movlw	253
 27046  0D40  0253               	subwf	(??_main+2)^(0+384),w
 27047  0D41                     u9095:	
 27048  0D41  1803               	skipnc
 27049  0D42  2D55               	goto	l8775
 27050  0D43                     l8771:	
 27051                           
 27052                           ;main.c: 278: knob1_prev = knob_1_pos;
 27053  0D43  0024               	movlb	4	; select bank4
 27054  0D44  0831               	movf	(_knob_1_pos+1)^(0+512),w
 27055  0D45  0023               	movlb	3	; select bank3
 27056  0D46  00E5               	movwf	(_knob1_prev+1)^(0+384)	;volatile
 27057  0D47  0024               	movlb	4	; select bank4
 27058  0D48  0830               	movf	_knob_1_pos^(0+512),w
 27059  0D49  0023               	movlb	3	; select bank3
 27060  0D4A  00E4               	movwf	_knob1_prev^(0+384)	;volatile
 27061                           
 27062                           ;main.c: 281: setVolume(knob1_prev);
 27063  0D4B  0865               	movf	(_knob1_prev+1)^(0+384),w	;volatile
 27064  0D4C  0022               	movlb	2	; select bank2
 27065  0D4D  00EB               	movwf	(setVolume@rawValue+1)^(0+256)
 27066  0D4E  0023               	movlb	3	; select bank3
 27067  0D4F  0864               	movf	_knob1_prev^(0+384),w	;volatile
 27068  0D50  0022               	movlb	2	; select bank2
 27069  0D51  00EA               	movwf	setVolume@rawValue^(0+256)
 27070  0D52  31AD  25A6  3188   	fcall	_setVolume
 27071  0D55                     l8775:	
 27072                           
 27073                           ;main.c: 284: }
 27074                           ;main.c: 288: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
 27075  0D55  0023               	movlb	3	; select bank3
 27076  0D56  0966               	comf	_knob2_prev^(0+384),w	;volatile
 27077  0D57  00D1               	movwf	??_main^(0+384)
 27078  0D58  0967               	comf	(_knob2_prev+1)^(0+384),w	;volatile
 27079  0D59  00D2               	movwf	(??_main^(0+384)+1)
 27080  0D5A  0AD1               	incf	??_main^(0+384),f
 27081  0D5B  1903               	skipnz
 27082  0D5C  0AD2               	incf	(??_main^(0+384)+1),f
 27083  0D5D  0024               	movlb	4	; select bank4
 27084  0D5E  0832               	movf	_knob_2_pos^(0+512),w
 27085  0D5F  0023               	movlb	3	; select bank3
 27086  0D60  0751               	addwf	??_main^(0+384),w
 27087  0D61  00D3               	movwf	(??_main+2)^(0+384)
 27088  0D62  0024               	movlb	4	; select bank4
 27089  0D63  0833               	movf	(_knob_2_pos+1)^(0+512),w
 27090  0D64  0023               	movlb	3	; select bank3
 27091  0D65  3D52               	addwfc	(??_main+1)^(0+384),w
 27092  0D66  00D4               	movwf	(??_main+3)^(0+384)
 27093  0D67  0854               	movf	(??_main+3)^(0+384),w
 27094  0D68  3A80               	xorlw	128
 27095  0D69  00D5               	movwf	(??_main+4)^(0+384)
 27096  0D6A  3080               	movlw	128
 27097  0D6B  0255               	subwf	(??_main+4)^(0+384),w
 27098  0D6C  1D03               	skipz
 27099  0D6D  2D70               	goto	u9105
 27100  0D6E  3004               	movlw	4
 27101  0D6F  0253               	subwf	(??_main+2)^(0+384),w
 27102  0D70                     u9105:	
 27103  0D70  1803               	skipnc
 27104  0D71  2D8F               	goto	l8779
 27105  0D72  0023               	movlb	3	; select bank3
 27106  0D73  0966               	comf	_knob2_prev^(0+384),w	;volatile
 27107  0D74  00D1               	movwf	??_main^(0+384)
 27108  0D75  0967               	comf	(_knob2_prev+1)^(0+384),w	;volatile
 27109  0D76  00D2               	movwf	(??_main^(0+384)+1)
 27110  0D77  0AD1               	incf	??_main^(0+384),f
 27111  0D78  1903               	skipnz
 27112  0D79  0AD2               	incf	(??_main^(0+384)+1),f
 27113  0D7A  0024               	movlb	4	; select bank4
 27114  0D7B  0832               	movf	_knob_2_pos^(0+512),w
 27115  0D7C  0023               	movlb	3	; select bank3
 27116  0D7D  0751               	addwf	??_main^(0+384),w
 27117  0D7E  00D3               	movwf	(??_main+2)^(0+384)
 27118  0D7F  0024               	movlb	4	; select bank4
 27119  0D80  0833               	movf	(_knob_2_pos+1)^(0+512),w
 27120  0D81  0023               	movlb	3	; select bank3
 27121  0D82  3D52               	addwfc	(??_main+1)^(0+384),w
 27122  0D83  00D4               	movwf	(??_main+3)^(0+384)
 27123  0D84  0854               	movf	(??_main+3)^(0+384),w
 27124  0D85  3A80               	xorlw	128
 27125  0D86  00D5               	movwf	(??_main+4)^(0+384)
 27126  0D87  307F               	movlw	127
 27127  0D88  0255               	subwf	(??_main+4)^(0+384),w
 27128  0D89  1D03               	skipz
 27129  0D8A  2D8D               	goto	u9115
 27130  0D8B  30FD               	movlw	253
 27131  0D8C  0253               	subwf	(??_main+2)^(0+384),w
 27132  0D8D                     u9115:	
 27133  0D8D  1803               	skipnc
 27134  0D8E  2DA1               	goto	l8783
 27135  0D8F                     l8779:	
 27136                           
 27137                           ;main.c: 289: knob2_prev = knob_2_pos;
 27138  0D8F  0024               	movlb	4	; select bank4
 27139  0D90  0833               	movf	(_knob_2_pos+1)^(0+512),w
 27140  0D91  0023               	movlb	3	; select bank3
 27141  0D92  00E7               	movwf	(_knob2_prev+1)^(0+384)	;volatile
 27142  0D93  0024               	movlb	4	; select bank4
 27143  0D94  0832               	movf	_knob_2_pos^(0+512),w
 27144  0D95  0023               	movlb	3	; select bank3
 27145  0D96  00E6               	movwf	_knob2_prev^(0+384)	;volatile
 27146                           
 27147                           ;main.c: 292: setFrequency(knob2_prev);
 27148  0D97  0867               	movf	(_knob2_prev+1)^(0+384),w	;volatile
 27149  0D98  0022               	movlb	2	; select bank2
 27150  0D99  00EB               	movwf	(setFrequency@rawValue+1)^(0+256)
 27151  0D9A  0023               	movlb	3	; select bank3
 27152  0D9B  0866               	movf	_knob2_prev^(0+384),w	;volatile
 27153  0D9C  0022               	movlb	2	; select bank2
 27154  0D9D  00EA               	movwf	setFrequency@rawValue^(0+256)
 27155  0D9E  31A3  2301  3188   	fcall	_setFrequency
 27156  0DA1                     l8783:	
 27157                           
 27158                           ;main.c: 293: }
 27159                           ;main.c: 304: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
 27160  0DA1  0024               	movlb	4	; select bank4
 27161  0DA2  095B               	comf	_knob3_prev^(0+512),w	;volatile
 27162  0DA3  0023               	movlb	3	; select bank3
 27163  0DA4  00D1               	movwf	??_main^(0+384)
 27164  0DA5  0024               	movlb	4	; select bank4
 27165  0DA6  095C               	comf	(_knob3_prev+1)^(0+512),w	;volatile
 27166  0DA7  0023               	movlb	3	; select bank3
 27167  0DA8  00D2               	movwf	(??_main^(0+384)+1)
 27168  0DA9  0AD1               	incf	??_main^(0+384),f
 27169  0DAA  1903               	skipnz
 27170  0DAB  0AD2               	incf	(??_main^(0+384)+1),f
 27171  0DAC  0024               	movlb	4	; select bank4
 27172  0DAD  0834               	movf	_knob_3_pos^(0+512),w
 27173  0DAE  0023               	movlb	3	; select bank3
 27174  0DAF  0751               	addwf	??_main^(0+384),w
 27175  0DB0  00D3               	movwf	(??_main+2)^(0+384)
 27176  0DB1  0024               	movlb	4	; select bank4
 27177  0DB2  0835               	movf	(_knob_3_pos+1)^(0+512),w
 27178  0DB3  0023               	movlb	3	; select bank3
 27179  0DB4  3D52               	addwfc	(??_main+1)^(0+384),w
 27180  0DB5  00D4               	movwf	(??_main+3)^(0+384)
 27181  0DB6  0854               	movf	(??_main+3)^(0+384),w
 27182  0DB7  3A80               	xorlw	128
 27183  0DB8  00D5               	movwf	(??_main+4)^(0+384)
 27184  0DB9  3080               	movlw	128
 27185  0DBA  0255               	subwf	(??_main+4)^(0+384),w
 27186  0DBB  1D03               	skipz
 27187  0DBC  2DBF               	goto	u9125
 27188  0DBD  3004               	movlw	4
 27189  0DBE  0253               	subwf	(??_main+2)^(0+384),w
 27190  0DBF                     u9125:	
 27191  0DBF  1803               	skipnc
 27192  0DC0  2DE1               	goto	l8787
 27193  0DC1  0024               	movlb	4	; select bank4
 27194  0DC2  095B               	comf	_knob3_prev^(0+512),w	;volatile
 27195  0DC3  0023               	movlb	3	; select bank3
 27196  0DC4  00D1               	movwf	??_main^(0+384)
 27197  0DC5  0024               	movlb	4	; select bank4
 27198  0DC6  095C               	comf	(_knob3_prev+1)^(0+512),w	;volatile
 27199  0DC7  0023               	movlb	3	; select bank3
 27200  0DC8  00D2               	movwf	(??_main^(0+384)+1)
 27201  0DC9  0AD1               	incf	??_main^(0+384),f
 27202  0DCA  1903               	skipnz
 27203  0DCB  0AD2               	incf	(??_main^(0+384)+1),f
 27204  0DCC  0024               	movlb	4	; select bank4
 27205  0DCD  0834               	movf	_knob_3_pos^(0+512),w
 27206  0DCE  0023               	movlb	3	; select bank3
 27207  0DCF  0751               	addwf	??_main^(0+384),w
 27208  0DD0  00D3               	movwf	(??_main+2)^(0+384)
 27209  0DD1  0024               	movlb	4	; select bank4
 27210  0DD2  0835               	movf	(_knob_3_pos+1)^(0+512),w
 27211  0DD3  0023               	movlb	3	; select bank3
 27212  0DD4  3D52               	addwfc	(??_main+1)^(0+384),w
 27213  0DD5  00D4               	movwf	(??_main+3)^(0+384)
 27214  0DD6  0854               	movf	(??_main+3)^(0+384),w
 27215  0DD7  3A80               	xorlw	128
 27216  0DD8  00D5               	movwf	(??_main+4)^(0+384)
 27217  0DD9  307F               	movlw	127
 27218  0DDA  0255               	subwf	(??_main+4)^(0+384),w
 27219  0DDB  1D03               	skipz
 27220  0DDC  2DDF               	goto	u9135
 27221  0DDD  30FD               	movlw	253
 27222  0DDE  0253               	subwf	(??_main+2)^(0+384),w
 27223  0DDF                     u9135:	
 27224  0DDF  1803               	skipnc
 27225  0DE0  2DF0               	goto	l8791
 27226  0DE1                     l8787:	
 27227                           
 27228                           ;main.c: 305: knob3_prev = knob_3_pos;
 27229  0DE1  0024               	movlb	4	; select bank4
 27230  0DE2  0835               	movf	(_knob_3_pos+1)^(0+512),w
 27231  0DE3  00DC               	movwf	(_knob3_prev+1)^(0+512)	;volatile
 27232  0DE4  0834               	movf	_knob_3_pos^(0+512),w
 27233  0DE5  00DB               	movwf	_knob3_prev^(0+512)	;volatile
 27234                           
 27235                           ;main.c: 307: setSymmetry(knob3_prev);
 27236  0DE6  085C               	movf	(_knob3_prev+1)^(0+512),w	;volatile
 27237  0DE7  0022               	movlb	2	; select bank2
 27238  0DE8  00AF               	movwf	(setSymmetry@rawValue+1)^(0+256)
 27239  0DE9  0024               	movlb	4	; select bank4
 27240  0DEA  085B               	movf	_knob3_prev^(0+512),w	;volatile
 27241  0DEB  0022               	movlb	2	; select bank2
 27242  0DEC  00AE               	movwf	setSymmetry@rawValue^(0+256)
 27243  0DED  31AC  24ED  3188   	fcall	_setSymmetry
 27244  0DF0                     l8791:	
 27245                           
 27246                           ;main.c: 314: }
 27247                           ;main.c: 316: if (oldSymmetry - symmetry >= 2 || oldSymmetry - symmetry <= -2) {
 27248  0DF0  0023               	movlb	3	; select bank3
 27249  0DF1  096A               	comf	_symmetry^(0+384),w
 27250  0DF2  00D1               	movwf	??_main^(0+384)
 27251  0DF3  096B               	comf	(_symmetry+1)^(0+384),w
 27252  0DF4  00D2               	movwf	(??_main^(0+384)+1)
 27253  0DF5  0AD1               	incf	??_main^(0+384),f
 27254  0DF6  1903               	skipnz
 27255  0DF7  0AD2               	incf	(??_main^(0+384)+1),f
 27256  0DF8  0025               	movlb	5	; select bank5
 27257  0DF9  086A               	movf	_oldSymmetry^(0+640),w
 27258  0DFA  0023               	movlb	3	; select bank3
 27259  0DFB  0751               	addwf	??_main^(0+384),w
 27260  0DFC  00D3               	movwf	(??_main+2)^(0+384)
 27261  0DFD  0025               	movlb	5	; select bank5
 27262  0DFE  086B               	movf	(_oldSymmetry+1)^(0+640),w
 27263  0DFF  0023               	movlb	3	; select bank3
 27264  0E00  3D52               	addwfc	(??_main+1)^(0+384),w
 27265  0E01  00D4               	movwf	(??_main+3)^(0+384)
 27266  0E02  0854               	movf	(??_main+3)^(0+384),w
 27267  0E03  3A80               	xorlw	128
 27268  0E04  00D5               	movwf	(??_main+4)^(0+384)
 27269  0E05  3080               	movlw	128
 27270  0E06  0255               	subwf	(??_main+4)^(0+384),w
 27271  0E07  1D03               	skipz
 27272  0E08  2E0B               	goto	u9145
 27273  0E09  3002               	movlw	2
 27274  0E0A  0253               	subwf	(??_main+2)^(0+384),w
 27275  0E0B                     u9145:	
 27276  0E0B  1803               	skipnc
 27277  0E0C  2E2A               	goto	l483
 27278  0E0D  0023               	movlb	3	; select bank3
 27279  0E0E  096A               	comf	_symmetry^(0+384),w
 27280  0E0F  00D1               	movwf	??_main^(0+384)
 27281  0E10  096B               	comf	(_symmetry+1)^(0+384),w
 27282  0E11  00D2               	movwf	(??_main^(0+384)+1)
 27283  0E12  0AD1               	incf	??_main^(0+384),f
 27284  0E13  1903               	skipnz
 27285  0E14  0AD2               	incf	(??_main^(0+384)+1),f
 27286  0E15  0025               	movlb	5	; select bank5
 27287  0E16  086A               	movf	_oldSymmetry^(0+640),w
 27288  0E17  0023               	movlb	3	; select bank3
 27289  0E18  0751               	addwf	??_main^(0+384),w
 27290  0E19  00D3               	movwf	(??_main+2)^(0+384)
 27291  0E1A  0025               	movlb	5	; select bank5
 27292  0E1B  086B               	movf	(_oldSymmetry+1)^(0+640),w
 27293  0E1C  0023               	movlb	3	; select bank3
 27294  0E1D  3D52               	addwfc	(??_main+1)^(0+384),w
 27295  0E1E  00D4               	movwf	(??_main+3)^(0+384)
 27296  0E1F  0854               	movf	(??_main+3)^(0+384),w
 27297  0E20  3A80               	xorlw	128
 27298  0E21  00D5               	movwf	(??_main+4)^(0+384)
 27299  0E22  307F               	movlw	127
 27300  0E23  0255               	subwf	(??_main+4)^(0+384),w
 27301  0E24  1D03               	skipz
 27302  0E25  2E28               	goto	u9155
 27303  0E26  30FF               	movlw	255
 27304  0E27  0253               	subwf	(??_main+2)^(0+384),w
 27305  0E28                     u9155:	
 27306  0E28  1803               	skipnc
 27307  0E29  2E2D               	goto	l8795
 27308  0E2A                     l483:	
 27309                           
 27310                           ;main.c: 318: modulation_changed = 1;
 27311  0E2A  0024               	movlb	4	; select bank4
 27312  0E2B  01CE               	clrf	_modulation_changed^(0+512)
 27313  0E2C  0ACE               	incf	_modulation_changed^(0+512),f
 27314  0E2D                     l8795:	
 27315                           
 27316                           ;main.c: 319: }
 27317                           ;main.c: 328: if (!isInitialized) {
 27318  0E2D  0020               	movlb	0	; select bank0
 27319  0E2E  0862               	movf	_isInitialized,w
 27320  0E2F  1D03               	btfss	3,2
 27321  0E30  2E36               	goto	l8799
 27322                           
 27323                           ;main.c: 330: knob4_prev = knob_4_pos;
 27324  0E31  0024               	movlb	4	; select bank4
 27325  0E32  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27326  0E33  00DE               	movwf	(_knob4_prev+1)^(0+512)	;volatile
 27327  0E34  0836               	movf	_knob_4_pos^(0+512),w
 27328  0E35  00DD               	movwf	_knob4_prev^(0+512)	;volatile
 27329  0E36                     l8799:	
 27330                           
 27331                           ;main.c: 332: }
 27332                           ;main.c: 333: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
 27333  0E36  0024               	movlb	4	; select bank4
 27334  0E37  095D               	comf	_knob4_prev^(0+512),w	;volatile
 27335  0E38  0023               	movlb	3	; select bank3
 27336  0E39  00D1               	movwf	??_main^(0+384)
 27337  0E3A  0024               	movlb	4	; select bank4
 27338  0E3B  095E               	comf	(_knob4_prev+1)^(0+512),w	;volatile
 27339  0E3C  0023               	movlb	3	; select bank3
 27340  0E3D  00D2               	movwf	(??_main^(0+384)+1)
 27341  0E3E  0AD1               	incf	??_main^(0+384),f
 27342  0E3F  1903               	skipnz
 27343  0E40  0AD2               	incf	(??_main^(0+384)+1),f
 27344  0E41  0024               	movlb	4	; select bank4
 27345  0E42  0836               	movf	_knob_4_pos^(0+512),w
 27346  0E43  0023               	movlb	3	; select bank3
 27347  0E44  0751               	addwf	??_main^(0+384),w
 27348  0E45  00D3               	movwf	(??_main+2)^(0+384)
 27349  0E46  0024               	movlb	4	; select bank4
 27350  0E47  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27351  0E48  0023               	movlb	3	; select bank3
 27352  0E49  3D52               	addwfc	(??_main+1)^(0+384),w
 27353  0E4A  00D4               	movwf	(??_main+3)^(0+384)
 27354  0E4B  0854               	movf	(??_main+3)^(0+384),w
 27355  0E4C  3A80               	xorlw	128
 27356  0E4D  00D5               	movwf	(??_main+4)^(0+384)
 27357  0E4E  3080               	movlw	128
 27358  0E4F  0255               	subwf	(??_main+4)^(0+384),w
 27359  0E50  1D03               	skipz
 27360  0E51  2E54               	goto	u9175
 27361  0E52  3004               	movlw	4
 27362  0E53  0253               	subwf	(??_main+2)^(0+384),w
 27363  0E54                     u9175:	
 27364  0E54  1803               	skipnc
 27365  0E55  2E76               	goto	l8803
 27366  0E56  0024               	movlb	4	; select bank4
 27367  0E57  095D               	comf	_knob4_prev^(0+512),w	;volatile
 27368  0E58  0023               	movlb	3	; select bank3
 27369  0E59  00D1               	movwf	??_main^(0+384)
 27370  0E5A  0024               	movlb	4	; select bank4
 27371  0E5B  095E               	comf	(_knob4_prev+1)^(0+512),w	;volatile
 27372  0E5C  0023               	movlb	3	; select bank3
 27373  0E5D  00D2               	movwf	(??_main^(0+384)+1)
 27374  0E5E  0AD1               	incf	??_main^(0+384),f
 27375  0E5F  1903               	skipnz
 27376  0E60  0AD2               	incf	(??_main^(0+384)+1),f
 27377  0E61  0024               	movlb	4	; select bank4
 27378  0E62  0836               	movf	_knob_4_pos^(0+512),w
 27379  0E63  0023               	movlb	3	; select bank3
 27380  0E64  0751               	addwf	??_main^(0+384),w
 27381  0E65  00D3               	movwf	(??_main+2)^(0+384)
 27382  0E66  0024               	movlb	4	; select bank4
 27383  0E67  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27384  0E68  0023               	movlb	3	; select bank3
 27385  0E69  3D52               	addwfc	(??_main+1)^(0+384),w
 27386  0E6A  00D4               	movwf	(??_main+3)^(0+384)
 27387  0E6B  0854               	movf	(??_main+3)^(0+384),w
 27388  0E6C  3A80               	xorlw	128
 27389  0E6D  00D5               	movwf	(??_main+4)^(0+384)
 27390  0E6E  307F               	movlw	127
 27391  0E6F  0255               	subwf	(??_main+4)^(0+384),w
 27392  0E70  1D03               	skipz
 27393  0E71  2E74               	goto	u9185
 27394  0E72  30FD               	movlw	253
 27395  0E73  0253               	subwf	(??_main+2)^(0+384),w
 27396  0E74                     u9185:	
 27397  0E74  1803               	skipnc
 27398  0E75  2EC3               	goto	l8809
 27399  0E76                     l8803:	
 27400                           
 27401                           ;main.c: 335: knob4_prev = knob_4_pos;
 27402  0E76  0024               	movlb	4	; select bank4
 27403  0E77  0837               	movf	(_knob_4_pos+1)^(0+512),w
 27404  0E78  00DE               	movwf	(_knob4_prev+1)^(0+512)	;volatile
 27405  0E79  0836               	movf	_knob_4_pos^(0+512),w
 27406  0E7A  00DD               	movwf	_knob4_prev^(0+512)	;volatile
 27407                           
 27408                           ;main.c: 336: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
 27409  0E7B  3040               	movlw	64
 27410  0E7C  0021               	movlb	1	; select bank1
 27411  0E7D  00EA               	movwf	map@out_max^(0+128)
 27412  0E7E  3030               	movlw	48
 27413  0E7F  00EB               	movwf	(map@out_max+1)^(0+128)
 27414  0E80  3045               	movlw	69
 27415  0E81  00EC               	movwf	(map@out_max+2)^(0+128)
 27416  0E82  3000               	movlw	0
 27417  0E83  00E7               	movwf	map@out_min^(0+128)
 27418  0E84  3034               	movlw	52
 27419  0E85  00E8               	movwf	(map@out_min+1)^(0+128)
 27420  0E86  3043               	movlw	67
 27421  0E87  00E9               	movwf	(map@out_min+2)^(0+128)
 27422  0E88  30C0               	movlw	192
 27423  0E89  00E4               	movwf	map@in_max^(0+128)
 27424  0E8A  307F               	movlw	127
 27425  0E8B  00E5               	movwf	(map@in_max+1)^(0+128)
 27426  0E8C  3044               	movlw	68
 27427  0E8D  00E6               	movwf	(map@in_max+2)^(0+128)
 27428  0E8E  3000               	movlw	0
 27429  0E8F  00E1               	movwf	map@in_min^(0+128)
 27430  0E90  3000               	movlw	0
 27431  0E91  00E2               	movwf	(map@in_min+1)^(0+128)
 27432  0E92  3000               	movlw	0
 27433  0E93  00E3               	movwf	(map@in_min+2)^(0+128)
 27434  0E94  0024               	movlb	4	; select bank4
 27435  0E95  085E               	movf	(_knob4_prev+1)^(0+512),w	;volatile
 27436  0E96  0021               	movlb	1	; select bank1
 27437  0E97  00A9               	movwf	(___awtoft@c+1)^(0+128)
 27438  0E98  0024               	movlb	4	; select bank4
 27439  0E99  085D               	movf	_knob4_prev^(0+512),w	;volatile
 27440  0E9A  0021               	movlb	1	; select bank1
 27441  0E9B  00A8               	movwf	___awtoft@c^(0+128)
 27442  0E9C  31B2  22F0  3188   	fcall	___awtoft
 27443  0E9F  0021               	movlb	1	; select bank1
 27444  0EA0  0828               	movf	?___awtoft^(0+128),w
 27445  0EA1  00DE               	movwf	map@x^(0+128)
 27446  0EA2  0829               	movf	(?___awtoft+1)^(0+128),w
 27447  0EA3  00DF               	movwf	(map@x+1)^(0+128)
 27448  0EA4  082A               	movf	(?___awtoft+2)^(0+128),w
 27449  0EA5  00E0               	movwf	(map@x+2)^(0+128)
 27450  0EA6  31A1  21EB  3188   	fcall	_map
 27451  0EA9  0021               	movlb	1	; select bank1
 27452  0EAA  085E               	movf	?_map^(0+128),w
 27453  0EAB  0022               	movlb	2	; select bank2
 27454  0EAC  00A0               	movwf	___fttol@f1^(0+256)
 27455  0EAD  0021               	movlb	1	; select bank1
 27456  0EAE  085F               	movf	(?_map+1)^(0+128),w
 27457  0EAF  0022               	movlb	2	; select bank2
 27458  0EB0  00A1               	movwf	(___fttol@f1+1)^(0+256)
 27459  0EB1  0021               	movlb	1	; select bank1
 27460  0EB2  0860               	movf	(?_map+2)^(0+128),w
 27461  0EB3  0022               	movlb	2	; select bank2
 27462  0EB4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 27463  0EB5  31A1  2164  3188   	fcall	___fttol
 27464  0EB8  0022               	movlb	2	; select bank2
 27465  0EB9  0821               	movf	(?___fttol^(0+256)+1),w
 27466  0EBA  0020               	movlb	0	; select bank0
 27467  0EBB  00EB               	movwf	_baseline_mod_time+1	;volatile
 27468  0EBC  0022               	movlb	2	; select bank2
 27469  0EBD  0820               	movf	?___fttol^(0+256),w
 27470  0EBE  0020               	movlb	0	; select bank0
 27471  0EBF  00EA               	movwf	_baseline_mod_time	;volatile
 27472                           
 27473                           ;main.c: 337: updateTapTime();
 27474  0EC0  3187  27F7  3188   	fcall	_updateTapTime
 27475  0EC3                     l8809:	
 27476                           
 27477                           ;main.c: 339: }
 27478                           ;main.c: 341: if (oldBaseTime - baseline_mod_time >= 1 || oldBaseTime - baseline_mod_tim
      +                          e <= -1) {
 27479  0EC3  0020               	movlb	0	; select bank0
 27480  0EC4  096A               	comf	_baseline_mod_time,w	;volatile
 27481  0EC5  0023               	movlb	3	; select bank3
 27482  0EC6  00D1               	movwf	??_main^(0+384)
 27483  0EC7  0020               	movlb	0	; select bank0
 27484  0EC8  096B               	comf	_baseline_mod_time+1,w	;volatile
 27485  0EC9  0023               	movlb	3	; select bank3
 27486  0ECA  00D2               	movwf	(??_main^(0+384)+1)
 27487  0ECB  0AD1               	incf	??_main^(0+384),f
 27488  0ECC  1903               	skipnz
 27489  0ECD  0AD2               	incf	(??_main^(0+384)+1),f
 27490  0ECE  0025               	movlb	5	; select bank5
 27491  0ECF  0868               	movf	_oldBaseTime^(0+640),w
 27492  0ED0  0023               	movlb	3	; select bank3
 27493  0ED1  0751               	addwf	??_main^(0+384),w
 27494  0ED2  00D3               	movwf	(??_main+2)^(0+384)
 27495  0ED3  0025               	movlb	5	; select bank5
 27496  0ED4  0869               	movf	(_oldBaseTime+1)^(0+640),w
 27497  0ED5  0023               	movlb	3	; select bank3
 27498  0ED6  3D52               	addwfc	(??_main+1)^(0+384),w
 27499  0ED7  00D4               	movwf	(??_main+3)^(0+384)
 27500  0ED8  0854               	movf	(??_main+3)^(0+384),w
 27501  0ED9  3A80               	xorlw	128
 27502  0EDA  00D5               	movwf	(??_main+4)^(0+384)
 27503  0EDB  3080               	movlw	128
 27504  0EDC  0255               	subwf	(??_main+4)^(0+384),w
 27505  0EDD  1D03               	skipz
 27506  0EDE  2EE1               	goto	u9195
 27507  0EDF  3001               	movlw	1
 27508  0EE0  0253               	subwf	(??_main+2)^(0+384),w
 27509  0EE1                     u9195:	
 27510  0EE1  1803               	skipnc
 27511  0EE2  2EF9               	goto	l490
 27512  0EE3  0020               	movlb	0	; select bank0
 27513  0EE4  096A               	comf	_baseline_mod_time,w	;volatile
 27514  0EE5  0023               	movlb	3	; select bank3
 27515  0EE6  00D1               	movwf	??_main^(0+384)
 27516  0EE7  0020               	movlb	0	; select bank0
 27517  0EE8  096B               	comf	_baseline_mod_time+1,w	;volatile
 27518  0EE9  0023               	movlb	3	; select bank3
 27519  0EEA  00D2               	movwf	(??_main^(0+384)+1)
 27520  0EEB  0AD1               	incf	??_main^(0+384),f
 27521  0EEC  1903               	skipnz
 27522  0EED  0AD2               	incf	(??_main^(0+384)+1),f
 27523  0EEE  0025               	movlb	5	; select bank5
 27524  0EEF  0868               	movf	_oldBaseTime^(0+640),w
 27525  0EF0  0023               	movlb	3	; select bank3
 27526  0EF1  0751               	addwf	??_main^(0+384),w
 27527  0EF2  0852               	movf	(??_main+1)^(0+384),w
 27528  0EF3  1803               	skipnc
 27529  0EF4  0A52               	incf	(??_main+1)^(0+384),w
 27530  0EF5  0025               	movlb	5	; select bank5
 27531  0EF6  0769               	addwf	(_oldBaseTime+1)^(0+640),w
 27532  0EF7  1F89               	btfss	9,7
 27533  0EF8  2EFC               	goto	l8813
 27534  0EF9                     l490:	
 27535                           
 27536                           ;main.c: 343: mod_time_changed = 1;
 27537  0EF9  0024               	movlb	4	; select bank4
 27538  0EFA  01EC               	clrf	_mod_time_changed^(0+512)
 27539  0EFB  0AEC               	incf	_mod_time_changed^(0+512),f
 27540  0EFC                     l8813:	
 27541                           
 27542                           ;main.c: 345: }
 27543                           ;main.c: 348: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
 27544  0EFC  0023               	movlb	3	; select bank3
 27545  0EFD  0968               	comf	_knob5_prev^(0+384),w	;volatile
 27546  0EFE  00D1               	movwf	??_main^(0+384)
 27547  0EFF  0969               	comf	(_knob5_prev+1)^(0+384),w	;volatile
 27548  0F00  00D2               	movwf	(??_main^(0+384)+1)
 27549  0F01  0AD1               	incf	??_main^(0+384),f
 27550  0F02  1903               	skipnz
 27551  0F03  0AD2               	incf	(??_main^(0+384)+1),f
 27552  0F04  0024               	movlb	4	; select bank4
 27553  0F05  0838               	movf	_knob_5_pos^(0+512),w
 27554  0F06  0023               	movlb	3	; select bank3
 27555  0F07  0751               	addwf	??_main^(0+384),w
 27556  0F08  00D3               	movwf	(??_main+2)^(0+384)
 27557  0F09  0024               	movlb	4	; select bank4
 27558  0F0A  0839               	movf	(_knob_5_pos+1)^(0+512),w
 27559  0F0B  0023               	movlb	3	; select bank3
 27560  0F0C  3D52               	addwfc	(??_main+1)^(0+384),w
 27561  0F0D  00D4               	movwf	(??_main+3)^(0+384)
 27562  0F0E  0854               	movf	(??_main+3)^(0+384),w
 27563  0F0F  3A80               	xorlw	128
 27564  0F10  00D5               	movwf	(??_main+4)^(0+384)
 27565  0F11  3080               	movlw	128
 27566  0F12  0255               	subwf	(??_main+4)^(0+384),w
 27567  0F13  1D03               	skipz
 27568  0F14  2F17               	goto	u9215
 27569  0F15  3004               	movlw	4
 27570  0F16  0253               	subwf	(??_main+2)^(0+384),w
 27571  0F17                     u9215:	
 27572  0F17  1803               	skipnc
 27573  0F18  2F36               	goto	l8817
 27574  0F19  0023               	movlb	3	; select bank3
 27575  0F1A  0968               	comf	_knob5_prev^(0+384),w	;volatile
 27576  0F1B  00D1               	movwf	??_main^(0+384)
 27577  0F1C  0969               	comf	(_knob5_prev+1)^(0+384),w	;volatile
 27578  0F1D  00D2               	movwf	(??_main^(0+384)+1)
 27579  0F1E  0AD1               	incf	??_main^(0+384),f
 27580  0F1F  1903               	skipnz
 27581  0F20  0AD2               	incf	(??_main^(0+384)+1),f
 27582  0F21  0024               	movlb	4	; select bank4
 27583  0F22  0838               	movf	_knob_5_pos^(0+512),w
 27584  0F23  0023               	movlb	3	; select bank3
 27585  0F24  0751               	addwf	??_main^(0+384),w
 27586  0F25  00D3               	movwf	(??_main+2)^(0+384)
 27587  0F26  0024               	movlb	4	; select bank4
 27588  0F27  0839               	movf	(_knob_5_pos+1)^(0+512),w
 27589  0F28  0023               	movlb	3	; select bank3
 27590  0F29  3D52               	addwfc	(??_main+1)^(0+384),w
 27591  0F2A  00D4               	movwf	(??_main+3)^(0+384)
 27592  0F2B  0854               	movf	(??_main+3)^(0+384),w
 27593  0F2C  3A80               	xorlw	128
 27594  0F2D  00D5               	movwf	(??_main+4)^(0+384)
 27595  0F2E  307F               	movlw	127
 27596  0F2F  0255               	subwf	(??_main+4)^(0+384),w
 27597  0F30  1D03               	skipz
 27598  0F31  2F34               	goto	u9225
 27599  0F32  30FD               	movlw	253
 27600  0F33  0253               	subwf	(??_main+2)^(0+384),w
 27601  0F34                     u9225:	
 27602  0F34  1803               	skipnc
 27603  0F35  2F8E               	goto	l8823
 27604  0F36                     l8817:	
 27605                           
 27606                           ;main.c: 349: knob5_prev = knob_5_pos;
 27607  0F36  0024               	movlb	4	; select bank4
 27608  0F37  0839               	movf	(_knob_5_pos+1)^(0+512),w
 27609  0F38  0023               	movlb	3	; select bank3
 27610  0F39  00E9               	movwf	(_knob5_prev+1)^(0+384)	;volatile
 27611  0F3A  0024               	movlb	4	; select bank4
 27612  0F3B  0838               	movf	_knob_5_pos^(0+512),w
 27613  0F3C  0023               	movlb	3	; select bank3
 27614  0F3D  00E8               	movwf	_knob5_prev^(0+384)	;volatile
 27615                           
 27616                           ;main.c: 350: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
 27617  0F3E  3000               	movlw	0
 27618  0F3F  0021               	movlb	1	; select bank1
 27619  0F40  00EA               	movwf	map@out_max^(0+128)
 27620  0F41  3000               	movlw	0
 27621  0F42  00EB               	movwf	(map@out_max+1)^(0+128)
 27622  0F43  3000               	movlw	0
 27623  0F44  00EC               	movwf	(map@out_max+2)^(0+128)
 27624  0F45  3060               	movlw	96
 27625  0F46  00E7               	movwf	map@out_min^(0+128)
 27626  0F47  309F               	movlw	159
 27627  0F48  00E8               	movwf	(map@out_min+1)^(0+128)
 27628  0F49  3044               	movlw	68
 27629  0F4A  00E9               	movwf	(map@out_min+2)^(0+128)
 27630  0F4B  30C0               	movlw	192
 27631  0F4C  00E4               	movwf	map@in_max^(0+128)
 27632  0F4D  307F               	movlw	127
 27633  0F4E  00E5               	movwf	(map@in_max+1)^(0+128)
 27634  0F4F  3044               	movlw	68
 27635  0F50  00E6               	movwf	(map@in_max+2)^(0+128)
 27636  0F51  3000               	movlw	0
 27637  0F52  00E1               	movwf	map@in_min^(0+128)
 27638  0F53  3000               	movlw	0
 27639  0F54  00E2               	movwf	(map@in_min+1)^(0+128)
 27640  0F55  3000               	movlw	0
 27641  0F56  00E3               	movwf	(map@in_min+2)^(0+128)
 27642  0F57  0023               	movlb	3	; select bank3
 27643  0F58  0869               	movf	(_knob5_prev+1)^(0+384),w	;volatile
 27644  0F59  0021               	movlb	1	; select bank1
 27645  0F5A  00A9               	movwf	(___awtoft@c+1)^(0+128)
 27646  0F5B  0023               	movlb	3	; select bank3
 27647  0F5C  0868               	movf	_knob5_prev^(0+384),w	;volatile
 27648  0F5D  0021               	movlb	1	; select bank1
 27649  0F5E  00A8               	movwf	___awtoft@c^(0+128)
 27650  0F5F  31B2  22F0  3188   	fcall	___awtoft
 27651  0F62  0021               	movlb	1	; select bank1
 27652  0F63  0828               	movf	?___awtoft^(0+128),w
 27653  0F64  00DE               	movwf	map@x^(0+128)
 27654  0F65  0829               	movf	(?___awtoft+1)^(0+128),w
 27655  0F66  00DF               	movwf	(map@x+1)^(0+128)
 27656  0F67  082A               	movf	(?___awtoft+2)^(0+128),w
 27657  0F68  00E0               	movwf	(map@x+2)^(0+128)
 27658  0F69  31A1  21EB  3188   	fcall	_map
 27659  0F6C  0021               	movlb	1	; select bank1
 27660  0F6D  085E               	movf	?_map^(0+128),w
 27661  0F6E  0022               	movlb	2	; select bank2
 27662  0F6F  00A0               	movwf	___fttol@f1^(0+256)
 27663  0F70  0021               	movlb	1	; select bank1
 27664  0F71  085F               	movf	(?_map+1)^(0+128),w
 27665  0F72  0022               	movlb	2	; select bank2
 27666  0F73  00A1               	movwf	(___fttol@f1+1)^(0+256)
 27667  0F74  0021               	movlb	1	; select bank1
 27668  0F75  0860               	movf	(?_map+2)^(0+128),w
 27669  0F76  0022               	movlb	2	; select bank2
 27670  0F77  00A2               	movwf	(___fttol@f1+2)^(0+256)
 27671  0F78  31A1  2164  3188   	fcall	___fttol
 27672  0F7B  0022               	movlb	2	; select bank2
 27673  0F7C  0821               	movf	(?___fttol^(0+256)+1),w
 27674  0F7D  0025               	movlb	5	; select bank5
 27675  0F7E  00DB               	movwf	(_adjusted_pot_value+1)^(0+640)
 27676  0F7F  0022               	movlb	2	; select bank2
 27677  0F80  0820               	movf	?___fttol^(0+256),w
 27678  0F81  0025               	movlb	5	; select bank5
 27679  0F82  00DA               	movwf	_adjusted_pot_value^(0+640)
 27680                           
 27681                           ;main.c: 351: setDepth(knob5_prev);
 27682  0F83  0023               	movlb	3	; select bank3
 27683  0F84  0869               	movf	(_knob5_prev+1)^(0+384),w	;volatile
 27684  0F85  0021               	movlb	1	; select bank1
 27685  0F86  00A3               	movwf	(setDepth@rawValue+1)^(0+128)
 27686  0F87  0023               	movlb	3	; select bank3
 27687  0F88  0868               	movf	_knob5_prev^(0+384),w	;volatile
 27688  0F89  0021               	movlb	1	; select bank1
 27689  0F8A  00A2               	movwf	setDepth@rawValue^(0+128)
 27690  0F8B  31B0  2060  3188   	fcall	_setDepth
 27691  0F8E                     l8823:	
 27692                           
 27693                           ;main.c: 353: }
 27694                           ;main.c: 358: if (mod_time_changed == 1) {
 27695  0F8E  0024               	movlb	4	; select bank4
 27696  0F8F  036C               	decf	_mod_time_changed^(0+512),w
 27697  0F90  1D03               	btfss	3,2
 27698  0F91  2FC2               	goto	l8835
 27699                           
 27700                           ;main.c: 360: delay_time = baseline_mod_time;
 27701  0F92  0020               	movlb	0	; select bank0
 27702  0F93  086A               	movf	_baseline_mod_time,w	;volatile
 27703  0F94  00E6               	movwf	_delay_time	;volatile
 27704  0F95  086B               	movf	_baseline_mod_time+1,w	;volatile
 27705  0F96  00E7               	movwf	_delay_time+1	;volatile
 27706  0F97  0D89               	rlf	9,f
 27707  0F98  3B89               	subwfb	9,f
 27708  0F99  0989               	comf	9,f
 27709  0F9A  00E8               	movwf	_delay_time+2	;volatile
 27710  0F9B  00E9               	movwf	_delay_time+3	;volatile
 27711                           
 27712                           ;main.c: 361: delay_time = set_subdivision(baseline_mod_time, top_push_state);
 27713  0F9C  086B               	movf	_baseline_mod_time+1,w	;volatile
 27714  0F9D  0022               	movlb	2	; select bank2
 27715  0F9E  00AF               	movwf	(set_subdivision@x+1)^(0+256)
 27716  0F9F  0020               	movlb	0	; select bank0
 27717  0FA0  086A               	movf	_baseline_mod_time,w	;volatile
 27718  0FA1  0022               	movlb	2	; select bank2
 27719  0FA2  00AE               	movwf	set_subdivision@x^(0+256)
 27720  0FA3  0020               	movlb	0	; select bank0
 27721  0FA4  086D               	movf	_top_push_state+1,w
 27722  0FA5  0022               	movlb	2	; select bank2
 27723  0FA6  00B1               	movwf	(set_subdivision@y+1)^(0+256)
 27724  0FA7  0020               	movlb	0	; select bank0
 27725  0FA8  086C               	movf	_top_push_state,w
 27726  0FA9  0022               	movlb	2	; select bank2
 27727  0FAA  00B0               	movwf	set_subdivision@y^(0+256)
 27728  0FAB  31A2  2276  3188   	fcall	_set_subdivision
 27729  0FAE  0022               	movlb	2	; select bank2
 27730  0FAF  082E               	movf	?_set_subdivision^(0+256),w
 27731  0FB0  0020               	movlb	0	; select bank0
 27732  0FB1  00E6               	movwf	_delay_time	;volatile
 27733  0FB2  0022               	movlb	2	; select bank2
 27734  0FB3  082F               	movf	(?_set_subdivision+1)^(0+256),w
 27735  0FB4  0020               	movlb	0	; select bank0
 27736  0FB5  00E7               	movwf	_delay_time+1	;volatile
 27737  0FB6  0D89               	rlf	9,f
 27738  0FB7  3B89               	subwfb	9,f
 27739  0FB8  0989               	comf	9,f
 27740  0FB9  00E8               	movwf	_delay_time+2	;volatile
 27741  0FBA  00E9               	movwf	_delay_time+3	;volatile
 27742                           
 27743                           ;main.c: 362: getModulationDelayTime();
 27744  0FBB  31AA  221D  3188   	fcall	_getModulationDelayTime
 27745                           
 27746                           ;main.c: 363: modulation_changed = 1;
 27747  0FBE  0024               	movlb	4	; select bank4
 27748  0FBF  01CE               	clrf	_modulation_changed^(0+512)
 27749  0FC0  0ACE               	incf	_modulation_changed^(0+512),f
 27750                           
 27751                           ;main.c: 364: mod_time_changed = 0;
 27752  0FC1  01EC               	clrf	_mod_time_changed^(0+512)
 27753  0FC2                     l8835:	
 27754                           
 27755                           ;main.c: 366: }
 27756                           ;main.c: 369: if ((modArray[120] != bottom_push_state || modArray[121] != symmetry || mo
      +                          dArray[122] != modulationSubdivision)) {
 27757  0FC2  307A               	movlw	122
 27758  0FC3  0086               	movwf	6
 27759  0FC4  3024               	movlw	36
 27760  0FC5  0087               	movwf	7
 27761  0FC6  3F40               	moviw [0]fsr1
 27762  0FC7  0023               	movlb	3	; select bank3
 27763  0FC8  00D1               	movwf	??_main^(0+384)
 27764  0FC9  3F41               	moviw [1]fsr1
 27765  0FCA  00D2               	movwf	(??_main^(0+384)+1)
 27766  0FCB  0863               	movf	(_bottom_push_state+1)^(0+384),w
 27767  0FCC  0652               	xorwf	(??_main+1)^(0+384),w
 27768  0FCD  1D03               	skipz
 27769  0FCE  2FD1               	goto	u9245
 27770  0FCF  0862               	movf	_bottom_push_state^(0+384),w
 27771  0FD0  0651               	xorwf	??_main^(0+384),w
 27772  0FD1                     u9245:	
 27773  0FD1  1D03               	skipz
 27774  0FD2  2FF7               	goto	l8841
 27775  0FD3  307C               	movlw	124
 27776  0FD4  0086               	movwf	6
 27777  0FD5  3024               	movlw	36
 27778  0FD6  0087               	movwf	7
 27779  0FD7  3F40               	moviw [0]fsr1
 27780  0FD8  00D1               	movwf	??_main^(0+384)
 27781  0FD9  3F41               	moviw [1]fsr1
 27782  0FDA  00D2               	movwf	(??_main^(0+384)+1)
 27783  0FDB  086B               	movf	(_symmetry+1)^(0+384),w
 27784  0FDC  0652               	xorwf	(??_main+1)^(0+384),w
 27785  0FDD  1D03               	skipz
 27786  0FDE  2FE1               	goto	u9255
 27787  0FDF  086A               	movf	_symmetry^(0+384),w
 27788  0FE0  0651               	xorwf	??_main^(0+384),w
 27789  0FE1                     u9255:	
 27790  0FE1  1D03               	skipz
 27791  0FE2  2FF7               	goto	l8841
 27792  0FE3  307E               	movlw	126
 27793  0FE4  0086               	movwf	6
 27794  0FE5  3024               	movlw	36
 27795  0FE6  0087               	movwf	7
 27796  0FE7  3F40               	moviw [0]fsr1
 27797  0FE8  00D1               	movwf	??_main^(0+384)
 27798  0FE9  3F41               	moviw [1]fsr1
 27799  0FEA  00D2               	movwf	(??_main^(0+384)+1)
 27800  0FEB  0024               	movlb	4	; select bank4
 27801  0FEC  0843               	movf	(_modulationSubdivision+1)^(0+512),w
 27802  0FED  0023               	movlb	3	; select bank3
 27803  0FEE  0652               	xorwf	(??_main+1)^(0+384),w
 27804  0FEF  1D03               	skipz
 27805  0FF0  2FF5               	goto	u9265
 27806  0FF1  0024               	movlb	4	; select bank4
 27807  0FF2  0842               	movf	_modulationSubdivision^(0+512),w
 27808  0FF3  0023               	movlb	3	; select bank3
 27809  0FF4  0651               	xorwf	??_main^(0+384),w
 27810  0FF5                     u9265:	
 27811  0FF5  1903               	skipnz
 27812  0FF6  2FFC               	goto	L28
 27813  0FF7                     l8841:	
 27814                           
 27815                           ;main.c: 370: updateModulationArray();
 27816  0FF7  3183  23CF         	fcall	_updateModulationArray
 27817                           
 27818                           ;main.c: 371: isInitialized = 1;
 27819  0FF9  0020               	movlb	0	; select bank0
 27820  0FFA  01E2               	clrf	_isInitialized
 27821  0FFB  0AE2               	incf	_isInitialized,f
 27822  0FFC                     L28:	
 27823  0FFC  3199  2977         	goto	l8609
 27824  0FFE                     L27:	
 27825  0FFE                     __end_of_main:	
 27826  0FFE  3199  29BC         	ljmp	l8631


Data Sizes:
    Strings     0
    Constant    84
    Data        46
    BSS         386
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      80
    BANK1            80     80      80
    BANK2            80     79      80
    BANK3            80     66      80
    BANK4            80      0      80
    BANK5            80      0      78
    BANK6            80      0      64
    BANK7            80      0      44
    BANK8            80      0      64
    BANK9            80      0      64
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(2) Largest target is 30
		 -> getPreset@presets(BANK3[30]), savePreset@presets(BANK0[30]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 30
		 -> savePreset@presets(BANK0[30]), 

    USARTReadBuffer@buff	PTR unsigned char  size(1) Largest target is 64
		 -> midiBuff(BANK6[64]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _savePreset->_SetBitMask
    i1_HEF_ByteArrayRead->i1_FLASH_ReadWord
    _SetBitMask->i1___wmul
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _saveState->_savePreset
    _savePreset->_SetBitMask
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    _setSymmetry->_map
    _map->___ftdiv
    ___lltoft->___ftpack
    _setDepth->_updateDepth
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    ___lbtoft->___ftpack
    _USARTReadBuffer->_USARTReadData
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_setFrequency
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modCos
    _modCos->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _setVolume->_scaleA10kPot
    _setVolume->_scaleiA10kPot
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _setSymmetry->___fttol
    _setFrequency->_scaleA100kPot
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _initSwitchTap->_getTapTime
    _initSwitchBypass->_getSwitchBypassState
    _getModulationDelayTime->___fttol
    _calcCosArray->_cos
    _cos->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___ftsub->_floor
    _InitWaveform->_getWaveFormState
    _InitSubdivision->_getSubdivisionState
    _initStateManager->_getCurrentState
    _getCurrentState->_getPreset
    _getPreset->_GetBitMask
    _GetBitMask->___wmul
    ___wmul->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _setVolume->_scaleA10kPot
    _setVolume->_scaleiA10kPot
    _setFrequency->_scaleA100kPot
    _getCurrentState->_getPreset

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0 1367539
                                             49 BANK3     17    17      0
                _ConfigureOscillator
                            _InitApp
                    _InitSubdivision
                       _InitWaveform
                     _InitializeTaps
                 _USARTDataAvailable
                          _USARTInit
                    _USARTReadBuffer
                            ___aldiv
                           ___awtoft
                            ___fttol
                           ___lbtoft
                        _adc_convert
                       _calcCosArray
                           _getDepth
                       _getFrequency
             _getModulationDelayTime
                        _getSymmetry
                          _getVolume
                   _initSwitchBypass
                      _initSwitchTap
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                           _setDepth
                       _setFrequency
                 _setLongBypassState
               _setSwitchBypassState
                        _setSymmetry
                          _setVolume
                    _set_leds_bottom
                       _set_leds_top
                    _set_subdivision
              _updateModulationArray
             _updateSubdivisionState
                 _updateSwitchBypass
                    _updateSwitchTap
                      _updateTapTime
                _updateWaveFormState
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5308
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   10528
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   24335
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
                      _updateTapTime
 ---------------------------------------------------------------------------------
 (1) _updateTapTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     194
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     632
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   1     1      0   27866
                                             28 BANK1      1     1      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     408
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   23348
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    8391
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4150
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4241
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    7918
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
                    _updatePedalMode
 ---------------------------------------------------------------------------------
 (3) _updatePedalMode                                      1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    2676
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2632
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2610
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               12    12      0  151672
                                             48 BANK2     12    12      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modCos
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   26866
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33267
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modCos
 ---------------------------------------------------------------------------------
 (3) _modCos                                              20    14      6   29586
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   27098
                                             34 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              20    14      6   26926
                                             14 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   12540
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _setVolume                                            8     6      2  301284
                                             74 BANK2      2     0      2
                                              9 BANK3      6     6      0
                           ___awtoft
                       _scaleA10kPot
                      _scaleiA10kPot
                       _updateVolume
 ---------------------------------------------------------------------------------
 (2) _updateVolume                                         2     0      2      86
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _scaleiA10kPot                                       12     9      3  153052
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _scaleA10kPot                                        12     9      3  143964
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _setSymmetry                                          2     0      2   29935
                                             14 BANK2      2     0      2
                           ___awtoft
                            ___fttol
                                _map
                    _updateFrequency
 ---------------------------------------------------------------------------------
 (2) _map                                                 18     3     15   23947
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _setFrequency                                         8     6      2  154073
                                             74 BANK2      5     3      2
                           ___awtoft
                            ___ftadd
                            ___ftneg
                      _scaleA100kPot
                    _updateFrequency
 ---------------------------------------------------------------------------------
 (2) _updateFrequency                                      2     0      2     150
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _scaleA100kPot                                       12     9      3  140607
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 18    12      6  126391
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     3      3   39184
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 13    10      3   70024
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                               10     5      5    5829
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    2320
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _setDepth                                             2     0      2     172
                                              2 BANK1      2     0      2
                        _updateDepth
 ---------------------------------------------------------------------------------
 (2) _updateDepth                                          2     0      2      86
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3315
                                             18 BANK1      1     1      0
                       _set_leds_top
             _updateSubdivisionState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _updateSubdivisionState                               1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2285
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                _updateWaveFormState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _updateWaveFormState                                  1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initSwitchTap                                        0     0      0    6761
                         _getTapTime
 ---------------------------------------------------------------------------------
 (2) _getTapTime                                           4     0      4    6761
                                             52 BANK2      4     0      4
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    9160
                                             56 BANK2      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2376
                                             21 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                3     1      2    1734
                                             18 BANK1      3     1      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1495
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     296
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     2      0      45
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 4     2      2    6761
                                             52 BANK2      4     2      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getVolume                                            2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getSymmetry                                          2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               0     0      0   13658
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getFrequency                                         2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _getDepth                                             2     0      2    6761
                                             52 BANK2      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _calcCosArray                                         8     8      0   95455
                                             50 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3   76595
                                             44 BANK2      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 14    11      3   65786
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3   15623
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     480
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1724
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___lbtoft (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    3464
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2453
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     3      7   17312
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    6583
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    7574
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    7123
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    1965
                                             30 BANK1      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    5539
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3942
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      22
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             8     5      3    2209
                                              8 BANK1      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2187
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _USARTReadBuffer                                      7     5      2     207
                                              2 BANK1      7     5      2
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (2) _USARTReadData                                        2     2      0      23
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      86
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _USARTDataAvailable                                   1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      68
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitWaveform                                         1     1      0    7551
                                             56 BANK2      1     1      0
                   _getWaveFormState
                    _set_leds_bottom
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     790
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getWaveFormState                                     4     2      2    6761
                                             52 BANK2      4     2      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _InitSubdivision                                      1     1      0    8581
                                             56 BANK2      1     1      0
                _getSubdivisionState
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1820
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getSubdivisionState                                  4     2      2    6761
                                             52 BANK2      4     2      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0    6761
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (4) _getCurrentState                                      1     1      0    6761
                                             51 BANK2      1     1      0
                          _getPreset
 ---------------------------------------------------------------------------------
 (5) _getPreset                                           68    53     15    6761
                                             32 BANK2     19     4     15
                                              0 BANK3     49    49      0
                         _GetBitMask
                  _HEF_ByteArrayRead
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     428
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     836
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (6) _HEF_ByteArrayRead                                    8     4      4     663
                                              3 BANK1      8     4      4
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (7) _FLASH_ReadWord                                       3     1      2     259
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (6) _GetBitMask                                          12     8      4    3607
                                             20 BANK2     12     8      4
                             ___bmul (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2660
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  7     7      0    5147
                                             50 BANK0      7     7      0
                   _USARTHandleRxInt
                         _modulation
                          _saveState
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (9) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) _saveState                                            0     0      0    3771
                         _savePreset
 ---------------------------------------------------------------------------------
 (10) _savePreset                                         40    40      0    3771
                                             10 BANK0     40    40      0
                 _HEF_ByteArrayWrite
                         _SetBitMask
                i1_HEF_ByteArrayRead
                          i1___awdiv
                           i1___bmul
 ---------------------------------------------------------------------------------
 (11) i1___bmul                                            4     3      1     430
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (9) i1___awdiv                                            9     5      4     404
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (11) i1_HEF_ByteArrayRead                                 8     4      4     285
                                              3 COMMON     8     4      4
                   i1_FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (12) i1_FLASH_ReadWord                                    3     1      2      93
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (11) _SetBitMask                                         18    10      8    1369
                                              6 COMMON     8     0      8
                                              0 BANK0     10    10      0
                           i1___bmul (ARG)
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) _HEF_ByteArrayWrite                                  9     7      2     526
                                              3 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (12) _FLASH_EraseBlock                                    3     1      2     195
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (10) i1___lmul                                           12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (10) i1___aldiv                                          15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitSubdivision
     _getSubdivisionState
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
     _set_leds_top
   _InitWaveform
     _getWaveFormState
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
     _set_leds_bottom
   _InitializeTaps
   _USARTDataAvailable
   _USARTInit
   _USARTReadBuffer
     _USARTReadData
   ___aldiv
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___lbtoft (ARG)
       ___ftpack
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
   ___lbtoft
     ___ftpack
   _adc_convert
   _calcCosArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _cos
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftge
       _sin
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
   _getDepth
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _getFrequency
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _getModulationSubdivision
   _getSymmetry
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _getVolume
     _initStateManager
       _getCurrentState
         _getPreset
           _GetBitMask
             ___bmul (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _HEF_ByteArrayRead
             _FLASH_ReadWord
           ___awdiv
           ___bmul
   _initSwitchBypass
     _getSwitchBypassState
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _initSwitchTap
     _getTapTime
       _initStateManager
         _getCurrentState
           _getPreset
             _GetBitMask
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _HEF_ByteArrayRead
               _FLASH_ReadWord
             ___awdiv
             ___bmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___lbtoft (ARG)
       ___ftpack
   _read_bottom_tactile
     _set_leds_bottom
     _updateWaveFormState
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _updateSubdivisionState
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
         _frexp
   _setDepth
     _updateDepth
   _setFrequency
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _scaleA100kPot
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               _frexp
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
           _ldexp
             ___ftge
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
     _updateFrequency
   _setLongBypassState
   _setSwitchBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _setSymmetry
     ___awtoft
       ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _map
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     _updateFrequency
   _setVolume
     ___awtoft
       ___ftpack
     _scaleA10kPot
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               _frexp
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
           _ldexp
             ___ftge
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
     _scaleiA10kPot
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               _frexp
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             _frexp
           _ldexp
             ___ftge
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _map (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             _frexp (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
           _frexp
     _updateVolume
   _set_leds_bottom
   _set_leds_top
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _getModulationSubdivision
     _modCos
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modCos (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
   _updateSubdivisionState
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
         _updatePedalMode
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
         _updatePedalMode
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
     _updateTapTime
   _updateTapTime
   _updateWaveFormState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _updatePedalMode
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _USARTHandleRxInt
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   _saveState
     _savePreset
       _HEF_ByteArrayWrite
         _FLASH_EraseBlock
       _SetBitMask
         i1___bmul (ARG)
         i1___wmul (ARG)
       i1_HEF_ByteArrayRead
         i1_FLASH_ReadWord
       i1___awdiv
       i1___bmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4F      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     42      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      4E      15       97.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2D8      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      2C      20       55.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      40      22       80.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2D8      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Mar 21 23:05:15 2017

                       _updateVolume 3FE3                          _update_mode 35E9  
                       ___altoft@exp 00AE                                    _n 024F  
                     ___bmul@product 00A2                          __CFG_CP$OFF 0000  
                      ___altoft@sign 00AF                     modSaw@inflection 0131  
                   scaleA100kPot@pwm 01A0                         ___awdiv@sign 00A6  
                 _topTactile_pressed 0257           setDoublePressState@f_state 00B8  
                ___wmul@multiplicand 0130                   USARTInit@baud_rate 00A0  
                   i1___wmul@product 0074                      _updateSwitchTap 1623  
                    GetBitMask@index 0136                         ___ftadd@exp1 00CD  
                       ___ftadd@exp2 00CC                         ___ftadd@sign 00CB  
                    GetBitMask@shift 0137             __size_of_InitSubdivision 003D  
                                l508 356C                                  l452 08FC  
                                l706 3135                                  l490 0EF9  
                                l466 0C38                 __size_of_adc_convert 0013  
                                l483 0E2A                                  l467 0C54  
               ??_USARTDataAvailable 00A0                                  l930 369E  
                                l923 2CC8                                  l931 36A1  
                                l924 2CEC                                  l932 36A4  
                                l933 36A7                                  l935 36AA  
                                l936 36CE                                  l928 369B  
                                _GIE 005F                                  _PR2 001B  
                     ?_USARTReadData 0070         solidring_tactiles@ring_delay 00B4  
                                _cos 2E81                                  _map 21EB  
                                _exp 1B10                                  _log 101B  
                    _getCurrentState 3198                                  _isr 0004  
                                _tap 03A0                                  _sin 1454  
                                _pow 19FA                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 36CF                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l1115 2A7D  
                               l1133 2BB9                                 l2023 297F  
                               l1119 2AAA                                 l1312 1406  
                               l1137 2BEA                                 l1163 200B  
                               l1156 335B                                 l1148 3619  
                               l1158 3362                                 l1174 2055  
                               l1159 336B                                 l1416 2A0C  
                               l1367 32C7                                 l1384 332A  
                               l2504 206E                                 l1555 2724  
                               l1733 16EF                                 l2623 2D87  
                               l1719 163A                                 l2624 2D8F  
                               l2616 2D74                                 l2449 3225  
                               l2707 21D1                                 ?_cos 014C  
                               l2647 18AA                                 l7001 1C49  
                               l2819 1A1E                                 l6301 3108  
                               l2837 1569                                 ?_map 00DE  
                               l6207 321F                                 l6231 2D60  
                               l6223 2D4A                                 l7111 3374  
                               l6305 310E                                 l6401 1863  
                               l7113 3380                                 l8001 2051  
                               l6227 2D51                                 l6411 1885  
                               l6323 375D                                 l7211 1E1D  
                               l8011 2719                                 l8003 2059  
                               l6261 35CA                                 l6237 2D79  
                               l6229 2D5B                                 l6421 18A6  
                               l6413 1889                                 l6325 376D  
                               l8101 27ED                                 l8021 272E  
                               l6343 2C5D                                 l6239 2D81  
                               l6407 1876                                 l6503 261C  
                               l6257 35C8                                 l6361 2C83  
                               l6353 2C65                                 l6337 2C52  
                               l6425 18BC                                 l6409 1880  
                               l7225 1489                                 l7073 1A8C  
                               l7065 1A32                                 l8041 2759  
                               l8121 162F                                 l6355 2C71  
                               l6419 189C                                 l6451 36FC  
                               l6291 352C                                 l7059 1A26  
                               ?_exp 0148                                 l6269 35E4  
                               l6365 2C8C                                 l6429 18CE  
                               l7237 1525                                 l7341 34AD  
                               l7181 34D1                                 l7077 1AAC  
                               l7405 267C                                 l8301 22BC  
                               l8045 276B                                 l8141 166E  
                               ?_log 013E                                 l6607 36B1  
                               l6703 244B                                 l6439 18E9  
                               l6383 183A                                 l6447 36E6  
                               l6527 217D                                 l7335 349A  
                               l6287 3522                                 l8047 2773  
                               l8071 279E                                 l8143 168B  
                               l8127 164C                                 l8207 17E8  
                               l6369 2C94                                 l6553 21C8  
                               l6545 21AD                                 l7337 349C  
                               l8225 2A72                                 l6801 082F  
                               l8057 2788                                 l6731 24BB  
                               l6723 24A2                                 l6379 1833  
                               l6491 2600                                 l6475 25BD  
                               l6555 21D4                                 l6547 21BB  
                               l6571 2818                                 l7339 34AB  
                               l7523 331A                                 l8235 2A99  
                               l7419 20EB                                 l8307 22FB  
                               l7611 078B                                 l8331 0412  
                               l8163 16B8                                 ?_isr 0070  
                               l6661 1413                                 l6653 13FF  
                               l6709 2461                                 l6389 1849  
                               l6469 25A7                                 l7509 30FB  
                               l6821 0877                                 l7197 1121  
                               l7621 37BC                                 l8341 04D3  
                               l6901 3676                                 l7541 37DC  
                               l8085 27C8                                 l8077 27AE  
                               l8069 279B                                 l8149 1696  
                               l8165 16C0                                 l6663 1417  
                               l6591 2CB8                                 l6743 3436  
                               l6487 25F8                                 l6559 21E2  
                               l7527 3326                                 l7383 23BB  
                               l7607 0649                                 l8343 0519  
                               l8351 05B9                                 l8087 27CE  
                               l8095 27E0                                 l8191 173F  
                               l8183 1733                                 l8175 16E7  
                               l8167 16CF                                 l6681 1444  
                               l6673 1431                                 l6657 1408  
                               l7473 30D9                                 l6593 2CC0  
                               l6585 2CA0                                 l7465 30EA  
                               l6761 251B                                 l8249 2BAE  
                               l6825 087F                                 l7377 23A1  
                               l8361 05DF                                 l8345 055F  
                               l8353 05D0                                 l8337 0447  
                               l8193 1789                                 l6675 1435  
                               l6667 1422                                 l6587 2CA8  
                               l6499 2614                                 l6771 2588  
                               l8259 2BD5                                 l6923 33B2  
                               l8291 2292                                 l8347 05A5  
                               l8339 048D                                 l8355 0429  
                               l6669 1426                                 l6589 2CB0  
                               l6597 2CCF                                 l7573 3389  
                               l6693 32FB                                 l6781 2E7A  
                               l6757 2513                                 l6925 33C2  
                               l6941 1052                                 l8293 2296  
                               l8285 2284                                 l8357 05D6  
                               l7549 37ED                                 l7557 37F8  
                               l7661 20C8                                 l8197 17AF  
                               l8701 0A88                                 l6679 1440  
                               l7583 33AA                                 l6791 080D  
                               l6935 103F                                 l7399 265F  
                               l8295 229C                                 l8287 228A  
                               l8367 05F9                                 l7647 208F  
                               l7639 207F                                 l8711 0BBC  
                               l8631 19BC                                 l7841 3736  
                               l9441 22A8                                 l8289 228E  
                               l6881 2B37                                 l6873 2B13  
                               l7665 20D6                                 l7657 20BD  
                               l7649 209D                                 l8721 0C23  
                               l8713 0BFC                                 l8609 1977  
                               l9451 36B7                                 l7827 3647  
                               l7931 33EE                                 l7923 33DD  
                               l9443 296B                                 l7579 33A0  
                               l7595 2ECB                                 l8299 22A3  
                               l8803 0E76                                 l8707 0B39  
                               l8651 08AF                                 l8643 19EC  
                               ?_sin 013E                                 l9453 2CD5  
                               l7829 364C                                 l9445 2970  
                               l7781 2954                                 l6973 1B66  
                               l6957 1B1D                                 l8813 0EFC  
                               l8733 0C65                                 l8717 0C1A  
                               l8709 0B79                                 l8661 08CA  
                               l8637 19CC                                 l8741 0C92  
                               l7839 3731                                 l9447 2975  
                               l7783 2956                                 l6967 1B42  
                               l9439 05BF                                 l8823 0F8E  
                               l8663 08E5                                 l8647 0897  
                               l8639 19D7                                 l9449 297A  
                               l7785 2958                                 l7873 30A8  
                               l7881 32B7                                 l7865 30B8  
                               l8841 0FF7                                 l8817 0F36  
                               l8809 0EC3                                 l8753 0CB1  
                               l8681 094B                                 l8673 093F  
                               l8665 08F4                                 l8649 08A0  
                               l7939 3400                                 l7779 2952  
                               l6979 1BA1                                 l7963 360C  
                               l7971 361D                                 l8835 0FC2  
                               l8771 0D43                                 l8747 0CA2  
                               l8683 0993                                 l8739 0C74  
                               l7789 295C                                 l7949 3274  
                               l7893 3098                                 l7885 32C3  
                               ?_pow 0155                                 l7991 203A  
                               l8791 0DF0                                 l8783 0DA1  
                               l8775 0D55                                 l8767 0D09  
                               l8695 09EF                                 l8687 09B7  
                               l7969 3616                                 l7993 203F  
                               l7985 202E                                 l8795 0E2D  
                               l8787 0DE1                                 l8779 0D8F  
                               l8799 0E36                                 u5034 29F4  
                               u5035 29F2                                 u5054 2A06  
                               u5055 2A04                                 u5215 2C72  
                               u5064 2A16                                 u5065 2A14  
                               u5225 2C7C                                 u5145 3762  
                               u6105 2B11                                 u5235 2C84  
                               u6115 2B35                                 _PEIE 005E  
                               u5085 352D                                 u6150 31A7  
                               u5415 188A                                 u5095 3534  
                               u6240 1B7F                                 u6250 1B80  
                               u5195 2C68                                 u5355 1864  
                               _RCIE 048D                                 _RCIF 008D  
                               u5445 189D                                 u6085 0838  
                               u7045 2092                                 u8005 1677  
                               u5615 261D                                 u6175 33B7  
                               u5385 1877                                 u5625 2623  
                               u5545 25C9                                 u7065 209E  
                               u4915 2D6F                                 u5555 25D9  
                               u7075 20B2                                 u8115 1701  
                               u8035 169C                                 u5900 144F  
                               u6540 1521                                 u4845 3226  
                               u7405 3340                                 u5725 21C9  
                               u6285 1C40                                 u7085 20BE  
                               u8125 1718                                 u9005 0C13  
                               u6550 1522                                 u4855 322B  
                               u7415 3346                                 u4935 2D7C  
                               u5575 2601                                 u6375 1A7D  
                               u8135 1748                                 u6480 34CF  
                               u5585 2607                                 u5665 2184  
                               u8145 175D                                 u9105 0D70  
                               u9025 0C4D                                 u8235 2A92  
                               u8155 1771                                 u9115 0D8D  
                               u9035 0C5E                                 u7365 3637  
                               u9125 0DBF                                 u7375 3645  
                               u4975 2D96                                 u4895 2D56  
                               u5695 21AE                                 u8335 22F6  
                               u8175 178E                                 u9215 0F17  
                               u9135 0DDF                                 u7385 3721  
                               u7545 327A                                 u5945 2473  
                               u8345 03EC                                 u9225 0F34  
                               u9145 0E0B                                 u4995 35B6  
                               u7395 372F                                 u5955 2483  
                               u8355 0400                                 u7635 201D  
                               u9155 0E28                                 u5965 24A3  
                               u6765 3243                                 u8365 0410  
                               u7565 35FC                                 u9245 0FD1  
                               u9085 0D24                                 u5975 24B2  
                               u8295 2BCE                                 u8375 0430  
                               u6775 32DA                                 u6935 31D6  
                               u9255 0FE1                                 u9175 0E54  
                               u9095 0D41                                 u5985 24BC  
                               u9265 0FF5                                 u9185 0E74  
                               u7755 2734                                 u9195 0EE1  
                               u6895 37CD                                 u8905 08D1  
                               u8935 090D                                 u8945 0924  
                               u8955 0952                                 u8965 0967  
                               u8975 097B                                 u8995 0996  
       __size_of_getSubdivisionState 0011                   scaleA100kPot@input 0167  
                       __CFG_WRT$OFF 0000                    _scaleA10kPot$3257 01A3  
                  _scaleA10kPot$3258 01A6                        __CFG_FCMEN$ON 0000  
         __end_of_HEF_ByteArrayWrite 2C47                                 _iCnt 01EF  
                               _main 1901                         ___ftpack@arg 00A0  
                               cos@f 014C                         ___ftpack@exp 00A3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               map@x 00DE                       ?_updateTapTime 0070  
                               btemp 007E                    USARTReadData@data 00A1  
                               exp@x 0148                                 log@x 013E  
                      __CFG_BOREN$ON 0000                                 sin@f 013E  
                               sin@y 0142                                 ltemp 007E  
                               pow@x 0155                                 pow@y 0158  
                               start 0344                                 ttemp 007E  
                               wtemp 007E         __end_of_getSwitchBypassState 3105  
                    _expressModeCnst 026A                           _GetBitMask 29D5  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 3254  
                    ?i1_set_leds_top 0070                    ___bmul@multiplier 00A3  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 00BC  
            __end_of_updatePedalMode 3FB6                    ?_getWaveFormState 0154  
            __end_of_updateFrequency 3FE3                         ___ftmul@sign 00BD  
                    __end_of_InitApp 3519                         ___fttol@exp1 012D  
                 ??_getWaveFormState 0156                                ??_cos 00F0  
                              ??_map 00ED                __size_of_calcCosArray 0081  
                              ??_exp 014B                                ??_log 0141  
                       ___fttol@lval 0129                                ??_isr 0052  
                              ??_sin 0141                                ??_pow 015B  
                    _switchBypass_up 026E                    ?_USARTHandleRxInt 0070  
                      ?_InitWaveform 0070            __size_of_initSwitchBypass 0012  
                    __end_of___aldiv 20DF                                ?_main 0070  
                     i1___awdiv@sign 0076                      __end_of___awdiv 2C99  
                 ??_USARTHandleRxInt 0070                      __end_of___ftadd 1901  
                              _CCPR1 0291                                _CCPR2 0298  
                              _CCPR3 0311                                _CCPR4 0318  
                              _CCPR5 031C                        __CFG_WDTE$OFF 0000  
                    __end_of___ftdiv 24DD                      __end_of___ftneg 3FD1  
                    __end_of___ftmul 2644                      ___awdiv@divisor 00A0  
                    __end_of___ftsub 345C                      __end_of___fttol 21EB  
                              i1l150 033F                                i1l151 0023  
                              i1l154 0151                                i1l923 29B2  
                              i1l924 29D4                      ___awdiv@counter 00A5  
                              _PMADR 0191                                _RCREG 0199  
                              _SPBRG 019B                    GetBitMask@storage 0134  
                  SetBitMask@storage 0076                   __end_ofsin@coeff_a 3048  
                 __end_ofsin@coeff_b 3054                                _TXREG 019A  
                              _UQEnd 005F                  _ConfigureOscillator 2000  
        __size_of_setLongBypassState 0021                    main@tapCntDivisor 01DD  
                   _setPresetDisplay 365A                         ?_init_timer0 0070  
                       ?_init_timer2 0070                  ___lmul@multiplicand 00A4  
                   ?_USARTReadBuffer 00A2                         ___lltoft@exp 00AD  
                    _switchTap_state 026F                    ??_setLongTapState 00A2  
                      ___awtoft@sign 00AD                                _floor 24DD  
                              _ldexp 0800                                _frexp 2804  
                              _myBuf 04A0                                _errno 02E6  
           _getModulationSubdivision 348B                        ___ftpack@sign 00A4  
                              _timer 022C                     __end_ofi1___bmul 30D2  
                   __end_ofi1___lmul 348B                                sin@x2 0148  
                   __end_ofi1___wmul 3200                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                      __end_of_wait_ms 357B  
                              pow@yi 0163                      scaleA10kPot@pwm 01A0  
                 __size_of_USARTInit 0044                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003               HEF_ByteArrayRead@block 00A5  
        __end_of_read_bottom_tactile 2AB5                  i1___wmul@multiplier 0070  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
             HEF_ByteArrayRead@count 00A6                   __size_ofi1___awdiv 0051  
              set_subdivision@scalar 0132       __size_of_setSwitchBypassRelays 002F  
                   setDepth@rawValue 00A2        __end_of_setSwitchBypassRelays 34E9  
                       _calcCosArray 2EFD                          exp@exponent 0152  
               ?_ConfigureOscillator 0070                   _updateSwitchBypass 270F  
                        ldexp@newexp 0141              __end_of_updateSwitchTap 1800  
                    __initialization 0346      __size_of_updateSubdivisionState 0008  
                        log@exponent 0142          updateModulationArray@iAngle 015B  
            _updateSwitchBypassState 3055                         __end_of_main 0FFE  
               __end_of_getFrequency 30B1              __size_of_InitializeTaps 0026  
                i1___lmul@multiplier 0070               __size_of_scaleA100kPot 0085  
                        modCos@angle 0134              __end_of_getCurrentState 31B1  
                     ??_InitWaveform 0158                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1609 00B5  
                        modCos@shift 013F                      _set_subdivision 2276  
                    ??_USARTReadData 00A0                     _initStateManager 3F91  
        updateModulationArray@subDiv 0157                               ??_main 01D1  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 342E  
         i1_getModulationSubdivision 3402                    ?i1_FLASH_ReadWord 0070  
                      ?_scaleA10kPot 0167              __size_of_FLASH_ReadWord 0020  
          setLongBypassState@f_state 00A0                           _SetBitMask 2AB5  
                 ??i1_FLASH_ReadWord 0072           __end_of_solidring_tactiles 2884  
                   ?_set_leds_bottom 00A0                    savePreset@presets 0033  
                  _HEF_ByteArrayRead 35B1                    ??_InitSubdivision 0158  
                             ?_floor 012E                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 3785  
                 USARTReadBuffer@len 00A2                               _ADRESH 009C  
                             _ADRESL 009B                     ___awdiv@dividend 00A2  
               getPreset@bankChannel 01C1                     __end_of___awtoft 3312  
                   __end_of___ftpack 2DA6                     __end_of___lbtoft 101B  
               ??_updateSwitchBypass 00BC                   ?_HEF_ByteArrayRead 00A3  
                   __end_of___lltoft 33D7                               i1l1412 2AE6  
                             i1l2504 2F8F                               i1l2449 31ED  
                             i1l2299 2C3F                               i1l7029 31E7  
                             i1l7303 2B68                               i1l7321 2B8E  
                             i1l7313 2B70                               i1l7315 2B7C  
                             i1l7261 3593                               i1l7325 2B97  
                             i1l7169 2C1C                               i1l7257 3591  
                             i1l7329 2B9F                               i1l7281 30C9  
                             i1l8401 299A                               i1l8403 29A0  
                             i1l8411 29B8                               i1l7701 2FB0  
                             i1l7269 35AC                               i1l7277 30C3  
                             i1l8421 3413                               i1l8405 29A6  
                             i1l8501 01E4                               i1l7711 2FDE  
                             i1l7703 2FBE                               i1l8423 3422  
                             i1l8407 29AC                               i1l8503 01E6  
                             i1l7297 2B5D                               i1l8425 3424  
                             i1l8513 021A                               i1l8521 0241  
                             i1l7731 2927                               i1l7715 2FE9  
                             i1l8419 3411                               i1l8531 026F  
                             i1l8515 0223                               i1l8435 0012  
                             i1l7741 293B                               i1l8541 02B7  
                             i1l8525 0255                               i1l8533 0271  
                             i1l8517 0232                               i1l7735 2930  
                             i1l7719 2FF7                               i1l7671 3464  
                             i1l8471 0165                               i1l8455 00F1  
                             i1l8561 0337                               i1l8529 0260  
                             i1l8449 00E3                               i1l7739 2937  
                             i1l7675 346E                               i1l8459 00FB  
                             i1l7693 2FA0                               i1l8565 033C  
                             i1l8549 0309                               i1l8477 0178  
                             i1l9455 29BD                               i1l8399 2994  
                             i1l8567 033E                               i1l8499 01D5  
                    ??_updateTapTime 00A0                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
          __size_of_FLASH_EraseBlock 001C                               u630_25 31EE  
                             u631_25 31F3                               u720_25 2FBF  
                             u712_25 346F                               u641_24 2AE0  
                             u721_25 2FD3                               u713_25 3476  
                             u641_25 2ADE                               u642_24 2AEE  
                             u722_25 2FDF                               u642_25 2AEC  
                             u645_25 2C06                               u718_25 2FB3  
                             u670_25 2B87                               u639_24 2ACD  
                             u639_25 2ACB                               u671_25 2B8F  
                             u728_25 2925                               u658_25 357F  
                             u667_25 2B73                               u852_23 0123  
                             u669_25 2B7D                               u853_25 0133  
                             u862_23 01A6                               u854_25 013C  
                             u856_25 015F                               u874_23 0299  
                             u858_25 0172                               u867_23 0208  
                             u875_25 02AE                       _debounce_count 02DE  
                             u877_25 0319                          modSaw@angle 012E  
                     _debounce_mode1 02E0                       _debounce_mode2 02E2  
                             u878_25 0332               __size_of_initSwitchTap 000B  
                        modSaw@shift 013C                               _URBuff 0420  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
           __end_of_read_top_tactile 2BF5                         ?_setSymmetry 012E  
            ?_getModulationDelayTime 0070                  ??_HEF_ByteArrayRead 00A7  
                   __end_of_getDepth 30A1                       __CFG_PWRTE$OFF 0000  
                        ?_GetBitMask 0134                 __size_of_getSymmetry 0020  
                   ?_updatePedalMode 0070                               ___bmul 3105  
                   ?_updateFrequency 00A0                               ___ftge 36CF  
                             ___lmul 3519                            ??___aldiv 00A8  
                             ___wmul 321C                    _update_selectMode 2004  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                               _modCos 10EC  
                   __end_of_init_adc 3FF6                               _modSaw 1DE8  
                             _modTri 0614                     __end_of_init_pwm 2906  
                 ?_update_selectMode 0070                          modTri@shift 0137  
                   ___awdiv@quotient 00A7                __end_of_resetRingLEDs 31CB  
                             _tmpVal 02EC                    __end_of_USARTInit 298D  
                   __end_of_setDepth 306C                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 3000                               floor@i 0132  
                             floor@x 012E          __end_of_updateWaveFormState 3FA6  
              ___ftmul@f3_as_product 00B9                    __end_ofi1___awdiv 2BA4  
            FLASH_ReadWord@flashAddr 00A0            __end_of_HEF_ByteArrayRead 35E9  
            HEF_ByteArrayRead@bArray 00A3                               sin@sgn 014B  
                   __end_of_showSave 3150                  ??_update_selectMode 00A7  
               _getSwitchBypassState 30F4               _updateSubdivisionState 3FA6  
                          ??_wait_ms 00AE                 _setSwitchBypassState 3238  
                      _scaleA100kPot 20DF         __end_of_setExpressionDisplay 317F  
             __size_of_scaleiA10kPot 00CB               setLongTapState@f_state 00A0  
                   __end_ofexp@coeff 301E                     __end_oflog@coeff 3039  
          i1FLASH_ReadWord@flashAddr 0070              __end_of__initialization 03CB  
                         ___altoft@c 00A8       __end_of_getModulationDelayTime 2A68  
          i1HEF_ByteArrayRead@bArray 0073                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 0248  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 006C            ??_updateSwitchBypassState 00A0  
                       ?_updateDepth 00A0                           ___ftneg@f1 00BE  
                _switchBypass_toggle 0254                           ___awtoft@c 00A8  
              __end_of_ring_tactiles 2B53                           ___lbtoft@c 00AF  
                ___bmul@multiplicand 00A0            __end_of_update_selectMode 205D  
            __end_of_set_subdivision 2301                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 013A  
                         ___ftsub@f2 0137                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                         ?_update_mode 0070  
                     __pcstackCOMMON 0070               getPreset@presetChannel 01A1  
                       __pidataBANK0 3FF6                         __pidataBANK3 3084  
                       __pidataBANK4 3150                           ___lltoft@c 00A8  
                      __end_of_floor 2590                        __end_of_ldexp 0897  
                      __end_of_frexp 2844                     ?_getCurrentState 0070  
                _getSubdivisionState 30D2                     _initSwitchBypass 3117  
                          ?i1___bmul 0070                        _initSwitchTap 1800  
        updateFrequency@currentValue 00A0                            ?i1___lmul 0070  
              _updateModulationArray 03CF                            ?i1___wmul 0070  
                    _doubleTap_state 0061                savePreset@bankChannel 0051  
                     _OPTION_REGbits 0095                         modCos@period 0142  
                 __size_of_getPreset 01BC                          ?_SetBitMask 0076  
                       modCos@tmpVal 0145                ?_getSwitchBypassState 0154  
                 __size_of_getVolume 0010                  __size_of_GetBitMask 0048  
              ?_setSwitchBypassState 00B5         __size_ofi1_HEF_ByteArrayRead 0036  
                     ?_scaleA100kPot 0167                     i1___bmul@product 0072  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                      ?_setFrequency 016A                           __pbssBANK0 0059  
                         __pbssBANK2 016F                           __pbssBANK3 01EF  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                           __pbssBANK7 03A0  
                         __pbssBANK8 0420                           __pbssBANK9 04A0  
               ?_getSubdivisionState 0154                 __end_of_InitWaveform 365A  
                 __size_of_eval_poly 0072                     ??i1_set_leds_top 0074  
                    __CFG_VCAPEN$OFF 0000                   __size_of_modSawRev 001C  
              __size_of_getFrequency 0010                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 3694                           _delay_time 0066  
                   _long_press_limit 025F         __size_of_setDoublePressState 003E  
                         _delayfound 02E4                           __pmaintext 1901  
                            ?___bmul 00A0                       _InitializeTaps 3334  
                            ?___ftge 00A0                              ?___lmul 00A0  
                            ?___wmul 012E       updateModulationArray@thisAngle 0159  
                         __pintentry 0004                        _scaleiA10kPot 2644  
                 _HEF_ByteArrayWrite 2BF5                           _blink_rate 006E  
                 __size_of_saveState 0009                        ??_adc_convert 00A2  
                            ?_modCos 0134                            ?___altoft 00A8  
                            ?_modSaw 012E                  USARTReadBuffer@buff 00A6  
                            ?_modTri 012E                       ___lmul@product 00A8  
                         _getTapTime 3312                      _setLongTapState 31CB  
                     ?_initSwitchTap 0070                     getPreset@presets 01A3  
                          ?___awtoft 00A8                            ?___ftpack 00A0  
                          ?___lbtoft 00A8                   __size_of_setVolume 0069  
                modSquare@inflection 014B                           ??i1___bmul 0071  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                           ??i1___wmul 0074  
                     _FLASH_ReadWord 328F          __size_of_USARTDataAvailable 002B  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 3060  
                        modulation@x 002E                          modulation@y 0032  
                ?_HEF_ByteArrayWrite 0073           __size_of_HEF_ByteArrayRead 0038  
                     _setVolume$3271 01A9                       _setVolume$3272 01AC  
                        savePreset@r 002E            __size_of_getWaveFormState 0011  
                          ?_getDepth 0154                           _ldexp$3018 0145  
                    _debounce_bypass 02DC                         _getFrequency 30A1  
                     ??_setPedalMode 00A7                       ??_setFrequency 00F0  
                 USARTWriteInt@F3536 02C9                _modulationSubdivision 0242  
          __size_of_USARTHandleRxInt 0043                ??_getSubdivisionState 0156  
                      _suspend_blink 016F         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 013F                              _UQFront 0060  
                   _FLASH_EraseBlock 3200             __end_of_initStateManager 3F97  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 0246                              _InitApp 34E9  
               ??_HEF_ByteArrayWrite 0075                 __end_of_scaleA10kPot 2434  
                          ?_setDepth 00A2               __end_of_InitializeTaps 335A  
                      ?_set_leds_top 00A0                    __end_of_getPreset 1454  
                         _knob1_prev 01E4           __size_of_update_selectMode 0059  
                 i1___awdiv@quotient 0077                           _knob2_prev 01E6  
                         _knob3_prev 025B                           _knob4_prev 025D  
                         _knob5_prev 01E8                     ?_set_subdivision 012E  
                  __end_of_getVolume 30C1                  __size_of_SetBitMask 004E  
               __size_of_setSymmetry 0054                            ?_showSave 0070  
                            ___aldiv 205D                           _pedalState 02B4  
                    __size_of___bmul 0012                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 2C47  
                    __size_of___lmul 0030                              ___ftadd 180B  
                            ___ftdiv 2434                              ___ftneg 3FC8  
                         _knob_1_pos 0230                           _knob_2_pos 0232  
                    __size_of___wmul 001C                              ___ftmul 2590  
                         _knob_3_pos 0234                              ___ftsub 342E  
                            ___fttol 2164                           _knob_4_pos 0236  
                         _knob_5_pos 0238                    _switchTap_pressed 0256  
                         ??___altoft 00AC                 _setExpressionDisplay 3167  
             ?_updateModulationArray 0070                      __size_of_modCos 01AC  
             __end_of_FLASH_ReadWord 32AF                      __size_of_modSaw 0198  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01E3                           ??___lbtoft 00AB  
                  __end_of_eval_poly 2E81                      _InitSubdivision 370B  
               getPreset@pedalPreset 01C2                   InitializeTaps@itap 00A1  
                         ??___lltoft 00AC                              __ptext1 2004  
                            __ptext2 35E9                              __ptext3 1623  
                            __ptext4 07F7                              __ptext5 31CB  
                            __ptext6 205D                              __ptext7 270F  
                            __ptext8 32CF                              __ptext9 37C2  
         __end_of_setLongBypassState 32F0          ?i1_getModulationSubdivision 0070  
             ??_getSwitchBypassState 0156                    __end_of_modSawRev 3270  
                          _T2CONbits 001C                         __size_of_cos 007C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 0340  
             ??_setSwitchBypassState 00B7                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 313C  
                       modTri@period 013A                    __end_of_modSquare 37C2  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                  i1___bmul@multiplier 0073  
                         ??_getDepth 00F0                              _wait_ms 3549  
                            clrloop0 3079                 end_of_initialization 03CB  
                  __end_of_saveState 3FBF                              exp@sign 0154  
                      savePreset@dep 0030                           _modulation 2884  
                         _savePreset 1C69             __size_of_USARTReadBuffer 001F  
                  __end_of_setVolume 2E0F                              init_ram 306C  
                         ??_init_adc 00A0            __size_ofi1_FLASH_ReadWord 0019  
                            initloop 306D                           ??_init_pwm 00A0  
                  setVolume@rawValue 016A         updateSwitchBypassState@state 00A1  
                 _solidring_tactiles 2844                           _save_timer 02D2  
                      _longTap_timer 023C                        _longTap_state 006F  
                      _longTap_start 024C                           ??_setDepth 00A4  
                     ??_set_leds_top 00A4                         ??_GetBitMask 0138  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 31E5                _setSwitchBypassRelays 34BA  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 026C                     _longBypass_timer 023A  
                   ___aldiv@quotient 00AB                 __size_of_updateDepth 0009  
                   _longBypass_state 0063                     _longBypass_start 024B  
                            psplit$0 1A0093         __size_of_read_bottom_tactile 004D  
                ?_solidring_tactiles 0070                      ??_initSwitchTap 00F0  
                       __pstringtext 3000            FLASH_ReadWord@GIEBitValue 00A2  
              ?_setExpressionDisplay 0070                 __size_of_update_mode 0038  
              i1___wmul@multiplicand 0072                          ?_getTapTime 0154  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 026B  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
            ?_updateSubdivisionState 0070                           getPreset@r 01A0  
              __end_of_USARTReadData 33AD                            _USARTInit 2949  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                __size_of_InitWaveform 0039  
           HEF_ByteArrayRead@wordAdd 00A9                            _TRISGbits 030D  
                          i1___aldiv 2F7E                            i1___awdiv 2B53  
                 __end_of_GetBitMask 2A1D                 pnum$maintext_split_1 0093  
               ??_solidring_tactiles 00B2                       GetBitMask@mask 013C  
        __end_of_ConfigureOscillator 2004                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 00F1  
           __end_of_initSwitchBypass 3129                      SetBitMask@index 007A  
            HEF_ByteArrayWrite@block 0078                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC                __end_of_updateTapTime 0800  
           __size_of_set_leds_bottom 003B                      SetBitMask@shift 007C  
                      ??_getSymmetry 00F0                      SetBitMask@value 0078  
            HEF_ByteArrayWrite@count 0074                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 0253  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
            __end_of_InitSubdivision 3748                        ?_updateVolume 00A0  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                  i1_HEF_ByteArrayRead 357B  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                   USARTReadBuffer@i 00A7                       __end_of___bmul 3117  
                     __end_of___ftge 370B                 __end_of_setPedalMode 3383  
               __end_of_setFrequency 2396                       __end_of___lmul 3549  
                     __end_of___wmul 3238                         _double_timer 0220  
                        _adc_convert 3129       __end_of_updateSubdivisionState 3FAE  
         i1HEF_ByteArrayRead@wordAdd 0079     __end_of_getModulationSubdivision 34BA  
                       _InitWaveform 3621                       _switchTap_down 0255  
                     __end_of_modCos 1298                       __end_of_modSaw 1F80  
                     __end_of_modTri 07F7             __size_of_updatePedalMode 0008  
           __size_of_updateFrequency 0009                       modSawRev@angle 0142  
                         floor@expon 0135                    __size_ofi1___bmul 0011  
                       ??_SetBitMask 0020                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 0346  
                  __size_ofi1___wmul 001B                     _getWaveFormState 30E3  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 0247                  _setDoublePressState 37C2  
                         ldexp@value 013E                 ?i1_HEF_ByteArrayRead 0073  
                         ?i1___aldiv 0020                          __end_of_cos 2EFD  
                        __end_of_map 2276                          __end_of_exp 1C69  
                        __end_of_log 10EC                          __end_of_isr 0344  
                         ?i1___awdiv 0070                          __end_of_sin 1623  
                        __end_of_pow 1B10                     savePreset@bankID 0032  
       __size_of_updateWaveFormState 0008          i1FLASH_ReadWord@GIEBitValue 0072  
                   _USARTHandleRxInt 2906                __size_of_scaleA10kPot 009E  
                 _adjusted_pot_value 02DA                          ?_modulation 002E  
                        ?_savePreset 0070                   scaleiA10kPot@input 0167  
                         frexp@value 00A0                  __size_of_getTapTime 0022  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
                     ??_updateVolume 00A2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                    ??_USARTReadBuffer 00A4  
                           ??___bmul 00A1                             ??___ftge 00A6  
                 __end_of_SetBitMask 2B03                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                __end_of_getSymmetry 32CF                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 0066                          __pdataBANK3 01E2  
                        __pdataBANK4 0259                             ??_modCos 013A  
                           ??_modSaw 00F0                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0          FLASH_EraseBlock@GIEBitValue 0072  
                      _tap_iteration 0265             __end_of_FLASH_EraseBlock 321C  
           __size_of_updateSwitchTap 01DD                    __size_of___altoft 003D  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                  __size_of___lbtoft 001B                          __pbssBIGRAM 238A  
                       _scaleA10kPot 2396                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
               __end_of_set_leds_top 2CED                            ___latbits 0003  
     setExpressionDisplay@ledChannel 00A6                   _switchBypass_state 01EE  
              ??i1_HEF_ByteArrayRead 0077                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
           __size_of_getCurrentState 0019                        __pcstackBANK3 01A0  
             __size_of_ring_tactiles 0050                   _isStateInitialized 005D  
                     _expSwitchState 0269     updateModulationArray@iAngle_2595 0156  
                   i1___lmul@product 0078                    __size_of_getDepth 0010  
                   scaleiA10kPot@pwm 01A0             ?_updateSwitchBypassState 0070  
                   i1_FLASH_ReadWord 317F                           sin@coeff_a 3039  
                         sin@coeff_b 3048                   i1___aldiv@quotient 002A  
                  ?_initStateManager 0070                     modCos@inflection 0137  
                      ?_calcCosArray 0070                             ?_InitApp 0070  
                    getPreset@bankID 01A2                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                   ??_initStateManager 00F0  
                  __size_of_init_pwm 0041                            _main$3250 01DF  
                          _main$3248 01D7                            _main$3249 01DA  
                   ?_InitSubdivision 0070                    __size_of_setDepth 000C  
            ??_updateModulationArray 0150                 GetBitMask@shiftCount 013E  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 0268                             ?___awdiv 00A0  
                          __ptext100 3FBF                            __ptext101 3F97  
                          __ptext110 2B53                            __ptext102 3FEC  
                          __ptext111 357B                            __ptext103 2000  
                          __ptext120 2906                            __ptext112 317F  
                          __ptext113 2AB5                            __ptext105 298D  
                          __ptext114 31E5                            __ptext106 3402  
                          __ptext115 2BF5                            __ptext107 3FB6  
                          __ptext116 3200                            __ptext108 1C69  
                          __ptext117 2884                            __ptext109 30C1  
                           ?___ftadd 00C1                            __ptext118 345C  
                          __ptext119 2F7E                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                          _getPreset 1298                 SetBitMask@shiftCount 0028  
                  __size_of_showSave 0014                   _modulation_changed 024E  
                          _getVolume 30B1          HEF_ByteArrayWrite@blockAddr 0079  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$3253 01A3  
                 _scaleA100kPot$3254 01A6           __end_of_USARTDataAvailable 3402  
                  i1___awdiv@counter 0075                          _blink_delay 0259  
                __size_of_modulation 0041                        _resetRingLEDs 31B1  
                __size_of_savePreset 017F                          _blink_state 0267  
        __end_of_getSubdivisionState 30E3                            _eval_poly 2E0F  
                          _midiLevel 023E                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 3254             ??_getModulationDelayTime 00F0  
                _read_bottom_tactile 2A68                    ??_updatePedalMode 00A0  
                     __size_of_floor 00B3                       __size_of_ldexp 0097  
                  ??_updateFrequency 00A2                       __size_of_frexp 0040  
                          _modSquare 3785              updateDepth@currentValue 00A0  
        HEF_ByteArrayWrite@byteArray 0073                   calcCosArray@iAngle 0159  
                     _presetModeCnst 026D                   _setLongBypassState 32CF  
                __end_of_init_timer0 3F9E                  __end_of_init_timer2 3FC8  
                          _mod_value 0240                            _mod_timer 0224  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 002F                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 0065  
                     ___wmul@product 0132                       ??_calcCosArray 0152  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 0263                          _getSymmetry 32AF  
                          clear_ram0 3078                        ??_setSymmetry 00F0  
                          _saveState 3FB6          __size_of_HEF_ByteArrayWrite 0052  
                 calcCosArray@tmpVal 0156                            _tap_timer 0059  
              i1___bmul@multiplicand 0070                  ?_setLongBypassState 00A0  
                          _tap_total 02D6                __size_of_setPedalMode 0029  
              __size_of_setFrequency 0095                            _setVolume 2DA6  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
          FLASH_EraseBlock@startAddr 0070                        _ring_tactiles 2B03  
                    _longBypass_down 0249                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 024A              savePreset@presetChannel 0031  
               ?_read_bottom_tactile 0070              __size_ofi1_set_leds_top 0048  
                         ?_getPreset 0140                         ??_getTapTime 00F0  
                         ?_getVolume 0154            initSwitchBypass@initState 0158  
                          map@in_max 00E4                            map@in_min 00E1  
                     ?_resetRingLEDs 0070                            _sub_timer 0228  
                           i1___bmul 30C1                           _ADCON0bits 009D  
                           i1___lmul 345C                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
                           i1___wmul 31E5                 setFrequency@rawValue 016A  
          __size_of_read_top_tactile 0051                       SetBitMask@mask 0026  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0011                 __end_of_updateVolume 3FEC  
                        _modCos$3267 013C        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0142                __end_of_scaleA100kPot 2164  
                  ??_updateSwitchTap 00BC             updateVolume@currentValue 00A0  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 335A  
                       _setFrequency 2301                    ??_getCurrentState 0153  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                        _oldBaseTime 02E8                       wait_ms@timeSec 00AC  
                 __end_of_getTapTime 3334                          _modSaw$3270 0137  
                        _modSaw$3269 0134                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3                           ?_saveState 0070  
                      ??_updateDepth 00A2          setSwitchBypassState@f_state 00B5  
                 ??_initSwitchBypass 00F0                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013A  
                         ?_setVolume 016A             __end_of_getWaveFormState 30F4  
                        _mode1_state 024D                        ??_update_mode 00A7  
                        _mode2_state 0064                            isr@subDiv 0058  
              ??_read_bottom_tactile 00B2                          _modTri$3268 0134  
                updateSwitchTap@iCnt 00C4                           _APFCONbits 011D  
                _updateWaveFormState 3F9E             __end_of_USARTHandleRxInt 2949  
                __end_of_setSymmetry 2D41                     __size_of___aldiv 0082  
                       pnum$maintext 001A                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 3748                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           _cos$3274 014F                __end_of_initSwitchTap 180B  
                           ___awtoft 32F0                __size_of_set_leds_top 0054  
                           ___ftpack 2D41                             ___lbtoft 1000  
                  _baseline_mod_time 006A                             _map$3251 00ED  
                       _save_counter 02CE                             ___lltoft 33AD  
             _preset_programmning_on 0251                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$3278 014C  
                           _exp$2981 014F                          _init_timer0 3F97  
                        _init_timer2 3FBF                             _getDepth 3091  
                           _cosArray 2482           __end_of_updateSwitchBypass 2800  
           i1HEF_ByteArrayRead@block 0075                             __ptext10 313C  
                           __ptext11 2844                             __ptext20 3785  
                           __ptext12 2B03                             __ptext21 10EC  
                           __ptext13 335A                             __ptext30 21EB  
                           __ptext22 3254                             __ptext14 3FAE  
                           __ptext31 2301                             __ptext23 1DE8  
                           __ptext15 365A                             __ptext40 3FD1  
                           __ptext32 3FDA                             __ptext24 2276  
                           __ptext16 3167                             __ptext41 2BA4  
                           __ptext33 20DF                             __ptext25 2DA6  
                           __ptext17 31B1                             __ptext50 3549  
                           __ptext42 3FA6                             __ptext34 19FA  
                           __ptext26 3FE3                             __ptext18 03CF  
                           __ptext51 3519                             __ptext43 2A68  
                           __ptext35 101B                             __ptext27 2644  
                           __ptext19 0614                             __ptext60 2EFD  
                           __ptext52 3055                             __ptext44 3F9E  
                           __ptext36 1B10                             __ptext28 2396  
                           __ptext61 2E81                             __ptext53 30F4  
                           __ptext45 1800                             __ptext37 0800  
                           __ptext29 2CED                             __ptext70 342E  
                           __ptext62 1454                             __ptext54 30B1  
                           __ptext46 3312                             __ptext38 33AD  
                           __ptext71 180B                             __ptext63 24DD  
                           __ptext55 32AF                             __ptext47 3117  
                           __ptext39 3060                             __ptext80 2949  
                           __ptext72 3FC8                             __ptext64 2804  
                           __ptext56 2A1D                             __ptext48 3238  
                           __ptext81 33D7                             __ptext73 2434  
                           __ptext65 2164                             __ptext57 348B  
                           __ptext49 34BA                             __ptext90 3198  
                           __ptext82 3334                             __ptext74 32F0  
                           __ptext66 36CF                             __ptext58 30A1  
                           __ptext91 1298                             __ptext83 3621  
                           __ptext75 3129                             __ptext67 3748  
                           __ptext59 3091                             __ptext92 3105  
                           __ptext84 3694                             __ptext76 1000  
                           __ptext68 2E0F                             __ptext93 2C47  
                           __ptext85 30E3                             __ptext77 2D41  
                           __ptext69 2590                             __ptext94 35B1  
                           __ptext86 370B                             __ptext78 3270  
                           __ptext95 328F                             __ptext87 2C99  
                           __ptext79 3383                             __ptext96 29D5  
                           __ptext88 30D2                             __ptext97 321C  
                           __ptext89 3F91                             __ptext98 34E9  
                           __ptext99 28C5             i1HEF_ByteArrayRead@count 0076  
                           _sin$3277 0145                     __size_of_wait_ms 0032  
               ?_updateWaveFormState 0070          __size_of_solidring_tactiles 0040  
    __size_of_getModulationDelayTime 004B                             _ledState 02C3  
                           _pow$3275 015C                             _pow$3276 015F  
                      _presetChannel 01ED                      _USARTReadBuffer 3270  
                       ??_modulation 0036                         ??_savePreset 002A  
                           _midiBuff 0320                          _mod_counter 0261  
                           _modArray 238A                          _oldSymmetry 02EA  
            ??_setSwitchBypassRelays 00B4                             _init_adc 3FEC  
                      __size_of_main F6FD                             _init_pwm 28C5  
   updateModulationArray@angleFactor 0154                             _setDepth 3060  
       __size_of_ConfigureOscillator 0004               __size_of_USARTReadData 002A  
                       _set_leds_top 2C99                             _showSave 313C  
                           _num_taps 01EC                __end_of_scaleiA10kPot 270F  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                        ??_getPreset 014F                  __end_of_updateDepth 3FDA  
                    i1set_leds_top@x 0070                          ??_getVolume 00F0  
                     modSquare@angle 0148                  __end_of_update_mode 3621  
                  ?_FLASH_EraseBlock 0070             __end_ofi1_FLASH_ReadWord 3198  
                           exp@coeff 3000                             _symmetry 01EA  
                modSawRev@inflection 0145                             log@coeff 301E  
                 __end_of_modulation 28C5                   __end_of_savePreset 1DE8  
               __end_of_calcCosArray 2F7E               __size_of_updateTapTime 0009  
                 ??_FLASH_EraseBlock 0072                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                     savePreset@symm 002F                          _tap_history 02A0  
                        ??_modSawRev 0148                ??_updateWaveFormState 00A0  
                  ??_set_subdivision 00F0                        ?_getFrequency 0154  
                        ??_modSquare 00F0                  setSymmetry@rawValue 012E  
                           intlevel1 0000                      _set_leds_bottom 3694  
                         _PMCON1bits 0195        HEF_ByteArrayWrite@GIEBitValue 0077  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                        ??_saveState 007E                          _setSymmetry 2CED  
                  _setFrequency$3273 016C                      _reset_sub_delay 0252  
                        ??_setVolume 00F0                           _OSCCONbits 0099  
                       _preset_blink 0250               _getModulationDelayTime 2A1D  
                     i1_set_leds_top 298D       __size_of_updateModulationArray 0245  
   __size_of_updateSwitchBypassState 000B        __end_of_updateModulationArray 0614  
                      _isInitialized 0062        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$3260 01A6                   _scaleiA10kPot$3259 01A3  
        __end_ofi1_HEF_ByteArrayRead 35B1            __size_of_initStateManager 0006  
                    _updatePedalMode 3FAE                      _updateFrequency 3FDA  
           __size_of_setLongTapState 001A                __size_of_updateVolume 0009  
                        _tmpModDelay 0244                     _read_top_tactile 2BA4  
       ??i1_getModulationSubdivision 0072                        _USARTReadData 3383  
            __end_of_USARTReadBuffer 328F                 USARTHandleRxInt@data 0074  
                       ___aldiv@sign 00AA                       ??_getFrequency 00F0  
                 _USARTDataAvailable 33D7                          _useInitVals 0258  
        __end_of_setDoublePressState 3800                         _CCP10CONbits 061F  
                  _bottom_push_state 01E2                         ?_getSymmetry 0154  
                ?_USARTDataAvailable 0070                        _updateTapTime 07F7  
                        _updateDepth 3FD1           setPresetDisplay@ledChannel 00A6  
             __end_ofi1_set_leds_top 29D5             ??_updateSubdivisionState 00A0  
