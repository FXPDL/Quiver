

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jan 07 10:56:45 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK7,global,class=CODE,delta=2
     8                           	psect	idataBANK8,global,class=CODE,delta=2
     9                           	psect	idataBANK9,global,class=CODE,delta=2
    10                           	psect	idataBANK10,global,class=CODE,delta=2
    11                           	psect	idataBIGRAM,global,class=CODE,delta=2
    12                           	psect	stringtext,global,class=STRCODE,delta=2
    13                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    25                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    26                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    27                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    28                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    29                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
    30                           	psect	clrtext,global,class=CODE,delta=2
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    33                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	text45,local,class=CODE,merge=1,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,delta=2
    84                           	psect	text47,local,class=CODE,merge=1,delta=2
    85                           	psect	text48,local,class=CODE,merge=1,delta=2
    86                           	psect	text49,local,class=CODE,merge=1,delta=2
    87                           	psect	text50,local,class=CODE,merge=1,delta=2
    88                           	psect	text51,local,class=CODE,merge=1,delta=2
    89                           	psect	text52,local,class=CODE,merge=1,delta=2
    90                           	psect	text53,local,class=CODE,merge=1,delta=2
    91                           	psect	text54,local,class=CODE,merge=1,delta=2
    92                           	psect	text55,local,class=CODE,merge=1,delta=2
    93                           	psect	text56,local,class=CODE,merge=1,delta=2
    94                           	psect	text57,local,class=CODE,merge=1,delta=2
    95                           	psect	text58,local,class=CODE,merge=1,delta=2
    96                           	psect	text59,local,class=CODE,merge=1,delta=2
    97                           	psect	intentry,global,class=CODE,delta=2
    98                           	psect	text61,local,class=CODE,merge=1,delta=2
    99                           	psect	text62,local,class=CODE,merge=1,delta=2
   100                           	psect	text63,local,class=CODE,merge=1,delta=2
   101                           	psect	text64,local,class=CODE,merge=1,delta=2
   102                           	psect	text65,local,class=CODE,merge=1,delta=2
   103                           	dabs	1,0x920,80
   104                           	dabs	1,0x8A0,80
   105                           	dabs	1,0x820,80
   106                           	dabs	1,0x7A0,80
   107                           	dabs	1,0x720,80
   108                           	dabs	1,0x6A0,80
   109                           	dabs	1,0x648,40
   110                           	dabs	1,0x23E8,0,_delayArray
   111                           	dabs	1,0x7E,2
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  008F                     	;# 
   146  0090                     	;# 
   147  0091                     	;# 
   148  0092                     	;# 
   149  0093                     	;# 
   150  0094                     	;# 
   151  0095                     	;# 
   152  0096                     	;# 
   153  0097                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009B                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  0110                     	;# 
   166  0116                     	;# 
   167  0117                     	;# 
   168  011D                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018F                     	;# 
   172  0190                     	;# 
   173  0191                     	;# 
   174  0191                     	;# 
   175  0192                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0197                     	;# 
   182  0199                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  019A                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019D                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  020D                     	;# 
   206  020F                     	;# 
   207  0210                     	;# 
   208  0211                     	;# 
   209  0211                     	;# 
   210  0212                     	;# 
   211  0212                     	;# 
   212  0213                     	;# 
   213  0213                     	;# 
   214  0214                     	;# 
   215  0214                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0216                     	;# 
   220  0216                     	;# 
   221  0217                     	;# 
   222  0217                     	;# 
   223  0219                     	;# 
   224  021A                     	;# 
   225  021B                     	;# 
   226  021C                     	;# 
   227  021D                     	;# 
   228  021E                     	;# 
   229  021F                     	;# 
   230  028C                     	;# 
   231  028D                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0298                     	;# 
   237  0298                     	;# 
   238  0299                     	;# 
   239  029A                     	;# 
   240  029D                     	;# 
   241  029E                     	;# 
   242  029F                     	;# 
   243  030C                     	;# 
   244  030D                     	;# 
   245  0311                     	;# 
   246  0311                     	;# 
   247  0312                     	;# 
   248  0313                     	;# 
   249  0318                     	;# 
   250  0318                     	;# 
   251  0319                     	;# 
   252  031A                     	;# 
   253  031C                     	;# 
   254  031C                     	;# 
   255  031D                     	;# 
   256  031E                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  0394                     	;# 
   260  0395                     	;# 
   261  0396                     	;# 
   262  040C                     	;# 
   263  040D                     	;# 
   264  0411                     	;# 
   265  0411                     	;# 
   266  0412                     	;# 
   267  0413                     	;# 
   268  0414                     	;# 
   269  0415                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  0418                     	;# 
   273  0418                     	;# 
   274  0419                     	;# 
   275  041A                     	;# 
   276  041B                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  048D                     	;# 
   281  0491                     	;# 
   282  0491                     	;# 
   283  0492                     	;# 
   284  0492                     	;# 
   285  0493                     	;# 
   286  0493                     	;# 
   287  0493                     	;# 
   288  0494                     	;# 
   289  0494                     	;# 
   290  0495                     	;# 
   291  0495                     	;# 
   292  0496                     	;# 
   293  0496                     	;# 
   294  0497                     	;# 
   295  0497                     	;# 
   296  0595                     	;# 
   297  0596                     	;# 
   298  0597                     	;# 
   299  059C                     	;# 
   300  059D                     	;# 
   301  059E                     	;# 
   302  0611                     	;# 
   303  0611                     	;# 
   304  0612                     	;# 
   305  0613                     	;# 
   306  0614                     	;# 
   307  0614                     	;# 
   308  0615                     	;# 
   309  0616                     	;# 
   310  0617                     	;# 
   311  0617                     	;# 
   312  0618                     	;# 
   313  0619                     	;# 
   314  061A                     	;# 
   315  061A                     	;# 
   316  061B                     	;# 
   317  061C                     	;# 
   318  061D                     	;# 
   319  061D                     	;# 
   320  061E                     	;# 
   321  061F                     	;# 
   322  0FE4                     	;# 
   323  0FE5                     	;# 
   324  0FE6                     	;# 
   325  0FE7                     	;# 
   326  0FE8                     	;# 
   327  0FE9                     	;# 
   328  0FEA                     	;# 
   329  0FEB                     	;# 
   330  0FED                     	;# 
   331  0FEE                     	;# 
   332  0FEF                     	;# 
   333  0000                     	;# 
   334  0001                     	;# 
   335  0002                     	;# 
   336  0003                     	;# 
   337  0004                     	;# 
   338  0005                     	;# 
   339  0006                     	;# 
   340  0007                     	;# 
   341  0008                     	;# 
   342  0009                     	;# 
   343  000A                     	;# 
   344  000B                     	;# 
   345  000C                     	;# 
   346  000D                     	;# 
   347  000E                     	;# 
   348  000F                     	;# 
   349  0010                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0013                     	;# 
   353  0014                     	;# 
   354  0015                     	;# 
   355  0016                     	;# 
   356  0016                     	;# 
   357  0017                     	;# 
   358  0018                     	;# 
   359  0019                     	;# 
   360  001A                     	;# 
   361  001B                     	;# 
   362  001C                     	;# 
   363  008C                     	;# 
   364  008D                     	;# 
   365  008E                     	;# 
   366  008F                     	;# 
   367  0090                     	;# 
   368  0091                     	;# 
   369  0092                     	;# 
   370  0093                     	;# 
   371  0094                     	;# 
   372  0095                     	;# 
   373  0096                     	;# 
   374  0097                     	;# 
   375  0099                     	;# 
   376  009A                     	;# 
   377  009B                     	;# 
   378  009B                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  010C                     	;# 
   383  010D                     	;# 
   384  010E                     	;# 
   385  010F                     	;# 
   386  0110                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018F                     	;# 
   393  0190                     	;# 
   394  0191                     	;# 
   395  0191                     	;# 
   396  0192                     	;# 
   397  0193                     	;# 
   398  0193                     	;# 
   399  0194                     	;# 
   400  0195                     	;# 
   401  0196                     	;# 
   402  0197                     	;# 
   403  0199                     	;# 
   404  0199                     	;# 
   405  0199                     	;# 
   406  019A                     	;# 
   407  019A                     	;# 
   408  019A                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019B                     	;# 
   413  019B                     	;# 
   414  019C                     	;# 
   415  019C                     	;# 
   416  019C                     	;# 
   417  019D                     	;# 
   418  019D                     	;# 
   419  019D                     	;# 
   420  019E                     	;# 
   421  019E                     	;# 
   422  019E                     	;# 
   423  019F                     	;# 
   424  019F                     	;# 
   425  019F                     	;# 
   426  020D                     	;# 
   427  020F                     	;# 
   428  0210                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  0219                     	;# 
   445  021A                     	;# 
   446  021B                     	;# 
   447  021C                     	;# 
   448  021D                     	;# 
   449  021E                     	;# 
   450  021F                     	;# 
   451  028C                     	;# 
   452  028D                     	;# 
   453  0291                     	;# 
   454  0291                     	;# 
   455  0292                     	;# 
   456  0293                     	;# 
   457  0298                     	;# 
   458  0298                     	;# 
   459  0299                     	;# 
   460  029A                     	;# 
   461  029D                     	;# 
   462  029E                     	;# 
   463  029F                     	;# 
   464  030C                     	;# 
   465  030D                     	;# 
   466  0311                     	;# 
   467  0311                     	;# 
   468  0312                     	;# 
   469  0313                     	;# 
   470  0318                     	;# 
   471  0318                     	;# 
   472  0319                     	;# 
   473  031A                     	;# 
   474  031C                     	;# 
   475  031C                     	;# 
   476  031D                     	;# 
   477  031E                     	;# 
   478  038C                     	;# 
   479  038D                     	;# 
   480  0394                     	;# 
   481  0395                     	;# 
   482  0396                     	;# 
   483  040C                     	;# 
   484  040D                     	;# 
   485  0411                     	;# 
   486  0411                     	;# 
   487  0412                     	;# 
   488  0413                     	;# 
   489  0414                     	;# 
   490  0415                     	;# 
   491  0416                     	;# 
   492  0417                     	;# 
   493  0418                     	;# 
   494  0418                     	;# 
   495  0419                     	;# 
   496  041A                     	;# 
   497  041B                     	;# 
   498  041C                     	;# 
   499  041D                     	;# 
   500  041E                     	;# 
   501  048D                     	;# 
   502  0491                     	;# 
   503  0491                     	;# 
   504  0492                     	;# 
   505  0492                     	;# 
   506  0493                     	;# 
   507  0493                     	;# 
   508  0493                     	;# 
   509  0494                     	;# 
   510  0494                     	;# 
   511  0495                     	;# 
   512  0495                     	;# 
   513  0496                     	;# 
   514  0496                     	;# 
   515  0497                     	;# 
   516  0497                     	;# 
   517  0595                     	;# 
   518  0596                     	;# 
   519  0597                     	;# 
   520  059C                     	;# 
   521  059D                     	;# 
   522  059E                     	;# 
   523  0611                     	;# 
   524  0611                     	;# 
   525  0612                     	;# 
   526  0613                     	;# 
   527  0614                     	;# 
   528  0614                     	;# 
   529  0615                     	;# 
   530  0616                     	;# 
   531  0617                     	;# 
   532  0617                     	;# 
   533  0618                     	;# 
   534  0619                     	;# 
   535  061A                     	;# 
   536  061A                     	;# 
   537  061B                     	;# 
   538  061C                     	;# 
   539  061D                     	;# 
   540  061D                     	;# 
   541  061E                     	;# 
   542  061F                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  000F                     	;# 
   570  0010                     	;# 
   571  0011                     	;# 
   572  0012                     	;# 
   573  0013                     	;# 
   574  0014                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  008C                     	;# 
   585  008D                     	;# 
   586  008E                     	;# 
   587  008F                     	;# 
   588  0090                     	;# 
   589  0091                     	;# 
   590  0092                     	;# 
   591  0093                     	;# 
   592  0094                     	;# 
   593  0095                     	;# 
   594  0096                     	;# 
   595  0097                     	;# 
   596  0099                     	;# 
   597  009A                     	;# 
   598  009B                     	;# 
   599  009B                     	;# 
   600  009C                     	;# 
   601  009D                     	;# 
   602  009E                     	;# 
   603  010C                     	;# 
   604  010D                     	;# 
   605  010E                     	;# 
   606  010F                     	;# 
   607  0110                     	;# 
   608  0116                     	;# 
   609  0117                     	;# 
   610  011D                     	;# 
   611  018C                     	;# 
   612  018D                     	;# 
   613  018F                     	;# 
   614  0190                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0194                     	;# 
   621  0195                     	;# 
   622  0196                     	;# 
   623  0197                     	;# 
   624  0199                     	;# 
   625  0199                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019A                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019C                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019D                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019E                     	;# 
   643  019E                     	;# 
   644  019F                     	;# 
   645  019F                     	;# 
   646  019F                     	;# 
   647  020D                     	;# 
   648  020F                     	;# 
   649  0210                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0216                     	;# 
   663  0217                     	;# 
   664  0217                     	;# 
   665  0219                     	;# 
   666  021A                     	;# 
   667  021B                     	;# 
   668  021C                     	;# 
   669  021D                     	;# 
   670  021E                     	;# 
   671  021F                     	;# 
   672  028C                     	;# 
   673  028D                     	;# 
   674  0291                     	;# 
   675  0291                     	;# 
   676  0292                     	;# 
   677  0293                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  029D                     	;# 
   683  029E                     	;# 
   684  029F                     	;# 
   685  030C                     	;# 
   686  030D                     	;# 
   687  0311                     	;# 
   688  0311                     	;# 
   689  0312                     	;# 
   690  0313                     	;# 
   691  0318                     	;# 
   692  0318                     	;# 
   693  0319                     	;# 
   694  031A                     	;# 
   695  031C                     	;# 
   696  031C                     	;# 
   697  031D                     	;# 
   698  031E                     	;# 
   699  038C                     	;# 
   700  038D                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  040C                     	;# 
   705  040D                     	;# 
   706  0411                     	;# 
   707  0411                     	;# 
   708  0412                     	;# 
   709  0413                     	;# 
   710  0414                     	;# 
   711  0415                     	;# 
   712  0416                     	;# 
   713  0417                     	;# 
   714  0418                     	;# 
   715  0418                     	;# 
   716  0419                     	;# 
   717  041A                     	;# 
   718  041B                     	;# 
   719  041C                     	;# 
   720  041D                     	;# 
   721  041E                     	;# 
   722  048D                     	;# 
   723  0491                     	;# 
   724  0491                     	;# 
   725  0492                     	;# 
   726  0492                     	;# 
   727  0493                     	;# 
   728  0493                     	;# 
   729  0493                     	;# 
   730  0494                     	;# 
   731  0494                     	;# 
   732  0495                     	;# 
   733  0495                     	;# 
   734  0496                     	;# 
   735  0496                     	;# 
   736  0497                     	;# 
   737  0497                     	;# 
   738  0595                     	;# 
   739  0596                     	;# 
   740  0597                     	;# 
   741  059C                     	;# 
   742  059D                     	;# 
   743  059E                     	;# 
   744  0611                     	;# 
   745  0611                     	;# 
   746  0612                     	;# 
   747  0613                     	;# 
   748  0614                     	;# 
   749  0614                     	;# 
   750  0615                     	;# 
   751  0616                     	;# 
   752  0617                     	;# 
   753  0617                     	;# 
   754  0618                     	;# 
   755  0619                     	;# 
   756  061A                     	;# 
   757  061A                     	;# 
   758  061B                     	;# 
   759  061C                     	;# 
   760  061D                     	;# 
   761  061D                     	;# 
   762  061E                     	;# 
   763  061F                     	;# 
   764  0FE4                     	;# 
   765  0FE5                     	;# 
   766  0FE6                     	;# 
   767  0FE7                     	;# 
   768  0FE8                     	;# 
   769  0FE9                     	;# 
   770  0FEA                     	;# 
   771  0FEB                     	;# 
   772  0FED                     	;# 
   773  0FEE                     	;# 
   774  0FEF                     	;# 
   775  0000                     	;# 
   776  0001                     	;# 
   777  0002                     	;# 
   778  0003                     	;# 
   779  0004                     	;# 
   780  0005                     	;# 
   781  0006                     	;# 
   782  0007                     	;# 
   783  0008                     	;# 
   784  0009                     	;# 
   785  000A                     	;# 
   786  000B                     	;# 
   787  000C                     	;# 
   788  000D                     	;# 
   789  000E                     	;# 
   790  000F                     	;# 
   791  0010                     	;# 
   792  0011                     	;# 
   793  0012                     	;# 
   794  0013                     	;# 
   795  0014                     	;# 
   796  0015                     	;# 
   797  0016                     	;# 
   798  0016                     	;# 
   799  0017                     	;# 
   800  0018                     	;# 
   801  0019                     	;# 
   802  001A                     	;# 
   803  001B                     	;# 
   804  001C                     	;# 
   805  008C                     	;# 
   806  008D                     	;# 
   807  008E                     	;# 
   808  008F                     	;# 
   809  0090                     	;# 
   810  0091                     	;# 
   811  0092                     	;# 
   812  0093                     	;# 
   813  0094                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0099                     	;# 
   818  009A                     	;# 
   819  009B                     	;# 
   820  009B                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009E                     	;# 
   824  010C                     	;# 
   825  010D                     	;# 
   826  010E                     	;# 
   827  010F                     	;# 
   828  0110                     	;# 
   829  0116                     	;# 
   830  0117                     	;# 
   831  011D                     	;# 
   832  018C                     	;# 
   833  018D                     	;# 
   834  018F                     	;# 
   835  0190                     	;# 
   836  0191                     	;# 
   837  0191                     	;# 
   838  0192                     	;# 
   839  0193                     	;# 
   840  0193                     	;# 
   841  0194                     	;# 
   842  0195                     	;# 
   843  0196                     	;# 
   844  0197                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  0199                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019A                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019D                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019E                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020D                     	;# 
   869  020F                     	;# 
   870  0210                     	;# 
   871  0211                     	;# 
   872  0211                     	;# 
   873  0212                     	;# 
   874  0212                     	;# 
   875  0213                     	;# 
   876  0213                     	;# 
   877  0214                     	;# 
   878  0214                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0216                     	;# 
   883  0216                     	;# 
   884  0217                     	;# 
   885  0217                     	;# 
   886  0219                     	;# 
   887  021A                     	;# 
   888  021B                     	;# 
   889  021C                     	;# 
   890  021D                     	;# 
   891  021E                     	;# 
   892  021F                     	;# 
   893  028C                     	;# 
   894  028D                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  029D                     	;# 
   904  029E                     	;# 
   905  029F                     	;# 
   906  030C                     	;# 
   907  030D                     	;# 
   908  0311                     	;# 
   909  0311                     	;# 
   910  0312                     	;# 
   911  0313                     	;# 
   912  0318                     	;# 
   913  0318                     	;# 
   914  0319                     	;# 
   915  031A                     	;# 
   916  031C                     	;# 
   917  031C                     	;# 
   918  031D                     	;# 
   919  031E                     	;# 
   920  038C                     	;# 
   921  038D                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  040C                     	;# 
   926  040D                     	;# 
   927  0411                     	;# 
   928  0411                     	;# 
   929  0412                     	;# 
   930  0413                     	;# 
   931  0414                     	;# 
   932  0415                     	;# 
   933  0416                     	;# 
   934  0417                     	;# 
   935  0418                     	;# 
   936  0418                     	;# 
   937  0419                     	;# 
   938  041A                     	;# 
   939  041B                     	;# 
   940  041C                     	;# 
   941  041D                     	;# 
   942  041E                     	;# 
   943  048D                     	;# 
   944  0491                     	;# 
   945  0491                     	;# 
   946  0492                     	;# 
   947  0492                     	;# 
   948  0493                     	;# 
   949  0493                     	;# 
   950  0493                     	;# 
   951  0494                     	;# 
   952  0494                     	;# 
   953  0495                     	;# 
   954  0495                     	;# 
   955  0496                     	;# 
   956  0496                     	;# 
   957  0497                     	;# 
   958  0497                     	;# 
   959  0595                     	;# 
   960  0596                     	;# 
   961  0597                     	;# 
   962  059C                     	;# 
   963  059D                     	;# 
   964  059E                     	;# 
   965  0611                     	;# 
   966  0611                     	;# 
   967  0612                     	;# 
   968  0613                     	;# 
   969  0614                     	;# 
   970  0614                     	;# 
   971  0615                     	;# 
   972  0616                     	;# 
   973  0617                     	;# 
   974  0617                     	;# 
   975  0618                     	;# 
   976  0619                     	;# 
   977  061A                     	;# 
   978  061A                     	;# 
   979  061B                     	;# 
   980  061C                     	;# 
   981  061D                     	;# 
   982  061D                     	;# 
   983  061E                     	;# 
   984  061F                     	;# 
   985  0FE4                     	;# 
   986  0FE5                     	;# 
   987  0FE6                     	;# 
   988  0FE7                     	;# 
   989  0FE8                     	;# 
   990  0FE9                     	;# 
   991  0FEA                     	;# 
   992  0FEB                     	;# 
   993  0FED                     	;# 
   994  0FEE                     	;# 
   995  0FEF                     	;# 
   996  0000                     	;# 
   997  0001                     	;# 
   998  0002                     	;# 
   999  0003                     	;# 
  1000  0004                     	;# 
  1001  0005                     	;# 
  1002  0006                     	;# 
  1003  0007                     	;# 
  1004  0008                     	;# 
  1005  0009                     	;# 
  1006  000A                     	;# 
  1007  000B                     	;# 
  1008  000C                     	;# 
  1009  000D                     	;# 
  1010  000E                     	;# 
  1011  000F                     	;# 
  1012  0010                     	;# 
  1013  0011                     	;# 
  1014  0012                     	;# 
  1015  0013                     	;# 
  1016  0014                     	;# 
  1017  0015                     	;# 
  1018  0016                     	;# 
  1019  0016                     	;# 
  1020  0017                     	;# 
  1021  0018                     	;# 
  1022  0019                     	;# 
  1023  001A                     	;# 
  1024  001B                     	;# 
  1025  001C                     	;# 
  1026  008C                     	;# 
  1027  008D                     	;# 
  1028  008E                     	;# 
  1029  008F                     	;# 
  1030  0090                     	;# 
  1031  0091                     	;# 
  1032  0092                     	;# 
  1033  0093                     	;# 
  1034  0094                     	;# 
  1035  0095                     	;# 
  1036  0096                     	;# 
  1037  0097                     	;# 
  1038  0099                     	;# 
  1039  009A                     	;# 
  1040  009B                     	;# 
  1041  009B                     	;# 
  1042  009C                     	;# 
  1043  009D                     	;# 
  1044  009E                     	;# 
  1045  010C                     	;# 
  1046  010D                     	;# 
  1047  010E                     	;# 
  1048  010F                     	;# 
  1049  0110                     	;# 
  1050  0116                     	;# 
  1051  0117                     	;# 
  1052  011D                     	;# 
  1053  018C                     	;# 
  1054  018D                     	;# 
  1055  018F                     	;# 
  1056  0190                     	;# 
  1057  0191                     	;# 
  1058  0191                     	;# 
  1059  0192                     	;# 
  1060  0193                     	;# 
  1061  0193                     	;# 
  1062  0194                     	;# 
  1063  0195                     	;# 
  1064  0196                     	;# 
  1065  0197                     	;# 
  1066  0199                     	;# 
  1067  0199                     	;# 
  1068  0199                     	;# 
  1069  019A                     	;# 
  1070  019A                     	;# 
  1071  019A                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019B                     	;# 
  1076  019B                     	;# 
  1077  019C                     	;# 
  1078  019C                     	;# 
  1079  019C                     	;# 
  1080  019D                     	;# 
  1081  019D                     	;# 
  1082  019D                     	;# 
  1083  019E                     	;# 
  1084  019E                     	;# 
  1085  019E                     	;# 
  1086  019F                     	;# 
  1087  019F                     	;# 
  1088  019F                     	;# 
  1089  020D                     	;# 
  1090  020F                     	;# 
  1091  0210                     	;# 
  1092  0211                     	;# 
  1093  0211                     	;# 
  1094  0212                     	;# 
  1095  0212                     	;# 
  1096  0213                     	;# 
  1097  0213                     	;# 
  1098  0214                     	;# 
  1099  0214                     	;# 
  1100  0215                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0216                     	;# 
  1104  0216                     	;# 
  1105  0217                     	;# 
  1106  0217                     	;# 
  1107  0219                     	;# 
  1108  021A                     	;# 
  1109  021B                     	;# 
  1110  021C                     	;# 
  1111  021D                     	;# 
  1112  021E                     	;# 
  1113  021F                     	;# 
  1114  028C                     	;# 
  1115  028D                     	;# 
  1116  0291                     	;# 
  1117  0291                     	;# 
  1118  0292                     	;# 
  1119  0293                     	;# 
  1120  0298                     	;# 
  1121  0298                     	;# 
  1122  0299                     	;# 
  1123  029A                     	;# 
  1124  029D                     	;# 
  1125  029E                     	;# 
  1126  029F                     	;# 
  1127  030C                     	;# 
  1128  030D                     	;# 
  1129  0311                     	;# 
  1130  0311                     	;# 
  1131  0312                     	;# 
  1132  0313                     	;# 
  1133  0318                     	;# 
  1134  0318                     	;# 
  1135  0319                     	;# 
  1136  031A                     	;# 
  1137  031C                     	;# 
  1138  031C                     	;# 
  1139  031D                     	;# 
  1140  031E                     	;# 
  1141  038C                     	;# 
  1142  038D                     	;# 
  1143  0394                     	;# 
  1144  0395                     	;# 
  1145  0396                     	;# 
  1146  040C                     	;# 
  1147  040D                     	;# 
  1148  0411                     	;# 
  1149  0411                     	;# 
  1150  0412                     	;# 
  1151  0413                     	;# 
  1152  0414                     	;# 
  1153  0415                     	;# 
  1154  0416                     	;# 
  1155  0417                     	;# 
  1156  0418                     	;# 
  1157  0418                     	;# 
  1158  0419                     	;# 
  1159  041A                     	;# 
  1160  041B                     	;# 
  1161  041C                     	;# 
  1162  041D                     	;# 
  1163  041E                     	;# 
  1164  048D                     	;# 
  1165  0491                     	;# 
  1166  0491                     	;# 
  1167  0492                     	;# 
  1168  0492                     	;# 
  1169  0493                     	;# 
  1170  0493                     	;# 
  1171  0493                     	;# 
  1172  0494                     	;# 
  1173  0494                     	;# 
  1174  0495                     	;# 
  1175  0495                     	;# 
  1176  0496                     	;# 
  1177  0496                     	;# 
  1178  0497                     	;# 
  1179  0497                     	;# 
  1180  0595                     	;# 
  1181  0596                     	;# 
  1182  0597                     	;# 
  1183  059C                     	;# 
  1184  059D                     	;# 
  1185  059E                     	;# 
  1186  0611                     	;# 
  1187  0611                     	;# 
  1188  0612                     	;# 
  1189  0613                     	;# 
  1190  0614                     	;# 
  1191  0614                     	;# 
  1192  0615                     	;# 
  1193  0616                     	;# 
  1194  0617                     	;# 
  1195  0617                     	;# 
  1196  0618                     	;# 
  1197  0619                     	;# 
  1198  061A                     	;# 
  1199  061A                     	;# 
  1200  061B                     	;# 
  1201  061C                     	;# 
  1202  061D                     	;# 
  1203  061D                     	;# 
  1204  061E                     	;# 
  1205  061F                     	;# 
  1206  0FE4                     	;# 
  1207  0FE5                     	;# 
  1208  0FE6                     	;# 
  1209  0FE7                     	;# 
  1210  0FE8                     	;# 
  1211  0FE9                     	;# 
  1212  0FEA                     	;# 
  1213  0FEB                     	;# 
  1214  0FED                     	;# 
  1215  0FEE                     	;# 
  1216  0FEF                     	;# 
  1217  0000                     	;# 
  1218  0001                     	;# 
  1219  0002                     	;# 
  1220  0003                     	;# 
  1221  0004                     	;# 
  1222  0005                     	;# 
  1223  0006                     	;# 
  1224  0007                     	;# 
  1225  0008                     	;# 
  1226  0009                     	;# 
  1227  000A                     	;# 
  1228  000B                     	;# 
  1229  000C                     	;# 
  1230  000D                     	;# 
  1231  000E                     	;# 
  1232  000F                     	;# 
  1233  0010                     	;# 
  1234  0011                     	;# 
  1235  0012                     	;# 
  1236  0013                     	;# 
  1237  0014                     	;# 
  1238  0015                     	;# 
  1239  0016                     	;# 
  1240  0016                     	;# 
  1241  0017                     	;# 
  1242  0018                     	;# 
  1243  0019                     	;# 
  1244  001A                     	;# 
  1245  001B                     	;# 
  1246  001C                     	;# 
  1247  008C                     	;# 
  1248  008D                     	;# 
  1249  008E                     	;# 
  1250  008F                     	;# 
  1251  0090                     	;# 
  1252  0091                     	;# 
  1253  0092                     	;# 
  1254  0093                     	;# 
  1255  0094                     	;# 
  1256  0095                     	;# 
  1257  0096                     	;# 
  1258  0097                     	;# 
  1259  0099                     	;# 
  1260  009A                     	;# 
  1261  009B                     	;# 
  1262  009B                     	;# 
  1263  009C                     	;# 
  1264  009D                     	;# 
  1265  009E                     	;# 
  1266  010C                     	;# 
  1267  010D                     	;# 
  1268  010E                     	;# 
  1269  010F                     	;# 
  1270  0110                     	;# 
  1271  0116                     	;# 
  1272  0117                     	;# 
  1273  011D                     	;# 
  1274  018C                     	;# 
  1275  018D                     	;# 
  1276  018F                     	;# 
  1277  0190                     	;# 
  1278  0191                     	;# 
  1279  0191                     	;# 
  1280  0192                     	;# 
  1281  0193                     	;# 
  1282  0193                     	;# 
  1283  0194                     	;# 
  1284  0195                     	;# 
  1285  0196                     	;# 
  1286  0197                     	;# 
  1287  0199                     	;# 
  1288  0199                     	;# 
  1289  0199                     	;# 
  1290  019A                     	;# 
  1291  019A                     	;# 
  1292  019A                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019B                     	;# 
  1298  019C                     	;# 
  1299  019C                     	;# 
  1300  019C                     	;# 
  1301  019D                     	;# 
  1302  019D                     	;# 
  1303  019D                     	;# 
  1304  019E                     	;# 
  1305  019E                     	;# 
  1306  019E                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  020D                     	;# 
  1311  020F                     	;# 
  1312  0210                     	;# 
  1313  0211                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0214                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0216                     	;# 
  1325  0216                     	;# 
  1326  0217                     	;# 
  1327  0217                     	;# 
  1328  0219                     	;# 
  1329  021A                     	;# 
  1330  021B                     	;# 
  1331  021C                     	;# 
  1332  021D                     	;# 
  1333  021E                     	;# 
  1334  021F                     	;# 
  1335  028C                     	;# 
  1336  028D                     	;# 
  1337  0291                     	;# 
  1338  0291                     	;# 
  1339  0292                     	;# 
  1340  0293                     	;# 
  1341  0298                     	;# 
  1342  0298                     	;# 
  1343  0299                     	;# 
  1344  029A                     	;# 
  1345  029D                     	;# 
  1346  029E                     	;# 
  1347  029F                     	;# 
  1348  030C                     	;# 
  1349  030D                     	;# 
  1350  0311                     	;# 
  1351  0311                     	;# 
  1352  0312                     	;# 
  1353  0313                     	;# 
  1354  0318                     	;# 
  1355  0318                     	;# 
  1356  0319                     	;# 
  1357  031A                     	;# 
  1358  031C                     	;# 
  1359  031C                     	;# 
  1360  031D                     	;# 
  1361  031E                     	;# 
  1362  038C                     	;# 
  1363  038D                     	;# 
  1364  0394                     	;# 
  1365  0395                     	;# 
  1366  0396                     	;# 
  1367  040C                     	;# 
  1368  040D                     	;# 
  1369  0411                     	;# 
  1370  0411                     	;# 
  1371  0412                     	;# 
  1372  0413                     	;# 
  1373  0414                     	;# 
  1374  0415                     	;# 
  1375  0416                     	;# 
  1376  0417                     	;# 
  1377  0418                     	;# 
  1378  0418                     	;# 
  1379  0419                     	;# 
  1380  041A                     	;# 
  1381  041B                     	;# 
  1382  041C                     	;# 
  1383  041D                     	;# 
  1384  041E                     	;# 
  1385  048D                     	;# 
  1386  0491                     	;# 
  1387  0491                     	;# 
  1388  0492                     	;# 
  1389  0492                     	;# 
  1390  0493                     	;# 
  1391  0493                     	;# 
  1392  0493                     	;# 
  1393  0494                     	;# 
  1394  0494                     	;# 
  1395  0495                     	;# 
  1396  0495                     	;# 
  1397  0496                     	;# 
  1398  0496                     	;# 
  1399  0497                     	;# 
  1400  0497                     	;# 
  1401  0595                     	;# 
  1402  0596                     	;# 
  1403  0597                     	;# 
  1404  059C                     	;# 
  1405  059D                     	;# 
  1406  059E                     	;# 
  1407  0611                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0614                     	;# 
  1412  0614                     	;# 
  1413  0615                     	;# 
  1414  0616                     	;# 
  1415  0617                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  061A                     	;# 
  1420  061A                     	;# 
  1421  061B                     	;# 
  1422  061C                     	;# 
  1423  061D                     	;# 
  1424  061D                     	;# 
  1425  061E                     	;# 
  1426  061F                     	;# 
  1427  0FE4                     	;# 
  1428  0FE5                     	;# 
  1429  0FE6                     	;# 
  1430  0FE7                     	;# 
  1431  0FE8                     	;# 
  1432  0FE9                     	;# 
  1433  0FEA                     	;# 
  1434  0FEB                     	;# 
  1435  0FED                     	;# 
  1436  0FEE                     	;# 
  1437  0FEF                     	;# 
  1438  0000                     	;# 
  1439  0001                     	;# 
  1440  0002                     	;# 
  1441  0003                     	;# 
  1442  0004                     	;# 
  1443  0005                     	;# 
  1444  0006                     	;# 
  1445  0007                     	;# 
  1446  0008                     	;# 
  1447  0009                     	;# 
  1448  000A                     	;# 
  1449  000B                     	;# 
  1450  000C                     	;# 
  1451  000D                     	;# 
  1452  000E                     	;# 
  1453  000F                     	;# 
  1454  0010                     	;# 
  1455  0011                     	;# 
  1456  0012                     	;# 
  1457  0013                     	;# 
  1458  0014                     	;# 
  1459  0015                     	;# 
  1460  0016                     	;# 
  1461  0016                     	;# 
  1462  0017                     	;# 
  1463  0018                     	;# 
  1464  0019                     	;# 
  1465  001A                     	;# 
  1466  001B                     	;# 
  1467  001C                     	;# 
  1468  008C                     	;# 
  1469  008D                     	;# 
  1470  008E                     	;# 
  1471  008F                     	;# 
  1472  0090                     	;# 
  1473  0091                     	;# 
  1474  0092                     	;# 
  1475  0093                     	;# 
  1476  0094                     	;# 
  1477  0095                     	;# 
  1478  0096                     	;# 
  1479  0097                     	;# 
  1480  0099                     	;# 
  1481  009A                     	;# 
  1482  009B                     	;# 
  1483  009B                     	;# 
  1484  009C                     	;# 
  1485  009D                     	;# 
  1486  009E                     	;# 
  1487  010C                     	;# 
  1488  010D                     	;# 
  1489  010E                     	;# 
  1490  010F                     	;# 
  1491  0110                     	;# 
  1492  0116                     	;# 
  1493  0117                     	;# 
  1494  011D                     	;# 
  1495  018C                     	;# 
  1496  018D                     	;# 
  1497  018F                     	;# 
  1498  0190                     	;# 
  1499  0191                     	;# 
  1500  0191                     	;# 
  1501  0192                     	;# 
  1502  0193                     	;# 
  1503  0193                     	;# 
  1504  0194                     	;# 
  1505  0195                     	;# 
  1506  0196                     	;# 
  1507  0197                     	;# 
  1508  0199                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019D                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019E                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019F                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  020D                     	;# 
  1532  020F                     	;# 
  1533  0210                     	;# 
  1534  0211                     	;# 
  1535  0211                     	;# 
  1536  0212                     	;# 
  1537  0212                     	;# 
  1538  0213                     	;# 
  1539  0213                     	;# 
  1540  0214                     	;# 
  1541  0214                     	;# 
  1542  0215                     	;# 
  1543  0215                     	;# 
  1544  0215                     	;# 
  1545  0216                     	;# 
  1546  0216                     	;# 
  1547  0217                     	;# 
  1548  0217                     	;# 
  1549  0219                     	;# 
  1550  021A                     	;# 
  1551  021B                     	;# 
  1552  021C                     	;# 
  1553  021D                     	;# 
  1554  021E                     	;# 
  1555  021F                     	;# 
  1556  028C                     	;# 
  1557  028D                     	;# 
  1558  0291                     	;# 
  1559  0291                     	;# 
  1560  0292                     	;# 
  1561  0293                     	;# 
  1562  0298                     	;# 
  1563  0298                     	;# 
  1564  0299                     	;# 
  1565  029A                     	;# 
  1566  029D                     	;# 
  1567  029E                     	;# 
  1568  029F                     	;# 
  1569  030C                     	;# 
  1570  030D                     	;# 
  1571  0311                     	;# 
  1572  0311                     	;# 
  1573  0312                     	;# 
  1574  0313                     	;# 
  1575  0318                     	;# 
  1576  0318                     	;# 
  1577  0319                     	;# 
  1578  031A                     	;# 
  1579  031C                     	;# 
  1580  031C                     	;# 
  1581  031D                     	;# 
  1582  031E                     	;# 
  1583  038C                     	;# 
  1584  038D                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  040C                     	;# 
  1589  040D                     	;# 
  1590  0411                     	;# 
  1591  0411                     	;# 
  1592  0412                     	;# 
  1593  0413                     	;# 
  1594  0414                     	;# 
  1595  0415                     	;# 
  1596  0416                     	;# 
  1597  0417                     	;# 
  1598  0418                     	;# 
  1599  0418                     	;# 
  1600  0419                     	;# 
  1601  041A                     	;# 
  1602  041B                     	;# 
  1603  041C                     	;# 
  1604  041D                     	;# 
  1605  041E                     	;# 
  1606  048D                     	;# 
  1607  0491                     	;# 
  1608  0491                     	;# 
  1609  0492                     	;# 
  1610  0492                     	;# 
  1611  0493                     	;# 
  1612  0493                     	;# 
  1613  0493                     	;# 
  1614  0494                     	;# 
  1615  0494                     	;# 
  1616  0495                     	;# 
  1617  0495                     	;# 
  1618  0496                     	;# 
  1619  0496                     	;# 
  1620  0497                     	;# 
  1621  0497                     	;# 
  1622  0595                     	;# 
  1623  0596                     	;# 
  1624  0597                     	;# 
  1625  059C                     	;# 
  1626  059D                     	;# 
  1627  059E                     	;# 
  1628  0611                     	;# 
  1629  0611                     	;# 
  1630  0612                     	;# 
  1631  0613                     	;# 
  1632  0614                     	;# 
  1633  0614                     	;# 
  1634  0615                     	;# 
  1635  0616                     	;# 
  1636  0617                     	;# 
  1637  0617                     	;# 
  1638  0618                     	;# 
  1639  0619                     	;# 
  1640  061A                     	;# 
  1641  061A                     	;# 
  1642  061B                     	;# 
  1643  061C                     	;# 
  1644  061D                     	;# 
  1645  061D                     	;# 
  1646  061E                     	;# 
  1647  061F                     	;# 
  1648  0FE4                     	;# 
  1649  0FE5                     	;# 
  1650  0FE6                     	;# 
  1651  0FE7                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEB                     	;# 
  1656  0FED                     	;# 
  1657  0FEE                     	;# 
  1658  0FEF                     	;# 
  1659  0000                     	;# 
  1660  0001                     	;# 
  1661  0002                     	;# 
  1662  0003                     	;# 
  1663  0004                     	;# 
  1664  0005                     	;# 
  1665  0006                     	;# 
  1666  0007                     	;# 
  1667  0008                     	;# 
  1668  0009                     	;# 
  1669  000A                     	;# 
  1670  000B                     	;# 
  1671  000C                     	;# 
  1672  000D                     	;# 
  1673  000E                     	;# 
  1674  000F                     	;# 
  1675  0010                     	;# 
  1676  0011                     	;# 
  1677  0012                     	;# 
  1678  0013                     	;# 
  1679  0014                     	;# 
  1680  0015                     	;# 
  1681  0016                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  0019                     	;# 
  1686  001A                     	;# 
  1687  001B                     	;# 
  1688  001C                     	;# 
  1689  008C                     	;# 
  1690  008D                     	;# 
  1691  008E                     	;# 
  1692  008F                     	;# 
  1693  0090                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0094                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0099                     	;# 
  1702  009A                     	;# 
  1703  009B                     	;# 
  1704  009B                     	;# 
  1705  009C                     	;# 
  1706  009D                     	;# 
  1707  009E                     	;# 
  1708  010C                     	;# 
  1709  010D                     	;# 
  1710  010E                     	;# 
  1711  010F                     	;# 
  1712  0110                     	;# 
  1713  0116                     	;# 
  1714  0117                     	;# 
  1715  011D                     	;# 
  1716  018C                     	;# 
  1717  018D                     	;# 
  1718  018F                     	;# 
  1719  0190                     	;# 
  1720  0191                     	;# 
  1721  0191                     	;# 
  1722  0192                     	;# 
  1723  0193                     	;# 
  1724  0193                     	;# 
  1725  0194                     	;# 
  1726  0195                     	;# 
  1727  0196                     	;# 
  1728  0197                     	;# 
  1729  0199                     	;# 
  1730  0199                     	;# 
  1731  0199                     	;# 
  1732  019A                     	;# 
  1733  019A                     	;# 
  1734  019A                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019B                     	;# 
  1740  019C                     	;# 
  1741  019C                     	;# 
  1742  019C                     	;# 
  1743  019D                     	;# 
  1744  019D                     	;# 
  1745  019D                     	;# 
  1746  019E                     	;# 
  1747  019E                     	;# 
  1748  019E                     	;# 
  1749  019F                     	;# 
  1750  019F                     	;# 
  1751  019F                     	;# 
  1752  020D                     	;# 
  1753  020F                     	;# 
  1754  0210                     	;# 
  1755  0211                     	;# 
  1756  0211                     	;# 
  1757  0212                     	;# 
  1758  0212                     	;# 
  1759  0213                     	;# 
  1760  0213                     	;# 
  1761  0214                     	;# 
  1762  0214                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0215                     	;# 
  1766  0216                     	;# 
  1767  0216                     	;# 
  1768  0217                     	;# 
  1769  0217                     	;# 
  1770  0219                     	;# 
  1771  021A                     	;# 
  1772  021B                     	;# 
  1773  021C                     	;# 
  1774  021D                     	;# 
  1775  021E                     	;# 
  1776  021F                     	;# 
  1777  028C                     	;# 
  1778  028D                     	;# 
  1779  0291                     	;# 
  1780  0291                     	;# 
  1781  0292                     	;# 
  1782  0293                     	;# 
  1783  0298                     	;# 
  1784  0298                     	;# 
  1785  0299                     	;# 
  1786  029A                     	;# 
  1787  029D                     	;# 
  1788  029E                     	;# 
  1789  029F                     	;# 
  1790  030C                     	;# 
  1791  030D                     	;# 
  1792  0311                     	;# 
  1793  0311                     	;# 
  1794  0312                     	;# 
  1795  0313                     	;# 
  1796  0318                     	;# 
  1797  0318                     	;# 
  1798  0319                     	;# 
  1799  031A                     	;# 
  1800  031C                     	;# 
  1801  031C                     	;# 
  1802  031D                     	;# 
  1803  031E                     	;# 
  1804  038C                     	;# 
  1805  038D                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  040C                     	;# 
  1810  040D                     	;# 
  1811  0411                     	;# 
  1812  0411                     	;# 
  1813  0412                     	;# 
  1814  0413                     	;# 
  1815  0414                     	;# 
  1816  0415                     	;# 
  1817  0416                     	;# 
  1818  0417                     	;# 
  1819  0418                     	;# 
  1820  0418                     	;# 
  1821  0419                     	;# 
  1822  041A                     	;# 
  1823  041B                     	;# 
  1824  041C                     	;# 
  1825  041D                     	;# 
  1826  041E                     	;# 
  1827  048D                     	;# 
  1828  0491                     	;# 
  1829  0491                     	;# 
  1830  0492                     	;# 
  1831  0492                     	;# 
  1832  0493                     	;# 
  1833  0493                     	;# 
  1834  0493                     	;# 
  1835  0494                     	;# 
  1836  0494                     	;# 
  1837  0495                     	;# 
  1838  0495                     	;# 
  1839  0496                     	;# 
  1840  0496                     	;# 
  1841  0497                     	;# 
  1842  0497                     	;# 
  1843  0595                     	;# 
  1844  0596                     	;# 
  1845  0597                     	;# 
  1846  059C                     	;# 
  1847  059D                     	;# 
  1848  059E                     	;# 
  1849  0611                     	;# 
  1850  0611                     	;# 
  1851  0612                     	;# 
  1852  0613                     	;# 
  1853  0614                     	;# 
  1854  0614                     	;# 
  1855  0615                     	;# 
  1856  0616                     	;# 
  1857  0617                     	;# 
  1858  0617                     	;# 
  1859  0618                     	;# 
  1860  0619                     	;# 
  1861  061A                     	;# 
  1862  061A                     	;# 
  1863  061B                     	;# 
  1864  061C                     	;# 
  1865  061D                     	;# 
  1866  061D                     	;# 
  1867  061E                     	;# 
  1868  061F                     	;# 
  1869  0FE4                     	;# 
  1870  0FE5                     	;# 
  1871  0FE6                     	;# 
  1872  0FE7                     	;# 
  1873  0FE8                     	;# 
  1874  0FE9                     	;# 
  1875  0FEA                     	;# 
  1876  0FEB                     	;# 
  1877  0FED                     	;# 
  1878  0FEE                     	;# 
  1879  0FEF                     	;# 
  1880  0000                     	;# 
  1881  0001                     	;# 
  1882  0002                     	;# 
  1883  0003                     	;# 
  1884  0004                     	;# 
  1885  0005                     	;# 
  1886  0006                     	;# 
  1887  0007                     	;# 
  1888  0008                     	;# 
  1889  0009                     	;# 
  1890  000A                     	;# 
  1891  000B                     	;# 
  1892  000C                     	;# 
  1893  000D                     	;# 
  1894  000E                     	;# 
  1895  000F                     	;# 
  1896  0010                     	;# 
  1897  0011                     	;# 
  1898  0012                     	;# 
  1899  0013                     	;# 
  1900  0014                     	;# 
  1901  0015                     	;# 
  1902  0016                     	;# 
  1903  0016                     	;# 
  1904  0017                     	;# 
  1905  0018                     	;# 
  1906  0019                     	;# 
  1907  001A                     	;# 
  1908  001B                     	;# 
  1909  001C                     	;# 
  1910  008C                     	;# 
  1911  008D                     	;# 
  1912  008E                     	;# 
  1913  008F                     	;# 
  1914  0090                     	;# 
  1915  0091                     	;# 
  1916  0092                     	;# 
  1917  0093                     	;# 
  1918  0094                     	;# 
  1919  0095                     	;# 
  1920  0096                     	;# 
  1921  0097                     	;# 
  1922  0099                     	;# 
  1923  009A                     	;# 
  1924  009B                     	;# 
  1925  009B                     	;# 
  1926  009C                     	;# 
  1927  009D                     	;# 
  1928  009E                     	;# 
  1929  010C                     	;# 
  1930  010D                     	;# 
  1931  010E                     	;# 
  1932  010F                     	;# 
  1933  0110                     	;# 
  1934  0116                     	;# 
  1935  0117                     	;# 
  1936  011D                     	;# 
  1937  018C                     	;# 
  1938  018D                     	;# 
  1939  018F                     	;# 
  1940  0190                     	;# 
  1941  0191                     	;# 
  1942  0191                     	;# 
  1943  0192                     	;# 
  1944  0193                     	;# 
  1945  0193                     	;# 
  1946  0194                     	;# 
  1947  0195                     	;# 
  1948  0196                     	;# 
  1949  0197                     	;# 
  1950  0199                     	;# 
  1951  0199                     	;# 
  1952  0199                     	;# 
  1953  019A                     	;# 
  1954  019A                     	;# 
  1955  019A                     	;# 
  1956  019B                     	;# 
  1957  019B                     	;# 
  1958  019B                     	;# 
  1959  019B                     	;# 
  1960  019B                     	;# 
  1961  019C                     	;# 
  1962  019C                     	;# 
  1963  019C                     	;# 
  1964  019D                     	;# 
  1965  019D                     	;# 
  1966  019D                     	;# 
  1967  019E                     	;# 
  1968  019E                     	;# 
  1969  019E                     	;# 
  1970  019F                     	;# 
  1971  019F                     	;# 
  1972  019F                     	;# 
  1973  020D                     	;# 
  1974  020F                     	;# 
  1975  0210                     	;# 
  1976  0211                     	;# 
  1977  0211                     	;# 
  1978  0212                     	;# 
  1979  0212                     	;# 
  1980  0213                     	;# 
  1981  0213                     	;# 
  1982  0214                     	;# 
  1983  0214                     	;# 
  1984  0215                     	;# 
  1985  0215                     	;# 
  1986  0215                     	;# 
  1987  0216                     	;# 
  1988  0216                     	;# 
  1989  0217                     	;# 
  1990  0217                     	;# 
  1991  0219                     	;# 
  1992  021A                     	;# 
  1993  021B                     	;# 
  1994  021C                     	;# 
  1995  021D                     	;# 
  1996  021E                     	;# 
  1997  021F                     	;# 
  1998  028C                     	;# 
  1999  028D                     	;# 
  2000  0291                     	;# 
  2001  0291                     	;# 
  2002  0292                     	;# 
  2003  0293                     	;# 
  2004  0298                     	;# 
  2005  0298                     	;# 
  2006  0299                     	;# 
  2007  029A                     	;# 
  2008  029D                     	;# 
  2009  029E                     	;# 
  2010  029F                     	;# 
  2011  030C                     	;# 
  2012  030D                     	;# 
  2013  0311                     	;# 
  2014  0311                     	;# 
  2015  0312                     	;# 
  2016  0313                     	;# 
  2017  0318                     	;# 
  2018  0318                     	;# 
  2019  0319                     	;# 
  2020  031A                     	;# 
  2021  031C                     	;# 
  2022  031C                     	;# 
  2023  031D                     	;# 
  2024  031E                     	;# 
  2025  038C                     	;# 
  2026  038D                     	;# 
  2027  0394                     	;# 
  2028  0395                     	;# 
  2029  0396                     	;# 
  2030  040C                     	;# 
  2031  040D                     	;# 
  2032  0411                     	;# 
  2033  0411                     	;# 
  2034  0412                     	;# 
  2035  0413                     	;# 
  2036  0414                     	;# 
  2037  0415                     	;# 
  2038  0416                     	;# 
  2039  0417                     	;# 
  2040  0418                     	;# 
  2041  0418                     	;# 
  2042  0419                     	;# 
  2043  041A                     	;# 
  2044  041B                     	;# 
  2045  041C                     	;# 
  2046  041D                     	;# 
  2047  041E                     	;# 
  2048  048D                     	;# 
  2049  0491                     	;# 
  2050  0491                     	;# 
  2051  0492                     	;# 
  2052  0492                     	;# 
  2053  0493                     	;# 
  2054  0493                     	;# 
  2055  0493                     	;# 
  2056  0494                     	;# 
  2057  0494                     	;# 
  2058  0495                     	;# 
  2059  0495                     	;# 
  2060  0496                     	;# 
  2061  0496                     	;# 
  2062  0497                     	;# 
  2063  0497                     	;# 
  2064  0595                     	;# 
  2065  0596                     	;# 
  2066  0597                     	;# 
  2067  059C                     	;# 
  2068  059D                     	;# 
  2069  059E                     	;# 
  2070  0611                     	;# 
  2071  0611                     	;# 
  2072  0612                     	;# 
  2073  0613                     	;# 
  2074  0614                     	;# 
  2075  0614                     	;# 
  2076  0615                     	;# 
  2077  0616                     	;# 
  2078  0617                     	;# 
  2079  0617                     	;# 
  2080  0618                     	;# 
  2081  0619                     	;# 
  2082  061A                     	;# 
  2083  061A                     	;# 
  2084  061B                     	;# 
  2085  061C                     	;# 
  2086  061D                     	;# 
  2087  061D                     	;# 
  2088  061E                     	;# 
  2089  061F                     	;# 
  2090  0FE4                     	;# 
  2091  0FE5                     	;# 
  2092  0FE6                     	;# 
  2093  0FE7                     	;# 
  2094  0FE8                     	;# 
  2095  0FE9                     	;# 
  2096  0FEA                     	;# 
  2097  0FEB                     	;# 
  2098  0FED                     	;# 
  2099  0FEE                     	;# 
  2100  0FEF                     	;# 
  2101  0000                     	;# 
  2102  0001                     	;# 
  2103  0002                     	;# 
  2104  0003                     	;# 
  2105  0004                     	;# 
  2106  0005                     	;# 
  2107  0006                     	;# 
  2108  0007                     	;# 
  2109  0008                     	;# 
  2110  0009                     	;# 
  2111  000A                     	;# 
  2112  000B                     	;# 
  2113  000C                     	;# 
  2114  000D                     	;# 
  2115  000E                     	;# 
  2116  000F                     	;# 
  2117  0010                     	;# 
  2118  0011                     	;# 
  2119  0012                     	;# 
  2120  0013                     	;# 
  2121  0014                     	;# 
  2122  0015                     	;# 
  2123  0016                     	;# 
  2124  0016                     	;# 
  2125  0017                     	;# 
  2126  0018                     	;# 
  2127  0019                     	;# 
  2128  001A                     	;# 
  2129  001B                     	;# 
  2130  001C                     	;# 
  2131  008C                     	;# 
  2132  008D                     	;# 
  2133  008E                     	;# 
  2134  008F                     	;# 
  2135  0090                     	;# 
  2136  0091                     	;# 
  2137  0092                     	;# 
  2138  0093                     	;# 
  2139  0094                     	;# 
  2140  0095                     	;# 
  2141  0096                     	;# 
  2142  0097                     	;# 
  2143  0099                     	;# 
  2144  009A                     	;# 
  2145  009B                     	;# 
  2146  009B                     	;# 
  2147  009C                     	;# 
  2148  009D                     	;# 
  2149  009E                     	;# 
  2150  010C                     	;# 
  2151  010D                     	;# 
  2152  010E                     	;# 
  2153  010F                     	;# 
  2154  0110                     	;# 
  2155  0116                     	;# 
  2156  0117                     	;# 
  2157  011D                     	;# 
  2158  018C                     	;# 
  2159  018D                     	;# 
  2160  018F                     	;# 
  2161  0190                     	;# 
  2162  0191                     	;# 
  2163  0191                     	;# 
  2164  0192                     	;# 
  2165  0193                     	;# 
  2166  0193                     	;# 
  2167  0194                     	;# 
  2168  0195                     	;# 
  2169  0196                     	;# 
  2170  0197                     	;# 
  2171  0199                     	;# 
  2172  0199                     	;# 
  2173  0199                     	;# 
  2174  019A                     	;# 
  2175  019A                     	;# 
  2176  019A                     	;# 
  2177  019B                     	;# 
  2178  019B                     	;# 
  2179  019B                     	;# 
  2180  019B                     	;# 
  2181  019B                     	;# 
  2182  019C                     	;# 
  2183  019C                     	;# 
  2184  019C                     	;# 
  2185  019D                     	;# 
  2186  019D                     	;# 
  2187  019D                     	;# 
  2188  019E                     	;# 
  2189  019E                     	;# 
  2190  019E                     	;# 
  2191  019F                     	;# 
  2192  019F                     	;# 
  2193  019F                     	;# 
  2194  020D                     	;# 
  2195  020F                     	;# 
  2196  0210                     	;# 
  2197  0211                     	;# 
  2198  0211                     	;# 
  2199  0212                     	;# 
  2200  0212                     	;# 
  2201  0213                     	;# 
  2202  0213                     	;# 
  2203  0214                     	;# 
  2204  0214                     	;# 
  2205  0215                     	;# 
  2206  0215                     	;# 
  2207  0215                     	;# 
  2208  0216                     	;# 
  2209  0216                     	;# 
  2210  0217                     	;# 
  2211  0217                     	;# 
  2212  0219                     	;# 
  2213  021A                     	;# 
  2214  021B                     	;# 
  2215  021C                     	;# 
  2216  021D                     	;# 
  2217  021E                     	;# 
  2218  021F                     	;# 
  2219  028C                     	;# 
  2220  028D                     	;# 
  2221  0291                     	;# 
  2222  0291                     	;# 
  2223  0292                     	;# 
  2224  0293                     	;# 
  2225  0298                     	;# 
  2226  0298                     	;# 
  2227  0299                     	;# 
  2228  029A                     	;# 
  2229  029D                     	;# 
  2230  029E                     	;# 
  2231  029F                     	;# 
  2232  030C                     	;# 
  2233  030D                     	;# 
  2234  0311                     	;# 
  2235  0311                     	;# 
  2236  0312                     	;# 
  2237  0313                     	;# 
  2238  0318                     	;# 
  2239  0318                     	;# 
  2240  0319                     	;# 
  2241  031A                     	;# 
  2242  031C                     	;# 
  2243  031C                     	;# 
  2244  031D                     	;# 
  2245  031E                     	;# 
  2246  038C                     	;# 
  2247  038D                     	;# 
  2248  0394                     	;# 
  2249  0395                     	;# 
  2250  0396                     	;# 
  2251  040C                     	;# 
  2252  040D                     	;# 
  2253  0411                     	;# 
  2254  0411                     	;# 
  2255  0412                     	;# 
  2256  0413                     	;# 
  2257  0414                     	;# 
  2258  0415                     	;# 
  2259  0416                     	;# 
  2260  0417                     	;# 
  2261  0418                     	;# 
  2262  0418                     	;# 
  2263  0419                     	;# 
  2264  041A                     	;# 
  2265  041B                     	;# 
  2266  041C                     	;# 
  2267  041D                     	;# 
  2268  041E                     	;# 
  2269  048D                     	;# 
  2270  0491                     	;# 
  2271  0491                     	;# 
  2272  0492                     	;# 
  2273  0492                     	;# 
  2274  0493                     	;# 
  2275  0493                     	;# 
  2276  0493                     	;# 
  2277  0494                     	;# 
  2278  0494                     	;# 
  2279  0495                     	;# 
  2280  0495                     	;# 
  2281  0496                     	;# 
  2282  0496                     	;# 
  2283  0497                     	;# 
  2284  0497                     	;# 
  2285  0595                     	;# 
  2286  0596                     	;# 
  2287  0597                     	;# 
  2288  059C                     	;# 
  2289  059D                     	;# 
  2290  059E                     	;# 
  2291  0611                     	;# 
  2292  0611                     	;# 
  2293  0612                     	;# 
  2294  0613                     	;# 
  2295  0614                     	;# 
  2296  0614                     	;# 
  2297  0615                     	;# 
  2298  0616                     	;# 
  2299  0617                     	;# 
  2300  0617                     	;# 
  2301  0618                     	;# 
  2302  0619                     	;# 
  2303  061A                     	;# 
  2304  061A                     	;# 
  2305  061B                     	;# 
  2306  061C                     	;# 
  2307  061D                     	;# 
  2308  061D                     	;# 
  2309  061E                     	;# 
  2310  061F                     	;# 
  2311  0FE4                     	;# 
  2312  0FE5                     	;# 
  2313  0FE6                     	;# 
  2314  0FE7                     	;# 
  2315  0FE8                     	;# 
  2316  0FE9                     	;# 
  2317  0FEA                     	;# 
  2318  0FEB                     	;# 
  2319  0FED                     	;# 
  2320  0FEE                     	;# 
  2321  0FEF                     	;# 
  2322  0000                     	;# 
  2323  0001                     	;# 
  2324  0002                     	;# 
  2325  0003                     	;# 
  2326  0004                     	;# 
  2327  0005                     	;# 
  2328  0006                     	;# 
  2329  0007                     	;# 
  2330  0008                     	;# 
  2331  0009                     	;# 
  2332  000A                     	;# 
  2333  000B                     	;# 
  2334  000C                     	;# 
  2335  000D                     	;# 
  2336  000E                     	;# 
  2337  000F                     	;# 
  2338  0010                     	;# 
  2339  0011                     	;# 
  2340  0012                     	;# 
  2341  0013                     	;# 
  2342  0014                     	;# 
  2343  0015                     	;# 
  2344  0016                     	;# 
  2345  0016                     	;# 
  2346  0017                     	;# 
  2347  0018                     	;# 
  2348  0019                     	;# 
  2349  001A                     	;# 
  2350  001B                     	;# 
  2351  001C                     	;# 
  2352  008C                     	;# 
  2353  008D                     	;# 
  2354  008E                     	;# 
  2355  008F                     	;# 
  2356  0090                     	;# 
  2357  0091                     	;# 
  2358  0092                     	;# 
  2359  0093                     	;# 
  2360  0094                     	;# 
  2361  0095                     	;# 
  2362  0096                     	;# 
  2363  0097                     	;# 
  2364  0099                     	;# 
  2365  009A                     	;# 
  2366  009B                     	;# 
  2367  009B                     	;# 
  2368  009C                     	;# 
  2369  009D                     	;# 
  2370  009E                     	;# 
  2371  010C                     	;# 
  2372  010D                     	;# 
  2373  010E                     	;# 
  2374  010F                     	;# 
  2375  0110                     	;# 
  2376  0116                     	;# 
  2377  0117                     	;# 
  2378  011D                     	;# 
  2379  018C                     	;# 
  2380  018D                     	;# 
  2381  018F                     	;# 
  2382  0190                     	;# 
  2383  0191                     	;# 
  2384  0191                     	;# 
  2385  0192                     	;# 
  2386  0193                     	;# 
  2387  0193                     	;# 
  2388  0194                     	;# 
  2389  0195                     	;# 
  2390  0196                     	;# 
  2391  0197                     	;# 
  2392  0199                     	;# 
  2393  0199                     	;# 
  2394  0199                     	;# 
  2395  019A                     	;# 
  2396  019A                     	;# 
  2397  019A                     	;# 
  2398  019B                     	;# 
  2399  019B                     	;# 
  2400  019B                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019C                     	;# 
  2404  019C                     	;# 
  2405  019C                     	;# 
  2406  019D                     	;# 
  2407  019D                     	;# 
  2408  019D                     	;# 
  2409  019E                     	;# 
  2410  019E                     	;# 
  2411  019E                     	;# 
  2412  019F                     	;# 
  2413  019F                     	;# 
  2414  019F                     	;# 
  2415  020D                     	;# 
  2416  020F                     	;# 
  2417  0210                     	;# 
  2418  0211                     	;# 
  2419  0211                     	;# 
  2420  0212                     	;# 
  2421  0212                     	;# 
  2422  0213                     	;# 
  2423  0213                     	;# 
  2424  0214                     	;# 
  2425  0214                     	;# 
  2426  0215                     	;# 
  2427  0215                     	;# 
  2428  0215                     	;# 
  2429  0216                     	;# 
  2430  0216                     	;# 
  2431  0217                     	;# 
  2432  0217                     	;# 
  2433  0219                     	;# 
  2434  021A                     	;# 
  2435  021B                     	;# 
  2436  021C                     	;# 
  2437  021D                     	;# 
  2438  021E                     	;# 
  2439  021F                     	;# 
  2440  028C                     	;# 
  2441  028D                     	;# 
  2442  0291                     	;# 
  2443  0291                     	;# 
  2444  0292                     	;# 
  2445  0293                     	;# 
  2446  0298                     	;# 
  2447  0298                     	;# 
  2448  0299                     	;# 
  2449  029A                     	;# 
  2450  029D                     	;# 
  2451  029E                     	;# 
  2452  029F                     	;# 
  2453  030C                     	;# 
  2454  030D                     	;# 
  2455  0311                     	;# 
  2456  0311                     	;# 
  2457  0312                     	;# 
  2458  0313                     	;# 
  2459  0318                     	;# 
  2460  0318                     	;# 
  2461  0319                     	;# 
  2462  031A                     	;# 
  2463  031C                     	;# 
  2464  031C                     	;# 
  2465  031D                     	;# 
  2466  031E                     	;# 
  2467  038C                     	;# 
  2468  038D                     	;# 
  2469  0394                     	;# 
  2470  0395                     	;# 
  2471  0396                     	;# 
  2472  040C                     	;# 
  2473  040D                     	;# 
  2474  0411                     	;# 
  2475  0411                     	;# 
  2476  0412                     	;# 
  2477  0413                     	;# 
  2478  0414                     	;# 
  2479  0415                     	;# 
  2480  0416                     	;# 
  2481  0417                     	;# 
  2482  0418                     	;# 
  2483  0418                     	;# 
  2484  0419                     	;# 
  2485  041A                     	;# 
  2486  041B                     	;# 
  2487  041C                     	;# 
  2488  041D                     	;# 
  2489  041E                     	;# 
  2490  048D                     	;# 
  2491  0491                     	;# 
  2492  0491                     	;# 
  2493  0492                     	;# 
  2494  0492                     	;# 
  2495  0493                     	;# 
  2496  0493                     	;# 
  2497  0493                     	;# 
  2498  0494                     	;# 
  2499  0494                     	;# 
  2500  0495                     	;# 
  2501  0495                     	;# 
  2502  0496                     	;# 
  2503  0496                     	;# 
  2504  0497                     	;# 
  2505  0497                     	;# 
  2506  0595                     	;# 
  2507  0596                     	;# 
  2508  0597                     	;# 
  2509  059C                     	;# 
  2510  059D                     	;# 
  2511  059E                     	;# 
  2512  0611                     	;# 
  2513  0611                     	;# 
  2514  0612                     	;# 
  2515  0613                     	;# 
  2516  0614                     	;# 
  2517  0614                     	;# 
  2518  0615                     	;# 
  2519  0616                     	;# 
  2520  0617                     	;# 
  2521  0617                     	;# 
  2522  0618                     	;# 
  2523  0619                     	;# 
  2524  061A                     	;# 
  2525  061A                     	;# 
  2526  061B                     	;# 
  2527  061C                     	;# 
  2528  061D                     	;# 
  2529  061D                     	;# 
  2530  061E                     	;# 
  2531  061F                     	;# 
  2532  0FE4                     	;# 
  2533  0FE5                     	;# 
  2534  0FE6                     	;# 
  2535  0FE7                     	;# 
  2536  0FE8                     	;# 
  2537  0FE9                     	;# 
  2538  0FEA                     	;# 
  2539  0FEB                     	;# 
  2540  0FED                     	;# 
  2541  0FEE                     	;# 
  2542  0FEF                     	;# 
  2543  0000                     	;# 
  2544  0001                     	;# 
  2545  0002                     	;# 
  2546  0003                     	;# 
  2547  0004                     	;# 
  2548  0005                     	;# 
  2549  0006                     	;# 
  2550  0007                     	;# 
  2551  0008                     	;# 
  2552  0009                     	;# 
  2553  000A                     	;# 
  2554  000B                     	;# 
  2555  000C                     	;# 
  2556  000D                     	;# 
  2557  000E                     	;# 
  2558  000F                     	;# 
  2559  0010                     	;# 
  2560  0011                     	;# 
  2561  0012                     	;# 
  2562  0013                     	;# 
  2563  0014                     	;# 
  2564  0015                     	;# 
  2565  0016                     	;# 
  2566  0016                     	;# 
  2567  0017                     	;# 
  2568  0018                     	;# 
  2569  0019                     	;# 
  2570  001A                     	;# 
  2571  001B                     	;# 
  2572  001C                     	;# 
  2573  008C                     	;# 
  2574  008D                     	;# 
  2575  008E                     	;# 
  2576  008F                     	;# 
  2577  0090                     	;# 
  2578  0091                     	;# 
  2579  0092                     	;# 
  2580  0093                     	;# 
  2581  0094                     	;# 
  2582  0095                     	;# 
  2583  0096                     	;# 
  2584  0097                     	;# 
  2585  0099                     	;# 
  2586  009A                     	;# 
  2587  009B                     	;# 
  2588  009B                     	;# 
  2589  009C                     	;# 
  2590  009D                     	;# 
  2591  009E                     	;# 
  2592  010C                     	;# 
  2593  010D                     	;# 
  2594  010E                     	;# 
  2595  010F                     	;# 
  2596  0110                     	;# 
  2597  0116                     	;# 
  2598  0117                     	;# 
  2599  011D                     	;# 
  2600  018C                     	;# 
  2601  018D                     	;# 
  2602  018F                     	;# 
  2603  0190                     	;# 
  2604  0191                     	;# 
  2605  0191                     	;# 
  2606  0192                     	;# 
  2607  0193                     	;# 
  2608  0193                     	;# 
  2609  0194                     	;# 
  2610  0195                     	;# 
  2611  0196                     	;# 
  2612  0197                     	;# 
  2613  0199                     	;# 
  2614  0199                     	;# 
  2615  0199                     	;# 
  2616  019A                     	;# 
  2617  019A                     	;# 
  2618  019A                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019B                     	;# 
  2622  019B                     	;# 
  2623  019B                     	;# 
  2624  019C                     	;# 
  2625  019C                     	;# 
  2626  019C                     	;# 
  2627  019D                     	;# 
  2628  019D                     	;# 
  2629  019D                     	;# 
  2630  019E                     	;# 
  2631  019E                     	;# 
  2632  019E                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  019F                     	;# 
  2636  020D                     	;# 
  2637  020F                     	;# 
  2638  0210                     	;# 
  2639  0211                     	;# 
  2640  0211                     	;# 
  2641  0212                     	;# 
  2642  0212                     	;# 
  2643  0213                     	;# 
  2644  0213                     	;# 
  2645  0214                     	;# 
  2646  0214                     	;# 
  2647  0215                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0216                     	;# 
  2651  0216                     	;# 
  2652  0217                     	;# 
  2653  0217                     	;# 
  2654  0219                     	;# 
  2655  021A                     	;# 
  2656  021B                     	;# 
  2657  021C                     	;# 
  2658  021D                     	;# 
  2659  021E                     	;# 
  2660  021F                     	;# 
  2661  028C                     	;# 
  2662  028D                     	;# 
  2663  0291                     	;# 
  2664  0291                     	;# 
  2665  0292                     	;# 
  2666  0293                     	;# 
  2667  0298                     	;# 
  2668  0298                     	;# 
  2669  0299                     	;# 
  2670  029A                     	;# 
  2671  029D                     	;# 
  2672  029E                     	;# 
  2673  029F                     	;# 
  2674  030C                     	;# 
  2675  030D                     	;# 
  2676  0311                     	;# 
  2677  0311                     	;# 
  2678  0312                     	;# 
  2679  0313                     	;# 
  2680  0318                     	;# 
  2681  0318                     	;# 
  2682  0319                     	;# 
  2683  031A                     	;# 
  2684  031C                     	;# 
  2685  031C                     	;# 
  2686  031D                     	;# 
  2687  031E                     	;# 
  2688  038C                     	;# 
  2689  038D                     	;# 
  2690  0394                     	;# 
  2691  0395                     	;# 
  2692  0396                     	;# 
  2693  040C                     	;# 
  2694  040D                     	;# 
  2695  0411                     	;# 
  2696  0411                     	;# 
  2697  0412                     	;# 
  2698  0413                     	;# 
  2699  0414                     	;# 
  2700  0415                     	;# 
  2701  0416                     	;# 
  2702  0417                     	;# 
  2703  0418                     	;# 
  2704  0418                     	;# 
  2705  0419                     	;# 
  2706  041A                     	;# 
  2707  041B                     	;# 
  2708  041C                     	;# 
  2709  041D                     	;# 
  2710  041E                     	;# 
  2711  048D                     	;# 
  2712  0491                     	;# 
  2713  0491                     	;# 
  2714  0492                     	;# 
  2715  0492                     	;# 
  2716  0493                     	;# 
  2717  0493                     	;# 
  2718  0493                     	;# 
  2719  0494                     	;# 
  2720  0494                     	;# 
  2721  0495                     	;# 
  2722  0495                     	;# 
  2723  0496                     	;# 
  2724  0496                     	;# 
  2725  0497                     	;# 
  2726  0497                     	;# 
  2727  0595                     	;# 
  2728  0596                     	;# 
  2729  0597                     	;# 
  2730  059C                     	;# 
  2731  059D                     	;# 
  2732  059E                     	;# 
  2733  0611                     	;# 
  2734  0611                     	;# 
  2735  0612                     	;# 
  2736  0613                     	;# 
  2737  0614                     	;# 
  2738  0614                     	;# 
  2739  0615                     	;# 
  2740  0616                     	;# 
  2741  0617                     	;# 
  2742  0617                     	;# 
  2743  0618                     	;# 
  2744  0619                     	;# 
  2745  061A                     	;# 
  2746  061A                     	;# 
  2747  061B                     	;# 
  2748  061C                     	;# 
  2749  061D                     	;# 
  2750  061D                     	;# 
  2751  061E                     	;# 
  2752  061F                     	;# 
  2753  0FE4                     	;# 
  2754  0FE5                     	;# 
  2755  0FE6                     	;# 
  2756  0FE7                     	;# 
  2757  0FE8                     	;# 
  2758  0FE9                     	;# 
  2759  0FEA                     	;# 
  2760  0FEB                     	;# 
  2761  0FED                     	;# 
  2762  0FEE                     	;# 
  2763  0FEF                     	;# 
  2764  0000                     	;# 
  2765  0001                     	;# 
  2766  0002                     	;# 
  2767  0003                     	;# 
  2768  0004                     	;# 
  2769  0005                     	;# 
  2770  0006                     	;# 
  2771  0007                     	;# 
  2772  0008                     	;# 
  2773  0009                     	;# 
  2774  000A                     	;# 
  2775  000B                     	;# 
  2776  000C                     	;# 
  2777  000D                     	;# 
  2778  000E                     	;# 
  2779  000F                     	;# 
  2780  0010                     	;# 
  2781  0011                     	;# 
  2782  0012                     	;# 
  2783  0013                     	;# 
  2784  0014                     	;# 
  2785  0015                     	;# 
  2786  0016                     	;# 
  2787  0016                     	;# 
  2788  0017                     	;# 
  2789  0018                     	;# 
  2790  0019                     	;# 
  2791  001A                     	;# 
  2792  001B                     	;# 
  2793  001C                     	;# 
  2794  008C                     	;# 
  2795  008D                     	;# 
  2796  008E                     	;# 
  2797  008F                     	;# 
  2798  0090                     	;# 
  2799  0091                     	;# 
  2800  0092                     	;# 
  2801  0093                     	;# 
  2802  0094                     	;# 
  2803  0095                     	;# 
  2804  0096                     	;# 
  2805  0097                     	;# 
  2806  0099                     	;# 
  2807  009A                     	;# 
  2808  009B                     	;# 
  2809  009B                     	;# 
  2810  009C                     	;# 
  2811  009D                     	;# 
  2812  009E                     	;# 
  2813  010C                     	;# 
  2814  010D                     	;# 
  2815  010E                     	;# 
  2816  010F                     	;# 
  2817  0110                     	;# 
  2818  0116                     	;# 
  2819  0117                     	;# 
  2820  011D                     	;# 
  2821  018C                     	;# 
  2822  018D                     	;# 
  2823  018F                     	;# 
  2824  0190                     	;# 
  2825  0191                     	;# 
  2826  0191                     	;# 
  2827  0192                     	;# 
  2828  0193                     	;# 
  2829  0193                     	;# 
  2830  0194                     	;# 
  2831  0195                     	;# 
  2832  0196                     	;# 
  2833  0197                     	;# 
  2834  0199                     	;# 
  2835  0199                     	;# 
  2836  0199                     	;# 
  2837  019A                     	;# 
  2838  019A                     	;# 
  2839  019A                     	;# 
  2840  019B                     	;# 
  2841  019B                     	;# 
  2842  019B                     	;# 
  2843  019B                     	;# 
  2844  019B                     	;# 
  2845  019C                     	;# 
  2846  019C                     	;# 
  2847  019C                     	;# 
  2848  019D                     	;# 
  2849  019D                     	;# 
  2850  019D                     	;# 
  2851  019E                     	;# 
  2852  019E                     	;# 
  2853  019E                     	;# 
  2854  019F                     	;# 
  2855  019F                     	;# 
  2856  019F                     	;# 
  2857  020D                     	;# 
  2858  020F                     	;# 
  2859  0210                     	;# 
  2860  0211                     	;# 
  2861  0211                     	;# 
  2862  0212                     	;# 
  2863  0212                     	;# 
  2864  0213                     	;# 
  2865  0213                     	;# 
  2866  0214                     	;# 
  2867  0214                     	;# 
  2868  0215                     	;# 
  2869  0215                     	;# 
  2870  0215                     	;# 
  2871  0216                     	;# 
  2872  0216                     	;# 
  2873  0217                     	;# 
  2874  0217                     	;# 
  2875  0219                     	;# 
  2876  021A                     	;# 
  2877  021B                     	;# 
  2878  021C                     	;# 
  2879  021D                     	;# 
  2880  021E                     	;# 
  2881  021F                     	;# 
  2882  028C                     	;# 
  2883  028D                     	;# 
  2884  0291                     	;# 
  2885  0291                     	;# 
  2886  0292                     	;# 
  2887  0293                     	;# 
  2888  0298                     	;# 
  2889  0298                     	;# 
  2890  0299                     	;# 
  2891  029A                     	;# 
  2892  029D                     	;# 
  2893  029E                     	;# 
  2894  029F                     	;# 
  2895  030C                     	;# 
  2896  030D                     	;# 
  2897  0311                     	;# 
  2898  0311                     	;# 
  2899  0312                     	;# 
  2900  0313                     	;# 
  2901  0318                     	;# 
  2902  0318                     	;# 
  2903  0319                     	;# 
  2904  031A                     	;# 
  2905  031C                     	;# 
  2906  031C                     	;# 
  2907  031D                     	;# 
  2908  031E                     	;# 
  2909  038C                     	;# 
  2910  038D                     	;# 
  2911  0394                     	;# 
  2912  0395                     	;# 
  2913  0396                     	;# 
  2914  040C                     	;# 
  2915  040D                     	;# 
  2916  0411                     	;# 
  2917  0411                     	;# 
  2918  0412                     	;# 
  2919  0413                     	;# 
  2920  0414                     	;# 
  2921  0415                     	;# 
  2922  0416                     	;# 
  2923  0417                     	;# 
  2924  0418                     	;# 
  2925  0418                     	;# 
  2926  0419                     	;# 
  2927  041A                     	;# 
  2928  041B                     	;# 
  2929  041C                     	;# 
  2930  041D                     	;# 
  2931  041E                     	;# 
  2932  048D                     	;# 
  2933  0491                     	;# 
  2934  0491                     	;# 
  2935  0492                     	;# 
  2936  0492                     	;# 
  2937  0493                     	;# 
  2938  0493                     	;# 
  2939  0493                     	;# 
  2940  0494                     	;# 
  2941  0494                     	;# 
  2942  0495                     	;# 
  2943  0495                     	;# 
  2944  0496                     	;# 
  2945  0496                     	;# 
  2946  0497                     	;# 
  2947  0497                     	;# 
  2948  0595                     	;# 
  2949  0596                     	;# 
  2950  0597                     	;# 
  2951  059C                     	;# 
  2952  059D                     	;# 
  2953  059E                     	;# 
  2954  0611                     	;# 
  2955  0611                     	;# 
  2956  0612                     	;# 
  2957  0613                     	;# 
  2958  0614                     	;# 
  2959  0614                     	;# 
  2960  0615                     	;# 
  2961  0616                     	;# 
  2962  0617                     	;# 
  2963  0617                     	;# 
  2964  0618                     	;# 
  2965  0619                     	;# 
  2966  061A                     	;# 
  2967  061A                     	;# 
  2968  061B                     	;# 
  2969  061C                     	;# 
  2970  061D                     	;# 
  2971  061D                     	;# 
  2972  061E                     	;# 
  2973  061F                     	;# 
  2974  0FE4                     	;# 
  2975  0FE5                     	;# 
  2976  0FE6                     	;# 
  2977  0FE7                     	;# 
  2978  0FE8                     	;# 
  2979  0FE9                     	;# 
  2980  0FEA                     	;# 
  2981  0FEB                     	;# 
  2982  0FED                     	;# 
  2983  0FEE                     	;# 
  2984  0FEF                     	;# 
  2985  0000                     	;# 
  2986  0001                     	;# 
  2987  0002                     	;# 
  2988  0003                     	;# 
  2989  0004                     	;# 
  2990  0005                     	;# 
  2991  0006                     	;# 
  2992  0007                     	;# 
  2993  0008                     	;# 
  2994  0009                     	;# 
  2995  000A                     	;# 
  2996  000B                     	;# 
  2997  000C                     	;# 
  2998  000D                     	;# 
  2999  000E                     	;# 
  3000  000F                     	;# 
  3001  0010                     	;# 
  3002  0011                     	;# 
  3003  0012                     	;# 
  3004  0013                     	;# 
  3005  0014                     	;# 
  3006  0015                     	;# 
  3007  0016                     	;# 
  3008  0016                     	;# 
  3009  0017                     	;# 
  3010  0018                     	;# 
  3011  0019                     	;# 
  3012  001A                     	;# 
  3013  001B                     	;# 
  3014  001C                     	;# 
  3015  008C                     	;# 
  3016  008D                     	;# 
  3017  008E                     	;# 
  3018  008F                     	;# 
  3019  0090                     	;# 
  3020  0091                     	;# 
  3021  0092                     	;# 
  3022  0093                     	;# 
  3023  0094                     	;# 
  3024  0095                     	;# 
  3025  0096                     	;# 
  3026  0097                     	;# 
  3027  0099                     	;# 
  3028  009A                     	;# 
  3029  009B                     	;# 
  3030  009B                     	;# 
  3031  009C                     	;# 
  3032  009D                     	;# 
  3033  009E                     	;# 
  3034  010C                     	;# 
  3035  010D                     	;# 
  3036  010E                     	;# 
  3037  010F                     	;# 
  3038  0110                     	;# 
  3039  0116                     	;# 
  3040  0117                     	;# 
  3041  011D                     	;# 
  3042  018C                     	;# 
  3043  018D                     	;# 
  3044  018F                     	;# 
  3045  0190                     	;# 
  3046  0191                     	;# 
  3047  0191                     	;# 
  3048  0192                     	;# 
  3049  0193                     	;# 
  3050  0193                     	;# 
  3051  0194                     	;# 
  3052  0195                     	;# 
  3053  0196                     	;# 
  3054  0197                     	;# 
  3055  0199                     	;# 
  3056  0199                     	;# 
  3057  0199                     	;# 
  3058  019A                     	;# 
  3059  019A                     	;# 
  3060  019A                     	;# 
  3061  019B                     	;# 
  3062  019B                     	;# 
  3063  019B                     	;# 
  3064  019B                     	;# 
  3065  019B                     	;# 
  3066  019C                     	;# 
  3067  019C                     	;# 
  3068  019C                     	;# 
  3069  019D                     	;# 
  3070  019D                     	;# 
  3071  019D                     	;# 
  3072  019E                     	;# 
  3073  019E                     	;# 
  3074  019E                     	;# 
  3075  019F                     	;# 
  3076  019F                     	;# 
  3077  019F                     	;# 
  3078  020D                     	;# 
  3079  020F                     	;# 
  3080  0210                     	;# 
  3081  0211                     	;# 
  3082  0211                     	;# 
  3083  0212                     	;# 
  3084  0212                     	;# 
  3085  0213                     	;# 
  3086  0213                     	;# 
  3087  0214                     	;# 
  3088  0214                     	;# 
  3089  0215                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0216                     	;# 
  3093  0216                     	;# 
  3094  0217                     	;# 
  3095  0217                     	;# 
  3096  0219                     	;# 
  3097  021A                     	;# 
  3098  021B                     	;# 
  3099  021C                     	;# 
  3100  021D                     	;# 
  3101  021E                     	;# 
  3102  021F                     	;# 
  3103  028C                     	;# 
  3104  028D                     	;# 
  3105  0291                     	;# 
  3106  0291                     	;# 
  3107  0292                     	;# 
  3108  0293                     	;# 
  3109  0298                     	;# 
  3110  0298                     	;# 
  3111  0299                     	;# 
  3112  029A                     	;# 
  3113  029D                     	;# 
  3114  029E                     	;# 
  3115  029F                     	;# 
  3116  030C                     	;# 
  3117  030D                     	;# 
  3118  0311                     	;# 
  3119  0311                     	;# 
  3120  0312                     	;# 
  3121  0313                     	;# 
  3122  0318                     	;# 
  3123  0318                     	;# 
  3124  0319                     	;# 
  3125  031A                     	;# 
  3126  031C                     	;# 
  3127  031C                     	;# 
  3128  031D                     	;# 
  3129  031E                     	;# 
  3130  038C                     	;# 
  3131  038D                     	;# 
  3132  0394                     	;# 
  3133  0395                     	;# 
  3134  0396                     	;# 
  3135  040C                     	;# 
  3136  040D                     	;# 
  3137  0411                     	;# 
  3138  0411                     	;# 
  3139  0412                     	;# 
  3140  0413                     	;# 
  3141  0414                     	;# 
  3142  0415                     	;# 
  3143  0416                     	;# 
  3144  0417                     	;# 
  3145  0418                     	;# 
  3146  0418                     	;# 
  3147  0419                     	;# 
  3148  041A                     	;# 
  3149  041B                     	;# 
  3150  041C                     	;# 
  3151  041D                     	;# 
  3152  041E                     	;# 
  3153  048D                     	;# 
  3154  0491                     	;# 
  3155  0491                     	;# 
  3156  0492                     	;# 
  3157  0492                     	;# 
  3158  0493                     	;# 
  3159  0493                     	;# 
  3160  0493                     	;# 
  3161  0494                     	;# 
  3162  0494                     	;# 
  3163  0495                     	;# 
  3164  0495                     	;# 
  3165  0496                     	;# 
  3166  0496                     	;# 
  3167  0497                     	;# 
  3168  0497                     	;# 
  3169  0595                     	;# 
  3170  0596                     	;# 
  3171  0597                     	;# 
  3172  059C                     	;# 
  3173  059D                     	;# 
  3174  059E                     	;# 
  3175  0611                     	;# 
  3176  0611                     	;# 
  3177  0612                     	;# 
  3178  0613                     	;# 
  3179  0614                     	;# 
  3180  0614                     	;# 
  3181  0615                     	;# 
  3182  0616                     	;# 
  3183  0617                     	;# 
  3184  0617                     	;# 
  3185  0618                     	;# 
  3186  0619                     	;# 
  3187  061A                     	;# 
  3188  061A                     	;# 
  3189  061B                     	;# 
  3190  061C                     	;# 
  3191  061D                     	;# 
  3192  061D                     	;# 
  3193  061E                     	;# 
  3194  061F                     	;# 
  3195  0FE4                     	;# 
  3196  0FE5                     	;# 
  3197  0FE6                     	;# 
  3198  0FE7                     	;# 
  3199  0FE8                     	;# 
  3200  0FE9                     	;# 
  3201  0FEA                     	;# 
  3202  0FEB                     	;# 
  3203  0FED                     	;# 
  3204  0FEE                     	;# 
  3205  0FEF                     	;_delayArray
  3206                           
  3207                           	psect	idataBANK0
  3208  26D3                     __pidataBANK0:	
  3209                           
  3210                           ;initializer for _baseline_delay_time
  3211  26D3  34D0               	retlw	208
  3212  26D4  3407               	retlw	7
  3213  26D5  3400               	retlw	0
  3214  26D6  3400               	retlw	0
  3215                           
  3216                           ;initializer for _delay_time
  3217  26D7  34D0               	retlw	208
  3218  26D8  3407               	retlw	7
  3219  26D9  3400               	retlw	0
  3220  26DA  3400               	retlw	0
  3221                           
  3222                           ;initializer for _bottom_push_state
  3223  26DB  3406               	retlw	6
  3224  26DC  3400               	retlw	0
  3225                           
  3226                           ;initializer for _long_press_limit
  3227  26DD  34E8               	retlw	232
  3228  26DE  3403               	retlw	3
  3229                           
  3230                           ;initializer for _top_push_state
  3231  26DF  3406               	retlw	6
  3232  26E0  3400               	retlw	0
  3233                           
  3234                           ;initializer for _blink_rate
  3235  26E1  3414               	retlw	20
  3236                           
  3237                           ;initializer for _longTap_state
  3238  26E2  34FF               	retlw	255
  3239                           
  3240                           ;initializer for _num_taps
  3241  26E3  3404               	retlw	4
  3242                           
  3243                           ;initializer for _presetChannel
  3244  26E4  3401               	retlw	1
  3245                           
  3246                           ;initializer for _switchBypass_state
  3247  26E5  34FF               	retlw	255
  3248                           
  3249                           	psect	idataBANK3
  3250  1801                     __pidataBANK3:	
  3251                           
  3252                           ;initializer for _blink_delay
  3253  1801  3464               	retlw	100
  3254  1802  3400               	retlw	0
  3255                           
  3256                           ;initializer for _delay_time_changed
  3257  1803  3401               	retlw	1
  3258  1804  3400               	retlw	0
  3259                           
  3260                           ;initializer for _knob1_prev
  3261  1805  34D0               	retlw	208
  3262  1806  3407               	retlw	7
  3263                           
  3264                           ;initializer for _knob2_prev
  3265  1807  34D0               	retlw	208
  3266  1808  3407               	retlw	7
  3267                           
  3268                           ;initializer for _knob3_prev
  3269  1809  34D0               	retlw	208
  3270  180A  3407               	retlw	7
  3271                           
  3272                           ;initializer for _knob4_prev
  3273  180B  34D0               	retlw	208
  3274  180C  3407               	retlw	7
  3275                           
  3276                           ;initializer for _knob5_prev
  3277  180D  34D0               	retlw	208
  3278  180E  3407               	retlw	7
  3279                           
  3280                           ;initializer for _mod_delay_time
  3281  180F  34D0               	retlw	208
  3282  1810  3407               	retlw	7
  3283                           
  3284                           ;initializer for _tap_iteration
  3285  1811  3401               	retlw	1
  3286  1812  3400               	retlw	0
  3287                           
  3288                           ;initializer for _blink_state
  3289  1813  3401               	retlw	1
  3290                           
  3291                           ;initializer for _currentBypassState
  3292  1814  34FF               	retlw	255
  3293                           
  3294                           ;initializer for _expSwitchState
  3295  1815  34FF               	retlw	255
  3296                           
  3297                           ;initializer for _expressModeCnst
  3298  1816  3402               	retlw	2
  3299                           
  3300                           ;initializer for _expressionChannel
  3301  1817  3401               	retlw	1
  3302                           
  3303                           ;initializer for _feedback_state
  3304  1818  34FF               	retlw	255
  3305                           
  3306                           ;initializer for _presetModeCnst
  3307  1819  3401               	retlw	1
  3308                           
  3309                           ;initializer for _switchTap_state
  3310  181A  34FF               	retlw	255
  3311                           
  3312                           	psect	idataBANK4
  3313  0002                     __pidataBANK4:	
  3314                           
  3315                           ;initializer for _switchBypass_up
  3316  0002  3401               	retlw	1
  3317  0003  3400               	retlw	0
  3318                           
  3319                           	psect	idataBANK7
  3320  1ACC                     __pidataBANK7:	
  3321                           
  3322                           ;initializer for _modSin
  3323  1ACC  3400               	retlw	0
  3324  1ACD  340A               	retlw	10
  3325  1ACE  3414               	retlw	20
  3326  1ACF  341E               	retlw	30
  3327  1AD0  3428               	retlw	40
  3328  1AD1  3432               	retlw	50
  3329  1AD2  343A               	retlw	58
  3330  1AD3  3442               	retlw	66
  3331  1AD4  344A               	retlw	74
  3332  1AD5  3450               	retlw	80
  3333  1AD6  3456               	retlw	86
  3334  1AD7  345B               	retlw	91
  3335  1AD8  345F               	retlw	95
  3336  1AD9  3461               	retlw	97
  3337  1ADA  3463               	retlw	99
  3338  1ADB  3464               	retlw	100
  3339  1ADC  3463               	retlw	99
  3340  1ADD  3461               	retlw	97
  3341  1ADE  345F               	retlw	95
  3342  1ADF  345B               	retlw	91
  3343  1AE0  3456               	retlw	86
  3344  1AE1  3450               	retlw	80
  3345  1AE2  344A               	retlw	74
  3346  1AE3  3442               	retlw	66
  3347  1AE4  343A               	retlw	58
  3348  1AE5  3432               	retlw	50
  3349  1AE6  3428               	retlw	40
  3350  1AE7  341E               	retlw	30
  3351  1AE8  3414               	retlw	20
  3352  1AE9  340A               	retlw	10
  3353  1AEA  3400               	retlw	0
  3354  1AEB  34F6               	retlw	-10
  3355  1AEC  34EC               	retlw	-20
  3356  1AED  34E2               	retlw	-30
  3357  1AEE  34D8               	retlw	-40
  3358  1AEF  34CE               	retlw	-50
  3359  1AF0  34C6               	retlw	-58
  3360  1AF1  34BE               	retlw	-66
  3361  1AF2  34B6               	retlw	-74
  3362  1AF3  34B0               	retlw	-80
  3363  1AF4  34AA               	retlw	-86
  3364  1AF5  34A5               	retlw	-91
  3365  1AF6  34A1               	retlw	-95
  3366  1AF7  349F               	retlw	-97
  3367  1AF8  349D               	retlw	-99
  3368  1AF9  349C               	retlw	-100
  3369  1AFA  349D               	retlw	-99
  3370  1AFB  349F               	retlw	-97
  3371  1AFC  34A1               	retlw	-95
  3372  1AFD  34A5               	retlw	-91
  3373  1AFE  34AA               	retlw	-86
  3374  1AFF  34B0               	retlw	-80
  3375  1B00  34B6               	retlw	-74
  3376  1B01  34BE               	retlw	-66
  3377  1B02  34C6               	retlw	-58
  3378  1B03  34CE               	retlw	-50
  3379  1B04  34D8               	retlw	-40
  3380  1B05  34E2               	retlw	-30
  3381  1B06  34EC               	retlw	-20
  3382  1B07  34F6               	retlw	-10
  3383  1B08  3400               	retlw	0
  3384                           
  3385                           	psect	idataBANK8
  3386  1A8F                     __pidataBANK8:	
  3387                           
  3388                           ;initializer for _modTri
  3389  1A8F  3400               	retlw	0
  3390  1A90  3407               	retlw	7
  3391  1A91  340D               	retlw	13
  3392  1A92  3414               	retlw	20
  3393  1A93  341B               	retlw	27
  3394  1A94  3421               	retlw	33
  3395  1A95  3428               	retlw	40
  3396  1A96  342F               	retlw	47
  3397  1A97  3435               	retlw	53
  3398  1A98  343C               	retlw	60
  3399  1A99  3443               	retlw	67
  3400  1A9A  3449               	retlw	73
  3401  1A9B  3450               	retlw	80
  3402  1A9C  3457               	retlw	87
  3403  1A9D  345D               	retlw	93
  3404  1A9E  3464               	retlw	100
  3405  1A9F  345D               	retlw	93
  3406  1AA0  3457               	retlw	87
  3407  1AA1  3450               	retlw	80
  3408  1AA2  3449               	retlw	73
  3409  1AA3  3443               	retlw	67
  3410  1AA4  343C               	retlw	60
  3411  1AA5  3435               	retlw	53
  3412  1AA6  342F               	retlw	47
  3413  1AA7  3428               	retlw	40
  3414  1AA8  3421               	retlw	33
  3415  1AA9  341B               	retlw	27
  3416  1AAA  3414               	retlw	20
  3417  1AAB  340D               	retlw	13
  3418  1AAC  3407               	retlw	7
  3419  1AAD  3400               	retlw	0
  3420  1AAE  34F9               	retlw	-7
  3421  1AAF  34F3               	retlw	-13
  3422  1AB0  34EC               	retlw	-20
  3423  1AB1  34E5               	retlw	-27
  3424  1AB2  34DF               	retlw	-33
  3425  1AB3  34D8               	retlw	-40
  3426  1AB4  34D1               	retlw	-47
  3427  1AB5  34CB               	retlw	-53
  3428  1AB6  34C4               	retlw	-60
  3429  1AB7  34BD               	retlw	-67
  3430  1AB8  34B7               	retlw	-73
  3431  1AB9  34B0               	retlw	-80
  3432  1ABA  34A9               	retlw	-87
  3433  1ABB  34A3               	retlw	-93
  3434  1ABC  349C               	retlw	-100
  3435  1ABD  34A3               	retlw	-93
  3436  1ABE  34A9               	retlw	-87
  3437  1ABF  34B0               	retlw	-80
  3438  1AC0  34B7               	retlw	-73
  3439  1AC1  34BD               	retlw	-67
  3440  1AC2  34C4               	retlw	-60
  3441  1AC3  34CB               	retlw	-53
  3442  1AC4  34D1               	retlw	-47
  3443  1AC5  34D8               	retlw	-40
  3444  1AC6  34DF               	retlw	-33
  3445  1AC7  34E5               	retlw	-27
  3446  1AC8  34EC               	retlw	-20
  3447  1AC9  34F3               	retlw	-13
  3448  1ACA  34F9               	retlw	-7
  3449  1ACB  3400               	retlw	0
  3450                           
  3451                           	psect	idataBANK9
  3452  1A52                     __pidataBANK9:	
  3453                           
  3454                           ;initializer for _modRevSaw
  3455  1A52  3400               	retlw	0
  3456  1A53  34FD               	retlw	-3
  3457  1A54  34F9               	retlw	-7
  3458  1A55  34F6               	retlw	-10
  3459  1A56  34F3               	retlw	-13
  3460  1A57  34EF               	retlw	-17
  3461  1A58  34EC               	retlw	-20
  3462  1A59  34E9               	retlw	-23
  3463  1A5A  34E5               	retlw	-27
  3464  1A5B  34E2               	retlw	-30
  3465  1A5C  34DF               	retlw	-33
  3466  1A5D  34DB               	retlw	-37
  3467  1A5E  34D8               	retlw	-40
  3468  1A5F  34D5               	retlw	-43
  3469  1A60  34D1               	retlw	-47
  3470  1A61  34CE               	retlw	-50
  3471  1A62  34CB               	retlw	-53
  3472  1A63  34C7               	retlw	-57
  3473  1A64  34C4               	retlw	-60
  3474  1A65  34C1               	retlw	-63
  3475  1A66  34BD               	retlw	-67
  3476  1A67  34BA               	retlw	-70
  3477  1A68  34B7               	retlw	-73
  3478  1A69  34B3               	retlw	-77
  3479  1A6A  34B0               	retlw	-80
  3480  1A6B  34AD               	retlw	-83
  3481  1A6C  34A9               	retlw	-87
  3482  1A6D  34A6               	retlw	-90
  3483  1A6E  34A3               	retlw	-93
  3484  1A6F  349F               	retlw	-97
  3485  1A70  349C               	retlw	-100
  3486  1A71  3461               	retlw	97
  3487  1A72  345D               	retlw	93
  3488  1A73  345A               	retlw	90
  3489  1A74  3457               	retlw	87
  3490  1A75  3453               	retlw	83
  3491  1A76  3450               	retlw	80
  3492  1A77  344D               	retlw	77
  3493  1A78  3449               	retlw	73
  3494  1A79  3446               	retlw	70
  3495  1A7A  3443               	retlw	67
  3496  1A7B  343F               	retlw	63
  3497  1A7C  343C               	retlw	60
  3498  1A7D  3439               	retlw	57
  3499  1A7E  3435               	retlw	53
  3500  1A7F  3432               	retlw	50
  3501  1A80  342F               	retlw	47
  3502  1A81  342B               	retlw	43
  3503  1A82  3428               	retlw	40
  3504  1A83  3425               	retlw	37
  3505  1A84  3421               	retlw	33
  3506  1A85  341E               	retlw	30
  3507  1A86  341B               	retlw	27
  3508  1A87  3417               	retlw	23
  3509  1A88  3414               	retlw	20
  3510  1A89  3411               	retlw	17
  3511  1A8A  340D               	retlw	13
  3512  1A8B  340A               	retlw	10
  3513  1A8C  3407               	retlw	7
  3514  1A8D  3403               	retlw	3
  3515  1A8E  3400               	retlw	0
  3516                           
  3517                           	psect	idataBANK10
  3518  1A15                     __pidataBANK10:	
  3519                           
  3520                           ;initializer for _modSaw
  3521  1A15  3400               	retlw	0
  3522  1A16  3403               	retlw	3
  3523  1A17  3407               	retlw	7
  3524  1A18  340A               	retlw	10
  3525  1A19  340D               	retlw	13
  3526  1A1A  3411               	retlw	17
  3527  1A1B  3414               	retlw	20
  3528  1A1C  3417               	retlw	23
  3529  1A1D  341B               	retlw	27
  3530  1A1E  341E               	retlw	30
  3531  1A1F  3421               	retlw	33
  3532  1A20  3425               	retlw	37
  3533  1A21  3428               	retlw	40
  3534  1A22  342B               	retlw	43
  3535  1A23  342F               	retlw	47
  3536  1A24  3432               	retlw	50
  3537  1A25  3435               	retlw	53
  3538  1A26  3439               	retlw	57
  3539  1A27  343C               	retlw	60
  3540  1A28  343F               	retlw	63
  3541  1A29  3443               	retlw	67
  3542  1A2A  3446               	retlw	70
  3543  1A2B  3449               	retlw	73
  3544  1A2C  344D               	retlw	77
  3545  1A2D  3450               	retlw	80
  3546  1A2E  3453               	retlw	83
  3547  1A2F  3457               	retlw	87
  3548  1A30  345A               	retlw	90
  3549  1A31  345D               	retlw	93
  3550  1A32  3461               	retlw	97
  3551  1A33  3464               	retlw	100
  3552  1A34  349F               	retlw	-97
  3553  1A35  34A3               	retlw	-93
  3554  1A36  34A6               	retlw	-90
  3555  1A37  34A9               	retlw	-87
  3556  1A38  34AD               	retlw	-83
  3557  1A39  34B0               	retlw	-80
  3558  1A3A  34B3               	retlw	-77
  3559  1A3B  34B7               	retlw	-73
  3560  1A3C  34BA               	retlw	-70
  3561  1A3D  34BD               	retlw	-67
  3562  1A3E  34C1               	retlw	-63
  3563  1A3F  34C4               	retlw	-60
  3564  1A40  34C7               	retlw	-57
  3565  1A41  34CB               	retlw	-53
  3566  1A42  34CE               	retlw	-50
  3567  1A43  34D1               	retlw	-47
  3568  1A44  34D5               	retlw	-43
  3569  1A45  34D8               	retlw	-40
  3570  1A46  34DB               	retlw	-37
  3571  1A47  34DF               	retlw	-33
  3572  1A48  34E2               	retlw	-30
  3573  1A49  34E5               	retlw	-27
  3574  1A4A  34E9               	retlw	-23
  3575  1A4B  34EC               	retlw	-20
  3576  1A4C  34EF               	retlw	-17
  3577  1A4D  34F3               	retlw	-13
  3578  1A4E  34F6               	retlw	-10
  3579  1A4F  34F9               	retlw	-7
  3580  1A50  34FD               	retlw	-3
  3581  1A51  3400               	retlw	0
  3582                           
  3583                           	psect	idataBIGRAM
  3584  0DF8                     __pidataBIGRAM:	
  3585                           
  3586                           ;initializer for _delayArray
  3587  0DF8  3422               	retlw	34
  3588  0DF9  3408               	retlw	8
  3589  0DFA  34FC               	retlw	252
  3590  0DFB  3407               	retlw	7
  3591  0DFC  34D8               	retlw	216
  3592  0DFD  3407               	retlw	7
  3593  0DFE  34B5               	retlw	181
  3594  0DFF  3407               	retlw	7
  3595  0E00  3493               	retlw	147
  3596  0E01  3407               	retlw	7
  3597  0E02  3472               	retlw	114
  3598  0E03  3407               	retlw	7
  3599  0E04  3452               	retlw	82
  3600  0E05  3407               	retlw	7
  3601  0E06  3434               	retlw	52
  3602  0E07  3407               	retlw	7
  3603  0E08  3416               	retlw	22
  3604  0E09  3407               	retlw	7
  3605  0E0A  34F9               	retlw	249
  3606  0E0B  3406               	retlw	6
  3607  0E0C  34DD               	retlw	221
  3608  0E0D  3406               	retlw	6
  3609  0E0E  34C2               	retlw	194
  3610  0E0F  3406               	retlw	6
  3611  0E10  34A8               	retlw	168
  3612  0E11  3406               	retlw	6
  3613  0E12  348F               	retlw	143
  3614  0E13  3406               	retlw	6
  3615  0E14  3476               	retlw	118
  3616  0E15  3406               	retlw	6
  3617  0E16  345E               	retlw	94
  3618  0E17  3406               	retlw	6
  3619  0E18  3447               	retlw	71
  3620  0E19  3406               	retlw	6
  3621  0E1A  3430               	retlw	48
  3622  0E1B  3406               	retlw	6
  3623  0E1C  341A               	retlw	26
  3624  0E1D  3406               	retlw	6
  3625  0E1E  3405               	retlw	5
  3626  0E1F  3406               	retlw	6
  3627  0E20  34F0               	retlw	240
  3628  0E21  3405               	retlw	5
  3629  0E22  34DC               	retlw	220
  3630  0E23  3405               	retlw	5
  3631  0E24  34C8               	retlw	200
  3632  0E25  3405               	retlw	5
  3633  0E26  34B5               	retlw	181
  3634  0E27  3405               	retlw	5
  3635  0E28  34A3               	retlw	163
  3636  0E29  3405               	retlw	5
  3637  0E2A  3490               	retlw	144
  3638  0E2B  3405               	retlw	5
  3639  0E2C  347F               	retlw	127
  3640  0E2D  3405               	retlw	5
  3641  0E2E  346D               	retlw	109
  3642  0E2F  3405               	retlw	5
  3643  0E30  345C               	retlw	92
  3644  0E31  3405               	retlw	5
  3645  0E32  344C               	retlw	76
  3646  0E33  3405               	retlw	5
  3647  0E34  343C               	retlw	60
  3648  0E35  3405               	retlw	5
  3649  0E36  342C               	retlw	44
  3650  0E37  3405               	retlw	5
  3651  0E38  341D               	retlw	29
  3652  0E39  3405               	retlw	5
  3653  0E3A  340E               	retlw	14
  3654  0E3B  3405               	retlw	5
  3655  0E3C  34FF               	retlw	255
  3656  0E3D  3404               	retlw	4
  3657  0E3E  34F1               	retlw	241
  3658  0E3F  3404               	retlw	4
  3659  0E40  34E2               	retlw	226
  3660  0E41  3404               	retlw	4
  3661  0E42  34D5               	retlw	213
  3662  0E43  3404               	retlw	4
  3663  0E44  34C7               	retlw	199
  3664  0E45  3404               	retlw	4
  3665  0E46  34BA               	retlw	186
  3666  0E47  3404               	retlw	4
  3667  0E48  34AD               	retlw	173
  3668  0E49  3404               	retlw	4
  3669  0E4A  34A1               	retlw	161
  3670  0E4B  3404               	retlw	4
  3671  0E4C  3494               	retlw	148
  3672  0E4D  3404               	retlw	4
  3673  0E4E  3488               	retlw	136
  3674  0E4F  3404               	retlw	4
  3675  0E50  347D               	retlw	125
  3676  0E51  3404               	retlw	4
  3677  0E52  3471               	retlw	113
  3678  0E53  3404               	retlw	4
  3679  0E54  3466               	retlw	102
  3680  0E55  3404               	retlw	4
  3681  0E56  345A               	retlw	90
  3682  0E57  3404               	retlw	4
  3683  0E58  3450               	retlw	80
  3684  0E59  3404               	retlw	4
  3685  0E5A  3445               	retlw	69
  3686  0E5B  3404               	retlw	4
  3687  0E5C  343A               	retlw	58
  3688  0E5D  3404               	retlw	4
  3689  0E5E  3430               	retlw	48
  3690  0E5F  3404               	retlw	4
  3691  0E60  3426               	retlw	38
  3692  0E61  3404               	retlw	4
  3693  0E62  341C               	retlw	28
  3694  0E63  3404               	retlw	4
  3695  0E64  3412               	retlw	18
  3696  0E65  3404               	retlw	4
  3697  0E66  3409               	retlw	9
  3698  0E67  3404               	retlw	4
  3699  0E68  34FF               	retlw	255
  3700  0E69  3403               	retlw	3
  3701  0E6A  34F6               	retlw	246
  3702  0E6B  3403               	retlw	3
  3703  0E6C  34ED               	retlw	237
  3704  0E6D  3403               	retlw	3
  3705  0E6E  34E4               	retlw	228
  3706  0E6F  3403               	retlw	3
  3707  0E70  34DC               	retlw	220
  3708  0E71  3403               	retlw	3
  3709  0E72  34D3               	retlw	211
  3710  0E73  3403               	retlw	3
  3711  0E74  34CB               	retlw	203
  3712  0E75  3403               	retlw	3
  3713  0E76  34C2               	retlw	194
  3714  0E77  3403               	retlw	3
  3715  0E78  34BA               	retlw	186
  3716  0E79  3403               	retlw	3
  3717  0E7A  34B2               	retlw	178
  3718  0E7B  3403               	retlw	3
  3719  0E7C  34AA               	retlw	170
  3720  0E7D  3403               	retlw	3
  3721  0E7E  34A2               	retlw	162
  3722  0E7F  3403               	retlw	3
  3723  0E80  349B               	retlw	155
  3724  0E81  3403               	retlw	3
  3725  0E82  3493               	retlw	147
  3726  0E83  3403               	retlw	3
  3727  0E84  348C               	retlw	140
  3728  0E85  3403               	retlw	3
  3729  0E86  3485               	retlw	133
  3730  0E87  3403               	retlw	3
  3731  0E88  347E               	retlw	126
  3732  0E89  3403               	retlw	3
  3733  0E8A  3477               	retlw	119
  3734  0E8B  3403               	retlw	3
  3735  0E8C  3470               	retlw	112
  3736  0E8D  3403               	retlw	3
  3737  0E8E  3469               	retlw	105
  3738  0E8F  3403               	retlw	3
  3739  0E90  3462               	retlw	98
  3740  0E91  3403               	retlw	3
  3741  0E92  345C               	retlw	92
  3742  0E93  3403               	retlw	3
  3743  0E94  3455               	retlw	85
  3744  0E95  3403               	retlw	3
  3745  0E96  344F               	retlw	79
  3746  0E97  3403               	retlw	3
  3747  0E98  3448               	retlw	72
  3748  0E99  3403               	retlw	3
  3749  0E9A  3442               	retlw	66
  3750  0E9B  3403               	retlw	3
  3751  0E9C  343C               	retlw	60
  3752  0E9D  3403               	retlw	3
  3753  0E9E  3436               	retlw	54
  3754  0E9F  3403               	retlw	3
  3755  0EA0  3430               	retlw	48
  3756  0EA1  3403               	retlw	3
  3757  0EA2  342A               	retlw	42
  3758  0EA3  3403               	retlw	3
  3759  0EA4  3424               	retlw	36
  3760  0EA5  3403               	retlw	3
  3761  0EA6  341F               	retlw	31
  3762  0EA7  3403               	retlw	3
  3763  0EA8  3419               	retlw	25
  3764  0EA9  3403               	retlw	3
  3765  0EAA  3413               	retlw	19
  3766  0EAB  3403               	retlw	3
  3767  0EAC  340E               	retlw	14
  3768  0EAD  3403               	retlw	3
  3769  0EAE  3409               	retlw	9
  3770  0EAF  3403               	retlw	3
  3771  0EB0  3403               	retlw	3
  3772  0EB1  3403               	retlw	3
  3773  0EB2  34FE               	retlw	254
  3774  0EB3  3402               	retlw	2
  3775  0EB4  34F9               	retlw	249
  3776  0EB5  3402               	retlw	2
  3777  0EB6  34F4               	retlw	244
  3778  0EB7  3402               	retlw	2
  3779  0EB8  34EF               	retlw	239
  3780  0EB9  3402               	retlw	2
  3781  0EBA  34EA               	retlw	234
  3782  0EBB  3402               	retlw	2
  3783  0EBC  34E5               	retlw	229
  3784  0EBD  3402               	retlw	2
  3785  0EBE  34E0               	retlw	224
  3786  0EBF  3402               	retlw	2
  3787  0EC0  34DB               	retlw	219
  3788  0EC1  3402               	retlw	2
  3789  0EC2  34D7               	retlw	215
  3790  0EC3  3402               	retlw	2
  3791  0EC4  34D2               	retlw	210
  3792  0EC5  3402               	retlw	2
  3793  0EC6  34CD               	retlw	205
  3794  0EC7  3402               	retlw	2
  3795  0EC8  34C9               	retlw	201
  3796  0EC9  3402               	retlw	2
  3797  0ECA  34C4               	retlw	196
  3798  0ECB  3402               	retlw	2
  3799  0ECC  34C0               	retlw	192
  3800  0ECD  3402               	retlw	2
  3801  0ECE  34BC               	retlw	188
  3802  0ECF  3402               	retlw	2
  3803  0ED0  34B7               	retlw	183
  3804  0ED1  3402               	retlw	2
  3805  0ED2  34B3               	retlw	179
  3806  0ED3  3402               	retlw	2
  3807  0ED4  34AF               	retlw	175
  3808  0ED5  3402               	retlw	2
  3809  0ED6  34AB               	retlw	171
  3810  0ED7  3402               	retlw	2
  3811  0ED8  34A6               	retlw	166
  3812  0ED9  3402               	retlw	2
  3813  0EDA  34A2               	retlw	162
  3814  0EDB  3402               	retlw	2
  3815  0EDC  349E               	retlw	158
  3816  0EDD  3402               	retlw	2
  3817  0EDE  349A               	retlw	154
  3818  0EDF  3402               	retlw	2
  3819  0EE0  3497               	retlw	151
  3820  0EE1  3402               	retlw	2
  3821  0EE2  3493               	retlw	147
  3822  0EE3  3402               	retlw	2
  3823  0EE4  348F               	retlw	143
  3824  0EE5  3402               	retlw	2
  3825  0EE6  348B               	retlw	139
  3826  0EE7  3402               	retlw	2
  3827  0EE8  3487               	retlw	135
  3828  0EE9  3402               	retlw	2
  3829  0EEA  3484               	retlw	132
  3830  0EEB  3402               	retlw	2
  3831  0EEC  3480               	retlw	128
  3832  0EED  3402               	retlw	2
  3833  0EEE  347C               	retlw	124
  3834  0EEF  3402               	retlw	2
  3835  0EF0  3479               	retlw	121
  3836  0EF1  3402               	retlw	2
  3837  0EF2  3475               	retlw	117
  3838  0EF3  3402               	retlw	2
  3839  0EF4  3472               	retlw	114
  3840  0EF5  3402               	retlw	2
  3841  0EF6  346E               	retlw	110
  3842  0EF7  3402               	retlw	2
  3843  0EF8  346B               	retlw	107
  3844  0EF9  3402               	retlw	2
  3845  0EFA  3467               	retlw	103
  3846  0EFB  3402               	retlw	2
  3847  0EFC  3464               	retlw	100
  3848  0EFD  3402               	retlw	2
  3849  0EFE  3461               	retlw	97
  3850  0EFF  3402               	retlw	2
  3851  0F00  345E               	retlw	94
  3852  0F01  3402               	retlw	2
  3853  0F02  345A               	retlw	90
  3854  0F03  3402               	retlw	2
  3855  0F04  3457               	retlw	87
  3856  0F05  3402               	retlw	2
  3857  0F06  3454               	retlw	84
  3858  0F07  3402               	retlw	2
  3859  0F08  3451               	retlw	81
  3860  0F09  3402               	retlw	2
  3861  0F0A  344E               	retlw	78
  3862  0F0B  3402               	retlw	2
  3863  0F0C  344B               	retlw	75
  3864  0F0D  3402               	retlw	2
  3865  0F0E  3448               	retlw	72
  3866  0F0F  3402               	retlw	2
  3867  0F10  3445               	retlw	69
  3868  0F11  3402               	retlw	2
  3869  0F12  3442               	retlw	66
  3870  0F13  3402               	retlw	2
  3871  0F14  343F               	retlw	63
  3872  0F15  3402               	retlw	2
  3873  0F16  343C               	retlw	60
  3874  0F17  3402               	retlw	2
  3875  0F18  3439               	retlw	57
  3876  0F19  3402               	retlw	2
  3877  0F1A  3436               	retlw	54
  3878  0F1B  3402               	retlw	2
  3879  0F1C  3433               	retlw	51
  3880  0F1D  3402               	retlw	2
  3881  0F1E  3430               	retlw	48
  3882  0F1F  3402               	retlw	2
  3883  0F20  342E               	retlw	46
  3884  0F21  3402               	retlw	2
  3885  0F22  342B               	retlw	43
  3886  0F23  3402               	retlw	2
  3887  0F24  3428               	retlw	40
  3888  0F25  3402               	retlw	2
  3889  0F26  3425               	retlw	37
  3890  0F27  3402               	retlw	2
  3891  0F28  3423               	retlw	35
  3892  0F29  3402               	retlw	2
  3893  0F2A  3420               	retlw	32
  3894  0F2B  3402               	retlw	2
  3895  0F2C  341E               	retlw	30
  3896  0F2D  3402               	retlw	2
  3897  0F2E  341B               	retlw	27
  3898  0F2F  3402               	retlw	2
  3899  0F30  3418               	retlw	24
  3900  0F31  3402               	retlw	2
  3901  0F32  3416               	retlw	22
  3902  0F33  3402               	retlw	2
  3903  0F34  3413               	retlw	19
  3904  0F35  3402               	retlw	2
  3905  0F36  3411               	retlw	17
  3906  0F37  3402               	retlw	2
  3907  0F38  340E               	retlw	14
  3908  0F39  3402               	retlw	2
  3909  0F3A  340C               	retlw	12
  3910  0F3B  3402               	retlw	2
  3911  0F3C  340A               	retlw	10
  3912  0F3D  3402               	retlw	2
  3913  0F3E  3407               	retlw	7
  3914  0F3F  3402               	retlw	2
  3915  0F40  3405               	retlw	5
  3916  0F41  3402               	retlw	2
  3917  0F42  3402               	retlw	2
  3918  0F43  3402               	retlw	2
  3919  0F44  3400               	retlw	0
  3920  0F45  3402               	retlw	2
  3921  0F46  34FE               	retlw	254
  3922  0F47  3401               	retlw	1
  3923  0F48  34FB               	retlw	251
  3924  0F49  3401               	retlw	1
  3925  0F4A  34F9               	retlw	249
  3926  0F4B  3401               	retlw	1
  3927  0F4C  34F7               	retlw	247
  3928  0F4D  3401               	retlw	1
  3929  0F4E  34F5               	retlw	245
  3930  0F4F  3401               	retlw	1
  3931  0F50  34F2               	retlw	242
  3932  0F51  3401               	retlw	1
  3933  0F52  34F0               	retlw	240
  3934  0F53  3401               	retlw	1
  3935  0F54  34EE               	retlw	238
  3936  0F55  3401               	retlw	1
  3937  0F56  34EC               	retlw	236
  3938  0F57  3401               	retlw	1
  3939  0F58  34EA               	retlw	234
  3940  0F59  3401               	retlw	1
  3941  0F5A  34E8               	retlw	232
  3942  0F5B  3401               	retlw	1
  3943  0F5C  34E6               	retlw	230
  3944  0F5D  3401               	retlw	1
  3945  0F5E  34E3               	retlw	227
  3946  0F5F  3401               	retlw	1
  3947  0F60  34E1               	retlw	225
  3948  0F61  3401               	retlw	1
  3949  0F62  34DF               	retlw	223
  3950  0F63  3401               	retlw	1
  3951  0F64  34DD               	retlw	221
  3952  0F65  3401               	retlw	1
  3953  0F66  34DB               	retlw	219
  3954  0F67  3401               	retlw	1
  3955  0F68  34D9               	retlw	217
  3956  0F69  3401               	retlw	1
  3957  0F6A  34D7               	retlw	215
  3958  0F6B  3401               	retlw	1
  3959  0F6C  34D5               	retlw	213
  3960  0F6D  3401               	retlw	1
  3961  0F6E  34D3               	retlw	211
  3962  0F6F  3401               	retlw	1
  3963  0F70  34D2               	retlw	210
  3964  0F71  3401               	retlw	1
  3965  0F72  34D0               	retlw	208
  3966  0F73  3401               	retlw	1
  3967  0F74  34CE               	retlw	206
  3968  0F75  3401               	retlw	1
  3969  0F76  34CC               	retlw	204
  3970  0F77  3401               	retlw	1
  3971  0F78  34CA               	retlw	202
  3972  0F79  3401               	retlw	1
  3973  0F7A  34C8               	retlw	200
  3974  0F7B  3401               	retlw	1
  3975  0F7C  34C6               	retlw	198
  3976  0F7D  3401               	retlw	1
  3977  0F7E  34C4               	retlw	196
  3978  0F7F  3401               	retlw	1
  3979  0F80  34C3               	retlw	195
  3980  0F81  3401               	retlw	1
  3981  0F82  34C1               	retlw	193
  3982  0F83  3401               	retlw	1
  3983  0F84  34BF               	retlw	191
  3984  0F85  3401               	retlw	1
  3985  0F86  34BD               	retlw	189
  3986  0F87  3401               	retlw	1
  3987  0F88  34BC               	retlw	188
  3988  0F89  3401               	retlw	1
  3989  0F8A  34BA               	retlw	186
  3990  0F8B  3401               	retlw	1
  3991  0F8C  34B8               	retlw	184
  3992  0F8D  3401               	retlw	1
  3993  0F8E  34B6               	retlw	182
  3994  0F8F  3401               	retlw	1
  3995  0F90  34B5               	retlw	181
  3996  0F91  3401               	retlw	1
  3997  0F92  34B3               	retlw	179
  3998  0F93  3401               	retlw	1
  3999  0F94  34B1               	retlw	177
  4000  0F95  3401               	retlw	1
  4001  0F96  34B0               	retlw	176
  4002  0F97  3401               	retlw	1
  4003  0F98  34AE               	retlw	174
  4004  0F99  3401               	retlw	1
  4005  0F9A  34AC               	retlw	172
  4006  0F9B  3401               	retlw	1
  4007  0F9C  34AB               	retlw	171
  4008  0F9D  3401               	retlw	1
  4009  0F9E  34A9               	retlw	169
  4010  0F9F  3401               	retlw	1
  4011  0FA0  34A8               	retlw	168
  4012  0FA1  3401               	retlw	1
  4013  0FA2  34A6               	retlw	166
  4014  0FA3  3401               	retlw	1
  4015  0FA4  34A4               	retlw	164
  4016  0FA5  3401               	retlw	1
  4017  0FA6  34A3               	retlw	163
  4018  0FA7  3401               	retlw	1
  4019  0FA8  34A1               	retlw	161
  4020  0FA9  3401               	retlw	1
  4021  0FAA  34A0               	retlw	160
  4022  0FAB  3401               	retlw	1
  4023  0FAC  349E               	retlw	158
  4024  0FAD  3401               	retlw	1
  4025  0FAE  349D               	retlw	157
  4026  0FAF  3401               	retlw	1
  4027  0FB0  349B               	retlw	155
  4028  0FB1  3401               	retlw	1
  4029  0FB2  349A               	retlw	154
  4030  0FB3  3401               	retlw	1
  4031  0FB4  3498               	retlw	152
  4032  0FB5  3401               	retlw	1
  4033  0FB6  3497               	retlw	151
  4034  0FB7  3401               	retlw	1
  4035  0FB8  3495               	retlw	149
  4036  0FB9  3401               	retlw	1
  4037  0FBA  3494               	retlw	148
  4038  0FBB  3401               	retlw	1
  4039  0FBC  3492               	retlw	146
  4040  0FBD  3401               	retlw	1
  4041  0FBE  3491               	retlw	145
  4042  0FBF  3401               	retlw	1
  4043  0FC0  3490               	retlw	144
  4044  0FC1  3401               	retlw	1
  4045  0FC2  348E               	retlw	142
  4046  0FC3  3401               	retlw	1
  4047  0FC4  348D               	retlw	141
  4048  0FC5  3401               	retlw	1
  4049  0FC6  348B               	retlw	139
  4050  0FC7  3401               	retlw	1
  4051  0FC8  348A               	retlw	138
  4052  0FC9  3401               	retlw	1
  4053  0FCA  3489               	retlw	137
  4054  0FCB  3401               	retlw	1
  4055  0FCC  3487               	retlw	135
  4056  0FCD  3401               	retlw	1
  4057  0FCE  3486               	retlw	134
  4058  0FCF  3401               	retlw	1
  4059  0FD0  3485               	retlw	133
  4060  0FD1  3401               	retlw	1
  4061  0FD2  3483               	retlw	131
  4062  0FD3  3401               	retlw	1
  4063  0FD4  3482               	retlw	130
  4064  0FD5  3401               	retlw	1
  4065  0FD6  3481               	retlw	129
  4066  0FD7  3401               	retlw	1
  4067  0FD8  347F               	retlw	127
  4068  0FD9  3401               	retlw	1
  4069  0FDA  347E               	retlw	126
  4070  0FDB  3401               	retlw	1
  4071  0FDC  347D               	retlw	125
  4072  0FDD  3401               	retlw	1
  4073  0FDE  347B               	retlw	123
  4074  0FDF  3401               	retlw	1
  4075  0FE0  347A               	retlw	122
  4076  0FE1  3401               	retlw	1
  4077  0FE2  3479               	retlw	121
  4078  0FE3  3401               	retlw	1
  4079  0FE4  3478               	retlw	120
  4080  0FE5  3401               	retlw	1
  4081  0FE6  3476               	retlw	118
  4082  0FE7  3401               	retlw	1
  4083  0FE8  3475               	retlw	117
  4084  0FE9  3401               	retlw	1
  4085  0FEA  3474               	retlw	116
  4086  0FEB  3401               	retlw	1
  4087  0FEC  3473               	retlw	115
  4088  0FED  3401               	retlw	1
  4089  0FEE  3471               	retlw	113
  4090  0FEF  3401               	retlw	1
  4091  0FF0  3470               	retlw	112
  4092  0FF1  3401               	retlw	1
  4093  0FF2  346F               	retlw	111
  4094  0FF3  3401               	retlw	1
  4095  0FF4  346E               	retlw	110
  4096  0FF5  3401               	retlw	1
  4097  0FF6  3400               	retlw	0
  4098  0FF7  3400               	retlw	0
  4099  0FF8  3400               	retlw	0
  4100  0FF9  3400               	retlw	0
  4101  0FFA  3400               	retlw	0
  4102  0FFB  3400               	retlw	0
  4103  0FFC  3400               	retlw	0
  4104  0FFD  3400               	retlw	0
  4105  0FFE  3400               	retlw	0
  4106  0FFF  3400               	retlw	0
  4107                           
  4108                           	psect	stringtext
  4109  2000                     __pstringtext:	
  4110  2000                     exp@coeff:	
  4111  2000  3400               	retlw	0
  4112  2001  3480               	retlw	128
  4113  2002  343F               	retlw	63
  4114  2003  3472               	retlw	114
  4115  2004  3431               	retlw	49
  4116  2005  343F               	retlw	63
  4117  2006  34FE               	retlw	254
  4118  2007  3475               	retlw	117
  4119  2008  343E               	retlw	62
  4120  2009  3458               	retlw	88
  4121  200A  3463               	retlw	99
  4122  200B  343D               	retlw	61
  4123  200C  3495               	retlw	149
  4124  200D  341D               	retlw	29
  4125  200E  343C               	retlw	60
  4126  200F  34C5               	retlw	197
  4127  2010  34AE               	retlw	174
  4128  2011  343A               	retlw	58
  4129  2012  3479               	retlw	121
  4130  2013  3421               	retlw	33
  4131  2014  3439               	retlw	57
  4132  2015  3494               	retlw	148
  4133  2016  3480               	retlw	128
  4134  2017  3437               	retlw	55
  4135  2018  3493               	retlw	147
  4136  2019  34A7               	retlw	167
  4137  201A  3435               	retlw	53
  4138  201B  3456               	retlw	86
  4139  201C  3415               	retlw	21
  4140  201D  3434               	retlw	52
  4141  201E                     __end_ofexp@coeff:	
  4142  201E                     log@coeff:	
  4143  201E  3400               	retlw	0
  4144  201F  3400               	retlw	0
  4145  2020  3400               	retlw	0
  4146  2021  3400               	retlw	0
  4147  2022  3480               	retlw	128
  4148  2023  343F               	retlw	63
  4149  2024  34F0               	retlw	240
  4150  2025  34FF               	retlw	255
  4151  2026  34BE               	retlw	190
  4152  2027  34E2               	retlw	226
  4153  2028  34A9               	retlw	169
  4154  2029  343E               	retlw	62
  4155  202A  3483               	retlw	131
  4156  202B  3476               	retlw	118
  4157  202C  34BE               	retlw	190
  4158  202D  34AE               	retlw	174
  4159  202E  342B               	retlw	43
  4160  202F  343E               	retlw	62
  4161  2030  343C               	retlw	60
  4162  2031  34C3               	retlw	195
  4163  2032  34BD               	retlw	189
  4164  2033  34D2               	retlw	210
  4165  2034  3413               	retlw	19
  4166  2035  343D               	retlw	61
  4167  2036  3478               	retlw	120
  4168  2037  34D3               	retlw	211
  4169  2038  34BB               	retlw	187
  4170  2039                     __end_oflog@coeff:	
  4171                           
  4172                           	psect	nvCOMMON
  4173  007D                     __pnvCOMMON:	
  4174  007D                     _UQFront:	
  4175  007D                     	ds	1
  4176                           
  4177                           	psect	nvBANK0
  4178  0069                     __pnvBANK0:	
  4179  0069                     _UQEnd:	
  4180  0069                     	ds	1
  4181  000B                     _INTCONbits	set	11
  4182  0011                     _PIR1bits	set	17
  4183  000C                     _PORTAbits	set	12
  4184  000E                     _PORTCbits	set	14
  4185  000F                     _PORTDbits	set	15
  4186  0010                     _PORTEbits	set	16
  4187  001B                     _PR2	set	27
  4188  001C                     _T2CONbits	set	28
  4189  005F                     _GIE	set	95
  4190  005E                     _PEIE	set	94
  4191  0069                     _RB1	set	105
  4192  009D                     _ADCON0bits	set	157
  4193  009E                     _ADCON1bits	set	158
  4194  009C                     _ADRESH	set	156
  4195  009B                     _ADRESL	set	155
  4196  0095                     _OPTION_REGbits	set	149
  4197  0099                     _OSCCONbits	set	153
  4198  008D                     _TRISBbits	set	141
  4199  008E                     _TRISCbits	set	142
  4200  008F                     _TRISDbits	set	143
  4201  0090                     _TRISEbits	set	144
  4202  048D                     _RCIE	set	1165
  4203  011D                     _APFCONbits	set	285
  4204  010D                     _LATBbits	set	269
  4205  010F                     _LATDbits	set	271
  4206  0190                     _ANSELEbits	set	400
  4207  0192                     _PMADRH	set	402
  4208  0191                     _PMADRL	set	401
  4209  0195                     _PMCON1bits	set	405
  4210  0196                     _PMCON2	set	406
  4211  0194                     _PMDATH	set	404
  4212  0193                     _PMDATL	set	403
  4213  0199                     _RCREG	set	409
  4214  019D                     _RCSTAbits	set	413
  4215  019B                     _SPBRG	set	411
  4216  019A                     _TXREG	set	410
  4217  019E                     _TXSTAbits	set	414
  4218  0291                     _CCPR1	set	657
  4219  0298                     _CCPR2	set	664
  4220  0293                     _CCP1CONbits	set	659
  4221  029A                     _CCP2CONbits	set	666
  4222  029D                     _CCPTMRS0	set	669
  4223  029E                     _CCPTMRS1	set	670
  4224  029F                     _CCPTMRS2	set	671
  4225  0311                     _CCPR3	set	785
  4226  0318                     _CCPR4	set	792
  4227  031C                     _CCPR5	set	796
  4228  0313                     _CCP3CONbits	set	787
  4229  031A                     _CCP4CONbits	set	794
  4230  031E                     _CCP5CONbits	set	798
  4231  030C                     _TRISFbits	set	780
  4232  030D                     _TRISGbits	set	781
  4233  038C                     _LATFbits	set	908
  4234  038D                     _LATGbits	set	909
  4235  040C                     _ANSELFbits	set	1036
  4236  061A                     _CCPR9	set	1562
  4237  061F                     _CCP10CONbits	set	1567
  4238  0613                     _CCP6CONbits	set	1555
  4239  0616                     _CCP7CONbits	set	1558
  4240  0619                     _CCP8CONbits	set	1561
  4241  061C                     _CCP9CONbits	set	1564
  4242                           
  4243                           ; #config settings
  4244  0000                     
  4245                           	psect	cinit
  4246  0320                     start_initialization:	
  4247  0320                     __initialization:		;BIGRAM
  4248                           
  4249                           ; Clear objects allocated to BANK0
  4250  0320  3058               	movlw	low __pbssBANK0
  4251  0321  0084               	movwf	4
  4252  0322  3000               	movlw	high __pbssBANK0
  4253  0323  0085               	movwf	5
  4254  0324  3011               	movlw	17
  4255  0325  00FE               	movwf	btemp
  4256  0326  3000               	movlw	0
  4257  0327  00FF               	movwf	btemp+1
  4258  0328  31A6  26A5  3183   	fcall	clear_ram0
  4259                           
  4260                           ; Clear objects allocated to BANK2
  4261  032B  0022               	movlb	2	; select bank2
  4262  032C  01EB               	clrf	__pbssBANK2& (0+127)
  4263  032D  01EC               	clrf	(__pbssBANK2+1)& (0+127)
  4264                           
  4265                           ; Clear objects allocated to BANK3
  4266  032E  30A0               	movlw	low __pbssBANK3
  4267  032F  0084               	movwf	4
  4268  0330  3001               	movlw	high __pbssBANK3
  4269  0331  0085               	movwf	5
  4270  0332  302D               	movlw	45
  4271  0333  00FE               	movwf	btemp
  4272  0334  3000               	movlw	0
  4273  0335  00FF               	movwf	btemp+1
  4274  0336  31A6  26A5  3183   	fcall	clear_ram0
  4275                           
  4276                           ; Clear objects allocated to BANK4
  4277  0339  3020               	movlw	low __pbssBANK4
  4278  033A  0084               	movwf	4
  4279  033B  3002               	movlw	high __pbssBANK4
  4280  033C  0085               	movwf	5
  4281  033D  3033               	movlw	51
  4282  033E  00FE               	movwf	btemp
  4283  033F  3000               	movlw	0
  4284  0340  00FF               	movwf	btemp+1
  4285  0341  31A6  26A5  3183   	fcall	clear_ram0
  4286                           
  4287                           ; Clear objects allocated to BANK5
  4288  0344  30A0               	movlw	low __pbssBANK5
  4289  0345  0084               	movwf	4
  4290  0346  3002               	movlw	high __pbssBANK5
  4291  0347  0085               	movwf	5
  4292  0348  302C               	movlw	44
  4293  0349  00FE               	movwf	btemp
  4294  034A  3000               	movlw	0
  4295  034B  00FF               	movwf	btemp+1
  4296  034C  31A6  26A5  3183   	fcall	clear_ram0
  4297                           
  4298                           ; Clear objects allocated to BANK6
  4299  034F  3020               	movlw	low __pbssBANK6
  4300  0350  0084               	movwf	4
  4301  0351  3003               	movlw	high __pbssBANK6
  4302  0352  0085               	movwf	5
  4303  0353  3040               	movlw	64
  4304  0354  00FE               	movwf	btemp
  4305  0355  3000               	movlw	0
  4306  0356  00FF               	movwf	btemp+1
  4307  0357  31A6  26A5  3183   	fcall	clear_ram0
  4308                           
  4309                           ; Clear objects allocated to BANK11
  4310  035A  30A0               	movlw	low __pbssBANK11
  4311  035B  0084               	movwf	4
  4312  035C  3005               	movlw	high __pbssBANK11
  4313  035D  0085               	movwf	5
  4314  035E  3040               	movlw	64
  4315  035F  00FE               	movwf	btemp
  4316  0360  3000               	movlw	0
  4317  0361  00FF               	movwf	btemp+1
  4318  0362  31A6  26A5  3183   	fcall	clear_ram0
  4319                           
  4320                           ; Initialize objects allocated to BIGRAM
  4321  0365  30F8               	movlw	low __pidataBIGRAM
  4322  0366  0084               	movwf	4
  4323  0367  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  4324  0368  0085               	movwf	5
  4325  0369  30E8               	movlw	low (0+9192)
  4326  036A  0086               	movwf	6
  4327  036B  3023               	movlw	high (0+9192)
  4328  036C  0087               	movwf	7
  4329  036D  3002               	movlw	2
  4330  036E  00FF               	movwf	btemp+1
  4331  036F  3008               	movlw	8
  4332  0370  31A6  2699  3183   	fcall	init_ram
  4333                           
  4334                           ; Initialize objects allocated to BANK0
  4335  0373  30D3               	movlw	low __pidataBANK0
  4336  0374  0084               	movwf	4
  4337  0375  30A6               	movlw	(high __pidataBANK0)| (0+128)
  4338  0376  0085               	movwf	5
  4339  0377  3045               	movlw	low __pdataBANK0
  4340  0378  0086               	movwf	6
  4341  0379  3000               	movlw	high __pdataBANK0
  4342  037A  0087               	movwf	7
  4343  037B  3000               	movlw	0
  4344  037C  00FF               	movwf	btemp+1
  4345  037D  3013               	movlw	19
  4346  037E  31A6  2699  3183   	fcall	init_ram
  4347                           
  4348                           ; Initialize objects allocated to BANK3
  4349  0381  3001               	movlw	low __pidataBANK3
  4350  0382  0084               	movwf	4
  4351  0383  3098               	movlw	(high __pidataBANK3)| (0+128)
  4352  0384  0085               	movwf	5
  4353  0385  30CD               	movlw	low __pdataBANK3
  4354  0386  0086               	movwf	6
  4355  0387  3001               	movlw	high __pdataBANK3
  4356  0388  0087               	movwf	7
  4357  0389  3000               	movlw	0
  4358  038A  00FF               	movwf	btemp+1
  4359  038B  301A               	movlw	26
  4360  038C  31A6  2699  3183   	fcall	init_ram
  4361                           
  4362                           ; Initialize objects allocated to BANK4
  4363  038F  0024               	movlb	4	; select bank4
  4364  0390  3180  2002  3183   	fcall	__pidataBANK4	;fetch initializer
  4365  0393  00E2               	movwf	__pdataBANK4& (0+127)
  4366  0394  3180  2003  3183   	fcall	__pidataBANK4+1	;fetch initializer
  4367  0397  00E3               	movwf	(__pdataBANK4+1)& (0+127)
  4368                           
  4369                           ; Initialize objects allocated to BANK7
  4370  0398  30CC               	movlw	low __pidataBANK7
  4371  0399  0084               	movwf	4
  4372  039A  309A               	movlw	(high __pidataBANK7)| (0+128)
  4373  039B  0085               	movwf	5
  4374  039C  30A0               	movlw	low __pdataBANK7
  4375  039D  0086               	movwf	6
  4376  039E  3003               	movlw	high __pdataBANK7
  4377  039F  0087               	movwf	7
  4378  03A0  3000               	movlw	0
  4379  03A1  00FF               	movwf	btemp+1
  4380  03A2  303D               	movlw	61
  4381  03A3  31A6  2699  3183   	fcall	init_ram
  4382                           
  4383                           ; Initialize objects allocated to BANK8
  4384  03A6  308F               	movlw	low __pidataBANK8
  4385  03A7  0084               	movwf	4
  4386  03A8  309A               	movlw	(high __pidataBANK8)| (0+128)
  4387  03A9  0085               	movwf	5
  4388  03AA  3020               	movlw	low __pdataBANK8
  4389  03AB  0086               	movwf	6
  4390  03AC  3004               	movlw	high __pdataBANK8
  4391  03AD  0087               	movwf	7
  4392  03AE  3000               	movlw	0
  4393  03AF  00FF               	movwf	btemp+1
  4394  03B0  303D               	movlw	61
  4395  03B1  31A6  2699  3183   	fcall	init_ram
  4396                           
  4397                           ; Initialize objects allocated to BANK9
  4398  03B4  3052               	movlw	low __pidataBANK9
  4399  03B5  0084               	movwf	4
  4400  03B6  309A               	movlw	(high __pidataBANK9)| (0+128)
  4401  03B7  0085               	movwf	5
  4402  03B8  30A0               	movlw	low __pdataBANK9
  4403  03B9  0086               	movwf	6
  4404  03BA  3004               	movlw	high __pdataBANK9
  4405  03BB  0087               	movwf	7
  4406  03BC  3000               	movlw	0
  4407  03BD  00FF               	movwf	btemp+1
  4408  03BE  303D               	movlw	61
  4409  03BF  31A6  2699  3183   	fcall	init_ram
  4410                           
  4411                           ; Initialize objects allocated to BANK10
  4412  03C2  3015               	movlw	low __pidataBANK10
  4413  03C3  0084               	movwf	4
  4414  03C4  309A               	movlw	(high __pidataBANK10)| (0+128)
  4415  03C5  0085               	movwf	5
  4416  03C6  3020               	movlw	low __pdataBANK10
  4417  03C7  0086               	movwf	6
  4418  03C8  3005               	movlw	high __pdataBANK10
  4419  03C9  0087               	movwf	7
  4420  03CA  3000               	movlw	0
  4421  03CB  00FF               	movwf	btemp+1
  4422  03CC  303D               	movlw	61
  4423  03CD  31A6  2699         	fcall	init_ram
  4424  03CF                     end_of_initialization:	
  4425                           ;End of C runtime variable initialization code
  4426                           
  4427  03CF                     __end_of__initialization:	
  4428  03CF  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4429  03D0  0020               	movlb	0
  4430  03D1  3183  2BD3         	ljmp	_main	;jump to C main() function
  4431                           
  4432                           	psect	bssBANK0
  4433  0058                     __pbssBANK0:	
  4434  0058                     _sub_timer:	
  4435  0058                     	ds	4
  4436  005C                     _tap_timer:	
  4437  005C                     	ds	4
  4438  0060                     _timer:	
  4439  0060                     	ds	4
  4440  0064                     _doubleTap_state:	
  4441  0064                     	ds	1
  4442  0065                     _mode2_state:	
  4443  0065                     	ds	1
  4444  0066                     _presetSaveMode:	
  4445  0066                     	ds	1
  4446  0067                     _suspend_blink:	
  4447  0067                     	ds	1
  4448  0068                     _switchTap_pressed:	
  4449  0068                     	ds	1
  4450                           
  4451                           	psect	dataBANK0
  4452  0045                     __pdataBANK0:	
  4453  0045                     _baseline_delay_time:	
  4454  0045                     	ds	4
  4455  0049                     _delay_time:	
  4456  0049                     	ds	4
  4457  004D                     _bottom_push_state:	
  4458  004D                     	ds	2
  4459  004F                     _long_press_limit:	
  4460  004F                     	ds	2
  4461  0051                     _top_push_state:	
  4462  0051                     	ds	2
  4463  0053                     _blink_rate:	
  4464  0053                     	ds	1
  4465  0054                     _longTap_state:	
  4466  0054                     	ds	1
  4467  0055                     _num_taps:	
  4468  0055                     	ds	1
  4469  0056                     _presetChannel:	
  4470  0056                     	ds	1
  4471  0057                     _switchBypass_state:	
  4472  0057                     	ds	1
  4473                           
  4474                           	psect	bssBANK2
  4475  016B                     __pbssBANK2:	
  4476  016B                     _mod_counter:	
  4477  016B                     	ds	2
  4478                           
  4479                           	psect	bssBANK3
  4480  01A0                     __pbssBANK3:	
  4481  01A0                     _double_timer:	
  4482  01A0                     	ds	4
  4483  01A4                     _mod_timer:	
  4484  01A4                     	ds	4
  4485  01A8                     _adjust_sub_delay:	
  4486  01A8                     	ds	2
  4487  01AA                     _debounce_mode1:	
  4488  01AA                     	ds	2
  4489  01AC                     _delay_counter:	
  4490  01AC                     	ds	2
  4491  01AE                     _feedback_timer:	
  4492  01AE                     	ds	2
  4493  01B0                     _knob_1_pos:	
  4494  01B0                     	ds	2
  4495  01B2                     _knob_2_pos:	
  4496  01B2                     	ds	2
  4497  01B4                     _knob_3_pos:	
  4498  01B4                     	ds	2
  4499  01B6                     _knob_4_pos:	
  4500  01B6                     	ds	2
  4501  01B8                     _knob_5_pos:	
  4502  01B8                     	ds	2
  4503  01BA                     _longTap_timer:	
  4504  01BA                     	ds	2
  4505  01BC                     _mod_value:	
  4506  01BC                     	ds	2
  4507  01BE                     _reset_sub_delay:	
  4508  01BE                     	ds	2
  4509  01C0                     _switchBypass_pressed:	
  4510  01C0                     	ds	2
  4511  01C2                     _bottomTactile_pressed:	
  4512  01C2                     	ds	1
  4513  01C3                     _bypass_turning_on:	
  4514  01C3                     	ds	1
  4515  01C4                     _feedbackTriggered:	
  4516  01C4                     	ds	1
  4517  01C5                     _feedback_start:	
  4518  01C5                     	ds	1
  4519  01C6                     _iCnt:	
  4520  01C6                     	ds	1
  4521  01C7                     _longTap_start:	
  4522  01C7                     	ds	1
  4523  01C8                     _mode1_state:	
  4524  01C8                     	ds	1
  4525  01C9                     _preset_blink:	
  4526  01C9                     	ds	1
  4527  01CA                     _preset_programmning_on:	
  4528  01CA                     	ds	1
  4529  01CB                     _switchTap_down:	
  4530  01CB                     	ds	1
  4531  01CC                     _topTactile_pressed:	
  4532  01CC                     	ds	1
  4533                           
  4534                           	psect	dataBANK3
  4535  01CD                     __pdataBANK3:	
  4536  01CD                     _blink_delay:	
  4537  01CD                     	ds	2
  4538  01CF                     _delay_time_changed:	
  4539  01CF                     	ds	2
  4540  01D1                     _knob1_prev:	
  4541  01D1                     	ds	2
  4542  01D3                     _knob2_prev:	
  4543  01D3                     	ds	2
  4544  01D5                     _knob3_prev:	
  4545  01D5                     	ds	2
  4546  01D7                     _knob4_prev:	
  4547  01D7                     	ds	2
  4548  01D9                     _knob5_prev:	
  4549  01D9                     	ds	2
  4550  01DB                     _mod_delay_time:	
  4551  01DB                     	ds	2
  4552  01DD                     _tap_iteration:	
  4553  01DD                     	ds	2
  4554  01DF                     _blink_state:	
  4555  01DF                     	ds	1
  4556  01E0                     _currentBypassState:	
  4557  01E0                     	ds	1
  4558  01E1                     _expSwitchState:	
  4559  01E1                     	ds	1
  4560  01E2                     _expressModeCnst:	
  4561  01E2                     	ds	1
  4562  01E3                     _expressionChannel:	
  4563  01E3                     	ds	1
  4564  01E4                     _feedback_state:	
  4565  01E4                     	ds	1
  4566  01E5                     _presetModeCnst:	
  4567  01E5                     	ds	1
  4568  01E6                     _switchTap_state:	
  4569  01E6                     	ds	1
  4570                           
  4571                           	psect	bssBANK4
  4572  0220                     __pbssBANK4:	
  4573  0220                     _tap_history:	
  4574  0220                     	ds	20
  4575  0234                     USARTWriteInt@F3536:	
  4576  0234                     	ds	5
  4577  0239                     _ledState:	
  4578  0239                     	ds	4
  4579  023D                     _tap_total:	
  4580  023D                     	ds	4
  4581  0241                     _test_timer:	
  4582  0241                     	ds	4
  4583  0245                     _adjusted_pot_value:	
  4584  0245                     	ds	2
  4585  0247                     _debounce_bypass:	
  4586  0247                     	ds	2
  4587  0249                     _debounce_count:	
  4588  0249                     	ds	2
  4589  024B                     _debounce_mode2:	
  4590  024B                     	ds	2
  4591  024D                     _delayfound:	
  4592  024D                     	ds	2
  4593  024F                     _errno:	
  4594  024F                     	ds	2
  4595  0251                     _switchBypass_toggle:	
  4596  0251                     	ds	2
  4597                           
  4598                           	psect	dataBANK4
  4599  0262                     __pdataBANK4:	
  4600  0262                     _switchBypass_up:	
  4601  0262                     	ds	2
  4602                           
  4603                           	psect	bssBANK5
  4604  02A0                     __pbssBANK5:	
  4605  02A0                     _tap:	
  4606  02A0                     	ds	44
  4607                           
  4608                           	psect	bssBANK6
  4609  0320                     __pbssBANK6:	
  4610  0320                     _URBuff:	
  4611  0320                     	ds	64
  4612                           
  4613                           	psect	dataBANK7
  4614  03A0                     __pdataBANK7:	
  4615  03A0                     _modSin:	
  4616  03A0                     	ds	61
  4617                           
  4618                           	psect	dataBANK8
  4619  0420                     __pdataBANK8:	
  4620  0420                     _modTri:	
  4621  0420                     	ds	61
  4622                           
  4623                           	psect	dataBANK9
  4624  04A0                     __pdataBANK9:	
  4625  04A0                     _modRevSaw:	
  4626  04A0                     	ds	61
  4627                           
  4628                           	psect	dataBANK10
  4629  0520                     __pdataBANK10:	
  4630  0520                     _modSaw:	
  4631  0520                     	ds	61
  4632                           
  4633                           	psect	bssBANK11
  4634  05A0                     __pbssBANK11:	
  4635  05A0                     _myBuf:	
  4636  05A0                     	ds	64
  4637                           
  4638                           	psect	clrtext
  4639  26A5                     clear_ram0:	
  4640                           ;	Called with FSR0 containing the base address, and
  4641                           ;	btemp/btemp+1 has the size to clear
  4642                           
  4643  26A5  0064               	clrwdt	;clear the watchdog before getting into this loop
  4644  26A6                     clrloop0:	
  4645  26A6  0180               	clrf	0	;clear RAM location pointed to by FSR
  4646  26A7  3101               	addfsr 0,1
  4647  26A8  3001               	movlw	1
  4648  26A9  02FE               	subwf	126,f
  4649  26AA  3000               	movlw	0
  4650  26AB  3BFF               	subwfb	127,f
  4651  26AC  087F               	movf	127,w
  4652  26AD  047E               	iorwf	126,w
  4653  26AE  1903               	btfsc	3,2
  4654  26AF  3400               	retlw	0	;all done for this memory range, return
  4655  26B0  2EA6               	goto	clrloop0	;have we reached the end yet?
  4656                           
  4657                           	psect	inittext
  4658  2699                     init_ram:	
  4659  2699  00FE               	movwf	126
  4660  269A                     initloop:	
  4661  269A  0012               	moviw fsr0++
  4662  269B  001E               	movwi fsr1++
  4663  269C  3001               	movlw	1
  4664  269D  02FE               	subwf	126,f
  4665  269E  3000               	movlw	0
  4666  269F  3BFF               	subwfb	127,f
  4667  26A0  087F               	movf	127,w
  4668  26A1  047E               	iorwf	126,w
  4669  26A2  1903               	btfsc	3,2
  4670  26A3  3400               	retlw	0
  4671  26A4  2E9A               	goto	initloop
  4672                           
  4673                           	psect	cstackBANK4
  4674  0253                     __pcstackBANK4:	
  4675  0253                     ??_main:	
  4676                           
  4677                           ; 1 bytes @ 0x0
  4678  0253                     	ds	15
  4679                           
  4680                           	psect	cstackBANK2
  4681  0120                     __pcstackBANK2:	
  4682  0120                     ___fttol@sign1:	
  4683                           
  4684                           ; 1 bytes @ 0x0
  4685  0120                     	ds	1
  4686  0121                     ___fttol@lval:	
  4687                           
  4688                           ; 4 bytes @ 0x1
  4689  0121                     	ds	4
  4690  0125                     ___fttol@exp1:	
  4691                           
  4692                           ; 1 bytes @ 0x5
  4693  0125                     	ds	1
  4694  0126                     ?___altoft:	
  4695  0126                     ___altoft@c:	
  4696                           ; 3 bytes @ 0x6
  4697                           
  4698                           
  4699                           ; 4 bytes @ 0x6
  4700  0126                     	ds	4
  4701  012A                     ??___altoft:	
  4702                           
  4703                           ; 1 bytes @ 0xA
  4704  012A                     	ds	2
  4705  012C                     ___altoft@exp:	
  4706                           
  4707                           ; 1 bytes @ 0xC
  4708  012C                     	ds	1
  4709  012D                     ___altoft@sign:	
  4710                           
  4711                           ; 1 bytes @ 0xD
  4712  012D                     	ds	1
  4713  012E                     ?_trunc:	
  4714  012E                     ?_floor:	
  4715                           ; 3 bytes @ 0xE
  4716                           
  4717  012E                     trunc@x:	
  4718                           ; 3 bytes @ 0xE
  4719                           
  4720  012E                     floor@x:	
  4721                           ; 3 bytes @ 0xE
  4722                           
  4723                           
  4724                           ; 3 bytes @ 0xE
  4725  012E                     	ds	3
  4726  0131                     trunc@i:	
  4727  0131                     floor@i:	
  4728                           ; 3 bytes @ 0x11
  4729                           
  4730                           
  4731                           ; 3 bytes @ 0x11
  4732  0131                     	ds	3
  4733  0134                     trunc@expon:	
  4734  0134                     floor@expon:	
  4735                           ; 2 bytes @ 0x14
  4736                           
  4737                           
  4738                           ; 2 bytes @ 0x14
  4739  0134                     	ds	2
  4740  0136                     ?_set_subdivision:	
  4741  0136                     ?_exp:	
  4742                           ; 2 bytes @ 0x16
  4743                           
  4744  0136                     set_subdivision@x:	
  4745                           ; 3 bytes @ 0x16
  4746                           
  4747  0136                     exp@x:	
  4748                           ; 2 bytes @ 0x16
  4749                           
  4750                           
  4751                           ; 3 bytes @ 0x16
  4752  0136                     	ds	2
  4753  0138                     set_subdivision@y:	
  4754                           
  4755                           ; 2 bytes @ 0x18
  4756  0138                     	ds	1
  4757  0139                     _exp$2647:	
  4758                           
  4759                           ; 3 bytes @ 0x19
  4760  0139                     	ds	1
  4761  013A                     ??_set_subdivision:	
  4762                           
  4763                           ; 1 bytes @ 0x1A
  4764  013A                     	ds	2
  4765  013C                     _exp$2409:	
  4766                           
  4767                           ; 3 bytes @ 0x1C
  4768  013C                     	ds	1
  4769  013D                     set_subdivision@scalar:	
  4770                           
  4771                           ; 3 bytes @ 0x1D
  4772  013D                     	ds	2
  4773  013F                     exp@exponent:	
  4774                           
  4775                           ; 2 bytes @ 0x1F
  4776  013F                     	ds	1
  4777  0140                     set_subdivision@tmpX:	
  4778                           
  4779                           ; 2 bytes @ 0x20
  4780  0140                     	ds	1
  4781  0141                     exp@sign:	
  4782                           
  4783                           ; 1 bytes @ 0x21
  4784  0141                     	ds	1
  4785  0142                     ?_pow:	
  4786  0142                     pow@x:	
  4787                           ; 3 bytes @ 0x22
  4788                           
  4789                           
  4790                           ; 3 bytes @ 0x22
  4791  0142                     	ds	3
  4792  0145                     pow@y:	
  4793                           
  4794                           ; 3 bytes @ 0x25
  4795  0145                     	ds	3
  4796  0148                     ??_pow:	
  4797                           
  4798                           ; 1 bytes @ 0x28
  4799  0148                     	ds	1
  4800  0149                     _pow$2645:	
  4801                           
  4802                           ; 3 bytes @ 0x29
  4803  0149                     	ds	3
  4804  014C                     _pow$2646:	
  4805                           
  4806                           ; 3 bytes @ 0x2C
  4807  014C                     	ds	3
  4808  014F                     pow@sign:	
  4809                           
  4810                           ; 1 bytes @ 0x2F
  4811  014F                     	ds	1
  4812  0150                     pow@yi:	
  4813                           
  4814                           ; 4 bytes @ 0x30
  4815  0150                     	ds	4
  4816  0154                     ?_scaleA100kPot:	
  4817  0154                     scaleA100kPot@input:	
  4818                           ; 2 bytes @ 0x34
  4819                           
  4820                           
  4821                           ; 3 bytes @ 0x34
  4822  0154                     	ds	3
  4823  0157                     scaleA100kPot@pwm:	
  4824                           
  4825                           ; 3 bytes @ 0x37
  4826  0157                     	ds	3
  4827  015A                     _scaleA100kPot$2639:	
  4828                           
  4829                           ; 3 bytes @ 0x3A
  4830  015A                     	ds	3
  4831  015D                     _scaleA100kPot$2640:	
  4832                           
  4833                           ; 3 bytes @ 0x3D
  4834  015D                     	ds	3
  4835  0160                     _scaleA100kPot$2641:	
  4836                           
  4837                           ; 3 bytes @ 0x40
  4838  0160                     	ds	3
  4839  0163                     main@xxx:	
  4840                           
  4841                           ; 2 bytes @ 0x43
  4842  0163                     	ds	2
  4843  0165                     main@i:	
  4844                           
  4845                           ; 2 bytes @ 0x45
  4846  0165                     	ds	2
  4847  0167                     main@i_408:	
  4848                           
  4849                           ; 2 bytes @ 0x47
  4850  0167                     	ds	2
  4851  0169                     main@i_409:	
  4852                           
  4853                           ; 2 bytes @ 0x49
  4854  0169                     	ds	2
  4855                           
  4856                           	psect	cstackBANK1
  4857  00A0                     __pcstackBANK1:	
  4858  00A0                     ?___ftge:	
  4859  00A0                     ?_set_leds_top:	
  4860                           ; 1 bit 
  4861                           
  4862  00A0                     ?_USARTInit:	
  4863                           ; 1 bytes @ 0x0
  4864                           
  4865  00A0                     ??_ConfigureOscillator:	
  4866                           ; 1 bytes @ 0x0
  4867                           
  4868  00A0                     ??_InitApp:	
  4869                           ; 1 bytes @ 0x0
  4870                           
  4871  00A0                     ??_InitializeTaps:	
  4872                           ; 1 bytes @ 0x0
  4873                           
  4874  00A0                     ??_init_adc:	
  4875                           ; 1 bytes @ 0x0
  4876                           
  4877  00A0                     ??_init_pwm:	
  4878                           ; 1 bytes @ 0x0
  4879                           
  4880  00A0                     ??_init_timer2:	
  4881                           ; 1 bytes @ 0x0
  4882                           
  4883  00A0                     ??_init_timer0:	
  4884                           ; 1 bytes @ 0x0
  4885                           
  4886  00A0                     ?_set_leds_bottom:	
  4887                           ; 1 bytes @ 0x0
  4888                           
  4889  00A0                     ?_setFeedbackState:	
  4890                           ; 1 bytes @ 0x0
  4891                           
  4892  00A0                     ?_setLongTapState:	
  4893                           ; 1 bytes @ 0x0
  4894                           
  4895  00A0                     ?_updateSwitchBypassState:	
  4896                           ; 1 bytes @ 0x0
  4897                           
  4898  00A0                     ?_adc_convert:	
  4899                           ; 1 bytes @ 0x0
  4900                           
  4901  00A0                     ?_FLASH_ReadWord:	
  4902                           ; 2 bytes @ 0x0
  4903                           
  4904  00A0                     ?_getSwitchBypassState:	
  4905                           ; 2 bytes @ 0x0
  4906                           
  4907  00A0                     ?___wmul:	
  4908                           ; 2 bytes @ 0x0
  4909                           
  4910  00A0                     ?___ftpack:	
  4911                           ; 2 bytes @ 0x0
  4912                           
  4913  00A0                     ?_frexp:	
  4914                           ; 3 bytes @ 0x0
  4915                           
  4916  00A0                     ?___ftneg:	
  4917                           ; 3 bytes @ 0x0
  4918                           
  4919  00A0                     ?___lmul:	
  4920                           ; 3 bytes @ 0x0
  4921                           
  4922  00A0                     ?___aldiv:	
  4923                           ; 4 bytes @ 0x0
  4924                           
  4925  00A0                     FLASH_ReadWord@flashAddr:	
  4926                           ; 4 bytes @ 0x0
  4927                           
  4928  00A0                     set_leds_top@x:	
  4929                           ; 2 bytes @ 0x0
  4930                           
  4931  00A0                     set_leds_bottom@x:	
  4932                           ; 2 bytes @ 0x0
  4933                           
  4934  00A0                     updateSwitchBypassState@state:	
  4935                           ; 2 bytes @ 0x0
  4936                           
  4937  00A0                     setFeedbackState@f_state:	
  4938                           ; 2 bytes @ 0x0
  4939                           
  4940  00A0                     setLongTapState@f_state:	
  4941                           ; 2 bytes @ 0x0
  4942                           
  4943  00A0                     USARTInit@baud_rate:	
  4944                           ; 2 bytes @ 0x0
  4945                           
  4946  00A0                     ___wmul@multiplier:	
  4947                           ; 2 bytes @ 0x0
  4948                           
  4949  00A0                     ___ftpack@arg:	
  4950                           ; 2 bytes @ 0x0
  4951                           
  4952  00A0                     ___ftge@ff1:	
  4953                           ; 3 bytes @ 0x0
  4954                           
  4955  00A0                     ___ftneg@f1:	
  4956                           ; 3 bytes @ 0x0
  4957                           
  4958  00A0                     frexp@value:	
  4959                           ; 3 bytes @ 0x0
  4960                           
  4961  00A0                     ___lmul@multiplier:	
  4962                           ; 3 bytes @ 0x0
  4963                           
  4964  00A0                     ___aldiv@divisor:	
  4965                           ; 4 bytes @ 0x0
  4966                           
  4967                           
  4968                           ; 4 bytes @ 0x0
  4969  00A0                     	ds	1
  4970  00A1                     InitializeTaps@itap:	
  4971                           
  4972                           ; 2 bytes @ 0x1
  4973  00A1                     	ds	1
  4974  00A2                     ??_USARTInit:	
  4975  00A2                     ??_adc_convert:	
  4976                           ; 1 bytes @ 0x2
  4977                           
  4978  00A2                     ??_FLASH_ReadWord:	
  4979                           ; 1 bytes @ 0x2
  4980                           
  4981  00A2                     ??_set_leds_bottom:	
  4982                           ; 1 bytes @ 0x2
  4983                           
  4984  00A2                     ??_setFeedbackState:	
  4985                           ; 1 bytes @ 0x2
  4986                           
  4987  00A2                     ??_setLongTapState:	
  4988                           ; 1 bytes @ 0x2
  4989                           
  4990  00A2                     ??_updateSwitchBypassState:	
  4991                           ; 1 bytes @ 0x2
  4992                           
  4993  00A2                     ??_getSwitchBypassState:	
  4994                           ; 1 bytes @ 0x2
  4995                           
  4996  00A2                     FLASH_ReadWord@GIEBitValue:	
  4997                           ; 1 bytes @ 0x2
  4998                           
  4999  00A2                     set_leds_top@ledState:	
  5000                           ; 1 bytes @ 0x2
  5001                           
  5002  00A2                     ___wmul@multiplicand:	
  5003                           ; 2 bytes @ 0x2
  5004                           
  5005                           
  5006                           ; 2 bytes @ 0x2
  5007  00A2                     	ds	1
  5008  00A3                     ??___ftneg:	
  5009  00A3                     adc_convert@channel:	
  5010                           ; 1 bytes @ 0x3
  5011                           
  5012  00A3                     ___ftpack@exp:	
  5013                           ; 1 bytes @ 0x3
  5014                           
  5015  00A3                     frexp@eptr:	
  5016                           ; 1 bytes @ 0x3
  5017                           
  5018  00A3                     ___ftge@ff2:	
  5019                           ; 2 bytes @ 0x3
  5020                           
  5021                           
  5022                           ; 3 bytes @ 0x3
  5023  00A3                     	ds	1
  5024  00A4                     ??_set_leds_top:	
  5025  00A4                     ??_ReadSavedSettings:	
  5026                           ; 1 bytes @ 0x4
  5027                           
  5028  00A4                     ??_resetRingLEDs:	
  5029                           ; 1 bytes @ 0x4
  5030                           
  5031  00A4                     ??_setPresetDisplay:	
  5032                           ; 1 bytes @ 0x4
  5033                           
  5034  00A4                     ??_setExpressionDisplay:	
  5035                           ; 1 bytes @ 0x4
  5036                           
  5037  00A4                     ??___wmul:	
  5038                           ; 1 bytes @ 0x4
  5039                           
  5040  00A4                     ___ftpack@sign:	
  5041                           ; 1 bytes @ 0x4
  5042                           
  5043  00A4                     ___wmul@product:	
  5044                           ; 1 bytes @ 0x4
  5045                           
  5046  00A4                     ___lmul@multiplicand:	
  5047                           ; 2 bytes @ 0x4
  5048                           
  5049  00A4                     ___aldiv@dividend:	
  5050                           ; 4 bytes @ 0x4
  5051                           
  5052                           
  5053                           ; 4 bytes @ 0x4
  5054  00A4                     	ds	1
  5055  00A5                     ??___ftpack:	
  5056  00A5                     ??_frexp:	
  5057                           ; 1 bytes @ 0x5
  5058                           
  5059                           
  5060                           ; 1 bytes @ 0x5
  5061  00A5                     	ds	1
  5062  00A6                     ??___ftge:	
  5063  00A6                     setPresetDisplay@ledChannel:	
  5064                           ; 1 bytes @ 0x6
  5065                           
  5066  00A6                     setExpressionDisplay@ledChannel:	
  5067                           ; 1 bytes @ 0x6
  5068                           
  5069                           
  5070                           ; 1 bytes @ 0x6
  5071  00A6                     	ds	1
  5072  00A7                     ??_update_mode:	
  5073  00A7                     ??_update_selectMode:	
  5074                           ; 1 bytes @ 0x7
  5075                           
  5076  00A7                     ??_setPedalMode:	
  5077                           ; 1 bytes @ 0x7
  5078                           
  5079                           
  5080                           ; 1 bytes @ 0x7
  5081  00A7                     	ds	1
  5082  00A8                     ??___lmul:	
  5083  00A8                     ??___aldiv:	
  5084                           ; 1 bytes @ 0x8
  5085                           
  5086  00A8                     ?___awtoft:	
  5087                           ; 1 bytes @ 0x8
  5088                           
  5089  00A8                     ?___ftdiv:	
  5090                           ; 3 bytes @ 0x8
  5091                           
  5092  00A8                     ?___lltoft:	
  5093                           ; 3 bytes @ 0x8
  5094                           
  5095  00A8                     ___awtoft@c:	
  5096                           ; 3 bytes @ 0x8
  5097                           
  5098  00A8                     ___ftdiv@f2:	
  5099                           ; 2 bytes @ 0x8
  5100                           
  5101  00A8                     ___lmul@product:	
  5102                           ; 3 bytes @ 0x8
  5103                           
  5104  00A8                     ___lltoft@c:	
  5105                           ; 4 bytes @ 0x8
  5106                           
  5107                           
  5108                           ; 4 bytes @ 0x8
  5109  00A8                     	ds	1
  5110  00A9                     ___aldiv@counter:	
  5111                           
  5112                           ; 1 bytes @ 0x9
  5113  00A9                     	ds	1
  5114  00AA                     ___aldiv@sign:	
  5115                           
  5116                           ; 1 bytes @ 0xA
  5117  00AA                     	ds	1
  5118  00AB                     ??___awtoft:	
  5119  00AB                     ___ftdiv@f1:	
  5120                           ; 1 bytes @ 0xB
  5121                           
  5122  00AB                     ___aldiv@quotient:	
  5123                           ; 3 bytes @ 0xB
  5124                           
  5125                           
  5126                           ; 4 bytes @ 0xB
  5127  00AB                     	ds	1
  5128  00AC                     ?_wait_ms:	
  5129  00AC                     ??___lltoft:	
  5130                           ; 1 bytes @ 0xC
  5131                           
  5132  00AC                     wait_ms@timeSec:	
  5133                           ; 1 bytes @ 0xC
  5134                           
  5135                           
  5136                           ; 2 bytes @ 0xC
  5137  00AC                     	ds	1
  5138  00AD                     ___awtoft@sign:	
  5139  00AD                     ___lltoft@exp:	
  5140                           ; 1 bytes @ 0xD
  5141                           
  5142                           
  5143                           ; 1 bytes @ 0xD
  5144  00AD                     	ds	1
  5145  00AE                     ??_wait_ms:	
  5146  00AE                     ??___ftdiv:	
  5147                           ; 1 bytes @ 0xE
  5148                           
  5149  00AE                     wait_ms@timemsl:	
  5150                           ; 1 bytes @ 0xE
  5151                           
  5152                           
  5153                           ; 4 bytes @ 0xE
  5154  00AE                     	ds	4
  5155  00B2                     ??_read_bottom_tactile:	
  5156  00B2                     ??_read_top_tactile:	
  5157                           ; 1 bytes @ 0x12
  5158                           
  5159  00B2                     ??_solidring_tactiles:	
  5160                           ; 1 bytes @ 0x12
  5161                           
  5162  00B2                     ??_ring_tactiles:	
  5163                           ; 1 bytes @ 0x12
  5164                           
  5165  00B2                     ?_setSwitchBypassState:	
  5166                           ; 1 bytes @ 0x12
  5167                           
  5168  00B2                     ___ftdiv@cntr:	
  5169                           ; 1 bytes @ 0x12
  5170                           
  5171  00B2                     setSwitchBypassState@f_state:	
  5172                           ; 1 bytes @ 0x12
  5173                           
  5174                           
  5175                           ; 2 bytes @ 0x12
  5176  00B2                     	ds	1
  5177  00B3                     ring_tactiles@iLed:	
  5178  00B3                     ___ftdiv@f3:	
  5179                           ; 2 bytes @ 0x13
  5180                           
  5181                           
  5182                           ; 3 bytes @ 0x13
  5183  00B3                     	ds	1
  5184  00B4                     ??_setSwitchBypassState:	
  5185  00B4                     solidring_tactiles@ring_delay:	
  5186                           ; 1 bytes @ 0x14
  5187                           
  5188                           
  5189                           ; 1 bytes @ 0x14
  5190  00B4                     	ds	1
  5191  00B5                     ring_tactiles@iLed_1505:	
  5192                           
  5193                           ; 2 bytes @ 0x15
  5194  00B5                     	ds	1
  5195  00B6                     ??_initSwitchBypass:	
  5196  00B6                     ___ftdiv@exp:	
  5197                           ; 1 bytes @ 0x16
  5198                           
  5199  00B6                     initSwitchBypass@initState:	
  5200                           ; 1 bytes @ 0x16
  5201                           
  5202                           
  5203                           ; 2 bytes @ 0x16
  5204  00B6                     	ds	1
  5205  00B7                     ??_showSave:	
  5206  00B7                     ___ftdiv@sign:	
  5207                           ; 1 bytes @ 0x17
  5208                           
  5209                           
  5210                           ; 1 bytes @ 0x17
  5211  00B7                     	ds	1
  5212  00B8                     ?_setDoublePressState:	
  5213  00B8                     ?___ftmul:	
  5214                           ; 1 bytes @ 0x18
  5215                           
  5216  00B8                     setDoublePressState@f_state:	
  5217                           ; 3 bytes @ 0x18
  5218                           
  5219  00B8                     ___ftmul@f1:	
  5220                           ; 2 bytes @ 0x18
  5221                           
  5222                           
  5223                           ; 3 bytes @ 0x18
  5224  00B8                     	ds	2
  5225  00BA                     ??_setDoublePressState:	
  5226                           
  5227                           ; 1 bytes @ 0x1A
  5228  00BA                     	ds	1
  5229  00BB                     ___ftmul@f2:	
  5230                           
  5231                           ; 3 bytes @ 0x1B
  5232  00BB                     	ds	1
  5233  00BC                     ??_updateSwitchBypass:	
  5234  00BC                     ??_updateSwitchTap:	
  5235                           ; 1 bytes @ 0x1C
  5236                           
  5237                           
  5238                           ; 1 bytes @ 0x1C
  5239  00BC                     	ds	2
  5240  00BE                     ??___ftmul:	
  5241                           
  5242                           ; 1 bytes @ 0x1E
  5243  00BE                     	ds	4
  5244  00C2                     ___ftmul@exp:	
  5245  00C2                     updateSwitchTap@tapCntDivisor:	
  5246                           ; 1 bytes @ 0x22
  5247                           
  5248                           
  5249                           ; 2 bytes @ 0x22
  5250  00C2                     	ds	1
  5251  00C3                     ___ftmul@f3_as_product:	
  5252                           
  5253                           ; 3 bytes @ 0x23
  5254  00C3                     	ds	1
  5255  00C4                     updateSwitchTap@iCnt:	
  5256                           
  5257                           ; 1 bytes @ 0x24
  5258  00C4                     	ds	2
  5259  00C6                     ___ftmul@cntr:	
  5260                           
  5261                           ; 1 bytes @ 0x26
  5262  00C6                     	ds	1
  5263  00C7                     ___ftmul@sign:	
  5264                           
  5265                           ; 1 bytes @ 0x27
  5266  00C7                     	ds	1
  5267  00C8                     ?___ftadd:	
  5268  00C8                     ___ftadd@f1:	
  5269                           ; 3 bytes @ 0x28
  5270                           
  5271                           
  5272                           ; 3 bytes @ 0x28
  5273  00C8                     	ds	3
  5274  00CB                     ___ftadd@f2:	
  5275                           
  5276                           ; 3 bytes @ 0x2B
  5277  00CB                     	ds	3
  5278  00CE                     ??___ftadd:	
  5279                           
  5280                           ; 1 bytes @ 0x2E
  5281  00CE                     	ds	4
  5282  00D2                     ___ftadd@sign:	
  5283                           
  5284                           ; 1 bytes @ 0x32
  5285  00D2                     	ds	1
  5286  00D3                     ___ftadd@exp2:	
  5287                           
  5288                           ; 1 bytes @ 0x33
  5289  00D3                     	ds	1
  5290  00D4                     ___ftadd@exp1:	
  5291                           
  5292                           ; 1 bytes @ 0x34
  5293  00D4                     	ds	1
  5294  00D5                     ?_map:	
  5295  00D5                     ?_eval_poly:	
  5296                           ; 3 bytes @ 0x35
  5297                           
  5298  00D5                     ?___ftsub:	
  5299                           ; 3 bytes @ 0x35
  5300                           
  5301  00D5                     map@x:	
  5302                           ; 3 bytes @ 0x35
  5303                           
  5304  00D5                     ___ftsub@f2:	
  5305                           ; 3 bytes @ 0x35
  5306                           
  5307  00D5                     eval_poly@x:	
  5308                           ; 3 bytes @ 0x35
  5309                           
  5310                           
  5311                           ; 3 bytes @ 0x35
  5312  00D5                     	ds	3
  5313  00D8                     eval_poly@d:	
  5314  00D8                     map@in_min:	
  5315                           ; 2 bytes @ 0x38
  5316                           
  5317  00D8                     ___ftsub@f1:	
  5318                           ; 3 bytes @ 0x38
  5319                           
  5320                           
  5321                           ; 3 bytes @ 0x38
  5322  00D8                     	ds	2
  5323  00DA                     eval_poly@n:	
  5324                           
  5325                           ; 2 bytes @ 0x3A
  5326  00DA                     	ds	1
  5327  00DB                     ??___ftsub:	
  5328  00DB                     map@in_max:	
  5329                           ; 1 bytes @ 0x3B
  5330                           
  5331                           
  5332                           ; 3 bytes @ 0x3B
  5333  00DB                     	ds	1
  5334  00DC                     ??_eval_poly:	
  5335  00DC                     eval_poly@res:	
  5336                           ; 1 bytes @ 0x3C
  5337                           
  5338                           
  5339                           ; 3 bytes @ 0x3C
  5340  00DC                     	ds	2
  5341  00DE                     map@out_min:	
  5342                           
  5343                           ; 3 bytes @ 0x3E
  5344  00DE                     	ds	1
  5345  00DF                     ?_log:	
  5346  00DF                     ?_ldexp:	
  5347                           ; 3 bytes @ 0x3F
  5348                           
  5349  00DF                     ldexp@value:	
  5350                           ; 3 bytes @ 0x3F
  5351                           
  5352  00DF                     log@x:	
  5353                           ; 3 bytes @ 0x3F
  5354                           
  5355                           
  5356                           ; 3 bytes @ 0x3F
  5357  00DF                     	ds	2
  5358  00E1                     map@out_max:	
  5359                           
  5360                           ; 3 bytes @ 0x41
  5361  00E1                     	ds	1
  5362  00E2                     ??_log:	
  5363  00E2                     ldexp@newexp:	
  5364                           ; 1 bytes @ 0x42
  5365                           
  5366  00E2                     log@exponent:	
  5367                           ; 2 bytes @ 0x42
  5368                           
  5369                           
  5370                           ; 2 bytes @ 0x42
  5371  00E2                     	ds	2
  5372  00E4                     ??_map:	
  5373  00E4                     ??_ldexp:	
  5374                           ; 1 bytes @ 0x44
  5375                           
  5376  00E4                     _map$2637:	
  5377                           ; 1 bytes @ 0x44
  5378                           
  5379                           
  5380                           ; 3 bytes @ 0x44
  5381  00E4                     	ds	2
  5382  00E6                     _ldexp$2441:	
  5383                           
  5384                           ; 3 bytes @ 0x46
  5385  00E6                     	ds	1
  5386  00E7                     ?___fttol:	
  5387  00E7                     ___fttol@f1:	
  5388                           ; 4 bytes @ 0x47
  5389                           
  5390                           
  5391                           ; 3 bytes @ 0x47
  5392  00E7                     	ds	4
  5393  00EB                     ??___fttol:	
  5394                           
  5395                           ; 1 bytes @ 0x4B
  5396  00EB                     	ds	4
  5397  00EF                     ??_trunc:	
  5398  00EF                     ??_exp:	
  5399                           ; 1 bytes @ 0x4F
  5400                           
  5401  00EF                     ??_floor:	
  5402                           ; 1 bytes @ 0x4F
  5403                           
  5404                           
  5405                           ; 1 bytes @ 0x4F
  5406  00EF                     	ds	1
  5407  00F0                     ??_scaleA100kPot:	
  5408                           
  5409                           	psect	cstackCOMMON
  5410  0070                     __pcstackCOMMON:	
  5411                           ; 1 bytes @ 0x50
  5412                           
  5413  0070                     ?_ConfigureOscillator:	
  5414  0070                     ?_InitApp:	
  5415                           ; 1 bytes @ 0x0
  5416                           
  5417  0070                     ?_InitializeTaps:	
  5418                           ; 1 bytes @ 0x0
  5419                           
  5420  0070                     ?_initSwitchBypass:	
  5421                           ; 1 bytes @ 0x0
  5422                           
  5423  0070                     ?_ReadSavedSettings:	
  5424                           ; 1 bytes @ 0x0
  5425                           
  5426  0070                     ?_update_mode:	
  5427                           ; 1 bytes @ 0x0
  5428                           
  5429  0070                     ?_update_selectMode:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0070                     ?_updateSwitchBypass:	
  5433                           ; 1 bytes @ 0x0
  5434                           
  5435  0070                     ?_updateSwitchTap:	
  5436                           ; 1 bytes @ 0x0
  5437                           
  5438  0070                     ?_read_bottom_tactile:	
  5439                           ; 1 bytes @ 0x0
  5440                           
  5441  0070                     ?_read_top_tactile:	
  5442                           ; 1 bytes @ 0x0
  5443                           
  5444  0070                     ?_init_adc:	
  5445                           ; 1 bytes @ 0x0
  5446                           
  5447  0070                     ?_init_pwm:	
  5448                           ; 1 bytes @ 0x0
  5449                           
  5450  0070                     ?_init_timer2:	
  5451                           ; 1 bytes @ 0x0
  5452                           
  5453  0070                     ?_init_timer0:	
  5454                           ; 1 bytes @ 0x0
  5455                           
  5456  0070                     ?_solidring_tactiles:	
  5457                           ; 1 bytes @ 0x0
  5458                           
  5459  0070                     ?_ring_tactiles:	
  5460                           ; 1 bytes @ 0x0
  5461                           
  5462  0070                     ?_resetRingLEDs:	
  5463                           ; 1 bytes @ 0x0
  5464                           
  5465  0070                     ?_setPedalMode:	
  5466                           ; 1 bytes @ 0x0
  5467                           
  5468  0070                     ?_setPresetDisplay:	
  5469                           ; 1 bytes @ 0x0
  5470                           
  5471  0070                     ?_setExpressionDisplay:	
  5472                           ; 1 bytes @ 0x0
  5473                           
  5474  0070                     ?_isr:	
  5475                           ; 1 bytes @ 0x0
  5476                           
  5477  0070                     ?_main:	
  5478                           ; 1 bytes @ 0x0
  5479                           
  5480  0070                     ?_showSave:	
  5481                           ; 1 bytes @ 0x0
  5482                           
  5483  0070                     ?i1_set_leds_top:	
  5484                           ; 1 bytes @ 0x0
  5485                           
  5486  0070                     ?___awdiv:	
  5487                           ; 1 bytes @ 0x0
  5488                           
  5489  0070                     ?i1___lmul:	
  5490                           ; 2 bytes @ 0x0
  5491                           
  5492  0070                     ___awdiv@divisor:	
  5493                           ; 4 bytes @ 0x0
  5494                           
  5495  0070                     i1set_leds_top@x:	
  5496                           ; 2 bytes @ 0x0
  5497                           
  5498  0070                     i1___lmul@multiplier:	
  5499                           ; 2 bytes @ 0x0
  5500                           
  5501                           
  5502                           ; 4 bytes @ 0x0
  5503  0070                     	ds	2
  5504  0072                     ___awdiv@dividend:	
  5505  0072                     i1set_leds_top@ledState:	
  5506                           ; 2 bytes @ 0x2
  5507                           
  5508                           
  5509                           ; 2 bytes @ 0x2
  5510  0072                     	ds	2
  5511  0074                     ??___awdiv:	
  5512  0074                     ??i1_set_leds_top:	
  5513                           ; 1 bytes @ 0x4
  5514                           
  5515  0074                     i1___lmul@multiplicand:	
  5516                           ; 1 bytes @ 0x4
  5517                           
  5518                           
  5519                           ; 4 bytes @ 0x4
  5520  0074                     	ds	1
  5521  0075                     ___awdiv@counter:	
  5522                           
  5523                           ; 1 bytes @ 0x5
  5524  0075                     	ds	1
  5525  0076                     ___awdiv@sign:	
  5526                           
  5527                           ; 1 bytes @ 0x6
  5528  0076                     	ds	1
  5529  0077                     ___awdiv@quotient:	
  5530                           
  5531                           ; 2 bytes @ 0x7
  5532  0077                     	ds	1
  5533  0078                     ??i1___lmul:	
  5534  0078                     i1___lmul@product:	
  5535                           ; 1 bytes @ 0x8
  5536                           
  5537                           
  5538                           ; 4 bytes @ 0x8
  5539  0078                     	ds	4
  5540  007C                     ??i1___aldiv:	
  5541                           
  5542                           ; 1 bytes @ 0xC
  5543  007C                     	ds	1
  5544                           
  5545                           	psect	cstackBANK0
  5546  0020                     __pcstackBANK0:	
  5547  0020                     ?i1___aldiv:	
  5548  0020                     i1___aldiv@divisor:	
  5549                           ; 4 bytes @ 0x0
  5550                           
  5551                           
  5552                           ; 4 bytes @ 0x0
  5553  0020                     	ds	4
  5554  0024                     i1___aldiv@dividend:	
  5555                           
  5556                           ; 4 bytes @ 0x4
  5557  0024                     	ds	4
  5558  0028                     i1___aldiv@counter:	
  5559                           
  5560                           ; 1 bytes @ 0x8
  5561  0028                     	ds	1
  5562  0029                     i1___aldiv@sign:	
  5563                           
  5564                           ; 1 bytes @ 0x9
  5565  0029                     	ds	1
  5566  002A                     i1___aldiv@quotient:	
  5567                           
  5568                           ; 4 bytes @ 0xA
  5569  002A                     	ds	4
  5570  002E                     ?_modulation:	
  5571  002E                     modulation@x:	
  5572                           ; 4 bytes @ 0xE
  5573                           
  5574                           
  5575                           ; 4 bytes @ 0xE
  5576  002E                     	ds	4
  5577  0032                     modulation@y:	
  5578                           
  5579                           ; 4 bytes @ 0x12
  5580  0032                     	ds	4
  5581  0036                     ??_modulation:	
  5582                           
  5583                           ; 1 bytes @ 0x16
  5584  0036                     	ds	4
  5585  003A                     ??_isr:	
  5586                           
  5587                           ; 1 bytes @ 0x1A
  5588  003A                     	ds	9
  5589  0043                     isr@tmpSubDelay:	
  5590                           
  5591                           ; 2 bytes @ 0x23
  5592  0043                     	ds	2
  5593                           
  5594                           	psect	maintext
  5595  03D3                     __pmaintext:	
  5596 ;;
  5597 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5598 ;;
  5599 ;; *************** function _main *****************
  5600 ;; Defined at:
  5601 ;;		line 83 in file "main.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;		None
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;  i               2   73[BANK2 ] int 
  5606 ;;  i               2   71[BANK2 ] int 
  5607 ;;  i               2   69[BANK2 ] int 
  5608 ;;  xxx             2   67[BANK2 ] int 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : B1F/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5619 ;;      Locals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5620 ;;      Temps:          0       0       0       0       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5621 ;;      Totals:         0       0       0       8       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5622 ;;Total ram usage:       23 bytes
  5623 ;; Hardware stack levels required when called:    9
  5624 ;; This function calls:
  5625 ;;		_ConfigureOscillator
  5626 ;;		_InitApp
  5627 ;;		_InitializeTaps
  5628 ;;		_ReadSavedSettings
  5629 ;;		_USARTInit
  5630 ;;		___awtoft
  5631 ;;		___fttol
  5632 ;;		_adc_convert
  5633 ;;		_initSwitchBypass
  5634 ;;		_map
  5635 ;;		_read_bottom_tactile
  5636 ;;		_read_top_tactile
  5637 ;;		_scaleA100kPot
  5638 ;;		_set_subdivision
  5639 ;;		_updateSwitchBypass
  5640 ;;		_updateSwitchTap
  5641 ;;		_update_mode
  5642 ;;		_update_selectMode
  5643 ;; This function is called by:
  5644 ;;		Startup code after reset
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _main
  5650  03D3                     _main:	
  5651                           
  5652                           ;main.c: 86: int xxx = scaleA100kPot(500);
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5656  03D3  3000               	movlw	0
  5657  03D4  0022               	movlb	2	; select bank2
  5658  03D5  00D4               	movwf	scaleA100kPot@input^(0+256)
  5659  03D6  30FA               	movlw	250
  5660  03D7  00D5               	movwf	(scaleA100kPot@input+1)^(0+256)
  5661  03D8  3043               	movlw	67
  5662  03D9  00D6               	movwf	(scaleA100kPot@input+2)^(0+256)
  5663  03DA  3190  2067  3183   	fcall	_scaleA100kPot
  5664  03DD  0022               	movlb	2	; select bank2
  5665  03DE  0855               	movf	(?_scaleA100kPot+1)^(0+256),w
  5666  03DF  00E4               	movwf	(main@xxx+1)^(0+256)
  5667  03E0  0854               	movf	?_scaleA100kPot^(0+256),w
  5668  03E1  00E3               	movwf	main@xxx^(0+256)
  5669                           
  5670                           ;main.c: 89: USARTInit(31250);
  5671  03E2  3012               	movlw	18
  5672  03E3  0021               	movlb	1	; select bank1
  5673  03E4  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5674  03E5  307A               	movlw	122
  5675  03E6  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5676  03E7  319C  2449  3183   	fcall	_USARTInit
  5677                           
  5678                           ;main.c: 90: ConfigureOscillator();
  5679  03EA  31A6  2675  3183   	fcall	_ConfigureOscillator
  5680                           
  5681                           ;main.c: 91: InitApp();
  5682  03ED  3198  209A  3183   	fcall	_InitApp
  5683                           
  5684                           ;main.c: 93: PORTEbits.RE0 = 1;
  5685  03F0  0020               	movlb	0	; select bank0
  5686  03F1  1410               	bsf	16,0	;volatile
  5687                           
  5688                           ;main.c: 94: PORTEbits.RE1 = 1;
  5689  03F2  1490               	bsf	16,1	;volatile
  5690                           
  5691                           ;main.c: 95: PORTDbits.RD6 = 1;
  5692  03F3  170F               	bsf	15,6	;volatile
  5693                           
  5694                           ;main.c: 96: PORTDbits.RD5 = 1;
  5695  03F4  168F               	bsf	15,5	;volatile
  5696                           
  5697                           ;main.c: 97: PORTCbits.RC0 = 1;
  5698  03F5  140E               	bsf	14,0	;volatile
  5699                           
  5700                           ;main.c: 98: PORTDbits.RD7 = 1;
  5701  03F6  178F               	bsf	15,7	;volatile
  5702                           
  5703                           ;main.c: 100: InitializeTaps();
  5704  03F7  3198  201B  3183   	fcall	_InitializeTaps
  5705                           
  5706                           ;main.c: 101: initSwitchBypass();
  5707  03FA  31A6  26B1  3183   	fcall	_initSwitchBypass
  5708                           
  5709                           ;main.c: 104: ReadSavedSettings();
  5710  03FD  3188  2002  3183   	fcall	_ReadSavedSettings
  5711  0400                     l8144:	
  5712                           ;main.c: 106: while (1) {
  5713                           
  5714                           
  5715                           ;main.c: 109: update_mode();
  5716  0400  3199  212C  3183   	fcall	_update_mode
  5717                           
  5718                           ;main.c: 110: update_selectMode();
  5719  0403  319F  2747  3183   	fcall	_update_selectMode
  5720                           
  5721                           ;main.c: 113: updateSwitchBypass();
  5722  0406  3197  2717  3183   	fcall	_updateSwitchBypass
  5723                           
  5724                           ;main.c: 114: if (presetSaveMode != 1) {
  5725  0409  0020               	movlb	0	; select bank0
  5726  040A  0366               	decf	_presetSaveMode,w
  5727  040B  1903               	btfsc	3,2
  5728  040C  2C10               	goto	l8154
  5729                           
  5730                           ;main.c: 115: updateSwitchTap();
  5731  040D  318C  2410  3183   	fcall	_updateSwitchTap
  5732  0410                     l8154:	
  5733                           
  5734                           ;main.c: 116: }
  5735                           ;main.c: 118: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5736  0410  0020               	movlb	0	; select bank0
  5737  0411  0366               	decf	_presetSaveMode,w
  5738  0412  1903               	btfsc	3,2
  5739  0413  2C1F               	goto	l8160
  5740  0414  0865               	movf	_mode2_state,w
  5741  0415  0023               	movlb	3	; select bank3
  5742  0416  0665               	xorwf	_presetModeCnst^(0+384),w
  5743  0417  1903               	skipnz
  5744  0418  2C1F               	goto	l8160
  5745                           
  5746                           ;main.c: 119: read_bottom_tactile();
  5747  0419  319C  248C  3183   	fcall	_read_bottom_tactile
  5748                           
  5749                           ;main.c: 120: read_top_tactile();
  5750  041C  319D  25B0  3183   	fcall	_read_top_tactile
  5751  041F                     l8160:	
  5752                           
  5753                           ;main.c: 121: }
  5754                           ;main.c: 124: knob_1_pos = adc_convert(0);
  5755  041F  3000               	movlw	0
  5756  0420  31A6  26C0  3183   	fcall	_adc_convert
  5757  0423  0021               	movlb	1	; select bank1
  5758  0424  0821               	movf	(?_adc_convert+1)^(0+128),w
  5759  0425  0023               	movlb	3	; select bank3
  5760  0426  00B1               	movwf	(_knob_1_pos+1)^(0+384)
  5761  0427  0021               	movlb	1	; select bank1
  5762  0428  0820               	movf	?_adc_convert^(0+128),w
  5763  0429  0023               	movlb	3	; select bank3
  5764  042A  00B0               	movwf	_knob_1_pos^(0+384)
  5765                           
  5766                           ;main.c: 125: knob_2_pos = adc_convert(1);
  5767  042B  3001               	movlw	1
  5768  042C  31A6  26C0  3183   	fcall	_adc_convert
  5769  042F  0021               	movlb	1	; select bank1
  5770  0430  0821               	movf	(?_adc_convert+1)^(0+128),w
  5771  0431  0023               	movlb	3	; select bank3
  5772  0432  00B3               	movwf	(_knob_2_pos+1)^(0+384)
  5773  0433  0021               	movlb	1	; select bank1
  5774  0434  0820               	movf	?_adc_convert^(0+128),w
  5775  0435  0023               	movlb	3	; select bank3
  5776  0436  00B2               	movwf	_knob_2_pos^(0+384)
  5777                           
  5778                           ;main.c: 126: knob_3_pos = adc_convert(2);
  5779  0437  3002               	movlw	2
  5780  0438  31A6  26C0  3183   	fcall	_adc_convert
  5781  043B  0021               	movlb	1	; select bank1
  5782  043C  0821               	movf	(?_adc_convert+1)^(0+128),w
  5783  043D  0023               	movlb	3	; select bank3
  5784  043E  00B5               	movwf	(_knob_3_pos+1)^(0+384)
  5785  043F  0021               	movlb	1	; select bank1
  5786  0440  0820               	movf	?_adc_convert^(0+128),w
  5787  0441  0023               	movlb	3	; select bank3
  5788  0442  00B4               	movwf	_knob_3_pos^(0+384)
  5789                           
  5790                           ;main.c: 127: knob_4_pos = adc_convert(3);
  5791  0443  3003               	movlw	3
  5792  0444  31A6  26C0  3183   	fcall	_adc_convert
  5793  0447  0021               	movlb	1	; select bank1
  5794  0448  0821               	movf	(?_adc_convert+1)^(0+128),w
  5795  0449  0023               	movlb	3	; select bank3
  5796  044A  00B7               	movwf	(_knob_4_pos+1)^(0+384)
  5797  044B  0021               	movlb	1	; select bank1
  5798  044C  0820               	movf	?_adc_convert^(0+128),w
  5799  044D  0023               	movlb	3	; select bank3
  5800  044E  00B6               	movwf	_knob_4_pos^(0+384)
  5801                           
  5802                           ;main.c: 128: knob_5_pos = adc_convert(4);
  5803  044F  3004               	movlw	4
  5804  0450  31A6  26C0  3183   	fcall	_adc_convert
  5805  0453  0021               	movlb	1	; select bank1
  5806  0454  0821               	movf	(?_adc_convert+1)^(0+128),w
  5807  0455  0023               	movlb	3	; select bank3
  5808  0456  00B9               	movwf	(_knob_5_pos+1)^(0+384)
  5809  0457  0021               	movlb	1	; select bank1
  5810  0458  0820               	movf	?_adc_convert^(0+128),w
  5811  0459  0023               	movlb	3	; select bank3
  5812  045A  00B8               	movwf	_knob_5_pos^(0+384)
  5813                           
  5814                           ;main.c: 144: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5815  045B  0951               	comf	_knob1_prev^(0+384),w	;volatile
  5816  045C  0024               	movlb	4	; select bank4
  5817  045D  00D3               	movwf	??_main^(0+512)
  5818  045E  0023               	movlb	3	; select bank3
  5819  045F  0952               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5820  0460  0024               	movlb	4	; select bank4
  5821  0461  00D4               	movwf	(??_main^(0+512)+1)
  5822  0462  0AD3               	incf	??_main^(0+512),f
  5823  0463  1903               	skipnz
  5824  0464  0AD4               	incf	(??_main^(0+512)+1),f
  5825  0465  0023               	movlb	3	; select bank3
  5826  0466  0830               	movf	_knob_1_pos^(0+384),w
  5827  0467  0024               	movlb	4	; select bank4
  5828  0468  0753               	addwf	??_main^(0+512),w
  5829  0469  00D5               	movwf	(??_main+2)^(0+512)
  5830  046A  0023               	movlb	3	; select bank3
  5831  046B  0831               	movf	(_knob_1_pos+1)^(0+384),w
  5832  046C  0024               	movlb	4	; select bank4
  5833  046D  3D54               	addwfc	(??_main+1)^(0+512),w
  5834  046E  00D6               	movwf	(??_main+3)^(0+512)
  5835  046F  0856               	movf	(??_main+3)^(0+512),w
  5836  0470  3A80               	xorlw	128
  5837  0471  00D7               	movwf	(??_main+4)^(0+512)
  5838  0472  3080               	movlw	128
  5839  0473  0257               	subwf	(??_main+4)^(0+512),w
  5840  0474  1D03               	skipz
  5841  0475  2C78               	goto	u9085
  5842  0476  3004               	movlw	4
  5843  0477  0255               	subwf	(??_main+2)^(0+512),w
  5844  0478                     u9085:	
  5845  0478  1803               	skipnc
  5846  0479  2C9A               	goto	l8174
  5847  047A  0023               	movlb	3	; select bank3
  5848  047B  0951               	comf	_knob1_prev^(0+384),w	;volatile
  5849  047C  0024               	movlb	4	; select bank4
  5850  047D  00D3               	movwf	??_main^(0+512)
  5851  047E  0023               	movlb	3	; select bank3
  5852  047F  0952               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5853  0480  0024               	movlb	4	; select bank4
  5854  0481  00D4               	movwf	(??_main^(0+512)+1)
  5855  0482  0AD3               	incf	??_main^(0+512),f
  5856  0483  1903               	skipnz
  5857  0484  0AD4               	incf	(??_main^(0+512)+1),f
  5858  0485  0023               	movlb	3	; select bank3
  5859  0486  0830               	movf	_knob_1_pos^(0+384),w
  5860  0487  0024               	movlb	4	; select bank4
  5861  0488  0753               	addwf	??_main^(0+512),w
  5862  0489  00D5               	movwf	(??_main+2)^(0+512)
  5863  048A  0023               	movlb	3	; select bank3
  5864  048B  0831               	movf	(_knob_1_pos+1)^(0+384),w
  5865  048C  0024               	movlb	4	; select bank4
  5866  048D  3D54               	addwfc	(??_main+1)^(0+512),w
  5867  048E  00D6               	movwf	(??_main+3)^(0+512)
  5868  048F  0856               	movf	(??_main+3)^(0+512),w
  5869  0490  3A80               	xorlw	128
  5870  0491  00D7               	movwf	(??_main+4)^(0+512)
  5871  0492  307F               	movlw	127
  5872  0493  0257               	subwf	(??_main+4)^(0+512),w
  5873  0494  1D03               	skipz
  5874  0495  2C98               	goto	u9095
  5875  0496  30FD               	movlw	253
  5876  0497  0255               	subwf	(??_main+2)^(0+512),w
  5877  0498                     u9095:	
  5878  0498  1803               	skipnc
  5879  0499  2CE9               	goto	l8180
  5880  049A                     l8174:	
  5881                           
  5882                           ;main.c: 145: knob1_prev = knob_1_pos;
  5883  049A  0023               	movlb	3	; select bank3
  5884  049B  0831               	movf	(_knob_1_pos+1)^(0+384),w
  5885  049C  00D2               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5886  049D  0830               	movf	_knob_1_pos^(0+384),w
  5887  049E  00D1               	movwf	_knob1_prev^(0+384)	;volatile
  5888                           
  5889                           ;main.c: 146: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5890  049F  3000               	movlw	0
  5891  04A0  0021               	movlb	1	; select bank1
  5892  04A1  00E1               	movwf	map@out_max^(0+128)
  5893  04A2  3048               	movlw	72
  5894  04A3  00E2               	movwf	(map@out_max+1)^(0+128)
  5895  04A4  3043               	movlw	67
  5896  04A5  00E3               	movwf	(map@out_max+2)^(0+128)
  5897  04A6  3080               	movlw	128
  5898  04A7  00DE               	movwf	map@out_min^(0+128)
  5899  04A8  3092               	movlw	146
  5900  04A9  00DF               	movwf	(map@out_min+1)^(0+128)
  5901  04AA  3044               	movlw	68
  5902  04AB  00E0               	movwf	(map@out_min+2)^(0+128)
  5903  04AC  30C0               	movlw	192
  5904  04AD  00DB               	movwf	map@in_max^(0+128)
  5905  04AE  307F               	movlw	127
  5906  04AF  00DC               	movwf	(map@in_max+1)^(0+128)
  5907  04B0  3044               	movlw	68
  5908  04B1  00DD               	movwf	(map@in_max+2)^(0+128)
  5909  04B2  3000               	movlw	0
  5910  04B3  00D8               	movwf	map@in_min^(0+128)
  5911  04B4  3000               	movlw	0
  5912  04B5  00D9               	movwf	(map@in_min+1)^(0+128)
  5913  04B6  3000               	movlw	0
  5914  04B7  00DA               	movwf	(map@in_min+2)^(0+128)
  5915  04B8  0023               	movlb	3	; select bank3
  5916  04B9  0852               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5917  04BA  0021               	movlb	1	; select bank1
  5918  04BB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5919  04BC  0023               	movlb	3	; select bank3
  5920  04BD  0851               	movf	_knob1_prev^(0+384),w	;volatile
  5921  04BE  0021               	movlb	1	; select bank1
  5922  04BF  00A8               	movwf	___awtoft@c^(0+128)
  5923  04C0  31A7  27BA  3183   	fcall	___awtoft
  5924  04C3  0021               	movlb	1	; select bank1
  5925  04C4  0828               	movf	?___awtoft^(0+128),w
  5926  04C5  00D5               	movwf	map@x^(0+128)
  5927  04C6  0829               	movf	(?___awtoft+1)^(0+128),w
  5928  04C7  00D6               	movwf	(map@x+1)^(0+128)
  5929  04C8  082A               	movf	(?___awtoft+2)^(0+128),w
  5930  04C9  00D7               	movwf	(map@x+2)^(0+128)
  5931  04CA  3192  2273  3183   	fcall	_map
  5932  04CD  0021               	movlb	1	; select bank1
  5933  04CE  0855               	movf	?_map^(0+128),w
  5934  04CF  00E7               	movwf	___fttol@f1^(0+128)
  5935  04D0  0856               	movf	(?_map+1)^(0+128),w
  5936  04D1  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5937  04D2  0857               	movf	(?_map+2)^(0+128),w
  5938  04D3  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5939  04D4  3192  22FE  3183   	fcall	___fttol
  5940  04D7  0021               	movlb	1	; select bank1
  5941  04D8  0867               	movf	?___fttol^(0+128),w
  5942  04D9  0020               	movlb	0	; select bank0
  5943  04DA  00C5               	movwf	_baseline_delay_time	;volatile
  5944  04DB  0021               	movlb	1	; select bank1
  5945  04DC  0868               	movf	(?___fttol^(0+128)+1),w
  5946  04DD  0020               	movlb	0	; select bank0
  5947  04DE  00C6               	movwf	_baseline_delay_time+1	;volatile
  5948  04DF  0D89               	rlf	9,f
  5949  04E0  3B89               	subwfb	9,f
  5950  04E1  0989               	comf	9,f
  5951  04E2  00C7               	movwf	_baseline_delay_time+2	;volatile
  5952  04E3  00C8               	movwf	_baseline_delay_time+3	;volatile
  5953                           
  5954                           ;main.c: 147: delay_time_changed = 1;
  5955  04E4  3001               	movlw	1
  5956  04E5  0023               	movlb	3	; select bank3
  5957  04E6  00CF               	movwf	_delay_time_changed^(0+384)
  5958  04E7  3000               	movlw	0
  5959  04E8  00D0               	movwf	(_delay_time_changed^(0+384)+1)
  5960  04E9                     l8180:	
  5961                           
  5962                           ;main.c: 149: }
  5963                           ;main.c: 159: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5964  04E9  0023               	movlb	3	; select bank3
  5965  04EA  0953               	comf	_knob2_prev^(0+384),w	;volatile
  5966  04EB  0024               	movlb	4	; select bank4
  5967  04EC  00D3               	movwf	??_main^(0+512)
  5968  04ED  0023               	movlb	3	; select bank3
  5969  04EE  0954               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5970  04EF  0024               	movlb	4	; select bank4
  5971  04F0  00D4               	movwf	(??_main^(0+512)+1)
  5972  04F1  0AD3               	incf	??_main^(0+512),f
  5973  04F2  1903               	skipnz
  5974  04F3  0AD4               	incf	(??_main^(0+512)+1),f
  5975  04F4  0023               	movlb	3	; select bank3
  5976  04F5  0832               	movf	_knob_2_pos^(0+384),w
  5977  04F6  0024               	movlb	4	; select bank4
  5978  04F7  0753               	addwf	??_main^(0+512),w
  5979  04F8  00D5               	movwf	(??_main+2)^(0+512)
  5980  04F9  0023               	movlb	3	; select bank3
  5981  04FA  0833               	movf	(_knob_2_pos+1)^(0+384),w
  5982  04FB  0024               	movlb	4	; select bank4
  5983  04FC  3D54               	addwfc	(??_main+1)^(0+512),w
  5984  04FD  00D6               	movwf	(??_main+3)^(0+512)
  5985  04FE  0856               	movf	(??_main+3)^(0+512),w
  5986  04FF  3A80               	xorlw	128
  5987  0500  00D7               	movwf	(??_main+4)^(0+512)
  5988  0501  3080               	movlw	128
  5989  0502  0257               	subwf	(??_main+4)^(0+512),w
  5990  0503  1D03               	skipz
  5991  0504  2D07               	goto	u9105
  5992  0505  3004               	movlw	4
  5993  0506  0255               	subwf	(??_main+2)^(0+512),w
  5994  0507                     u9105:	
  5995  0507  1803               	skipnc
  5996  0508  2D29               	goto	l8184
  5997  0509  0023               	movlb	3	; select bank3
  5998  050A  0953               	comf	_knob2_prev^(0+384),w	;volatile
  5999  050B  0024               	movlb	4	; select bank4
  6000  050C  00D3               	movwf	??_main^(0+512)
  6001  050D  0023               	movlb	3	; select bank3
  6002  050E  0954               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  6003  050F  0024               	movlb	4	; select bank4
  6004  0510  00D4               	movwf	(??_main^(0+512)+1)
  6005  0511  0AD3               	incf	??_main^(0+512),f
  6006  0512  1903               	skipnz
  6007  0513  0AD4               	incf	(??_main^(0+512)+1),f
  6008  0514  0023               	movlb	3	; select bank3
  6009  0515  0832               	movf	_knob_2_pos^(0+384),w
  6010  0516  0024               	movlb	4	; select bank4
  6011  0517  0753               	addwf	??_main^(0+512),w
  6012  0518  00D5               	movwf	(??_main+2)^(0+512)
  6013  0519  0023               	movlb	3	; select bank3
  6014  051A  0833               	movf	(_knob_2_pos+1)^(0+384),w
  6015  051B  0024               	movlb	4	; select bank4
  6016  051C  3D54               	addwfc	(??_main+1)^(0+512),w
  6017  051D  00D6               	movwf	(??_main+3)^(0+512)
  6018  051E  0856               	movf	(??_main+3)^(0+512),w
  6019  051F  3A80               	xorlw	128
  6020  0520  00D7               	movwf	(??_main+4)^(0+512)
  6021  0521  307F               	movlw	127
  6022  0522  0257               	subwf	(??_main+4)^(0+512),w
  6023  0523  1D03               	skipz
  6024  0524  2D27               	goto	u9115
  6025  0525  30FD               	movlw	253
  6026  0526  0255               	subwf	(??_main+2)^(0+512),w
  6027  0527                     u9115:	
  6028  0527  1803               	skipnc
  6029  0528  2D78               	goto	l8192
  6030  0529                     l8184:	
  6031                           
  6032                           ;main.c: 160: knob2_prev = knob_2_pos;
  6033  0529  0023               	movlb	3	; select bank3
  6034  052A  0833               	movf	(_knob_2_pos+1)^(0+384),w
  6035  052B  00D4               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  6036  052C  0832               	movf	_knob_2_pos^(0+384),w
  6037  052D  00D3               	movwf	_knob2_prev^(0+384)	;volatile
  6038                           
  6039                           ;main.c: 161: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  6040  052E  3000               	movlw	0
  6041  052F  0021               	movlb	1	; select bank1
  6042  0530  00E1               	movwf	map@out_max^(0+128)
  6043  0531  301C               	movlw	28
  6044  0532  00E2               	movwf	(map@out_max+1)^(0+128)
  6045  0533  3042               	movlw	66
  6046  0534  00E3               	movwf	(map@out_max+2)^(0+128)
  6047  0535  3000               	movlw	0
  6048  0536  00DE               	movwf	map@out_min^(0+128)
  6049  0537  3000               	movlw	0
  6050  0538  00DF               	movwf	(map@out_min+1)^(0+128)
  6051  0539  3000               	movlw	0
  6052  053A  00E0               	movwf	(map@out_min+2)^(0+128)
  6053  053B  30C0               	movlw	192
  6054  053C  00DB               	movwf	map@in_max^(0+128)
  6055  053D  307F               	movlw	127
  6056  053E  00DC               	movwf	(map@in_max+1)^(0+128)
  6057  053F  3044               	movlw	68
  6058  0540  00DD               	movwf	(map@in_max+2)^(0+128)
  6059  0541  3000               	movlw	0
  6060  0542  00D8               	movwf	map@in_min^(0+128)
  6061  0543  3000               	movlw	0
  6062  0544  00D9               	movwf	(map@in_min+1)^(0+128)
  6063  0545  3000               	movlw	0
  6064  0546  00DA               	movwf	(map@in_min+2)^(0+128)
  6065  0547  0023               	movlb	3	; select bank3
  6066  0548  0854               	movf	(_knob2_prev+1)^(0+384),w	;volatile
  6067  0549  0021               	movlb	1	; select bank1
  6068  054A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6069  054B  0023               	movlb	3	; select bank3
  6070  054C  0853               	movf	_knob2_prev^(0+384),w	;volatile
  6071  054D  0021               	movlb	1	; select bank1
  6072  054E  00A8               	movwf	___awtoft@c^(0+128)
  6073  054F  31A7  27BA  3183   	fcall	___awtoft
  6074  0552  0021               	movlb	1	; select bank1
  6075  0553  0828               	movf	?___awtoft^(0+128),w
  6076  0554  00D5               	movwf	map@x^(0+128)
  6077  0555  0829               	movf	(?___awtoft+1)^(0+128),w
  6078  0556  00D6               	movwf	(map@x+1)^(0+128)
  6079  0557  082A               	movf	(?___awtoft+2)^(0+128),w
  6080  0558  00D7               	movwf	(map@x+2)^(0+128)
  6081  0559  3192  2273  3183   	fcall	_map
  6082  055C  0021               	movlb	1	; select bank1
  6083  055D  0855               	movf	?_map^(0+128),w
  6084  055E  00E7               	movwf	___fttol@f1^(0+128)
  6085  055F  0856               	movf	(?_map+1)^(0+128),w
  6086  0560  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6087  0561  0857               	movf	(?_map+2)^(0+128),w
  6088  0562  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6089  0563  3192  22FE  3183   	fcall	___fttol
  6090  0566  0021               	movlb	1	; select bank1
  6091  0567  0868               	movf	(?___fttol^(0+128)+1),w
  6092  0568  0022               	movlb	2	; select bank2
  6093  0569  00E6               	movwf	(main@i+1)^(0+256)
  6094  056A  0021               	movlb	1	; select bank1
  6095  056B  0867               	movf	?___fttol^(0+128),w
  6096  056C  0022               	movlb	2	; select bank2
  6097  056D  00E5               	movwf	main@i^(0+256)
  6098                           
  6099                           ;main.c: 162: CCPR2 = 10;
  6100  056E  3000               	movlw	0
  6101  056F  0025               	movlb	5	; select bank5
  6102  0570  0099               	movwf	25	;volatile
  6103  0571  300A               	movlw	10
  6104  0572  0098               	movwf	24	;volatile
  6105                           
  6106                           ;main.c: 163: CCPR3 = 10;
  6107  0573  3000               	movlw	0
  6108  0574  0026               	movlb	6	; select bank6
  6109  0575  0092               	movwf	18	;volatile
  6110  0576  300A               	movlw	10
  6111  0577  0091               	movwf	17	;volatile
  6112  0578                     l8192:	
  6113                           
  6114                           ;main.c: 164: }
  6115                           ;main.c: 175: if (feedback_state == 1) {
  6116  0578  0023               	movlb	3	; select bank3
  6117  0579  0364               	decf	_feedback_state^(0+384),w	;volatile
  6118  057A  1D03               	btfss	3,2
  6119  057B  2DC5               	goto	l8206
  6120                           
  6121                           ;main.c: 176: if (knob3_prev != 0) {
  6122  057C  0855               	movf	_knob3_prev^(0+384),w	;volatile
  6123  057D  0456               	iorwf	(_knob3_prev+1)^(0+384),w	;volatile
  6124  057E  1903               	btfsc	3,2
  6125  057F  2E57               	goto	l8220
  6126                           
  6127                           ;main.c: 177: knob3_prev = 0;
  6128  0580  01D5               	clrf	_knob3_prev^(0+384)	;volatile
  6129  0581  01D6               	clrf	(_knob3_prev+1)^(0+384)	;volatile
  6130                           
  6131                           ;main.c: 178: feedbackTriggered = 1;
  6132  0582  01C4               	clrf	_feedbackTriggered^(0+384)
  6133  0583  0AC4               	incf	_feedbackTriggered^(0+384),f
  6134                           
  6135                           ;main.c: 180: int i = (int) map(knob3_prev, 0, 1023, 25, 0);
  6136  0584  3000               	movlw	0
  6137  0585  0021               	movlb	1	; select bank1
  6138  0586  00E1               	movwf	map@out_max^(0+128)
  6139  0587  3000               	movlw	0
  6140  0588  00E2               	movwf	(map@out_max+1)^(0+128)
  6141  0589  3000               	movlw	0
  6142  058A  00E3               	movwf	(map@out_max+2)^(0+128)
  6143  058B  3000               	movlw	0
  6144  058C  00DE               	movwf	map@out_min^(0+128)
  6145  058D  30C8               	movlw	200
  6146  058E  00DF               	movwf	(map@out_min+1)^(0+128)
  6147  058F  3041               	movlw	65
  6148  0590  00E0               	movwf	(map@out_min+2)^(0+128)
  6149  0591  30C0               	movlw	192
  6150  0592  00DB               	movwf	map@in_max^(0+128)
  6151  0593  307F               	movlw	127
  6152  0594  00DC               	movwf	(map@in_max+1)^(0+128)
  6153  0595  3044               	movlw	68
  6154  0596  00DD               	movwf	(map@in_max+2)^(0+128)
  6155  0597  3000               	movlw	0
  6156  0598  00D8               	movwf	map@in_min^(0+128)
  6157  0599  3000               	movlw	0
  6158  059A  00D9               	movwf	(map@in_min+1)^(0+128)
  6159  059B  3000               	movlw	0
  6160  059C  00DA               	movwf	(map@in_min+2)^(0+128)
  6161  059D  0023               	movlb	3	; select bank3
  6162  059E  0856               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  6163  059F  0021               	movlb	1	; select bank1
  6164  05A0  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6165  05A1  0023               	movlb	3	; select bank3
  6166  05A2  0855               	movf	_knob3_prev^(0+384),w	;volatile
  6167  05A3  0021               	movlb	1	; select bank1
  6168  05A4  00A8               	movwf	___awtoft@c^(0+128)
  6169  05A5  31A7  27BA  3183   	fcall	___awtoft
  6170  05A8  0021               	movlb	1	; select bank1
  6171  05A9  0828               	movf	?___awtoft^(0+128),w
  6172  05AA  00D5               	movwf	map@x^(0+128)
  6173  05AB  0829               	movf	(?___awtoft+1)^(0+128),w
  6174  05AC  00D6               	movwf	(map@x+1)^(0+128)
  6175  05AD  082A               	movf	(?___awtoft+2)^(0+128),w
  6176  05AE  00D7               	movwf	(map@x+2)^(0+128)
  6177  05AF  3192  2273  3183   	fcall	_map
  6178  05B2  0021               	movlb	1	; select bank1
  6179  05B3  0855               	movf	?_map^(0+128),w
  6180  05B4  00E7               	movwf	___fttol@f1^(0+128)
  6181  05B5  0856               	movf	(?_map+1)^(0+128),w
  6182  05B6  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6183  05B7  0857               	movf	(?_map+2)^(0+128),w
  6184  05B8  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6185  05B9  3192  22FE  3183   	fcall	___fttol
  6186  05BC  0021               	movlb	1	; select bank1
  6187  05BD  0868               	movf	(?___fttol^(0+128)+1),w
  6188  05BE  0022               	movlb	2	; select bank2
  6189  05BF  00E8               	movwf	(main@i_408+1)^(0+256)
  6190  05C0  0021               	movlb	1	; select bank1
  6191  05C1  0867               	movf	?___fttol^(0+128),w
  6192  05C2  0022               	movlb	2	; select bank2
  6193  05C3  00E7               	movwf	main@i_408^(0+256)
  6194  05C4  2E4E               	goto	L1
  6195  05C5                     l8206:	
  6196                           ;main.c: 183: }
  6197                           ;main.c: 184: } else {
  6198                           
  6199                           ;main.c: 182: CCPR5 = 10;
  6200                           
  6201                           ;main.c: 181: CCPR4 = 10;
  6202                           
  6203                           
  6204                           ;main.c: 185: if ((knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) || fee
      +                          dbackTriggered == 1) {
  6205  05C5  0023               	movlb	3	; select bank3
  6206  05C6  0955               	comf	_knob3_prev^(0+384),w	;volatile
  6207  05C7  0024               	movlb	4	; select bank4
  6208  05C8  00D3               	movwf	??_main^(0+512)
  6209  05C9  0023               	movlb	3	; select bank3
  6210  05CA  0956               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  6211  05CB  0024               	movlb	4	; select bank4
  6212  05CC  00D4               	movwf	(??_main^(0+512)+1)
  6213  05CD  0AD3               	incf	??_main^(0+512),f
  6214  05CE  1903               	skipnz
  6215  05CF  0AD4               	incf	(??_main^(0+512)+1),f
  6216  05D0  0023               	movlb	3	; select bank3
  6217  05D1  0834               	movf	_knob_3_pos^(0+384),w
  6218  05D2  0024               	movlb	4	; select bank4
  6219  05D3  0753               	addwf	??_main^(0+512),w
  6220  05D4  00D5               	movwf	(??_main+2)^(0+512)
  6221  05D5  0023               	movlb	3	; select bank3
  6222  05D6  0835               	movf	(_knob_3_pos+1)^(0+384),w
  6223  05D7  0024               	movlb	4	; select bank4
  6224  05D8  3D54               	addwfc	(??_main+1)^(0+512),w
  6225  05D9  00D6               	movwf	(??_main+3)^(0+512)
  6226  05DA  0856               	movf	(??_main+3)^(0+512),w
  6227  05DB  3A80               	xorlw	128
  6228  05DC  00D7               	movwf	(??_main+4)^(0+512)
  6229  05DD  3080               	movlw	128
  6230  05DE  0257               	subwf	(??_main+4)^(0+512),w
  6231  05DF  1D03               	skipz
  6232  05E0  2DE3               	goto	u9145
  6233  05E1  3004               	movlw	4
  6234  05E2  0255               	subwf	(??_main+2)^(0+512),w
  6235  05E3                     u9145:	
  6236  05E3  1803               	skipnc
  6237  05E4  2E09               	goto	l8212
  6238  05E5  0023               	movlb	3	; select bank3
  6239  05E6  0955               	comf	_knob3_prev^(0+384),w	;volatile
  6240  05E7  0024               	movlb	4	; select bank4
  6241  05E8  00D3               	movwf	??_main^(0+512)
  6242  05E9  0023               	movlb	3	; select bank3
  6243  05EA  0956               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  6244  05EB  0024               	movlb	4	; select bank4
  6245  05EC  00D4               	movwf	(??_main^(0+512)+1)
  6246  05ED  0AD3               	incf	??_main^(0+512),f
  6247  05EE  1903               	skipnz
  6248  05EF  0AD4               	incf	(??_main^(0+512)+1),f
  6249  05F0  0023               	movlb	3	; select bank3
  6250  05F1  0834               	movf	_knob_3_pos^(0+384),w
  6251  05F2  0024               	movlb	4	; select bank4
  6252  05F3  0753               	addwf	??_main^(0+512),w
  6253  05F4  00D5               	movwf	(??_main+2)^(0+512)
  6254  05F5  0023               	movlb	3	; select bank3
  6255  05F6  0835               	movf	(_knob_3_pos+1)^(0+384),w
  6256  05F7  0024               	movlb	4	; select bank4
  6257  05F8  3D54               	addwfc	(??_main+1)^(0+512),w
  6258  05F9  00D6               	movwf	(??_main+3)^(0+512)
  6259  05FA  0856               	movf	(??_main+3)^(0+512),w
  6260  05FB  3A80               	xorlw	128
  6261  05FC  00D7               	movwf	(??_main+4)^(0+512)
  6262  05FD  307F               	movlw	127
  6263  05FE  0257               	subwf	(??_main+4)^(0+512),w
  6264  05FF  1D03               	skipz
  6265  0600  2E03               	goto	u9155
  6266  0601  30FD               	movlw	253
  6267  0602  0255               	subwf	(??_main+2)^(0+512),w
  6268  0603                     u9155:	
  6269  0603  1C03               	skipc
  6270  0604  2E09               	goto	l8212
  6271  0605  0023               	movlb	3	; select bank3
  6272  0606  0344               	decf	_feedbackTriggered^(0+384),w
  6273  0607  1D03               	btfss	3,2
  6274  0608  2E57               	goto	l8220
  6275  0609                     l8212:	
  6276                           
  6277                           ;main.c: 186: knob3_prev = knob_3_pos;
  6278  0609  0023               	movlb	3	; select bank3
  6279  060A  0835               	movf	(_knob_3_pos+1)^(0+384),w
  6280  060B  00D6               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  6281  060C  0834               	movf	_knob_3_pos^(0+384),w
  6282  060D  00D5               	movwf	_knob3_prev^(0+384)	;volatile
  6283                           
  6284                           ;main.c: 187: int i = (int) map(knob3_prev, 0, 1023, 18, 0);
  6285  060E  3000               	movlw	0
  6286  060F  0021               	movlb	1	; select bank1
  6287  0610  00E1               	movwf	map@out_max^(0+128)
  6288  0611  3000               	movlw	0
  6289  0612  00E2               	movwf	(map@out_max+1)^(0+128)
  6290  0613  3000               	movlw	0
  6291  0614  00E3               	movwf	(map@out_max+2)^(0+128)
  6292  0615  3000               	movlw	0
  6293  0616  00DE               	movwf	map@out_min^(0+128)
  6294  0617  3090               	movlw	144
  6295  0618  00DF               	movwf	(map@out_min+1)^(0+128)
  6296  0619  3041               	movlw	65
  6297  061A  00E0               	movwf	(map@out_min+2)^(0+128)
  6298  061B  30C0               	movlw	192
  6299  061C  00DB               	movwf	map@in_max^(0+128)
  6300  061D  307F               	movlw	127
  6301  061E  00DC               	movwf	(map@in_max+1)^(0+128)
  6302  061F  3044               	movlw	68
  6303  0620  00DD               	movwf	(map@in_max+2)^(0+128)
  6304  0621  3000               	movlw	0
  6305  0622  00D8               	movwf	map@in_min^(0+128)
  6306  0623  3000               	movlw	0
  6307  0624  00D9               	movwf	(map@in_min+1)^(0+128)
  6308  0625  3000               	movlw	0
  6309  0626  00DA               	movwf	(map@in_min+2)^(0+128)
  6310  0627  0023               	movlb	3	; select bank3
  6311  0628  0856               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  6312  0629  0021               	movlb	1	; select bank1
  6313  062A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6314  062B  0023               	movlb	3	; select bank3
  6315  062C  0855               	movf	_knob3_prev^(0+384),w	;volatile
  6316  062D  0021               	movlb	1	; select bank1
  6317  062E  00A8               	movwf	___awtoft@c^(0+128)
  6318  062F  31A7  27BA  3183   	fcall	___awtoft
  6319  0632  0021               	movlb	1	; select bank1
  6320  0633  0828               	movf	?___awtoft^(0+128),w
  6321  0634  00D5               	movwf	map@x^(0+128)
  6322  0635  0829               	movf	(?___awtoft+1)^(0+128),w
  6323  0636  00D6               	movwf	(map@x+1)^(0+128)
  6324  0637  082A               	movf	(?___awtoft+2)^(0+128),w
  6325  0638  00D7               	movwf	(map@x+2)^(0+128)
  6326  0639  3192  2273  3183   	fcall	_map
  6327  063C  0021               	movlb	1	; select bank1
  6328  063D  0855               	movf	?_map^(0+128),w
  6329  063E  00E7               	movwf	___fttol@f1^(0+128)
  6330  063F  0856               	movf	(?_map+1)^(0+128),w
  6331  0640  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6332  0641  0857               	movf	(?_map+2)^(0+128),w
  6333  0642  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6334  0643  3192  22FE  3183   	fcall	___fttol
  6335  0646  0021               	movlb	1	; select bank1
  6336  0647  0868               	movf	(?___fttol^(0+128)+1),w
  6337  0648  0022               	movlb	2	; select bank2
  6338  0649  00EA               	movwf	(main@i_409+1)^(0+256)
  6339  064A  0021               	movlb	1	; select bank1
  6340  064B  0867               	movf	?___fttol^(0+128),w
  6341  064C  0022               	movlb	2	; select bank2
  6342  064D  00E9               	movwf	main@i_409^(0+256)
  6343  064E                     L1:	
  6344                           
  6345                           ;main.c: 188: CCPR4 = 10;
  6346  064E  3000               	movlw	0
  6347  064F  0026               	movlb	6	; select bank6
  6348  0650  0099               	movwf	25	;volatile
  6349  0651  300A               	movlw	10
  6350  0652  0098               	movwf	24	;volatile
  6351                           
  6352                           ;main.c: 189: CCPR5 = 10;
  6353  0653  3000               	movlw	0
  6354  0654  009D               	movwf	29	;volatile
  6355  0655  300A               	movlw	10
  6356  0656  009C               	movwf	28	;volatile
  6357  0657                     l8220:	
  6358                           
  6359                           ;main.c: 190: }
  6360                           ;main.c: 191: }
  6361                           ;main.c: 202: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6362  0657  0023               	movlb	3	; select bank3
  6363  0658  0957               	comf	_knob4_prev^(0+384),w	;volatile
  6364  0659  0024               	movlb	4	; select bank4
  6365  065A  00D3               	movwf	??_main^(0+512)
  6366  065B  0023               	movlb	3	; select bank3
  6367  065C  0958               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6368  065D  0024               	movlb	4	; select bank4
  6369  065E  00D4               	movwf	(??_main^(0+512)+1)
  6370  065F  0AD3               	incf	??_main^(0+512),f
  6371  0660  1903               	skipnz
  6372  0661  0AD4               	incf	(??_main^(0+512)+1),f
  6373  0662  0023               	movlb	3	; select bank3
  6374  0663  0836               	movf	_knob_4_pos^(0+384),w
  6375  0664  0024               	movlb	4	; select bank4
  6376  0665  0753               	addwf	??_main^(0+512),w
  6377  0666  00D5               	movwf	(??_main+2)^(0+512)
  6378  0667  0023               	movlb	3	; select bank3
  6379  0668  0837               	movf	(_knob_4_pos+1)^(0+384),w
  6380  0669  0024               	movlb	4	; select bank4
  6381  066A  3D54               	addwfc	(??_main+1)^(0+512),w
  6382  066B  00D6               	movwf	(??_main+3)^(0+512)
  6383  066C  0856               	movf	(??_main+3)^(0+512),w
  6384  066D  3A80               	xorlw	128
  6385  066E  00D7               	movwf	(??_main+4)^(0+512)
  6386  066F  3080               	movlw	128
  6387  0670  0257               	subwf	(??_main+4)^(0+512),w
  6388  0671  1D03               	skipz
  6389  0672  2E75               	goto	u9175
  6390  0673  3004               	movlw	4
  6391  0674  0255               	subwf	(??_main+2)^(0+512),w
  6392  0675                     u9175:	
  6393  0675  1803               	skipnc
  6394  0676  2E97               	goto	l8224
  6395  0677  0023               	movlb	3	; select bank3
  6396  0678  0957               	comf	_knob4_prev^(0+384),w	;volatile
  6397  0679  0024               	movlb	4	; select bank4
  6398  067A  00D3               	movwf	??_main^(0+512)
  6399  067B  0023               	movlb	3	; select bank3
  6400  067C  0958               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6401  067D  0024               	movlb	4	; select bank4
  6402  067E  00D4               	movwf	(??_main^(0+512)+1)
  6403  067F  0AD3               	incf	??_main^(0+512),f
  6404  0680  1903               	skipnz
  6405  0681  0AD4               	incf	(??_main^(0+512)+1),f
  6406  0682  0023               	movlb	3	; select bank3
  6407  0683  0836               	movf	_knob_4_pos^(0+384),w
  6408  0684  0024               	movlb	4	; select bank4
  6409  0685  0753               	addwf	??_main^(0+512),w
  6410  0686  00D5               	movwf	(??_main+2)^(0+512)
  6411  0687  0023               	movlb	3	; select bank3
  6412  0688  0837               	movf	(_knob_4_pos+1)^(0+384),w
  6413  0689  0024               	movlb	4	; select bank4
  6414  068A  3D54               	addwfc	(??_main+1)^(0+512),w
  6415  068B  00D6               	movwf	(??_main+3)^(0+512)
  6416  068C  0856               	movf	(??_main+3)^(0+512),w
  6417  068D  3A80               	xorlw	128
  6418  068E  00D7               	movwf	(??_main+4)^(0+512)
  6419  068F  307F               	movlw	127
  6420  0690  0257               	subwf	(??_main+4)^(0+512),w
  6421  0691  1D03               	skipz
  6422  0692  2E95               	goto	u9185
  6423  0693  30FD               	movlw	253
  6424  0694  0255               	subwf	(??_main+2)^(0+512),w
  6425  0695                     u9185:	
  6426  0695  1803               	skipnc
  6427  0696  2EDC               	goto	l8228
  6428  0697                     l8224:	
  6429                           
  6430                           ;main.c: 203: knob4_prev = knob_4_pos;
  6431  0697  0023               	movlb	3	; select bank3
  6432  0698  0837               	movf	(_knob_4_pos+1)^(0+384),w
  6433  0699  00D8               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6434  069A  0836               	movf	_knob_4_pos^(0+384),w
  6435  069B  00D7               	movwf	_knob4_prev^(0+384)	;volatile
  6436                           
  6437                           ;main.c: 205: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  6438  069C  3000               	movlw	0
  6439  069D  0021               	movlb	1	; select bank1
  6440  069E  00E1               	movwf	map@out_max^(0+128)
  6441  069F  303C               	movlw	60
  6442  06A0  00E2               	movwf	(map@out_max+1)^(0+128)
  6443  06A1  3042               	movlw	66
  6444  06A2  00E3               	movwf	(map@out_max+2)^(0+128)
  6445  06A3  3000               	movlw	0
  6446  06A4  00DE               	movwf	map@out_min^(0+128)
  6447  06A5  3040               	movlw	64
  6448  06A6  00DF               	movwf	(map@out_min+1)^(0+128)
  6449  06A7  3040               	movlw	64
  6450  06A8  00E0               	movwf	(map@out_min+2)^(0+128)
  6451  06A9  30C0               	movlw	192
  6452  06AA  00DB               	movwf	map@in_max^(0+128)
  6453  06AB  307F               	movlw	127
  6454  06AC  00DC               	movwf	(map@in_max+1)^(0+128)
  6455  06AD  3044               	movlw	68
  6456  06AE  00DD               	movwf	(map@in_max+2)^(0+128)
  6457  06AF  3000               	movlw	0
  6458  06B0  00D8               	movwf	map@in_min^(0+128)
  6459  06B1  3000               	movlw	0
  6460  06B2  00D9               	movwf	(map@in_min+1)^(0+128)
  6461  06B3  3000               	movlw	0
  6462  06B4  00DA               	movwf	(map@in_min+2)^(0+128)
  6463  06B5  0023               	movlb	3	; select bank3
  6464  06B6  0858               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6465  06B7  0021               	movlb	1	; select bank1
  6466  06B8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6467  06B9  0023               	movlb	3	; select bank3
  6468  06BA  0857               	movf	_knob4_prev^(0+384),w	;volatile
  6469  06BB  0021               	movlb	1	; select bank1
  6470  06BC  00A8               	movwf	___awtoft@c^(0+128)
  6471  06BD  31A7  27BA  3183   	fcall	___awtoft
  6472  06C0  0021               	movlb	1	; select bank1
  6473  06C1  0828               	movf	?___awtoft^(0+128),w
  6474  06C2  00D5               	movwf	map@x^(0+128)
  6475  06C3  0829               	movf	(?___awtoft+1)^(0+128),w
  6476  06C4  00D6               	movwf	(map@x+1)^(0+128)
  6477  06C5  082A               	movf	(?___awtoft+2)^(0+128),w
  6478  06C6  00D7               	movwf	(map@x+2)^(0+128)
  6479  06C7  3192  2273  3183   	fcall	_map
  6480  06CA  0021               	movlb	1	; select bank1
  6481  06CB  0855               	movf	?_map^(0+128),w
  6482  06CC  00E7               	movwf	___fttol@f1^(0+128)
  6483  06CD  0856               	movf	(?_map+1)^(0+128),w
  6484  06CE  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6485  06CF  0857               	movf	(?_map+2)^(0+128),w
  6486  06D0  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6487  06D1  3192  22FE  3183   	fcall	___fttol
  6488  06D4  0021               	movlb	1	; select bank1
  6489  06D5  0868               	movf	(?___fttol^(0+128)+1),w
  6490  06D6  0023               	movlb	3	; select bank3
  6491  06D7  00DC               	movwf	(_mod_delay_time+1)^(0+384)
  6492  06D8  0021               	movlb	1	; select bank1
  6493  06D9  0867               	movf	?___fttol^(0+128),w
  6494  06DA  0023               	movlb	3	; select bank3
  6495  06DB  00DB               	movwf	_mod_delay_time^(0+384)
  6496  06DC                     l8228:	
  6497                           
  6498                           ;main.c: 206: }
  6499                           ;main.c: 214: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6500  06DC  0023               	movlb	3	; select bank3
  6501  06DD  0959               	comf	_knob5_prev^(0+384),w	;volatile
  6502  06DE  0024               	movlb	4	; select bank4
  6503  06DF  00D3               	movwf	??_main^(0+512)
  6504  06E0  0023               	movlb	3	; select bank3
  6505  06E1  095A               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6506  06E2  0024               	movlb	4	; select bank4
  6507  06E3  00D4               	movwf	(??_main^(0+512)+1)
  6508  06E4  0AD3               	incf	??_main^(0+512),f
  6509  06E5  1903               	skipnz
  6510  06E6  0AD4               	incf	(??_main^(0+512)+1),f
  6511  06E7  0023               	movlb	3	; select bank3
  6512  06E8  0838               	movf	_knob_5_pos^(0+384),w
  6513  06E9  0024               	movlb	4	; select bank4
  6514  06EA  0753               	addwf	??_main^(0+512),w
  6515  06EB  00D5               	movwf	(??_main+2)^(0+512)
  6516  06EC  0023               	movlb	3	; select bank3
  6517  06ED  0839               	movf	(_knob_5_pos+1)^(0+384),w
  6518  06EE  0024               	movlb	4	; select bank4
  6519  06EF  3D54               	addwfc	(??_main+1)^(0+512),w
  6520  06F0  00D6               	movwf	(??_main+3)^(0+512)
  6521  06F1  0856               	movf	(??_main+3)^(0+512),w
  6522  06F2  3A80               	xorlw	128
  6523  06F3  00D7               	movwf	(??_main+4)^(0+512)
  6524  06F4  3080               	movlw	128
  6525  06F5  0257               	subwf	(??_main+4)^(0+512),w
  6526  06F6  1D03               	skipz
  6527  06F7  2EFA               	goto	u9195
  6528  06F8  3004               	movlw	4
  6529  06F9  0255               	subwf	(??_main+2)^(0+512),w
  6530  06FA                     u9195:	
  6531  06FA  1803               	skipnc
  6532  06FB  2F1C               	goto	l8232
  6533  06FC  0023               	movlb	3	; select bank3
  6534  06FD  0959               	comf	_knob5_prev^(0+384),w	;volatile
  6535  06FE  0024               	movlb	4	; select bank4
  6536  06FF  00D3               	movwf	??_main^(0+512)
  6537  0700  0023               	movlb	3	; select bank3
  6538  0701  095A               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6539  0702  0024               	movlb	4	; select bank4
  6540  0703  00D4               	movwf	(??_main^(0+512)+1)
  6541  0704  0AD3               	incf	??_main^(0+512),f
  6542  0705  1903               	skipnz
  6543  0706  0AD4               	incf	(??_main^(0+512)+1),f
  6544  0707  0023               	movlb	3	; select bank3
  6545  0708  0838               	movf	_knob_5_pos^(0+384),w
  6546  0709  0024               	movlb	4	; select bank4
  6547  070A  0753               	addwf	??_main^(0+512),w
  6548  070B  00D5               	movwf	(??_main+2)^(0+512)
  6549  070C  0023               	movlb	3	; select bank3
  6550  070D  0839               	movf	(_knob_5_pos+1)^(0+384),w
  6551  070E  0024               	movlb	4	; select bank4
  6552  070F  3D54               	addwfc	(??_main+1)^(0+512),w
  6553  0710  00D6               	movwf	(??_main+3)^(0+512)
  6554  0711  0856               	movf	(??_main+3)^(0+512),w
  6555  0712  3A80               	xorlw	128
  6556  0713  00D7               	movwf	(??_main+4)^(0+512)
  6557  0714  307F               	movlw	127
  6558  0715  0257               	subwf	(??_main+4)^(0+512),w
  6559  0716  1D03               	skipz
  6560  0717  2F1A               	goto	u9205
  6561  0718  30FD               	movlw	253
  6562  0719  0255               	subwf	(??_main+2)^(0+512),w
  6563  071A                     u9205:	
  6564  071A  1803               	skipnc
  6565  071B  2F61               	goto	l8236
  6566  071C                     l8232:	
  6567                           
  6568                           ;main.c: 215: knob5_prev = knob_5_pos;
  6569  071C  0023               	movlb	3	; select bank3
  6570  071D  0839               	movf	(_knob_5_pos+1)^(0+384),w
  6571  071E  00DA               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6572  071F  0838               	movf	_knob_5_pos^(0+384),w
  6573  0720  00D9               	movwf	_knob5_prev^(0+384)	;volatile
  6574                           
  6575                           ;main.c: 216: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6576  0721  3000               	movlw	0
  6577  0722  0021               	movlb	1	; select bank1
  6578  0723  00E1               	movwf	map@out_max^(0+128)
  6579  0724  3000               	movlw	0
  6580  0725  00E2               	movwf	(map@out_max+1)^(0+128)
  6581  0726  3000               	movlw	0
  6582  0727  00E3               	movwf	(map@out_max+2)^(0+128)
  6583  0728  3060               	movlw	96
  6584  0729  00DE               	movwf	map@out_min^(0+128)
  6585  072A  309F               	movlw	159
  6586  072B  00DF               	movwf	(map@out_min+1)^(0+128)
  6587  072C  3044               	movlw	68
  6588  072D  00E0               	movwf	(map@out_min+2)^(0+128)
  6589  072E  30C0               	movlw	192
  6590  072F  00DB               	movwf	map@in_max^(0+128)
  6591  0730  307F               	movlw	127
  6592  0731  00DC               	movwf	(map@in_max+1)^(0+128)
  6593  0732  3044               	movlw	68
  6594  0733  00DD               	movwf	(map@in_max+2)^(0+128)
  6595  0734  3000               	movlw	0
  6596  0735  00D8               	movwf	map@in_min^(0+128)
  6597  0736  3000               	movlw	0
  6598  0737  00D9               	movwf	(map@in_min+1)^(0+128)
  6599  0738  3000               	movlw	0
  6600  0739  00DA               	movwf	(map@in_min+2)^(0+128)
  6601  073A  0023               	movlb	3	; select bank3
  6602  073B  085A               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6603  073C  0021               	movlb	1	; select bank1
  6604  073D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6605  073E  0023               	movlb	3	; select bank3
  6606  073F  0859               	movf	_knob5_prev^(0+384),w	;volatile
  6607  0740  0021               	movlb	1	; select bank1
  6608  0741  00A8               	movwf	___awtoft@c^(0+128)
  6609  0742  31A7  27BA  3183   	fcall	___awtoft
  6610  0745  0021               	movlb	1	; select bank1
  6611  0746  0828               	movf	?___awtoft^(0+128),w
  6612  0747  00D5               	movwf	map@x^(0+128)
  6613  0748  0829               	movf	(?___awtoft+1)^(0+128),w
  6614  0749  00D6               	movwf	(map@x+1)^(0+128)
  6615  074A  082A               	movf	(?___awtoft+2)^(0+128),w
  6616  074B  00D7               	movwf	(map@x+2)^(0+128)
  6617  074C  3192  2273  3183   	fcall	_map
  6618  074F  0021               	movlb	1	; select bank1
  6619  0750  0855               	movf	?_map^(0+128),w
  6620  0751  00E7               	movwf	___fttol@f1^(0+128)
  6621  0752  0856               	movf	(?_map+1)^(0+128),w
  6622  0753  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6623  0754  0857               	movf	(?_map+2)^(0+128),w
  6624  0755  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6625  0756  3192  22FE  3183   	fcall	___fttol
  6626  0759  0021               	movlb	1	; select bank1
  6627  075A  0868               	movf	(?___fttol^(0+128)+1),w
  6628  075B  0024               	movlb	4	; select bank4
  6629  075C  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6630  075D  0021               	movlb	1	; select bank1
  6631  075E  0867               	movf	?___fttol^(0+128),w
  6632  075F  0024               	movlb	4	; select bank4
  6633  0760  00C5               	movwf	_adjusted_pot_value^(0+512)
  6634  0761                     l8236:	
  6635                           
  6636                           ;main.c: 218: }
  6637                           ;main.c: 221: if (delay_time_changed == 1) {
  6638  0761  0023               	movlb	3	; select bank3
  6639  0762  034F               	decf	_delay_time_changed^(0+384),w
  6640  0763  0450               	iorwf	(_delay_time_changed+1)^(0+384),w
  6641  0764  1D03               	btfss	3,2
  6642  0765  2C00               	goto	l8144
  6643                           
  6644                           ;main.c: 222: delay_time = baseline_delay_time;
  6645  0766  0020               	movlb	0	; select bank0
  6646  0767  0848               	movf	_baseline_delay_time+3,w	;volatile
  6647  0768  00CC               	movwf	_delay_time+3	;volatile
  6648  0769  0847               	movf	_baseline_delay_time+2,w	;volatile
  6649  076A  00CB               	movwf	_delay_time+2	;volatile
  6650  076B  0846               	movf	_baseline_delay_time+1,w	;volatile
  6651  076C  00CA               	movwf	_delay_time+1	;volatile
  6652  076D  0845               	movf	_baseline_delay_time,w	;volatile
  6653  076E  00C9               	movwf	_delay_time	;volatile
  6654                           
  6655                           ;main.c: 223: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6656  076F  0846               	movf	_baseline_delay_time+1,w	;volatile
  6657  0770  0022               	movlb	2	; select bank2
  6658  0771  00B7               	movwf	(set_subdivision@x+1)^(0+256)
  6659  0772  0020               	movlb	0	; select bank0
  6660  0773  0845               	movf	_baseline_delay_time,w	;volatile
  6661  0774  0022               	movlb	2	; select bank2
  6662  0775  00B6               	movwf	set_subdivision@x^(0+256)
  6663  0776  0020               	movlb	0	; select bank0
  6664  0777  0852               	movf	_top_push_state+1,w
  6665  0778  0022               	movlb	2	; select bank2
  6666  0779  00B9               	movwf	(set_subdivision@y+1)^(0+256)
  6667  077A  0020               	movlb	0	; select bank0
  6668  077B  0851               	movf	_top_push_state,w
  6669  077C  0022               	movlb	2	; select bank2
  6670  077D  00B8               	movwf	set_subdivision@y^(0+256)
  6671  077E  3196  265B  3183   	fcall	_set_subdivision
  6672  0781  0022               	movlb	2	; select bank2
  6673  0782  0836               	movf	?_set_subdivision^(0+256),w
  6674  0783  0020               	movlb	0	; select bank0
  6675  0784  00C9               	movwf	_delay_time	;volatile
  6676  0785  0022               	movlb	2	; select bank2
  6677  0786  0837               	movf	(?_set_subdivision+1)^(0+256),w
  6678  0787  0020               	movlb	0	; select bank0
  6679  0788  00CA               	movwf	_delay_time+1	;volatile
  6680  0789  0D89               	rlf	9,f
  6681  078A  3B89               	subwfb	9,f
  6682  078B  0989               	comf	9,f
  6683  078C  00CB               	movwf	_delay_time+2	;volatile
  6684  078D  00CC               	movwf	_delay_time+3	;volatile
  6685                           
  6686                           ;main.c: 224: reset_sub_delay = 1;
  6687  078E  3001               	movlw	1
  6688  078F  0023               	movlb	3	; select bank3
  6689  0790  00BE               	movwf	_reset_sub_delay^(0+384)
  6690  0791  3000               	movlw	0
  6691  0792  00BF               	movwf	(_reset_sub_delay^(0+384)+1)
  6692                           
  6693                           ;main.c: 225: delayfound = 0;
  6694  0793  0024               	movlb	4	; select bank4
  6695  0794  01CD               	clrf	_delayfound^(0+512)
  6696  0795  01CE               	clrf	(_delayfound+1)^(0+512)
  6697                           
  6698                           ;main.c: 226: delay_counter = 0;
  6699  0796  0023               	movlb	3	; select bank3
  6700  0797  01AC               	clrf	_delay_counter^(0+384)	;volatile
  6701  0798  01AD               	clrf	(_delay_counter+1)^(0+384)	;volatile
  6702  0799                     l8254:	
  6703                           ;main.c: 228: while (delayfound == 0) {
  6704                           
  6705  0799  0024               	movlb	4	; select bank4
  6706  079A  084D               	movf	_delayfound^(0+512),w
  6707  079B  044E               	iorwf	(_delayfound+1)^(0+512),w
  6708  079C  1D03               	btfss	3,2
  6709  079D  2FF5               	goto	l8256
  6710                           
  6711                           ;main.c: 229: if (delayArray[delay_counter] <= delay_time * 2) {
  6712  079E  0023               	movlb	3	; select bank3
  6713  079F  082D               	movf	(_delay_counter+1)^(0+384),w	;volatile
  6714  07A0  0024               	movlb	4	; select bank4
  6715  07A1  00D4               	movwf	(??_main^(0+512)+1)
  6716  07A2  0023               	movlb	3	; select bank3
  6717  07A3  082C               	movf	_delay_counter^(0+384),w	;volatile
  6718  07A4  0024               	movlb	4	; select bank4
  6719  07A5  00D3               	movwf	??_main^(0+512)
  6720  07A6  35D3               	lslf	??_main^(0+512),f
  6721  07A7  0DD4               	rlf	(??_main^(0+512)+1),f
  6722  07A8  30E8               	movlw	232
  6723  07A9  00D5               	movwf	(??_main+2)^(0+512)
  6724  07AA  3023               	movlw	35
  6725  07AB  00D6               	movwf	((??_main+2)^(0+512)+1)
  6726  07AC  0853               	movf	??_main^(0+512),w
  6727  07AD  0755               	addwf	(??_main+2)^(0+512),w
  6728  07AE  0086               	movwf	6
  6729  07AF  0854               	movf	(??_main+1)^(0+512),w
  6730  07B0  3D56               	addwfc	(??_main+3)^(0+512),w
  6731  07B1  0087               	movwf	7
  6732  07B2  3F40               	moviw [0]fsr1
  6733  07B3  00D7               	movwf	(??_main+4)^(0+512)
  6734  07B4  3F41               	moviw [1]fsr1
  6735  07B5  00D8               	movwf	((??_main+4)^(0+512)+1)
  6736  07B6  0857               	movf	(??_main+4)^(0+512),w
  6737  07B7  00D9               	movwf	(??_main+6)^(0+512)
  6738  07B8  0858               	movf	(??_main+5)^(0+512),w
  6739  07B9  00DA               	movwf	((??_main+6)^(0+512)+1)
  6740  07BA  3000               	movlw	0
  6741  07BB  1BDA               	btfsc	((??_main+6)^(0+512)+1),7
  6742  07BC  30FF               	movlw	255
  6743  07BD  00DB               	movwf	((??_main+6)^(0+512)+2)
  6744  07BE  00DC               	movwf	((??_main+6)^(0+512)+3)
  6745  07BF  0020               	movlb	0	; select bank0
  6746  07C0  0849               	movf	_delay_time,w	;volatile
  6747  07C1  0024               	movlb	4	; select bank4
  6748  07C2  00DD               	movwf	(??_main+10)^(0+512)
  6749  07C3  0020               	movlb	0	; select bank0
  6750  07C4  084A               	movf	_delay_time+1,w	;volatile
  6751  07C5  0024               	movlb	4	; select bank4
  6752  07C6  00DE               	movwf	((??_main+10)^(0+512)+1)
  6753  07C7  0020               	movlb	0	; select bank0
  6754  07C8  084B               	movf	_delay_time+2,w	;volatile
  6755  07C9  0024               	movlb	4	; select bank4
  6756  07CA  00DF               	movwf	((??_main+10)^(0+512)+2)
  6757  07CB  0020               	movlb	0	; select bank0
  6758  07CC  084C               	movf	_delay_time+3,w	;volatile
  6759  07CD  0024               	movlb	4	; select bank4
  6760  07CE  00E0               	movwf	((??_main+10)^(0+512)+3)
  6761  07CF  3001               	movlw	1
  6762  07D0                     u9225:	
  6763  07D0  35DD               	lslf	(??_main+10)^(0+512),f
  6764  07D1  0DDE               	rlf	((??_main+10)^(0+512)+1),f
  6765  07D2  0DDF               	rlf	((??_main+10)^(0+512)+2),f
  6766  07D3  0DE0               	rlf	((??_main+10)^(0+512)+3),f
  6767  07D4  0B89               	decfsz	9,f
  6768  07D5  2FD0               	goto	u9225
  6769  07D6  0860               	movf	(??_main+13)^(0+512),w
  6770  07D7  3A80               	xorlw	128
  6771  07D8  00E1               	movwf	(??_main+14)^(0+512)
  6772  07D9  085C               	movf	(??_main+9)^(0+512),w
  6773  07DA  3A80               	xorlw	128
  6774  07DB  0261               	subwf	(??_main+14)^(0+512),w
  6775  07DC  1D03               	skipz
  6776  07DD  2FE8               	goto	u9233
  6777  07DE  085B               	movf	(??_main+8)^(0+512),w
  6778  07DF  025F               	subwf	(??_main+12)^(0+512),w
  6779  07E0  1D03               	skipz
  6780  07E1  2FE8               	goto	u9233
  6781  07E2  085A               	movf	(??_main+7)^(0+512),w
  6782  07E3  025E               	subwf	(??_main+11)^(0+512),w
  6783  07E4  1D03               	skipz
  6784  07E5  2FE8               	goto	u9233
  6785  07E6  0859               	movf	(??_main+6)^(0+512),w
  6786  07E7  025D               	subwf	(??_main+10)^(0+512),w
  6787  07E8                     u9233:	
  6788  07E8  1C03               	skipc
  6789  07E9  2FEF               	goto	l8252
  6790                           
  6791                           ;main.c: 230: delayfound = 1;
  6792  07EA  3001               	movlw	1
  6793  07EB  00CD               	movwf	_delayfound^(0+512)
  6794  07EC  3000               	movlw	0
  6795  07ED  00CE               	movwf	(_delayfound^(0+512)+1)
  6796                           
  6797                           ;main.c: 234: } else {
  6798  07EE  2F99               	goto	l8254
  6799  07EF                     l8252:	
  6800                           
  6801                           ;main.c: 235: delay_counter++;
  6802  07EF  3001               	movlw	1
  6803  07F0  0023               	movlb	3	; select bank3
  6804  07F1  07AC               	addwf	_delay_counter^(0+384),f	;volatile
  6805  07F2  3000               	movlw	0
  6806  07F3  3DAD               	addwfc	(_delay_counter+1)^(0+384),f	;volatile
  6807  07F4  2F99               	goto	l8254
  6808  07F5                     l8256:	
  6809                           
  6810                           ;main.c: 237: }
  6811                           ;main.c: 238: }
  6812                           ;main.c: 240: delay_time_changed = 0;
  6813  07F5  0023               	movlb	3	; select bank3
  6814  07F6  01CF               	clrf	_delay_time_changed^(0+384)
  6815  07F7  01D0               	clrf	(_delay_time_changed+1)^(0+384)
  6816  07F8  2C00               	goto	l8144
  6817  07F9                     __end_of_main:	
  6818                           
  6819                           	psect	text1
  6820  1F47                     __ptext1:	
  6821 ;; *************** function _update_selectMode *****************
  6822 ;; Defined at:
  6823 ;;		line 138 in file "tactiles.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6839 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6840 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6841 ;;Total ram usage:        1 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    5
  6844 ;; This function calls:
  6845 ;;		_setExpressionDisplay
  6846 ;;		_setPresetDisplay
  6847 ;; This function is called by:
  6848 ;;		_main
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           
  6853                           ;psect for function _update_selectMode
  6854  1F47                     _update_selectMode:	
  6855                           
  6856                           ;tactiles.c: 139: if (mode2_state == 0 && presetSaveMode != 1) {
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6860  1F47  0020               	movlb	0	; select bank0
  6861  1F48  0865               	movf	_mode2_state,w
  6862  1F49  1D03               	btfss	3,2
  6863  1F4A  2F4E               	goto	l984
  6864  1F4B  0366               	decf	_presetSaveMode,w
  6865  1F4C  1D03               	btfss	3,2
  6866  1F4D  0008               	return
  6867  1F4E                     l984:	
  6868                           ;tactiles.c: 141: return;
  6869                           
  6870                           
  6871                           ;tactiles.c: 142: }
  6872                           ;tactiles.c: 143: if (PORTDbits.RD7 == 0) {
  6873  1F4E  1B8F               	btfsc	15,7	;volatile
  6874  1F4F  2F9C               	goto	l7842
  6875                           
  6876                           ;tactiles.c: 144: debounce_mode1++;
  6877  1F50  3001               	movlw	1
  6878  1F51  0023               	movlb	3	; select bank3
  6879  1F52  07AA               	addwf	_debounce_mode1^(0+384),f
  6880  1F53  3000               	movlw	0
  6881  1F54  3DAB               	addwfc	(_debounce_mode1+1)^(0+384),f
  6882                           
  6883                           ;tactiles.c: 145: if (debounce_mode1 > 25) {
  6884  1F55  082B               	movf	(_debounce_mode1+1)^(0+384),w
  6885  1F56  3A80               	xorlw	128
  6886  1F57  0021               	movlb	1	; select bank1
  6887  1F58  00A7               	movwf	??_update_selectMode^(0+128)
  6888  1F59  3080               	movlw	128
  6889  1F5A  0227               	subwf	??_update_selectMode^(0+128),w
  6890  1F5B  1D03               	skipz
  6891  1F5C  2F60               	goto	u8385
  6892  1F5D  301A               	movlw	26
  6893  1F5E  0023               	movlb	3	; select bank3
  6894  1F5F  022A               	subwf	_debounce_mode1^(0+384),w
  6895  1F60                     u8385:	
  6896  1F60  1C03               	skipc
  6897  1F61  0008               	return
  6898                           
  6899                           ;tactiles.c: 146: debounce_mode1 = 25;
  6900  1F62  3019               	movlw	25
  6901  1F63  0023               	movlb	3	; select bank3
  6902  1F64  00AA               	movwf	_debounce_mode1^(0+384)
  6903  1F65  3000               	movlw	0
  6904  1F66  00AB               	movwf	(_debounce_mode1^(0+384)+1)
  6905                           
  6906                           ;tactiles.c: 147: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6907  1F67  0020               	movlb	0	; select bank0
  6908  1F68  0865               	movf	_mode2_state,w
  6909  1F69  0023               	movlb	3	; select bank3
  6910  1F6A  0665               	xorwf	_presetModeCnst^(0+384),w
  6911  1F6B  1903               	skipnz
  6912  1F6C  2F71               	goto	l7824
  6913  1F6D  0020               	movlb	0	; select bank0
  6914  1F6E  0366               	decf	_presetSaveMode,w
  6915  1F6F  1D03               	btfss	3,2
  6916  1F70  2F82               	goto	l7832
  6917  1F71                     l7824:	
  6918                           
  6919                           ;tactiles.c: 148: presetChannel++;
  6920  1F71  3001               	movlw	1
  6921  1F72  0021               	movlb	1	; select bank1
  6922  1F73  00A7               	movwf	??_update_selectMode^(0+128)
  6923  1F74  0827               	movf	??_update_selectMode^(0+128),w
  6924  1F75  0020               	movlb	0	; select bank0
  6925  1F76  07D6               	addwf	_presetChannel,f
  6926                           
  6927                           ;tactiles.c: 149: if (presetChannel > 10) {
  6928  1F77  300B               	movlw	11
  6929  1F78  0256               	subwf	_presetChannel,w
  6930  1F79  1C03               	skipc
  6931  1F7A  2F7D               	goto	l7830
  6932                           
  6933                           ;tactiles.c: 150: presetChannel = 1;
  6934  1F7B  01D6               	clrf	_presetChannel
  6935  1F7C  0AD6               	incf	_presetChannel,f
  6936  1F7D                     l7830:	
  6937                           
  6938                           ;tactiles.c: 151: }
  6939                           ;tactiles.c: 152: setPresetDisplay(presetChannel);
  6940  1F7D  0856               	movf	_presetChannel,w
  6941  1F7E  3199  2164  319F   	fcall	_setPresetDisplay
  6942                           
  6943                           ;tactiles.c: 153: } else if (mode2_state == expressModeCnst) {
  6944  1F81  2F98               	goto	l995
  6945  1F82                     l7832:	
  6946  1F82  0020               	movlb	0	; select bank0
  6947  1F83  0865               	movf	_mode2_state,w
  6948  1F84  0023               	movlb	3	; select bank3
  6949  1F85  0662               	xorwf	_expressModeCnst^(0+384),w
  6950  1F86  1D03               	skipz
  6951  1F87  2F98               	goto	l995
  6952                           
  6953                           ;tactiles.c: 154: expressionChannel++;
  6954  1F88  3001               	movlw	1
  6955  1F89  0021               	movlb	1	; select bank1
  6956  1F8A  00A7               	movwf	??_update_selectMode^(0+128)
  6957  1F8B  0827               	movf	??_update_selectMode^(0+128),w
  6958  1F8C  0023               	movlb	3	; select bank3
  6959  1F8D  07E3               	addwf	_expressionChannel^(0+384),f
  6960                           
  6961                           ;tactiles.c: 155: if (expressionChannel > 5) {
  6962  1F8E  3006               	movlw	6
  6963  1F8F  0263               	subwf	_expressionChannel^(0+384),w
  6964  1F90  1C03               	skipc
  6965  1F91  2F94               	goto	l7840
  6966                           
  6967                           ;tactiles.c: 156: expressionChannel = 1;
  6968  1F92  01E3               	clrf	_expressionChannel^(0+384)
  6969  1F93  0AE3               	incf	_expressionChannel^(0+384),f
  6970  1F94                     l7840:	
  6971                           
  6972                           ;tactiles.c: 157: }
  6973                           ;tactiles.c: 158: setExpressionDisplay(expressionChannel);
  6974  1F94  0863               	movf	_expressionChannel^(0+384),w
  6975  1F95  31A6  26FA  319F   	fcall	_setExpressionDisplay
  6976  1F98                     l995:	
  6977                           ;tactiles.c: 159: }
  6978                           ;tactiles.c: 166: while (PORTDbits.RD7 == 0) {
  6979                           
  6980  1F98  0020               	movlb	0	; select bank0
  6981  1F99  1B8F               	btfsc	15,7	;volatile
  6982  1F9A  0008               	return
  6983  1F9B  2F98               	goto	l995
  6984  1F9C                     l7842:	
  6985                           ;tactiles.c: 167: }
  6986                           ;tactiles.c: 168: }
  6987                           ;tactiles.c: 169: } else {
  6988                           
  6989                           
  6990                           ;tactiles.c: 170: debounce_mode1 = 0;
  6991  1F9C  0023               	movlb	3	; select bank3
  6992  1F9D  01AA               	clrf	_debounce_mode1^(0+384)
  6993  1F9E  01AB               	clrf	(_debounce_mode1+1)^(0+384)
  6994  1F9F  0008               	return
  6995  1FA0                     __end_of_update_selectMode:	
  6996                           
  6997                           	psect	text2
  6998  192C                     __ptext2:	
  6999 ;; *************** function _update_mode *****************
  7000 ;; Defined at:
  7001 ;;		line 86 in file "tactiles.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;		None
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  1    wreg      void 
  7008 ;; Registers used:
  7009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7017 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7018 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7019 ;;Total ram usage:        1 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    6
  7022 ;; This function calls:
  7023 ;;		_resetRingLEDs
  7024 ;;		_setPedalMode
  7025 ;; This function is called by:
  7026 ;;		_main
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _update_mode
  7032  192C                     _update_mode:	
  7033                           
  7034                           ;tactiles.c: 91: if (PORTCbits.RC0 == 0) {
  7035                           
  7036                           ;incstack = 0
  7037                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7038  192C  0020               	movlb	0	; select bank0
  7039  192D  180E               	btfsc	14,0	;volatile
  7040  192E  2960               	goto	l7810
  7041                           
  7042                           ;tactiles.c: 94: debounce_mode2++;
  7043  192F  3001               	movlw	1
  7044  1930  0024               	movlb	4	; select bank4
  7045  1931  07CB               	addwf	_debounce_mode2^(0+512),f
  7046  1932  3000               	movlw	0
  7047  1933  3DCC               	addwfc	(_debounce_mode2+1)^(0+512),f
  7048                           
  7049                           ;tactiles.c: 95: if (debounce_mode2 > 25) {
  7050  1934  084C               	movf	(_debounce_mode2+1)^(0+512),w
  7051  1935  3A80               	xorlw	128
  7052  1936  0021               	movlb	1	; select bank1
  7053  1937  00A7               	movwf	??_update_mode^(0+128)
  7054  1938  3080               	movlw	128
  7055  1939  0227               	subwf	??_update_mode^(0+128),w
  7056  193A  1D03               	skipz
  7057  193B  293F               	goto	u8315
  7058  193C  301A               	movlw	26
  7059  193D  0024               	movlb	4	; select bank4
  7060  193E  024B               	subwf	_debounce_mode2^(0+512),w
  7061  193F                     u8315:	
  7062  193F  1C03               	skipc
  7063  1940  0008               	return
  7064                           
  7065                           ;tactiles.c: 96: debounce_mode2 = 25;
  7066  1941  3019               	movlw	25
  7067  1942  0024               	movlb	4	; select bank4
  7068  1943  00CB               	movwf	_debounce_mode2^(0+512)
  7069  1944  3000               	movlw	0
  7070  1945  00CC               	movwf	(_debounce_mode2^(0+512)+1)
  7071                           
  7072                           ;tactiles.c: 98: if (presetSaveMode == 1) {
  7073  1946  0020               	movlb	0	; select bank0
  7074  1947  0366               	decf	_presetSaveMode,w
  7075  1948  1D03               	btfss	3,2
  7076  1949  294F               	goto	l7802
  7077                           
  7078                           ;tactiles.c: 99: presetSaveMode = 0;
  7079  194A  01E6               	clrf	_presetSaveMode
  7080                           
  7081                           ;tactiles.c: 100: resetRingLEDs();
  7082  194B  31A7  2712  3199   	fcall	_resetRingLEDs
  7083                           
  7084                           ;tactiles.c: 101: } else {
  7085  194E  2959               	goto	l7808
  7086  194F                     l7802:	
  7087                           
  7088                           ;tactiles.c: 102: mode2_state++;
  7089  194F  3001               	movlw	1
  7090  1950  0021               	movlb	1	; select bank1
  7091  1951  00A7               	movwf	??_update_mode^(0+128)
  7092  1952  0827               	movf	??_update_mode^(0+128),w
  7093  1953  0020               	movlb	0	; select bank0
  7094  1954  07E5               	addwf	_mode2_state,f
  7095                           
  7096                           ;tactiles.c: 103: if (mode2_state > 2) {
  7097  1955  3003               	movlw	3
  7098  1956  0265               	subwf	_mode2_state,w
  7099  1957  1803               	btfsc	3,0
  7100                           
  7101                           ;tactiles.c: 104: mode2_state = 0;
  7102  1958  01E5               	clrf	_mode2_state
  7103  1959                     l7808:	
  7104                           
  7105                           ;tactiles.c: 105: }
  7106                           ;tactiles.c: 106: }
  7107                           ;tactiles.c: 108: setPedalMode();
  7108  1959  31A7  27DC  3199   	fcall	_setPedalMode
  7109  195C                     l969:	
  7110                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  7111                           
  7112  195C  0020               	movlb	0	; select bank0
  7113  195D  180E               	btfsc	14,0	;volatile
  7114  195E  0008               	return
  7115  195F  295C               	goto	l969
  7116  1960                     l7810:	
  7117                           ;tactiles.c: 110: }
  7118                           ;tactiles.c: 111: }
  7119                           ;tactiles.c: 112: } else {
  7120                           
  7121                           
  7122                           ;tactiles.c: 113: debounce_mode2 = 0;
  7123  1960  0024               	movlb	4	; select bank4
  7124  1961  01CB               	clrf	_debounce_mode2^(0+512)
  7125  1962  01CC               	clrf	(_debounce_mode2+1)^(0+512)
  7126  1963  0008               	return
  7127  1964                     __end_of_update_mode:	
  7128                           
  7129                           	psect	text3
  7130  0C10                     __ptext3:	
  7131 ;; *************** function _updateSwitchTap *****************
  7132 ;; Defined at:
  7133 ;;		line 48 in file "SwitchTap.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;  tapCntDiviso    2   34[BANK1 ] int 
  7138 ;;  iCnt            1   36[BANK1 ] unsigned char 
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      void 
  7141 ;; Registers used:
  7142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7149 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7150 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7151 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7152 ;;Total ram usage:        9 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; Hardware stack levels required when called:    8
  7155 ;; This function calls:
  7156 ;;		___aldiv
  7157 ;;		_setDoublePressState
  7158 ;;		_setLongTapState
  7159 ;; This function is called by:
  7160 ;;		_main
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           
  7165                           ;psect for function _updateSwitchTap
  7166  0C10                     _updateSwitchTap:	
  7167                           
  7168                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  7169                           
  7170                           ;incstack = 0
  7171                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7172  0C10  0021               	movlb	1	; select bank1
  7173  0C11  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7174                           
  7175                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  7176  0C12  0020               	movlb	0	; select bank0
  7177  0C13  1810               	btfsc	16,0	;volatile
  7178  0C14  2C1B               	goto	l7938
  7179                           
  7180                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  7181  0C15  0868               	movf	_switchTap_pressed,w
  7182  0C16  1903               	btfsc	3,2
  7183  0C17  2C25               	goto	l1369
  7184                           
  7185                           ;SwitchTap.c: 59: switchTap_pressed--;
  7186  0C18  3001               	movlw	1
  7187  0C19  02E8               	subwf	_switchTap_pressed,f
  7188                           
  7189                           ;SwitchTap.c: 60: }
  7190                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  7191  0C1A  2C25               	goto	l1369
  7192  0C1B                     l7938:	
  7193  0C1B  3019               	movlw	25
  7194  0C1C  0268               	subwf	_switchTap_pressed,w
  7195  0C1D  1803               	skipnc
  7196  0C1E  2C25               	goto	l1369
  7197                           
  7198                           ;SwitchTap.c: 62: switchTap_pressed++;
  7199  0C1F  3001               	movlw	1
  7200  0C20  0021               	movlb	1	; select bank1
  7201  0C21  00BC               	movwf	??_updateSwitchTap^(0+128)
  7202  0C22  083C               	movf	??_updateSwitchTap^(0+128),w
  7203  0C23  0020               	movlb	0	; select bank0
  7204  0C24  07E8               	addwf	_switchTap_pressed,f
  7205  0C25                     l1369:	
  7206                           
  7207                           ;SwitchTap.c: 63: }
  7208                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  7209  0C25  0868               	movf	_switchTap_pressed,w
  7210  0C26  1D03               	btfss	3,2
  7211  0C27  2DDF               	goto	l8022
  7212                           
  7213                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  7214  0C28  1BDF               	btfsc	_tap_timer+3,7	;volatile
  7215  0C29  2CB1               	goto	l7982
  7216  0C2A  085F               	movf	_tap_timer+3,w	;volatile
  7217  0C2B  1D03               	btfss	3,2
  7218  0C2C  2C36               	goto	l7944
  7219  0C2D  085E               	movf	_tap_timer+2,w	;volatile
  7220  0C2E  1D03               	btfss	3,2
  7221  0C2F  2C36               	goto	l7944
  7222  0C30  301B               	movlw	27
  7223  0C31  025C               	subwf	_tap_timer,w	;volatile
  7224  0C32  3006               	movlw	6
  7225  0C33  3B5D               	subwfb	_tap_timer+1,w	;volatile
  7226  0C34  1C03               	btfss	3,0
  7227  0C35  2CB1               	goto	l7982
  7228  0C36                     l7944:	
  7229                           
  7230                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7231  0C36  0023               	movlb	3	; select bank3
  7232  0C37  034B               	decf	_switchTap_down^(0+384),w
  7233  0C38  1903               	btfsc	3,2
  7234  0C39  2C76               	goto	l7960
  7235                           
  7236                           ;SwitchTap.c: 78: switchTap_down = 1;
  7237  0C3A  01CB               	clrf	_switchTap_down^(0+384)
  7238  0C3B  0ACB               	incf	_switchTap_down^(0+384),f
  7239                           
  7240                           ;SwitchTap.c: 79: tap_timer = 0;
  7241  0C3C  3000               	movlw	0
  7242  0C3D  0020               	movlb	0	; select bank0
  7243  0C3E  00DF               	movwf	_tap_timer+3	;volatile
  7244  0C3F  3000               	movlw	0
  7245  0C40  00DE               	movwf	_tap_timer+2	;volatile
  7246  0C41  3000               	movlw	0
  7247  0C42  00DD               	movwf	_tap_timer+1	;volatile
  7248  0C43  3000               	movlw	0
  7249  0C44  00DC               	movwf	_tap_timer	;volatile
  7250                           
  7251                           ;SwitchTap.c: 80: tap_iteration = 1;
  7252  0C45  3001               	movlw	1
  7253  0C46  0023               	movlb	3	; select bank3
  7254  0C47  00DD               	movwf	_tap_iteration^(0+384)
  7255  0C48  3000               	movlw	0
  7256  0C49  00DE               	movwf	(_tap_iteration^(0+384)+1)
  7257                           
  7258                           ;SwitchTap.c: 81: tap_total = 0;
  7259  0C4A  3000               	movlw	0
  7260  0C4B  0024               	movlb	4	; select bank4
  7261  0C4C  00C0               	movwf	(_tap_total+3)^(0+512)
  7262  0C4D  3000               	movlw	0
  7263  0C4E  00BF               	movwf	(_tap_total+2)^(0+512)
  7264  0C4F  3000               	movlw	0
  7265  0C50  00BE               	movwf	(_tap_total+1)^(0+512)
  7266  0C51  3000               	movlw	0
  7267  0C52  00BD               	movwf	_tap_total^(0+512)
  7268                           
  7269                           ;SwitchTap.c: 82: delay_time_changed = 0;
  7270  0C53  0023               	movlb	3	; select bank3
  7271  0C54  01CF               	clrf	_delay_time_changed^(0+384)
  7272  0C55  01D0               	clrf	(_delay_time_changed+1)^(0+384)
  7273                           
  7274                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7275  0C56  0021               	movlb	1	; select bank1
  7276  0C57  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7277  0C58  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7278  0C59                     l7958:	
  7279  0C59  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7280  0C5A  0020               	movlb	0	; select bank0
  7281  0C5B  0255               	subwf	_num_taps,w
  7282  0C5C  1C03               	btfss	3,0
  7283  0C5D  2C76               	goto	l7960
  7284                           
  7285                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7286  0C5E  0021               	movlb	1	; select bank1
  7287  0C5F  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7288  0C60  00BC               	movwf	??_updateSwitchTap^(0+128)
  7289  0C61  3001               	movlw	1
  7290  0C62                     u8725:	
  7291  0C62  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7292  0C63  3EFF               	addlw	-1
  7293  0C64  1D03               	skipz
  7294  0C65  2C62               	goto	u8725
  7295  0C66  353C               	lslf	??_updateSwitchTap^(0+128),w
  7296  0C67  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7297  0C68  0086               	movwf	6
  7298  0C69  3002               	movlw	2	; select bank4/5
  7299  0C6A  0087               	movwf	7
  7300  0C6B  3000               	movlw	0
  7301  0C6C  3FC0               	movwi [0]fsr1
  7302  0C6D  3000               	movlw	0
  7303  0C6E  3FC1               	movwi [1]fsr1
  7304  0C6F  3FC2               	movwi [2]fsr1
  7305  0C70  3FC3               	movwi [3]fsr1
  7306  0C71  3001               	movlw	1
  7307  0C72  00BC               	movwf	??_updateSwitchTap^(0+128)
  7308  0C73  083C               	movf	??_updateSwitchTap^(0+128),w
  7309  0C74  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7310  0C75  2C59               	goto	l7958
  7311  0C76                     l7960:	
  7312                           
  7313                           ;SwitchTap.c: 86: }
  7314                           ;SwitchTap.c: 87: }
  7315                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7316  0C76  0023               	movlb	3	; select bank3
  7317  0C77  0847               	movf	_longTap_start^(0+384),w
  7318  0C78  1D03               	btfss	3,2
  7319  0C79  2C81               	goto	l7966
  7320                           
  7321                           ;SwitchTap.c: 91: longTap_start = 1;
  7322  0C7A  01C7               	clrf	_longTap_start^(0+384)
  7323  0C7B  0AC7               	incf	_longTap_start^(0+384),f
  7324                           
  7325                           ;SwitchTap.c: 92: longTap_state = 0;
  7326  0C7C  0020               	movlb	0	; select bank0
  7327  0C7D  01D4               	clrf	_longTap_state	;volatile
  7328                           
  7329                           ;SwitchTap.c: 93: longTap_timer = 0;
  7330  0C7E  0023               	movlb	3	; select bank3
  7331  0C7F  01BA               	clrf	_longTap_timer^(0+384)	;volatile
  7332  0C80  01BB               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7333  0C81                     l7966:	
  7334                           
  7335                           ;SwitchTap.c: 94: }
  7336                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7337  0C81  0020               	movlb	0	; select bank0
  7338  0C82  0850               	movf	_long_press_limit+1,w
  7339  0C83  0023               	movlb	3	; select bank3
  7340  0C84  023B               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  7341  0C85  1D03               	skipz
  7342  0C86  2C8B               	goto	u8755
  7343  0C87  0020               	movlb	0	; select bank0
  7344  0C88  084F               	movf	_long_press_limit,w
  7345  0C89  0023               	movlb	3	; select bank3
  7346  0C8A  023A               	subwf	_longTap_timer^(0+384),w	;volatile
  7347  0C8B                     u8755:	
  7348  0C8B  1C03               	skipc
  7349  0C8C  0008               	return
  7350  0C8D  0020               	movlb	0	; select bank0
  7351  0C8E  0854               	movf	_longTap_state,w	;volatile
  7352  0C8F  1D03               	btfss	3,2
  7353  0C90  0008               	return
  7354  0C91  0864               	movf	_doubleTap_state,w	;volatile
  7355  0C92  1D03               	btfss	3,2
  7356  0C93  0008               	return
  7357                           
  7358                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7359  0C94  0850               	movf	_long_press_limit+1,w
  7360  0C95  0023               	movlb	3	; select bank3
  7361  0C96  00BB               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  7362  0C97  0020               	movlb	0	; select bank0
  7363  0C98  084F               	movf	_long_press_limit,w
  7364  0C99  0023               	movlb	3	; select bank3
  7365  0C9A  00BA               	movwf	_longTap_timer^(0+384)	;volatile
  7366                           
  7367                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7368  0C9B  0022               	movlb	2	; select bank2
  7369  0C9C  120D               	bcf	13,4	;volatile
  7370                           
  7371                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  7372  0C9D  0023               	movlb	3	; select bank3
  7373  0C9E  0345               	decf	_feedback_start^(0+384),w
  7374  0C9F  1903               	btfsc	3,2
  7375  0CA0  2CA9               	goto	l7980
  7376                           
  7377                           ;SwitchTap.c: 104: setLongTapState(1);
  7378  0CA1  3001               	movlw	1
  7379  0CA2  0021               	movlb	1	; select bank1
  7380  0CA3  00A0               	movwf	setLongTapState@f_state^(0+128)
  7381  0CA4  3000               	movlw	0
  7382  0CA5  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7383  0CA6  31A7  2746         	fcall	_setLongTapState
  7384                           
  7385                           ;SwitchTap.c: 105: } else {
  7386  0CA8  0008               	return
  7387  0CA9                     l7980:	
  7388                           
  7389                           ;SwitchTap.c: 106: setDoublePressState(1);
  7390  0CA9  3001               	movlw	1
  7391  0CAA  0021               	movlb	1	; select bank1
  7392  0CAB  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7393  0CAC  3000               	movlw	0
  7394  0CAD  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7395  0CAE  319B  2309         	fcall	_setDoublePressState
  7396                           
  7397                           ;SwitchTap.c: 107: }
  7398                           ;SwitchTap.c: 108: }
  7399                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7400  0CB0  0008               	return
  7401  0CB1                     l7982:	
  7402  0CB1  0020               	movlb	0	; select bank0
  7403  0CB2  1BDF               	btfsc	_tap_timer+3,7	;volatile
  7404  0CB3  2CC0               	goto	l7984
  7405  0CB4  085F               	movf	_tap_timer+3,w	;volatile
  7406  0CB5  1D03               	btfss	3,2
  7407  0CB6  0008               	return
  7408  0CB7  085E               	movf	_tap_timer+2,w	;volatile
  7409  0CB8  1D03               	btfss	3,2
  7410  0CB9  0008               	return
  7411  0CBA  301B               	movlw	27
  7412  0CBB  025C               	subwf	_tap_timer,w	;volatile
  7413  0CBC  3006               	movlw	6
  7414  0CBD  3B5D               	subwfb	_tap_timer+1,w	;volatile
  7415  0CBE  1803               	btfsc	3,0
  7416  0CBF  0008               	return
  7417  0CC0                     l7984:	
  7418  0CC0  0854               	movf	_longTap_state,w	;volatile
  7419  0CC1  1D03               	btfss	3,2
  7420  0CC2  0008               	return
  7421  0CC3  0023               	movlb	3	; select bank3
  7422  0CC4  034B               	decf	_switchTap_down^(0+384),w
  7423  0CC5  1903               	btfsc	3,2
  7424  0CC6  0008               	return
  7425                           
  7426                           ;SwitchTap.c: 112: switchTap_down = 1;
  7427  0CC7  01CB               	clrf	_switchTap_down^(0+384)
  7428  0CC8  0ACB               	incf	_switchTap_down^(0+384),f
  7429                           
  7430                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7431  0CC9  0020               	movlb	0	; select bank0
  7432  0CCA  1BDF               	btfsc	_tap_timer+3,7	;volatile
  7433  0CCB  2CE0               	goto	l1383
  7434  0CCC  085F               	movf	_tap_timer+3,w	;volatile
  7435  0CCD  1D03               	btfss	3,2
  7436  0CCE  2CD8               	goto	l7992
  7437  0CCF  085E               	movf	_tap_timer+2,w	;volatile
  7438  0CD0  1D03               	btfss	3,2
  7439  0CD1  2CD8               	goto	l7992
  7440  0CD2  3094               	movlw	148
  7441  0CD3  025C               	subwf	_tap_timer,w	;volatile
  7442  0CD4  3004               	movlw	4
  7443  0CD5  3B5D               	subwfb	_tap_timer+1,w	;volatile
  7444  0CD6  1C03               	btfss	3,0
  7445  0CD7  2CE0               	goto	l1383
  7446  0CD8                     l7992:	
  7447                           
  7448                           ;SwitchTap.c: 114: tap_timer = 1172;
  7449  0CD8  3000               	movlw	0
  7450  0CD9  00DF               	movwf	_tap_timer+3	;volatile
  7451  0CDA  3000               	movlw	0
  7452  0CDB  00DE               	movwf	_tap_timer+2	;volatile
  7453  0CDC  3004               	movlw	4
  7454  0CDD  00DD               	movwf	_tap_timer+1	;volatile
  7455  0CDE  3094               	movlw	148
  7456  0CDF  00DC               	movwf	_tap_timer	;volatile
  7457  0CE0                     l1383:	
  7458                           
  7459                           ;SwitchTap.c: 115: }
  7460                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7461  0CE0  0855               	movf	_num_taps,w
  7462  0CE1  0021               	movlb	1	; select bank1
  7463  0CE2  00BC               	movwf	??_updateSwitchTap^(0+128)
  7464  0CE3  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7465  0CE4  083C               	movf	??_updateSwitchTap^(0+128),w
  7466  0CE5  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7467  0CE6  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7468  0CE7  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7469                           
  7470                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7471  0CE8  0023               	movlb	3	; select bank3
  7472  0CE9  085E               	movf	(_tap_iteration+1)^(0+384),w
  7473  0CEA  3A80               	xorlw	128
  7474  0CEB  3C80               	sublw	128
  7475  0CEC  1D03               	skipz
  7476  0CED  2CF1               	goto	u8835
  7477  0CEE  085D               	movf	_tap_iteration^(0+384),w
  7478  0CEF  0020               	movlb	0	; select bank0
  7479  0CF0  0255               	subwf	_num_taps,w
  7480  0CF1                     u8835:	
  7481  0CF1  1C03               	skipc
  7482  0CF2  2D23               	goto	l8000
  7483                           
  7484                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7485  0CF3  0020               	movlb	0	; select bank0
  7486  0CF4  085C               	movf	_tap_timer,w	;volatile
  7487  0CF5  0024               	movlb	4	; select bank4
  7488  0CF6  07BD               	addwf	_tap_total^(0+512),f
  7489  0CF7  0020               	movlb	0	; select bank0
  7490  0CF8  085D               	movf	_tap_timer+1,w	;volatile
  7491  0CF9  0024               	movlb	4	; select bank4
  7492  0CFA  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7493  0CFB  0020               	movlb	0	; select bank0
  7494  0CFC  085E               	movf	_tap_timer+2,w	;volatile
  7495  0CFD  0024               	movlb	4	; select bank4
  7496  0CFE  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7497  0CFF  0020               	movlb	0	; select bank0
  7498  0D00  085F               	movf	_tap_timer+3,w	;volatile
  7499  0D01  0024               	movlb	4	; select bank4
  7500  0D02  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7501                           
  7502                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7503  0D03  0023               	movlb	3	; select bank3
  7504  0D04  085D               	movf	_tap_iteration^(0+384),w
  7505  0D05  0021               	movlb	1	; select bank1
  7506  0D06  00BC               	movwf	??_updateSwitchTap^(0+128)
  7507  0D07  3001               	movlw	1
  7508  0D08                     u8845:	
  7509  0D08  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7510  0D09  3EFF               	addlw	-1
  7511  0D0A  1D03               	skipz
  7512  0D0B  2D08               	goto	u8845
  7513  0D0C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7514  0D0D  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7515  0D0E  0086               	movwf	6
  7516  0D0F  3002               	movlw	2	; select bank4/5
  7517  0D10  0087               	movwf	7
  7518  0D11  0020               	movlb	0	; select bank0
  7519  0D12  085C               	movf	_tap_timer,w	;volatile
  7520  0D13  3FC0               	movwi [0]fsr1
  7521  0D14  085D               	movf	_tap_timer+1,w	;volatile
  7522  0D15  3FC1               	movwi [1]fsr1
  7523  0D16  085E               	movf	_tap_timer+2,w	;volatile
  7524  0D17  3FC2               	movwi [2]fsr1
  7525  0D18  085F               	movf	_tap_timer+3,w	;volatile
  7526  0D19  3FC3               	movwi [3]fsr1
  7527                           
  7528                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7529  0D1A  0023               	movlb	3	; select bank3
  7530  0D1B  085E               	movf	(_tap_iteration+1)^(0+384),w
  7531  0D1C  0021               	movlb	1	; select bank1
  7532  0D1D  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7533  0D1E  0023               	movlb	3	; select bank3
  7534  0D1F  085D               	movf	_tap_iteration^(0+384),w
  7535  0D20  0021               	movlb	1	; select bank1
  7536  0D21  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7537                           
  7538                           ;SwitchTap.c: 122: } else {
  7539  0D22  2D9F               	goto	l8014
  7540  0D23                     l8000:	
  7541                           
  7542                           ;SwitchTap.c: 123: tap_total = 0;
  7543  0D23  3000               	movlw	0
  7544  0D24  0024               	movlb	4	; select bank4
  7545  0D25  00C0               	movwf	(_tap_total+3)^(0+512)
  7546  0D26  3000               	movlw	0
  7547  0D27  00BF               	movwf	(_tap_total+2)^(0+512)
  7548  0D28  3000               	movlw	0
  7549  0D29  00BE               	movwf	(_tap_total+1)^(0+512)
  7550  0D2A  3000               	movlw	0
  7551  0D2B  00BD               	movwf	_tap_total^(0+512)
  7552                           
  7553                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7554  0D2C  0021               	movlb	1	; select bank1
  7555  0D2D  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7556  0D2E  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7557  0D2F                     l8008:	
  7558  0D2F  0020               	movlb	0	; select bank0
  7559  0D30  0855               	movf	_num_taps,w
  7560  0D31  0021               	movlb	1	; select bank1
  7561  0D32  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7562  0D33  1803               	btfsc	3,0
  7563  0D34  2D79               	goto	l8010
  7564                           
  7565                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7566  0D35  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7567  0D36  00BC               	movwf	??_updateSwitchTap^(0+128)
  7568  0D37  3001               	movlw	1
  7569  0D38                     u8855:	
  7570  0D38  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7571  0D39  3EFF               	addlw	-1
  7572  0D3A  1D03               	skipz
  7573  0D3B  2D38               	goto	u8855
  7574  0D3C  353C               	lslf	??_updateSwitchTap^(0+128),w
  7575  0D3D  3E04               	addlw	4
  7576  0D3E  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7577  0D3F  0086               	movwf	6
  7578  0D40  3002               	movlw	2	; select bank4/5
  7579  0D41  0087               	movwf	7
  7580  0D42  3F40               	moviw [0]fsr1
  7581  0D43  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7582  0D44  3F41               	moviw [1]fsr1
  7583  0D45  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7584  0D46  3F42               	moviw [2]fsr1
  7585  0D47  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7586  0D48  3F43               	moviw [3]fsr1
  7587  0D49  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7588  0D4A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7589  0D4B  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7590  0D4C  3001               	movlw	1
  7591  0D4D                     u8865:	
  7592  0D4D  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7593  0D4E  3EFF               	addlw	-1
  7594  0D4F  1D03               	skipz
  7595  0D50  2D4D               	goto	u8865
  7596  0D51  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7597  0D52  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7598  0D53  0086               	movwf	6
  7599  0D54  3002               	movlw	2	; select bank4/5
  7600  0D55  0087               	movwf	7
  7601  0D56  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7602  0D57  3FC0               	movwi [0]fsr1
  7603  0D58  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7604  0D59  3FC1               	movwi [1]fsr1
  7605  0D5A  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7606  0D5B  3FC2               	movwi [2]fsr1
  7607  0D5C  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7608  0D5D  3FC3               	movwi [3]fsr1
  7609                           
  7610                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7611  0D5E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7612  0D5F  00BC               	movwf	??_updateSwitchTap^(0+128)
  7613  0D60  3001               	movlw	1
  7614  0D61                     u8875:	
  7615  0D61  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7616  0D62  3EFF               	addlw	-1
  7617  0D63  1D03               	skipz
  7618  0D64  2D61               	goto	u8875
  7619  0D65  353C               	lslf	??_updateSwitchTap^(0+128),w
  7620  0D66  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7621  0D67  0086               	movwf	6
  7622  0D68  3002               	movlw	2	; select bank4/5
  7623  0D69  0087               	movwf	7
  7624  0D6A  3F40               	moviw [0]fsr1
  7625  0D6B  0024               	movlb	4	; select bank4
  7626  0D6C  07BD               	addwf	_tap_total^(0+512),f
  7627  0D6D  3F41               	moviw [1]fsr1
  7628  0D6E  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7629  0D6F  3F42               	moviw [2]fsr1
  7630  0D70  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7631  0D71  3F43               	moviw [3]fsr1
  7632  0D72  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7633  0D73  3001               	movlw	1
  7634  0D74  0021               	movlb	1	; select bank1
  7635  0D75  00BC               	movwf	??_updateSwitchTap^(0+128)
  7636  0D76  083C               	movf	??_updateSwitchTap^(0+128),w
  7637  0D77  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7638  0D78  2D2F               	goto	l8008
  7639  0D79                     l8010:	
  7640                           
  7641                           ;SwitchTap.c: 127: }
  7642                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7643  0D79  0020               	movlb	0	; select bank0
  7644  0D7A  0855               	movf	_num_taps,w
  7645  0D7B  0021               	movlb	1	; select bank1
  7646  0D7C  00BC               	movwf	??_updateSwitchTap^(0+128)
  7647  0D7D  3001               	movlw	1
  7648  0D7E                     u8895:	
  7649  0D7E  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7650  0D7F  3EFF               	addlw	-1
  7651  0D80  1D03               	skipz
  7652  0D81  2D7E               	goto	u8895
  7653  0D82  353C               	lslf	??_updateSwitchTap^(0+128),w
  7654  0D83  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7655  0D84  0086               	movwf	6
  7656  0D85  3002               	movlw	2	; select bank4/5
  7657  0D86  0087               	movwf	7
  7658  0D87  0020               	movlb	0	; select bank0
  7659  0D88  085C               	movf	_tap_timer,w	;volatile
  7660  0D89  3FC0               	movwi [0]fsr1
  7661  0D8A  085D               	movf	_tap_timer+1,w	;volatile
  7662  0D8B  3FC1               	movwi [1]fsr1
  7663  0D8C  085E               	movf	_tap_timer+2,w	;volatile
  7664  0D8D  3FC2               	movwi [2]fsr1
  7665  0D8E  085F               	movf	_tap_timer+3,w	;volatile
  7666  0D8F  3FC3               	movwi [3]fsr1
  7667                           
  7668                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7669  0D90  085C               	movf	_tap_timer,w	;volatile
  7670  0D91  0024               	movlb	4	; select bank4
  7671  0D92  07BD               	addwf	_tap_total^(0+512),f
  7672  0D93  0020               	movlb	0	; select bank0
  7673  0D94  085D               	movf	_tap_timer+1,w	;volatile
  7674  0D95  0024               	movlb	4	; select bank4
  7675  0D96  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7676  0D97  0020               	movlb	0	; select bank0
  7677  0D98  085E               	movf	_tap_timer+2,w	;volatile
  7678  0D99  0024               	movlb	4	; select bank4
  7679  0D9A  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7680  0D9B  0020               	movlb	0	; select bank0
  7681  0D9C  085F               	movf	_tap_timer+3,w	;volatile
  7682  0D9D  0024               	movlb	4	; select bank4
  7683  0D9E  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7684  0D9F                     l8014:	
  7685                           
  7686                           ;SwitchTap.c: 130: }
  7687                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7688  0D9F  0021               	movlb	1	; select bank1
  7689  0DA0  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7690  0DA1  00A0               	movwf	___aldiv@divisor^(0+128)
  7691  0DA2  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7692  0DA3  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7693  0DA4  0D89               	rlf	9,f
  7694  0DA5  3B89               	subwfb	9,f
  7695  0DA6  0989               	comf	9,f
  7696  0DA7  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7697  0DA8  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7698  0DA9  0024               	movlb	4	; select bank4
  7699  0DAA  0840               	movf	(_tap_total+3)^(0+512),w
  7700  0DAB  0021               	movlb	1	; select bank1
  7701  0DAC  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7702  0DAD  0024               	movlb	4	; select bank4
  7703  0DAE  083F               	movf	(_tap_total+2)^(0+512),w
  7704  0DAF  0021               	movlb	1	; select bank1
  7705  0DB0  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7706  0DB1  0024               	movlb	4	; select bank4
  7707  0DB2  083E               	movf	(_tap_total+1)^(0+512),w
  7708  0DB3  0021               	movlb	1	; select bank1
  7709  0DB4  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7710  0DB5  0024               	movlb	4	; select bank4
  7711  0DB6  083D               	movf	_tap_total^(0+512),w
  7712  0DB7  0021               	movlb	1	; select bank1
  7713  0DB8  00A4               	movwf	___aldiv@dividend^(0+128)
  7714  0DB9  3191  2169         	fcall	___aldiv
  7715  0DBB  0021               	movlb	1	; select bank1
  7716  0DBC  0823               	movf	(?___aldiv+3)^(0+128),w
  7717  0DBD  0020               	movlb	0	; select bank0
  7718  0DBE  00C8               	movwf	_baseline_delay_time+3	;volatile
  7719  0DBF  0021               	movlb	1	; select bank1
  7720  0DC0  0822               	movf	(?___aldiv+2)^(0+128),w
  7721  0DC1  0020               	movlb	0	; select bank0
  7722  0DC2  00C7               	movwf	_baseline_delay_time+2	;volatile
  7723  0DC3  0021               	movlb	1	; select bank1
  7724  0DC4  0821               	movf	(?___aldiv+1)^(0+128),w
  7725  0DC5  0020               	movlb	0	; select bank0
  7726  0DC6  00C6               	movwf	_baseline_delay_time+1	;volatile
  7727  0DC7  0021               	movlb	1	; select bank1
  7728  0DC8  0820               	movf	?___aldiv^(0+128),w
  7729  0DC9  0020               	movlb	0	; select bank0
  7730  0DCA  00C5               	movwf	_baseline_delay_time	;volatile
  7731                           
  7732                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7733  0DCB  3001               	movlw	1
  7734  0DCC  0023               	movlb	3	; select bank3
  7735  0DCD  00CF               	movwf	_delay_time_changed^(0+384)
  7736  0DCE  3000               	movlw	0
  7737  0DCF  00D0               	movwf	(_delay_time_changed^(0+384)+1)
  7738                           
  7739                           ;SwitchTap.c: 134: tap_timer = 0;
  7740  0DD0  3000               	movlw	0
  7741  0DD1  0020               	movlb	0	; select bank0
  7742  0DD2  00DF               	movwf	_tap_timer+3	;volatile
  7743  0DD3  3000               	movlw	0
  7744  0DD4  00DE               	movwf	_tap_timer+2	;volatile
  7745  0DD5  3000               	movlw	0
  7746  0DD6  00DD               	movwf	_tap_timer+1	;volatile
  7747  0DD7  3000               	movlw	0
  7748  0DD8  00DC               	movwf	_tap_timer	;volatile
  7749                           
  7750                           ;SwitchTap.c: 136: tap_iteration++;
  7751  0DD9  3001               	movlw	1
  7752  0DDA  0023               	movlb	3	; select bank3
  7753  0DDB  07DD               	addwf	_tap_iteration^(0+384),f
  7754  0DDC  3000               	movlw	0
  7755  0DDD  3DDE               	addwfc	(_tap_iteration+1)^(0+384),f
  7756                           
  7757                           ;SwitchTap.c: 137: }
  7758                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7759  0DDE  0008               	return
  7760  0DDF                     l8022:	
  7761  0DDF  3019               	movlw	25
  7762  0DE0  0020               	movlb	0	; select bank0
  7763  0DE1  0268               	subwf	_switchTap_pressed,w
  7764  0DE2  1C03               	skipc
  7765  0DE3  0008               	return
  7766                           
  7767                           ;SwitchTap.c: 140: switchTap_down = 0;
  7768  0DE4  0023               	movlb	3	; select bank3
  7769  0DE5  01CB               	clrf	_switchTap_down^(0+384)
  7770                           
  7771                           ;SwitchTap.c: 141: switchTap_state = 0;
  7772  0DE6  01E6               	clrf	_switchTap_state^(0+384)
  7773                           
  7774                           ;SwitchTap.c: 147: setLongTapState(0);
  7775  0DE7  3000               	movlw	0
  7776  0DE8  0021               	movlb	1	; select bank1
  7777  0DE9  00A0               	movwf	setLongTapState@f_state^(0+128)
  7778  0DEA  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7779  0DEB  31A7  2746         	fcall	_setLongTapState
  7780                           
  7781                           ;SwitchTap.c: 149: longTap_timer = 0;
  7782  0DED  0023               	movlb	3	; select bank3
  7783  0DEE  01BA               	clrf	_longTap_timer^(0+384)	;volatile
  7784  0DEF  01BB               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7785                           
  7786                           ;SwitchTap.c: 150: longTap_start = 0;
  7787  0DF0  01C7               	clrf	_longTap_start^(0+384)
  7788                           
  7789                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7790  0DF1  3019               	movlw	25
  7791  0DF2  0021               	movlb	1	; select bank1
  7792  0DF3  00BC               	movwf	??_updateSwitchTap^(0+128)
  7793  0DF4  083C               	movf	??_updateSwitchTap^(0+128),w
  7794  0DF5  0020               	movlb	0	; select bank0
  7795  0DF6  00E8               	movwf	_switchTap_pressed
  7796  0DF7  0008               	return
  7797  0DF8                     __end_of_updateSwitchTap:	
  7798                           
  7799                           	psect	text4
  7800  2746                     __ptext4:	
  7801 ;; *************** function _setLongTapState *****************
  7802 ;; Defined at:
  7803 ;;		line 167 in file "SwitchTap.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  f_state         2    0[BANK1 ] int 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;		None
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      void 
  7810 ;; Registers used:
  7811 ;;		wreg, status,0
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7817 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7819 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7820 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7821 ;;Total ram usage:        4 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    3
  7824 ;; This function calls:
  7825 ;;		Nothing
  7826 ;; This function is called by:
  7827 ;;		_updateSwitchTap
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           
  7832                           ;psect for function _setLongTapState
  7833  2746                     _setLongTapState:	
  7834                           
  7835                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7836                           
  7837                           ;incstack = 0
  7838                           ; Regs used in _setLongTapState: [wreg+status,0]
  7839  2746  0020               	movlb	0	; select bank0
  7840  2747  0854               	movf	_longTap_state,w	;volatile
  7841  2748  0021               	movlb	1	; select bank1
  7842  2749  00A2               	movwf	??_setLongTapState^(0+128)
  7843  274A  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7844  274B  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7845  274C  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7846  274D  1D03               	skipz
  7847  274E  2F51               	goto	u8125
  7848  274F  0820               	movf	setLongTapState@f_state^(0+128),w
  7849  2750  0622               	xorwf	??_setLongTapState^(0+128),w
  7850  2751                     u8125:	
  7851  2751  1903               	btfsc	3,2
  7852  2752  0008               	return
  7853                           
  7854                           ;SwitchTap.c: 169: longTap_state = f_state;
  7855  2753  0820               	movf	setLongTapState@f_state^(0+128),w
  7856  2754  00A2               	movwf	??_setLongTapState^(0+128)
  7857  2755  0822               	movf	??_setLongTapState^(0+128),w
  7858  2756  0020               	movlb	0	; select bank0
  7859  2757  00D4               	movwf	_longTap_state	;volatile
  7860                           
  7861                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7862  2758  0021               	movlb	1	; select bank1
  7863  2759  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7864  275A  0022               	movlb	2	; select bank2
  7865  275B  1C03               	skipc
  7866  275C  128D               	bcf	13,5	;volatile
  7867  275D  1803               	skipnc
  7868  275E  168D               	bsf	13,5	;volatile
  7869  275F  0008               	return
  7870  2760                     __end_of_setLongTapState:	
  7871                           
  7872                           	psect	text5
  7873  1169                     __ptext5:	
  7874 ;; *************** function ___aldiv *****************
  7875 ;; Defined at:
  7876 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  divisor         4    0[BANK1 ] long 
  7879 ;;  dividend        4    4[BANK1 ] long 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  quotient        4   11[BANK1 ] long 
  7882 ;;  sign            1   10[BANK1 ] unsigned char 
  7883 ;;  counter         1    9[BANK1 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  4    0[BANK1 ] long 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7893 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7894 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7895 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7896 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7897 ;;Total ram usage:       15 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    3
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		_updateSwitchTap
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           
  7908                           ;psect for function ___aldiv
  7909  1169                     ___aldiv:	
  7910                           
  7911                           ;incstack = 0
  7912                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7913  1169  0021               	movlb	1	; select bank1
  7914  116A  01AA               	clrf	___aldiv@sign^(0+128)
  7915  116B  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7916  116C  297A               	goto	l1795
  7917  116D  09A0               	comf	___aldiv@divisor^(0+128),f
  7918  116E  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7919  116F  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7920  1170  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7921  1171  0AA0               	incf	___aldiv@divisor^(0+128),f
  7922  1172  1903               	skipnz
  7923  1173  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7924  1174  1903               	skipnz
  7925  1175  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7926  1176  1903               	skipnz
  7927  1177  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7928  1178  01AA               	clrf	___aldiv@sign^(0+128)
  7929  1179  0AAA               	incf	___aldiv@sign^(0+128),f
  7930  117A                     l1795:	
  7931  117A  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7932  117B  298B               	goto	l7662
  7933  117C  09A4               	comf	___aldiv@dividend^(0+128),f
  7934  117D  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7935  117E  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7936  117F  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7937  1180  0AA4               	incf	___aldiv@dividend^(0+128),f
  7938  1181  1903               	skipnz
  7939  1182  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7940  1183  1903               	skipnz
  7941  1184  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7942  1185  1903               	skipnz
  7943  1186  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7944  1187  3001               	movlw	1
  7945  1188  00A8               	movwf	??___aldiv^(0+128)
  7946  1189  0828               	movf	??___aldiv^(0+128),w
  7947  118A  06AA               	xorwf	___aldiv@sign^(0+128),f
  7948  118B                     l7662:	
  7949  118B  3000               	movlw	0
  7950  118C  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7951  118D  3000               	movlw	0
  7952  118E  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7953  118F  3000               	movlw	0
  7954  1190  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7955  1191  3000               	movlw	0
  7956  1192  00AB               	movwf	___aldiv@quotient^(0+128)
  7957  1193  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7958  1194  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7959  1195  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7960  1196  0420               	iorwf	___aldiv@divisor^(0+128),w
  7961  1197  1903               	skipnz
  7962  1198  29D4               	goto	l7684
  7963  1199  01A9               	clrf	___aldiv@counter^(0+128)
  7964  119A  0AA9               	incf	___aldiv@counter^(0+128),f
  7965  119B                     l7670:	
  7966  119B  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7967  119C  29A9               	goto	l7672
  7968  119D  3001               	movlw	1
  7969  119E                     u8165:	
  7970  119E  35A0               	lslf	___aldiv@divisor^(0+128),f
  7971  119F  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7972  11A0  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7973  11A1  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7974  11A2  0B89               	decfsz	9,f
  7975  11A3  299E               	goto	u8165
  7976  11A4  3001               	movlw	1
  7977  11A5  00A8               	movwf	??___aldiv^(0+128)
  7978  11A6  0828               	movf	??___aldiv^(0+128),w
  7979  11A7  07A9               	addwf	___aldiv@counter^(0+128),f
  7980  11A8  299B               	goto	l7670
  7981  11A9                     l7672:	
  7982  11A9  3001               	movlw	1
  7983  11AA                     u8185:	
  7984  11AA  35AB               	lslf	___aldiv@quotient^(0+128),f
  7985  11AB  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7986  11AC  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7987  11AD  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7988  11AE  0B89               	decfsz	9,f
  7989  11AF  29AA               	goto	u8185
  7990  11B0  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7991  11B1  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7992  11B2  1D03               	skipz
  7993  11B3  29BE               	goto	u8195
  7994  11B4  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7995  11B5  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7996  11B6  1D03               	skipz
  7997  11B7  29BE               	goto	u8195
  7998  11B8  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7999  11B9  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  8000  11BA  1D03               	skipz
  8001  11BB  29BE               	goto	u8195
  8002  11BC  0820               	movf	___aldiv@divisor^(0+128),w
  8003  11BD  0224               	subwf	___aldiv@dividend^(0+128),w
  8004  11BE                     u8195:	
  8005  11BE  1C03               	skipc
  8006  11BF  29C9               	goto	l7680
  8007  11C0  0820               	movf	___aldiv@divisor^(0+128),w
  8008  11C1  02A4               	subwf	___aldiv@dividend^(0+128),f
  8009  11C2  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  8010  11C3  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  8011  11C4  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  8012  11C5  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  8013  11C6  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  8014  11C7  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  8015  11C8  142B               	bsf	___aldiv@quotient^(0+128),0
  8016  11C9                     l7680:	
  8017  11C9  3001               	movlw	1
  8018  11CA                     u8205:	
  8019  11CA  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  8020  11CB  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  8021  11CC  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  8022  11CD  0CA0               	rrf	___aldiv@divisor^(0+128),f
  8023  11CE  0B89               	decfsz	9,f
  8024  11CF  29CA               	goto	u8205
  8025  11D0  3001               	movlw	1
  8026  11D1  02A9               	subwf	___aldiv@counter^(0+128),f
  8027  11D2  1D03               	btfss	3,2
  8028  11D3  29A9               	goto	l7672
  8029  11D4                     l7684:	
  8030  11D4  082A               	movf	___aldiv@sign^(0+128),w
  8031  11D5  1903               	btfsc	3,2
  8032  11D6  29E2               	goto	l7688
  8033  11D7  09AB               	comf	___aldiv@quotient^(0+128),f
  8034  11D8  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  8035  11D9  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  8036  11DA  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  8037  11DB  0AAB               	incf	___aldiv@quotient^(0+128),f
  8038  11DC  1903               	skipnz
  8039  11DD  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  8040  11DE  1903               	skipnz
  8041  11DF  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  8042  11E0  1903               	skipnz
  8043  11E1  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  8044  11E2                     l7688:	
  8045  11E2  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  8046  11E3  00A3               	movwf	(?___aldiv+3)^(0+128)
  8047  11E4  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  8048  11E5  00A2               	movwf	(?___aldiv+2)^(0+128)
  8049  11E6  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  8050  11E7  00A1               	movwf	(?___aldiv+1)^(0+128)
  8051  11E8  082B               	movf	___aldiv@quotient^(0+128),w
  8052  11E9  00A0               	movwf	?___aldiv^(0+128)
  8053  11EA  0008               	return
  8054  11EB                     __end_of___aldiv:	
  8055                           
  8056                           	psect	text6
  8057  1717                     __ptext6:	
  8058 ;; *************** function _updateSwitchBypass *****************
  8059 ;; Defined at:
  8060 ;;		line 34 in file "SwitchBypass.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8077 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8078 ;;Total ram usage:        2 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    8
  8081 ;; This function calls:
  8082 ;;		_setDoublePressState
  8083 ;;		_setFeedbackState
  8084 ;;		_setSwitchBypassState
  8085 ;; This function is called by:
  8086 ;;		_main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _updateSwitchBypass
  8092  1717                     _updateSwitchBypass:	
  8093                           
  8094                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  8095                           
  8096                           ;incstack = 0
  8097                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8098  1717  0020               	movlb	0	; select bank0
  8099  1718  1890               	btfsc	16,1	;volatile
  8100  1719  2F2D               	goto	l7850
  8101                           
  8102                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  8103  171A  0023               	movlb	3	; select bank3
  8104  171B  0841               	movf	(_switchBypass_pressed+1)^(0+384),w
  8105  171C  3A80               	xorlw	128
  8106  171D  0021               	movlb	1	; select bank1
  8107  171E  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8108  171F  3080               	movlw	128
  8109  1720  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8110  1721  1D03               	skipz
  8111  1722  2F26               	goto	u8465
  8112  1723  3001               	movlw	1
  8113  1724  0023               	movlb	3	; select bank3
  8114  1725  0240               	subwf	_switchBypass_pressed^(0+384),w
  8115  1726                     u8465:	
  8116  1726  1C03               	skipc
  8117  1727  2F40               	goto	l7854
  8118                           
  8119                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  8120  1728  30FF               	movlw	255
  8121  1729  0023               	movlb	3	; select bank3
  8122  172A  07C0               	addwf	_switchBypass_pressed^(0+384),f
  8123  172B  30FF               	movlw	255
  8124  172C  2F3F               	goto	L2
  8125  172D                     l7850:	
  8126                           ;SwitchBypass.c: 44: }
  8127                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  8128                           
  8129  172D  0023               	movlb	3	; select bank3
  8130  172E  0841               	movf	(_switchBypass_pressed+1)^(0+384),w
  8131  172F  3A80               	xorlw	128
  8132  1730  0021               	movlb	1	; select bank1
  8133  1731  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8134  1732  3080               	movlw	128
  8135  1733  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8136  1734  1D03               	skipz
  8137  1735  2F39               	goto	u8475
  8138  1736  3019               	movlw	25
  8139  1737  0023               	movlb	3	; select bank3
  8140  1738  0240               	subwf	_switchBypass_pressed^(0+384),w
  8141  1739                     u8475:	
  8142  1739  1803               	skipnc
  8143  173A  2F40               	goto	l7854
  8144                           
  8145                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  8146  173B  3001               	movlw	1
  8147  173C  0023               	movlb	3	; select bank3
  8148  173D  07C0               	addwf	_switchBypass_pressed^(0+384),f
  8149  173E  3000               	movlw	0
  8150  173F                     L2:	
  8151  173F  3DC1               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  8152  1740                     l7854:	
  8153                           
  8154                           ;SwitchBypass.c: 47: }
  8155                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  8156  1740  0023               	movlb	3	; select bank3
  8157  1741  0840               	movf	_switchBypass_pressed^(0+384),w
  8158  1742  0441               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  8159  1743  1D03               	btfss	3,2
  8160  1744  2FA1               	goto	l7894
  8161                           
  8162                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  8163  1745  0845               	movf	_feedback_start^(0+384),w
  8164  1746  1D03               	btfss	3,2
  8165  1747  2F4C               	goto	l7862
  8166                           
  8167                           ;SwitchBypass.c: 57: feedback_start = 1;
  8168  1748  01C5               	clrf	_feedback_start^(0+384)
  8169  1749  0AC5               	incf	_feedback_start^(0+384),f
  8170                           
  8171                           ;SwitchBypass.c: 58: feedback_timer = 0;
  8172  174A  01AE               	clrf	_feedback_timer^(0+384)	;volatile
  8173  174B  01AF               	clrf	(_feedback_timer+1)^(0+384)	;volatile
  8174  174C                     l7862:	
  8175                           
  8176                           ;SwitchBypass.c: 59: }
  8177                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  8178  174C  0020               	movlb	0	; select bank0
  8179  174D  0850               	movf	_long_press_limit+1,w
  8180  174E  0023               	movlb	3	; select bank3
  8181  174F  022F               	subwf	(_feedback_timer+1)^(0+384),w	;volatile
  8182  1750  1D03               	skipz
  8183  1751  2F56               	goto	u8505
  8184  1752  0020               	movlb	0	; select bank0
  8185  1753  084F               	movf	_long_press_limit,w
  8186  1754  0023               	movlb	3	; select bank3
  8187  1755  022E               	subwf	_feedback_timer^(0+384),w	;volatile
  8188  1756                     u8505:	
  8189  1756  1C03               	skipc
  8190  1757  2F76               	goto	l7876
  8191  1758  0864               	movf	_feedback_state^(0+384),w	;volatile
  8192  1759  1D03               	btfss	3,2
  8193  175A  2F76               	goto	l7876
  8194  175B  0020               	movlb	0	; select bank0
  8195  175C  0864               	movf	_doubleTap_state,w	;volatile
  8196  175D  1D03               	btfss	3,2
  8197  175E  2F76               	goto	l7876
  8198                           
  8199                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  8200  175F  0022               	movlb	2	; select bank2
  8201  1760  110D               	bcf	13,2	;volatile
  8202                           
  8203                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  8204  1761  0023               	movlb	3	; select bank3
  8205  1762  0347               	decf	_longTap_start^(0+384),w
  8206  1763  1903               	btfsc	3,2
  8207  1764  2F6E               	goto	l7874
  8208                           
  8209                           ;SwitchBypass.c: 66: setFeedbackState(1);
  8210  1765  3001               	movlw	1
  8211  1766  0021               	movlb	1	; select bank1
  8212  1767  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8213  1768  3000               	movlw	0
  8214  1769  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  8215  176A  31A7  272C  3197   	fcall	_setFeedbackState
  8216                           
  8217                           ;SwitchBypass.c: 67: } else {
  8218  176D  2F76               	goto	l7876
  8219  176E                     l7874:	
  8220                           
  8221                           ;SwitchBypass.c: 68: setDoublePressState(1);
  8222  176E  3001               	movlw	1
  8223  176F  0021               	movlb	1	; select bank1
  8224  1770  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8225  1771  3000               	movlw	0
  8226  1772  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  8227  1773  319B  2309  3197   	fcall	_setDoublePressState
  8228  1776                     l7876:	
  8229                           
  8230                           ;SwitchBypass.c: 69: }
  8231                           ;SwitchBypass.c: 70: }
  8232                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  8233  1776  0020               	movlb	0	; select bank0
  8234  1777  0864               	movf	_doubleTap_state,w	;volatile
  8235  1778  1D03               	btfss	3,2
  8236  1779  2F9D               	goto	l1231
  8237  177A  0023               	movlb	3	; select bank3
  8238  177B  0864               	movf	_feedback_state^(0+384),w	;volatile
  8239  177C  1D03               	btfss	3,2
  8240  177D  2F9D               	goto	l1231
  8241                           
  8242                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  8243  177E  0020               	movlb	0	; select bank0
  8244  177F  0357               	decf	_switchBypass_state,w
  8245  1780  1D03               	btfss	3,2
  8246  1781  2F90               	goto	l7888
  8247                           
  8248                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  8249  1782  0024               	movlb	4	; select bank4
  8250  1783  0362               	decf	_switchBypass_up^(0+512),w
  8251  1784  0463               	iorwf	(_switchBypass_up+1)^(0+512),w
  8252  1785  1D03               	btfss	3,2
  8253  1786  2F9D               	goto	l1231
  8254                           
  8255                           ;SwitchBypass.c: 76: currentBypassState = 1;
  8256  1787  0023               	movlb	3	; select bank3
  8257  1788  01E0               	clrf	_currentBypassState^(0+384)
  8258  1789  0AE0               	incf	_currentBypassState^(0+384),f
  8259                           
  8260                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  8261  178A  3001               	movlw	1
  8262  178B  0024               	movlb	4	; select bank4
  8263  178C  00D1               	movwf	_switchBypass_toggle^(0+512)
  8264  178D  3000               	movlw	0
  8265  178E  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  8266                           
  8267                           ;SwitchBypass.c: 78: }
  8268                           ;SwitchBypass.c: 93: } else {
  8269  178F  2F9D               	goto	l1231
  8270  1790                     l7888:	
  8271                           
  8272                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  8273  1790  0023               	movlb	3	; select bank3
  8274  1791  0343               	decf	_bypass_turning_on^(0+384),w
  8275  1792  1903               	btfsc	3,2
  8276  1793  2F9D               	goto	l1231
  8277                           
  8278                           ;SwitchBypass.c: 96: currentBypassState = 0;
  8279  1794  01E0               	clrf	_currentBypassState^(0+384)
  8280                           
  8281                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  8282  1795  01C3               	clrf	_bypass_turning_on^(0+384)
  8283  1796  0AC3               	incf	_bypass_turning_on^(0+384),f
  8284                           
  8285                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  8286  1797  0024               	movlb	4	; select bank4
  8287  1798  01D1               	clrf	_switchBypass_toggle^(0+512)
  8288  1799  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8289                           
  8290                           ;SwitchBypass.c: 101: feedback_state = 0;
  8291  179A  0023               	movlb	3	; select bank3
  8292  179B  01E4               	clrf	_feedback_state^(0+384)	;volatile
  8293                           
  8294                           ;SwitchBypass.c: 102: feedback_start = 0;
  8295  179C  01C5               	clrf	_feedback_start^(0+384)
  8296  179D                     l1231:	
  8297                           
  8298                           ;SwitchBypass.c: 103: }
  8299                           ;SwitchBypass.c: 104: }
  8300                           ;SwitchBypass.c: 106: }
  8301                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  8302  179D  0024               	movlb	4	; select bank4
  8303  179E  01E2               	clrf	_switchBypass_up^(0+512)
  8304  179F  01E3               	clrf	(_switchBypass_up+1)^(0+512)
  8305                           
  8306                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  8307  17A0  0008               	return
  8308  17A1                     l7894:	
  8309  17A1  0023               	movlb	3	; select bank3
  8310  17A2  0841               	movf	(_switchBypass_pressed+1)^(0+384),w
  8311  17A3  3A80               	xorlw	128
  8312  17A4  0021               	movlb	1	; select bank1
  8313  17A5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8314  17A6  3080               	movlw	128
  8315  17A7  023C               	subwf	??_updateSwitchBypass^(0+128),w
  8316  17A8  1D03               	skipz
  8317  17A9  2FAD               	goto	u8595
  8318  17AA  3019               	movlw	25
  8319  17AB  0023               	movlb	3	; select bank3
  8320  17AC  0240               	subwf	_switchBypass_pressed^(0+384),w
  8321  17AD                     u8595:	
  8322  17AD  1C03               	skipc
  8323  17AE  0008               	return
  8324                           
  8325                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  8326  17AF  0020               	movlb	0	; select bank0
  8327  17B0  0364               	decf	_doubleTap_state,w	;volatile
  8328  17B1  1D03               	btfss	3,2
  8329  17B2  2FBC               	goto	l7900
  8330                           
  8331                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  8332  17B3  0023               	movlb	3	; select bank3
  8333  17B4  0860               	movf	_currentBypassState^(0+384),w
  8334  17B5  0021               	movlb	1	; select bank1
  8335  17B6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  8336  17B7  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  8337  17B8  083C               	movf	??_updateSwitchBypass^(0+128),w
  8338  17B9  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8339  17BA  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  8340  17BB  2FD8               	goto	L3
  8341  17BC                     l7900:	
  8342                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  8343                           
  8344  17BC  0023               	movlb	3	; select bank3
  8345  17BD  0343               	decf	_bypass_turning_on^(0+384),w
  8346  17BE  1D03               	btfss	3,2
  8347  17BF  0364               	decf	_feedback_state^(0+384),w	;volatile
  8348  17C0  1D03               	btfss	3,2
  8349  17C1  2FC8               	goto	l7906
  8350                           
  8351                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  8352  17C2  3001               	movlw	1
  8353  17C3  0021               	movlb	1	; select bank1
  8354  17C4  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8355  17C5  3000               	movlw	0
  8356  17C6  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8357  17C7  2FD9               	goto	L4
  8358  17C8                     l7906:	
  8359                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  8360                           
  8361  17C8  0024               	movlb	4	; select bank4
  8362  17C9  0351               	decf	_switchBypass_toggle^(0+512),w
  8363  17CA  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8364  17CB  1D03               	btfss	3,2
  8365  17CC  2FDC               	goto	l7914
  8366  17CD  0023               	movlb	3	; select bank3
  8367  17CE  0864               	movf	_feedback_state^(0+384),w	;volatile
  8368  17CF  1D03               	btfss	3,2
  8369  17D0  2FDC               	goto	l7914
  8370  17D1  0020               	movlb	0	; select bank0
  8371  17D2  0864               	movf	_doubleTap_state,w	;volatile
  8372  17D3  1D03               	btfss	3,2
  8373  17D4  2FDC               	goto	l7914
  8374                           
  8375                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8376  17D5  3000               	movlw	0
  8377  17D6  0021               	movlb	1	; select bank1
  8378  17D7  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8379  17D8                     L3:	
  8380  17D8  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8381  17D9                     L4:	
  8382  17D9  319D  251B  3197   	fcall	_setSwitchBypassState
  8383  17DC                     l7914:	
  8384                           
  8385                           ;SwitchBypass.c: 115: }
  8386                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8387  17DC  0020               	movlb	0	; select bank0
  8388  17DD  0C57               	rrf	_switchBypass_state,w
  8389  17DE  0022               	movlb	2	; select bank2
  8390  17DF  1C03               	skipc
  8391  17E0  110D               	bcf	13,2	;volatile
  8392  17E1  1803               	skipnc
  8393  17E2  150D               	bsf	13,2	;volatile
  8394                           
  8395                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8396  17E3  3000               	movlw	0
  8397  17E4  0021               	movlb	1	; select bank1
  8398  17E5  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8399  17E6  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  8400  17E7  31A7  272C  3197   	fcall	_setFeedbackState
  8401                           
  8402                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8403  17EA  3000               	movlw	0
  8404  17EB  0021               	movlb	1	; select bank1
  8405  17EC  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8406  17ED  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8407  17EE  319B  2309         	fcall	_setDoublePressState
  8408                           
  8409                           ;SwitchBypass.c: 122: feedback_start = 0;
  8410  17F0  0023               	movlb	3	; select bank3
  8411  17F1  01C5               	clrf	_feedback_start^(0+384)
  8412                           
  8413                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8414  17F2  01C3               	clrf	_bypass_turning_on^(0+384)
  8415                           
  8416                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8417  17F3  0024               	movlb	4	; select bank4
  8418  17F4  01D1               	clrf	_switchBypass_toggle^(0+512)
  8419  17F5  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8420                           
  8421                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8422  17F6  3001               	movlw	1
  8423  17F7  00E2               	movwf	_switchBypass_up^(0+512)
  8424  17F8  3000               	movlw	0
  8425  17F9  00E3               	movwf	(_switchBypass_up^(0+512)+1)
  8426                           
  8427                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8428  17FA  3019               	movlw	25
  8429  17FB  0023               	movlb	3	; select bank3
  8430  17FC  00C0               	movwf	_switchBypass_pressed^(0+384)
  8431  17FD  3000               	movlw	0
  8432  17FE  00C1               	movwf	(_switchBypass_pressed^(0+384)+1)
  8433  17FF  0008               	return
  8434  1800                     __end_of_updateSwitchBypass:	
  8435                           
  8436                           	psect	text7
  8437  272C                     __ptext7:	
  8438 ;; *************** function _setFeedbackState *****************
  8439 ;; Defined at:
  8440 ;;		line 151 in file "SwitchBypass.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  f_state         2    0[BANK1 ] int 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;		None
  8445 ;; Return value:  Size  Location     Type
  8446 ;;                  1    wreg      void 
  8447 ;; Registers used:
  8448 ;;		wreg, status,0
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8454 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8456 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8457 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8458 ;;Total ram usage:        4 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    3
  8461 ;; This function calls:
  8462 ;;		Nothing
  8463 ;; This function is called by:
  8464 ;;		_updateSwitchBypass
  8465 ;; This function uses a non-reentrant model
  8466 ;;
  8467                           
  8468                           
  8469                           ;psect for function _setFeedbackState
  8470  272C                     _setFeedbackState:	
  8471                           
  8472                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8473                           
  8474                           ;incstack = 0
  8475                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8476  272C  0023               	movlb	3	; select bank3
  8477  272D  0864               	movf	_feedback_state^(0+384),w	;volatile
  8478  272E  0021               	movlb	1	; select bank1
  8479  272F  00A2               	movwf	??_setFeedbackState^(0+128)
  8480  2730  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  8481  2731  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  8482  2732  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  8483  2733  1D03               	skipz
  8484  2734  2F37               	goto	u8075
  8485  2735  0820               	movf	setFeedbackState@f_state^(0+128),w
  8486  2736  0622               	xorwf	??_setFeedbackState^(0+128),w
  8487  2737                     u8075:	
  8488  2737  1903               	btfsc	3,2
  8489  2738  0008               	return
  8490                           
  8491                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8492  2739  0820               	movf	setFeedbackState@f_state^(0+128),w
  8493  273A  00A2               	movwf	??_setFeedbackState^(0+128)
  8494  273B  0822               	movf	??_setFeedbackState^(0+128),w
  8495  273C  0023               	movlb	3	; select bank3
  8496  273D  00E4               	movwf	_feedback_state^(0+384)	;volatile
  8497                           
  8498                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8499  273E  0021               	movlb	1	; select bank1
  8500  273F  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  8501  2740  0022               	movlb	2	; select bank2
  8502  2741  1C03               	skipc
  8503  2742  118D               	bcf	13,3	;volatile
  8504  2743  1803               	skipnc
  8505  2744  158D               	bsf	13,3	;volatile
  8506  2745  0008               	return
  8507  2746                     __end_of_setFeedbackState:	
  8508                           
  8509                           	psect	text8
  8510  1B09                     __ptext8:	
  8511 ;; *************** function _setDoublePressState *****************
  8512 ;; Defined at:
  8513 ;;		line 21 in file "preset_programming.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  f_state         2   24[BANK1 ] int 
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8527 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8529 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8530 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8531 ;;Total ram usage:        4 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    7
  8534 ;; This function calls:
  8535 ;;		_resetRingLEDs
  8536 ;;		_setPedalMode
  8537 ;;		_setPresetDisplay
  8538 ;;		_showSave
  8539 ;;		_wait_ms
  8540 ;; This function is called by:
  8541 ;;		_updateSwitchBypass
  8542 ;;		_updateSwitchTap
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function _setDoublePressState
  8548  1B09                     _setDoublePressState:	
  8549                           
  8550                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8551                           
  8552                           ;incstack = 0
  8553                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8554  1B09  0020               	movlb	0	; select bank0
  8555  1B0A  0864               	movf	_doubleTap_state,w	;volatile
  8556  1B0B  0021               	movlb	1	; select bank1
  8557  1B0C  00BA               	movwf	??_setDoublePressState^(0+128)
  8558  1B0D  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8559  1B0E  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8560  1B0F  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8561  1B10  1D03               	skipz
  8562  1B11  2B14               	goto	u8085
  8563  1B12  0838               	movf	setDoublePressState@f_state^(0+128),w
  8564  1B13  063A               	xorwf	??_setDoublePressState^(0+128),w
  8565  1B14                     u8085:	
  8566  1B14  1903               	btfsc	3,2
  8567  1B15  0008               	return
  8568                           
  8569                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8570  1B16  0838               	movf	setDoublePressState@f_state^(0+128),w
  8571  1B17  00BA               	movwf	??_setDoublePressState^(0+128)
  8572  1B18  083A               	movf	??_setDoublePressState^(0+128),w
  8573  1B19  0020               	movlb	0	; select bank0
  8574  1B1A  00E4               	movwf	_doubleTap_state	;volatile
  8575                           
  8576                           ;preset_programming.c: 24: if (f_state == 1) {
  8577  1B1B  0021               	movlb	1	; select bank1
  8578  1B1C  0338               	decf	setDoublePressState@f_state^(0+128),w
  8579  1B1D  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8580  1B1E  1D03               	btfss	3,2
  8581  1B1F  2B23               	goto	l7626
  8582                           
  8583                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8584  1B20  0022               	movlb	2	; select bank2
  8585  1B21  120D               	bcf	13,4	;volatile
  8586                           
  8587                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8588  1B22  128D               	bcf	13,5	;volatile
  8589  1B23                     l7626:	
  8590                           
  8591                           ;preset_programming.c: 30: }
  8592                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8593  1B23  0020               	movlb	0	; select bank0
  8594  1B24  0364               	decf	_doubleTap_state,w	;volatile
  8595  1B25  1D03               	btfss	3,2
  8596  1B26  2B3F               	goto	l7642
  8597                           
  8598                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8599  1B27  0866               	movf	_presetSaveMode,w
  8600  1B28  1D03               	btfss	3,2
  8601  1B29  2B34               	goto	l7634
  8602                           
  8603                           ;preset_programming.c: 34: presetSaveMode = 1;
  8604  1B2A  01E6               	clrf	_presetSaveMode
  8605  1B2B  0AE6               	incf	_presetSaveMode,f
  8606                           
  8607                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8608  1B2C  0022               	movlb	2	; select bank2
  8609  1B2D  108D               	bcf	13,1	;volatile
  8610                           
  8611                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8612  1B2E  0020               	movlb	0	; select bank0
  8613  1B2F  0856               	movf	_presetChannel,w
  8614  1B30  3199  2164  319B   	fcall	_setPresetDisplay
  8615                           
  8616                           ;preset_programming.c: 37: } else {
  8617  1B33  2B3F               	goto	l7642
  8618  1B34                     l7634:	
  8619                           
  8620                           ;preset_programming.c: 39: presetSaveMode = 0;
  8621  1B34  0020               	movlb	0	; select bank0
  8622  1B35  01E6               	clrf	_presetSaveMode
  8623                           
  8624                           ;preset_programming.c: 40: setPedalMode();
  8625  1B36  31A7  27DC  319B   	fcall	_setPedalMode
  8626                           
  8627                           ;preset_programming.c: 41: resetRingLEDs();
  8628  1B39  31A7  2712  319B   	fcall	_resetRingLEDs
  8629                           
  8630                           ;preset_programming.c: 42: showSave();
  8631  1B3C  31A6  26E6  319B   	fcall	_showSave
  8632  1B3F                     l7642:	
  8633                           
  8634                           ;preset_programming.c: 44: }
  8635                           ;preset_programming.c: 45: }
  8636                           ;preset_programming.c: 47: wait_ms(20);
  8637  1B3F  3014               	movlw	20
  8638  1B40  0021               	movlb	1	; select bank1
  8639  1B41  00AC               	movwf	wait_ms@timeSec^(0+128)
  8640  1B42  3000               	movlw	0
  8641  1B43  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8642  1B44  3198  20FA         	fcall	_wait_ms
  8643  1B46  0008               	return
  8644  1B47                     __end_of_setDoublePressState:	
  8645                           
  8646                           	psect	text9
  8647  26E6                     __ptext9:	
  8648 ;; *************** function _showSave *****************
  8649 ;; Defined at:
  8650 ;;		line 112 in file "LEDs.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;		None
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;		None
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      void 
  8657 ;; Registers used:
  8658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8666 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8667 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8668 ;;Total ram usage:        1 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    6
  8671 ;; This function calls:
  8672 ;;		_ring_tactiles
  8673 ;;		_solidring_tactiles
  8674 ;; This function is called by:
  8675 ;;		_setDoublePressState
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           
  8680                           ;psect for function _showSave
  8681  26E6                     _showSave:	
  8682                           
  8683                           ;LEDs.c: 113: suspend_blink = 1;
  8684                           
  8685                           ;incstack = 0
  8686                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8687  26E6  3001               	movlw	1
  8688  26E7  0021               	movlb	1	; select bank1
  8689  26E8  00B7               	movwf	??_showSave^(0+128)
  8690  26E9  0837               	movf	??_showSave^(0+128),w
  8691  26EA  0020               	movlb	0	; select bank0
  8692  26EB  00E7               	movwf	_suspend_blink	;volatile
  8693                           
  8694                           ;LEDs.c: 114: ring_tactiles();
  8695  26EC  319E  2600  31A6   	fcall	_ring_tactiles
  8696                           
  8697                           ;LEDs.c: 115: ring_tactiles();
  8698  26EF  319E  2600  31A6   	fcall	_ring_tactiles
  8699                           
  8700                           ;LEDs.c: 116: solidring_tactiles();
  8701  26F2  319B  2387  31A6   	fcall	_solidring_tactiles
  8702                           
  8703                           ;LEDs.c: 117: solidring_tactiles();
  8704  26F5  319B  2387         	fcall	_solidring_tactiles
  8705                           
  8706                           ;LEDs.c: 118: suspend_blink = 0;
  8707  26F7  0020               	movlb	0	; select bank0
  8708  26F8  01E7               	clrf	_suspend_blink	;volatile
  8709  26F9  0008               	return
  8710  26FA                     __end_of_showSave:	
  8711                           
  8712                           	psect	text10
  8713  1B87                     __ptext10:	
  8714 ;; *************** function _solidring_tactiles *****************
  8715 ;; Defined at:
  8716 ;;		line 208 in file "LEDs.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;		None
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  1    wreg      void 
  8723 ;; Registers used:
  8724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8731 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8732 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8733 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8734 ;;Total ram usage:        3 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; Hardware stack levels required when called:    5
  8737 ;; This function calls:
  8738 ;;		_set_leds_bottom
  8739 ;;		_set_leds_top
  8740 ;;		_wait_ms
  8741 ;; This function is called by:
  8742 ;;		_showSave
  8743 ;;		_showBootSequence
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           
  8748                           ;psect for function _solidring_tactiles
  8749  1B87                     _solidring_tactiles:	
  8750                           
  8751                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8752                           
  8753                           ;incstack = 0
  8754                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8755  1B87  301E               	movlw	30
  8756  1B88  0021               	movlb	1	; select bank1
  8757  1B89  00B2               	movwf	??_solidring_tactiles^(0+128)
  8758  1B8A  0832               	movf	??_solidring_tactiles^(0+128),w
  8759  1B8B  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8760                           
  8761                           ;LEDs.c: 210: set_leds_top(100, 1);
  8762  1B8C  3064               	movlw	100
  8763  1B8D  00A0               	movwf	set_leds_top@x^(0+128)
  8764  1B8E  3000               	movlw	0
  8765  1B8F  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8766  1B90  3001               	movlw	1
  8767  1B91  00A2               	movwf	set_leds_top@ledState^(0+128)
  8768  1B92  3000               	movlw	0
  8769  1B93  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8770  1B94  319E  26F3  319B   	fcall	_set_leds_top
  8771                           
  8772                           ;LEDs.c: 211: set_leds_bottom(100);
  8773  1B97  3064               	movlw	100
  8774  1B98  0021               	movlb	1	; select bank1
  8775  1B99  00A0               	movwf	set_leds_bottom@x^(0+128)
  8776  1B9A  3000               	movlw	0
  8777  1B9B  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8778  1B9C  3199  219E  319B   	fcall	_set_leds_bottom
  8779                           
  8780                           ;LEDs.c: 212: wait_ms(ring_delay);
  8781  1B9F  0021               	movlb	1	; select bank1
  8782  1BA0  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8783  1BA1  00B2               	movwf	??_solidring_tactiles^(0+128)
  8784  1BA2  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8785  1BA3  0832               	movf	??_solidring_tactiles^(0+128),w
  8786  1BA4  00AC               	movwf	wait_ms@timeSec^(0+128)
  8787  1BA5  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8788  1BA6  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8789  1BA7  3198  20FA  319B   	fcall	_wait_ms
  8790                           
  8791                           ;LEDs.c: 214: set_leds_top(0, 1);
  8792  1BAA  3000               	movlw	0
  8793  1BAB  0021               	movlb	1	; select bank1
  8794  1BAC  00A0               	movwf	set_leds_top@x^(0+128)
  8795  1BAD  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8796  1BAE  3001               	movlw	1
  8797  1BAF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8798  1BB0  3000               	movlw	0
  8799  1BB1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8800  1BB2  319E  26F3  319B   	fcall	_set_leds_top
  8801                           
  8802                           ;LEDs.c: 215: set_leds_bottom(0);
  8803  1BB5  3000               	movlw	0
  8804  1BB6  0021               	movlb	1	; select bank1
  8805  1BB7  00A0               	movwf	set_leds_bottom@x^(0+128)
  8806  1BB8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8807  1BB9  3199  219E  319B   	fcall	_set_leds_bottom
  8808                           
  8809                           ;LEDs.c: 216: wait_ms(ring_delay);
  8810  1BBC  0021               	movlb	1	; select bank1
  8811  1BBD  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8812  1BBE  00B2               	movwf	??_solidring_tactiles^(0+128)
  8813  1BBF  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8814  1BC0  0832               	movf	??_solidring_tactiles^(0+128),w
  8815  1BC1  00AC               	movwf	wait_ms@timeSec^(0+128)
  8816  1BC2  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8817  1BC3  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8818  1BC4  3198  20FA         	fcall	_wait_ms
  8819  1BC6  0008               	return
  8820  1BC7                     __end_of_solidring_tactiles:	
  8821                           
  8822                           	psect	text11
  8823  1E00                     __ptext11:	
  8824 ;; *************** function _ring_tactiles *****************
  8825 ;; Defined at:
  8826 ;;		line 196 in file "LEDs.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;		None
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;  iLed            2   21[BANK1 ] int 
  8831 ;;  iLed            2   19[BANK1 ] int 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  1    wreg      void 
  8834 ;; Registers used:
  8835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8842 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8843 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8844 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8845 ;;Total ram usage:        5 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    5
  8848 ;; This function calls:
  8849 ;;		_set_leds_bottom
  8850 ;;		_set_leds_top
  8851 ;;		_wait_ms
  8852 ;; This function is called by:
  8853 ;;		_showSave
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _ring_tactiles
  8859  1E00                     _ring_tactiles:	
  8860                           
  8861                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8862                           
  8863                           ;incstack = 0
  8864                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8865  1E00  3001               	movlw	1
  8866  1E01  0021               	movlb	1	; select bank1
  8867  1E02  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8868  1E03  3000               	movlw	0
  8869  1E04  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8870  1E05  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8871  1E06  3A80               	xorlw	128
  8872  1E07  00B2               	movwf	??_ring_tactiles^(0+128)
  8873  1E08  3080               	movlw	128
  8874  1E09  0232               	subwf	??_ring_tactiles^(0+128),w
  8875  1E0A  1D03               	skipz
  8876  1E0B  2E0E               	goto	u7605
  8877  1E0C  3007               	movlw	7
  8878  1E0D  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8879  1E0E                     u7605:	
  8880  1E0E  1803               	btfsc	3,0
  8881  1E0F  2E34               	goto	l7184
  8882  1E10                     l7176:	
  8883                           
  8884                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8885  1E10  0021               	movlb	1	; select bank1
  8886  1E11  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8887  1E12  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8888  1E13  0833               	movf	ring_tactiles@iLed^(0+128),w
  8889  1E14  00A0               	movwf	set_leds_top@x^(0+128)
  8890  1E15  3001               	movlw	1
  8891  1E16  00A2               	movwf	set_leds_top@ledState^(0+128)
  8892  1E17  3000               	movlw	0
  8893  1E18  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8894  1E19  319E  26F3  319E   	fcall	_set_leds_top
  8895                           
  8896                           ;LEDs.c: 199: wait_ms(5);
  8897  1E1C  3005               	movlw	5
  8898  1E1D  0021               	movlb	1	; select bank1
  8899  1E1E  00AC               	movwf	wait_ms@timeSec^(0+128)
  8900  1E1F  3000               	movlw	0
  8901  1E20  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8902  1E21  3198  20FA  319E   	fcall	_wait_ms
  8903  1E24  3001               	movlw	1
  8904  1E25  0021               	movlb	1	; select bank1
  8905  1E26  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8906  1E27  3000               	movlw	0
  8907  1E28  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8908  1E29  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8909  1E2A  3A80               	xorlw	128
  8910  1E2B  00B2               	movwf	??_ring_tactiles^(0+128)
  8911  1E2C  3080               	movlw	128
  8912  1E2D  0232               	subwf	??_ring_tactiles^(0+128),w
  8913  1E2E  1D03               	skipz
  8914  1E2F  2E32               	goto	u7615
  8915  1E30  3007               	movlw	7
  8916  1E31  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8917  1E32                     u7615:	
  8918  1E32  1C03               	skipc
  8919  1E33  2E10               	goto	l7176
  8920  1E34                     l7184:	
  8921                           
  8922                           ;LEDs.c: 200: }
  8923                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8924  1E34  3005               	movlw	5
  8925  1E35  0021               	movlb	1	; select bank1
  8926  1E36  00B5               	movwf	ring_tactiles@iLed_1505^(0+128)
  8927  1E37  3000               	movlw	0
  8928  1E38  00B6               	movwf	(ring_tactiles@iLed_1505^(0+128)+1)
  8929  1E39                     L5:	
  8930  1E39  1BB6               	btfsc	(ring_tactiles@iLed_1505+1)^(0+128),7
  8931  1E3A  0008               	return
  8932                           
  8933                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8934  1E3B  0836               	movf	(ring_tactiles@iLed_1505+1)^(0+128),w
  8935  1E3C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8936  1E3D  0835               	movf	ring_tactiles@iLed_1505^(0+128),w
  8937  1E3E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8938  1E3F  3199  219E  319E   	fcall	_set_leds_bottom
  8939                           
  8940                           ;LEDs.c: 203: wait_ms(5);
  8941  1E42  3005               	movlw	5
  8942  1E43  0021               	movlb	1	; select bank1
  8943  1E44  00AC               	movwf	wait_ms@timeSec^(0+128)
  8944  1E45  3000               	movlw	0
  8945  1E46  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8946  1E47  3198  20FA  319E   	fcall	_wait_ms
  8947  1E4A  30FF               	movlw	255
  8948  1E4B  0021               	movlb	1	; select bank1
  8949  1E4C  07B5               	addwf	ring_tactiles@iLed_1505^(0+128),f
  8950  1E4D  30FF               	movlw	255
  8951  1E4E  3DB6               	addwfc	(ring_tactiles@iLed_1505+1)^(0+128),f
  8952  1E4F  2E39               	goto	L5
  8953  1E50                     __end_of_ring_tactiles:	
  8954                           
  8955                           	psect	text12
  8956  27DC                     __ptext12:	
  8957 ;; *************** function _setPedalMode *****************
  8958 ;; Defined at:
  8959 ;;		line 118 in file "tactiles.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    5
  8980 ;; This function calls:
  8981 ;;		_resetRingLEDs
  8982 ;;		_setExpressionDisplay
  8983 ;;		_setPresetDisplay
  8984 ;; This function is called by:
  8985 ;;		_update_mode
  8986 ;;		_setDoublePressState
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           
  8991                           ;psect for function _setPedalMode
  8992  27DC                     _setPedalMode:	
  8993                           
  8994                           ;tactiles.c: 119: switch (mode2_state) {
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8998  27DC  2FF3               	goto	l7384
  8999  27DD                     l977:	
  9000                           ;tactiles.c: 120: case 0:
  9001                           
  9002                           
  9003                           ;tactiles.c: 121: LATBbits.LATB1 = 0;
  9004  27DD  0022               	movlb	2	; select bank2
  9005  27DE  108D               	bcf	13,1	;volatile
  9006                           
  9007                           ;tactiles.c: 122: LATBbits.LATB0 = 0;
  9008  27DF  100D               	bcf	13,0	;volatile
  9009                           
  9010                           ;tactiles.c: 123: resetRingLEDs();
  9011  27E0  31A7  2712         	fcall	_resetRingLEDs
  9012                           
  9013                           ;tactiles.c: 124: break;
  9014  27E2  0008               	return
  9015  27E3                     l979:	
  9016                           ;tactiles.c: 125: case 1:
  9017                           
  9018                           
  9019                           ;tactiles.c: 126: LATBbits.LATB1 = 0;
  9020  27E3  0022               	movlb	2	; select bank2
  9021  27E4  108D               	bcf	13,1	;volatile
  9022                           
  9023                           ;tactiles.c: 127: LATBbits.LATB0 = 1;
  9024  27E5  140D               	bsf	13,0	;volatile
  9025                           
  9026                           ;tactiles.c: 128: setPresetDisplay(presetChannel);
  9027  27E6  0020               	movlb	0	; select bank0
  9028  27E7  0856               	movf	_presetChannel,w
  9029  27E8  3199  2164         	fcall	_setPresetDisplay
  9030                           
  9031                           ;tactiles.c: 129: break;
  9032  27EA  0008               	return
  9033  27EB                     l980:	
  9034                           ;tactiles.c: 130: case 2:
  9035                           
  9036                           
  9037                           ;tactiles.c: 131: LATBbits.LATB1 = 1;
  9038  27EB  0022               	movlb	2	; select bank2
  9039  27EC  148D               	bsf	13,1	;volatile
  9040                           
  9041                           ;tactiles.c: 132: LATBbits.LATB0 = 0;
  9042  27ED  100D               	bcf	13,0	;volatile
  9043                           
  9044                           ;tactiles.c: 133: setExpressionDisplay(expressionChannel);
  9045  27EE  0023               	movlb	3	; select bank3
  9046  27EF  0863               	movf	_expressionChannel^(0+384),w
  9047  27F0  31A6  26FA         	fcall	_setExpressionDisplay
  9048                           
  9049                           ;tactiles.c: 135: }
  9050                           
  9051                           ;tactiles.c: 134: break;
  9052  27F2  0008               	return
  9053  27F3                     l7384:	
  9054  27F3  0020               	movlb	0	; select bank0
  9055  27F4  0865               	movf	_mode2_state,w
  9056                           
  9057                           ; Switch size 1, requested type "space"
  9058                           ; Number of cases is 3, Range of values is 0 to 2
  9059                           ; switch strategies available:
  9060                           ; Name         Instructions Cycles
  9061                           ; simple_byte           10     6 (average)
  9062                           ; direct_byte           12     6 (fixed)
  9063                           ; jumptable            260     6 (fixed)
  9064                           ;	Chosen strategy is simple_byte
  9065  27F5  3A00               	xorlw	0	; case 0
  9066  27F6  1903               	skipnz
  9067  27F7  2FDD               	goto	l977
  9068  27F8  3A01               	xorlw	1	; case 1
  9069  27F9  1903               	skipnz
  9070  27FA  2FE3               	goto	l979
  9071  27FB  3A03               	xorlw	3	; case 2
  9072  27FC  1903               	skipnz
  9073  27FD  2FEB               	goto	l980
  9074  27FE  2FFF               	goto	l981
  9075  27FF                     l981:	
  9076  27FF  0008               	return
  9077  2800                     __end_of_setPedalMode:	
  9078                           
  9079                           	psect	text13
  9080  1964                     __ptext13:	
  9081 ;; *************** function _setPresetDisplay *****************
  9082 ;; Defined at:
  9083 ;;		line 51 in file "preset_programming.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  ledChannel      1    wreg     unsigned char 
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      void 
  9090 ;; Registers used:
  9091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9098 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9099 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9100 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9101 ;;Total ram usage:        3 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; Hardware stack levels required when called:    4
  9104 ;; This function calls:
  9105 ;;		_set_leds_bottom
  9106 ;;		_set_leds_top
  9107 ;; This function is called by:
  9108 ;;		_setPedalMode
  9109 ;;		_update_selectMode
  9110 ;;		_setDoublePressState
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           
  9115                           ;psect for function _setPresetDisplay
  9116  1964                     _setPresetDisplay:	
  9117                           
  9118                           ;incstack = 0
  9119                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9120                           ;setPresetDisplay@ledChannel stored from wreg
  9121  1964  0021               	movlb	1	; select bank1
  9122  1965  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  9123                           
  9124                           ;preset_programming.c: 52: if (ledChannel < 6) {
  9125  1966  3006               	movlw	6
  9126  1967  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  9127  1968  1803               	skipnc
  9128  1969  2980               	goto	l7204
  9129                           
  9130                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  9131  196A  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9132  196B  00A4               	movwf	??_setPresetDisplay^(0+128)
  9133  196C  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9134  196D  0824               	movf	??_setPresetDisplay^(0+128),w
  9135  196E  00A0               	movwf	set_leds_top@x^(0+128)
  9136  196F  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  9137  1970  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9138  1971  3001               	movlw	1
  9139  1972  00A2               	movwf	set_leds_top@ledState^(0+128)
  9140  1973  3000               	movlw	0
  9141  1974  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9142  1975  319E  26F3  3199   	fcall	_set_leds_top
  9143                           
  9144                           ;preset_programming.c: 54: set_leds_bottom(6);
  9145  1978  3006               	movlw	6
  9146  1979  0021               	movlb	1	; select bank1
  9147  197A  00A0               	movwf	set_leds_bottom@x^(0+128)
  9148  197B  3000               	movlw	0
  9149  197C  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9150  197D  3199  219E         	fcall	_set_leds_bottom
  9151                           
  9152                           ;preset_programming.c: 55: } else {
  9153  197F  0008               	return
  9154  1980                     l7204:	
  9155                           
  9156                           ;preset_programming.c: 56: set_leds_top(6, 1);
  9157  1980  3006               	movlw	6
  9158  1981  0021               	movlb	1	; select bank1
  9159  1982  00A0               	movwf	set_leds_top@x^(0+128)
  9160  1983  3000               	movlw	0
  9161  1984  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  9162  1985  3001               	movlw	1
  9163  1986  00A2               	movwf	set_leds_top@ledState^(0+128)
  9164  1987  3000               	movlw	0
  9165  1988  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9166  1989  319E  26F3  3199   	fcall	_set_leds_top
  9167                           
  9168                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  9169  198C  0021               	movlb	1	; select bank1
  9170  198D  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  9171  198E  00A4               	movwf	??_setPresetDisplay^(0+128)
  9172  198F  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  9173  1990  09A4               	comf	??_setPresetDisplay^(0+128),f
  9174  1991  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  9175  1992  0AA4               	incf	??_setPresetDisplay^(0+128),f
  9176  1993  1903               	skipnz
  9177  1994  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  9178  1995  0824               	movf	??_setPresetDisplay^(0+128),w
  9179  1996  3E0B               	addlw	11
  9180  1997  00A0               	movwf	set_leds_bottom@x^(0+128)
  9181  1998  3000               	movlw	0
  9182  1999  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  9183  199A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9184  199B  3199  219E         	fcall	_set_leds_bottom
  9185  199D  0008               	return
  9186  199E                     __end_of_setPresetDisplay:	
  9187                           
  9188                           	psect	text14
  9189  26FA                     __ptext14:	
  9190 ;; *************** function _setExpressionDisplay *****************
  9191 ;; Defined at:
  9192 ;;		line 66 in file "preset_programming.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;  ledChannel      1    wreg     unsigned char 
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9207 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9208 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9209 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9210 ;;Total ram usage:        3 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:    4
  9213 ;; This function calls:
  9214 ;;		_set_leds_bottom
  9215 ;;		_set_leds_top
  9216 ;; This function is called by:
  9217 ;;		_setPedalMode
  9218 ;;		_update_selectMode
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           
  9223                           ;psect for function _setExpressionDisplay
  9224  26FA                     _setExpressionDisplay:	
  9225                           
  9226                           ;incstack = 0
  9227                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9228                           ;setExpressionDisplay@ledChannel stored from wreg
  9229  26FA  0021               	movlb	1	; select bank1
  9230  26FB  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  9231                           
  9232                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  9233  26FC  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  9234  26FD  00A4               	movwf	??_setExpressionDisplay^(0+128)
  9235  26FE  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  9236  26FF  0824               	movf	??_setExpressionDisplay^(0+128),w
  9237  2700  00A0               	movwf	set_leds_top@x^(0+128)
  9238  2701  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  9239  2702  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9240  2703  3001               	movlw	1
  9241  2704  00A2               	movwf	set_leds_top@ledState^(0+128)
  9242  2705  3000               	movlw	0
  9243  2706  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9244  2707  319E  26F3  31A6   	fcall	_set_leds_top
  9245                           
  9246                           ;preset_programming.c: 68: set_leds_bottom(6);
  9247  270A  3006               	movlw	6
  9248  270B  0021               	movlb	1	; select bank1
  9249  270C  00A0               	movwf	set_leds_bottom@x^(0+128)
  9250  270D  3000               	movlw	0
  9251  270E  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  9252  270F  3199  219E         	fcall	_set_leds_bottom
  9253  2711  0008               	return
  9254  2712                     __end_of_setExpressionDisplay:	
  9255                           
  9256                           	psect	text15
  9257  2712                     __ptext15:	
  9258 ;; *************** function _resetRingLEDs *****************
  9259 ;; Defined at:
  9260 ;;		line 61 in file "preset_programming.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  1    wreg      void 
  9267 ;; Registers used:
  9268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9278 ;;Total ram usage:        0 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    4
  9281 ;; This function calls:
  9282 ;;		_set_leds_bottom
  9283 ;;		_set_leds_top
  9284 ;; This function is called by:
  9285 ;;		_update_mode
  9286 ;;		_setPedalMode
  9287 ;;		_setDoublePressState
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           
  9292                           ;psect for function _resetRingLEDs
  9293  2712                     _resetRingLEDs:	
  9294                           
  9295                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9296                           
  9297                           ;incstack = 0
  9298                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9299  2712  0020               	movlb	0	; select bank0
  9300  2713  0852               	movf	_top_push_state+1,w
  9301  2714  0021               	movlb	1	; select bank1
  9302  2715  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9303  2716  0020               	movlb	0	; select bank0
  9304  2717  0851               	movf	_top_push_state,w
  9305  2718  0021               	movlb	1	; select bank1
  9306  2719  00A0               	movwf	set_leds_top@x^(0+128)
  9307  271A  3001               	movlw	1
  9308  271B  00A2               	movwf	set_leds_top@ledState^(0+128)
  9309  271C  3000               	movlw	0
  9310  271D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9311  271E  319E  26F3  31A7   	fcall	_set_leds_top
  9312                           
  9313                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9314  2721  0020               	movlb	0	; select bank0
  9315  2722  084E               	movf	_bottom_push_state+1,w
  9316  2723  0021               	movlb	1	; select bank1
  9317  2724  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9318  2725  0020               	movlb	0	; select bank0
  9319  2726  084D               	movf	_bottom_push_state,w
  9320  2727  0021               	movlb	1	; select bank1
  9321  2728  00A0               	movwf	set_leds_bottom@x^(0+128)
  9322  2729  3199  219E         	fcall	_set_leds_bottom
  9323  272B  0008               	return
  9324  272C                     __end_of_resetRingLEDs:	
  9325                           
  9326                           	psect	text16
  9327  165B                     __ptext16:	
  9328 ;; *************** function _set_subdivision *****************
  9329 ;; Defined at:
  9330 ;;		line 77 in file "user.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;  x               2   22[BANK2 ] int 
  9333 ;;  y               2   24[BANK2 ] int 
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;  scalar          3   29[BANK2 ] float 
  9336 ;;  tmpX            2   32[BANK2 ] int 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  2   22[BANK2 ] int 
  9339 ;; Registers used:
  9340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9346 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9347 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9348 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9349 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9350 ;;Total ram usage:       12 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    6
  9353 ;; This function calls:
  9354 ;;		___awtoft
  9355 ;;		___ftmul
  9356 ;;		___fttol
  9357 ;;		_trunc
  9358 ;; This function is called by:
  9359 ;;		_main
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           
  9364                           ;psect for function _set_subdivision
  9365  165B                     _set_subdivision:	
  9366                           
  9367                           ;user.c: 81: adjust_sub_delay = 0;
  9368                           
  9369                           ;incstack = 0
  9370                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9371  165B  0023               	movlb	3	; select bank3
  9372  165C  01A8               	clrf	_adjust_sub_delay^(0+384)
  9373  165D  01A9               	clrf	(_adjust_sub_delay+1)^(0+384)
  9374                           
  9375                           ;user.c: 82: int tmpX = x;
  9376  165E  0022               	movlb	2	; select bank2
  9377  165F  0837               	movf	(set_subdivision@x+1)^(0+256),w
  9378  1660  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9379  1661  0836               	movf	set_subdivision@x^(0+256),w
  9380  1662  00C0               	movwf	set_subdivision@tmpX^(0+256)
  9381                           
  9382                           ;user.c: 83: float scalar = 1.0;
  9383  1663  3000               	movlw	0
  9384  1664  00BD               	movwf	set_subdivision@scalar^(0+256)
  9385  1665  3080               	movlw	128
  9386  1666  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9387  1667  303F               	movlw	63
  9388  1668  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  9389                           
  9390                           ;user.c: 85: switch (y) {
  9391  1669  2E85               	goto	l8106
  9392  166A                     l8094:	
  9393                           ;user.c: 86: case 1:
  9394                           
  9395                           
  9396                           ;user.c: 87: scalar = 2.0;
  9397  166A  3000               	movlw	0
  9398  166B  00BD               	movwf	set_subdivision@scalar^(0+256)
  9399  166C  3000               	movlw	0
  9400  166D  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9401  166E  3040               	movlw	64
  9402  166F  2E83               	goto	L9
  9403  1670                     l8096:	
  9404                           ;user.c: 89: case 2:
  9405                           
  9406                           ;user.c: 88: break;
  9407                           
  9408                           
  9409                           ;user.c: 90: scalar = 0.6666;
  9410  1670  30A6               	movlw	166
  9411  1671  00BD               	movwf	set_subdivision@scalar^(0+256)
  9412  1672  302A               	movlw	42
  9413  1673  2E77               	goto	L11
  9414  1674                     l8098:	
  9415                           ;user.c: 92: case 3:
  9416                           
  9417                           ;user.c: 91: break;
  9418                           
  9419                           
  9420                           ;user.c: 93: scalar = .5;
  9421  1674  3000               	movlw	0
  9422  1675  00BD               	movwf	set_subdivision@scalar^(0+256)
  9423  1676  3000               	movlw	0
  9424  1677                     L11:	
  9425  1677  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9426  1678  303F               	movlw	63
  9427  1679  2E83               	goto	L9
  9428  167A                     l8100:	
  9429                           ;user.c: 95: case 4:
  9430                           
  9431                           ;user.c: 94: break;
  9432                           
  9433                           
  9434                           ;user.c: 96: scalar = 0.3333;
  9435  167A  30A6               	movlw	166
  9436  167B  00BD               	movwf	set_subdivision@scalar^(0+256)
  9437  167C  30AA               	movlw	170
  9438  167D  2E81               	goto	L10
  9439  167E                     l8102:	
  9440                           ;user.c: 98: case 5:
  9441                           
  9442                           ;user.c: 97: break;
  9443                           
  9444                           
  9445                           ;user.c: 99: scalar = 0.25;
  9446  167E  3000               	movlw	0
  9447  167F  00BD               	movwf	set_subdivision@scalar^(0+256)
  9448  1680  3080               	movlw	128
  9449  1681                     L10:	
  9450  1681  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9451  1682  303E               	movlw	62
  9452  1683                     L9:	
  9453  1683  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  9454                           
  9455                           ;user.c: 104: }
  9456                           
  9457                           ;user.c: 103: break;
  9458                           
  9459                           ;user.c: 101: case 6:
  9460                           
  9461                           ;user.c: 100: break;
  9462  1684  2E9E               	goto	l8108
  9463  1685                     l8106:	
  9464                           
  9465                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9466                           ; Switch size 1, requested type "space"
  9467                           ; Number of cases is 1, Range of values is 0 to 0
  9468                           ; switch strategies available:
  9469                           ; Name         Instructions Cycles
  9470                           ; simple_byte            4     3 (average)
  9471                           ; direct_byte            8     6 (fixed)
  9472                           ; jumptable            260     6 (fixed)
  9473                           ;	Chosen strategy is simple_byte
  9474  1685  0839               	movf	(set_subdivision@y+1)^(0+256),w
  9475  1686  3A00               	xorlw	0	; case 0
  9476  1687  1903               	skipnz
  9477  1688  2E8A               	goto	l8638
  9478  1689  2E9E               	goto	l8108
  9479  168A                     l8638:	
  9480                           
  9481                           ; Switch size 1, requested type "space"
  9482                           ; Number of cases is 6, Range of values is 1 to 6
  9483                           ; switch strategies available:
  9484                           ; Name         Instructions Cycles
  9485                           ; simple_byte           19    10 (average)
  9486                           ; direct_byte           21     9 (fixed)
  9487                           ; jumptable            263     9 (fixed)
  9488                           ;	Chosen strategy is simple_byte
  9489  168A  0838               	movf	set_subdivision@y^(0+256),w
  9490  168B  3A01               	xorlw	1	; case 1
  9491  168C  1903               	skipnz
  9492  168D  2E6A               	goto	l8094
  9493  168E  3A03               	xorlw	3	; case 2
  9494  168F  1903               	skipnz
  9495  1690  2E70               	goto	l8096
  9496  1691  3A01               	xorlw	1	; case 3
  9497  1692  1903               	skipnz
  9498  1693  2E74               	goto	l8098
  9499  1694  3A07               	xorlw	7	; case 4
  9500  1695  1903               	skipnz
  9501  1696  2E7A               	goto	l8100
  9502  1697  3A01               	xorlw	1	; case 5
  9503  1698  1903               	skipnz
  9504  1699  2E7E               	goto	l8102
  9505  169A  3A03               	xorlw	3	; case 6
  9506  169B  1903               	skipnz
  9507  169C  2E9E               	goto	l8108
  9508  169D  2E9E               	goto	l8108
  9509  169E                     l8108:	
  9510                           
  9511                           ;user.c: 106: tmpX = tmpX * scalar;
  9512  169E  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9513  169F  0021               	movlb	1	; select bank1
  9514  16A0  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9515  16A1  0022               	movlb	2	; select bank2
  9516  16A2  0840               	movf	set_subdivision@tmpX^(0+256),w
  9517  16A3  0021               	movlb	1	; select bank1
  9518  16A4  00A8               	movwf	___awtoft@c^(0+128)
  9519  16A5  31A7  27BA  3196   	fcall	___awtoft
  9520  16A8  0021               	movlb	1	; select bank1
  9521  16A9  0828               	movf	?___awtoft^(0+128),w
  9522  16AA  00BB               	movwf	___ftmul@f2^(0+128)
  9523  16AB  0829               	movf	(?___awtoft+1)^(0+128),w
  9524  16AC  00BC               	movwf	(___ftmul@f2+1)^(0+128)
  9525  16AD  082A               	movf	(?___awtoft+2)^(0+128),w
  9526  16AE  00BD               	movwf	(___ftmul@f2+2)^(0+128)
  9527  16AF  0022               	movlb	2	; select bank2
  9528  16B0  083D               	movf	set_subdivision@scalar^(0+256),w
  9529  16B1  0021               	movlb	1	; select bank1
  9530  16B2  00B8               	movwf	___ftmul@f1^(0+128)
  9531  16B3  0022               	movlb	2	; select bank2
  9532  16B4  083E               	movf	(set_subdivision@scalar+1)^(0+256),w
  9533  16B5  0021               	movlb	1	; select bank1
  9534  16B6  00B9               	movwf	(___ftmul@f1+1)^(0+128)
  9535  16B7  0022               	movlb	2	; select bank2
  9536  16B8  083F               	movf	(set_subdivision@scalar+2)^(0+256),w
  9537  16B9  0021               	movlb	1	; select bank1
  9538  16BA  00BA               	movwf	(___ftmul@f1+2)^(0+128)
  9539  16BB  3195  25A7  3196   	fcall	___ftmul
  9540  16BE  0021               	movlb	1	; select bank1
  9541  16BF  0838               	movf	?___ftmul^(0+128),w
  9542  16C0  00E7               	movwf	___fttol@f1^(0+128)
  9543  16C1  0839               	movf	(?___ftmul+1)^(0+128),w
  9544  16C2  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9545  16C3  083A               	movf	(?___ftmul+2)^(0+128),w
  9546  16C4  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9547  16C5  3192  22FE  3196   	fcall	___fttol
  9548  16C8  0021               	movlb	1	; select bank1
  9549  16C9  0868               	movf	(?___fttol^(0+128)+1),w
  9550  16CA  0022               	movlb	2	; select bank2
  9551  16CB  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9552  16CC  0021               	movlb	1	; select bank1
  9553  16CD  0867               	movf	?___fttol^(0+128),w
  9554  16CE  0022               	movlb	2	; select bank2
  9555  16CF  00C0               	movwf	set_subdivision@tmpX^(0+256)
  9556                           
  9557                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  9558  16D0  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9559  16D1  0021               	movlb	1	; select bank1
  9560  16D2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9561  16D3  0022               	movlb	2	; select bank2
  9562  16D4  0840               	movf	set_subdivision@tmpX^(0+256),w
  9563  16D5  0021               	movlb	1	; select bank1
  9564  16D6  00A8               	movwf	___awtoft@c^(0+128)
  9565  16D7  31A7  27BA  3196   	fcall	___awtoft
  9566  16DA  0021               	movlb	1	; select bank1
  9567  16DB  0828               	movf	?___awtoft^(0+128),w
  9568  16DC  0022               	movlb	2	; select bank2
  9569  16DD  00AE               	movwf	trunc@x^(0+256)
  9570  16DE  0021               	movlb	1	; select bank1
  9571  16DF  0829               	movf	(?___awtoft+1)^(0+128),w
  9572  16E0  0022               	movlb	2	; select bank2
  9573  16E1  00AF               	movwf	(trunc@x+1)^(0+256)
  9574  16E2  0021               	movlb	1	; select bank1
  9575  16E3  082A               	movf	(?___awtoft+2)^(0+128),w
  9576  16E4  0022               	movlb	2	; select bank2
  9577  16E5  00B0               	movwf	(trunc@x+2)^(0+256)
  9578  16E6  319E  26A1  3196   	fcall	_trunc
  9579  16E9  0022               	movlb	2	; select bank2
  9580  16EA  082E               	movf	?_trunc^(0+256),w
  9581  16EB  00BA               	movwf	??_set_subdivision^(0+256)
  9582  16EC  082F               	movf	(?_trunc+1)^(0+256),w
  9583  16ED  00BB               	movwf	(??_set_subdivision^(0+256)+1)
  9584  16EE  0830               	movf	(?_trunc+2)^(0+256),w
  9585  16EF  00BC               	movwf	(??_set_subdivision^(0+256)+2)
  9586  16F0  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9587  16F1  0021               	movlb	1	; select bank1
  9588  16F2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9589  16F3  0022               	movlb	2	; select bank2
  9590  16F4  0840               	movf	set_subdivision@tmpX^(0+256),w
  9591  16F5  0021               	movlb	1	; select bank1
  9592  16F6  00A8               	movwf	___awtoft@c^(0+128)
  9593  16F7  31A7  27BA  3196   	fcall	___awtoft
  9594  16FA  0021               	movlb	1	; select bank1
  9595  16FB  082A               	movf	(?___awtoft+2)^(0+128),w
  9596  16FC  0022               	movlb	2	; select bank2
  9597  16FD  063C               	xorwf	(??_set_subdivision+2)^(0+256),w
  9598  16FE  1D03               	skipz
  9599  16FF  2F0A               	goto	u9045
  9600  1700  0021               	movlb	1	; select bank1
  9601  1701  0829               	movf	(?___awtoft+1)^(0+128),w
  9602  1702  0022               	movlb	2	; select bank2
  9603  1703  063B               	xorwf	(??_set_subdivision+1)^(0+256),w
  9604  1704  1D03               	skipz
  9605  1705  2F0A               	goto	u9045
  9606  1706  0021               	movlb	1	; select bank1
  9607  1707  0828               	movf	?___awtoft^(0+128),w
  9608  1708  0022               	movlb	2	; select bank2
  9609  1709  063A               	xorwf	??_set_subdivision^(0+256),w
  9610  170A                     u9045:	
  9611  170A  1903               	skipnz
  9612  170B  2F11               	goto	l579
  9613                           
  9614                           ;user.c: 109: adjust_sub_delay = 1;
  9615  170C  3001               	movlw	1
  9616  170D  0023               	movlb	3	; select bank3
  9617  170E  00A8               	movwf	_adjust_sub_delay^(0+384)
  9618  170F  3000               	movlw	0
  9619  1710  00A9               	movwf	(_adjust_sub_delay^(0+384)+1)
  9620  1711                     l579:	
  9621                           
  9622                           ;user.c: 110: }
  9623                           ;user.c: 112: return tmpX;
  9624  1711  0022               	movlb	2	; select bank2
  9625  1712  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9626  1713  00B7               	movwf	(?_set_subdivision+1)^(0+256)
  9627  1714  0840               	movf	set_subdivision@tmpX^(0+256),w
  9628  1715  00B6               	movwf	?_set_subdivision^(0+256)
  9629  1716  0008               	return
  9630  1717                     __end_of_set_subdivision:	
  9631                           
  9632                           	psect	text17
  9633  1067                     __ptext17:	
  9634 ;; *************** function _scaleA100kPot *****************
  9635 ;; Defined at:
  9636 ;;		line 187 in file "user.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;  input           3   52[BANK2 ] int 
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;  pwm             3   55[BANK2 ] float 
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  2   52[BANK2 ] int 
  9643 ;; Registers used:
  9644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9650 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9651 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9653 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9654 ;;Total ram usage:       15 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    8
  9657 ;; This function calls:
  9658 ;;		___ftdiv
  9659 ;;		___ftmul
  9660 ;;		___fttol
  9661 ;;		_pow
  9662 ;;		_trunc
  9663 ;; This function is called by:
  9664 ;;		_main
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           
  9669                           ;psect for function _scaleA100kPot
  9670  1067                     _scaleA100kPot:	
  9671                           
  9672                           ;user.c: 189: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
  9673                           
  9674                           ;incstack = 0
  9675                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9676  1067  30C0               	movlw	192
  9677  1068  0021               	movlb	1	; select bank1
  9678  1069  00A8               	movwf	___ftdiv@f2^(0+128)
  9679  106A  307F               	movlw	127
  9680  106B  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
  9681  106C  3044               	movlw	68
  9682  106D  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
  9683  106E  0022               	movlb	2	; select bank2
  9684  106F  0854               	movf	scaleA100kPot@input^(0+256),w
  9685  1070  0021               	movlb	1	; select bank1
  9686  1071  00AB               	movwf	___ftdiv@f1^(0+128)
  9687  1072  0022               	movlb	2	; select bank2
  9688  1073  0855               	movf	(scaleA100kPot@input+1)^(0+256),w
  9689  1074  0021               	movlb	1	; select bank1
  9690  1075  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
  9691  1076  0022               	movlb	2	; select bank2
  9692  1077  0856               	movf	(scaleA100kPot@input+2)^(0+256),w
  9693  1078  0021               	movlb	1	; select bank1
  9694  1079  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
  9695  107A  3193  239D  3190   	fcall	___ftdiv
  9696  107D  0021               	movlb	1	; select bank1
  9697  107E  0828               	movf	?___ftdiv^(0+128),w
  9698  107F  0022               	movlb	2	; select bank2
  9699  1080  00DA               	movwf	_scaleA100kPot$2639^(0+256)
  9700  1081  0021               	movlb	1	; select bank1
  9701  1082  0829               	movf	(?___ftdiv+1)^(0+128),w
  9702  1083  0022               	movlb	2	; select bank2
  9703  1084  00DB               	movwf	(_scaleA100kPot$2639+1)^(0+256)
  9704  1085  0021               	movlb	1	; select bank1
  9705  1086  082A               	movf	(?___ftdiv+2)^(0+128),w
  9706  1087  0022               	movlb	2	; select bank2
  9707  1088  00DC               	movwf	(_scaleA100kPot$2639+2)^(0+256)
  9708                           
  9709                           ;user.c: 189: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
  9710  1089  3056               	movlw	86
  9711  108A  00C5               	movwf	pow@y^(0+256)
  9712  108B  308E               	movlw	142
  9713  108C  00C6               	movwf	(pow@y+1)^(0+256)
  9714  108D  30BF               	movlw	191
  9715  108E  00C7               	movwf	(pow@y+2)^(0+256)
  9716  108F  085A               	movf	_scaleA100kPot$2639^(0+256),w
  9717  1090  00C2               	movwf	pow@x^(0+256)
  9718  1091  085B               	movf	(_scaleA100kPot$2639+1)^(0+256),w
  9719  1092  00C3               	movwf	(pow@x+1)^(0+256)
  9720  1093  085C               	movf	(_scaleA100kPot$2639+2)^(0+256),w
  9721  1094  00C4               	movwf	(pow@x+2)^(0+256)
  9722  1095  3189  216E  3190   	fcall	_pow
  9723  1098  0022               	movlb	2	; select bank2
  9724  1099  0842               	movf	?_pow^(0+256),w
  9725  109A  00DD               	movwf	_scaleA100kPot$2640^(0+256)
  9726  109B  0843               	movf	(?_pow+1)^(0+256),w
  9727  109C  00DE               	movwf	(_scaleA100kPot$2640+1)^(0+256)
  9728  109D  0844               	movf	(?_pow+2)^(0+256),w
  9729  109E  00DF               	movwf	(_scaleA100kPot$2640+2)^(0+256)
  9730                           
  9731                           ;user.c: 189: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
  9732  109F  309F               	movlw	159
  9733  10A0  0021               	movlb	1	; select bank1
  9734  10A1  00B8               	movwf	___ftmul@f1^(0+128)
  9735  10A2  3068               	movlw	104
  9736  10A3  00B9               	movwf	(___ftmul@f1+1)^(0+128)
  9737  10A4  3040               	movlw	64
  9738  10A5  00BA               	movwf	(___ftmul@f1+2)^(0+128)
  9739  10A6  0022               	movlb	2	; select bank2
  9740  10A7  085D               	movf	_scaleA100kPot$2640^(0+256),w
  9741  10A8  0021               	movlb	1	; select bank1
  9742  10A9  00BB               	movwf	___ftmul@f2^(0+128)
  9743  10AA  0022               	movlb	2	; select bank2
  9744  10AB  085E               	movf	(_scaleA100kPot$2640+1)^(0+256),w
  9745  10AC  0021               	movlb	1	; select bank1
  9746  10AD  00BC               	movwf	(___ftmul@f2+1)^(0+128)
  9747  10AE  0022               	movlb	2	; select bank2
  9748  10AF  085F               	movf	(_scaleA100kPot$2640+2)^(0+256),w
  9749  10B0  0021               	movlb	1	; select bank1
  9750  10B1  00BD               	movwf	(___ftmul@f2+2)^(0+128)
  9751  10B2  3195  25A7  3190   	fcall	___ftmul
  9752  10B5  0021               	movlb	1	; select bank1
  9753  10B6  0838               	movf	?___ftmul^(0+128),w
  9754  10B7  0022               	movlb	2	; select bank2
  9755  10B8  00D7               	movwf	scaleA100kPot@pwm^(0+256)
  9756  10B9  0021               	movlb	1	; select bank1
  9757  10BA  0839               	movf	(?___ftmul+1)^(0+128),w
  9758  10BB  0022               	movlb	2	; select bank2
  9759  10BC  00D8               	movwf	(scaleA100kPot@pwm+1)^(0+256)
  9760  10BD  0021               	movlb	1	; select bank1
  9761  10BE  083A               	movf	(?___ftmul+2)^(0+128),w
  9762  10BF  0022               	movlb	2	; select bank2
  9763  10C0  00D9               	movwf	(scaleA100kPot@pwm+2)^(0+256)
  9764                           
  9765                           ;user.c: 190: return trunc(pwm);
  9766  10C1  0857               	movf	scaleA100kPot@pwm^(0+256),w
  9767  10C2  00AE               	movwf	trunc@x^(0+256)
  9768  10C3  0858               	movf	(scaleA100kPot@pwm+1)^(0+256),w
  9769  10C4  00AF               	movwf	(trunc@x+1)^(0+256)
  9770  10C5  0859               	movf	(scaleA100kPot@pwm+2)^(0+256),w
  9771  10C6  00B0               	movwf	(trunc@x+2)^(0+256)
  9772  10C7  319E  26A1  3190   	fcall	_trunc
  9773  10CA  0022               	movlb	2	; select bank2
  9774  10CB  082E               	movf	?_trunc^(0+256),w
  9775  10CC  00E0               	movwf	_scaleA100kPot$2641^(0+256)
  9776  10CD  082F               	movf	(?_trunc+1)^(0+256),w
  9777  10CE  00E1               	movwf	(_scaleA100kPot$2641+1)^(0+256)
  9778  10CF  0830               	movf	(?_trunc+2)^(0+256),w
  9779  10D0  00E2               	movwf	(_scaleA100kPot$2641+2)^(0+256)
  9780                           
  9781                           ;user.c: 190: return trunc(pwm);
  9782  10D1  0860               	movf	_scaleA100kPot$2641^(0+256),w
  9783  10D2  0021               	movlb	1	; select bank1
  9784  10D3  00E7               	movwf	___fttol@f1^(0+128)
  9785  10D4  0022               	movlb	2	; select bank2
  9786  10D5  0861               	movf	(_scaleA100kPot$2641+1)^(0+256),w
  9787  10D6  0021               	movlb	1	; select bank1
  9788  10D7  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9789  10D8  0022               	movlb	2	; select bank2
  9790  10D9  0862               	movf	(_scaleA100kPot$2641+2)^(0+256),w
  9791  10DA  0021               	movlb	1	; select bank1
  9792  10DB  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9793  10DC  3192  22FE         	fcall	___fttol
  9794  10DE  0021               	movlb	1	; select bank1
  9795  10DF  0868               	movf	(?___fttol^(0+128)+1),w
  9796  10E0  0022               	movlb	2	; select bank2
  9797  10E1  00D5               	movwf	(?_scaleA100kPot+1)^(0+256)
  9798  10E2  0021               	movlb	1	; select bank1
  9799  10E3  0867               	movf	?___fttol^(0+128),w
  9800  10E4  0022               	movlb	2	; select bank2
  9801  10E5  00D4               	movwf	?_scaleA100kPot^(0+256)
  9802  10E6  0008               	return
  9803  10E7                     __end_of_scaleA100kPot:	
  9804                           
  9805                           	psect	text18
  9806  1EA1                     __ptext18:	
  9807 ;; *************** function _trunc *****************
  9808 ;; Defined at:
  9809 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;  x               3   14[BANK2 ] int 
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;  i               3   17[BANK2 ] int 
  9814 ;;  expon           2   20[BANK2 ] int 
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  3   14[BANK2 ] int 
  9817 ;; Registers used:
  9818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9824 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9825 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9827 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9828 ;;Total ram usage:        8 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    5
  9831 ;; This function calls:
  9832 ;;		___altoft
  9833 ;;		___fttol
  9834 ;;		_frexp
  9835 ;; This function is called by:
  9836 ;;		_set_subdivision
  9837 ;;		_scaleA100kPot
  9838 ;;		_scaleiA100kPot
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _trunc
  9844  1EA1                     _trunc:	
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9848  1EA1  0022               	movlb	2	; select bank2
  9849  1EA2  082E               	movf	trunc@x^(0+256),w
  9850  1EA3  0021               	movlb	1	; select bank1
  9851  1EA4  00A0               	movwf	frexp@value^(0+128)
  9852  1EA5  0022               	movlb	2	; select bank2
  9853  1EA6  082F               	movf	(trunc@x+1)^(0+256),w
  9854  1EA7  0021               	movlb	1	; select bank1
  9855  1EA8  00A1               	movwf	(frexp@value+1)^(0+128)
  9856  1EA9  0022               	movlb	2	; select bank2
  9857  1EAA  0830               	movf	(trunc@x+2)^(0+256),w
  9858  1EAB  0021               	movlb	1	; select bank1
  9859  1EAC  00A2               	movwf	(frexp@value+2)^(0+128)
  9860  1EAD  3034               	movlw	low trunc@expon
  9861  1EAE  00A3               	movwf	frexp@eptr^(0+128)
  9862  1EAF  3001               	movlw	high trunc@expon
  9863  1EB0  00A4               	movwf	(frexp@eptr+1)^(0+128)
  9864  1EB1  319B  2347  319E   	fcall	_frexp
  9865  1EB4  0022               	movlb	2	; select bank2
  9866  1EB5  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  9867  1EB6  2EBE               	goto	l7508
  9868  1EB7  3000               	movlw	0
  9869  1EB8  00AE               	movwf	?_trunc^(0+256)
  9870  1EB9  3000               	movlw	0
  9871  1EBA  00AF               	movwf	(?_trunc+1)^(0+256)
  9872  1EBB  3000               	movlw	0
  9873  1EBC  00B0               	movwf	(?_trunc+2)^(0+256)
  9874  1EBD  0008               	return
  9875  1EBE                     l7508:	
  9876  1EBE  3000               	movlw	0
  9877  1EBF  0235               	subwf	(trunc@expon+1)^(0+256),w
  9878  1EC0  3015               	movlw	21
  9879  1EC1  1903               	skipnz
  9880  1EC2  0234               	subwf	trunc@expon^(0+256),w
  9881  1EC3  1803               	btfsc	3,0
  9882  1EC4  0008               	return
  9883  1EC5  082E               	movf	trunc@x^(0+256),w
  9884  1EC6  0021               	movlb	1	; select bank1
  9885  1EC7  00E7               	movwf	___fttol@f1^(0+128)
  9886  1EC8  0022               	movlb	2	; select bank2
  9887  1EC9  082F               	movf	(trunc@x+1)^(0+256),w
  9888  1ECA  0021               	movlb	1	; select bank1
  9889  1ECB  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9890  1ECC  0022               	movlb	2	; select bank2
  9891  1ECD  0830               	movf	(trunc@x+2)^(0+256),w
  9892  1ECE  0021               	movlb	1	; select bank1
  9893  1ECF  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9894  1ED0  3192  22FE  319E   	fcall	___fttol
  9895  1ED3  0021               	movlb	1	; select bank1
  9896  1ED4  086A               	movf	(?___fttol+3)^(0+128),w
  9897  1ED5  0022               	movlb	2	; select bank2
  9898  1ED6  00A9               	movwf	(___altoft@c+3)^(0+256)
  9899  1ED7  0021               	movlb	1	; select bank1
  9900  1ED8  0869               	movf	(?___fttol+2)^(0+128),w
  9901  1ED9  0022               	movlb	2	; select bank2
  9902  1EDA  00A8               	movwf	(___altoft@c+2)^(0+256)
  9903  1EDB  0021               	movlb	1	; select bank1
  9904  1EDC  0868               	movf	(?___fttol+1)^(0+128),w
  9905  1EDD  0022               	movlb	2	; select bank2
  9906  1EDE  00A7               	movwf	(___altoft@c+1)^(0+256)
  9907  1EDF  0021               	movlb	1	; select bank1
  9908  1EE0  0867               	movf	?___fttol^(0+128),w
  9909  1EE1  0022               	movlb	2	; select bank2
  9910  1EE2  00A6               	movwf	___altoft@c^(0+256)
  9911  1EE3  319D  2565         	fcall	___altoft
  9912  1EE5  0022               	movlb	2	; select bank2
  9913  1EE6  0826               	movf	?___altoft^(0+256),w
  9914  1EE7  00B1               	movwf	trunc@i^(0+256)
  9915  1EE8  0827               	movf	(?___altoft+1)^(0+256),w
  9916  1EE9  00B2               	movwf	(trunc@i+1)^(0+256)
  9917  1EEA  0828               	movf	(?___altoft+2)^(0+256),w
  9918  1EEB  00B3               	movwf	(trunc@i+2)^(0+256)
  9919  1EEC  0831               	movf	trunc@i^(0+256),w
  9920  1EED  00AE               	movwf	?_trunc^(0+256)
  9921  1EEE  0832               	movf	(trunc@i+1)^(0+256),w
  9922  1EEF  00AF               	movwf	(?_trunc+1)^(0+256)
  9923  1EF0  0833               	movf	(trunc@i+2)^(0+256),w
  9924  1EF1  00B0               	movwf	(?_trunc+2)^(0+256)
  9925  1EF2  0008               	return
  9926  1EF3                     __end_of_trunc:	
  9927                           
  9928                           	psect	text19
  9929  096E                     __ptext19:	
  9930 ;; *************** function _pow *****************
  9931 ;; Defined at:
  9932 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;  x               3   34[BANK2 ] int 
  9935 ;;  y               3   37[BANK2 ] int 
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  yi              4   48[BANK2 ] unsigned long 
  9938 ;;  sign            1   47[BANK2 ] unsigned char 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  3   34[BANK2 ] unsigned char 
  9941 ;; Registers used:
  9942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9948 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9949 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9950 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9951 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9952 ;;Total ram usage:       18 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    7
  9955 ;; This function calls:
  9956 ;;		___ftge
  9957 ;;		___ftmul
  9958 ;;		___ftneg
  9959 ;;		___fttol
  9960 ;;		___lltoft
  9961 ;;		_exp
  9962 ;;		_log
  9963 ;; This function is called by:
  9964 ;;		_scaleA100kPot
  9965 ;;		_scaleiA100kPot
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           
  9970                           ;psect for function _pow
  9971  096E                     _pow:	
  9972                           
  9973                           ;incstack = 0
  9974                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9975  096E  0022               	movlb	2	; select bank2
  9976  096F  01CF               	clrf	pow@sign^(0+256)
  9977  0970  0844               	movf	(pow@x+2)^(0+256),w
  9978  0971  0443               	iorwf	(pow@x+1)^(0+256),w
  9979  0972  0442               	iorwf	pow@x^(0+256),w
  9980  0973  1D03               	skipz
  9981  0974  299A               	goto	l7528
  9982  0975  3000               	movlw	0
  9983  0976  0021               	movlb	1	; select bank1
  9984  0977  00A0               	movwf	___ftge@ff1^(0+128)
  9985  0978  3000               	movlw	0
  9986  0979  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9987  097A  3000               	movlw	0
  9988  097B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9989  097C  0022               	movlb	2	; select bank2
  9990  097D  0845               	movf	pow@y^(0+256),w
  9991  097E  0021               	movlb	1	; select bank1
  9992  097F  00A3               	movwf	___ftge@ff2^(0+128)
  9993  0980  0022               	movlb	2	; select bank2
  9994  0981  0846               	movf	(pow@y+1)^(0+256),w
  9995  0982  0021               	movlb	1	; select bank1
  9996  0983  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9997  0984  0022               	movlb	2	; select bank2
  9998  0985  0847               	movf	(pow@y+2)^(0+256),w
  9999  0986  0021               	movlb	1	; select bank1
 10000  0987  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10001  0988  3199  21D9  3189   	fcall	___ftge
 10002  098B  1C03               	btfss	3,0
 10003  098C  2992               	goto	l2104
 10004  098D  3021               	movlw	33
 10005  098E  0024               	movlb	4	; select bank4
 10006  098F  00CF               	movwf	_errno^(0+512)
 10007  0990  3000               	movlw	0
 10008  0991  00D0               	movwf	(_errno^(0+512)+1)
 10009  0992                     l2104:	
 10010  0992  3000               	movlw	0
 10011  0993  0022               	movlb	2	; select bank2
 10012  0994  00C2               	movwf	?_pow^(0+256)
 10013  0995  3000               	movlw	0
 10014  0996  00C3               	movwf	(?_pow+1)^(0+256)
 10015  0997  3000               	movlw	0
 10016  0998  00C4               	movwf	(?_pow+2)^(0+256)
 10017  0999  0008               	return
 10018  099A                     l7528:	
 10019  099A  0847               	movf	(pow@y+2)^(0+256),w
 10020  099B  0446               	iorwf	(pow@y+1)^(0+256),w
 10021  099C  0445               	iorwf	pow@y^(0+256),w
 10022  099D  1D03               	skipz
 10023  099E  29A6               	goto	l7534
 10024  099F  3000               	movlw	0
 10025  09A0  00C2               	movwf	?_pow^(0+256)
 10026  09A1  3080               	movlw	128
 10027  09A2  00C3               	movwf	(?_pow+1)^(0+256)
 10028  09A3  303F               	movlw	63
 10029  09A4  00C4               	movwf	(?_pow+2)^(0+256)
 10030  09A5  0008               	return
 10031  09A6                     l7534:	
 10032  09A6  0842               	movf	pow@x^(0+256),w
 10033  09A7  0021               	movlb	1	; select bank1
 10034  09A8  00A0               	movwf	___ftge@ff1^(0+128)
 10035  09A9  0022               	movlb	2	; select bank2
 10036  09AA  0843               	movf	(pow@x+1)^(0+256),w
 10037  09AB  0021               	movlb	1	; select bank1
 10038  09AC  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10039  09AD  0022               	movlb	2	; select bank2
 10040  09AE  0844               	movf	(pow@x+2)^(0+256),w
 10041  09AF  0021               	movlb	1	; select bank1
 10042  09B0  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10043  09B1  3000               	movlw	0
 10044  09B2  00A3               	movwf	___ftge@ff2^(0+128)
 10045  09B3  3000               	movlw	0
 10046  09B4  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10047  09B5  3000               	movlw	0
 10048  09B6  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10049  09B7  3199  21D9  3189   	fcall	___ftge
 10050  09BA  1803               	btfsc	3,0
 10051  09BB  2A2C               	goto	l7546
 10052  09BC  0022               	movlb	2	; select bank2
 10053  09BD  0845               	movf	pow@y^(0+256),w
 10054  09BE  0021               	movlb	1	; select bank1
 10055  09BF  00E7               	movwf	___fttol@f1^(0+128)
 10056  09C0  0022               	movlb	2	; select bank2
 10057  09C1  0846               	movf	(pow@y+1)^(0+256),w
 10058  09C2  0021               	movlb	1	; select bank1
 10059  09C3  00E8               	movwf	(___fttol@f1+1)^(0+128)
 10060  09C4  0022               	movlb	2	; select bank2
 10061  09C5  0847               	movf	(pow@y+2)^(0+256),w
 10062  09C6  0021               	movlb	1	; select bank1
 10063  09C7  00E9               	movwf	(___fttol@f1+2)^(0+128)
 10064  09C8  3192  22FE  3189   	fcall	___fttol
 10065  09CB  0021               	movlb	1	; select bank1
 10066  09CC  086A               	movf	(?___fttol+3)^(0+128),w
 10067  09CD  0022               	movlb	2	; select bank2
 10068  09CE  00D3               	movwf	(pow@yi+3)^(0+256)
 10069  09CF  0021               	movlb	1	; select bank1
 10070  09D0  0869               	movf	(?___fttol+2)^(0+128),w
 10071  09D1  0022               	movlb	2	; select bank2
 10072  09D2  00D2               	movwf	(pow@yi+2)^(0+256)
 10073  09D3  0021               	movlb	1	; select bank1
 10074  09D4  0868               	movf	(?___fttol+1)^(0+128),w
 10075  09D5  0022               	movlb	2	; select bank2
 10076  09D6  00D1               	movwf	(pow@yi+1)^(0+256)
 10077  09D7  0021               	movlb	1	; select bank1
 10078  09D8  0867               	movf	?___fttol^(0+128),w
 10079  09D9  0022               	movlb	2	; select bank2
 10080  09DA  00D0               	movwf	pow@yi^(0+256)
 10081  09DB  0853               	movf	(pow@yi+3)^(0+256),w
 10082  09DC  0021               	movlb	1	; select bank1
 10083  09DD  00AB               	movwf	(___lltoft@c+3)^(0+128)
 10084  09DE  0022               	movlb	2	; select bank2
 10085  09DF  0852               	movf	(pow@yi+2)^(0+256),w
 10086  09E0  0021               	movlb	1	; select bank1
 10087  09E1  00AA               	movwf	(___lltoft@c+2)^(0+128)
 10088  09E2  0022               	movlb	2	; select bank2
 10089  09E3  0851               	movf	(pow@yi+1)^(0+256),w
 10090  09E4  0021               	movlb	1	; select bank1
 10091  09E5  00A9               	movwf	(___lltoft@c+1)^(0+128)
 10092  09E6  0022               	movlb	2	; select bank2
 10093  09E7  0850               	movf	pow@yi^(0+256),w
 10094  09E8  0021               	movlb	1	; select bank1
 10095  09E9  00A8               	movwf	___lltoft@c^(0+128)
 10096  09EA  3198  2041  3189   	fcall	___lltoft
 10097  09ED  0022               	movlb	2	; select bank2
 10098  09EE  0847               	movf	(pow@y+2)^(0+256),w
 10099  09EF  0021               	movlb	1	; select bank1
 10100  09F0  062A               	xorwf	(?___lltoft+2)^(0+128),w
 10101  09F1  1D03               	skipz
 10102  09F2  29FD               	goto	u8025
 10103  09F3  0022               	movlb	2	; select bank2
 10104  09F4  0846               	movf	(pow@y+1)^(0+256),w
 10105  09F5  0021               	movlb	1	; select bank1
 10106  09F6  0629               	xorwf	(?___lltoft+1)^(0+128),w
 10107  09F7  1D03               	skipz
 10108  09F8  29FD               	goto	u8025
 10109  09F9  0022               	movlb	2	; select bank2
 10110  09FA  0845               	movf	pow@y^(0+256),w
 10111  09FB  0021               	movlb	1	; select bank1
 10112  09FC  0628               	xorwf	?___lltoft^(0+128),w
 10113  09FD                     u8025:	
 10114  09FD  1903               	skipnz
 10115  09FE  2A0C               	goto	l7542
 10116  09FF  3021               	movlw	33
 10117  0A00  0024               	movlb	4	; select bank4
 10118  0A01  00CF               	movwf	_errno^(0+512)
 10119  0A02  3000               	movlw	0
 10120  0A03  00D0               	movwf	(_errno^(0+512)+1)
 10121  0A04  3000               	movlw	0
 10122  0A05  0022               	movlb	2	; select bank2
 10123  0A06  00C2               	movwf	?_pow^(0+256)
 10124  0A07  3000               	movlw	0
 10125  0A08  00C3               	movwf	(?_pow+1)^(0+256)
 10126  0A09  3000               	movlw	0
 10127  0A0A  00C4               	movwf	(?_pow+2)^(0+256)
 10128  0A0B  0008               	return
 10129  0A0C                     l7542:	
 10130  0A0C  0022               	movlb	2	; select bank2
 10131  0A0D  0850               	movf	pow@yi^(0+256),w
 10132  0A0E  3901               	andlw	1
 10133  0A0F  00C8               	movwf	??_pow^(0+256)
 10134  0A10  0848               	movf	??_pow^(0+256),w
 10135  0A11  00CF               	movwf	pow@sign^(0+256)
 10136  0A12  0842               	movf	pow@x^(0+256),w
 10137  0A13  0021               	movlb	1	; select bank1
 10138  0A14  00A0               	movwf	___ftneg@f1^(0+128)
 10139  0A15  0022               	movlb	2	; select bank2
 10140  0A16  0843               	movf	(pow@x+1)^(0+256),w
 10141  0A17  0021               	movlb	1	; select bank1
 10142  0A18  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10143  0A19  0022               	movlb	2	; select bank2
 10144  0A1A  0844               	movf	(pow@x+2)^(0+256),w
 10145  0A1B  0021               	movlb	1	; select bank1
 10146  0A1C  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10147  0A1D  31A6  2686  3189   	fcall	___ftneg
 10148  0A20  0021               	movlb	1	; select bank1
 10149  0A21  0820               	movf	?___ftneg^(0+128),w
 10150  0A22  0022               	movlb	2	; select bank2
 10151  0A23  00C2               	movwf	pow@x^(0+256)
 10152  0A24  0021               	movlb	1	; select bank1
 10153  0A25  0821               	movf	(?___ftneg+1)^(0+128),w
 10154  0A26  0022               	movlb	2	; select bank2
 10155  0A27  00C3               	movwf	(pow@x+1)^(0+256)
 10156  0A28  0021               	movlb	1	; select bank1
 10157  0A29  0822               	movf	(?___ftneg+2)^(0+128),w
 10158  0A2A  0022               	movlb	2	; select bank2
 10159  0A2B  00C4               	movwf	(pow@x+2)^(0+256)
 10160  0A2C                     l7546:	
 10161  0A2C  0022               	movlb	2	; select bank2
 10162  0A2D  0842               	movf	pow@x^(0+256),w
 10163  0A2E  0021               	movlb	1	; select bank1
 10164  0A2F  00DF               	movwf	log@x^(0+128)
 10165  0A30  0022               	movlb	2	; select bank2
 10166  0A31  0843               	movf	(pow@x+1)^(0+256),w
 10167  0A32  0021               	movlb	1	; select bank1
 10168  0A33  00E0               	movwf	(log@x+1)^(0+128)
 10169  0A34  0022               	movlb	2	; select bank2
 10170  0A35  0844               	movf	(pow@x+2)^(0+256),w
 10171  0A36  0021               	movlb	1	; select bank1
 10172  0A37  00E1               	movwf	(log@x+2)^(0+128)
 10173  0A38  3194  2446  3189   	fcall	_log
 10174  0A3B  0021               	movlb	1	; select bank1
 10175  0A3C  085F               	movf	?_log^(0+128),w
 10176  0A3D  0022               	movlb	2	; select bank2
 10177  0A3E  00C9               	movwf	_pow$2645^(0+256)
 10178  0A3F  0021               	movlb	1	; select bank1
 10179  0A40  0860               	movf	(?_log+1)^(0+128),w
 10180  0A41  0022               	movlb	2	; select bank2
 10181  0A42  00CA               	movwf	(_pow$2645+1)^(0+256)
 10182  0A43  0021               	movlb	1	; select bank1
 10183  0A44  0861               	movf	(?_log+2)^(0+128),w
 10184  0A45  0022               	movlb	2	; select bank2
 10185  0A46  00CB               	movwf	(_pow$2645+2)^(0+256)
 10186  0A47  0845               	movf	pow@y^(0+256),w
 10187  0A48  0021               	movlb	1	; select bank1
 10188  0A49  00B8               	movwf	___ftmul@f1^(0+128)
 10189  0A4A  0022               	movlb	2	; select bank2
 10190  0A4B  0846               	movf	(pow@y+1)^(0+256),w
 10191  0A4C  0021               	movlb	1	; select bank1
 10192  0A4D  00B9               	movwf	(___ftmul@f1+1)^(0+128)
 10193  0A4E  0022               	movlb	2	; select bank2
 10194  0A4F  0847               	movf	(pow@y+2)^(0+256),w
 10195  0A50  0021               	movlb	1	; select bank1
 10196  0A51  00BA               	movwf	(___ftmul@f1+2)^(0+128)
 10197  0A52  0022               	movlb	2	; select bank2
 10198  0A53  0849               	movf	_pow$2645^(0+256),w
 10199  0A54  0021               	movlb	1	; select bank1
 10200  0A55  00BB               	movwf	___ftmul@f2^(0+128)
 10201  0A56  0022               	movlb	2	; select bank2
 10202  0A57  084A               	movf	(_pow$2645+1)^(0+256),w
 10203  0A58  0021               	movlb	1	; select bank1
 10204  0A59  00BC               	movwf	(___ftmul@f2+1)^(0+128)
 10205  0A5A  0022               	movlb	2	; select bank2
 10206  0A5B  084B               	movf	(_pow$2645+2)^(0+256),w
 10207  0A5C  0021               	movlb	1	; select bank1
 10208  0A5D  00BD               	movwf	(___ftmul@f2+2)^(0+128)
 10209  0A5E  3195  25A7  3189   	fcall	___ftmul
 10210  0A61  0021               	movlb	1	; select bank1
 10211  0A62  0838               	movf	?___ftmul^(0+128),w
 10212  0A63  0022               	movlb	2	; select bank2
 10213  0A64  00CC               	movwf	_pow$2646^(0+256)
 10214  0A65  0021               	movlb	1	; select bank1
 10215  0A66  0839               	movf	(?___ftmul+1)^(0+128),w
 10216  0A67  0022               	movlb	2	; select bank2
 10217  0A68  00CD               	movwf	(_pow$2646+1)^(0+256)
 10218  0A69  0021               	movlb	1	; select bank1
 10219  0A6A  083A               	movf	(?___ftmul+2)^(0+128),w
 10220  0A6B  0022               	movlb	2	; select bank2
 10221  0A6C  00CE               	movwf	(_pow$2646+2)^(0+256)
 10222  0A6D  084C               	movf	_pow$2646^(0+256),w
 10223  0A6E  00B6               	movwf	exp@x^(0+256)
 10224  0A6F  084D               	movf	(_pow$2646+1)^(0+256),w
 10225  0A70  00B7               	movwf	(exp@x+1)^(0+256)
 10226  0A71  084E               	movf	(_pow$2646+2)^(0+256),w
 10227  0A72  00B8               	movwf	(exp@x+2)^(0+256)
 10228  0A73  318A  229A  3189   	fcall	_exp
 10229  0A76  0022               	movlb	2	; select bank2
 10230  0A77  0836               	movf	?_exp^(0+256),w
 10231  0A78  00C2               	movwf	pow@x^(0+256)
 10232  0A79  0837               	movf	(?_exp+1)^(0+256),w
 10233  0A7A  00C3               	movwf	(pow@x+1)^(0+256)
 10234  0A7B  0838               	movf	(?_exp+2)^(0+256),w
 10235  0A7C  00C4               	movwf	(pow@x+2)^(0+256)
 10236  0A7D  084F               	movf	pow@sign^(0+256),w
 10237  0A7E  1903               	btfsc	3,2
 10238  0A7F  0008               	return
 10239  0A80  0842               	movf	pow@x^(0+256),w
 10240  0A81  0021               	movlb	1	; select bank1
 10241  0A82  00A0               	movwf	___ftneg@f1^(0+128)
 10242  0A83  0022               	movlb	2	; select bank2
 10243  0A84  0843               	movf	(pow@x+1)^(0+256),w
 10244  0A85  0021               	movlb	1	; select bank1
 10245  0A86  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10246  0A87  0022               	movlb	2	; select bank2
 10247  0A88  0844               	movf	(pow@x+2)^(0+256),w
 10248  0A89  0021               	movlb	1	; select bank1
 10249  0A8A  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10250  0A8B  31A6  2686         	fcall	___ftneg
 10251  0A8D  0021               	movlb	1	; select bank1
 10252  0A8E  0820               	movf	?___ftneg^(0+128),w
 10253  0A8F  0022               	movlb	2	; select bank2
 10254  0A90  00C2               	movwf	?_pow^(0+256)
 10255  0A91  0021               	movlb	1	; select bank1
 10256  0A92  0821               	movf	(?___ftneg+1)^(0+128),w
 10257  0A93  0022               	movlb	2	; select bank2
 10258  0A94  00C3               	movwf	(?_pow+1)^(0+256)
 10259  0A95  0021               	movlb	1	; select bank1
 10260  0A96  0822               	movf	(?___ftneg+2)^(0+128),w
 10261  0A97  0022               	movlb	2	; select bank2
 10262  0A98  00C4               	movwf	(?_pow+2)^(0+256)
 10263  0A99  0008               	return
 10264  0A9A                     __end_of_pow:	
 10265                           
 10266                           	psect	text20
 10267  1446                     __ptext20:	
 10268 ;; *************** function _log *****************
 10269 ;; Defined at:
 10270 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  x               3   63[BANK1 ] unsigned char 
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;  exponent        2   66[BANK1 ] int 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  3   63[BANK1 ] int 
 10277 ;; Registers used:
 10278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10284 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10285 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10287 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10288 ;;Total ram usage:        5 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    6
 10291 ;; This function calls:
 10292 ;;		___awtoft
 10293 ;;		___ftadd
 10294 ;;		___ftge
 10295 ;;		___ftmul
 10296 ;;		_eval_poly
 10297 ;;		_frexp
 10298 ;; This function is called by:
 10299 ;;		_pow
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           
 10304                           ;psect for function _log
 10305  1446                     _log:	
 10306                           
 10307                           ;incstack = 0
 10308                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10309  1446  0021               	movlb	1	; select bank1
 10310  1447  085F               	movf	log@x^(0+128),w
 10311  1448  00A0               	movwf	___ftge@ff1^(0+128)
 10312  1449  0860               	movf	(log@x+1)^(0+128),w
 10313  144A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10314  144B  0861               	movf	(log@x+2)^(0+128),w
 10315  144C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10316  144D  3000               	movlw	0
 10317  144E  00A3               	movwf	___ftge@ff2^(0+128)
 10318  144F  3000               	movlw	0
 10319  1450  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10320  1451  3000               	movlw	0
 10321  1452  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10322  1453  3199  21D9  3194   	fcall	___ftge
 10323  1456  1803               	btfsc	3,0
 10324  1457  2C65               	goto	l7402
 10325  1458  3021               	movlw	33
 10326  1459  0024               	movlb	4	; select bank4
 10327  145A  00CF               	movwf	_errno^(0+512)
 10328  145B  3000               	movlw	0
 10329  145C  00D0               	movwf	(_errno^(0+512)+1)
 10330  145D  3000               	movlw	0
 10331  145E  0021               	movlb	1	; select bank1
 10332  145F  00DF               	movwf	?_log^(0+128)
 10333  1460  3000               	movlw	0
 10334  1461  00E0               	movwf	(?_log+1)^(0+128)
 10335  1462  3000               	movlw	0
 10336  1463  00E1               	movwf	(?_log+2)^(0+128)
 10337  1464  0008               	return
 10338  1465                     l7402:	
 10339  1465  0021               	movlb	1	; select bank1
 10340  1466  0861               	movf	(log@x+2)^(0+128),w
 10341  1467  0460               	iorwf	(log@x+1)^(0+128),w
 10342  1468  045F               	iorwf	log@x^(0+128),w
 10343  1469  1D03               	skipz
 10344  146A  2C78               	goto	l7408
 10345  146B  3022               	movlw	34
 10346  146C  0024               	movlb	4	; select bank4
 10347  146D  00CF               	movwf	_errno^(0+512)
 10348  146E  3000               	movlw	0
 10349  146F  00D0               	movwf	(_errno^(0+512)+1)
 10350  1470  3000               	movlw	0
 10351  1471  0021               	movlb	1	; select bank1
 10352  1472  00DF               	movwf	?_log^(0+128)
 10353  1473  3000               	movlw	0
 10354  1474  00E0               	movwf	(?_log+1)^(0+128)
 10355  1475  3000               	movlw	0
 10356  1476  00E1               	movwf	(?_log+2)^(0+128)
 10357  1477  0008               	return
 10358  1478                     l7408:	
 10359  1478  3000               	movlw	0
 10360  1479  00C8               	movwf	___ftadd@f1^(0+128)
 10361  147A  3080               	movlw	128
 10362  147B  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 10363  147C  30BF               	movlw	191
 10364  147D  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 10365  147E  3000               	movlw	0
 10366  147F  00B8               	movwf	___ftmul@f1^(0+128)
 10367  1480  3000               	movlw	0
 10368  1481  00B9               	movwf	(___ftmul@f1+1)^(0+128)
 10369  1482  3040               	movlw	64
 10370  1483  00BA               	movwf	(___ftmul@f1+2)^(0+128)
 10371  1484  30E2               	movlw	low log@exponent
 10372  1485  00A3               	movwf	frexp@eptr^(0+128)
 10373  1486  3000               	movlw	high log@exponent
 10374  1487  00A4               	movwf	(frexp@eptr+1)^(0+128)
 10375  1488  085F               	movf	log@x^(0+128),w
 10376  1489  00A0               	movwf	frexp@value^(0+128)
 10377  148A  0860               	movf	(log@x+1)^(0+128),w
 10378  148B  00A1               	movwf	(frexp@value+1)^(0+128)
 10379  148C  0861               	movf	(log@x+2)^(0+128),w
 10380  148D  00A2               	movwf	(frexp@value+2)^(0+128)
 10381  148E  319B  2347  3194   	fcall	_frexp
 10382  1491  0021               	movlb	1	; select bank1
 10383  1492  0820               	movf	?_frexp^(0+128),w
 10384  1493  00BB               	movwf	___ftmul@f2^(0+128)
 10385  1494  0821               	movf	(?_frexp+1)^(0+128),w
 10386  1495  00BC               	movwf	(___ftmul@f2+1)^(0+128)
 10387  1496  0822               	movf	(?_frexp+2)^(0+128),w
 10388  1497  00BD               	movwf	(___ftmul@f2+2)^(0+128)
 10389  1498  3195  25A7  3194   	fcall	___ftmul
 10390  149B  0021               	movlb	1	; select bank1
 10391  149C  0838               	movf	?___ftmul^(0+128),w
 10392  149D  00CB               	movwf	___ftadd@f2^(0+128)
 10393  149E  0839               	movf	(?___ftmul+1)^(0+128),w
 10394  149F  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 10395  14A0  083A               	movf	(?___ftmul+2)^(0+128),w
 10396  14A1  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 10397  14A2  3188  2078  3194   	fcall	___ftadd
 10398  14A5  0021               	movlb	1	; select bank1
 10399  14A6  0848               	movf	?___ftadd^(0+128),w
 10400  14A7  00DF               	movwf	log@x^(0+128)
 10401  14A8  0849               	movf	(?___ftadd+1)^(0+128),w
 10402  14A9  00E0               	movwf	(log@x+1)^(0+128)
 10403  14AA  084A               	movf	(?___ftadd+2)^(0+128),w
 10404  14AB  00E1               	movwf	(log@x+2)^(0+128)
 10405  14AC  30FF               	movlw	255
 10406  14AD  07E2               	addwf	log@exponent^(0+128),f
 10407  14AE  30FF               	movlw	255
 10408  14AF  3DE3               	addwfc	(log@exponent+1)^(0+128),f
 10409  14B0  085F               	movf	log@x^(0+128),w
 10410  14B1  00D5               	movwf	eval_poly@x^(0+128)
 10411  14B2  0860               	movf	(log@x+1)^(0+128),w
 10412  14B3  00D6               	movwf	(eval_poly@x+1)^(0+128)
 10413  14B4  0861               	movf	(log@x+2)^(0+128),w
 10414  14B5  00D7               	movwf	(eval_poly@x+2)^(0+128)
 10415  14B6  301E               	movlw	low (log@coeff| (0+32768))
 10416  14B7  00D8               	movwf	eval_poly@d^(0+128)
 10417  14B8  30A0               	movlw	high (log@coeff| (0+32768))
 10418  14B9  00D9               	movwf	(eval_poly@d^(0+128)+1)
 10419  14BA  3008               	movlw	8
 10420  14BB  00DA               	movwf	eval_poly@n^(0+128)
 10421  14BC  3000               	movlw	0
 10422  14BD  00DB               	movwf	(eval_poly@n^(0+128)+1)
 10423  14BE  319F  27A0  3194   	fcall	_eval_poly
 10424  14C1  0021               	movlb	1	; select bank1
 10425  14C2  0855               	movf	?_eval_poly^(0+128),w
 10426  14C3  00DF               	movwf	log@x^(0+128)
 10427  14C4  0856               	movf	(?_eval_poly+1)^(0+128),w
 10428  14C5  00E0               	movwf	(log@x+1)^(0+128)
 10429  14C6  0857               	movf	(?_eval_poly+2)^(0+128),w
 10430  14C7  00E1               	movwf	(log@x+2)^(0+128)
 10431  14C8  085F               	movf	log@x^(0+128),w
 10432  14C9  00C8               	movwf	___ftadd@f1^(0+128)
 10433  14CA  0860               	movf	(log@x+1)^(0+128),w
 10434  14CB  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 10435  14CC  0861               	movf	(log@x+2)^(0+128),w
 10436  14CD  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 10437  14CE  3072               	movlw	114
 10438  14CF  00B8               	movwf	___ftmul@f1^(0+128)
 10439  14D0  3031               	movlw	49
 10440  14D1  00B9               	movwf	(___ftmul@f1+1)^(0+128)
 10441  14D2  303F               	movlw	63
 10442  14D3  00BA               	movwf	(___ftmul@f1+2)^(0+128)
 10443  14D4  0863               	movf	(log@exponent+1)^(0+128),w
 10444  14D5  00A9               	movwf	(___awtoft@c+1)^(0+128)
 10445  14D6  0862               	movf	log@exponent^(0+128),w
 10446  14D7  00A8               	movwf	___awtoft@c^(0+128)
 10447  14D8  31A7  27BA  3194   	fcall	___awtoft
 10448  14DB  0021               	movlb	1	; select bank1
 10449  14DC  0828               	movf	?___awtoft^(0+128),w
 10450  14DD  00BB               	movwf	___ftmul@f2^(0+128)
 10451  14DE  0829               	movf	(?___awtoft+1)^(0+128),w
 10452  14DF  00BC               	movwf	(___ftmul@f2+1)^(0+128)
 10453  14E0  082A               	movf	(?___awtoft+2)^(0+128),w
 10454  14E1  00BD               	movwf	(___ftmul@f2+2)^(0+128)
 10455  14E2  3195  25A7  3194   	fcall	___ftmul
 10456  14E5  0021               	movlb	1	; select bank1
 10457  14E6  0838               	movf	?___ftmul^(0+128),w
 10458  14E7  00CB               	movwf	___ftadd@f2^(0+128)
 10459  14E8  0839               	movf	(?___ftmul+1)^(0+128),w
 10460  14E9  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 10461  14EA  083A               	movf	(?___ftmul+2)^(0+128),w
 10462  14EB  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 10463  14EC  3188  2078         	fcall	___ftadd
 10464  14EE  0021               	movlb	1	; select bank1
 10465  14EF  0848               	movf	?___ftadd^(0+128),w
 10466  14F0  00DF               	movwf	?_log^(0+128)
 10467  14F1  0849               	movf	(?___ftadd+1)^(0+128),w
 10468  14F2  00E0               	movwf	(?_log+1)^(0+128)
 10469  14F3  084A               	movf	(?___ftadd+2)^(0+128),w
 10470  14F4  00E1               	movwf	(?_log+2)^(0+128)
 10471  14F5  0008               	return
 10472  14F6                     __end_of_log:	
 10473                           
 10474                           	psect	text21
 10475  0A9A                     __ptext21:	
 10476 ;; *************** function _exp *****************
 10477 ;; Defined at:
 10478 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  x               3   22[BANK2 ] int 
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  exponent        2   31[BANK2 ] int 
 10483 ;;  sign            1   33[BANK2 ] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  3   22[BANK2 ] unsigned char 
 10486 ;; Registers used:
 10487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10493 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10494 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10495 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10496 ;;      Totals:         0       0       1      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10497 ;;Total ram usage:       13 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    6
 10500 ;; This function calls:
 10501 ;;		___awtoft
 10502 ;;		___ftdiv
 10503 ;;		___ftge
 10504 ;;		___ftmul
 10505 ;;		___ftneg
 10506 ;;		___ftsub
 10507 ;;		___fttol
 10508 ;;		_eval_poly
 10509 ;;		_floor
 10510 ;;		_ldexp
 10511 ;; This function is called by:
 10512 ;;		_pow
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _exp
 10518  0A9A                     _exp:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10522  0A9A  0022               	movlb	2	; select bank2
 10523  0A9B  0838               	movf	(exp@x+2)^(0+256),w
 10524  0A9C  0437               	iorwf	(exp@x+1)^(0+256),w
 10525  0A9D  0436               	iorwf	exp@x^(0+256),w
 10526  0A9E  1D03               	skipz
 10527  0A9F  2AA7               	goto	l7424
 10528  0AA0  3000               	movlw	0
 10529  0AA1  00B6               	movwf	?_exp^(0+256)
 10530  0AA2  3080               	movlw	128
 10531  0AA3  00B7               	movwf	(?_exp+1)^(0+256)
 10532  0AA4  303F               	movlw	63
 10533  0AA5  00B8               	movwf	(?_exp+2)^(0+256)
 10534  0AA6  0008               	return
 10535  0AA7                     l7424:	
 10536  0AA7  3072               	movlw	114
 10537  0AA8  0021               	movlb	1	; select bank1
 10538  0AA9  00A0               	movwf	___ftge@ff1^(0+128)
 10539  0AAA  3031               	movlw	49
 10540  0AAB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10541  0AAC  3044               	movlw	68
 10542  0AAD  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10543  0AAE  0022               	movlb	2	; select bank2
 10544  0AAF  0836               	movf	exp@x^(0+256),w
 10545  0AB0  0021               	movlb	1	; select bank1
 10546  0AB1  00A3               	movwf	___ftge@ff2^(0+128)
 10547  0AB2  0022               	movlb	2	; select bank2
 10548  0AB3  0837               	movf	(exp@x+1)^(0+256),w
 10549  0AB4  0021               	movlb	1	; select bank1
 10550  0AB5  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10551  0AB6  0022               	movlb	2	; select bank2
 10552  0AB7  0838               	movf	(exp@x+2)^(0+256),w
 10553  0AB8  0021               	movlb	1	; select bank1
 10554  0AB9  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10555  0ABA  3199  21D9  318A   	fcall	___ftge
 10556  0ABD  1803               	btfsc	3,0
 10557  0ABE  2ACC               	goto	l7434
 10558  0ABF  3022               	movlw	34
 10559  0AC0  0024               	movlb	4	; select bank4
 10560  0AC1  00CF               	movwf	_errno^(0+512)
 10561  0AC2  3000               	movlw	0
 10562  0AC3  00D0               	movwf	(_errno^(0+512)+1)
 10563  0AC4  30FF               	movlw	255
 10564  0AC5  0022               	movlb	2	; select bank2
 10565  0AC6  00B6               	movwf	?_exp^(0+256)
 10566  0AC7  307F               	movlw	127
 10567  0AC8  00B7               	movwf	(?_exp+1)^(0+256)
 10568  0AC9  307F               	movlw	127
 10569  0ACA  00B8               	movwf	(?_exp+2)^(0+256)
 10570  0ACB  0008               	return
 10571  0ACC                     l7434:	
 10572  0ACC  0022               	movlb	2	; select bank2
 10573  0ACD  0836               	movf	exp@x^(0+256),w
 10574  0ACE  0021               	movlb	1	; select bank1
 10575  0ACF  00A0               	movwf	___ftge@ff1^(0+128)
 10576  0AD0  0022               	movlb	2	; select bank2
 10577  0AD1  0837               	movf	(exp@x+1)^(0+256),w
 10578  0AD2  0021               	movlb	1	; select bank1
 10579  0AD3  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10580  0AD4  0022               	movlb	2	; select bank2
 10581  0AD5  0838               	movf	(exp@x+2)^(0+256),w
 10582  0AD6  0021               	movlb	1	; select bank1
 10583  0AD7  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10584  0AD8  3049               	movlw	73
 10585  0AD9  00A3               	movwf	___ftge@ff2^(0+128)
 10586  0ADA  303A               	movlw	58
 10587  0ADB  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10588  0ADC  30C4               	movlw	196
 10589  0ADD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10590  0ADE  3199  21D9  318A   	fcall	___ftge
 10591  0AE1  1803               	btfsc	3,0
 10592  0AE2  2AF0               	goto	l7440
 10593  0AE3  3022               	movlw	34
 10594  0AE4  0024               	movlb	4	; select bank4
 10595  0AE5  00CF               	movwf	_errno^(0+512)
 10596  0AE6  3000               	movlw	0
 10597  0AE7  00D0               	movwf	(_errno^(0+512)+1)
 10598  0AE8  3000               	movlw	0
 10599  0AE9  0022               	movlb	2	; select bank2
 10600  0AEA  00B6               	movwf	?_exp^(0+256)
 10601  0AEB  3000               	movlw	0
 10602  0AEC  00B7               	movwf	(?_exp+1)^(0+256)
 10603  0AED  3000               	movlw	0
 10604  0AEE  00B8               	movwf	(?_exp+2)^(0+256)
 10605  0AEF  0008               	return
 10606  0AF0                     l7440:	
 10607  0AF0  0022               	movlb	2	; select bank2
 10608  0AF1  0836               	movf	exp@x^(0+256),w
 10609  0AF2  0021               	movlb	1	; select bank1
 10610  0AF3  00A0               	movwf	___ftge@ff1^(0+128)
 10611  0AF4  0022               	movlb	2	; select bank2
 10612  0AF5  0837               	movf	(exp@x+1)^(0+256),w
 10613  0AF6  0021               	movlb	1	; select bank1
 10614  0AF7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10615  0AF8  0022               	movlb	2	; select bank2
 10616  0AF9  0838               	movf	(exp@x+2)^(0+256),w
 10617  0AFA  0021               	movlb	1	; select bank1
 10618  0AFB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10619  0AFC  3000               	movlw	0
 10620  0AFD  00A3               	movwf	___ftge@ff2^(0+128)
 10621  0AFE  3000               	movlw	0
 10622  0AFF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10623  0B00  3000               	movlw	0
 10624  0B01  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10625  0B02  3199  21D9  318A   	fcall	___ftge
 10626  0B05  1803               	btfsc	3,0
 10627  0B06  2B09               	goto	u7910
 10628  0B07  3001               	movlw	1
 10629  0B08  2B0A               	goto	u7920
 10630  0B09                     u7910:	
 10631  0B09  3000               	movlw	0
 10632  0B0A                     u7920:	
 10633  0B0A  0021               	movlb	1	; select bank1
 10634  0B0B  00EF               	movwf	??_exp^(0+128)
 10635  0B0C  086F               	movf	??_exp^(0+128),w
 10636  0B0D  0022               	movlb	2	; select bank2
 10637  0B0E  00C1               	movwf	exp@sign^(0+256)
 10638  0B0F  0841               	movf	exp@sign^(0+256),w
 10639  0B10  1903               	btfsc	3,2
 10640  0B11  2B2C               	goto	l7446
 10641  0B12  0836               	movf	exp@x^(0+256),w
 10642  0B13  0021               	movlb	1	; select bank1
 10643  0B14  00A0               	movwf	___ftneg@f1^(0+128)
 10644  0B15  0022               	movlb	2	; select bank2
 10645  0B16  0837               	movf	(exp@x+1)^(0+256),w
 10646  0B17  0021               	movlb	1	; select bank1
 10647  0B18  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10648  0B19  0022               	movlb	2	; select bank2
 10649  0B1A  0838               	movf	(exp@x+2)^(0+256),w
 10650  0B1B  0021               	movlb	1	; select bank1
 10651  0B1C  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10652  0B1D  31A6  2686  318A   	fcall	___ftneg
 10653  0B20  0021               	movlb	1	; select bank1
 10654  0B21  0820               	movf	?___ftneg^(0+128),w
 10655  0B22  0022               	movlb	2	; select bank2
 10656  0B23  00B6               	movwf	exp@x^(0+256)
 10657  0B24  0021               	movlb	1	; select bank1
 10658  0B25  0821               	movf	(?___ftneg+1)^(0+128),w
 10659  0B26  0022               	movlb	2	; select bank2
 10660  0B27  00B7               	movwf	(exp@x+1)^(0+256)
 10661  0B28  0021               	movlb	1	; select bank1
 10662  0B29  0822               	movf	(?___ftneg+2)^(0+128),w
 10663  0B2A  0022               	movlb	2	; select bank2
 10664  0B2B  00B8               	movwf	(exp@x+2)^(0+256)
 10665  0B2C                     l7446:	
 10666  0B2C  30AA               	movlw	170
 10667  0B2D  0021               	movlb	1	; select bank1
 10668  0B2E  00B8               	movwf	___ftmul@f1^(0+128)
 10669  0B2F  30B8               	movlw	184
 10670  0B30  00B9               	movwf	(___ftmul@f1+1)^(0+128)
 10671  0B31  303F               	movlw	63
 10672  0B32  00BA               	movwf	(___ftmul@f1+2)^(0+128)
 10673  0B33  0022               	movlb	2	; select bank2
 10674  0B34  0836               	movf	exp@x^(0+256),w
 10675  0B35  0021               	movlb	1	; select bank1
 10676  0B36  00BB               	movwf	___ftmul@f2^(0+128)
 10677  0B37  0022               	movlb	2	; select bank2
 10678  0B38  0837               	movf	(exp@x+1)^(0+256),w
 10679  0B39  0021               	movlb	1	; select bank1
 10680  0B3A  00BC               	movwf	(___ftmul@f2+1)^(0+128)
 10681  0B3B  0022               	movlb	2	; select bank2
 10682  0B3C  0838               	movf	(exp@x+2)^(0+256),w
 10683  0B3D  0021               	movlb	1	; select bank1
 10684  0B3E  00BD               	movwf	(___ftmul@f2+2)^(0+128)
 10685  0B3F  3195  25A7  318A   	fcall	___ftmul
 10686  0B42  0021               	movlb	1	; select bank1
 10687  0B43  0838               	movf	?___ftmul^(0+128),w
 10688  0B44  0022               	movlb	2	; select bank2
 10689  0B45  00B6               	movwf	exp@x^(0+256)
 10690  0B46  0021               	movlb	1	; select bank1
 10691  0B47  0839               	movf	(?___ftmul+1)^(0+128),w
 10692  0B48  0022               	movlb	2	; select bank2
 10693  0B49  00B7               	movwf	(exp@x+1)^(0+256)
 10694  0B4A  0021               	movlb	1	; select bank1
 10695  0B4B  083A               	movf	(?___ftmul+2)^(0+128),w
 10696  0B4C  0022               	movlb	2	; select bank2
 10697  0B4D  00B8               	movwf	(exp@x+2)^(0+256)
 10698  0B4E  0836               	movf	exp@x^(0+256),w
 10699  0B4F  00AE               	movwf	floor@x^(0+256)
 10700  0B50  0837               	movf	(exp@x+1)^(0+256),w
 10701  0B51  00AF               	movwf	(floor@x+1)^(0+256)
 10702  0B52  0838               	movf	(exp@x+2)^(0+256),w
 10703  0B53  00B0               	movwf	(floor@x+2)^(0+256)
 10704  0B54  3194  24F6  318A   	fcall	_floor
 10705  0B57  0022               	movlb	2	; select bank2
 10706  0B58  082E               	movf	?_floor^(0+256),w
 10707  0B59  00B9               	movwf	_exp$2647^(0+256)
 10708  0B5A  082F               	movf	(?_floor+1)^(0+256),w
 10709  0B5B  00BA               	movwf	(_exp$2647+1)^(0+256)
 10710  0B5C  0830               	movf	(?_floor+2)^(0+256),w
 10711  0B5D  00BB               	movwf	(_exp$2647+2)^(0+256)
 10712  0B5E  0839               	movf	_exp$2647^(0+256),w
 10713  0B5F  0021               	movlb	1	; select bank1
 10714  0B60  00E7               	movwf	___fttol@f1^(0+128)
 10715  0B61  0022               	movlb	2	; select bank2
 10716  0B62  083A               	movf	(_exp$2647+1)^(0+256),w
 10717  0B63  0021               	movlb	1	; select bank1
 10718  0B64  00E8               	movwf	(___fttol@f1+1)^(0+128)
 10719  0B65  0022               	movlb	2	; select bank2
 10720  0B66  083B               	movf	(_exp$2647+2)^(0+256),w
 10721  0B67  0021               	movlb	1	; select bank1
 10722  0B68  00E9               	movwf	(___fttol@f1+2)^(0+128)
 10723  0B69  3192  22FE  318A   	fcall	___fttol
 10724  0B6C  0021               	movlb	1	; select bank1
 10725  0B6D  0868               	movf	(?___fttol^(0+128)+1),w
 10726  0B6E  0022               	movlb	2	; select bank2
 10727  0B6F  00C0               	movwf	(exp@exponent+1)^(0+256)
 10728  0B70  0021               	movlb	1	; select bank1
 10729  0B71  0867               	movf	?___fttol^(0+128),w
 10730  0B72  0022               	movlb	2	; select bank2
 10731  0B73  00BF               	movwf	exp@exponent^(0+256)
 10732  0B74  0840               	movf	(exp@exponent+1)^(0+256),w
 10733  0B75  0021               	movlb	1	; select bank1
 10734  0B76  00A9               	movwf	(___awtoft@c+1)^(0+128)
 10735  0B77  0022               	movlb	2	; select bank2
 10736  0B78  083F               	movf	exp@exponent^(0+256),w
 10737  0B79  0021               	movlb	1	; select bank1
 10738  0B7A  00A8               	movwf	___awtoft@c^(0+128)
 10739  0B7B  31A7  27BA  318A   	fcall	___awtoft
 10740  0B7E  0021               	movlb	1	; select bank1
 10741  0B7F  0828               	movf	?___awtoft^(0+128),w
 10742  0B80  00D5               	movwf	___ftsub@f2^(0+128)
 10743  0B81  0829               	movf	(?___awtoft+1)^(0+128),w
 10744  0B82  00D6               	movwf	(___ftsub@f2+1)^(0+128)
 10745  0B83  082A               	movf	(?___awtoft+2)^(0+128),w
 10746  0B84  00D7               	movwf	(___ftsub@f2+2)^(0+128)
 10747  0B85  0022               	movlb	2	; select bank2
 10748  0B86  0836               	movf	exp@x^(0+256),w
 10749  0B87  0021               	movlb	1	; select bank1
 10750  0B88  00D8               	movwf	___ftsub@f1^(0+128)
 10751  0B89  0022               	movlb	2	; select bank2
 10752  0B8A  0837               	movf	(exp@x+1)^(0+256),w
 10753  0B8B  0021               	movlb	1	; select bank1
 10754  0B8C  00D9               	movwf	(___ftsub@f1+1)^(0+128)
 10755  0B8D  0022               	movlb	2	; select bank2
 10756  0B8E  0838               	movf	(exp@x+2)^(0+256),w
 10757  0B8F  0021               	movlb	1	; select bank1
 10758  0B90  00DA               	movwf	(___ftsub@f1+2)^(0+128)
 10759  0B91  31A7  277C  318A   	fcall	___ftsub
 10760  0B94  0021               	movlb	1	; select bank1
 10761  0B95  0855               	movf	?___ftsub^(0+128),w
 10762  0B96  0022               	movlb	2	; select bank2
 10763  0B97  00B6               	movwf	exp@x^(0+256)
 10764  0B98  0021               	movlb	1	; select bank1
 10765  0B99  0856               	movf	(?___ftsub+1)^(0+128),w
 10766  0B9A  0022               	movlb	2	; select bank2
 10767  0B9B  00B7               	movwf	(exp@x+1)^(0+256)
 10768  0B9C  0021               	movlb	1	; select bank1
 10769  0B9D  0857               	movf	(?___ftsub+2)^(0+128),w
 10770  0B9E  0022               	movlb	2	; select bank2
 10771  0B9F  00B8               	movwf	(exp@x+2)^(0+256)
 10772  0BA0  0836               	movf	exp@x^(0+256),w
 10773  0BA1  0021               	movlb	1	; select bank1
 10774  0BA2  00D5               	movwf	eval_poly@x^(0+128)
 10775  0BA3  0022               	movlb	2	; select bank2
 10776  0BA4  0837               	movf	(exp@x+1)^(0+256),w
 10777  0BA5  0021               	movlb	1	; select bank1
 10778  0BA6  00D6               	movwf	(eval_poly@x+1)^(0+128)
 10779  0BA7  0022               	movlb	2	; select bank2
 10780  0BA8  0838               	movf	(exp@x+2)^(0+256),w
 10781  0BA9  0021               	movlb	1	; select bank1
 10782  0BAA  00D7               	movwf	(eval_poly@x+2)^(0+128)
 10783  0BAB  3000               	movlw	low (exp@coeff| (0+32768))
 10784  0BAC  00D8               	movwf	eval_poly@d^(0+128)
 10785  0BAD  30A0               	movlw	high (exp@coeff| (0+32768))
 10786  0BAE  00D9               	movwf	(eval_poly@d^(0+128)+1)
 10787  0BAF  3009               	movlw	9
 10788  0BB0  00DA               	movwf	eval_poly@n^(0+128)
 10789  0BB1  3000               	movlw	0
 10790  0BB2  00DB               	movwf	(eval_poly@n^(0+128)+1)
 10791  0BB3  319F  27A0  318A   	fcall	_eval_poly
 10792  0BB6  0021               	movlb	1	; select bank1
 10793  0BB7  0855               	movf	?_eval_poly^(0+128),w
 10794  0BB8  00DF               	movwf	ldexp@value^(0+128)
 10795  0BB9  0856               	movf	(?_eval_poly+1)^(0+128),w
 10796  0BBA  00E0               	movwf	(ldexp@value+1)^(0+128)
 10797  0BBB  0857               	movf	(?_eval_poly+2)^(0+128),w
 10798  0BBC  00E1               	movwf	(ldexp@value+2)^(0+128)
 10799  0BBD  0022               	movlb	2	; select bank2
 10800  0BBE  0840               	movf	(exp@exponent+1)^(0+256),w
 10801  0BBF  0021               	movlb	1	; select bank1
 10802  0BC0  00E3               	movwf	(ldexp@newexp+1)^(0+128)
 10803  0BC1  0022               	movlb	2	; select bank2
 10804  0BC2  083F               	movf	exp@exponent^(0+256),w
 10805  0BC3  0021               	movlb	1	; select bank1
 10806  0BC4  00E2               	movwf	ldexp@newexp^(0+128)
 10807  0BC5  3191  21EB  318A   	fcall	_ldexp
 10808  0BC8  0021               	movlb	1	; select bank1
 10809  0BC9  085F               	movf	?_ldexp^(0+128),w
 10810  0BCA  0022               	movlb	2	; select bank2
 10811  0BCB  00B6               	movwf	exp@x^(0+256)
 10812  0BCC  0021               	movlb	1	; select bank1
 10813  0BCD  0860               	movf	(?_ldexp+1)^(0+128),w
 10814  0BCE  0022               	movlb	2	; select bank2
 10815  0BCF  00B7               	movwf	(exp@x+1)^(0+256)
 10816  0BD0  0021               	movlb	1	; select bank1
 10817  0BD1  0861               	movf	(?_ldexp+2)^(0+128),w
 10818  0BD2  0022               	movlb	2	; select bank2
 10819  0BD3  00B8               	movwf	(exp@x+2)^(0+256)
 10820  0BD4  0841               	movf	exp@sign^(0+256),w
 10821  0BD5  1903               	btfsc	3,2
 10822  0BD6  0008               	return
 10823  0BD7  30FF               	movlw	255
 10824  0BD8  00BC               	movwf	_exp$2409^(0+256)
 10825  0BD9  307F               	movlw	127
 10826  0BDA  00BD               	movwf	(_exp$2409+1)^(0+256)
 10827  0BDB  307F               	movlw	127
 10828  0BDC  00BE               	movwf	(_exp$2409+2)^(0+256)
 10829  0BDD  0838               	movf	(exp@x+2)^(0+256),w
 10830  0BDE  063E               	xorwf	(_exp$2409+2)^(0+256),w
 10831  0BDF  1D03               	skipz
 10832  0BE0  2BE7               	goto	u7955
 10833  0BE1  0837               	movf	(exp@x+1)^(0+256),w
 10834  0BE2  063D               	xorwf	(_exp$2409+1)^(0+256),w
 10835  0BE3  1D03               	skipz
 10836  0BE4  2BE7               	goto	u7955
 10837  0BE5  0836               	movf	exp@x^(0+256),w
 10838  0BE6  063C               	xorwf	_exp$2409^(0+256),w
 10839  0BE7                     u7955:	
 10840  0BE7  1D03               	skipz
 10841  0BE8  2BF0               	goto	l7468
 10842  0BE9  3000               	movlw	0
 10843  0BEA  00B6               	movwf	?_exp^(0+256)
 10844  0BEB  3000               	movlw	0
 10845  0BEC  00B7               	movwf	(?_exp+1)^(0+256)
 10846  0BED  3000               	movlw	0
 10847  0BEE  00B8               	movwf	(?_exp+2)^(0+256)
 10848  0BEF  0008               	return
 10849  0BF0                     l7468:	
 10850  0BF0  0836               	movf	exp@x^(0+256),w
 10851  0BF1  0021               	movlb	1	; select bank1
 10852  0BF2  00A8               	movwf	___ftdiv@f2^(0+128)
 10853  0BF3  0022               	movlb	2	; select bank2
 10854  0BF4  0837               	movf	(exp@x+1)^(0+256),w
 10855  0BF5  0021               	movlb	1	; select bank1
 10856  0BF6  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
 10857  0BF7  0022               	movlb	2	; select bank2
 10858  0BF8  0838               	movf	(exp@x+2)^(0+256),w
 10859  0BF9  0021               	movlb	1	; select bank1
 10860  0BFA  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
 10861  0BFB  3000               	movlw	0
 10862  0BFC  00AB               	movwf	___ftdiv@f1^(0+128)
 10863  0BFD  3080               	movlw	128
 10864  0BFE  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
 10865  0BFF  303F               	movlw	63
 10866  0C00  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
 10867  0C01  3193  239D         	fcall	___ftdiv
 10868  0C03  0021               	movlb	1	; select bank1
 10869  0C04  0828               	movf	?___ftdiv^(0+128),w
 10870  0C05  0022               	movlb	2	; select bank2
 10871  0C06  00B6               	movwf	?_exp^(0+256)
 10872  0C07  0021               	movlb	1	; select bank1
 10873  0C08  0829               	movf	(?___ftdiv+1)^(0+128),w
 10874  0C09  0022               	movlb	2	; select bank2
 10875  0C0A  00B7               	movwf	(?_exp+1)^(0+256)
 10876  0C0B  0021               	movlb	1	; select bank1
 10877  0C0C  082A               	movf	(?___ftdiv+2)^(0+128),w
 10878  0C0D  0022               	movlb	2	; select bank2
 10879  0C0E  00B8               	movwf	(?_exp+2)^(0+256)
 10880  0C0F  0008               	return
 10881  0C10                     __end_of_exp:	
 10882                           
 10883                           	psect	text22
 10884  11EB                     __ptext22:	
 10885 ;; *************** function _ldexp *****************
 10886 ;; Defined at:
 10887 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;  value           3   63[BANK1 ] unsigned char 
 10890 ;;  newexp          2   66[BANK1 ] int 
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;		None
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  3   63[BANK1 ] int 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0, pclath, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10902 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10903 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10904 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10905 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10906 ;;Total ram usage:       10 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    4
 10909 ;; This function calls:
 10910 ;;		___ftge
 10911 ;;		___ftneg
 10912 ;; This function is called by:
 10913 ;;		_exp
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           
 10918                           ;psect for function _ldexp
 10919  11EB                     _ldexp:	
 10920                           
 10921                           ;incstack = 0
 10922                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 10923  11EB  0021               	movlb	1	; select bank1
 10924  11EC  0861               	movf	(ldexp@value+2)^(0+128),w
 10925  11ED  0460               	iorwf	(ldexp@value+1)^(0+128),w
 10926  11EE  045F               	iorwf	ldexp@value^(0+128),w
 10927  11EF  1D03               	skipz
 10928  11F0  29F8               	goto	l7314
 10929  11F1  3000               	movlw	0
 10930  11F2  00DF               	movwf	?_ldexp^(0+128)
 10931  11F3  3000               	movlw	0
 10932  11F4  00E0               	movwf	(?_ldexp+1)^(0+128)
 10933  11F5  3000               	movlw	0
 10934  11F6  00E1               	movwf	(?_ldexp+2)^(0+128)
 10935  11F7  0008               	return
 10936  11F8                     l7314:	
 10937  11F8  0861               	movf	(ldexp@value^(0+128)+2),w
 10938  11F9  397F               	andlw	127
 10939  11FA  00E4               	movwf	??_ldexp^(0+128)
 10940  11FB  01E5               	clrf	(??_ldexp^(0+128)+1)
 10941  11FC  35E4               	lslf	??_ldexp^(0+128),f
 10942  11FD  0DE5               	rlf	(??_ldexp^(0+128)+1),f
 10943  11FE  0864               	movf	??_ldexp^(0+128),w
 10944  11FF  07E2               	addwf	ldexp@newexp^(0+128),f
 10945  1200  0865               	movf	(??_ldexp+1)^(0+128),w
 10946  1201  3DE3               	addwfc	(ldexp@newexp+1)^(0+128),f
 10947  1202  0D60               	rlf	(ldexp@value^(0+128)+1),w
 10948  1203  0D60               	rlf	(ldexp@value^(0+128)+1),w
 10949  1204  3901               	andlw	1
 10950  1205  00E4               	movwf	??_ldexp^(0+128)
 10951  1206  01E5               	clrf	(??_ldexp^(0+128)+1)
 10952  1207  0864               	movf	??_ldexp^(0+128),w
 10953  1208  07E2               	addwf	ldexp@newexp^(0+128),f
 10954  1209  0865               	movf	(??_ldexp+1)^(0+128),w
 10955  120A  3DE3               	addwfc	(ldexp@newexp+1)^(0+128),f
 10956  120B  1FE3               	btfss	(ldexp@newexp+1)^(0+128),7
 10957  120C  2A1A               	goto	l7324
 10958  120D  3022               	movlw	34
 10959  120E  0024               	movlb	4	; select bank4
 10960  120F  00CF               	movwf	_errno^(0+512)
 10961  1210  3000               	movlw	0
 10962  1211  00D0               	movwf	(_errno^(0+512)+1)
 10963  1212  3000               	movlw	0
 10964  1213  0021               	movlb	1	; select bank1
 10965  1214  00DF               	movwf	?_ldexp^(0+128)
 10966  1215  3000               	movlw	0
 10967  1216  00E0               	movwf	(?_ldexp+1)^(0+128)
 10968  1217  3000               	movlw	0
 10969  1218  00E1               	movwf	(?_ldexp+2)^(0+128)
 10970  1219  0008               	return
 10971  121A                     l7324:	
 10972  121A  0863               	movf	(ldexp@newexp+1)^(0+128),w
 10973  121B  3A80               	xorlw	128
 10974  121C  00E4               	movwf	??_ldexp^(0+128)
 10975  121D  3081               	movlw	129
 10976  121E  0264               	subwf	??_ldexp^(0+128),w
 10977  121F  1D03               	skipz
 10978  1220  2A23               	goto	u7825
 10979  1221  3000               	movlw	0
 10980  1222  0262               	subwf	ldexp@newexp^(0+128),w
 10981  1223                     u7825:	
 10982  1223  1C03               	skipc
 10983  1224  2A5B               	goto	l7348
 10984  1225  3022               	movlw	34
 10985  1226  0024               	movlb	4	; select bank4
 10986  1227  00CF               	movwf	_errno^(0+512)
 10987  1228  3000               	movlw	0
 10988  1229  00D0               	movwf	(_errno^(0+512)+1)
 10989  122A  0021               	movlb	1	; select bank1
 10990  122B  085F               	movf	ldexp@value^(0+128),w
 10991  122C  00A0               	movwf	___ftge@ff1^(0+128)
 10992  122D  0860               	movf	(ldexp@value+1)^(0+128),w
 10993  122E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10994  122F  0861               	movf	(ldexp@value+2)^(0+128),w
 10995  1230  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10996  1231  3000               	movlw	0
 10997  1232  00A3               	movwf	___ftge@ff2^(0+128)
 10998  1233  3000               	movlw	0
 10999  1234  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11000  1235  3000               	movlw	0
 11001  1236  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11002  1237  3199  21D9  3191   	fcall	___ftge
 11003  123A  1803               	btfsc	3,0
 11004  123B  2A53               	goto	l7344
 11005  123C  30FF               	movlw	255
 11006  123D  0021               	movlb	1	; select bank1
 11007  123E  00E6               	movwf	_ldexp$2441^(0+128)
 11008  123F  307F               	movlw	127
 11009  1240  00E7               	movwf	(_ldexp$2441+1)^(0+128)
 11010  1241  307F               	movlw	127
 11011  1242  00E8               	movwf	(_ldexp$2441+2)^(0+128)
 11012  1243  0866               	movf	_ldexp$2441^(0+128),w
 11013  1244  00A0               	movwf	___ftneg@f1^(0+128)
 11014  1245  0867               	movf	(_ldexp$2441+1)^(0+128),w
 11015  1246  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 11016  1247  0868               	movf	(_ldexp$2441+2)^(0+128),w
 11017  1248  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 11018  1249  31A6  2686         	fcall	___ftneg
 11019  124B  0021               	movlb	1	; select bank1
 11020  124C  0820               	movf	?___ftneg^(0+128),w
 11021  124D  00DF               	movwf	?_ldexp^(0+128)
 11022  124E  0821               	movf	(?___ftneg+1)^(0+128),w
 11023  124F  00E0               	movwf	(?_ldexp+1)^(0+128)
 11024  1250  0822               	movf	(?___ftneg+2)^(0+128),w
 11025  1251  00E1               	movwf	(?_ldexp+2)^(0+128)
 11026  1252  0008               	return
 11027  1253                     l7344:	
 11028  1253  30FF               	movlw	255
 11029  1254  0021               	movlb	1	; select bank1
 11030  1255  00DF               	movwf	?_ldexp^(0+128)
 11031  1256  307F               	movlw	127
 11032  1257  00E0               	movwf	(?_ldexp+1)^(0+128)
 11033  1258  307F               	movlw	127
 11034  1259  00E1               	movwf	(?_ldexp+2)^(0+128)
 11035  125A  0008               	return
 11036  125B                     l7348:	
 11037  125B  0021               	movlb	1	; select bank1
 11038  125C  0863               	movf	(ldexp@newexp+1)^(0+128),w
 11039  125D  00E5               	movwf	(??_ldexp^(0+128)+1)
 11040  125E  0862               	movf	ldexp@newexp^(0+128),w
 11041  125F  00E4               	movwf	??_ldexp^(0+128)
 11042  1260  0D65               	rlf	(??_ldexp^(0+128)+1),w
 11043  1261  0CE5               	rrf	(??_ldexp^(0+128)+1),f
 11044  1262  0CE4               	rrf	??_ldexp^(0+128),f
 11045  1263  0861               	movf	(ldexp@value^(0+128)+2),w
 11046  1264  0664               	xorwf	??_ldexp^(0+128),w
 11047  1265  3980               	andlw	-128
 11048  1266  0664               	xorwf	??_ldexp^(0+128),w
 11049  1267  00E1               	movwf	(ldexp@value^(0+128)+2)
 11050  1268  0862               	movf	ldexp@newexp^(0+128),w
 11051  1269  3901               	andlw	1
 11052  126A  00E4               	movwf	??_ldexp^(0+128)
 11053  126B  0CE4               	rrf	??_ldexp^(0+128),f
 11054  126C  0CE4               	rrf	??_ldexp^(0+128),f
 11055  126D  0860               	movf	(ldexp@value^(0+128)+1),w
 11056  126E  0664               	xorwf	??_ldexp^(0+128),w
 11057  126F  397F               	andlw	-129
 11058  1270  0664               	xorwf	??_ldexp^(0+128),w
 11059  1271  00E0               	movwf	(ldexp@value^(0+128)+1)
 11060  1272  0008               	return
 11061  1273                     __end_of_ldexp:	
 11062                           
 11063                           	psect	text23
 11064  14F6                     __ptext23:	
 11065 ;; *************** function _floor *****************
 11066 ;; Defined at:
 11067 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;  x               3   14[BANK2 ] int 
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  i               3   17[BANK2 ] int 
 11072 ;;  expon           2   20[BANK2 ] int 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  3   14[BANK2 ] int 
 11075 ;; Registers used:
 11076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11082 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11083 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11085 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11086 ;;Total ram usage:        8 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    5
 11089 ;; This function calls:
 11090 ;;		___altoft
 11091 ;;		___ftadd
 11092 ;;		___ftge
 11093 ;;		___fttol
 11094 ;;		_frexp
 11095 ;; This function is called by:
 11096 ;;		_exp
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           
 11101                           ;psect for function _floor
 11102  14F6                     _floor:	
 11103                           
 11104                           ;incstack = 0
 11105                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11106  14F6  0022               	movlb	2	; select bank2
 11107  14F7  082E               	movf	floor@x^(0+256),w
 11108  14F8  0021               	movlb	1	; select bank1
 11109  14F9  00A0               	movwf	frexp@value^(0+128)
 11110  14FA  0022               	movlb	2	; select bank2
 11111  14FB  082F               	movf	(floor@x+1)^(0+256),w
 11112  14FC  0021               	movlb	1	; select bank1
 11113  14FD  00A1               	movwf	(frexp@value+1)^(0+128)
 11114  14FE  0022               	movlb	2	; select bank2
 11115  14FF  0830               	movf	(floor@x+2)^(0+256),w
 11116  1500  0021               	movlb	1	; select bank1
 11117  1501  00A2               	movwf	(frexp@value+2)^(0+128)
 11118  1502  3034               	movlw	low floor@expon
 11119  1503  00A3               	movwf	frexp@eptr^(0+128)
 11120  1504  3001               	movlw	high floor@expon
 11121  1505  00A4               	movwf	(frexp@eptr+1)^(0+128)
 11122  1506  319B  2347  3194   	fcall	_frexp
 11123  1509  0022               	movlb	2	; select bank2
 11124  150A  1FB5               	btfss	(floor@expon+1)^(0+256),7
 11125  150B  2D32               	goto	l7284
 11126  150C  082E               	movf	floor@x^(0+256),w
 11127  150D  0021               	movlb	1	; select bank1
 11128  150E  00A0               	movwf	___ftge@ff1^(0+128)
 11129  150F  0022               	movlb	2	; select bank2
 11130  1510  082F               	movf	(floor@x+1)^(0+256),w
 11131  1511  0021               	movlb	1	; select bank1
 11132  1512  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11133  1513  0022               	movlb	2	; select bank2
 11134  1514  0830               	movf	(floor@x+2)^(0+256),w
 11135  1515  0021               	movlb	1	; select bank1
 11136  1516  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11137  1517  3000               	movlw	0
 11138  1518  00A3               	movwf	___ftge@ff2^(0+128)
 11139  1519  3000               	movlw	0
 11140  151A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11141  151B  3000               	movlw	0
 11142  151C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11143  151D  3199  21D9  3194   	fcall	___ftge
 11144  1520  1803               	btfsc	3,0
 11145  1521  2D2A               	goto	l7280
 11146  1522  3000               	movlw	0
 11147  1523  0022               	movlb	2	; select bank2
 11148  1524  00AE               	movwf	?_floor^(0+256)
 11149  1525  3080               	movlw	128
 11150  1526  00AF               	movwf	(?_floor+1)^(0+256)
 11151  1527  30BF               	movlw	191
 11152  1528  00B0               	movwf	(?_floor+2)^(0+256)
 11153  1529  0008               	return
 11154  152A                     l7280:	
 11155  152A  3000               	movlw	0
 11156  152B  0022               	movlb	2	; select bank2
 11157  152C  00AE               	movwf	?_floor^(0+256)
 11158  152D  3000               	movlw	0
 11159  152E  00AF               	movwf	(?_floor+1)^(0+256)
 11160  152F  3000               	movlw	0
 11161  1530  00B0               	movwf	(?_floor+2)^(0+256)
 11162  1531  0008               	return
 11163  1532                     l7284:	
 11164  1532  3000               	movlw	0
 11165  1533  0235               	subwf	(floor@expon+1)^(0+256),w
 11166  1534  3015               	movlw	21
 11167  1535  1903               	skipnz
 11168  1536  0234               	subwf	floor@expon^(0+256),w
 11169  1537  1803               	btfsc	3,0
 11170  1538  0008               	return
 11171  1539  082E               	movf	floor@x^(0+256),w
 11172  153A  0021               	movlb	1	; select bank1
 11173  153B  00E7               	movwf	___fttol@f1^(0+128)
 11174  153C  0022               	movlb	2	; select bank2
 11175  153D  082F               	movf	(floor@x+1)^(0+256),w
 11176  153E  0021               	movlb	1	; select bank1
 11177  153F  00E8               	movwf	(___fttol@f1+1)^(0+128)
 11178  1540  0022               	movlb	2	; select bank2
 11179  1541  0830               	movf	(floor@x+2)^(0+256),w
 11180  1542  0021               	movlb	1	; select bank1
 11181  1543  00E9               	movwf	(___fttol@f1+2)^(0+128)
 11182  1544  3192  22FE  3194   	fcall	___fttol
 11183  1547  0021               	movlb	1	; select bank1
 11184  1548  086A               	movf	(?___fttol+3)^(0+128),w
 11185  1549  0022               	movlb	2	; select bank2
 11186  154A  00A9               	movwf	(___altoft@c+3)^(0+256)
 11187  154B  0021               	movlb	1	; select bank1
 11188  154C  0869               	movf	(?___fttol+2)^(0+128),w
 11189  154D  0022               	movlb	2	; select bank2
 11190  154E  00A8               	movwf	(___altoft@c+2)^(0+256)
 11191  154F  0021               	movlb	1	; select bank1
 11192  1550  0868               	movf	(?___fttol+1)^(0+128),w
 11193  1551  0022               	movlb	2	; select bank2
 11194  1552  00A7               	movwf	(___altoft@c+1)^(0+256)
 11195  1553  0021               	movlb	1	; select bank1
 11196  1554  0867               	movf	?___fttol^(0+128),w
 11197  1555  0022               	movlb	2	; select bank2
 11198  1556  00A6               	movwf	___altoft@c^(0+256)
 11199  1557  319D  2565  3194   	fcall	___altoft
 11200  155A  0022               	movlb	2	; select bank2
 11201  155B  0826               	movf	?___altoft^(0+256),w
 11202  155C  00B1               	movwf	floor@i^(0+256)
 11203  155D  0827               	movf	(?___altoft+1)^(0+256),w
 11204  155E  00B2               	movwf	(floor@i+1)^(0+256)
 11205  155F  0828               	movf	(?___altoft+2)^(0+256),w
 11206  1560  00B3               	movwf	(floor@i+2)^(0+256)
 11207  1561  082E               	movf	floor@x^(0+256),w
 11208  1562  0021               	movlb	1	; select bank1
 11209  1563  00A0               	movwf	___ftge@ff1^(0+128)
 11210  1564  0022               	movlb	2	; select bank2
 11211  1565  082F               	movf	(floor@x+1)^(0+256),w
 11212  1566  0021               	movlb	1	; select bank1
 11213  1567  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11214  1568  0022               	movlb	2	; select bank2
 11215  1569  0830               	movf	(floor@x+2)^(0+256),w
 11216  156A  0021               	movlb	1	; select bank1
 11217  156B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11218  156C  0022               	movlb	2	; select bank2
 11219  156D  0831               	movf	floor@i^(0+256),w
 11220  156E  0021               	movlb	1	; select bank1
 11221  156F  00A3               	movwf	___ftge@ff2^(0+128)
 11222  1570  0022               	movlb	2	; select bank2
 11223  1571  0832               	movf	(floor@i+1)^(0+256),w
 11224  1572  0021               	movlb	1	; select bank1
 11225  1573  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11226  1574  0022               	movlb	2	; select bank2
 11227  1575  0833               	movf	(floor@i+2)^(0+256),w
 11228  1576  0021               	movlb	1	; select bank1
 11229  1577  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11230  1578  3199  21D9  3194   	fcall	___ftge
 11231  157B  1803               	btfsc	3,0
 11232  157C  2D9F               	goto	l7294
 11233  157D  3000               	movlw	0
 11234  157E  0021               	movlb	1	; select bank1
 11235  157F  00C8               	movwf	___ftadd@f1^(0+128)
 11236  1580  3080               	movlw	128
 11237  1581  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 11238  1582  30BF               	movlw	191
 11239  1583  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 11240  1584  0022               	movlb	2	; select bank2
 11241  1585  0831               	movf	floor@i^(0+256),w
 11242  1586  0021               	movlb	1	; select bank1
 11243  1587  00CB               	movwf	___ftadd@f2^(0+128)
 11244  1588  0022               	movlb	2	; select bank2
 11245  1589  0832               	movf	(floor@i+1)^(0+256),w
 11246  158A  0021               	movlb	1	; select bank1
 11247  158B  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 11248  158C  0022               	movlb	2	; select bank2
 11249  158D  0833               	movf	(floor@i+2)^(0+256),w
 11250  158E  0021               	movlb	1	; select bank1
 11251  158F  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 11252  1590  3188  2078         	fcall	___ftadd
 11253  1592  0021               	movlb	1	; select bank1
 11254  1593  0848               	movf	?___ftadd^(0+128),w
 11255  1594  0022               	movlb	2	; select bank2
 11256  1595  00AE               	movwf	?_floor^(0+256)
 11257  1596  0021               	movlb	1	; select bank1
 11258  1597  0849               	movf	(?___ftadd+1)^(0+128),w
 11259  1598  0022               	movlb	2	; select bank2
 11260  1599  00AF               	movwf	(?_floor+1)^(0+256)
 11261  159A  0021               	movlb	1	; select bank1
 11262  159B  084A               	movf	(?___ftadd+2)^(0+128),w
 11263  159C  0022               	movlb	2	; select bank2
 11264  159D  00B0               	movwf	(?_floor+2)^(0+256)
 11265  159E  0008               	return
 11266  159F                     l7294:	
 11267  159F  0022               	movlb	2	; select bank2
 11268  15A0  0831               	movf	floor@i^(0+256),w
 11269  15A1  00AE               	movwf	?_floor^(0+256)
 11270  15A2  0832               	movf	(floor@i+1)^(0+256),w
 11271  15A3  00AF               	movwf	(?_floor+1)^(0+256)
 11272  15A4  0833               	movf	(floor@i+2)^(0+256),w
 11273  15A5  00B0               	movwf	(?_floor+2)^(0+256)
 11274  15A6  0008               	return
 11275  15A7                     __end_of_floor:	
 11276                           
 11277                           	psect	text24
 11278  1B47                     __ptext24:	
 11279 ;; *************** function _frexp *****************
 11280 ;; Defined at:
 11281 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  value           3    0[BANK1 ] int 
 11284 ;;  eptr            2    3[BANK1 ] PTR int 
 11285 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;		None
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  3    0[BANK1 ] PTR int 
 11290 ;; Registers used:
 11291 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11297 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11299 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11300 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11301 ;;Total ram usage:        7 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    3
 11304 ;; This function calls:
 11305 ;;		Nothing
 11306 ;; This function is called by:
 11307 ;;		_trunc
 11308 ;;		_floor
 11309 ;;		_log
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           
 11314                           ;psect for function _frexp
 11315  1B47                     _frexp:	
 11316                           
 11317                           ;incstack = 0
 11318                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 11319  1B47  0021               	movlb	1	; select bank1
 11320  1B48  0822               	movf	(frexp@value+2)^(0+128),w
 11321  1B49  0421               	iorwf	(frexp@value+1)^(0+128),w
 11322  1B4A  0420               	iorwf	frexp@value^(0+128),w
 11323  1B4B  1D03               	skipz
 11324  1B4C  2B5B               	goto	l7146
 11325  1B4D  0823               	movf	frexp@eptr^(0+128),w
 11326  1B4E  0086               	movwf	6
 11327  1B4F  0824               	movf	(frexp@eptr+1)^(0+128),w
 11328  1B50  0087               	movwf	7
 11329  1B51  3000               	movlw	0
 11330  1B52  3FC0               	movwi [0]fsr1
 11331  1B53  3FC1               	movwi [1]fsr1
 11332  1B54  3000               	movlw	0
 11333  1B55  00A0               	movwf	?_frexp^(0+128)
 11334  1B56  3000               	movlw	0
 11335  1B57  00A1               	movwf	(?_frexp+1)^(0+128)
 11336  1B58  3000               	movlw	0
 11337  1B59  00A2               	movwf	(?_frexp+2)^(0+128)
 11338  1B5A  0008               	return
 11339  1B5B                     l7146:	
 11340  1B5B  0822               	movf	(frexp@value^(0+128)+2),w
 11341  1B5C  397F               	andlw	127
 11342  1B5D  00A5               	movwf	??_frexp^(0+128)
 11343  1B5E  01A6               	clrf	(??_frexp^(0+128)+1)
 11344  1B5F  35A5               	lslf	??_frexp^(0+128),f
 11345  1B60  0DA6               	rlf	(??_frexp^(0+128)+1),f
 11346  1B61  0823               	movf	frexp@eptr^(0+128),w
 11347  1B62  0086               	movwf	6
 11348  1B63  0824               	movf	(frexp@eptr+1)^(0+128),w
 11349  1B64  0087               	movwf	7
 11350  1B65  0825               	movf	??_frexp^(0+128),w
 11351  1B66  3FC0               	movwi [0]fsr1
 11352  1B67  0826               	movf	(??_frexp+1)^(0+128),w
 11353  1B68  3FC1               	movwi [1]fsr1
 11354  1B69  0D21               	rlf	(frexp@value^(0+128)+1),w
 11355  1B6A  0D21               	rlf	(frexp@value^(0+128)+1),w
 11356  1B6B  3901               	andlw	1
 11357  1B6C  00A5               	movwf	??_frexp^(0+128)
 11358  1B6D  01A6               	clrf	(??_frexp^(0+128)+1)
 11359  1B6E  0823               	movf	frexp@eptr^(0+128),w
 11360  1B6F  0086               	movwf	6
 11361  1B70  0824               	movf	(frexp@eptr+1)^(0+128),w
 11362  1B71  0087               	movwf	7
 11363  1B72  0825               	movf	??_frexp^(0+128),w
 11364  1B73  0481               	iorwf	1,f
 11365  1B74  3141               	addfsr 1,1
 11366  1B75  0826               	movf	(??_frexp+1)^(0+128),w
 11367  1B76  0481               	iorwf	1,f
 11368  1B77  0823               	movf	frexp@eptr^(0+128),w
 11369  1B78  0086               	movwf	6
 11370  1B79  0824               	movf	(frexp@eptr+1)^(0+128),w
 11371  1B7A  0087               	movwf	7
 11372  1B7B  3082               	movlw	130
 11373  1B7C  0781               	addwf	1,f
 11374  1B7D  3141               	addfsr 1,1
 11375  1B7E  30FF               	movlw	255
 11376  1B7F  3D81               	addwfc	1,f
 11377  1B80  317F               	addfsr 1,-1
 11378  1B81  0822               	movf	(frexp@value^(0+128)+2),w
 11379  1B82  3980               	andlw	-128
 11380  1B83  383F               	iorlw	63
 11381  1B84  00A2               	movwf	(frexp@value^(0+128)+2)
 11382  1B85  13A1               	bcf	(frexp@value^(0+128)+1),7
 11383  1B86  0008               	return
 11384  1B87                     __end_of_frexp:	
 11385                           
 11386                           	psect	text25
 11387  12FE                     __ptext25:	
 11388 ;; *************** function ___fttol *****************
 11389 ;; Defined at:
 11390 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;  f1              3   71[BANK1 ] float 
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;  lval            4    1[BANK2 ] unsigned long 
 11395 ;;  exp1            1    5[BANK2 ] unsigned char 
 11396 ;;  sign1           1    0[BANK2 ] unsigned char 
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  4   71[BANK1 ] long 
 11399 ;; Registers used:
 11400 ;;		wreg, status,2, status,0
 11401 ;; Tracked objects:
 11402 ;;		On entry : 0/0
 11403 ;;		On exit  : 0/0
 11404 ;;		Unchanged: 0/0
 11405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11406 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11407 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11408 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11409 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11410 ;;Total ram usage:       14 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; Hardware stack levels required when called:    3
 11413 ;; This function calls:
 11414 ;;		Nothing
 11415 ;; This function is called by:
 11416 ;;		_main
 11417 ;;		_set_subdivision
 11418 ;;		_scaleA100kPot
 11419 ;;		_pow
 11420 ;;		_trunc
 11421 ;;		_exp
 11422 ;;		_floor
 11423 ;;		_scaleiA100kPot
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           
 11428                           ;psect for function ___fttol
 11429  12FE                     ___fttol:	
 11430                           
 11431                           ;incstack = 0
 11432                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11433  12FE  0021               	movlb	1	; select bank1
 11434  12FF  0867               	movf	___fttol@f1^(0+128),w
 11435  1300  00EB               	movwf	??___fttol^(0+128)
 11436  1301  0868               	movf	(___fttol@f1+1)^(0+128),w
 11437  1302  00EC               	movwf	(??___fttol^(0+128)+1)
 11438  1303  0869               	movf	(___fttol@f1+2)^(0+128),w
 11439  1304  00ED               	movwf	(??___fttol^(0+128)+2)
 11440  1305  1003               	clrc
 11441  1306  0D6C               	rlf	(??___fttol^(0+128)+1),w
 11442  1307  0D6D               	rlf	(??___fttol^(0+128)+2),w
 11443  1308  00EE               	movwf	(??___fttol+3)^(0+128)
 11444  1309  086E               	movf	(??___fttol+3)^(0+128),w
 11445  130A  0022               	movlb	2	; select bank2
 11446  130B  00A5               	movwf	___fttol@exp1^(0+256)
 11447  130C  0825               	movf	___fttol@exp1^(0+256),w
 11448  130D  1D03               	btfss	3,2
 11449  130E  2B19               	goto	l7102
 11450  130F  3000               	movlw	0
 11451  1310  0021               	movlb	1	; select bank1
 11452  1311  00EA               	movwf	(?___fttol+3)^(0+128)
 11453  1312  3000               	movlw	0
 11454  1313  00E9               	movwf	(?___fttol+2)^(0+128)
 11455  1314  3000               	movlw	0
 11456  1315  00E8               	movwf	(?___fttol+1)^(0+128)
 11457  1316  3000               	movlw	0
 11458  1317  00E7               	movwf	?___fttol^(0+128)
 11459  1318  0008               	return
 11460  1319                     l7102:	
 11461  1319  0021               	movlb	1	; select bank1
 11462  131A  0867               	movf	___fttol@f1^(0+128),w
 11463  131B  00EB               	movwf	??___fttol^(0+128)
 11464  131C  0868               	movf	(___fttol@f1+1)^(0+128),w
 11465  131D  00EC               	movwf	(??___fttol^(0+128)+1)
 11466  131E  0869               	movf	(___fttol@f1+2)^(0+128),w
 11467  131F  00ED               	movwf	(??___fttol^(0+128)+2)
 11468  1320  3017               	movlw	23
 11469  1321                     u7505:	
 11470  1321  36ED               	lsrf	(??___fttol^(0+128)+2),f
 11471  1322  0CEC               	rrf	(??___fttol^(0+128)+1),f
 11472  1323  0CEB               	rrf	??___fttol^(0+128),f
 11473  1324  0B89               	decfsz	9,f
 11474  1325  2B21               	goto	u7505
 11475  1326  086B               	movf	??___fttol^(0+128),w
 11476  1327  00EE               	movwf	(??___fttol+3)^(0+128)
 11477  1328  086E               	movf	(??___fttol+3)^(0+128),w
 11478  1329  0022               	movlb	2	; select bank2
 11479  132A  00A0               	movwf	___fttol@sign1^(0+256)
 11480  132B  0021               	movlb	1	; select bank1
 11481  132C  17E8               	bsf	(___fttol@f1^(0+128)+1),7
 11482  132D  30FF               	movlw	255
 11483  132E  05E7               	andwf	___fttol@f1^(0+128),f
 11484  132F  30FF               	movlw	255
 11485  1330  05E8               	andwf	(___fttol@f1+1)^(0+128),f
 11486  1331  3000               	movlw	0
 11487  1332  05E9               	andwf	(___fttol@f1+2)^(0+128),f
 11488  1333  0867               	movf	___fttol@f1^(0+128),w
 11489  1334  0022               	movlb	2	; select bank2
 11490  1335  00A1               	movwf	___fttol@lval^(0+256)
 11491  1336  0021               	movlb	1	; select bank1
 11492  1337  0868               	movf	(___fttol@f1+1)^(0+128),w
 11493  1338  0022               	movlb	2	; select bank2
 11494  1339  00A2               	movwf	(___fttol@lval^(0+256)+1)
 11495  133A  0021               	movlb	1	; select bank1
 11496  133B  0869               	movf	(___fttol@f1+2)^(0+128),w
 11497  133C  0022               	movlb	2	; select bank2
 11498  133D  00A3               	movwf	(___fttol@lval^(0+256)+2)
 11499  133E  01A4               	clrf	(___fttol@lval^(0+256)+3)
 11500  133F  308E               	movlw	142
 11501  1340  02A5               	subwf	___fttol@exp1^(0+256),f
 11502  1341  1FA5               	btfss	___fttol@exp1^(0+256),7
 11503  1342  2B63               	goto	l7122
 11504  1343  0825               	movf	___fttol@exp1^(0+256),w
 11505  1344  3A80               	xorlw	128
 11506  1345  3E8F               	addlw	143
 11507  1346  1803               	skipnc
 11508  1347  2B52               	goto	l7120
 11509  1348  3000               	movlw	0
 11510  1349  0021               	movlb	1	; select bank1
 11511  134A  00EA               	movwf	(?___fttol+3)^(0+128)
 11512  134B  3000               	movlw	0
 11513  134C  00E9               	movwf	(?___fttol+2)^(0+128)
 11514  134D  3000               	movlw	0
 11515  134E  00E8               	movwf	(?___fttol+1)^(0+128)
 11516  134F  3000               	movlw	0
 11517  1350  00E7               	movwf	?___fttol^(0+128)
 11518  1351  0008               	return
 11519  1352                     l7120:	
 11520  1352  3001               	movlw	1
 11521  1353                     u7535:	
 11522  1353  0022               	movlb	2	; select bank2
 11523  1354  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
 11524  1355  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
 11525  1356  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
 11526  1357  0CA1               	rrf	___fttol@lval^(0+256),f
 11527  1358  0B89               	decfsz	9,f
 11528  1359  2B53               	goto	u7535
 11529  135A  3001               	movlw	1
 11530  135B  0021               	movlb	1	; select bank1
 11531  135C  00EB               	movwf	??___fttol^(0+128)
 11532  135D  086B               	movf	??___fttol^(0+128),w
 11533  135E  0022               	movlb	2	; select bank2
 11534  135F  07A5               	addwf	___fttol@exp1^(0+256),f
 11535  1360  1903               	btfsc	3,2
 11536  1361  2B7F               	goto	l7130
 11537  1362  2B52               	goto	l7120
 11538  1363                     l7122:	
 11539  1363  3018               	movlw	24
 11540  1364  0225               	subwf	___fttol@exp1^(0+256),w
 11541  1365  1C03               	skipc
 11542  1366  2B7B               	goto	l1992
 11543  1367  3000               	movlw	0
 11544  1368  0021               	movlb	1	; select bank1
 11545  1369  00EA               	movwf	(?___fttol+3)^(0+128)
 11546  136A  3000               	movlw	0
 11547  136B  00E9               	movwf	(?___fttol+2)^(0+128)
 11548  136C  3000               	movlw	0
 11549  136D  00E8               	movwf	(?___fttol+1)^(0+128)
 11550  136E  3000               	movlw	0
 11551  136F  00E7               	movwf	?___fttol^(0+128)
 11552  1370  0008               	return
 11553  1371                     l7128:	
 11554  1371  3001               	movlw	1
 11555  1372                     u7565:	
 11556  1372  0022               	movlb	2	; select bank2
 11557  1373  35A1               	lslf	___fttol@lval^(0+256),f
 11558  1374  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
 11559  1375  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
 11560  1376  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
 11561  1377  0B89               	decfsz	9,f
 11562  1378  2B72               	goto	u7565
 11563  1379  3001               	movlw	1
 11564  137A  02A5               	subwf	___fttol@exp1^(0+256),f
 11565  137B                     l1992:	
 11566  137B  0022               	movlb	2	; select bank2
 11567  137C  0825               	movf	___fttol@exp1^(0+256),w
 11568  137D  1D03               	btfss	3,2
 11569  137E  2B71               	goto	l7128
 11570  137F                     l7130:	
 11571  137F  0820               	movf	___fttol@sign1^(0+256),w
 11572  1380  1903               	btfsc	3,2
 11573  1381  2B8D               	goto	l7134
 11574  1382  09A1               	comf	___fttol@lval^(0+256),f
 11575  1383  09A2               	comf	(___fttol@lval+1)^(0+256),f
 11576  1384  09A3               	comf	(___fttol@lval+2)^(0+256),f
 11577  1385  09A4               	comf	(___fttol@lval+3)^(0+256),f
 11578  1386  0AA1               	incf	___fttol@lval^(0+256),f
 11579  1387  1903               	skipnz
 11580  1388  0AA2               	incf	(___fttol@lval+1)^(0+256),f
 11581  1389  1903               	skipnz
 11582  138A  0AA3               	incf	(___fttol@lval+2)^(0+256),f
 11583  138B  1903               	skipnz
 11584  138C  0AA4               	incf	(___fttol@lval+3)^(0+256),f
 11585  138D                     l7134:	
 11586  138D  0824               	movf	(___fttol@lval+3)^(0+256),w
 11587  138E  0021               	movlb	1	; select bank1
 11588  138F  00EA               	movwf	(?___fttol+3)^(0+128)
 11589  1390  0022               	movlb	2	; select bank2
 11590  1391  0823               	movf	(___fttol@lval+2)^(0+256),w
 11591  1392  0021               	movlb	1	; select bank1
 11592  1393  00E9               	movwf	(?___fttol+2)^(0+128)
 11593  1394  0022               	movlb	2	; select bank2
 11594  1395  0822               	movf	(___fttol@lval+1)^(0+256),w
 11595  1396  0021               	movlb	1	; select bank1
 11596  1397  00E8               	movwf	(?___fttol+1)^(0+128)
 11597  1398  0022               	movlb	2	; select bank2
 11598  1399  0821               	movf	___fttol@lval^(0+256),w
 11599  139A  0021               	movlb	1	; select bank1
 11600  139B  00E7               	movwf	?___fttol^(0+128)
 11601  139C  0008               	return
 11602  139D                     __end_of___fttol:	
 11603                           
 11604                           	psect	text26
 11605  19D9                     __ptext26:	
 11606 ;; *************** function ___ftge *****************
 11607 ;; Defined at:
 11608 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;  ff1             3    0[BANK1 ] float 
 11611 ;;  ff2             3    3[BANK1 ] float 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;		None
 11614 ;; Return value:  Size  Location     Type
 11615 ;;		None               void
 11616 ;; Registers used:
 11617 ;;		wreg, status,2, status,0
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11623 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11625 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11626 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11627 ;;Total ram usage:        9 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:    3
 11630 ;; This function calls:
 11631 ;;		Nothing
 11632 ;; This function is called by:
 11633 ;;		_pow
 11634 ;;		_exp
 11635 ;;		_floor
 11636 ;;		_ldexp
 11637 ;;		_log
 11638 ;; This function uses a non-reentrant model
 11639 ;;
 11640                           
 11641                           
 11642                           ;psect for function ___ftge
 11643  19D9                     ___ftge:	
 11644                           
 11645                           ;incstack = 0
 11646                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11647  19D9  0021               	movlb	1	; select bank1
 11648  19DA  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 11649  19DB  29F0               	goto	l7022
 11650  19DC  0920               	comf	___ftge@ff1^(0+128),w
 11651  19DD  00A6               	movwf	??___ftge^(0+128)
 11652  19DE  0921               	comf	(___ftge@ff1+1)^(0+128),w
 11653  19DF  00A7               	movwf	(??___ftge^(0+128)+1)
 11654  19E0  0922               	comf	(___ftge@ff1+2)^(0+128),w
 11655  19E1  00A8               	movwf	(??___ftge^(0+128)+2)
 11656  19E2  0AA6               	incf	??___ftge^(0+128),f
 11657  19E3  1903               	skipnz
 11658  19E4  0AA7               	incf	(??___ftge^(0+128)+1),f
 11659  19E5  1903               	skipnz
 11660  19E6  0AA8               	incf	(??___ftge^(0+128)+2),f
 11661  19E7  3000               	movlw	0
 11662  19E8  0726               	addwf	??___ftge^(0+128),w
 11663  19E9  00A0               	movwf	___ftge@ff1^(0+128)
 11664  19EA  3000               	movlw	0
 11665  19EB  3D27               	addwfc	(??___ftge+1)^(0+128),w
 11666  19EC  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11667  19ED  3080               	movlw	128
 11668  19EE  3D28               	addwfc	(??___ftge+2)^(0+128),w
 11669  19EF  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11670  19F0                     l7022:	
 11671  19F0  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 11672  19F1  2A06               	goto	l7026
 11673  19F2  0923               	comf	___ftge@ff2^(0+128),w
 11674  19F3  00A6               	movwf	??___ftge^(0+128)
 11675  19F4  0924               	comf	(___ftge@ff2+1)^(0+128),w
 11676  19F5  00A7               	movwf	(??___ftge^(0+128)+1)
 11677  19F6  0925               	comf	(___ftge@ff2+2)^(0+128),w
 11678  19F7  00A8               	movwf	(??___ftge^(0+128)+2)
 11679  19F8  0AA6               	incf	??___ftge^(0+128),f
 11680  19F9  1903               	skipnz
 11681  19FA  0AA7               	incf	(??___ftge^(0+128)+1),f
 11682  19FB  1903               	skipnz
 11683  19FC  0AA8               	incf	(??___ftge^(0+128)+2),f
 11684  19FD  3000               	movlw	0
 11685  19FE  0726               	addwf	??___ftge^(0+128),w
 11686  19FF  00A3               	movwf	___ftge@ff2^(0+128)
 11687  1A00  3000               	movlw	0
 11688  1A01  3D27               	addwfc	(??___ftge+1)^(0+128),w
 11689  1A02  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 11690  1A03  3080               	movlw	128
 11691  1A04  3D28               	addwfc	(??___ftge+2)^(0+128),w
 11692  1A05  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 11693  1A06                     l7026:	
 11694  1A06  3080               	movlw	128
 11695  1A07  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 11696  1A08  3080               	movlw	128
 11697  1A09  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 11698  1A0A  0825               	movf	(___ftge@ff2+2)^(0+128),w
 11699  1A0B  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 11700  1A0C  1D03               	skipz
 11701  1A0D  0008               	return
 11702  1A0E  0824               	movf	(___ftge@ff2+1)^(0+128),w
 11703  1A0F  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 11704  1A10  1D03               	skipz
 11705  1A11  0008               	return
 11706  1A12  0823               	movf	___ftge@ff2^(0+128),w
 11707  1A13  0220               	subwf	___ftge@ff1^(0+128),w
 11708  1A14  0008               	return
 11709  1A15                     __end_of___ftge:	
 11710                           
 11711                           	psect	text27
 11712  1D65                     __ptext27:	
 11713 ;; *************** function ___altoft *****************
 11714 ;; Defined at:
 11715 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;  c               4    6[BANK2 ] long 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;  sign            1   13[BANK2 ] unsigned char 
 11720 ;;  exp             1   12[BANK2 ] unsigned char 
 11721 ;; Return value:  Size  Location     Type
 11722 ;;                  3    6[BANK2 ] float 
 11723 ;; Registers used:
 11724 ;;		wreg, status,2, status,0, pclath, cstack
 11725 ;; Tracked objects:
 11726 ;;		On entry : 0/0
 11727 ;;		On exit  : 0/0
 11728 ;;		Unchanged: 0/0
 11729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11730 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11731 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11732 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11733 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11734 ;;Total ram usage:        8 bytes
 11735 ;; Hardware stack levels used:    1
 11736 ;; Hardware stack levels required when called:    4
 11737 ;; This function calls:
 11738 ;;		___ftpack
 11739 ;; This function is called by:
 11740 ;;		_trunc
 11741 ;;		_floor
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           
 11746                           ;psect for function ___altoft
 11747  1D65                     ___altoft:	
 11748                           
 11749                           ;incstack = 0
 11750                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11751  1D65  0022               	movlb	2	; select bank2
 11752  1D66  01AD               	clrf	___altoft@sign^(0+256)
 11753  1D67  308E               	movlw	142
 11754  1D68  00AA               	movwf	??___altoft^(0+256)
 11755  1D69  082A               	movf	??___altoft^(0+256),w
 11756  1D6A  00AC               	movwf	___altoft@exp^(0+256)
 11757  1D6B  1FA9               	btfss	(___altoft@c+3)^(0+256),7
 11758  1D6C  2D7A               	goto	l6942
 11759  1D6D  09A6               	comf	___altoft@c^(0+256),f
 11760  1D6E  09A7               	comf	(___altoft@c+1)^(0+256),f
 11761  1D6F  09A8               	comf	(___altoft@c+2)^(0+256),f
 11762  1D70  09A9               	comf	(___altoft@c+3)^(0+256),f
 11763  1D71  0AA6               	incf	___altoft@c^(0+256),f
 11764  1D72  1903               	skipnz
 11765  1D73  0AA7               	incf	(___altoft@c+1)^(0+256),f
 11766  1D74  1903               	skipnz
 11767  1D75  0AA8               	incf	(___altoft@c+2)^(0+256),f
 11768  1D76  1903               	skipnz
 11769  1D77  0AA9               	incf	(___altoft@c+3)^(0+256),f
 11770  1D78  01AD               	clrf	___altoft@sign^(0+256)
 11771  1D79  0AAD               	incf	___altoft@sign^(0+256),f
 11772  1D7A                     l6942:	
 11773  1D7A  30FF               	movlw	255
 11774  1D7B  0529               	andwf	(___altoft@c+3)^(0+256),w
 11775  1D7C  1903               	btfsc	3,2
 11776  1D7D  2D8A               	goto	l6944
 11777  1D7E  3001               	movlw	1
 11778  1D7F                     u7085:	
 11779  1D7F  36A9               	lsrf	(___altoft@c+3)^(0+256),f
 11780  1D80  0CA8               	rrf	(___altoft@c+2)^(0+256),f
 11781  1D81  0CA7               	rrf	(___altoft@c+1)^(0+256),f
 11782  1D82  0CA6               	rrf	___altoft@c^(0+256),f
 11783  1D83  0B89               	decfsz	9,f
 11784  1D84  2D7F               	goto	u7085
 11785  1D85  3001               	movlw	1
 11786  1D86  00AA               	movwf	??___altoft^(0+256)
 11787  1D87  082A               	movf	??___altoft^(0+256),w
 11788  1D88  07AC               	addwf	___altoft@exp^(0+256),f
 11789  1D89  2D7A               	goto	l6942
 11790  1D8A                     l6944:	
 11791  1D8A  0826               	movf	___altoft@c^(0+256),w
 11792  1D8B  0021               	movlb	1	; select bank1
 11793  1D8C  00A0               	movwf	___ftpack@arg^(0+128)
 11794  1D8D  0022               	movlb	2	; select bank2
 11795  1D8E  0827               	movf	(___altoft@c+1)^(0+256),w
 11796  1D8F  0021               	movlb	1	; select bank1
 11797  1D90  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 11798  1D91  0022               	movlb	2	; select bank2
 11799  1D92  0828               	movf	(___altoft@c+2)^(0+256),w
 11800  1D93  0021               	movlb	1	; select bank1
 11801  1D94  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 11802  1D95  0022               	movlb	2	; select bank2
 11803  1D96  082C               	movf	___altoft@exp^(0+256),w
 11804  1D97  00AA               	movwf	??___altoft^(0+256)
 11805  1D98  082A               	movf	??___altoft^(0+256),w
 11806  1D99  0021               	movlb	1	; select bank1
 11807  1D9A  00A3               	movwf	___ftpack@exp^(0+128)
 11808  1D9B  0022               	movlb	2	; select bank2
 11809  1D9C  082D               	movf	___altoft@sign^(0+256),w
 11810  1D9D  00AB               	movwf	(??___altoft+1)^(0+256)
 11811  1D9E  082B               	movf	(??___altoft+1)^(0+256),w
 11812  1D9F  0021               	movlb	1	; select bank1
 11813  1DA0  00A4               	movwf	___ftpack@sign^(0+128)
 11814  1DA1  3190  2002         	fcall	___ftpack
 11815  1DA3  0021               	movlb	1	; select bank1
 11816  1DA4  0820               	movf	?___ftpack^(0+128),w
 11817  1DA5  0022               	movlb	2	; select bank2
 11818  1DA6  00A6               	movwf	?___altoft^(0+256)
 11819  1DA7  0021               	movlb	1	; select bank1
 11820  1DA8  0821               	movf	(?___ftpack+1)^(0+128),w
 11821  1DA9  0022               	movlb	2	; select bank2
 11822  1DAA  00A7               	movwf	(?___altoft+1)^(0+256)
 11823  1DAB  0021               	movlb	1	; select bank1
 11824  1DAC  0822               	movf	(?___ftpack+2)^(0+128),w
 11825  1DAD  0022               	movlb	2	; select bank2
 11826  1DAE  00A8               	movwf	(?___altoft+2)^(0+256)
 11827  1DAF  0008               	return
 11828  1DB0                     __end_of___altoft:	
 11829                           
 11830                           	psect	text28
 11831  1FA0                     __ptext28:	
 11832 ;; *************** function _eval_poly *****************
 11833 ;; Defined at:
 11834 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;  x               3   53[BANK1 ] float 
 11837 ;;  d               2   56[BANK1 ] PTR const 
 11838 ;;		 -> log@coeff(27), exp@coeff(30), 
 11839 ;;  n               2   58[BANK1 ] int 
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;  res             3   60[BANK1 ] int 
 11842 ;; Return value:  Size  Location     Type
 11843 ;;                  3   53[BANK1 ] int 
 11844 ;; Registers used:
 11845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11851 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11852 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11854 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11855 ;;Total ram usage:       10 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    5
 11858 ;; This function calls:
 11859 ;;		___ftadd
 11860 ;;		___ftmul
 11861 ;;		___wmul
 11862 ;; This function is called by:
 11863 ;;		_exp
 11864 ;;		_log
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           
 11869                           ;psect for function _eval_poly
 11870  1FA0                     _eval_poly:	
 11871                           
 11872                           ;incstack = 0
 11873                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11874  1FA0  0021               	movlb	1	; select bank1
 11875  1FA1  085B               	movf	(eval_poly@n+1)^(0+128),w
 11876  1FA2  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
 11877  1FA3  085A               	movf	eval_poly@n^(0+128),w
 11878  1FA4  00A0               	movwf	___wmul@multiplier^(0+128)
 11879  1FA5  3003               	movlw	3
 11880  1FA6  00A2               	movwf	___wmul@multiplicand^(0+128)
 11881  1FA7  3000               	movlw	0
 11882  1FA8  00A3               	movwf	(___wmul@multiplicand^(0+128)+1)
 11883  1FA9  31A7  2760  319F   	fcall	___wmul
 11884  1FAC  0021               	movlb	1	; select bank1
 11885  1FAD  0858               	movf	eval_poly@d^(0+128),w
 11886  1FAE  0720               	addwf	?___wmul^(0+128),w
 11887  1FAF  0084               	movwf	4
 11888  1FB0  0859               	movf	(eval_poly@d+1)^(0+128),w
 11889  1FB1  3D21               	addwfc	(?___wmul+1)^(0+128),w
 11890  1FB2  0085               	movwf	5
 11891  1FB3  3F00               	moviw [0]fsr0
 11892  1FB4  00DC               	movwf	eval_poly@res^(0+128)
 11893  1FB5  3F01               	moviw [1]fsr0
 11894  1FB6  00DD               	movwf	(eval_poly@res+1)^(0+128)
 11895  1FB7  3F02               	moviw [2]fsr0
 11896  1FB8                     L14:	
 11897  1FB8  00DE               	movwf	(eval_poly@res+2)^(0+128)
 11898  1FB9  085A               	movf	eval_poly@n^(0+128),w
 11899  1FBA  045B               	iorwf	(eval_poly@n+1)^(0+128),w
 11900  1FBB  1903               	btfsc	3,2
 11901  1FBC  2FF9               	goto	l7304
 11902  1FBD  30FF               	movlw	255
 11903  1FBE  07DA               	addwf	eval_poly@n^(0+128),f
 11904  1FBF  30FF               	movlw	255
 11905  1FC0  3DDB               	addwfc	(eval_poly@n+1)^(0+128),f
 11906  1FC1  085B               	movf	(eval_poly@n+1)^(0+128),w
 11907  1FC2  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
 11908  1FC3  085A               	movf	eval_poly@n^(0+128),w
 11909  1FC4  00A0               	movwf	___wmul@multiplier^(0+128)
 11910  1FC5  3003               	movlw	3
 11911  1FC6  00A2               	movwf	___wmul@multiplicand^(0+128)
 11912  1FC7  3000               	movlw	0
 11913  1FC8  00A3               	movwf	(___wmul@multiplicand^(0+128)+1)
 11914  1FC9  31A7  2760  319F   	fcall	___wmul
 11915  1FCC  0021               	movlb	1	; select bank1
 11916  1FCD  0858               	movf	eval_poly@d^(0+128),w
 11917  1FCE  0720               	addwf	?___wmul^(0+128),w
 11918  1FCF  0084               	movwf	4
 11919  1FD0  0859               	movf	(eval_poly@d+1)^(0+128),w
 11920  1FD1  3D21               	addwfc	(?___wmul+1)^(0+128),w
 11921  1FD2  0085               	movwf	5
 11922  1FD3  3F00               	moviw [0]fsr0
 11923  1FD4  00C8               	movwf	___ftadd@f1^(0+128)
 11924  1FD5  3F01               	moviw [1]fsr0
 11925  1FD6  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 11926  1FD7  3F02               	moviw [2]fsr0
 11927  1FD8  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 11928  1FD9  085C               	movf	eval_poly@res^(0+128),w
 11929  1FDA  00B8               	movwf	___ftmul@f1^(0+128)
 11930  1FDB  085D               	movf	(eval_poly@res+1)^(0+128),w
 11931  1FDC  00B9               	movwf	(___ftmul@f1+1)^(0+128)
 11932  1FDD  085E               	movf	(eval_poly@res+2)^(0+128),w
 11933  1FDE  00BA               	movwf	(___ftmul@f1+2)^(0+128)
 11934  1FDF  0855               	movf	eval_poly@x^(0+128),w
 11935  1FE0  00BB               	movwf	___ftmul@f2^(0+128)
 11936  1FE1  0856               	movf	(eval_poly@x+1)^(0+128),w
 11937  1FE2  00BC               	movwf	(___ftmul@f2+1)^(0+128)
 11938  1FE3  0857               	movf	(eval_poly@x+2)^(0+128),w
 11939  1FE4  00BD               	movwf	(___ftmul@f2+2)^(0+128)
 11940  1FE5  3195  25A7  319F   	fcall	___ftmul
 11941  1FE8  0021               	movlb	1	; select bank1
 11942  1FE9  0838               	movf	?___ftmul^(0+128),w
 11943  1FEA  00CB               	movwf	___ftadd@f2^(0+128)
 11944  1FEB  0839               	movf	(?___ftmul+1)^(0+128),w
 11945  1FEC  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 11946  1FED  083A               	movf	(?___ftmul+2)^(0+128),w
 11947  1FEE  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 11948  1FEF  3188  2078  319F   	fcall	___ftadd
 11949  1FF2  0021               	movlb	1	; select bank1
 11950  1FF3  0848               	movf	?___ftadd^(0+128),w
 11951  1FF4  00DC               	movwf	eval_poly@res^(0+128)
 11952  1FF5  0849               	movf	(?___ftadd+1)^(0+128),w
 11953  1FF6  00DD               	movwf	(eval_poly@res+1)^(0+128)
 11954  1FF7  084A               	movf	(?___ftadd+2)^(0+128),w
 11955  1FF8  2FB8               	goto	L14
 11956  1FF9                     l7304:	
 11957  1FF9  085C               	movf	eval_poly@res^(0+128),w
 11958  1FFA  00D5               	movwf	?_eval_poly^(0+128)
 11959  1FFB  085D               	movf	(eval_poly@res+1)^(0+128),w
 11960  1FFC  00D6               	movwf	(?_eval_poly+1)^(0+128)
 11961  1FFD  085E               	movf	(eval_poly@res+2)^(0+128),w
 11962  1FFE  00D7               	movwf	(?_eval_poly+2)^(0+128)
 11963  1FFF  0008               	return
 11964  2000                     __end_of_eval_poly:	
 11965                           
 11966                           	psect	text29
 11967  2760                     __ptext29:	
 11968 ;; *************** function ___wmul *****************
 11969 ;; Defined at:
 11970 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;  multiplier      2    0[BANK1 ] unsigned int 
 11973 ;;  multiplicand    2    2[BANK1 ] unsigned int 
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;  product         2    4[BANK1 ] unsigned int 
 11976 ;; Return value:  Size  Location     Type
 11977 ;;                  2    0[BANK1 ] unsigned int 
 11978 ;; Registers used:
 11979 ;;		wreg, status,2, status,0
 11980 ;; Tracked objects:
 11981 ;;		On entry : 0/0
 11982 ;;		On exit  : 0/0
 11983 ;;		Unchanged: 0/0
 11984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11985 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11986 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11988 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11989 ;;Total ram usage:        6 bytes
 11990 ;; Hardware stack levels used:    1
 11991 ;; Hardware stack levels required when called:    3
 11992 ;; This function calls:
 11993 ;;		Nothing
 11994 ;; This function is called by:
 11995 ;;		_eval_poly
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function ___wmul
 12001  2760                     ___wmul:	
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12005  2760  0021               	movlb	1	; select bank1
 12006  2761  01A4               	clrf	___wmul@product^(0+128)
 12007  2762  01A5               	clrf	(___wmul@product+1)^(0+128)
 12008  2763                     l6920:	
 12009  2763  1C20               	btfss	___wmul@multiplier^(0+128),0
 12010  2764  2F69               	goto	l1740
 12011  2765  0822               	movf	___wmul@multiplicand^(0+128),w
 12012  2766  07A4               	addwf	___wmul@product^(0+128),f
 12013  2767  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
 12014  2768  3DA5               	addwfc	(___wmul@product+1)^(0+128),f
 12015  2769                     l1740:	
 12016  2769  3001               	movlw	1
 12017  276A                     u7045:	
 12018  276A  35A2               	lslf	___wmul@multiplicand^(0+128),f
 12019  276B  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
 12020  276C  0B89               	decfsz	9,f
 12021  276D  2F6A               	goto	u7045
 12022  276E  3001               	movlw	1
 12023  276F                     u7055:	
 12024  276F  36A1               	lsrf	(___wmul@multiplier+1)^(0+128),f
 12025  2770  0CA0               	rrf	___wmul@multiplier^(0+128),f
 12026  2771  0B89               	decfsz	9,f
 12027  2772  2F6F               	goto	u7055
 12028  2773  0820               	movf	___wmul@multiplier^(0+128),w
 12029  2774  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
 12030  2775  1D03               	btfss	3,2
 12031  2776  2F63               	goto	l6920
 12032  2777  0825               	movf	(___wmul@product+1)^(0+128),w
 12033  2778  00A1               	movwf	(?___wmul+1)^(0+128)
 12034  2779  0824               	movf	___wmul@product^(0+128),w
 12035  277A  00A0               	movwf	?___wmul^(0+128)
 12036  277B  0008               	return
 12037  277C                     __end_of___wmul:	
 12038                           
 12039                           	psect	text30
 12040  277C                     __ptext30:	
 12041 ;; *************** function ___ftsub *****************
 12042 ;; Defined at:
 12043 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  f2              3   53[BANK1 ] float 
 12046 ;;  f1              3   56[BANK1 ] float 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;		None
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  3   53[BANK1 ] float 
 12051 ;; Registers used:
 12052 ;;		wreg, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12058 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12061 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12062 ;;Total ram usage:        6 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    5
 12065 ;; This function calls:
 12066 ;;		___ftadd
 12067 ;; This function is called by:
 12068 ;;		_exp
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           
 12073                           ;psect for function ___ftsub
 12074  277C                     ___ftsub:	
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12078  277C  0021               	movlb	1	; select bank1
 12079  277D  0857               	movf	(___ftsub@f2+2)^(0+128),w
 12080  277E  0456               	iorwf	(___ftsub@f2+1)^(0+128),w
 12081  277F  0455               	iorwf	___ftsub@f2^(0+128),w
 12082  2780  1903               	skipnz
 12083  2781  2F84               	goto	l7266
 12084  2782  3080               	movlw	128
 12085  2783  06D7               	xorwf	(___ftsub@f2+2)^(0+128),f
 12086  2784                     l7266:	
 12087  2784  0858               	movf	___ftsub@f1^(0+128),w
 12088  2785  00C8               	movwf	___ftadd@f1^(0+128)
 12089  2786  0859               	movf	(___ftsub@f1+1)^(0+128),w
 12090  2787  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 12091  2788  085A               	movf	(___ftsub@f1+2)^(0+128),w
 12092  2789  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 12093  278A  0855               	movf	___ftsub@f2^(0+128),w
 12094  278B  00CB               	movwf	___ftadd@f2^(0+128)
 12095  278C  0856               	movf	(___ftsub@f2+1)^(0+128),w
 12096  278D  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 12097  278E  0857               	movf	(___ftsub@f2+2)^(0+128),w
 12098  278F  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 12099  2790  3188  2078         	fcall	___ftadd
 12100  2792  0021               	movlb	1	; select bank1
 12101  2793  0848               	movf	?___ftadd^(0+128),w
 12102  2794  00D5               	movwf	?___ftsub^(0+128)
 12103  2795  0849               	movf	(?___ftadd+1)^(0+128),w
 12104  2796  00D6               	movwf	(?___ftsub+1)^(0+128)
 12105  2797  084A               	movf	(?___ftadd+2)^(0+128),w
 12106  2798  00D7               	movwf	(?___ftsub+2)^(0+128)
 12107  2799  0008               	return
 12108  279A                     __end_of___ftsub:	
 12109                           
 12110                           	psect	text31
 12111  27BA                     __ptext31:	
 12112 ;; *************** function ___awtoft *****************
 12113 ;; Defined at:
 12114 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;  c               2    8[BANK1 ] int 
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;  sign            1   13[BANK1 ] unsigned char 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  3    8[BANK1 ] float 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12128 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12129 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12130 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12131 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12132 ;;Total ram usage:        6 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    4
 12135 ;; This function calls:
 12136 ;;		___ftpack
 12137 ;; This function is called by:
 12138 ;;		_main
 12139 ;;		_set_subdivision
 12140 ;;		_exp
 12141 ;;		_log
 12142 ;; This function uses a non-reentrant model
 12143 ;;
 12144                           
 12145                           
 12146                           ;psect for function ___awtoft
 12147  27BA                     ___awtoft:	
 12148                           
 12149                           ;incstack = 0
 12150                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12151  27BA  0021               	movlb	1	; select bank1
 12152  27BB  01AD               	clrf	___awtoft@sign^(0+128)
 12153  27BC  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 12154  27BD  2FC5               	goto	l7216
 12155  27BE  09A8               	comf	___awtoft@c^(0+128),f
 12156  27BF  09A9               	comf	(___awtoft@c+1)^(0+128),f
 12157  27C0  0AA8               	incf	___awtoft@c^(0+128),f
 12158  27C1  1903               	skipnz
 12159  27C2  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 12160  27C3  01AD               	clrf	___awtoft@sign^(0+128)
 12161  27C4  0AAD               	incf	___awtoft@sign^(0+128),f
 12162  27C5                     l7216:	
 12163  27C5  0828               	movf	___awtoft@c^(0+128),w
 12164  27C6  00A0               	movwf	___ftpack@arg^(0+128)
 12165  27C7  0829               	movf	(___awtoft@c+1)^(0+128),w
 12166  27C8  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 12167  27C9  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 12168  27CA  308E               	movlw	142
 12169  27CB  00AB               	movwf	??___awtoft^(0+128)
 12170  27CC  082B               	movf	??___awtoft^(0+128),w
 12171  27CD  00A3               	movwf	___ftpack@exp^(0+128)
 12172  27CE  082D               	movf	___awtoft@sign^(0+128),w
 12173  27CF  00AC               	movwf	(??___awtoft+1)^(0+128)
 12174  27D0  082C               	movf	(??___awtoft+1)^(0+128),w
 12175  27D1  00A4               	movwf	___ftpack@sign^(0+128)
 12176  27D2  3190  2002         	fcall	___ftpack
 12177  27D4  0021               	movlb	1	; select bank1
 12178  27D5  0820               	movf	?___ftpack^(0+128),w
 12179  27D6  00A8               	movwf	?___awtoft^(0+128)
 12180  27D7  0821               	movf	(?___ftpack+1)^(0+128),w
 12181  27D8  00A9               	movwf	(?___awtoft+1)^(0+128)
 12182  27D9  0822               	movf	(?___ftpack+2)^(0+128),w
 12183  27DA  00AA               	movwf	(?___awtoft+2)^(0+128)
 12184  27DB  0008               	return
 12185  27DC                     __end_of___awtoft:	
 12186                           
 12187                           	psect	text32
 12188  1841                     __ptext32:	
 12189 ;; *************** function ___lltoft *****************
 12190 ;; Defined at:
 12191 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 12192 ;; Parameters:    Size  Location     Type
 12193 ;;  c               4    8[BANK1 ] unsigned long 
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  exp             1   13[BANK1 ] unsigned char 
 12196 ;; Return value:  Size  Location     Type
 12197 ;;                  3    8[BANK1 ] float 
 12198 ;; Registers used:
 12199 ;;		wreg, status,2, status,0, pclath, cstack
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12205 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12206 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12207 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12208 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12209 ;;Total ram usage:        6 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; Hardware stack levels required when called:    4
 12212 ;; This function calls:
 12213 ;;		___ftpack
 12214 ;; This function is called by:
 12215 ;;		_pow
 12216 ;; This function uses a non-reentrant model
 12217 ;;
 12218                           
 12219                           
 12220                           ;psect for function ___lltoft
 12221  1841                     ___lltoft:	
 12222                           
 12223                           ;incstack = 0
 12224                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 12225  1841  308E               	movlw	142
 12226  1842  0021               	movlb	1	; select bank1
 12227  1843  00AC               	movwf	??___lltoft^(0+128)
 12228  1844  082C               	movf	??___lltoft^(0+128),w
 12229  1845  00AD               	movwf	___lltoft@exp^(0+128)
 12230  1846                     l7390:	
 12231  1846  30FF               	movlw	255
 12232  1847  052B               	andwf	(___lltoft@c+3)^(0+128),w
 12233  1848  1903               	btfsc	3,2
 12234  1849  2856               	goto	l7392
 12235  184A  3001               	movlw	1
 12236  184B                     u7845:	
 12237  184B  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 12238  184C  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 12239  184D  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 12240  184E  0CA8               	rrf	___lltoft@c^(0+128),f
 12241  184F  0B89               	decfsz	9,f
 12242  1850  284B               	goto	u7845
 12243  1851  3001               	movlw	1
 12244  1852  00AC               	movwf	??___lltoft^(0+128)
 12245  1853  082C               	movf	??___lltoft^(0+128),w
 12246  1854  07AD               	addwf	___lltoft@exp^(0+128),f
 12247  1855  2846               	goto	l7390
 12248  1856                     l7392:	
 12249  1856  0828               	movf	___lltoft@c^(0+128),w
 12250  1857  00A0               	movwf	___ftpack@arg^(0+128)
 12251  1858  0829               	movf	(___lltoft@c+1)^(0+128),w
 12252  1859  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 12253  185A  082A               	movf	(___lltoft@c+2)^(0+128),w
 12254  185B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 12255  185C  082D               	movf	___lltoft@exp^(0+128),w
 12256  185D  00AC               	movwf	??___lltoft^(0+128)
 12257  185E  082C               	movf	??___lltoft^(0+128),w
 12258  185F  00A3               	movwf	___ftpack@exp^(0+128)
 12259  1860  01A4               	clrf	___ftpack@sign^(0+128)
 12260  1861  3190  2002         	fcall	___ftpack
 12261  1863  0021               	movlb	1	; select bank1
 12262  1864  0820               	movf	?___ftpack^(0+128),w
 12263  1865  00A8               	movwf	?___lltoft^(0+128)
 12264  1866  0821               	movf	(?___ftpack+1)^(0+128),w
 12265  1867  00A9               	movwf	(?___lltoft+1)^(0+128)
 12266  1868  0822               	movf	(?___ftpack+2)^(0+128),w
 12267  1869  00AA               	movwf	(?___lltoft+2)^(0+128)
 12268  186A  0008               	return
 12269  186B                     __end_of___lltoft:	
 12270                           
 12271                           	psect	text33
 12272  1DB0                     __ptext33:	
 12273 ;; *************** function _read_top_tactile *****************
 12274 ;; Defined at:
 12275 ;;		line 49 in file "tactiles.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;		None
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      void 
 12282 ;; Registers used:
 12283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12291 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12292 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12293 ;;Total ram usage:        1 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    5
 12296 ;; This function calls:
 12297 ;;		_set_leds_top
 12298 ;;		_wait_ms
 12299 ;; This function is called by:
 12300 ;;		_main
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           
 12305                           ;psect for function _read_top_tactile
 12306  1DB0                     _read_top_tactile:	
 12307                           
 12308                           ;tactiles.c: 59: if (PORTDbits.RD5 == 0) {
 12309                           
 12310                           ;incstack = 0
 12311                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12312  1DB0  0020               	movlb	0	; select bank0
 12313  1DB1  1A8F               	btfsc	15,5	;volatile
 12314  1DB2  2DBA               	goto	l8060
 12315                           
 12316                           ;tactiles.c: 60: if (topTactile_pressed > 0) {
 12317  1DB3  0023               	movlb	3	; select bank3
 12318  1DB4  084C               	movf	_topTactile_pressed^(0+384),w
 12319  1DB5  1903               	btfsc	3,2
 12320  1DB6  2DC5               	goto	l954
 12321                           
 12322                           ;tactiles.c: 61: topTactile_pressed--;
 12323  1DB7  3001               	movlw	1
 12324  1DB8  02CC               	subwf	_topTactile_pressed^(0+384),f
 12325                           
 12326                           ;tactiles.c: 62: }
 12327                           ;tactiles.c: 63: } else if (topTactile_pressed < 25) {
 12328  1DB9  2DC5               	goto	l954
 12329  1DBA                     l8060:	
 12330  1DBA  3019               	movlw	25
 12331  1DBB  0023               	movlb	3	; select bank3
 12332  1DBC  024C               	subwf	_topTactile_pressed^(0+384),w
 12333  1DBD  1803               	skipnc
 12334  1DBE  2DC5               	goto	l954
 12335                           
 12336                           ;tactiles.c: 64: topTactile_pressed++;
 12337  1DBF  3001               	movlw	1
 12338  1DC0  0021               	movlb	1	; select bank1
 12339  1DC1  00B2               	movwf	??_read_top_tactile^(0+128)
 12340  1DC2  0832               	movf	??_read_top_tactile^(0+128),w
 12341  1DC3  0023               	movlb	3	; select bank3
 12342  1DC4  07CC               	addwf	_topTactile_pressed^(0+384),f
 12343  1DC5                     l954:	
 12344                           
 12345                           ;tactiles.c: 65: }
 12346                           ;tactiles.c: 70: if (topTactile_pressed == 0) {
 12347  1DC5  084C               	movf	_topTactile_pressed^(0+384),w
 12348  1DC6  1D03               	btfss	3,2
 12349  1DC7  0008               	return
 12350                           
 12351                           ;tactiles.c: 72: top_push_state = top_push_state + 1;
 12352  1DC8  0020               	movlb	0	; select bank0
 12353  1DC9  0851               	movf	_top_push_state,w
 12354  1DCA  3E01               	addlw	1
 12355  1DCB  00D1               	movwf	_top_push_state
 12356  1DCC  3000               	movlw	0
 12357  1DCD  3D52               	addwfc	_top_push_state+1,w
 12358  1DCE  00D2               	movwf	_top_push_state+1
 12359                           
 12360                           ;tactiles.c: 73: if (top_push_state >= 7) {
 12361  1DCF  0852               	movf	_top_push_state+1,w
 12362  1DD0  3A80               	xorlw	128
 12363  1DD1  0021               	movlb	1	; select bank1
 12364  1DD2  00B2               	movwf	??_read_top_tactile^(0+128)
 12365  1DD3  3080               	movlw	128
 12366  1DD4  0232               	subwf	??_read_top_tactile^(0+128),w
 12367  1DD5  1D03               	skipz
 12368  1DD6  2DDA               	goto	u9015
 12369  1DD7  3007               	movlw	7
 12370  1DD8  0020               	movlb	0	; select bank0
 12371  1DD9  0251               	subwf	_top_push_state,w
 12372  1DDA                     u9015:	
 12373  1DDA  1C03               	skipc
 12374  1DDB  2DE1               	goto	l8070
 12375                           
 12376                           ;tactiles.c: 74: top_push_state = 1;
 12377  1DDC  3001               	movlw	1
 12378  1DDD  0020               	movlb	0	; select bank0
 12379  1DDE  00D1               	movwf	_top_push_state
 12380  1DDF  3000               	movlw	0
 12381  1DE0  00D2               	movwf	_top_push_state+1
 12382  1DE1                     l8070:	
 12383                           
 12384                           ;tactiles.c: 75: }
 12385                           ;tactiles.c: 76: set_leds_top(top_push_state, 1);
 12386  1DE1  0020               	movlb	0	; select bank0
 12387  1DE2  0852               	movf	_top_push_state+1,w
 12388  1DE3  0021               	movlb	1	; select bank1
 12389  1DE4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 12390  1DE5  0020               	movlb	0	; select bank0
 12391  1DE6  0851               	movf	_top_push_state,w
 12392  1DE7  0021               	movlb	1	; select bank1
 12393  1DE8  00A0               	movwf	set_leds_top@x^(0+128)
 12394  1DE9  3001               	movlw	1
 12395  1DEA  00A2               	movwf	set_leds_top@ledState^(0+128)
 12396  1DEB  3000               	movlw	0
 12397  1DEC  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 12398  1DED  319E  26F3  319D   	fcall	_set_leds_top
 12399                           
 12400                           ;tactiles.c: 77: delay_time_changed = 1;
 12401  1DF0  3001               	movlw	1
 12402  1DF1  0023               	movlb	3	; select bank3
 12403  1DF2  00CF               	movwf	_delay_time_changed^(0+384)
 12404  1DF3  3000               	movlw	0
 12405  1DF4  00D0               	movwf	(_delay_time_changed^(0+384)+1)
 12406  1DF5                     l958:	
 12407                           ;tactiles.c: 80: while (PORTDbits.RD5 == 0) {
 12408                           
 12409  1DF5  0020               	movlb	0	; select bank0
 12410  1DF6  1E8F               	btfss	15,5	;volatile
 12411  1DF7  2DF5               	goto	l958
 12412                           
 12413                           ;tactiles.c: 81: }
 12414                           ;tactiles.c: 82: wait_ms(20);
 12415  1DF8  3014               	movlw	20
 12416  1DF9  0021               	movlb	1	; select bank1
 12417  1DFA  00AC               	movwf	wait_ms@timeSec^(0+128)
 12418  1DFB  3000               	movlw	0
 12419  1DFC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 12420  1DFD  3198  20FA         	fcall	_wait_ms
 12421  1DFF  0008               	return
 12422  1E00                     __end_of_read_top_tactile:	
 12423                           
 12424                           	psect	text34
 12425  1C8C                     __ptext34:	
 12426 ;; *************** function _read_bottom_tactile *****************
 12427 ;; Defined at:
 12428 ;;		line 18 in file "tactiles.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;		None
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;		None
 12433 ;; Return value:  Size  Location     Type
 12434 ;;                  1    wreg      void 
 12435 ;; Registers used:
 12436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12437 ;; Tracked objects:
 12438 ;;		On entry : 0/0
 12439 ;;		On exit  : 0/0
 12440 ;;		Unchanged: 0/0
 12441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12444 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12445 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12446 ;;Total ram usage:        1 bytes
 12447 ;; Hardware stack levels used:    1
 12448 ;; Hardware stack levels required when called:    5
 12449 ;; This function calls:
 12450 ;;		_set_leds_bottom
 12451 ;;		_wait_ms
 12452 ;; This function is called by:
 12453 ;;		_main
 12454 ;; This function uses a non-reentrant model
 12455 ;;
 12456                           
 12457                           
 12458                           ;psect for function _read_bottom_tactile
 12459  1C8C                     _read_bottom_tactile:	
 12460                           
 12461                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 12462                           
 12463                           ;incstack = 0
 12464                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12465  1C8C  0020               	movlb	0	; select bank0
 12466  1C8D  1B0F               	btfsc	15,6	;volatile
 12467  1C8E  2C96               	goto	l8040
 12468                           
 12469                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 12470  1C8F  0023               	movlb	3	; select bank3
 12471  1C90  0842               	movf	_bottomTactile_pressed^(0+384),w
 12472  1C91  1903               	btfsc	3,2
 12473  1C92  2CA1               	goto	l942
 12474                           
 12475                           ;tactiles.c: 29: bottomTactile_pressed--;
 12476  1C93  3001               	movlw	1
 12477  1C94  02C2               	subwf	_bottomTactile_pressed^(0+384),f
 12478                           
 12479                           ;tactiles.c: 30: }
 12480                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 12481  1C95  2CA1               	goto	l942
 12482  1C96                     l8040:	
 12483  1C96  3019               	movlw	25
 12484  1C97  0023               	movlb	3	; select bank3
 12485  1C98  0242               	subwf	_bottomTactile_pressed^(0+384),w
 12486  1C99  1803               	skipnc
 12487  1C9A  2CA1               	goto	l942
 12488                           
 12489                           ;tactiles.c: 32: bottomTactile_pressed++;
 12490  1C9B  3001               	movlw	1
 12491  1C9C  0021               	movlb	1	; select bank1
 12492  1C9D  00B2               	movwf	??_read_bottom_tactile^(0+128)
 12493  1C9E  0832               	movf	??_read_bottom_tactile^(0+128),w
 12494  1C9F  0023               	movlb	3	; select bank3
 12495  1CA0  07C2               	addwf	_bottomTactile_pressed^(0+384),f
 12496  1CA1                     l942:	
 12497                           
 12498                           ;tactiles.c: 33: }
 12499                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 12500  1CA1  0842               	movf	_bottomTactile_pressed^(0+384),w
 12501  1CA2  1D03               	btfss	3,2
 12502  1CA3  0008               	return
 12503                           
 12504                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 12505  1CA4  0020               	movlb	0	; select bank0
 12506  1CA5  084D               	movf	_bottom_push_state,w
 12507  1CA6  3E01               	addlw	1
 12508  1CA7  00CD               	movwf	_bottom_push_state
 12509  1CA8  3000               	movlw	0
 12510  1CA9  3D4E               	addwfc	_bottom_push_state+1,w
 12511  1CAA  00CE               	movwf	_bottom_push_state+1
 12512                           
 12513                           ;tactiles.c: 38: if (bottom_push_state > 6) {
 12514  1CAB  084E               	movf	_bottom_push_state+1,w
 12515  1CAC  3A80               	xorlw	128
 12516  1CAD  0021               	movlb	1	; select bank1
 12517  1CAE  00B2               	movwf	??_read_bottom_tactile^(0+128)
 12518  1CAF  3080               	movlw	128
 12519  1CB0  0232               	subwf	??_read_bottom_tactile^(0+128),w
 12520  1CB1  1D03               	skipz
 12521  1CB2  2CB6               	goto	u8955
 12522  1CB3  3007               	movlw	7
 12523  1CB4  0020               	movlb	0	; select bank0
 12524  1CB5  024D               	subwf	_bottom_push_state,w
 12525  1CB6                     u8955:	
 12526  1CB6  1C03               	skipc
 12527  1CB7  2CBD               	goto	l8050
 12528                           
 12529                           ;tactiles.c: 39: bottom_push_state = 1;
 12530  1CB8  3001               	movlw	1
 12531  1CB9  0020               	movlb	0	; select bank0
 12532  1CBA  00CD               	movwf	_bottom_push_state
 12533  1CBB  3000               	movlw	0
 12534  1CBC  00CE               	movwf	_bottom_push_state+1
 12535  1CBD                     l8050:	
 12536                           
 12537                           ;tactiles.c: 40: }
 12538                           ;tactiles.c: 41: set_leds_bottom(bottom_push_state);
 12539  1CBD  0020               	movlb	0	; select bank0
 12540  1CBE  084E               	movf	_bottom_push_state+1,w
 12541  1CBF  0021               	movlb	1	; select bank1
 12542  1CC0  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 12543  1CC1  0020               	movlb	0	; select bank0
 12544  1CC2  084D               	movf	_bottom_push_state,w
 12545  1CC3  0021               	movlb	1	; select bank1
 12546  1CC4  00A0               	movwf	set_leds_bottom@x^(0+128)
 12547  1CC5  3199  219E  319C   	fcall	_set_leds_bottom
 12548  1CC8                     l946:	
 12549                           ;tactiles.c: 43: while (PORTDbits.RD6 == 0) {
 12550                           
 12551  1CC8  0020               	movlb	0	; select bank0
 12552  1CC9  1F0F               	btfss	15,6	;volatile
 12553  1CCA  2CC8               	goto	l946
 12554                           
 12555                           ;tactiles.c: 44: }
 12556                           ;tactiles.c: 45: wait_ms(20);
 12557  1CCB  3014               	movlw	20
 12558  1CCC  0021               	movlb	1	; select bank1
 12559  1CCD  00AC               	movwf	wait_ms@timeSec^(0+128)
 12560  1CCE  3000               	movlw	0
 12561  1CCF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 12562  1CD0  3198  20FA         	fcall	_wait_ms
 12563  1CD2  0008               	return
 12564  1CD3                     __end_of_read_bottom_tactile:	
 12565                           
 12566                           	psect	text35
 12567  1273                     __ptext35:	
 12568 ;; *************** function _map *****************
 12569 ;; Defined at:
 12570 ;;		line 177 in file "user.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  x               3   53[BANK1 ] float 
 12573 ;;  in_min          3   56[BANK1 ] float 
 12574 ;;  in_max          3   59[BANK1 ] float 
 12575 ;;  out_min         3   62[BANK1 ] float 
 12576 ;;  out_max         3   65[BANK1 ] float 
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;		None
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  3   53[BANK1 ] float 
 12581 ;; Registers used:
 12582 ;;		wreg, status,2, status,0, pclath, cstack
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12588 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12589 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12591 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12592 ;;Total ram usage:       18 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:    5
 12595 ;; This function calls:
 12596 ;;		___ftadd
 12597 ;;		___ftdiv
 12598 ;;		___ftmul
 12599 ;;		___ftneg
 12600 ;; This function is called by:
 12601 ;;		_main
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           
 12606                           ;psect for function _map
 12607  1273                     _map:	
 12608                           
 12609                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12610                           
 12611                           ;incstack = 0
 12612                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 12613  1273  0021               	movlb	1	; select bank1
 12614  1274  085B               	movf	map@in_max^(0+128),w
 12615  1275  00C8               	movwf	___ftadd@f1^(0+128)
 12616  1276  085C               	movf	(map@in_max+1)^(0+128),w
 12617  1277  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 12618  1278  085D               	movf	(map@in_max+2)^(0+128),w
 12619  1279  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 12620  127A  0858               	movf	map@in_min^(0+128),w
 12621  127B  00A0               	movwf	___ftneg@f1^(0+128)
 12622  127C  0859               	movf	(map@in_min+1)^(0+128),w
 12623  127D  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 12624  127E  085A               	movf	(map@in_min+2)^(0+128),w
 12625  127F  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 12626  1280  31A6  2686  3192   	fcall	___ftneg
 12627  1283  0021               	movlb	1	; select bank1
 12628  1284  0820               	movf	?___ftneg^(0+128),w
 12629  1285  00CB               	movwf	___ftadd@f2^(0+128)
 12630  1286  0821               	movf	(?___ftneg+1)^(0+128),w
 12631  1287  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 12632  1288  0822               	movf	(?___ftneg+2)^(0+128),w
 12633  1289  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 12634  128A  3188  2078  3192   	fcall	___ftadd
 12635  128D  0021               	movlb	1	; select bank1
 12636  128E  0848               	movf	?___ftadd^(0+128),w
 12637  128F  00A8               	movwf	___ftdiv@f2^(0+128)
 12638  1290  0849               	movf	(?___ftadd+1)^(0+128),w
 12639  1291  00A9               	movwf	(___ftdiv@f2+1)^(0+128)
 12640  1292  084A               	movf	(?___ftadd+2)^(0+128),w
 12641  1293  00AA               	movwf	(___ftdiv@f2+2)^(0+128)
 12642  1294  0861               	movf	map@out_max^(0+128),w
 12643  1295  00C8               	movwf	___ftadd@f1^(0+128)
 12644  1296  0862               	movf	(map@out_max+1)^(0+128),w
 12645  1297  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 12646  1298  0863               	movf	(map@out_max+2)^(0+128),w
 12647  1299  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 12648  129A  085E               	movf	map@out_min^(0+128),w
 12649  129B  00A0               	movwf	___ftneg@f1^(0+128)
 12650  129C  085F               	movf	(map@out_min+1)^(0+128),w
 12651  129D  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 12652  129E  0860               	movf	(map@out_min+2)^(0+128),w
 12653  129F  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 12654  12A0  31A6  2686  3192   	fcall	___ftneg
 12655  12A3  0021               	movlb	1	; select bank1
 12656  12A4  0820               	movf	?___ftneg^(0+128),w
 12657  12A5  00CB               	movwf	___ftadd@f2^(0+128)
 12658  12A6  0821               	movf	(?___ftneg+1)^(0+128),w
 12659  12A7  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 12660  12A8  0822               	movf	(?___ftneg+2)^(0+128),w
 12661  12A9  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 12662  12AA  3188  2078  3192   	fcall	___ftadd
 12663  12AD  0021               	movlb	1	; select bank1
 12664  12AE  0848               	movf	?___ftadd^(0+128),w
 12665  12AF  00B8               	movwf	___ftmul@f1^(0+128)
 12666  12B0  0849               	movf	(?___ftadd+1)^(0+128),w
 12667  12B1  00B9               	movwf	(___ftmul@f1+1)^(0+128)
 12668  12B2  084A               	movf	(?___ftadd+2)^(0+128),w
 12669  12B3  00BA               	movwf	(___ftmul@f1+2)^(0+128)
 12670  12B4  0855               	movf	map@x^(0+128),w
 12671  12B5  00C8               	movwf	___ftadd@f1^(0+128)
 12672  12B6  0856               	movf	(map@x+1)^(0+128),w
 12673  12B7  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 12674  12B8  0857               	movf	(map@x+2)^(0+128),w
 12675  12B9  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 12676  12BA  0858               	movf	map@in_min^(0+128),w
 12677  12BB  00A0               	movwf	___ftneg@f1^(0+128)
 12678  12BC  0859               	movf	(map@in_min+1)^(0+128),w
 12679  12BD  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 12680  12BE  085A               	movf	(map@in_min+2)^(0+128),w
 12681  12BF  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 12682  12C0  31A6  2686  3192   	fcall	___ftneg
 12683  12C3  0021               	movlb	1	; select bank1
 12684  12C4  0820               	movf	?___ftneg^(0+128),w
 12685  12C5  00CB               	movwf	___ftadd@f2^(0+128)
 12686  12C6  0821               	movf	(?___ftneg+1)^(0+128),w
 12687  12C7  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 12688  12C8  0822               	movf	(?___ftneg+2)^(0+128),w
 12689  12C9  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 12690  12CA  3188  2078  3192   	fcall	___ftadd
 12691  12CD  0021               	movlb	1	; select bank1
 12692  12CE  0848               	movf	?___ftadd^(0+128),w
 12693  12CF  00BB               	movwf	___ftmul@f2^(0+128)
 12694  12D0  0849               	movf	(?___ftadd+1)^(0+128),w
 12695  12D1  00BC               	movwf	(___ftmul@f2+1)^(0+128)
 12696  12D2  084A               	movf	(?___ftadd+2)^(0+128),w
 12697  12D3  00BD               	movwf	(___ftmul@f2+2)^(0+128)
 12698  12D4  3195  25A7  3192   	fcall	___ftmul
 12699  12D7  0021               	movlb	1	; select bank1
 12700  12D8  0838               	movf	?___ftmul^(0+128),w
 12701  12D9  00AB               	movwf	___ftdiv@f1^(0+128)
 12702  12DA  0839               	movf	(?___ftmul+1)^(0+128),w
 12703  12DB  00AC               	movwf	(___ftdiv@f1+1)^(0+128)
 12704  12DC  083A               	movf	(?___ftmul+2)^(0+128),w
 12705  12DD  00AD               	movwf	(___ftdiv@f1+2)^(0+128)
 12706  12DE  3193  239D  3192   	fcall	___ftdiv
 12707  12E1  0021               	movlb	1	; select bank1
 12708  12E2  0828               	movf	?___ftdiv^(0+128),w
 12709  12E3  00E4               	movwf	_map$2637^(0+128)
 12710  12E4  0829               	movf	(?___ftdiv+1)^(0+128),w
 12711  12E5  00E5               	movwf	(_map$2637+1)^(0+128)
 12712  12E6  082A               	movf	(?___ftdiv+2)^(0+128),w
 12713  12E7  00E6               	movwf	(_map$2637+2)^(0+128)
 12714                           
 12715                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12716  12E8  085E               	movf	map@out_min^(0+128),w
 12717  12E9  00C8               	movwf	___ftadd@f1^(0+128)
 12718  12EA  085F               	movf	(map@out_min+1)^(0+128),w
 12719  12EB  00C9               	movwf	(___ftadd@f1+1)^(0+128)
 12720  12EC  0860               	movf	(map@out_min+2)^(0+128),w
 12721  12ED  00CA               	movwf	(___ftadd@f1+2)^(0+128)
 12722  12EE  0864               	movf	_map$2637^(0+128),w
 12723  12EF  00CB               	movwf	___ftadd@f2^(0+128)
 12724  12F0  0865               	movf	(_map$2637+1)^(0+128),w
 12725  12F1  00CC               	movwf	(___ftadd@f2+1)^(0+128)
 12726  12F2  0866               	movf	(_map$2637+2)^(0+128),w
 12727  12F3  00CD               	movwf	(___ftadd@f2+2)^(0+128)
 12728  12F4  3188  2078         	fcall	___ftadd
 12729  12F6  0021               	movlb	1	; select bank1
 12730  12F7  0848               	movf	?___ftadd^(0+128),w
 12731  12F8  00D5               	movwf	?_map^(0+128)
 12732  12F9  0849               	movf	(?___ftadd+1)^(0+128),w
 12733  12FA  00D6               	movwf	(?_map+1)^(0+128)
 12734  12FB  084A               	movf	(?___ftadd+2)^(0+128),w
 12735  12FC  00D7               	movwf	(?_map+2)^(0+128)
 12736  12FD  0008               	return
 12737  12FE                     __end_of_map:	
 12738                           
 12739                           	psect	text36
 12740  2686                     __ptext36:	
 12741 ;; *************** function ___ftneg *****************
 12742 ;; Defined at:
 12743 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 12744 ;; Parameters:    Size  Location     Type
 12745 ;;  f1              3    0[BANK1 ] float 
 12746 ;; Auto vars:     Size  Location     Type
 12747 ;;		None
 12748 ;; Return value:  Size  Location     Type
 12749 ;;                  3    0[BANK1 ] float 
 12750 ;; Registers used:
 12751 ;;		wreg
 12752 ;; Tracked objects:
 12753 ;;		On entry : 0/0
 12754 ;;		On exit  : 0/0
 12755 ;;		Unchanged: 0/0
 12756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12757 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12760 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12761 ;;Total ram usage:        3 bytes
 12762 ;; Hardware stack levels used:    1
 12763 ;; Hardware stack levels required when called:    3
 12764 ;; This function calls:
 12765 ;;		Nothing
 12766 ;; This function is called by:
 12767 ;;		_map
 12768 ;;		_pow
 12769 ;;		_exp
 12770 ;;		_ldexp
 12771 ;;		_scalePotValue
 12772 ;; This function uses a non-reentrant model
 12773 ;;
 12774                           
 12775                           
 12776                           ;psect for function ___ftneg
 12777  2686                     ___ftneg:	
 12778                           
 12779                           ;incstack = 0
 12780                           ; Regs used in ___ftneg: [wreg]
 12781  2686  0021               	movlb	1	; select bank1
 12782  2687  0822               	movf	(___ftneg@f1+2)^(0+128),w
 12783  2688  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
 12784  2689  0420               	iorwf	___ftneg@f1^(0+128),w
 12785  268A  1903               	skipnz
 12786  268B  0008               	return
 12787  268C  3080               	movlw	128
 12788  268D  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
 12789  268E  0008               	return
 12790  268F                     __end_of___ftneg:	
 12791                           
 12792                           	psect	text37
 12793  15A7                     __ptext37:	
 12794 ;; *************** function ___ftmul *****************
 12795 ;; Defined at:
 12796 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 12797 ;; Parameters:    Size  Location     Type
 12798 ;;  f1              3   24[BANK1 ] float 
 12799 ;;  f2              3   27[BANK1 ] float 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  f3_as_produc    3   35[BANK1 ] unsigned um
 12802 ;;  sign            1   39[BANK1 ] unsigned char 
 12803 ;;  cntr            1   38[BANK1 ] unsigned char 
 12804 ;;  exp             1   34[BANK1 ] unsigned char 
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  3   24[BANK1 ] float 
 12807 ;; Registers used:
 12808 ;;		wreg, status,2, status,0, pclath, cstack
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12814 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12815 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12816 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12817 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12818 ;;Total ram usage:       16 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    4
 12821 ;; This function calls:
 12822 ;;		___ftpack
 12823 ;; This function is called by:
 12824 ;;		_set_subdivision
 12825 ;;		_map
 12826 ;;		_scaleA100kPot
 12827 ;;		_pow
 12828 ;;		_exp
 12829 ;;		_log
 12830 ;;		_eval_poly
 12831 ;;		_scalePotValue
 12832 ;;		_scaleiA100kPot
 12833 ;; This function uses a non-reentrant model
 12834 ;;
 12835                           
 12836                           
 12837                           ;psect for function ___ftmul
 12838  15A7                     ___ftmul:	
 12839                           
 12840                           ;incstack = 0
 12841                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 12842  15A7  0021               	movlb	1	; select bank1
 12843  15A8  0838               	movf	___ftmul@f1^(0+128),w
 12844  15A9  00BE               	movwf	??___ftmul^(0+128)
 12845  15AA  0839               	movf	(___ftmul@f1+1)^(0+128),w
 12846  15AB  00BF               	movwf	(??___ftmul^(0+128)+1)
 12847  15AC  083A               	movf	(___ftmul@f1+2)^(0+128),w
 12848  15AD  00C0               	movwf	(??___ftmul^(0+128)+2)
 12849  15AE  1003               	clrc
 12850  15AF  0D3F               	rlf	(??___ftmul^(0+128)+1),w
 12851  15B0  0D40               	rlf	(??___ftmul^(0+128)+2),w
 12852  15B1  00C1               	movwf	(??___ftmul+3)^(0+128)
 12853  15B2  0841               	movf	(??___ftmul+3)^(0+128),w
 12854  15B3  00C2               	movwf	___ftmul@exp^(0+128)
 12855  15B4  0842               	movf	___ftmul@exp^(0+128),w
 12856  15B5  1D03               	btfss	3,2
 12857  15B6  2DBE               	goto	l7044
 12858  15B7  3000               	movlw	0
 12859  15B8  00B8               	movwf	?___ftmul^(0+128)
 12860  15B9  3000               	movlw	0
 12861  15BA  00B9               	movwf	(?___ftmul+1)^(0+128)
 12862  15BB  3000               	movlw	0
 12863  15BC  00BA               	movwf	(?___ftmul+2)^(0+128)
 12864  15BD  0008               	return
 12865  15BE                     l7044:	
 12866  15BE  083B               	movf	___ftmul@f2^(0+128),w
 12867  15BF  00BE               	movwf	??___ftmul^(0+128)
 12868  15C0  083C               	movf	(___ftmul@f2+1)^(0+128),w
 12869  15C1  00BF               	movwf	(??___ftmul^(0+128)+1)
 12870  15C2  083D               	movf	(___ftmul@f2+2)^(0+128),w
 12871  15C3  00C0               	movwf	(??___ftmul^(0+128)+2)
 12872  15C4  1003               	clrc
 12873  15C5  0D3F               	rlf	(??___ftmul^(0+128)+1),w
 12874  15C6  0D40               	rlf	(??___ftmul^(0+128)+2),w
 12875  15C7  00C1               	movwf	(??___ftmul+3)^(0+128)
 12876  15C8  0841               	movf	(??___ftmul+3)^(0+128),w
 12877  15C9  00C7               	movwf	___ftmul@sign^(0+128)
 12878  15CA  0847               	movf	___ftmul@sign^(0+128),w
 12879  15CB  1D03               	btfss	3,2
 12880  15CC  2DD4               	goto	l7050
 12881  15CD  3000               	movlw	0
 12882  15CE  00B8               	movwf	?___ftmul^(0+128)
 12883  15CF  3000               	movlw	0
 12884  15D0  00B9               	movwf	(?___ftmul+1)^(0+128)
 12885  15D1  3000               	movlw	0
 12886  15D2  00BA               	movwf	(?___ftmul+2)^(0+128)
 12887  15D3  0008               	return
 12888  15D4                     l7050:	
 12889  15D4  0847               	movf	___ftmul@sign^(0+128),w
 12890  15D5  3E7B               	addlw	123
 12891  15D6  00BE               	movwf	??___ftmul^(0+128)
 12892  15D7  083E               	movf	??___ftmul^(0+128),w
 12893  15D8  07C2               	addwf	___ftmul@exp^(0+128),f
 12894  15D9  0838               	movf	___ftmul@f1^(0+128),w
 12895  15DA  00BE               	movwf	??___ftmul^(0+128)
 12896  15DB  0839               	movf	(___ftmul@f1+1)^(0+128),w
 12897  15DC  00BF               	movwf	(??___ftmul^(0+128)+1)
 12898  15DD  083A               	movf	(___ftmul@f1+2)^(0+128),w
 12899  15DE  00C0               	movwf	(??___ftmul^(0+128)+2)
 12900  15DF  3010               	movlw	16
 12901  15E0                     u7385:	
 12902  15E0  36C0               	lsrf	(??___ftmul^(0+128)+2),f
 12903  15E1  0CBF               	rrf	(??___ftmul^(0+128)+1),f
 12904  15E2  0CBE               	rrf	??___ftmul^(0+128),f
 12905  15E3  0B89               	decfsz	9,f
 12906  15E4  2DE0               	goto	u7385
 12907  15E5  083E               	movf	??___ftmul^(0+128),w
 12908  15E6  00C1               	movwf	(??___ftmul+3)^(0+128)
 12909  15E7  0841               	movf	(??___ftmul+3)^(0+128),w
 12910  15E8  00C7               	movwf	___ftmul@sign^(0+128)
 12911  15E9  083B               	movf	___ftmul@f2^(0+128),w
 12912  15EA  00BE               	movwf	??___ftmul^(0+128)
 12913  15EB  083C               	movf	(___ftmul@f2+1)^(0+128),w
 12914  15EC  00BF               	movwf	(??___ftmul^(0+128)+1)
 12915  15ED  083D               	movf	(___ftmul@f2+2)^(0+128),w
 12916  15EE  00C0               	movwf	(??___ftmul^(0+128)+2)
 12917  15EF  3010               	movlw	16
 12918  15F0                     u7395:	
 12919  15F0  36C0               	lsrf	(??___ftmul^(0+128)+2),f
 12920  15F1  0CBF               	rrf	(??___ftmul^(0+128)+1),f
 12921  15F2  0CBE               	rrf	??___ftmul^(0+128),f
 12922  15F3  0B89               	decfsz	9,f
 12923  15F4  2DF0               	goto	u7395
 12924  15F5  083E               	movf	??___ftmul^(0+128),w
 12925  15F6  00C1               	movwf	(??___ftmul+3)^(0+128)
 12926  15F7  0841               	movf	(??___ftmul+3)^(0+128),w
 12927  15F8  06C7               	xorwf	___ftmul@sign^(0+128),f
 12928  15F9  3080               	movlw	128
 12929  15FA  00BE               	movwf	??___ftmul^(0+128)
 12930  15FB  083E               	movf	??___ftmul^(0+128),w
 12931  15FC  05C7               	andwf	___ftmul@sign^(0+128),f
 12932  15FD  17B9               	bsf	(___ftmul@f1^(0+128)+1),7
 12933  15FE  17BC               	bsf	(___ftmul@f2^(0+128)+1),7
 12934  15FF  30FF               	movlw	255
 12935  1600  05BB               	andwf	___ftmul@f2^(0+128),f
 12936  1601  30FF               	movlw	255
 12937  1602  05BC               	andwf	(___ftmul@f2+1)^(0+128),f
 12938  1603  3000               	movlw	0
 12939  1604  05BD               	andwf	(___ftmul@f2+2)^(0+128),f
 12940  1605  3000               	movlw	0
 12941  1606  00C3               	movwf	___ftmul@f3_as_product^(0+128)
 12942  1607  3000               	movlw	0
 12943  1608  00C4               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 12944  1609  3000               	movlw	0
 12945  160A  00C5               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 12946  160B  3007               	movlw	7
 12947  160C  00BE               	movwf	??___ftmul^(0+128)
 12948  160D  083E               	movf	??___ftmul^(0+128),w
 12949  160E  00C6               	movwf	___ftmul@cntr^(0+128)
 12950  160F                     l7062:	
 12951  160F  1C38               	btfss	___ftmul@f1^(0+128),0
 12952  1610  2E17               	goto	l7066
 12953  1611  083B               	movf	___ftmul@f2^(0+128),w
 12954  1612  07C3               	addwf	___ftmul@f3_as_product^(0+128),f
 12955  1613  083C               	movf	(___ftmul@f2+1)^(0+128),w
 12956  1614  3DC4               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 12957  1615  083D               	movf	(___ftmul@f2+2)^(0+128),w
 12958  1616  3DC5               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 12959  1617                     l7066:	
 12960  1617  3001               	movlw	1
 12961  1618                     u7415:	
 12962  1618  36BA               	lsrf	(___ftmul@f1+2)^(0+128),f
 12963  1619  0CB9               	rrf	(___ftmul@f1+1)^(0+128),f
 12964  161A  0CB8               	rrf	___ftmul@f1^(0+128),f
 12965  161B  0B89               	decfsz	9,f
 12966  161C  2E18               	goto	u7415
 12967  161D  3001               	movlw	1
 12968  161E                     u7425:	
 12969  161E  35BB               	lslf	___ftmul@f2^(0+128),f
 12970  161F  0DBC               	rlf	(___ftmul@f2+1)^(0+128),f
 12971  1620  0DBD               	rlf	(___ftmul@f2+2)^(0+128),f
 12972  1621  0B89               	decfsz	9,f
 12973  1622  2E1E               	goto	u7425
 12974  1623  3001               	movlw	1
 12975  1624  02C6               	subwf	___ftmul@cntr^(0+128),f
 12976  1625  1D03               	btfss	3,2
 12977  1626  2E0F               	goto	l7062
 12978  1627  3009               	movlw	9
 12979  1628  00BE               	movwf	??___ftmul^(0+128)
 12980  1629  083E               	movf	??___ftmul^(0+128),w
 12981  162A  00C6               	movwf	___ftmul@cntr^(0+128)
 12982  162B                     l7074:	
 12983  162B  1C38               	btfss	___ftmul@f1^(0+128),0
 12984  162C  2E33               	goto	l7078
 12985  162D  083B               	movf	___ftmul@f2^(0+128),w
 12986  162E  07C3               	addwf	___ftmul@f3_as_product^(0+128),f
 12987  162F  083C               	movf	(___ftmul@f2+1)^(0+128),w
 12988  1630  3DC4               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 12989  1631  083D               	movf	(___ftmul@f2+2)^(0+128),w
 12990  1632  3DC5               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 12991  1633                     l7078:	
 12992  1633  3001               	movlw	1
 12993  1634                     u7455:	
 12994  1634  36BA               	lsrf	(___ftmul@f1+2)^(0+128),f
 12995  1635  0CB9               	rrf	(___ftmul@f1+1)^(0+128),f
 12996  1636  0CB8               	rrf	___ftmul@f1^(0+128),f
 12997  1637  0B89               	decfsz	9,f
 12998  1638  2E34               	goto	u7455
 12999  1639  3001               	movlw	1
 13000  163A                     u7465:	
 13001  163A  36C5               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 13002  163B  0CC4               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 13003  163C  0CC3               	rrf	___ftmul@f3_as_product^(0+128),f
 13004  163D  0B89               	decfsz	9,f
 13005  163E  2E3A               	goto	u7465
 13006  163F  3001               	movlw	1
 13007  1640  02C6               	subwf	___ftmul@cntr^(0+128),f
 13008  1641  1D03               	btfss	3,2
 13009  1642  2E2B               	goto	l7074
 13010  1643  0843               	movf	___ftmul@f3_as_product^(0+128),w
 13011  1644  00A0               	movwf	___ftpack@arg^(0+128)
 13012  1645  0844               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 13013  1646  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13014  1647  0845               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 13015  1648  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13016  1649  0842               	movf	___ftmul@exp^(0+128),w
 13017  164A  00BE               	movwf	??___ftmul^(0+128)
 13018  164B  083E               	movf	??___ftmul^(0+128),w
 13019  164C  00A3               	movwf	___ftpack@exp^(0+128)
 13020  164D  0847               	movf	___ftmul@sign^(0+128),w
 13021  164E  00BF               	movwf	(??___ftmul+1)^(0+128)
 13022  164F  083F               	movf	(??___ftmul+1)^(0+128),w
 13023  1650  00A4               	movwf	___ftpack@sign^(0+128)
 13024  1651  3190  2002         	fcall	___ftpack
 13025  1653  0021               	movlb	1	; select bank1
 13026  1654  0820               	movf	?___ftpack^(0+128),w
 13027  1655  00B8               	movwf	?___ftmul^(0+128)
 13028  1656  0821               	movf	(?___ftpack+1)^(0+128),w
 13029  1657  00B9               	movwf	(?___ftmul+1)^(0+128)
 13030  1658  0822               	movf	(?___ftpack+2)^(0+128),w
 13031  1659  00BA               	movwf	(?___ftmul+2)^(0+128)
 13032  165A  0008               	return
 13033  165B                     __end_of___ftmul:	
 13034                           
 13035                           	psect	text38
 13036  139D                     __ptext38:	
 13037 ;; *************** function ___ftdiv *****************
 13038 ;; Defined at:
 13039 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;  f2              3    8[BANK1 ] float 
 13042 ;;  f1              3   11[BANK1 ] float 
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;  f3              3   19[BANK1 ] float 
 13045 ;;  sign            1   23[BANK1 ] unsigned char 
 13046 ;;  exp             1   22[BANK1 ] unsigned char 
 13047 ;;  cntr            1   18[BANK1 ] unsigned char 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  3    8[BANK1 ] float 
 13050 ;; Registers used:
 13051 ;;		wreg, status,2, status,0, pclath, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13057 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13058 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13059 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13060 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13061 ;;Total ram usage:       16 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    4
 13064 ;; This function calls:
 13065 ;;		___ftpack
 13066 ;; This function is called by:
 13067 ;;		_map
 13068 ;;		_scaleA100kPot
 13069 ;;		_exp
 13070 ;;		_scalePotValue
 13071 ;;		_scaleiA100kPot
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           
 13076                           ;psect for function ___ftdiv
 13077  139D                     ___ftdiv:	
 13078                           
 13079                           ;incstack = 0
 13080                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13081  139D  0021               	movlb	1	; select bank1
 13082  139E  082B               	movf	___ftdiv@f1^(0+128),w
 13083  139F  00AE               	movwf	??___ftdiv^(0+128)
 13084  13A0  082C               	movf	(___ftdiv@f1+1)^(0+128),w
 13085  13A1  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13086  13A2  082D               	movf	(___ftdiv@f1+2)^(0+128),w
 13087  13A3  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13088  13A4  1003               	clrc
 13089  13A5  0D2F               	rlf	(??___ftdiv^(0+128)+1),w
 13090  13A6  0D30               	rlf	(??___ftdiv^(0+128)+2),w
 13091  13A7  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13092  13A8  0831               	movf	(??___ftdiv+3)^(0+128),w
 13093  13A9  00B6               	movwf	___ftdiv@exp^(0+128)
 13094  13AA  0836               	movf	___ftdiv@exp^(0+128),w
 13095  13AB  1D03               	btfss	3,2
 13096  13AC  2BB4               	goto	l7226
 13097  13AD  3000               	movlw	0
 13098  13AE  00A8               	movwf	?___ftdiv^(0+128)
 13099  13AF  3000               	movlw	0
 13100  13B0  00A9               	movwf	(?___ftdiv+1)^(0+128)
 13101  13B1  3000               	movlw	0
 13102  13B2  00AA               	movwf	(?___ftdiv+2)^(0+128)
 13103  13B3  0008               	return
 13104  13B4                     l7226:	
 13105  13B4  0828               	movf	___ftdiv@f2^(0+128),w
 13106  13B5  00AE               	movwf	??___ftdiv^(0+128)
 13107  13B6  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13108  13B7  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13109  13B8  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13110  13B9  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13111  13BA  1003               	clrc
 13112  13BB  0D2F               	rlf	(??___ftdiv^(0+128)+1),w
 13113  13BC  0D30               	rlf	(??___ftdiv^(0+128)+2),w
 13114  13BD  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13115  13BE  0831               	movf	(??___ftdiv+3)^(0+128),w
 13116  13BF  00B7               	movwf	___ftdiv@sign^(0+128)
 13117  13C0  0837               	movf	___ftdiv@sign^(0+128),w
 13118  13C1  1D03               	btfss	3,2
 13119  13C2  2BCA               	goto	l7232
 13120  13C3  3000               	movlw	0
 13121  13C4  00A8               	movwf	?___ftdiv^(0+128)
 13122  13C5  3000               	movlw	0
 13123  13C6  00A9               	movwf	(?___ftdiv+1)^(0+128)
 13124  13C7  3000               	movlw	0
 13125  13C8  00AA               	movwf	(?___ftdiv+2)^(0+128)
 13126  13C9  0008               	return
 13127  13CA                     l7232:	
 13128  13CA  3000               	movlw	0
 13129  13CB  00B3               	movwf	___ftdiv@f3^(0+128)
 13130  13CC  3000               	movlw	0
 13131  13CD  00B4               	movwf	(___ftdiv@f3+1)^(0+128)
 13132  13CE  3000               	movlw	0
 13133  13CF  00B5               	movwf	(___ftdiv@f3+2)^(0+128)
 13134  13D0  3089               	movlw	137
 13135  13D1  0737               	addwf	___ftdiv@sign^(0+128),w
 13136  13D2  00AE               	movwf	??___ftdiv^(0+128)
 13137  13D3  082E               	movf	??___ftdiv^(0+128),w
 13138  13D4  02B6               	subwf	___ftdiv@exp^(0+128),f
 13139  13D5  082B               	movf	___ftdiv@f1^(0+128),w
 13140  13D6  00AE               	movwf	??___ftdiv^(0+128)
 13141  13D7  082C               	movf	(___ftdiv@f1+1)^(0+128),w
 13142  13D8  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13143  13D9  082D               	movf	(___ftdiv@f1+2)^(0+128),w
 13144  13DA  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13145  13DB  3010               	movlw	16
 13146  13DC                     u7685:	
 13147  13DC  36B0               	lsrf	(??___ftdiv^(0+128)+2),f
 13148  13DD  0CAF               	rrf	(??___ftdiv^(0+128)+1),f
 13149  13DE  0CAE               	rrf	??___ftdiv^(0+128),f
 13150  13DF  0B89               	decfsz	9,f
 13151  13E0  2BDC               	goto	u7685
 13152  13E1  082E               	movf	??___ftdiv^(0+128),w
 13153  13E2  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13154  13E3  0831               	movf	(??___ftdiv+3)^(0+128),w
 13155  13E4  00B7               	movwf	___ftdiv@sign^(0+128)
 13156  13E5  0828               	movf	___ftdiv@f2^(0+128),w
 13157  13E6  00AE               	movwf	??___ftdiv^(0+128)
 13158  13E7  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13159  13E8  00AF               	movwf	(??___ftdiv^(0+128)+1)
 13160  13E9  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13161  13EA  00B0               	movwf	(??___ftdiv^(0+128)+2)
 13162  13EB  3010               	movlw	16
 13163  13EC                     u7695:	
 13164  13EC  36B0               	lsrf	(??___ftdiv^(0+128)+2),f
 13165  13ED  0CAF               	rrf	(??___ftdiv^(0+128)+1),f
 13166  13EE  0CAE               	rrf	??___ftdiv^(0+128),f
 13167  13EF  0B89               	decfsz	9,f
 13168  13F0  2BEC               	goto	u7695
 13169  13F1  082E               	movf	??___ftdiv^(0+128),w
 13170  13F2  00B1               	movwf	(??___ftdiv+3)^(0+128)
 13171  13F3  0831               	movf	(??___ftdiv+3)^(0+128),w
 13172  13F4  06B7               	xorwf	___ftdiv@sign^(0+128),f
 13173  13F5  3080               	movlw	128
 13174  13F6  00AE               	movwf	??___ftdiv^(0+128)
 13175  13F7  082E               	movf	??___ftdiv^(0+128),w
 13176  13F8  05B7               	andwf	___ftdiv@sign^(0+128),f
 13177  13F9  17AC               	bsf	(___ftdiv@f1^(0+128)+1),7
 13178  13FA  30FF               	movlw	255
 13179  13FB  05AB               	andwf	___ftdiv@f1^(0+128),f
 13180  13FC  30FF               	movlw	255
 13181  13FD  05AC               	andwf	(___ftdiv@f1+1)^(0+128),f
 13182  13FE  3000               	movlw	0
 13183  13FF  05AD               	andwf	(___ftdiv@f1+2)^(0+128),f
 13184  1400  17A9               	bsf	(___ftdiv@f2^(0+128)+1),7
 13185  1401  30FF               	movlw	255
 13186  1402  05A8               	andwf	___ftdiv@f2^(0+128),f
 13187  1403  30FF               	movlw	255
 13188  1404  05A9               	andwf	(___ftdiv@f2+1)^(0+128),f
 13189  1405  3000               	movlw	0
 13190  1406  05AA               	andwf	(___ftdiv@f2+2)^(0+128),f
 13191  1407  3018               	movlw	24
 13192  1408  00AE               	movwf	??___ftdiv^(0+128)
 13193  1409  082E               	movf	??___ftdiv^(0+128),w
 13194  140A  00B2               	movwf	___ftdiv@cntr^(0+128)
 13195  140B                     l7246:	
 13196  140B  3001               	movlw	1
 13197  140C                     u7705:	
 13198  140C  35B3               	lslf	___ftdiv@f3^(0+128),f
 13199  140D  0DB4               	rlf	(___ftdiv@f3+1)^(0+128),f
 13200  140E  0DB5               	rlf	(___ftdiv@f3+2)^(0+128),f
 13201  140F  0B89               	decfsz	9,f
 13202  1410  2C0C               	goto	u7705
 13203  1411  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13204  1412  022D               	subwf	(___ftdiv@f1+2)^(0+128),w
 13205  1413  1D03               	skipz
 13206  1414  2C1B               	goto	u7715
 13207  1415  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13208  1416  022C               	subwf	(___ftdiv@f1+1)^(0+128),w
 13209  1417  1D03               	skipz
 13210  1418  2C1B               	goto	u7715
 13211  1419  0828               	movf	___ftdiv@f2^(0+128),w
 13212  141A  022B               	subwf	___ftdiv@f1^(0+128),w
 13213  141B                     u7715:	
 13214  141B  1C03               	skipc
 13215  141C  2C24               	goto	l7254
 13216  141D  0828               	movf	___ftdiv@f2^(0+128),w
 13217  141E  02AB               	subwf	___ftdiv@f1^(0+128),f
 13218  141F  0829               	movf	(___ftdiv@f2+1)^(0+128),w
 13219  1420  3BAC               	subwfb	(___ftdiv@f1+1)^(0+128),f
 13220  1421  082A               	movf	(___ftdiv@f2+2)^(0+128),w
 13221  1422  3BAD               	subwfb	(___ftdiv@f1+2)^(0+128),f
 13222  1423  1433               	bsf	___ftdiv@f3^(0+128),0
 13223  1424                     l7254:	
 13224  1424  3001               	movlw	1
 13225  1425                     u7725:	
 13226  1425  35AB               	lslf	___ftdiv@f1^(0+128),f
 13227  1426  0DAC               	rlf	(___ftdiv@f1+1)^(0+128),f
 13228  1427  0DAD               	rlf	(___ftdiv@f1+2)^(0+128),f
 13229  1428  0B89               	decfsz	9,f
 13230  1429  2C25               	goto	u7725
 13231  142A  3001               	movlw	1
 13232  142B  02B2               	subwf	___ftdiv@cntr^(0+128),f
 13233  142C  1D03               	btfss	3,2
 13234  142D  2C0B               	goto	l7246
 13235  142E  0833               	movf	___ftdiv@f3^(0+128),w
 13236  142F  00A0               	movwf	___ftpack@arg^(0+128)
 13237  1430  0834               	movf	(___ftdiv@f3+1)^(0+128),w
 13238  1431  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13239  1432  0835               	movf	(___ftdiv@f3+2)^(0+128),w
 13240  1433  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13241  1434  0836               	movf	___ftdiv@exp^(0+128),w
 13242  1435  00AE               	movwf	??___ftdiv^(0+128)
 13243  1436  082E               	movf	??___ftdiv^(0+128),w
 13244  1437  00A3               	movwf	___ftpack@exp^(0+128)
 13245  1438  0837               	movf	___ftdiv@sign^(0+128),w
 13246  1439  00AF               	movwf	(??___ftdiv+1)^(0+128)
 13247  143A  082F               	movf	(??___ftdiv+1)^(0+128),w
 13248  143B  00A4               	movwf	___ftpack@sign^(0+128)
 13249  143C  3190  2002         	fcall	___ftpack
 13250  143E  0021               	movlb	1	; select bank1
 13251  143F  0820               	movf	?___ftpack^(0+128),w
 13252  1440  00A8               	movwf	?___ftdiv^(0+128)
 13253  1441  0821               	movf	(?___ftpack+1)^(0+128),w
 13254  1442  00A9               	movwf	(?___ftdiv+1)^(0+128)
 13255  1443  0822               	movf	(?___ftpack+2)^(0+128),w
 13256  1444  00AA               	movwf	(?___ftdiv+2)^(0+128)
 13257  1445  0008               	return
 13258  1446                     __end_of___ftdiv:	
 13259                           
 13260                           	psect	text39
 13261  0878                     __ptext39:	
 13262 ;; *************** function ___ftadd *****************
 13263 ;; Defined at:
 13264 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 13265 ;; Parameters:    Size  Location     Type
 13266 ;;  f1              3   40[BANK1 ] float 
 13267 ;;  f2              3   43[BANK1 ] float 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;  exp1            1   52[BANK1 ] unsigned char 
 13270 ;;  exp2            1   51[BANK1 ] unsigned char 
 13271 ;;  sign            1   50[BANK1 ] unsigned char 
 13272 ;; Return value:  Size  Location     Type
 13273 ;;                  3   40[BANK1 ] float 
 13274 ;; Registers used:
 13275 ;;		wreg, status,2, status,0, pclath, cstack
 13276 ;; Tracked objects:
 13277 ;;		On entry : 0/0
 13278 ;;		On exit  : 0/0
 13279 ;;		Unchanged: 0/0
 13280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13281 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13282 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13283 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13284 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13285 ;;Total ram usage:       13 bytes
 13286 ;; Hardware stack levels used:    1
 13287 ;; Hardware stack levels required when called:    4
 13288 ;; This function calls:
 13289 ;;		___ftpack
 13290 ;; This function is called by:
 13291 ;;		_map
 13292 ;;		___ftsub
 13293 ;;		_floor
 13294 ;;		_log
 13295 ;;		_eval_poly
 13296 ;;		_scalePotValue
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           
 13301                           ;psect for function ___ftadd
 13302  0878                     ___ftadd:	
 13303                           
 13304                           ;incstack = 0
 13305                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13306  0878  0021               	movlb	1	; select bank1
 13307  0879  0848               	movf	___ftadd@f1^(0+128),w
 13308  087A  00CE               	movwf	??___ftadd^(0+128)
 13309  087B  0849               	movf	(___ftadd@f1+1)^(0+128),w
 13310  087C  00CF               	movwf	(??___ftadd^(0+128)+1)
 13311  087D  084A               	movf	(___ftadd@f1+2)^(0+128),w
 13312  087E  00D0               	movwf	(??___ftadd^(0+128)+2)
 13313  087F  1003               	clrc
 13314  0880  0D4F               	rlf	(??___ftadd^(0+128)+1),w
 13315  0881  0D50               	rlf	(??___ftadd^(0+128)+2),w
 13316  0882  00D1               	movwf	(??___ftadd+3)^(0+128)
 13317  0883  0851               	movf	(??___ftadd+3)^(0+128),w
 13318  0884  00D4               	movwf	___ftadd@exp1^(0+128)
 13319  0885  084B               	movf	___ftadd@f2^(0+128),w
 13320  0886  00CE               	movwf	??___ftadd^(0+128)
 13321  0887  084C               	movf	(___ftadd@f2+1)^(0+128),w
 13322  0888  00CF               	movwf	(??___ftadd^(0+128)+1)
 13323  0889  084D               	movf	(___ftadd@f2+2)^(0+128),w
 13324  088A  00D0               	movwf	(??___ftadd^(0+128)+2)
 13325  088B  1003               	clrc
 13326  088C  0D4F               	rlf	(??___ftadd^(0+128)+1),w
 13327  088D  0D50               	rlf	(??___ftadd^(0+128)+2),w
 13328  088E  00D1               	movwf	(??___ftadd+3)^(0+128)
 13329  088F  0851               	movf	(??___ftadd+3)^(0+128),w
 13330  0890  00D3               	movwf	___ftadd@exp2^(0+128)
 13331  0891  0854               	movf	___ftadd@exp1^(0+128),w
 13332  0892  1903               	btfsc	3,2
 13333  0893  28A0               	goto	l6954
 13334  0894  0853               	movf	___ftadd@exp2^(0+128),w
 13335  0895  0254               	subwf	___ftadd@exp1^(0+128),w
 13336  0896  1803               	skipnc
 13337  0897  28A7               	goto	l6958
 13338  0898  0354               	decf	___ftadd@exp1^(0+128),w
 13339  0899  3AFF               	xorlw	255
 13340  089A  0753               	addwf	___ftadd@exp2^(0+128),w
 13341  089B  00CE               	movwf	??___ftadd^(0+128)
 13342  089C  3019               	movlw	25
 13343  089D  024E               	subwf	??___ftadd^(0+128),w
 13344  089E  1C03               	skipc
 13345  089F  28A7               	goto	l6958
 13346  08A0                     l6954:	
 13347  08A0  084B               	movf	___ftadd@f2^(0+128),w
 13348  08A1  00C8               	movwf	?___ftadd^(0+128)
 13349  08A2  084C               	movf	(___ftadd@f2+1)^(0+128),w
 13350  08A3  00C9               	movwf	(?___ftadd+1)^(0+128)
 13351  08A4  084D               	movf	(___ftadd@f2+2)^(0+128),w
 13352  08A5  00CA               	movwf	(?___ftadd+2)^(0+128)
 13353  08A6  0008               	return
 13354  08A7                     l6958:	
 13355  08A7  0853               	movf	___ftadd@exp2^(0+128),w
 13356  08A8  1903               	btfsc	3,2
 13357  08A9  0008               	return
 13358  08AA  0854               	movf	___ftadd@exp1^(0+128),w
 13359  08AB  0253               	subwf	___ftadd@exp2^(0+128),w
 13360  08AC  1803               	skipnc
 13361  08AD  28B6               	goto	l6964
 13362  08AE  0353               	decf	___ftadd@exp2^(0+128),w
 13363  08AF  3AFF               	xorlw	255
 13364  08B0  0754               	addwf	___ftadd@exp1^(0+128),w
 13365  08B1  00CE               	movwf	??___ftadd^(0+128)
 13366  08B2  3019               	movlw	25
 13367  08B3  024E               	subwf	??___ftadd^(0+128),w
 13368  08B4  1803               	btfsc	3,0
 13369  08B5  0008               	return
 13370  08B6                     l6964:	
 13371  08B6  3006               	movlw	6
 13372  08B7  00CE               	movwf	??___ftadd^(0+128)
 13373  08B8  084E               	movf	??___ftadd^(0+128),w
 13374  08B9  00D2               	movwf	___ftadd@sign^(0+128)
 13375  08BA  1BCA               	btfsc	(___ftadd@f1+2)^(0+128),7
 13376  08BB  17D2               	bsf	___ftadd@sign^(0+128),7
 13377  08BC  1BCD               	btfsc	(___ftadd@f2+2)^(0+128),7
 13378  08BD  1752               	bsf	___ftadd@sign^(0+128),6
 13379  08BE  17C9               	bsf	(___ftadd@f1^(0+128)+1),7
 13380  08BF  30FF               	movlw	255
 13381  08C0  05C8               	andwf	___ftadd@f1^(0+128),f
 13382  08C1  30FF               	movlw	255
 13383  08C2  05C9               	andwf	(___ftadd@f1+1)^(0+128),f
 13384  08C3  3000               	movlw	0
 13385  08C4  05CA               	andwf	(___ftadd@f1+2)^(0+128),f
 13386  08C5  17CC               	bsf	(___ftadd@f2^(0+128)+1),7
 13387  08C6  30FF               	movlw	255
 13388  08C7  05CB               	andwf	___ftadd@f2^(0+128),f
 13389  08C8  30FF               	movlw	255
 13390  08C9  05CC               	andwf	(___ftadd@f2+1)^(0+128),f
 13391  08CA  3000               	movlw	0
 13392  08CB  05CD               	andwf	(___ftadd@f2+2)^(0+128),f
 13393  08CC  0853               	movf	___ftadd@exp2^(0+128),w
 13394  08CD  0254               	subwf	___ftadd@exp1^(0+128),w
 13395  08CE  1803               	skipnc
 13396  08CF  28F2               	goto	l6986
 13397  08D0                     l6976:	
 13398  08D0  3001               	movlw	1
 13399  08D1                     u7195:	
 13400  08D1  35CB               	lslf	___ftadd@f2^(0+128),f
 13401  08D2  0DCC               	rlf	(___ftadd@f2+1)^(0+128),f
 13402  08D3  0DCD               	rlf	(___ftadd@f2+2)^(0+128),f
 13403  08D4  0B89               	decfsz	9,f
 13404  08D5  28D1               	goto	u7195
 13405  08D6  3001               	movlw	1
 13406  08D7  02D3               	subwf	___ftadd@exp2^(0+128),f
 13407  08D8  0853               	movf	___ftadd@exp2^(0+128),w
 13408  08D9  0654               	xorwf	___ftadd@exp1^(0+128),w
 13409  08DA  1903               	skipnz
 13410  08DB  28ED               	goto	l6984
 13411  08DC  3001               	movlw	1
 13412  08DD  02D2               	subwf	___ftadd@sign^(0+128),f
 13413  08DE  0852               	movf	___ftadd@sign^(0+128),w
 13414  08DF  3907               	andlw	7
 13415  08E0  1903               	btfsc	3,2
 13416  08E1  28ED               	goto	l6984
 13417  08E2  28D0               	goto	l6976
 13418  08E3                     l6982:	
 13419  08E3  3001               	movlw	1
 13420  08E4                     u7225:	
 13421  08E4  36CA               	lsrf	(___ftadd@f1+2)^(0+128),f
 13422  08E5  0CC9               	rrf	(___ftadd@f1+1)^(0+128),f
 13423  08E6  0CC8               	rrf	___ftadd@f1^(0+128),f
 13424  08E7  0B89               	decfsz	9,f
 13425  08E8  28E4               	goto	u7225
 13426  08E9  3001               	movlw	1
 13427  08EA  00CE               	movwf	??___ftadd^(0+128)
 13428  08EB  084E               	movf	??___ftadd^(0+128),w
 13429  08EC  07D4               	addwf	___ftadd@exp1^(0+128),f
 13430  08ED                     l6984:	
 13431  08ED  0854               	movf	___ftadd@exp1^(0+128),w
 13432  08EE  0653               	xorwf	___ftadd@exp2^(0+128),w
 13433  08EF  1903               	btfsc	3,2
 13434  08F0  2917               	goto	l1932
 13435  08F1  28E3               	goto	l6982
 13436  08F2                     l6986:	
 13437  08F2  0854               	movf	___ftadd@exp1^(0+128),w
 13438  08F3  0253               	subwf	___ftadd@exp2^(0+128),w
 13439  08F4  1803               	skipnc
 13440  08F5  2917               	goto	l1932
 13441  08F6                     l6988:	
 13442  08F6  3001               	movlw	1
 13443  08F7                     u7255:	
 13444  08F7  35C8               	lslf	___ftadd@f1^(0+128),f
 13445  08F8  0DC9               	rlf	(___ftadd@f1+1)^(0+128),f
 13446  08F9  0DCA               	rlf	(___ftadd@f1+2)^(0+128),f
 13447  08FA  0B89               	decfsz	9,f
 13448  08FB  28F7               	goto	u7255
 13449  08FC  3001               	movlw	1
 13450  08FD  02D4               	subwf	___ftadd@exp1^(0+128),f
 13451  08FE  0853               	movf	___ftadd@exp2^(0+128),w
 13452  08FF  0654               	xorwf	___ftadd@exp1^(0+128),w
 13453  0900  1903               	skipnz
 13454  0901  2913               	goto	l6996
 13455  0902  3001               	movlw	1
 13456  0903  02D2               	subwf	___ftadd@sign^(0+128),f
 13457  0904  0852               	movf	___ftadd@sign^(0+128),w
 13458  0905  3907               	andlw	7
 13459  0906  1903               	btfsc	3,2
 13460  0907  2913               	goto	l6996
 13461  0908  28F6               	goto	l6988
 13462  0909                     l6994:	
 13463  0909  3001               	movlw	1
 13464  090A                     u7285:	
 13465  090A  36CD               	lsrf	(___ftadd@f2+2)^(0+128),f
 13466  090B  0CCC               	rrf	(___ftadd@f2+1)^(0+128),f
 13467  090C  0CCB               	rrf	___ftadd@f2^(0+128),f
 13468  090D  0B89               	decfsz	9,f
 13469  090E  290A               	goto	u7285
 13470  090F  3001               	movlw	1
 13471  0910  00CE               	movwf	??___ftadd^(0+128)
 13472  0911  084E               	movf	??___ftadd^(0+128),w
 13473  0912  07D3               	addwf	___ftadd@exp2^(0+128),f
 13474  0913                     l6996:	
 13475  0913  0854               	movf	___ftadd@exp1^(0+128),w
 13476  0914  0653               	xorwf	___ftadd@exp2^(0+128),w
 13477  0915  1D03               	skipz
 13478  0916  2909               	goto	l6994
 13479  0917                     l1932:	
 13480  0917  1FD2               	btfss	___ftadd@sign^(0+128),7
 13481  0918  2929               	goto	l7000
 13482  0919  30FF               	movlw	255
 13483  091A  06C8               	xorwf	___ftadd@f1^(0+128),f
 13484  091B  30FF               	movlw	255
 13485  091C  06C9               	xorwf	(___ftadd@f1+1)^(0+128),f
 13486  091D  30FF               	movlw	255
 13487  091E  06CA               	xorwf	(___ftadd@f1+2)^(0+128),f
 13488  091F  3001               	movlw	1
 13489  0920  07C8               	addwf	___ftadd@f1^(0+128),f
 13490  0921  3000               	movlw	0
 13491  0922  1803               	skipnc
 13492  0923  3001               	movlw	1
 13493  0924  07C9               	addwf	(___ftadd@f1+1)^(0+128),f
 13494  0925  3000               	movlw	0
 13495  0926  1803               	skipnc
 13496  0927  3001               	movlw	1
 13497  0928  07CA               	addwf	(___ftadd@f1+2)^(0+128),f
 13498  0929                     l7000:	
 13499  0929  1F52               	btfss	___ftadd@sign^(0+128),6
 13500  092A  293B               	goto	l7004
 13501  092B  30FF               	movlw	255
 13502  092C  06CB               	xorwf	___ftadd@f2^(0+128),f
 13503  092D  30FF               	movlw	255
 13504  092E  06CC               	xorwf	(___ftadd@f2+1)^(0+128),f
 13505  092F  30FF               	movlw	255
 13506  0930  06CD               	xorwf	(___ftadd@f2+2)^(0+128),f
 13507  0931  3001               	movlw	1
 13508  0932  07CB               	addwf	___ftadd@f2^(0+128),f
 13509  0933  3000               	movlw	0
 13510  0934  1803               	skipnc
 13511  0935  3001               	movlw	1
 13512  0936  07CC               	addwf	(___ftadd@f2+1)^(0+128),f
 13513  0937  3000               	movlw	0
 13514  0938  1803               	skipnc
 13515  0939  3001               	movlw	1
 13516  093A  07CD               	addwf	(___ftadd@f2+2)^(0+128),f
 13517  093B                     l7004:	
 13518  093B  01D2               	clrf	___ftadd@sign^(0+128)
 13519  093C  0848               	movf	___ftadd@f1^(0+128),w
 13520  093D  07CB               	addwf	___ftadd@f2^(0+128),f
 13521  093E  0849               	movf	(___ftadd@f1+1)^(0+128),w
 13522  093F  3DCC               	addwfc	(___ftadd@f2+1)^(0+128),f
 13523  0940  084A               	movf	(___ftadd@f1+2)^(0+128),w
 13524  0941  3DCD               	addwfc	(___ftadd@f2+2)^(0+128),f
 13525  0942  1FCD               	btfss	(___ftadd@f2+2)^(0+128),7
 13526  0943  2956               	goto	l7014
 13527  0944  30FF               	movlw	255
 13528  0945  06CB               	xorwf	___ftadd@f2^(0+128),f
 13529  0946  30FF               	movlw	255
 13530  0947  06CC               	xorwf	(___ftadd@f2+1)^(0+128),f
 13531  0948  30FF               	movlw	255
 13532  0949  06CD               	xorwf	(___ftadd@f2+2)^(0+128),f
 13533  094A  3001               	movlw	1
 13534  094B  07CB               	addwf	___ftadd@f2^(0+128),f
 13535  094C  3000               	movlw	0
 13536  094D  1803               	skipnc
 13537  094E  3001               	movlw	1
 13538  094F  07CC               	addwf	(___ftadd@f2+1)^(0+128),f
 13539  0950  3000               	movlw	0
 13540  0951  1803               	skipnc
 13541  0952  3001               	movlw	1
 13542  0953  07CD               	addwf	(___ftadd@f2+2)^(0+128),f
 13543  0954  01D2               	clrf	___ftadd@sign^(0+128)
 13544  0955  0AD2               	incf	___ftadd@sign^(0+128),f
 13545  0956                     l7014:	
 13546  0956  084B               	movf	___ftadd@f2^(0+128),w
 13547  0957  00A0               	movwf	___ftpack@arg^(0+128)
 13548  0958  084C               	movf	(___ftadd@f2+1)^(0+128),w
 13549  0959  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13550  095A  084D               	movf	(___ftadd@f2+2)^(0+128),w
 13551  095B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13552  095C  0854               	movf	___ftadd@exp1^(0+128),w
 13553  095D  00CE               	movwf	??___ftadd^(0+128)
 13554  095E  084E               	movf	??___ftadd^(0+128),w
 13555  095F  00A3               	movwf	___ftpack@exp^(0+128)
 13556  0960  0852               	movf	___ftadd@sign^(0+128),w
 13557  0961  00CF               	movwf	(??___ftadd+1)^(0+128)
 13558  0962  084F               	movf	(??___ftadd+1)^(0+128),w
 13559  0963  00A4               	movwf	___ftpack@sign^(0+128)
 13560  0964  3190  2002         	fcall	___ftpack
 13561  0966  0021               	movlb	1	; select bank1
 13562  0967  0820               	movf	?___ftpack^(0+128),w
 13563  0968  00C8               	movwf	?___ftadd^(0+128)
 13564  0969  0821               	movf	(?___ftpack+1)^(0+128),w
 13565  096A  00C9               	movwf	(?___ftadd+1)^(0+128)
 13566  096B  0822               	movf	(?___ftpack+2)^(0+128),w
 13567  096C  00CA               	movwf	(?___ftadd+2)^(0+128)
 13568  096D  0008               	return
 13569  096E                     __end_of___ftadd:	
 13570                           
 13571                           	psect	text40
 13572  1002                     __ptext40:	
 13573 ;; *************** function ___ftpack *****************
 13574 ;; Defined at:
 13575 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 13576 ;; Parameters:    Size  Location     Type
 13577 ;;  arg             3    0[BANK1 ] unsigned um
 13578 ;;  exp             1    3[BANK1 ] unsigned char 
 13579 ;;  sign            1    4[BANK1 ] unsigned char 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;		None
 13582 ;; Return value:  Size  Location     Type
 13583 ;;                  3    0[BANK1 ] float 
 13584 ;; Registers used:
 13585 ;;		wreg, status,2, status,0
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13591 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13593 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13594 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13595 ;;Total ram usage:        8 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    3
 13598 ;; This function calls:
 13599 ;;		Nothing
 13600 ;; This function is called by:
 13601 ;;		___altoft
 13602 ;;		___awtoft
 13603 ;;		___ftadd
 13604 ;;		___ftdiv
 13605 ;;		___ftmul
 13606 ;;		___lltoft
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           
 13611                           ;psect for function ___ftpack
 13612  1002                     ___ftpack:	
 13613                           
 13614                           ;incstack = 0
 13615                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13616  1002  0021               	movlb	1	; select bank1
 13617  1003  0823               	movf	___ftpack@exp^(0+128),w
 13618  1004  1903               	btfsc	3,2
 13619  1005  280B               	goto	l6854
 13620  1006  0822               	movf	(___ftpack@arg+2)^(0+128),w
 13621  1007  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 13622  1008  0420               	iorwf	___ftpack@arg^(0+128),w
 13623  1009  1D03               	skipz
 13624  100A  281C               	goto	l6860
 13625  100B                     l6854:	
 13626  100B  3000               	movlw	0
 13627  100C  00A0               	movwf	?___ftpack^(0+128)
 13628  100D  3000               	movlw	0
 13629  100E  00A1               	movwf	(?___ftpack+1)^(0+128)
 13630  100F  3000               	movlw	0
 13631  1010  00A2               	movwf	(?___ftpack+2)^(0+128)
 13632  1011  0008               	return
 13633  1012                     l6858:	
 13634  1012  3001               	movlw	1
 13635  1013  00A5               	movwf	??___ftpack^(0+128)
 13636  1014  0825               	movf	??___ftpack^(0+128),w
 13637  1015  07A3               	addwf	___ftpack@exp^(0+128),f
 13638  1016  3001               	movlw	1
 13639  1017                     u6925:	
 13640  1017  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 13641  1018  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 13642  1019  0CA0               	rrf	___ftpack@arg^(0+128),f
 13643  101A  0B89               	decfsz	9,f
 13644  101B  2817               	goto	u6925
 13645  101C                     l6860:	
 13646  101C  30FE               	movlw	254
 13647  101D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 13648  101E  1903               	btfsc	3,2
 13649  101F  2835               	goto	l1901
 13650  1020  2812               	goto	l6858
 13651  1021                     l6862:	
 13652  1021  3001               	movlw	1
 13653  1022  00A5               	movwf	??___ftpack^(0+128)
 13654  1023  0825               	movf	??___ftpack^(0+128),w
 13655  1024  07A3               	addwf	___ftpack@exp^(0+128),f
 13656  1025  3001               	movlw	1
 13657  1026  07A0               	addwf	___ftpack@arg^(0+128),f
 13658  1027  3000               	movlw	0
 13659  1028  1803               	skipnc
 13660  1029  3001               	movlw	1
 13661  102A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 13662  102B  3000               	movlw	0
 13663  102C  1803               	skipnc
 13664  102D  3001               	movlw	1
 13665  102E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 13666  102F  3001               	movlw	1
 13667  1030                     u6945:	
 13668  1030  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 13669  1031  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 13670  1032  0CA0               	rrf	___ftpack@arg^(0+128),f
 13671  1033  0B89               	decfsz	9,f
 13672  1034  2830               	goto	u6945
 13673  1035                     l1901:	
 13674  1035  30FF               	movlw	255
 13675  1036  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 13676  1037  1903               	btfsc	3,2
 13677  1038  2842               	goto	l6870
 13678  1039  2821               	goto	l6862
 13679  103A                     l6868:	
 13680  103A  3001               	movlw	1
 13681  103B  02A3               	subwf	___ftpack@exp^(0+128),f
 13682  103C  3001               	movlw	1
 13683  103D                     u6965:	
 13684  103D  35A0               	lslf	___ftpack@arg^(0+128),f
 13685  103E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 13686  103F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 13687  1040  0B89               	decfsz	9,f
 13688  1041  283D               	goto	u6965
 13689  1042                     l6870:	
 13690  1042  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 13691  1043  2848               	goto	l1908
 13692  1044  3002               	movlw	2
 13693  1045  0223               	subwf	___ftpack@exp^(0+128),w
 13694  1046  1803               	skipnc
 13695  1047  283A               	goto	l6868
 13696  1048                     l1908:	
 13697  1048  1823               	btfsc	___ftpack@exp^(0+128),0
 13698  1049  2850               	goto	l1909
 13699  104A  30FF               	movlw	255
 13700  104B  05A0               	andwf	___ftpack@arg^(0+128),f
 13701  104C  307F               	movlw	127
 13702  104D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 13703  104E  30FF               	movlw	255
 13704  104F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 13705  1050                     l1909:	
 13706  1050  1003               	clrc
 13707  1051  0CA3               	rrf	___ftpack@exp^(0+128),f
 13708  1052  0823               	movf	___ftpack@exp^(0+128),w
 13709  1053  00A5               	movwf	??___ftpack^(0+128)
 13710  1054  01A6               	clrf	(??___ftpack^(0+128)+1)
 13711  1055  01A7               	clrf	(??___ftpack^(0+128)+2)
 13712  1056  3010               	movlw	16
 13713  1057                     u7005:	
 13714  1057  35A5               	lslf	??___ftpack^(0+128),f
 13715  1058  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 13716  1059  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 13717  105A  0B89               	decfsz	9,f
 13718  105B  2857               	goto	u7005
 13719  105C  0825               	movf	??___ftpack^(0+128),w
 13720  105D  04A0               	iorwf	___ftpack@arg^(0+128),f
 13721  105E  0826               	movf	(??___ftpack+1)^(0+128),w
 13722  105F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 13723  1060  0827               	movf	(??___ftpack+2)^(0+128),w
 13724  1061  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 13725  1062  0824               	movf	___ftpack@sign^(0+128),w
 13726  1063  1903               	btfsc	3,2
 13727  1064  0008               	return
 13728  1065  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 13729  1066  0008               	return
 13730  1067                     __end_of___ftpack:	
 13731                           
 13732                           	psect	text41
 13733  26B1                     __ptext41:	
 13734 ;; *************** function _initSwitchBypass *****************
 13735 ;; Defined at:
 13736 ;;		line 29 in file "SwitchBypass.c"
 13737 ;; Parameters:    Size  Location     Type
 13738 ;;		None
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;  initState       2   22[BANK1 ] int 
 13741 ;; Return value:  Size  Location     Type
 13742 ;;                  1    wreg      void 
 13743 ;; Registers used:
 13744 ;;		wreg, status,2, status,0, pclath, cstack
 13745 ;; Tracked objects:
 13746 ;;		On entry : 0/0
 13747 ;;		On exit  : 0/0
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13751 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13753 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13754 ;;Total ram usage:        2 bytes
 13755 ;; Hardware stack levels used:    1
 13756 ;; Hardware stack levels required when called:    6
 13757 ;; This function calls:
 13758 ;;		_getSwitchBypassState
 13759 ;;		_setSwitchBypassState
 13760 ;; This function is called by:
 13761 ;;		_main
 13762 ;; This function uses a non-reentrant model
 13763 ;;
 13764                           
 13765                           
 13766                           ;psect for function _initSwitchBypass
 13767  26B1                     _initSwitchBypass:	
 13768                           
 13769                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 13770                           
 13771                           ;incstack = 0
 13772                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 13773  26B1  31A6  2679  31A6   	fcall	_getSwitchBypassState
 13774  26B4  0021               	movlb	1	; select bank1
 13775  26B5  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 13776  26B6  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 13777  26B7  0820               	movf	?_getSwitchBypassState^(0+128),w
 13778  26B8  00B6               	movwf	initSwitchBypass@initState^(0+128)
 13779                           
 13780                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 13781  26B9  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 13782  26BA  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 13783  26BB  0836               	movf	initSwitchBypass@initState^(0+128),w
 13784  26BC  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 13785  26BD  319D  251B         	fcall	_setSwitchBypassState
 13786  26BF  0008               	return
 13787  26C0                     __end_of_initSwitchBypass:	
 13788                           
 13789                           	psect	text42
 13790  1D1B                     __ptext42:	
 13791 ;; *************** function _setSwitchBypassState *****************
 13792 ;; Defined at:
 13793 ;;		line 134 in file "SwitchBypass.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  f_state         2   18[BANK1 ] int 
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;		None
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		wreg, status,2, status,0, pclath, cstack
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13807 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13809 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13810 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13811 ;;Total ram usage:        4 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    5
 13814 ;; This function calls:
 13815 ;;		_updateSwitchBypassState
 13816 ;;		_wait_ms
 13817 ;; This function is called by:
 13818 ;;		_initSwitchBypass
 13819 ;;		_updateSwitchBypass
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           
 13824                           ;psect for function _setSwitchBypassState
 13825  1D1B                     _setSwitchBypassState:	
 13826                           
 13827                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 13828                           
 13829                           ;incstack = 0
 13830                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 13831  1D1B  0020               	movlb	0	; select bank0
 13832  1D1C  0857               	movf	_switchBypass_state,w
 13833  1D1D  0021               	movlb	1	; select bank1
 13834  1D1E  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13835  1D1F  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13836  1D20  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13837  1D21  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 13838  1D22  1D03               	skipz
 13839  1D23  2D26               	goto	u8045
 13840  1D24  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13841  1D25  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 13842  1D26                     u8045:	
 13843  1D26  1903               	btfsc	3,2
 13844  1D27  0008               	return
 13845                           
 13846                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 13847  1D28  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13848  1D29  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13849  1D2A  0834               	movf	??_setSwitchBypassState^(0+128),w
 13850  1D2B  0020               	movlb	0	; select bank0
 13851  1D2C  00D7               	movwf	_switchBypass_state
 13852                           
 13853                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 13854  1D2D  0021               	movlb	1	; select bank1
 13855  1D2E  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13856  1D2F  0022               	movlb	2	; select bank2
 13857  1D30  1C03               	skipc
 13858  1D31  110D               	bcf	13,2	;volatile
 13859  1D32  1803               	skipnc
 13860  1D33  150D               	bsf	13,2	;volatile
 13861                           
 13862                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 13863  1D34  118D               	bcf	13,3	;volatile
 13864                           
 13865                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 13866  1D35  0021               	movlb	1	; select bank1
 13867  1D36  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13868  1D37  0027               	movlb	7	; select bank7
 13869  1D38  1C03               	skipc
 13870  1D39  110D               	bcf	13,2	;volatile
 13871  1D3A  1803               	skipnc
 13872  1D3B  150D               	bsf	13,2	;volatile
 13873                           
 13874                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 13875  1D3C  0021               	movlb	1	; select bank1
 13876  1D3D  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13877  1D3E  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 13878  1D3F  1D03               	btfss	3,2
 13879  1D40  2D44               	goto	u8050
 13880  1D41  0027               	movlb	7	; select bank7
 13881  1D42  148D               	bsf	13,1	;volatile
 13882  1D43  2D46               	goto	l7598
 13883  1D44                     u8050:	
 13884  1D44  0027               	movlb	7	; select bank7
 13885  1D45  108D               	bcf	13,1	;volatile
 13886  1D46                     l7598:	
 13887                           
 13888                           ;SwitchBypass.c: 142: wait_ms(20);
 13889  1D46  3014               	movlw	20
 13890  1D47  0021               	movlb	1	; select bank1
 13891  1D48  00AC               	movwf	wait_ms@timeSec^(0+128)
 13892  1D49  3000               	movlw	0
 13893  1D4A  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13894  1D4B  3198  20FA  319D   	fcall	_wait_ms
 13895                           
 13896                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 13897  1D4E  0027               	movlb	7	; select bank7
 13898  1D4F  110D               	bcf	13,2	;volatile
 13899                           
 13900                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 13901  1D50  108D               	bcf	13,1	;volatile
 13902                           
 13903                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 13904  1D51  0020               	movlb	0	; select bank0
 13905  1D52  0857               	movf	_switchBypass_state,w
 13906  1D53  0021               	movlb	1	; select bank1
 13907  1D54  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13908  1D55  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13909  1D56  0834               	movf	??_setSwitchBypassState^(0+128),w
 13910  1D57  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 13911  1D58  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 13912  1D59  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 13913  1D5A  3188  2001  319D   	fcall	_updateSwitchBypassState
 13914                           
 13915                           ;SwitchBypass.c: 148: wait_ms(20);
 13916  1D5D  3014               	movlw	20
 13917  1D5E  0021               	movlb	1	; select bank1
 13918  1D5F  00AC               	movwf	wait_ms@timeSec^(0+128)
 13919  1D60  3000               	movlw	0
 13920  1D61  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13921  1D62  3198  20FA         	fcall	_wait_ms
 13922  1D64  0008               	return
 13923  1D65                     __end_of_setSwitchBypassState:	
 13924                           
 13925                           	psect	text43
 13926  18FA                     __ptext43:	
 13927 ;; *************** function _wait_ms *****************
 13928 ;; Defined at:
 13929 ;;		line 23 in file "system.c"
 13930 ;; Parameters:    Size  Location     Type
 13931 ;;  timeSec         2   12[BANK1 ] unsigned int 
 13932 ;; Auto vars:     Size  Location     Type
 13933 ;;  timemsl         4   14[BANK1 ] long 
 13934 ;; Return value:  Size  Location     Type
 13935 ;;                  1    wreg      void 
 13936 ;; Registers used:
 13937 ;;		wreg, status,2, status,0, pclath, cstack
 13938 ;; Tracked objects:
 13939 ;;		On entry : 0/0
 13940 ;;		On exit  : 0/0
 13941 ;;		Unchanged: 0/0
 13942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13943 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13944 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13946 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13947 ;;Total ram usage:        6 bytes
 13948 ;; Hardware stack levels used:    1
 13949 ;; Hardware stack levels required when called:    4
 13950 ;; This function calls:
 13951 ;;		___lmul
 13952 ;; This function is called by:
 13953 ;;		_ring_tactiles
 13954 ;;		_solidring_tactiles
 13955 ;;		_read_bottom_tactile
 13956 ;;		_read_top_tactile
 13957 ;;		_setSwitchBypassState
 13958 ;;		_setDoublePressState
 13959 ;;		_showError_Alternating
 13960 ;;		_show_error
 13961 ;;		_show_cancel
 13962 ;;		_star_tactiles
 13963 ;;		_initExpModeState
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           
 13968                           ;psect for function _wait_ms
 13969  18FA                     _wait_ms:	
 13970                           
 13971                           ;system.c: 25: long timemsl = 0;
 13972                           
 13973                           ;incstack = 0
 13974                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 13975  18FA  3000               	movlw	0
 13976  18FB  0021               	movlb	1	; select bank1
 13977  18FC  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13978  18FD  3000               	movlw	0
 13979  18FE  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13980  18FF  3000               	movlw	0
 13981  1900  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13982  1901  3000               	movlw	0
 13983  1902  00AE               	movwf	wait_ms@timemsl^(0+128)
 13984                           
 13985                           ;system.c: 26: timemsl = timeSec * 1000l;
 13986  1903  082C               	movf	wait_ms@timeSec^(0+128),w
 13987  1904  00A0               	movwf	___lmul@multiplier^(0+128)
 13988  1905  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 13989  1906  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 13990  1907  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 13991  1908  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 13992  1909  3000               	movlw	0
 13993  190A  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 13994  190B  3000               	movlw	0
 13995  190C  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 13996  190D  3003               	movlw	3
 13997  190E  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 13998  190F  30E8               	movlw	232
 13999  1910  00A4               	movwf	___lmul@multiplicand^(0+128)
 14000  1911  3198  20CA  3198   	fcall	___lmul
 14001  1914  0021               	movlb	1	; select bank1
 14002  1915  0823               	movf	(?___lmul+3)^(0+128),w
 14003  1916  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14004  1917  0822               	movf	(?___lmul+2)^(0+128),w
 14005  1918  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14006  1919  0821               	movf	(?___lmul+1)^(0+128),w
 14007  191A  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14008  191B  0820               	movf	?___lmul^(0+128),w
 14009  191C  00AE               	movwf	wait_ms@timemsl^(0+128)
 14010  191D                     l386:	
 14011                           ;system.c: 27: for( ; timemsl; timemsl--);
 14012                           
 14013  191D  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14014  191E  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14015  191F  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14016  1920  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14017  1921  1903               	btfsc	3,2
 14018  1922  0008               	return
 14019  1923  30FF               	movlw	255
 14020  1924  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14021  1925  30FF               	movlw	255
 14022  1926  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14023  1927  30FF               	movlw	255
 14024  1928  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14025  1929  30FF               	movlw	255
 14026  192A  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14027  192B  291D               	goto	l386
 14028  192C                     __end_of_wait_ms:	
 14029                           
 14030                           	psect	text44
 14031  18CA                     __ptext44:	
 14032 ;; *************** function ___lmul *****************
 14033 ;; Defined at:
 14034 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14037 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14038 ;; Auto vars:     Size  Location     Type
 14039 ;;  product         4    8[BANK1 ] unsigned long 
 14040 ;; Return value:  Size  Location     Type
 14041 ;;                  4    0[BANK1 ] unsigned long 
 14042 ;; Registers used:
 14043 ;;		wreg, status,2, status,0
 14044 ;; Tracked objects:
 14045 ;;		On entry : 0/0
 14046 ;;		On exit  : 0/0
 14047 ;;		Unchanged: 0/0
 14048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14049 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14050 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14052 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14053 ;;Total ram usage:       12 bytes
 14054 ;; Hardware stack levels used:    1
 14055 ;; Hardware stack levels required when called:    3
 14056 ;; This function calls:
 14057 ;;		Nothing
 14058 ;; This function is called by:
 14059 ;;		_wait_ms
 14060 ;; This function uses a non-reentrant model
 14061 ;;
 14062                           
 14063                           
 14064                           ;psect for function ___lmul
 14065  18CA                     ___lmul:	
 14066                           
 14067                           ;incstack = 0
 14068                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14069  18CA  3000               	movlw	0
 14070  18CB  0021               	movlb	1	; select bank1
 14071  18CC  00AB               	movwf	(___lmul@product+3)^(0+128)
 14072  18CD  3000               	movlw	0
 14073  18CE  00AA               	movwf	(___lmul@product+2)^(0+128)
 14074  18CF  3000               	movlw	0
 14075  18D0  00A9               	movwf	(___lmul@product+1)^(0+128)
 14076  18D1  3000               	movlw	0
 14077  18D2  00A8               	movwf	___lmul@product^(0+128)
 14078  18D3                     l6838:	
 14079  18D3  1C20               	btfss	___lmul@multiplier^(0+128),0
 14080  18D4  28DD               	goto	l6842
 14081  18D5  0824               	movf	___lmul@multiplicand^(0+128),w
 14082  18D6  07A8               	addwf	___lmul@product^(0+128),f
 14083  18D7  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14084  18D8  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14085  18D9  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14086  18DA  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14087  18DB  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14088  18DC  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14089  18DD                     l6842:	
 14090  18DD  3001               	movlw	1
 14091  18DE                     u6875:	
 14092  18DE  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14093  18DF  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14094  18E0  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14095  18E1  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14096  18E2  0B89               	decfsz	9,f
 14097  18E3  28DE               	goto	u6875
 14098  18E4  3001               	movlw	1
 14099  18E5                     u6885:	
 14100  18E5  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14101  18E6  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14102  18E7  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14103  18E8  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14104  18E9  0B89               	decfsz	9,f
 14105  18EA  28E5               	goto	u6885
 14106  18EB  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14107  18EC  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14108  18ED  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14109  18EE  0420               	iorwf	___lmul@multiplier^(0+128),w
 14110  18EF  1D03               	skipz
 14111  18F0  28D3               	goto	l6838
 14112  18F1  082B               	movf	(___lmul@product+3)^(0+128),w
 14113  18F2  00A3               	movwf	(?___lmul+3)^(0+128)
 14114  18F3  082A               	movf	(___lmul@product+2)^(0+128),w
 14115  18F4  00A2               	movwf	(?___lmul+2)^(0+128)
 14116  18F5  0829               	movf	(___lmul@product+1)^(0+128),w
 14117  18F6  00A1               	movwf	(?___lmul+1)^(0+128)
 14118  18F7  0828               	movf	___lmul@product^(0+128),w
 14119  18F8  00A0               	movwf	?___lmul^(0+128)
 14120  18F9  0008               	return
 14121  18FA                     __end_of___lmul:	
 14122                           
 14123                           	psect	text45
 14124  0801                     __ptext45:	
 14125 ;; *************** function _updateSwitchBypassState *****************
 14126 ;; Defined at:
 14127 ;;		line 96 in file "state_manager.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;  state           2    0[BANK1 ] int 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;		None
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		None
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14141 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14144 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14145 ;;Total ram usage:        2 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    3
 14148 ;; This function calls:
 14149 ;;		Nothing
 14150 ;; This function is called by:
 14151 ;;		_setSwitchBypassState
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           
 14156                           ;psect for function _updateSwitchBypassState
 14157  0801                     _updateSwitchBypassState:	
 14158                           
 14159                           ;incstack = 0
 14160                           ; Regs used in _updateSwitchBypassState: []
 14161  0801  0008               	return
 14162  0802                     __end_of_updateSwitchBypassState:	
 14163                           
 14164                           	psect	text46
 14165  2679                     __ptext46:	
 14166 ;; *************** function _getSwitchBypassState *****************
 14167 ;; Defined at:
 14168 ;;		line 103 in file "state_manager.c"
 14169 ;; Parameters:    Size  Location     Type
 14170 ;;		None
 14171 ;; Auto vars:     Size  Location     Type
 14172 ;;		None
 14173 ;; Return value:  Size  Location     Type
 14174 ;;                  2    0[BANK1 ] int 
 14175 ;; Registers used:
 14176 ;;		status,2
 14177 ;; Tracked objects:
 14178 ;;		On entry : 0/0
 14179 ;;		On exit  : 0/0
 14180 ;;		Unchanged: 0/0
 14181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14182 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14185 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14186 ;;Total ram usage:        2 bytes
 14187 ;; Hardware stack levels used:    1
 14188 ;; Hardware stack levels required when called:    3
 14189 ;; This function calls:
 14190 ;;		Nothing
 14191 ;; This function is called by:
 14192 ;;		_initSwitchBypass
 14193 ;; This function uses a non-reentrant model
 14194 ;;
 14195                           
 14196                           
 14197                           ;psect for function _getSwitchBypassState
 14198  2679                     _getSwitchBypassState:	
 14199                           
 14200                           ;state_manager.c: 108: return 0;
 14201                           
 14202                           ;incstack = 0
 14203                           ; Regs used in _getSwitchBypassState: [status,2]
 14204  2679  0021               	movlb	1	; select bank1
 14205  267A  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14206  267B  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14207  267C  0008               	return
 14208  267D                     __end_of_getSwitchBypassState:	
 14209                           
 14210                           	psect	text47
 14211  26C0                     __ptext47:	
 14212 ;; *************** function _adc_convert *****************
 14213 ;; Defined at:
 14214 ;;		line 122 in file "user.c"
 14215 ;; Parameters:    Size  Location     Type
 14216 ;;  channel         1    wreg     unsigned char 
 14217 ;; Auto vars:     Size  Location     Type
 14218 ;;  channel         1    3[BANK1 ] unsigned char 
 14219 ;; Return value:  Size  Location     Type
 14220 ;;                  2    0[BANK1 ] unsigned int 
 14221 ;; Registers used:
 14222 ;;		wreg, status,2, status,0
 14223 ;; Tracked objects:
 14224 ;;		On entry : 0/0
 14225 ;;		On exit  : 0/0
 14226 ;;		Unchanged: 0/0
 14227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14228 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14229 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14230 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14231 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14232 ;;Total ram usage:        4 bytes
 14233 ;; Hardware stack levels used:    1
 14234 ;; Hardware stack levels required when called:    3
 14235 ;; This function calls:
 14236 ;;		Nothing
 14237 ;; This function is called by:
 14238 ;;		_main
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           
 14243                           ;psect for function _adc_convert
 14244  26C0                     _adc_convert:	
 14245                           
 14246                           ;incstack = 0
 14247                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 14248                           ;adc_convert@channel stored from wreg
 14249  26C0  0021               	movlb	1	; select bank1
 14250  26C1  00A3               	movwf	adc_convert@channel^(0+128)
 14251                           
 14252                           ;user.c: 123: ADCON0bits.CHS = channel;
 14253  26C2  0823               	movf	adc_convert@channel^(0+128),w
 14254  26C3  00A2               	movwf	??_adc_convert^(0+128)
 14255  26C4  0DA2               	rlf	??_adc_convert^(0+128),f
 14256  26C5  0DA2               	rlf	??_adc_convert^(0+128),f
 14257  26C6  081D               	movf	29,w	;volatile
 14258  26C7  0622               	xorwf	??_adc_convert^(0+128),w
 14259  26C8  3983               	andlw	-125
 14260  26C9  0622               	xorwf	??_adc_convert^(0+128),w
 14261  26CA  009D               	movwf	29	;volatile
 14262                           
 14263                           ;user.c: 124: ADCON0bits.GO = 0b1;
 14264  26CB  149D               	bsf	29,1	;volatile
 14265  26CC                     l586:	
 14266                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 14267                           
 14268  26CC  189D               	btfsc	29,1	;volatile
 14269  26CD  2ECC               	goto	l586
 14270                           
 14271                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 14272  26CE  081C               	movf	28,w	;volatile
 14273  26CF  00A1               	movwf	(?_adc_convert+1)^(0+128)
 14274  26D0  081B               	movf	27,w	;volatile
 14275  26D1  00A0               	movwf	?_adc_convert^(0+128)
 14276  26D2  0008               	return
 14277  26D3                     __end_of_adc_convert:	
 14278                           
 14279                           	psect	text48
 14280  1C49                     __ptext48:	
 14281 ;; *************** function _USARTInit *****************
 14282 ;; Defined at:
 14283 ;;		line 31 in file "usart_pic16.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 14286 ;; Auto vars:     Size  Location     Type
 14287 ;;		None
 14288 ;; Return value:  Size  Location     Type
 14289 ;;                  1    wreg      void 
 14290 ;; Registers used:
 14291 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14297 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14299 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14300 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14301 ;;Total ram usage:        3 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    3
 14304 ;; This function calls:
 14305 ;;		Nothing
 14306 ;; This function is called by:
 14307 ;;		_main
 14308 ;; This function uses a non-reentrant model
 14309 ;;
 14310                           
 14311                           
 14312                           ;psect for function _USARTInit
 14313  1C49                     _USARTInit:	
 14314                           
 14315                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 14319  1C49  30FF               	movlw	255
 14320  1C4A  0020               	movlb	0	; select bank0
 14321  1C4B  00E9               	movwf	_UQEnd	;volatile
 14322  1C4C  0021               	movlb	1	; select bank1
 14323  1C4D  00A2               	movwf	??_USARTInit^(0+128)
 14324  1C4E  0822               	movf	??_USARTInit^(0+128),w
 14325  1C4F  00FD               	movwf	_UQFront	;volatile
 14326                           
 14327                           ;usart_pic16.c: 37: switch(baud_rate)
 14328  1C50  2C5B               	goto	l7716
 14329  1C51                     l7706:	
 14330                           ;usart_pic16.c: 38: {
 14331                           ;usart_pic16.c: 39: case 9600:
 14332                           
 14333                           
 14334                           ;usart_pic16.c: 40: SPBRG=103;
 14335  1C51  3067               	movlw	103
 14336  1C52  2C58               	goto	L17
 14337  1C53                     l7708:	
 14338                           ;usart_pic16.c: 42: case 19200:
 14339                           
 14340                           ;usart_pic16.c: 41: break;
 14341                           
 14342                           
 14343                           ;usart_pic16.c: 43: SPBRG=51;
 14344  1C53  3033               	movlw	51
 14345  1C54  2C58               	goto	L17
 14346  1C55                     l7710:	
 14347                           ;usart_pic16.c: 45: case 31250:
 14348                           
 14349                           ;usart_pic16.c: 44: break;
 14350                           
 14351                           
 14352                           ;usart_pic16.c: 46: SPBRG = 31;
 14353  1C55  301F               	movlw	31
 14354  1C56  2C58               	goto	L17
 14355  1C57                     l7712:	
 14356                           ;usart_pic16.c: 48: case 38400:
 14357                           
 14358                           ;usart_pic16.c: 47: break;
 14359                           
 14360                           
 14361                           ;usart_pic16.c: 49: SPBRG=25;
 14362  1C57  3019               	movlw	25
 14363  1C58                     L17:	
 14364  1C58  0023               	movlb	3	; select bank3
 14365  1C59  009B               	movwf	27	;volatile
 14366                           
 14367                           ;usart_pic16.c: 51: }
 14368                           
 14369                           ;usart_pic16.c: 50: break;
 14370  1C5A  2C7E               	goto	l1655
 14371  1C5B                     l7716:	
 14372                           
 14373                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 14374                           ; Switch size 1, requested type "space"
 14375                           ; Number of cases is 4, Range of values is 37 to 150
 14376                           ; switch strategies available:
 14377                           ; Name         Instructions Cycles
 14378                           ; simple_byte           13     7 (average)
 14379                           ; direct_byte          237     9 (fixed)
 14380                           ; jumptable            263     9 (fixed)
 14381                           ;	Chosen strategy is simple_byte
 14382  1C5B  0021               	movlb	1	; select bank1
 14383  1C5C  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 14384  1C5D  3A25               	xorlw	37	; case 37
 14385  1C5E  1903               	skipnz
 14386  1C5F  2C6A               	goto	l8640
 14387  1C60  3A6E               	xorlw	110	; case 75
 14388  1C61  1903               	skipnz
 14389  1C62  2C6F               	goto	l8642
 14390  1C63  3A31               	xorlw	49	; case 122
 14391  1C64  1903               	skipnz
 14392  1C65  2C74               	goto	l8644
 14393  1C66  3AEC               	xorlw	236	; case 150
 14394  1C67  1903               	skipnz
 14395  1C68  2C79               	goto	l8646
 14396  1C69  2C7E               	goto	l1655
 14397  1C6A                     l8640:	
 14398                           
 14399                           ; Switch size 1, requested type "space"
 14400                           ; Number of cases is 1, Range of values is 128 to 128
 14401                           ; switch strategies available:
 14402                           ; Name         Instructions Cycles
 14403                           ; simple_byte            4     3 (average)
 14404                           ; direct_byte           11     9 (fixed)
 14405                           ; jumptable            263     9 (fixed)
 14406                           ;	Chosen strategy is simple_byte
 14407  1C6A  0820               	movf	USARTInit@baud_rate^(0+128),w
 14408  1C6B  3A80               	xorlw	128	; case 128
 14409  1C6C  1903               	skipnz
 14410  1C6D  2C51               	goto	l7706
 14411  1C6E  2C7E               	goto	l1655
 14412  1C6F                     l8642:	
 14413                           
 14414                           ; Switch size 1, requested type "space"
 14415                           ; Number of cases is 1, Range of values is 0 to 0
 14416                           ; switch strategies available:
 14417                           ; Name         Instructions Cycles
 14418                           ; simple_byte            4     3 (average)
 14419                           ; direct_byte            8     6 (fixed)
 14420                           ; jumptable            260     6 (fixed)
 14421                           ;	Chosen strategy is simple_byte
 14422  1C6F  0820               	movf	USARTInit@baud_rate^(0+128),w
 14423  1C70  3A00               	xorlw	0	; case 0
 14424  1C71  1903               	skipnz
 14425  1C72  2C53               	goto	l7708
 14426  1C73  2C7E               	goto	l1655
 14427  1C74                     l8644:	
 14428                           
 14429                           ; Switch size 1, requested type "space"
 14430                           ; Number of cases is 1, Range of values is 18 to 18
 14431                           ; switch strategies available:
 14432                           ; Name         Instructions Cycles
 14433                           ; simple_byte            4     3 (average)
 14434                           ; direct_byte           11     9 (fixed)
 14435                           ; jumptable            263     9 (fixed)
 14436                           ;	Chosen strategy is simple_byte
 14437  1C74  0820               	movf	USARTInit@baud_rate^(0+128),w
 14438  1C75  3A12               	xorlw	18	; case 18
 14439  1C76  1903               	skipnz
 14440  1C77  2C55               	goto	l7710
 14441  1C78  2C7E               	goto	l1655
 14442  1C79                     l8646:	
 14443                           
 14444                           ; Switch size 1, requested type "space"
 14445                           ; Number of cases is 1, Range of values is 0 to 0
 14446                           ; switch strategies available:
 14447                           ; Name         Instructions Cycles
 14448                           ; simple_byte            4     3 (average)
 14449                           ; direct_byte            8     6 (fixed)
 14450                           ; jumptable            260     6 (fixed)
 14451                           ;	Chosen strategy is simple_byte
 14452  1C79  0820               	movf	USARTInit@baud_rate^(0+128),w
 14453  1C7A  3A00               	xorlw	0	; case 0
 14454  1C7B  1903               	skipnz
 14455  1C7C  2C57               	goto	l7712
 14456  1C7D  2C7E               	goto	l1655
 14457  1C7E                     l1655:	
 14458                           
 14459                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 14460  1C7E  0023               	movlb	3	; select bank3
 14461  1C7F  131E               	bcf	30,6	;volatile
 14462                           
 14463                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 14464  1C80  169E               	bsf	30,5	;volatile
 14465                           
 14466                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 14467  1C81  121E               	bcf	30,4	;volatile
 14468                           
 14469                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 14470  1C82  151E               	bsf	30,2	;volatile
 14471                           
 14472                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 14473  1C83  179D               	bsf	29,7	;volatile
 14474                           
 14475                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 14476  1C84  131D               	bcf	29,6	;volatile
 14477                           
 14478                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 14479  1C85  161D               	bsf	29,4	;volatile
 14480                           
 14481                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 14482  1C86  119D               	bcf	29,3	;volatile
 14483                           
 14484                           ;usart_pic16.c: 65: RCIE=1;
 14485  1C87  0021               	movlb	1	; select bank1
 14486  1C88  1691               	bsf	17,5	;volatile
 14487                           
 14488                           ;usart_pic16.c: 66: PEIE=1;
 14489  1C89  170B               	bsf	11,6	;volatile
 14490                           
 14491                           ;usart_pic16.c: 68: (GIE = 1);
 14492  1C8A  178B               	bsf	11,7	;volatile
 14493  1C8B  0008               	return
 14494  1C8C                     __end_of_USARTInit:	
 14495                           
 14496                           	psect	text49
 14497  0802                     __ptext49:	
 14498 ;; *************** function _ReadSavedSettings *****************
 14499 ;; Defined at:
 14500 ;;		line 211 in file "user.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;		None
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;		None
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      void 
 14507 ;; Registers used:
 14508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14516 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14517 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14518 ;;Total ram usage:        1 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:    4
 14521 ;; This function calls:
 14522 ;;		_FLASH_ReadWord
 14523 ;;		_set_leds_bottom
 14524 ;;		_set_leds_top
 14525 ;; This function is called by:
 14526 ;;		_main
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _ReadSavedSettings
 14532  0802                     _ReadSavedSettings:	
 14533                           
 14534                           ;user.c: 213: top_push_state = FLASH_ReadWord(0x1F81);
 14535                           
 14536                           ;incstack = 0
 14537                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14538  0802  3081               	movlw	129
 14539  0803  0021               	movlb	1	; select bank1
 14540  0804  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 14541  0805  301F               	movlw	31
 14542  0806  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 14543  0807  31A7  279A  3188   	fcall	_FLASH_ReadWord
 14544  080A  0021               	movlb	1	; select bank1
 14545  080B  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 14546  080C  0020               	movlb	0	; select bank0
 14547  080D  00D2               	movwf	_top_push_state+1
 14548  080E  0021               	movlb	1	; select bank1
 14549  080F  0820               	movf	?_FLASH_ReadWord^(0+128),w
 14550  0810  0020               	movlb	0	; select bank0
 14551  0811  00D1               	movwf	_top_push_state
 14552                           
 14553                           ;user.c: 214: bottom_push_state = FLASH_ReadWord(0x1F82);
 14554  0812  3082               	movlw	130
 14555  0813  0021               	movlb	1	; select bank1
 14556  0814  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 14557  0815  301F               	movlw	31
 14558  0816  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 14559  0817  31A7  279A  3188   	fcall	_FLASH_ReadWord
 14560  081A  0021               	movlb	1	; select bank1
 14561  081B  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 14562  081C  0020               	movlb	0	; select bank0
 14563  081D  00CE               	movwf	_bottom_push_state+1
 14564  081E  0021               	movlb	1	; select bank1
 14565  081F  0820               	movf	?_FLASH_ReadWord^(0+128),w
 14566  0820  0020               	movlb	0	; select bank0
 14567  0821  00CD               	movwf	_bottom_push_state
 14568                           
 14569                           ;user.c: 216: if (top_push_state > 6) {
 14570  0822  0852               	movf	_top_push_state+1,w
 14571  0823  3A80               	xorlw	128
 14572  0824  0021               	movlb	1	; select bank1
 14573  0825  00A4               	movwf	??_ReadSavedSettings^(0+128)
 14574  0826  3080               	movlw	128
 14575  0827  0224               	subwf	??_ReadSavedSettings^(0+128),w
 14576  0828  1D03               	skipz
 14577  0829  282D               	goto	u8265
 14578  082A  3007               	movlw	7
 14579  082B  0020               	movlb	0	; select bank0
 14580  082C  0251               	subwf	_top_push_state,w
 14581  082D                     u8265:	
 14582  082D  1C03               	skipc
 14583  082E  2834               	goto	l621
 14584                           
 14585                           ;user.c: 218: top_push_state = 6;
 14586  082F  3006               	movlw	6
 14587  0830  0020               	movlb	0	; select bank0
 14588  0831  00D1               	movwf	_top_push_state
 14589  0832  3000               	movlw	0
 14590  0833  00D2               	movwf	_top_push_state+1
 14591  0834                     l621:	
 14592                           
 14593                           ;user.c: 219: }
 14594                           ;user.c: 220: if (bottom_push_state > 6) {
 14595  0834  0020               	movlb	0	; select bank0
 14596  0835  084E               	movf	_bottom_push_state+1,w
 14597  0836  3A80               	xorlw	128
 14598  0837  0021               	movlb	1	; select bank1
 14599  0838  00A4               	movwf	??_ReadSavedSettings^(0+128)
 14600  0839  3080               	movlw	128
 14601  083A  0224               	subwf	??_ReadSavedSettings^(0+128),w
 14602  083B  1D03               	skipz
 14603  083C  2840               	goto	u8275
 14604  083D  3007               	movlw	7
 14605  083E  0020               	movlb	0	; select bank0
 14606  083F  024D               	subwf	_bottom_push_state,w
 14607  0840                     u8275:	
 14608  0840  1C03               	skipc
 14609  0841  2847               	goto	l7770
 14610                           
 14611                           ;user.c: 222: bottom_push_state = 6;
 14612  0842  3006               	movlw	6
 14613  0843  0020               	movlb	0	; select bank0
 14614  0844  00CD               	movwf	_bottom_push_state
 14615  0845  3000               	movlw	0
 14616  0846  00CE               	movwf	_bottom_push_state+1
 14617  0847                     l7770:	
 14618                           
 14619                           ;user.c: 223: }
 14620                           ;user.c: 226: LATGbits.LATG1 = !switchBypass_state;
 14621  0847  0020               	movlb	0	; select bank0
 14622  0848  0857               	movf	_switchBypass_state,w
 14623  0849  1D03               	btfss	3,2
 14624  084A  284E               	goto	u8280
 14625  084B  0027               	movlb	7	; select bank7
 14626  084C  148D               	bsf	13,1	;volatile
 14627  084D  2850               	goto	l7772
 14628  084E                     u8280:	
 14629  084E  0027               	movlb	7	; select bank7
 14630  084F  108D               	bcf	13,1	;volatile
 14631  0850                     l7772:	
 14632                           
 14633                           ;user.c: 227: LATGbits.LATG2 = switchBypass_state;
 14634  0850  0020               	movlb	0	; select bank0
 14635  0851  0C57               	rrf	_switchBypass_state,w
 14636  0852  0027               	movlb	7	; select bank7
 14637  0853  1C03               	skipc
 14638  0854  110D               	bcf	13,2	;volatile
 14639  0855  1803               	skipnc
 14640  0856  150D               	bsf	13,2	;volatile
 14641                           
 14642                           ;user.c: 228: LATBbits.LATB2 = 0;
 14643  0857  0022               	movlb	2	; select bank2
 14644  0858  110D               	bcf	13,2	;volatile
 14645                           
 14646                           ;user.c: 229: LATBbits.LATB3 = 0;
 14647  0859  118D               	bcf	13,3	;volatile
 14648                           
 14649                           ;user.c: 231: LATBbits.LATB4 = 0;
 14650  085A  120D               	bcf	13,4	;volatile
 14651                           
 14652                           ;user.c: 232: LATBbits.LATB5 = 0;
 14653  085B  128D               	bcf	13,5	;volatile
 14654                           
 14655                           ;user.c: 234: LATBbits.LATB1 = 0;
 14656  085C  108D               	bcf	13,1	;volatile
 14657                           
 14658                           ;user.c: 235: LATBbits.LATB0 = 0;
 14659  085D  100D               	bcf	13,0	;volatile
 14660                           
 14661                           ;user.c: 238: set_leds_top(top_push_state, 1);
 14662  085E  0020               	movlb	0	; select bank0
 14663  085F  0852               	movf	_top_push_state+1,w
 14664  0860  0021               	movlb	1	; select bank1
 14665  0861  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 14666  0862  0020               	movlb	0	; select bank0
 14667  0863  0851               	movf	_top_push_state,w
 14668  0864  0021               	movlb	1	; select bank1
 14669  0865  00A0               	movwf	set_leds_top@x^(0+128)
 14670  0866  3001               	movlw	1
 14671  0867  00A2               	movwf	set_leds_top@ledState^(0+128)
 14672  0868  3000               	movlw	0
 14673  0869  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 14674  086A  319E  26F3  3188   	fcall	_set_leds_top
 14675                           
 14676                           ;user.c: 239: set_leds_bottom(bottom_push_state);
 14677  086D  0020               	movlb	0	; select bank0
 14678  086E  084E               	movf	_bottom_push_state+1,w
 14679  086F  0021               	movlb	1	; select bank1
 14680  0870  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 14681  0871  0020               	movlb	0	; select bank0
 14682  0872  084D               	movf	_bottom_push_state,w
 14683  0873  0021               	movlb	1	; select bank1
 14684  0874  00A0               	movwf	set_leds_bottom@x^(0+128)
 14685  0875  3199  219E         	fcall	_set_leds_bottom
 14686  0877  0008               	return
 14687  0878                     __end_of_ReadSavedSettings:	
 14688                           
 14689                           	psect	text50
 14690  1EF3                     __ptext50:	
 14691 ;; *************** function _set_leds_top *****************
 14692 ;; Defined at:
 14693 ;;		line 16 in file "LEDs.c"
 14694 ;; Parameters:    Size  Location     Type
 14695 ;;  x               2    0[BANK1 ] int 
 14696 ;;  ledState        2    2[BANK1 ] int 
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;		None
 14699 ;; Return value:  Size  Location     Type
 14700 ;;                  1    wreg      void 
 14701 ;; Registers used:
 14702 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14703 ;; Tracked objects:
 14704 ;;		On entry : 0/0
 14705 ;;		On exit  : 0/0
 14706 ;;		Unchanged: 0/0
 14707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14708 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14711 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14712 ;;Total ram usage:        4 bytes
 14713 ;; Hardware stack levels used:    1
 14714 ;; Hardware stack levels required when called:    3
 14715 ;; This function calls:
 14716 ;;		Nothing
 14717 ;; This function is called by:
 14718 ;;		_ReadSavedSettings
 14719 ;;		_ring_tactiles
 14720 ;;		_solidring_tactiles
 14721 ;;		_read_top_tactile
 14722 ;;		_setPresetDisplay
 14723 ;;		_resetRingLEDs
 14724 ;;		_setExpressionDisplay
 14725 ;;		_star_tactiles
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           
 14730                           ;psect for function _set_leds_top
 14731  1EF3                     _set_leds_top:	
 14732                           
 14733                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 14734                           
 14735                           ;incstack = 0
 14736                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 14737  1EF3  0027               	movlb	7	; select bank7
 14738  1EF4  100C               	bcf	12,0	;volatile
 14739                           
 14740                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 14741  1EF5  108C               	bcf	12,1	;volatile
 14742                           
 14743                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 14744  1EF6  110C               	bcf	12,2	;volatile
 14745                           
 14746                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 14747  1EF7  118C               	bcf	12,3	;volatile
 14748                           
 14749                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 14750  1EF8  120C               	bcf	12,4	;volatile
 14751                           
 14752                           ;LEDs.c: 22: switch (x) {
 14753  1EF9  2F29               	goto	l6896
 14754  1EFA                     l6884:	
 14755                           ;LEDs.c: 23: case 1:
 14756                           
 14757                           
 14758                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 14759  1EFA  0021               	movlb	1	; select bank1
 14760  1EFB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 14761  1EFC  0027               	movlb	7	; select bank7
 14762  1EFD  1C03               	skipc
 14763  1EFE  100C               	bcf	12,0	;volatile
 14764  1EFF  1803               	skipnc
 14765  1F00  140C               	bsf	12,0	;volatile
 14766                           
 14767                           ;LEDs.c: 25: break;
 14768  1F01  0008               	return
 14769  1F02                     l6886:	
 14770                           ;LEDs.c: 26: case 2:
 14771                           
 14772                           
 14773                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 14774  1F02  0021               	movlb	1	; select bank1
 14775  1F03  0C22               	rrf	set_leds_top@ledState^(0+128),w
 14776  1F04  0027               	movlb	7	; select bank7
 14777  1F05  1C03               	skipc
 14778  1F06  108C               	bcf	12,1	;volatile
 14779  1F07  1803               	skipnc
 14780  1F08  148C               	bsf	12,1	;volatile
 14781                           
 14782                           ;LEDs.c: 28: break;
 14783  1F09  0008               	return
 14784  1F0A                     l6888:	
 14785                           ;LEDs.c: 29: case 3:
 14786                           
 14787                           
 14788                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 14789  1F0A  0021               	movlb	1	; select bank1
 14790  1F0B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 14791  1F0C  0027               	movlb	7	; select bank7
 14792  1F0D  1C03               	skipc
 14793  1F0E  110C               	bcf	12,2	;volatile
 14794  1F0F  1803               	skipnc
 14795  1F10  150C               	bsf	12,2	;volatile
 14796                           
 14797                           ;LEDs.c: 31: break;
 14798  1F11  0008               	return
 14799  1F12                     l6890:	
 14800                           ;LEDs.c: 32: case 4:
 14801                           
 14802                           
 14803                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 14804  1F12  0021               	movlb	1	; select bank1
 14805  1F13  0C22               	rrf	set_leds_top@ledState^(0+128),w
 14806  1F14  0027               	movlb	7	; select bank7
 14807  1F15  1C03               	skipc
 14808  1F16  118C               	bcf	12,3	;volatile
 14809  1F17  1803               	skipnc
 14810  1F18  158C               	bsf	12,3	;volatile
 14811                           
 14812                           ;LEDs.c: 34: break;
 14813  1F19  0008               	return
 14814  1F1A                     l6892:	
 14815                           ;LEDs.c: 35: case 5:
 14816                           
 14817                           
 14818                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 14819  1F1A  0021               	movlb	1	; select bank1
 14820  1F1B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 14821  1F1C  0027               	movlb	7	; select bank7
 14822  1F1D  1C03               	skipc
 14823  1F1E  120C               	bcf	12,4	;volatile
 14824  1F1F  1803               	skipnc
 14825  1F20  160C               	bsf	12,4	;volatile
 14826                           
 14827                           ;LEDs.c: 39: break;
 14828                           
 14829                           ;LEDs.c: 38: case 6:
 14830                           
 14831                           ;LEDs.c: 37: break;
 14832  1F21  0008               	return
 14833  1F22                     l776:	
 14834                           ;LEDs.c: 40: case 100:
 14835                           
 14836                           
 14837                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 14838  1F22  0027               	movlb	7	; select bank7
 14839  1F23  140C               	bsf	12,0	;volatile
 14840                           
 14841                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 14842  1F24  148C               	bsf	12,1	;volatile
 14843                           
 14844                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 14845  1F25  150C               	bsf	12,2	;volatile
 14846                           
 14847                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 14848  1F26  158C               	bsf	12,3	;volatile
 14849                           
 14850                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 14851  1F27  160C               	bsf	12,4	;volatile
 14852                           
 14853                           ;LEDs.c: 47: }
 14854                           
 14855                           ;LEDs.c: 46: break;
 14856  1F28  0008               	return
 14857  1F29                     l6896:	
 14858                           
 14859                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14860                           ; Switch size 1, requested type "space"
 14861                           ; Number of cases is 1, Range of values is 0 to 0
 14862                           ; switch strategies available:
 14863                           ; Name         Instructions Cycles
 14864                           ; simple_byte            4     3 (average)
 14865                           ; direct_byte            8     6 (fixed)
 14866                           ; jumptable            260     6 (fixed)
 14867                           ;	Chosen strategy is simple_byte
 14868  1F29  0021               	movlb	1	; select bank1
 14869  1F2A  0821               	movf	(set_leds_top@x+1)^(0+128),w
 14870  1F2B  3A00               	xorlw	0	; case 0
 14871  1F2C  1903               	skipnz
 14872  1F2D  2F2F               	goto	l8648
 14873  1F2E  2F46               	goto	l777
 14874  1F2F                     l8648:	
 14875                           
 14876                           ; Switch size 1, requested type "space"
 14877                           ; Number of cases is 7, Range of values is 1 to 100
 14878                           ; switch strategies available:
 14879                           ; Name         Instructions Cycles
 14880                           ; simple_byte           22    12 (average)
 14881                           ; direct_byte          209     9 (fixed)
 14882                           ; jumptable            263     9 (fixed)
 14883                           ;	Chosen strategy is simple_byte
 14884  1F2F  0820               	movf	set_leds_top@x^(0+128),w
 14885  1F30  3A01               	xorlw	1	; case 1
 14886  1F31  1903               	skipnz
 14887  1F32  2EFA               	goto	l6884
 14888  1F33  3A03               	xorlw	3	; case 2
 14889  1F34  1903               	skipnz
 14890  1F35  2F02               	goto	l6886
 14891  1F36  3A01               	xorlw	1	; case 3
 14892  1F37  1903               	skipnz
 14893  1F38  2F0A               	goto	l6888
 14894  1F39  3A07               	xorlw	7	; case 4
 14895  1F3A  1903               	skipnz
 14896  1F3B  2F12               	goto	l6890
 14897  1F3C  3A01               	xorlw	1	; case 5
 14898  1F3D  1903               	skipnz
 14899  1F3E  2F1A               	goto	l6892
 14900  1F3F  3A03               	xorlw	3	; case 6
 14901  1F40  1903               	skipnz
 14902  1F41  2F46               	goto	l777
 14903  1F42  3A62               	xorlw	98	; case 100
 14904  1F43  1903               	skipnz
 14905  1F44  2F22               	goto	l776
 14906  1F45  2F46               	goto	l777
 14907  1F46                     l777:	
 14908  1F46  0008               	return
 14909  1F47                     __end_of_set_leds_top:	
 14910                           
 14911                           	psect	text51
 14912  199E                     __ptext51:	
 14913 ;; *************** function _set_leds_bottom *****************
 14914 ;; Defined at:
 14915 ;;		line 51 in file "LEDs.c"
 14916 ;; Parameters:    Size  Location     Type
 14917 ;;  x               2    0[BANK1 ] int 
 14918 ;; Auto vars:     Size  Location     Type
 14919 ;;		None
 14920 ;; Return value:  Size  Location     Type
 14921 ;;                  1    wreg      void 
 14922 ;; Registers used:
 14923 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14924 ;; Tracked objects:
 14925 ;;		On entry : 0/0
 14926 ;;		On exit  : 0/0
 14927 ;;		Unchanged: 0/0
 14928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14929 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14932 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14933 ;;Total ram usage:        2 bytes
 14934 ;; Hardware stack levels used:    1
 14935 ;; Hardware stack levels required when called:    3
 14936 ;; This function calls:
 14937 ;;		Nothing
 14938 ;; This function is called by:
 14939 ;;		_ReadSavedSettings
 14940 ;;		_ring_tactiles
 14941 ;;		_solidring_tactiles
 14942 ;;		_read_bottom_tactile
 14943 ;;		_setPresetDisplay
 14944 ;;		_resetRingLEDs
 14945 ;;		_setExpressionDisplay
 14946 ;;		_star_tactiles
 14947 ;; This function uses a non-reentrant model
 14948 ;;
 14949                           
 14950                           
 14951                           ;psect for function _set_leds_bottom
 14952  199E                     _set_leds_bottom:	
 14953                           
 14954                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 14955                           
 14956                           ;incstack = 0
 14957                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 14958  199E  0022               	movlb	2	; select bank2
 14959  199F  100F               	bcf	15,0	;volatile
 14960                           
 14961                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 14962  19A0  108F               	bcf	15,1	;volatile
 14963                           
 14964                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 14965  19A1  110F               	bcf	15,2	;volatile
 14966                           
 14967                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 14968  19A2  118F               	bcf	15,3	;volatile
 14969                           
 14970                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 14971  19A3  120F               	bcf	15,4	;volatile
 14972                           
 14973                           ;LEDs.c: 57: switch (x) {
 14974  19A4  29BB               	goto	l6912
 14975  19A5                     l781:	
 14976                           ;LEDs.c: 58: case 1:
 14977                           
 14978                           
 14979                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 14980  19A5  0022               	movlb	2	; select bank2
 14981  19A6  140F               	bsf	15,0	;volatile
 14982                           
 14983                           ;LEDs.c: 60: break;
 14984  19A7  0008               	return
 14985  19A8                     l783:	
 14986                           ;LEDs.c: 61: case 2:
 14987                           
 14988                           
 14989                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 14990  19A8  0022               	movlb	2	; select bank2
 14991  19A9  148F               	bsf	15,1	;volatile
 14992                           
 14993                           ;LEDs.c: 63: break;
 14994  19AA  0008               	return
 14995  19AB                     l784:	
 14996                           ;LEDs.c: 64: case 3:
 14997                           
 14998                           
 14999                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 15000  19AB  0022               	movlb	2	; select bank2
 15001  19AC  150F               	bsf	15,2	;volatile
 15002                           
 15003                           ;LEDs.c: 66: break;
 15004  19AD  0008               	return
 15005  19AE                     l785:	
 15006                           ;LEDs.c: 67: case 4:
 15007                           
 15008                           
 15009                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 15010  19AE  0022               	movlb	2	; select bank2
 15011  19AF  158F               	bsf	15,3	;volatile
 15012                           
 15013                           ;LEDs.c: 69: break;
 15014  19B0  0008               	return
 15015  19B1                     l786:	
 15016                           ;LEDs.c: 70: case 5:
 15017                           
 15018                           
 15019                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 15020  19B1  0022               	movlb	2	; select bank2
 15021  19B2  160F               	bsf	15,4	;volatile
 15022                           
 15023                           ;LEDs.c: 74: break;
 15024                           
 15025                           ;LEDs.c: 73: case 6:
 15026                           
 15027                           ;LEDs.c: 72: break;
 15028  19B3  0008               	return
 15029  19B4                     l788:	
 15030                           ;LEDs.c: 75: case 100:
 15031                           
 15032                           
 15033                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 15034  19B4  0022               	movlb	2	; select bank2
 15035  19B5  140F               	bsf	15,0	;volatile
 15036                           
 15037                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 15038  19B6  148F               	bsf	15,1	;volatile
 15039                           
 15040                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 15041  19B7  150F               	bsf	15,2	;volatile
 15042                           
 15043                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 15044  19B8  158F               	bsf	15,3	;volatile
 15045                           
 15046                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 15047  19B9  160F               	bsf	15,4	;volatile
 15048                           
 15049                           ;LEDs.c: 82: }
 15050                           
 15051                           ;LEDs.c: 81: break;
 15052  19BA  0008               	return
 15053  19BB                     l6912:	
 15054                           
 15055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15056                           ; Switch size 1, requested type "space"
 15057                           ; Number of cases is 1, Range of values is 0 to 0
 15058                           ; switch strategies available:
 15059                           ; Name         Instructions Cycles
 15060                           ; simple_byte            4     3 (average)
 15061                           ; direct_byte            8     6 (fixed)
 15062                           ; jumptable            260     6 (fixed)
 15063                           ;	Chosen strategy is simple_byte
 15064  19BB  0021               	movlb	1	; select bank1
 15065  19BC  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 15066  19BD  3A00               	xorlw	0	; case 0
 15067  19BE  1903               	skipnz
 15068  19BF  29C1               	goto	l8650
 15069  19C0  29D8               	goto	l789
 15070  19C1                     l8650:	
 15071                           
 15072                           ; Switch size 1, requested type "space"
 15073                           ; Number of cases is 7, Range of values is 1 to 100
 15074                           ; switch strategies available:
 15075                           ; Name         Instructions Cycles
 15076                           ; simple_byte           22    12 (average)
 15077                           ; direct_byte          209     9 (fixed)
 15078                           ; jumptable            263     9 (fixed)
 15079                           ;	Chosen strategy is simple_byte
 15080  19C1  0820               	movf	set_leds_bottom@x^(0+128),w
 15081  19C2  3A01               	xorlw	1	; case 1
 15082  19C3  1903               	skipnz
 15083  19C4  29A5               	goto	l781
 15084  19C5  3A03               	xorlw	3	; case 2
 15085  19C6  1903               	skipnz
 15086  19C7  29A8               	goto	l783
 15087  19C8  3A01               	xorlw	1	; case 3
 15088  19C9  1903               	skipnz
 15089  19CA  29AB               	goto	l784
 15090  19CB  3A07               	xorlw	7	; case 4
 15091  19CC  1903               	skipnz
 15092  19CD  29AE               	goto	l785
 15093  19CE  3A01               	xorlw	1	; case 5
 15094  19CF  1903               	skipnz
 15095  19D0  29B1               	goto	l786
 15096  19D1  3A03               	xorlw	3	; case 6
 15097  19D2  1903               	skipnz
 15098  19D3  29D8               	goto	l789
 15099  19D4  3A62               	xorlw	98	; case 100
 15100  19D5  1903               	skipnz
 15101  19D6  29B4               	goto	l788
 15102  19D7  29D8               	goto	l789
 15103  19D8                     l789:	
 15104  19D8  0008               	return
 15105  19D9                     __end_of_set_leds_bottom:	
 15106                           
 15107                           	psect	text52
 15108  279A                     __ptext52:	
 15109 ;; *************** function _FLASH_ReadWord *****************
 15110 ;; Defined at:
 15111 ;;		line 58 in file "memory.c"
 15112 ;; Parameters:    Size  Location     Type
 15113 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 15114 ;; Auto vars:     Size  Location     Type
 15115 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  2    0[BANK1 ] unsigned int 
 15118 ;; Registers used:
 15119 ;;		wreg, status,2, status,0
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15125 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15126 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15128 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15129 ;;Total ram usage:        3 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    3
 15132 ;; This function calls:
 15133 ;;		Nothing
 15134 ;; This function is called by:
 15135 ;;		_ReadSavedSettings
 15136 ;;		_FLASH_WriteWord
 15137 ;; This function uses a non-reentrant model
 15138 ;;
 15139                           
 15140                           
 15141                           ;psect for function _FLASH_ReadWord
 15142  279A                     _FLASH_ReadWord:	
 15143                           
 15144                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 15145                           
 15146                           ;incstack = 0
 15147                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 15148  279A  3000               	movlw	0
 15149  279B  1B8B               	btfsc	11,7	;volatile
 15150  279C  3001               	movlw	1
 15151  279D  0021               	movlb	1	; select bank1
 15152  279E  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 15153                           
 15154                           ;memory.c: 61: INTCONbits.GIE = 0;
 15155  279F  138B               	bcf	11,7	;volatile
 15156                           
 15157                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 15158  27A0  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 15159  27A1  0023               	movlb	3	; select bank3
 15160  27A2  0091               	movwf	17	;volatile
 15161                           
 15162                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 15163  27A3  0021               	movlb	1	; select bank1
 15164  27A4  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 15165  27A5  0023               	movlb	3	; select bank3
 15166  27A6  0092               	movwf	18	;volatile
 15167                           
 15168                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 15169  27A7  1315               	bcf	21,6	;volatile
 15170                           
 15171                           ;memory.c: 66: PMCON1bits.RD = 1;
 15172  27A8  1415               	bsf	21,0	;volatile
 15173                           
 15174                           ;memory.c: 67: __nop();
 15175  27A9  0000               	nop
 15176                           
 15177                           ;memory.c: 68: __nop();
 15178  27AA  0000               	nop
 15179                           
 15180                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 15181  27AB  0021               	movlb	1	; select bank1
 15182  27AC  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 15183  27AD  1C03               	skipc
 15184  27AE  138B               	bcf	11,7	;volatile
 15185  27AF  1803               	skipnc
 15186  27B0  178B               	bsf	11,7	;volatile
 15187                           
 15188                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 15189  27B1  0023               	movlb	3	; select bank3
 15190  27B2  0814               	movf	20,w	;volatile
 15191  27B3  0021               	movlb	1	; select bank1
 15192  27B4  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 15193  27B5  0023               	movlb	3	; select bank3
 15194  27B6  0813               	movf	19,w	;volatile
 15195  27B7  0021               	movlb	1	; select bank1
 15196  27B8  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 15197  27B9  0008               	return
 15198  27BA                     __end_of_FLASH_ReadWord:	
 15199                           
 15200                           	psect	text53
 15201  181B                     __ptext53:	
 15202 ;; *************** function _InitializeTaps *****************
 15203 ;; Defined at:
 15204 ;;		line 205 in file "user.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;  itap            2    1[BANK1 ] int 
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      void 
 15211 ;; Registers used:
 15212 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15219 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15220 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15221 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15222 ;;Total ram usage:        3 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    3
 15225 ;; This function calls:
 15226 ;;		Nothing
 15227 ;; This function is called by:
 15228 ;;		_main
 15229 ;; This function uses a non-reentrant model
 15230 ;;
 15231                           
 15232                           
 15233                           ;psect for function _InitializeTaps
 15234  181B                     _InitializeTaps:	
 15235                           
 15236                           ;user.c: 206: for (int itap = 0; itap < 12; itap++) {
 15237                           
 15238                           ;incstack = 0
 15239                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 15240  181B  0021               	movlb	1	; select bank1
 15241  181C  01A1               	clrf	InitializeTaps@itap^(0+128)
 15242  181D  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 15243  181E                     L18:	
 15244  181E  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 15245  181F  3A80               	xorlw	128
 15246  1820  00A0               	movwf	??_InitializeTaps^(0+128)
 15247  1821  3080               	movlw	128
 15248  1822  0220               	subwf	??_InitializeTaps^(0+128),w
 15249  1823  1D03               	skipz
 15250  1824  2827               	goto	u8235
 15251  1825  300C               	movlw	12
 15252  1826  0221               	subwf	InitializeTaps@itap^(0+128),w
 15253  1827                     u8235:	
 15254  1827  1803               	btfsc	3,0
 15255  1828  0008               	return
 15256                           
 15257                           ;user.c: 207: tap[itap] = 0;
 15258  1829  0021               	movlb	1	; select bank1
 15259  182A  0821               	movf	InitializeTaps@itap^(0+128),w
 15260  182B  00A0               	movwf	??_InitializeTaps^(0+128)
 15261  182C  3001               	movlw	1
 15262  182D                     u8245:	
 15263  182D  35A0               	lslf	??_InitializeTaps^(0+128),f
 15264  182E  3EFF               	addlw	-1
 15265  182F  1D03               	skipz
 15266  1830  282D               	goto	u8245
 15267  1831  3520               	lslf	??_InitializeTaps^(0+128),w
 15268  1832  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 15269  1833  0086               	movwf	6
 15270  1834  3002               	movlw	2	; select bank5/6
 15271  1835  0087               	movwf	7
 15272  1836  3000               	movlw	0
 15273  1837  3FC0               	movwi [0]fsr1
 15274  1838  3000               	movlw	0
 15275  1839  3FC1               	movwi [1]fsr1
 15276  183A  3FC2               	movwi [2]fsr1
 15277  183B  3FC3               	movwi [3]fsr1
 15278  183C  3001               	movlw	1
 15279  183D  07A1               	addwf	InitializeTaps@itap^(0+128),f
 15280  183E  3000               	movlw	0
 15281  183F  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 15282  1840  281E               	goto	L18
 15283  1841                     __end_of_InitializeTaps:	
 15284                           
 15285                           	psect	text54
 15286  189A                     __ptext54:	
 15287 ;; *************** function _InitApp *****************
 15288 ;; Defined at:
 15289 ;;		line 23 in file "user.c"
 15290 ;; Parameters:    Size  Location     Type
 15291 ;;		None
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;		None
 15294 ;; Return value:  Size  Location     Type
 15295 ;;                  1    wreg      void 
 15296 ;; Registers used:
 15297 ;;		wreg, status,2, status,0, pclath, cstack
 15298 ;; Tracked objects:
 15299 ;;		On entry : 0/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15307 ;;Total ram usage:        0 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    5
 15310 ;; This function calls:
 15311 ;;		_init_adc
 15312 ;;		_init_pwm
 15313 ;; This function is called by:
 15314 ;;		_main
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           
 15319                           ;psect for function _InitApp
 15320  189A                     _InitApp:	
 15321                           
 15322                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 15323                           
 15324                           ;incstack = 0
 15325                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 15326  189A  0021               	movlb	1	; select bank1
 15327  189B  100D               	bcf	13,0	;volatile
 15328                           
 15329                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 15330  189C  108D               	bcf	13,1	;volatile
 15331                           
 15332                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 15333  189D  110D               	bcf	13,2	;volatile
 15334                           
 15335                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 15336  189E  118D               	bcf	13,3	;volatile
 15337                           
 15338                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 15339  189F  120D               	bcf	13,4	;volatile
 15340                           
 15341                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 15342  18A0  128D               	bcf	13,5	;volatile
 15343                           
 15344                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 15345  18A1  140E               	bsf	14,0	;volatile
 15346                           
 15347                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 15348  18A2  120E               	bcf	14,4	;volatile
 15349                           
 15350                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 15351  18A3  128E               	bcf	14,5	;volatile
 15352                           
 15353                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 15354  18A4  100F               	bcf	15,0	;volatile
 15355                           
 15356                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 15357  18A5  108F               	bcf	15,1	;volatile
 15358                           
 15359                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 15360  18A6  110F               	bcf	15,2	;volatile
 15361                           
 15362                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 15363  18A7  118F               	bcf	15,3	;volatile
 15364                           
 15365                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 15366  18A8  120F               	bcf	15,4	;volatile
 15367                           
 15368                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 15369  18A9  168F               	bsf	15,5	;volatile
 15370                           
 15371                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 15372  18AA  170F               	bsf	15,6	;volatile
 15373                           
 15374                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 15375  18AB  178F               	bsf	15,7	;volatile
 15376                           
 15377                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 15378  18AC  1410               	bsf	16,0	;volatile
 15379                           
 15380                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 15381  18AD  1490               	bsf	16,1	;volatile
 15382                           
 15383                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 15384  18AE  0023               	movlb	3	; select bank3
 15385  18AF  1010               	bcf	16,0	;volatile
 15386                           
 15387                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 15388  18B0  1090               	bcf	16,1	;volatile
 15389                           
 15390                           ;user.c: 53: PORTEbits.RE0 = 0;
 15391  18B1  0020               	movlb	0	; select bank0
 15392  18B2  1010               	bcf	16,0	;volatile
 15393                           
 15394                           ;user.c: 54: PORTEbits.RE1 = 0;
 15395  18B3  1090               	bcf	16,1	;volatile
 15396                           
 15397                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 15398  18B4  0026               	movlb	6	; select bank6
 15399  18B5  100C               	bcf	12,0	;volatile
 15400                           
 15401                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 15402  18B6  108C               	bcf	12,1	;volatile
 15403                           
 15404                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 15405  18B7  110C               	bcf	12,2	;volatile
 15406                           
 15407                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 15408  18B8  118C               	bcf	12,3	;volatile
 15409                           
 15410                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 15411  18B9  120C               	bcf	12,4	;volatile
 15412                           
 15413                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 15414  18BA  128C               	bcf	12,5	;volatile
 15415                           
 15416                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 15417  18BB  170C               	bsf	12,6	;volatile
 15418                           
 15419                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 15420  18BC  0028               	movlb	8	; select bank8
 15421  18BD  130C               	bcf	12,6	;volatile
 15422                           
 15423                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 15424  18BE  0026               	movlb	6	; select bank6
 15425  18BF  108D               	bcf	13,1	;volatile
 15426                           
 15427                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 15428  18C0  110D               	bcf	13,2	;volatile
 15429                           
 15430                           ;user.c: 68: init_adc();
 15431  18C1  31A6  268F  3198   	fcall	_init_adc
 15432                           
 15433                           ;user.c: 69: init_pwm();
 15434  18C4  319C  2408         	fcall	_init_pwm
 15435                           
 15436                           ;user.c: 71: INTCONbits.GIE = 0b1;
 15437  18C6  178B               	bsf	11,7	;volatile
 15438                           
 15439                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 15440  18C7  168B               	bsf	11,5	;volatile
 15441                           
 15442                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 15443  18C8  110B               	bcf	11,2	;volatile
 15444  18C9  0008               	return
 15445  18CA                     __end_of_InitApp:	
 15446                           
 15447                           	psect	text55
 15448  1C08                     __ptext55:	
 15449 ;; *************** function _init_pwm *****************
 15450 ;; Defined at:
 15451 ;;		line 129 in file "user.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;		None
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;		None
 15456 ;; Return value:  Size  Location     Type
 15457 ;;                  1    wreg      void 
 15458 ;; Registers used:
 15459 ;;		wreg, status,2, status,0, pclath, cstack
 15460 ;; Tracked objects:
 15461 ;;		On entry : 0/0
 15462 ;;		On exit  : 0/0
 15463 ;;		Unchanged: 0/0
 15464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15469 ;;Total ram usage:        0 bytes
 15470 ;; Hardware stack levels used:    1
 15471 ;; Hardware stack levels required when called:    4
 15472 ;; This function calls:
 15473 ;;		_init_timer0
 15474 ;;		_init_timer2
 15475 ;; This function is called by:
 15476 ;;		_InitApp
 15477 ;; This function uses a non-reentrant model
 15478 ;;
 15479                           
 15480                           
 15481                           ;psect for function _init_pwm
 15482  1C08                     _init_pwm:	
 15483                           
 15484                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 15485                           
 15486                           ;incstack = 0
 15487                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 15488  1C08  0022               	movlb	2	; select bank2
 15489  1C09  101D               	bcf	29,0	;volatile
 15490                           
 15491                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 15492  1C0A  0021               	movlb	1	; select bank1
 15493  1C0B  110E               	bcf	14,2	;volatile
 15494                           
 15495                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 15496  1C0C  108E               	bcf	14,1	;volatile
 15497                           
 15498                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 15499  1C0D  0026               	movlb	6	; select bank6
 15500  1C0E  100D               	bcf	13,0	;volatile
 15501                           
 15502                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 15503  1C0F  118D               	bcf	13,3	;volatile
 15504                           
 15505                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 15506  1C10  120D               	bcf	13,4	;volatile
 15507                           
 15508                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 15509  1C11  0021               	movlb	1	; select bank1
 15510  1C12  1310               	bcf	16,6	;volatile
 15511                           
 15512                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 15513  1C13  1290               	bcf	16,5	;volatile
 15514                           
 15515                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 15516  1C14  1210               	bcf	16,4	;volatile
 15517                           
 15518                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 15519  1C15  1190               	bcf	16,3	;volatile
 15520                           
 15521                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 15522  1C16  1110               	bcf	16,2	;volatile
 15523                           
 15524                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 15525  1C17  300F               	movlw	15
 15526  1C18  0025               	movlb	5	; select bank5
 15527  1C19  0493               	iorwf	19,f	;volatile
 15528                           
 15529                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 15530  1C1A  300F               	movlw	15
 15531  1C1B  049A               	iorwf	26,f	;volatile
 15532                           
 15533                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 15534  1C1C  300F               	movlw	15
 15535  1C1D  0026               	movlb	6	; select bank6
 15536  1C1E  0493               	iorwf	19,f	;volatile
 15537                           
 15538                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 15539  1C1F  300F               	movlw	15
 15540  1C20  049A               	iorwf	26,f	;volatile
 15541                           
 15542                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 15543  1C21  300F               	movlw	15
 15544  1C22  049E               	iorwf	30,f	;volatile
 15545                           
 15546                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 15547  1C23  300F               	movlw	15
 15548  1C24  002C               	movlb	12	; select bank12
 15549  1C25  0493               	iorwf	19,f	;volatile
 15550                           
 15551                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 15552  1C26  300F               	movlw	15
 15553  1C27  0496               	iorwf	22,f	;volatile
 15554                           
 15555                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 15556  1C28  300F               	movlw	15
 15557  1C29  0499               	iorwf	25,f	;volatile
 15558                           
 15559                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 15560  1C2A  300F               	movlw	15
 15561  1C2B  049C               	iorwf	28,f	;volatile
 15562                           
 15563                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 15564  1C2C  300F               	movlw	15
 15565  1C2D  049F               	iorwf	31,f	;volatile
 15566                           
 15567                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 15568  1C2E  0025               	movlb	5	; select bank5
 15569  1C2F  019D               	clrf	29	;volatile
 15570                           
 15571                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 15572  1C30  019E               	clrf	30	;volatile
 15573                           
 15574                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 15575  1C31  019F               	clrf	31	;volatile
 15576                           
 15577                           ;user.c: 154: CCPR1 = 50;
 15578  1C32  3000               	movlw	0
 15579  1C33  0092               	movwf	18	;volatile
 15580  1C34  3032               	movlw	50
 15581  1C35  0091               	movwf	17	;volatile
 15582                           
 15583                           ;user.c: 155: CCPR2 = 100;
 15584  1C36  3000               	movlw	0
 15585  1C37  0099               	movwf	25	;volatile
 15586  1C38  3064               	movlw	100
 15587  1C39  0098               	movwf	24	;volatile
 15588                           
 15589                           ;user.c: 156: CCPR3 = 150;
 15590  1C3A  3000               	movlw	0
 15591  1C3B  0026               	movlb	6	; select bank6
 15592  1C3C  0092               	movwf	18	;volatile
 15593  1C3D  3096               	movlw	150
 15594  1C3E  0091               	movwf	17	;volatile
 15595                           
 15596                           ;user.c: 157: CCPR4 = 200;
 15597  1C3F  3000               	movlw	0
 15598  1C40  0099               	movwf	25	;volatile
 15599  1C41  30C8               	movlw	200
 15600  1C42  0098               	movwf	24	;volatile
 15601                           
 15602                           ;user.c: 158: init_timer2();
 15603  1C43  31A6  267D  319C   	fcall	_init_timer2
 15604                           
 15605                           ;user.c: 159: init_timer0();
 15606  1C46  3187  27F9         	fcall	_init_timer0
 15607  1C48  0008               	return
 15608  1C49                     __end_of_init_pwm:	
 15609                           
 15610                           	psect	text56
 15611  267D                     __ptext56:	
 15612 ;; *************** function _init_timer2 *****************
 15613 ;; Defined at:
 15614 ;;		line 162 in file "user.c"
 15615 ;; Parameters:    Size  Location     Type
 15616 ;;		None
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;		None
 15619 ;; Return value:  Size  Location     Type
 15620 ;;                  1    wreg      void 
 15621 ;; Registers used:
 15622 ;;		wreg, status,2, status,0
 15623 ;; Tracked objects:
 15624 ;;		On entry : 0/0
 15625 ;;		On exit  : 0/0
 15626 ;;		Unchanged: 0/0
 15627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15632 ;;Total ram usage:        0 bytes
 15633 ;; Hardware stack levels used:    1
 15634 ;; Hardware stack levels required when called:    3
 15635 ;; This function calls:
 15636 ;;		Nothing
 15637 ;; This function is called by:
 15638 ;;		_init_pwm
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           
 15643                           ;psect for function _init_timer2
 15644  267D                     _init_timer2:	
 15645                           
 15646                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 15647                           
 15648                           ;incstack = 0
 15649                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 15650  267D  3087               	movlw	-121
 15651  267E  0020               	movlb	0	; select bank0
 15652  267F  059C               	andwf	28,f	;volatile
 15653                           
 15654                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 15655  2680  30FC               	movlw	-4
 15656  2681  059C               	andwf	28,f	;volatile
 15657                           
 15658                           ;user.c: 165: PR2 = 0xFF;
 15659  2682  30FF               	movlw	255
 15660  2683  009B               	movwf	27	;volatile
 15661                           
 15662                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 15663  2684  151C               	bsf	28,2	;volatile
 15664  2685  0008               	return
 15665  2686                     __end_of_init_timer2:	
 15666                           
 15667                           	psect	text57
 15668  07F9                     __ptext57:	
 15669 ;; *************** function _init_timer0 *****************
 15670 ;; Defined at:
 15671 ;;		line 169 in file "user.c"
 15672 ;; Parameters:    Size  Location     Type
 15673 ;;		None
 15674 ;; Auto vars:     Size  Location     Type
 15675 ;;		None
 15676 ;; Return value:  Size  Location     Type
 15677 ;;                  1    wreg      void 
 15678 ;; Registers used:
 15679 ;;		None
 15680 ;; Tracked objects:
 15681 ;;		On entry : 0/0
 15682 ;;		On exit  : 0/0
 15683 ;;		Unchanged: 0/0
 15684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15689 ;;Total ram usage:        0 bytes
 15690 ;; Hardware stack levels used:    1
 15691 ;; Hardware stack levels required when called:    3
 15692 ;; This function calls:
 15693 ;;		Nothing
 15694 ;; This function is called by:
 15695 ;;		_init_pwm
 15696 ;; This function uses a non-reentrant model
 15697 ;;
 15698                           
 15699                           
 15700                           ;psect for function _init_timer0
 15701  07F9                     _init_timer0:	
 15702                           
 15703                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 15704                           
 15705                           ;incstack = 0
 15706                           ; Regs used in _init_timer0: []
 15707  07F9  0021               	movlb	1	; select bank1
 15708  07FA  1295               	bcf	21,5	;volatile
 15709                           
 15710                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 15711  07FB  1195               	bcf	21,3	;volatile
 15712                           
 15713                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 15714  07FC  1015               	bcf	21,0	;volatile
 15715                           
 15716                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 15717  07FD  1495               	bsf	21,1	;volatile
 15718                           
 15719                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 15720  07FE  1115               	bcf	21,2	;volatile
 15721  07FF  0008               	return
 15722  0800                     __end_of_init_timer0:	
 15723                           
 15724                           	psect	text58
 15725  268F                     __ptext58:	
 15726 ;; *************** function _init_adc *****************
 15727 ;; Defined at:
 15728 ;;		line 115 in file "user.c"
 15729 ;; Parameters:    Size  Location     Type
 15730 ;;		None
 15731 ;; Auto vars:     Size  Location     Type
 15732 ;;		None
 15733 ;; Return value:  Size  Location     Type
 15734 ;;                  1    wreg      void 
 15735 ;; Registers used:
 15736 ;;		wreg, status,2, status,0
 15737 ;; Tracked objects:
 15738 ;;		On entry : 0/0
 15739 ;;		On exit  : 0/0
 15740 ;;		Unchanged: 0/0
 15741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15746 ;;Total ram usage:        0 bytes
 15747 ;; Hardware stack levels used:    1
 15748 ;; Hardware stack levels required when called:    3
 15749 ;; This function calls:
 15750 ;;		Nothing
 15751 ;; This function is called by:
 15752 ;;		_InitApp
 15753 ;; This function uses a non-reentrant model
 15754 ;;
 15755                           
 15756                           
 15757                           ;psect for function _init_adc
 15758  268F                     _init_adc:	
 15759                           
 15760                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 15761                           
 15762                           ;incstack = 0
 15763                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 15764  268F  0021               	movlb	1	; select bank1
 15765  2690  179E               	bsf	30,7	;volatile
 15766                           
 15767                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 15768  2691  081E               	movf	30,w	;volatile
 15769  2692  398F               	andlw	-113
 15770  2693  3860               	iorlw	96
 15771  2694  009E               	movwf	30	;volatile
 15772                           
 15773                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 15774  2695  30FC               	movlw	-4
 15775  2696  059E               	andwf	30,f	;volatile
 15776                           
 15777                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 15778  2697  141D               	bsf	29,0	;volatile
 15779  2698  0008               	return
 15780  2699                     __end_of_init_adc:	
 15781                           
 15782                           	psect	text59
 15783  2675                     __ptext59:	
 15784 ;; *************** function _ConfigureOscillator *****************
 15785 ;; Defined at:
 15786 ;;		line 18 in file "system.c"
 15787 ;; Parameters:    Size  Location     Type
 15788 ;;		None
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;		None
 15791 ;; Return value:  Size  Location     Type
 15792 ;;                  1    wreg      void 
 15793 ;; Registers used:
 15794 ;;		wreg, status,2, status,0
 15795 ;; Tracked objects:
 15796 ;;		On entry : 0/0
 15797 ;;		On exit  : 0/0
 15798 ;;		Unchanged: 0/0
 15799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15804 ;;Total ram usage:        0 bytes
 15805 ;; Hardware stack levels used:    1
 15806 ;; Hardware stack levels required when called:    3
 15807 ;; This function calls:
 15808 ;;		Nothing
 15809 ;; This function is called by:
 15810 ;;		_main
 15811 ;; This function uses a non-reentrant model
 15812 ;;
 15813                           
 15814                           
 15815                           ;psect for function _ConfigureOscillator
 15816  2675                     _ConfigureOscillator:	
 15817                           
 15818                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 15819                           
 15820                           ;incstack = 0
 15821                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15822  2675  30FC               	movlw	-4
 15823  2676  0021               	movlb	1	; select bank1
 15824  2677  0599               	andwf	25,f	;volatile
 15825  2678  0008               	return
 15826  2679                     __end_of_ConfigureOscillator:	
 15827                           
 15828                           	psect	intentry
 15829  0004                     __pintentry:	
 15830 ;; *************** function _isr *****************
 15831 ;; Defined at:
 15832 ;;		line 27 in file "interrupts.c"
 15833 ;; Parameters:    Size  Location     Type
 15834 ;;		None
 15835 ;; Auto vars:     Size  Location     Type
 15836 ;;  tmpSubDelay     2   35[BANK0 ] int 
 15837 ;; Return value:  Size  Location     Type
 15838 ;;                  1    wreg      void 
 15839 ;; Registers used:
 15840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15841 ;; Tracked objects:
 15842 ;;		On entry : 0/0
 15843 ;;		On exit  : 0/0
 15844 ;;		Unchanged: 0/0
 15845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15847 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15848 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15849 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15850 ;;Total ram usage:       11 bytes
 15851 ;; Hardware stack levels used:    1
 15852 ;; Hardware stack levels required when called:    2
 15853 ;; This function calls:
 15854 ;;		___awdiv
 15855 ;;		_modulation
 15856 ;;		i1_set_leds_top
 15857 ;; This function is called by:
 15858 ;;		Interrupt level 1
 15859 ;; This function uses a non-reentrant model
 15860 ;;
 15861                           
 15862  0004                     _isr:	
 15863                           
 15864                           ;incstack = 0
 15865                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15866  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15867  0005  3180               	pagesel	$
 15868  0006  0020               	movlb	0	; select bank0
 15869  0007  087F               	movf	127,w
 15870  0008  00C2               	movwf	??_isr+8
 15871                           
 15872                           ;interrupts.c: 28: int tmpSubDelay;
 15873                           ;interrupts.c: 30: extern volatile long timer;
 15874                           ;interrupts.c: 31: extern volatile long sub_timer;
 15875                           ;interrupts.c: 32: extern volatile long tap_timer;
 15876                           ;interrupts.c: 33: extern signed int adjusted_pot_value;
 15877                           ;interrupts.c: 34: extern int mod_delay_time;
 15878                           ;interrupts.c: 36: extern volatile long baseline_delay_time;
 15879                           ;interrupts.c: 38: extern int top_push_state;
 15880                           ;interrupts.c: 39: extern uint8_t feedback_start;
 15881                           ;interrupts.c: 40: extern volatile long mod_timer;
 15882                           ;interrupts.c: 41: extern volatile long delay_time;
 15883  0009  1D0B               	btfss	11,2	;volatile
 15884  000A  291F               	goto	i1l139
 15885                           
 15886                           ;interrupts.c: 45: tmpSubDelay = delay_time;
 15887  000B  084A               	movf	_delay_time+1,w	;volatile
 15888  000C  00C4               	movwf	isr@tmpSubDelay+1
 15889  000D  0849               	movf	_delay_time,w	;volatile
 15890  000E  00C3               	movwf	isr@tmpSubDelay
 15891                           
 15892                           ;interrupts.c: 46: timer = timer + 1;
 15893  000F  3001               	movlw	1
 15894  0010  00BA               	movwf	??_isr
 15895  0011  3000               	movlw	0
 15896  0012  00BB               	movwf	??_isr+1
 15897  0013  3000               	movlw	0
 15898  0014  00BC               	movwf	??_isr+2
 15899  0015  3000               	movlw	0
 15900  0016  00BD               	movwf	??_isr+3
 15901  0017  0860               	movf	_timer,w	;volatile
 15902  0018  07BA               	addwf	??_isr,f
 15903  0019  0861               	movf	_timer+1,w	;volatile
 15904  001A  3DBB               	addwfc	??_isr+1,f
 15905  001B  0862               	movf	_timer+2,w	;volatile
 15906  001C  3DBC               	addwfc	??_isr+2,f
 15907  001D  0863               	movf	_timer+3,w	;volatile
 15908  001E  3DBD               	addwfc	??_isr+3,f
 15909  001F  083D               	movf	??_isr+3,w
 15910  0020  00E3               	movwf	_timer+3	;volatile
 15911  0021  083C               	movf	??_isr+2,w
 15912  0022  00E2               	movwf	_timer+2	;volatile
 15913  0023  083B               	movf	??_isr+1,w
 15914  0024  00E1               	movwf	_timer+1	;volatile
 15915  0025  083A               	movf	??_isr,w
 15916  0026  00E0               	movwf	_timer	;volatile
 15917                           
 15918                           ;interrupts.c: 47: sub_timer = sub_timer + 1;
 15919  0027  3001               	movlw	1
 15920  0028  00BA               	movwf	??_isr
 15921  0029  3000               	movlw	0
 15922  002A  00BB               	movwf	??_isr+1
 15923  002B  3000               	movlw	0
 15924  002C  00BC               	movwf	??_isr+2
 15925  002D  3000               	movlw	0
 15926  002E  00BD               	movwf	??_isr+3
 15927  002F  0858               	movf	_sub_timer,w	;volatile
 15928  0030  07BA               	addwf	??_isr,f
 15929  0031  0859               	movf	_sub_timer+1,w	;volatile
 15930  0032  3DBB               	addwfc	??_isr+1,f
 15931  0033  085A               	movf	_sub_timer+2,w	;volatile
 15932  0034  3DBC               	addwfc	??_isr+2,f
 15933  0035  085B               	movf	_sub_timer+3,w	;volatile
 15934  0036  3DBD               	addwfc	??_isr+3,f
 15935  0037  083D               	movf	??_isr+3,w
 15936  0038  00DB               	movwf	_sub_timer+3	;volatile
 15937  0039  083C               	movf	??_isr+2,w
 15938  003A  00DA               	movwf	_sub_timer+2	;volatile
 15939  003B  083B               	movf	??_isr+1,w
 15940  003C  00D9               	movwf	_sub_timer+1	;volatile
 15941  003D  083A               	movf	??_isr,w
 15942  003E  00D8               	movwf	_sub_timer	;volatile
 15943                           
 15944                           ;interrupts.c: 48: tap_timer = tap_timer + 1;
 15945  003F  3001               	movlw	1
 15946  0040  00BA               	movwf	??_isr
 15947  0041  3000               	movlw	0
 15948  0042  00BB               	movwf	??_isr+1
 15949  0043  3000               	movlw	0
 15950  0044  00BC               	movwf	??_isr+2
 15951  0045  3000               	movlw	0
 15952  0046  00BD               	movwf	??_isr+3
 15953  0047  085C               	movf	_tap_timer,w	;volatile
 15954  0048  07BA               	addwf	??_isr,f
 15955  0049  085D               	movf	_tap_timer+1,w	;volatile
 15956  004A  3DBB               	addwfc	??_isr+1,f
 15957  004B  085E               	movf	_tap_timer+2,w	;volatile
 15958  004C  3DBC               	addwfc	??_isr+2,f
 15959  004D  085F               	movf	_tap_timer+3,w	;volatile
 15960  004E  3DBD               	addwfc	??_isr+3,f
 15961  004F  083D               	movf	??_isr+3,w
 15962  0050  00DF               	movwf	_tap_timer+3	;volatile
 15963  0051  083C               	movf	??_isr+2,w
 15964  0052  00DE               	movwf	_tap_timer+2	;volatile
 15965  0053  083B               	movf	??_isr+1,w
 15966  0054  00DD               	movwf	_tap_timer+1	;volatile
 15967  0055  083A               	movf	??_isr,w
 15968  0056  00DC               	movwf	_tap_timer	;volatile
 15969                           
 15970                           ;interrupts.c: 49: mod_timer = mod_timer + 1;
 15971  0057  3001               	movlw	1
 15972  0058  00BA               	movwf	??_isr
 15973  0059  3000               	movlw	0
 15974  005A  00BB               	movwf	??_isr+1
 15975  005B  3000               	movlw	0
 15976  005C  00BC               	movwf	??_isr+2
 15977  005D  3000               	movlw	0
 15978  005E  00BD               	movwf	??_isr+3
 15979  005F  0023               	movlb	3	; select bank3
 15980  0060  0824               	movf	_mod_timer^(0+384),w	;volatile
 15981  0061  0020               	movlb	0	; select bank0
 15982  0062  07BA               	addwf	??_isr,f
 15983  0063  0023               	movlb	3	; select bank3
 15984  0064  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 15985  0065  0020               	movlb	0	; select bank0
 15986  0066  3DBB               	addwfc	??_isr+1,f
 15987  0067  0023               	movlb	3	; select bank3
 15988  0068  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 15989  0069  0020               	movlb	0	; select bank0
 15990  006A  3DBC               	addwfc	??_isr+2,f
 15991  006B  0023               	movlb	3	; select bank3
 15992  006C  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 15993  006D  0020               	movlb	0	; select bank0
 15994  006E  3DBD               	addwfc	??_isr+3,f
 15995  006F  083D               	movf	??_isr+3,w
 15996  0070  0023               	movlb	3	; select bank3
 15997  0071  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 15998  0072  0020               	movlb	0	; select bank0
 15999  0073  083C               	movf	??_isr+2,w
 16000  0074  0023               	movlb	3	; select bank3
 16001  0075  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 16002  0076  0020               	movlb	0	; select bank0
 16003  0077  083B               	movf	??_isr+1,w
 16004  0078  0023               	movlb	3	; select bank3
 16005  0079  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 16006  007A  0020               	movlb	0	; select bank0
 16007  007B  083A               	movf	??_isr,w
 16008  007C  0023               	movlb	3	; select bank3
 16009  007D  00A4               	movwf	_mod_timer^(0+384)	;volatile
 16010                           
 16011                           ;interrupts.c: 50: double_timer++;
 16012  007E  3001               	movlw	1
 16013  007F  07A0               	addwf	_double_timer^(0+384),f	;volatile
 16014  0080  3000               	movlw	0
 16015  0081  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 16016  0082  3000               	movlw	0
 16017  0083  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 16018  0084  3000               	movlw	0
 16019  0085  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 16020                           
 16021                           ;interrupts.c: 51: test_timer++;
 16022  0086  3001               	movlw	1
 16023  0087  0024               	movlb	4	; select bank4
 16024  0088  07C1               	addwf	_test_timer^(0+512),f	;volatile
 16025  0089  3000               	movlw	0
 16026  008A  3DC2               	addwfc	(_test_timer+1)^(0+512),f	;volatile
 16027  008B  3000               	movlw	0
 16028  008C  3DC3               	addwfc	(_test_timer+2)^(0+512),f	;volatile
 16029  008D  3000               	movlw	0
 16030  008E  3DC4               	addwfc	(_test_timer+3)^(0+512),f	;volatile
 16031                           
 16032                           ;interrupts.c: 52: if (feedback_start == 1) {
 16033  008F  0023               	movlb	3	; select bank3
 16034  0090  0345               	decf	_feedback_start^(0+384),w
 16035  0091  1D03               	btfss	3,2
 16036  0092  28A9               	goto	i1l6032
 16037                           
 16038                           ;interrupts.c: 53: feedback_timer++;
 16039  0093  3001               	movlw	1
 16040  0094  07AE               	addwf	_feedback_timer^(0+384),f	;volatile
 16041  0095  3000               	movlw	0
 16042  0096  3DAF               	addwfc	(_feedback_timer+1)^(0+384),f	;volatile
 16043                           
 16044                           ;interrupts.c: 54: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 16045  0097  082F               	movf	(_feedback_timer+1)^(0+384),w	;volatile
 16046  0098  0020               	movlb	0	; select bank0
 16047  0099  0250               	subwf	_long_press_limit+1,w
 16048  009A  1D03               	skipz
 16049  009B  28A0               	goto	u594_25
 16050  009C  0023               	movlb	3	; select bank3
 16051  009D  082E               	movf	_feedback_timer^(0+384),w	;volatile
 16052  009E  0020               	movlb	0	; select bank0
 16053  009F  024F               	subwf	_long_press_limit,w
 16054  00A0                     u594_25:	
 16055  00A0  1803               	skipnc
 16056  00A1  28A9               	goto	i1l6032
 16057  00A2  0850               	movf	_long_press_limit+1,w
 16058  00A3  0023               	movlb	3	; select bank3
 16059  00A4  00AF               	movwf	(_feedback_timer+1)^(0+384)	;volatile
 16060  00A5  0020               	movlb	0	; select bank0
 16061  00A6  084F               	movf	_long_press_limit,w
 16062  00A7  0023               	movlb	3	; select bank3
 16063  00A8  00AE               	movwf	_feedback_timer^(0+384)	;volatile
 16064  00A9                     i1l6032:	
 16065                           
 16066                           ;interrupts.c: 55: }
 16067                           ;interrupts.c: 56: if (longTap_start == 1) {
 16068  00A9  0023               	movlb	3	; select bank3
 16069  00AA  0347               	decf	_longTap_start^(0+384),w
 16070  00AB  1D03               	btfss	3,2
 16071  00AC  28C3               	goto	i1l6038
 16072                           
 16073                           ;interrupts.c: 57: longTap_timer++;
 16074  00AD  3001               	movlw	1
 16075  00AE  07BA               	addwf	_longTap_timer^(0+384),f	;volatile
 16076  00AF  3000               	movlw	0
 16077  00B0  3DBB               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 16078                           
 16079                           ;interrupts.c: 58: if (longTap_timer > long_press_limit) {
 16080  00B1  083B               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 16081  00B2  0020               	movlb	0	; select bank0
 16082  00B3  0250               	subwf	_long_press_limit+1,w
 16083  00B4  1D03               	skipz
 16084  00B5  28BA               	goto	u596_25
 16085  00B6  0023               	movlb	3	; select bank3
 16086  00B7  083A               	movf	_longTap_timer^(0+384),w	;volatile
 16087  00B8  0020               	movlb	0	; select bank0
 16088  00B9  024F               	subwf	_long_press_limit,w
 16089  00BA                     u596_25:	
 16090  00BA  1803               	skipnc
 16091  00BB  28C3               	goto	i1l6038
 16092                           
 16093                           ;interrupts.c: 59: longTap_timer = long_press_limit;
 16094  00BC  0850               	movf	_long_press_limit+1,w
 16095  00BD  0023               	movlb	3	; select bank3
 16096  00BE  00BB               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 16097  00BF  0020               	movlb	0	; select bank0
 16098  00C0  084F               	movf	_long_press_limit,w
 16099  00C1  0023               	movlb	3	; select bank3
 16100  00C2  00BA               	movwf	_longTap_timer^(0+384)	;volatile
 16101  00C3                     i1l6038:	
 16102                           
 16103                           ;interrupts.c: 60: }
 16104                           ;interrupts.c: 61: }
 16105                           ;interrupts.c: 62: INTCONbits.TMR0IF = 0;
 16106  00C3  110B               	bcf	11,2	;volatile
 16107                           
 16108                           ;interrupts.c: 64: if (adjust_sub_delay == 1) {
 16109  00C4  0023               	movlb	3	; select bank3
 16110  00C5  0328               	decf	_adjust_sub_delay^(0+384),w
 16111  00C6  0429               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 16112  00C7  1D03               	btfss	3,2
 16113  00C8  291F               	goto	i1l139
 16114                           
 16115                           ;interrupts.c: 65: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 16116  00C9  0020               	movlb	0	; select bank0
 16117  00CA  085B               	movf	_sub_timer+3,w	;volatile
 16118  00CB  3A80               	xorlw	128
 16119  00CC  00BA               	movwf	??_isr
 16120  00CD  084C               	movf	_delay_time+3,w	;volatile
 16121  00CE  3A80               	xorlw	128
 16122  00CF  023A               	subwf	??_isr,w
 16123  00D0  1D03               	skipz
 16124  00D1  28DC               	goto	u598_23
 16125  00D2  084B               	movf	_delay_time+2,w	;volatile
 16126  00D3  025A               	subwf	_sub_timer+2,w	;volatile
 16127  00D4  1D03               	skipz
 16128  00D5  28DC               	goto	u598_23
 16129  00D6  084A               	movf	_delay_time+1,w	;volatile
 16130  00D7  0259               	subwf	_sub_timer+1,w	;volatile
 16131  00D8  1D03               	skipz
 16132  00D9  28DC               	goto	u598_23
 16133  00DA  0849               	movf	_delay_time,w	;volatile
 16134  00DB  0258               	subwf	_sub_timer,w	;volatile
 16135  00DC                     u598_23:	
 16136  00DC  1C03               	skipc
 16137  00DD  291F               	goto	i1l139
 16138  00DE  0845               	movf	_baseline_delay_time,w	;volatile
 16139  00DF  00BA               	movwf	??_isr
 16140  00E0  0846               	movf	_baseline_delay_time+1,w	;volatile
 16141  00E1  00BB               	movwf	??_isr+1
 16142  00E2  0847               	movf	_baseline_delay_time+2,w	;volatile
 16143  00E3  00BC               	movwf	??_isr+2
 16144  00E4  0848               	movf	_baseline_delay_time+3,w	;volatile
 16145  00E5  00BD               	movwf	??_isr+3
 16146  00E6  0960               	comf	_timer,w	;volatile
 16147  00E7  00BE               	movwf	??_isr+4
 16148  00E8  0961               	comf	_timer+1,w	;volatile
 16149  00E9  00BF               	movwf	??_isr+5
 16150  00EA  0962               	comf	_timer+2,w	;volatile
 16151  00EB  00C0               	movwf	??_isr+6
 16152  00EC  0963               	comf	_timer+3,w	;volatile
 16153  00ED  00C1               	movwf	??_isr+7
 16154  00EE  0ABE               	incf	??_isr+4,f
 16155  00EF  1903               	skipnz
 16156  00F0  0ABF               	incf	??_isr+5,f
 16157  00F1  1903               	skipnz
 16158  00F2  0AC0               	incf	??_isr+6,f
 16159  00F3  1903               	skipnz
 16160  00F4  0AC1               	incf	??_isr+7,f
 16161  00F5  083E               	movf	??_isr+4,w
 16162  00F6  07BA               	addwf	??_isr,f
 16163  00F7  083F               	movf	??_isr+5,w
 16164  00F8  3DBB               	addwfc	??_isr+1,f
 16165  00F9  0840               	movf	??_isr+6,w
 16166  00FA  3DBC               	addwfc	??_isr+2,f
 16167  00FB  0841               	movf	??_isr+7,w
 16168  00FC  3DBD               	addwfc	??_isr+3,f
 16169  00FD  1BBD               	btfsc	??_isr+3,7
 16170  00FE  290C               	goto	i1l6046
 16171  00FF  083D               	movf	??_isr+3,w
 16172  0100  1D03               	btfss	3,2
 16173  0101  291F               	goto	i1l139
 16174  0102  083C               	movf	??_isr+2,w
 16175  0103  1D03               	btfss	3,2
 16176  0104  291F               	goto	i1l139
 16177  0105  083B               	movf	??_isr+1,w
 16178  0106  1D03               	btfss	3,2
 16179  0107  291F               	goto	i1l139
 16180  0108  3004               	movlw	4
 16181  0109  023A               	subwf	??_isr,w
 16182  010A  1803               	btfsc	3,0
 16183  010B  291F               	goto	i1l139
 16184  010C                     i1l6046:	
 16185                           
 16186                           ;interrupts.c: 66: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 16187  010C  0960               	comf	_timer,w	;volatile
 16188  010D  00BA               	movwf	??_isr
 16189  010E  0961               	comf	_timer+1,w	;volatile
 16190  010F  00BB               	movwf	??_isr+1
 16191  0110  0ABA               	incf	??_isr,f
 16192  0111  1903               	skipnz
 16193  0112  0ABB               	incf	??_isr+1,f
 16194  0113  0845               	movf	_baseline_delay_time,w	;volatile
 16195  0114  073A               	addwf	??_isr,w
 16196  0115  00BC               	movwf	??_isr+2
 16197  0116  0846               	movf	_baseline_delay_time+1,w	;volatile
 16198  0117  3D3B               	addwfc	??_isr+1,w
 16199  0118  00BD               	movwf	??_isr+3
 16200  0119  0858               	movf	_sub_timer,w	;volatile
 16201  011A  073C               	addwf	??_isr+2,w
 16202  011B  00C3               	movwf	isr@tmpSubDelay
 16203  011C  0859               	movf	_sub_timer+1,w	;volatile
 16204  011D  3D3D               	addwfc	??_isr+3,w
 16205  011E  00C4               	movwf	isr@tmpSubDelay+1
 16206  011F                     i1l139:	
 16207                           
 16208                           ;interrupts.c: 67: }
 16209                           ;interrupts.c: 68: }
 16210                           ;interrupts.c: 69: }
 16211                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 16212  011F  0020               	movlb	0	; select bank0
 16213  0120  0854               	movf	_longTap_state,w	;volatile
 16214  0121  1D03               	btfss	3,2
 16215  0122  297E               	goto	i1l6072
 16216  0123  0864               	movf	_doubleTap_state,w	;volatile
 16217  0124  1D03               	btfss	3,2
 16218  0125  297E               	goto	i1l6072
 16219  0126  0866               	movf	_presetSaveMode,w
 16220  0127  1D03               	btfss	3,2
 16221  0128  297E               	goto	i1l6072
 16222                           
 16223                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 16224  0129  0863               	movf	_timer+3,w	;volatile
 16225  012A  3A80               	xorlw	128
 16226  012B  00BA               	movwf	??_isr
 16227  012C  0848               	movf	_baseline_delay_time+3,w	;volatile
 16228  012D  3A80               	xorlw	128
 16229  012E  023A               	subwf	??_isr,w
 16230  012F  1D03               	skipz
 16231  0130  293B               	goto	u603_23
 16232  0131  0847               	movf	_baseline_delay_time+2,w	;volatile
 16233  0132  0262               	subwf	_timer+2,w	;volatile
 16234  0133  1D03               	skipz
 16235  0134  293B               	goto	u603_23
 16236  0135  0846               	movf	_baseline_delay_time+1,w	;volatile
 16237  0136  0261               	subwf	_timer+1,w	;volatile
 16238  0137  1D03               	skipz
 16239  0138  293B               	goto	u603_23
 16240  0139  0845               	movf	_baseline_delay_time,w	;volatile
 16241  013A  0260               	subwf	_timer,w	;volatile
 16242  013B                     u603_23:	
 16243  013B  1C03               	skipc
 16244  013C  296C               	goto	i1l6068
 16245                           
 16246                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 16247  013D  0022               	movlb	2	; select bank2
 16248  013E  160D               	bsf	13,4	;volatile
 16249                           
 16250                           ;interrupts.c: 80: timer = 0;
 16251  013F  3000               	movlw	0
 16252  0140  0020               	movlb	0	; select bank0
 16253  0141  00E3               	movwf	_timer+3	;volatile
 16254  0142  3000               	movlw	0
 16255  0143  00E2               	movwf	_timer+2	;volatile
 16256  0144  3000               	movlw	0
 16257  0145  00E1               	movwf	_timer+1	;volatile
 16258  0146  3000               	movlw	0
 16259  0147  00E0               	movwf	_timer	;volatile
 16260                           
 16261                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 16262  0148  0023               	movlb	3	; select bank3
 16263  0149  033E               	decf	_reset_sub_delay^(0+384),w
 16264  014A  043F               	iorwf	(_reset_sub_delay+1)^(0+384),w
 16265  014B  1D03               	btfss	3,2
 16266  014C  296C               	goto	i1l6068
 16267                           
 16268                           ;interrupts.c: 83: CCPR1 = delay_counter;
 16269  014D  082D               	movf	(_delay_counter+1)^(0+384),w	;volatile
 16270  014E  0025               	movlb	5	; select bank5
 16271  014F  0092               	movwf	18	;volatile
 16272  0150  0023               	movlb	3	; select bank3
 16273  0151  082C               	movf	_delay_counter^(0+384),w	;volatile
 16274  0152  0025               	movlb	5	; select bank5
 16275  0153  0091               	movwf	17	;volatile
 16276                           
 16277                           ;interrupts.c: 86: mod_counter = 0;
 16278  0154  0022               	movlb	2	; select bank2
 16279  0155  01EB               	clrf	_mod_counter^(0+256)
 16280  0156  01EC               	clrf	(_mod_counter+1)^(0+256)
 16281                           
 16282                           ;interrupts.c: 87: mod_timer = mod_delay_time;
 16283  0157  0023               	movlb	3	; select bank3
 16284  0158  085B               	movf	_mod_delay_time^(0+384),w
 16285  0159  00A4               	movwf	_mod_timer^(0+384)	;volatile
 16286  015A  085C               	movf	(_mod_delay_time+1)^(0+384),w
 16287  015B  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 16288  015C  0D89               	rlf	9,f
 16289  015D  3B89               	subwfb	9,f
 16290  015E  0989               	comf	9,f
 16291  015F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 16292  0160  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 16293                           
 16294                           ;interrupts.c: 89: reset_sub_delay = 0;
 16295  0161  01BE               	clrf	_reset_sub_delay^(0+384)
 16296  0162  01BF               	clrf	(_reset_sub_delay+1)^(0+384)
 16297                           
 16298                           ;interrupts.c: 90: sub_timer = delay_time;
 16299  0163  0020               	movlb	0	; select bank0
 16300  0164  084C               	movf	_delay_time+3,w	;volatile
 16301  0165  00DB               	movwf	_sub_timer+3	;volatile
 16302  0166  084B               	movf	_delay_time+2,w	;volatile
 16303  0167  00DA               	movwf	_sub_timer+2	;volatile
 16304  0168  084A               	movf	_delay_time+1,w	;volatile
 16305  0169  00D9               	movwf	_sub_timer+1	;volatile
 16306  016A  0849               	movf	_delay_time,w	;volatile
 16307  016B  00D8               	movwf	_sub_timer	;volatile
 16308  016C                     i1l6068:	
 16309                           
 16310                           ;interrupts.c: 91: }
 16311                           ;interrupts.c: 92: }
 16312                           ;interrupts.c: 94: if (timer >= 30) {
 16313  016C  0020               	movlb	0	; select bank0
 16314  016D  1BE3               	btfsc	_timer+3,7	;volatile
 16315  016E  297E               	goto	i1l6072
 16316  016F  0863               	movf	_timer+3,w	;volatile
 16317  0170  1D03               	btfss	3,2
 16318  0171  297C               	goto	i1l6070
 16319  0172  0862               	movf	_timer+2,w	;volatile
 16320  0173  1D03               	btfss	3,2
 16321  0174  297C               	goto	i1l6070
 16322  0175  0861               	movf	_timer+1,w	;volatile
 16323  0176  1D03               	btfss	3,2
 16324  0177  297C               	goto	i1l6070
 16325  0178  301E               	movlw	30
 16326  0179  0260               	subwf	_timer,w	;volatile
 16327  017A  1C03               	btfss	3,0
 16328  017B  297E               	goto	i1l6072
 16329  017C                     i1l6070:	
 16330                           
 16331                           ;interrupts.c: 96: LATBbits.LATB4 = 0;
 16332  017C  0022               	movlb	2	; select bank2
 16333  017D  120D               	bcf	13,4	;volatile
 16334  017E                     i1l6072:	
 16335                           
 16336                           ;interrupts.c: 98: }
 16337                           ;interrupts.c: 99: }
 16338                           ;interrupts.c: 102: if (presetSaveMode == 1) {
 16339  017E  0020               	movlb	0	; select bank0
 16340  017F  0366               	decf	_presetSaveMode,w
 16341  0180  1D03               	btfss	3,2
 16342  0181  29AE               	goto	i1l6084
 16343                           
 16344                           ;interrupts.c: 105: if (double_timer >= 250) {
 16345  0182  0023               	movlb	3	; select bank3
 16346  0183  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 16347  0184  299D               	goto	i1l6080
 16348  0185  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 16349  0186  1D03               	btfss	3,2
 16350  0187  2992               	goto	i1l6076
 16351  0188  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 16352  0189  1D03               	btfss	3,2
 16353  018A  2992               	goto	i1l6076
 16354  018B  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 16355  018C  1D03               	btfss	3,2
 16356  018D  2992               	goto	i1l6076
 16357  018E  30FA               	movlw	250
 16358  018F  0220               	subwf	_double_timer^(0+384),w	;volatile
 16359  0190  1C03               	btfss	3,0
 16360  0191  299D               	goto	i1l6080
 16361  0192                     i1l6076:	
 16362                           
 16363                           ;interrupts.c: 106: LATBbits.LATB0 = 1;
 16364  0192  0022               	movlb	2	; select bank2
 16365  0193  140D               	bsf	13,0	;volatile
 16366                           
 16367                           ;interrupts.c: 107: double_timer = 0;
 16368  0194  3000               	movlw	0
 16369  0195  0023               	movlb	3	; select bank3
 16370  0196  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 16371  0197  3000               	movlw	0
 16372  0198  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 16373  0199  3000               	movlw	0
 16374  019A  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 16375  019B  3000               	movlw	0
 16376  019C  00A0               	movwf	_double_timer^(0+384)	;volatile
 16377  019D                     i1l6080:	
 16378                           
 16379                           ;interrupts.c: 109: }
 16380                           ;interrupts.c: 110: if (double_timer >= 30) {
 16381  019D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 16382  019E  29AE               	goto	i1l6084
 16383  019F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 16384  01A0  1D03               	btfss	3,2
 16385  01A1  29AC               	goto	i1l6082
 16386  01A2  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 16387  01A3  1D03               	btfss	3,2
 16388  01A4  29AC               	goto	i1l6082
 16389  01A5  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 16390  01A6  1D03               	btfss	3,2
 16391  01A7  29AC               	goto	i1l6082
 16392  01A8  301E               	movlw	30
 16393  01A9  0220               	subwf	_double_timer^(0+384),w	;volatile
 16394  01AA  1C03               	btfss	3,0
 16395  01AB  29AE               	goto	i1l6084
 16396  01AC                     i1l6082:	
 16397                           
 16398                           ;interrupts.c: 112: LATBbits.LATB0 = 0;
 16399  01AC  0022               	movlb	2	; select bank2
 16400  01AD  100D               	bcf	13,0	;volatile
 16401  01AE                     i1l6084:	
 16402                           
 16403                           ;interrupts.c: 113: }
 16404                           ;interrupts.c: 114: }
 16405                           ;interrupts.c: 116: if (presetSaveMode < 1 && mode2_state == 0) {
 16406  01AE  0020               	movlb	0	; select bank0
 16407  01AF  0866               	movf	_presetSaveMode,w
 16408  01B0  1D03               	btfss	3,2
 16409  01B1  2A09               	goto	i1l6104
 16410  01B2  0865               	movf	_mode2_state,w
 16411  01B3  1D03               	btfss	3,2
 16412  01B4  2A09               	goto	i1l6104
 16413                           
 16414                           ;interrupts.c: 117: if (sub_timer >= tmpSubDelay ) {
 16415  01B5  0843               	movf	isr@tmpSubDelay,w
 16416  01B6  00BA               	movwf	??_isr
 16417  01B7  0844               	movf	isr@tmpSubDelay+1,w
 16418  01B8  00BB               	movwf	??_isr+1
 16419  01B9  3000               	movlw	0
 16420  01BA  1BBB               	btfsc	??_isr+1,7
 16421  01BB  30FF               	movlw	255
 16422  01BC  00BC               	movwf	??_isr+2
 16423  01BD  00BD               	movwf	??_isr+3
 16424  01BE  085B               	movf	_sub_timer+3,w	;volatile
 16425  01BF  3A80               	xorlw	128
 16426  01C0  00BE               	movwf	??_isr+4
 16427  01C1  083D               	movf	??_isr+3,w
 16428  01C2  3A80               	xorlw	128
 16429  01C3  023E               	subwf	??_isr+4,w
 16430  01C4  1D03               	skipz
 16431  01C5  29D0               	goto	u611_23
 16432  01C6  083C               	movf	??_isr+2,w
 16433  01C7  025A               	subwf	_sub_timer+2,w	;volatile
 16434  01C8  1D03               	skipz
 16435  01C9  29D0               	goto	u611_23
 16436  01CA  083B               	movf	??_isr+1,w
 16437  01CB  0259               	subwf	_sub_timer+1,w	;volatile
 16438  01CC  1D03               	skipz
 16439  01CD  29D0               	goto	u611_23
 16440  01CE  083A               	movf	??_isr,w
 16441  01CF  0258               	subwf	_sub_timer,w	;volatile
 16442  01D0                     u611_23:	
 16443  01D0  1C03               	skipc
 16444  01D1  29ED               	goto	i1l6098
 16445                           
 16446                           ;interrupts.c: 118: if (suspend_blink == 0) {
 16447  01D2  0867               	movf	_suspend_blink,w	;volatile
 16448  01D3  1D03               	btfss	3,2
 16449  01D4  29E0               	goto	i1l6094
 16450                           
 16451                           ;interrupts.c: 119: set_leds_top(top_push_state, 1);
 16452  01D5  0852               	movf	_top_push_state+1,w
 16453  01D6  00F1               	movwf	i1set_leds_top@x+1
 16454  01D7  0851               	movf	_top_push_state,w
 16455  01D8  00F0               	movwf	i1set_leds_top@x
 16456  01D9  3001               	movlw	1
 16457  01DA  00F2               	movwf	i1set_leds_top@ledState
 16458  01DB  3000               	movlw	0
 16459  01DC  00F3               	movwf	i1set_leds_top@ledState+1
 16460  01DD  319C  24D3  3180   	fcall	i1_set_leds_top
 16461  01E0                     i1l6094:	
 16462                           
 16463                           ;interrupts.c: 120: }
 16464                           ;interrupts.c: 121: tmpSubDelay = delay_time;
 16465  01E0  0020               	movlb	0	; select bank0
 16466  01E1  084A               	movf	_delay_time+1,w	;volatile
 16467  01E2  00C4               	movwf	isr@tmpSubDelay+1
 16468  01E3  0849               	movf	_delay_time,w	;volatile
 16469  01E4  00C3               	movwf	isr@tmpSubDelay
 16470                           
 16471                           ;interrupts.c: 122: sub_timer = 0;
 16472  01E5  3000               	movlw	0
 16473  01E6  00DB               	movwf	_sub_timer+3	;volatile
 16474  01E7  3000               	movlw	0
 16475  01E8  00DA               	movwf	_sub_timer+2	;volatile
 16476  01E9  3000               	movlw	0
 16477  01EA  00D9               	movwf	_sub_timer+1	;volatile
 16478  01EB  3000               	movlw	0
 16479  01EC  00D8               	movwf	_sub_timer	;volatile
 16480  01ED                     i1l6098:	
 16481                           
 16482                           ;interrupts.c: 123: }
 16483                           ;interrupts.c: 125: if (sub_timer >= 20) {
 16484  01ED  1BDB               	btfsc	_sub_timer+3,7	;volatile
 16485  01EE  2A09               	goto	i1l6104
 16486  01EF  085B               	movf	_sub_timer+3,w	;volatile
 16487  01F0  1D03               	btfss	3,2
 16488  01F1  29FC               	goto	i1l6100
 16489  01F2  085A               	movf	_sub_timer+2,w	;volatile
 16490  01F3  1D03               	btfss	3,2
 16491  01F4  29FC               	goto	i1l6100
 16492  01F5  0859               	movf	_sub_timer+1,w	;volatile
 16493  01F6  1D03               	btfss	3,2
 16494  01F7  29FC               	goto	i1l6100
 16495  01F8  3014               	movlw	20
 16496  01F9  0258               	subwf	_sub_timer,w	;volatile
 16497  01FA  1C03               	btfss	3,0
 16498  01FB  2A09               	goto	i1l6104
 16499  01FC                     i1l6100:	
 16500                           
 16501                           ;interrupts.c: 126: if (suspend_blink == 0) {
 16502  01FC  0867               	movf	_suspend_blink,w	;volatile
 16503  01FD  1D03               	btfss	3,2
 16504  01FE  2A09               	goto	i1l6104
 16505                           
 16506                           ;interrupts.c: 127: set_leds_top(top_push_state, 0);
 16507  01FF  0852               	movf	_top_push_state+1,w
 16508  0200  00F1               	movwf	i1set_leds_top@x+1
 16509  0201  0851               	movf	_top_push_state,w
 16510  0202  00F0               	movwf	i1set_leds_top@x
 16511  0203  3000               	movlw	0
 16512  0204  00F2               	movwf	i1set_leds_top@ledState
 16513  0205  00F3               	movwf	i1set_leds_top@ledState+1
 16514  0206  319C  24D3  3180   	fcall	i1_set_leds_top
 16515  0209                     i1l6104:	
 16516                           
 16517                           ;interrupts.c: 128: }
 16518                           ;interrupts.c: 129: }
 16519                           ;interrupts.c: 130: }
 16520                           ;interrupts.c: 145: if (mod_timer >= mod_delay_time) {
 16521  0209  0023               	movlb	3	; select bank3
 16522  020A  085B               	movf	_mod_delay_time^(0+384),w
 16523  020B  0020               	movlb	0	; select bank0
 16524  020C  00BA               	movwf	??_isr
 16525  020D  0023               	movlb	3	; select bank3
 16526  020E  085C               	movf	(_mod_delay_time+1)^(0+384),w
 16527  020F  0020               	movlb	0	; select bank0
 16528  0210  00BB               	movwf	??_isr+1
 16529  0211  3000               	movlw	0
 16530  0212  1BBB               	btfsc	??_isr+1,7
 16531  0213  30FF               	movlw	255
 16532  0214  00BC               	movwf	??_isr+2
 16533  0215  00BD               	movwf	??_isr+3
 16534  0216  0023               	movlb	3	; select bank3
 16535  0217  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 16536  0218  3A80               	xorlw	128
 16537  0219  0020               	movlb	0	; select bank0
 16538  021A  00BE               	movwf	??_isr+4
 16539  021B  083D               	movf	??_isr+3,w
 16540  021C  3A80               	xorlw	128
 16541  021D  023E               	subwf	??_isr+4,w
 16542  021E  0023               	movlb	3	; select bank3
 16543  021F  1D03               	skipz
 16544  0220  2A31               	goto	u615_23
 16545  0221  0020               	movlb	0	; select bank0
 16546  0222  083C               	movf	??_isr+2,w
 16547  0223  0023               	movlb	3	; select bank3
 16548  0224  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 16549  0225  1D03               	skipz
 16550  0226  2A31               	goto	u615_23
 16551  0227  0020               	movlb	0	; select bank0
 16552  0228  083B               	movf	??_isr+1,w
 16553  0229  0023               	movlb	3	; select bank3
 16554  022A  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 16555  022B  1D03               	skipz
 16556  022C  2A31               	goto	u615_23
 16557  022D  0020               	movlb	0	; select bank0
 16558  022E  083A               	movf	??_isr,w
 16559  022F  0023               	movlb	3	; select bank3
 16560  0230  0224               	subwf	_mod_timer^(0+384),w	;volatile
 16561  0231                     u615_23:	
 16562  0231  1C03               	skipc
 16563  0232  2AE3               	goto	i1l6138
 16564                           
 16565                           ;interrupts.c: 146: mod_timer = 0;
 16566  0233  3000               	movlw	0
 16567  0234  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 16568  0235  3000               	movlw	0
 16569  0236  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 16570  0237  3000               	movlw	0
 16571  0238  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 16572  0239  3000               	movlw	0
 16573  023A  00A4               	movwf	_mod_timer^(0+384)	;volatile
 16574                           
 16575                           ;interrupts.c: 149: if (mod_counter >= 60) {
 16576  023B  0022               	movlb	2	; select bank2
 16577  023C  086C               	movf	(_mod_counter+1)^(0+256),w
 16578  023D  3A80               	xorlw	128
 16579  023E  0020               	movlb	0	; select bank0
 16580  023F  00BA               	movwf	??_isr
 16581  0240  3080               	movlw	128
 16582  0241  023A               	subwf	??_isr,w
 16583  0242  1D03               	skipz
 16584  0243  2A47               	goto	u616_25
 16585  0244  303C               	movlw	60
 16586  0245  0022               	movlb	2	; select bank2
 16587  0246  026B               	subwf	_mod_counter^(0+256),w
 16588  0247                     u616_25:	
 16589  0247  1C03               	skipc
 16590  0248  2A4C               	goto	i1l6110
 16591                           
 16592                           ;interrupts.c: 150: mod_counter = 0;
 16593  0249  0022               	movlb	2	; select bank2
 16594  024A  01EB               	clrf	_mod_counter^(0+256)
 16595  024B  01EC               	clrf	(_mod_counter+1)^(0+256)
 16596  024C                     i1l6110:	
 16597                           
 16598                           ;interrupts.c: 151: }
 16599                           ;interrupts.c: 152: PORTCbits.RC4 = 0;
 16600  024C  0020               	movlb	0	; select bank0
 16601  024D  120E               	bcf	14,4	;volatile
 16602                           
 16603                           ;interrupts.c: 153: switch (bottom_push_state) {
 16604  024E  2A89               	goto	i1l6130
 16605  024F                     i1l6112:	
 16606                           ;interrupts.c: 154: case 1:
 16607                           
 16608                           
 16609                           ;interrupts.c: 155: mod_value = (int)modSin[mod_counter];
 16610  024F  0022               	movlb	2	; select bank2
 16611  0250  086B               	movf	_mod_counter^(0+256),w
 16612  0251  3EA0               	addlw	(low (_modSin| (0+768)))& (0+255)
 16613  0252  0086               	movwf	6
 16614  0253  3003               	movlw	3	; select bank7/8
 16615  0254  2A7D               	goto	L22
 16616  0255                     i1l6114:	
 16617                           ;interrupts.c: 157: case 2:
 16618                           
 16619                           ;interrupts.c: 156: break;
 16620                           
 16621                           
 16622                           ;interrupts.c: 158: mod_value = (int)modTri[mod_counter];
 16623  0255  0022               	movlb	2	; select bank2
 16624  0256  086B               	movf	_mod_counter^(0+256),w
 16625  0257  3E20               	addlw	(low (_modTri| (0+1024)))& (0+255)
 16626  0258  2A7B               	goto	L23
 16627  0259                     i1l6116:	
 16628                           ;interrupts.c: 160: case 3:
 16629                           
 16630                           ;interrupts.c: 159: break;
 16631                           
 16632                           
 16633                           ;interrupts.c: 161: if (mod_counter < 31) {
 16634  0259  0022               	movlb	2	; select bank2
 16635  025A  086C               	movf	(_mod_counter+1)^(0+256),w
 16636  025B  3A80               	xorlw	128
 16637  025C  0020               	movlb	0	; select bank0
 16638  025D  00BA               	movwf	??_isr
 16639  025E  3080               	movlw	128
 16640  025F  023A               	subwf	??_isr,w
 16641  0260  1D03               	skipz
 16642  0261  2A65               	goto	u617_25
 16643  0262  301F               	movlw	31
 16644  0263  0022               	movlb	2	; select bank2
 16645  0264  026B               	subwf	_mod_counter^(0+256),w
 16646  0265                     u617_25:	
 16647  0265  1803               	skipnc
 16648  0266  2A6C               	goto	i1l6120
 16649                           
 16650                           ;interrupts.c: 162: mod_value = 100;
 16651  0267  3064               	movlw	100
 16652  0268  0023               	movlb	3	; select bank3
 16653  0269  00BC               	movwf	_mod_value^(0+384)
 16654  026A  3000               	movlw	0
 16655  026B  2A70               	goto	L21
 16656  026C                     i1l6120:	
 16657                           ;interrupts.c: 163: } else {
 16658                           
 16659                           
 16660                           ;interrupts.c: 164: mod_value = -100;
 16661  026C  309C               	movlw	156
 16662  026D  0023               	movlb	3	; select bank3
 16663  026E  00BC               	movwf	_mod_value^(0+384)
 16664  026F  30FF               	movlw	255
 16665  0270                     L21:	
 16666  0270  00BD               	movwf	(_mod_value^(0+384)+1)
 16667                           
 16668                           ;interrupts.c: 165: }
 16669                           ;interrupts.c: 166: break;
 16670  0271  2AA0               	goto	i1l6132
 16671  0272                     i1l6122:	
 16672                           ;interrupts.c: 167: case 4:
 16673                           
 16674                           
 16675                           ;interrupts.c: 168: mod_value = (int) modSaw[mod_counter];
 16676  0272  0022               	movlb	2	; select bank2
 16677  0273  086B               	movf	_mod_counter^(0+256),w
 16678  0274  3E20               	addlw	(low (_modSaw| (0+1280)))& (0+255)
 16679  0275  0086               	movwf	6
 16680  0276  3005               	movlw	5	; select bank10/11
 16681  0277  2A7D               	goto	L22
 16682  0278                     i1l6124:	
 16683                           ;interrupts.c: 170: case 5:
 16684                           
 16685                           ;interrupts.c: 169: break;
 16686                           
 16687                           
 16688                           ;interrupts.c: 171: mod_value = (int)modRevSaw[mod_counter];
 16689  0278  0022               	movlb	2	; select bank2
 16690  0279  086B               	movf	_mod_counter^(0+256),w
 16691  027A  3EA0               	addlw	(low (_modRevSaw| (0+1024)))& (0+255)
 16692  027B                     L23:	
 16693  027B  0086               	movwf	6
 16694  027C  3004               	movlw	4	; select bank9/10
 16695  027D                     L22:	
 16696  027D  0087               	movwf	7
 16697  027E  0801               	movf	1,w
 16698  027F  0023               	movlb	3	; select bank3
 16699  0280  00BC               	movwf	_mod_value^(0+384)
 16700  0281  01BD               	clrf	(_mod_value+1)^(0+384)
 16701  0282  1BBC               	btfsc	_mod_value^(0+384),7
 16702  0283  03BD               	decf	(_mod_value+1)^(0+384),f
 16703                           
 16704                           ;interrupts.c: 172: break;
 16705  0284  2AA0               	goto	i1l6132
 16706  0285                     i1l6126:	
 16707                           ;interrupts.c: 173: default:
 16708                           
 16709                           
 16710                           ;interrupts.c: 174: mod_value = 0;
 16711  0285  0023               	movlb	3	; select bank3
 16712  0286  01BC               	clrf	_mod_value^(0+384)
 16713  0287  01BD               	clrf	(_mod_value+1)^(0+384)
 16714                           
 16715                           ;interrupts.c: 176: }
 16716                           
 16717                           ;interrupts.c: 175: break;
 16718  0288  2AA0               	goto	i1l6132
 16719  0289                     i1l6130:	
 16720                           
 16721                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16722                           ; Switch size 1, requested type "space"
 16723                           ; Number of cases is 1, Range of values is 0 to 0
 16724                           ; switch strategies available:
 16725                           ; Name         Instructions Cycles
 16726                           ; simple_byte            4     3 (average)
 16727                           ; direct_byte            8     6 (fixed)
 16728                           ; jumptable            260     6 (fixed)
 16729                           ;	Chosen strategy is simple_byte
 16730  0289  0020               	movlb	0	; select bank0
 16731  028A  084E               	movf	_bottom_push_state+1,w
 16732  028B  3A00               	xorlw	0	; case 0
 16733  028C  1903               	skipnz
 16734  028D  2A8F               	goto	i1l8652
 16735  028E  2A85               	goto	i1l6126
 16736  028F                     i1l8652:	
 16737                           
 16738                           ; Switch size 1, requested type "space"
 16739                           ; Number of cases is 5, Range of values is 1 to 5
 16740                           ; switch strategies available:
 16741                           ; Name         Instructions Cycles
 16742                           ; simple_byte           16     9 (average)
 16743                           ; direct_byte           19     9 (fixed)
 16744                           ; jumptable            263     9 (fixed)
 16745                           ;	Chosen strategy is simple_byte
 16746  028F  084D               	movf	_bottom_push_state,w
 16747  0290  3A01               	xorlw	1	; case 1
 16748  0291  1903               	skipnz
 16749  0292  2A4F               	goto	i1l6112
 16750  0293  3A03               	xorlw	3	; case 2
 16751  0294  1903               	skipnz
 16752  0295  2A55               	goto	i1l6114
 16753  0296  3A01               	xorlw	1	; case 3
 16754  0297  1903               	skipnz
 16755  0298  2A59               	goto	i1l6116
 16756  0299  3A07               	xorlw	7	; case 4
 16757  029A  1903               	skipnz
 16758  029B  2A72               	goto	i1l6122
 16759  029C  3A01               	xorlw	1	; case 5
 16760  029D  1903               	skipnz
 16761  029E  2A78               	goto	i1l6124
 16762  029F  2A85               	goto	i1l6126
 16763  02A0                     i1l6132:	
 16764                           
 16765                           ;interrupts.c: 179: mod_value = modulation(mod_value, adjusted_pot_value);
 16766  02A0  0023               	movlb	3	; select bank3
 16767  02A1  083C               	movf	_mod_value^(0+384),w
 16768  02A2  0020               	movlb	0	; select bank0
 16769  02A3  00AE               	movwf	modulation@x
 16770  02A4  0023               	movlb	3	; select bank3
 16771  02A5  083D               	movf	(_mod_value+1)^(0+384),w
 16772  02A6  0020               	movlb	0	; select bank0
 16773  02A7  00AF               	movwf	modulation@x+1
 16774  02A8  0D89               	rlf	9,f
 16775  02A9  3B89               	subwfb	9,f
 16776  02AA  0989               	comf	9,f
 16777  02AB  00B0               	movwf	modulation@x+2
 16778  02AC  00B1               	movwf	modulation@x+3
 16779  02AD  0024               	movlb	4	; select bank4
 16780  02AE  0845               	movf	_adjusted_pot_value^(0+512),w
 16781  02AF  0020               	movlb	0	; select bank0
 16782  02B0  00B2               	movwf	modulation@y
 16783  02B1  0024               	movlb	4	; select bank4
 16784  02B2  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 16785  02B3  0020               	movlb	0	; select bank0
 16786  02B4  00B3               	movwf	modulation@y+1
 16787  02B5  0D89               	rlf	9,f
 16788  02B6  3B89               	subwfb	9,f
 16789  02B7  0989               	comf	9,f
 16790  02B8  00B4               	movwf	modulation@y+2
 16791  02B9  00B5               	movwf	modulation@y+3
 16792  02BA  319B  23C7  3180   	fcall	_modulation
 16793  02BD  0020               	movlb	0	; select bank0
 16794  02BE  082F               	movf	?_modulation+1,w
 16795  02BF  0023               	movlb	3	; select bank3
 16796  02C0  00BD               	movwf	(_mod_value+1)^(0+384)
 16797  02C1  0020               	movlb	0	; select bank0
 16798  02C2  082E               	movf	?_modulation,w
 16799  02C3  0023               	movlb	3	; select bank3
 16800  02C4  00BC               	movwf	_mod_value^(0+384)
 16801                           
 16802                           ;interrupts.c: 180: CCPR9 = mod_value / 2;
 16803  02C5  3002               	movlw	2
 16804  02C6  00F0               	movwf	___awdiv@divisor
 16805  02C7  3000               	movlw	0
 16806  02C8  00F1               	movwf	___awdiv@divisor+1
 16807  02C9  083D               	movf	(_mod_value+1)^(0+384),w
 16808  02CA  00F3               	movwf	___awdiv@dividend+1
 16809  02CB  083C               	movf	_mod_value^(0+384),w
 16810  02CC  00F2               	movwf	___awdiv@dividend
 16811  02CD  319E  2650  3180   	fcall	___awdiv
 16812  02D0  0871               	movf	?___awdiv+1,w
 16813  02D1  002C               	movlb	12	; select bank12
 16814  02D2  009B               	movwf	27	;volatile
 16815  02D3  0870               	movf	?___awdiv,w
 16816  02D4  009A               	movwf	26	;volatile
 16817                           
 16818                           ;interrupts.c: 181: mod_timer = 0;
 16819  02D5  3000               	movlw	0
 16820  02D6  0023               	movlb	3	; select bank3
 16821  02D7  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 16822  02D8  3000               	movlw	0
 16823  02D9  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 16824  02DA  3000               	movlw	0
 16825  02DB  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 16826  02DC  3000               	movlw	0
 16827  02DD  00A4               	movwf	_mod_timer^(0+384)	;volatile
 16828                           
 16829                           ;interrupts.c: 182: mod_counter++;
 16830  02DE  3001               	movlw	1
 16831  02DF  0022               	movlb	2	; select bank2
 16832  02E0  07EB               	addwf	_mod_counter^(0+256),f
 16833  02E1  3000               	movlw	0
 16834  02E2  3DEC               	addwfc	(_mod_counter+1)^(0+256),f
 16835  02E3                     i1l6138:	
 16836                           
 16837                           ;interrupts.c: 184: }
 16838                           ;interrupts.c: 188: if (preset_programmning_on == 1) {
 16839  02E3  0023               	movlb	3	; select bank3
 16840  02E4  034A               	decf	_preset_programmning_on^(0+384),w
 16841  02E5  1D03               	btfss	3,2
 16842  02E6  2B12               	goto	i1l6150
 16843                           
 16844                           ;interrupts.c: 189: preset_blink++;
 16845  02E7  3001               	movlw	1
 16846  02E8  0020               	movlb	0	; select bank0
 16847  02E9  00BA               	movwf	??_isr
 16848  02EA  083A               	movf	??_isr,w
 16849  02EB  0023               	movlb	3	; select bank3
 16850  02EC  07C9               	addwf	_preset_blink^(0+384),f
 16851                           
 16852                           ;interrupts.c: 191: if (preset_blink >= blink_delay) {
 16853  02ED  084E               	movf	(_blink_delay+1)^(0+384),w
 16854  02EE  3A80               	xorlw	128
 16855  02EF  3C80               	sublw	128
 16856  02F0  1D03               	skipz
 16857  02F1  2AF4               	goto	u619_25
 16858  02F2  084D               	movf	_blink_delay^(0+384),w
 16859  02F3  0249               	subwf	_preset_blink^(0+384),w
 16860  02F4                     u619_25:	
 16861  02F4  1C03               	skipc
 16862  02F5  2B17               	goto	i1l6154
 16863                           
 16864                           ;interrupts.c: 192: LATBbits.LATB1 = 1;
 16865  02F6  0022               	movlb	2	; select bank2
 16866  02F7  148D               	bsf	13,1	;volatile
 16867                           
 16868                           ;interrupts.c: 193: if (preset_blink > blink_delay*2) {
 16869  02F8  0023               	movlb	3	; select bank3
 16870  02F9  084E               	movf	(_blink_delay+1)^(0+384),w
 16871  02FA  0020               	movlb	0	; select bank0
 16872  02FB  00BB               	movwf	??_isr+1
 16873  02FC  0023               	movlb	3	; select bank3
 16874  02FD  084D               	movf	_blink_delay^(0+384),w
 16875  02FE  0020               	movlb	0	; select bank0
 16876  02FF  00BA               	movwf	??_isr
 16877  0300  35BA               	lslf	??_isr,f
 16878  0301  0DBB               	rlf	??_isr+1,f
 16879  0302  083B               	movf	??_isr+1,w
 16880  0303  3A80               	xorlw	128
 16881  0304  00BC               	movwf	??_isr+2
 16882  0305  3080               	movlw	128
 16883  0306  023C               	subwf	??_isr+2,w
 16884  0307  1D03               	skipz
 16885  0308  2B0D               	goto	u620_25
 16886  0309  0023               	movlb	3	; select bank3
 16887  030A  0849               	movf	_preset_blink^(0+384),w
 16888  030B  0020               	movlb	0	; select bank0
 16889  030C  023A               	subwf	??_isr,w
 16890  030D                     u620_25:	
 16891  030D  1803               	skipnc
 16892  030E  2B19               	goto	i1l176
 16893                           
 16894                           ;interrupts.c: 194: preset_blink = 0;
 16895  030F  0023               	movlb	3	; select bank3
 16896  0310  01C9               	clrf	_preset_blink^(0+384)
 16897                           
 16898                           ;interrupts.c: 195: }
 16899                           ;interrupts.c: 197: } else {
 16900  0311  2B19               	goto	i1l176
 16901  0312                     i1l6150:	
 16902                           ;interrupts.c: 199: }
 16903                           ;interrupts.c: 201: } else {
 16904                           
 16905                           ;interrupts.c: 198: LATBbits.LATB1 = 0;
 16906                           
 16907                           
 16908                           ;interrupts.c: 202: if (preset_blink > 0) {
 16909  0312  0023               	movlb	3	; select bank3
 16910  0313  0849               	movf	_preset_blink^(0+384),w
 16911  0314  1903               	btfsc	3,2
 16912  0315  2B19               	goto	i1l176
 16913                           
 16914                           ;interrupts.c: 203: preset_blink = 0;
 16915  0316  01C9               	clrf	_preset_blink^(0+384)
 16916  0317                     i1l6154:	
 16917                           
 16918                           ;interrupts.c: 204: LATBbits.LATB1 = 0;
 16919  0317  0022               	movlb	2	; select bank2
 16920  0318  108D               	bcf	13,1	;volatile
 16921  0319                     i1l176:	
 16922  0319  0020               	movlb	0	; select bank0
 16923  031A  0842               	movf	??_isr+8,w
 16924  031B  00FF               	movwf	127
 16925  031C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 16926  031D  0009               	retfie
 16927  031E                     __end_of_isr:	
 16928                           
 16929                           	psect	text61
 16930  1CD3                     __ptext61:	
 16931 ;; *************** function i1_set_leds_top *****************
 16932 ;; Defined at:
 16933 ;;		line 16 in file "LEDs.c"
 16934 ;; Parameters:    Size  Location     Type
 16935 ;;  x               2    0[COMMON] int 
 16936 ;;  ledState        2    2[COMMON] int 
 16937 ;; Auto vars:     Size  Location     Type
 16938 ;;		None
 16939 ;; Return value:  Size  Location     Type
 16940 ;;                  1    wreg      void 
 16941 ;; Registers used:
 16942 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16943 ;; Tracked objects:
 16944 ;;		On entry : 0/0
 16945 ;;		On exit  : 0/0
 16946 ;;		Unchanged: 0/0
 16947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16951 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16952 ;;Total ram usage:        4 bytes
 16953 ;; Hardware stack levels used:    1
 16954 ;; This function calls:
 16955 ;;		Nothing
 16956 ;; This function is called by:
 16957 ;;		_isr
 16958 ;; This function uses a non-reentrant model
 16959 ;;
 16960                           
 16961                           
 16962                           ;psect for function i1_set_leds_top
 16963  1CD3                     i1_set_leds_top:	
 16964                           
 16965                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 16966                           
 16967                           ;incstack = 0
 16968                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 16969  1CD3  0027               	movlb	7	; select bank7
 16970  1CD4  100C               	bcf	12,0	;volatile
 16971                           
 16972                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 16973  1CD5  108C               	bcf	12,1	;volatile
 16974                           
 16975                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 16976  1CD6  110C               	bcf	12,2	;volatile
 16977                           
 16978                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 16979  1CD7  118C               	bcf	12,3	;volatile
 16980                           
 16981                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 16982  1CD8  120C               	bcf	12,4	;volatile
 16983                           
 16984                           ;LEDs.c: 22: switch (x) {
 16985  1CD9  2CFE               	goto	i1l6016
 16986  1CDA                     i1l6004:	
 16987                           ;LEDs.c: 23: case 1:
 16988                           
 16989                           
 16990                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 16991  1CDA  0C72               	rrf	i1set_leds_top@ledState,w
 16992  1CDB  1C03               	skipc
 16993  1CDC  100C               	bcf	12,0	;volatile
 16994  1CDD  1803               	skipnc
 16995  1CDE  140C               	bsf	12,0	;volatile
 16996                           
 16997                           ;LEDs.c: 25: break;
 16998  1CDF  0008               	return
 16999  1CE0                     i1l6006:	
 17000                           ;LEDs.c: 26: case 2:
 17001                           
 17002                           
 17003                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17004  1CE0  0C72               	rrf	i1set_leds_top@ledState,w
 17005  1CE1  1C03               	skipc
 17006  1CE2  108C               	bcf	12,1	;volatile
 17007  1CE3  1803               	skipnc
 17008  1CE4  148C               	bsf	12,1	;volatile
 17009                           
 17010                           ;LEDs.c: 28: break;
 17011  1CE5  0008               	return
 17012  1CE6                     i1l6008:	
 17013                           ;LEDs.c: 29: case 3:
 17014                           
 17015                           
 17016                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17017  1CE6  0C72               	rrf	i1set_leds_top@ledState,w
 17018  1CE7  1C03               	skipc
 17019  1CE8  110C               	bcf	12,2	;volatile
 17020  1CE9  1803               	skipnc
 17021  1CEA  150C               	bsf	12,2	;volatile
 17022                           
 17023                           ;LEDs.c: 31: break;
 17024  1CEB  0008               	return
 17025  1CEC                     i1l6010:	
 17026                           ;LEDs.c: 32: case 4:
 17027                           
 17028                           
 17029                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17030  1CEC  0C72               	rrf	i1set_leds_top@ledState,w
 17031  1CED  1C03               	skipc
 17032  1CEE  118C               	bcf	12,3	;volatile
 17033  1CEF  1803               	skipnc
 17034  1CF0  158C               	bsf	12,3	;volatile
 17035                           
 17036                           ;LEDs.c: 34: break;
 17037  1CF1  0008               	return
 17038  1CF2                     i1l6012:	
 17039                           ;LEDs.c: 35: case 5:
 17040                           
 17041                           
 17042                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17043  1CF2  0C72               	rrf	i1set_leds_top@ledState,w
 17044  1CF3  1C03               	skipc
 17045  1CF4  120C               	bcf	12,4	;volatile
 17046  1CF5  1803               	skipnc
 17047  1CF6  160C               	bsf	12,4	;volatile
 17048                           
 17049                           ;LEDs.c: 39: break;
 17050                           
 17051                           ;LEDs.c: 38: case 6:
 17052                           
 17053                           ;LEDs.c: 37: break;
 17054  1CF7  0008               	return
 17055  1CF8                     i1l776:	
 17056                           ;LEDs.c: 40: case 100:
 17057                           
 17058                           
 17059                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17060  1CF8  140C               	bsf	12,0	;volatile
 17061                           
 17062                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17063  1CF9  148C               	bsf	12,1	;volatile
 17064                           
 17065                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17066  1CFA  150C               	bsf	12,2	;volatile
 17067                           
 17068                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17069  1CFB  158C               	bsf	12,3	;volatile
 17070                           
 17071                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17072  1CFC  160C               	bsf	12,4	;volatile
 17073                           
 17074                           ;LEDs.c: 47: }
 17075                           
 17076                           ;LEDs.c: 46: break;
 17077  1CFD  0008               	return
 17078  1CFE                     i1l6016:	
 17079                           
 17080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17081                           ; Switch size 1, requested type "space"
 17082                           ; Number of cases is 1, Range of values is 0 to 0
 17083                           ; switch strategies available:
 17084                           ; Name         Instructions Cycles
 17085                           ; simple_byte            4     3 (average)
 17086                           ; direct_byte            8     6 (fixed)
 17087                           ; jumptable            260     6 (fixed)
 17088                           ;	Chosen strategy is simple_byte
 17089  1CFE  0871               	movf	i1set_leds_top@x+1,w
 17090  1CFF  3A00               	xorlw	0	; case 0
 17091  1D00  1903               	skipnz
 17092  1D01  2D03               	goto	i1l8654
 17093  1D02  2D1A               	goto	i1l777
 17094  1D03                     i1l8654:	
 17095                           
 17096                           ; Switch size 1, requested type "space"
 17097                           ; Number of cases is 7, Range of values is 1 to 100
 17098                           ; switch strategies available:
 17099                           ; Name         Instructions Cycles
 17100                           ; simple_byte           22    12 (average)
 17101                           ; direct_byte          209     9 (fixed)
 17102                           ; jumptable            263     9 (fixed)
 17103                           ;	Chosen strategy is simple_byte
 17104  1D03  0870               	movf	i1set_leds_top@x,w
 17105  1D04  3A01               	xorlw	1	; case 1
 17106  1D05  1903               	skipnz
 17107  1D06  2CDA               	goto	i1l6004
 17108  1D07  3A03               	xorlw	3	; case 2
 17109  1D08  1903               	skipnz
 17110  1D09  2CE0               	goto	i1l6006
 17111  1D0A  3A01               	xorlw	1	; case 3
 17112  1D0B  1903               	skipnz
 17113  1D0C  2CE6               	goto	i1l6008
 17114  1D0D  3A07               	xorlw	7	; case 4
 17115  1D0E  1903               	skipnz
 17116  1D0F  2CEC               	goto	i1l6010
 17117  1D10  3A01               	xorlw	1	; case 5
 17118  1D11  1903               	skipnz
 17119  1D12  2CF2               	goto	i1l6012
 17120  1D13  3A03               	xorlw	3	; case 6
 17121  1D14  1903               	skipnz
 17122  1D15  2D1A               	goto	i1l777
 17123  1D16  3A62               	xorlw	98	; case 100
 17124  1D17  1903               	skipnz
 17125  1D18  2CF8               	goto	i1l776
 17126  1D19  2D1A               	goto	i1l777
 17127  1D1A                     i1l777:	
 17128  1D1A  0008               	return
 17129  1D1B                     __end_ofi1_set_leds_top:	
 17130                           
 17131                           	psect	text62
 17132  1BC7                     __ptext62:	
 17133 ;; *************** function _modulation *****************
 17134 ;; Defined at:
 17135 ;;		line 199 in file "user.c"
 17136 ;; Parameters:    Size  Location     Type
 17137 ;;  x               4   14[BANK0 ] long 
 17138 ;;  y               4   18[BANK0 ] long 
 17139 ;; Auto vars:     Size  Location     Type
 17140 ;;		None
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  4   14[BANK0 ] long 
 17143 ;; Registers used:
 17144 ;;		wreg, status,2, status,0, pclath, cstack
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17150 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17152 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17153 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17154 ;;Total ram usage:       12 bytes
 17155 ;; Hardware stack levels used:    1
 17156 ;; Hardware stack levels required when called:    1
 17157 ;; This function calls:
 17158 ;;		i1___aldiv
 17159 ;;		i1___lmul
 17160 ;; This function is called by:
 17161 ;;		_isr
 17162 ;; This function uses a non-reentrant model
 17163 ;;
 17164                           
 17165                           
 17166                           ;psect for function _modulation
 17167  1BC7                     _modulation:	
 17168                           
 17169                           ;user.c: 202: return (127500 + (y * x)) / 1000;
 17170                           
 17171                           ;incstack = 0
 17172                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 17173  1BC7  3000               	movlw	0
 17174  1BC8  0020               	movlb	0	; select bank0
 17175  1BC9  00A3               	movwf	i1___aldiv@divisor+3
 17176  1BCA  3000               	movlw	0
 17177  1BCB  00A2               	movwf	i1___aldiv@divisor+2
 17178  1BCC  3003               	movlw	3
 17179  1BCD  00A1               	movwf	i1___aldiv@divisor+1
 17180  1BCE  30E8               	movlw	232
 17181  1BCF  00A0               	movwf	i1___aldiv@divisor
 17182  1BD0  300C               	movlw	12
 17183  1BD1  00B6               	movwf	??_modulation
 17184  1BD2  30F2               	movlw	242
 17185  1BD3  00B7               	movwf	??_modulation+1
 17186  1BD4  3001               	movlw	1
 17187  1BD5  00B8               	movwf	??_modulation+2
 17188  1BD6  3000               	movlw	0
 17189  1BD7  00B9               	movwf	??_modulation+3
 17190  1BD8  0835               	movf	modulation@y+3,w
 17191  1BD9  00F3               	movwf	i1___lmul@multiplier+3
 17192  1BDA  0834               	movf	modulation@y+2,w
 17193  1BDB  00F2               	movwf	i1___lmul@multiplier+2
 17194  1BDC  0833               	movf	modulation@y+1,w
 17195  1BDD  00F1               	movwf	i1___lmul@multiplier+1
 17196  1BDE  0832               	movf	modulation@y,w
 17197  1BDF  00F0               	movwf	i1___lmul@multiplier
 17198  1BE0  0831               	movf	modulation@x+3,w
 17199  1BE1  00F7               	movwf	i1___lmul@multiplicand+3
 17200  1BE2  0830               	movf	modulation@x+2,w
 17201  1BE3  00F6               	movwf	i1___lmul@multiplicand+2
 17202  1BE4  082F               	movf	modulation@x+1,w
 17203  1BE5  00F5               	movwf	i1___lmul@multiplicand+1
 17204  1BE6  082E               	movf	modulation@x,w
 17205  1BE7  00F4               	movwf	i1___lmul@multiplicand
 17206  1BE8  3198  206B  319B   	fcall	i1___lmul
 17207  1BEB  0870               	movf	?i1___lmul,w
 17208  1BEC  0020               	movlb	0	; select bank0
 17209  1BED  07B6               	addwf	??_modulation,f
 17210  1BEE  0871               	movf	?i1___lmul+1,w
 17211  1BEF  3DB7               	addwfc	??_modulation+1,f
 17212  1BF0  0872               	movf	?i1___lmul+2,w
 17213  1BF1  3DB8               	addwfc	??_modulation+2,f
 17214  1BF2  0873               	movf	?i1___lmul+3,w
 17215  1BF3  3DB9               	addwfc	??_modulation+3,f
 17216  1BF4  0839               	movf	??_modulation+3,w
 17217  1BF5  00A7               	movwf	i1___aldiv@dividend+3
 17218  1BF6  0838               	movf	??_modulation+2,w
 17219  1BF7  00A6               	movwf	i1___aldiv@dividend+2
 17220  1BF8  0837               	movf	??_modulation+1,w
 17221  1BF9  00A5               	movwf	i1___aldiv@dividend+1
 17222  1BFA  0836               	movf	??_modulation,w
 17223  1BFB  00A4               	movwf	i1___aldiv@dividend
 17224  1BFC  3190  20E7         	fcall	i1___aldiv
 17225  1BFE  0020               	movlb	0	; select bank0
 17226  1BFF  0823               	movf	?i1___aldiv+3,w
 17227  1C00  00B1               	movwf	?_modulation+3
 17228  1C01  0822               	movf	?i1___aldiv+2,w
 17229  1C02  00B0               	movwf	?_modulation+2
 17230  1C03  0821               	movf	?i1___aldiv+1,w
 17231  1C04  00AF               	movwf	?_modulation+1
 17232  1C05  0820               	movf	?i1___aldiv,w
 17233  1C06  00AE               	movwf	?_modulation
 17234  1C07  0008               	return
 17235  1C08                     __end_of_modulation:	
 17236                           
 17237                           	psect	text63
 17238  186B                     __ptext63:	
 17239 ;; *************** function i1___lmul *****************
 17240 ;; Defined at:
 17241 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 17242 ;; Parameters:    Size  Location     Type
 17243 ;;  multiplier      4    0[COMMON] unsigned long 
 17244 ;;  multiplicand    4    4[COMMON] unsigned long 
 17245 ;; Auto vars:     Size  Location     Type
 17246 ;;  __lmul          4    8[COMMON] unsigned long 
 17247 ;; Return value:  Size  Location     Type
 17248 ;;                  4    0[COMMON] unsigned long 
 17249 ;; Registers used:
 17250 ;;		wreg, status,2, status,0
 17251 ;; Tracked objects:
 17252 ;;		On entry : 0/0
 17253 ;;		On exit  : 0/0
 17254 ;;		Unchanged: 0/0
 17255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17256 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17257 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17259 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17260 ;;Total ram usage:       12 bytes
 17261 ;; Hardware stack levels used:    1
 17262 ;; This function calls:
 17263 ;;		Nothing
 17264 ;; This function is called by:
 17265 ;;		_modulation
 17266 ;; This function uses a non-reentrant model
 17267 ;;
 17268                           
 17269                           
 17270                           ;psect for function i1___lmul
 17271  186B                     i1___lmul:	
 17272                           
 17273                           ;incstack = 0
 17274                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 17275  186B  3000               	movlw	0
 17276  186C  00FB               	movwf	i1___lmul@product+3
 17277  186D  3000               	movlw	0
 17278  186E  00FA               	movwf	i1___lmul@product+2
 17279  186F  3000               	movlw	0
 17280  1870  00F9               	movwf	i1___lmul@product+1
 17281  1871  3000               	movlw	0
 17282  1872  00F8               	movwf	i1___lmul@product
 17283  1873                     i1l5416:	
 17284  1873  1C70               	btfss	i1___lmul@multiplier,0
 17285  1874  287D               	goto	i1l5420
 17286  1875  0874               	movf	i1___lmul@multiplicand,w
 17287  1876  07F8               	addwf	i1___lmul@product,f
 17288  1877  0875               	movf	i1___lmul@multiplicand+1,w
 17289  1878  3DF9               	addwfc	i1___lmul@product+1,f
 17290  1879  0876               	movf	i1___lmul@multiplicand+2,w
 17291  187A  3DFA               	addwfc	i1___lmul@product+2,f
 17292  187B  0877               	movf	i1___lmul@multiplicand+3,w
 17293  187C  3DFB               	addwfc	i1___lmul@product+3,f
 17294  187D                     i1l5420:	
 17295  187D  3001               	movlw	1
 17296  187E                     u479_25:	
 17297  187E  35F4               	lslf	i1___lmul@multiplicand,f
 17298  187F  0DF5               	rlf	i1___lmul@multiplicand+1,f
 17299  1880  0DF6               	rlf	i1___lmul@multiplicand+2,f
 17300  1881  0DF7               	rlf	i1___lmul@multiplicand+3,f
 17301  1882  0B89               	decfsz	9,f
 17302  1883  287E               	goto	u479_25
 17303  1884  3001               	movlw	1
 17304  1885                     u480_25:	
 17305  1885  36F3               	lsrf	i1___lmul@multiplier+3,f
 17306  1886  0CF2               	rrf	i1___lmul@multiplier+2,f
 17307  1887  0CF1               	rrf	i1___lmul@multiplier+1,f
 17308  1888  0CF0               	rrf	i1___lmul@multiplier,f
 17309  1889  0B89               	decfsz	9,f
 17310  188A  2885               	goto	u480_25
 17311  188B  0873               	movf	i1___lmul@multiplier+3,w
 17312  188C  0472               	iorwf	i1___lmul@multiplier+2,w
 17313  188D  0471               	iorwf	i1___lmul@multiplier+1,w
 17314  188E  0470               	iorwf	i1___lmul@multiplier,w
 17315  188F  1D03               	skipz
 17316  1890  2873               	goto	i1l5416
 17317  1891  087B               	movf	i1___lmul@product+3,w
 17318  1892  00F3               	movwf	?i1___lmul+3
 17319  1893  087A               	movf	i1___lmul@product+2,w
 17320  1894  00F2               	movwf	?i1___lmul+2
 17321  1895  0879               	movf	i1___lmul@product+1,w
 17322  1896  00F1               	movwf	?i1___lmul+1
 17323  1897  0878               	movf	i1___lmul@product,w
 17324  1898  00F0               	movwf	?i1___lmul
 17325  1899  0008               	return
 17326  189A                     __end_ofi1___lmul:	
 17327                           
 17328                           	psect	text64
 17329  10E7                     __ptext64:	
 17330 ;; *************** function i1___aldiv *****************
 17331 ;; Defined at:
 17332 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;  divisor         4    0[BANK0 ] long 
 17335 ;;  dividend        4    4[BANK0 ] long 
 17336 ;; Auto vars:     Size  Location     Type
 17337 ;;  __aldiv         4   10[BANK0 ] long 
 17338 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 17339 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 17340 ;; Return value:  Size  Location     Type
 17341 ;;                  4    0[BANK0 ] long 
 17342 ;; Registers used:
 17343 ;;		wreg, status,2, status,0
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17349 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17350 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17352 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17353 ;;Total ram usage:       15 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; This function calls:
 17356 ;;		Nothing
 17357 ;; This function is called by:
 17358 ;;		_modulation
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           
 17363                           ;psect for function i1___aldiv
 17364  10E7                     i1___aldiv:	
 17365                           
 17366                           ;incstack = 0
 17367                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 17368  10E7  0020               	movlb	0	; select bank0
 17369  10E8  01A9               	clrf	i1___aldiv@sign
 17370  10E9  1FA3               	btfss	i1___aldiv@divisor+3,7
 17371  10EA  28F8               	goto	i1l1795
 17372  10EB  09A0               	comf	i1___aldiv@divisor,f
 17373  10EC  09A1               	comf	i1___aldiv@divisor+1,f
 17374  10ED  09A2               	comf	i1___aldiv@divisor+2,f
 17375  10EE  09A3               	comf	i1___aldiv@divisor+3,f
 17376  10EF  0AA0               	incf	i1___aldiv@divisor,f
 17377  10F0  1903               	skipnz
 17378  10F1  0AA1               	incf	i1___aldiv@divisor+1,f
 17379  10F2  1903               	skipnz
 17380  10F3  0AA2               	incf	i1___aldiv@divisor+2,f
 17381  10F4  1903               	skipnz
 17382  10F5  0AA3               	incf	i1___aldiv@divisor+3,f
 17383  10F6  01A9               	clrf	i1___aldiv@sign
 17384  10F7  0AA9               	incf	i1___aldiv@sign,f
 17385  10F8                     i1l1795:	
 17386  10F8  1FA7               	btfss	i1___aldiv@dividend+3,7
 17387  10F9  2909               	goto	i1l5438
 17388  10FA  09A4               	comf	i1___aldiv@dividend,f
 17389  10FB  09A5               	comf	i1___aldiv@dividend+1,f
 17390  10FC  09A6               	comf	i1___aldiv@dividend+2,f
 17391  10FD  09A7               	comf	i1___aldiv@dividend+3,f
 17392  10FE  0AA4               	incf	i1___aldiv@dividend,f
 17393  10FF  1903               	skipnz
 17394  1100  0AA5               	incf	i1___aldiv@dividend+1,f
 17395  1101  1903               	skipnz
 17396  1102  0AA6               	incf	i1___aldiv@dividend+2,f
 17397  1103  1903               	skipnz
 17398  1104  0AA7               	incf	i1___aldiv@dividend+3,f
 17399  1105  3001               	movlw	1
 17400  1106  00FC               	movwf	??i1___aldiv
 17401  1107  087C               	movf	??i1___aldiv,w
 17402  1108  06A9               	xorwf	i1___aldiv@sign,f
 17403  1109                     i1l5438:	
 17404  1109  3000               	movlw	0
 17405  110A  00AD               	movwf	i1___aldiv@quotient+3
 17406  110B  3000               	movlw	0
 17407  110C  00AC               	movwf	i1___aldiv@quotient+2
 17408  110D  3000               	movlw	0
 17409  110E  00AB               	movwf	i1___aldiv@quotient+1
 17410  110F  3000               	movlw	0
 17411  1110  00AA               	movwf	i1___aldiv@quotient
 17412  1111  0823               	movf	i1___aldiv@divisor+3,w
 17413  1112  0422               	iorwf	i1___aldiv@divisor+2,w
 17414  1113  0421               	iorwf	i1___aldiv@divisor+1,w
 17415  1114  0420               	iorwf	i1___aldiv@divisor,w
 17416  1115  1903               	skipnz
 17417  1116  2952               	goto	i1l5460
 17418  1117  01A8               	clrf	i1___aldiv@counter
 17419  1118  0AA8               	incf	i1___aldiv@counter,f
 17420  1119                     i1l5446:	
 17421  1119  1BA3               	btfsc	i1___aldiv@divisor+3,7
 17422  111A  2927               	goto	i1l5448
 17423  111B  3001               	movlw	1
 17424  111C                     u485_25:	
 17425  111C  35A0               	lslf	i1___aldiv@divisor,f
 17426  111D  0DA1               	rlf	i1___aldiv@divisor+1,f
 17427  111E  0DA2               	rlf	i1___aldiv@divisor+2,f
 17428  111F  0DA3               	rlf	i1___aldiv@divisor+3,f
 17429  1120  0B89               	decfsz	9,f
 17430  1121  291C               	goto	u485_25
 17431  1122  3001               	movlw	1
 17432  1123  00FC               	movwf	??i1___aldiv
 17433  1124  087C               	movf	??i1___aldiv,w
 17434  1125  07A8               	addwf	i1___aldiv@counter,f
 17435  1126  2919               	goto	i1l5446
 17436  1127                     i1l5448:	
 17437  1127  3001               	movlw	1
 17438  1128                     u487_25:	
 17439  1128  35AA               	lslf	i1___aldiv@quotient,f
 17440  1129  0DAB               	rlf	i1___aldiv@quotient+1,f
 17441  112A  0DAC               	rlf	i1___aldiv@quotient+2,f
 17442  112B  0DAD               	rlf	i1___aldiv@quotient+3,f
 17443  112C  0B89               	decfsz	9,f
 17444  112D  2928               	goto	u487_25
 17445  112E  0823               	movf	i1___aldiv@divisor+3,w
 17446  112F  0227               	subwf	i1___aldiv@dividend+3,w
 17447  1130  1D03               	skipz
 17448  1131  293C               	goto	u488_25
 17449  1132  0822               	movf	i1___aldiv@divisor+2,w
 17450  1133  0226               	subwf	i1___aldiv@dividend+2,w
 17451  1134  1D03               	skipz
 17452  1135  293C               	goto	u488_25
 17453  1136  0821               	movf	i1___aldiv@divisor+1,w
 17454  1137  0225               	subwf	i1___aldiv@dividend+1,w
 17455  1138  1D03               	skipz
 17456  1139  293C               	goto	u488_25
 17457  113A  0820               	movf	i1___aldiv@divisor,w
 17458  113B  0224               	subwf	i1___aldiv@dividend,w
 17459  113C                     u488_25:	
 17460  113C  1C03               	skipc
 17461  113D  2947               	goto	i1l5456
 17462  113E  0820               	movf	i1___aldiv@divisor,w
 17463  113F  02A4               	subwf	i1___aldiv@dividend,f
 17464  1140  0821               	movf	i1___aldiv@divisor+1,w
 17465  1141  3BA5               	subwfb	i1___aldiv@dividend+1,f
 17466  1142  0822               	movf	i1___aldiv@divisor+2,w
 17467  1143  3BA6               	subwfb	i1___aldiv@dividend+2,f
 17468  1144  0823               	movf	i1___aldiv@divisor+3,w
 17469  1145  3BA7               	subwfb	i1___aldiv@dividend+3,f
 17470  1146  142A               	bsf	i1___aldiv@quotient,0
 17471  1147                     i1l5456:	
 17472  1147  3001               	movlw	1
 17473  1148                     u489_25:	
 17474  1148  36A3               	lsrf	i1___aldiv@divisor+3,f
 17475  1149  0CA2               	rrf	i1___aldiv@divisor+2,f
 17476  114A  0CA1               	rrf	i1___aldiv@divisor+1,f
 17477  114B  0CA0               	rrf	i1___aldiv@divisor,f
 17478  114C  0B89               	decfsz	9,f
 17479  114D  2948               	goto	u489_25
 17480  114E  3001               	movlw	1
 17481  114F  02A8               	subwf	i1___aldiv@counter,f
 17482  1150  1D03               	btfss	3,2
 17483  1151  2927               	goto	i1l5448
 17484  1152                     i1l5460:	
 17485  1152  0829               	movf	i1___aldiv@sign,w
 17486  1153  1903               	btfsc	3,2
 17487  1154  2960               	goto	i1l5464
 17488  1155  09AA               	comf	i1___aldiv@quotient,f
 17489  1156  09AB               	comf	i1___aldiv@quotient+1,f
 17490  1157  09AC               	comf	i1___aldiv@quotient+2,f
 17491  1158  09AD               	comf	i1___aldiv@quotient+3,f
 17492  1159  0AAA               	incf	i1___aldiv@quotient,f
 17493  115A  1903               	skipnz
 17494  115B  0AAB               	incf	i1___aldiv@quotient+1,f
 17495  115C  1903               	skipnz
 17496  115D  0AAC               	incf	i1___aldiv@quotient+2,f
 17497  115E  1903               	skipnz
 17498  115F  0AAD               	incf	i1___aldiv@quotient+3,f
 17499  1160                     i1l5464:	
 17500  1160  082D               	movf	i1___aldiv@quotient+3,w
 17501  1161  00A3               	movwf	?i1___aldiv+3
 17502  1162  082C               	movf	i1___aldiv@quotient+2,w
 17503  1163  00A2               	movwf	?i1___aldiv+2
 17504  1164  082B               	movf	i1___aldiv@quotient+1,w
 17505  1165  00A1               	movwf	?i1___aldiv+1
 17506  1166  082A               	movf	i1___aldiv@quotient,w
 17507  1167  00A0               	movwf	?i1___aldiv
 17508  1168  0008               	return
 17509  1169                     __end_ofi1___aldiv:	
 17510                           
 17511                           	psect	text65
 17512  1E50                     __ptext65:	
 17513 ;; *************** function ___awdiv *****************
 17514 ;; Defined at:
 17515 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 17516 ;; Parameters:    Size  Location     Type
 17517 ;;  divisor         2    0[COMMON] int 
 17518 ;;  dividend        2    2[COMMON] int 
 17519 ;; Auto vars:     Size  Location     Type
 17520 ;;  quotient        2    7[COMMON] int 
 17521 ;;  sign            1    6[COMMON] unsigned char 
 17522 ;;  counter         1    5[COMMON] unsigned char 
 17523 ;; Return value:  Size  Location     Type
 17524 ;;                  2    0[COMMON] int 
 17525 ;; Registers used:
 17526 ;;		wreg, status,2, status,0
 17527 ;; Tracked objects:
 17528 ;;		On entry : 0/0
 17529 ;;		On exit  : 0/0
 17530 ;;		Unchanged: 0/0
 17531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17533 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17534 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17535 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17536 ;;Total ram usage:        9 bytes
 17537 ;; Hardware stack levels used:    1
 17538 ;; This function calls:
 17539 ;;		Nothing
 17540 ;; This function is called by:
 17541 ;;		_isr
 17542 ;;		_USARTWriteInt
 17543 ;; This function uses a non-reentrant model
 17544 ;;
 17545                           
 17546                           
 17547                           ;psect for function ___awdiv
 17548  1E50                     ___awdiv:	
 17549                           
 17550                           ;incstack = 0
 17551                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17552  1E50  01F6               	clrf	___awdiv@sign
 17553  1E51  1FF1               	btfss	___awdiv@divisor+1,7
 17554  1E52  2E5A               	goto	i1l5966
 17555  1E53  09F0               	comf	___awdiv@divisor,f
 17556  1E54  09F1               	comf	___awdiv@divisor+1,f
 17557  1E55  0AF0               	incf	___awdiv@divisor,f
 17558  1E56  1903               	skipnz
 17559  1E57  0AF1               	incf	___awdiv@divisor+1,f
 17560  1E58  01F6               	clrf	___awdiv@sign
 17561  1E59  0AF6               	incf	___awdiv@sign,f
 17562  1E5A                     i1l5966:	
 17563  1E5A  1FF3               	btfss	___awdiv@dividend+1,7
 17564  1E5B  2E65               	goto	i1l5972
 17565  1E5C  09F2               	comf	___awdiv@dividend,f
 17566  1E5D  09F3               	comf	___awdiv@dividend+1,f
 17567  1E5E  0AF2               	incf	___awdiv@dividend,f
 17568  1E5F  1903               	skipnz
 17569  1E60  0AF3               	incf	___awdiv@dividend+1,f
 17570  1E61  3001               	movlw	1
 17571  1E62  00F4               	movwf	??___awdiv
 17572  1E63  0874               	movf	??___awdiv,w
 17573  1E64  06F6               	xorwf	___awdiv@sign,f
 17574  1E65                     i1l5972:	
 17575  1E65  01F7               	clrf	___awdiv@quotient
 17576  1E66  01F8               	clrf	___awdiv@quotient+1
 17577  1E67  0870               	movf	___awdiv@divisor,w
 17578  1E68  0471               	iorwf	___awdiv@divisor+1,w
 17579  1E69  1903               	btfsc	3,2
 17580  1E6A  2E94               	goto	i1l5994
 17581  1E6B  01F5               	clrf	___awdiv@counter
 17582  1E6C  0AF5               	incf	___awdiv@counter,f
 17583  1E6D                     i1l5982:	
 17584  1E6D  1BF1               	btfsc	___awdiv@divisor+1,7
 17585  1E6E  2E79               	goto	i1l5984
 17586  1E6F  3001               	movlw	1
 17587  1E70                     u585_25:	
 17588  1E70  35F0               	lslf	___awdiv@divisor,f
 17589  1E71  0DF1               	rlf	___awdiv@divisor+1,f
 17590  1E72  0B89               	decfsz	9,f
 17591  1E73  2E70               	goto	u585_25
 17592  1E74  3001               	movlw	1
 17593  1E75  00F4               	movwf	??___awdiv
 17594  1E76  0874               	movf	??___awdiv,w
 17595  1E77  07F5               	addwf	___awdiv@counter,f
 17596  1E78  2E6D               	goto	i1l5982
 17597  1E79                     i1l5984:	
 17598  1E79  3001               	movlw	1
 17599  1E7A                     u587_25:	
 17600  1E7A  35F7               	lslf	___awdiv@quotient,f
 17601  1E7B  0DF8               	rlf	___awdiv@quotient+1,f
 17602  1E7C  0B89               	decfsz	9,f
 17603  1E7D  2E7A               	goto	u587_25
 17604  1E7E  0871               	movf	___awdiv@divisor+1,w
 17605  1E7F  0273               	subwf	___awdiv@dividend+1,w
 17606  1E80  1D03               	skipz
 17607  1E81  2E84               	goto	u588_25
 17608  1E82  0870               	movf	___awdiv@divisor,w
 17609  1E83  0272               	subwf	___awdiv@dividend,w
 17610  1E84                     u588_25:	
 17611  1E84  1C03               	skipc
 17612  1E85  2E8B               	goto	i1l5990
 17613  1E86  0870               	movf	___awdiv@divisor,w
 17614  1E87  02F2               	subwf	___awdiv@dividend,f
 17615  1E88  0871               	movf	___awdiv@divisor+1,w
 17616  1E89  3BF3               	subwfb	___awdiv@dividend+1,f
 17617  1E8A  1477               	bsf	___awdiv@quotient,0
 17618  1E8B                     i1l5990:	
 17619  1E8B  3001               	movlw	1
 17620  1E8C                     u589_25:	
 17621  1E8C  36F1               	lsrf	___awdiv@divisor+1,f
 17622  1E8D  0CF0               	rrf	___awdiv@divisor,f
 17623  1E8E  0B89               	decfsz	9,f
 17624  1E8F  2E8C               	goto	u589_25
 17625  1E90  3001               	movlw	1
 17626  1E91  02F5               	subwf	___awdiv@counter,f
 17627  1E92  1D03               	btfss	3,2
 17628  1E93  2E79               	goto	i1l5984
 17629  1E94                     i1l5994:	
 17630  1E94  0876               	movf	___awdiv@sign,w
 17631  1E95  1903               	btfsc	3,2
 17632  1E96  2E9C               	goto	i1l5998
 17633  1E97  09F7               	comf	___awdiv@quotient,f
 17634  1E98  09F8               	comf	___awdiv@quotient+1,f
 17635  1E99  0AF7               	incf	___awdiv@quotient,f
 17636  1E9A  1903               	skipnz
 17637  1E9B  0AF8               	incf	___awdiv@quotient+1,f
 17638  1E9C                     i1l5998:	
 17639  1E9C  0878               	movf	___awdiv@quotient+1,w
 17640  1E9D  00F1               	movwf	?___awdiv+1
 17641  1E9E  0877               	movf	___awdiv@quotient,w
 17642  1E9F  00F0               	movwf	?___awdiv
 17643  1EA0  0008               	return
 17644  1EA1                     __end_of___awdiv:	
 17645  007E                     btemp	set	126	;btemp
 17646  007E                     int$flags	set	126
 17647  007E                     wtemp	set	126
 17648  007E                     wtemp0	set	126
 17649  0080                     wtemp1	set	128
 17650  0082                     wtemp2	set	130
 17651  0084                     wtemp3	set	132
 17652  0086                     wtemp4	set	134
 17653  0088                     wtemp5	set	136
 17654  007F                     wtemp6	set	127
 17655  007E                     ttemp	set	126
 17656  007E                     ttemp0	set	126
 17657  0081                     ttemp1	set	129
 17658  0084                     ttemp2	set	132
 17659  0087                     ttemp3	set	135
 17660  007F                     ttemp4	set	127
 17661  007E                     ltemp	set	126
 17662  007E                     ltemp0	set	126
 17663  0082                     ltemp1	set	130
 17664  0086                     ltemp2	set	134
 17665  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    57
    Data        811
    BSS         287
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     75      77
    BANK3            80      0      71
    BANK4            80     15      68
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      61
    BANK10           80      0      61
    BANK11           80      0      64
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK1[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    _set_subdivision->___fttol
    _trunc->___fttol
    _pow->_exp
    _log->_eval_poly
    _exp->___fttol
    _ldexp->_eval_poly
    _floor->___fttol
    ___fttol->_map
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftmul
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _set_subdivision->_trunc
    _scaleA100kPot->_pow
    _trunc->___altoft
    _pow->_exp
    _exp->_floor
    _floor->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  229979
                                             67 BANK2      8     8      0
                                              0 BANK4     15    15      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                    _set_subdivision
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   15630
                                             22 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       15    12      3  104524
                                             52 BANK2     15    12      3
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                8     5      3    5573
                                             14 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6   88835
                                             34 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   27934
                                             63 BANK1      5     2      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   48950
                                             79 BANK1      1     1      0
                                             22 BANK2     12     9      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    2815
                                             63 BANK1     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   12630
                                             14 BANK2      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     784
                                              0 BANK1      7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1372
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1584
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   11389
                                             53 BANK1     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5753
                                             53 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3564
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   17245
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     681
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4726
                                             24 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    3774
                                              8 BANK1     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    5503
                                             40 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftneg (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
       _frexp (ARG)
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
       _frexp (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4B      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      47      11       88.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      F      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     320      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.3%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3D      26       76.3%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     320      28        0.0%
BANK11              50      0      40      29       80.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jan 07 10:56:45 2017

                     _update_mode 192C                      ___altoft@exp 012C                       __CFG_CP$OFF 0000  
                   ___altoft@sign 012D                  scaleA100kPot@pwm 0157                      ___awdiv@sign 0076  
              _topTactile_pressed 01CC        setDoublePressState@f_state 00B8               ___wmul@multiplicand 00A2  
              USARTInit@baud_rate 00A0                   _updateSwitchTap 0C10                      ___ftadd@exp1 00D4  
                    ___ftadd@exp2 00D3                      ___ftadd@sign 00D2                               l621 0834  
                             l386 191D              __size_of_adc_convert 0013                               l586 26CC  
                             l579 1711                               l781 19A5                               l942 1CA1  
                             l783 19A8                               l784 19AB                               l776 1F22  
                             l785 19AE                               l777 1F46                               l786 19B1  
                             l946 1CC8                               l954 1DC5                               l788 19B4  
                             l980 27EB                               l789 19D8                               l981 27FF  
                             l958 1DF5                               l984 1F4E                               l977 27DD  
                             l969 195C                               l979 27E3                               l995 1F98  
                             _GIE 005F                               _RB1 0069                               _PR2 001B  
    solidring_tactiles@ring_delay 00B4                               _map 1273                               _exp 0A9A  
                             _log 1446                               _isr 0004                               _tap 02A0  
                             _pow 096E                      __CFG_BORV$LO 0000                               wreg 0009  
                    __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000               set_subdivision@tmpX 0140  
         __end_of_set_leds_bottom 19D9                      __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029  
                    ___ftdiv@cntr 00B2                      ___ftdiv@sign 00B7                              l1231 179D  
                            l2104 0992                              l1383 0CE0                              l1369 0C25  
                            l1740 2769                              l1901 1035                              l1655 1C7E  
                            l1908 1048                              l1932 0917                              l1909 1050  
                            l7000 0929                              l1795 117A                              l7004 093B  
                            l7014 0956                              l7022 19F0                              l7102 1319  
                            ?_map 00D5                              l1992 137B                              l7120 1352  
                            l8000 0D23                              l7050 15D4                              l7026 1A06  
                            l7130 137F                              l7122 1363                              l8010 0D79  
                            l7044 15BE                              l8100 167A                              l7204 1980  
                            l7062 160F                              l7134 138D                              l8102 167E  
                            l8014 0D9F                              l8022 0DDF                              l7232 13CA  
                            l8040 1C96                              l7216 27C5                              l7304 1FF9  
                            l7128 1371                              l8008 0D2F                              l7226 13B4  
                            l7074 162B                              l7066 1617                              l8050 1CBD  
                            l7146 1B5B                              l7314 11F8                              l7402 1465  
                            l8106 1685                              l8060 1DBA                              l7324 121A  
                            l8108 169E                              l8212 0609                              l8220 0657  
                            ?_exp 0136                              ?_log 00DF                              l7254 1424  
                            l7246 140B                              l7078 1633                              l8070 1DE1  
                            l8206 05C5                              l7280 152A                              l7344 1253  
                            l7440 0AF0                              l7424 0AA7                              l7408 1478  
                            l7184 1E34                              l7176 1E10                              l8232 071C  
                            l8224 0697                              l8160 041F                              l8144 0400  
                            l7266 2784                              l7434 0ACC                              l8154 0410  
                            l7284 1532                              l7348 125B                              l7508 1EBE  
                            l8252 07EF                              l8236 0761                              l8228 06DC  
                            l8180 04E9                              ?_isr 0070                              l7710 1C55  
                            l7390 1846                              l7294 159F                              l7446 0B2C  
                            l7542 0A0C                              l7534 09A6                              l8094 166A  
                            l8254 0799                              l8174 049A                              l6912 19BB  
                            l7712 1C57                              l7392 1856                              l6920 2763  
                            l7528 099A                              l8096 1670                              l7384 27F3  
                            l8256 07F5                              l8192 0578                              l8184 0529  
                            l7706 1C51                              l6842 18DD                              l7546 0A2C  
                            l8098 1674                              l7634 1B34                              l7642 1B3F  
                            l7626 1B23                              l7802 194F                              l7810 1960  
                            l7708 1C53                              l7716 1C5B                              l6860 101C  
                            l7468 0BF0                              l7900 17BC                              l6838 18D3  
                            l6870 1042                              l6862 1021                              l6854 100B  
                            l6942 1D7A                              l7670 119B                              l7662 118B  
                            l7830 1F7D                              l8640 1C6A                              l6944 1D8A  
                            l7680 11C9                              l7672 11A9                              l7808 1959  
                            l7840 1F94                              l7832 1F82                              l7824 1F71  
                            l8650 19C1                              l6890 1F12                              l7770 0847  
                            l8642 1C6F                              l6858 1012                              l6954 08A0  
                            l7906 17C8                              l7914 17DC                              l7850 172D  
                            l7842 1F9C                              l6892 1F1A                              l6884 1EFA  
                            l7772 0850                              l8644 1C74                              l6868 103A  
                            l6964 08B6                              l7684 11D4                              l6886 1F02  
                            l8646 1C79                              l7598 1D46                              l6982 08E3  
                            l6958 08A7                              l8638 168A                              l7862 174C  
                            l7854 1740                              l8648 1F2F                              l6888 1F0A  
                            l6896 1F29                              l6984 08ED                              l6976 08D0  
                            l7688 11E2                              l7960 0C76                              l7944 0C36  
                            l6994 0909                              l6986 08F2                              l7874 176E  
                            l7938 0C1B                              l6996 0913                              l6988 08F6  
                            l7876 1776                              l7980 0CA9                              ?_pow 0142  
                            l7894 17A1                              l7966 0C81                              l7958 0C59  
                            l7982 0CB1                              l7888 1790                              l7992 0CD8  
                            l7984 0CC0                              _PEIE 005E                              u7005 1057  
                            _RCIE 048D                              u7045 276A                              u7055 276F  
                            u7225 08E4                              u8025 09FD                              u8050 1D44  
                            u8045 1D26                              u7085 1D7F                              u8205 11CA  
                            u8125 2751                              u7255 08F7                              u7415 1618  
                            u9015 1DDA                              u7425 161E                              u7505 1321  
                            u9105 0507                              u8235 1827                              u7195 08D1  
                            u8075 2737                              u8315 193F                              u9115 0527  
                            u8245 182D                              u7285 090A                              u9045 170A  
                            u7605 1E0E                              u8085 1B14                              u8165 119E  
                            u9205 071A                              u7455 1634                              u7535 1353  
                            u7615 1E32                              u8280 084E                              u8265 082D  
                            u7705 140C                              u7465 163A                              u7385 15E0  
                            u8505 1756                              u8185 11AA                              u9233 07E8  
                            u9225 07D0                              u9145 05E3                              u8275 0840  
                            u7715 141B                              u7395 15F0                              u8195 11BE  
                            u9155 0603                              u6925 1017                              u7725 1425  
                            u7565 1372                              u9085 0478                              u7910 0B09  
                            u9175 0675                              u9095 0498                              u7920 0B0A  
                            u6945 1030                              u7825 1223                              u8465 1726  
                            u8385 1F60                              u9185 0695                              u6875 18DE  
                            u8475 1739                              u9195 06FA                              u6885 18E5  
                            u6965 103D                              u7685 13DC                              u7845 184B  
                            u8725 0C62                              u7695 13EC                              u7955 0BE7  
                            u8595 17AD                              u8835 0CF1                              u8755 0C8B  
                            u8845 0D08                              u8855 0D38                              u8865 0D4D  
                            u8955 1CB6                              u8875 0D61                              u8895 0D7E  
              scaleA100kPot@input 0154                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
                            _iCnt 01C6                              _main 03D3                      ___ftpack@arg 00A0  
                    ___ftpack@exp 00A3                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              map@x 00D5                              btemp 007E  
                            exp@x 0136                              log@x 00DF                     __CFG_BOREN$ON 0000  
                            ltemp 007E                              pow@x 0142                              pow@y 0145  
        __end_of_setFeedbackState 2746                              start 031E                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 267D                   _expressModeCnst 01E2  
    updateSwitchTap@tapCntDivisor 00C2      __end_of_setSwitchBypassState 1D65                   ?i1_set_leds_top 0070  
                   __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00C6                      ___ftmul@sign 00C7  
                 __end_of_InitApp 18CA                      ___fttol@exp1 0125                             ??_map 00E4  
                           ??_exp 00EF                             ??_log 00E2                      ___fttol@lval 0121  
                           ??_isr 003A                             ??_pow 0148                   _switchBypass_up 0262  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 11EB                             ?_main 0070  
                 __end_of___awdiv 1EA1                   __end_of___ftadd 096E                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                             _CCPR9 061A                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 1446                   __end_of___ftneg 268F                   __end_of___ftmul 165B  
                 ___awdiv@divisor 0070                   __end_of___ftsub 279A                   __end_of___fttol 139D  
                           i1l139 011F                             i1l176 0319                             i1l776 1CF8  
                           i1l777 1D1A                   ___awdiv@counter 0075                             _RCREG 0199  
                           _SPBRG 019B                             _TXREG 019A                             _UQEnd 0069  
             _ConfigureOscillator 2675                  _setPresetDisplay 1964                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 00A4                      ___lltoft@exp 00AD  
                 _switchTap_state 01E6                 ??_setLongTapState 00A2                     ___awtoft@sign 00AD  
                           _floor 14F6                             _ldexp 11EB                             _frexp 1B47  
                           _myBuf 05A0                             _errno 024F                     ___ftpack@sign 00A4  
                           _timer 0060                             main@i 0165                             _trunc 1EA1  
                __end_ofi1___lmul 189A                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                   __end_of_wait_ms 192C  
                           pow@yi 0150                __size_of_USARTInit 0043                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 1CD3  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 013D  
                     exp@exponent 013F              ?_ConfigureOscillator 0070                _updateSwitchBypass 1717  
                     ldexp@newexp 00E2           __end_of_updateSwitchTap 0DF8                   __initialization 0320  
                     log@exponent 00E2           _updateSwitchBypassState 0801                      __end_of_main 07F9  
         __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070            __size_of_scaleA100kPot 0080  
             ?_updateSwitchBypass 0070            ring_tactiles@iLed_1505 00B5                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 165B                            ??_main 0253                     ___fttol@sign1 0120  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 1BC7                    _feedback_timer 01AE  
                  _feedback_state 01E4                    _feedback_start 01C5                  ?_set_leds_bottom 00A0  
                          ?_floor 012E                            ?_ldexp 00DF                            ?_frexp 00A0  
                __end_of___altoft 1DB0                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0072               _baseline_delay_time 0045                  __end_of___awtoft 27DC  
                __end_of___ftpack 1067              ??_updateSwitchBypass 00BC                            ?_trunc 012E  
                __end_of___lltoft 186B                            i1l6010 1CEC                            i1l6012 1CF2  
                          i1l6004 1CDA                            i1l6100 01FC                            i1l6006 1CE0  
                          i1l6110 024C                            i1l6008 1CE6                            i1l6016 1CFE  
                          i1l6120 026C                            i1l6112 024F                            i1l6104 0209  
                          i1l6032 00A9                            i1l6122 0272                            i1l6114 0255  
                          i1l6130 0289                            i1l1795 10F8                            i1l5420 187D  
                          i1l6124 0278                            i1l6116 0259                            i1l6132 02A0  
                          i1l6150 0312                            i1l6126 0285                            i1l6070 017C  
                          i1l6046 010C                            i1l6038 00C3                            i1l5416 1873  
                          i1l6080 019D                            i1l6072 017E                            i1l6154 0317  
                          i1l6138 02E3                            i1l6082 01AC                            i1l5460 1152  
                          i1l6076 0192                            i1l6084 01AE                            i1l6068 016C  
                          i1l5446 1119                            i1l5438 1109                            i1l6094 01E0  
                          i1l5464 1160                            i1l5456 1147                            i1l5448 1127  
                          i1l6098 01ED                            i1l5972 1E65                            i1l5990 1E8B  
                          i1l5982 1E6D                            i1l5966 1E5A                            i1l5984 1E79  
                          i1l5994 1E94                            i1l8652 028F                            i1l5998 1E9C  
                          i1l8654 1D03                            _PMADRH 0192                            _PMADRL 0191  
                          _PMDATH 0194                            _PMDATL 0193                            u611_23 01D0  
                          u603_23 013B                            _PMCON2 0196                            u620_25 030D  
                          u615_23 0231                            u480_25 1885                            u616_25 0247  
                          u617_25 0265                            u619_25 02F4                            u485_25 111C  
                          u487_25 1128                            u479_25 187E                            u488_25 113C  
                          u585_25 1E70                            u489_25 1148                            u594_25 00A0  
                          u587_25 1E7A                            u588_25 1E84                            u596_25 00BA  
                          u589_25 1E8C                            u598_23 00DC                    _debounce_count 0249  
                  _debounce_mode1 01AA                    _debounce_mode2 024B                            _URBuff 0320  
                       ??_InitApp 00A0             ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 1E00  
                  __CFG_PWRTE$OFF 0000                            ___ftge 19D9                            ___lmul 18CA  
                       ??___aldiv 00A8                            ___wmul 2760                 _update_selectMode 1F47  
                       ??___awdiv 0074                         ??___ftadd 00CE                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 00AE                         ??___ftneg 00A3                         ??___ftmul 00BE  
                       ??___ftsub 00DB                         ??___fttol 00EB                  __end_of_init_adc 2699  
                          _modSaw 0520                            _modSin 03A0                            _modTri 0420  
                __end_of_init_pwm 1C49                ?_update_selectMode 0070                  ___awdiv@quotient 0077  
           __end_of_resetRingLEDs 272C                 __end_of_USARTInit 1C8C                      __pdataBANK10 0520  
               __end_ofi1___aldiv 1169                            floor@i 0131                            floor@x 012E  
           ___ftmul@f3_as_product 00C3                      __pdataBIGRAM 23E8           FLASH_ReadWord@flashAddr 00A0  
                __end_of_showSave 26FA               ??_update_selectMode 00A7              _getSwitchBypassState 2679  
                       ??_wait_ms 00AE              _setSwitchBypassState 1D1B                            trunc@i 0131  
                          trunc@x 012E                     _scaleA100kPot 1067      __end_of_setExpressionDisplay 2712  
          setLongTapState@f_state 00A0                  __end_ofexp@coeff 201E                  __end_oflog@coeff 2039  
         __end_of__initialization 03CF                        ___altoft@c 0126                        ___ftadd@f1 00C8  
                      ___ftadd@f2 00CB                        ___ftge@ff1 00A0                        ___ftge@ff2 00A3  
               _bypass_turning_on 01C3                      eval_poly@res 00DC                        ___ftdiv@f1 00AB  
                      ___ftdiv@f2 00A8                        ___ftdiv@f3 00B3                    _top_push_state 0051  
       ??_updateSwitchBypassState 00A2                        ___ftneg@f1 00A0               _switchBypass_toggle 0251  
                      ___awtoft@c 00A8             __end_of_ring_tactiles 1E50         __end_of_update_selectMode 1FA0  
         __end_of_set_subdivision 1717                        ___ftmul@f1 00B8                        ___ftmul@f2 00BB  
                      ___ftsub@f1 00D8                        ___ftsub@f2 00D5                 _feedbackTriggered 01C4  
                      ___fttol@f1 00E7                  ?_updateSwitchTap 0070                      ?_update_mode 0070  
                  __pcstackCOMMON 0070                      __pidataBANK0 26D3                      __pidataBANK3 1801  
                    __pidataBANK4 0002                      __pidataBANK7 1ACC                      __pidataBANK8 1A8F  
                    __pidataBANK9 1A52                        ___lltoft@c 00A8                     __end_of_floor 15A7  
                   __end_of_ldexp 1273                     __end_of_frexp 1B87                     __end_of_trunc 1EF3  
                _initSwitchBypass 26B1                         ?i1___lmul 0070                   _doubleTap_state 0064  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2  
                  ?_scaleA100kPot 0154                           ??_floor 00EF                           ??_ldexp 00E4  
                         ??_frexp 00A5              __size_of_init_timer0 0007              __size_of_init_timer2 0009  
               i1___aldiv@divisor 0020                 i1___aldiv@counter 0028                           ??_trunc 00EF  
                   ?_setPedalMode 0070                        __pbssBANK0 0058                        __pbssBANK2 016B  
                      __pbssBANK3 01A0                        __pbssBANK4 0220                        __pbssBANK5 02A0  
                      __pbssBANK6 0320                __size_of_eval_poly 0060                  ??i1_set_leds_top 0074  
                 __CFG_VCAPEN$OFF 0000                        __pnvCOMMON 007D                        _delayArray 23E8  
               ?_setFeedbackState 00A0          __end_of_setPresetDisplay 199E                        _delay_time 0049  
                _long_press_limit 004F      __size_of_setDoublePressState 003E                        _delayfound 024D  
                      __pmaintext 03D3                ??_setFeedbackState 00A2                    _InitializeTaps 181B  
                         ?___ftge 00A0                           ?___lmul 00A0                           ?___wmul 00A0  
                      __pintentry 0004                        _blink_rate 0053                     ??_adc_convert 00A2  
                       ?___altoft 0126                    ___lmul@product 00A8                   _setLongTapState 2746  
                       ?___awtoft 00A8                         ?___ftpack 00A0                         ?___lltoft 00A8  
                      ??i1___lmul 0078                    _FLASH_ReadWord 279A   __end_of_updateSwitchBypassState 0802  
                     modulation@x 002E                       modulation@y 0032                        _ldexp$2441 00E6  
                 _debounce_bypass 0247                    ??_setPedalMode 00A7                USARTWriteInt@F3536 0234  
                   _suspend_blink 0067                           _UQFront 007D                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 189A            __end_of_InitializeTaps 1841  
                   ?_set_leds_top 00A0                        _knob1_prev 01D1        __size_of_update_selectMode 0059  
                      _knob2_prev 01D3                        _knob3_prev 01D5                        _knob4_prev 01D7  
                      _knob5_prev 01D9                  ?_set_subdivision 0136                         ?_showSave 0070  
                         ___aldiv 1169                   __size_of___ftge 003C                           ___awdiv 1E50  
                 __size_of___lmul 0030                           ___ftadd 0878                           ___ftdiv 139D  
                         ___ftneg 2686                        _knob_1_pos 01B0                        _knob_2_pos 01B2  
                 __size_of___wmul 001C                           ___ftmul 15A7                        _knob_3_pos 01B4  
                         ___ftsub 277C                           ___fttol 12FE                        _knob_4_pos 01B6  
                      _knob_5_pos 01B8                 _switchTap_pressed 0068                        ??___altoft 012A  
            _setExpressionDisplay 26FA            __end_of_FLASH_ReadWord 27BA                        ??___awtoft 00AB  
                      ??___ftpack 00A5                 __end_of_eval_poly 2000                InitializeTaps@itap 00A1  
                      ??___lltoft 00AC                           __ptext1 1F47                           __ptext2 192C  
                         __ptext3 0C10                           __ptext4 2746                           __ptext5 1169  
                         __ptext6 1717                           __ptext7 272C                           __ptext8 1B09  
                         __ptext9 26E6            ??_getSwitchBypassState 00A2                         _T2CONbits 001C  
                _adjust_sub_delay 01A8                      __size_of_map 008B                      __size_of_exp 0176  
                    __size_of_log 00B0                      __size_of_isr 031A            ??_setSwitchBypassState 00B4  
                    __size_of_pow 012C               __end_of_adc_convert 26D3                   ??_scaleA100kPot 00F0  
                ___aldiv@dividend 00A4                           _wait_ms 18FA                           clrloop0 26A6  
                         main@xxx 0163              end_of_initialization 03CF                           exp@sign 0141  
                      _modulation 1BC7                           init_ram 2699                        ??_init_adc 00A0  
                         initloop 269A                        ??_init_pwm 00A0      updateSwitchBypassState@state 00A0  
              _solidring_tactiles 1B87                     _longTap_timer 01BA                     _longTap_state 0054  
                   _longTap_start 01C7                    ??_set_leds_top 00A4                 ?_read_top_tactile 0070  
                 ?_InitializeTaps 0070                           pow@sign 014F           __end_of_setLongTapState 2760  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2                         _RCSTAbits 019D  
                      ??_showSave 00B7                  ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047  
             ?_solidring_tactiles 0070                      __pstringtext 2000         FLASH_ReadWord@GIEBitValue 00A2  
           ?_setExpressionDisplay 0070              __size_of_update_mode 0038                   ?_FLASH_ReadWord 00A0  
               _expressionChannel 01E3                         _PORTAbits 000C                         _PORTCbits 000E  
                       _PORTDbits 000F                         _PORTEbits 0010                        _test_timer 0241  
                       _USARTInit 1C49                         _TRISBbits 008D                         _TRISCbits 008E  
                       _TRISDbits 008F                         _TRISEbits 0090                         _TRISFbits 030C  
                       _TRISGbits 030D                         i1___aldiv 10E7           setFeedbackState@f_state 00A0  
            ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 2679                        map@out_max 00E1  
                      map@out_min 00DE       __size_of_updateSwitchBypass 00E9          __end_of_initSwitchBypass 26C0  
                     _CCP1CONbits 0293                       ___ftdiv@exp 00B6          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A                         _TXSTAbits 019E              _switchBypass_pressed 01C0  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                       _CCP7CONbits 0616                       ___ftmul@exp 00C2  
              adc_convert@channel 00A3                       _CCP8CONbits 0619                       _CCP9CONbits 061C  
            set_leds_top@ledState 00A2                     __pidataBANK10 1A15                    __end_of___ftge 1A15  
            __end_of_setPedalMode 2800                    __end_of___lmul 18FA                     __pidataBIGRAM 0DF8  
                  __end_of___wmul 277C                      _double_timer 01A0                       _adc_convert 26C0  
                  _switchTap_down 01CB                        floor@expon 0134             i1___lmul@multiplicand 0074  
               __size_ofi1___lmul 002F               start_initialization 0320                        ?_USARTInit 00A0  
                      eval_poly@d 00D8                        eval_poly@n 00DA                        eval_poly@x 00D5  
           _bottomTactile_pressed 01C2               _setDoublePressState 1B09                        ldexp@value 00DF  
                      ?i1___aldiv 0020                       __end_of_map 12FE                       __end_of_exp 0C10  
                     __end_of_log 14F6                       __end_of_isr 031E                       __end_of_pow 0A9A  
              _adjusted_pot_value 0245                       ?_modulation 002E                        frexp@value 00A0  
          __size_of_resetRingLEDs 001A              ?_setDoublePressState 00B8                  ?_setLongTapState 00A0  
               ?_setPresetDisplay 0070                          ??___ftge 00A6                          ??___lmul 00A8  
          ??_setExpressionDisplay 00A4                          ??___wmul 00A4                ??_setPresetDisplay 00A4  
                     __pdataBANK0 0045                       __pdataBANK3 01CD                       __pdataBANK4 0262  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                       __pdataBANK9 04A0  
              i1___aldiv@dividend 0024                     _tap_iteration 01DD          __size_of_updateSwitchTap 01E8  
               __size_of___altoft 004B                       __pbssBANK11 05A0         __size_of_setFeedbackState 001A  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                 __size_of___lltoft 002A  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0              __end_of_set_leds_top 1F47  
                       ___latbits 0003    setExpressionDisplay@ledChannel 00A6                _switchBypass_state 0057  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK2 0120  
                   __pcstackBANK4 0253            __size_of_ring_tactiles 0050                    _expSwitchState 01E1  
                   _delay_counter 01AC                  i1___lmul@product 0078          ?_updateSwitchBypassState 00A0  
              i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043                          ?_InitApp 0070  
                       __pnvBANK0 0069             ??_setDoublePressState 00BA                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                          ?___aldiv 00A0                 ??_set_leds_bottom 00A2  
              _currentBypassState 01E0                          ?___awdiv 0070                          ?___ftadd 00C8  
                        ?___ftdiv 00A8                          ?___ftneg 00A0                          ?___ftmul 00B8  
                        ?___ftsub 00D5                          ?___fttol 00E7                 __size_of_showSave 0014  
              _scaleA100kPot$2640 015D                _scaleA100kPot$2641 0160                _scaleA100kPot$2639 015A  
                     _blink_delay 01CD               __size_of_modulation 0041                     _resetRingLEDs 2712  
                     _blink_state 01DF                         _eval_poly 1FA0                       ??_USARTInit 00A2  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                     ??i1___aldiv 007C                          ?_wait_ms 00AC                         _modRevSaw 04A0  
             _read_bottom_tactile 1C8C                    __size_of_floor 00B1                    __size_of_ldexp 0088  
                  __size_of_frexp 0040                    _presetModeCnst 01E5                    __size_of_trunc 0052  
             __end_of_init_timer0 0800               __end_of_init_timer2 2686                         _mod_value 01BC  
                       _mod_timer 01A4                  ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0  
                 ___aldiv@counter 00A9                    _presetSaveMode 0066                    ___wmul@product 00A4  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 01DB                         clear_ram0 26A5  
                       _tap_timer 005C                         _tap_total 023D             __size_of_setPedalMode 0024  
                   set_leds_top@x 00A0                          _PIR1bits 0011                     _ring_tactiles 1E00  
                ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048  
       initSwitchBypass@initState 00B6                         map@in_max 00DB                         map@in_min 00D8  
                  ?_resetRingLEDs 0070                         _sub_timer 0058                        _ADCON0bits 009D  
                        i1___lmul 186B                        _ADCON1bits 009E                         main@i_408 0167  
                       main@i_409 0169          __size_of_set_subdivision 00BC                 ___wmul@multiplier 00A0  
                set_subdivision@x 0136                  set_subdivision@y 0138         __size_of_read_top_tactile 0050  
                      ?_eval_poly 00D5     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A  
           __end_of_scaleA100kPot 10E7                 ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0  
                    _setPedalMode 27DC                 _ReadSavedSettings 0802                 ?_initSwitchBypass 0070  
               ring_tactiles@iLed 00B3                    wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070  
                  wait_ms@timemsl 00AE                         frexp@eptr 00A3       setSwitchBypassState@f_state 00B2  
              ??_initSwitchBypass 00B6                  __size_of_InitApp 0030                    ?_ring_tactiles 0070  
                     _mode1_state 01C8                     ??_update_mode 00A7                       _mode2_state 0065  
           ??_read_bottom_tactile 00B2               updateSwitchTap@iCnt 00C4               ??_ReadSavedSettings 00A4  
                      _APFCONbits 011D                  __size_of___aldiv 0082                  __size_of___awdiv 0051  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 00A0  
                __size_of___ftneg 0009                          ___altoft 1D65                  __size_of___ftmul 00B4  
                __size_of___ftsub 001E                  __size_of___fttol 009F                          ___awtoft 27BA  
           __size_of_set_leds_top 0054                          ___ftpack 1002                          _map$2637 00E4  
                        ___lltoft 1841            _preset_programmning_on 01CA                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 00A0                  _setFeedbackState 272C  
                        _exp$2409 013C                          _exp$2647 0139                       _init_timer0 07F9  
                     _init_timer2 267D                _delay_time_changed 01CF        __end_of_updateSwitchBypass 1800  
                        __ptext10 1B87                          __ptext11 1E00                          __ptext20 1446  
                        __ptext12 27DC                          __ptext21 0A9A                          __ptext13 1964  
                        __ptext30 277C                          __ptext22 11EB                          __ptext14 26FA  
                        __ptext31 27BA                          __ptext23 14F6                          __ptext15 2712  
                        __ptext40 1002                          __ptext32 1841                          __ptext24 1B47  
                        __ptext16 165B                          __ptext41 26B1                          __ptext33 1DB0  
                        __ptext25 12FE                          __ptext17 1067                          __ptext50 1EF3  
                        __ptext42 1D1B                          __ptext34 1C8C                          __ptext26 19D9  
                        __ptext18 1EA1                          __ptext51 199E                          __ptext43 18FA  
                        __ptext35 1273                          __ptext27 1D65                          __ptext19 096E  
                        __ptext52 279A                          __ptext44 18CA                          __ptext36 2686  
                        __ptext28 1FA0                          __ptext61 1CD3                          __ptext53 181B  
                        __ptext45 0801                          __ptext37 15A7                          __ptext29 2760  
                        __ptext62 1BC7                          __ptext54 189A                          __ptext46 2679  
                        __ptext38 139D                          __ptext63 186B                          __ptext55 1C08  
                        __ptext47 26C0                          __ptext39 0878                          __ptext64 10E7  
                        __ptext56 267D                          __ptext48 1C49                          __ptext65 1E50  
                        __ptext57 07F9                          __ptext49 0802                          __ptext58 268F  
                        __ptext59 2675         __end_of_ReadSavedSettings 0878                  __size_of_wait_ms 0032  
     __size_of_solidring_tactiles 0040                          _ledState 0239                          _pow$2645 0149  
                        _pow$2646 014C                     _presetChannel 0056                      ??_modulation 0036  
                     _mod_counter 016B                        trunc@expon 0134                          _init_adc 268F  
                   __size_of_main 0426                          _init_pwm 1C08      __size_of_ConfigureOscillator 0004  
                    _set_leds_top 1EF3                          _showSave 26E6                          _num_taps 0055  
                        int$flags 007E                   ??_resetRingLEDs 00A4                   i1set_leds_top@x 0070  
             __end_of_update_mode 1964                          exp@coeff 2000                          log@coeff 201E  
              __end_of_modulation 1C08                        _INTCONbits 000B                       ??_eval_poly 00DC  
       __size_of_setPresetDisplay 003A                       _tap_history 0220                 ??_set_subdivision 013A  
                        intlevel1 0000                   _set_leds_bottom 199E                        _PMCON1bits 0195  
                 ??_ring_tactiles 00B2                 __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 01BE  
                      _OSCCONbits 0099                      _preset_blink 01C9                    i1_set_leds_top 1CD3  
__size_of_updateSwitchBypassState 0001     __size_of_setExpressionDisplay 0018          __size_of_setLongTapState 001A  
                _read_top_tactile 1DB0                      ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076  
     __end_of_setDoublePressState 1B47                      _CCP10CONbits 061F                 _bottom_push_state 004D  
      setPresetDisplay@ledChannel 00A6            __end_ofi1_set_leds_top 1D1B  
