

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 13 14:49:54 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x920,80
   105                           	dabs	1,0x8A0,80
   106                           	dabs	1,0x820,80
   107                           	dabs	1,0x7A0,80
   108                           	dabs	1,0x742,46
   109                           	dabs	1,0x720,34
   110                           	dabs	1,0x6A0,80
   111                           	dabs	1,0x620,80
   112                           	dabs	1,0x5BE,50
   113                           	dabs	1,0x2482,0,_sinArray
   114                           	dabs	1,0x238E,0,_modArray
   115                           	dabs	1,0x7E,2
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  008F                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0116                     	;# 
   171  0117                     	;# 
   172  011D                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  018F                     	;# 
   176  0190                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0194                     	;# 
   183  0195                     	;# 
   184  0196                     	;# 
   185  0197                     	;# 
   186  0199                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  019A                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019D                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  020D                     	;# 
   210  020F                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0219                     	;# 
   228  021A                     	;# 
   229  021B                     	;# 
   230  021C                     	;# 
   231  021D                     	;# 
   232  021E                     	;# 
   233  021F                     	;# 
   234  028C                     	;# 
   235  028D                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029D                     	;# 
   245  029E                     	;# 
   246  029F                     	;# 
   247  030C                     	;# 
   248  030D                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  031C                     	;# 
   258  031C                     	;# 
   259  031D                     	;# 
   260  031E                     	;# 
   261  038C                     	;# 
   262  038D                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  040C                     	;# 
   267  040D                     	;# 
   268  0411                     	;# 
   269  0411                     	;# 
   270  0412                     	;# 
   271  0413                     	;# 
   272  0414                     	;# 
   273  0415                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  0418                     	;# 
   277  0418                     	;# 
   278  0419                     	;# 
   279  041A                     	;# 
   280  041B                     	;# 
   281  041C                     	;# 
   282  041D                     	;# 
   283  041E                     	;# 
   284  048D                     	;# 
   285  0491                     	;# 
   286  0491                     	;# 
   287  0492                     	;# 
   288  0492                     	;# 
   289  0493                     	;# 
   290  0493                     	;# 
   291  0493                     	;# 
   292  0494                     	;# 
   293  0494                     	;# 
   294  0495                     	;# 
   295  0495                     	;# 
   296  0496                     	;# 
   297  0496                     	;# 
   298  0497                     	;# 
   299  0497                     	;# 
   300  0595                     	;# 
   301  0596                     	;# 
   302  0597                     	;# 
   303  059C                     	;# 
   304  059D                     	;# 
   305  059E                     	;# 
   306  0611                     	;# 
   307  0611                     	;# 
   308  0612                     	;# 
   309  0613                     	;# 
   310  0614                     	;# 
   311  0614                     	;# 
   312  0615                     	;# 
   313  0616                     	;# 
   314  0617                     	;# 
   315  0617                     	;# 
   316  0618                     	;# 
   317  0619                     	;# 
   318  061A                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  061D                     	;# 
   323  061D                     	;# 
   324  061E                     	;# 
   325  061F                     	;# 
   326  0FE4                     	;# 
   327  0FE5                     	;# 
   328  0FE6                     	;# 
   329  0FE7                     	;# 
   330  0FE8                     	;# 
   331  0FE9                     	;# 
   332  0FEA                     	;# 
   333  0FEB                     	;# 
   334  0FED                     	;# 
   335  0FEE                     	;# 
   336  0FEF                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0008                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  008F                     	;# 
   371  0090                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0095                     	;# 
   377  0096                     	;# 
   378  0097                     	;# 
   379  0099                     	;# 
   380  009A                     	;# 
   381  009B                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  010C                     	;# 
   387  010D                     	;# 
   388  010E                     	;# 
   389  010F                     	;# 
   390  0110                     	;# 
   391  0116                     	;# 
   392  0117                     	;# 
   393  011D                     	;# 
   394  018C                     	;# 
   395  018D                     	;# 
   396  018F                     	;# 
   397  0190                     	;# 
   398  0191                     	;# 
   399  0191                     	;# 
   400  0192                     	;# 
   401  0193                     	;# 
   402  0193                     	;# 
   403  0194                     	;# 
   404  0195                     	;# 
   405  0196                     	;# 
   406  0197                     	;# 
   407  0199                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  019A                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019B                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019C                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019D                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019E                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019F                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  020F                     	;# 
   432  0210                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0219                     	;# 
   449  021A                     	;# 
   450  021B                     	;# 
   451  021C                     	;# 
   452  021D                     	;# 
   453  021E                     	;# 
   454  021F                     	;# 
   455  028C                     	;# 
   456  028D                     	;# 
   457  0291                     	;# 
   458  0291                     	;# 
   459  0292                     	;# 
   460  0293                     	;# 
   461  0298                     	;# 
   462  0298                     	;# 
   463  0299                     	;# 
   464  029A                     	;# 
   465  029D                     	;# 
   466  029E                     	;# 
   467  029F                     	;# 
   468  030C                     	;# 
   469  030D                     	;# 
   470  0311                     	;# 
   471  0311                     	;# 
   472  0312                     	;# 
   473  0313                     	;# 
   474  0318                     	;# 
   475  0318                     	;# 
   476  0319                     	;# 
   477  031A                     	;# 
   478  031C                     	;# 
   479  031C                     	;# 
   480  031D                     	;# 
   481  031E                     	;# 
   482  038C                     	;# 
   483  038D                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  040C                     	;# 
   488  040D                     	;# 
   489  0411                     	;# 
   490  0411                     	;# 
   491  0412                     	;# 
   492  0413                     	;# 
   493  0414                     	;# 
   494  0415                     	;# 
   495  0416                     	;# 
   496  0417                     	;# 
   497  0418                     	;# 
   498  0418                     	;# 
   499  0419                     	;# 
   500  041A                     	;# 
   501  041B                     	;# 
   502  041C                     	;# 
   503  041D                     	;# 
   504  041E                     	;# 
   505  048D                     	;# 
   506  0491                     	;# 
   507  0491                     	;# 
   508  0492                     	;# 
   509  0492                     	;# 
   510  0493                     	;# 
   511  0493                     	;# 
   512  0493                     	;# 
   513  0494                     	;# 
   514  0494                     	;# 
   515  0495                     	;# 
   516  0495                     	;# 
   517  0496                     	;# 
   518  0496                     	;# 
   519  0497                     	;# 
   520  0497                     	;# 
   521  0595                     	;# 
   522  0596                     	;# 
   523  0597                     	;# 
   524  059C                     	;# 
   525  059D                     	;# 
   526  059E                     	;# 
   527  0611                     	;# 
   528  0611                     	;# 
   529  0612                     	;# 
   530  0613                     	;# 
   531  0614                     	;# 
   532  0614                     	;# 
   533  0615                     	;# 
   534  0616                     	;# 
   535  0617                     	;# 
   536  0617                     	;# 
   537  0618                     	;# 
   538  0619                     	;# 
   539  061A                     	;# 
   540  061A                     	;# 
   541  061B                     	;# 
   542  061C                     	;# 
   543  061D                     	;# 
   544  061D                     	;# 
   545  061E                     	;# 
   546  061F                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  000F                     	;# 
   574  0010                     	;# 
   575  0011                     	;# 
   576  0012                     	;# 
   577  0013                     	;# 
   578  0014                     	;# 
   579  0015                     	;# 
   580  0016                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001C                     	;# 
   588  008C                     	;# 
   589  008D                     	;# 
   590  008E                     	;# 
   591  008F                     	;# 
   592  0090                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0093                     	;# 
   596  0094                     	;# 
   597  0095                     	;# 
   598  0096                     	;# 
   599  0097                     	;# 
   600  0099                     	;# 
   601  009A                     	;# 
   602  009B                     	;# 
   603  009B                     	;# 
   604  009C                     	;# 
   605  009D                     	;# 
   606  009E                     	;# 
   607  010C                     	;# 
   608  010D                     	;# 
   609  010E                     	;# 
   610  010F                     	;# 
   611  0110                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  011D                     	;# 
   615  018C                     	;# 
   616  018D                     	;# 
   617  018F                     	;# 
   618  0190                     	;# 
   619  0191                     	;# 
   620  0191                     	;# 
   621  0192                     	;# 
   622  0193                     	;# 
   623  0193                     	;# 
   624  0194                     	;# 
   625  0195                     	;# 
   626  0196                     	;# 
   627  0197                     	;# 
   628  0199                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019E                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  020D                     	;# 
   652  020F                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0219                     	;# 
   670  021A                     	;# 
   671  021B                     	;# 
   672  021C                     	;# 
   673  021D                     	;# 
   674  021E                     	;# 
   675  021F                     	;# 
   676  028C                     	;# 
   677  028D                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029D                     	;# 
   687  029E                     	;# 
   688  029F                     	;# 
   689  030C                     	;# 
   690  030D                     	;# 
   691  0311                     	;# 
   692  0311                     	;# 
   693  0312                     	;# 
   694  0313                     	;# 
   695  0318                     	;# 
   696  0318                     	;# 
   697  0319                     	;# 
   698  031A                     	;# 
   699  031C                     	;# 
   700  031C                     	;# 
   701  031D                     	;# 
   702  031E                     	;# 
   703  038C                     	;# 
   704  038D                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  040C                     	;# 
   709  040D                     	;# 
   710  0411                     	;# 
   711  0411                     	;# 
   712  0412                     	;# 
   713  0413                     	;# 
   714  0414                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  0418                     	;# 
   719  0418                     	;# 
   720  0419                     	;# 
   721  041A                     	;# 
   722  041B                     	;# 
   723  041C                     	;# 
   724  041D                     	;# 
   725  041E                     	;# 
   726  048D                     	;# 
   727  0491                     	;# 
   728  0491                     	;# 
   729  0492                     	;# 
   730  0492                     	;# 
   731  0493                     	;# 
   732  0493                     	;# 
   733  0493                     	;# 
   734  0494                     	;# 
   735  0494                     	;# 
   736  0495                     	;# 
   737  0495                     	;# 
   738  0496                     	;# 
   739  0496                     	;# 
   740  0497                     	;# 
   741  0497                     	;# 
   742  0595                     	;# 
   743  0596                     	;# 
   744  0597                     	;# 
   745  059C                     	;# 
   746  059D                     	;# 
   747  059E                     	;# 
   748  0611                     	;# 
   749  0611                     	;# 
   750  0612                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0614                     	;# 
   754  0615                     	;# 
   755  0616                     	;# 
   756  0617                     	;# 
   757  0617                     	;# 
   758  0618                     	;# 
   759  0619                     	;# 
   760  061A                     	;# 
   761  061A                     	;# 
   762  061B                     	;# 
   763  061C                     	;# 
   764  061D                     	;# 
   765  061D                     	;# 
   766  061E                     	;# 
   767  061F                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000D                     	;# 
   793  000E                     	;# 
   794  000F                     	;# 
   795  0010                     	;# 
   796  0011                     	;# 
   797  0012                     	;# 
   798  0013                     	;# 
   799  0014                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0097                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  010F                     	;# 
   832  0110                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  011D                     	;# 
   836  018C                     	;# 
   837  018D                     	;# 
   838  018F                     	;# 
   839  0190                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  020D                     	;# 
   873  020F                     	;# 
   874  0210                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  028C                     	;# 
   898  028D                     	;# 
   899  0291                     	;# 
   900  0291                     	;# 
   901  0292                     	;# 
   902  0293                     	;# 
   903  0298                     	;# 
   904  0298                     	;# 
   905  0299                     	;# 
   906  029A                     	;# 
   907  029D                     	;# 
   908  029E                     	;# 
   909  029F                     	;# 
   910  030C                     	;# 
   911  030D                     	;# 
   912  0311                     	;# 
   913  0311                     	;# 
   914  0312                     	;# 
   915  0313                     	;# 
   916  0318                     	;# 
   917  0318                     	;# 
   918  0319                     	;# 
   919  031A                     	;# 
   920  031C                     	;# 
   921  031C                     	;# 
   922  031D                     	;# 
   923  031E                     	;# 
   924  038C                     	;# 
   925  038D                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  040C                     	;# 
   930  040D                     	;# 
   931  0411                     	;# 
   932  0411                     	;# 
   933  0412                     	;# 
   934  0413                     	;# 
   935  0414                     	;# 
   936  0415                     	;# 
   937  0416                     	;# 
   938  0417                     	;# 
   939  0418                     	;# 
   940  0418                     	;# 
   941  0419                     	;# 
   942  041A                     	;# 
   943  041B                     	;# 
   944  041C                     	;# 
   945  041D                     	;# 
   946  041E                     	;# 
   947  048D                     	;# 
   948  0491                     	;# 
   949  0491                     	;# 
   950  0492                     	;# 
   951  0492                     	;# 
   952  0493                     	;# 
   953  0493                     	;# 
   954  0493                     	;# 
   955  0494                     	;# 
   956  0494                     	;# 
   957  0495                     	;# 
   958  0495                     	;# 
   959  0496                     	;# 
   960  0496                     	;# 
   961  0497                     	;# 
   962  0497                     	;# 
   963  0595                     	;# 
   964  0596                     	;# 
   965  0597                     	;# 
   966  059C                     	;# 
   967  059D                     	;# 
   968  059E                     	;# 
   969  0611                     	;# 
   970  0611                     	;# 
   971  0612                     	;# 
   972  0613                     	;# 
   973  0614                     	;# 
   974  0614                     	;# 
   975  0615                     	;# 
   976  0616                     	;# 
   977  0617                     	;# 
   978  0617                     	;# 
   979  0618                     	;# 
   980  0619                     	;# 
   981  061A                     	;# 
   982  061A                     	;# 
   983  061B                     	;# 
   984  061C                     	;# 
   985  061D                     	;# 
   986  061D                     	;# 
   987  061E                     	;# 
   988  061F                     	;# 
   989  0FE4                     	;# 
   990  0FE5                     	;# 
   991  0FE6                     	;# 
   992  0FE7                     	;# 
   993  0FE8                     	;# 
   994  0FE9                     	;# 
   995  0FEA                     	;# 
   996  0FEB                     	;# 
   997  0FED                     	;# 
   998  0FEE                     	;# 
   999  0FEF                     	;# 
  1000  0000                     	;# 
  1001  0001                     	;# 
  1002  0002                     	;# 
  1003  0003                     	;# 
  1004  0004                     	;# 
  1005  0005                     	;# 
  1006  0006                     	;# 
  1007  0007                     	;# 
  1008  0008                     	;# 
  1009  0009                     	;# 
  1010  000A                     	;# 
  1011  000B                     	;# 
  1012  000C                     	;# 
  1013  000D                     	;# 
  1014  000E                     	;# 
  1015  000F                     	;# 
  1016  0010                     	;# 
  1017  0011                     	;# 
  1018  0012                     	;# 
  1019  0013                     	;# 
  1020  0014                     	;# 
  1021  0015                     	;# 
  1022  0016                     	;# 
  1023  0016                     	;# 
  1024  0017                     	;# 
  1025  0018                     	;# 
  1026  0019                     	;# 
  1027  001A                     	;# 
  1028  001B                     	;# 
  1029  001C                     	;# 
  1030  008C                     	;# 
  1031  008D                     	;# 
  1032  008E                     	;# 
  1033  008F                     	;# 
  1034  0090                     	;# 
  1035  0091                     	;# 
  1036  0092                     	;# 
  1037  0093                     	;# 
  1038  0094                     	;# 
  1039  0095                     	;# 
  1040  0096                     	;# 
  1041  0097                     	;# 
  1042  0099                     	;# 
  1043  009A                     	;# 
  1044  009B                     	;# 
  1045  009B                     	;# 
  1046  009C                     	;# 
  1047  009D                     	;# 
  1048  009E                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010E                     	;# 
  1052  010F                     	;# 
  1053  0110                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  011D                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018F                     	;# 
  1060  0190                     	;# 
  1061  0191                     	;# 
  1062  0191                     	;# 
  1063  0192                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0194                     	;# 
  1067  0195                     	;# 
  1068  0196                     	;# 
  1069  0197                     	;# 
  1070  0199                     	;# 
  1071  0199                     	;# 
  1072  0199                     	;# 
  1073  019A                     	;# 
  1074  019A                     	;# 
  1075  019A                     	;# 
  1076  019B                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019C                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019D                     	;# 
  1085  019D                     	;# 
  1086  019D                     	;# 
  1087  019E                     	;# 
  1088  019E                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  020D                     	;# 
  1094  020F                     	;# 
  1095  0210                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0219                     	;# 
  1112  021A                     	;# 
  1113  021B                     	;# 
  1114  021C                     	;# 
  1115  021D                     	;# 
  1116  021E                     	;# 
  1117  021F                     	;# 
  1118  028C                     	;# 
  1119  028D                     	;# 
  1120  0291                     	;# 
  1121  0291                     	;# 
  1122  0292                     	;# 
  1123  0293                     	;# 
  1124  0298                     	;# 
  1125  0298                     	;# 
  1126  0299                     	;# 
  1127  029A                     	;# 
  1128  029D                     	;# 
  1129  029E                     	;# 
  1130  029F                     	;# 
  1131  030C                     	;# 
  1132  030D                     	;# 
  1133  0311                     	;# 
  1134  0311                     	;# 
  1135  0312                     	;# 
  1136  0313                     	;# 
  1137  0318                     	;# 
  1138  0318                     	;# 
  1139  0319                     	;# 
  1140  031A                     	;# 
  1141  031C                     	;# 
  1142  031C                     	;# 
  1143  031D                     	;# 
  1144  031E                     	;# 
  1145  038C                     	;# 
  1146  038D                     	;# 
  1147  0394                     	;# 
  1148  0395                     	;# 
  1149  0396                     	;# 
  1150  040C                     	;# 
  1151  040D                     	;# 
  1152  0411                     	;# 
  1153  0411                     	;# 
  1154  0412                     	;# 
  1155  0413                     	;# 
  1156  0414                     	;# 
  1157  0415                     	;# 
  1158  0416                     	;# 
  1159  0417                     	;# 
  1160  0418                     	;# 
  1161  0418                     	;# 
  1162  0419                     	;# 
  1163  041A                     	;# 
  1164  041B                     	;# 
  1165  041C                     	;# 
  1166  041D                     	;# 
  1167  041E                     	;# 
  1168  048D                     	;# 
  1169  0491                     	;# 
  1170  0491                     	;# 
  1171  0492                     	;# 
  1172  0492                     	;# 
  1173  0493                     	;# 
  1174  0493                     	;# 
  1175  0493                     	;# 
  1176  0494                     	;# 
  1177  0494                     	;# 
  1178  0495                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  0496                     	;# 
  1182  0497                     	;# 
  1183  0497                     	;# 
  1184  0595                     	;# 
  1185  0596                     	;# 
  1186  0597                     	;# 
  1187  059C                     	;# 
  1188  059D                     	;# 
  1189  059E                     	;# 
  1190  0611                     	;# 
  1191  0611                     	;# 
  1192  0612                     	;# 
  1193  0613                     	;# 
  1194  0614                     	;# 
  1195  0614                     	;# 
  1196  0615                     	;# 
  1197  0616                     	;# 
  1198  0617                     	;# 
  1199  0617                     	;# 
  1200  0618                     	;# 
  1201  0619                     	;# 
  1202  061A                     	;# 
  1203  061A                     	;# 
  1204  061B                     	;# 
  1205  061C                     	;# 
  1206  061D                     	;# 
  1207  061D                     	;# 
  1208  061E                     	;# 
  1209  061F                     	;# 
  1210  0FE4                     	;# 
  1211  0FE5                     	;# 
  1212  0FE6                     	;# 
  1213  0FE7                     	;# 
  1214  0FE8                     	;# 
  1215  0FE9                     	;# 
  1216  0FEA                     	;# 
  1217  0FEB                     	;# 
  1218  0FED                     	;# 
  1219  0FEE                     	;# 
  1220  0FEF                     	;# 
  1221  0000                     	;# 
  1222  0001                     	;# 
  1223  0002                     	;# 
  1224  0003                     	;# 
  1225  0004                     	;# 
  1226  0005                     	;# 
  1227  0006                     	;# 
  1228  0007                     	;# 
  1229  0008                     	;# 
  1230  0009                     	;# 
  1231  000A                     	;# 
  1232  000B                     	;# 
  1233  000C                     	;# 
  1234  000D                     	;# 
  1235  000E                     	;# 
  1236  000F                     	;# 
  1237  0010                     	;# 
  1238  0011                     	;# 
  1239  0012                     	;# 
  1240  0013                     	;# 
  1241  0014                     	;# 
  1242  0015                     	;# 
  1243  0016                     	;# 
  1244  0016                     	;# 
  1245  0017                     	;# 
  1246  0018                     	;# 
  1247  0019                     	;# 
  1248  001A                     	;# 
  1249  001B                     	;# 
  1250  001C                     	;# 
  1251  008C                     	;# 
  1252  008D                     	;# 
  1253  008E                     	;# 
  1254  008F                     	;# 
  1255  0090                     	;# 
  1256  0091                     	;# 
  1257  0092                     	;# 
  1258  0093                     	;# 
  1259  0094                     	;# 
  1260  0095                     	;# 
  1261  0096                     	;# 
  1262  0097                     	;# 
  1263  0099                     	;# 
  1264  009A                     	;# 
  1265  009B                     	;# 
  1266  009B                     	;# 
  1267  009C                     	;# 
  1268  009D                     	;# 
  1269  009E                     	;# 
  1270  010C                     	;# 
  1271  010D                     	;# 
  1272  010E                     	;# 
  1273  010F                     	;# 
  1274  0110                     	;# 
  1275  0116                     	;# 
  1276  0117                     	;# 
  1277  011D                     	;# 
  1278  018C                     	;# 
  1279  018D                     	;# 
  1280  018F                     	;# 
  1281  0190                     	;# 
  1282  0191                     	;# 
  1283  0191                     	;# 
  1284  0192                     	;# 
  1285  0193                     	;# 
  1286  0193                     	;# 
  1287  0194                     	;# 
  1288  0195                     	;# 
  1289  0196                     	;# 
  1290  0197                     	;# 
  1291  0199                     	;# 
  1292  0199                     	;# 
  1293  0199                     	;# 
  1294  019A                     	;# 
  1295  019A                     	;# 
  1296  019A                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019C                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019D                     	;# 
  1306  019D                     	;# 
  1307  019D                     	;# 
  1308  019E                     	;# 
  1309  019E                     	;# 
  1310  019E                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  020D                     	;# 
  1315  020F                     	;# 
  1316  0210                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0219                     	;# 
  1333  021A                     	;# 
  1334  021B                     	;# 
  1335  021C                     	;# 
  1336  021D                     	;# 
  1337  021E                     	;# 
  1338  021F                     	;# 
  1339  028C                     	;# 
  1340  028D                     	;# 
  1341  0291                     	;# 
  1342  0291                     	;# 
  1343  0292                     	;# 
  1344  0293                     	;# 
  1345  0298                     	;# 
  1346  0298                     	;# 
  1347  0299                     	;# 
  1348  029A                     	;# 
  1349  029D                     	;# 
  1350  029E                     	;# 
  1351  029F                     	;# 
  1352  030C                     	;# 
  1353  030D                     	;# 
  1354  0311                     	;# 
  1355  0311                     	;# 
  1356  0312                     	;# 
  1357  0313                     	;# 
  1358  0318                     	;# 
  1359  0318                     	;# 
  1360  0319                     	;# 
  1361  031A                     	;# 
  1362  031C                     	;# 
  1363  031C                     	;# 
  1364  031D                     	;# 
  1365  031E                     	;# 
  1366  038C                     	;# 
  1367  038D                     	;# 
  1368  0394                     	;# 
  1369  0395                     	;# 
  1370  0396                     	;# 
  1371  040C                     	;# 
  1372  040D                     	;# 
  1373  0411                     	;# 
  1374  0411                     	;# 
  1375  0412                     	;# 
  1376  0413                     	;# 
  1377  0414                     	;# 
  1378  0415                     	;# 
  1379  0416                     	;# 
  1380  0417                     	;# 
  1381  0418                     	;# 
  1382  0418                     	;# 
  1383  0419                     	;# 
  1384  041A                     	;# 
  1385  041B                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  048D                     	;# 
  1390  0491                     	;# 
  1391  0491                     	;# 
  1392  0492                     	;# 
  1393  0492                     	;# 
  1394  0493                     	;# 
  1395  0493                     	;# 
  1396  0493                     	;# 
  1397  0494                     	;# 
  1398  0494                     	;# 
  1399  0495                     	;# 
  1400  0495                     	;# 
  1401  0496                     	;# 
  1402  0496                     	;# 
  1403  0497                     	;# 
  1404  0497                     	;# 
  1405  0595                     	;# 
  1406  0596                     	;# 
  1407  0597                     	;# 
  1408  059C                     	;# 
  1409  059D                     	;# 
  1410  059E                     	;# 
  1411  0611                     	;# 
  1412  0611                     	;# 
  1413  0612                     	;# 
  1414  0613                     	;# 
  1415  0614                     	;# 
  1416  0614                     	;# 
  1417  0615                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0617                     	;# 
  1421  0618                     	;# 
  1422  0619                     	;# 
  1423  061A                     	;# 
  1424  061A                     	;# 
  1425  061B                     	;# 
  1426  061C                     	;# 
  1427  061D                     	;# 
  1428  061D                     	;# 
  1429  061E                     	;# 
  1430  061F                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE9                     	;# 
  1437  0FEA                     	;# 
  1438  0FEB                     	;# 
  1439  0FED                     	;# 
  1440  0FEE                     	;# 
  1441  0FEF                     	;# 
  1442  0000                     	;# 
  1443  0001                     	;# 
  1444  0002                     	;# 
  1445  0003                     	;# 
  1446  0004                     	;# 
  1447  0005                     	;# 
  1448  0006                     	;# 
  1449  0007                     	;# 
  1450  0008                     	;# 
  1451  0009                     	;# 
  1452  000A                     	;# 
  1453  000B                     	;# 
  1454  000C                     	;# 
  1455  000D                     	;# 
  1456  000E                     	;# 
  1457  000F                     	;# 
  1458  0010                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  008C                     	;# 
  1473  008D                     	;# 
  1474  008E                     	;# 
  1475  008F                     	;# 
  1476  0090                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0099                     	;# 
  1485  009A                     	;# 
  1486  009B                     	;# 
  1487  009B                     	;# 
  1488  009C                     	;# 
  1489  009D                     	;# 
  1490  009E                     	;# 
  1491  010C                     	;# 
  1492  010D                     	;# 
  1493  010E                     	;# 
  1494  010F                     	;# 
  1495  0110                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  011D                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  018F                     	;# 
  1502  0190                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0197                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  020D                     	;# 
  1536  020F                     	;# 
  1537  0210                     	;# 
  1538  0211                     	;# 
  1539  0211                     	;# 
  1540  0212                     	;# 
  1541  0212                     	;# 
  1542  0213                     	;# 
  1543  0213                     	;# 
  1544  0214                     	;# 
  1545  0214                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0219                     	;# 
  1554  021A                     	;# 
  1555  021B                     	;# 
  1556  021C                     	;# 
  1557  021D                     	;# 
  1558  021E                     	;# 
  1559  021F                     	;# 
  1560  028C                     	;# 
  1561  028D                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0298                     	;# 
  1567  0298                     	;# 
  1568  0299                     	;# 
  1569  029A                     	;# 
  1570  029D                     	;# 
  1571  029E                     	;# 
  1572  029F                     	;# 
  1573  030C                     	;# 
  1574  030D                     	;# 
  1575  0311                     	;# 
  1576  0311                     	;# 
  1577  0312                     	;# 
  1578  0313                     	;# 
  1579  0318                     	;# 
  1580  0318                     	;# 
  1581  0319                     	;# 
  1582  031A                     	;# 
  1583  031C                     	;# 
  1584  031C                     	;# 
  1585  031D                     	;# 
  1586  031E                     	;# 
  1587  038C                     	;# 
  1588  038D                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  040C                     	;# 
  1593  040D                     	;# 
  1594  0411                     	;# 
  1595  0411                     	;# 
  1596  0412                     	;# 
  1597  0413                     	;# 
  1598  0414                     	;# 
  1599  0415                     	;# 
  1600  0416                     	;# 
  1601  0417                     	;# 
  1602  0418                     	;# 
  1603  0418                     	;# 
  1604  0419                     	;# 
  1605  041A                     	;# 
  1606  041B                     	;# 
  1607  041C                     	;# 
  1608  041D                     	;# 
  1609  041E                     	;# 
  1610  048D                     	;# 
  1611  0491                     	;# 
  1612  0491                     	;# 
  1613  0492                     	;# 
  1614  0492                     	;# 
  1615  0493                     	;# 
  1616  0493                     	;# 
  1617  0493                     	;# 
  1618  0494                     	;# 
  1619  0494                     	;# 
  1620  0495                     	;# 
  1621  0495                     	;# 
  1622  0496                     	;# 
  1623  0496                     	;# 
  1624  0497                     	;# 
  1625  0497                     	;# 
  1626  0595                     	;# 
  1627  0596                     	;# 
  1628  0597                     	;# 
  1629  059C                     	;# 
  1630  059D                     	;# 
  1631  059E                     	;# 
  1632  0611                     	;# 
  1633  0611                     	;# 
  1634  0612                     	;# 
  1635  0613                     	;# 
  1636  0614                     	;# 
  1637  0614                     	;# 
  1638  0615                     	;# 
  1639  0616                     	;# 
  1640  0617                     	;# 
  1641  0617                     	;# 
  1642  0618                     	;# 
  1643  0619                     	;# 
  1644  061A                     	;# 
  1645  061A                     	;# 
  1646  061B                     	;# 
  1647  061C                     	;# 
  1648  061D                     	;# 
  1649  061D                     	;# 
  1650  061E                     	;# 
  1651  061F                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  000F                     	;# 
  1679  0010                     	;# 
  1680  0011                     	;# 
  1681  0012                     	;# 
  1682  0013                     	;# 
  1683  0014                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  008F                     	;# 
  1697  0090                     	;# 
  1698  0091                     	;# 
  1699  0092                     	;# 
  1700  0093                     	;# 
  1701  0094                     	;# 
  1702  0095                     	;# 
  1703  0096                     	;# 
  1704  0097                     	;# 
  1705  0099                     	;# 
  1706  009A                     	;# 
  1707  009B                     	;# 
  1708  009B                     	;# 
  1709  009C                     	;# 
  1710  009D                     	;# 
  1711  009E                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  010F                     	;# 
  1716  0110                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  011D                     	;# 
  1720  018C                     	;# 
  1721  018D                     	;# 
  1722  018F                     	;# 
  1723  0190                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0197                     	;# 
  1733  0199                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  020D                     	;# 
  1757  020F                     	;# 
  1758  0210                     	;# 
  1759  0211                     	;# 
  1760  0211                     	;# 
  1761  0212                     	;# 
  1762  0212                     	;# 
  1763  0213                     	;# 
  1764  0213                     	;# 
  1765  0214                     	;# 
  1766  0214                     	;# 
  1767  0215                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0216                     	;# 
  1771  0216                     	;# 
  1772  0217                     	;# 
  1773  0217                     	;# 
  1774  0219                     	;# 
  1775  021A                     	;# 
  1776  021B                     	;# 
  1777  021C                     	;# 
  1778  021D                     	;# 
  1779  021E                     	;# 
  1780  021F                     	;# 
  1781  028C                     	;# 
  1782  028D                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0298                     	;# 
  1788  0298                     	;# 
  1789  0299                     	;# 
  1790  029A                     	;# 
  1791  029D                     	;# 
  1792  029E                     	;# 
  1793  029F                     	;# 
  1794  030C                     	;# 
  1795  030D                     	;# 
  1796  0311                     	;# 
  1797  0311                     	;# 
  1798  0312                     	;# 
  1799  0313                     	;# 
  1800  0318                     	;# 
  1801  0318                     	;# 
  1802  0319                     	;# 
  1803  031A                     	;# 
  1804  031C                     	;# 
  1805  031C                     	;# 
  1806  031D                     	;# 
  1807  031E                     	;# 
  1808  038C                     	;# 
  1809  038D                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  040C                     	;# 
  1814  040D                     	;# 
  1815  0411                     	;# 
  1816  0411                     	;# 
  1817  0412                     	;# 
  1818  0413                     	;# 
  1819  0414                     	;# 
  1820  0415                     	;# 
  1821  0416                     	;# 
  1822  0417                     	;# 
  1823  0418                     	;# 
  1824  0418                     	;# 
  1825  0419                     	;# 
  1826  041A                     	;# 
  1827  041B                     	;# 
  1828  041C                     	;# 
  1829  041D                     	;# 
  1830  041E                     	;# 
  1831  048D                     	;# 
  1832  0491                     	;# 
  1833  0491                     	;# 
  1834  0492                     	;# 
  1835  0492                     	;# 
  1836  0493                     	;# 
  1837  0493                     	;# 
  1838  0493                     	;# 
  1839  0494                     	;# 
  1840  0494                     	;# 
  1841  0495                     	;# 
  1842  0495                     	;# 
  1843  0496                     	;# 
  1844  0496                     	;# 
  1845  0497                     	;# 
  1846  0497                     	;# 
  1847  0595                     	;# 
  1848  0596                     	;# 
  1849  0597                     	;# 
  1850  059C                     	;# 
  1851  059D                     	;# 
  1852  059E                     	;# 
  1853  0611                     	;# 
  1854  0611                     	;# 
  1855  0612                     	;# 
  1856  0613                     	;# 
  1857  0614                     	;# 
  1858  0614                     	;# 
  1859  0615                     	;# 
  1860  0616                     	;# 
  1861  0617                     	;# 
  1862  0617                     	;# 
  1863  0618                     	;# 
  1864  0619                     	;# 
  1865  061A                     	;# 
  1866  061A                     	;# 
  1867  061B                     	;# 
  1868  061C                     	;# 
  1869  061D                     	;# 
  1870  061D                     	;# 
  1871  061E                     	;# 
  1872  061F                     	;# 
  1873  0FE4                     	;# 
  1874  0FE5                     	;# 
  1875  0FE6                     	;# 
  1876  0FE7                     	;# 
  1877  0FE8                     	;# 
  1878  0FE9                     	;# 
  1879  0FEA                     	;# 
  1880  0FEB                     	;# 
  1881  0FED                     	;# 
  1882  0FEE                     	;# 
  1883  0FEF                     	;# 
  1884  0000                     	;# 
  1885  0001                     	;# 
  1886  0002                     	;# 
  1887  0003                     	;# 
  1888  0004                     	;# 
  1889  0005                     	;# 
  1890  0006                     	;# 
  1891  0007                     	;# 
  1892  0008                     	;# 
  1893  0009                     	;# 
  1894  000A                     	;# 
  1895  000B                     	;# 
  1896  000C                     	;# 
  1897  000D                     	;# 
  1898  000E                     	;# 
  1899  000F                     	;# 
  1900  0010                     	;# 
  1901  0011                     	;# 
  1902  0012                     	;# 
  1903  0013                     	;# 
  1904  0014                     	;# 
  1905  0015                     	;# 
  1906  0016                     	;# 
  1907  0016                     	;# 
  1908  0017                     	;# 
  1909  0018                     	;# 
  1910  0019                     	;# 
  1911  001A                     	;# 
  1912  001B                     	;# 
  1913  001C                     	;# 
  1914  008C                     	;# 
  1915  008D                     	;# 
  1916  008E                     	;# 
  1917  008F                     	;# 
  1918  0090                     	;# 
  1919  0091                     	;# 
  1920  0092                     	;# 
  1921  0093                     	;# 
  1922  0094                     	;# 
  1923  0095                     	;# 
  1924  0096                     	;# 
  1925  0097                     	;# 
  1926  0099                     	;# 
  1927  009A                     	;# 
  1928  009B                     	;# 
  1929  009B                     	;# 
  1930  009C                     	;# 
  1931  009D                     	;# 
  1932  009E                     	;# 
  1933  010C                     	;# 
  1934  010D                     	;# 
  1935  010E                     	;# 
  1936  010F                     	;# 
  1937  0110                     	;# 
  1938  0116                     	;# 
  1939  0117                     	;# 
  1940  011D                     	;# 
  1941  018C                     	;# 
  1942  018D                     	;# 
  1943  018F                     	;# 
  1944  0190                     	;# 
  1945  0191                     	;# 
  1946  0191                     	;# 
  1947  0192                     	;# 
  1948  0193                     	;# 
  1949  0193                     	;# 
  1950  0194                     	;# 
  1951  0195                     	;# 
  1952  0196                     	;# 
  1953  0197                     	;# 
  1954  0199                     	;# 
  1955  0199                     	;# 
  1956  0199                     	;# 
  1957  019A                     	;# 
  1958  019A                     	;# 
  1959  019A                     	;# 
  1960  019B                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019B                     	;# 
  1964  019B                     	;# 
  1965  019C                     	;# 
  1966  019C                     	;# 
  1967  019C                     	;# 
  1968  019D                     	;# 
  1969  019D                     	;# 
  1970  019D                     	;# 
  1971  019E                     	;# 
  1972  019E                     	;# 
  1973  019E                     	;# 
  1974  019F                     	;# 
  1975  019F                     	;# 
  1976  019F                     	;# 
  1977  020D                     	;# 
  1978  020F                     	;# 
  1979  0210                     	;# 
  1980  0211                     	;# 
  1981  0211                     	;# 
  1982  0212                     	;# 
  1983  0212                     	;# 
  1984  0213                     	;# 
  1985  0213                     	;# 
  1986  0214                     	;# 
  1987  0214                     	;# 
  1988  0215                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0216                     	;# 
  1992  0216                     	;# 
  1993  0217                     	;# 
  1994  0217                     	;# 
  1995  0219                     	;# 
  1996  021A                     	;# 
  1997  021B                     	;# 
  1998  021C                     	;# 
  1999  021D                     	;# 
  2000  021E                     	;# 
  2001  021F                     	;# 
  2002  028C                     	;# 
  2003  028D                     	;# 
  2004  0291                     	;# 
  2005  0291                     	;# 
  2006  0292                     	;# 
  2007  0293                     	;# 
  2008  0298                     	;# 
  2009  0298                     	;# 
  2010  0299                     	;# 
  2011  029A                     	;# 
  2012  029D                     	;# 
  2013  029E                     	;# 
  2014  029F                     	;# 
  2015  030C                     	;# 
  2016  030D                     	;# 
  2017  0311                     	;# 
  2018  0311                     	;# 
  2019  0312                     	;# 
  2020  0313                     	;# 
  2021  0318                     	;# 
  2022  0318                     	;# 
  2023  0319                     	;# 
  2024  031A                     	;# 
  2025  031C                     	;# 
  2026  031C                     	;# 
  2027  031D                     	;# 
  2028  031E                     	;# 
  2029  038C                     	;# 
  2030  038D                     	;# 
  2031  0394                     	;# 
  2032  0395                     	;# 
  2033  0396                     	;# 
  2034  040C                     	;# 
  2035  040D                     	;# 
  2036  0411                     	;# 
  2037  0411                     	;# 
  2038  0412                     	;# 
  2039  0413                     	;# 
  2040  0414                     	;# 
  2041  0415                     	;# 
  2042  0416                     	;# 
  2043  0417                     	;# 
  2044  0418                     	;# 
  2045  0418                     	;# 
  2046  0419                     	;# 
  2047  041A                     	;# 
  2048  041B                     	;# 
  2049  041C                     	;# 
  2050  041D                     	;# 
  2051  041E                     	;# 
  2052  048D                     	;# 
  2053  0491                     	;# 
  2054  0491                     	;# 
  2055  0492                     	;# 
  2056  0492                     	;# 
  2057  0493                     	;# 
  2058  0493                     	;# 
  2059  0493                     	;# 
  2060  0494                     	;# 
  2061  0494                     	;# 
  2062  0495                     	;# 
  2063  0495                     	;# 
  2064  0496                     	;# 
  2065  0496                     	;# 
  2066  0497                     	;# 
  2067  0497                     	;# 
  2068  0595                     	;# 
  2069  0596                     	;# 
  2070  0597                     	;# 
  2071  059C                     	;# 
  2072  059D                     	;# 
  2073  059E                     	;# 
  2074  0611                     	;# 
  2075  0611                     	;# 
  2076  0612                     	;# 
  2077  0613                     	;# 
  2078  0614                     	;# 
  2079  0614                     	;# 
  2080  0615                     	;# 
  2081  0616                     	;# 
  2082  0617                     	;# 
  2083  0617                     	;# 
  2084  0618                     	;# 
  2085  0619                     	;# 
  2086  061A                     	;# 
  2087  061A                     	;# 
  2088  061B                     	;# 
  2089  061C                     	;# 
  2090  061D                     	;# 
  2091  061D                     	;# 
  2092  061E                     	;# 
  2093  061F                     	;# 
  2094  0FE4                     	;# 
  2095  0FE5                     	;# 
  2096  0FE6                     	;# 
  2097  0FE7                     	;# 
  2098  0FE8                     	;# 
  2099  0FE9                     	;# 
  2100  0FEA                     	;# 
  2101  0FEB                     	;# 
  2102  0FED                     	;# 
  2103  0FEE                     	;# 
  2104  0FEF                     	;# 
  2105  0000                     	;# 
  2106  0001                     	;# 
  2107  0002                     	;# 
  2108  0003                     	;# 
  2109  0004                     	;# 
  2110  0005                     	;# 
  2111  0006                     	;# 
  2112  0007                     	;# 
  2113  0008                     	;# 
  2114  0009                     	;# 
  2115  000A                     	;# 
  2116  000B                     	;# 
  2117  000C                     	;# 
  2118  000D                     	;# 
  2119  000E                     	;# 
  2120  000F                     	;# 
  2121  0010                     	;# 
  2122  0011                     	;# 
  2123  0012                     	;# 
  2124  0013                     	;# 
  2125  0014                     	;# 
  2126  0015                     	;# 
  2127  0016                     	;# 
  2128  0016                     	;# 
  2129  0017                     	;# 
  2130  0018                     	;# 
  2131  0019                     	;# 
  2132  001A                     	;# 
  2133  001B                     	;# 
  2134  001C                     	;# 
  2135  008C                     	;# 
  2136  008D                     	;# 
  2137  008E                     	;# 
  2138  008F                     	;# 
  2139  0090                     	;# 
  2140  0091                     	;# 
  2141  0092                     	;# 
  2142  0093                     	;# 
  2143  0094                     	;# 
  2144  0095                     	;# 
  2145  0096                     	;# 
  2146  0097                     	;# 
  2147  0099                     	;# 
  2148  009A                     	;# 
  2149  009B                     	;# 
  2150  009B                     	;# 
  2151  009C                     	;# 
  2152  009D                     	;# 
  2153  009E                     	;# 
  2154  010C                     	;# 
  2155  010D                     	;# 
  2156  010E                     	;# 
  2157  010F                     	;# 
  2158  0110                     	;# 
  2159  0116                     	;# 
  2160  0117                     	;# 
  2161  011D                     	;# 
  2162  018C                     	;# 
  2163  018D                     	;# 
  2164  018F                     	;# 
  2165  0190                     	;# 
  2166  0191                     	;# 
  2167  0191                     	;# 
  2168  0192                     	;# 
  2169  0193                     	;# 
  2170  0193                     	;# 
  2171  0194                     	;# 
  2172  0195                     	;# 
  2173  0196                     	;# 
  2174  0197                     	;# 
  2175  0199                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  019A                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019B                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019C                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019D                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019E                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019F                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  020D                     	;# 
  2199  020F                     	;# 
  2200  0210                     	;# 
  2201  0211                     	;# 
  2202  0211                     	;# 
  2203  0212                     	;# 
  2204  0212                     	;# 
  2205  0213                     	;# 
  2206  0213                     	;# 
  2207  0214                     	;# 
  2208  0214                     	;# 
  2209  0215                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0216                     	;# 
  2213  0216                     	;# 
  2214  0217                     	;# 
  2215  0217                     	;# 
  2216  0219                     	;# 
  2217  021A                     	;# 
  2218  021B                     	;# 
  2219  021C                     	;# 
  2220  021D                     	;# 
  2221  021E                     	;# 
  2222  021F                     	;# 
  2223  028C                     	;# 
  2224  028D                     	;# 
  2225  0291                     	;# 
  2226  0291                     	;# 
  2227  0292                     	;# 
  2228  0293                     	;# 
  2229  0298                     	;# 
  2230  0298                     	;# 
  2231  0299                     	;# 
  2232  029A                     	;# 
  2233  029D                     	;# 
  2234  029E                     	;# 
  2235  029F                     	;# 
  2236  030C                     	;# 
  2237  030D                     	;# 
  2238  0311                     	;# 
  2239  0311                     	;# 
  2240  0312                     	;# 
  2241  0313                     	;# 
  2242  0318                     	;# 
  2243  0318                     	;# 
  2244  0319                     	;# 
  2245  031A                     	;# 
  2246  031C                     	;# 
  2247  031C                     	;# 
  2248  031D                     	;# 
  2249  031E                     	;# 
  2250  038C                     	;# 
  2251  038D                     	;# 
  2252  0394                     	;# 
  2253  0395                     	;# 
  2254  0396                     	;# 
  2255  040C                     	;# 
  2256  040D                     	;# 
  2257  0411                     	;# 
  2258  0411                     	;# 
  2259  0412                     	;# 
  2260  0413                     	;# 
  2261  0414                     	;# 
  2262  0415                     	;# 
  2263  0416                     	;# 
  2264  0417                     	;# 
  2265  0418                     	;# 
  2266  0418                     	;# 
  2267  0419                     	;# 
  2268  041A                     	;# 
  2269  041B                     	;# 
  2270  041C                     	;# 
  2271  041D                     	;# 
  2272  041E                     	;# 
  2273  048D                     	;# 
  2274  0491                     	;# 
  2275  0491                     	;# 
  2276  0492                     	;# 
  2277  0492                     	;# 
  2278  0493                     	;# 
  2279  0493                     	;# 
  2280  0493                     	;# 
  2281  0494                     	;# 
  2282  0494                     	;# 
  2283  0495                     	;# 
  2284  0495                     	;# 
  2285  0496                     	;# 
  2286  0496                     	;# 
  2287  0497                     	;# 
  2288  0497                     	;# 
  2289  0595                     	;# 
  2290  0596                     	;# 
  2291  0597                     	;# 
  2292  059C                     	;# 
  2293  059D                     	;# 
  2294  059E                     	;# 
  2295  0611                     	;# 
  2296  0611                     	;# 
  2297  0612                     	;# 
  2298  0613                     	;# 
  2299  0614                     	;# 
  2300  0614                     	;# 
  2301  0615                     	;# 
  2302  0616                     	;# 
  2303  0617                     	;# 
  2304  0617                     	;# 
  2305  0618                     	;# 
  2306  0619                     	;# 
  2307  061A                     	;# 
  2308  061A                     	;# 
  2309  061B                     	;# 
  2310  061C                     	;# 
  2311  061D                     	;# 
  2312  061D                     	;# 
  2313  061E                     	;# 
  2314  061F                     	;# 
  2315  0FE4                     	;# 
  2316  0FE5                     	;# 
  2317  0FE6                     	;# 
  2318  0FE7                     	;# 
  2319  0FE8                     	;# 
  2320  0FE9                     	;# 
  2321  0FEA                     	;# 
  2322  0FEB                     	;# 
  2323  0FED                     	;# 
  2324  0FEE                     	;# 
  2325  0FEF                     	;# 
  2326  0000                     	;# 
  2327  0001                     	;# 
  2328  0002                     	;# 
  2329  0003                     	;# 
  2330  0004                     	;# 
  2331  0005                     	;# 
  2332  0006                     	;# 
  2333  0007                     	;# 
  2334  0008                     	;# 
  2335  0009                     	;# 
  2336  000A                     	;# 
  2337  000B                     	;# 
  2338  000C                     	;# 
  2339  000D                     	;# 
  2340  000E                     	;# 
  2341  000F                     	;# 
  2342  0010                     	;# 
  2343  0011                     	;# 
  2344  0012                     	;# 
  2345  0013                     	;# 
  2346  0014                     	;# 
  2347  0015                     	;# 
  2348  0016                     	;# 
  2349  0016                     	;# 
  2350  0017                     	;# 
  2351  0018                     	;# 
  2352  0019                     	;# 
  2353  001A                     	;# 
  2354  001B                     	;# 
  2355  001C                     	;# 
  2356  008C                     	;# 
  2357  008D                     	;# 
  2358  008E                     	;# 
  2359  008F                     	;# 
  2360  0090                     	;# 
  2361  0091                     	;# 
  2362  0092                     	;# 
  2363  0093                     	;# 
  2364  0094                     	;# 
  2365  0095                     	;# 
  2366  0096                     	;# 
  2367  0097                     	;# 
  2368  0099                     	;# 
  2369  009A                     	;# 
  2370  009B                     	;# 
  2371  009B                     	;# 
  2372  009C                     	;# 
  2373  009D                     	;# 
  2374  009E                     	;# 
  2375  010C                     	;# 
  2376  010D                     	;# 
  2377  010E                     	;# 
  2378  010F                     	;# 
  2379  0110                     	;# 
  2380  0116                     	;# 
  2381  0117                     	;# 
  2382  011D                     	;# 
  2383  018C                     	;# 
  2384  018D                     	;# 
  2385  018F                     	;# 
  2386  0190                     	;# 
  2387  0191                     	;# 
  2388  0191                     	;# 
  2389  0192                     	;# 
  2390  0193                     	;# 
  2391  0193                     	;# 
  2392  0194                     	;# 
  2393  0195                     	;# 
  2394  0196                     	;# 
  2395  0197                     	;# 
  2396  0199                     	;# 
  2397  0199                     	;# 
  2398  0199                     	;# 
  2399  019A                     	;# 
  2400  019A                     	;# 
  2401  019A                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019C                     	;# 
  2408  019C                     	;# 
  2409  019C                     	;# 
  2410  019D                     	;# 
  2411  019D                     	;# 
  2412  019D                     	;# 
  2413  019E                     	;# 
  2414  019E                     	;# 
  2415  019E                     	;# 
  2416  019F                     	;# 
  2417  019F                     	;# 
  2418  019F                     	;# 
  2419  020D                     	;# 
  2420  020F                     	;# 
  2421  0210                     	;# 
  2422  0211                     	;# 
  2423  0211                     	;# 
  2424  0212                     	;# 
  2425  0212                     	;# 
  2426  0213                     	;# 
  2427  0213                     	;# 
  2428  0214                     	;# 
  2429  0214                     	;# 
  2430  0215                     	;# 
  2431  0215                     	;# 
  2432  0215                     	;# 
  2433  0216                     	;# 
  2434  0216                     	;# 
  2435  0217                     	;# 
  2436  0217                     	;# 
  2437  0219                     	;# 
  2438  021A                     	;# 
  2439  021B                     	;# 
  2440  021C                     	;# 
  2441  021D                     	;# 
  2442  021E                     	;# 
  2443  021F                     	;# 
  2444  028C                     	;# 
  2445  028D                     	;# 
  2446  0291                     	;# 
  2447  0291                     	;# 
  2448  0292                     	;# 
  2449  0293                     	;# 
  2450  0298                     	;# 
  2451  0298                     	;# 
  2452  0299                     	;# 
  2453  029A                     	;# 
  2454  029D                     	;# 
  2455  029E                     	;# 
  2456  029F                     	;# 
  2457  030C                     	;# 
  2458  030D                     	;# 
  2459  0311                     	;# 
  2460  0311                     	;# 
  2461  0312                     	;# 
  2462  0313                     	;# 
  2463  0318                     	;# 
  2464  0318                     	;# 
  2465  0319                     	;# 
  2466  031A                     	;# 
  2467  031C                     	;# 
  2468  031C                     	;# 
  2469  031D                     	;# 
  2470  031E                     	;# 
  2471  038C                     	;# 
  2472  038D                     	;# 
  2473  0394                     	;# 
  2474  0395                     	;# 
  2475  0396                     	;# 
  2476  040C                     	;# 
  2477  040D                     	;# 
  2478  0411                     	;# 
  2479  0411                     	;# 
  2480  0412                     	;# 
  2481  0413                     	;# 
  2482  0414                     	;# 
  2483  0415                     	;# 
  2484  0416                     	;# 
  2485  0417                     	;# 
  2486  0418                     	;# 
  2487  0418                     	;# 
  2488  0419                     	;# 
  2489  041A                     	;# 
  2490  041B                     	;# 
  2491  041C                     	;# 
  2492  041D                     	;# 
  2493  041E                     	;# 
  2494  048D                     	;# 
  2495  0491                     	;# 
  2496  0491                     	;# 
  2497  0492                     	;# 
  2498  0492                     	;# 
  2499  0493                     	;# 
  2500  0493                     	;# 
  2501  0493                     	;# 
  2502  0494                     	;# 
  2503  0494                     	;# 
  2504  0495                     	;# 
  2505  0495                     	;# 
  2506  0496                     	;# 
  2507  0496                     	;# 
  2508  0497                     	;# 
  2509  0497                     	;# 
  2510  0595                     	;# 
  2511  0596                     	;# 
  2512  0597                     	;# 
  2513  059C                     	;# 
  2514  059D                     	;# 
  2515  059E                     	;# 
  2516  0611                     	;# 
  2517  0611                     	;# 
  2518  0612                     	;# 
  2519  0613                     	;# 
  2520  0614                     	;# 
  2521  0614                     	;# 
  2522  0615                     	;# 
  2523  0616                     	;# 
  2524  0617                     	;# 
  2525  0617                     	;# 
  2526  0618                     	;# 
  2527  0619                     	;# 
  2528  061A                     	;# 
  2529  061A                     	;# 
  2530  061B                     	;# 
  2531  061C                     	;# 
  2532  061D                     	;# 
  2533  061D                     	;# 
  2534  061E                     	;# 
  2535  061F                     	;# 
  2536  0FE4                     	;# 
  2537  0FE5                     	;# 
  2538  0FE6                     	;# 
  2539  0FE7                     	;# 
  2540  0FE8                     	;# 
  2541  0FE9                     	;# 
  2542  0FEA                     	;# 
  2543  0FEB                     	;# 
  2544  0FED                     	;# 
  2545  0FEE                     	;# 
  2546  0FEF                     	;# 
  2547  0000                     	;# 
  2548  0001                     	;# 
  2549  0002                     	;# 
  2550  0003                     	;# 
  2551  0004                     	;# 
  2552  0005                     	;# 
  2553  0006                     	;# 
  2554  0007                     	;# 
  2555  0008                     	;# 
  2556  0009                     	;# 
  2557  000A                     	;# 
  2558  000B                     	;# 
  2559  000C                     	;# 
  2560  000D                     	;# 
  2561  000E                     	;# 
  2562  000F                     	;# 
  2563  0010                     	;# 
  2564  0011                     	;# 
  2565  0012                     	;# 
  2566  0013                     	;# 
  2567  0014                     	;# 
  2568  0015                     	;# 
  2569  0016                     	;# 
  2570  0016                     	;# 
  2571  0017                     	;# 
  2572  0018                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  008C                     	;# 
  2578  008D                     	;# 
  2579  008E                     	;# 
  2580  008F                     	;# 
  2581  0090                     	;# 
  2582  0091                     	;# 
  2583  0092                     	;# 
  2584  0093                     	;# 
  2585  0094                     	;# 
  2586  0095                     	;# 
  2587  0096                     	;# 
  2588  0097                     	;# 
  2589  0099                     	;# 
  2590  009A                     	;# 
  2591  009B                     	;# 
  2592  009B                     	;# 
  2593  009C                     	;# 
  2594  009D                     	;# 
  2595  009E                     	;# 
  2596  010C                     	;# 
  2597  010D                     	;# 
  2598  010E                     	;# 
  2599  010F                     	;# 
  2600  0110                     	;# 
  2601  0116                     	;# 
  2602  0117                     	;# 
  2603  011D                     	;# 
  2604  018C                     	;# 
  2605  018D                     	;# 
  2606  018F                     	;# 
  2607  0190                     	;# 
  2608  0191                     	;# 
  2609  0191                     	;# 
  2610  0192                     	;# 
  2611  0193                     	;# 
  2612  0193                     	;# 
  2613  0194                     	;# 
  2614  0195                     	;# 
  2615  0196                     	;# 
  2616  0197                     	;# 
  2617  0199                     	;# 
  2618  0199                     	;# 
  2619  0199                     	;# 
  2620  019A                     	;# 
  2621  019A                     	;# 
  2622  019A                     	;# 
  2623  019B                     	;# 
  2624  019B                     	;# 
  2625  019B                     	;# 
  2626  019B                     	;# 
  2627  019B                     	;# 
  2628  019C                     	;# 
  2629  019C                     	;# 
  2630  019C                     	;# 
  2631  019D                     	;# 
  2632  019D                     	;# 
  2633  019D                     	;# 
  2634  019E                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019F                     	;# 
  2638  019F                     	;# 
  2639  019F                     	;# 
  2640  020D                     	;# 
  2641  020F                     	;# 
  2642  0210                     	;# 
  2643  0211                     	;# 
  2644  0211                     	;# 
  2645  0212                     	;# 
  2646  0212                     	;# 
  2647  0213                     	;# 
  2648  0213                     	;# 
  2649  0214                     	;# 
  2650  0214                     	;# 
  2651  0215                     	;# 
  2652  0215                     	;# 
  2653  0215                     	;# 
  2654  0216                     	;# 
  2655  0216                     	;# 
  2656  0217                     	;# 
  2657  0217                     	;# 
  2658  0219                     	;# 
  2659  021A                     	;# 
  2660  021B                     	;# 
  2661  021C                     	;# 
  2662  021D                     	;# 
  2663  021E                     	;# 
  2664  021F                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  0291                     	;# 
  2668  0291                     	;# 
  2669  0292                     	;# 
  2670  0293                     	;# 
  2671  0298                     	;# 
  2672  0298                     	;# 
  2673  0299                     	;# 
  2674  029A                     	;# 
  2675  029D                     	;# 
  2676  029E                     	;# 
  2677  029F                     	;# 
  2678  030C                     	;# 
  2679  030D                     	;# 
  2680  0311                     	;# 
  2681  0311                     	;# 
  2682  0312                     	;# 
  2683  0313                     	;# 
  2684  0318                     	;# 
  2685  0318                     	;# 
  2686  0319                     	;# 
  2687  031A                     	;# 
  2688  031C                     	;# 
  2689  031C                     	;# 
  2690  031D                     	;# 
  2691  031E                     	;# 
  2692  038C                     	;# 
  2693  038D                     	;# 
  2694  0394                     	;# 
  2695  0395                     	;# 
  2696  0396                     	;# 
  2697  040C                     	;# 
  2698  040D                     	;# 
  2699  0411                     	;# 
  2700  0411                     	;# 
  2701  0412                     	;# 
  2702  0413                     	;# 
  2703  0414                     	;# 
  2704  0415                     	;# 
  2705  0416                     	;# 
  2706  0417                     	;# 
  2707  0418                     	;# 
  2708  0418                     	;# 
  2709  0419                     	;# 
  2710  041A                     	;# 
  2711  041B                     	;# 
  2712  041C                     	;# 
  2713  041D                     	;# 
  2714  041E                     	;# 
  2715  048D                     	;# 
  2716  0491                     	;# 
  2717  0491                     	;# 
  2718  0492                     	;# 
  2719  0492                     	;# 
  2720  0493                     	;# 
  2721  0493                     	;# 
  2722  0493                     	;# 
  2723  0494                     	;# 
  2724  0494                     	;# 
  2725  0495                     	;# 
  2726  0495                     	;# 
  2727  0496                     	;# 
  2728  0496                     	;# 
  2729  0497                     	;# 
  2730  0497                     	;# 
  2731  0595                     	;# 
  2732  0596                     	;# 
  2733  0597                     	;# 
  2734  059C                     	;# 
  2735  059D                     	;# 
  2736  059E                     	;# 
  2737  0611                     	;# 
  2738  0611                     	;# 
  2739  0612                     	;# 
  2740  0613                     	;# 
  2741  0614                     	;# 
  2742  0614                     	;# 
  2743  0615                     	;# 
  2744  0616                     	;# 
  2745  0617                     	;# 
  2746  0617                     	;# 
  2747  0618                     	;# 
  2748  0619                     	;# 
  2749  061A                     	;# 
  2750  061A                     	;# 
  2751  061B                     	;# 
  2752  061C                     	;# 
  2753  061D                     	;# 
  2754  061D                     	;# 
  2755  061E                     	;# 
  2756  061F                     	;# 
  2757  0FE4                     	;# 
  2758  0FE5                     	;# 
  2759  0FE6                     	;# 
  2760  0FE7                     	;# 
  2761  0FE8                     	;# 
  2762  0FE9                     	;# 
  2763  0FEA                     	;# 
  2764  0FEB                     	;# 
  2765  0FED                     	;# 
  2766  0FEE                     	;# 
  2767  0FEF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000D                     	;# 
  2782  000E                     	;# 
  2783  000F                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  008C                     	;# 
  2799  008D                     	;# 
  2800  008E                     	;# 
  2801  008F                     	;# 
  2802  0090                     	;# 
  2803  0091                     	;# 
  2804  0092                     	;# 
  2805  0093                     	;# 
  2806  0094                     	;# 
  2807  0095                     	;# 
  2808  0096                     	;# 
  2809  0097                     	;# 
  2810  0099                     	;# 
  2811  009A                     	;# 
  2812  009B                     	;# 
  2813  009B                     	;# 
  2814  009C                     	;# 
  2815  009D                     	;# 
  2816  009E                     	;# 
  2817  010C                     	;# 
  2818  010D                     	;# 
  2819  010E                     	;# 
  2820  010F                     	;# 
  2821  0110                     	;# 
  2822  0116                     	;# 
  2823  0117                     	;# 
  2824  011D                     	;# 
  2825  018C                     	;# 
  2826  018D                     	;# 
  2827  018F                     	;# 
  2828  0190                     	;# 
  2829  0191                     	;# 
  2830  0191                     	;# 
  2831  0192                     	;# 
  2832  0193                     	;# 
  2833  0193                     	;# 
  2834  0194                     	;# 
  2835  0195                     	;# 
  2836  0196                     	;# 
  2837  0197                     	;# 
  2838  0199                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  019A                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019B                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019C                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019D                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019E                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019F                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  020D                     	;# 
  2862  020F                     	;# 
  2863  0210                     	;# 
  2864  0211                     	;# 
  2865  0211                     	;# 
  2866  0212                     	;# 
  2867  0212                     	;# 
  2868  0213                     	;# 
  2869  0213                     	;# 
  2870  0214                     	;# 
  2871  0214                     	;# 
  2872  0215                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0216                     	;# 
  2876  0216                     	;# 
  2877  0217                     	;# 
  2878  0217                     	;# 
  2879  0219                     	;# 
  2880  021A                     	;# 
  2881  021B                     	;# 
  2882  021C                     	;# 
  2883  021D                     	;# 
  2884  021E                     	;# 
  2885  021F                     	;# 
  2886  028C                     	;# 
  2887  028D                     	;# 
  2888  0291                     	;# 
  2889  0291                     	;# 
  2890  0292                     	;# 
  2891  0293                     	;# 
  2892  0298                     	;# 
  2893  0298                     	;# 
  2894  0299                     	;# 
  2895  029A                     	;# 
  2896  029D                     	;# 
  2897  029E                     	;# 
  2898  029F                     	;# 
  2899  030C                     	;# 
  2900  030D                     	;# 
  2901  0311                     	;# 
  2902  0311                     	;# 
  2903  0312                     	;# 
  2904  0313                     	;# 
  2905  0318                     	;# 
  2906  0318                     	;# 
  2907  0319                     	;# 
  2908  031A                     	;# 
  2909  031C                     	;# 
  2910  031C                     	;# 
  2911  031D                     	;# 
  2912  031E                     	;# 
  2913  038C                     	;# 
  2914  038D                     	;# 
  2915  0394                     	;# 
  2916  0395                     	;# 
  2917  0396                     	;# 
  2918  040C                     	;# 
  2919  040D                     	;# 
  2920  0411                     	;# 
  2921  0411                     	;# 
  2922  0412                     	;# 
  2923  0413                     	;# 
  2924  0414                     	;# 
  2925  0415                     	;# 
  2926  0416                     	;# 
  2927  0417                     	;# 
  2928  0418                     	;# 
  2929  0418                     	;# 
  2930  0419                     	;# 
  2931  041A                     	;# 
  2932  041B                     	;# 
  2933  041C                     	;# 
  2934  041D                     	;# 
  2935  041E                     	;# 
  2936  048D                     	;# 
  2937  0491                     	;# 
  2938  0491                     	;# 
  2939  0492                     	;# 
  2940  0492                     	;# 
  2941  0493                     	;# 
  2942  0493                     	;# 
  2943  0493                     	;# 
  2944  0494                     	;# 
  2945  0494                     	;# 
  2946  0495                     	;# 
  2947  0495                     	;# 
  2948  0496                     	;# 
  2949  0496                     	;# 
  2950  0497                     	;# 
  2951  0497                     	;# 
  2952  0595                     	;# 
  2953  0596                     	;# 
  2954  0597                     	;# 
  2955  059C                     	;# 
  2956  059D                     	;# 
  2957  059E                     	;# 
  2958  0611                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0614                     	;# 
  2964  0615                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0617                     	;# 
  2968  0618                     	;# 
  2969  0619                     	;# 
  2970  061A                     	;# 
  2971  061A                     	;# 
  2972  061B                     	;# 
  2973  061C                     	;# 
  2974  061D                     	;# 
  2975  061D                     	;# 
  2976  061E                     	;# 
  2977  061F                     	;# 
  2978  0FE4                     	;# 
  2979  0FE5                     	;# 
  2980  0FE6                     	;# 
  2981  0FE7                     	;# 
  2982  0FE8                     	;# 
  2983  0FE9                     	;# 
  2984  0FEA                     	;# 
  2985  0FEB                     	;# 
  2986  0FED                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0000                     	;# 
  2990  0001                     	;# 
  2991  0002                     	;# 
  2992  0003                     	;# 
  2993  0004                     	;# 
  2994  0005                     	;# 
  2995  0006                     	;# 
  2996  0007                     	;# 
  2997  0008                     	;# 
  2998  0009                     	;# 
  2999  000A                     	;# 
  3000  000B                     	;# 
  3001  000C                     	;# 
  3002  000D                     	;# 
  3003  000E                     	;# 
  3004  000F                     	;# 
  3005  0010                     	;# 
  3006  0011                     	;# 
  3007  0012                     	;# 
  3008  0013                     	;# 
  3009  0014                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  008C                     	;# 
  3020  008D                     	;# 
  3021  008E                     	;# 
  3022  008F                     	;# 
  3023  0090                     	;# 
  3024  0091                     	;# 
  3025  0092                     	;# 
  3026  0093                     	;# 
  3027  0094                     	;# 
  3028  0095                     	;# 
  3029  0096                     	;# 
  3030  0097                     	;# 
  3031  0099                     	;# 
  3032  009A                     	;# 
  3033  009B                     	;# 
  3034  009B                     	;# 
  3035  009C                     	;# 
  3036  009D                     	;# 
  3037  009E                     	;# 
  3038  010C                     	;# 
  3039  010D                     	;# 
  3040  010E                     	;# 
  3041  010F                     	;# 
  3042  0110                     	;# 
  3043  0116                     	;# 
  3044  0117                     	;# 
  3045  011D                     	;# 
  3046  018C                     	;# 
  3047  018D                     	;# 
  3048  018F                     	;# 
  3049  0190                     	;# 
  3050  0191                     	;# 
  3051  0191                     	;# 
  3052  0192                     	;# 
  3053  0193                     	;# 
  3054  0193                     	;# 
  3055  0194                     	;# 
  3056  0195                     	;# 
  3057  0196                     	;# 
  3058  0197                     	;# 
  3059  0199                     	;# 
  3060  0199                     	;# 
  3061  0199                     	;# 
  3062  019A                     	;# 
  3063  019A                     	;# 
  3064  019A                     	;# 
  3065  019B                     	;# 
  3066  019B                     	;# 
  3067  019B                     	;# 
  3068  019B                     	;# 
  3069  019B                     	;# 
  3070  019C                     	;# 
  3071  019C                     	;# 
  3072  019C                     	;# 
  3073  019D                     	;# 
  3074  019D                     	;# 
  3075  019D                     	;# 
  3076  019E                     	;# 
  3077  019E                     	;# 
  3078  019E                     	;# 
  3079  019F                     	;# 
  3080  019F                     	;# 
  3081  019F                     	;# 
  3082  020D                     	;# 
  3083  020F                     	;# 
  3084  0210                     	;# 
  3085  0211                     	;# 
  3086  0211                     	;# 
  3087  0212                     	;# 
  3088  0212                     	;# 
  3089  0213                     	;# 
  3090  0213                     	;# 
  3091  0214                     	;# 
  3092  0214                     	;# 
  3093  0215                     	;# 
  3094  0215                     	;# 
  3095  0215                     	;# 
  3096  0216                     	;# 
  3097  0216                     	;# 
  3098  0217                     	;# 
  3099  0217                     	;# 
  3100  0219                     	;# 
  3101  021A                     	;# 
  3102  021B                     	;# 
  3103  021C                     	;# 
  3104  021D                     	;# 
  3105  021E                     	;# 
  3106  021F                     	;# 
  3107  028C                     	;# 
  3108  028D                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0298                     	;# 
  3114  0298                     	;# 
  3115  0299                     	;# 
  3116  029A                     	;# 
  3117  029D                     	;# 
  3118  029E                     	;# 
  3119  029F                     	;# 
  3120  030C                     	;# 
  3121  030D                     	;# 
  3122  0311                     	;# 
  3123  0311                     	;# 
  3124  0312                     	;# 
  3125  0313                     	;# 
  3126  0318                     	;# 
  3127  0318                     	;# 
  3128  0319                     	;# 
  3129  031A                     	;# 
  3130  031C                     	;# 
  3131  031C                     	;# 
  3132  031D                     	;# 
  3133  031E                     	;# 
  3134  038C                     	;# 
  3135  038D                     	;# 
  3136  0394                     	;# 
  3137  0395                     	;# 
  3138  0396                     	;# 
  3139  040C                     	;# 
  3140  040D                     	;# 
  3141  0411                     	;# 
  3142  0411                     	;# 
  3143  0412                     	;# 
  3144  0413                     	;# 
  3145  0414                     	;# 
  3146  0415                     	;# 
  3147  0416                     	;# 
  3148  0417                     	;# 
  3149  0418                     	;# 
  3150  0418                     	;# 
  3151  0419                     	;# 
  3152  041A                     	;# 
  3153  041B                     	;# 
  3154  041C                     	;# 
  3155  041D                     	;# 
  3156  041E                     	;# 
  3157  048D                     	;# 
  3158  0491                     	;# 
  3159  0491                     	;# 
  3160  0492                     	;# 
  3161  0492                     	;# 
  3162  0493                     	;# 
  3163  0493                     	;# 
  3164  0493                     	;# 
  3165  0494                     	;# 
  3166  0494                     	;# 
  3167  0495                     	;# 
  3168  0495                     	;# 
  3169  0496                     	;# 
  3170  0496                     	;# 
  3171  0497                     	;# 
  3172  0497                     	;# 
  3173  0595                     	;# 
  3174  0596                     	;# 
  3175  0597                     	;# 
  3176  059C                     	;# 
  3177  059D                     	;# 
  3178  059E                     	;# 
  3179  0611                     	;# 
  3180  0611                     	;# 
  3181  0612                     	;# 
  3182  0613                     	;# 
  3183  0614                     	;# 
  3184  0614                     	;# 
  3185  0615                     	;# 
  3186  0616                     	;# 
  3187  0617                     	;# 
  3188  0617                     	;# 
  3189  0618                     	;# 
  3190  0619                     	;# 
  3191  061A                     	;# 
  3192  061A                     	;# 
  3193  061B                     	;# 
  3194  061C                     	;# 
  3195  061D                     	;# 
  3196  061D                     	;# 
  3197  061E                     	;# 
  3198  061F                     	;# 
  3199  0FE4                     	;# 
  3200  0FE5                     	;# 
  3201  0FE6                     	;# 
  3202  0FE7                     	;# 
  3203  0FE8                     	;# 
  3204  0FE9                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEF                     	;# 
  3210  0000                     	;# 
  3211  0001                     	;# 
  3212  0002                     	;# 
  3213  0003                     	;# 
  3214  0004                     	;# 
  3215  0005                     	;# 
  3216  0006                     	;# 
  3217  0007                     	;# 
  3218  0008                     	;# 
  3219  0009                     	;# 
  3220  000A                     	;# 
  3221  000B                     	;# 
  3222  000C                     	;# 
  3223  000D                     	;# 
  3224  000E                     	;# 
  3225  000F                     	;# 
  3226  0010                     	;# 
  3227  0011                     	;# 
  3228  0012                     	;# 
  3229  0013                     	;# 
  3230  0014                     	;# 
  3231  0015                     	;# 
  3232  0016                     	;# 
  3233  0016                     	;# 
  3234  0017                     	;# 
  3235  0018                     	;# 
  3236  0019                     	;# 
  3237  001A                     	;# 
  3238  001B                     	;# 
  3239  001C                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  008F                     	;# 
  3244  0090                     	;# 
  3245  0091                     	;# 
  3246  0092                     	;# 
  3247  0093                     	;# 
  3248  0094                     	;# 
  3249  0095                     	;# 
  3250  0096                     	;# 
  3251  0097                     	;# 
  3252  0099                     	;# 
  3253  009A                     	;# 
  3254  009B                     	;# 
  3255  009B                     	;# 
  3256  009C                     	;# 
  3257  009D                     	;# 
  3258  009E                     	;# 
  3259  010C                     	;# 
  3260  010D                     	;# 
  3261  010E                     	;# 
  3262  010F                     	;# 
  3263  0110                     	;# 
  3264  0116                     	;# 
  3265  0117                     	;# 
  3266  011D                     	;# 
  3267  018C                     	;# 
  3268  018D                     	;# 
  3269  018F                     	;# 
  3270  0190                     	;# 
  3271  0191                     	;# 
  3272  0191                     	;# 
  3273  0192                     	;# 
  3274  0193                     	;# 
  3275  0193                     	;# 
  3276  0194                     	;# 
  3277  0195                     	;# 
  3278  0196                     	;# 
  3279  0197                     	;# 
  3280  0199                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  019A                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019B                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019C                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019D                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019E                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019F                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  020D                     	;# 
  3304  020F                     	;# 
  3305  0210                     	;# 
  3306  0211                     	;# 
  3307  0211                     	;# 
  3308  0212                     	;# 
  3309  0212                     	;# 
  3310  0213                     	;# 
  3311  0213                     	;# 
  3312  0214                     	;# 
  3313  0214                     	;# 
  3314  0215                     	;# 
  3315  0215                     	;# 
  3316  0215                     	;# 
  3317  0216                     	;# 
  3318  0216                     	;# 
  3319  0217                     	;# 
  3320  0217                     	;# 
  3321  0219                     	;# 
  3322  021A                     	;# 
  3323  021B                     	;# 
  3324  021C                     	;# 
  3325  021D                     	;# 
  3326  021E                     	;# 
  3327  021F                     	;# 
  3328  028C                     	;# 
  3329  028D                     	;# 
  3330  0291                     	;# 
  3331  0291                     	;# 
  3332  0292                     	;# 
  3333  0293                     	;# 
  3334  0298                     	;# 
  3335  0298                     	;# 
  3336  0299                     	;# 
  3337  029A                     	;# 
  3338  029D                     	;# 
  3339  029E                     	;# 
  3340  029F                     	;# 
  3341  030C                     	;# 
  3342  030D                     	;# 
  3343  0311                     	;# 
  3344  0311                     	;# 
  3345  0312                     	;# 
  3346  0313                     	;# 
  3347  0318                     	;# 
  3348  0318                     	;# 
  3349  0319                     	;# 
  3350  031A                     	;# 
  3351  031C                     	;# 
  3352  031C                     	;# 
  3353  031D                     	;# 
  3354  031E                     	;# 
  3355  038C                     	;# 
  3356  038D                     	;# 
  3357  0394                     	;# 
  3358  0395                     	;# 
  3359  0396                     	;# 
  3360  040C                     	;# 
  3361  040D                     	;# 
  3362  0411                     	;# 
  3363  0411                     	;# 
  3364  0412                     	;# 
  3365  0413                     	;# 
  3366  0414                     	;# 
  3367  0415                     	;# 
  3368  0416                     	;# 
  3369  0417                     	;# 
  3370  0418                     	;# 
  3371  0418                     	;# 
  3372  0419                     	;# 
  3373  041A                     	;# 
  3374  041B                     	;# 
  3375  041C                     	;# 
  3376  041D                     	;# 
  3377  041E                     	;# 
  3378  048D                     	;# 
  3379  0491                     	;# 
  3380  0491                     	;# 
  3381  0492                     	;# 
  3382  0492                     	;# 
  3383  0493                     	;# 
  3384  0493                     	;# 
  3385  0493                     	;# 
  3386  0494                     	;# 
  3387  0494                     	;# 
  3388  0495                     	;# 
  3389  0495                     	;# 
  3390  0496                     	;# 
  3391  0496                     	;# 
  3392  0497                     	;# 
  3393  0497                     	;# 
  3394  0595                     	;# 
  3395  0596                     	;# 
  3396  0597                     	;# 
  3397  059C                     	;# 
  3398  059D                     	;# 
  3399  059E                     	;# 
  3400  0611                     	;# 
  3401  0611                     	;# 
  3402  0612                     	;# 
  3403  0613                     	;# 
  3404  0614                     	;# 
  3405  0614                     	;# 
  3406  0615                     	;# 
  3407  0616                     	;# 
  3408  0617                     	;# 
  3409  0617                     	;# 
  3410  0618                     	;# 
  3411  0619                     	;# 
  3412  061A                     	;# 
  3413  061A                     	;# 
  3414  061B                     	;# 
  3415  061C                     	;# 
  3416  061D                     	;# 
  3417  061D                     	;# 
  3418  061E                     	;# 
  3419  061F                     	;# 
  3420  0FE4                     	;# 
  3421  0FE5                     	;# 
  3422  0FE6                     	;# 
  3423  0FE7                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEB                     	;# 
  3428  0FED                     	;# 
  3429  0FEE                     	;# 
  3430  0FEF                     	;_modArray
  3431                           
  3432                           	psect	idataBANK0
  3433  1800                     __pidataBANK0:	
  3434                           
  3435                           ;initializer for _baseline_delay_time
  3436  1800  34D0               	retlw	208
  3437  1801  3407               	retlw	7
  3438  1802  3400               	retlw	0
  3439  1803  3400               	retlw	0
  3440                           
  3441                           ;initializer for _delay_time
  3442  1804  34D0               	retlw	208
  3443  1805  3407               	retlw	7
  3444  1806  3400               	retlw	0
  3445  1807  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  1808  3401               	retlw	1
  3449  1809  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  180A  34E8               	retlw	232
  3453  180B  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  180C  3406               	retlw	6
  3457  180D  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  180E  3414               	retlw	20
  3461                           
  3462                           ;initializer for _feedback_state
  3463  180F  34FF               	retlw	255
  3464                           
  3465                           ;initializer for _longTap_state
  3466  1810  34FF               	retlw	255
  3467                           
  3468                           ;initializer for _num_taps
  3469  1811  3404               	retlw	4
  3470                           
  3471                           ;initializer for _presetChannel
  3472  1812  3401               	retlw	1
  3473                           
  3474                           ;initializer for _switchBypass_state
  3475  1813  34FF               	retlw	255
  3476                           
  3477                           	psect	idataBANK3
  3478  203C                     __pidataBANK3:	
  3479                           
  3480                           ;initializer for _blink_delay
  3481  203C  3464               	retlw	100
  3482  203D  3400               	retlw	0
  3483                           
  3484                           ;initializer for _knob1_prev
  3485  203E  34D0               	retlw	208
  3486  203F  3407               	retlw	7
  3487                           
  3488                           ;initializer for _knob2_prev
  3489  2040  34D0               	retlw	208
  3490  2041  3407               	retlw	7
  3491                           
  3492                           ;initializer for _knob3_prev
  3493  2042  34D0               	retlw	208
  3494  2043  3407               	retlw	7
  3495                           
  3496                           ;initializer for _knob4_prev
  3497  2044  34D0               	retlw	208
  3498  2045  3407               	retlw	7
  3499                           
  3500                           ;initializer for _knob5_prev
  3501  2046  34D0               	retlw	208
  3502  2047  3407               	retlw	7
  3503                           
  3504                           ;initializer for _mod_delay_time
  3505  2048  34D0               	retlw	208
  3506  2049  3407               	retlw	7
  3507                           
  3508                           ;initializer for _symmetry
  3509  204A  34B4               	retlw	180
  3510  204B  3400               	retlw	0
  3511                           
  3512                           ;initializer for _tap_iteration
  3513  204C  3401               	retlw	1
  3514  204D  3400               	retlw	0
  3515                           
  3516                           ;initializer for _blink_state
  3517  204E  3401               	retlw	1
  3518                           
  3519                           ;initializer for _currentBypassState
  3520  204F  34FF               	retlw	255
  3521                           
  3522                           ;initializer for _delay_time_changed
  3523  2050  3401               	retlw	1
  3524                           
  3525                           ;initializer for _expSwitchState
  3526  2051  34FF               	retlw	255
  3527                           
  3528                           ;initializer for _expressModeCnst
  3529  2052  3402               	retlw	2
  3530                           
  3531                           ;initializer for _expressionChannel
  3532  2053  3401               	retlw	1
  3533                           
  3534                           ;initializer for _presetModeCnst
  3535  2054  3401               	retlw	1
  3536                           
  3537                           ;initializer for _switchTap_state
  3538  2055  34FF               	retlw	255
  3539                           
  3540                           	psect	idataBANK4
  3541  0002                     __pidataBANK4:	
  3542                           
  3543                           ;initializer for _switchBypass_up
  3544  0002  3401               	retlw	1
  3545  0003  3400               	retlw	0
  3546                           
  3547                           	psect	stringtext
  3548  2800                     __pstringtext:	
  3549  2800                     exp@coeff:	
  3550  2800  3400               	retlw	0
  3551  2801  3480               	retlw	128
  3552  2802  343F               	retlw	63
  3553  2803  3472               	retlw	114
  3554  2804  3431               	retlw	49
  3555  2805  343F               	retlw	63
  3556  2806  34FE               	retlw	254
  3557  2807  3475               	retlw	117
  3558  2808  343E               	retlw	62
  3559  2809  3458               	retlw	88
  3560  280A  3463               	retlw	99
  3561  280B  343D               	retlw	61
  3562  280C  3495               	retlw	149
  3563  280D  341D               	retlw	29
  3564  280E  343C               	retlw	60
  3565  280F  34C5               	retlw	197
  3566  2810  34AE               	retlw	174
  3567  2811  343A               	retlw	58
  3568  2812  3479               	retlw	121
  3569  2813  3421               	retlw	33
  3570  2814  3439               	retlw	57
  3571  2815  3494               	retlw	148
  3572  2816  3480               	retlw	128
  3573  2817  3437               	retlw	55
  3574  2818  3493               	retlw	147
  3575  2819  34A7               	retlw	167
  3576  281A  3435               	retlw	53
  3577  281B  3456               	retlw	86
  3578  281C  3415               	retlw	21
  3579  281D  3434               	retlw	52
  3580  281E                     __end_ofexp@coeff:	
  3581  281E                     log@coeff:	
  3582  281E  3400               	retlw	0
  3583  281F  3400               	retlw	0
  3584  2820  3400               	retlw	0
  3585  2821  3400               	retlw	0
  3586  2822  3480               	retlw	128
  3587  2823  343F               	retlw	63
  3588  2824  34F0               	retlw	240
  3589  2825  34FF               	retlw	255
  3590  2826  34BE               	retlw	190
  3591  2827  34E2               	retlw	226
  3592  2828  34A9               	retlw	169
  3593  2829  343E               	retlw	62
  3594  282A  3483               	retlw	131
  3595  282B  3476               	retlw	118
  3596  282C  34BE               	retlw	190
  3597  282D  34AE               	retlw	174
  3598  282E  342B               	retlw	43
  3599  282F  343E               	retlw	62
  3600  2830  343C               	retlw	60
  3601  2831  34C3               	retlw	195
  3602  2832  34BD               	retlw	189
  3603  2833  34D2               	retlw	210
  3604  2834  3413               	retlw	19
  3605  2835  343D               	retlw	61
  3606  2836  3478               	retlw	120
  3607  2837  34D3               	retlw	211
  3608  2838  34BB               	retlw	187
  3609  2839                     __end_oflog@coeff:	
  3610  2839                     sin@coeff_a:	
  3611  2839  34F4               	retlw	244
  3612  283A  344A               	retlw	74
  3613  283B  3448               	retlw	72
  3614  283C  3495               	retlw	149
  3615  283D  3495               	retlw	149
  3616  283E  34C7               	retlw	199
  3617  283F  34C1               	retlw	193
  3618  2840  34DC               	retlw	220
  3619  2841  3445               	retlw	69
  3620  2842  34DC               	retlw	220
  3621  2843  346D               	retlw	109
  3622  2844  34C3               	retlw	195
  3623  2845  34B3               	retlw	179
  3624  2846  3433               	retlw	51
  3625  2847  3440               	retlw	64
  3626  2848                     __end_ofsin@coeff_a:	
  3627  2848                     sin@coeff_b:	
  3628  2848  3434               	retlw	52
  3629  2849  3401               	retlw	1
  3630  284A  3448               	retlw	72
  3631  284B  349D               	retlw	157
  3632  284C  34B0               	retlw	176
  3633  284D  3445               	retlw	69
  3634  284E  3400               	retlw	0
  3635  284F  34DA               	retlw	218
  3636  2850  3442               	retlw	66
  3637  2851  3400               	retlw	0
  3638  2852  3480               	retlw	128
  3639  2853  343F               	retlw	63
  3640  2854                     __end_ofsin@coeff_b:	
  3641  000B                     _INTCONbits	set	11
  3642  0011                     _PIR1bits	set	17
  3643  000C                     _PORTAbits	set	12
  3644  000E                     _PORTCbits	set	14
  3645  000F                     _PORTDbits	set	15
  3646  0010                     _PORTEbits	set	16
  3647  001B                     _PR2	set	27
  3648  001C                     _T2CONbits	set	28
  3649  005F                     _GIE	set	95
  3650  005E                     _PEIE	set	94
  3651  0069                     _RB1	set	105
  3652  009D                     _ADCON0bits	set	157
  3653  009E                     _ADCON1bits	set	158
  3654  009C                     _ADRESH	set	156
  3655  009B                     _ADRESL	set	155
  3656  0095                     _OPTION_REGbits	set	149
  3657  0099                     _OSCCONbits	set	153
  3658  008D                     _TRISBbits	set	141
  3659  008E                     _TRISCbits	set	142
  3660  008F                     _TRISDbits	set	143
  3661  0090                     _TRISEbits	set	144
  3662  048D                     _RCIE	set	1165
  3663  011D                     _APFCONbits	set	285
  3664  010D                     _LATBbits	set	269
  3665  010F                     _LATDbits	set	271
  3666  0190                     _ANSELEbits	set	400
  3667  0192                     _PMADRH	set	402
  3668  0191                     _PMADRL	set	401
  3669  0195                     _PMCON1bits	set	405
  3670  0196                     _PMCON2	set	406
  3671  0194                     _PMDATH	set	404
  3672  0193                     _PMDATL	set	403
  3673  0199                     _RCREG	set	409
  3674  019D                     _RCSTAbits	set	413
  3675  019B                     _SPBRG	set	411
  3676  019A                     _TXREG	set	410
  3677  019E                     _TXSTAbits	set	414
  3678  0291                     _CCPR1	set	657
  3679  0298                     _CCPR2	set	664
  3680  0293                     _CCP1CONbits	set	659
  3681  029A                     _CCP2CONbits	set	666
  3682  029D                     _CCPTMRS0	set	669
  3683  029E                     _CCPTMRS1	set	670
  3684  029F                     _CCPTMRS2	set	671
  3685  0311                     _CCPR3	set	785
  3686  0318                     _CCPR4	set	792
  3687  031C                     _CCPR5	set	796
  3688  0313                     _CCP3CONbits	set	787
  3689  031A                     _CCP4CONbits	set	794
  3690  031E                     _CCP5CONbits	set	798
  3691  030C                     _TRISFbits	set	780
  3692  030D                     _TRISGbits	set	781
  3693  038C                     _LATFbits	set	908
  3694  038D                     _LATGbits	set	909
  3695  040C                     _ANSELFbits	set	1036
  3696  061F                     _CCP10CONbits	set	1567
  3697  0613                     _CCP6CONbits	set	1555
  3698  0616                     _CCP7CONbits	set	1558
  3699  0619                     _CCP8CONbits	set	1561
  3700  061C                     _CCP9CONbits	set	1564
  3701                           
  3702                           ; #config settings
  3703  0000                     
  3704                           	psect	cinit
  3705  02E3                     start_initialization:	
  3706  02E3                     __initialization:		;BIGRAM
  3707                           
  3708                           ; Clear objects allocated to BIGRAM
  3709  02E3  308E               	movlw	low (0+9102)
  3710  02E4  0084               	movwf	4
  3711  02E5  3023               	movlw	high (0+9102)
  3712  02E6  0085               	movwf	5
  3713  02E7  3062               	movlw	98
  3714  02E8  00FE               	movwf	btemp
  3715  02E9  3002               	movlw	2
  3716  02EA  00FF               	movwf	btemp+1
  3717  02EB  3187  27F4  3182   	fcall	clear_ram0
  3718                           
  3719                           ; Clear objects allocated to COMMON
  3720  02EE  01FD               	clrf	__pbssCOMMON& (0+127)
  3721                           
  3722                           ; Clear objects allocated to BANK0
  3723  02EF  3059               	movlw	low __pbssBANK0
  3724  02F0  0084               	movwf	4
  3725  02F1  3000               	movlw	high __pbssBANK0
  3726  02F2  0085               	movwf	5
  3727  02F3  3011               	movlw	17
  3728  02F4  00FE               	movwf	btemp
  3729  02F5  3000               	movlw	0
  3730  02F6  00FF               	movwf	btemp+1
  3731  02F7  3187  27F4  3182   	fcall	clear_ram0
  3732                           
  3733                           ; Clear objects allocated to BANK2
  3734  02FA  0022               	movlb	2	; select bank2
  3735  02FB  01EA               	clrf	__pbssBANK2& (0+127)
  3736  02FC  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3737  02FD  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3738                           
  3739                           ; Clear objects allocated to BANK3
  3740  02FE  30A0               	movlw	low __pbssBANK3
  3741  02FF  0084               	movwf	4
  3742  0300  3001               	movlw	high __pbssBANK3
  3743  0301  0085               	movwf	5
  3744  0302  3027               	movlw	39
  3745  0303  00FE               	movwf	btemp
  3746  0304  3000               	movlw	0
  3747  0305  00FF               	movwf	btemp+1
  3748  0306  3187  27F4  3182   	fcall	clear_ram0
  3749                           
  3750                           ; Clear objects allocated to BANK4
  3751  0309  3020               	movlw	low __pbssBANK4
  3752  030A  0084               	movwf	4
  3753  030B  3002               	movlw	high __pbssBANK4
  3754  030C  0085               	movwf	5
  3755  030D  3039               	movlw	57
  3756  030E  00FE               	movwf	btemp
  3757  030F  3000               	movlw	0
  3758  0310  00FF               	movwf	btemp+1
  3759  0311  3187  27F4  3182   	fcall	clear_ram0
  3760                           
  3761                           ; Clear objects allocated to BANK5
  3762  0314  30A0               	movlw	low __pbssBANK5
  3763  0315  0084               	movwf	4
  3764  0316  3002               	movlw	high __pbssBANK5
  3765  0317  0085               	movwf	5
  3766  0318  302C               	movlw	44
  3767  0319  00FE               	movwf	btemp
  3768  031A  3000               	movlw	0
  3769  031B  00FF               	movwf	btemp+1
  3770  031C  3187  27F4  3182   	fcall	clear_ram0
  3771                           
  3772                           ; Clear objects allocated to BANK6
  3773  031F  3020               	movlw	low __pbssBANK6
  3774  0320  0084               	movwf	4
  3775  0321  3003               	movlw	high __pbssBANK6
  3776  0322  0085               	movwf	5
  3777  0323  3040               	movlw	64
  3778  0324  00FE               	movwf	btemp
  3779  0325  3000               	movlw	0
  3780  0326  00FF               	movwf	btemp+1
  3781  0327  3187  27F4  3182   	fcall	clear_ram0
  3782                           
  3783                           ; Clear objects allocated to BANK7
  3784  032A  30A0               	movlw	low __pbssBANK7
  3785  032B  0084               	movwf	4
  3786  032C  3003               	movlw	high __pbssBANK7
  3787  032D  0085               	movwf	5
  3788  032E  3040               	movlw	64
  3789  032F  00FE               	movwf	btemp
  3790  0330  3000               	movlw	0
  3791  0331  00FF               	movwf	btemp+1
  3792  0332  3187  27F4  3182   	fcall	clear_ram0
  3793                           
  3794                           ; Initialize objects allocated to BANK0
  3795  0335  3000               	movlw	low __pidataBANK0
  3796  0336  0084               	movwf	4
  3797  0337  3098               	movlw	(high __pidataBANK0)| (0+128)
  3798  0338  0085               	movwf	5
  3799  0339  3045               	movlw	low __pdataBANK0
  3800  033A  0086               	movwf	6
  3801  033B  3000               	movlw	high __pdataBANK0
  3802  033C  0087               	movwf	7
  3803  033D  3000               	movlw	0
  3804  033E  00FF               	movwf	btemp+1
  3805  033F  3014               	movlw	20
  3806  0340  31AF  278C  3182   	fcall	init_ram
  3807                           
  3808                           ; Initialize objects allocated to BANK3
  3809  0343  303C               	movlw	low __pidataBANK3
  3810  0344  0084               	movwf	4
  3811  0345  30A0               	movlw	(high __pidataBANK3)| (0+128)
  3812  0346  0085               	movwf	5
  3813  0347  30C7               	movlw	low __pdataBANK3
  3814  0348  0086               	movwf	6
  3815  0349  3001               	movlw	high __pdataBANK3
  3816  034A  0087               	movwf	7
  3817  034B  3000               	movlw	0
  3818  034C  00FF               	movwf	btemp+1
  3819  034D  301A               	movlw	26
  3820  034E  31AF  278C  3182   	fcall	init_ram
  3821                           
  3822                           ; Initialize objects allocated to BANK4
  3823  0351  0024               	movlb	4	; select bank4
  3824  0352  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3825  0355  00E2               	movwf	__pdataBANK4& (0+127)
  3826  0356  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3827  0358  00E3               	movwf	(__pdataBANK4+1)& (0+127)
  3828  0359                     end_of_initialization:	
  3829                           ;End of C runtime variable initialization code
  3830                           
  3831  0359                     __end_of__initialization:	
  3832  0359  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3833  035A  0020               	movlb	0
  3834  035B  3183  2B5D         	ljmp	_main	;jump to C main() function
  3835                           
  3836                           	psect	bssCOMMON
  3837  007D                     __pbssCOMMON:	
  3838  007D                     _UQFront:	
  3839  007D                     	ds	1
  3840                           
  3841                           	psect	bssBANK0
  3842  0059                     __pbssBANK0:	
  3843  0059                     _sub_timer:	
  3844  0059                     	ds	4
  3845  005D                     _tap_timer:	
  3846  005D                     	ds	4
  3847  0061                     _timer:	
  3848  0061                     	ds	4
  3849  0065                     _UQEnd:	
  3850  0065                     	ds	1
  3851  0066                     _doubleTap_state:	
  3852  0066                     	ds	1
  3853  0067                     _mode2_state:	
  3854  0067                     	ds	1
  3855  0068                     _presetSaveMode:	
  3856  0068                     	ds	1
  3857  0069                     _suspend_blink:	
  3858  0069                     	ds	1
  3859                           
  3860                           	psect	dataBANK0
  3861  0045                     __pdataBANK0:	
  3862  0045                     _baseline_delay_time:	
  3863  0045                     	ds	4
  3864  0049                     _delay_time:	
  3865  0049                     	ds	4
  3866  004D                     _bottom_push_state:	
  3867  004D                     	ds	2
  3868  004F                     _long_press_limit:	
  3869  004F                     	ds	2
  3870  0051                     _top_push_state:	
  3871  0051                     	ds	2
  3872  0053                     _blink_rate:	
  3873  0053                     	ds	1
  3874  0054                     _feedback_state:	
  3875  0054                     	ds	1
  3876  0055                     _longTap_state:	
  3877  0055                     	ds	1
  3878  0056                     _num_taps:	
  3879  0056                     	ds	1
  3880  0057                     _presetChannel:	
  3881  0057                     	ds	1
  3882  0058                     _switchBypass_state:	
  3883  0058                     	ds	1
  3884                           
  3885                           	psect	bssBANK2
  3886  016A                     __pbssBANK2:	
  3887  016A                     _feedback_start:	
  3888  016A                     	ds	1
  3889  016B                     _longTap_start:	
  3890  016B                     	ds	1
  3891  016C                     _switchTap_pressed:	
  3892  016C                     	ds	1
  3893                           
  3894                           	psect	bssBANK3
  3895  01A0                     __pbssBANK3:	
  3896  01A0                     _double_timer:	
  3897  01A0                     	ds	4
  3898  01A4                     _mod_timer:	
  3899  01A4                     	ds	4
  3900  01A8                     _feedback_timer:	
  3901  01A8                     	ds	2
  3902  01AA                     _knob_1_pos:	
  3903  01AA                     	ds	2
  3904  01AC                     _knob_2_pos:	
  3905  01AC                     	ds	2
  3906  01AE                     _knob_3_pos:	
  3907  01AE                     	ds	2
  3908  01B0                     _knob_4_pos:	
  3909  01B0                     	ds	2
  3910  01B2                     _knob_5_pos:	
  3911  01B2                     	ds	2
  3912  01B4                     _longTap_timer:	
  3913  01B4                     	ds	2
  3914  01B6                     _mod_counter:	
  3915  01B6                     	ds	2
  3916  01B8                     _mod_value:	
  3917  01B8                     	ds	2
  3918  01BA                     _switchBypass_pressed:	
  3919  01BA                     	ds	2
  3920  01BC                     _adjust_sub_delay:	
  3921  01BC                     	ds	1
  3922  01BD                     _bottomTactile_pressed:	
  3923  01BD                     	ds	1
  3924  01BE                     _bypass_turning_on:	
  3925  01BE                     	ds	1
  3926  01BF                     _iCnt:	
  3927  01BF                     	ds	1
  3928  01C0                     _mode1_state:	
  3929  01C0                     	ds	1
  3930  01C1                     _modulation_changed:	
  3931  01C1                     	ds	1
  3932  01C2                     _preset_blink:	
  3933  01C2                     	ds	1
  3934  01C3                     _preset_programmning_on:	
  3935  01C3                     	ds	1
  3936  01C4                     _reset_sub_delay:	
  3937  01C4                     	ds	1
  3938  01C5                     _switchTap_down:	
  3939  01C5                     	ds	1
  3940  01C6                     _topTactile_pressed:	
  3941  01C6                     	ds	1
  3942                           
  3943                           	psect	dataBANK3
  3944  01C7                     __pdataBANK3:	
  3945  01C7                     _blink_delay:	
  3946  01C7                     	ds	2
  3947  01C9                     _knob1_prev:	
  3948  01C9                     	ds	2
  3949  01CB                     _knob2_prev:	
  3950  01CB                     	ds	2
  3951  01CD                     _knob3_prev:	
  3952  01CD                     	ds	2
  3953  01CF                     _knob4_prev:	
  3954  01CF                     	ds	2
  3955  01D1                     _knob5_prev:	
  3956  01D1                     	ds	2
  3957  01D3                     _mod_delay_time:	
  3958  01D3                     	ds	2
  3959  01D5                     _symmetry:	
  3960  01D5                     	ds	2
  3961  01D7                     _tap_iteration:	
  3962  01D7                     	ds	2
  3963  01D9                     _blink_state:	
  3964  01D9                     	ds	1
  3965  01DA                     _currentBypassState:	
  3966  01DA                     	ds	1
  3967  01DB                     _delay_time_changed:	
  3968  01DB                     	ds	1
  3969  01DC                     _expSwitchState:	
  3970  01DC                     	ds	1
  3971  01DD                     _expressModeCnst:	
  3972  01DD                     	ds	1
  3973  01DE                     _expressionChannel:	
  3974  01DE                     	ds	1
  3975  01DF                     _presetModeCnst:	
  3976  01DF                     	ds	1
  3977  01E0                     _switchTap_state:	
  3978  01E0                     	ds	1
  3979                           
  3980                           	psect	bssBANK4
  3981  0220                     __pbssBANK4:	
  3982  0220                     _tap_history:	
  3983  0220                     	ds	20
  3984  0234                     USARTWriteInt@F3536:	
  3985  0234                     	ds	5
  3986  0239                     _ledState:	
  3987  0239                     	ds	4
  3988  023D                     _tap_total:	
  3989  023D                     	ds	4
  3990  0241                     _test_timer:	
  3991  0241                     	ds	4
  3992  0245                     _adjusted_pot_value:	
  3993  0245                     	ds	2
  3994  0247                     _debounce_bypass:	
  3995  0247                     	ds	2
  3996  0249                     _debounce_count:	
  3997  0249                     	ds	2
  3998  024B                     _debounce_mode1:	
  3999  024B                     	ds	2
  4000  024D                     _debounce_mode2:	
  4001  024D                     	ds	2
  4002  024F                     _delay_counter:	
  4003  024F                     	ds	2
  4004  0251                     _delayfound:	
  4005  0251                     	ds	2
  4006  0253                     _errno:	
  4007  0253                     	ds	2
  4008  0255                     _switchBypass_toggle:	
  4009  0255                     	ds	2
  4010  0257                     _tmpVal:	
  4011  0257                     	ds	2
  4012                           
  4013                           	psect	dataBANK4
  4014  0262                     __pdataBANK4:	
  4015  0262                     _switchBypass_up:	
  4016  0262                     	ds	2
  4017                           
  4018                           	psect	bssBANK5
  4019  02A0                     __pbssBANK5:	
  4020  02A0                     _tap:	
  4021  02A0                     	ds	44
  4022                           
  4023                           	psect	bssBANK6
  4024  0320                     __pbssBANK6:	
  4025  0320                     _URBuff:	
  4026  0320                     	ds	64
  4027                           
  4028                           	psect	bssBANK7
  4029  03A0                     __pbssBANK7:	
  4030  03A0                     _myBuf:	
  4031  03A0                     	ds	64
  4032                           
  4033                           	psect	clrtext
  4034  07F4                     clear_ram0:	
  4035                           ;	Called with FSR0 containing the base address, and
  4036                           ;	btemp/btemp+1 has the size to clear
  4037                           
  4038  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
  4039  07F5                     clrloop0:	
  4040  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
  4041  07F6  3101               	addfsr 0,1
  4042  07F7  3001               	movlw	1
  4043  07F8  02FE               	subwf	126,f
  4044  07F9  3000               	movlw	0
  4045  07FA  3BFF               	subwfb	127,f
  4046  07FB  087F               	movf	127,w
  4047  07FC  047E               	iorwf	126,w
  4048  07FD  1903               	btfsc	3,2
  4049  07FE  3400               	retlw	0	;all done for this memory range, return
  4050  07FF  2FF5               	goto	clrloop0	;have we reached the end yet?
  4051                           
  4052                           	psect	inittext
  4053  2F8C                     init_ram:	
  4054  2F8C  00FE               	movwf	126
  4055  2F8D                     initloop:	
  4056  2F8D  0012               	moviw fsr0++
  4057  2F8E  001E               	movwi fsr1++
  4058  2F8F  3001               	movlw	1
  4059  2F90  02FE               	subwf	126,f
  4060  2F91  3000               	movlw	0
  4061  2F92  3BFF               	subwfb	127,f
  4062  2F93  087F               	movf	127,w
  4063  2F94  047E               	iorwf	126,w
  4064  2F95  1903               	btfsc	3,2
  4065  2F96  3400               	retlw	0
  4066  2F97  2F8D               	goto	initloop
  4067                           
  4068                           	psect	cstackBANK4
  4069  0259                     __pcstackBANK4:	
  4070  0259                     _main$2806:	
  4071                           
  4072                           ; 3 bytes @ 0x0
  4073  0259                     	ds	3
  4074  025C                     _main$2807:	
  4075                           
  4076                           ; 3 bytes @ 0x3
  4077  025C                     	ds	3
  4078  025F                     _main$2808:	
  4079                           
  4080                           ; 3 bytes @ 0x6
  4081  025F                     	ds	3
  4082                           
  4083                           	psect	cstackBANK3
  4084  01E1                     __pcstackBANK3:	
  4085  01E1                     scaleA100kPot@pwm:	
  4086  01E1                     scaleA10kPot@pwm:	
  4087                           ; 3 bytes @ 0x0
  4088                           
  4089  01E1                     scaleiA10kPot@pwm:	
  4090                           ; 3 bytes @ 0x0
  4091                           
  4092                           
  4093                           ; 3 bytes @ 0x0
  4094  01E1                     	ds	3
  4095  01E4                     _scaleA100kPot$2811:	
  4096  01E4                     _scaleA10kPot$2815:	
  4097                           ; 3 bytes @ 0x3
  4098                           
  4099  01E4                     _scaleiA10kPot$2817:	
  4100                           ; 3 bytes @ 0x3
  4101                           
  4102                           
  4103                           ; 3 bytes @ 0x3
  4104  01E4                     	ds	3
  4105  01E7                     _scaleA100kPot$2812:	
  4106  01E7                     _scaleA10kPot$2816:	
  4107                           ; 3 bytes @ 0x6
  4108                           
  4109  01E7                     _scaleiA10kPot$2818:	
  4110                           ; 3 bytes @ 0x6
  4111                           
  4112                           
  4113                           ; 3 bytes @ 0x6
  4114  01E7                     	ds	3
  4115  01EA                     ??_main:	
  4116                           
  4117                           ; 1 bytes @ 0x9
  4118  01EA                     	ds	5
  4119                           
  4120                           	psect	cstackBANK2
  4121  0120                     __pcstackBANK2:	
  4122  0120                     ?___fttol:	
  4123  0120                     ___fttol@f1:	
  4124                           ; 4 bytes @ 0x0
  4125                           
  4126                           
  4127                           ; 3 bytes @ 0x0
  4128  0120                     	ds	4
  4129  0124                     ??___fttol:	
  4130                           
  4131                           ; 1 bytes @ 0x4
  4132  0124                     	ds	4
  4133  0128                     ___fttol@sign1:	
  4134                           
  4135                           ; 1 bytes @ 0x8
  4136  0128                     	ds	1
  4137  0129                     ___fttol@lval:	
  4138                           
  4139                           ; 4 bytes @ 0x9
  4140  0129                     	ds	4
  4141  012D                     ___fttol@exp1:	
  4142                           
  4143                           ; 1 bytes @ 0xD
  4144  012D                     	ds	1
  4145  012E                     ?_modTri:	
  4146  012E                     ?_modSaw:	
  4147                           ; 2 bytes @ 0xE
  4148                           
  4149  012E                     ?___wmul:	
  4150                           ; 2 bytes @ 0xE
  4151                           
  4152  012E                     ?___altoft:	
  4153                           ; 2 bytes @ 0xE
  4154                           
  4155  012E                     ___wmul@multiplier:	
  4156                           ; 3 bytes @ 0xE
  4157                           
  4158  012E                     modTri@angle:	
  4159                           ; 2 bytes @ 0xE
  4160                           
  4161  012E                     modSaw@angle:	
  4162                           ; 3 bytes @ 0xE
  4163                           
  4164  012E                     ___altoft@c:	
  4165                           ; 3 bytes @ 0xE
  4166                           
  4167                           
  4168                           ; 4 bytes @ 0xE
  4169  012E                     	ds	2
  4170  0130                     ___wmul@multiplicand:	
  4171                           
  4172                           ; 2 bytes @ 0x10
  4173  0130                     	ds	1
  4174  0131                     modTri@inflection:	
  4175  0131                     modSaw@inflection:	
  4176                           ; 3 bytes @ 0x11
  4177                           
  4178                           
  4179                           ; 3 bytes @ 0x11
  4180  0131                     	ds	1
  4181  0132                     ??___altoft:	
  4182  0132                     ___wmul@product:	
  4183                           ; 1 bytes @ 0x12
  4184                           
  4185                           
  4186                           ; 2 bytes @ 0x12
  4187  0132                     	ds	2
  4188  0134                     ?_modSin:	
  4189  0134                     ?_eval_poly:	
  4190                           ; 2 bytes @ 0x14
  4191                           
  4192  0134                     ___altoft@exp:	
  4193                           ; 3 bytes @ 0x14
  4194                           
  4195  0134                     modSin@angle:	
  4196                           ; 1 bytes @ 0x14
  4197                           
  4198  0134                     eval_poly@x:	
  4199                           ; 3 bytes @ 0x14
  4200                           
  4201  0134                     _modTri$2820:	
  4202                           ; 3 bytes @ 0x14
  4203                           
  4204  0134                     _modSaw$2821:	
  4205                           ; 3 bytes @ 0x14
  4206                           
  4207                           
  4208                           ; 3 bytes @ 0x14
  4209  0134                     	ds	1
  4210  0135                     ___altoft@sign:	
  4211                           
  4212                           ; 1 bytes @ 0x15
  4213  0135                     	ds	1
  4214  0136                     ?_trunc:	
  4215  0136                     ?_floor:	
  4216                           ; 3 bytes @ 0x16
  4217                           
  4218  0136                     trunc@x:	
  4219                           ; 3 bytes @ 0x16
  4220                           
  4221  0136                     floor@x:	
  4222                           ; 3 bytes @ 0x16
  4223                           
  4224                           
  4225                           ; 3 bytes @ 0x16
  4226  0136                     	ds	1
  4227  0137                     eval_poly@d:	
  4228  0137                     modSin@inflection:	
  4229                           ; 2 bytes @ 0x17
  4230                           
  4231  0137                     modTri@shift:	
  4232                           ; 3 bytes @ 0x17
  4233                           
  4234  0137                     _modSaw$2822:	
  4235                           ; 3 bytes @ 0x17
  4236                           
  4237                           
  4238                           ; 3 bytes @ 0x17
  4239  0137                     	ds	2
  4240  0139                     ??_trunc:	
  4241  0139                     ??_floor:	
  4242                           ; 1 bytes @ 0x19
  4243                           
  4244  0139                     eval_poly@n:	
  4245                           ; 1 bytes @ 0x19
  4246                           
  4247                           
  4248                           ; 2 bytes @ 0x19
  4249  0139                     	ds	1
  4250  013A                     ??_modSin:	
  4251  013A                     modTri@period:	
  4252                           ; 1 bytes @ 0x1A
  4253                           
  4254  013A                     trunc@i:	
  4255                           ; 3 bytes @ 0x1A
  4256                           
  4257  013A                     floor@i:	
  4258                           ; 3 bytes @ 0x1A
  4259                           
  4260  013A                     _modSaw$2823:	
  4261                           ; 3 bytes @ 0x1A
  4262                           
  4263                           
  4264                           ; 3 bytes @ 0x1A
  4265  013A                     	ds	1
  4266  013B                     eval_poly@res:	
  4267                           
  4268                           ; 3 bytes @ 0x1B
  4269  013B                     	ds	1
  4270  013C                     _modSin$2819:	
  4271                           
  4272                           ; 3 bytes @ 0x1C
  4273  013C                     	ds	1
  4274  013D                     modSaw@mod:	
  4275  013D                     trunc@expon:	
  4276                           ; 2 bytes @ 0x1D
  4277                           
  4278  013D                     floor@expon:	
  4279                           ; 2 bytes @ 0x1D
  4280                           
  4281  013D                     modTri@tmpVal:	
  4282                           ; 2 bytes @ 0x1D
  4283                           
  4284                           
  4285                           ; 3 bytes @ 0x1D
  4286  013D                     	ds	1
  4287  013E                     ?_log:	
  4288  013E                     ?_ldexp:	
  4289                           ; 3 bytes @ 0x1E
  4290                           
  4291  013E                     ldexp@value:	
  4292                           ; 3 bytes @ 0x1E
  4293                           
  4294  013E                     log@x:	
  4295                           ; 3 bytes @ 0x1E
  4296                           
  4297                           
  4298                           ; 3 bytes @ 0x1E
  4299  013E                     	ds	1
  4300  013F                     ?_set_subdivision:	
  4301  013F                     ?___ftsub:	
  4302                           ; 2 bytes @ 0x1F
  4303                           
  4304  013F                     set_subdivision@x:	
  4305                           ; 3 bytes @ 0x1F
  4306                           
  4307  013F                     modSin@shift:	
  4308                           ; 2 bytes @ 0x1F
  4309                           
  4310  013F                     modSaw@shift:	
  4311                           ; 3 bytes @ 0x1F
  4312                           
  4313  013F                     ___ftsub@f2:	
  4314                           ; 3 bytes @ 0x1F
  4315                           
  4316                           
  4317                           ; 3 bytes @ 0x1F
  4318  013F                     	ds	2
  4319  0141                     ??_log:	
  4320  0141                     set_subdivision@y:	
  4321                           ; 1 bytes @ 0x21
  4322                           
  4323  0141                     ldexp@newexp:	
  4324                           ; 2 bytes @ 0x21
  4325                           
  4326                           
  4327                           ; 2 bytes @ 0x21
  4328  0141                     	ds	1
  4329  0142                     log@exponent:	
  4330  0142                     modSin@period:	
  4331                           ; 2 bytes @ 0x22
  4332                           
  4333  0142                     modSaw@period:	
  4334                           ; 3 bytes @ 0x22
  4335                           
  4336  0142                     ___ftsub@f1:	
  4337                           ; 3 bytes @ 0x22
  4338                           
  4339                           
  4340                           ; 3 bytes @ 0x22
  4341  0142                     	ds	1
  4342  0143                     ??_set_subdivision:	
  4343  0143                     ??_ldexp:	
  4344                           ; 1 bytes @ 0x23
  4345                           
  4346                           
  4347                           ; 1 bytes @ 0x23
  4348  0143                     	ds	2
  4349  0145                     ?_modSawRev:	
  4350  0145                     ?_sin:	
  4351                           ; 2 bytes @ 0x25
  4352                           
  4353  0145                     modSin@tmpVal:	
  4354                           ; 3 bytes @ 0x25
  4355                           
  4356  0145                     modSawRev@angle:	
  4357                           ; 3 bytes @ 0x25
  4358                           
  4359  0145                     sin@f:	
  4360                           ; 3 bytes @ 0x25
  4361                           
  4362  0145                     _ldexp$2615:	
  4363                           ; 3 bytes @ 0x25
  4364                           
  4365                           
  4366                           ; 3 bytes @ 0x25
  4367  0145                     	ds	1
  4368  0146                     set_subdivision@scalar:	
  4369                           
  4370                           ; 3 bytes @ 0x26
  4371  0146                     	ds	2
  4372  0148                     ??_sin:	
  4373  0148                     ?_modSquare:	
  4374                           ; 1 bytes @ 0x28
  4375                           
  4376  0148                     ?_exp:	
  4377                           ; 2 bytes @ 0x28
  4378                           
  4379  0148                     modSawRev@inflection:	
  4380                           ; 3 bytes @ 0x28
  4381                           
  4382  0148                     modSquare@angle:	
  4383                           ; 3 bytes @ 0x28
  4384                           
  4385  0148                     exp@x:	
  4386                           ; 3 bytes @ 0x28
  4387                           
  4388                           
  4389                           ; 3 bytes @ 0x28
  4390  0148                     	ds	1
  4391  0149                     set_subdivision@tmpX:	
  4392  0149                     sin@y:	
  4393                           ; 2 bytes @ 0x29
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x29
  4397  0149                     	ds	2
  4398  014B                     ??_modSawRev:	
  4399  014B                     ??_exp:	
  4400                           ; 1 bytes @ 0x2B
  4401                           
  4402  014B                     modSquare@inflection:	
  4403                           ; 1 bytes @ 0x2B
  4404                           
  4405                           
  4406                           ; 3 bytes @ 0x2B
  4407  014B                     	ds	1
  4408  014C                     _sin$2826:	
  4409  014C                     _exp$2827:	
  4410                           ; 3 bytes @ 0x2C
  4411                           
  4412                           
  4413                           ; 3 bytes @ 0x2C
  4414  014C                     	ds	2
  4415  014E                     modSquare@tmpVal:	
  4416                           
  4417                           ; 2 bytes @ 0x2E
  4418  014E                     	ds	1
  4419  014F                     sin@x2:	
  4420  014F                     _exp$2583:	
  4421                           ; 3 bytes @ 0x2F
  4422                           
  4423                           
  4424                           ; 3 bytes @ 0x2F
  4425  014F                     	ds	1
  4426  0150                     ??_updateModulationArray:	
  4427                           
  4428                           ; 1 bytes @ 0x30
  4429  0150                     	ds	2
  4430  0152                     sin@sgn:	
  4431  0152                     exp@exponent:	
  4432                           ; 1 bytes @ 0x32
  4433                           
  4434                           
  4435                           ; 2 bytes @ 0x32
  4436  0152                     	ds	1
  4437  0153                     ??_calcSinArray:	
  4438                           
  4439                           ; 1 bytes @ 0x33
  4440  0153                     	ds	1
  4441  0154                     exp@sign:	
  4442  0154                     updateModulationArray@thisAngle:	
  4443                           ; 1 bytes @ 0x34
  4444                           
  4445                           
  4446                           ; 2 bytes @ 0x34
  4447  0154                     	ds	1
  4448  0155                     ?_pow:	
  4449  0155                     pow@x:	
  4450                           ; 3 bytes @ 0x35
  4451                           
  4452                           
  4453                           ; 3 bytes @ 0x35
  4454  0155                     	ds	1
  4455  0156                     updateModulationArray@iAngle:	
  4456                           
  4457                           ; 1 bytes @ 0x36
  4458  0156                     	ds	1
  4459  0157                     calcSinArray@x:	
  4460                           
  4461                           ; 1 bytes @ 0x37
  4462  0157                     	ds	1
  4463  0158                     calcSinArray@tmpVal:	
  4464  0158                     pow@y:	
  4465                           ; 3 bytes @ 0x38
  4466                           
  4467                           
  4468                           ; 3 bytes @ 0x38
  4469  0158                     	ds	3
  4470  015B                     ??_pow:	
  4471  015B                     calcSinArray@iAngle:	
  4472                           ; 1 bytes @ 0x3B
  4473                           
  4474                           
  4475                           ; 1 bytes @ 0x3B
  4476  015B                     	ds	1
  4477  015C                     _pow$2824:	
  4478                           
  4479                           ; 3 bytes @ 0x3C
  4480  015C                     	ds	3
  4481  015F                     _pow$2825:	
  4482                           
  4483                           ; 3 bytes @ 0x3F
  4484  015F                     	ds	3
  4485  0162                     pow@sign:	
  4486                           
  4487                           ; 1 bytes @ 0x42
  4488  0162                     	ds	1
  4489  0163                     pow@yi:	
  4490                           
  4491                           ; 4 bytes @ 0x43
  4492  0163                     	ds	4
  4493  0167                     ?_scaleA10kPot:	
  4494  0167                     ?_scaleiA10kPot:	
  4495                           ; 2 bytes @ 0x47
  4496                           
  4497  0167                     ?_scaleA100kPot:	
  4498                           ; 2 bytes @ 0x47
  4499                           
  4500  0167                     scaleA100kPot@input:	
  4501                           ; 2 bytes @ 0x47
  4502                           
  4503  0167                     scaleA10kPot@input:	
  4504                           ; 3 bytes @ 0x47
  4505                           
  4506  0167                     scaleiA10kPot@input:	
  4507                           ; 3 bytes @ 0x47
  4508                           
  4509                           
  4510                           ; 3 bytes @ 0x47
  4511  0167                     	ds	3
  4512                           
  4513                           	psect	cstackBANK1
  4514  00A0                     __pcstackBANK1:	
  4515  00A0                     ?___ftge:	
  4516  00A0                     ?_set_leds_top:	
  4517                           ; 1 bit 
  4518                           
  4519  00A0                     ?_USARTInit:	
  4520                           ; 1 bytes @ 0x0
  4521                           
  4522  00A0                     ??_ConfigureOscillator:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  00A0                     ??_InitApp:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  00A0                     ??_InitializeTaps:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  00A0                     ??_init_adc:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  00A0                     ??_init_pwm:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  00A0                     ??_init_timer2:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  00A0                     ??_init_timer0:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  00A0                     ?_set_leds_bottom:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  00A0                     ?_setFeedbackState:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  00A0                     ?_setLongTapState:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  00A0                     ?_updateSwitchBypassState:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  00A0                     ?_adc_convert:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  00A0                     ?_FLASH_ReadWord:	
  4559                           ; 2 bytes @ 0x0
  4560                           
  4561  00A0                     ?_getSwitchBypassState:	
  4562                           ; 2 bytes @ 0x0
  4563                           
  4564  00A0                     ?___ftpack:	
  4565                           ; 2 bytes @ 0x0
  4566                           
  4567  00A0                     ?_frexp:	
  4568                           ; 3 bytes @ 0x0
  4569                           
  4570  00A0                     ?___lmul:	
  4571                           ; 3 bytes @ 0x0
  4572                           
  4573  00A0                     ?___aldiv:	
  4574                           ; 4 bytes @ 0x0
  4575                           
  4576  00A0                     FLASH_ReadWord@flashAddr:	
  4577                           ; 4 bytes @ 0x0
  4578                           
  4579  00A0                     set_leds_top@x:	
  4580                           ; 2 bytes @ 0x0
  4581                           
  4582  00A0                     set_leds_bottom@x:	
  4583                           ; 2 bytes @ 0x0
  4584                           
  4585  00A0                     updateSwitchBypassState@state:	
  4586                           ; 2 bytes @ 0x0
  4587                           
  4588  00A0                     setFeedbackState@f_state:	
  4589                           ; 2 bytes @ 0x0
  4590                           
  4591  00A0                     setLongTapState@f_state:	
  4592                           ; 2 bytes @ 0x0
  4593                           
  4594  00A0                     USARTInit@baud_rate:	
  4595                           ; 2 bytes @ 0x0
  4596                           
  4597  00A0                     ___ftpack@arg:	
  4598                           ; 2 bytes @ 0x0
  4599                           
  4600  00A0                     ___ftge@ff1:	
  4601                           ; 3 bytes @ 0x0
  4602                           
  4603  00A0                     frexp@value:	
  4604                           ; 3 bytes @ 0x0
  4605                           
  4606  00A0                     ___lmul@multiplier:	
  4607                           ; 3 bytes @ 0x0
  4608                           
  4609  00A0                     ___aldiv@divisor:	
  4610                           ; 4 bytes @ 0x0
  4611                           
  4612                           
  4613                           ; 4 bytes @ 0x0
  4614  00A0                     	ds	1
  4615  00A1                     InitializeTaps@itap:	
  4616                           
  4617                           ; 2 bytes @ 0x1
  4618  00A1                     	ds	1
  4619  00A2                     ??_USARTInit:	
  4620  00A2                     ??_adc_convert:	
  4621                           ; 1 bytes @ 0x2
  4622                           
  4623  00A2                     ??_FLASH_ReadWord:	
  4624                           ; 1 bytes @ 0x2
  4625                           
  4626  00A2                     ??_set_leds_bottom:	
  4627                           ; 1 bytes @ 0x2
  4628                           
  4629  00A2                     ??_setFeedbackState:	
  4630                           ; 1 bytes @ 0x2
  4631                           
  4632  00A2                     ??_setLongTapState:	
  4633                           ; 1 bytes @ 0x2
  4634                           
  4635  00A2                     ??_updateSwitchBypassState:	
  4636                           ; 1 bytes @ 0x2
  4637                           
  4638  00A2                     ??_getSwitchBypassState:	
  4639                           ; 1 bytes @ 0x2
  4640                           
  4641  00A2                     FLASH_ReadWord@GIEBitValue:	
  4642                           ; 1 bytes @ 0x2
  4643                           
  4644  00A2                     set_leds_top@ledState:	
  4645                           ; 1 bytes @ 0x2
  4646                           
  4647                           
  4648                           ; 2 bytes @ 0x2
  4649  00A2                     	ds	1
  4650  00A3                     adc_convert@channel:	
  4651  00A3                     ___ftpack@exp:	
  4652                           ; 1 bytes @ 0x3
  4653                           
  4654  00A3                     frexp@eptr:	
  4655                           ; 1 bytes @ 0x3
  4656                           
  4657  00A3                     ___ftge@ff2:	
  4658                           ; 1 bytes @ 0x3
  4659                           
  4660                           
  4661                           ; 3 bytes @ 0x3
  4662  00A3                     	ds	1
  4663  00A4                     ??_set_leds_top:	
  4664  00A4                     ??_ReadSavedSettings:	
  4665                           ; 1 bytes @ 0x4
  4666                           
  4667  00A4                     ??_resetRingLEDs:	
  4668                           ; 1 bytes @ 0x4
  4669                           
  4670  00A4                     ??_setPresetDisplay:	
  4671                           ; 1 bytes @ 0x4
  4672                           
  4673  00A4                     ??_setExpressionDisplay:	
  4674                           ; 1 bytes @ 0x4
  4675                           
  4676  00A4                     ??_frexp:	
  4677                           ; 1 bytes @ 0x4
  4678                           
  4679  00A4                     ___ftpack@sign:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  00A4                     ___lmul@multiplicand:	
  4683                           ; 1 bytes @ 0x4
  4684                           
  4685  00A4                     ___aldiv@dividend:	
  4686                           ; 4 bytes @ 0x4
  4687                           
  4688                           
  4689                           ; 4 bytes @ 0x4
  4690  00A4                     	ds	1
  4691  00A5                     ??___ftpack:	
  4692                           
  4693                           ; 1 bytes @ 0x5
  4694  00A5                     	ds	1
  4695  00A6                     ??___ftge:	
  4696  00A6                     setPresetDisplay@ledChannel:	
  4697                           ; 1 bytes @ 0x6
  4698                           
  4699  00A6                     setExpressionDisplay@ledChannel:	
  4700                           ; 1 bytes @ 0x6
  4701                           
  4702                           
  4703                           ; 1 bytes @ 0x6
  4704  00A6                     	ds	1
  4705  00A7                     ??_update_mode:	
  4706  00A7                     ??_update_selectMode:	
  4707                           ; 1 bytes @ 0x7
  4708                           
  4709  00A7                     ??_setPedalMode:	
  4710                           ; 1 bytes @ 0x7
  4711                           
  4712                           
  4713                           ; 1 bytes @ 0x7
  4714  00A7                     	ds	1
  4715  00A8                     ??___lmul:	
  4716  00A8                     ??___aldiv:	
  4717                           ; 1 bytes @ 0x8
  4718                           
  4719  00A8                     ?___awtoft:	
  4720                           ; 1 bytes @ 0x8
  4721                           
  4722  00A8                     ?___lltoft:	
  4723                           ; 3 bytes @ 0x8
  4724                           
  4725  00A8                     ___awtoft@c:	
  4726                           ; 3 bytes @ 0x8
  4727                           
  4728  00A8                     ___lmul@product:	
  4729                           ; 2 bytes @ 0x8
  4730                           
  4731  00A8                     ___lltoft@c:	
  4732                           ; 4 bytes @ 0x8
  4733                           
  4734                           
  4735                           ; 4 bytes @ 0x8
  4736  00A8                     	ds	1
  4737  00A9                     ___aldiv@counter:	
  4738                           
  4739                           ; 1 bytes @ 0x9
  4740  00A9                     	ds	1
  4741  00AA                     ___aldiv@sign:	
  4742                           
  4743                           ; 1 bytes @ 0xA
  4744  00AA                     	ds	1
  4745  00AB                     ??___awtoft:	
  4746  00AB                     ___aldiv@quotient:	
  4747                           ; 1 bytes @ 0xB
  4748                           
  4749                           
  4750                           ; 4 bytes @ 0xB
  4751  00AB                     	ds	1
  4752  00AC                     ?_wait_ms:	
  4753  00AC                     ??___lltoft:	
  4754                           ; 1 bytes @ 0xC
  4755                           
  4756  00AC                     wait_ms@timeSec:	
  4757                           ; 1 bytes @ 0xC
  4758                           
  4759                           
  4760                           ; 2 bytes @ 0xC
  4761  00AC                     	ds	1
  4762  00AD                     ___awtoft@sign:	
  4763  00AD                     ___lltoft@exp:	
  4764                           ; 1 bytes @ 0xD
  4765                           
  4766                           
  4767                           ; 1 bytes @ 0xD
  4768  00AD                     	ds	1
  4769  00AE                     ??_wait_ms:	
  4770  00AE                     ?___ftmul:	
  4771                           ; 1 bytes @ 0xE
  4772                           
  4773  00AE                     ___ftmul@f1:	
  4774                           ; 3 bytes @ 0xE
  4775                           
  4776  00AE                     wait_ms@timemsl:	
  4777                           ; 3 bytes @ 0xE
  4778                           
  4779                           
  4780                           ; 4 bytes @ 0xE
  4781  00AE                     	ds	3
  4782  00B1                     ___ftmul@f2:	
  4783                           
  4784                           ; 3 bytes @ 0x11
  4785  00B1                     	ds	1
  4786  00B2                     ??_read_bottom_tactile:	
  4787  00B2                     ??_read_top_tactile:	
  4788                           ; 1 bytes @ 0x12
  4789                           
  4790  00B2                     ??_solidring_tactiles:	
  4791                           ; 1 bytes @ 0x12
  4792                           
  4793  00B2                     ??_ring_tactiles:	
  4794                           ; 1 bytes @ 0x12
  4795                           
  4796  00B2                     ?_setSwitchBypassState:	
  4797                           ; 1 bytes @ 0x12
  4798                           
  4799  00B2                     setSwitchBypassState@f_state:	
  4800                           ; 1 bytes @ 0x12
  4801                           
  4802                           
  4803                           ; 2 bytes @ 0x12
  4804  00B2                     	ds	1
  4805  00B3                     ring_tactiles@iLed:	
  4806                           
  4807                           ; 2 bytes @ 0x13
  4808  00B3                     	ds	1
  4809  00B4                     ??_setSwitchBypassState:	
  4810  00B4                     ??___ftmul:	
  4811                           ; 1 bytes @ 0x14
  4812                           
  4813  00B4                     solidring_tactiles@ring_delay:	
  4814                           ; 1 bytes @ 0x14
  4815                           
  4816                           
  4817                           ; 1 bytes @ 0x14
  4818  00B4                     	ds	1
  4819  00B5                     ring_tactiles@iLed_1542:	
  4820                           
  4821                           ; 2 bytes @ 0x15
  4822  00B5                     	ds	1
  4823  00B6                     ??_initSwitchBypass:	
  4824  00B6                     initSwitchBypass@initState:	
  4825                           ; 1 bytes @ 0x16
  4826                           
  4827                           
  4828                           ; 2 bytes @ 0x16
  4829  00B6                     	ds	1
  4830  00B7                     ??_showSave:	
  4831                           
  4832                           ; 1 bytes @ 0x17
  4833  00B7                     	ds	1
  4834  00B8                     ?_setDoublePressState:	
  4835  00B8                     ___ftmul@exp:	
  4836                           ; 1 bytes @ 0x18
  4837                           
  4838  00B8                     setDoublePressState@f_state:	
  4839                           ; 1 bytes @ 0x18
  4840                           
  4841                           
  4842                           ; 2 bytes @ 0x18
  4843  00B8                     	ds	1
  4844  00B9                     ___ftmul@f3_as_product:	
  4845                           
  4846                           ; 3 bytes @ 0x19
  4847  00B9                     	ds	1
  4848  00BA                     ??_setDoublePressState:	
  4849                           
  4850                           ; 1 bytes @ 0x1A
  4851  00BA                     	ds	2
  4852  00BC                     ??_updateSwitchBypass:	
  4853  00BC                     ??_updateSwitchTap:	
  4854                           ; 1 bytes @ 0x1C
  4855                           
  4856  00BC                     ___ftmul@cntr:	
  4857                           ; 1 bytes @ 0x1C
  4858                           
  4859                           
  4860                           ; 1 bytes @ 0x1C
  4861  00BC                     	ds	1
  4862  00BD                     ___ftmul@sign:	
  4863                           
  4864                           ; 1 bytes @ 0x1D
  4865  00BD                     	ds	1
  4866  00BE                     ?___ftneg:	
  4867  00BE                     ___ftneg@f1:	
  4868                           ; 3 bytes @ 0x1E
  4869                           
  4870                           
  4871                           ; 3 bytes @ 0x1E
  4872  00BE                     	ds	3
  4873  00C1                     ??___ftneg:	
  4874  00C1                     ?___ftadd:	
  4875                           ; 1 bytes @ 0x21
  4876                           
  4877  00C1                     ___ftadd@f1:	
  4878                           ; 3 bytes @ 0x21
  4879                           
  4880                           
  4881                           ; 3 bytes @ 0x21
  4882  00C1                     	ds	1
  4883  00C2                     updateSwitchTap@tapCntDivisor:	
  4884                           
  4885                           ; 2 bytes @ 0x22
  4886  00C2                     	ds	2
  4887  00C4                     updateSwitchTap@iCnt:	
  4888  00C4                     ___ftadd@f2:	
  4889                           ; 1 bytes @ 0x24
  4890                           
  4891                           
  4892                           ; 3 bytes @ 0x24
  4893  00C4                     	ds	3
  4894  00C7                     ??___ftadd:	
  4895                           
  4896                           ; 1 bytes @ 0x27
  4897  00C7                     	ds	4
  4898  00CB                     ___ftadd@sign:	
  4899                           
  4900                           ; 1 bytes @ 0x2B
  4901  00CB                     	ds	1
  4902  00CC                     ___ftadd@exp2:	
  4903                           
  4904                           ; 1 bytes @ 0x2C
  4905  00CC                     	ds	1
  4906  00CD                     ___ftadd@exp1:	
  4907                           
  4908                           ; 1 bytes @ 0x2D
  4909  00CD                     	ds	1
  4910  00CE                     ?___ftdiv:	
  4911  00CE                     ___ftdiv@f2:	
  4912                           ; 3 bytes @ 0x2E
  4913                           
  4914                           
  4915                           ; 3 bytes @ 0x2E
  4916  00CE                     	ds	3
  4917  00D1                     ___ftdiv@f1:	
  4918                           
  4919                           ; 3 bytes @ 0x31
  4920  00D1                     	ds	3
  4921  00D4                     ??___ftdiv:	
  4922                           
  4923                           ; 1 bytes @ 0x34
  4924  00D4                     	ds	4
  4925  00D8                     ___ftdiv@cntr:	
  4926                           
  4927                           ; 1 bytes @ 0x38
  4928  00D8                     	ds	1
  4929  00D9                     ___ftdiv@f3:	
  4930                           
  4931                           ; 3 bytes @ 0x39
  4932  00D9                     	ds	3
  4933  00DC                     ___ftdiv@exp:	
  4934                           
  4935                           ; 1 bytes @ 0x3C
  4936  00DC                     	ds	1
  4937  00DD                     ___ftdiv@sign:	
  4938                           
  4939                           ; 1 bytes @ 0x3D
  4940  00DD                     	ds	1
  4941  00DE                     ?_map:	
  4942  00DE                     map@x:	
  4943                           ; 3 bytes @ 0x3E
  4944                           
  4945                           
  4946                           ; 3 bytes @ 0x3E
  4947  00DE                     	ds	3
  4948  00E1                     map@in_min:	
  4949                           
  4950                           ; 3 bytes @ 0x41
  4951  00E1                     	ds	3
  4952  00E4                     map@in_max:	
  4953                           
  4954                           ; 3 bytes @ 0x44
  4955  00E4                     	ds	3
  4956  00E7                     map@out_min:	
  4957                           
  4958                           ; 3 bytes @ 0x47
  4959  00E7                     	ds	3
  4960  00EA                     map@out_max:	
  4961                           
  4962                           ; 3 bytes @ 0x4A
  4963  00EA                     	ds	3
  4964  00ED                     ??_map:	
  4965  00ED                     _map$2809:	
  4966                           ; 1 bytes @ 0x4D
  4967                           
  4968                           
  4969                           ; 3 bytes @ 0x4D
  4970  00ED                     	ds	3
  4971  00F0                     ??_scaleA10kPot:	
  4972  00F0                     ??_scaleiA10kPot:	
  4973                           ; 1 bytes @ 0x50
  4974                           
  4975  00F0                     ??_scaleA100kPot:	
  4976                           ; 1 bytes @ 0x50
  4977                           
  4978  00F0                     ??_modTri:	
  4979                           ; 1 bytes @ 0x50
  4980                           
  4981  00F0                     ??_modSquare:	
  4982                           ; 1 bytes @ 0x50
  4983                           
  4984  00F0                     ??_modSaw:	
  4985                           ; 1 bytes @ 0x50
  4986                           
  4987  00F0                     ??_eval_poly:	
  4988                           ; 1 bytes @ 0x50
  4989                           
  4990  00F0                     ??___wmul:	
  4991                           ; 1 bytes @ 0x50
  4992                           
  4993  00F0                     ??___ftsub:	
  4994                           ; 1 bytes @ 0x50
  4995                           
  4996                           
  4997                           	psect	cstackCOMMON
  4998  0070                     __pcstackCOMMON:	
  4999                           ; 1 bytes @ 0x50
  5000                           
  5001  0070                     ?_calcSinArray:	
  5002  0070                     ?_updateModulationArray:	
  5003                           ; 1 bytes @ 0x0
  5004                           
  5005  0070                     ?_ConfigureOscillator:	
  5006                           ; 1 bytes @ 0x0
  5007                           
  5008  0070                     ?_InitApp:	
  5009                           ; 1 bytes @ 0x0
  5010                           
  5011  0070                     ?_InitializeTaps:	
  5012                           ; 1 bytes @ 0x0
  5013                           
  5014  0070                     ?_initSwitchBypass:	
  5015                           ; 1 bytes @ 0x0
  5016                           
  5017  0070                     ?_ReadSavedSettings:	
  5018                           ; 1 bytes @ 0x0
  5019                           
  5020  0070                     ?_update_mode:	
  5021                           ; 1 bytes @ 0x0
  5022                           
  5023  0070                     ?_update_selectMode:	
  5024                           ; 1 bytes @ 0x0
  5025                           
  5026  0070                     ?_updateSwitchBypass:	
  5027                           ; 1 bytes @ 0x0
  5028                           
  5029  0070                     ?_updateSwitchTap:	
  5030                           ; 1 bytes @ 0x0
  5031                           
  5032  0070                     ?_read_bottom_tactile:	
  5033                           ; 1 bytes @ 0x0
  5034                           
  5035  0070                     ?_read_top_tactile:	
  5036                           ; 1 bytes @ 0x0
  5037                           
  5038  0070                     ?_init_adc:	
  5039                           ; 1 bytes @ 0x0
  5040                           
  5041  0070                     ?_init_pwm:	
  5042                           ; 1 bytes @ 0x0
  5043                           
  5044  0070                     ?_init_timer2:	
  5045                           ; 1 bytes @ 0x0
  5046                           
  5047  0070                     ?_init_timer0:	
  5048                           ; 1 bytes @ 0x0
  5049                           
  5050  0070                     ?_solidring_tactiles:	
  5051                           ; 1 bytes @ 0x0
  5052                           
  5053  0070                     ?_ring_tactiles:	
  5054                           ; 1 bytes @ 0x0
  5055                           
  5056  0070                     ?_resetRingLEDs:	
  5057                           ; 1 bytes @ 0x0
  5058                           
  5059  0070                     ?_setPedalMode:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_setPresetDisplay:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_setExpressionDisplay:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_isr:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_main:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_showSave:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?i1_set_leds_top:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?___awdiv:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?i1___lmul:	
  5084                           ; 2 bytes @ 0x0
  5085                           
  5086  0070                     ___awdiv@divisor:	
  5087                           ; 4 bytes @ 0x0
  5088                           
  5089  0070                     i1set_leds_top@x:	
  5090                           ; 2 bytes @ 0x0
  5091                           
  5092  0070                     i1___lmul@multiplier:	
  5093                           ; 2 bytes @ 0x0
  5094                           
  5095                           
  5096                           ; 4 bytes @ 0x0
  5097  0070                     	ds	2
  5098  0072                     ___awdiv@dividend:	
  5099  0072                     i1set_leds_top@ledState:	
  5100                           ; 2 bytes @ 0x2
  5101                           
  5102                           
  5103                           ; 2 bytes @ 0x2
  5104  0072                     	ds	2
  5105  0074                     ??___awdiv:	
  5106  0074                     ??i1_set_leds_top:	
  5107                           ; 1 bytes @ 0x4
  5108                           
  5109  0074                     i1___lmul@multiplicand:	
  5110                           ; 1 bytes @ 0x4
  5111                           
  5112                           
  5113                           ; 4 bytes @ 0x4
  5114  0074                     	ds	1
  5115  0075                     ___awdiv@counter:	
  5116                           
  5117                           ; 1 bytes @ 0x5
  5118  0075                     	ds	1
  5119  0076                     ___awdiv@sign:	
  5120                           
  5121                           ; 1 bytes @ 0x6
  5122  0076                     	ds	1
  5123  0077                     ___awdiv@quotient:	
  5124                           
  5125                           ; 2 bytes @ 0x7
  5126  0077                     	ds	1
  5127  0078                     ??i1___lmul:	
  5128  0078                     i1___lmul@product:	
  5129                           ; 1 bytes @ 0x8
  5130                           
  5131                           
  5132                           ; 4 bytes @ 0x8
  5133  0078                     	ds	4
  5134  007C                     ??i1___aldiv:	
  5135                           
  5136                           ; 1 bytes @ 0xC
  5137  007C                     	ds	1
  5138                           
  5139                           	psect	cstackBANK0
  5140  0020                     __pcstackBANK0:	
  5141  0020                     ?i1___aldiv:	
  5142  0020                     i1___aldiv@divisor:	
  5143                           ; 4 bytes @ 0x0
  5144                           
  5145                           
  5146                           ; 4 bytes @ 0x0
  5147  0020                     	ds	4
  5148  0024                     i1___aldiv@dividend:	
  5149                           
  5150                           ; 4 bytes @ 0x4
  5151  0024                     	ds	4
  5152  0028                     i1___aldiv@counter:	
  5153                           
  5154                           ; 1 bytes @ 0x8
  5155  0028                     	ds	1
  5156  0029                     i1___aldiv@sign:	
  5157                           
  5158                           ; 1 bytes @ 0x9
  5159  0029                     	ds	1
  5160  002A                     i1___aldiv@quotient:	
  5161                           
  5162                           ; 4 bytes @ 0xA
  5163  002A                     	ds	4
  5164  002E                     ?_modulation:	
  5165  002E                     modulation@x:	
  5166                           ; 4 bytes @ 0xE
  5167                           
  5168                           
  5169                           ; 4 bytes @ 0xE
  5170  002E                     	ds	4
  5171  0032                     modulation@y:	
  5172                           
  5173                           ; 4 bytes @ 0x12
  5174  0032                     	ds	4
  5175  0036                     ??_modulation:	
  5176                           
  5177                           ; 1 bytes @ 0x16
  5178  0036                     	ds	4
  5179  003A                     ??_isr:	
  5180                           
  5181                           ; 1 bytes @ 0x1A
  5182  003A                     	ds	9
  5183  0043                     isr@tmpSubDelay:	
  5184                           
  5185                           ; 2 bytes @ 0x23
  5186  0043                     	ds	2
  5187                           
  5188                           	psect	maintext
  5189  035D                     __pmaintext:	
  5190 ;;
  5191 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5192 ;;
  5193 ;; *************** function _main *****************
  5194 ;; Defined at:
  5195 ;;		line 68 in file "main.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;		None
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : B1F/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5212 ;;      Totals:         0       0       0       0       5       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5213 ;;Total ram usage:       14 bytes
  5214 ;; Hardware stack levels required when called:    9
  5215 ;; This function calls:
  5216 ;;		_ConfigureOscillator
  5217 ;;		_InitApp
  5218 ;;		_InitializeTaps
  5219 ;;		_ReadSavedSettings
  5220 ;;		_USARTInit
  5221 ;;		___awtoft
  5222 ;;		___fttol
  5223 ;;		_adc_convert
  5224 ;;		_calcSinArray
  5225 ;;		_initSwitchBypass
  5226 ;;		_map
  5227 ;;		_read_bottom_tactile
  5228 ;;		_read_top_tactile
  5229 ;;		_scaleA100kPot
  5230 ;;		_scaleA10kPot
  5231 ;;		_scaleiA10kPot
  5232 ;;		_set_subdivision
  5233 ;;		_updateModulationArray
  5234 ;;		_updateSwitchBypass
  5235 ;;		_updateSwitchTap
  5236 ;;		_update_mode
  5237 ;;		_update_selectMode
  5238 ;; This function is called by:
  5239 ;;		Startup code after reset
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           
  5244                           ;psect for function _main
  5245  035D                     _main:	
  5246                           
  5247                           ;main.c: 70: calcSinArray();
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5251  035D  319A  22F3  3183   	fcall	_calcSinArray
  5252                           
  5253                           ;main.c: 72: updateModulationArray();
  5254  0360  318A  2236  3183   	fcall	_updateModulationArray
  5255                           
  5256                           ;main.c: 73: __nop();
  5257  0363  0000               	nop
  5258                           
  5259                           ;main.c: 82: USARTInit(31250);
  5260  0364  3012               	movlw	18
  5261  0365  0021               	movlb	1	; select bank1
  5262  0366  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5263  0367  307A               	movlw	122
  5264  0368  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5265  0369  31A4  2499  3183   	fcall	_USARTInit
  5266                           
  5267                           ;main.c: 83: ConfigureOscillator();
  5268  036C  31A0  2000  3183   	fcall	_ConfigureOscillator
  5269                           
  5270                           ;main.c: 84: InitApp();
  5271  036F  31A1  21A1  3183   	fcall	_InitApp
  5272                           
  5273                           ;main.c: 86: PORTEbits.RE0 = 1;
  5274  0372  0020               	movlb	0	; select bank0
  5275  0373  1410               	bsf	16,0	;volatile
  5276                           
  5277                           ;main.c: 87: PORTEbits.RE1 = 1;
  5278  0374  1490               	bsf	16,1	;volatile
  5279                           
  5280                           ;main.c: 88: PORTDbits.RD6 = 1;
  5281  0375  170F               	bsf	15,6	;volatile
  5282                           
  5283                           ;main.c: 89: PORTDbits.RD5 = 1;
  5284  0376  168F               	bsf	15,5	;volatile
  5285                           
  5286                           ;main.c: 90: PORTCbits.RC0 = 1;
  5287  0377  140E               	bsf	14,0	;volatile
  5288                           
  5289                           ;main.c: 91: PORTDbits.RD7 = 1;
  5290  0378  178F               	bsf	15,7	;volatile
  5291                           
  5292                           ;main.c: 93: InitializeTaps();
  5293  0379  31A0  20F4  3183   	fcall	_InitializeTaps
  5294                           
  5295                           ;main.c: 94: initSwitchBypass();
  5296  037C  31AF  2798  3183   	fcall	_initSwitchBypass
  5297                           
  5298                           ;main.c: 97: ReadSavedSettings();
  5299  037F  3198  206D  3183   	fcall	_ReadSavedSettings
  5300  0382                     l8864:	
  5301                           ;main.c: 99: while (1) {
  5302                           
  5303                           
  5304                           ;main.c: 102: update_mode();
  5305  0382  31A2  2233  3183   	fcall	_update_mode
  5306                           
  5307                           ;main.c: 103: update_selectMode();
  5308  0385  3198  2014  3183   	fcall	_update_selectMode
  5309                           
  5310                           ;main.c: 106: updateSwitchBypass();
  5311  0388  3191  2170  3183   	fcall	_updateSwitchBypass
  5312                           
  5313                           ;main.c: 107: if (presetSaveMode != 1) {
  5314  038B  0020               	movlb	0	; select bank0
  5315  038C  0368               	decf	_presetSaveMode,w
  5316  038D  1903               	btfsc	3,2
  5317  038E  2B92               	goto	l8874
  5318                           
  5319                           ;main.c: 108: updateSwitchTap();
  5320  038F  318C  241D  3183   	fcall	_updateSwitchTap
  5321  0392                     l8874:	
  5322                           
  5323                           ;main.c: 109: }
  5324                           ;main.c: 111: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5325  0392  0020               	movlb	0	; select bank0
  5326  0393  0368               	decf	_presetSaveMode,w
  5327  0394  1903               	btfsc	3,2
  5328  0395  2BA1               	goto	l8880
  5329  0396  0867               	movf	_mode2_state,w
  5330  0397  0023               	movlb	3	; select bank3
  5331  0398  065F               	xorwf	_presetModeCnst^(0+384),w
  5332  0399  1903               	skipnz
  5333  039A  2BA1               	goto	l8880
  5334                           
  5335                           ;main.c: 112: read_bottom_tactile();
  5336  039B  31A5  25B6  3183   	fcall	_read_bottom_tactile
  5337                           
  5338                           ;main.c: 113: read_top_tactile();
  5339  039E  31A6  264B  3183   	fcall	_read_top_tactile
  5340  03A1                     l8880:	
  5341                           
  5342                           ;main.c: 114: }
  5343                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5344  03A1  3000               	movlw	0
  5345  03A2  31AF  27A7  3183   	fcall	_adc_convert
  5346  03A5  0021               	movlb	1	; select bank1
  5347  03A6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5348  03A7  0023               	movlb	3	; select bank3
  5349  03A8  00AB               	movwf	(_knob_1_pos+1)^(0+384)
  5350  03A9  0021               	movlb	1	; select bank1
  5351  03AA  0820               	movf	?_adc_convert^(0+128),w
  5352  03AB  0023               	movlb	3	; select bank3
  5353  03AC  00AA               	movwf	_knob_1_pos^(0+384)
  5354                           
  5355                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5356  03AD  3001               	movlw	1
  5357  03AE  31AF  27A7  3183   	fcall	_adc_convert
  5358  03B1  0021               	movlb	1	; select bank1
  5359  03B2  0821               	movf	(?_adc_convert+1)^(0+128),w
  5360  03B3  0023               	movlb	3	; select bank3
  5361  03B4  00AD               	movwf	(_knob_2_pos+1)^(0+384)
  5362  03B5  0021               	movlb	1	; select bank1
  5363  03B6  0820               	movf	?_adc_convert^(0+128),w
  5364  03B7  0023               	movlb	3	; select bank3
  5365  03B8  00AC               	movwf	_knob_2_pos^(0+384)
  5366                           
  5367                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5368  03B9  3002               	movlw	2
  5369  03BA  31AF  27A7  3183   	fcall	_adc_convert
  5370  03BD  0021               	movlb	1	; select bank1
  5371  03BE  0821               	movf	(?_adc_convert+1)^(0+128),w
  5372  03BF  0023               	movlb	3	; select bank3
  5373  03C0  00AF               	movwf	(_knob_3_pos+1)^(0+384)
  5374  03C1  0021               	movlb	1	; select bank1
  5375  03C2  0820               	movf	?_adc_convert^(0+128),w
  5376  03C3  0023               	movlb	3	; select bank3
  5377  03C4  00AE               	movwf	_knob_3_pos^(0+384)
  5378                           
  5379                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5380  03C5  3003               	movlw	3
  5381  03C6  31AF  27A7  3183   	fcall	_adc_convert
  5382  03C9  0021               	movlb	1	; select bank1
  5383  03CA  0821               	movf	(?_adc_convert+1)^(0+128),w
  5384  03CB  0023               	movlb	3	; select bank3
  5385  03CC  00B1               	movwf	(_knob_4_pos+1)^(0+384)
  5386  03CD  0021               	movlb	1	; select bank1
  5387  03CE  0820               	movf	?_adc_convert^(0+128),w
  5388  03CF  0023               	movlb	3	; select bank3
  5389  03D0  00B0               	movwf	_knob_4_pos^(0+384)
  5390                           
  5391                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5392  03D1  3004               	movlw	4
  5393  03D2  31AF  27A7  3183   	fcall	_adc_convert
  5394  03D5  0021               	movlb	1	; select bank1
  5395  03D6  0821               	movf	(?_adc_convert+1)^(0+128),w
  5396  03D7  0023               	movlb	3	; select bank3
  5397  03D8  00B3               	movwf	(_knob_5_pos+1)^(0+384)
  5398  03D9  0021               	movlb	1	; select bank1
  5399  03DA  0820               	movf	?_adc_convert^(0+128),w
  5400  03DB  0023               	movlb	3	; select bank3
  5401  03DC  00B2               	movwf	_knob_5_pos^(0+384)
  5402                           
  5403                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5404  03DD  0949               	comf	_knob1_prev^(0+384),w	;volatile
  5405  03DE  00EA               	movwf	??_main^(0+384)
  5406  03DF  094A               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5407  03E0  00EB               	movwf	(??_main^(0+384)+1)
  5408  03E1  0AEA               	incf	??_main^(0+384),f
  5409  03E2  1903               	skipnz
  5410  03E3  0AEB               	incf	(??_main^(0+384)+1),f
  5411  03E4  082A               	movf	_knob_1_pos^(0+384),w
  5412  03E5  076A               	addwf	??_main^(0+384),w
  5413  03E6  00EC               	movwf	(??_main+2)^(0+384)
  5414  03E7  082B               	movf	(_knob_1_pos+1)^(0+384),w
  5415  03E8  3D6B               	addwfc	(??_main+1)^(0+384),w
  5416  03E9  00ED               	movwf	(??_main+3)^(0+384)
  5417  03EA  086D               	movf	(??_main+3)^(0+384),w
  5418  03EB  3A80               	xorlw	128
  5419  03EC  00EE               	movwf	(??_main+4)^(0+384)
  5420  03ED  3080               	movlw	128
  5421  03EE  026E               	subwf	(??_main+4)^(0+384),w
  5422  03EF  1D03               	skipz
  5423  03F0  2BF3               	goto	u9735
  5424  03F1  3004               	movlw	4
  5425  03F2  026C               	subwf	(??_main+2)^(0+384),w
  5426  03F3                     u9735:	
  5427  03F3  1803               	skipnc
  5428  03F4  2C0E               	goto	l8894
  5429  03F5  0023               	movlb	3	; select bank3
  5430  03F6  0949               	comf	_knob1_prev^(0+384),w	;volatile
  5431  03F7  00EA               	movwf	??_main^(0+384)
  5432  03F8  094A               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5433  03F9  00EB               	movwf	(??_main^(0+384)+1)
  5434  03FA  0AEA               	incf	??_main^(0+384),f
  5435  03FB  1903               	skipnz
  5436  03FC  0AEB               	incf	(??_main^(0+384)+1),f
  5437  03FD  082A               	movf	_knob_1_pos^(0+384),w
  5438  03FE  076A               	addwf	??_main^(0+384),w
  5439  03FF  00EC               	movwf	(??_main+2)^(0+384)
  5440  0400  082B               	movf	(_knob_1_pos+1)^(0+384),w
  5441  0401  3D6B               	addwfc	(??_main+1)^(0+384),w
  5442  0402  00ED               	movwf	(??_main+3)^(0+384)
  5443  0403  086D               	movf	(??_main+3)^(0+384),w
  5444  0404  3A80               	xorlw	128
  5445  0405  00EE               	movwf	(??_main+4)^(0+384)
  5446  0406  307F               	movlw	127
  5447  0407  026E               	subwf	(??_main+4)^(0+384),w
  5448  0408  1D03               	skipz
  5449  0409  2C0C               	goto	u9745
  5450  040A  30FD               	movlw	253
  5451  040B  026C               	subwf	(??_main+2)^(0+384),w
  5452  040C                     u9745:	
  5453  040C  1803               	skipnc
  5454  040D  2C6C               	goto	l8904
  5455  040E                     l8894:	
  5456                           
  5457                           ;main.c: 126: knob1_prev = knob_1_pos;
  5458  040E  0023               	movlb	3	; select bank3
  5459  040F  082B               	movf	(_knob_1_pos+1)^(0+384),w
  5460  0410  00CA               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5461  0411  082A               	movf	_knob_1_pos^(0+384),w
  5462  0412  00C9               	movwf	_knob1_prev^(0+384)	;volatile
  5463                           
  5464                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5465  0413  084A               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5466  0414  0021               	movlb	1	; select bank1
  5467  0415  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5468  0416  0023               	movlb	3	; select bank3
  5469  0417  0849               	movf	_knob1_prev^(0+384),w	;volatile
  5470  0418  0021               	movlb	1	; select bank1
  5471  0419  00A8               	movwf	___awtoft@c^(0+128)
  5472  041A  31A0  20AE  3183   	fcall	___awtoft
  5473  041D  0021               	movlb	1	; select bank1
  5474  041E  0828               	movf	?___awtoft^(0+128),w
  5475  041F  0024               	movlb	4	; select bank4
  5476  0420  00D9               	movwf	_main$2806^(0+512)
  5477  0421  0021               	movlb	1	; select bank1
  5478  0422  0829               	movf	(?___awtoft+1)^(0+128),w
  5479  0423  0024               	movlb	4	; select bank4
  5480  0424  00DA               	movwf	(_main$2806+1)^(0+512)
  5481  0425  0021               	movlb	1	; select bank1
  5482  0426  082A               	movf	(?___awtoft+2)^(0+128),w
  5483  0427  0024               	movlb	4	; select bank4
  5484  0428  00DB               	movwf	(_main$2806+2)^(0+512)
  5485                           
  5486                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5487  0429  0859               	movf	_main$2806^(0+512),w
  5488  042A  0022               	movlb	2	; select bank2
  5489  042B  00E7               	movwf	scaleA10kPot@input^(0+256)
  5490  042C  0024               	movlb	4	; select bank4
  5491  042D  085A               	movf	(_main$2806+1)^(0+512),w
  5492  042E  0022               	movlb	2	; select bank2
  5493  042F  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5494  0430  0024               	movlb	4	; select bank4
  5495  0431  085B               	movf	(_main$2806+2)^(0+512),w
  5496  0432  0022               	movlb	2	; select bank2
  5497  0433  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5498  0434  319C  2405  3183   	fcall	_scaleA10kPot
  5499  0437  0022               	movlb	2	; select bank2
  5500  0438  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5501  0439  0026               	movlb	6	; select bank6
  5502  043A  0099               	movwf	25	;volatile
  5503  043B  0022               	movlb	2	; select bank2
  5504  043C  0867               	movf	?_scaleA10kPot^(0+256),w
  5505  043D  0026               	movlb	6	; select bank6
  5506  043E  0098               	movwf	24	;volatile
  5507                           
  5508                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5509  043F  0023               	movlb	3	; select bank3
  5510  0440  084A               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5511  0441  0021               	movlb	1	; select bank1
  5512  0442  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5513  0443  0023               	movlb	3	; select bank3
  5514  0444  0849               	movf	_knob1_prev^(0+384),w	;volatile
  5515  0445  0021               	movlb	1	; select bank1
  5516  0446  00A8               	movwf	___awtoft@c^(0+128)
  5517  0447  31A0  20AE  3183   	fcall	___awtoft
  5518  044A  0021               	movlb	1	; select bank1
  5519  044B  0828               	movf	?___awtoft^(0+128),w
  5520  044C  0024               	movlb	4	; select bank4
  5521  044D  00DC               	movwf	_main$2807^(0+512)
  5522  044E  0021               	movlb	1	; select bank1
  5523  044F  0829               	movf	(?___awtoft+1)^(0+128),w
  5524  0450  0024               	movlb	4	; select bank4
  5525  0451  00DD               	movwf	(_main$2807+1)^(0+512)
  5526  0452  0021               	movlb	1	; select bank1
  5527  0453  082A               	movf	(?___awtoft+2)^(0+128),w
  5528  0454  0024               	movlb	4	; select bank4
  5529  0455  00DE               	movwf	(_main$2807+2)^(0+512)
  5530                           
  5531                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5532  0456  085C               	movf	_main$2807^(0+512),w
  5533  0457  0022               	movlb	2	; select bank2
  5534  0458  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5535  0459  0024               	movlb	4	; select bank4
  5536  045A  085D               	movf	(_main$2807+1)^(0+512),w
  5537  045B  0022               	movlb	2	; select bank2
  5538  045C  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5539  045D  0024               	movlb	4	; select bank4
  5540  045E  085E               	movf	(_main$2807+2)^(0+512),w
  5541  045F  0022               	movlb	2	; select bank2
  5542  0460  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5543  0461  319D  25E6  3183   	fcall	_scaleiA10kPot
  5544  0464  0022               	movlb	2	; select bank2
  5545  0465  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5546  0466  0026               	movlb	6	; select bank6
  5547  0467  009D               	movwf	29	;volatile
  5548  0468  0022               	movlb	2	; select bank2
  5549  0469  0867               	movf	?_scaleiA10kPot^(0+256),w
  5550  046A  0026               	movlb	6	; select bank6
  5551  046B  009C               	movwf	28	;volatile
  5552  046C                     l8904:	
  5553                           
  5554                           ;main.c: 130: }
  5555                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5556  046C  0023               	movlb	3	; select bank3
  5557  046D  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5558  046E  00EA               	movwf	??_main^(0+384)
  5559  046F  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5560  0470  00EB               	movwf	(??_main^(0+384)+1)
  5561  0471  0AEA               	incf	??_main^(0+384),f
  5562  0472  1903               	skipnz
  5563  0473  0AEB               	incf	(??_main^(0+384)+1),f
  5564  0474  082C               	movf	_knob_2_pos^(0+384),w
  5565  0475  076A               	addwf	??_main^(0+384),w
  5566  0476  00EC               	movwf	(??_main+2)^(0+384)
  5567  0477  082D               	movf	(_knob_2_pos+1)^(0+384),w
  5568  0478  3D6B               	addwfc	(??_main+1)^(0+384),w
  5569  0479  00ED               	movwf	(??_main+3)^(0+384)
  5570  047A  086D               	movf	(??_main+3)^(0+384),w
  5571  047B  3A80               	xorlw	128
  5572  047C  00EE               	movwf	(??_main+4)^(0+384)
  5573  047D  3080               	movlw	128
  5574  047E  026E               	subwf	(??_main+4)^(0+384),w
  5575  047F  1D03               	skipz
  5576  0480  2C83               	goto	u9755
  5577  0481  3004               	movlw	4
  5578  0482  026C               	subwf	(??_main+2)^(0+384),w
  5579  0483                     u9755:	
  5580  0483  1803               	skipnc
  5581  0484  2C9E               	goto	l8908
  5582  0485  0023               	movlb	3	; select bank3
  5583  0486  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5584  0487  00EA               	movwf	??_main^(0+384)
  5585  0488  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5586  0489  00EB               	movwf	(??_main^(0+384)+1)
  5587  048A  0AEA               	incf	??_main^(0+384),f
  5588  048B  1903               	skipnz
  5589  048C  0AEB               	incf	(??_main^(0+384)+1),f
  5590  048D  082C               	movf	_knob_2_pos^(0+384),w
  5591  048E  076A               	addwf	??_main^(0+384),w
  5592  048F  00EC               	movwf	(??_main+2)^(0+384)
  5593  0490  082D               	movf	(_knob_2_pos+1)^(0+384),w
  5594  0491  3D6B               	addwfc	(??_main+1)^(0+384),w
  5595  0492  00ED               	movwf	(??_main+3)^(0+384)
  5596  0493  086D               	movf	(??_main+3)^(0+384),w
  5597  0494  3A80               	xorlw	128
  5598  0495  00EE               	movwf	(??_main+4)^(0+384)
  5599  0496  307F               	movlw	127
  5600  0497  026E               	subwf	(??_main+4)^(0+384),w
  5601  0498  1D03               	skipz
  5602  0499  2C9C               	goto	u9765
  5603  049A  30FD               	movlw	253
  5604  049B  026C               	subwf	(??_main+2)^(0+384),w
  5605  049C                     u9765:	
  5606  049C  1803               	skipnc
  5607  049D  2D0E               	goto	l8918
  5608  049E                     l8908:	
  5609                           
  5610                           ;main.c: 135: knob2_prev = knob_2_pos;
  5611  049E  0023               	movlb	3	; select bank3
  5612  049F  082D               	movf	(_knob_2_pos+1)^(0+384),w
  5613  04A0  00CC               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5614  04A1  082C               	movf	_knob_2_pos^(0+384),w
  5615  04A2  00CB               	movwf	_knob2_prev^(0+384)	;volatile
  5616                           
  5617                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5618  04A3  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5619  04A4  00EA               	movwf	??_main^(0+384)
  5620  04A5  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5621  04A6  00EB               	movwf	(??_main^(0+384)+1)
  5622  04A7  0AEA               	incf	??_main^(0+384),f
  5623  04A8  1903               	skipnz
  5624  04A9  0AEB               	incf	(??_main^(0+384)+1),f
  5625  04AA  086A               	movf	??_main^(0+384),w
  5626  04AB  3EFF               	addlw	255
  5627  04AC  0021               	movlb	1	; select bank1
  5628  04AD  00A8               	movwf	___awtoft@c^(0+128)
  5629  04AE  3003               	movlw	3
  5630  04AF  0023               	movlb	3	; select bank3
  5631  04B0  3D6B               	addwfc	(??_main+1)^(0+384),w
  5632  04B1  0021               	movlb	1	; select bank1
  5633  04B2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5634  04B3  31A0  20AE  3183   	fcall	___awtoft
  5635  04B6  0021               	movlb	1	; select bank1
  5636  04B7  0828               	movf	?___awtoft^(0+128),w
  5637  04B8  0024               	movlb	4	; select bank4
  5638  04B9  00DF               	movwf	_main$2808^(0+512)
  5639  04BA  0021               	movlb	1	; select bank1
  5640  04BB  0829               	movf	(?___awtoft+1)^(0+128),w
  5641  04BC  0024               	movlb	4	; select bank4
  5642  04BD  00E0               	movwf	(_main$2808+1)^(0+512)
  5643  04BE  0021               	movlb	1	; select bank1
  5644  04BF  082A               	movf	(?___awtoft+2)^(0+128),w
  5645  04C0  0024               	movlb	4	; select bank4
  5646  04C1  00E1               	movwf	(_main$2808+2)^(0+512)
  5647                           
  5648                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5649  04C2  085F               	movf	_main$2808^(0+512),w
  5650  04C3  0022               	movlb	2	; select bank2
  5651  04C4  00E7               	movwf	scaleA100kPot@input^(0+256)
  5652  04C5  0024               	movlb	4	; select bank4
  5653  04C6  0860               	movf	(_main$2808+1)^(0+512),w
  5654  04C7  0022               	movlb	2	; select bank2
  5655  04C8  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5656  04C9  0024               	movlb	4	; select bank4
  5657  04CA  0861               	movf	(_main$2808+2)^(0+512),w
  5658  04CB  0022               	movlb	2	; select bank2
  5659  04CC  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5660  04CD  3199  21E7  3183   	fcall	_scaleA100kPot
  5661  04D0  0022               	movlb	2	; select bank2
  5662  04D1  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5663  04D2  0025               	movlb	5	; select bank5
  5664  04D3  0092               	movwf	18	;volatile
  5665  04D4  0022               	movlb	2	; select bank2
  5666  04D5  0867               	movf	?_scaleA100kPot^(0+256),w
  5667  04D6  0025               	movlb	5	; select bank5
  5668  04D7  0091               	movwf	17	;volatile
  5669                           
  5670                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5671  04D8  0023               	movlb	3	; select bank3
  5672  04D9  094B               	comf	_knob2_prev^(0+384),w	;volatile
  5673  04DA  00EA               	movwf	??_main^(0+384)
  5674  04DB  094C               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5675  04DC  00EB               	movwf	(??_main^(0+384)+1)
  5676  04DD  0AEA               	incf	??_main^(0+384),f
  5677  04DE  1903               	skipnz
  5678  04DF  0AEB               	incf	(??_main^(0+384)+1),f
  5679  04E0  086A               	movf	??_main^(0+384),w
  5680  04E1  3EFF               	addlw	255
  5681  04E2  0021               	movlb	1	; select bank1
  5682  04E3  00A8               	movwf	___awtoft@c^(0+128)
  5683  04E4  3003               	movlw	3
  5684  04E5  0023               	movlb	3	; select bank3
  5685  04E6  3D6B               	addwfc	(??_main+1)^(0+384),w
  5686  04E7  0021               	movlb	1	; select bank1
  5687  04E8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5688  04E9  31A0  20AE  3183   	fcall	___awtoft
  5689  04EC  0021               	movlb	1	; select bank1
  5690  04ED  0828               	movf	?___awtoft^(0+128),w
  5691  04EE  0024               	movlb	4	; select bank4
  5692  04EF  00DF               	movwf	_main$2808^(0+512)
  5693  04F0  0021               	movlb	1	; select bank1
  5694  04F1  0829               	movf	(?___awtoft+1)^(0+128),w
  5695  04F2  0024               	movlb	4	; select bank4
  5696  04F3  00E0               	movwf	(_main$2808+1)^(0+512)
  5697  04F4  0021               	movlb	1	; select bank1
  5698  04F5  082A               	movf	(?___awtoft+2)^(0+128),w
  5699  04F6  0024               	movlb	4	; select bank4
  5700  04F7  00E1               	movwf	(_main$2808+2)^(0+512)
  5701                           
  5702                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5703  04F8  085F               	movf	_main$2808^(0+512),w
  5704  04F9  0022               	movlb	2	; select bank2
  5705  04FA  00E7               	movwf	scaleA100kPot@input^(0+256)
  5706  04FB  0024               	movlb	4	; select bank4
  5707  04FC  0860               	movf	(_main$2808+1)^(0+512),w
  5708  04FD  0022               	movlb	2	; select bank2
  5709  04FE  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5710  04FF  0024               	movlb	4	; select bank4
  5711  0500  0861               	movf	(_main$2808+2)^(0+512),w
  5712  0501  0022               	movlb	2	; select bank2
  5713  0502  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5714  0503  3199  21E7  3183   	fcall	_scaleA100kPot
  5715  0506  0022               	movlb	2	; select bank2
  5716  0507  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5717  0508  0025               	movlb	5	; select bank5
  5718  0509  0099               	movwf	25	;volatile
  5719  050A  0022               	movlb	2	; select bank2
  5720  050B  0867               	movf	?_scaleA100kPot^(0+256),w
  5721  050C  0025               	movlb	5	; select bank5
  5722  050D  0098               	movwf	24	;volatile
  5723  050E                     l8918:	
  5724                           
  5725                           ;main.c: 138: }
  5726                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5727  050E  0023               	movlb	3	; select bank3
  5728  050F  094D               	comf	_knob3_prev^(0+384),w	;volatile
  5729  0510  00EA               	movwf	??_main^(0+384)
  5730  0511  094E               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5731  0512  00EB               	movwf	(??_main^(0+384)+1)
  5732  0513  0AEA               	incf	??_main^(0+384),f
  5733  0514  1903               	skipnz
  5734  0515  0AEB               	incf	(??_main^(0+384)+1),f
  5735  0516  082E               	movf	_knob_3_pos^(0+384),w
  5736  0517  076A               	addwf	??_main^(0+384),w
  5737  0518  00EC               	movwf	(??_main+2)^(0+384)
  5738  0519  082F               	movf	(_knob_3_pos+1)^(0+384),w
  5739  051A  3D6B               	addwfc	(??_main+1)^(0+384),w
  5740  051B  00ED               	movwf	(??_main+3)^(0+384)
  5741  051C  086D               	movf	(??_main+3)^(0+384),w
  5742  051D  3A80               	xorlw	128
  5743  051E  00EE               	movwf	(??_main+4)^(0+384)
  5744  051F  3080               	movlw	128
  5745  0520  026E               	subwf	(??_main+4)^(0+384),w
  5746  0521  1D03               	skipz
  5747  0522  2D25               	goto	u9775
  5748  0523  3004               	movlw	4
  5749  0524  026C               	subwf	(??_main+2)^(0+384),w
  5750  0525                     u9775:	
  5751  0525  1803               	skipnc
  5752  0526  2D40               	goto	l8922
  5753  0527  0023               	movlb	3	; select bank3
  5754  0528  094D               	comf	_knob3_prev^(0+384),w	;volatile
  5755  0529  00EA               	movwf	??_main^(0+384)
  5756  052A  094E               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5757  052B  00EB               	movwf	(??_main^(0+384)+1)
  5758  052C  0AEA               	incf	??_main^(0+384),f
  5759  052D  1903               	skipnz
  5760  052E  0AEB               	incf	(??_main^(0+384)+1),f
  5761  052F  082E               	movf	_knob_3_pos^(0+384),w
  5762  0530  076A               	addwf	??_main^(0+384),w
  5763  0531  00EC               	movwf	(??_main+2)^(0+384)
  5764  0532  082F               	movf	(_knob_3_pos+1)^(0+384),w
  5765  0533  3D6B               	addwfc	(??_main+1)^(0+384),w
  5766  0534  00ED               	movwf	(??_main+3)^(0+384)
  5767  0535  086D               	movf	(??_main+3)^(0+384),w
  5768  0536  3A80               	xorlw	128
  5769  0537  00EE               	movwf	(??_main+4)^(0+384)
  5770  0538  307F               	movlw	127
  5771  0539  026E               	subwf	(??_main+4)^(0+384),w
  5772  053A  1D03               	skipz
  5773  053B  2D3E               	goto	u9785
  5774  053C  30FD               	movlw	253
  5775  053D  026C               	subwf	(??_main+2)^(0+384),w
  5776  053E                     u9785:	
  5777  053E  1803               	skipnc
  5778  053F  2DA8               	goto	l8934
  5779  0540                     l8922:	
  5780                           
  5781                           ;main.c: 149: knob3_prev = knob_3_pos;
  5782  0540  0023               	movlb	3	; select bank3
  5783  0541  082F               	movf	(_knob_3_pos+1)^(0+384),w
  5784  0542  00CE               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5785  0543  082E               	movf	_knob_3_pos^(0+384),w
  5786  0544  00CD               	movwf	_knob3_prev^(0+384)	;volatile
  5787                           
  5788                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5789  0545  3080               	movlw	128
  5790  0546  0021               	movlb	1	; select bank1
  5791  0547  00EA               	movwf	map@out_max^(0+128)
  5792  0548  309D               	movlw	157
  5793  0549  00EB               	movwf	(map@out_max+1)^(0+128)
  5794  054A  3043               	movlw	67
  5795  054B  00EC               	movwf	(map@out_max+2)^(0+128)
  5796  054C  3000               	movlw	0
  5797  054D  00E7               	movwf	map@out_min^(0+128)
  5798  054E  3034               	movlw	52
  5799  054F  00E8               	movwf	(map@out_min+1)^(0+128)
  5800  0550  3042               	movlw	66
  5801  0551  00E9               	movwf	(map@out_min+2)^(0+128)
  5802  0552  30C0               	movlw	192
  5803  0553  00E4               	movwf	map@in_max^(0+128)
  5804  0554  307F               	movlw	127
  5805  0555  00E5               	movwf	(map@in_max+1)^(0+128)
  5806  0556  3044               	movlw	68
  5807  0557  00E6               	movwf	(map@in_max+2)^(0+128)
  5808  0558  3000               	movlw	0
  5809  0559  00E1               	movwf	map@in_min^(0+128)
  5810  055A  3000               	movlw	0
  5811  055B  00E2               	movwf	(map@in_min+1)^(0+128)
  5812  055C  3000               	movlw	0
  5813  055D  00E3               	movwf	(map@in_min+2)^(0+128)
  5814  055E  0023               	movlb	3	; select bank3
  5815  055F  084E               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5816  0560  0021               	movlb	1	; select bank1
  5817  0561  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5818  0562  0023               	movlb	3	; select bank3
  5819  0563  084D               	movf	_knob3_prev^(0+384),w	;volatile
  5820  0564  0021               	movlb	1	; select bank1
  5821  0565  00A8               	movwf	___awtoft@c^(0+128)
  5822  0566  31A0  20AE  3183   	fcall	___awtoft
  5823  0569  0021               	movlb	1	; select bank1
  5824  056A  0828               	movf	?___awtoft^(0+128),w
  5825  056B  00DE               	movwf	map@x^(0+128)
  5826  056C  0829               	movf	(?___awtoft+1)^(0+128),w
  5827  056D  00DF               	movwf	(map@x+1)^(0+128)
  5828  056E  082A               	movf	(?___awtoft+2)^(0+128),w
  5829  056F  00E0               	movwf	(map@x+2)^(0+128)
  5830  0570  319B  237A  3183   	fcall	_map
  5831  0573  0021               	movlb	1	; select bank1
  5832  0574  085E               	movf	?_map^(0+128),w
  5833  0575  0022               	movlb	2	; select bank2
  5834  0576  00A0               	movwf	___fttol@f1^(0+256)
  5835  0577  0021               	movlb	1	; select bank1
  5836  0578  085F               	movf	(?_map+1)^(0+128),w
  5837  0579  0022               	movlb	2	; select bank2
  5838  057A  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5839  057B  0021               	movlb	1	; select bank1
  5840  057C  0860               	movf	(?_map+2)^(0+128),w
  5841  057D  0022               	movlb	2	; select bank2
  5842  057E  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5843  057F  319A  226C  3183   	fcall	___fttol
  5844  0582  0022               	movlb	2	; select bank2
  5845  0583  0821               	movf	(?___fttol^(0+256)+1),w
  5846  0584  0023               	movlb	3	; select bank3
  5847  0585  00D6               	movwf	(_symmetry+1)^(0+384)
  5848  0586  0022               	movlb	2	; select bank2
  5849  0587  0820               	movf	?___fttol^(0+256),w
  5850  0588  0023               	movlb	3	; select bank3
  5851  0589  00D5               	movwf	_symmetry^(0+384)
  5852                           
  5853                           ;main.c: 152: modulation_changed = 1;
  5854  058A  01C1               	clrf	_modulation_changed^(0+384)
  5855  058B  0AC1               	incf	_modulation_changed^(0+384),f
  5856                           
  5857                           ;main.c: 153: if (symmetry > 177 && symmetry < 182) {
  5858  058C  0856               	movf	(_symmetry+1)^(0+384),w
  5859  058D  3A80               	xorlw	128
  5860  058E  00EA               	movwf	??_main^(0+384)
  5861  058F  3080               	movlw	128
  5862  0590  026A               	subwf	??_main^(0+384),w
  5863  0591  1D03               	skipz
  5864  0592  2D95               	goto	u9795
  5865  0593  30B2               	movlw	178
  5866  0594  0255               	subwf	_symmetry^(0+384),w
  5867  0595                     u9795:	
  5868  0595  1C03               	skipc
  5869  0596  2DA6               	goto	l366
  5870  0597  0023               	movlb	3	; select bank3
  5871  0598  0856               	movf	(_symmetry+1)^(0+384),w
  5872  0599  3A80               	xorlw	128
  5873  059A  00EA               	movwf	??_main^(0+384)
  5874  059B  3080               	movlw	128
  5875  059C  026A               	subwf	??_main^(0+384),w
  5876  059D  1D03               	skipz
  5877  059E  2DA1               	goto	u9805
  5878  059F  30B6               	movlw	182
  5879  05A0  0255               	subwf	_symmetry^(0+384),w
  5880  05A1                     u9805:	
  5881  05A1  1803               	skipnc
  5882  05A2  2DA6               	goto	l366
  5883                           
  5884                           ;main.c: 154: LATBbits.LATB1 = 1;
  5885  05A3  0022               	movlb	2	; select bank2
  5886  05A4  148D               	bsf	13,1	;volatile
  5887                           
  5888                           ;main.c: 155: } else {
  5889  05A5  2DA8               	goto	l8934
  5890  05A6                     l366:	
  5891                           
  5892                           ;main.c: 156: LATBbits.LATB1 = 0;
  5893  05A6  0022               	movlb	2	; select bank2
  5894  05A7  108D               	bcf	13,1	;volatile
  5895  05A8                     l8934:	
  5896                           
  5897                           ;main.c: 157: }
  5898                           ;main.c: 158: }
  5899                           ;main.c: 169: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5900  05A8  0023               	movlb	3	; select bank3
  5901  05A9  094F               	comf	_knob4_prev^(0+384),w	;volatile
  5902  05AA  00EA               	movwf	??_main^(0+384)
  5903  05AB  0950               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5904  05AC  00EB               	movwf	(??_main^(0+384)+1)
  5905  05AD  0AEA               	incf	??_main^(0+384),f
  5906  05AE  1903               	skipnz
  5907  05AF  0AEB               	incf	(??_main^(0+384)+1),f
  5908  05B0  0830               	movf	_knob_4_pos^(0+384),w
  5909  05B1  076A               	addwf	??_main^(0+384),w
  5910  05B2  00EC               	movwf	(??_main+2)^(0+384)
  5911  05B3  0831               	movf	(_knob_4_pos+1)^(0+384),w
  5912  05B4  3D6B               	addwfc	(??_main+1)^(0+384),w
  5913  05B5  00ED               	movwf	(??_main+3)^(0+384)
  5914  05B6  086D               	movf	(??_main+3)^(0+384),w
  5915  05B7  3A80               	xorlw	128
  5916  05B8  00EE               	movwf	(??_main+4)^(0+384)
  5917  05B9  3080               	movlw	128
  5918  05BA  026E               	subwf	(??_main+4)^(0+384),w
  5919  05BB  1D03               	skipz
  5920  05BC  2DBF               	goto	u9815
  5921  05BD  3004               	movlw	4
  5922  05BE  026C               	subwf	(??_main+2)^(0+384),w
  5923  05BF                     u9815:	
  5924  05BF  1803               	skipnc
  5925  05C0  2DDA               	goto	l8938
  5926  05C1  0023               	movlb	3	; select bank3
  5927  05C2  094F               	comf	_knob4_prev^(0+384),w	;volatile
  5928  05C3  00EA               	movwf	??_main^(0+384)
  5929  05C4  0950               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5930  05C5  00EB               	movwf	(??_main^(0+384)+1)
  5931  05C6  0AEA               	incf	??_main^(0+384),f
  5932  05C7  1903               	skipnz
  5933  05C8  0AEB               	incf	(??_main^(0+384)+1),f
  5934  05C9  0830               	movf	_knob_4_pos^(0+384),w
  5935  05CA  076A               	addwf	??_main^(0+384),w
  5936  05CB  00EC               	movwf	(??_main+2)^(0+384)
  5937  05CC  0831               	movf	(_knob_4_pos+1)^(0+384),w
  5938  05CD  3D6B               	addwfc	(??_main+1)^(0+384),w
  5939  05CE  00ED               	movwf	(??_main+3)^(0+384)
  5940  05CF  086D               	movf	(??_main+3)^(0+384),w
  5941  05D0  3A80               	xorlw	128
  5942  05D1  00EE               	movwf	(??_main+4)^(0+384)
  5943  05D2  307F               	movlw	127
  5944  05D3  026E               	subwf	(??_main+4)^(0+384),w
  5945  05D4  1D03               	skipz
  5946  05D5  2DD8               	goto	u9825
  5947  05D6  30FD               	movlw	253
  5948  05D7  026C               	subwf	(??_main+2)^(0+384),w
  5949  05D8                     u9825:	
  5950  05D8  1803               	skipnc
  5951  05D9  2E24               	goto	l8942
  5952  05DA                     l8938:	
  5953                           
  5954                           ;main.c: 170: knob4_prev = knob_4_pos;
  5955  05DA  0023               	movlb	3	; select bank3
  5956  05DB  0831               	movf	(_knob_4_pos+1)^(0+384),w
  5957  05DC  00D0               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  5958  05DD  0830               	movf	_knob_4_pos^(0+384),w
  5959  05DE  00CF               	movwf	_knob4_prev^(0+384)	;volatile
  5960                           
  5961                           ;main.c: 172: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5962  05DF  3000               	movlw	0
  5963  05E0  0021               	movlb	1	; select bank1
  5964  05E1  00EA               	movwf	map@out_max^(0+128)
  5965  05E2  303C               	movlw	60
  5966  05E3  00EB               	movwf	(map@out_max+1)^(0+128)
  5967  05E4  3042               	movlw	66
  5968  05E5  00EC               	movwf	(map@out_max+2)^(0+128)
  5969  05E6  3000               	movlw	0
  5970  05E7  00E7               	movwf	map@out_min^(0+128)
  5971  05E8  3040               	movlw	64
  5972  05E9  00E8               	movwf	(map@out_min+1)^(0+128)
  5973  05EA  3040               	movlw	64
  5974  05EB  00E9               	movwf	(map@out_min+2)^(0+128)
  5975  05EC  30C0               	movlw	192
  5976  05ED  00E4               	movwf	map@in_max^(0+128)
  5977  05EE  307F               	movlw	127
  5978  05EF  00E5               	movwf	(map@in_max+1)^(0+128)
  5979  05F0  3044               	movlw	68
  5980  05F1  00E6               	movwf	(map@in_max+2)^(0+128)
  5981  05F2  3000               	movlw	0
  5982  05F3  00E1               	movwf	map@in_min^(0+128)
  5983  05F4  3000               	movlw	0
  5984  05F5  00E2               	movwf	(map@in_min+1)^(0+128)
  5985  05F6  3000               	movlw	0
  5986  05F7  00E3               	movwf	(map@in_min+2)^(0+128)
  5987  05F8  0023               	movlb	3	; select bank3
  5988  05F9  0850               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  5989  05FA  0021               	movlb	1	; select bank1
  5990  05FB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5991  05FC  0023               	movlb	3	; select bank3
  5992  05FD  084F               	movf	_knob4_prev^(0+384),w	;volatile
  5993  05FE  0021               	movlb	1	; select bank1
  5994  05FF  00A8               	movwf	___awtoft@c^(0+128)
  5995  0600  31A0  20AE  3183   	fcall	___awtoft
  5996  0603  0021               	movlb	1	; select bank1
  5997  0604  0828               	movf	?___awtoft^(0+128),w
  5998  0605  00DE               	movwf	map@x^(0+128)
  5999  0606  0829               	movf	(?___awtoft+1)^(0+128),w
  6000  0607  00DF               	movwf	(map@x+1)^(0+128)
  6001  0608  082A               	movf	(?___awtoft+2)^(0+128),w
  6002  0609  00E0               	movwf	(map@x+2)^(0+128)
  6003  060A  319B  237A  3183   	fcall	_map
  6004  060D  0021               	movlb	1	; select bank1
  6005  060E  085E               	movf	?_map^(0+128),w
  6006  060F  0022               	movlb	2	; select bank2
  6007  0610  00A0               	movwf	___fttol@f1^(0+256)
  6008  0611  0021               	movlb	1	; select bank1
  6009  0612  085F               	movf	(?_map+1)^(0+128),w
  6010  0613  0022               	movlb	2	; select bank2
  6011  0614  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6012  0615  0021               	movlb	1	; select bank1
  6013  0616  0860               	movf	(?_map+2)^(0+128),w
  6014  0617  0022               	movlb	2	; select bank2
  6015  0618  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6016  0619  319A  226C  3183   	fcall	___fttol
  6017  061C  0022               	movlb	2	; select bank2
  6018  061D  0821               	movf	(?___fttol^(0+256)+1),w
  6019  061E  0023               	movlb	3	; select bank3
  6020  061F  00D4               	movwf	(_mod_delay_time+1)^(0+384)
  6021  0620  0022               	movlb	2	; select bank2
  6022  0621  0820               	movf	?___fttol^(0+256),w
  6023  0622  0023               	movlb	3	; select bank3
  6024  0623  00D3               	movwf	_mod_delay_time^(0+384)
  6025  0624                     l8942:	
  6026                           
  6027                           ;main.c: 173: }
  6028                           ;main.c: 178: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6029  0624  0023               	movlb	3	; select bank3
  6030  0625  0951               	comf	_knob5_prev^(0+384),w	;volatile
  6031  0626  00EA               	movwf	??_main^(0+384)
  6032  0627  0952               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6033  0628  00EB               	movwf	(??_main^(0+384)+1)
  6034  0629  0AEA               	incf	??_main^(0+384),f
  6035  062A  1903               	skipnz
  6036  062B  0AEB               	incf	(??_main^(0+384)+1),f
  6037  062C  0832               	movf	_knob_5_pos^(0+384),w
  6038  062D  076A               	addwf	??_main^(0+384),w
  6039  062E  00EC               	movwf	(??_main+2)^(0+384)
  6040  062F  0833               	movf	(_knob_5_pos+1)^(0+384),w
  6041  0630  3D6B               	addwfc	(??_main+1)^(0+384),w
  6042  0631  00ED               	movwf	(??_main+3)^(0+384)
  6043  0632  086D               	movf	(??_main+3)^(0+384),w
  6044  0633  3A80               	xorlw	128
  6045  0634  00EE               	movwf	(??_main+4)^(0+384)
  6046  0635  3080               	movlw	128
  6047  0636  026E               	subwf	(??_main+4)^(0+384),w
  6048  0637  1D03               	skipz
  6049  0638  2E3B               	goto	u9835
  6050  0639  3004               	movlw	4
  6051  063A  026C               	subwf	(??_main+2)^(0+384),w
  6052  063B                     u9835:	
  6053  063B  1803               	skipnc
  6054  063C  2E56               	goto	l8946
  6055  063D  0023               	movlb	3	; select bank3
  6056  063E  0951               	comf	_knob5_prev^(0+384),w	;volatile
  6057  063F  00EA               	movwf	??_main^(0+384)
  6058  0640  0952               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6059  0641  00EB               	movwf	(??_main^(0+384)+1)
  6060  0642  0AEA               	incf	??_main^(0+384),f
  6061  0643  1903               	skipnz
  6062  0644  0AEB               	incf	(??_main^(0+384)+1),f
  6063  0645  0832               	movf	_knob_5_pos^(0+384),w
  6064  0646  076A               	addwf	??_main^(0+384),w
  6065  0647  00EC               	movwf	(??_main+2)^(0+384)
  6066  0648  0833               	movf	(_knob_5_pos+1)^(0+384),w
  6067  0649  3D6B               	addwfc	(??_main+1)^(0+384),w
  6068  064A  00ED               	movwf	(??_main+3)^(0+384)
  6069  064B  086D               	movf	(??_main+3)^(0+384),w
  6070  064C  3A80               	xorlw	128
  6071  064D  00EE               	movwf	(??_main+4)^(0+384)
  6072  064E  307F               	movlw	127
  6073  064F  026E               	subwf	(??_main+4)^(0+384),w
  6074  0650  1D03               	skipz
  6075  0651  2E54               	goto	u9845
  6076  0652  30FD               	movlw	253
  6077  0653  026C               	subwf	(??_main+2)^(0+384),w
  6078  0654                     u9845:	
  6079  0654  1803               	skipnc
  6080  0655  2EA0               	goto	l8950
  6081  0656                     l8946:	
  6082                           
  6083                           ;main.c: 179: knob5_prev = knob_5_pos;
  6084  0656  0023               	movlb	3	; select bank3
  6085  0657  0833               	movf	(_knob_5_pos+1)^(0+384),w
  6086  0658  00D2               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6087  0659  0832               	movf	_knob_5_pos^(0+384),w
  6088  065A  00D1               	movwf	_knob5_prev^(0+384)	;volatile
  6089                           
  6090                           ;main.c: 180: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6091  065B  3000               	movlw	0
  6092  065C  0021               	movlb	1	; select bank1
  6093  065D  00EA               	movwf	map@out_max^(0+128)
  6094  065E  3000               	movlw	0
  6095  065F  00EB               	movwf	(map@out_max+1)^(0+128)
  6096  0660  3000               	movlw	0
  6097  0661  00EC               	movwf	(map@out_max+2)^(0+128)
  6098  0662  3060               	movlw	96
  6099  0663  00E7               	movwf	map@out_min^(0+128)
  6100  0664  309F               	movlw	159
  6101  0665  00E8               	movwf	(map@out_min+1)^(0+128)
  6102  0666  3044               	movlw	68
  6103  0667  00E9               	movwf	(map@out_min+2)^(0+128)
  6104  0668  30C0               	movlw	192
  6105  0669  00E4               	movwf	map@in_max^(0+128)
  6106  066A  307F               	movlw	127
  6107  066B  00E5               	movwf	(map@in_max+1)^(0+128)
  6108  066C  3044               	movlw	68
  6109  066D  00E6               	movwf	(map@in_max+2)^(0+128)
  6110  066E  3000               	movlw	0
  6111  066F  00E1               	movwf	map@in_min^(0+128)
  6112  0670  3000               	movlw	0
  6113  0671  00E2               	movwf	(map@in_min+1)^(0+128)
  6114  0672  3000               	movlw	0
  6115  0673  00E3               	movwf	(map@in_min+2)^(0+128)
  6116  0674  0023               	movlb	3	; select bank3
  6117  0675  0852               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6118  0676  0021               	movlb	1	; select bank1
  6119  0677  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6120  0678  0023               	movlb	3	; select bank3
  6121  0679  0851               	movf	_knob5_prev^(0+384),w	;volatile
  6122  067A  0021               	movlb	1	; select bank1
  6123  067B  00A8               	movwf	___awtoft@c^(0+128)
  6124  067C  31A0  20AE  3183   	fcall	___awtoft
  6125  067F  0021               	movlb	1	; select bank1
  6126  0680  0828               	movf	?___awtoft^(0+128),w
  6127  0681  00DE               	movwf	map@x^(0+128)
  6128  0682  0829               	movf	(?___awtoft+1)^(0+128),w
  6129  0683  00DF               	movwf	(map@x+1)^(0+128)
  6130  0684  082A               	movf	(?___awtoft+2)^(0+128),w
  6131  0685  00E0               	movwf	(map@x+2)^(0+128)
  6132  0686  319B  237A  3183   	fcall	_map
  6133  0689  0021               	movlb	1	; select bank1
  6134  068A  085E               	movf	?_map^(0+128),w
  6135  068B  0022               	movlb	2	; select bank2
  6136  068C  00A0               	movwf	___fttol@f1^(0+256)
  6137  068D  0021               	movlb	1	; select bank1
  6138  068E  085F               	movf	(?_map+1)^(0+128),w
  6139  068F  0022               	movlb	2	; select bank2
  6140  0690  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6141  0691  0021               	movlb	1	; select bank1
  6142  0692  0860               	movf	(?_map+2)^(0+128),w
  6143  0693  0022               	movlb	2	; select bank2
  6144  0694  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6145  0695  319A  226C  3183   	fcall	___fttol
  6146  0698  0022               	movlb	2	; select bank2
  6147  0699  0821               	movf	(?___fttol^(0+256)+1),w
  6148  069A  0024               	movlb	4	; select bank4
  6149  069B  00C6               	movwf	(_adjusted_pot_value+1)^(0+512)
  6150  069C  0022               	movlb	2	; select bank2
  6151  069D  0820               	movf	?___fttol^(0+256),w
  6152  069E  0024               	movlb	4	; select bank4
  6153  069F  00C5               	movwf	_adjusted_pot_value^(0+512)
  6154  06A0                     l8950:	
  6155                           
  6156                           ;main.c: 181: }
  6157                           ;main.c: 183: if (modulation_changed == 1) {
  6158  06A0  0023               	movlb	3	; select bank3
  6159  06A1  0341               	decf	_modulation_changed^(0+384),w
  6160  06A2  1D03               	btfss	3,2
  6161  06A3  2EA7               	goto	l8954
  6162                           
  6163                           ;main.c: 184: updateModulationArray();
  6164  06A4  318A  2236  3183   	fcall	_updateModulationArray
  6165  06A7                     l8954:	
  6166                           
  6167                           ;main.c: 185: }
  6168                           ;main.c: 188: if (delay_time_changed == 1) {
  6169  06A7  0023               	movlb	3	; select bank3
  6170  06A8  035B               	decf	_delay_time_changed^(0+384),w
  6171  06A9  1D03               	btfss	3,2
  6172  06AA  2B82               	goto	l8864
  6173                           
  6174                           ;main.c: 189: delay_time = baseline_delay_time;
  6175  06AB  0020               	movlb	0	; select bank0
  6176  06AC  0848               	movf	_baseline_delay_time+3,w	;volatile
  6177  06AD  00CC               	movwf	_delay_time+3	;volatile
  6178  06AE  0847               	movf	_baseline_delay_time+2,w	;volatile
  6179  06AF  00CB               	movwf	_delay_time+2	;volatile
  6180  06B0  0846               	movf	_baseline_delay_time+1,w	;volatile
  6181  06B1  00CA               	movwf	_delay_time+1	;volatile
  6182  06B2  0845               	movf	_baseline_delay_time,w	;volatile
  6183  06B3  00C9               	movwf	_delay_time	;volatile
  6184                           
  6185                           ;main.c: 190: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6186  06B4  0846               	movf	_baseline_delay_time+1,w	;volatile
  6187  06B5  0022               	movlb	2	; select bank2
  6188  06B6  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6189  06B7  0020               	movlb	0	; select bank0
  6190  06B8  0845               	movf	_baseline_delay_time,w	;volatile
  6191  06B9  0022               	movlb	2	; select bank2
  6192  06BA  00BF               	movwf	set_subdivision@x^(0+256)
  6193  06BB  0020               	movlb	0	; select bank0
  6194  06BC  0852               	movf	_top_push_state+1,w
  6195  06BD  0022               	movlb	2	; select bank2
  6196  06BE  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6197  06BF  0020               	movlb	0	; select bank0
  6198  06C0  0851               	movf	_top_push_state,w
  6199  06C1  0022               	movlb	2	; select bank2
  6200  06C2  00C1               	movwf	set_subdivision@y^(0+256)
  6201  06C3  319F  2745  3183   	fcall	_set_subdivision
  6202  06C6  0022               	movlb	2	; select bank2
  6203  06C7  083F               	movf	?_set_subdivision^(0+256),w
  6204  06C8  0020               	movlb	0	; select bank0
  6205  06C9  00C9               	movwf	_delay_time	;volatile
  6206  06CA  0022               	movlb	2	; select bank2
  6207  06CB  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6208  06CC  0020               	movlb	0	; select bank0
  6209  06CD  00CA               	movwf	_delay_time+1	;volatile
  6210  06CE  0D89               	rlf	9,f
  6211  06CF  3B89               	subwfb	9,f
  6212  06D0  0989               	comf	9,f
  6213  06D1  00CB               	movwf	_delay_time+2	;volatile
  6214  06D2  00CC               	movwf	_delay_time+3	;volatile
  6215                           
  6216                           ;main.c: 191: reset_sub_delay = 1;
  6217  06D3  0023               	movlb	3	; select bank3
  6218  06D4  01C4               	clrf	_reset_sub_delay^(0+384)
  6219  06D5  0AC4               	incf	_reset_sub_delay^(0+384),f
  6220                           
  6221                           ;main.c: 192: delayfound = 0;
  6222  06D6  0024               	movlb	4	; select bank4
  6223  06D7  01D1               	clrf	_delayfound^(0+512)
  6224  06D8  01D2               	clrf	(_delayfound+1)^(0+512)
  6225                           
  6226                           ;main.c: 193: delay_counter = 0;
  6227  06D9  01CF               	clrf	_delay_counter^(0+512)	;volatile
  6228  06DA  01D0               	clrf	(_delay_counter+1)^(0+512)	;volatile
  6229                           
  6230                           ;main.c: 205: delay_time_changed = 0;
  6231  06DB  0023               	movlb	3	; select bank3
  6232  06DC  01DB               	clrf	_delay_time_changed^(0+384)
  6233  06DD  2B82               	goto	l8864
  6234  06DE                     __end_of_main:	
  6235                           
  6236                           	psect	text1
  6237  1814                     __ptext1:	
  6238 ;; *************** function _update_selectMode *****************
  6239 ;; Defined at:
  6240 ;;		line 139 in file "tactiles.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;		None
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;		None
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  1    wreg      void 
  6247 ;; Registers used:
  6248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6256 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6257 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6258 ;;Total ram usage:        1 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    5
  6261 ;; This function calls:
  6262 ;;		_setExpressionDisplay
  6263 ;;		_setPresetDisplay
  6264 ;; This function is called by:
  6265 ;;		_main
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function _update_selectMode
  6271  1814                     _update_selectMode:	
  6272                           
  6273                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6277  1814  0020               	movlb	0	; select bank0
  6278  1815  0867               	movf	_mode2_state,w
  6279  1816  1D03               	btfss	3,2
  6280  1817  281B               	goto	l1008
  6281  1818  0368               	decf	_presetSaveMode,w
  6282  1819  1D03               	btfss	3,2
  6283  181A  0008               	return
  6284  181B                     l1008:	
  6285                           ;tactiles.c: 142: return;
  6286                           
  6287                           
  6288                           ;tactiles.c: 143: }
  6289                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6290  181B  1B8F               	btfsc	15,7	;volatile
  6291  181C  2869               	goto	l8498
  6292                           
  6293                           ;tactiles.c: 145: debounce_mode1++;
  6294  181D  3001               	movlw	1
  6295  181E  0024               	movlb	4	; select bank4
  6296  181F  07CB               	addwf	_debounce_mode1^(0+512),f
  6297  1820  3000               	movlw	0
  6298  1821  3DCC               	addwfc	(_debounce_mode1+1)^(0+512),f
  6299                           
  6300                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6301  1822  084C               	movf	(_debounce_mode1+1)^(0+512),w
  6302  1823  3A80               	xorlw	128
  6303  1824  0021               	movlb	1	; select bank1
  6304  1825  00A7               	movwf	??_update_selectMode^(0+128)
  6305  1826  3080               	movlw	128
  6306  1827  0227               	subwf	??_update_selectMode^(0+128),w
  6307  1828  1D03               	skipz
  6308  1829  282D               	goto	u8985
  6309  182A  301A               	movlw	26
  6310  182B  0024               	movlb	4	; select bank4
  6311  182C  024B               	subwf	_debounce_mode1^(0+512),w
  6312  182D                     u8985:	
  6313  182D  1C03               	skipc
  6314  182E  0008               	return
  6315                           
  6316                           ;tactiles.c: 147: debounce_mode1 = 25;
  6317  182F  3019               	movlw	25
  6318  1830  0024               	movlb	4	; select bank4
  6319  1831  00CB               	movwf	_debounce_mode1^(0+512)
  6320  1832  3000               	movlw	0
  6321  1833  00CC               	movwf	(_debounce_mode1^(0+512)+1)
  6322                           
  6323                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6324  1834  0020               	movlb	0	; select bank0
  6325  1835  0867               	movf	_mode2_state,w
  6326  1836  0023               	movlb	3	; select bank3
  6327  1837  065F               	xorwf	_presetModeCnst^(0+384),w
  6328  1838  1903               	skipnz
  6329  1839  283E               	goto	l8480
  6330  183A  0020               	movlb	0	; select bank0
  6331  183B  0368               	decf	_presetSaveMode,w
  6332  183C  1D03               	btfss	3,2
  6333  183D  284F               	goto	l8488
  6334  183E                     l8480:	
  6335                           
  6336                           ;tactiles.c: 149: presetChannel++;
  6337  183E  3001               	movlw	1
  6338  183F  0021               	movlb	1	; select bank1
  6339  1840  00A7               	movwf	??_update_selectMode^(0+128)
  6340  1841  0827               	movf	??_update_selectMode^(0+128),w
  6341  1842  0020               	movlb	0	; select bank0
  6342  1843  07D7               	addwf	_presetChannel,f
  6343                           
  6344                           ;tactiles.c: 150: if (presetChannel > 10) {
  6345  1844  300B               	movlw	11
  6346  1845  0257               	subwf	_presetChannel,w
  6347  1846  1C03               	skipc
  6348  1847  284A               	goto	l8486
  6349                           
  6350                           ;tactiles.c: 151: presetChannel = 1;
  6351  1848  01D7               	clrf	_presetChannel
  6352  1849  0AD7               	incf	_presetChannel,f
  6353  184A                     l8486:	
  6354                           
  6355                           ;tactiles.c: 152: }
  6356                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6357  184A  0857               	movf	_presetChannel,w
  6358  184B  31A2  226B  3198   	fcall	_setPresetDisplay
  6359                           
  6360                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6361  184E  2865               	goto	l1019
  6362  184F                     l8488:	
  6363  184F  0020               	movlb	0	; select bank0
  6364  1850  0867               	movf	_mode2_state,w
  6365  1851  0023               	movlb	3	; select bank3
  6366  1852  065D               	xorwf	_expressModeCnst^(0+384),w
  6367  1853  1D03               	skipz
  6368  1854  2865               	goto	l1019
  6369                           
  6370                           ;tactiles.c: 155: expressionChannel++;
  6371  1855  3001               	movlw	1
  6372  1856  0021               	movlb	1	; select bank1
  6373  1857  00A7               	movwf	??_update_selectMode^(0+128)
  6374  1858  0827               	movf	??_update_selectMode^(0+128),w
  6375  1859  0023               	movlb	3	; select bank3
  6376  185A  07DE               	addwf	_expressionChannel^(0+384),f
  6377                           
  6378                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6379  185B  3006               	movlw	6
  6380  185C  025E               	subwf	_expressionChannel^(0+384),w
  6381  185D  1C03               	skipc
  6382  185E  2861               	goto	l8496
  6383                           
  6384                           ;tactiles.c: 157: expressionChannel = 1;
  6385  185F  01DE               	clrf	_expressionChannel^(0+384)
  6386  1860  0ADE               	incf	_expressionChannel^(0+384),f
  6387  1861                     l8496:	
  6388                           
  6389                           ;tactiles.c: 158: }
  6390                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6391  1861  085E               	movf	_expressionChannel^(0+384),w
  6392  1862  31AF  27CE  3198   	fcall	_setExpressionDisplay
  6393  1865                     l1019:	
  6394                           ;tactiles.c: 160: }
  6395                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6396                           
  6397  1865  0020               	movlb	0	; select bank0
  6398  1866  1B8F               	btfsc	15,7	;volatile
  6399  1867  0008               	return
  6400  1868  2865               	goto	l1019
  6401  1869                     l8498:	
  6402                           ;tactiles.c: 168: }
  6403                           ;tactiles.c: 169: }
  6404                           ;tactiles.c: 170: } else {
  6405                           
  6406                           
  6407                           ;tactiles.c: 171: debounce_mode1 = 0;
  6408  1869  0024               	movlb	4	; select bank4
  6409  186A  01CB               	clrf	_debounce_mode1^(0+512)
  6410  186B  01CC               	clrf	(_debounce_mode1+1)^(0+512)
  6411  186C  0008               	return
  6412  186D                     __end_of_update_selectMode:	
  6413                           
  6414                           	psect	text2
  6415  2233                     __ptext2:	
  6416 ;; *************** function _update_mode *****************
  6417 ;; Defined at:
  6418 ;;		line 87 in file "tactiles.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6434 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6435 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6436 ;;Total ram usage:        1 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    6
  6439 ;; This function calls:
  6440 ;;		_resetRingLEDs
  6441 ;;		_setPedalMode
  6442 ;; This function is called by:
  6443 ;;		_main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _update_mode
  6449  2233                     _update_mode:	
  6450                           
  6451                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6452                           
  6453                           ;incstack = 0
  6454                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6455  2233  0020               	movlb	0	; select bank0
  6456  2234  180E               	btfsc	14,0	;volatile
  6457  2235  2A67               	goto	l8466
  6458                           
  6459                           ;tactiles.c: 95: debounce_mode2++;
  6460  2236  3001               	movlw	1
  6461  2237  0024               	movlb	4	; select bank4
  6462  2238  07CD               	addwf	_debounce_mode2^(0+512),f
  6463  2239  3000               	movlw	0
  6464  223A  3DCE               	addwfc	(_debounce_mode2+1)^(0+512),f
  6465                           
  6466                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6467  223B  084E               	movf	(_debounce_mode2+1)^(0+512),w
  6468  223C  3A80               	xorlw	128
  6469  223D  0021               	movlb	1	; select bank1
  6470  223E  00A7               	movwf	??_update_mode^(0+128)
  6471  223F  3080               	movlw	128
  6472  2240  0227               	subwf	??_update_mode^(0+128),w
  6473  2241  1D03               	skipz
  6474  2242  2A46               	goto	u8915
  6475  2243  301A               	movlw	26
  6476  2244  0024               	movlb	4	; select bank4
  6477  2245  024D               	subwf	_debounce_mode2^(0+512),w
  6478  2246                     u8915:	
  6479  2246  1C03               	skipc
  6480  2247  0008               	return
  6481                           
  6482                           ;tactiles.c: 97: debounce_mode2 = 25;
  6483  2248  3019               	movlw	25
  6484  2249  0024               	movlb	4	; select bank4
  6485  224A  00CD               	movwf	_debounce_mode2^(0+512)
  6486  224B  3000               	movlw	0
  6487  224C  00CE               	movwf	(_debounce_mode2^(0+512)+1)
  6488                           
  6489                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6490  224D  0020               	movlb	0	; select bank0
  6491  224E  0368               	decf	_presetSaveMode,w
  6492  224F  1D03               	btfss	3,2
  6493  2250  2A56               	goto	l8458
  6494                           
  6495                           ;tactiles.c: 100: presetSaveMode = 0;
  6496  2251  01E8               	clrf	_presetSaveMode
  6497                           
  6498                           ;tactiles.c: 101: resetRingLEDs();
  6499  2252  31AF  27E6  31A2   	fcall	_resetRingLEDs
  6500                           
  6501                           ;tactiles.c: 102: } else {
  6502  2255  2A60               	goto	l8464
  6503  2256                     l8458:	
  6504                           
  6505                           ;tactiles.c: 103: mode2_state++;
  6506  2256  3001               	movlw	1
  6507  2257  0021               	movlb	1	; select bank1
  6508  2258  00A7               	movwf	??_update_mode^(0+128)
  6509  2259  0827               	movf	??_update_mode^(0+128),w
  6510  225A  0020               	movlb	0	; select bank0
  6511  225B  07E7               	addwf	_mode2_state,f
  6512                           
  6513                           ;tactiles.c: 104: if (mode2_state > 2) {
  6514  225C  3003               	movlw	3
  6515  225D  0267               	subwf	_mode2_state,w
  6516  225E  1803               	btfsc	3,0
  6517                           
  6518                           ;tactiles.c: 105: mode2_state = 0;
  6519  225F  01E7               	clrf	_mode2_state
  6520  2260                     l8464:	
  6521                           
  6522                           ;tactiles.c: 106: }
  6523                           ;tactiles.c: 107: }
  6524                           ;tactiles.c: 109: setPedalMode();
  6525  2260  31A0  20D0  31A2   	fcall	_setPedalMode
  6526  2263                     l993:	
  6527                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6528                           
  6529  2263  0020               	movlb	0	; select bank0
  6530  2264  180E               	btfsc	14,0	;volatile
  6531  2265  0008               	return
  6532  2266  2A63               	goto	l993
  6533  2267                     l8466:	
  6534                           ;tactiles.c: 111: }
  6535                           ;tactiles.c: 112: }
  6536                           ;tactiles.c: 113: } else {
  6537                           
  6538                           
  6539                           ;tactiles.c: 114: debounce_mode2 = 0;
  6540  2267  0024               	movlb	4	; select bank4
  6541  2268  01CD               	clrf	_debounce_mode2^(0+512)
  6542  2269  01CE               	clrf	(_debounce_mode2+1)^(0+512)
  6543  226A  0008               	return
  6544  226B                     __end_of_update_mode:	
  6545                           
  6546                           	psect	text3
  6547  0C1D                     __ptext3:	
  6548 ;; *************** function _updateSwitchTap *****************
  6549 ;; Defined at:
  6550 ;;		line 48 in file "SwitchTap.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6555 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      void 
  6558 ;; Registers used:
  6559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6566 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6567 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6568 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6569 ;;Total ram usage:        9 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    8
  6572 ;; This function calls:
  6573 ;;		___aldiv
  6574 ;;		_setDoublePressState
  6575 ;;		_setLongTapState
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _updateSwitchTap
  6583  0C1D                     _updateSwitchTap:	
  6584                           
  6585                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6589  0C1D  0021               	movlb	1	; select bank1
  6590  0C1E  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6591                           
  6592                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6593  0C1F  0020               	movlb	0	; select bank0
  6594  0C20  1810               	btfsc	16,0	;volatile
  6595  0C21  2C29               	goto	l8594
  6596                           
  6597                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6598  0C22  0022               	movlb	2	; select bank2
  6599  0C23  086C               	movf	_switchTap_pressed^(0+256),w
  6600  0C24  1903               	btfsc	3,2
  6601  0C25  2C34               	goto	l1405
  6602                           
  6603                           ;SwitchTap.c: 59: switchTap_pressed--;
  6604  0C26  3001               	movlw	1
  6605  0C27  02EC               	subwf	_switchTap_pressed^(0+256),f
  6606                           
  6607                           ;SwitchTap.c: 60: }
  6608                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6609  0C28  2C34               	goto	l1405
  6610  0C29                     l8594:	
  6611  0C29  3019               	movlw	25
  6612  0C2A  0022               	movlb	2	; select bank2
  6613  0C2B  026C               	subwf	_switchTap_pressed^(0+256),w
  6614  0C2C  1803               	skipnc
  6615  0C2D  2C34               	goto	l1405
  6616                           
  6617                           ;SwitchTap.c: 62: switchTap_pressed++;
  6618  0C2E  3001               	movlw	1
  6619  0C2F  0021               	movlb	1	; select bank1
  6620  0C30  00BC               	movwf	??_updateSwitchTap^(0+128)
  6621  0C31  083C               	movf	??_updateSwitchTap^(0+128),w
  6622  0C32  0022               	movlb	2	; select bank2
  6623  0C33  07EC               	addwf	_switchTap_pressed^(0+256),f
  6624  0C34                     l1405:	
  6625                           
  6626                           ;SwitchTap.c: 63: }
  6627                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6628  0C34  086C               	movf	_switchTap_pressed^(0+256),w
  6629  0C35  1D03               	btfss	3,2
  6630  0C36  2DEB               	goto	l8678
  6631                           
  6632                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6633  0C37  0020               	movlb	0	; select bank0
  6634  0C38  1BE0               	btfsc	_tap_timer+3,7	;volatile
  6635  0C39  2CBF               	goto	l8638
  6636  0C3A  0860               	movf	_tap_timer+3,w	;volatile
  6637  0C3B  1D03               	btfss	3,2
  6638  0C3C  2C46               	goto	l8600
  6639  0C3D  085F               	movf	_tap_timer+2,w	;volatile
  6640  0C3E  1D03               	btfss	3,2
  6641  0C3F  2C46               	goto	l8600
  6642  0C40  301B               	movlw	27
  6643  0C41  025D               	subwf	_tap_timer,w	;volatile
  6644  0C42  3006               	movlw	6
  6645  0C43  3B5E               	subwfb	_tap_timer+1,w	;volatile
  6646  0C44  1C03               	btfss	3,0
  6647  0C45  2CBF               	goto	l8638
  6648  0C46                     l8600:	
  6649                           
  6650                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6651  0C46  0023               	movlb	3	; select bank3
  6652  0C47  0345               	decf	_switchTap_down^(0+384),w
  6653  0C48  1903               	btfsc	3,2
  6654  0C49  2C85               	goto	l8616
  6655                           
  6656                           ;SwitchTap.c: 78: switchTap_down = 1;
  6657  0C4A  01C5               	clrf	_switchTap_down^(0+384)
  6658  0C4B  0AC5               	incf	_switchTap_down^(0+384),f
  6659                           
  6660                           ;SwitchTap.c: 79: tap_timer = 0;
  6661  0C4C  3000               	movlw	0
  6662  0C4D  0020               	movlb	0	; select bank0
  6663  0C4E  00E0               	movwf	_tap_timer+3	;volatile
  6664  0C4F  3000               	movlw	0
  6665  0C50  00DF               	movwf	_tap_timer+2	;volatile
  6666  0C51  3000               	movlw	0
  6667  0C52  00DE               	movwf	_tap_timer+1	;volatile
  6668  0C53  3000               	movlw	0
  6669  0C54  00DD               	movwf	_tap_timer	;volatile
  6670                           
  6671                           ;SwitchTap.c: 80: tap_iteration = 1;
  6672  0C55  3001               	movlw	1
  6673  0C56  0023               	movlb	3	; select bank3
  6674  0C57  00D7               	movwf	_tap_iteration^(0+384)
  6675  0C58  3000               	movlw	0
  6676  0C59  00D8               	movwf	(_tap_iteration^(0+384)+1)
  6677                           
  6678                           ;SwitchTap.c: 81: tap_total = 0;
  6679  0C5A  3000               	movlw	0
  6680  0C5B  0024               	movlb	4	; select bank4
  6681  0C5C  00C0               	movwf	(_tap_total+3)^(0+512)
  6682  0C5D  3000               	movlw	0
  6683  0C5E  00BF               	movwf	(_tap_total+2)^(0+512)
  6684  0C5F  3000               	movlw	0
  6685  0C60  00BE               	movwf	(_tap_total+1)^(0+512)
  6686  0C61  3000               	movlw	0
  6687  0C62  00BD               	movwf	_tap_total^(0+512)
  6688                           
  6689                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6690  0C63  0023               	movlb	3	; select bank3
  6691  0C64  01DB               	clrf	_delay_time_changed^(0+384)
  6692                           
  6693                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6694  0C65  0021               	movlb	1	; select bank1
  6695  0C66  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6696  0C67  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6697  0C68                     l8614:	
  6698  0C68  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6699  0C69  0020               	movlb	0	; select bank0
  6700  0C6A  0256               	subwf	_num_taps,w
  6701  0C6B  1C03               	btfss	3,0
  6702  0C6C  2C85               	goto	l8616
  6703                           
  6704                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6705  0C6D  0021               	movlb	1	; select bank1
  6706  0C6E  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6707  0C6F  00BC               	movwf	??_updateSwitchTap^(0+128)
  6708  0C70  3001               	movlw	1
  6709  0C71                     u9325:	
  6710  0C71  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6711  0C72  3EFF               	addlw	-1
  6712  0C73  1D03               	skipz
  6713  0C74  2C71               	goto	u9325
  6714  0C75  353C               	lslf	??_updateSwitchTap^(0+128),w
  6715  0C76  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6716  0C77  0086               	movwf	6
  6717  0C78  3002               	movlw	2	; select bank4/5
  6718  0C79  0087               	movwf	7
  6719  0C7A  3000               	movlw	0
  6720  0C7B  3FC0               	movwi [0]fsr1
  6721  0C7C  3000               	movlw	0
  6722  0C7D  3FC1               	movwi [1]fsr1
  6723  0C7E  3FC2               	movwi [2]fsr1
  6724  0C7F  3FC3               	movwi [3]fsr1
  6725  0C80  3001               	movlw	1
  6726  0C81  00BC               	movwf	??_updateSwitchTap^(0+128)
  6727  0C82  083C               	movf	??_updateSwitchTap^(0+128),w
  6728  0C83  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6729  0C84  2C68               	goto	l8614
  6730  0C85                     l8616:	
  6731                           
  6732                           ;SwitchTap.c: 86: }
  6733                           ;SwitchTap.c: 87: }
  6734                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6735  0C85  0022               	movlb	2	; select bank2
  6736  0C86  086B               	movf	_longTap_start^(0+256),w
  6737  0C87  1D03               	btfss	3,2
  6738  0C88  2C90               	goto	l8622
  6739                           
  6740                           ;SwitchTap.c: 91: longTap_start = 1;
  6741  0C89  01EB               	clrf	_longTap_start^(0+256)
  6742  0C8A  0AEB               	incf	_longTap_start^(0+256),f
  6743                           
  6744                           ;SwitchTap.c: 92: longTap_state = 0;
  6745  0C8B  0020               	movlb	0	; select bank0
  6746  0C8C  01D5               	clrf	_longTap_state	;volatile
  6747                           
  6748                           ;SwitchTap.c: 93: longTap_timer = 0;
  6749  0C8D  0023               	movlb	3	; select bank3
  6750  0C8E  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  6751  0C8F  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6752  0C90                     l8622:	
  6753                           
  6754                           ;SwitchTap.c: 94: }
  6755                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6756  0C90  0020               	movlb	0	; select bank0
  6757  0C91  0850               	movf	_long_press_limit+1,w
  6758  0C92  0023               	movlb	3	; select bank3
  6759  0C93  0235               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6760  0C94  1D03               	skipz
  6761  0C95  2C9A               	goto	u9355
  6762  0C96  0020               	movlb	0	; select bank0
  6763  0C97  084F               	movf	_long_press_limit,w
  6764  0C98  0023               	movlb	3	; select bank3
  6765  0C99  0234               	subwf	_longTap_timer^(0+384),w	;volatile
  6766  0C9A                     u9355:	
  6767  0C9A  1C03               	skipc
  6768  0C9B  0008               	return
  6769  0C9C  0020               	movlb	0	; select bank0
  6770  0C9D  0855               	movf	_longTap_state,w	;volatile
  6771  0C9E  1D03               	btfss	3,2
  6772  0C9F  0008               	return
  6773  0CA0  0866               	movf	_doubleTap_state,w	;volatile
  6774  0CA1  1D03               	btfss	3,2
  6775  0CA2  0008               	return
  6776                           
  6777                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6778  0CA3  0850               	movf	_long_press_limit+1,w
  6779  0CA4  0023               	movlb	3	; select bank3
  6780  0CA5  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6781  0CA6  0020               	movlb	0	; select bank0
  6782  0CA7  084F               	movf	_long_press_limit,w
  6783  0CA8  0023               	movlb	3	; select bank3
  6784  0CA9  00B4               	movwf	_longTap_timer^(0+384)	;volatile
  6785                           
  6786                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6787  0CAA  0022               	movlb	2	; select bank2
  6788  0CAB  120D               	bcf	13,4	;volatile
  6789                           
  6790                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  6791  0CAC  036A               	decf	_feedback_start^(0+256),w
  6792  0CAD  1903               	btfsc	3,2
  6793  0CAE  2CB7               	goto	l8636
  6794                           
  6795                           ;SwitchTap.c: 104: setLongTapState(1);
  6796  0CAF  3001               	movlw	1
  6797  0CB0  0021               	movlb	1	; select bank1
  6798  0CB1  00A0               	movwf	setLongTapState@f_state^(0+128)
  6799  0CB2  3000               	movlw	0
  6800  0CB3  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6801  0CB4  31A0  2022         	fcall	_setLongTapState
  6802                           
  6803                           ;SwitchTap.c: 105: } else {
  6804  0CB6  0008               	return
  6805  0CB7                     l8636:	
  6806                           
  6807                           ;SwitchTap.c: 106: setDoublePressState(1);
  6808  0CB7  3001               	movlw	1
  6809  0CB8  0021               	movlb	1	; select bank1
  6810  0CB9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6811  0CBA  3000               	movlw	0
  6812  0CBB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6813  0CBC  31A3  2359         	fcall	_setDoublePressState
  6814                           
  6815                           ;SwitchTap.c: 107: }
  6816                           ;SwitchTap.c: 108: }
  6817                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6818  0CBE  0008               	return
  6819  0CBF                     l8638:	
  6820  0CBF  0020               	movlb	0	; select bank0
  6821  0CC0  1BE0               	btfsc	_tap_timer+3,7	;volatile
  6822  0CC1  2CCE               	goto	l8640
  6823  0CC2  0860               	movf	_tap_timer+3,w	;volatile
  6824  0CC3  1D03               	btfss	3,2
  6825  0CC4  0008               	return
  6826  0CC5  085F               	movf	_tap_timer+2,w	;volatile
  6827  0CC6  1D03               	btfss	3,2
  6828  0CC7  0008               	return
  6829  0CC8  301B               	movlw	27
  6830  0CC9  025D               	subwf	_tap_timer,w	;volatile
  6831  0CCA  3006               	movlw	6
  6832  0CCB  3B5E               	subwfb	_tap_timer+1,w	;volatile
  6833  0CCC  1803               	btfsc	3,0
  6834  0CCD  0008               	return
  6835  0CCE                     l8640:	
  6836  0CCE  0855               	movf	_longTap_state,w	;volatile
  6837  0CCF  1D03               	btfss	3,2
  6838  0CD0  0008               	return
  6839  0CD1  0023               	movlb	3	; select bank3
  6840  0CD2  0345               	decf	_switchTap_down^(0+384),w
  6841  0CD3  1903               	btfsc	3,2
  6842  0CD4  0008               	return
  6843                           
  6844                           ;SwitchTap.c: 112: switchTap_down = 1;
  6845  0CD5  01C5               	clrf	_switchTap_down^(0+384)
  6846  0CD6  0AC5               	incf	_switchTap_down^(0+384),f
  6847                           
  6848                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6849  0CD7  0020               	movlb	0	; select bank0
  6850  0CD8  1BE0               	btfsc	_tap_timer+3,7	;volatile
  6851  0CD9  2CEE               	goto	l1419
  6852  0CDA  0860               	movf	_tap_timer+3,w	;volatile
  6853  0CDB  1D03               	btfss	3,2
  6854  0CDC  2CE6               	goto	l8648
  6855  0CDD  085F               	movf	_tap_timer+2,w	;volatile
  6856  0CDE  1D03               	btfss	3,2
  6857  0CDF  2CE6               	goto	l8648
  6858  0CE0  3094               	movlw	148
  6859  0CE1  025D               	subwf	_tap_timer,w	;volatile
  6860  0CE2  3004               	movlw	4
  6861  0CE3  3B5E               	subwfb	_tap_timer+1,w	;volatile
  6862  0CE4  1C03               	btfss	3,0
  6863  0CE5  2CEE               	goto	l1419
  6864  0CE6                     l8648:	
  6865                           
  6866                           ;SwitchTap.c: 114: tap_timer = 1172;
  6867  0CE6  3000               	movlw	0
  6868  0CE7  00E0               	movwf	_tap_timer+3	;volatile
  6869  0CE8  3000               	movlw	0
  6870  0CE9  00DF               	movwf	_tap_timer+2	;volatile
  6871  0CEA  3004               	movlw	4
  6872  0CEB  00DE               	movwf	_tap_timer+1	;volatile
  6873  0CEC  3094               	movlw	148
  6874  0CED  00DD               	movwf	_tap_timer	;volatile
  6875  0CEE                     l1419:	
  6876                           
  6877                           ;SwitchTap.c: 115: }
  6878                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6879  0CEE  0856               	movf	_num_taps,w
  6880  0CEF  0021               	movlb	1	; select bank1
  6881  0CF0  00BC               	movwf	??_updateSwitchTap^(0+128)
  6882  0CF1  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  6883  0CF2  083C               	movf	??_updateSwitchTap^(0+128),w
  6884  0CF3  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6885  0CF4  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  6886  0CF5  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6887                           
  6888                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6889  0CF6  0023               	movlb	3	; select bank3
  6890  0CF7  0858               	movf	(_tap_iteration+1)^(0+384),w
  6891  0CF8  3A80               	xorlw	128
  6892  0CF9  3C80               	sublw	128
  6893  0CFA  1D03               	skipz
  6894  0CFB  2CFF               	goto	u9435
  6895  0CFC  0857               	movf	_tap_iteration^(0+384),w
  6896  0CFD  0020               	movlb	0	; select bank0
  6897  0CFE  0256               	subwf	_num_taps,w
  6898  0CFF                     u9435:	
  6899  0CFF  1C03               	skipc
  6900  0D00  2D31               	goto	l8656
  6901                           
  6902                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6903  0D01  0020               	movlb	0	; select bank0
  6904  0D02  085D               	movf	_tap_timer,w	;volatile
  6905  0D03  0024               	movlb	4	; select bank4
  6906  0D04  07BD               	addwf	_tap_total^(0+512),f
  6907  0D05  0020               	movlb	0	; select bank0
  6908  0D06  085E               	movf	_tap_timer+1,w	;volatile
  6909  0D07  0024               	movlb	4	; select bank4
  6910  0D08  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6911  0D09  0020               	movlb	0	; select bank0
  6912  0D0A  085F               	movf	_tap_timer+2,w	;volatile
  6913  0D0B  0024               	movlb	4	; select bank4
  6914  0D0C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6915  0D0D  0020               	movlb	0	; select bank0
  6916  0D0E  0860               	movf	_tap_timer+3,w	;volatile
  6917  0D0F  0024               	movlb	4	; select bank4
  6918  0D10  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6919                           
  6920                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6921  0D11  0023               	movlb	3	; select bank3
  6922  0D12  0857               	movf	_tap_iteration^(0+384),w
  6923  0D13  0021               	movlb	1	; select bank1
  6924  0D14  00BC               	movwf	??_updateSwitchTap^(0+128)
  6925  0D15  3001               	movlw	1
  6926  0D16                     u9445:	
  6927  0D16  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6928  0D17  3EFF               	addlw	-1
  6929  0D18  1D03               	skipz
  6930  0D19  2D16               	goto	u9445
  6931  0D1A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6932  0D1B  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6933  0D1C  0086               	movwf	6
  6934  0D1D  3002               	movlw	2	; select bank4/5
  6935  0D1E  0087               	movwf	7
  6936  0D1F  0020               	movlb	0	; select bank0
  6937  0D20  085D               	movf	_tap_timer,w	;volatile
  6938  0D21  3FC0               	movwi [0]fsr1
  6939  0D22  085E               	movf	_tap_timer+1,w	;volatile
  6940  0D23  3FC1               	movwi [1]fsr1
  6941  0D24  085F               	movf	_tap_timer+2,w	;volatile
  6942  0D25  3FC2               	movwi [2]fsr1
  6943  0D26  0860               	movf	_tap_timer+3,w	;volatile
  6944  0D27  3FC3               	movwi [3]fsr1
  6945                           
  6946                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6947  0D28  0023               	movlb	3	; select bank3
  6948  0D29  0858               	movf	(_tap_iteration+1)^(0+384),w
  6949  0D2A  0021               	movlb	1	; select bank1
  6950  0D2B  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6951  0D2C  0023               	movlb	3	; select bank3
  6952  0D2D  0857               	movf	_tap_iteration^(0+384),w
  6953  0D2E  0021               	movlb	1	; select bank1
  6954  0D2F  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6955                           
  6956                           ;SwitchTap.c: 122: } else {
  6957  0D30  2DAD               	goto	l8670
  6958  0D31                     l8656:	
  6959                           
  6960                           ;SwitchTap.c: 123: tap_total = 0;
  6961  0D31  3000               	movlw	0
  6962  0D32  0024               	movlb	4	; select bank4
  6963  0D33  00C0               	movwf	(_tap_total+3)^(0+512)
  6964  0D34  3000               	movlw	0
  6965  0D35  00BF               	movwf	(_tap_total+2)^(0+512)
  6966  0D36  3000               	movlw	0
  6967  0D37  00BE               	movwf	(_tap_total+1)^(0+512)
  6968  0D38  3000               	movlw	0
  6969  0D39  00BD               	movwf	_tap_total^(0+512)
  6970                           
  6971                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6972  0D3A  0021               	movlb	1	; select bank1
  6973  0D3B  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6974  0D3C  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6975  0D3D                     l8664:	
  6976  0D3D  0020               	movlb	0	; select bank0
  6977  0D3E  0856               	movf	_num_taps,w
  6978  0D3F  0021               	movlb	1	; select bank1
  6979  0D40  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  6980  0D41  1803               	btfsc	3,0
  6981  0D42  2D87               	goto	l8666
  6982                           
  6983                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6984  0D43  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6985  0D44  00BC               	movwf	??_updateSwitchTap^(0+128)
  6986  0D45  3001               	movlw	1
  6987  0D46                     u9455:	
  6988  0D46  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6989  0D47  3EFF               	addlw	-1
  6990  0D48  1D03               	skipz
  6991  0D49  2D46               	goto	u9455
  6992  0D4A  353C               	lslf	??_updateSwitchTap^(0+128),w
  6993  0D4B  3E04               	addlw	4
  6994  0D4C  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6995  0D4D  0086               	movwf	6
  6996  0D4E  3002               	movlw	2	; select bank4/5
  6997  0D4F  0087               	movwf	7
  6998  0D50  3F40               	moviw [0]fsr1
  6999  0D51  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7000  0D52  3F41               	moviw [1]fsr1
  7001  0D53  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7002  0D54  3F42               	moviw [2]fsr1
  7003  0D55  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7004  0D56  3F43               	moviw [3]fsr1
  7005  0D57  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7006  0D58  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7007  0D59  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7008  0D5A  3001               	movlw	1
  7009  0D5B                     u9465:	
  7010  0D5B  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7011  0D5C  3EFF               	addlw	-1
  7012  0D5D  1D03               	skipz
  7013  0D5E  2D5B               	goto	u9465
  7014  0D5F  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7015  0D60  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7016  0D61  0086               	movwf	6
  7017  0D62  3002               	movlw	2	; select bank4/5
  7018  0D63  0087               	movwf	7
  7019  0D64  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7020  0D65  3FC0               	movwi [0]fsr1
  7021  0D66  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7022  0D67  3FC1               	movwi [1]fsr1
  7023  0D68  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7024  0D69  3FC2               	movwi [2]fsr1
  7025  0D6A  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7026  0D6B  3FC3               	movwi [3]fsr1
  7027                           
  7028                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7029  0D6C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7030  0D6D  00BC               	movwf	??_updateSwitchTap^(0+128)
  7031  0D6E  3001               	movlw	1
  7032  0D6F                     u9475:	
  7033  0D6F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7034  0D70  3EFF               	addlw	-1
  7035  0D71  1D03               	skipz
  7036  0D72  2D6F               	goto	u9475
  7037  0D73  353C               	lslf	??_updateSwitchTap^(0+128),w
  7038  0D74  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7039  0D75  0086               	movwf	6
  7040  0D76  3002               	movlw	2	; select bank4/5
  7041  0D77  0087               	movwf	7
  7042  0D78  3F40               	moviw [0]fsr1
  7043  0D79  0024               	movlb	4	; select bank4
  7044  0D7A  07BD               	addwf	_tap_total^(0+512),f
  7045  0D7B  3F41               	moviw [1]fsr1
  7046  0D7C  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7047  0D7D  3F42               	moviw [2]fsr1
  7048  0D7E  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7049  0D7F  3F43               	moviw [3]fsr1
  7050  0D80  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7051  0D81  3001               	movlw	1
  7052  0D82  0021               	movlb	1	; select bank1
  7053  0D83  00BC               	movwf	??_updateSwitchTap^(0+128)
  7054  0D84  083C               	movf	??_updateSwitchTap^(0+128),w
  7055  0D85  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7056  0D86  2D3D               	goto	l8664
  7057  0D87                     l8666:	
  7058                           
  7059                           ;SwitchTap.c: 127: }
  7060                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7061  0D87  0020               	movlb	0	; select bank0
  7062  0D88  0856               	movf	_num_taps,w
  7063  0D89  0021               	movlb	1	; select bank1
  7064  0D8A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7065  0D8B  3001               	movlw	1
  7066  0D8C                     u9495:	
  7067  0D8C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7068  0D8D  3EFF               	addlw	-1
  7069  0D8E  1D03               	skipz
  7070  0D8F  2D8C               	goto	u9495
  7071  0D90  353C               	lslf	??_updateSwitchTap^(0+128),w
  7072  0D91  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7073  0D92  0086               	movwf	6
  7074  0D93  3002               	movlw	2	; select bank4/5
  7075  0D94  0087               	movwf	7
  7076  0D95  0020               	movlb	0	; select bank0
  7077  0D96  085D               	movf	_tap_timer,w	;volatile
  7078  0D97  3FC0               	movwi [0]fsr1
  7079  0D98  085E               	movf	_tap_timer+1,w	;volatile
  7080  0D99  3FC1               	movwi [1]fsr1
  7081  0D9A  085F               	movf	_tap_timer+2,w	;volatile
  7082  0D9B  3FC2               	movwi [2]fsr1
  7083  0D9C  0860               	movf	_tap_timer+3,w	;volatile
  7084  0D9D  3FC3               	movwi [3]fsr1
  7085                           
  7086                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7087  0D9E  085D               	movf	_tap_timer,w	;volatile
  7088  0D9F  0024               	movlb	4	; select bank4
  7089  0DA0  07BD               	addwf	_tap_total^(0+512),f
  7090  0DA1  0020               	movlb	0	; select bank0
  7091  0DA2  085E               	movf	_tap_timer+1,w	;volatile
  7092  0DA3  0024               	movlb	4	; select bank4
  7093  0DA4  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7094  0DA5  0020               	movlb	0	; select bank0
  7095  0DA6  085F               	movf	_tap_timer+2,w	;volatile
  7096  0DA7  0024               	movlb	4	; select bank4
  7097  0DA8  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7098  0DA9  0020               	movlb	0	; select bank0
  7099  0DAA  0860               	movf	_tap_timer+3,w	;volatile
  7100  0DAB  0024               	movlb	4	; select bank4
  7101  0DAC  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7102  0DAD                     l8670:	
  7103                           
  7104                           ;SwitchTap.c: 130: }
  7105                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7106  0DAD  0021               	movlb	1	; select bank1
  7107  0DAE  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7108  0DAF  00A0               	movwf	___aldiv@divisor^(0+128)
  7109  0DB0  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7110  0DB1  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7111  0DB2  0D89               	rlf	9,f
  7112  0DB3  3B89               	subwfb	9,f
  7113  0DB4  0989               	comf	9,f
  7114  0DB5  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7115  0DB6  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7116  0DB7  0024               	movlb	4	; select bank4
  7117  0DB8  0840               	movf	(_tap_total+3)^(0+512),w
  7118  0DB9  0021               	movlb	1	; select bank1
  7119  0DBA  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7120  0DBB  0024               	movlb	4	; select bank4
  7121  0DBC  083F               	movf	(_tap_total+2)^(0+512),w
  7122  0DBD  0021               	movlb	1	; select bank1
  7123  0DBE  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7124  0DBF  0024               	movlb	4	; select bank4
  7125  0DC0  083E               	movf	(_tap_total+1)^(0+512),w
  7126  0DC1  0021               	movlb	1	; select bank1
  7127  0DC2  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7128  0DC3  0024               	movlb	4	; select bank4
  7129  0DC4  083D               	movf	_tap_total^(0+512),w
  7130  0DC5  0021               	movlb	1	; select bank1
  7131  0DC6  00A4               	movwf	___aldiv@dividend^(0+128)
  7132  0DC7  3199  2165         	fcall	___aldiv
  7133  0DC9  0021               	movlb	1	; select bank1
  7134  0DCA  0823               	movf	(?___aldiv+3)^(0+128),w
  7135  0DCB  0020               	movlb	0	; select bank0
  7136  0DCC  00C8               	movwf	_baseline_delay_time+3	;volatile
  7137  0DCD  0021               	movlb	1	; select bank1
  7138  0DCE  0822               	movf	(?___aldiv+2)^(0+128),w
  7139  0DCF  0020               	movlb	0	; select bank0
  7140  0DD0  00C7               	movwf	_baseline_delay_time+2	;volatile
  7141  0DD1  0021               	movlb	1	; select bank1
  7142  0DD2  0821               	movf	(?___aldiv+1)^(0+128),w
  7143  0DD3  0020               	movlb	0	; select bank0
  7144  0DD4  00C6               	movwf	_baseline_delay_time+1	;volatile
  7145  0DD5  0021               	movlb	1	; select bank1
  7146  0DD6  0820               	movf	?___aldiv^(0+128),w
  7147  0DD7  0020               	movlb	0	; select bank0
  7148  0DD8  00C5               	movwf	_baseline_delay_time	;volatile
  7149                           
  7150                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7151  0DD9  0023               	movlb	3	; select bank3
  7152  0DDA  01DB               	clrf	_delay_time_changed^(0+384)
  7153  0DDB  0ADB               	incf	_delay_time_changed^(0+384),f
  7154                           
  7155                           ;SwitchTap.c: 134: tap_timer = 0;
  7156  0DDC  3000               	movlw	0
  7157  0DDD  0020               	movlb	0	; select bank0
  7158  0DDE  00E0               	movwf	_tap_timer+3	;volatile
  7159  0DDF  3000               	movlw	0
  7160  0DE0  00DF               	movwf	_tap_timer+2	;volatile
  7161  0DE1  3000               	movlw	0
  7162  0DE2  00DE               	movwf	_tap_timer+1	;volatile
  7163  0DE3  3000               	movlw	0
  7164  0DE4  00DD               	movwf	_tap_timer	;volatile
  7165                           
  7166                           ;SwitchTap.c: 136: tap_iteration++;
  7167  0DE5  3001               	movlw	1
  7168  0DE6  0023               	movlb	3	; select bank3
  7169  0DE7  07D7               	addwf	_tap_iteration^(0+384),f
  7170  0DE8  3000               	movlw	0
  7171  0DE9  3DD8               	addwfc	(_tap_iteration+1)^(0+384),f
  7172                           
  7173                           ;SwitchTap.c: 137: }
  7174                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7175  0DEA  0008               	return
  7176  0DEB                     l8678:	
  7177  0DEB  3019               	movlw	25
  7178  0DEC  0022               	movlb	2	; select bank2
  7179  0DED  026C               	subwf	_switchTap_pressed^(0+256),w
  7180  0DEE  1C03               	skipc
  7181  0DEF  0008               	return
  7182                           
  7183                           ;SwitchTap.c: 140: switchTap_down = 0;
  7184  0DF0  0023               	movlb	3	; select bank3
  7185  0DF1  01C5               	clrf	_switchTap_down^(0+384)
  7186                           
  7187                           ;SwitchTap.c: 141: switchTap_state = 0;
  7188  0DF2  01E0               	clrf	_switchTap_state^(0+384)
  7189                           
  7190                           ;SwitchTap.c: 147: setLongTapState(0);
  7191  0DF3  3000               	movlw	0
  7192  0DF4  0021               	movlb	1	; select bank1
  7193  0DF5  00A0               	movwf	setLongTapState@f_state^(0+128)
  7194  0DF6  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7195  0DF7  31A0  2022         	fcall	_setLongTapState
  7196                           
  7197                           ;SwitchTap.c: 149: longTap_timer = 0;
  7198  0DF9  0023               	movlb	3	; select bank3
  7199  0DFA  01B4               	clrf	_longTap_timer^(0+384)	;volatile
  7200  0DFB  01B5               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7201                           
  7202                           ;SwitchTap.c: 150: longTap_start = 0;
  7203  0DFC  0022               	movlb	2	; select bank2
  7204  0DFD  01EB               	clrf	_longTap_start^(0+256)
  7205                           
  7206                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7207  0DFE  3019               	movlw	25
  7208  0DFF  0021               	movlb	1	; select bank1
  7209  0E00  00BC               	movwf	??_updateSwitchTap^(0+128)
  7210  0E01  083C               	movf	??_updateSwitchTap^(0+128),w
  7211  0E02  0022               	movlb	2	; select bank2
  7212  0E03  00EC               	movwf	_switchTap_pressed^(0+256)
  7213  0E04  0008               	return
  7214  0E05                     __end_of_updateSwitchTap:	
  7215                           
  7216                           	psect	text4
  7217  2022                     __ptext4:	
  7218 ;; *************** function _setLongTapState *****************
  7219 ;; Defined at:
  7220 ;;		line 167 in file "SwitchTap.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  f_state         2    0[BANK1 ] int 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  1    wreg      void 
  7227 ;; Registers used:
  7228 ;;		wreg, status,0
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7234 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7236 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7237 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7238 ;;Total ram usage:        4 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    3
  7241 ;; This function calls:
  7242 ;;		Nothing
  7243 ;; This function is called by:
  7244 ;;		_updateSwitchTap
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           
  7249                           ;psect for function _setLongTapState
  7250  2022                     _setLongTapState:	
  7251                           
  7252                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in _setLongTapState: [wreg+status,0]
  7256  2022  0020               	movlb	0	; select bank0
  7257  2023  0855               	movf	_longTap_state,w	;volatile
  7258  2024  0021               	movlb	1	; select bank1
  7259  2025  00A2               	movwf	??_setLongTapState^(0+128)
  7260  2026  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7261  2027  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7262  2028  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7263  2029  1D03               	skipz
  7264  202A  282D               	goto	u8565
  7265  202B  0820               	movf	setLongTapState@f_state^(0+128),w
  7266  202C  0622               	xorwf	??_setLongTapState^(0+128),w
  7267  202D                     u8565:	
  7268  202D  1903               	btfsc	3,2
  7269  202E  0008               	return
  7270                           
  7271                           ;SwitchTap.c: 169: longTap_state = f_state;
  7272  202F  0820               	movf	setLongTapState@f_state^(0+128),w
  7273  2030  00A2               	movwf	??_setLongTapState^(0+128)
  7274  2031  0822               	movf	??_setLongTapState^(0+128),w
  7275  2032  0020               	movlb	0	; select bank0
  7276  2033  00D5               	movwf	_longTap_state	;volatile
  7277                           
  7278                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7279  2034  0021               	movlb	1	; select bank1
  7280  2035  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7281  2036  0022               	movlb	2	; select bank2
  7282  2037  1C03               	skipc
  7283  2038  128D               	bcf	13,5	;volatile
  7284  2039  1803               	skipnc
  7285  203A  168D               	bsf	13,5	;volatile
  7286  203B  0008               	return
  7287  203C                     __end_of_setLongTapState:	
  7288                           
  7289                           	psect	text5
  7290  1965                     __ptext5:	
  7291 ;; *************** function ___aldiv *****************
  7292 ;; Defined at:
  7293 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  divisor         4    0[BANK1 ] long 
  7296 ;;  dividend        4    4[BANK1 ] long 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  quotient        4   11[BANK1 ] long 
  7299 ;;  sign            1   10[BANK1 ] unsigned char 
  7300 ;;  counter         1    9[BANK1 ] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  4    0[BANK1 ] long 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7310 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7311 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7312 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7313 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7314 ;;Total ram usage:       15 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    3
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_updateSwitchTap
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function ___aldiv
  7326  1965                     ___aldiv:	
  7327                           
  7328                           ;incstack = 0
  7329                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7330  1965  0021               	movlb	1	; select bank1
  7331  1966  01AA               	clrf	___aldiv@sign^(0+128)
  7332  1967  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7333  1968  2976               	goto	l1986
  7334  1969  09A0               	comf	___aldiv@divisor^(0+128),f
  7335  196A  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7336  196B  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7337  196C  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7338  196D  0AA0               	incf	___aldiv@divisor^(0+128),f
  7339  196E  1903               	skipnz
  7340  196F  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7341  1970  1903               	skipnz
  7342  1971  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7343  1972  1903               	skipnz
  7344  1973  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7345  1974  01AA               	clrf	___aldiv@sign^(0+128)
  7346  1975  0AAA               	incf	___aldiv@sign^(0+128),f
  7347  1976                     l1986:	
  7348  1976  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7349  1977  2987               	goto	l8274
  7350  1978  09A4               	comf	___aldiv@dividend^(0+128),f
  7351  1979  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7352  197A  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7353  197B  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7354  197C  0AA4               	incf	___aldiv@dividend^(0+128),f
  7355  197D  1903               	skipnz
  7356  197E  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7357  197F  1903               	skipnz
  7358  1980  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7359  1981  1903               	skipnz
  7360  1982  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7361  1983  3001               	movlw	1
  7362  1984  00A8               	movwf	??___aldiv^(0+128)
  7363  1985  0828               	movf	??___aldiv^(0+128),w
  7364  1986  06AA               	xorwf	___aldiv@sign^(0+128),f
  7365  1987                     l8274:	
  7366  1987  3000               	movlw	0
  7367  1988  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7368  1989  3000               	movlw	0
  7369  198A  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7370  198B  3000               	movlw	0
  7371  198C  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7372  198D  3000               	movlw	0
  7373  198E  00AB               	movwf	___aldiv@quotient^(0+128)
  7374  198F  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7375  1990  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7376  1991  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7377  1992  0420               	iorwf	___aldiv@divisor^(0+128),w
  7378  1993  1903               	skipnz
  7379  1994  29D0               	goto	l8296
  7380  1995  01A9               	clrf	___aldiv@counter^(0+128)
  7381  1996  0AA9               	incf	___aldiv@counter^(0+128),f
  7382  1997                     l8282:	
  7383  1997  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7384  1998  29A5               	goto	l8284
  7385  1999  3001               	movlw	1
  7386  199A                     u8705:	
  7387  199A  35A0               	lslf	___aldiv@divisor^(0+128),f
  7388  199B  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7389  199C  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7390  199D  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7391  199E  0B89               	decfsz	9,f
  7392  199F  299A               	goto	u8705
  7393  19A0  3001               	movlw	1
  7394  19A1  00A8               	movwf	??___aldiv^(0+128)
  7395  19A2  0828               	movf	??___aldiv^(0+128),w
  7396  19A3  07A9               	addwf	___aldiv@counter^(0+128),f
  7397  19A4  2997               	goto	l8282
  7398  19A5                     l8284:	
  7399  19A5  3001               	movlw	1
  7400  19A6                     u8725:	
  7401  19A6  35AB               	lslf	___aldiv@quotient^(0+128),f
  7402  19A7  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7403  19A8  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7404  19A9  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7405  19AA  0B89               	decfsz	9,f
  7406  19AB  29A6               	goto	u8725
  7407  19AC  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7408  19AD  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7409  19AE  1D03               	skipz
  7410  19AF  29BA               	goto	u8735
  7411  19B0  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7412  19B1  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7413  19B2  1D03               	skipz
  7414  19B3  29BA               	goto	u8735
  7415  19B4  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7416  19B5  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7417  19B6  1D03               	skipz
  7418  19B7  29BA               	goto	u8735
  7419  19B8  0820               	movf	___aldiv@divisor^(0+128),w
  7420  19B9  0224               	subwf	___aldiv@dividend^(0+128),w
  7421  19BA                     u8735:	
  7422  19BA  1C03               	skipc
  7423  19BB  29C5               	goto	l8292
  7424  19BC  0820               	movf	___aldiv@divisor^(0+128),w
  7425  19BD  02A4               	subwf	___aldiv@dividend^(0+128),f
  7426  19BE  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7427  19BF  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7428  19C0  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7429  19C1  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7430  19C2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7431  19C3  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7432  19C4  142B               	bsf	___aldiv@quotient^(0+128),0
  7433  19C5                     l8292:	
  7434  19C5  3001               	movlw	1
  7435  19C6                     u8745:	
  7436  19C6  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7437  19C7  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7438  19C8  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7439  19C9  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7440  19CA  0B89               	decfsz	9,f
  7441  19CB  29C6               	goto	u8745
  7442  19CC  3001               	movlw	1
  7443  19CD  02A9               	subwf	___aldiv@counter^(0+128),f
  7444  19CE  1D03               	btfss	3,2
  7445  19CF  29A5               	goto	l8284
  7446  19D0                     l8296:	
  7447  19D0  082A               	movf	___aldiv@sign^(0+128),w
  7448  19D1  1903               	btfsc	3,2
  7449  19D2  29DE               	goto	l8300
  7450  19D3  09AB               	comf	___aldiv@quotient^(0+128),f
  7451  19D4  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7452  19D5  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7453  19D6  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7454  19D7  0AAB               	incf	___aldiv@quotient^(0+128),f
  7455  19D8  1903               	skipnz
  7456  19D9  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7457  19DA  1903               	skipnz
  7458  19DB  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7459  19DC  1903               	skipnz
  7460  19DD  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7461  19DE                     l8300:	
  7462  19DE  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7463  19DF  00A3               	movwf	(?___aldiv+3)^(0+128)
  7464  19E0  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7465  19E1  00A2               	movwf	(?___aldiv+2)^(0+128)
  7466  19E2  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7467  19E3  00A1               	movwf	(?___aldiv+1)^(0+128)
  7468  19E4  082B               	movf	___aldiv@quotient^(0+128),w
  7469  19E5  00A0               	movwf	?___aldiv^(0+128)
  7470  19E6  0008               	return
  7471  19E7                     __end_of___aldiv:	
  7472                           
  7473                           	psect	text6
  7474  1170                     __ptext6:	
  7475 ;; *************** function _updateSwitchBypass *****************
  7476 ;; Defined at:
  7477 ;;		line 34 in file "SwitchBypass.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;		None
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7493 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7494 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7495 ;;Total ram usage:        2 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    8
  7498 ;; This function calls:
  7499 ;;		_setDoublePressState
  7500 ;;		_setFeedbackState
  7501 ;;		_setSwitchBypassState
  7502 ;; This function is called by:
  7503 ;;		_main
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           
  7508                           ;psect for function _updateSwitchBypass
  7509  1170                     _updateSwitchBypass:	
  7510                           
  7511                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7512                           
  7513                           ;incstack = 0
  7514                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7515  1170  0020               	movlb	0	; select bank0
  7516  1171  1890               	btfsc	16,1	;volatile
  7517  1172  2986               	goto	l8506
  7518                           
  7519                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7520  1173  0023               	movlb	3	; select bank3
  7521  1174  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7522  1175  3A80               	xorlw	128
  7523  1176  0021               	movlb	1	; select bank1
  7524  1177  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7525  1178  3080               	movlw	128
  7526  1179  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7527  117A  1D03               	skipz
  7528  117B  297F               	goto	u9065
  7529  117C  3001               	movlw	1
  7530  117D  0023               	movlb	3	; select bank3
  7531  117E  023A               	subwf	_switchBypass_pressed^(0+384),w
  7532  117F                     u9065:	
  7533  117F  1C03               	skipc
  7534  1180  2999               	goto	l8510
  7535                           
  7536                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7537  1181  30FF               	movlw	255
  7538  1182  0023               	movlb	3	; select bank3
  7539  1183  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7540  1184  30FF               	movlw	255
  7541  1185  2998               	goto	L1
  7542  1186                     l8506:	
  7543                           ;SwitchBypass.c: 44: }
  7544                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7545                           
  7546  1186  0023               	movlb	3	; select bank3
  7547  1187  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7548  1188  3A80               	xorlw	128
  7549  1189  0021               	movlb	1	; select bank1
  7550  118A  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7551  118B  3080               	movlw	128
  7552  118C  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7553  118D  1D03               	skipz
  7554  118E  2992               	goto	u9075
  7555  118F  3019               	movlw	25
  7556  1190  0023               	movlb	3	; select bank3
  7557  1191  023A               	subwf	_switchBypass_pressed^(0+384),w
  7558  1192                     u9075:	
  7559  1192  1803               	skipnc
  7560  1193  2999               	goto	l8510
  7561                           
  7562                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7563  1194  3001               	movlw	1
  7564  1195  0023               	movlb	3	; select bank3
  7565  1196  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7566  1197  3000               	movlw	0
  7567  1198                     L1:	
  7568  1198  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7569  1199                     l8510:	
  7570                           
  7571                           ;SwitchBypass.c: 47: }
  7572                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7573  1199  0023               	movlb	3	; select bank3
  7574  119A  083A               	movf	_switchBypass_pressed^(0+384),w
  7575  119B  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7576  119C  1D03               	btfss	3,2
  7577  119D  29FA               	goto	l8550
  7578                           
  7579                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7580  119E  0022               	movlb	2	; select bank2
  7581  119F  086A               	movf	_feedback_start^(0+256),w
  7582  11A0  1D03               	btfss	3,2
  7583  11A1  29A7               	goto	l8518
  7584                           
  7585                           ;SwitchBypass.c: 57: feedback_start = 1;
  7586  11A2  01EA               	clrf	_feedback_start^(0+256)
  7587  11A3  0AEA               	incf	_feedback_start^(0+256),f
  7588                           
  7589                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7590  11A4  0023               	movlb	3	; select bank3
  7591  11A5  01A8               	clrf	_feedback_timer^(0+384)	;volatile
  7592  11A6  01A9               	clrf	(_feedback_timer+1)^(0+384)	;volatile
  7593  11A7                     l8518:	
  7594                           
  7595                           ;SwitchBypass.c: 59: }
  7596                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7597  11A7  0020               	movlb	0	; select bank0
  7598  11A8  0850               	movf	_long_press_limit+1,w
  7599  11A9  0023               	movlb	3	; select bank3
  7600  11AA  0229               	subwf	(_feedback_timer+1)^(0+384),w	;volatile
  7601  11AB  1D03               	skipz
  7602  11AC  29B1               	goto	u9105
  7603  11AD  0020               	movlb	0	; select bank0
  7604  11AE  084F               	movf	_long_press_limit,w
  7605  11AF  0023               	movlb	3	; select bank3
  7606  11B0  0228               	subwf	_feedback_timer^(0+384),w	;volatile
  7607  11B1                     u9105:	
  7608  11B1  1C03               	skipc
  7609  11B2  29D0               	goto	l8532
  7610  11B3  0020               	movlb	0	; select bank0
  7611  11B4  0854               	movf	_feedback_state,w	;volatile
  7612  11B5  1D03               	btfss	3,2
  7613  11B6  29D0               	goto	l8532
  7614  11B7  0866               	movf	_doubleTap_state,w	;volatile
  7615  11B8  1D03               	btfss	3,2
  7616  11B9  29D0               	goto	l8532
  7617                           
  7618                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7619  11BA  0022               	movlb	2	; select bank2
  7620  11BB  110D               	bcf	13,2	;volatile
  7621                           
  7622                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7623  11BC  036B               	decf	_longTap_start^(0+256),w
  7624  11BD  1903               	btfsc	3,2
  7625  11BE  29C8               	goto	l8530
  7626                           
  7627                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7628  11BF  3001               	movlw	1
  7629  11C0  0021               	movlb	1	; select bank1
  7630  11C1  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7631  11C2  3000               	movlw	0
  7632  11C3  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7633  11C4  31A0  2008  3191   	fcall	_setFeedbackState
  7634                           
  7635                           ;SwitchBypass.c: 67: } else {
  7636  11C7  29D0               	goto	l8532
  7637  11C8                     l8530:	
  7638                           
  7639                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7640  11C8  3001               	movlw	1
  7641  11C9  0021               	movlb	1	; select bank1
  7642  11CA  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7643  11CB  3000               	movlw	0
  7644  11CC  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7645  11CD  31A3  2359  3191   	fcall	_setDoublePressState
  7646  11D0                     l8532:	
  7647                           
  7648                           ;SwitchBypass.c: 69: }
  7649                           ;SwitchBypass.c: 70: }
  7650                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7651  11D0  0020               	movlb	0	; select bank0
  7652  11D1  0866               	movf	_doubleTap_state,w	;volatile
  7653  11D2  1D03               	btfss	3,2
  7654  11D3  29F6               	goto	l1263
  7655  11D4  0854               	movf	_feedback_state,w	;volatile
  7656  11D5  1D03               	btfss	3,2
  7657  11D6  29F6               	goto	l1263
  7658                           
  7659                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7660  11D7  0358               	decf	_switchBypass_state,w
  7661  11D8  1D03               	btfss	3,2
  7662  11D9  29E8               	goto	l8544
  7663                           
  7664                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7665  11DA  0024               	movlb	4	; select bank4
  7666  11DB  0362               	decf	_switchBypass_up^(0+512),w
  7667  11DC  0463               	iorwf	(_switchBypass_up+1)^(0+512),w
  7668  11DD  1D03               	btfss	3,2
  7669  11DE  29F6               	goto	l1263
  7670                           
  7671                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7672  11DF  0023               	movlb	3	; select bank3
  7673  11E0  01DA               	clrf	_currentBypassState^(0+384)
  7674  11E1  0ADA               	incf	_currentBypassState^(0+384),f
  7675                           
  7676                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7677  11E2  3001               	movlw	1
  7678  11E3  0024               	movlb	4	; select bank4
  7679  11E4  00D5               	movwf	_switchBypass_toggle^(0+512)
  7680  11E5  3000               	movlw	0
  7681  11E6  00D6               	movwf	(_switchBypass_toggle^(0+512)+1)
  7682                           
  7683                           ;SwitchBypass.c: 78: }
  7684                           ;SwitchBypass.c: 93: } else {
  7685  11E7  29F6               	goto	l1263
  7686  11E8                     l8544:	
  7687                           
  7688                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7689  11E8  0023               	movlb	3	; select bank3
  7690  11E9  033E               	decf	_bypass_turning_on^(0+384),w
  7691  11EA  1903               	btfsc	3,2
  7692  11EB  29F6               	goto	l1263
  7693                           
  7694                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7695  11EC  01DA               	clrf	_currentBypassState^(0+384)
  7696                           
  7697                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7698  11ED  01BE               	clrf	_bypass_turning_on^(0+384)
  7699  11EE  0ABE               	incf	_bypass_turning_on^(0+384),f
  7700                           
  7701                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7702  11EF  0024               	movlb	4	; select bank4
  7703  11F0  01D5               	clrf	_switchBypass_toggle^(0+512)
  7704  11F1  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7705                           
  7706                           ;SwitchBypass.c: 101: feedback_state = 0;
  7707  11F2  0020               	movlb	0	; select bank0
  7708  11F3  01D4               	clrf	_feedback_state	;volatile
  7709                           
  7710                           ;SwitchBypass.c: 102: feedback_start = 0;
  7711  11F4  0022               	movlb	2	; select bank2
  7712  11F5  01EA               	clrf	_feedback_start^(0+256)
  7713  11F6                     l1263:	
  7714                           
  7715                           ;SwitchBypass.c: 103: }
  7716                           ;SwitchBypass.c: 104: }
  7717                           ;SwitchBypass.c: 106: }
  7718                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7719  11F6  0024               	movlb	4	; select bank4
  7720  11F7  01E2               	clrf	_switchBypass_up^(0+512)
  7721  11F8  01E3               	clrf	(_switchBypass_up+1)^(0+512)
  7722                           
  7723                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7724  11F9  0008               	return
  7725  11FA                     l8550:	
  7726  11FA  0023               	movlb	3	; select bank3
  7727  11FB  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7728  11FC  3A80               	xorlw	128
  7729  11FD  0021               	movlb	1	; select bank1
  7730  11FE  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7731  11FF  3080               	movlw	128
  7732  1200  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7733  1201  1D03               	skipz
  7734  1202  2A06               	goto	u9195
  7735  1203  3019               	movlw	25
  7736  1204  0023               	movlb	3	; select bank3
  7737  1205  023A               	subwf	_switchBypass_pressed^(0+384),w
  7738  1206                     u9195:	
  7739  1206  1C03               	skipc
  7740  1207  0008               	return
  7741                           
  7742                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7743  1208  0020               	movlb	0	; select bank0
  7744  1209  0366               	decf	_doubleTap_state,w	;volatile
  7745  120A  1D03               	btfss	3,2
  7746  120B  2A15               	goto	l8556
  7747                           
  7748                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7749  120C  0023               	movlb	3	; select bank3
  7750  120D  085A               	movf	_currentBypassState^(0+384),w
  7751  120E  0021               	movlb	1	; select bank1
  7752  120F  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7753  1210  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7754  1211  083C               	movf	??_updateSwitchBypass^(0+128),w
  7755  1212  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7756  1213  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7757  1214  2A32               	goto	L2
  7758  1215                     l8556:	
  7759                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7760                           
  7761  1215  0023               	movlb	3	; select bank3
  7762  1216  033E               	decf	_bypass_turning_on^(0+384),w
  7763  1217  1903               	btfsc	3,2
  7764  1218  2A1D               	goto	l8560
  7765  1219  0020               	movlb	0	; select bank0
  7766  121A  0354               	decf	_feedback_state,w	;volatile
  7767  121B  1D03               	btfss	3,2
  7768  121C  2A23               	goto	l8562
  7769  121D                     l8560:	
  7770                           
  7771                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7772  121D  3001               	movlw	1
  7773  121E  0021               	movlb	1	; select bank1
  7774  121F  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7775  1220  3000               	movlw	0
  7776  1221  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7777  1222  2A33               	goto	L3
  7778  1223                     l8562:	
  7779                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7780                           
  7781  1223  0024               	movlb	4	; select bank4
  7782  1224  0355               	decf	_switchBypass_toggle^(0+512),w
  7783  1225  0456               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  7784  1226  1D03               	btfss	3,2
  7785  1227  2A36               	goto	l8570
  7786  1228  0020               	movlb	0	; select bank0
  7787  1229  0854               	movf	_feedback_state,w	;volatile
  7788  122A  1D03               	btfss	3,2
  7789  122B  2A36               	goto	l8570
  7790  122C  0866               	movf	_doubleTap_state,w	;volatile
  7791  122D  1D03               	btfss	3,2
  7792  122E  2A36               	goto	l8570
  7793                           
  7794                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7795  122F  3000               	movlw	0
  7796  1230  0021               	movlb	1	; select bank1
  7797  1231  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7798  1232                     L2:	
  7799  1232  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7800  1233                     L3:	
  7801  1233  31A5  256C  3191   	fcall	_setSwitchBypassState
  7802  1236                     l8570:	
  7803                           
  7804                           ;SwitchBypass.c: 115: }
  7805                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7806  1236  0020               	movlb	0	; select bank0
  7807  1237  0C58               	rrf	_switchBypass_state,w
  7808  1238  0022               	movlb	2	; select bank2
  7809  1239  1C03               	skipc
  7810  123A  110D               	bcf	13,2	;volatile
  7811  123B  1803               	skipnc
  7812  123C  150D               	bsf	13,2	;volatile
  7813                           
  7814                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7815  123D  3000               	movlw	0
  7816  123E  0021               	movlb	1	; select bank1
  7817  123F  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7818  1240  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7819  1241  31A0  2008  3191   	fcall	_setFeedbackState
  7820                           
  7821                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7822  1244  3000               	movlw	0
  7823  1245  0021               	movlb	1	; select bank1
  7824  1246  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7825  1247  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7826  1248  31A3  2359         	fcall	_setDoublePressState
  7827                           
  7828                           ;SwitchBypass.c: 122: feedback_start = 0;
  7829  124A  0022               	movlb	2	; select bank2
  7830  124B  01EA               	clrf	_feedback_start^(0+256)
  7831                           
  7832                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7833  124C  0023               	movlb	3	; select bank3
  7834  124D  01BE               	clrf	_bypass_turning_on^(0+384)
  7835                           
  7836                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7837  124E  0024               	movlb	4	; select bank4
  7838  124F  01D5               	clrf	_switchBypass_toggle^(0+512)
  7839  1250  01D6               	clrf	(_switchBypass_toggle+1)^(0+512)
  7840                           
  7841                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7842  1251  3001               	movlw	1
  7843  1252  00E2               	movwf	_switchBypass_up^(0+512)
  7844  1253  3000               	movlw	0
  7845  1254  00E3               	movwf	(_switchBypass_up^(0+512)+1)
  7846                           
  7847                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7848  1255  3019               	movlw	25
  7849  1256  0023               	movlb	3	; select bank3
  7850  1257  00BA               	movwf	_switchBypass_pressed^(0+384)
  7851  1258  3000               	movlw	0
  7852  1259  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  7853  125A  0008               	return
  7854  125B                     __end_of_updateSwitchBypass:	
  7855                           
  7856                           	psect	text7
  7857  2008                     __ptext7:	
  7858 ;; *************** function _setFeedbackState *****************
  7859 ;; Defined at:
  7860 ;;		line 151 in file "SwitchBypass.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  f_state         2    0[BANK1 ] int 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, status,0
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7874 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7876 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7877 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7878 ;;Total ram usage:        4 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    3
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_updateSwitchBypass
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _setFeedbackState
  7890  2008                     _setFeedbackState:	
  7891                           
  7892                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7893                           
  7894                           ;incstack = 0
  7895                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7896  2008  0020               	movlb	0	; select bank0
  7897  2009  0854               	movf	_feedback_state,w	;volatile
  7898  200A  0021               	movlb	1	; select bank1
  7899  200B  00A2               	movwf	??_setFeedbackState^(0+128)
  7900  200C  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  7901  200D  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  7902  200E  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  7903  200F  1D03               	skipz
  7904  2010  2813               	goto	u8515
  7905  2011  0820               	movf	setFeedbackState@f_state^(0+128),w
  7906  2012  0622               	xorwf	??_setFeedbackState^(0+128),w
  7907  2013                     u8515:	
  7908  2013  1903               	btfsc	3,2
  7909  2014  0008               	return
  7910                           
  7911                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7912  2015  0820               	movf	setFeedbackState@f_state^(0+128),w
  7913  2016  00A2               	movwf	??_setFeedbackState^(0+128)
  7914  2017  0822               	movf	??_setFeedbackState^(0+128),w
  7915  2018  0020               	movlb	0	; select bank0
  7916  2019  00D4               	movwf	_feedback_state	;volatile
  7917                           
  7918                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7919  201A  0021               	movlb	1	; select bank1
  7920  201B  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  7921  201C  0022               	movlb	2	; select bank2
  7922  201D  1C03               	skipc
  7923  201E  118D               	bcf	13,3	;volatile
  7924  201F  1803               	skipnc
  7925  2020  158D               	bsf	13,3	;volatile
  7926  2021  0008               	return
  7927  2022                     __end_of_setFeedbackState:	
  7928                           
  7929                           	psect	text8
  7930  2359                     __ptext8:	
  7931 ;; *************** function _setDoublePressState *****************
  7932 ;; Defined at:
  7933 ;;		line 21 in file "preset_programming.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;  f_state         2   24[BANK1 ] int 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7947 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7949 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7950 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7951 ;;Total ram usage:        4 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    7
  7954 ;; This function calls:
  7955 ;;		_resetRingLEDs
  7956 ;;		_setPedalMode
  7957 ;;		_setPresetDisplay
  7958 ;;		_showSave
  7959 ;;		_wait_ms
  7960 ;; This function is called by:
  7961 ;;		_updateSwitchBypass
  7962 ;;		_updateSwitchTap
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _setDoublePressState
  7968  2359                     _setDoublePressState:	
  7969                           
  7970                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  7971                           
  7972                           ;incstack = 0
  7973                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7974  2359  0020               	movlb	0	; select bank0
  7975  235A  0866               	movf	_doubleTap_state,w	;volatile
  7976  235B  0021               	movlb	1	; select bank1
  7977  235C  00BA               	movwf	??_setDoublePressState^(0+128)
  7978  235D  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  7979  235E  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7980  235F  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7981  2360  1D03               	skipz
  7982  2361  2B64               	goto	u8525
  7983  2362  0838               	movf	setDoublePressState@f_state^(0+128),w
  7984  2363  063A               	xorwf	??_setDoublePressState^(0+128),w
  7985  2364                     u8525:	
  7986  2364  1903               	btfsc	3,2
  7987  2365  0008               	return
  7988                           
  7989                           ;preset_programming.c: 23: doubleTap_state = f_state;
  7990  2366  0838               	movf	setDoublePressState@f_state^(0+128),w
  7991  2367  00BA               	movwf	??_setDoublePressState^(0+128)
  7992  2368  083A               	movf	??_setDoublePressState^(0+128),w
  7993  2369  0020               	movlb	0	; select bank0
  7994  236A  00E6               	movwf	_doubleTap_state	;volatile
  7995                           
  7996                           ;preset_programming.c: 24: if (f_state == 1) {
  7997  236B  0021               	movlb	1	; select bank1
  7998  236C  0338               	decf	setDoublePressState@f_state^(0+128),w
  7999  236D  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8000  236E  1D03               	btfss	3,2
  8001  236F  2B73               	goto	l8174
  8002                           
  8003                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8004  2370  0022               	movlb	2	; select bank2
  8005  2371  120D               	bcf	13,4	;volatile
  8006                           
  8007                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8008  2372  128D               	bcf	13,5	;volatile
  8009  2373                     l8174:	
  8010                           
  8011                           ;preset_programming.c: 30: }
  8012                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8013  2373  0020               	movlb	0	; select bank0
  8014  2374  0366               	decf	_doubleTap_state,w	;volatile
  8015  2375  1D03               	btfss	3,2
  8016  2376  2B8F               	goto	l8190
  8017                           
  8018                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8019  2377  0868               	movf	_presetSaveMode,w
  8020  2378  1D03               	btfss	3,2
  8021  2379  2B84               	goto	l8182
  8022                           
  8023                           ;preset_programming.c: 34: presetSaveMode = 1;
  8024  237A  01E8               	clrf	_presetSaveMode
  8025  237B  0AE8               	incf	_presetSaveMode,f
  8026                           
  8027                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8028  237C  0022               	movlb	2	; select bank2
  8029  237D  108D               	bcf	13,1	;volatile
  8030                           
  8031                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8032  237E  0020               	movlb	0	; select bank0
  8033  237F  0857               	movf	_presetChannel,w
  8034  2380  31A2  226B  31A3   	fcall	_setPresetDisplay
  8035                           
  8036                           ;preset_programming.c: 37: } else {
  8037  2383  2B8F               	goto	l8190
  8038  2384                     l8182:	
  8039                           
  8040                           ;preset_programming.c: 39: presetSaveMode = 0;
  8041  2384  0020               	movlb	0	; select bank0
  8042  2385  01E8               	clrf	_presetSaveMode
  8043                           
  8044                           ;preset_programming.c: 40: setPedalMode();
  8045  2386  31A0  20D0  31A3   	fcall	_setPedalMode
  8046                           
  8047                           ;preset_programming.c: 41: resetRingLEDs();
  8048  2389  31AF  27E6  31A3   	fcall	_resetRingLEDs
  8049                           
  8050                           ;preset_programming.c: 42: showSave();
  8051  238C  31AF  27BA  31A3   	fcall	_showSave
  8052  238F                     l8190:	
  8053                           
  8054                           ;preset_programming.c: 44: }
  8055                           ;preset_programming.c: 45: }
  8056                           ;preset_programming.c: 47: wait_ms(20);
  8057  238F  3014               	movlw	20
  8058  2390  0021               	movlb	1	; select bank1
  8059  2391  00AC               	movwf	wait_ms@timeSec^(0+128)
  8060  2392  3000               	movlw	0
  8061  2393  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8062  2394  31A2  2201         	fcall	_wait_ms
  8063  2396  0008               	return
  8064  2397                     __end_of_setDoublePressState:	
  8065                           
  8066                           	psect	text9
  8067  2FBA                     __ptext9:	
  8068 ;; *************** function _showSave *****************
  8069 ;; Defined at:
  8070 ;;		line 112 in file "LEDs.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;		None
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8086 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8087 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8088 ;;Total ram usage:        1 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    6
  8091 ;; This function calls:
  8092 ;;		_ring_tactiles
  8093 ;;		_solidring_tactiles
  8094 ;; This function is called by:
  8095 ;;		_setDoublePressState
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           
  8100                           ;psect for function _showSave
  8101  2FBA                     _showSave:	
  8102                           
  8103                           ;LEDs.c: 113: suspend_blink = 1;
  8104                           
  8105                           ;incstack = 0
  8106                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8107  2FBA  3001               	movlw	1
  8108  2FBB  0021               	movlb	1	; select bank1
  8109  2FBC  00B7               	movwf	??_showSave^(0+128)
  8110  2FBD  0837               	movf	??_showSave^(0+128),w
  8111  2FBE  0020               	movlb	0	; select bank0
  8112  2FBF  00E9               	movwf	_suspend_blink	;volatile
  8113                           
  8114                           ;LEDs.c: 114: ring_tactiles();
  8115  2FC0  31A6  2699  31AF   	fcall	_ring_tactiles
  8116                           
  8117                           ;LEDs.c: 115: ring_tactiles();
  8118  2FC3  31A6  2699  31AF   	fcall	_ring_tactiles
  8119                           
  8120                           ;LEDs.c: 116: solidring_tactiles();
  8121  2FC6  31A3  23D7  31AF   	fcall	_solidring_tactiles
  8122                           
  8123                           ;LEDs.c: 117: solidring_tactiles();
  8124  2FC9  31A3  23D7         	fcall	_solidring_tactiles
  8125                           
  8126                           ;LEDs.c: 118: suspend_blink = 0;
  8127  2FCB  0020               	movlb	0	; select bank0
  8128  2FCC  01E9               	clrf	_suspend_blink	;volatile
  8129  2FCD  0008               	return
  8130  2FCE                     __end_of_showSave:	
  8131                           
  8132                           	psect	text10
  8133  23D7                     __ptext10:	
  8134 ;; *************** function _solidring_tactiles *****************
  8135 ;; Defined at:
  8136 ;;		line 208 in file "LEDs.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;		None
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      void 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8151 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8152 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8153 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8154 ;;Total ram usage:        3 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    5
  8157 ;; This function calls:
  8158 ;;		_set_leds_bottom
  8159 ;;		_set_leds_top
  8160 ;;		_wait_ms
  8161 ;; This function is called by:
  8162 ;;		_showSave
  8163 ;;		_showBootSequence
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _solidring_tactiles
  8169  23D7                     _solidring_tactiles:	
  8170                           
  8171                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8175  23D7  301E               	movlw	30
  8176  23D8  0021               	movlb	1	; select bank1
  8177  23D9  00B2               	movwf	??_solidring_tactiles^(0+128)
  8178  23DA  0832               	movf	??_solidring_tactiles^(0+128),w
  8179  23DB  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8180                           
  8181                           ;LEDs.c: 210: set_leds_top(100, 1);
  8182  23DC  3064               	movlw	100
  8183  23DD  00A0               	movwf	set_leds_top@x^(0+128)
  8184  23DE  3000               	movlw	0
  8185  23DF  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8186  23E0  3001               	movlw	1
  8187  23E1  00A2               	movwf	set_leds_top@ledState^(0+128)
  8188  23E2  3000               	movlw	0
  8189  23E3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8190  23E4  31A7  273A  31A3   	fcall	_set_leds_top
  8191                           
  8192                           ;LEDs.c: 211: set_leds_bottom(100);
  8193  23E7  3064               	movlw	100
  8194  23E8  0021               	movlb	1	; select bank1
  8195  23E9  00A0               	movwf	set_leds_bottom@x^(0+128)
  8196  23EA  3000               	movlw	0
  8197  23EB  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8198  23EC  31A2  22A5  31A3   	fcall	_set_leds_bottom
  8199                           
  8200                           ;LEDs.c: 212: wait_ms(ring_delay);
  8201  23EF  0021               	movlb	1	; select bank1
  8202  23F0  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8203  23F1  00B2               	movwf	??_solidring_tactiles^(0+128)
  8204  23F2  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8205  23F3  0832               	movf	??_solidring_tactiles^(0+128),w
  8206  23F4  00AC               	movwf	wait_ms@timeSec^(0+128)
  8207  23F5  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8208  23F6  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8209  23F7  31A2  2201  31A3   	fcall	_wait_ms
  8210                           
  8211                           ;LEDs.c: 214: set_leds_top(0, 1);
  8212  23FA  3000               	movlw	0
  8213  23FB  0021               	movlb	1	; select bank1
  8214  23FC  00A0               	movwf	set_leds_top@x^(0+128)
  8215  23FD  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8216  23FE  3001               	movlw	1
  8217  23FF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8218  2400  3000               	movlw	0
  8219  2401  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8220  2402  31A7  273A  31A3   	fcall	_set_leds_top
  8221                           
  8222                           ;LEDs.c: 215: set_leds_bottom(0);
  8223  2405  3000               	movlw	0
  8224  2406  0021               	movlb	1	; select bank1
  8225  2407  00A0               	movwf	set_leds_bottom@x^(0+128)
  8226  2408  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8227  2409  31A2  22A5  31A3   	fcall	_set_leds_bottom
  8228                           
  8229                           ;LEDs.c: 216: wait_ms(ring_delay);
  8230  240C  0021               	movlb	1	; select bank1
  8231  240D  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8232  240E  00B2               	movwf	??_solidring_tactiles^(0+128)
  8233  240F  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8234  2410  0832               	movf	??_solidring_tactiles^(0+128),w
  8235  2411  00AC               	movwf	wait_ms@timeSec^(0+128)
  8236  2412  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8237  2413  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8238  2414  31A2  2201         	fcall	_wait_ms
  8239  2416  0008               	return
  8240  2417                     __end_of_solidring_tactiles:	
  8241                           
  8242                           	psect	text11
  8243  2699                     __ptext11:	
  8244 ;; *************** function _ring_tactiles *****************
  8245 ;; Defined at:
  8246 ;;		line 196 in file "LEDs.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  iLed            2   21[BANK1 ] int 
  8251 ;;  iLed            2   19[BANK1 ] int 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8262 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8263 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8264 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8265 ;;Total ram usage:        5 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    5
  8268 ;; This function calls:
  8269 ;;		_set_leds_bottom
  8270 ;;		_set_leds_top
  8271 ;;		_wait_ms
  8272 ;; This function is called by:
  8273 ;;		_showSave
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function _ring_tactiles
  8279  2699                     _ring_tactiles:	
  8280                           
  8281                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8282                           
  8283                           ;incstack = 0
  8284                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8285  2699  3001               	movlw	1
  8286  269A  0021               	movlb	1	; select bank1
  8287  269B  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8288  269C  3000               	movlw	0
  8289  269D  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8290  269E  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8291  269F  3A80               	xorlw	128
  8292  26A0  00B2               	movwf	??_ring_tactiles^(0+128)
  8293  26A1  3080               	movlw	128
  8294  26A2  0232               	subwf	??_ring_tactiles^(0+128),w
  8295  26A3  1D03               	skipz
  8296  26A4  2EA7               	goto	u8025
  8297  26A5  3007               	movlw	7
  8298  26A6  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8299  26A7                     u8025:	
  8300  26A7  1803               	btfsc	3,0
  8301  26A8  2ECD               	goto	l7706
  8302  26A9                     l7698:	
  8303                           
  8304                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8305  26A9  0021               	movlb	1	; select bank1
  8306  26AA  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8307  26AB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8308  26AC  0833               	movf	ring_tactiles@iLed^(0+128),w
  8309  26AD  00A0               	movwf	set_leds_top@x^(0+128)
  8310  26AE  3001               	movlw	1
  8311  26AF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8312  26B0  3000               	movlw	0
  8313  26B1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8314  26B2  31A7  273A  31A6   	fcall	_set_leds_top
  8315                           
  8316                           ;LEDs.c: 199: wait_ms(5);
  8317  26B5  3005               	movlw	5
  8318  26B6  0021               	movlb	1	; select bank1
  8319  26B7  00AC               	movwf	wait_ms@timeSec^(0+128)
  8320  26B8  3000               	movlw	0
  8321  26B9  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8322  26BA  31A2  2201  31A6   	fcall	_wait_ms
  8323  26BD  3001               	movlw	1
  8324  26BE  0021               	movlb	1	; select bank1
  8325  26BF  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8326  26C0  3000               	movlw	0
  8327  26C1  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8328  26C2  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8329  26C3  3A80               	xorlw	128
  8330  26C4  00B2               	movwf	??_ring_tactiles^(0+128)
  8331  26C5  3080               	movlw	128
  8332  26C6  0232               	subwf	??_ring_tactiles^(0+128),w
  8333  26C7  1D03               	skipz
  8334  26C8  2ECB               	goto	u8035
  8335  26C9  3007               	movlw	7
  8336  26CA  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8337  26CB                     u8035:	
  8338  26CB  1C03               	skipc
  8339  26CC  2EA9               	goto	l7698
  8340  26CD                     l7706:	
  8341                           
  8342                           ;LEDs.c: 200: }
  8343                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8344  26CD  3005               	movlw	5
  8345  26CE  0021               	movlb	1	; select bank1
  8346  26CF  00B5               	movwf	ring_tactiles@iLed_1542^(0+128)
  8347  26D0  3000               	movlw	0
  8348  26D1  00B6               	movwf	(ring_tactiles@iLed_1542^(0+128)+1)
  8349  26D2                     L4:	
  8350  26D2  1BB6               	btfsc	(ring_tactiles@iLed_1542+1)^(0+128),7
  8351  26D3  0008               	return
  8352                           
  8353                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8354  26D4  0836               	movf	(ring_tactiles@iLed_1542+1)^(0+128),w
  8355  26D5  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8356  26D6  0835               	movf	ring_tactiles@iLed_1542^(0+128),w
  8357  26D7  00A0               	movwf	set_leds_bottom@x^(0+128)
  8358  26D8  31A2  22A5  31A6   	fcall	_set_leds_bottom
  8359                           
  8360                           ;LEDs.c: 203: wait_ms(5);
  8361  26DB  3005               	movlw	5
  8362  26DC  0021               	movlb	1	; select bank1
  8363  26DD  00AC               	movwf	wait_ms@timeSec^(0+128)
  8364  26DE  3000               	movlw	0
  8365  26DF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8366  26E0  31A2  2201  31A6   	fcall	_wait_ms
  8367  26E3  30FF               	movlw	255
  8368  26E4  0021               	movlb	1	; select bank1
  8369  26E5  07B5               	addwf	ring_tactiles@iLed_1542^(0+128),f
  8370  26E6  30FF               	movlw	255
  8371  26E7  3DB6               	addwfc	(ring_tactiles@iLed_1542+1)^(0+128),f
  8372  26E8  2ED2               	goto	L4
  8373  26E9                     __end_of_ring_tactiles:	
  8374                           
  8375                           	psect	text12
  8376  20D0                     __ptext12:	
  8377 ;; *************** function _setPedalMode *****************
  8378 ;; Defined at:
  8379 ;;		line 119 in file "tactiles.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1    wreg      void 
  8386 ;; Registers used:
  8387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8397 ;;Total ram usage:        0 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    5
  8400 ;; This function calls:
  8401 ;;		_resetRingLEDs
  8402 ;;		_setExpressionDisplay
  8403 ;;		_setPresetDisplay
  8404 ;; This function is called by:
  8405 ;;		_update_mode
  8406 ;;		_setDoublePressState
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _setPedalMode
  8412  20D0                     _setPedalMode:	
  8413                           
  8414                           ;tactiles.c: 120: switch (mode2_state) {
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8418  20D0  28E7               	goto	l7906
  8419  20D1                     l1001:	
  8420                           ;tactiles.c: 121: case 0:
  8421                           
  8422                           
  8423                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8424  20D1  0022               	movlb	2	; select bank2
  8425  20D2  108D               	bcf	13,1	;volatile
  8426                           
  8427                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8428  20D3  100D               	bcf	13,0	;volatile
  8429                           
  8430                           ;tactiles.c: 124: resetRingLEDs();
  8431  20D4  31AF  27E6         	fcall	_resetRingLEDs
  8432                           
  8433                           ;tactiles.c: 125: break;
  8434  20D6  0008               	return
  8435  20D7                     l1003:	
  8436                           ;tactiles.c: 126: case 1:
  8437                           
  8438                           
  8439                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8440  20D7  0022               	movlb	2	; select bank2
  8441  20D8  108D               	bcf	13,1	;volatile
  8442                           
  8443                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8444  20D9  140D               	bsf	13,0	;volatile
  8445                           
  8446                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8447  20DA  0020               	movlb	0	; select bank0
  8448  20DB  0857               	movf	_presetChannel,w
  8449  20DC  31A2  226B         	fcall	_setPresetDisplay
  8450                           
  8451                           ;tactiles.c: 130: break;
  8452  20DE  0008               	return
  8453  20DF                     l1004:	
  8454                           ;tactiles.c: 131: case 2:
  8455                           
  8456                           
  8457                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8458  20DF  0022               	movlb	2	; select bank2
  8459  20E0  148D               	bsf	13,1	;volatile
  8460                           
  8461                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8462  20E1  100D               	bcf	13,0	;volatile
  8463                           
  8464                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8465  20E2  0023               	movlb	3	; select bank3
  8466  20E3  085E               	movf	_expressionChannel^(0+384),w
  8467  20E4  31AF  27CE         	fcall	_setExpressionDisplay
  8468                           
  8469                           ;tactiles.c: 136: }
  8470                           
  8471                           ;tactiles.c: 135: break;
  8472  20E6  0008               	return
  8473  20E7                     l7906:	
  8474  20E7  0020               	movlb	0	; select bank0
  8475  20E8  0867               	movf	_mode2_state,w
  8476                           
  8477                           ; Switch size 1, requested type "space"
  8478                           ; Number of cases is 3, Range of values is 0 to 2
  8479                           ; switch strategies available:
  8480                           ; Name         Instructions Cycles
  8481                           ; simple_byte           10     6 (average)
  8482                           ; direct_byte           12     6 (fixed)
  8483                           ; jumptable            260     6 (fixed)
  8484                           ;	Chosen strategy is simple_byte
  8485  20E9  3A00               	xorlw	0	; case 0
  8486  20EA  1903               	skipnz
  8487  20EB  28D1               	goto	l1001
  8488  20EC  3A01               	xorlw	1	; case 1
  8489  20ED  1903               	skipnz
  8490  20EE  28D7               	goto	l1003
  8491  20EF  3A03               	xorlw	3	; case 2
  8492  20F0  1903               	skipnz
  8493  20F1  28DF               	goto	l1004
  8494  20F2  28F3               	goto	l1005
  8495  20F3                     l1005:	
  8496  20F3  0008               	return
  8497  20F4                     __end_of_setPedalMode:	
  8498                           
  8499                           	psect	text13
  8500  226B                     __ptext13:	
  8501 ;; *************** function _setPresetDisplay *****************
  8502 ;; Defined at:
  8503 ;;		line 51 in file "preset_programming.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  ledChannel      1    wreg     unsigned char 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8518 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8519 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8520 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8521 ;;Total ram usage:        3 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    4
  8524 ;; This function calls:
  8525 ;;		_set_leds_bottom
  8526 ;;		_set_leds_top
  8527 ;; This function is called by:
  8528 ;;		_setPedalMode
  8529 ;;		_update_selectMode
  8530 ;;		_setDoublePressState
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _setPresetDisplay
  8536  226B                     _setPresetDisplay:	
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8540                           ;setPresetDisplay@ledChannel stored from wreg
  8541  226B  0021               	movlb	1	; select bank1
  8542  226C  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8543                           
  8544                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8545  226D  3006               	movlw	6
  8546  226E  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8547  226F  1803               	skipnc
  8548  2270  2A87               	goto	l7726
  8549                           
  8550                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8551  2271  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8552  2272  00A4               	movwf	??_setPresetDisplay^(0+128)
  8553  2273  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8554  2274  0824               	movf	??_setPresetDisplay^(0+128),w
  8555  2275  00A0               	movwf	set_leds_top@x^(0+128)
  8556  2276  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8557  2277  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8558  2278  3001               	movlw	1
  8559  2279  00A2               	movwf	set_leds_top@ledState^(0+128)
  8560  227A  3000               	movlw	0
  8561  227B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8562  227C  31A7  273A  31A2   	fcall	_set_leds_top
  8563                           
  8564                           ;preset_programming.c: 54: set_leds_bottom(6);
  8565  227F  3006               	movlw	6
  8566  2280  0021               	movlb	1	; select bank1
  8567  2281  00A0               	movwf	set_leds_bottom@x^(0+128)
  8568  2282  3000               	movlw	0
  8569  2283  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8570  2284  31A2  22A5         	fcall	_set_leds_bottom
  8571                           
  8572                           ;preset_programming.c: 55: } else {
  8573  2286  0008               	return
  8574  2287                     l7726:	
  8575                           
  8576                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8577  2287  3006               	movlw	6
  8578  2288  0021               	movlb	1	; select bank1
  8579  2289  00A0               	movwf	set_leds_top@x^(0+128)
  8580  228A  3000               	movlw	0
  8581  228B  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8582  228C  3001               	movlw	1
  8583  228D  00A2               	movwf	set_leds_top@ledState^(0+128)
  8584  228E  3000               	movlw	0
  8585  228F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8586  2290  31A7  273A  31A2   	fcall	_set_leds_top
  8587                           
  8588                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8589  2293  0021               	movlb	1	; select bank1
  8590  2294  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8591  2295  00A4               	movwf	??_setPresetDisplay^(0+128)
  8592  2296  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8593  2297  09A4               	comf	??_setPresetDisplay^(0+128),f
  8594  2298  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8595  2299  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8596  229A  1903               	skipnz
  8597  229B  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8598  229C  0824               	movf	??_setPresetDisplay^(0+128),w
  8599  229D  3E0B               	addlw	11
  8600  229E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8601  229F  3000               	movlw	0
  8602  22A0  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8603  22A1  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8604  22A2  31A2  22A5         	fcall	_set_leds_bottom
  8605  22A4  0008               	return
  8606  22A5                     __end_of_setPresetDisplay:	
  8607                           
  8608                           	psect	text14
  8609  2FCE                     __ptext14:	
  8610 ;; *************** function _setExpressionDisplay *****************
  8611 ;; Defined at:
  8612 ;;		line 66 in file "preset_programming.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  ledChannel      1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      void 
  8619 ;; Registers used:
  8620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8627 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8628 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8629 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8630 ;;Total ram usage:        3 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    4
  8633 ;; This function calls:
  8634 ;;		_set_leds_bottom
  8635 ;;		_set_leds_top
  8636 ;; This function is called by:
  8637 ;;		_setPedalMode
  8638 ;;		_update_selectMode
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           
  8643                           ;psect for function _setExpressionDisplay
  8644  2FCE                     _setExpressionDisplay:	
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8648                           ;setExpressionDisplay@ledChannel stored from wreg
  8649  2FCE  0021               	movlb	1	; select bank1
  8650  2FCF  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8651                           
  8652                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8653  2FD0  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8654  2FD1  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8655  2FD2  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8656  2FD3  0824               	movf	??_setExpressionDisplay^(0+128),w
  8657  2FD4  00A0               	movwf	set_leds_top@x^(0+128)
  8658  2FD5  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8659  2FD6  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8660  2FD7  3001               	movlw	1
  8661  2FD8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8662  2FD9  3000               	movlw	0
  8663  2FDA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8664  2FDB  31A7  273A  31AF   	fcall	_set_leds_top
  8665                           
  8666                           ;preset_programming.c: 68: set_leds_bottom(6);
  8667  2FDE  3006               	movlw	6
  8668  2FDF  0021               	movlb	1	; select bank1
  8669  2FE0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8670  2FE1  3000               	movlw	0
  8671  2FE2  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8672  2FE3  31A2  22A5         	fcall	_set_leds_bottom
  8673  2FE5  0008               	return
  8674  2FE6                     __end_of_setExpressionDisplay:	
  8675                           
  8676                           	psect	text15
  8677  2FE6                     __ptext15:	
  8678 ;; *************** function _resetRingLEDs *****************
  8679 ;; Defined at:
  8680 ;;		line 61 in file "preset_programming.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;		None
  8683 ;; Auto vars:     Size  Location     Type
  8684 ;;		None
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  1    wreg      void 
  8687 ;; Registers used:
  8688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8698 ;;Total ram usage:        0 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    4
  8701 ;; This function calls:
  8702 ;;		_set_leds_bottom
  8703 ;;		_set_leds_top
  8704 ;; This function is called by:
  8705 ;;		_update_mode
  8706 ;;		_setPedalMode
  8707 ;;		_setDoublePressState
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           
  8712                           ;psect for function _resetRingLEDs
  8713  2FE6                     _resetRingLEDs:	
  8714                           
  8715                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8716                           
  8717                           ;incstack = 0
  8718                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8719  2FE6  0020               	movlb	0	; select bank0
  8720  2FE7  0852               	movf	_top_push_state+1,w
  8721  2FE8  0021               	movlb	1	; select bank1
  8722  2FE9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8723  2FEA  0020               	movlb	0	; select bank0
  8724  2FEB  0851               	movf	_top_push_state,w
  8725  2FEC  0021               	movlb	1	; select bank1
  8726  2FED  00A0               	movwf	set_leds_top@x^(0+128)
  8727  2FEE  3001               	movlw	1
  8728  2FEF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8729  2FF0  3000               	movlw	0
  8730  2FF1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8731  2FF2  31A7  273A  31AF   	fcall	_set_leds_top
  8732                           
  8733                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8734  2FF5  0020               	movlb	0	; select bank0
  8735  2FF6  084E               	movf	_bottom_push_state+1,w
  8736  2FF7  0021               	movlb	1	; select bank1
  8737  2FF8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8738  2FF9  0020               	movlb	0	; select bank0
  8739  2FFA  084D               	movf	_bottom_push_state,w
  8740  2FFB  0021               	movlb	1	; select bank1
  8741  2FFC  00A0               	movwf	set_leds_bottom@x^(0+128)
  8742  2FFD  31A2  22A5         	fcall	_set_leds_bottom
  8743  2FFF  0008               	return
  8744  3000                     __end_of_resetRingLEDs:	
  8745                           
  8746                           	psect	text16
  8747  0A36                     __ptext16:	
  8748 ;; *************** function _updateModulationArray *****************
  8749 ;; Defined at:
  8750 ;;		line 24 in file "modulation.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;		None
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  thisAngle       2   52[BANK2 ] int 
  8755 ;;  iAngle          1   54[BANK2 ] unsigned char 
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  1    wreg      void 
  8758 ;; Registers used:
  8759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8766 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8767 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8768 ;;      Totals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8769 ;;Total ram usage:        7 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; Hardware stack levels required when called:    7
  8772 ;; This function calls:
  8773 ;;		___awtoft
  8774 ;;		___wmul
  8775 ;;		_modSaw
  8776 ;;		_modSawRev
  8777 ;;		_modSin
  8778 ;;		_modSquare
  8779 ;;		_modTri
  8780 ;; This function is called by:
  8781 ;;		_main
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           
  8786                           ;psect for function _updateModulationArray
  8787  0A36                     _updateModulationArray:	
  8788                           
  8789                           ;modulation.c: 25: if (modArray[120] == bottom_push_state && modArray[121] == symmetry) 
      +                          {
  8790                           
  8791                           ;incstack = 0
  8792                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8793  0A36  307E               	movlw	126
  8794  0A37  0086               	movwf	6
  8795  0A38  3024               	movlw	36
  8796  0A39  0087               	movwf	7
  8797  0A3A  3F40               	moviw [0]fsr1
  8798  0A3B  0022               	movlb	2	; select bank2
  8799  0A3C  00D0               	movwf	??_updateModulationArray^(0+256)
  8800  0A3D  3F41               	moviw [1]fsr1
  8801  0A3E  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8802  0A3F  0020               	movlb	0	; select bank0
  8803  0A40  084E               	movf	_bottom_push_state+1,w
  8804  0A41  0022               	movlb	2	; select bank2
  8805  0A42  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8806  0A43  1D03               	skipz
  8807  0A44  2A49               	goto	u8795
  8808  0A45  0020               	movlb	0	; select bank0
  8809  0A46  084D               	movf	_bottom_push_state,w
  8810  0A47  0022               	movlb	2	; select bank2
  8811  0A48  0650               	xorwf	??_updateModulationArray^(0+256),w
  8812  0A49                     u8795:	
  8813  0A49  1D03               	skipz
  8814  0A4A  2A5F               	goto	l8326
  8815  0A4B  3080               	movlw	128
  8816  0A4C  0086               	movwf	6
  8817  0A4D  3024               	movlw	36
  8818  0A4E  0087               	movwf	7
  8819  0A4F  3F40               	moviw [0]fsr1
  8820  0A50  00D0               	movwf	??_updateModulationArray^(0+256)
  8821  0A51  3F41               	moviw [1]fsr1
  8822  0A52  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8823  0A53  0023               	movlb	3	; select bank3
  8824  0A54  0856               	movf	(_symmetry+1)^(0+384),w
  8825  0A55  0022               	movlb	2	; select bank2
  8826  0A56  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8827  0A57  1D03               	skipz
  8828  0A58  2A5D               	goto	u8805
  8829  0A59  0023               	movlb	3	; select bank3
  8830  0A5A  0855               	movf	_symmetry^(0+384),w
  8831  0A5B  0022               	movlb	2	; select bank2
  8832  0A5C  0650               	xorwf	??_updateModulationArray^(0+256),w
  8833  0A5D                     u8805:	
  8834  0A5D  1903               	btfsc	3,2
  8835  0A5E  0008               	return
  8836  0A5F                     l8326:	
  8837                           ;modulation.c: 27: return;
  8838                           
  8839                           
  8840                           ;modulation.c: 28: }
  8841                           ;modulation.c: 29: for (char iAngle = 0; iAngle < 60; iAngle++) {
  8842  0A5F  01D6               	clrf	updateModulationArray@iAngle^(0+256)
  8843  0A60  303C               	movlw	60
  8844  0A61  0256               	subwf	updateModulationArray@iAngle^(0+256),w
  8845  0A62  1803               	btfsc	3,0
  8846  0A63  2C0A               	goto	l8354
  8847  0A64                     l8332:	
  8848                           
  8849                           ;modulation.c: 30: int thisAngle = 6 * iAngle;
  8850  0A64  0856               	movf	updateModulationArray@iAngle^(0+256),w
  8851  0A65  00D0               	movwf	??_updateModulationArray^(0+256)
  8852  0A66  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8853  0A67  0850               	movf	??_updateModulationArray^(0+256),w
  8854  0A68  00AE               	movwf	___wmul@multiplier^(0+256)
  8855  0A69  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8856  0A6A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  8857  0A6B  3006               	movlw	6
  8858  0A6C  00B0               	movwf	___wmul@multiplicand^(0+256)
  8859  0A6D  3000               	movlw	0
  8860  0A6E  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
  8861  0A6F  31A0  2056  318A   	fcall	___wmul
  8862  0A72  0022               	movlb	2	; select bank2
  8863  0A73  082F               	movf	(?___wmul+1)^(0+256),w
  8864  0A74  00D5               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  8865  0A75  082E               	movf	?___wmul^(0+256),w
  8866  0A76  00D4               	movwf	updateModulationArray@thisAngle^(0+256)
  8867                           
  8868                           ;modulation.c: 31: switch (bottom_push_state) {
  8869  0A77  2BEA               	goto	l8348
  8870  0A78                     l8334:	
  8871                           ;modulation.c: 32: case 1:
  8872                           
  8873                           
  8874                           ;modulation.c: 33: modArray[iAngle] = modSin(thisAngle, symmetry);
  8875  0A78  0022               	movlb	2	; select bank2
  8876  0A79  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8877  0A7A  0021               	movlb	1	; select bank1
  8878  0A7B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8879  0A7C  0022               	movlb	2	; select bank2
  8880  0A7D  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  8881  0A7E  0021               	movlb	1	; select bank1
  8882  0A7F  00A8               	movwf	___awtoft@c^(0+128)
  8883  0A80  31A0  20AE  318A   	fcall	___awtoft
  8884  0A83  0021               	movlb	1	; select bank1
  8885  0A84  0828               	movf	?___awtoft^(0+128),w
  8886  0A85  0022               	movlb	2	; select bank2
  8887  0A86  00B4               	movwf	modSin@angle^(0+256)
  8888  0A87  0021               	movlb	1	; select bank1
  8889  0A88  0829               	movf	(?___awtoft+1)^(0+128),w
  8890  0A89  0022               	movlb	2	; select bank2
  8891  0A8A  00B5               	movwf	(modSin@angle+1)^(0+256)
  8892  0A8B  0021               	movlb	1	; select bank1
  8893  0A8C  082A               	movf	(?___awtoft+2)^(0+128),w
  8894  0A8D  0022               	movlb	2	; select bank2
  8895  0A8E  00B6               	movwf	(modSin@angle+2)^(0+256)
  8896  0A8F  0023               	movlb	3	; select bank3
  8897  0A90  0856               	movf	(_symmetry+1)^(0+384),w
  8898  0A91  0021               	movlb	1	; select bank1
  8899  0A92  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8900  0A93  0023               	movlb	3	; select bank3
  8901  0A94  0855               	movf	_symmetry^(0+384),w
  8902  0A95  0021               	movlb	1	; select bank1
  8903  0A96  00A8               	movwf	___awtoft@c^(0+128)
  8904  0A97  31A0  20AE  318A   	fcall	___awtoft
  8905  0A9A  0021               	movlb	1	; select bank1
  8906  0A9B  0828               	movf	?___awtoft^(0+128),w
  8907  0A9C  0022               	movlb	2	; select bank2
  8908  0A9D  00B7               	movwf	modSin@inflection^(0+256)
  8909  0A9E  0021               	movlb	1	; select bank1
  8910  0A9F  0829               	movf	(?___awtoft+1)^(0+128),w
  8911  0AA0  0022               	movlb	2	; select bank2
  8912  0AA1  00B8               	movwf	(modSin@inflection+1)^(0+256)
  8913  0AA2  0021               	movlb	1	; select bank1
  8914  0AA3  082A               	movf	(?___awtoft+2)^(0+128),w
  8915  0AA4  0022               	movlb	2	; select bank2
  8916  0AA5  00B9               	movwf	(modSin@inflection+2)^(0+256)
  8917  0AA6  3196  2654  318A   	fcall	_modSin
  8918  0AA9  0022               	movlb	2	; select bank2
  8919  0AAA  0856               	movf	updateModulationArray@iAngle^(0+256),w
  8920  0AAB  00D0               	movwf	??_updateModulationArray^(0+256)
  8921  0AAC  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8922  0AAD  35D0               	lslf	??_updateModulationArray^(0+256),f
  8923  0AAE  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8924  0AAF  308E               	movlw	142
  8925  0AB0  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8926  0AB1  3023               	movlw	35
  8927  0AB2  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8928  0AB3  0850               	movf	??_updateModulationArray^(0+256),w
  8929  0AB4  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  8930  0AB5  0086               	movwf	6
  8931  0AB6  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8932  0AB7  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  8933  0AB8  0087               	movwf	7
  8934  0AB9  0834               	movf	?_modSin^(0+256),w
  8935  0ABA  3FC0               	movwi [0]fsr1
  8936  0ABB  0835               	movf	(?_modSin+1)^(0+256),w
  8937  0ABC  3FC1               	movwi [1]fsr1
  8938                           
  8939                           ;modulation.c: 34: break;
  8940  0ABD  2C01               	goto	l8350
  8941  0ABE                     l8336:	
  8942                           ;modulation.c: 35: case 2:
  8943                           
  8944                           
  8945                           ;modulation.c: 36: modArray[iAngle] = modTri(thisAngle, symmetry);
  8946  0ABE  0022               	movlb	2	; select bank2
  8947  0ABF  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8948  0AC0  0021               	movlb	1	; select bank1
  8949  0AC1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8950  0AC2  0022               	movlb	2	; select bank2
  8951  0AC3  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  8952  0AC4  0021               	movlb	1	; select bank1
  8953  0AC5  00A8               	movwf	___awtoft@c^(0+128)
  8954  0AC6  31A0  20AE  318A   	fcall	___awtoft
  8955  0AC9  0021               	movlb	1	; select bank1
  8956  0ACA  0828               	movf	?___awtoft^(0+128),w
  8957  0ACB  0022               	movlb	2	; select bank2
  8958  0ACC  00AE               	movwf	modTri@angle^(0+256)
  8959  0ACD  0021               	movlb	1	; select bank1
  8960  0ACE  0829               	movf	(?___awtoft+1)^(0+128),w
  8961  0ACF  0022               	movlb	2	; select bank2
  8962  0AD0  00AF               	movwf	(modTri@angle+1)^(0+256)
  8963  0AD1  0021               	movlb	1	; select bank1
  8964  0AD2  082A               	movf	(?___awtoft+2)^(0+128),w
  8965  0AD3  0022               	movlb	2	; select bank2
  8966  0AD4  00B0               	movwf	(modTri@angle+2)^(0+256)
  8967  0AD5  0023               	movlb	3	; select bank3
  8968  0AD6  0856               	movf	(_symmetry+1)^(0+384),w
  8969  0AD7  0021               	movlb	1	; select bank1
  8970  0AD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8971  0AD9  0023               	movlb	3	; select bank3
  8972  0ADA  0855               	movf	_symmetry^(0+384),w
  8973  0ADB  0021               	movlb	1	; select bank1
  8974  0ADC  00A8               	movwf	___awtoft@c^(0+128)
  8975  0ADD  31A0  20AE  318A   	fcall	___awtoft
  8976  0AE0  0021               	movlb	1	; select bank1
  8977  0AE1  0828               	movf	?___awtoft^(0+128),w
  8978  0AE2  0022               	movlb	2	; select bank2
  8979  0AE3  00B1               	movwf	modTri@inflection^(0+256)
  8980  0AE4  0021               	movlb	1	; select bank1
  8981  0AE5  0829               	movf	(?___awtoft+1)^(0+128),w
  8982  0AE6  0022               	movlb	2	; select bank2
  8983  0AE7  00B2               	movwf	(modTri@inflection+1)^(0+256)
  8984  0AE8  0021               	movlb	1	; select bank1
  8985  0AE9  082A               	movf	(?___awtoft+2)^(0+128),w
  8986  0AEA  0022               	movlb	2	; select bank2
  8987  0AEB  00B3               	movwf	(modTri@inflection+2)^(0+256)
  8988  0AEC  318E  2605  318A   	fcall	_modTri
  8989  0AEF  0022               	movlb	2	; select bank2
  8990  0AF0  0856               	movf	updateModulationArray@iAngle^(0+256),w
  8991  0AF1  00D0               	movwf	??_updateModulationArray^(0+256)
  8992  0AF2  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8993  0AF3  35D0               	lslf	??_updateModulationArray^(0+256),f
  8994  0AF4  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8995  0AF5  308E               	movlw	142
  8996  0AF6  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8997  0AF7  3023               	movlw	35
  8998  0AF8  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8999  0AF9  0850               	movf	??_updateModulationArray^(0+256),w
  9000  0AFA  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9001  0AFB  0086               	movwf	6
  9002  0AFC  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9003  0AFD  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9004  0AFE  0087               	movwf	7
  9005  0AFF  082E               	movf	?_modTri^(0+256),w
  9006  0B00  3FC0               	movwi [0]fsr1
  9007  0B01  082F               	movf	(?_modTri+1)^(0+256),w
  9008  0B02  3FC1               	movwi [1]fsr1
  9009                           
  9010                           ;modulation.c: 37: break;
  9011  0B03  2C01               	goto	l8350
  9012  0B04                     l8338:	
  9013                           ;modulation.c: 38: case 3:
  9014                           
  9015                           
  9016                           ;modulation.c: 39: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9017  0B04  0022               	movlb	2	; select bank2
  9018  0B05  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9019  0B06  0021               	movlb	1	; select bank1
  9020  0B07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9021  0B08  0022               	movlb	2	; select bank2
  9022  0B09  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9023  0B0A  0021               	movlb	1	; select bank1
  9024  0B0B  00A8               	movwf	___awtoft@c^(0+128)
  9025  0B0C  31A0  20AE  318A   	fcall	___awtoft
  9026  0B0F  0021               	movlb	1	; select bank1
  9027  0B10  0828               	movf	?___awtoft^(0+128),w
  9028  0B11  0022               	movlb	2	; select bank2
  9029  0B12  00C8               	movwf	modSquare@angle^(0+256)
  9030  0B13  0021               	movlb	1	; select bank1
  9031  0B14  0829               	movf	(?___awtoft+1)^(0+128),w
  9032  0B15  0022               	movlb	2	; select bank2
  9033  0B16  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9034  0B17  0021               	movlb	1	; select bank1
  9035  0B18  082A               	movf	(?___awtoft+2)^(0+128),w
  9036  0B19  0022               	movlb	2	; select bank2
  9037  0B1A  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9038  0B1B  0023               	movlb	3	; select bank3
  9039  0B1C  0856               	movf	(_symmetry+1)^(0+384),w
  9040  0B1D  0021               	movlb	1	; select bank1
  9041  0B1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9042  0B1F  0023               	movlb	3	; select bank3
  9043  0B20  0855               	movf	_symmetry^(0+384),w
  9044  0B21  0021               	movlb	1	; select bank1
  9045  0B22  00A8               	movwf	___awtoft@c^(0+128)
  9046  0B23  31A0  20AE  318A   	fcall	___awtoft
  9047  0B26  0021               	movlb	1	; select bank1
  9048  0B27  0828               	movf	?___awtoft^(0+128),w
  9049  0B28  0022               	movlb	2	; select bank2
  9050  0B29  00CB               	movwf	modSquare@inflection^(0+256)
  9051  0B2A  0021               	movlb	1	; select bank1
  9052  0B2B  0829               	movf	(?___awtoft+1)^(0+128),w
  9053  0B2C  0022               	movlb	2	; select bank2
  9054  0B2D  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9055  0B2E  0021               	movlb	1	; select bank1
  9056  0B2F  082A               	movf	(?___awtoft+2)^(0+128),w
  9057  0B30  0022               	movlb	2	; select bank2
  9058  0B31  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9059  0B32  31A3  231C  318A   	fcall	_modSquare
  9060  0B35  0022               	movlb	2	; select bank2
  9061  0B36  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9062  0B37  00D0               	movwf	??_updateModulationArray^(0+256)
  9063  0B38  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9064  0B39  35D0               	lslf	??_updateModulationArray^(0+256),f
  9065  0B3A  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9066  0B3B  308E               	movlw	142
  9067  0B3C  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9068  0B3D  3023               	movlw	35
  9069  0B3E  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9070  0B3F  0850               	movf	??_updateModulationArray^(0+256),w
  9071  0B40  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9072  0B41  0086               	movwf	6
  9073  0B42  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9074  0B43  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9075  0B44  0087               	movwf	7
  9076  0B45  0848               	movf	?_modSquare^(0+256),w
  9077  0B46  3FC0               	movwi [0]fsr1
  9078  0B47  0849               	movf	(?_modSquare+1)^(0+256),w
  9079  0B48  3FC1               	movwi [1]fsr1
  9080                           
  9081                           ;modulation.c: 40: break;
  9082  0B49  2C01               	goto	l8350
  9083  0B4A                     l8340:	
  9084                           ;modulation.c: 41: case 4:
  9085                           
  9086                           
  9087                           ;modulation.c: 42: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9088  0B4A  0022               	movlb	2	; select bank2
  9089  0B4B  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9090  0B4C  0021               	movlb	1	; select bank1
  9091  0B4D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9092  0B4E  0022               	movlb	2	; select bank2
  9093  0B4F  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9094  0B50  0021               	movlb	1	; select bank1
  9095  0B51  00A8               	movwf	___awtoft@c^(0+128)
  9096  0B52  31A0  20AE  318A   	fcall	___awtoft
  9097  0B55  0021               	movlb	1	; select bank1
  9098  0B56  0828               	movf	?___awtoft^(0+128),w
  9099  0B57  0022               	movlb	2	; select bank2
  9100  0B58  00AE               	movwf	modSaw@angle^(0+256)
  9101  0B59  0021               	movlb	1	; select bank1
  9102  0B5A  0829               	movf	(?___awtoft+1)^(0+128),w
  9103  0B5B  0022               	movlb	2	; select bank2
  9104  0B5C  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9105  0B5D  0021               	movlb	1	; select bank1
  9106  0B5E  082A               	movf	(?___awtoft+2)^(0+128),w
  9107  0B5F  0022               	movlb	2	; select bank2
  9108  0B60  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9109  0B61  0023               	movlb	3	; select bank3
  9110  0B62  0856               	movf	(_symmetry+1)^(0+384),w
  9111  0B63  0021               	movlb	1	; select bank1
  9112  0B64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9113  0B65  0023               	movlb	3	; select bank3
  9114  0B66  0855               	movf	_symmetry^(0+384),w
  9115  0B67  0021               	movlb	1	; select bank1
  9116  0B68  00A8               	movwf	___awtoft@c^(0+128)
  9117  0B69  31A0  20AE  318A   	fcall	___awtoft
  9118  0B6C  0021               	movlb	1	; select bank1
  9119  0B6D  0828               	movf	?___awtoft^(0+128),w
  9120  0B6E  0022               	movlb	2	; select bank2
  9121  0B6F  00B1               	movwf	modSaw@inflection^(0+256)
  9122  0B70  0021               	movlb	1	; select bank1
  9123  0B71  0829               	movf	(?___awtoft+1)^(0+128),w
  9124  0B72  0022               	movlb	2	; select bank2
  9125  0B73  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9126  0B74  0021               	movlb	1	; select bank1
  9127  0B75  082A               	movf	(?___awtoft+2)^(0+128),w
  9128  0B76  0022               	movlb	2	; select bank2
  9129  0B77  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9130  0B78  3194  24AA  318A   	fcall	_modSaw
  9131  0B7B  0022               	movlb	2	; select bank2
  9132  0B7C  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9133  0B7D  00D0               	movwf	??_updateModulationArray^(0+256)
  9134  0B7E  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9135  0B7F  35D0               	lslf	??_updateModulationArray^(0+256),f
  9136  0B80  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9137  0B81  308E               	movlw	142
  9138  0B82  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9139  0B83  3023               	movlw	35
  9140  0B84  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9141  0B85  0850               	movf	??_updateModulationArray^(0+256),w
  9142  0B86  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9143  0B87  0086               	movwf	6
  9144  0B88  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9145  0B89  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9146  0B8A  0087               	movwf	7
  9147  0B8B  082E               	movf	?_modSaw^(0+256),w
  9148  0B8C  3FC0               	movwi [0]fsr1
  9149  0B8D  082F               	movf	(?_modSaw+1)^(0+256),w
  9150  0B8E  3FC1               	movwi [1]fsr1
  9151                           
  9152                           ;modulation.c: 43: break;
  9153  0B8F  2C01               	goto	l8350
  9154  0B90                     l8342:	
  9155                           ;modulation.c: 44: case 5:
  9156                           
  9157                           
  9158                           ;modulation.c: 45: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9159  0B90  0022               	movlb	2	; select bank2
  9160  0B91  0855               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9161  0B92  0021               	movlb	1	; select bank1
  9162  0B93  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9163  0B94  0022               	movlb	2	; select bank2
  9164  0B95  0854               	movf	updateModulationArray@thisAngle^(0+256),w
  9165  0B96  0021               	movlb	1	; select bank1
  9166  0B97  00A8               	movwf	___awtoft@c^(0+128)
  9167  0B98  31A0  20AE  318A   	fcall	___awtoft
  9168  0B9B  0021               	movlb	1	; select bank1
  9169  0B9C  0828               	movf	?___awtoft^(0+128),w
  9170  0B9D  0022               	movlb	2	; select bank2
  9171  0B9E  00C5               	movwf	modSawRev@angle^(0+256)
  9172  0B9F  0021               	movlb	1	; select bank1
  9173  0BA0  0829               	movf	(?___awtoft+1)^(0+128),w
  9174  0BA1  0022               	movlb	2	; select bank2
  9175  0BA2  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9176  0BA3  0021               	movlb	1	; select bank1
  9177  0BA4  082A               	movf	(?___awtoft+2)^(0+128),w
  9178  0BA5  0022               	movlb	2	; select bank2
  9179  0BA6  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9180  0BA7  0023               	movlb	3	; select bank3
  9181  0BA8  0856               	movf	(_symmetry+1)^(0+384),w
  9182  0BA9  0021               	movlb	1	; select bank1
  9183  0BAA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9184  0BAB  0023               	movlb	3	; select bank3
  9185  0BAC  0855               	movf	_symmetry^(0+384),w
  9186  0BAD  0021               	movlb	1	; select bank1
  9187  0BAE  00A8               	movwf	___awtoft@c^(0+128)
  9188  0BAF  31A0  20AE  318A   	fcall	___awtoft
  9189  0BB2  0021               	movlb	1	; select bank1
  9190  0BB3  0828               	movf	?___awtoft^(0+128),w
  9191  0BB4  0022               	movlb	2	; select bank2
  9192  0BB5  00C8               	movwf	modSawRev@inflection^(0+256)
  9193  0BB6  0021               	movlb	1	; select bank1
  9194  0BB7  0829               	movf	(?___awtoft+1)^(0+128),w
  9195  0BB8  0022               	movlb	2	; select bank2
  9196  0BB9  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9197  0BBA  0021               	movlb	1	; select bank1
  9198  0BBB  082A               	movf	(?___awtoft+2)^(0+128),w
  9199  0BBC  0022               	movlb	2	; select bank2
  9200  0BBD  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9201  0BBE  31A0  2072  318A   	fcall	_modSawRev
  9202  0BC1  0022               	movlb	2	; select bank2
  9203  0BC2  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9204  0BC3  00D0               	movwf	??_updateModulationArray^(0+256)
  9205  0BC4  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9206  0BC5  35D0               	lslf	??_updateModulationArray^(0+256),f
  9207  0BC6  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9208  0BC7  308E               	movlw	142
  9209  0BC8  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9210  0BC9  3023               	movlw	35
  9211  0BCA  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9212  0BCB  0850               	movf	??_updateModulationArray^(0+256),w
  9213  0BCC  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9214  0BCD  0086               	movwf	6
  9215  0BCE  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9216  0BCF  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9217  0BD0  0087               	movwf	7
  9218  0BD1  0845               	movf	?_modSawRev^(0+256),w
  9219  0BD2  3FC0               	movwi [0]fsr1
  9220  0BD3  0846               	movf	(?_modSawRev+1)^(0+256),w
  9221  0BD4  3FC1               	movwi [1]fsr1
  9222                           
  9223                           ;modulation.c: 46: break;
  9224  0BD5  2C01               	goto	l8350
  9225  0BD6                     l8344:	
  9226                           ;modulation.c: 47: default:
  9227                           
  9228                           
  9229                           ;modulation.c: 48: modArray[iAngle] = 0;
  9230  0BD6  0022               	movlb	2	; select bank2
  9231  0BD7  0856               	movf	updateModulationArray@iAngle^(0+256),w
  9232  0BD8  00D0               	movwf	??_updateModulationArray^(0+256)
  9233  0BD9  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9234  0BDA  35D0               	lslf	??_updateModulationArray^(0+256),f
  9235  0BDB  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9236  0BDC  308E               	movlw	142
  9237  0BDD  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9238  0BDE  3023               	movlw	35
  9239  0BDF  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9240  0BE0  0850               	movf	??_updateModulationArray^(0+256),w
  9241  0BE1  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9242  0BE2  0086               	movwf	6
  9243  0BE3  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9244  0BE4  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9245  0BE5  0087               	movwf	7
  9246  0BE6  3000               	movlw	0
  9247  0BE7  3FC0               	movwi [0]fsr1
  9248  0BE8  3FC1               	movwi [1]fsr1
  9249                           
  9250                           ;modulation.c: 50: }
  9251                           
  9252                           ;modulation.c: 49: break;
  9253  0BE9  2C01               	goto	l8350
  9254  0BEA                     l8348:	
  9255                           
  9256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9257                           ; Switch size 1, requested type "space"
  9258                           ; Number of cases is 1, Range of values is 0 to 0
  9259                           ; switch strategies available:
  9260                           ; Name         Instructions Cycles
  9261                           ; simple_byte            4     3 (average)
  9262                           ; direct_byte            8     6 (fixed)
  9263                           ; jumptable            260     6 (fixed)
  9264                           ;	Chosen strategy is simple_byte
  9265  0BEA  0020               	movlb	0	; select bank0
  9266  0BEB  084E               	movf	_bottom_push_state+1,w
  9267  0BEC  3A00               	xorlw	0	; case 0
  9268  0BED  1903               	skipnz
  9269  0BEE  2BF0               	goto	l9340
  9270  0BEF  2BD6               	goto	l8344
  9271  0BF0                     l9340:	
  9272                           
  9273                           ; Switch size 1, requested type "space"
  9274                           ; Number of cases is 5, Range of values is 1 to 5
  9275                           ; switch strategies available:
  9276                           ; Name         Instructions Cycles
  9277                           ; simple_byte           16     9 (average)
  9278                           ; direct_byte           19     9 (fixed)
  9279                           ; jumptable            263     9 (fixed)
  9280                           ;	Chosen strategy is simple_byte
  9281  0BF0  084D               	movf	_bottom_push_state,w
  9282  0BF1  3A01               	xorlw	1	; case 1
  9283  0BF2  1903               	skipnz
  9284  0BF3  2A78               	goto	l8334
  9285  0BF4  3A03               	xorlw	3	; case 2
  9286  0BF5  1903               	skipnz
  9287  0BF6  2ABE               	goto	l8336
  9288  0BF7  3A01               	xorlw	1	; case 3
  9289  0BF8  1903               	skipnz
  9290  0BF9  2B04               	goto	l8338
  9291  0BFA  3A07               	xorlw	7	; case 4
  9292  0BFB  1903               	skipnz
  9293  0BFC  2B4A               	goto	l8340
  9294  0BFD  3A01               	xorlw	1	; case 5
  9295  0BFE  1903               	skipnz
  9296  0BFF  2B90               	goto	l8342
  9297  0C00  2BD6               	goto	l8344
  9298  0C01                     l8350:	
  9299  0C01  3001               	movlw	1
  9300  0C02  0022               	movlb	2	; select bank2
  9301  0C03  00D0               	movwf	??_updateModulationArray^(0+256)
  9302  0C04  0850               	movf	??_updateModulationArray^(0+256),w
  9303  0C05  07D6               	addwf	updateModulationArray@iAngle^(0+256),f
  9304  0C06  303C               	movlw	60
  9305  0C07  0256               	subwf	updateModulationArray@iAngle^(0+256),w
  9306  0C08  1C03               	skipc
  9307  0C09  2A64               	goto	l8332
  9308  0C0A                     l8354:	
  9309                           
  9310                           ;modulation.c: 51: }
  9311                           ;modulation.c: 52: modArray[120] = bottom_push_state;
  9312  0C0A  307E               	movlw	126
  9313  0C0B  0086               	movwf	6
  9314  0C0C  3024               	movlw	36
  9315  0C0D  0087               	movwf	7
  9316  0C0E  0020               	movlb	0	; select bank0
  9317  0C0F  084D               	movf	_bottom_push_state,w
  9318  0C10  3FC0               	movwi [0]fsr1
  9319  0C11  084E               	movf	_bottom_push_state+1,w
  9320  0C12  3FC1               	movwi [1]fsr1
  9321                           
  9322                           ;modulation.c: 53: modArray[121] = symmetry;
  9323  0C13  3080               	movlw	128
  9324  0C14  0086               	movwf	6
  9325  0C15  3024               	movlw	36
  9326  0C16  0087               	movwf	7
  9327  0C17  0023               	movlb	3	; select bank3
  9328  0C18  0855               	movf	_symmetry^(0+384),w
  9329  0C19  3FC0               	movwi [0]fsr1
  9330  0C1A  0856               	movf	(_symmetry+1)^(0+384),w
  9331  0C1B  3FC1               	movwi [1]fsr1
  9332  0C1C  0008               	return
  9333  0C1D                     __end_of_updateModulationArray:	
  9334                           
  9335                           	psect	text17
  9336  0E05                     __ptext17:	
  9337 ;; *************** function _modTri *****************
  9338 ;; Defined at:
  9339 ;;		line 72 in file "modulation.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  angle           3   14[BANK2 ] void 
  9342 ;;  inflection      3   17[BANK2 ] void 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  tmpVal          3   29[BANK2 ] void 
  9345 ;;  period          3   26[BANK2 ] void 
  9346 ;;  shift           3   23[BANK2 ] void 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  2   14[BANK2 ] int 
  9349 ;; Registers used:
  9350 ;;		wreg, status,2, status,0, pclath, cstack
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9356 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9357 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9359 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9360 ;;Total ram usage:       18 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    5
  9363 ;; This function calls:
  9364 ;;		___ftadd
  9365 ;;		___ftdiv
  9366 ;;		___ftge
  9367 ;;		___ftmul
  9368 ;;		___ftneg
  9369 ;;		___fttol
  9370 ;; This function is called by:
  9371 ;;		_updateModulationArray
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           
  9376                           ;psect for function _modTri
  9377  0E05                     _modTri:	
  9378                           
  9379                           ;modulation.c: 73: double period = 1.0;
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9383  0E05  3000               	movlw	0
  9384  0E06  0022               	movlb	2	; select bank2
  9385  0E07  00BA               	movwf	modTri@period^(0+256)
  9386  0E08  3080               	movlw	128
  9387  0E09  00BB               	movwf	(modTri@period+1)^(0+256)
  9388  0E0A  303F               	movlw	63
  9389  0E0B  00BC               	movwf	(modTri@period+2)^(0+256)
  9390                           
  9391                           ;modulation.c: 74: double shift = 0;
  9392  0E0C  3000               	movlw	0
  9393  0E0D  00B7               	movwf	modTri@shift^(0+256)
  9394  0E0E  3000               	movlw	0
  9395  0E0F  00B8               	movwf	(modTri@shift+1)^(0+256)
  9396  0E10  3000               	movlw	0
  9397  0E11  00B9               	movwf	(modTri@shift+2)^(0+256)
  9398                           
  9399                           ;modulation.c: 76: if(angle<=inflection) {
  9400  0E12  0831               	movf	modTri@inflection^(0+256),w
  9401  0E13  0021               	movlb	1	; select bank1
  9402  0E14  00A0               	movwf	___ftge@ff1^(0+128)
  9403  0E15  0022               	movlb	2	; select bank2
  9404  0E16  0832               	movf	(modTri@inflection+1)^(0+256),w
  9405  0E17  0021               	movlb	1	; select bank1
  9406  0E18  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9407  0E19  0022               	movlb	2	; select bank2
  9408  0E1A  0833               	movf	(modTri@inflection+2)^(0+256),w
  9409  0E1B  0021               	movlb	1	; select bank1
  9410  0E1C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9411  0E1D  0022               	movlb	2	; select bank2
  9412  0E1E  082E               	movf	modTri@angle^(0+256),w
  9413  0E1F  0021               	movlb	1	; select bank1
  9414  0E20  00A3               	movwf	___ftge@ff2^(0+128)
  9415  0E21  0022               	movlb	2	; select bank2
  9416  0E22  082F               	movf	(modTri@angle+1)^(0+256),w
  9417  0E23  0021               	movlb	1	; select bank1
  9418  0E24  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9419  0E25  0022               	movlb	2	; select bank2
  9420  0E26  0830               	movf	(modTri@angle+2)^(0+256),w
  9421  0E27  0021               	movlb	1	; select bank1
  9422  0E28  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9423  0E29  31A2  22E0  318E   	fcall	___ftge
  9424  0E2C  1C03               	btfss	3,0
  9425  0E2D  2E3A               	goto	l8240
  9426                           
  9427                           ;modulation.c: 77: period = 180.0/inflection;
  9428  0E2E  0022               	movlb	2	; select bank2
  9429  0E2F  0831               	movf	modTri@inflection^(0+256),w
  9430  0E30  0021               	movlb	1	; select bank1
  9431  0E31  00CE               	movwf	___ftdiv@f2^(0+128)
  9432  0E32  0022               	movlb	2	; select bank2
  9433  0E33  0832               	movf	(modTri@inflection+1)^(0+256),w
  9434  0E34  0021               	movlb	1	; select bank1
  9435  0E35  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9436  0E36  0022               	movlb	2	; select bank2
  9437  0E37  0833               	movf	(modTri@inflection+2)^(0+256),w
  9438  0E38  0021               	movlb	1	; select bank1
  9439  0E39  2EF5               	goto	L5
  9440  0E3A                     l8240:	
  9441                           ;modulation.c: 78: } else {
  9442                           
  9443                           
  9444                           ;modulation.c: 79: shift = -(360-inflection*2)*(180/(360-inflection));
  9445  0E3A  0022               	movlb	2	; select bank2
  9446  0E3B  0831               	movf	modTri@inflection^(0+256),w
  9447  0E3C  0021               	movlb	1	; select bank1
  9448  0E3D  00B1               	movwf	___ftmul@f2^(0+128)
  9449  0E3E  0022               	movlb	2	; select bank2
  9450  0E3F  0832               	movf	(modTri@inflection+1)^(0+256),w
  9451  0E40  0021               	movlb	1	; select bank1
  9452  0E41  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9453  0E42  0022               	movlb	2	; select bank2
  9454  0E43  0833               	movf	(modTri@inflection+2)^(0+256),w
  9455  0E44  0021               	movlb	1	; select bank1
  9456  0E45  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9457  0E46  3000               	movlw	0
  9458  0E47  00AE               	movwf	___ftmul@f1^(0+128)
  9459  0E48  3000               	movlw	0
  9460  0E49  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9461  0E4A  3040               	movlw	64
  9462  0E4B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9463  0E4C  319E  2691  318E   	fcall	___ftmul
  9464  0E4F  0021               	movlb	1	; select bank1
  9465  0E50  082E               	movf	?___ftmul^(0+128),w
  9466  0E51  00BE               	movwf	___ftneg@f1^(0+128)
  9467  0E52  082F               	movf	(?___ftmul+1)^(0+128),w
  9468  0E53  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9469  0E54  0830               	movf	(?___ftmul+2)^(0+128),w
  9470  0E55  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9471  0E56  31AF  2779  318E   	fcall	___ftneg
  9472  0E59  0021               	movlb	1	; select bank1
  9473  0E5A  083E               	movf	?___ftneg^(0+128),w
  9474  0E5B  00C4               	movwf	___ftadd@f2^(0+128)
  9475  0E5C  083F               	movf	(?___ftneg+1)^(0+128),w
  9476  0E5D  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9477  0E5E  0840               	movf	(?___ftneg+2)^(0+128),w
  9478  0E5F  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9479  0E60  3000               	movlw	0
  9480  0E61  00C1               	movwf	___ftadd@f1^(0+128)
  9481  0E62  30B4               	movlw	180
  9482  0E63  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9483  0E64  3043               	movlw	67
  9484  0E65  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9485  0E66  3192  225B  318E   	fcall	___ftadd
  9486  0E69  0021               	movlb	1	; select bank1
  9487  0E6A  0841               	movf	?___ftadd^(0+128),w
  9488  0E6B  0022               	movlb	2	; select bank2
  9489  0E6C  00B4               	movwf	_modTri$2820^(0+256)
  9490  0E6D  0021               	movlb	1	; select bank1
  9491  0E6E  0842               	movf	(?___ftadd+1)^(0+128),w
  9492  0E6F  0022               	movlb	2	; select bank2
  9493  0E70  00B5               	movwf	(_modTri$2820+1)^(0+256)
  9494  0E71  0021               	movlb	1	; select bank1
  9495  0E72  0843               	movf	(?___ftadd+2)^(0+128),w
  9496  0E73  0022               	movlb	2	; select bank2
  9497  0E74  00B6               	movwf	(_modTri$2820+2)^(0+256)
  9498                           
  9499                           ;modulation.c: 79: shift = -(360-inflection*2)*(180/(360-inflection));
  9500  0E75  0834               	movf	_modTri$2820^(0+256),w
  9501  0E76  0021               	movlb	1	; select bank1
  9502  0E77  00BE               	movwf	___ftneg@f1^(0+128)
  9503  0E78  0022               	movlb	2	; select bank2
  9504  0E79  0835               	movf	(_modTri$2820+1)^(0+256),w
  9505  0E7A  0021               	movlb	1	; select bank1
  9506  0E7B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9507  0E7C  0022               	movlb	2	; select bank2
  9508  0E7D  0836               	movf	(_modTri$2820+2)^(0+256),w
  9509  0E7E  0021               	movlb	1	; select bank1
  9510  0E7F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9511  0E80  31AF  2779  318E   	fcall	___ftneg
  9512  0E83  0021               	movlb	1	; select bank1
  9513  0E84  083E               	movf	?___ftneg^(0+128),w
  9514  0E85  00AE               	movwf	___ftmul@f1^(0+128)
  9515  0E86  083F               	movf	(?___ftneg+1)^(0+128),w
  9516  0E87  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9517  0E88  0840               	movf	(?___ftneg+2)^(0+128),w
  9518  0E89  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9519  0E8A  3000               	movlw	0
  9520  0E8B  00C1               	movwf	___ftadd@f1^(0+128)
  9521  0E8C  30B4               	movlw	180
  9522  0E8D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9523  0E8E  3043               	movlw	67
  9524  0E8F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9525  0E90  0022               	movlb	2	; select bank2
  9526  0E91  0831               	movf	modTri@inflection^(0+256),w
  9527  0E92  0021               	movlb	1	; select bank1
  9528  0E93  00BE               	movwf	___ftneg@f1^(0+128)
  9529  0E94  0022               	movlb	2	; select bank2
  9530  0E95  0832               	movf	(modTri@inflection+1)^(0+256),w
  9531  0E96  0021               	movlb	1	; select bank1
  9532  0E97  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9533  0E98  0022               	movlb	2	; select bank2
  9534  0E99  0833               	movf	(modTri@inflection+2)^(0+256),w
  9535  0E9A  0021               	movlb	1	; select bank1
  9536  0E9B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9537  0E9C  31AF  2779  318E   	fcall	___ftneg
  9538  0E9F  0021               	movlb	1	; select bank1
  9539  0EA0  083E               	movf	?___ftneg^(0+128),w
  9540  0EA1  00C4               	movwf	___ftadd@f2^(0+128)
  9541  0EA2  083F               	movf	(?___ftneg+1)^(0+128),w
  9542  0EA3  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9543  0EA4  0840               	movf	(?___ftneg+2)^(0+128),w
  9544  0EA5  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9545  0EA6  3192  225B  318E   	fcall	___ftadd
  9546  0EA9  0021               	movlb	1	; select bank1
  9547  0EAA  0841               	movf	?___ftadd^(0+128),w
  9548  0EAB  00CE               	movwf	___ftdiv@f2^(0+128)
  9549  0EAC  0842               	movf	(?___ftadd+1)^(0+128),w
  9550  0EAD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9551  0EAE  0843               	movf	(?___ftadd+2)^(0+128),w
  9552  0EAF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9553  0EB0  3000               	movlw	0
  9554  0EB1  00D1               	movwf	___ftdiv@f1^(0+128)
  9555  0EB2  3034               	movlw	52
  9556  0EB3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9557  0EB4  3043               	movlw	67
  9558  0EB5  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9559  0EB6  319D  253D  318E   	fcall	___ftdiv
  9560  0EB9  0021               	movlb	1	; select bank1
  9561  0EBA  084E               	movf	?___ftdiv^(0+128),w
  9562  0EBB  00B1               	movwf	___ftmul@f2^(0+128)
  9563  0EBC  084F               	movf	(?___ftdiv+1)^(0+128),w
  9564  0EBD  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9565  0EBE  0850               	movf	(?___ftdiv+2)^(0+128),w
  9566  0EBF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9567  0EC0  319E  2691  318E   	fcall	___ftmul
  9568  0EC3  0021               	movlb	1	; select bank1
  9569  0EC4  082E               	movf	?___ftmul^(0+128),w
  9570  0EC5  0022               	movlb	2	; select bank2
  9571  0EC6  00B7               	movwf	modTri@shift^(0+256)
  9572  0EC7  0021               	movlb	1	; select bank1
  9573  0EC8  082F               	movf	(?___ftmul+1)^(0+128),w
  9574  0EC9  0022               	movlb	2	; select bank2
  9575  0ECA  00B8               	movwf	(modTri@shift+1)^(0+256)
  9576  0ECB  0021               	movlb	1	; select bank1
  9577  0ECC  0830               	movf	(?___ftmul+2)^(0+128),w
  9578  0ECD  0022               	movlb	2	; select bank2
  9579  0ECE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9580                           
  9581                           ;modulation.c: 80: period = 180/(360-inflection);
  9582  0ECF  3000               	movlw	0
  9583  0ED0  0021               	movlb	1	; select bank1
  9584  0ED1  00C1               	movwf	___ftadd@f1^(0+128)
  9585  0ED2  30B4               	movlw	180
  9586  0ED3  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9587  0ED4  3043               	movlw	67
  9588  0ED5  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9589  0ED6  0022               	movlb	2	; select bank2
  9590  0ED7  0831               	movf	modTri@inflection^(0+256),w
  9591  0ED8  0021               	movlb	1	; select bank1
  9592  0ED9  00BE               	movwf	___ftneg@f1^(0+128)
  9593  0EDA  0022               	movlb	2	; select bank2
  9594  0EDB  0832               	movf	(modTri@inflection+1)^(0+256),w
  9595  0EDC  0021               	movlb	1	; select bank1
  9596  0EDD  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9597  0EDE  0022               	movlb	2	; select bank2
  9598  0EDF  0833               	movf	(modTri@inflection+2)^(0+256),w
  9599  0EE0  0021               	movlb	1	; select bank1
  9600  0EE1  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9601  0EE2  31AF  2779  318E   	fcall	___ftneg
  9602  0EE5  0021               	movlb	1	; select bank1
  9603  0EE6  083E               	movf	?___ftneg^(0+128),w
  9604  0EE7  00C4               	movwf	___ftadd@f2^(0+128)
  9605  0EE8  083F               	movf	(?___ftneg+1)^(0+128),w
  9606  0EE9  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9607  0EEA  0840               	movf	(?___ftneg+2)^(0+128),w
  9608  0EEB  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9609  0EEC  3192  225B  318E   	fcall	___ftadd
  9610  0EEF  0021               	movlb	1	; select bank1
  9611  0EF0  0841               	movf	?___ftadd^(0+128),w
  9612  0EF1  00CE               	movwf	___ftdiv@f2^(0+128)
  9613  0EF2  0842               	movf	(?___ftadd+1)^(0+128),w
  9614  0EF3  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9615  0EF4  0843               	movf	(?___ftadd+2)^(0+128),w
  9616  0EF5                     L5:	
  9617  0EF5  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9618  0EF6  3000               	movlw	0
  9619  0EF7  00D1               	movwf	___ftdiv@f1^(0+128)
  9620  0EF8  3034               	movlw	52
  9621  0EF9  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9622  0EFA  3043               	movlw	67
  9623  0EFB  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9624  0EFC  319D  253D  318E   	fcall	___ftdiv
  9625  0EFF  0021               	movlb	1	; select bank1
  9626  0F00  084E               	movf	?___ftdiv^(0+128),w
  9627  0F01  0022               	movlb	2	; select bank2
  9628  0F02  00BA               	movwf	modTri@period^(0+256)
  9629  0F03  0021               	movlb	1	; select bank1
  9630  0F04  084F               	movf	(?___ftdiv+1)^(0+128),w
  9631  0F05  0022               	movlb	2	; select bank2
  9632  0F06  00BB               	movwf	(modTri@period+1)^(0+256)
  9633  0F07  0021               	movlb	1	; select bank1
  9634  0F08  0850               	movf	(?___ftdiv+2)^(0+128),w
  9635  0F09  0022               	movlb	2	; select bank2
  9636  0F0A  00BC               	movwf	(modTri@period+2)^(0+256)
  9637                           
  9638                           ;modulation.c: 82: }
  9639                           ;modulation.c: 83: double tmpVal = (period*angle-shift) ;
  9640  0F0B  0837               	movf	modTri@shift^(0+256),w
  9641  0F0C  0021               	movlb	1	; select bank1
  9642  0F0D  00BE               	movwf	___ftneg@f1^(0+128)
  9643  0F0E  0022               	movlb	2	; select bank2
  9644  0F0F  0838               	movf	(modTri@shift+1)^(0+256),w
  9645  0F10  0021               	movlb	1	; select bank1
  9646  0F11  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9647  0F12  0022               	movlb	2	; select bank2
  9648  0F13  0839               	movf	(modTri@shift+2)^(0+256),w
  9649  0F14  0021               	movlb	1	; select bank1
  9650  0F15  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9651  0F16  31AF  2779  318E   	fcall	___ftneg
  9652  0F19  0021               	movlb	1	; select bank1
  9653  0F1A  083E               	movf	?___ftneg^(0+128),w
  9654  0F1B  00C1               	movwf	___ftadd@f1^(0+128)
  9655  0F1C  083F               	movf	(?___ftneg+1)^(0+128),w
  9656  0F1D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9657  0F1E  0840               	movf	(?___ftneg+2)^(0+128),w
  9658  0F1F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9659  0F20  0022               	movlb	2	; select bank2
  9660  0F21  082E               	movf	modTri@angle^(0+256),w
  9661  0F22  0021               	movlb	1	; select bank1
  9662  0F23  00AE               	movwf	___ftmul@f1^(0+128)
  9663  0F24  0022               	movlb	2	; select bank2
  9664  0F25  082F               	movf	(modTri@angle+1)^(0+256),w
  9665  0F26  0021               	movlb	1	; select bank1
  9666  0F27  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9667  0F28  0022               	movlb	2	; select bank2
  9668  0F29  0830               	movf	(modTri@angle+2)^(0+256),w
  9669  0F2A  0021               	movlb	1	; select bank1
  9670  0F2B  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9671  0F2C  0022               	movlb	2	; select bank2
  9672  0F2D  083A               	movf	modTri@period^(0+256),w
  9673  0F2E  0021               	movlb	1	; select bank1
  9674  0F2F  00B1               	movwf	___ftmul@f2^(0+128)
  9675  0F30  0022               	movlb	2	; select bank2
  9676  0F31  083B               	movf	(modTri@period+1)^(0+256),w
  9677  0F32  0021               	movlb	1	; select bank1
  9678  0F33  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9679  0F34  0022               	movlb	2	; select bank2
  9680  0F35  083C               	movf	(modTri@period+2)^(0+256),w
  9681  0F36  0021               	movlb	1	; select bank1
  9682  0F37  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9683  0F38  319E  2691  318E   	fcall	___ftmul
  9684  0F3B  0021               	movlb	1	; select bank1
  9685  0F3C  082E               	movf	?___ftmul^(0+128),w
  9686  0F3D  00C4               	movwf	___ftadd@f2^(0+128)
  9687  0F3E  082F               	movf	(?___ftmul+1)^(0+128),w
  9688  0F3F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9689  0F40  0830               	movf	(?___ftmul+2)^(0+128),w
  9690  0F41  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9691  0F42  3192  225B  318E   	fcall	___ftadd
  9692  0F45  0021               	movlb	1	; select bank1
  9693  0F46  0841               	movf	?___ftadd^(0+128),w
  9694  0F47  0022               	movlb	2	; select bank2
  9695  0F48  00BD               	movwf	modTri@tmpVal^(0+256)
  9696  0F49  0021               	movlb	1	; select bank1
  9697  0F4A  0842               	movf	(?___ftadd+1)^(0+128),w
  9698  0F4B  0022               	movlb	2	; select bank2
  9699  0F4C  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9700  0F4D  0021               	movlb	1	; select bank1
  9701  0F4E  0843               	movf	(?___ftadd+2)^(0+128),w
  9702  0F4F  0022               	movlb	2	; select bank2
  9703  0F50  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9704                           
  9705                           ;modulation.c: 84: if (tmpVal > 270) {
  9706  0F51  3000               	movlw	0
  9707  0F52  0021               	movlb	1	; select bank1
  9708  0F53  00A0               	movwf	___ftge@ff1^(0+128)
  9709  0F54  3087               	movlw	135
  9710  0F55  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9711  0F56  3043               	movlw	67
  9712  0F57  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9713  0F58  0022               	movlb	2	; select bank2
  9714  0F59  083D               	movf	modTri@tmpVal^(0+256),w
  9715  0F5A  0021               	movlb	1	; select bank1
  9716  0F5B  00A3               	movwf	___ftge@ff2^(0+128)
  9717  0F5C  0022               	movlb	2	; select bank2
  9718  0F5D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9719  0F5E  0021               	movlb	1	; select bank1
  9720  0F5F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9721  0F60  0022               	movlb	2	; select bank2
  9722  0F61  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9723  0F62  0021               	movlb	1	; select bank1
  9724  0F63  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9725  0F64  31A2  22E0  318E   	fcall	___ftge
  9726  0F67  1803               	btfsc	3,0
  9727  0F68  2F7C               	goto	l8244
  9728                           
  9729                           ;modulation.c: 85: tmpVal = tmpVal - 360.0;
  9730  0F69  3000               	movlw	0
  9731  0F6A  0021               	movlb	1	; select bank1
  9732  0F6B  00C1               	movwf	___ftadd@f1^(0+128)
  9733  0F6C  30B4               	movlw	180
  9734  0F6D  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9735  0F6E  30C3               	movlw	195
  9736  0F6F  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9737  0F70  0022               	movlb	2	; select bank2
  9738  0F71  083D               	movf	modTri@tmpVal^(0+256),w
  9739  0F72  0021               	movlb	1	; select bank1
  9740  0F73  00C4               	movwf	___ftadd@f2^(0+128)
  9741  0F74  0022               	movlb	2	; select bank2
  9742  0F75  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9743  0F76  0021               	movlb	1	; select bank1
  9744  0F77  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9745  0F78  0022               	movlb	2	; select bank2
  9746  0F79  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9747  0F7A  0021               	movlb	1	; select bank1
  9748  0F7B  2FB0               	goto	L7
  9749  0F7C                     l8244:	
  9750                           ;modulation.c: 86: } else if (tmpVal > 90) {
  9751                           
  9752  0F7C  3000               	movlw	0
  9753  0F7D  0021               	movlb	1	; select bank1
  9754  0F7E  00A0               	movwf	___ftge@ff1^(0+128)
  9755  0F7F  30B4               	movlw	180
  9756  0F80  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9757  0F81  3042               	movlw	66
  9758  0F82  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9759  0F83  0022               	movlb	2	; select bank2
  9760  0F84  083D               	movf	modTri@tmpVal^(0+256),w
  9761  0F85  0021               	movlb	1	; select bank1
  9762  0F86  00A3               	movwf	___ftge@ff2^(0+128)
  9763  0F87  0022               	movlb	2	; select bank2
  9764  0F88  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9765  0F89  0021               	movlb	1	; select bank1
  9766  0F8A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9767  0F8B  0022               	movlb	2	; select bank2
  9768  0F8C  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9769  0F8D  0021               	movlb	1	; select bank1
  9770  0F8E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9771  0F8F  31A2  22E0  318E   	fcall	___ftge
  9772  0F92  1803               	btfsc	3,0
  9773  0F93  2FC0               	goto	l1910
  9774                           
  9775                           ;modulation.c: 87: tmpVal = 180 - tmpVal;
  9776  0F94  3000               	movlw	0
  9777  0F95  0021               	movlb	1	; select bank1
  9778  0F96  00C1               	movwf	___ftadd@f1^(0+128)
  9779  0F97  3034               	movlw	52
  9780  0F98  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9781  0F99  3043               	movlw	67
  9782  0F9A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9783  0F9B  0022               	movlb	2	; select bank2
  9784  0F9C  083D               	movf	modTri@tmpVal^(0+256),w
  9785  0F9D  0021               	movlb	1	; select bank1
  9786  0F9E  00BE               	movwf	___ftneg@f1^(0+128)
  9787  0F9F  0022               	movlb	2	; select bank2
  9788  0FA0  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9789  0FA1  0021               	movlb	1	; select bank1
  9790  0FA2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9791  0FA3  0022               	movlb	2	; select bank2
  9792  0FA4  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9793  0FA5  0021               	movlb	1	; select bank1
  9794  0FA6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9795  0FA7  31AF  2779  318E   	fcall	___ftneg
  9796  0FAA  0021               	movlb	1	; select bank1
  9797  0FAB  083E               	movf	?___ftneg^(0+128),w
  9798  0FAC  00C4               	movwf	___ftadd@f2^(0+128)
  9799  0FAD  083F               	movf	(?___ftneg+1)^(0+128),w
  9800  0FAE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9801  0FAF  0840               	movf	(?___ftneg+2)^(0+128),w
  9802  0FB0                     L7:	
  9803  0FB0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9804  0FB1  3192  225B  318E   	fcall	___ftadd
  9805  0FB4  0021               	movlb	1	; select bank1
  9806  0FB5  0841               	movf	?___ftadd^(0+128),w
  9807  0FB6  0022               	movlb	2	; select bank2
  9808  0FB7  00BD               	movwf	modTri@tmpVal^(0+256)
  9809  0FB8  0021               	movlb	1	; select bank1
  9810  0FB9  0842               	movf	(?___ftadd+1)^(0+128),w
  9811  0FBA  0022               	movlb	2	; select bank2
  9812  0FBB  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9813  0FBC  0021               	movlb	1	; select bank1
  9814  0FBD  0843               	movf	(?___ftadd+2)^(0+128),w
  9815  0FBE  0022               	movlb	2	; select bank2
  9816  0FBF  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9817  0FC0                     l1910:	
  9818                           
  9819                           ;modulation.c: 88: }
  9820                           ;modulation.c: 89: tmpVal = tmpVal * 10/9;
  9821  0FC0  3000               	movlw	0
  9822  0FC1  0021               	movlb	1	; select bank1
  9823  0FC2  00CE               	movwf	___ftdiv@f2^(0+128)
  9824  0FC3  3010               	movlw	16
  9825  0FC4  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9826  0FC5  3041               	movlw	65
  9827  0FC6  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9828  0FC7  3000               	movlw	0
  9829  0FC8  00AE               	movwf	___ftmul@f1^(0+128)
  9830  0FC9  3020               	movlw	32
  9831  0FCA  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9832  0FCB  3041               	movlw	65
  9833  0FCC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9834  0FCD  0022               	movlb	2	; select bank2
  9835  0FCE  083D               	movf	modTri@tmpVal^(0+256),w
  9836  0FCF  0021               	movlb	1	; select bank1
  9837  0FD0  00B1               	movwf	___ftmul@f2^(0+128)
  9838  0FD1  0022               	movlb	2	; select bank2
  9839  0FD2  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9840  0FD3  0021               	movlb	1	; select bank1
  9841  0FD4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9842  0FD5  0022               	movlb	2	; select bank2
  9843  0FD6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9844  0FD7  0021               	movlb	1	; select bank1
  9845  0FD8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9846  0FD9  319E  2691  318E   	fcall	___ftmul
  9847  0FDC  0021               	movlb	1	; select bank1
  9848  0FDD  082E               	movf	?___ftmul^(0+128),w
  9849  0FDE  00D1               	movwf	___ftdiv@f1^(0+128)
  9850  0FDF  082F               	movf	(?___ftmul+1)^(0+128),w
  9851  0FE0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9852  0FE1  0830               	movf	(?___ftmul+2)^(0+128),w
  9853  0FE2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9854  0FE3  319D  253D  318E   	fcall	___ftdiv
  9855  0FE6  0021               	movlb	1	; select bank1
  9856  0FE7  084E               	movf	?___ftdiv^(0+128),w
  9857  0FE8  0022               	movlb	2	; select bank2
  9858  0FE9  00BD               	movwf	modTri@tmpVal^(0+256)
  9859  0FEA  0021               	movlb	1	; select bank1
  9860  0FEB  084F               	movf	(?___ftdiv+1)^(0+128),w
  9861  0FEC  0022               	movlb	2	; select bank2
  9862  0FED  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9863  0FEE  0021               	movlb	1	; select bank1
  9864  0FEF  0850               	movf	(?___ftdiv+2)^(0+128),w
  9865  0FF0  0022               	movlb	2	; select bank2
  9866  0FF1  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9867                           
  9868                           ;modulation.c: 91: return (int)(tmpVal);
  9869  0FF2  083D               	movf	modTri@tmpVal^(0+256),w
  9870  0FF3  00A0               	movwf	___fttol@f1^(0+256)
  9871  0FF4  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9872  0FF5  00A1               	movwf	(___fttol@f1+1)^(0+256)
  9873  0FF6  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9874  0FF7  00A2               	movwf	(___fttol@f1+2)^(0+256)
  9875  0FF8  319A  226C         	fcall	___fttol
  9876  0FFA  0022               	movlb	2	; select bank2
  9877  0FFB  0821               	movf	(?___fttol^(0+256)+1),w
  9878  0FFC  00AF               	movwf	(?_modTri+1)^(0+256)
  9879  0FFD  0820               	movf	?___fttol^(0+256),w
  9880  0FFE  00AE               	movwf	?_modTri^(0+256)
  9881  0FFF  0008               	return
  9882  1000                     __end_of_modTri:	
  9883                           
  9884                           	psect	text18
  9885  231C                     __ptext18:	
  9886 ;; *************** function _modSquare *****************
  9887 ;; Defined at:
  9888 ;;		line 117 in file "modulation.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;  angle           3   40[BANK2 ] int 
  9891 ;;  inflection      3   43[BANK2 ] int 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  tmpVal          2   46[BANK2 ] int 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  2   40[BANK2 ] int 
  9896 ;; Registers used:
  9897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9903 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9904 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9906 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9907 ;;Total ram usage:        8 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    6
  9910 ;; This function calls:
  9911 ;;		___ftge
  9912 ;;		_modSin
  9913 ;; This function is called by:
  9914 ;;		_updateModulationArray
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           
  9919                           ;psect for function _modSquare
  9920  231C                     _modSquare:	
  9921                           
  9922                           ;modulation.c: 118: int tmpVal = modSin(angle, inflection);
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9926  231C  0022               	movlb	2	; select bank2
  9927  231D  0848               	movf	modSquare@angle^(0+256),w
  9928  231E  00B4               	movwf	modSin@angle^(0+256)
  9929  231F  0849               	movf	(modSquare@angle+1)^(0+256),w
  9930  2320  00B5               	movwf	(modSin@angle+1)^(0+256)
  9931  2321  084A               	movf	(modSquare@angle+2)^(0+256),w
  9932  2322  00B6               	movwf	(modSin@angle+2)^(0+256)
  9933  2323  084B               	movf	modSquare@inflection^(0+256),w
  9934  2324  00B7               	movwf	modSin@inflection^(0+256)
  9935  2325  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9936  2326  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9937  2327  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9938  2328  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9939  2329  3196  2654  31A3   	fcall	_modSin
  9940  232C  0022               	movlb	2	; select bank2
  9941  232D  0835               	movf	(?_modSin+1)^(0+256),w
  9942  232E  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
  9943  232F  0834               	movf	?_modSin^(0+256),w
  9944  2330  00CE               	movwf	modSquare@tmpVal^(0+256)
  9945                           
  9946                           ;modulation.c: 120: return (angle <= inflection) ? 100 : -100;
  9947  2331  084B               	movf	modSquare@inflection^(0+256),w
  9948  2332  0021               	movlb	1	; select bank1
  9949  2333  00A0               	movwf	___ftge@ff1^(0+128)
  9950  2334  0022               	movlb	2	; select bank2
  9951  2335  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9952  2336  0021               	movlb	1	; select bank1
  9953  2337  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9954  2338  0022               	movlb	2	; select bank2
  9955  2339  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9956  233A  0021               	movlb	1	; select bank1
  9957  233B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9958  233C  0022               	movlb	2	; select bank2
  9959  233D  0848               	movf	modSquare@angle^(0+256),w
  9960  233E  0021               	movlb	1	; select bank1
  9961  233F  00A3               	movwf	___ftge@ff2^(0+128)
  9962  2340  0022               	movlb	2	; select bank2
  9963  2341  0849               	movf	(modSquare@angle+1)^(0+256),w
  9964  2342  0021               	movlb	1	; select bank1
  9965  2343  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9966  2344  0022               	movlb	2	; select bank2
  9967  2345  084A               	movf	(modSquare@angle+2)^(0+256),w
  9968  2346  0021               	movlb	1	; select bank1
  9969  2347  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9970  2348  31A2  22E0  31A3   	fcall	___ftge
  9971  234B  1803               	btfsc	3,0
  9972  234C  2B53               	goto	l8256
  9973  234D  309C               	movlw	156
  9974  234E  0022               	movlb	2	; select bank2
  9975  234F  00C8               	movwf	?_modSquare^(0+256)
  9976  2350  30FF               	movlw	255
  9977  2351  00C9               	movwf	(?_modSquare^(0+256)+1)
  9978  2352  0008               	return
  9979  2353                     l8256:	
  9980  2353  3064               	movlw	100
  9981  2354  0022               	movlb	2	; select bank2
  9982  2355  00C8               	movwf	?_modSquare^(0+256)
  9983  2356  3000               	movlw	0
  9984  2357  00C9               	movwf	(?_modSquare^(0+256)+1)
  9985  2358  0008               	return
  9986  2359                     __end_of_modSquare:	
  9987                           
  9988                           	psect	text19
  9989  1654                     __ptext19:	
  9990 ;; *************** function _modSin *****************
  9991 ;; Defined at:
  9992 ;;		line 56 in file "modulation.c"
  9993 ;; Parameters:    Size  Location     Type
  9994 ;;  angle           3   20[BANK2 ] int 
  9995 ;;  inflection      3   23[BANK2 ] int 
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;  tmpVal          3   37[BANK2 ] int 
  9998 ;;  period          3   34[BANK2 ] int 
  9999 ;;  shift           3   31[BANK2 ] int 
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  2   20[BANK2 ] int 
 10002 ;; Registers used:
 10003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10009 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10010 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10011 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10012 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10013 ;;Total ram usage:       20 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    5
 10016 ;; This function calls:
 10017 ;;		___ftadd
 10018 ;;		___ftdiv
 10019 ;;		___ftge
 10020 ;;		___ftmul
 10021 ;;		___ftneg
 10022 ;;		___fttol
 10023 ;;		___wmul
 10024 ;; This function is called by:
 10025 ;;		_updateModulationArray
 10026 ;;		_modSquare
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _modSin
 10032  1654                     _modSin:	
 10033                           
 10034                           ;modulation.c: 57: double period = 1.0;
 10035                           
 10036                           ;incstack = 0
 10037                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10038  1654  3000               	movlw	0
 10039  1655  0022               	movlb	2	; select bank2
 10040  1656  00C2               	movwf	modSin@period^(0+256)
 10041  1657  3080               	movlw	128
 10042  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10043  1659  303F               	movlw	63
 10044  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10045                           
 10046                           ;modulation.c: 58: double shift = 0.0;
 10047  165B  3000               	movlw	0
 10048  165C  00BF               	movwf	modSin@shift^(0+256)
 10049  165D  3000               	movlw	0
 10050  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10051  165F  3000               	movlw	0
 10052  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10053                           
 10054                           ;modulation.c: 60: if(angle<=inflection) {
 10055  1661  0837               	movf	modSin@inflection^(0+256),w
 10056  1662  0021               	movlb	1	; select bank1
 10057  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10058  1664  0022               	movlb	2	; select bank2
 10059  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10060  1666  0021               	movlb	1	; select bank1
 10061  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10062  1668  0022               	movlb	2	; select bank2
 10063  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10064  166A  0021               	movlb	1	; select bank1
 10065  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10066  166C  0022               	movlb	2	; select bank2
 10067  166D  0834               	movf	modSin@angle^(0+256),w
 10068  166E  0021               	movlb	1	; select bank1
 10069  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10070  1670  0022               	movlb	2	; select bank2
 10071  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10072  1672  0021               	movlb	1	; select bank1
 10073  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10074  1674  0022               	movlb	2	; select bank2
 10075  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10076  1676  0021               	movlb	1	; select bank1
 10077  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10078  1678  31A2  22E0  3196   	fcall	___ftge
 10079  167B  1C03               	btfss	3,0
 10080  167C  2E89               	goto	l7914
 10081                           
 10082                           ;modulation.c: 61: period = 180.0/inflection;
 10083  167D  0022               	movlb	2	; select bank2
 10084  167E  0837               	movf	modSin@inflection^(0+256),w
 10085  167F  0021               	movlb	1	; select bank1
 10086  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10087  1681  0022               	movlb	2	; select bank2
 10088  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10089  1683  0021               	movlb	1	; select bank1
 10090  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10091  1685  0022               	movlb	2	; select bank2
 10092  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10093  1687  0021               	movlb	1	; select bank1
 10094  1688  2F44               	goto	L8
 10095  1689                     l7914:	
 10096                           ;modulation.c: 62: } else {
 10097                           
 10098                           
 10099                           ;modulation.c: 63: shift = -(360-inflection*2)*(180/(360-inflection));
 10100  1689  0022               	movlb	2	; select bank2
 10101  168A  0837               	movf	modSin@inflection^(0+256),w
 10102  168B  0021               	movlb	1	; select bank1
 10103  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10104  168D  0022               	movlb	2	; select bank2
 10105  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10106  168F  0021               	movlb	1	; select bank1
 10107  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10108  1691  0022               	movlb	2	; select bank2
 10109  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10110  1693  0021               	movlb	1	; select bank1
 10111  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10112  1695  3000               	movlw	0
 10113  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10114  1697  3000               	movlw	0
 10115  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10116  1699  3040               	movlw	64
 10117  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10118  169B  319E  2691  3196   	fcall	___ftmul
 10119  169E  0021               	movlb	1	; select bank1
 10120  169F  082E               	movf	?___ftmul^(0+128),w
 10121  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10122  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10123  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10124  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10125  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10126  16A5  31AF  2779  3196   	fcall	___ftneg
 10127  16A8  0021               	movlb	1	; select bank1
 10128  16A9  083E               	movf	?___ftneg^(0+128),w
 10129  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10130  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10131  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10132  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10133  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10134  16AF  3000               	movlw	0
 10135  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10136  16B1  30B4               	movlw	180
 10137  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10138  16B3  3043               	movlw	67
 10139  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10140  16B5  3192  225B  3196   	fcall	___ftadd
 10141  16B8  0021               	movlb	1	; select bank1
 10142  16B9  0841               	movf	?___ftadd^(0+128),w
 10143  16BA  0022               	movlb	2	; select bank2
 10144  16BB  00BC               	movwf	_modSin$2819^(0+256)
 10145  16BC  0021               	movlb	1	; select bank1
 10146  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10147  16BE  0022               	movlb	2	; select bank2
 10148  16BF  00BD               	movwf	(_modSin$2819+1)^(0+256)
 10149  16C0  0021               	movlb	1	; select bank1
 10150  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10151  16C2  0022               	movlb	2	; select bank2
 10152  16C3  00BE               	movwf	(_modSin$2819+2)^(0+256)
 10153                           
 10154                           ;modulation.c: 63: shift = -(360-inflection*2)*(180/(360-inflection));
 10155  16C4  083C               	movf	_modSin$2819^(0+256),w
 10156  16C5  0021               	movlb	1	; select bank1
 10157  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10158  16C7  0022               	movlb	2	; select bank2
 10159  16C8  083D               	movf	(_modSin$2819+1)^(0+256),w
 10160  16C9  0021               	movlb	1	; select bank1
 10161  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10162  16CB  0022               	movlb	2	; select bank2
 10163  16CC  083E               	movf	(_modSin$2819+2)^(0+256),w
 10164  16CD  0021               	movlb	1	; select bank1
 10165  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10166  16CF  31AF  2779  3196   	fcall	___ftneg
 10167  16D2  0021               	movlb	1	; select bank1
 10168  16D3  083E               	movf	?___ftneg^(0+128),w
 10169  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10170  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10171  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10172  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10173  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10174  16D9  3000               	movlw	0
 10175  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10176  16DB  30B4               	movlw	180
 10177  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10178  16DD  3043               	movlw	67
 10179  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10180  16DF  0022               	movlb	2	; select bank2
 10181  16E0  0837               	movf	modSin@inflection^(0+256),w
 10182  16E1  0021               	movlb	1	; select bank1
 10183  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10184  16E3  0022               	movlb	2	; select bank2
 10185  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10186  16E5  0021               	movlb	1	; select bank1
 10187  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10188  16E7  0022               	movlb	2	; select bank2
 10189  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10190  16E9  0021               	movlb	1	; select bank1
 10191  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10192  16EB  31AF  2779  3196   	fcall	___ftneg
 10193  16EE  0021               	movlb	1	; select bank1
 10194  16EF  083E               	movf	?___ftneg^(0+128),w
 10195  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10196  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10197  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10198  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10199  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10200  16F5  3192  225B  3196   	fcall	___ftadd
 10201  16F8  0021               	movlb	1	; select bank1
 10202  16F9  0841               	movf	?___ftadd^(0+128),w
 10203  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10204  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10205  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10206  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10207  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10208  16FF  3000               	movlw	0
 10209  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10210  1701  3034               	movlw	52
 10211  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10212  1703  3043               	movlw	67
 10213  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10214  1705  319D  253D  3196   	fcall	___ftdiv
 10215  1708  0021               	movlb	1	; select bank1
 10216  1709  084E               	movf	?___ftdiv^(0+128),w
 10217  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10218  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10219  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10220  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10221  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10222  170F  319E  2691  3196   	fcall	___ftmul
 10223  1712  0021               	movlb	1	; select bank1
 10224  1713  082E               	movf	?___ftmul^(0+128),w
 10225  1714  0022               	movlb	2	; select bank2
 10226  1715  00BF               	movwf	modSin@shift^(0+256)
 10227  1716  0021               	movlb	1	; select bank1
 10228  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10229  1718  0022               	movlb	2	; select bank2
 10230  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10231  171A  0021               	movlb	1	; select bank1
 10232  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10233  171C  0022               	movlb	2	; select bank2
 10234  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10235                           
 10236                           ;modulation.c: 64: period = 180/(360-inflection);
 10237  171E  3000               	movlw	0
 10238  171F  0021               	movlb	1	; select bank1
 10239  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10240  1721  30B4               	movlw	180
 10241  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10242  1723  3043               	movlw	67
 10243  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10244  1725  0022               	movlb	2	; select bank2
 10245  1726  0837               	movf	modSin@inflection^(0+256),w
 10246  1727  0021               	movlb	1	; select bank1
 10247  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10248  1729  0022               	movlb	2	; select bank2
 10249  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10250  172B  0021               	movlb	1	; select bank1
 10251  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10252  172D  0022               	movlb	2	; select bank2
 10253  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10254  172F  0021               	movlb	1	; select bank1
 10255  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10256  1731  31AF  2779  3196   	fcall	___ftneg
 10257  1734  0021               	movlb	1	; select bank1
 10258  1735  083E               	movf	?___ftneg^(0+128),w
 10259  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10260  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10261  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10262  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10263  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10264  173B  3192  225B  3196   	fcall	___ftadd
 10265  173E  0021               	movlb	1	; select bank1
 10266  173F  0841               	movf	?___ftadd^(0+128),w
 10267  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10268  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10269  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10270  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10271  1744                     L8:	
 10272  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10273  1745  3000               	movlw	0
 10274  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10275  1747  3034               	movlw	52
 10276  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10277  1749  3043               	movlw	67
 10278  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10279  174B  319D  253D  3196   	fcall	___ftdiv
 10280  174E  0021               	movlb	1	; select bank1
 10281  174F  084E               	movf	?___ftdiv^(0+128),w
 10282  1750  0022               	movlb	2	; select bank2
 10283  1751  00C2               	movwf	modSin@period^(0+256)
 10284  1752  0021               	movlb	1	; select bank1
 10285  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10286  1754  0022               	movlb	2	; select bank2
 10287  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10288  1756  0021               	movlb	1	; select bank1
 10289  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10290  1758  0022               	movlb	2	; select bank2
 10291  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10292                           
 10293                           ;modulation.c: 66: }
 10294                           ;modulation.c: 67: double tmpVal = (period*angle-shift) /3;
 10295  175A  3000               	movlw	0
 10296  175B  0021               	movlb	1	; select bank1
 10297  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10298  175D  3040               	movlw	64
 10299  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10300  175F  3040               	movlw	64
 10301  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10302  1761  0022               	movlb	2	; select bank2
 10303  1762  083F               	movf	modSin@shift^(0+256),w
 10304  1763  0021               	movlb	1	; select bank1
 10305  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10306  1765  0022               	movlb	2	; select bank2
 10307  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10308  1767  0021               	movlb	1	; select bank1
 10309  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10310  1769  0022               	movlb	2	; select bank2
 10311  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10312  176B  0021               	movlb	1	; select bank1
 10313  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10314  176D  31AF  2779  3196   	fcall	___ftneg
 10315  1770  0021               	movlb	1	; select bank1
 10316  1771  083E               	movf	?___ftneg^(0+128),w
 10317  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10318  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10319  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10320  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10321  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10322  1777  0022               	movlb	2	; select bank2
 10323  1778  0834               	movf	modSin@angle^(0+256),w
 10324  1779  0021               	movlb	1	; select bank1
 10325  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10326  177B  0022               	movlb	2	; select bank2
 10327  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10328  177D  0021               	movlb	1	; select bank1
 10329  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10330  177F  0022               	movlb	2	; select bank2
 10331  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10332  1781  0021               	movlb	1	; select bank1
 10333  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10334  1783  0022               	movlb	2	; select bank2
 10335  1784  0842               	movf	modSin@period^(0+256),w
 10336  1785  0021               	movlb	1	; select bank1
 10337  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10338  1787  0022               	movlb	2	; select bank2
 10339  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10340  1789  0021               	movlb	1	; select bank1
 10341  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10342  178B  0022               	movlb	2	; select bank2
 10343  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10344  178D  0021               	movlb	1	; select bank1
 10345  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10346  178F  319E  2691  3196   	fcall	___ftmul
 10347  1792  0021               	movlb	1	; select bank1
 10348  1793  082E               	movf	?___ftmul^(0+128),w
 10349  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10350  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10351  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10352  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10353  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10354  1799  3192  225B  3196   	fcall	___ftadd
 10355  179C  0021               	movlb	1	; select bank1
 10356  179D  0841               	movf	?___ftadd^(0+128),w
 10357  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10358  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10359  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10360  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10361  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10362  17A3  319D  253D  3196   	fcall	___ftdiv
 10363  17A6  0021               	movlb	1	; select bank1
 10364  17A7  084E               	movf	?___ftdiv^(0+128),w
 10365  17A8  0022               	movlb	2	; select bank2
 10366  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10367  17AA  0021               	movlb	1	; select bank1
 10368  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10369  17AC  0022               	movlb	2	; select bank2
 10370  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10371  17AE  0021               	movlb	1	; select bank1
 10372  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10373  17B0  0022               	movlb	2	; select bank2
 10374  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10375                           
 10376                           ;modulation.c: 68: tmpVal = sinArray[(int)(tmpVal)];
 10377  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10378  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10379  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10380  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10381  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10382  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10383  17B8  319A  226C  3196   	fcall	___fttol
 10384  17BB  0022               	movlb	2	; select bank2
 10385  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10386  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10387  17BE  0820               	movf	?___fttol^(0+256),w
 10388  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10389  17C0  3003               	movlw	3
 10390  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10391  17C2  3000               	movlw	0
 10392  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10393  17C4  31A0  2056  3196   	fcall	___wmul
 10394  17C7  3082               	movlw	130
 10395  17C8  0022               	movlb	2	; select bank2
 10396  17C9  00BA               	movwf	??_modSin^(0+256)
 10397  17CA  3024               	movlw	36
 10398  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10399  17CC  082E               	movf	?___wmul^(0+256),w
 10400  17CD  073A               	addwf	??_modSin^(0+256),w
 10401  17CE  0086               	movwf	6
 10402  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10403  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10404  17D1  0087               	movwf	7
 10405  17D2  3F40               	moviw [0]fsr1
 10406  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10407  17D4  3F41               	moviw [1]fsr1
 10408  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10409  17D6  3F42               	moviw [2]fsr1
 10410  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10411                           
 10412                           ;modulation.c: 69: return (int)(100.0 * tmpVal);
 10413  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10414  17D9  0021               	movlb	1	; select bank1
 10415  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10416  17DB  0022               	movlb	2	; select bank2
 10417  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10418  17DD  0021               	movlb	1	; select bank1
 10419  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10420  17DF  0022               	movlb	2	; select bank2
 10421  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10422  17E1  0021               	movlb	1	; select bank1
 10423  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10424  17E3  3000               	movlw	0
 10425  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10426  17E5  30C8               	movlw	200
 10427  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10428  17E7  3042               	movlw	66
 10429  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10430  17E9  319E  2691  3196   	fcall	___ftmul
 10431  17EC  0021               	movlb	1	; select bank1
 10432  17ED  082E               	movf	?___ftmul^(0+128),w
 10433  17EE  0022               	movlb	2	; select bank2
 10434  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10435  17F0  0021               	movlb	1	; select bank1
 10436  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10437  17F2  0022               	movlb	2	; select bank2
 10438  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10439  17F4  0021               	movlb	1	; select bank1
 10440  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10441  17F6  0022               	movlb	2	; select bank2
 10442  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10443  17F8  319A  226C         	fcall	___fttol
 10444  17FA  0022               	movlb	2	; select bank2
 10445  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10446  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10447  17FD  0820               	movf	?___fttol^(0+256),w
 10448  17FE  00B4               	movwf	?_modSin^(0+256)
 10449  17FF  0008               	return
 10450  1800                     __end_of_modSin:	
 10451                           
 10452                           	psect	text20
 10453  2072                     __ptext20:	
 10454 ;; *************** function _modSawRev *****************
 10455 ;; Defined at:
 10456 ;;		line 111 in file "modulation.c"
 10457 ;; Parameters:    Size  Location     Type
 10458 ;;  angle           3   37[BANK2 ] int 
 10459 ;;  inflection      3   40[BANK2 ] int 
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;		None
 10462 ;; Return value:  Size  Location     Type
 10463 ;;                  2   37[BANK2 ] int 
 10464 ;; Registers used:
 10465 ;;		wreg, status,2, status,0, pclath, cstack
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10471 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10473 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10474 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10475 ;;Total ram usage:        8 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    6
 10478 ;; This function calls:
 10479 ;;		_modSaw
 10480 ;; This function is called by:
 10481 ;;		_updateModulationArray
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _modSawRev
 10487  2072                     _modSawRev:	
 10488                           
 10489                           ;modulation.c: 112: return -1 * modSaw(angle, inflection);
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10493  2072  0022               	movlb	2	; select bank2
 10494  2073  0845               	movf	modSawRev@angle^(0+256),w
 10495  2074  00AE               	movwf	modSaw@angle^(0+256)
 10496  2075  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10497  2076  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10498  2077  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10499  2078  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10500  2079  0848               	movf	modSawRev@inflection^(0+256),w
 10501  207A  00B1               	movwf	modSaw@inflection^(0+256)
 10502  207B  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10503  207C  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10504  207D  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10505  207E  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10506  207F  3194  24AA         	fcall	_modSaw
 10507  2081  0022               	movlb	2	; select bank2
 10508  2082  092E               	comf	?_modSaw^(0+256),w
 10509  2083  00CB               	movwf	??_modSawRev^(0+256)
 10510  2084  092F               	comf	(?_modSaw+1)^(0+256),w
 10511  2085  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10512  2086  0ACB               	incf	??_modSawRev^(0+256),f
 10513  2087  1903               	skipnz
 10514  2088  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10515  2089  084B               	movf	??_modSawRev^(0+256),w
 10516  208A  00C5               	movwf	?_modSawRev^(0+256)
 10517  208B  084C               	movf	(??_modSawRev+1)^(0+256),w
 10518  208C  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10519  208D  0008               	return
 10520  208E                     __end_of_modSawRev:	
 10521                           
 10522                           	psect	text21
 10523  14AA                     __ptext21:	
 10524 ;; *************** function _modSaw *****************
 10525 ;; Defined at:
 10526 ;;		line 95 in file "modulation.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;  angle           3   14[BANK2 ] int 
 10529 ;;  inflection      3   17[BANK2 ] int 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  period          3   34[BANK2 ] int 
 10532 ;;  shift           3   31[BANK2 ] int 
 10533 ;;  mod             2   29[BANK2 ] int 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  2   14[BANK2 ] int 
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0, pclath, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10543 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10544 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10546 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10547 ;;Total ram usage:       23 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    5
 10550 ;; This function calls:
 10551 ;;		___ftadd
 10552 ;;		___ftdiv
 10553 ;;		___ftge
 10554 ;;		___ftmul
 10555 ;;		___ftneg
 10556 ;;		___fttol
 10557 ;; This function is called by:
 10558 ;;		_updateModulationArray
 10559 ;;		_modSawRev
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           
 10564                           ;psect for function _modSaw
 10565  14AA                     _modSaw:	
 10566                           
 10567                           ;modulation.c: 96: double period = 1.0;
 10568                           
 10569                           ;incstack = 0
 10570                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10571  14AA  3000               	movlw	0
 10572  14AB  0022               	movlb	2	; select bank2
 10573  14AC  00C2               	movwf	modSaw@period^(0+256)
 10574  14AD  3080               	movlw	128
 10575  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10576  14AF  303F               	movlw	63
 10577  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10578                           
 10579                           ;modulation.c: 97: double shift = 0;
 10580  14B1  3000               	movlw	0
 10581  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10582  14B3  3000               	movlw	0
 10583  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10584  14B5  3000               	movlw	0
 10585  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10586                           
 10587                           ;modulation.c: 99: if(angle<=inflection) {
 10588  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10589  14B8  0021               	movlb	1	; select bank1
 10590  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10591  14BA  0022               	movlb	2	; select bank2
 10592  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10593  14BC  0021               	movlb	1	; select bank1
 10594  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10595  14BE  0022               	movlb	2	; select bank2
 10596  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10597  14C0  0021               	movlb	1	; select bank1
 10598  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10599  14C2  0022               	movlb	2	; select bank2
 10600  14C3  082E               	movf	modSaw@angle^(0+256),w
 10601  14C4  0021               	movlb	1	; select bank1
 10602  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10603  14C6  0022               	movlb	2	; select bank2
 10604  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10605  14C8  0021               	movlb	1	; select bank1
 10606  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10607  14CA  0022               	movlb	2	; select bank2
 10608  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10609  14CC  0021               	movlb	1	; select bank1
 10610  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10611  14CE  31A2  22E0  3194   	fcall	___ftge
 10612  14D1  1C03               	btfss	3,0
 10613  14D2  2CDF               	goto	l7928
 10614                           
 10615                           ;modulation.c: 100: period = 180.0/inflection;
 10616  14D3  0022               	movlb	2	; select bank2
 10617  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10618  14D5  0021               	movlb	1	; select bank1
 10619  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10620  14D7  0022               	movlb	2	; select bank2
 10621  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10622  14D9  0021               	movlb	1	; select bank1
 10623  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10624  14DB  0022               	movlb	2	; select bank2
 10625  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10626  14DD  0021               	movlb	1	; select bank1
 10627  14DE  2DBC               	goto	L9
 10628  14DF                     l7928:	
 10629                           ;modulation.c: 101: } else {
 10630                           
 10631                           
 10632                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10633  14DF  0022               	movlb	2	; select bank2
 10634  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10635  14E1  0021               	movlb	1	; select bank1
 10636  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10637  14E3  0022               	movlb	2	; select bank2
 10638  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10639  14E5  0021               	movlb	1	; select bank1
 10640  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10641  14E7  0022               	movlb	2	; select bank2
 10642  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10643  14E9  0021               	movlb	1	; select bank1
 10644  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10645  14EB  3000               	movlw	0
 10646  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10647  14ED  3000               	movlw	0
 10648  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10649  14EF  3040               	movlw	64
 10650  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10651  14F1  319E  2691  3194   	fcall	___ftmul
 10652  14F4  0021               	movlb	1	; select bank1
 10653  14F5  082E               	movf	?___ftmul^(0+128),w
 10654  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10655  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10656  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10657  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10658  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10659  14FB  31AF  2779  3194   	fcall	___ftneg
 10660  14FE  0021               	movlb	1	; select bank1
 10661  14FF  083E               	movf	?___ftneg^(0+128),w
 10662  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10663  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10664  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10665  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10666  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10667  1505  3000               	movlw	0
 10668  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10669  1507  30B4               	movlw	180
 10670  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10671  1509  3043               	movlw	67
 10672  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10673  150B  3192  225B  3194   	fcall	___ftadd
 10674  150E  0021               	movlb	1	; select bank1
 10675  150F  0841               	movf	?___ftadd^(0+128),w
 10676  1510  0022               	movlb	2	; select bank2
 10677  1511  00B4               	movwf	_modSaw$2821^(0+256)
 10678  1512  0021               	movlb	1	; select bank1
 10679  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10680  1514  0022               	movlb	2	; select bank2
 10681  1515  00B5               	movwf	(_modSaw$2821+1)^(0+256)
 10682  1516  0021               	movlb	1	; select bank1
 10683  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10684  1518  0022               	movlb	2	; select bank2
 10685  1519  00B6               	movwf	(_modSaw$2821+2)^(0+256)
 10686                           
 10687                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10688  151A  0834               	movf	_modSaw$2821^(0+256),w
 10689  151B  0021               	movlb	1	; select bank1
 10690  151C  00BE               	movwf	___ftneg@f1^(0+128)
 10691  151D  0022               	movlb	2	; select bank2
 10692  151E  0835               	movf	(_modSaw$2821+1)^(0+256),w
 10693  151F  0021               	movlb	1	; select bank1
 10694  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10695  1521  0022               	movlb	2	; select bank2
 10696  1522  0836               	movf	(_modSaw$2821+2)^(0+256),w
 10697  1523  0021               	movlb	1	; select bank1
 10698  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10699  1525  31AF  2779  3194   	fcall	___ftneg
 10700  1528  0021               	movlb	1	; select bank1
 10701  1529  083E               	movf	?___ftneg^(0+128),w
 10702  152A  00AE               	movwf	___ftmul@f1^(0+128)
 10703  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 10704  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10705  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 10706  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10707  152F  3000               	movlw	0
 10708  1530  00C1               	movwf	___ftadd@f1^(0+128)
 10709  1531  30B4               	movlw	180
 10710  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10711  1533  3043               	movlw	67
 10712  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10713  1535  0022               	movlb	2	; select bank2
 10714  1536  0831               	movf	modSaw@inflection^(0+256),w
 10715  1537  0021               	movlb	1	; select bank1
 10716  1538  00BE               	movwf	___ftneg@f1^(0+128)
 10717  1539  0022               	movlb	2	; select bank2
 10718  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10719  153B  0021               	movlb	1	; select bank1
 10720  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10721  153D  0022               	movlb	2	; select bank2
 10722  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10723  153F  0021               	movlb	1	; select bank1
 10724  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10725  1541  31AF  2779  3194   	fcall	___ftneg
 10726  1544  0021               	movlb	1	; select bank1
 10727  1545  083E               	movf	?___ftneg^(0+128),w
 10728  1546  00C4               	movwf	___ftadd@f2^(0+128)
 10729  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 10730  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10731  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 10732  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10733  154B  3192  225B  3194   	fcall	___ftadd
 10734  154E  0021               	movlb	1	; select bank1
 10735  154F  0841               	movf	?___ftadd^(0+128),w
 10736  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 10737  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 10738  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10739  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 10740  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10741  1555  3000               	movlw	0
 10742  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 10743  1557  3034               	movlw	52
 10744  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10745  1559  3043               	movlw	67
 10746  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10747  155B  319D  253D  3194   	fcall	___ftdiv
 10748  155E  0021               	movlb	1	; select bank1
 10749  155F  084E               	movf	?___ftdiv^(0+128),w
 10750  1560  00B1               	movwf	___ftmul@f2^(0+128)
 10751  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 10752  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10753  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 10754  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10755  1565  319E  2691  3194   	fcall	___ftmul
 10756  1568  0021               	movlb	1	; select bank1
 10757  1569  082E               	movf	?___ftmul^(0+128),w
 10758  156A  0022               	movlb	2	; select bank2
 10759  156B  00B7               	movwf	_modSaw$2822^(0+256)
 10760  156C  0021               	movlb	1	; select bank1
 10761  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 10762  156E  0022               	movlb	2	; select bank2
 10763  156F  00B8               	movwf	(_modSaw$2822+1)^(0+256)
 10764  1570  0021               	movlb	1	; select bank1
 10765  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 10766  1572  0022               	movlb	2	; select bank2
 10767  1573  00B9               	movwf	(_modSaw$2822+2)^(0+256)
 10768                           
 10769                           ;modulation.c: 102: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10770  1574  3000               	movlw	0
 10771  1575  0021               	movlb	1	; select bank1
 10772  1576  00C1               	movwf	___ftadd@f1^(0+128)
 10773  1577  30B4               	movlw	180
 10774  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10775  1579  3043               	movlw	67
 10776  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10777  157B  0022               	movlb	2	; select bank2
 10778  157C  0837               	movf	_modSaw$2822^(0+256),w
 10779  157D  0021               	movlb	1	; select bank1
 10780  157E  00C4               	movwf	___ftadd@f2^(0+128)
 10781  157F  0022               	movlb	2	; select bank2
 10782  1580  0838               	movf	(_modSaw$2822+1)^(0+256),w
 10783  1581  0021               	movlb	1	; select bank1
 10784  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10785  1583  0022               	movlb	2	; select bank2
 10786  1584  0839               	movf	(_modSaw$2822+2)^(0+256),w
 10787  1585  0021               	movlb	1	; select bank1
 10788  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10789  1587  3192  225B  3194   	fcall	___ftadd
 10790  158A  0021               	movlb	1	; select bank1
 10791  158B  0841               	movf	?___ftadd^(0+128),w
 10792  158C  0022               	movlb	2	; select bank2
 10793  158D  00BF               	movwf	modSaw@shift^(0+256)
 10794  158E  0021               	movlb	1	; select bank1
 10795  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 10796  1590  0022               	movlb	2	; select bank2
 10797  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10798  1592  0021               	movlb	1	; select bank1
 10799  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 10800  1594  0022               	movlb	2	; select bank2
 10801  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10802                           
 10803                           ;modulation.c: 103: period = 180/(360-inflection);
 10804  1596  3000               	movlw	0
 10805  1597  0021               	movlb	1	; select bank1
 10806  1598  00C1               	movwf	___ftadd@f1^(0+128)
 10807  1599  30B4               	movlw	180
 10808  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10809  159B  3043               	movlw	67
 10810  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10811  159D  0022               	movlb	2	; select bank2
 10812  159E  0831               	movf	modSaw@inflection^(0+256),w
 10813  159F  0021               	movlb	1	; select bank1
 10814  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 10815  15A1  0022               	movlb	2	; select bank2
 10816  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10817  15A3  0021               	movlb	1	; select bank1
 10818  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10819  15A5  0022               	movlb	2	; select bank2
 10820  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10821  15A7  0021               	movlb	1	; select bank1
 10822  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10823  15A9  31AF  2779  3194   	fcall	___ftneg
 10824  15AC  0021               	movlb	1	; select bank1
 10825  15AD  083E               	movf	?___ftneg^(0+128),w
 10826  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 10827  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 10828  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10829  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 10830  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10831  15B3  3192  225B  3194   	fcall	___ftadd
 10832  15B6  0021               	movlb	1	; select bank1
 10833  15B7  0841               	movf	?___ftadd^(0+128),w
 10834  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 10835  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 10836  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10837  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 10838  15BC                     L9:	
 10839  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10840  15BD  3000               	movlw	0
 10841  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 10842  15BF  3034               	movlw	52
 10843  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10844  15C1  3043               	movlw	67
 10845  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10846  15C3  319D  253D  3194   	fcall	___ftdiv
 10847  15C6  0021               	movlb	1	; select bank1
 10848  15C7  084E               	movf	?___ftdiv^(0+128),w
 10849  15C8  0022               	movlb	2	; select bank2
 10850  15C9  00C2               	movwf	modSaw@period^(0+256)
 10851  15CA  0021               	movlb	1	; select bank1
 10852  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10853  15CC  0022               	movlb	2	; select bank2
 10854  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 10855  15CE  0021               	movlb	1	; select bank1
 10856  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10857  15D0  0022               	movlb	2	; select bank2
 10858  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 10859                           
 10860                           ;modulation.c: 104: }
 10861                           ;modulation.c: 107: int mod = (int)((period*angle-shift)*5/9);
 10862  15D2  0842               	movf	modSaw@period^(0+256),w
 10863  15D3  0021               	movlb	1	; select bank1
 10864  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 10865  15D5  0022               	movlb	2	; select bank2
 10866  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 10867  15D7  0021               	movlb	1	; select bank1
 10868  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10869  15D9  0022               	movlb	2	; select bank2
 10870  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 10871  15DB  0021               	movlb	1	; select bank1
 10872  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10873  15DD  0022               	movlb	2	; select bank2
 10874  15DE  082E               	movf	modSaw@angle^(0+256),w
 10875  15DF  0021               	movlb	1	; select bank1
 10876  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 10877  15E1  0022               	movlb	2	; select bank2
 10878  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 10879  15E3  0021               	movlb	1	; select bank1
 10880  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10881  15E5  0022               	movlb	2	; select bank2
 10882  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 10883  15E7  0021               	movlb	1	; select bank1
 10884  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10885  15E9  319E  2691  3194   	fcall	___ftmul
 10886  15EC  0021               	movlb	1	; select bank1
 10887  15ED  082E               	movf	?___ftmul^(0+128),w
 10888  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 10889  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 10890  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10891  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 10892  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10893  15F3  0022               	movlb	2	; select bank2
 10894  15F4  083F               	movf	modSaw@shift^(0+256),w
 10895  15F5  0021               	movlb	1	; select bank1
 10896  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 10897  15F7  0022               	movlb	2	; select bank2
 10898  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 10899  15F9  0021               	movlb	1	; select bank1
 10900  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10901  15FB  0022               	movlb	2	; select bank2
 10902  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 10903  15FD  0021               	movlb	1	; select bank1
 10904  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10905  15FF  31AF  2779  3194   	fcall	___ftneg
 10906  1602  0021               	movlb	1	; select bank1
 10907  1603  083E               	movf	?___ftneg^(0+128),w
 10908  1604  00C1               	movwf	___ftadd@f1^(0+128)
 10909  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 10910  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10911  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 10912  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10913  1609  3192  225B  3194   	fcall	___ftadd
 10914  160C  0021               	movlb	1	; select bank1
 10915  160D  0841               	movf	?___ftadd^(0+128),w
 10916  160E  0022               	movlb	2	; select bank2
 10917  160F  00BA               	movwf	_modSaw$2823^(0+256)
 10918  1610  0021               	movlb	1	; select bank1
 10919  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 10920  1612  0022               	movlb	2	; select bank2
 10921  1613  00BB               	movwf	(_modSaw$2823+1)^(0+256)
 10922  1614  0021               	movlb	1	; select bank1
 10923  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 10924  1616  0022               	movlb	2	; select bank2
 10925  1617  00BC               	movwf	(_modSaw$2823+2)^(0+256)
 10926                           
 10927                           ;modulation.c: 104: }
 10928                           ;modulation.c: 107: int mod = (int)((period*angle-shift)*5/9);
 10929  1618  083A               	movf	_modSaw$2823^(0+256),w
 10930  1619  0021               	movlb	1	; select bank1
 10931  161A  00B1               	movwf	___ftmul@f2^(0+128)
 10932  161B  0022               	movlb	2	; select bank2
 10933  161C  083B               	movf	(_modSaw$2823+1)^(0+256),w
 10934  161D  0021               	movlb	1	; select bank1
 10935  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10936  161F  0022               	movlb	2	; select bank2
 10937  1620  083C               	movf	(_modSaw$2823+2)^(0+256),w
 10938  1621  0021               	movlb	1	; select bank1
 10939  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10940  1623  3000               	movlw	0
 10941  1624  00AE               	movwf	___ftmul@f1^(0+128)
 10942  1625  30A0               	movlw	160
 10943  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10944  1627  3040               	movlw	64
 10945  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10946  1629  319E  2691  3194   	fcall	___ftmul
 10947  162C  0021               	movlb	1	; select bank1
 10948  162D  082E               	movf	?___ftmul^(0+128),w
 10949  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 10950  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 10951  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10952  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 10953  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10954  1633  3000               	movlw	0
 10955  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 10956  1635  3010               	movlw	16
 10957  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10958  1637  3041               	movlw	65
 10959  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10960  1639  319D  253D  3194   	fcall	___ftdiv
 10961  163C  0021               	movlb	1	; select bank1
 10962  163D  084E               	movf	?___ftdiv^(0+128),w
 10963  163E  0022               	movlb	2	; select bank2
 10964  163F  00A0               	movwf	___fttol@f1^(0+256)
 10965  1640  0021               	movlb	1	; select bank1
 10966  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 10967  1642  0022               	movlb	2	; select bank2
 10968  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10969  1644  0021               	movlb	1	; select bank1
 10970  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 10971  1646  0022               	movlb	2	; select bank2
 10972  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10973  1648  319A  226C         	fcall	___fttol
 10974  164A  0022               	movlb	2	; select bank2
 10975  164B  0821               	movf	(?___fttol^(0+256)+1),w
 10976  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 10977  164D  0820               	movf	?___fttol^(0+256),w
 10978  164E  00BD               	movwf	modSaw@mod^(0+256)
 10979                           
 10980                           ;modulation.c: 108: return mod;
 10981  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 10982  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 10983  1651  083D               	movf	modSaw@mod^(0+256),w
 10984  1652  00AE               	movwf	?_modSaw^(0+256)
 10985  1653  0008               	return
 10986  1654                     __end_of_modSaw:	
 10987                           
 10988                           	psect	text22
 10989  1F45                     __ptext22:	
 10990 ;; *************** function _set_subdivision *****************
 10991 ;; Defined at:
 10992 ;;		line 77 in file "user.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  x               2   31[BANK2 ] int 
 10995 ;;  y               2   33[BANK2 ] int 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  scalar          3   38[BANK2 ] float 
 10998 ;;  tmpX            2   41[BANK2 ] int 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  2   31[BANK2 ] int 
 11001 ;; Registers used:
 11002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11008 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11009 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11010 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11011 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11012 ;;Total ram usage:       12 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    6
 11015 ;; This function calls:
 11016 ;;		___awtoft
 11017 ;;		___ftmul
 11018 ;;		___fttol
 11019 ;;		_trunc
 11020 ;; This function is called by:
 11021 ;;		_main
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           
 11026                           ;psect for function _set_subdivision
 11027  1F45                     _set_subdivision:	
 11028                           
 11029                           ;user.c: 81: adjust_sub_delay = 0;
 11030                           
 11031                           ;incstack = 0
 11032                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11033  1F45  0023               	movlb	3	; select bank3
 11034  1F46  01BC               	clrf	_adjust_sub_delay^(0+384)
 11035                           
 11036                           ;user.c: 82: int tmpX = x;
 11037  1F47  0022               	movlb	2	; select bank2
 11038  1F48  0840               	movf	(set_subdivision@x+1)^(0+256),w
 11039  1F49  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11040  1F4A  083F               	movf	set_subdivision@x^(0+256),w
 11041  1F4B  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11042                           
 11043                           ;user.c: 83: float scalar = 1.0;
 11044  1F4C  3000               	movlw	0
 11045  1F4D  00C6               	movwf	set_subdivision@scalar^(0+256)
 11046  1F4E  3080               	movlw	128
 11047  1F4F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11048  1F50  303F               	movlw	63
 11049  1F51  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11050                           
 11051                           ;user.c: 85: switch (y) {
 11052  1F52  2F6E               	goto	l8822
 11053  1F53                     l8810:	
 11054                           ;user.c: 86: case 1:
 11055                           
 11056                           
 11057                           ;user.c: 87: scalar = 2.0;
 11058  1F53  3000               	movlw	0
 11059  1F54  00C6               	movwf	set_subdivision@scalar^(0+256)
 11060  1F55  3000               	movlw	0
 11061  1F56  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11062  1F57  3040               	movlw	64
 11063  1F58  2F6C               	goto	L13
 11064  1F59                     l8812:	
 11065                           ;user.c: 89: case 2:
 11066                           
 11067                           ;user.c: 88: break;
 11068                           
 11069                           
 11070                           ;user.c: 90: scalar = 0.6666;
 11071  1F59  30A6               	movlw	166
 11072  1F5A  00C6               	movwf	set_subdivision@scalar^(0+256)
 11073  1F5B  302A               	movlw	42
 11074  1F5C  2F60               	goto	L15
 11075  1F5D                     l8814:	
 11076                           ;user.c: 92: case 3:
 11077                           
 11078                           ;user.c: 91: break;
 11079                           
 11080                           
 11081                           ;user.c: 93: scalar = .5;
 11082  1F5D  3000               	movlw	0
 11083  1F5E  00C6               	movwf	set_subdivision@scalar^(0+256)
 11084  1F5F  3000               	movlw	0
 11085  1F60                     L15:	
 11086  1F60  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11087  1F61  303F               	movlw	63
 11088  1F62  2F6C               	goto	L13
 11089  1F63                     l8816:	
 11090                           ;user.c: 95: case 4:
 11091                           
 11092                           ;user.c: 94: break;
 11093                           
 11094                           
 11095                           ;user.c: 96: scalar = 0.3333;
 11096  1F63  30A6               	movlw	166
 11097  1F64  00C6               	movwf	set_subdivision@scalar^(0+256)
 11098  1F65  30AA               	movlw	170
 11099  1F66  2F6A               	goto	L14
 11100  1F67                     l8818:	
 11101                           ;user.c: 98: case 5:
 11102                           
 11103                           ;user.c: 97: break;
 11104                           
 11105                           
 11106                           ;user.c: 99: scalar = 0.25;
 11107  1F67  3000               	movlw	0
 11108  1F68  00C6               	movwf	set_subdivision@scalar^(0+256)
 11109  1F69  3080               	movlw	128
 11110  1F6A                     L14:	
 11111  1F6A  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11112  1F6B  303E               	movlw	62
 11113  1F6C                     L13:	
 11114  1F6C  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11115                           
 11116                           ;user.c: 104: }
 11117                           
 11118                           ;user.c: 103: break;
 11119                           
 11120                           ;user.c: 101: case 6:
 11121                           
 11122                           ;user.c: 100: break;
 11123  1F6D  2F87               	goto	l8824
 11124  1F6E                     l8822:	
 11125                           
 11126                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11127                           ; Switch size 1, requested type "space"
 11128                           ; Number of cases is 1, Range of values is 0 to 0
 11129                           ; switch strategies available:
 11130                           ; Name         Instructions Cycles
 11131                           ; simple_byte            4     3 (average)
 11132                           ; direct_byte            8     6 (fixed)
 11133                           ; jumptable            260     6 (fixed)
 11134                           ;	Chosen strategy is simple_byte
 11135  1F6E  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11136  1F6F  3A00               	xorlw	0	; case 0
 11137  1F70  1903               	skipnz
 11138  1F71  2F73               	goto	l9342
 11139  1F72  2F87               	goto	l8824
 11140  1F73                     l9342:	
 11141                           
 11142                           ; Switch size 1, requested type "space"
 11143                           ; Number of cases is 6, Range of values is 1 to 6
 11144                           ; switch strategies available:
 11145                           ; Name         Instructions Cycles
 11146                           ; simple_byte           19    10 (average)
 11147                           ; direct_byte           21     9 (fixed)
 11148                           ; jumptable            263     9 (fixed)
 11149                           ;	Chosen strategy is simple_byte
 11150  1F73  0841               	movf	set_subdivision@y^(0+256),w
 11151  1F74  3A01               	xorlw	1	; case 1
 11152  1F75  1903               	skipnz
 11153  1F76  2F53               	goto	l8810
 11154  1F77  3A03               	xorlw	3	; case 2
 11155  1F78  1903               	skipnz
 11156  1F79  2F59               	goto	l8812
 11157  1F7A  3A01               	xorlw	1	; case 3
 11158  1F7B  1903               	skipnz
 11159  1F7C  2F5D               	goto	l8814
 11160  1F7D  3A07               	xorlw	7	; case 4
 11161  1F7E  1903               	skipnz
 11162  1F7F  2F63               	goto	l8816
 11163  1F80  3A01               	xorlw	1	; case 5
 11164  1F81  1903               	skipnz
 11165  1F82  2F67               	goto	l8818
 11166  1F83  3A03               	xorlw	3	; case 6
 11167  1F84  1903               	skipnz
 11168  1F85  2F87               	goto	l8824
 11169  1F86  2F87               	goto	l8824
 11170  1F87                     l8824:	
 11171                           
 11172                           ;user.c: 106: tmpX = tmpX * scalar;
 11173  1F87  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11174  1F88  0021               	movlb	1	; select bank1
 11175  1F89  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11176  1F8A  0022               	movlb	2	; select bank2
 11177  1F8B  0849               	movf	set_subdivision@tmpX^(0+256),w
 11178  1F8C  0021               	movlb	1	; select bank1
 11179  1F8D  00A8               	movwf	___awtoft@c^(0+128)
 11180  1F8E  31A0  20AE  319F   	fcall	___awtoft
 11181  1F91  0021               	movlb	1	; select bank1
 11182  1F92  0828               	movf	?___awtoft^(0+128),w
 11183  1F93  00B1               	movwf	___ftmul@f2^(0+128)
 11184  1F94  0829               	movf	(?___awtoft+1)^(0+128),w
 11185  1F95  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11186  1F96  082A               	movf	(?___awtoft+2)^(0+128),w
 11187  1F97  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11188  1F98  0022               	movlb	2	; select bank2
 11189  1F99  0846               	movf	set_subdivision@scalar^(0+256),w
 11190  1F9A  0021               	movlb	1	; select bank1
 11191  1F9B  00AE               	movwf	___ftmul@f1^(0+128)
 11192  1F9C  0022               	movlb	2	; select bank2
 11193  1F9D  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11194  1F9E  0021               	movlb	1	; select bank1
 11195  1F9F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11196  1FA0  0022               	movlb	2	; select bank2
 11197  1FA1  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11198  1FA2  0021               	movlb	1	; select bank1
 11199  1FA3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11200  1FA4  319E  2691  319F   	fcall	___ftmul
 11201  1FA7  0021               	movlb	1	; select bank1
 11202  1FA8  082E               	movf	?___ftmul^(0+128),w
 11203  1FA9  0022               	movlb	2	; select bank2
 11204  1FAA  00A0               	movwf	___fttol@f1^(0+256)
 11205  1FAB  0021               	movlb	1	; select bank1
 11206  1FAC  082F               	movf	(?___ftmul+1)^(0+128),w
 11207  1FAD  0022               	movlb	2	; select bank2
 11208  1FAE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11209  1FAF  0021               	movlb	1	; select bank1
 11210  1FB0  0830               	movf	(?___ftmul+2)^(0+128),w
 11211  1FB1  0022               	movlb	2	; select bank2
 11212  1FB2  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11213  1FB3  319A  226C  319F   	fcall	___fttol
 11214  1FB6  0022               	movlb	2	; select bank2
 11215  1FB7  0821               	movf	(?___fttol^(0+256)+1),w
 11216  1FB8  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11217  1FB9  0820               	movf	?___fttol^(0+256),w
 11218  1FBA  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11219                           
 11220                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11221  1FBB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11222  1FBC  0021               	movlb	1	; select bank1
 11223  1FBD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11224  1FBE  0022               	movlb	2	; select bank2
 11225  1FBF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11226  1FC0  0021               	movlb	1	; select bank1
 11227  1FC1  00A8               	movwf	___awtoft@c^(0+128)
 11228  1FC2  31A0  20AE  319F   	fcall	___awtoft
 11229  1FC5  0021               	movlb	1	; select bank1
 11230  1FC6  0828               	movf	?___awtoft^(0+128),w
 11231  1FC7  0022               	movlb	2	; select bank2
 11232  1FC8  00B6               	movwf	trunc@x^(0+256)
 11233  1FC9  0021               	movlb	1	; select bank1
 11234  1FCA  0829               	movf	(?___awtoft+1)^(0+128),w
 11235  1FCB  0022               	movlb	2	; select bank2
 11236  1FCC  00B7               	movwf	(trunc@x+1)^(0+256)
 11237  1FCD  0021               	movlb	1	; select bank1
 11238  1FCE  082A               	movf	(?___awtoft+2)^(0+128),w
 11239  1FCF  0022               	movlb	2	; select bank2
 11240  1FD0  00B8               	movwf	(trunc@x+2)^(0+256)
 11241  1FD1  31A5  2524  319F   	fcall	_trunc
 11242  1FD4  0022               	movlb	2	; select bank2
 11243  1FD5  0836               	movf	?_trunc^(0+256),w
 11244  1FD6  00C3               	movwf	??_set_subdivision^(0+256)
 11245  1FD7  0837               	movf	(?_trunc+1)^(0+256),w
 11246  1FD8  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11247  1FD9  0838               	movf	(?_trunc+2)^(0+256),w
 11248  1FDA  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11249  1FDB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11250  1FDC  0021               	movlb	1	; select bank1
 11251  1FDD  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11252  1FDE  0022               	movlb	2	; select bank2
 11253  1FDF  0849               	movf	set_subdivision@tmpX^(0+256),w
 11254  1FE0  0021               	movlb	1	; select bank1
 11255  1FE1  00A8               	movwf	___awtoft@c^(0+128)
 11256  1FE2  31A0  20AE  319F   	fcall	___awtoft
 11257  1FE5  0021               	movlb	1	; select bank1
 11258  1FE6  082A               	movf	(?___awtoft+2)^(0+128),w
 11259  1FE7  0022               	movlb	2	; select bank2
 11260  1FE8  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11261  1FE9  1D03               	skipz
 11262  1FEA  2FF5               	goto	u9695
 11263  1FEB  0021               	movlb	1	; select bank1
 11264  1FEC  0829               	movf	(?___awtoft+1)^(0+128),w
 11265  1FED  0022               	movlb	2	; select bank2
 11266  1FEE  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11267  1FEF  1D03               	skipz
 11268  1FF0  2FF5               	goto	u9695
 11269  1FF1  0021               	movlb	1	; select bank1
 11270  1FF2  0828               	movf	?___awtoft^(0+128),w
 11271  1FF3  0022               	movlb	2	; select bank2
 11272  1FF4  0643               	xorwf	??_set_subdivision^(0+256),w
 11273  1FF5                     u9695:	
 11274  1FF5  1903               	skipnz
 11275  1FF6  2FFA               	goto	l8830
 11276                           
 11277                           ;user.c: 109: adjust_sub_delay = 1;
 11278  1FF7  0023               	movlb	3	; select bank3
 11279  1FF8  01BC               	clrf	_adjust_sub_delay^(0+384)
 11280  1FF9  0ABC               	incf	_adjust_sub_delay^(0+384),f
 11281  1FFA                     l8830:	
 11282                           
 11283                           ;user.c: 110: }
 11284                           ;user.c: 112: return tmpX;
 11285  1FFA  0022               	movlb	2	; select bank2
 11286  1FFB  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11287  1FFC  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11288  1FFD  0849               	movf	set_subdivision@tmpX^(0+256),w
 11289  1FFE  00BF               	movwf	?_set_subdivision^(0+256)
 11290  1FFF  0008               	return
 11291  2000                     __end_of_set_subdivision:	
 11292                           
 11293                           	psect	text23
 11294  2524                     __ptext23:	
 11295 ;; *************** function _trunc *****************
 11296 ;; Defined at:
 11297 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;  x               3   22[BANK2 ] int 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  i               3   26[BANK2 ] int 
 11302 ;;  expon           2   29[BANK2 ] int 
 11303 ;; Return value:  Size  Location     Type
 11304 ;;                  3   22[BANK2 ] int 
 11305 ;; Registers used:
 11306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11307 ;; Tracked objects:
 11308 ;;		On entry : 0/0
 11309 ;;		On exit  : 0/0
 11310 ;;		Unchanged: 0/0
 11311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11312 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11313 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11314 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11315 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11316 ;;Total ram usage:        9 bytes
 11317 ;; Hardware stack levels used:    1
 11318 ;; Hardware stack levels required when called:    5
 11319 ;; This function calls:
 11320 ;;		___altoft
 11321 ;;		___fttol
 11322 ;;		_frexp
 11323 ;; This function is called by:
 11324 ;;		_set_subdivision
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           
 11329                           ;psect for function _trunc
 11330  2524                     _trunc:	
 11331                           
 11332                           ;incstack = 0
 11333                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11334  2524  0022               	movlb	2	; select bank2
 11335  2525  0836               	movf	trunc@x^(0+256),w
 11336  2526  0021               	movlb	1	; select bank1
 11337  2527  00A0               	movwf	frexp@value^(0+128)
 11338  2528  0022               	movlb	2	; select bank2
 11339  2529  0837               	movf	(trunc@x+1)^(0+256),w
 11340  252A  0021               	movlb	1	; select bank1
 11341  252B  00A1               	movwf	(frexp@value+1)^(0+128)
 11342  252C  0022               	movlb	2	; select bank2
 11343  252D  0838               	movf	(trunc@x+2)^(0+256),w
 11344  252E  0021               	movlb	1	; select bank1
 11345  252F  00A2               	movwf	(frexp@value+2)^(0+128)
 11346  2530  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11347  2531  0022               	movlb	2	; select bank2
 11348  2532  00B9               	movwf	??_trunc^(0+256)
 11349  2533  0839               	movf	??_trunc^(0+256),w
 11350  2534  0021               	movlb	1	; select bank1
 11351  2535  00A3               	movwf	frexp@eptr^(0+128)
 11352  2536  31A3  2397  31A5   	fcall	_frexp
 11353  2539  0022               	movlb	2	; select bank2
 11354  253A  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11355  253B  2D43               	goto	l8056
 11356  253C  3000               	movlw	0
 11357  253D  00B6               	movwf	?_trunc^(0+256)
 11358  253E  3000               	movlw	0
 11359  253F  00B7               	movwf	(?_trunc+1)^(0+256)
 11360  2540  3000               	movlw	0
 11361  2541  00B8               	movwf	(?_trunc+2)^(0+256)
 11362  2542  0008               	return
 11363  2543                     l8056:	
 11364  2543  3000               	movlw	0
 11365  2544  023E               	subwf	(trunc@expon+1)^(0+256),w
 11366  2545  3015               	movlw	21
 11367  2546  1903               	skipnz
 11368  2547  023D               	subwf	trunc@expon^(0+256),w
 11369  2548  1803               	btfsc	3,0
 11370  2549  0008               	return
 11371  254A  0836               	movf	trunc@x^(0+256),w
 11372  254B  00A0               	movwf	___fttol@f1^(0+256)
 11373  254C  0837               	movf	(trunc@x+1)^(0+256),w
 11374  254D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11375  254E  0838               	movf	(trunc@x+2)^(0+256),w
 11376  254F  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11377  2550  319A  226C  31A5   	fcall	___fttol
 11378  2553  0022               	movlb	2	; select bank2
 11379  2554  0823               	movf	(?___fttol+3)^(0+256),w
 11380  2555  00B1               	movwf	(___altoft@c+3)^(0+256)
 11381  2556  0822               	movf	(?___fttol+2)^(0+256),w
 11382  2557  00B0               	movwf	(___altoft@c+2)^(0+256)
 11383  2558  0821               	movf	(?___fttol+1)^(0+256),w
 11384  2559  00AF               	movwf	(___altoft@c+1)^(0+256)
 11385  255A  0820               	movf	?___fttol^(0+256),w
 11386  255B  00AE               	movwf	___altoft@c^(0+256)
 11387  255C  31A6  2600         	fcall	___altoft
 11388  255E  0022               	movlb	2	; select bank2
 11389  255F  082E               	movf	?___altoft^(0+256),w
 11390  2560  00BA               	movwf	trunc@i^(0+256)
 11391  2561  082F               	movf	(?___altoft+1)^(0+256),w
 11392  2562  00BB               	movwf	(trunc@i+1)^(0+256)
 11393  2563  0830               	movf	(?___altoft+2)^(0+256),w
 11394  2564  00BC               	movwf	(trunc@i+2)^(0+256)
 11395  2565  083A               	movf	trunc@i^(0+256),w
 11396  2566  00B6               	movwf	?_trunc^(0+256)
 11397  2567  083B               	movf	(trunc@i+1)^(0+256),w
 11398  2568  00B7               	movwf	(?_trunc+1)^(0+256)
 11399  2569  083C               	movf	(trunc@i+2)^(0+256),w
 11400  256A  00B8               	movwf	(?_trunc+2)^(0+256)
 11401  256B  0008               	return
 11402  256C                     __end_of_trunc:	
 11403                           
 11404                           	psect	text24
 11405  1DE6                     __ptext24:	
 11406 ;; *************** function _scaleiA10kPot *****************
 11407 ;; Defined at:
 11408 ;;		line 211 in file "user.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;  input           3   71[BANK2 ] int 
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;  pwm             3    0[BANK3 ] float 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  2   71[BANK2 ] int 
 11415 ;; Registers used:
 11416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11422 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11423 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11425 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11426 ;;Total ram usage:       12 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    8
 11429 ;; This function calls:
 11430 ;;		___ftadd
 11431 ;;		___ftdiv
 11432 ;;		___ftmul
 11433 ;;		___ftneg
 11434 ;;		___fttol
 11435 ;;		_pow
 11436 ;; This function is called by:
 11437 ;;		_main
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           
 11442                           ;psect for function _scaleiA10kPot
 11443  1DE6                     _scaleiA10kPot:	
 11444                           
 11445                           ;user.c: 214: if (input == 0.0) {return 0;}
 11446                           
 11447                           ;incstack = 0
 11448                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11449  1DE6  0022               	movlb	2	; select bank2
 11450  1DE7  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11451  1DE8  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11452  1DE9  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11453  1DEA  1D03               	skipz
 11454  1DEB  2DEF               	goto	l8770
 11455  1DEC  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11456  1DED  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11457  1DEE  0008               	return
 11458  1DEF                     l8770:	
 11459                           
 11460                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11461  1DEF  30C0               	movlw	192
 11462  1DF0  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11463  1DF1  307F               	movlw	127
 11464  1DF2  1903               	skipnz
 11465  1DF3  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11466  1DF4  3044               	movlw	68
 11467  1DF5  1903               	skipnz
 11468  1DF6  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11469  1DF7  1D03               	btfss	3,2
 11470  1DF8  2DFE               	goto	l8776
 11471  1DF9  30FF               	movlw	255
 11472  1DFA  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11473  1DFB  3000               	movlw	0
 11474  1DFC  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11475  1DFD  0008               	return
 11476  1DFE                     l8776:	
 11477                           
 11478                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11479  1DFE  3000               	movlw	0
 11480  1DFF  0021               	movlb	1	; select bank1
 11481  1E00  00C1               	movwf	___ftadd@f1^(0+128)
 11482  1E01  3080               	movlw	128
 11483  1E02  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11484  1E03  303F               	movlw	63
 11485  1E04  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11486  1E05  0022               	movlb	2	; select bank2
 11487  1E06  0867               	movf	scaleiA10kPot@input^(0+256),w
 11488  1E07  0021               	movlb	1	; select bank1
 11489  1E08  00D1               	movwf	___ftdiv@f1^(0+128)
 11490  1E09  0022               	movlb	2	; select bank2
 11491  1E0A  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11492  1E0B  0021               	movlb	1	; select bank1
 11493  1E0C  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11494  1E0D  0022               	movlb	2	; select bank2
 11495  1E0E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11496  1E0F  0021               	movlb	1	; select bank1
 11497  1E10  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11498  1E11  30C0               	movlw	192
 11499  1E12  00CE               	movwf	___ftdiv@f2^(0+128)
 11500  1E13  307F               	movlw	127
 11501  1E14  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11502  1E15  3044               	movlw	68
 11503  1E16  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11504  1E17  319D  253D  319D   	fcall	___ftdiv
 11505  1E1A  0021               	movlb	1	; select bank1
 11506  1E1B  084E               	movf	?___ftdiv^(0+128),w
 11507  1E1C  00BE               	movwf	___ftneg@f1^(0+128)
 11508  1E1D  084F               	movf	(?___ftdiv+1)^(0+128),w
 11509  1E1E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11510  1E1F  0850               	movf	(?___ftdiv+2)^(0+128),w
 11511  1E20  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11512  1E21  31AF  2779  319D   	fcall	___ftneg
 11513  1E24  0021               	movlb	1	; select bank1
 11514  1E25  083E               	movf	?___ftneg^(0+128),w
 11515  1E26  00C4               	movwf	___ftadd@f2^(0+128)
 11516  1E27  083F               	movf	(?___ftneg+1)^(0+128),w
 11517  1E28  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11518  1E29  0840               	movf	(?___ftneg+2)^(0+128),w
 11519  1E2A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11520  1E2B  3192  225B  319D   	fcall	___ftadd
 11521  1E2E  0021               	movlb	1	; select bank1
 11522  1E2F  0841               	movf	?___ftadd^(0+128),w
 11523  1E30  0023               	movlb	3	; select bank3
 11524  1E31  00E4               	movwf	_scaleiA10kPot$2817^(0+384)
 11525  1E32  0021               	movlb	1	; select bank1
 11526  1E33  0842               	movf	(?___ftadd+1)^(0+128),w
 11527  1E34  0023               	movlb	3	; select bank3
 11528  1E35  00E5               	movwf	(_scaleiA10kPot$2817+1)^(0+384)
 11529  1E36  0021               	movlb	1	; select bank1
 11530  1E37  0843               	movf	(?___ftadd+2)^(0+128),w
 11531  1E38  0023               	movlb	3	; select bank3
 11532  1E39  00E6               	movwf	(_scaleiA10kPot$2817+2)^(0+384)
 11533                           
 11534                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11535  1E3A  306A               	movlw	106
 11536  1E3B  0022               	movlb	2	; select bank2
 11537  1E3C  00D8               	movwf	pow@y^(0+256)
 11538  1E3D  309C               	movlw	156
 11539  1E3E  00D9               	movwf	(pow@y+1)^(0+256)
 11540  1E3F  30BF               	movlw	191
 11541  1E40  00DA               	movwf	(pow@y+2)^(0+256)
 11542  1E41  0023               	movlb	3	; select bank3
 11543  1E42  0864               	movf	_scaleiA10kPot$2817^(0+384),w
 11544  1E43  0022               	movlb	2	; select bank2
 11545  1E44  00D5               	movwf	pow@x^(0+256)
 11546  1E45  0023               	movlb	3	; select bank3
 11547  1E46  0865               	movf	(_scaleiA10kPot$2817+1)^(0+384),w
 11548  1E47  0022               	movlb	2	; select bank2
 11549  1E48  00D6               	movwf	(pow@x+1)^(0+256)
 11550  1E49  0023               	movlb	3	; select bank3
 11551  1E4A  0866               	movf	(_scaleiA10kPot$2817+2)^(0+384),w
 11552  1E4B  0022               	movlb	2	; select bank2
 11553  1E4C  00D7               	movwf	(pow@x+2)^(0+256)
 11554  1E4D  3186  26DE  319D   	fcall	_pow
 11555  1E50  0022               	movlb	2	; select bank2
 11556  1E51  0855               	movf	?_pow^(0+256),w
 11557  1E52  0023               	movlb	3	; select bank3
 11558  1E53  00E7               	movwf	_scaleiA10kPot$2818^(0+384)
 11559  1E54  0022               	movlb	2	; select bank2
 11560  1E55  0856               	movf	(?_pow+1)^(0+256),w
 11561  1E56  0023               	movlb	3	; select bank3
 11562  1E57  00E8               	movwf	(_scaleiA10kPot$2818+1)^(0+384)
 11563  1E58  0022               	movlb	2	; select bank2
 11564  1E59  0857               	movf	(?_pow+2)^(0+256),w
 11565  1E5A  0023               	movlb	3	; select bank3
 11566  1E5B  00E9               	movwf	(_scaleiA10kPot$2818+2)^(0+384)
 11567                           
 11568                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11569  1E5C  30E3               	movlw	227
 11570  1E5D  0021               	movlb	1	; select bank1
 11571  1E5E  00AE               	movwf	___ftmul@f1^(0+128)
 11572  1E5F  300B               	movlw	11
 11573  1E60  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11574  1E61  3041               	movlw	65
 11575  1E62  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11576  1E63  0023               	movlb	3	; select bank3
 11577  1E64  0867               	movf	_scaleiA10kPot$2818^(0+384),w
 11578  1E65  0021               	movlb	1	; select bank1
 11579  1E66  00B1               	movwf	___ftmul@f2^(0+128)
 11580  1E67  0023               	movlb	3	; select bank3
 11581  1E68  0868               	movf	(_scaleiA10kPot$2818+1)^(0+384),w
 11582  1E69  0021               	movlb	1	; select bank1
 11583  1E6A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11584  1E6B  0023               	movlb	3	; select bank3
 11585  1E6C  0869               	movf	(_scaleiA10kPot$2818+2)^(0+384),w
 11586  1E6D  0021               	movlb	1	; select bank1
 11587  1E6E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11588  1E6F  319E  2691  319D   	fcall	___ftmul
 11589  1E72  0021               	movlb	1	; select bank1
 11590  1E73  082E               	movf	?___ftmul^(0+128),w
 11591  1E74  0023               	movlb	3	; select bank3
 11592  1E75  00E1               	movwf	scaleiA10kPot@pwm^(0+384)
 11593  1E76  0021               	movlb	1	; select bank1
 11594  1E77  082F               	movf	(?___ftmul+1)^(0+128),w
 11595  1E78  0023               	movlb	3	; select bank3
 11596  1E79  00E2               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11597  1E7A  0021               	movlb	1	; select bank1
 11598  1E7B  0830               	movf	(?___ftmul+2)^(0+128),w
 11599  1E7C  0023               	movlb	3	; select bank3
 11600  1E7D  00E3               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11601                           
 11602                           ;user.c: 219: return (int)(pwm);
 11603  1E7E  0861               	movf	scaleiA10kPot@pwm^(0+384),w
 11604  1E7F  0022               	movlb	2	; select bank2
 11605  1E80  00A0               	movwf	___fttol@f1^(0+256)
 11606  1E81  0023               	movlb	3	; select bank3
 11607  1E82  0862               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11608  1E83  0022               	movlb	2	; select bank2
 11609  1E84  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11610  1E85  0023               	movlb	3	; select bank3
 11611  1E86  0863               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11612  1E87  0022               	movlb	2	; select bank2
 11613  1E88  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11614  1E89  319A  226C         	fcall	___fttol
 11615  1E8B  0022               	movlb	2	; select bank2
 11616  1E8C  0821               	movf	(?___fttol^(0+256)+1),w
 11617  1E8D  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11618  1E8E  0820               	movf	?___fttol^(0+256),w
 11619  1E8F  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11620  1E90  0008               	return
 11621  1E91                     __end_of_scaleiA10kPot:	
 11622                           
 11623                           	psect	text25
 11624  1C05                     __ptext25:	
 11625 ;; *************** function _scaleA10kPot *****************
 11626 ;; Defined at:
 11627 ;;		line 202 in file "user.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  input           3   71[BANK2 ] int 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  pwm             3    0[BANK3 ] float 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  2   71[BANK2 ] int 
 11634 ;; Registers used:
 11635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11641 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11642 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11644 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11645 ;;Total ram usage:       12 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    8
 11648 ;; This function calls:
 11649 ;;		___ftdiv
 11650 ;;		___ftmul
 11651 ;;		___fttol
 11652 ;;		_pow
 11653 ;; This function is called by:
 11654 ;;		_main
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           
 11659                           ;psect for function _scaleA10kPot
 11660  1C05                     _scaleA10kPot:	
 11661                           
 11662                           ;user.c: 204: if (input == 0.0) {return 255;}
 11663                           
 11664                           ;incstack = 0
 11665                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11666  1C05  0022               	movlb	2	; select bank2
 11667  1C06  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11668  1C07  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11669  1C08  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11670  1C09  1D03               	skipz
 11671  1C0A  2C10               	goto	l8748
 11672  1C0B  30FF               	movlw	255
 11673  1C0C  00E7               	movwf	?_scaleA10kPot^(0+256)
 11674  1C0D  3000               	movlw	0
 11675  1C0E  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11676  1C0F  0008               	return
 11677  1C10                     l8748:	
 11678                           
 11679                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11680  1C10  30C0               	movlw	192
 11681  1C11  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11682  1C12  307F               	movlw	127
 11683  1C13  1903               	skipnz
 11684  1C14  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11685  1C15  3044               	movlw	68
 11686  1C16  1903               	skipnz
 11687  1C17  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11688  1C18  1D03               	btfss	3,2
 11689  1C19  2C1D               	goto	l8754
 11690  1C1A  01E7               	clrf	?_scaleA10kPot^(0+256)
 11691  1C1B  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11692  1C1C  0008               	return
 11693  1C1D                     l8754:	
 11694                           
 11695                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11696  1C1D  30C0               	movlw	192
 11697  1C1E  0021               	movlb	1	; select bank1
 11698  1C1F  00CE               	movwf	___ftdiv@f2^(0+128)
 11699  1C20  307F               	movlw	127
 11700  1C21  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11701  1C22  3044               	movlw	68
 11702  1C23  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11703  1C24  0022               	movlb	2	; select bank2
 11704  1C25  0867               	movf	scaleA10kPot@input^(0+256),w
 11705  1C26  0021               	movlb	1	; select bank1
 11706  1C27  00D1               	movwf	___ftdiv@f1^(0+128)
 11707  1C28  0022               	movlb	2	; select bank2
 11708  1C29  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 11709  1C2A  0021               	movlb	1	; select bank1
 11710  1C2B  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11711  1C2C  0022               	movlb	2	; select bank2
 11712  1C2D  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11713  1C2E  0021               	movlb	1	; select bank1
 11714  1C2F  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11715  1C30  319D  253D  319C   	fcall	___ftdiv
 11716  1C33  0021               	movlb	1	; select bank1
 11717  1C34  084E               	movf	?___ftdiv^(0+128),w
 11718  1C35  0023               	movlb	3	; select bank3
 11719  1C36  00E4               	movwf	_scaleA10kPot$2815^(0+384)
 11720  1C37  0021               	movlb	1	; select bank1
 11721  1C38  084F               	movf	(?___ftdiv+1)^(0+128),w
 11722  1C39  0023               	movlb	3	; select bank3
 11723  1C3A  00E5               	movwf	(_scaleA10kPot$2815+1)^(0+384)
 11724  1C3B  0021               	movlb	1	; select bank1
 11725  1C3C  0850               	movf	(?___ftdiv+2)^(0+128),w
 11726  1C3D  0023               	movlb	3	; select bank3
 11727  1C3E  00E6               	movwf	(_scaleA10kPot$2815+2)^(0+384)
 11728                           
 11729                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11730  1C3F  306A               	movlw	106
 11731  1C40  0022               	movlb	2	; select bank2
 11732  1C41  00D8               	movwf	pow@y^(0+256)
 11733  1C42  309C               	movlw	156
 11734  1C43  00D9               	movwf	(pow@y+1)^(0+256)
 11735  1C44  30BF               	movlw	191
 11736  1C45  00DA               	movwf	(pow@y+2)^(0+256)
 11737  1C46  0023               	movlb	3	; select bank3
 11738  1C47  0864               	movf	_scaleA10kPot$2815^(0+384),w
 11739  1C48  0022               	movlb	2	; select bank2
 11740  1C49  00D5               	movwf	pow@x^(0+256)
 11741  1C4A  0023               	movlb	3	; select bank3
 11742  1C4B  0865               	movf	(_scaleA10kPot$2815+1)^(0+384),w
 11743  1C4C  0022               	movlb	2	; select bank2
 11744  1C4D  00D6               	movwf	(pow@x+1)^(0+256)
 11745  1C4E  0023               	movlb	3	; select bank3
 11746  1C4F  0866               	movf	(_scaleA10kPot$2815+2)^(0+384),w
 11747  1C50  0022               	movlb	2	; select bank2
 11748  1C51  00D7               	movwf	(pow@x+2)^(0+256)
 11749  1C52  3186  26DE  319C   	fcall	_pow
 11750  1C55  0022               	movlb	2	; select bank2
 11751  1C56  0855               	movf	?_pow^(0+256),w
 11752  1C57  0023               	movlb	3	; select bank3
 11753  1C58  00E7               	movwf	_scaleA10kPot$2816^(0+384)
 11754  1C59  0022               	movlb	2	; select bank2
 11755  1C5A  0856               	movf	(?_pow+1)^(0+256),w
 11756  1C5B  0023               	movlb	3	; select bank3
 11757  1C5C  00E8               	movwf	(_scaleA10kPot$2816+1)^(0+384)
 11758  1C5D  0022               	movlb	2	; select bank2
 11759  1C5E  0857               	movf	(?_pow+2)^(0+256),w
 11760  1C5F  0023               	movlb	3	; select bank3
 11761  1C60  00E9               	movwf	(_scaleA10kPot$2816+2)^(0+384)
 11762                           
 11763                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11764  1C61  30E3               	movlw	227
 11765  1C62  0021               	movlb	1	; select bank1
 11766  1C63  00AE               	movwf	___ftmul@f1^(0+128)
 11767  1C64  300B               	movlw	11
 11768  1C65  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11769  1C66  3041               	movlw	65
 11770  1C67  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11771  1C68  0023               	movlb	3	; select bank3
 11772  1C69  0867               	movf	_scaleA10kPot$2816^(0+384),w
 11773  1C6A  0021               	movlb	1	; select bank1
 11774  1C6B  00B1               	movwf	___ftmul@f2^(0+128)
 11775  1C6C  0023               	movlb	3	; select bank3
 11776  1C6D  0868               	movf	(_scaleA10kPot$2816+1)^(0+384),w
 11777  1C6E  0021               	movlb	1	; select bank1
 11778  1C6F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11779  1C70  0023               	movlb	3	; select bank3
 11780  1C71  0869               	movf	(_scaleA10kPot$2816+2)^(0+384),w
 11781  1C72  0021               	movlb	1	; select bank1
 11782  1C73  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11783  1C74  319E  2691  319C   	fcall	___ftmul
 11784  1C77  0021               	movlb	1	; select bank1
 11785  1C78  082E               	movf	?___ftmul^(0+128),w
 11786  1C79  0023               	movlb	3	; select bank3
 11787  1C7A  00E1               	movwf	scaleA10kPot@pwm^(0+384)
 11788  1C7B  0021               	movlb	1	; select bank1
 11789  1C7C  082F               	movf	(?___ftmul+1)^(0+128),w
 11790  1C7D  0023               	movlb	3	; select bank3
 11791  1C7E  00E2               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 11792  1C7F  0021               	movlb	1	; select bank1
 11793  1C80  0830               	movf	(?___ftmul+2)^(0+128),w
 11794  1C81  0023               	movlb	3	; select bank3
 11795  1C82  00E3               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 11796                           
 11797                           ;user.c: 207: return (int)(pwm);
 11798  1C83  0861               	movf	scaleA10kPot@pwm^(0+384),w
 11799  1C84  0022               	movlb	2	; select bank2
 11800  1C85  00A0               	movwf	___fttol@f1^(0+256)
 11801  1C86  0023               	movlb	3	; select bank3
 11802  1C87  0862               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 11803  1C88  0022               	movlb	2	; select bank2
 11804  1C89  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11805  1C8A  0023               	movlb	3	; select bank3
 11806  1C8B  0863               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 11807  1C8C  0022               	movlb	2	; select bank2
 11808  1C8D  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11809  1C8E  319A  226C         	fcall	___fttol
 11810  1C90  0022               	movlb	2	; select bank2
 11811  1C91  0821               	movf	(?___fttol^(0+256)+1),w
 11812  1C92  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 11813  1C93  0820               	movf	?___fttol^(0+256),w
 11814  1C94  00E7               	movwf	?_scaleA10kPot^(0+256)
 11815  1C95  0008               	return
 11816  1C96                     __end_of_scaleA10kPot:	
 11817                           
 11818                           	psect	text26
 11819  19E7                     __ptext26:	
 11820 ;; *************** function _scaleA100kPot *****************
 11821 ;; Defined at:
 11822 ;;		line 188 in file "user.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  input           3   71[BANK2 ] int 
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;  pwm             3    0[BANK3 ] float 
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  2   71[BANK2 ] int 
 11829 ;; Registers used:
 11830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11836 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11837 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11839 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11840 ;;Total ram usage:       12 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    8
 11843 ;; This function calls:
 11844 ;;		___ftdiv
 11845 ;;		___ftmul
 11846 ;;		___fttol
 11847 ;;		_pow
 11848 ;; This function is called by:
 11849 ;;		_main
 11850 ;; This function uses a non-reentrant model
 11851 ;;
 11852                           
 11853                           
 11854                           ;psect for function _scaleA100kPot
 11855  19E7                     _scaleA100kPot:	
 11856                           
 11857                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 11858                           
 11859                           ;incstack = 0
 11860                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11861  19E7  0022               	movlb	2	; select bank2
 11862  19E8  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11863  19E9  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 11864  19EA  0467               	iorwf	scaleA100kPot@input^(0+256),w
 11865  19EB  1D03               	skipz
 11866  19EC  29F3               	goto	l8790
 11867  19ED  3000               	movlw	0
 11868  19EE  00E7               	movwf	scaleA100kPot@input^(0+256)
 11869  19EF  3080               	movlw	128
 11870  19F0  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 11871  19F1  303F               	movlw	63
 11872  19F2  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 11873  19F3                     l8790:	
 11874                           
 11875                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11876  19F3  30C0               	movlw	192
 11877  19F4  0021               	movlb	1	; select bank1
 11878  19F5  00CE               	movwf	___ftdiv@f2^(0+128)
 11879  19F6  307F               	movlw	127
 11880  19F7  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11881  19F8  3044               	movlw	68
 11882  19F9  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11883  19FA  0022               	movlb	2	; select bank2
 11884  19FB  0867               	movf	scaleA100kPot@input^(0+256),w
 11885  19FC  0021               	movlb	1	; select bank1
 11886  19FD  00D1               	movwf	___ftdiv@f1^(0+128)
 11887  19FE  0022               	movlb	2	; select bank2
 11888  19FF  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 11889  1A00  0021               	movlb	1	; select bank1
 11890  1A01  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11891  1A02  0022               	movlb	2	; select bank2
 11892  1A03  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11893  1A04  0021               	movlb	1	; select bank1
 11894  1A05  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11895  1A06  319D  253D  3199   	fcall	___ftdiv
 11896  1A09  0021               	movlb	1	; select bank1
 11897  1A0A  084E               	movf	?___ftdiv^(0+128),w
 11898  1A0B  0023               	movlb	3	; select bank3
 11899  1A0C  00E4               	movwf	_scaleA100kPot$2811^(0+384)
 11900  1A0D  0021               	movlb	1	; select bank1
 11901  1A0E  084F               	movf	(?___ftdiv+1)^(0+128),w
 11902  1A0F  0023               	movlb	3	; select bank3
 11903  1A10  00E5               	movwf	(_scaleA100kPot$2811+1)^(0+384)
 11904  1A11  0021               	movlb	1	; select bank1
 11905  1A12  0850               	movf	(?___ftdiv+2)^(0+128),w
 11906  1A13  0023               	movlb	3	; select bank3
 11907  1A14  00E6               	movwf	(_scaleA100kPot$2811+2)^(0+384)
 11908                           
 11909                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11910  1A15  3056               	movlw	86
 11911  1A16  0022               	movlb	2	; select bank2
 11912  1A17  00D8               	movwf	pow@y^(0+256)
 11913  1A18  308E               	movlw	142
 11914  1A19  00D9               	movwf	(pow@y+1)^(0+256)
 11915  1A1A  30BF               	movlw	191
 11916  1A1B  00DA               	movwf	(pow@y+2)^(0+256)
 11917  1A1C  0023               	movlb	3	; select bank3
 11918  1A1D  0864               	movf	_scaleA100kPot$2811^(0+384),w
 11919  1A1E  0022               	movlb	2	; select bank2
 11920  1A1F  00D5               	movwf	pow@x^(0+256)
 11921  1A20  0023               	movlb	3	; select bank3
 11922  1A21  0865               	movf	(_scaleA100kPot$2811+1)^(0+384),w
 11923  1A22  0022               	movlb	2	; select bank2
 11924  1A23  00D6               	movwf	(pow@x+1)^(0+256)
 11925  1A24  0023               	movlb	3	; select bank3
 11926  1A25  0866               	movf	(_scaleA100kPot$2811+2)^(0+384),w
 11927  1A26  0022               	movlb	2	; select bank2
 11928  1A27  00D7               	movwf	(pow@x+2)^(0+256)
 11929  1A28  3186  26DE  3199   	fcall	_pow
 11930  1A2B  0022               	movlb	2	; select bank2
 11931  1A2C  0855               	movf	?_pow^(0+256),w
 11932  1A2D  0023               	movlb	3	; select bank3
 11933  1A2E  00E7               	movwf	_scaleA100kPot$2812^(0+384)
 11934  1A2F  0022               	movlb	2	; select bank2
 11935  1A30  0856               	movf	(?_pow+1)^(0+256),w
 11936  1A31  0023               	movlb	3	; select bank3
 11937  1A32  00E8               	movwf	(_scaleA100kPot$2812+1)^(0+384)
 11938  1A33  0022               	movlb	2	; select bank2
 11939  1A34  0857               	movf	(?_pow+2)^(0+256),w
 11940  1A35  0023               	movlb	3	; select bank3
 11941  1A36  00E9               	movwf	(_scaleA100kPot$2812+2)^(0+384)
 11942                           
 11943                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11944  1A37  309F               	movlw	159
 11945  1A38  0021               	movlb	1	; select bank1
 11946  1A39  00AE               	movwf	___ftmul@f1^(0+128)
 11947  1A3A  3068               	movlw	104
 11948  1A3B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11949  1A3C  3040               	movlw	64
 11950  1A3D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11951  1A3E  0023               	movlb	3	; select bank3
 11952  1A3F  0867               	movf	_scaleA100kPot$2812^(0+384),w
 11953  1A40  0021               	movlb	1	; select bank1
 11954  1A41  00B1               	movwf	___ftmul@f2^(0+128)
 11955  1A42  0023               	movlb	3	; select bank3
 11956  1A43  0868               	movf	(_scaleA100kPot$2812+1)^(0+384),w
 11957  1A44  0021               	movlb	1	; select bank1
 11958  1A45  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11959  1A46  0023               	movlb	3	; select bank3
 11960  1A47  0869               	movf	(_scaleA100kPot$2812+2)^(0+384),w
 11961  1A48  0021               	movlb	1	; select bank1
 11962  1A49  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11963  1A4A  319E  2691  3199   	fcall	___ftmul
 11964  1A4D  0021               	movlb	1	; select bank1
 11965  1A4E  082E               	movf	?___ftmul^(0+128),w
 11966  1A4F  0023               	movlb	3	; select bank3
 11967  1A50  00E1               	movwf	scaleA100kPot@pwm^(0+384)
 11968  1A51  0021               	movlb	1	; select bank1
 11969  1A52  082F               	movf	(?___ftmul+1)^(0+128),w
 11970  1A53  0023               	movlb	3	; select bank3
 11971  1A54  00E2               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 11972  1A55  0021               	movlb	1	; select bank1
 11973  1A56  0830               	movf	(?___ftmul+2)^(0+128),w
 11974  1A57  0023               	movlb	3	; select bank3
 11975  1A58  00E3               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 11976                           
 11977                           ;user.c: 192: return (int)(pwm);
 11978  1A59  0861               	movf	scaleA100kPot@pwm^(0+384),w
 11979  1A5A  0022               	movlb	2	; select bank2
 11980  1A5B  00A0               	movwf	___fttol@f1^(0+256)
 11981  1A5C  0023               	movlb	3	; select bank3
 11982  1A5D  0862               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 11983  1A5E  0022               	movlb	2	; select bank2
 11984  1A5F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11985  1A60  0023               	movlb	3	; select bank3
 11986  1A61  0863               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 11987  1A62  0022               	movlb	2	; select bank2
 11988  1A63  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11989  1A64  319A  226C         	fcall	___fttol
 11990  1A66  0022               	movlb	2	; select bank2
 11991  1A67  0821               	movf	(?___fttol^(0+256)+1),w
 11992  1A68  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 11993  1A69  0820               	movf	?___fttol^(0+256),w
 11994  1A6A  00E7               	movwf	?_scaleA100kPot^(0+256)
 11995  1A6B  0008               	return
 11996  1A6C                     __end_of_scaleA100kPot:	
 11997                           
 11998                           	psect	text27
 11999  06DE                     __ptext27:	
 12000 ;; *************** function _pow *****************
 12001 ;; Defined at:
 12002 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;  x               3   53[BANK2 ] int 
 12005 ;;  y               3   56[BANK2 ] int 
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  yi              4   67[BANK2 ] unsigned long 
 12008 ;;  sign            1   66[BANK2 ] unsigned char 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  3   53[BANK2 ] unsigned char 
 12011 ;; Registers used:
 12012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12018 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12019 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12020 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12021 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12022 ;;Total ram usage:       18 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    7
 12025 ;; This function calls:
 12026 ;;		___ftge
 12027 ;;		___ftmul
 12028 ;;		___ftneg
 12029 ;;		___fttol
 12030 ;;		___lltoft
 12031 ;;		_exp
 12032 ;;		_log
 12033 ;; This function is called by:
 12034 ;;		_scaleA100kPot
 12035 ;;		_scaleA10kPot
 12036 ;;		_scaleiA10kPot
 12037 ;;		_scaleiA100kPot
 12038 ;; This function uses a non-reentrant model
 12039 ;;
 12040                           
 12041                           
 12042                           ;psect for function _pow
 12043  06DE                     _pow:	
 12044                           
 12045                           ;incstack = 0
 12046                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12047  06DE  0022               	movlb	2	; select bank2
 12048  06DF  01E2               	clrf	pow@sign^(0+256)
 12049  06E0  0857               	movf	(pow@x+2)^(0+256),w
 12050  06E1  0456               	iorwf	(pow@x+1)^(0+256),w
 12051  06E2  0455               	iorwf	pow@x^(0+256),w
 12052  06E3  1D03               	skipz
 12053  06E4  2F0A               	goto	l8076
 12054  06E5  3000               	movlw	0
 12055  06E6  0021               	movlb	1	; select bank1
 12056  06E7  00A0               	movwf	___ftge@ff1^(0+128)
 12057  06E8  3000               	movlw	0
 12058  06E9  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12059  06EA  3000               	movlw	0
 12060  06EB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12061  06EC  0022               	movlb	2	; select bank2
 12062  06ED  0858               	movf	pow@y^(0+256),w
 12063  06EE  0021               	movlb	1	; select bank1
 12064  06EF  00A3               	movwf	___ftge@ff2^(0+128)
 12065  06F0  0022               	movlb	2	; select bank2
 12066  06F1  0859               	movf	(pow@y+1)^(0+256),w
 12067  06F2  0021               	movlb	1	; select bank1
 12068  06F3  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12069  06F4  0022               	movlb	2	; select bank2
 12070  06F5  085A               	movf	(pow@y+2)^(0+256),w
 12071  06F6  0021               	movlb	1	; select bank1
 12072  06F7  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12073  06F8  31A2  22E0  3186   	fcall	___ftge
 12074  06FB  1C03               	btfss	3,0
 12075  06FC  2F02               	goto	l2295
 12076  06FD  3021               	movlw	33
 12077  06FE  0024               	movlb	4	; select bank4
 12078  06FF  00D3               	movwf	_errno^(0+512)
 12079  0700  3000               	movlw	0
 12080  0701  00D4               	movwf	(_errno^(0+512)+1)
 12081  0702                     l2295:	
 12082  0702  3000               	movlw	0
 12083  0703  0022               	movlb	2	; select bank2
 12084  0704  00D5               	movwf	?_pow^(0+256)
 12085  0705  3000               	movlw	0
 12086  0706  00D6               	movwf	(?_pow+1)^(0+256)
 12087  0707  3000               	movlw	0
 12088  0708  00D7               	movwf	(?_pow+2)^(0+256)
 12089  0709  0008               	return
 12090  070A                     l8076:	
 12091  070A  085A               	movf	(pow@y+2)^(0+256),w
 12092  070B  0459               	iorwf	(pow@y+1)^(0+256),w
 12093  070C  0458               	iorwf	pow@y^(0+256),w
 12094  070D  1D03               	skipz
 12095  070E  2F16               	goto	l8082
 12096  070F  3000               	movlw	0
 12097  0710  00D5               	movwf	?_pow^(0+256)
 12098  0711  3080               	movlw	128
 12099  0712  00D6               	movwf	(?_pow+1)^(0+256)
 12100  0713  303F               	movlw	63
 12101  0714  00D7               	movwf	(?_pow+2)^(0+256)
 12102  0715  0008               	return
 12103  0716                     l8082:	
 12104  0716  0855               	movf	pow@x^(0+256),w
 12105  0717  0021               	movlb	1	; select bank1
 12106  0718  00A0               	movwf	___ftge@ff1^(0+128)
 12107  0719  0022               	movlb	2	; select bank2
 12108  071A  0856               	movf	(pow@x+1)^(0+256),w
 12109  071B  0021               	movlb	1	; select bank1
 12110  071C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12111  071D  0022               	movlb	2	; select bank2
 12112  071E  0857               	movf	(pow@x+2)^(0+256),w
 12113  071F  0021               	movlb	1	; select bank1
 12114  0720  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12115  0721  3000               	movlw	0
 12116  0722  00A3               	movwf	___ftge@ff2^(0+128)
 12117  0723  3000               	movlw	0
 12118  0724  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12119  0725  3000               	movlw	0
 12120  0726  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12121  0727  31A2  22E0  3186   	fcall	___ftge
 12122  072A  1803               	btfsc	3,0
 12123  072B  2F90               	goto	l8094
 12124  072C  0022               	movlb	2	; select bank2
 12125  072D  0858               	movf	pow@y^(0+256),w
 12126  072E  00A0               	movwf	___fttol@f1^(0+256)
 12127  072F  0859               	movf	(pow@y+1)^(0+256),w
 12128  0730  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12129  0731  085A               	movf	(pow@y+2)^(0+256),w
 12130  0732  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12131  0733  319A  226C  3186   	fcall	___fttol
 12132  0736  0022               	movlb	2	; select bank2
 12133  0737  0823               	movf	(?___fttol+3)^(0+256),w
 12134  0738  00E6               	movwf	(pow@yi+3)^(0+256)
 12135  0739  0822               	movf	(?___fttol+2)^(0+256),w
 12136  073A  00E5               	movwf	(pow@yi+2)^(0+256)
 12137  073B  0821               	movf	(?___fttol+1)^(0+256),w
 12138  073C  00E4               	movwf	(pow@yi+1)^(0+256)
 12139  073D  0820               	movf	?___fttol^(0+256),w
 12140  073E  00E3               	movwf	pow@yi^(0+256)
 12141  073F  0866               	movf	(pow@yi+3)^(0+256),w
 12142  0740  0021               	movlb	1	; select bank1
 12143  0741  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12144  0742  0022               	movlb	2	; select bank2
 12145  0743  0865               	movf	(pow@yi+2)^(0+256),w
 12146  0744  0021               	movlb	1	; select bank1
 12147  0745  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12148  0746  0022               	movlb	2	; select bank2
 12149  0747  0864               	movf	(pow@yi+1)^(0+256),w
 12150  0748  0021               	movlb	1	; select bank1
 12151  0749  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12152  074A  0022               	movlb	2	; select bank2
 12153  074B  0863               	movf	pow@yi^(0+256),w
 12154  074C  0021               	movlb	1	; select bank1
 12155  074D  00A8               	movwf	___lltoft@c^(0+128)
 12156  074E  31A1  211A  3186   	fcall	___lltoft
 12157  0751  0022               	movlb	2	; select bank2
 12158  0752  085A               	movf	(pow@y+2)^(0+256),w
 12159  0753  0021               	movlb	1	; select bank1
 12160  0754  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12161  0755  1D03               	skipz
 12162  0756  2F61               	goto	u8465
 12163  0757  0022               	movlb	2	; select bank2
 12164  0758  0859               	movf	(pow@y+1)^(0+256),w
 12165  0759  0021               	movlb	1	; select bank1
 12166  075A  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12167  075B  1D03               	skipz
 12168  075C  2F61               	goto	u8465
 12169  075D  0022               	movlb	2	; select bank2
 12170  075E  0858               	movf	pow@y^(0+256),w
 12171  075F  0021               	movlb	1	; select bank1
 12172  0760  0628               	xorwf	?___lltoft^(0+128),w
 12173  0761                     u8465:	
 12174  0761  1903               	skipnz
 12175  0762  2F70               	goto	l8090
 12176  0763  3021               	movlw	33
 12177  0764  0024               	movlb	4	; select bank4
 12178  0765  00D3               	movwf	_errno^(0+512)
 12179  0766  3000               	movlw	0
 12180  0767  00D4               	movwf	(_errno^(0+512)+1)
 12181  0768  3000               	movlw	0
 12182  0769  0022               	movlb	2	; select bank2
 12183  076A  00D5               	movwf	?_pow^(0+256)
 12184  076B  3000               	movlw	0
 12185  076C  00D6               	movwf	(?_pow+1)^(0+256)
 12186  076D  3000               	movlw	0
 12187  076E  00D7               	movwf	(?_pow+2)^(0+256)
 12188  076F  0008               	return
 12189  0770                     l8090:	
 12190  0770  0022               	movlb	2	; select bank2
 12191  0771  0863               	movf	pow@yi^(0+256),w
 12192  0772  3901               	andlw	1
 12193  0773  00DB               	movwf	??_pow^(0+256)
 12194  0774  085B               	movf	??_pow^(0+256),w
 12195  0775  00E2               	movwf	pow@sign^(0+256)
 12196  0776  0855               	movf	pow@x^(0+256),w
 12197  0777  0021               	movlb	1	; select bank1
 12198  0778  00BE               	movwf	___ftneg@f1^(0+128)
 12199  0779  0022               	movlb	2	; select bank2
 12200  077A  0856               	movf	(pow@x+1)^(0+256),w
 12201  077B  0021               	movlb	1	; select bank1
 12202  077C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12203  077D  0022               	movlb	2	; select bank2
 12204  077E  0857               	movf	(pow@x+2)^(0+256),w
 12205  077F  0021               	movlb	1	; select bank1
 12206  0780  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12207  0781  31AF  2779  3186   	fcall	___ftneg
 12208  0784  0021               	movlb	1	; select bank1
 12209  0785  083E               	movf	?___ftneg^(0+128),w
 12210  0786  0022               	movlb	2	; select bank2
 12211  0787  00D5               	movwf	pow@x^(0+256)
 12212  0788  0021               	movlb	1	; select bank1
 12213  0789  083F               	movf	(?___ftneg+1)^(0+128),w
 12214  078A  0022               	movlb	2	; select bank2
 12215  078B  00D6               	movwf	(pow@x+1)^(0+256)
 12216  078C  0021               	movlb	1	; select bank1
 12217  078D  0840               	movf	(?___ftneg+2)^(0+128),w
 12218  078E  0022               	movlb	2	; select bank2
 12219  078F  00D7               	movwf	(pow@x+2)^(0+256)
 12220  0790                     l8094:	
 12221  0790  0022               	movlb	2	; select bank2
 12222  0791  0855               	movf	pow@x^(0+256),w
 12223  0792  00BE               	movwf	log@x^(0+256)
 12224  0793  0856               	movf	(pow@x+1)^(0+256),w
 12225  0794  00BF               	movwf	(log@x+1)^(0+256)
 12226  0795  0857               	movf	(pow@x+2)^(0+256),w
 12227  0796  00C0               	movwf	(log@x+2)^(0+256)
 12228  0797  3190  209F  3186   	fcall	_log
 12229  079A  0022               	movlb	2	; select bank2
 12230  079B  083E               	movf	?_log^(0+256),w
 12231  079C  00DC               	movwf	_pow$2824^(0+256)
 12232  079D  083F               	movf	(?_log+1)^(0+256),w
 12233  079E  00DD               	movwf	(_pow$2824+1)^(0+256)
 12234  079F  0840               	movf	(?_log+2)^(0+256),w
 12235  07A0  00DE               	movwf	(_pow$2824+2)^(0+256)
 12236  07A1  0858               	movf	pow@y^(0+256),w
 12237  07A2  0021               	movlb	1	; select bank1
 12238  07A3  00AE               	movwf	___ftmul@f1^(0+128)
 12239  07A4  0022               	movlb	2	; select bank2
 12240  07A5  0859               	movf	(pow@y+1)^(0+256),w
 12241  07A6  0021               	movlb	1	; select bank1
 12242  07A7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12243  07A8  0022               	movlb	2	; select bank2
 12244  07A9  085A               	movf	(pow@y+2)^(0+256),w
 12245  07AA  0021               	movlb	1	; select bank1
 12246  07AB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12247  07AC  0022               	movlb	2	; select bank2
 12248  07AD  085C               	movf	_pow$2824^(0+256),w
 12249  07AE  0021               	movlb	1	; select bank1
 12250  07AF  00B1               	movwf	___ftmul@f2^(0+128)
 12251  07B0  0022               	movlb	2	; select bank2
 12252  07B1  085D               	movf	(_pow$2824+1)^(0+256),w
 12253  07B2  0021               	movlb	1	; select bank1
 12254  07B3  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12255  07B4  0022               	movlb	2	; select bank2
 12256  07B5  085E               	movf	(_pow$2824+2)^(0+256),w
 12257  07B6  0021               	movlb	1	; select bank1
 12258  07B7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12259  07B8  319E  2691  3186   	fcall	___ftmul
 12260  07BB  0021               	movlb	1	; select bank1
 12261  07BC  082E               	movf	?___ftmul^(0+128),w
 12262  07BD  0022               	movlb	2	; select bank2
 12263  07BE  00DF               	movwf	_pow$2825^(0+256)
 12264  07BF  0021               	movlb	1	; select bank1
 12265  07C0  082F               	movf	(?___ftmul+1)^(0+128),w
 12266  07C1  0022               	movlb	2	; select bank2
 12267  07C2  00E0               	movwf	(_pow$2825+1)^(0+256)
 12268  07C3  0021               	movlb	1	; select bank1
 12269  07C4  0830               	movf	(?___ftmul+2)^(0+128),w
 12270  07C5  0022               	movlb	2	; select bank2
 12271  07C6  00E1               	movwf	(_pow$2825+2)^(0+256)
 12272  07C7  085F               	movf	_pow$2825^(0+256),w
 12273  07C8  00C8               	movwf	exp@x^(0+256)
 12274  07C9  0860               	movf	(_pow$2825+1)^(0+256),w
 12275  07CA  00C9               	movwf	(exp@x+1)^(0+256)
 12276  07CB  0861               	movf	(_pow$2825+2)^(0+256),w
 12277  07CC  00CA               	movwf	(exp@x+2)^(0+256)
 12278  07CD  3193  2351  3186   	fcall	_exp
 12279  07D0  0022               	movlb	2	; select bank2
 12280  07D1  0848               	movf	?_exp^(0+256),w
 12281  07D2  00D5               	movwf	pow@x^(0+256)
 12282  07D3  0849               	movf	(?_exp+1)^(0+256),w
 12283  07D4  00D6               	movwf	(pow@x+1)^(0+256)
 12284  07D5  084A               	movf	(?_exp+2)^(0+256),w
 12285  07D6  00D7               	movwf	(pow@x+2)^(0+256)
 12286  07D7  0862               	movf	pow@sign^(0+256),w
 12287  07D8  1903               	btfsc	3,2
 12288  07D9  0008               	return
 12289  07DA  0855               	movf	pow@x^(0+256),w
 12290  07DB  0021               	movlb	1	; select bank1
 12291  07DC  00BE               	movwf	___ftneg@f1^(0+128)
 12292  07DD  0022               	movlb	2	; select bank2
 12293  07DE  0856               	movf	(pow@x+1)^(0+256),w
 12294  07DF  0021               	movlb	1	; select bank1
 12295  07E0  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12296  07E1  0022               	movlb	2	; select bank2
 12297  07E2  0857               	movf	(pow@x+2)^(0+256),w
 12298  07E3  0021               	movlb	1	; select bank1
 12299  07E4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12300  07E5  31AF  2779         	fcall	___ftneg
 12301  07E7  0021               	movlb	1	; select bank1
 12302  07E8  083E               	movf	?___ftneg^(0+128),w
 12303  07E9  0022               	movlb	2	; select bank2
 12304  07EA  00D5               	movwf	?_pow^(0+256)
 12305  07EB  0021               	movlb	1	; select bank1
 12306  07EC  083F               	movf	(?___ftneg+1)^(0+128),w
 12307  07ED  0022               	movlb	2	; select bank2
 12308  07EE  00D6               	movwf	(?_pow+1)^(0+256)
 12309  07EF  0021               	movlb	1	; select bank1
 12310  07F0  0840               	movf	(?___ftneg+2)^(0+128),w
 12311  07F1  0022               	movlb	2	; select bank2
 12312  07F2  00D7               	movwf	(?_pow+2)^(0+256)
 12313  07F3  0008               	return
 12314  07F4                     __end_of_pow:	
 12315                           
 12316                           	psect	text28
 12317  109F                     __ptext28:	
 12318 ;; *************** function _log *****************
 12319 ;; Defined at:
 12320 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;  x               3   30[BANK2 ] unsigned char 
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;  exponent        2   34[BANK2 ] int 
 12325 ;; Return value:  Size  Location     Type
 12326 ;;                  3   30[BANK2 ] int 
 12327 ;; Registers used:
 12328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12329 ;; Tracked objects:
 12330 ;;		On entry : 0/0
 12331 ;;		On exit  : 0/0
 12332 ;;		Unchanged: 0/0
 12333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12334 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12335 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12336 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12337 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12338 ;;Total ram usage:        6 bytes
 12339 ;; Hardware stack levels used:    1
 12340 ;; Hardware stack levels required when called:    6
 12341 ;; This function calls:
 12342 ;;		___awtoft
 12343 ;;		___ftadd
 12344 ;;		___ftge
 12345 ;;		___ftmul
 12346 ;;		_eval_poly
 12347 ;;		_frexp
 12348 ;; This function is called by:
 12349 ;;		_pow
 12350 ;; This function uses a non-reentrant model
 12351 ;;
 12352                           
 12353                           
 12354                           ;psect for function _log
 12355  109F                     _log:	
 12356                           
 12357                           ;incstack = 0
 12358                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12359  109F  0022               	movlb	2	; select bank2
 12360  10A0  083E               	movf	log@x^(0+256),w
 12361  10A1  0021               	movlb	1	; select bank1
 12362  10A2  00A0               	movwf	___ftge@ff1^(0+128)
 12363  10A3  0022               	movlb	2	; select bank2
 12364  10A4  083F               	movf	(log@x+1)^(0+256),w
 12365  10A5  0021               	movlb	1	; select bank1
 12366  10A6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12367  10A7  0022               	movlb	2	; select bank2
 12368  10A8  0840               	movf	(log@x+2)^(0+256),w
 12369  10A9  0021               	movlb	1	; select bank1
 12370  10AA  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12371  10AB  3000               	movlw	0
 12372  10AC  00A3               	movwf	___ftge@ff2^(0+128)
 12373  10AD  3000               	movlw	0
 12374  10AE  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12375  10AF  3000               	movlw	0
 12376  10B0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12377  10B1  31A2  22E0  3190   	fcall	___ftge
 12378  10B4  1803               	btfsc	3,0
 12379  10B5  28C3               	goto	l7950
 12380  10B6  3021               	movlw	33
 12381  10B7  0024               	movlb	4	; select bank4
 12382  10B8  00D3               	movwf	_errno^(0+512)
 12383  10B9  3000               	movlw	0
 12384  10BA  00D4               	movwf	(_errno^(0+512)+1)
 12385  10BB  3000               	movlw	0
 12386  10BC  0022               	movlb	2	; select bank2
 12387  10BD  00BE               	movwf	?_log^(0+256)
 12388  10BE  3000               	movlw	0
 12389  10BF  00BF               	movwf	(?_log+1)^(0+256)
 12390  10C0  3000               	movlw	0
 12391  10C1  00C0               	movwf	(?_log+2)^(0+256)
 12392  10C2  0008               	return
 12393  10C3                     l7950:	
 12394  10C3  0022               	movlb	2	; select bank2
 12395  10C4  0840               	movf	(log@x+2)^(0+256),w
 12396  10C5  043F               	iorwf	(log@x+1)^(0+256),w
 12397  10C6  043E               	iorwf	log@x^(0+256),w
 12398  10C7  1D03               	skipz
 12399  10C8  28D6               	goto	l7956
 12400  10C9  3022               	movlw	34
 12401  10CA  0024               	movlb	4	; select bank4
 12402  10CB  00D3               	movwf	_errno^(0+512)
 12403  10CC  3000               	movlw	0
 12404  10CD  00D4               	movwf	(_errno^(0+512)+1)
 12405  10CE  3000               	movlw	0
 12406  10CF  0022               	movlb	2	; select bank2
 12407  10D0  00BE               	movwf	?_log^(0+256)
 12408  10D1  3000               	movlw	0
 12409  10D2  00BF               	movwf	(?_log+1)^(0+256)
 12410  10D3  3000               	movlw	0
 12411  10D4  00C0               	movwf	(?_log+2)^(0+256)
 12412  10D5  0008               	return
 12413  10D6                     l7956:	
 12414  10D6  3000               	movlw	0
 12415  10D7  0021               	movlb	1	; select bank1
 12416  10D8  00C1               	movwf	___ftadd@f1^(0+128)
 12417  10D9  3080               	movlw	128
 12418  10DA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12419  10DB  30BF               	movlw	191
 12420  10DC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12421  10DD  3000               	movlw	0
 12422  10DE  00AE               	movwf	___ftmul@f1^(0+128)
 12423  10DF  3000               	movlw	0
 12424  10E0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12425  10E1  3040               	movlw	64
 12426  10E2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12427  10E3  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12428  10E4  0022               	movlb	2	; select bank2
 12429  10E5  00C1               	movwf	??_log^(0+256)
 12430  10E6  0841               	movf	??_log^(0+256),w
 12431  10E7  0021               	movlb	1	; select bank1
 12432  10E8  00A3               	movwf	frexp@eptr^(0+128)
 12433  10E9  0022               	movlb	2	; select bank2
 12434  10EA  083E               	movf	log@x^(0+256),w
 12435  10EB  0021               	movlb	1	; select bank1
 12436  10EC  00A0               	movwf	frexp@value^(0+128)
 12437  10ED  0022               	movlb	2	; select bank2
 12438  10EE  083F               	movf	(log@x+1)^(0+256),w
 12439  10EF  0021               	movlb	1	; select bank1
 12440  10F0  00A1               	movwf	(frexp@value+1)^(0+128)
 12441  10F1  0022               	movlb	2	; select bank2
 12442  10F2  0840               	movf	(log@x+2)^(0+256),w
 12443  10F3  0021               	movlb	1	; select bank1
 12444  10F4  00A2               	movwf	(frexp@value+2)^(0+128)
 12445  10F5  31A3  2397  3190   	fcall	_frexp
 12446  10F8  0021               	movlb	1	; select bank1
 12447  10F9  0820               	movf	?_frexp^(0+128),w
 12448  10FA  00B1               	movwf	___ftmul@f2^(0+128)
 12449  10FB  0821               	movf	(?_frexp+1)^(0+128),w
 12450  10FC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12451  10FD  0822               	movf	(?_frexp+2)^(0+128),w
 12452  10FE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12453  10FF  319E  2691  3190   	fcall	___ftmul
 12454  1102  0021               	movlb	1	; select bank1
 12455  1103  082E               	movf	?___ftmul^(0+128),w
 12456  1104  00C4               	movwf	___ftadd@f2^(0+128)
 12457  1105  082F               	movf	(?___ftmul+1)^(0+128),w
 12458  1106  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12459  1107  0830               	movf	(?___ftmul+2)^(0+128),w
 12460  1108  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12461  1109  3192  225B  3190   	fcall	___ftadd
 12462  110C  0021               	movlb	1	; select bank1
 12463  110D  0841               	movf	?___ftadd^(0+128),w
 12464  110E  0022               	movlb	2	; select bank2
 12465  110F  00BE               	movwf	log@x^(0+256)
 12466  1110  0021               	movlb	1	; select bank1
 12467  1111  0842               	movf	(?___ftadd+1)^(0+128),w
 12468  1112  0022               	movlb	2	; select bank2
 12469  1113  00BF               	movwf	(log@x+1)^(0+256)
 12470  1114  0021               	movlb	1	; select bank1
 12471  1115  0843               	movf	(?___ftadd+2)^(0+128),w
 12472  1116  0022               	movlb	2	; select bank2
 12473  1117  00C0               	movwf	(log@x+2)^(0+256)
 12474  1118  30FF               	movlw	255
 12475  1119  07C2               	addwf	log@exponent^(0+256),f
 12476  111A  30FF               	movlw	255
 12477  111B  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12478  111C  083E               	movf	log@x^(0+256),w
 12479  111D  00B4               	movwf	eval_poly@x^(0+256)
 12480  111E  083F               	movf	(log@x+1)^(0+256),w
 12481  111F  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12482  1120  0840               	movf	(log@x+2)^(0+256),w
 12483  1121  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12484  1122  301E               	movlw	low (log@coeff| (0+32768))
 12485  1123  00B7               	movwf	eval_poly@d^(0+256)
 12486  1124  30A8               	movlw	high (log@coeff| (0+32768))
 12487  1125  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12488  1126  3008               	movlw	8
 12489  1127  00B9               	movwf	eval_poly@n^(0+256)
 12490  1128  3000               	movlw	0
 12491  1129  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12492  112A  31A7  278E  3190   	fcall	_eval_poly
 12493  112D  0022               	movlb	2	; select bank2
 12494  112E  0834               	movf	?_eval_poly^(0+256),w
 12495  112F  00BE               	movwf	log@x^(0+256)
 12496  1130  0835               	movf	(?_eval_poly+1)^(0+256),w
 12497  1131  00BF               	movwf	(log@x+1)^(0+256)
 12498  1132  0836               	movf	(?_eval_poly+2)^(0+256),w
 12499  1133  00C0               	movwf	(log@x+2)^(0+256)
 12500  1134  083E               	movf	log@x^(0+256),w
 12501  1135  0021               	movlb	1	; select bank1
 12502  1136  00C1               	movwf	___ftadd@f1^(0+128)
 12503  1137  0022               	movlb	2	; select bank2
 12504  1138  083F               	movf	(log@x+1)^(0+256),w
 12505  1139  0021               	movlb	1	; select bank1
 12506  113A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12507  113B  0022               	movlb	2	; select bank2
 12508  113C  0840               	movf	(log@x+2)^(0+256),w
 12509  113D  0021               	movlb	1	; select bank1
 12510  113E  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12511  113F  3072               	movlw	114
 12512  1140  00AE               	movwf	___ftmul@f1^(0+128)
 12513  1141  3031               	movlw	49
 12514  1142  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12515  1143  303F               	movlw	63
 12516  1144  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12517  1145  0022               	movlb	2	; select bank2
 12518  1146  0843               	movf	(log@exponent+1)^(0+256),w
 12519  1147  0021               	movlb	1	; select bank1
 12520  1148  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12521  1149  0022               	movlb	2	; select bank2
 12522  114A  0842               	movf	log@exponent^(0+256),w
 12523  114B  0021               	movlb	1	; select bank1
 12524  114C  00A8               	movwf	___awtoft@c^(0+128)
 12525  114D  31A0  20AE  3190   	fcall	___awtoft
 12526  1150  0021               	movlb	1	; select bank1
 12527  1151  0828               	movf	?___awtoft^(0+128),w
 12528  1152  00B1               	movwf	___ftmul@f2^(0+128)
 12529  1153  0829               	movf	(?___awtoft+1)^(0+128),w
 12530  1154  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12531  1155  082A               	movf	(?___awtoft+2)^(0+128),w
 12532  1156  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12533  1157  319E  2691  3190   	fcall	___ftmul
 12534  115A  0021               	movlb	1	; select bank1
 12535  115B  082E               	movf	?___ftmul^(0+128),w
 12536  115C  00C4               	movwf	___ftadd@f2^(0+128)
 12537  115D  082F               	movf	(?___ftmul+1)^(0+128),w
 12538  115E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12539  115F  0830               	movf	(?___ftmul+2)^(0+128),w
 12540  1160  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12541  1161  3192  225B         	fcall	___ftadd
 12542  1163  0021               	movlb	1	; select bank1
 12543  1164  0841               	movf	?___ftadd^(0+128),w
 12544  1165  0022               	movlb	2	; select bank2
 12545  1166  00BE               	movwf	?_log^(0+256)
 12546  1167  0021               	movlb	1	; select bank1
 12547  1168  0842               	movf	(?___ftadd+1)^(0+128),w
 12548  1169  0022               	movlb	2	; select bank2
 12549  116A  00BF               	movwf	(?_log+1)^(0+256)
 12550  116B  0021               	movlb	1	; select bank1
 12551  116C  0843               	movf	(?___ftadd+2)^(0+128),w
 12552  116D  0022               	movlb	2	; select bank2
 12553  116E  00C0               	movwf	(?_log+2)^(0+256)
 12554  116F  0008               	return
 12555  1170                     __end_of_log:	
 12556                           
 12557                           	psect	text29
 12558  1351                     __ptext29:	
 12559 ;; *************** function _exp *****************
 12560 ;; Defined at:
 12561 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;  x               3   40[BANK2 ] int 
 12564 ;; Auto vars:     Size  Location     Type
 12565 ;;  exponent        2   50[BANK2 ] int 
 12566 ;;  sign            1   52[BANK2 ] unsigned char 
 12567 ;; Return value:  Size  Location     Type
 12568 ;;                  3   40[BANK2 ] unsigned char 
 12569 ;; Registers used:
 12570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12571 ;; Tracked objects:
 12572 ;;		On entry : 0/0
 12573 ;;		On exit  : 0/0
 12574 ;;		Unchanged: 0/0
 12575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12576 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12577 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12578 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12579 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12580 ;;Total ram usage:       13 bytes
 12581 ;; Hardware stack levels used:    1
 12582 ;; Hardware stack levels required when called:    6
 12583 ;; This function calls:
 12584 ;;		___awtoft
 12585 ;;		___ftdiv
 12586 ;;		___ftge
 12587 ;;		___ftmul
 12588 ;;		___ftneg
 12589 ;;		___ftsub
 12590 ;;		___fttol
 12591 ;;		_eval_poly
 12592 ;;		_floor
 12593 ;;		_ldexp
 12594 ;; This function is called by:
 12595 ;;		_pow
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           
 12600                           ;psect for function _exp
 12601  1351                     _exp:	
 12602                           
 12603                           ;incstack = 0
 12604                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12605  1351  0022               	movlb	2	; select bank2
 12606  1352  084A               	movf	(exp@x+2)^(0+256),w
 12607  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 12608  1354  0448               	iorwf	exp@x^(0+256),w
 12609  1355  1D03               	skipz
 12610  1356  2B5E               	goto	l7972
 12611  1357  3000               	movlw	0
 12612  1358  00C8               	movwf	?_exp^(0+256)
 12613  1359  3080               	movlw	128
 12614  135A  00C9               	movwf	(?_exp+1)^(0+256)
 12615  135B  303F               	movlw	63
 12616  135C  00CA               	movwf	(?_exp+2)^(0+256)
 12617  135D  0008               	return
 12618  135E                     l7972:	
 12619  135E  3072               	movlw	114
 12620  135F  0021               	movlb	1	; select bank1
 12621  1360  00A0               	movwf	___ftge@ff1^(0+128)
 12622  1361  3031               	movlw	49
 12623  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12624  1363  3044               	movlw	68
 12625  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12626  1365  0022               	movlb	2	; select bank2
 12627  1366  0848               	movf	exp@x^(0+256),w
 12628  1367  0021               	movlb	1	; select bank1
 12629  1368  00A3               	movwf	___ftge@ff2^(0+128)
 12630  1369  0022               	movlb	2	; select bank2
 12631  136A  0849               	movf	(exp@x+1)^(0+256),w
 12632  136B  0021               	movlb	1	; select bank1
 12633  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12634  136D  0022               	movlb	2	; select bank2
 12635  136E  084A               	movf	(exp@x+2)^(0+256),w
 12636  136F  0021               	movlb	1	; select bank1
 12637  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12638  1371  31A2  22E0  3193   	fcall	___ftge
 12639  1374  1803               	btfsc	3,0
 12640  1375  2B83               	goto	l7982
 12641  1376  3022               	movlw	34
 12642  1377  0024               	movlb	4	; select bank4
 12643  1378  00D3               	movwf	_errno^(0+512)
 12644  1379  3000               	movlw	0
 12645  137A  00D4               	movwf	(_errno^(0+512)+1)
 12646  137B  30FF               	movlw	255
 12647  137C  0022               	movlb	2	; select bank2
 12648  137D  00C8               	movwf	?_exp^(0+256)
 12649  137E  307F               	movlw	127
 12650  137F  00C9               	movwf	(?_exp+1)^(0+256)
 12651  1380  307F               	movlw	127
 12652  1381  00CA               	movwf	(?_exp+2)^(0+256)
 12653  1382  0008               	return
 12654  1383                     l7982:	
 12655  1383  0022               	movlb	2	; select bank2
 12656  1384  0848               	movf	exp@x^(0+256),w
 12657  1385  0021               	movlb	1	; select bank1
 12658  1386  00A0               	movwf	___ftge@ff1^(0+128)
 12659  1387  0022               	movlb	2	; select bank2
 12660  1388  0849               	movf	(exp@x+1)^(0+256),w
 12661  1389  0021               	movlb	1	; select bank1
 12662  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12663  138B  0022               	movlb	2	; select bank2
 12664  138C  084A               	movf	(exp@x+2)^(0+256),w
 12665  138D  0021               	movlb	1	; select bank1
 12666  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12667  138F  3049               	movlw	73
 12668  1390  00A3               	movwf	___ftge@ff2^(0+128)
 12669  1391  303A               	movlw	58
 12670  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12671  1393  30C4               	movlw	196
 12672  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12673  1395  31A2  22E0  3193   	fcall	___ftge
 12674  1398  1803               	btfsc	3,0
 12675  1399  2BA7               	goto	l7988
 12676  139A  3022               	movlw	34
 12677  139B  0024               	movlb	4	; select bank4
 12678  139C  00D3               	movwf	_errno^(0+512)
 12679  139D  3000               	movlw	0
 12680  139E  00D4               	movwf	(_errno^(0+512)+1)
 12681  139F  3000               	movlw	0
 12682  13A0  0022               	movlb	2	; select bank2
 12683  13A1  00C8               	movwf	?_exp^(0+256)
 12684  13A2  3000               	movlw	0
 12685  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 12686  13A4  3000               	movlw	0
 12687  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 12688  13A6  0008               	return
 12689  13A7                     l7988:	
 12690  13A7  0022               	movlb	2	; select bank2
 12691  13A8  0848               	movf	exp@x^(0+256),w
 12692  13A9  0021               	movlb	1	; select bank1
 12693  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 12694  13AB  0022               	movlb	2	; select bank2
 12695  13AC  0849               	movf	(exp@x+1)^(0+256),w
 12696  13AD  0021               	movlb	1	; select bank1
 12697  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12698  13AF  0022               	movlb	2	; select bank2
 12699  13B0  084A               	movf	(exp@x+2)^(0+256),w
 12700  13B1  0021               	movlb	1	; select bank1
 12701  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12702  13B3  3000               	movlw	0
 12703  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 12704  13B5  3000               	movlw	0
 12705  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12706  13B7  3000               	movlw	0
 12707  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12708  13B9  31A2  22E0  3193   	fcall	___ftge
 12709  13BC  1803               	btfsc	3,0
 12710  13BD  2BC0               	goto	u8350
 12711  13BE  3001               	movlw	1
 12712  13BF  2BC1               	goto	u8360
 12713  13C0                     u8350:	
 12714  13C0  3000               	movlw	0
 12715  13C1                     u8360:	
 12716  13C1  0022               	movlb	2	; select bank2
 12717  13C2  00CB               	movwf	??_exp^(0+256)
 12718  13C3  084B               	movf	??_exp^(0+256),w
 12719  13C4  00D4               	movwf	exp@sign^(0+256)
 12720  13C5  0854               	movf	exp@sign^(0+256),w
 12721  13C6  1903               	btfsc	3,2
 12722  13C7  2BE2               	goto	l7994
 12723  13C8  0848               	movf	exp@x^(0+256),w
 12724  13C9  0021               	movlb	1	; select bank1
 12725  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 12726  13CB  0022               	movlb	2	; select bank2
 12727  13CC  0849               	movf	(exp@x+1)^(0+256),w
 12728  13CD  0021               	movlb	1	; select bank1
 12729  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12730  13CF  0022               	movlb	2	; select bank2
 12731  13D0  084A               	movf	(exp@x+2)^(0+256),w
 12732  13D1  0021               	movlb	1	; select bank1
 12733  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12734  13D3  31AF  2779  3193   	fcall	___ftneg
 12735  13D6  0021               	movlb	1	; select bank1
 12736  13D7  083E               	movf	?___ftneg^(0+128),w
 12737  13D8  0022               	movlb	2	; select bank2
 12738  13D9  00C8               	movwf	exp@x^(0+256)
 12739  13DA  0021               	movlb	1	; select bank1
 12740  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 12741  13DC  0022               	movlb	2	; select bank2
 12742  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 12743  13DE  0021               	movlb	1	; select bank1
 12744  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 12745  13E0  0022               	movlb	2	; select bank2
 12746  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 12747  13E2                     l7994:	
 12748  13E2  30AA               	movlw	170
 12749  13E3  0021               	movlb	1	; select bank1
 12750  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 12751  13E5  30B8               	movlw	184
 12752  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12753  13E7  303F               	movlw	63
 12754  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12755  13E9  0022               	movlb	2	; select bank2
 12756  13EA  0848               	movf	exp@x^(0+256),w
 12757  13EB  0021               	movlb	1	; select bank1
 12758  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 12759  13ED  0022               	movlb	2	; select bank2
 12760  13EE  0849               	movf	(exp@x+1)^(0+256),w
 12761  13EF  0021               	movlb	1	; select bank1
 12762  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12763  13F1  0022               	movlb	2	; select bank2
 12764  13F2  084A               	movf	(exp@x+2)^(0+256),w
 12765  13F3  0021               	movlb	1	; select bank1
 12766  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12767  13F5  319E  2691  3193   	fcall	___ftmul
 12768  13F8  0021               	movlb	1	; select bank1
 12769  13F9  082E               	movf	?___ftmul^(0+128),w
 12770  13FA  0022               	movlb	2	; select bank2
 12771  13FB  00C8               	movwf	exp@x^(0+256)
 12772  13FC  0021               	movlb	1	; select bank1
 12773  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 12774  13FE  0022               	movlb	2	; select bank2
 12775  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 12776  1400  0021               	movlb	1	; select bank1
 12777  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 12778  1402  0022               	movlb	2	; select bank2
 12779  1403  00CA               	movwf	(exp@x+2)^(0+256)
 12780  1404  0848               	movf	exp@x^(0+256),w
 12781  1405  00B6               	movwf	floor@x^(0+256)
 12782  1406  0849               	movf	(exp@x+1)^(0+256),w
 12783  1407  00B7               	movwf	(floor@x+1)^(0+256)
 12784  1408  084A               	movf	(exp@x+2)^(0+256),w
 12785  1409  00B8               	movwf	(floor@x+2)^(0+256)
 12786  140A  319C  2496  3193   	fcall	_floor
 12787  140D  0022               	movlb	2	; select bank2
 12788  140E  0836               	movf	?_floor^(0+256),w
 12789  140F  00CC               	movwf	_exp$2827^(0+256)
 12790  1410  0837               	movf	(?_floor+1)^(0+256),w
 12791  1411  00CD               	movwf	(_exp$2827+1)^(0+256)
 12792  1412  0838               	movf	(?_floor+2)^(0+256),w
 12793  1413  00CE               	movwf	(_exp$2827+2)^(0+256)
 12794  1414  084C               	movf	_exp$2827^(0+256),w
 12795  1415  00A0               	movwf	___fttol@f1^(0+256)
 12796  1416  084D               	movf	(_exp$2827+1)^(0+256),w
 12797  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12798  1418  084E               	movf	(_exp$2827+2)^(0+256),w
 12799  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12800  141A  319A  226C  3193   	fcall	___fttol
 12801  141D  0022               	movlb	2	; select bank2
 12802  141E  0821               	movf	(?___fttol^(0+256)+1),w
 12803  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 12804  1420  0820               	movf	?___fttol^(0+256),w
 12805  1421  00D2               	movwf	exp@exponent^(0+256)
 12806  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 12807  1423  0021               	movlb	1	; select bank1
 12808  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12809  1425  0022               	movlb	2	; select bank2
 12810  1426  0852               	movf	exp@exponent^(0+256),w
 12811  1427  0021               	movlb	1	; select bank1
 12812  1428  00A8               	movwf	___awtoft@c^(0+128)
 12813  1429  31A0  20AE  3193   	fcall	___awtoft
 12814  142C  0021               	movlb	1	; select bank1
 12815  142D  0828               	movf	?___awtoft^(0+128),w
 12816  142E  0022               	movlb	2	; select bank2
 12817  142F  00BF               	movwf	___ftsub@f2^(0+256)
 12818  1430  0021               	movlb	1	; select bank1
 12819  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 12820  1432  0022               	movlb	2	; select bank2
 12821  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 12822  1434  0021               	movlb	1	; select bank1
 12823  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 12824  1436  0022               	movlb	2	; select bank2
 12825  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 12826  1438  0848               	movf	exp@x^(0+256),w
 12827  1439  00C2               	movwf	___ftsub@f1^(0+256)
 12828  143A  0849               	movf	(exp@x+1)^(0+256),w
 12829  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 12830  143C  084A               	movf	(exp@x+2)^(0+256),w
 12831  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 12832  143E  31A1  2144  3193   	fcall	___ftsub
 12833  1441  0022               	movlb	2	; select bank2
 12834  1442  083F               	movf	?___ftsub^(0+256),w
 12835  1443  00C8               	movwf	exp@x^(0+256)
 12836  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 12837  1445  00C9               	movwf	(exp@x+1)^(0+256)
 12838  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 12839  1447  00CA               	movwf	(exp@x+2)^(0+256)
 12840  1448  0848               	movf	exp@x^(0+256),w
 12841  1449  00B4               	movwf	eval_poly@x^(0+256)
 12842  144A  0849               	movf	(exp@x+1)^(0+256),w
 12843  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12844  144C  084A               	movf	(exp@x+2)^(0+256),w
 12845  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12846  144E  3000               	movlw	low (exp@coeff| (0+32768))
 12847  144F  00B7               	movwf	eval_poly@d^(0+256)
 12848  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 12849  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12850  1452  3009               	movlw	9
 12851  1453  00B9               	movwf	eval_poly@n^(0+256)
 12852  1454  3000               	movlw	0
 12853  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12854  1456  31A7  278E  3193   	fcall	_eval_poly
 12855  1459  0022               	movlb	2	; select bank2
 12856  145A  0834               	movf	?_eval_poly^(0+256),w
 12857  145B  00BE               	movwf	ldexp@value^(0+256)
 12858  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 12859  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 12860  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 12861  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 12862  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 12863  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 12864  1462  0852               	movf	exp@exponent^(0+256),w
 12865  1463  00C1               	movwf	ldexp@newexp^(0+256)
 12866  1464  3190  2008  3193   	fcall	_ldexp
 12867  1467  0022               	movlb	2	; select bank2
 12868  1468  083E               	movf	?_ldexp^(0+256),w
 12869  1469  00C8               	movwf	exp@x^(0+256)
 12870  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 12871  146B  00C9               	movwf	(exp@x+1)^(0+256)
 12872  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 12873  146D  00CA               	movwf	(exp@x+2)^(0+256)
 12874  146E  0854               	movf	exp@sign^(0+256),w
 12875  146F  1903               	btfsc	3,2
 12876  1470  0008               	return
 12877  1471  30FF               	movlw	255
 12878  1472  00CF               	movwf	_exp$2583^(0+256)
 12879  1473  307F               	movlw	127
 12880  1474  00D0               	movwf	(_exp$2583+1)^(0+256)
 12881  1475  307F               	movlw	127
 12882  1476  00D1               	movwf	(_exp$2583+2)^(0+256)
 12883  1477  084A               	movf	(exp@x+2)^(0+256),w
 12884  1478  0651               	xorwf	(_exp$2583+2)^(0+256),w
 12885  1479  1D03               	skipz
 12886  147A  2C81               	goto	u8395
 12887  147B  0849               	movf	(exp@x+1)^(0+256),w
 12888  147C  0650               	xorwf	(_exp$2583+1)^(0+256),w
 12889  147D  1D03               	skipz
 12890  147E  2C81               	goto	u8395
 12891  147F  0848               	movf	exp@x^(0+256),w
 12892  1480  064F               	xorwf	_exp$2583^(0+256),w
 12893  1481                     u8395:	
 12894  1481  1D03               	skipz
 12895  1482  2C8A               	goto	l8016
 12896  1483  3000               	movlw	0
 12897  1484  00C8               	movwf	?_exp^(0+256)
 12898  1485  3000               	movlw	0
 12899  1486  00C9               	movwf	(?_exp+1)^(0+256)
 12900  1487  3000               	movlw	0
 12901  1488  00CA               	movwf	(?_exp+2)^(0+256)
 12902  1489  0008               	return
 12903  148A                     l8016:	
 12904  148A  0848               	movf	exp@x^(0+256),w
 12905  148B  0021               	movlb	1	; select bank1
 12906  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 12907  148D  0022               	movlb	2	; select bank2
 12908  148E  0849               	movf	(exp@x+1)^(0+256),w
 12909  148F  0021               	movlb	1	; select bank1
 12910  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12911  1491  0022               	movlb	2	; select bank2
 12912  1492  084A               	movf	(exp@x+2)^(0+256),w
 12913  1493  0021               	movlb	1	; select bank1
 12914  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12915  1495  3000               	movlw	0
 12916  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 12917  1497  3080               	movlw	128
 12918  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12919  1499  303F               	movlw	63
 12920  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12921  149B  319D  253D         	fcall	___ftdiv
 12922  149D  0021               	movlb	1	; select bank1
 12923  149E  084E               	movf	?___ftdiv^(0+128),w
 12924  149F  0022               	movlb	2	; select bank2
 12925  14A0  00C8               	movwf	?_exp^(0+256)
 12926  14A1  0021               	movlb	1	; select bank1
 12927  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 12928  14A3  0022               	movlb	2	; select bank2
 12929  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 12930  14A5  0021               	movlb	1	; select bank1
 12931  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 12932  14A7  0022               	movlb	2	; select bank2
 12933  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 12934  14A9  0008               	return
 12935  14AA                     __end_of_exp:	
 12936                           
 12937                           	psect	text30
 12938  1008                     __ptext30:	
 12939 ;; *************** function _ldexp *****************
 12940 ;; Defined at:
 12941 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;  value           3   30[BANK2 ] unsigned char 
 12944 ;;  newexp          2   33[BANK2 ] int 
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;		None
 12947 ;; Return value:  Size  Location     Type
 12948 ;;                  3   30[BANK2 ] int 
 12949 ;; Registers used:
 12950 ;;		wreg, status,2, status,0, pclath, cstack
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12956 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12957 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12958 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12959 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12960 ;;Total ram usage:       10 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    4
 12963 ;; This function calls:
 12964 ;;		___ftge
 12965 ;;		___ftneg
 12966 ;; This function is called by:
 12967 ;;		_exp
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           
 12972                           ;psect for function _ldexp
 12973  1008                     _ldexp:	
 12974                           
 12975                           ;incstack = 0
 12976                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 12977  1008  0022               	movlb	2	; select bank2
 12978  1009  0840               	movf	(ldexp@value+2)^(0+256),w
 12979  100A  043F               	iorwf	(ldexp@value+1)^(0+256),w
 12980  100B  043E               	iorwf	ldexp@value^(0+256),w
 12981  100C  1D03               	skipz
 12982  100D  2815               	goto	l7836
 12983  100E  3000               	movlw	0
 12984  100F  00BE               	movwf	?_ldexp^(0+256)
 12985  1010  3000               	movlw	0
 12986  1011  00BF               	movwf	(?_ldexp+1)^(0+256)
 12987  1012  3000               	movlw	0
 12988  1013  00C0               	movwf	(?_ldexp+2)^(0+256)
 12989  1014  0008               	return
 12990  1015                     l7836:	
 12991  1015  0840               	movf	(ldexp@value^(0+256)+2),w
 12992  1016  397F               	andlw	127
 12993  1017  00C3               	movwf	??_ldexp^(0+256)
 12994  1018  01C4               	clrf	(??_ldexp^(0+256)+1)
 12995  1019  35C3               	lslf	??_ldexp^(0+256),f
 12996  101A  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 12997  101B  0843               	movf	??_ldexp^(0+256),w
 12998  101C  07C1               	addwf	ldexp@newexp^(0+256),f
 12999  101D  0844               	movf	(??_ldexp+1)^(0+256),w
 13000  101E  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13001  101F  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13002  1020  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13003  1021  3901               	andlw	1
 13004  1022  00C3               	movwf	??_ldexp^(0+256)
 13005  1023  01C4               	clrf	(??_ldexp^(0+256)+1)
 13006  1024  0843               	movf	??_ldexp^(0+256),w
 13007  1025  07C1               	addwf	ldexp@newexp^(0+256),f
 13008  1026  0844               	movf	(??_ldexp+1)^(0+256),w
 13009  1027  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13010  1028  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13011  1029  2837               	goto	l7846
 13012  102A  3022               	movlw	34
 13013  102B  0024               	movlb	4	; select bank4
 13014  102C  00D3               	movwf	_errno^(0+512)
 13015  102D  3000               	movlw	0
 13016  102E  00D4               	movwf	(_errno^(0+512)+1)
 13017  102F  3000               	movlw	0
 13018  1030  0022               	movlb	2	; select bank2
 13019  1031  00BE               	movwf	?_ldexp^(0+256)
 13020  1032  3000               	movlw	0
 13021  1033  00BF               	movwf	(?_ldexp+1)^(0+256)
 13022  1034  3000               	movlw	0
 13023  1035  00C0               	movwf	(?_ldexp+2)^(0+256)
 13024  1036  0008               	return
 13025  1037                     l7846:	
 13026  1037  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13027  1038  3A80               	xorlw	128
 13028  1039  00C3               	movwf	??_ldexp^(0+256)
 13029  103A  3081               	movlw	129
 13030  103B  0243               	subwf	??_ldexp^(0+256),w
 13031  103C  1D03               	skipz
 13032  103D  2840               	goto	u8245
 13033  103E  3000               	movlw	0
 13034  103F  0241               	subwf	ldexp@newexp^(0+256),w
 13035  1040                     u8245:	
 13036  1040  1C03               	skipc
 13037  1041  2887               	goto	l7870
 13038  1042  3022               	movlw	34
 13039  1043  0024               	movlb	4	; select bank4
 13040  1044  00D3               	movwf	_errno^(0+512)
 13041  1045  3000               	movlw	0
 13042  1046  00D4               	movwf	(_errno^(0+512)+1)
 13043  1047  0022               	movlb	2	; select bank2
 13044  1048  083E               	movf	ldexp@value^(0+256),w
 13045  1049  0021               	movlb	1	; select bank1
 13046  104A  00A0               	movwf	___ftge@ff1^(0+128)
 13047  104B  0022               	movlb	2	; select bank2
 13048  104C  083F               	movf	(ldexp@value+1)^(0+256),w
 13049  104D  0021               	movlb	1	; select bank1
 13050  104E  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13051  104F  0022               	movlb	2	; select bank2
 13052  1050  0840               	movf	(ldexp@value+2)^(0+256),w
 13053  1051  0021               	movlb	1	; select bank1
 13054  1052  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13055  1053  3000               	movlw	0
 13056  1054  00A3               	movwf	___ftge@ff2^(0+128)
 13057  1055  3000               	movlw	0
 13058  1056  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13059  1057  3000               	movlw	0
 13060  1058  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13061  1059  31A2  22E0  3190   	fcall	___ftge
 13062  105C  1803               	btfsc	3,0
 13063  105D  287F               	goto	l7866
 13064  105E  30FF               	movlw	255
 13065  105F  0022               	movlb	2	; select bank2
 13066  1060  00C5               	movwf	_ldexp$2615^(0+256)
 13067  1061  307F               	movlw	127
 13068  1062  00C6               	movwf	(_ldexp$2615+1)^(0+256)
 13069  1063  307F               	movlw	127
 13070  1064  00C7               	movwf	(_ldexp$2615+2)^(0+256)
 13071  1065  0845               	movf	_ldexp$2615^(0+256),w
 13072  1066  0021               	movlb	1	; select bank1
 13073  1067  00BE               	movwf	___ftneg@f1^(0+128)
 13074  1068  0022               	movlb	2	; select bank2
 13075  1069  0846               	movf	(_ldexp$2615+1)^(0+256),w
 13076  106A  0021               	movlb	1	; select bank1
 13077  106B  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13078  106C  0022               	movlb	2	; select bank2
 13079  106D  0847               	movf	(_ldexp$2615+2)^(0+256),w
 13080  106E  0021               	movlb	1	; select bank1
 13081  106F  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13082  1070  31AF  2779         	fcall	___ftneg
 13083  1072  0021               	movlb	1	; select bank1
 13084  1073  083E               	movf	?___ftneg^(0+128),w
 13085  1074  0022               	movlb	2	; select bank2
 13086  1075  00BE               	movwf	?_ldexp^(0+256)
 13087  1076  0021               	movlb	1	; select bank1
 13088  1077  083F               	movf	(?___ftneg+1)^(0+128),w
 13089  1078  0022               	movlb	2	; select bank2
 13090  1079  00BF               	movwf	(?_ldexp+1)^(0+256)
 13091  107A  0021               	movlb	1	; select bank1
 13092  107B  0840               	movf	(?___ftneg+2)^(0+128),w
 13093  107C  0022               	movlb	2	; select bank2
 13094  107D  00C0               	movwf	(?_ldexp+2)^(0+256)
 13095  107E  0008               	return
 13096  107F                     l7866:	
 13097  107F  30FF               	movlw	255
 13098  1080  0022               	movlb	2	; select bank2
 13099  1081  00BE               	movwf	?_ldexp^(0+256)
 13100  1082  307F               	movlw	127
 13101  1083  00BF               	movwf	(?_ldexp+1)^(0+256)
 13102  1084  307F               	movlw	127
 13103  1085  00C0               	movwf	(?_ldexp+2)^(0+256)
 13104  1086  0008               	return
 13105  1087                     l7870:	
 13106  1087  0022               	movlb	2	; select bank2
 13107  1088  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13108  1089  00C4               	movwf	(??_ldexp^(0+256)+1)
 13109  108A  0841               	movf	ldexp@newexp^(0+256),w
 13110  108B  00C3               	movwf	??_ldexp^(0+256)
 13111  108C  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13112  108D  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13113  108E  0CC3               	rrf	??_ldexp^(0+256),f
 13114  108F  0840               	movf	(ldexp@value^(0+256)+2),w
 13115  1090  0643               	xorwf	??_ldexp^(0+256),w
 13116  1091  3980               	andlw	-128
 13117  1092  0643               	xorwf	??_ldexp^(0+256),w
 13118  1093  00C0               	movwf	(ldexp@value^(0+256)+2)
 13119  1094  0841               	movf	ldexp@newexp^(0+256),w
 13120  1095  3901               	andlw	1
 13121  1096  00C3               	movwf	??_ldexp^(0+256)
 13122  1097  0CC3               	rrf	??_ldexp^(0+256),f
 13123  1098  0CC3               	rrf	??_ldexp^(0+256),f
 13124  1099  083F               	movf	(ldexp@value^(0+256)+1),w
 13125  109A  0643               	xorwf	??_ldexp^(0+256),w
 13126  109B  397F               	andlw	-129
 13127  109C  0643               	xorwf	??_ldexp^(0+256),w
 13128  109D  00BF               	movwf	(ldexp@value^(0+256)+1)
 13129  109E  0008               	return
 13130  109F                     __end_of_ldexp:	
 13131                           
 13132                           	psect	text31
 13133  211A                     __ptext31:	
 13134 ;; *************** function ___lltoft *****************
 13135 ;; Defined at:
 13136 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13137 ;; Parameters:    Size  Location     Type
 13138 ;;  c               4    8[BANK1 ] unsigned long 
 13139 ;; Auto vars:     Size  Location     Type
 13140 ;;  exp             1   13[BANK1 ] unsigned char 
 13141 ;; Return value:  Size  Location     Type
 13142 ;;                  3    8[BANK1 ] float 
 13143 ;; Registers used:
 13144 ;;		wreg, status,2, status,0, pclath, cstack
 13145 ;; Tracked objects:
 13146 ;;		On entry : 0/0
 13147 ;;		On exit  : 0/0
 13148 ;;		Unchanged: 0/0
 13149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13150 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13151 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13152 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13153 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13154 ;;Total ram usage:        6 bytes
 13155 ;; Hardware stack levels used:    1
 13156 ;; Hardware stack levels required when called:    4
 13157 ;; This function calls:
 13158 ;;		___ftpack
 13159 ;; This function is called by:
 13160 ;;		_pow
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           
 13165                           ;psect for function ___lltoft
 13166  211A                     ___lltoft:	
 13167                           
 13168                           ;incstack = 0
 13169                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13170  211A  308E               	movlw	142
 13171  211B  0021               	movlb	1	; select bank1
 13172  211C  00AC               	movwf	??___lltoft^(0+128)
 13173  211D  082C               	movf	??___lltoft^(0+128),w
 13174  211E  00AD               	movwf	___lltoft@exp^(0+128)
 13175  211F                     l7938:	
 13176  211F  30FF               	movlw	255
 13177  2120  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13178  2121  1903               	btfsc	3,2
 13179  2122  292F               	goto	l7940
 13180  2123  3001               	movlw	1
 13181  2124                     u8285:	
 13182  2124  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13183  2125  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13184  2126  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13185  2127  0CA8               	rrf	___lltoft@c^(0+128),f
 13186  2128  0B89               	decfsz	9,f
 13187  2129  2924               	goto	u8285
 13188  212A  3001               	movlw	1
 13189  212B  00AC               	movwf	??___lltoft^(0+128)
 13190  212C  082C               	movf	??___lltoft^(0+128),w
 13191  212D  07AD               	addwf	___lltoft@exp^(0+128),f
 13192  212E  291F               	goto	l7938
 13193  212F                     l7940:	
 13194  212F  0828               	movf	___lltoft@c^(0+128),w
 13195  2130  00A0               	movwf	___ftpack@arg^(0+128)
 13196  2131  0829               	movf	(___lltoft@c+1)^(0+128),w
 13197  2132  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13198  2133  082A               	movf	(___lltoft@c+2)^(0+128),w
 13199  2134  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13200  2135  082D               	movf	___lltoft@exp^(0+128),w
 13201  2136  00AC               	movwf	??___lltoft^(0+128)
 13202  2137  082C               	movf	??___lltoft^(0+128),w
 13203  2138  00A3               	movwf	___ftpack@exp^(0+128)
 13204  2139  01A4               	clrf	___ftpack@sign^(0+128)
 13205  213A  3188  2002         	fcall	___ftpack
 13206  213C  0021               	movlb	1	; select bank1
 13207  213D  0820               	movf	?___ftpack^(0+128),w
 13208  213E  00A8               	movwf	?___lltoft^(0+128)
 13209  213F  0821               	movf	(?___ftpack+1)^(0+128),w
 13210  2140  00A9               	movwf	(?___lltoft+1)^(0+128)
 13211  2141  0822               	movf	(?___ftpack+2)^(0+128),w
 13212  2142  00AA               	movwf	(?___lltoft+2)^(0+128)
 13213  2143  0008               	return
 13214  2144                     __end_of___lltoft:	
 13215                           
 13216                           	psect	text32
 13217  264B                     __ptext32:	
 13218 ;; *************** function _read_top_tactile *****************
 13219 ;; Defined at:
 13220 ;;		line 50 in file "tactiles.c"
 13221 ;; Parameters:    Size  Location     Type
 13222 ;;		None
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;		None
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  1    wreg      void 
 13227 ;; Registers used:
 13228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13236 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13237 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13238 ;;Total ram usage:        1 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; Hardware stack levels required when called:    5
 13241 ;; This function calls:
 13242 ;;		_set_leds_top
 13243 ;;		_wait_ms
 13244 ;; This function is called by:
 13245 ;;		_main
 13246 ;; This function uses a non-reentrant model
 13247 ;;
 13248                           
 13249                           
 13250                           ;psect for function _read_top_tactile
 13251  264B                     _read_top_tactile:	
 13252                           
 13253                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13254                           
 13255                           ;incstack = 0
 13256                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13257  264B  0020               	movlb	0	; select bank0
 13258  264C  1A8F               	btfsc	15,5	;volatile
 13259  264D  2E55               	goto	l8718
 13260                           
 13261                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13262  264E  0023               	movlb	3	; select bank3
 13263  264F  0846               	movf	_topTactile_pressed^(0+384),w
 13264  2650  1903               	btfsc	3,2
 13265  2651  2E60               	goto	l978
 13266                           
 13267                           ;tactiles.c: 62: topTactile_pressed--;
 13268  2652  3001               	movlw	1
 13269  2653  02C6               	subwf	_topTactile_pressed^(0+384),f
 13270                           
 13271                           ;tactiles.c: 63: }
 13272                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13273  2654  2E60               	goto	l978
 13274  2655                     l8718:	
 13275  2655  3019               	movlw	25
 13276  2656  0023               	movlb	3	; select bank3
 13277  2657  0246               	subwf	_topTactile_pressed^(0+384),w
 13278  2658  1803               	skipnc
 13279  2659  2E60               	goto	l978
 13280                           
 13281                           ;tactiles.c: 65: topTactile_pressed++;
 13282  265A  3001               	movlw	1
 13283  265B  0021               	movlb	1	; select bank1
 13284  265C  00B2               	movwf	??_read_top_tactile^(0+128)
 13285  265D  0832               	movf	??_read_top_tactile^(0+128),w
 13286  265E  0023               	movlb	3	; select bank3
 13287  265F  07C6               	addwf	_topTactile_pressed^(0+384),f
 13288  2660                     l978:	
 13289                           
 13290                           ;tactiles.c: 66: }
 13291                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13292  2660  0846               	movf	_topTactile_pressed^(0+384),w
 13293  2661  1D03               	btfss	3,2
 13294  2662  0008               	return
 13295                           
 13296                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13297  2663  0020               	movlb	0	; select bank0
 13298  2664  0851               	movf	_top_push_state,w
 13299  2665  3E01               	addlw	1
 13300  2666  00D1               	movwf	_top_push_state
 13301  2667  3000               	movlw	0
 13302  2668  3D52               	addwfc	_top_push_state+1,w
 13303  2669  00D2               	movwf	_top_push_state+1
 13304                           
 13305                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13306  266A  0852               	movf	_top_push_state+1,w
 13307  266B  3A80               	xorlw	128
 13308  266C  0021               	movlb	1	; select bank1
 13309  266D  00B2               	movwf	??_read_top_tactile^(0+128)
 13310  266E  3080               	movlw	128
 13311  266F  0232               	subwf	??_read_top_tactile^(0+128),w
 13312  2670  1D03               	skipz
 13313  2671  2E75               	goto	u9615
 13314  2672  3007               	movlw	7
 13315  2673  0020               	movlb	0	; select bank0
 13316  2674  0251               	subwf	_top_push_state,w
 13317  2675                     u9615:	
 13318  2675  1C03               	skipc
 13319  2676  2E7C               	goto	l8728
 13320                           
 13321                           ;tactiles.c: 75: top_push_state = 1;
 13322  2677  3001               	movlw	1
 13323  2678  0020               	movlb	0	; select bank0
 13324  2679  00D1               	movwf	_top_push_state
 13325  267A  3000               	movlw	0
 13326  267B  00D2               	movwf	_top_push_state+1
 13327  267C                     l8728:	
 13328                           
 13329                           ;tactiles.c: 76: }
 13330                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13331  267C  0020               	movlb	0	; select bank0
 13332  267D  0852               	movf	_top_push_state+1,w
 13333  267E  0021               	movlb	1	; select bank1
 13334  267F  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13335  2680  0020               	movlb	0	; select bank0
 13336  2681  0851               	movf	_top_push_state,w
 13337  2682  0021               	movlb	1	; select bank1
 13338  2683  00A0               	movwf	set_leds_top@x^(0+128)
 13339  2684  3001               	movlw	1
 13340  2685  00A2               	movwf	set_leds_top@ledState^(0+128)
 13341  2686  3000               	movlw	0
 13342  2687  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13343  2688  31A7  273A  31A6   	fcall	_set_leds_top
 13344                           
 13345                           ;tactiles.c: 78: delay_time_changed = 1;
 13346  268B  0023               	movlb	3	; select bank3
 13347  268C  01DB               	clrf	_delay_time_changed^(0+384)
 13348  268D  0ADB               	incf	_delay_time_changed^(0+384),f
 13349  268E                     l982:	
 13350                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13351                           
 13352  268E  0020               	movlb	0	; select bank0
 13353  268F  1E8F               	btfss	15,5	;volatile
 13354  2690  2E8E               	goto	l982
 13355                           
 13356                           ;tactiles.c: 82: }
 13357                           ;tactiles.c: 83: wait_ms(20);
 13358  2691  3014               	movlw	20
 13359  2692  0021               	movlb	1	; select bank1
 13360  2693  00AC               	movwf	wait_ms@timeSec^(0+128)
 13361  2694  3000               	movlw	0
 13362  2695  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13363  2696  31A2  2201         	fcall	_wait_ms
 13364  2698  0008               	return
 13365  2699                     __end_of_read_top_tactile:	
 13366                           
 13367                           	psect	text33
 13368  25B6                     __ptext33:	
 13369 ;; *************** function _read_bottom_tactile *****************
 13370 ;; Defined at:
 13371 ;;		line 18 in file "tactiles.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;		None
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;		None
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      void 
 13378 ;; Registers used:
 13379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13387 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13388 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13389 ;;Total ram usage:        1 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    5
 13392 ;; This function calls:
 13393 ;;		_set_leds_bottom
 13394 ;;		_wait_ms
 13395 ;; This function is called by:
 13396 ;;		_main
 13397 ;; This function uses a non-reentrant model
 13398 ;;
 13399                           
 13400                           
 13401                           ;psect for function _read_bottom_tactile
 13402  25B6                     _read_bottom_tactile:	
 13403                           
 13404                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13405                           
 13406                           ;incstack = 0
 13407                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13408  25B6  0020               	movlb	0	; select bank0
 13409  25B7  1B0F               	btfsc	15,6	;volatile
 13410  25B8  2DC0               	goto	l8696
 13411                           
 13412                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13413  25B9  0023               	movlb	3	; select bank3
 13414  25BA  083D               	movf	_bottomTactile_pressed^(0+384),w
 13415  25BB  1903               	btfsc	3,2
 13416  25BC  2DCB               	goto	l966
 13417                           
 13418                           ;tactiles.c: 29: bottomTactile_pressed--;
 13419  25BD  3001               	movlw	1
 13420  25BE  02BD               	subwf	_bottomTactile_pressed^(0+384),f
 13421                           
 13422                           ;tactiles.c: 30: }
 13423                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13424  25BF  2DCB               	goto	l966
 13425  25C0                     l8696:	
 13426  25C0  3019               	movlw	25
 13427  25C1  0023               	movlb	3	; select bank3
 13428  25C2  023D               	subwf	_bottomTactile_pressed^(0+384),w
 13429  25C3  1803               	skipnc
 13430  25C4  2DCB               	goto	l966
 13431                           
 13432                           ;tactiles.c: 32: bottomTactile_pressed++;
 13433  25C5  3001               	movlw	1
 13434  25C6  0021               	movlb	1	; select bank1
 13435  25C7  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13436  25C8  0832               	movf	??_read_bottom_tactile^(0+128),w
 13437  25C9  0023               	movlb	3	; select bank3
 13438  25CA  07BD               	addwf	_bottomTactile_pressed^(0+384),f
 13439  25CB                     l966:	
 13440                           
 13441                           ;tactiles.c: 33: }
 13442                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13443  25CB  083D               	movf	_bottomTactile_pressed^(0+384),w
 13444  25CC  1D03               	btfss	3,2
 13445  25CD  0008               	return
 13446                           
 13447                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13448  25CE  0020               	movlb	0	; select bank0
 13449  25CF  084D               	movf	_bottom_push_state,w
 13450  25D0  3E01               	addlw	1
 13451  25D1  00CD               	movwf	_bottom_push_state
 13452  25D2  3000               	movlw	0
 13453  25D3  3D4E               	addwfc	_bottom_push_state+1,w
 13454  25D4  00CE               	movwf	_bottom_push_state+1
 13455                           
 13456                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13457  25D5  084E               	movf	_bottom_push_state+1,w
 13458  25D6  3A80               	xorlw	128
 13459  25D7  0021               	movlb	1	; select bank1
 13460  25D8  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13461  25D9  3080               	movlw	128
 13462  25DA  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13463  25DB  1D03               	skipz
 13464  25DC  2DE0               	goto	u9555
 13465  25DD  3006               	movlw	6
 13466  25DE  0020               	movlb	0	; select bank0
 13467  25DF  024D               	subwf	_bottom_push_state,w
 13468  25E0                     u9555:	
 13469  25E0  1C03               	skipc
 13470  25E1  2DE7               	goto	l8706
 13471                           
 13472                           ;tactiles.c: 39: bottom_push_state = 1;
 13473  25E2  3001               	movlw	1
 13474  25E3  0020               	movlb	0	; select bank0
 13475  25E4  00CD               	movwf	_bottom_push_state
 13476  25E5  3000               	movlw	0
 13477  25E6  00CE               	movwf	_bottom_push_state+1
 13478  25E7                     l8706:	
 13479                           
 13480                           ;tactiles.c: 40: }
 13481                           ;tactiles.c: 41: modulation_changed = 1;
 13482  25E7  0023               	movlb	3	; select bank3
 13483  25E8  01C1               	clrf	_modulation_changed^(0+384)
 13484  25E9  0AC1               	incf	_modulation_changed^(0+384),f
 13485                           
 13486                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13487  25EA  0020               	movlb	0	; select bank0
 13488  25EB  084E               	movf	_bottom_push_state+1,w
 13489  25EC  0021               	movlb	1	; select bank1
 13490  25ED  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13491  25EE  0020               	movlb	0	; select bank0
 13492  25EF  084D               	movf	_bottom_push_state,w
 13493  25F0  0021               	movlb	1	; select bank1
 13494  25F1  00A0               	movwf	set_leds_bottom@x^(0+128)
 13495  25F2  31A2  22A5  31A5   	fcall	_set_leds_bottom
 13496  25F5                     l970:	
 13497                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13498                           
 13499  25F5  0020               	movlb	0	; select bank0
 13500  25F6  1F0F               	btfss	15,6	;volatile
 13501  25F7  2DF5               	goto	l970
 13502                           
 13503                           ;tactiles.c: 45: }
 13504                           ;tactiles.c: 46: wait_ms(20);
 13505  25F8  3014               	movlw	20
 13506  25F9  0021               	movlb	1	; select bank1
 13507  25FA  00AC               	movwf	wait_ms@timeSec^(0+128)
 13508  25FB  3000               	movlw	0
 13509  25FC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13510  25FD  31A2  2201         	fcall	_wait_ms
 13511  25FF  0008               	return
 13512  2600                     __end_of_read_bottom_tactile:	
 13513                           
 13514                           	psect	text34
 13515  1B7A                     __ptext34:	
 13516 ;; *************** function _map *****************
 13517 ;; Defined at:
 13518 ;;		line 177 in file "user.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;  x               3   62[BANK1 ] float 
 13521 ;;  in_min          3   65[BANK1 ] float 
 13522 ;;  in_max          3   68[BANK1 ] float 
 13523 ;;  out_min         3   71[BANK1 ] float 
 13524 ;;  out_max         3   74[BANK1 ] float 
 13525 ;; Auto vars:     Size  Location     Type
 13526 ;;		None
 13527 ;; Return value:  Size  Location     Type
 13528 ;;                  3   62[BANK1 ] float 
 13529 ;; Registers used:
 13530 ;;		wreg, status,2, status,0, pclath, cstack
 13531 ;; Tracked objects:
 13532 ;;		On entry : 0/0
 13533 ;;		On exit  : 0/0
 13534 ;;		Unchanged: 0/0
 13535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13536 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13537 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13539 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13540 ;;Total ram usage:       18 bytes
 13541 ;; Hardware stack levels used:    1
 13542 ;; Hardware stack levels required when called:    5
 13543 ;; This function calls:
 13544 ;;		___ftadd
 13545 ;;		___ftdiv
 13546 ;;		___ftmul
 13547 ;;		___ftneg
 13548 ;; This function is called by:
 13549 ;;		_main
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           
 13554                           ;psect for function _map
 13555  1B7A                     _map:	
 13556                           
 13557                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13558                           
 13559                           ;incstack = 0
 13560                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13561  1B7A  0021               	movlb	1	; select bank1
 13562  1B7B  0864               	movf	map@in_max^(0+128),w
 13563  1B7C  00C1               	movwf	___ftadd@f1^(0+128)
 13564  1B7D  0865               	movf	(map@in_max+1)^(0+128),w
 13565  1B7E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13566  1B7F  0866               	movf	(map@in_max+2)^(0+128),w
 13567  1B80  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13568  1B81  0861               	movf	map@in_min^(0+128),w
 13569  1B82  00BE               	movwf	___ftneg@f1^(0+128)
 13570  1B83  0862               	movf	(map@in_min+1)^(0+128),w
 13571  1B84  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13572  1B85  0863               	movf	(map@in_min+2)^(0+128),w
 13573  1B86  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13574  1B87  31AF  2779  319B   	fcall	___ftneg
 13575  1B8A  0021               	movlb	1	; select bank1
 13576  1B8B  083E               	movf	?___ftneg^(0+128),w
 13577  1B8C  00C4               	movwf	___ftadd@f2^(0+128)
 13578  1B8D  083F               	movf	(?___ftneg+1)^(0+128),w
 13579  1B8E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13580  1B8F  0840               	movf	(?___ftneg+2)^(0+128),w
 13581  1B90  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13582  1B91  3192  225B  319B   	fcall	___ftadd
 13583  1B94  0021               	movlb	1	; select bank1
 13584  1B95  0841               	movf	?___ftadd^(0+128),w
 13585  1B96  00CE               	movwf	___ftdiv@f2^(0+128)
 13586  1B97  0842               	movf	(?___ftadd+1)^(0+128),w
 13587  1B98  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13588  1B99  0843               	movf	(?___ftadd+2)^(0+128),w
 13589  1B9A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13590  1B9B  086A               	movf	map@out_max^(0+128),w
 13591  1B9C  00C1               	movwf	___ftadd@f1^(0+128)
 13592  1B9D  086B               	movf	(map@out_max+1)^(0+128),w
 13593  1B9E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13594  1B9F  086C               	movf	(map@out_max+2)^(0+128),w
 13595  1BA0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13596  1BA1  0867               	movf	map@out_min^(0+128),w
 13597  1BA2  00BE               	movwf	___ftneg@f1^(0+128)
 13598  1BA3  0868               	movf	(map@out_min+1)^(0+128),w
 13599  1BA4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13600  1BA5  0869               	movf	(map@out_min+2)^(0+128),w
 13601  1BA6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13602  1BA7  31AF  2779  319B   	fcall	___ftneg
 13603  1BAA  0021               	movlb	1	; select bank1
 13604  1BAB  083E               	movf	?___ftneg^(0+128),w
 13605  1BAC  00C4               	movwf	___ftadd@f2^(0+128)
 13606  1BAD  083F               	movf	(?___ftneg+1)^(0+128),w
 13607  1BAE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13608  1BAF  0840               	movf	(?___ftneg+2)^(0+128),w
 13609  1BB0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13610  1BB1  3192  225B  319B   	fcall	___ftadd
 13611  1BB4  0021               	movlb	1	; select bank1
 13612  1BB5  0841               	movf	?___ftadd^(0+128),w
 13613  1BB6  00AE               	movwf	___ftmul@f1^(0+128)
 13614  1BB7  0842               	movf	(?___ftadd+1)^(0+128),w
 13615  1BB8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13616  1BB9  0843               	movf	(?___ftadd+2)^(0+128),w
 13617  1BBA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13618  1BBB  085E               	movf	map@x^(0+128),w
 13619  1BBC  00C1               	movwf	___ftadd@f1^(0+128)
 13620  1BBD  085F               	movf	(map@x+1)^(0+128),w
 13621  1BBE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13622  1BBF  0860               	movf	(map@x+2)^(0+128),w
 13623  1BC0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13624  1BC1  0861               	movf	map@in_min^(0+128),w
 13625  1BC2  00BE               	movwf	___ftneg@f1^(0+128)
 13626  1BC3  0862               	movf	(map@in_min+1)^(0+128),w
 13627  1BC4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13628  1BC5  0863               	movf	(map@in_min+2)^(0+128),w
 13629  1BC6  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13630  1BC7  31AF  2779  319B   	fcall	___ftneg
 13631  1BCA  0021               	movlb	1	; select bank1
 13632  1BCB  083E               	movf	?___ftneg^(0+128),w
 13633  1BCC  00C4               	movwf	___ftadd@f2^(0+128)
 13634  1BCD  083F               	movf	(?___ftneg+1)^(0+128),w
 13635  1BCE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13636  1BCF  0840               	movf	(?___ftneg+2)^(0+128),w
 13637  1BD0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13638  1BD1  3192  225B  319B   	fcall	___ftadd
 13639  1BD4  0021               	movlb	1	; select bank1
 13640  1BD5  0841               	movf	?___ftadd^(0+128),w
 13641  1BD6  00B1               	movwf	___ftmul@f2^(0+128)
 13642  1BD7  0842               	movf	(?___ftadd+1)^(0+128),w
 13643  1BD8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13644  1BD9  0843               	movf	(?___ftadd+2)^(0+128),w
 13645  1BDA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13646  1BDB  319E  2691  319B   	fcall	___ftmul
 13647  1BDE  0021               	movlb	1	; select bank1
 13648  1BDF  082E               	movf	?___ftmul^(0+128),w
 13649  1BE0  00D1               	movwf	___ftdiv@f1^(0+128)
 13650  1BE1  082F               	movf	(?___ftmul+1)^(0+128),w
 13651  1BE2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13652  1BE3  0830               	movf	(?___ftmul+2)^(0+128),w
 13653  1BE4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13654  1BE5  319D  253D  319B   	fcall	___ftdiv
 13655  1BE8  0021               	movlb	1	; select bank1
 13656  1BE9  084E               	movf	?___ftdiv^(0+128),w
 13657  1BEA  00ED               	movwf	_map$2809^(0+128)
 13658  1BEB  084F               	movf	(?___ftdiv+1)^(0+128),w
 13659  1BEC  00EE               	movwf	(_map$2809+1)^(0+128)
 13660  1BED  0850               	movf	(?___ftdiv+2)^(0+128),w
 13661  1BEE  00EF               	movwf	(_map$2809+2)^(0+128)
 13662                           
 13663                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13664  1BEF  0867               	movf	map@out_min^(0+128),w
 13665  1BF0  00C1               	movwf	___ftadd@f1^(0+128)
 13666  1BF1  0868               	movf	(map@out_min+1)^(0+128),w
 13667  1BF2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13668  1BF3  0869               	movf	(map@out_min+2)^(0+128),w
 13669  1BF4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13670  1BF5  086D               	movf	_map$2809^(0+128),w
 13671  1BF6  00C4               	movwf	___ftadd@f2^(0+128)
 13672  1BF7  086E               	movf	(_map$2809+1)^(0+128),w
 13673  1BF8  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13674  1BF9  086F               	movf	(_map$2809+2)^(0+128),w
 13675  1BFA  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13676  1BFB  3192  225B         	fcall	___ftadd
 13677  1BFD  0021               	movlb	1	; select bank1
 13678  1BFE  0841               	movf	?___ftadd^(0+128),w
 13679  1BFF  00DE               	movwf	?_map^(0+128)
 13680  1C00  0842               	movf	(?___ftadd+1)^(0+128),w
 13681  1C01  00DF               	movwf	(?_map+1)^(0+128)
 13682  1C02  0843               	movf	(?___ftadd+2)^(0+128),w
 13683  1C03  00E0               	movwf	(?_map+2)^(0+128)
 13684  1C04  0008               	return
 13685  1C05                     __end_of_map:	
 13686                           
 13687                           	psect	text35
 13688  2F98                     __ptext35:	
 13689 ;; *************** function _initSwitchBypass *****************
 13690 ;; Defined at:
 13691 ;;		line 29 in file "SwitchBypass.c"
 13692 ;; Parameters:    Size  Location     Type
 13693 ;;		None
 13694 ;; Auto vars:     Size  Location     Type
 13695 ;;  initState       2   22[BANK1 ] int 
 13696 ;; Return value:  Size  Location     Type
 13697 ;;                  1    wreg      void 
 13698 ;; Registers used:
 13699 ;;		wreg, status,2, status,0, pclath, cstack
 13700 ;; Tracked objects:
 13701 ;;		On entry : 0/0
 13702 ;;		On exit  : 0/0
 13703 ;;		Unchanged: 0/0
 13704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13706 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13708 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13709 ;;Total ram usage:        2 bytes
 13710 ;; Hardware stack levels used:    1
 13711 ;; Hardware stack levels required when called:    6
 13712 ;; This function calls:
 13713 ;;		_getSwitchBypassState
 13714 ;;		_setSwitchBypassState
 13715 ;; This function is called by:
 13716 ;;		_main
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           
 13721                           ;psect for function _initSwitchBypass
 13722  2F98                     _initSwitchBypass:	
 13723                           
 13724                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 13725                           
 13726                           ;incstack = 0
 13727                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 13728  2F98  31A0  2004  31AF   	fcall	_getSwitchBypassState
 13729  2F9B  0021               	movlb	1	; select bank1
 13730  2F9C  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 13731  2F9D  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 13732  2F9E  0820               	movf	?_getSwitchBypassState^(0+128),w
 13733  2F9F  00B6               	movwf	initSwitchBypass@initState^(0+128)
 13734                           
 13735                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 13736  2FA0  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 13737  2FA1  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 13738  2FA2  0836               	movf	initSwitchBypass@initState^(0+128),w
 13739  2FA3  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 13740  2FA4  31A5  256C         	fcall	_setSwitchBypassState
 13741  2FA6  0008               	return
 13742  2FA7                     __end_of_initSwitchBypass:	
 13743                           
 13744                           	psect	text36
 13745  256C                     __ptext36:	
 13746 ;; *************** function _setSwitchBypassState *****************
 13747 ;; Defined at:
 13748 ;;		line 134 in file "SwitchBypass.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;  f_state         2   18[BANK1 ] int 
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;		None
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      void 
 13755 ;; Registers used:
 13756 ;;		wreg, status,2, status,0, pclath, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13762 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13764 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13765 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13766 ;;Total ram usage:        4 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    5
 13769 ;; This function calls:
 13770 ;;		_updateSwitchBypassState
 13771 ;;		_wait_ms
 13772 ;; This function is called by:
 13773 ;;		_initSwitchBypass
 13774 ;;		_updateSwitchBypass
 13775 ;; This function uses a non-reentrant model
 13776 ;;
 13777                           
 13778                           
 13779                           ;psect for function _setSwitchBypassState
 13780  256C                     _setSwitchBypassState:	
 13781                           
 13782                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 13783                           
 13784                           ;incstack = 0
 13785                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 13786  256C  0020               	movlb	0	; select bank0
 13787  256D  0858               	movf	_switchBypass_state,w
 13788  256E  0021               	movlb	1	; select bank1
 13789  256F  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13790  2570  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13791  2571  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13792  2572  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 13793  2573  1D03               	skipz
 13794  2574  2D77               	goto	u8485
 13795  2575  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13796  2576  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 13797  2577                     u8485:	
 13798  2577  1903               	btfsc	3,2
 13799  2578  0008               	return
 13800                           
 13801                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 13802  2579  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13803  257A  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13804  257B  0834               	movf	??_setSwitchBypassState^(0+128),w
 13805  257C  0020               	movlb	0	; select bank0
 13806  257D  00D8               	movwf	_switchBypass_state
 13807                           
 13808                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 13809  257E  0021               	movlb	1	; select bank1
 13810  257F  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13811  2580  0022               	movlb	2	; select bank2
 13812  2581  1C03               	skipc
 13813  2582  110D               	bcf	13,2	;volatile
 13814  2583  1803               	skipnc
 13815  2584  150D               	bsf	13,2	;volatile
 13816                           
 13817                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 13818  2585  118D               	bcf	13,3	;volatile
 13819                           
 13820                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 13821  2586  0021               	movlb	1	; select bank1
 13822  2587  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 13823  2588  0027               	movlb	7	; select bank7
 13824  2589  1C03               	skipc
 13825  258A  110D               	bcf	13,2	;volatile
 13826  258B  1803               	skipnc
 13827  258C  150D               	bsf	13,2	;volatile
 13828                           
 13829                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 13830  258D  0021               	movlb	1	; select bank1
 13831  258E  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 13832  258F  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 13833  2590  1D03               	btfss	3,2
 13834  2591  2D95               	goto	u8490
 13835  2592  0027               	movlb	7	; select bank7
 13836  2593  148D               	bsf	13,1	;volatile
 13837  2594  2D97               	goto	l8146
 13838  2595                     u8490:	
 13839  2595  0027               	movlb	7	; select bank7
 13840  2596  108D               	bcf	13,1	;volatile
 13841  2597                     l8146:	
 13842                           
 13843                           ;SwitchBypass.c: 142: wait_ms(20);
 13844  2597  3014               	movlw	20
 13845  2598  0021               	movlb	1	; select bank1
 13846  2599  00AC               	movwf	wait_ms@timeSec^(0+128)
 13847  259A  3000               	movlw	0
 13848  259B  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13849  259C  31A2  2201  31A5   	fcall	_wait_ms
 13850                           
 13851                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 13852  259F  0027               	movlb	7	; select bank7
 13853  25A0  110D               	bcf	13,2	;volatile
 13854                           
 13855                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 13856  25A1  108D               	bcf	13,1	;volatile
 13857                           
 13858                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 13859  25A2  0020               	movlb	0	; select bank0
 13860  25A3  0858               	movf	_switchBypass_state,w
 13861  25A4  0021               	movlb	1	; select bank1
 13862  25A5  00B4               	movwf	??_setSwitchBypassState^(0+128)
 13863  25A6  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13864  25A7  0834               	movf	??_setSwitchBypassState^(0+128),w
 13865  25A8  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 13866  25A9  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 13867  25AA  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 13868  25AB  3188  2001  31A5   	fcall	_updateSwitchBypassState
 13869                           
 13870                           ;SwitchBypass.c: 148: wait_ms(20);
 13871  25AE  3014               	movlw	20
 13872  25AF  0021               	movlb	1	; select bank1
 13873  25B0  00AC               	movwf	wait_ms@timeSec^(0+128)
 13874  25B1  3000               	movlw	0
 13875  25B2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13876  25B3  31A2  2201         	fcall	_wait_ms
 13877  25B5  0008               	return
 13878  25B6                     __end_of_setSwitchBypassState:	
 13879                           
 13880                           	psect	text37
 13881  2201                     __ptext37:	
 13882 ;; *************** function _wait_ms *****************
 13883 ;; Defined at:
 13884 ;;		line 23 in file "system.c"
 13885 ;; Parameters:    Size  Location     Type
 13886 ;;  timeSec         2   12[BANK1 ] unsigned int 
 13887 ;; Auto vars:     Size  Location     Type
 13888 ;;  timemsl         4   14[BANK1 ] long 
 13889 ;; Return value:  Size  Location     Type
 13890 ;;                  1    wreg      void 
 13891 ;; Registers used:
 13892 ;;		wreg, status,2, status,0, pclath, cstack
 13893 ;; Tracked objects:
 13894 ;;		On entry : 0/0
 13895 ;;		On exit  : 0/0
 13896 ;;		Unchanged: 0/0
 13897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13898 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13899 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13901 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13902 ;;Total ram usage:        6 bytes
 13903 ;; Hardware stack levels used:    1
 13904 ;; Hardware stack levels required when called:    4
 13905 ;; This function calls:
 13906 ;;		___lmul
 13907 ;; This function is called by:
 13908 ;;		_ring_tactiles
 13909 ;;		_solidring_tactiles
 13910 ;;		_read_bottom_tactile
 13911 ;;		_read_top_tactile
 13912 ;;		_setSwitchBypassState
 13913 ;;		_setDoublePressState
 13914 ;;		_showError_Alternating
 13915 ;;		_show_error
 13916 ;;		_show_cancel
 13917 ;;		_star_tactiles
 13918 ;;		_initExpModeState
 13919 ;; This function uses a non-reentrant model
 13920 ;;
 13921                           
 13922                           
 13923                           ;psect for function _wait_ms
 13924  2201                     _wait_ms:	
 13925                           
 13926                           ;system.c: 25: long timemsl = 0;
 13927                           
 13928                           ;incstack = 0
 13929                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 13930  2201  3000               	movlw	0
 13931  2202  0021               	movlb	1	; select bank1
 13932  2203  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13933  2204  3000               	movlw	0
 13934  2205  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13935  2206  3000               	movlw	0
 13936  2207  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13937  2208  3000               	movlw	0
 13938  2209  00AE               	movwf	wait_ms@timemsl^(0+128)
 13939                           
 13940                           ;system.c: 26: timemsl = timeSec * 1000l;
 13941  220A  082C               	movf	wait_ms@timeSec^(0+128),w
 13942  220B  00A0               	movwf	___lmul@multiplier^(0+128)
 13943  220C  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 13944  220D  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 13945  220E  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 13946  220F  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 13947  2210  3000               	movlw	0
 13948  2211  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 13949  2212  3000               	movlw	0
 13950  2213  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 13951  2214  3003               	movlw	3
 13952  2215  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 13953  2216  30E8               	movlw	232
 13954  2217  00A4               	movwf	___lmul@multiplicand^(0+128)
 13955  2218  31A1  21D1  31A2   	fcall	___lmul
 13956  221B  0021               	movlb	1	; select bank1
 13957  221C  0823               	movf	(?___lmul+3)^(0+128),w
 13958  221D  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13959  221E  0822               	movf	(?___lmul+2)^(0+128),w
 13960  221F  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13961  2220  0821               	movf	(?___lmul+1)^(0+128),w
 13962  2221  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13963  2222  0820               	movf	?___lmul^(0+128),w
 13964  2223  00AE               	movwf	wait_ms@timemsl^(0+128)
 13965  2224                     l386:	
 13966                           ;system.c: 27: for( ; timemsl; timemsl--);
 13967                           
 13968  2224  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 13969  2225  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 13970  2226  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 13971  2227  042E               	iorwf	wait_ms@timemsl^(0+128),w
 13972  2228  1903               	btfsc	3,2
 13973  2229  0008               	return
 13974  222A  30FF               	movlw	255
 13975  222B  07AE               	addwf	wait_ms@timemsl^(0+128),f
 13976  222C  30FF               	movlw	255
 13977  222D  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 13978  222E  30FF               	movlw	255
 13979  222F  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 13980  2230  30FF               	movlw	255
 13981  2231  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 13982  2232  2A24               	goto	l386
 13983  2233                     __end_of_wait_ms:	
 13984                           
 13985                           	psect	text38
 13986  21D1                     __ptext38:	
 13987 ;; *************** function ___lmul *****************
 13988 ;; Defined at:
 13989 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;  multiplier      4    0[BANK1 ] unsigned long 
 13992 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;  product         4    8[BANK1 ] unsigned long 
 13995 ;; Return value:  Size  Location     Type
 13996 ;;                  4    0[BANK1 ] unsigned long 
 13997 ;; Registers used:
 13998 ;;		wreg, status,2, status,0
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14004 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14005 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14007 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14008 ;;Total ram usage:       12 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    3
 14011 ;; This function calls:
 14012 ;;		Nothing
 14013 ;; This function is called by:
 14014 ;;		_wait_ms
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           
 14019                           ;psect for function ___lmul
 14020  21D1                     ___lmul:	
 14021                           
 14022                           ;incstack = 0
 14023                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14024  21D1  3000               	movlw	0
 14025  21D2  0021               	movlb	1	; select bank1
 14026  21D3  00AB               	movwf	(___lmul@product+3)^(0+128)
 14027  21D4  3000               	movlw	0
 14028  21D5  00AA               	movwf	(___lmul@product+2)^(0+128)
 14029  21D6  3000               	movlw	0
 14030  21D7  00A9               	movwf	(___lmul@product+1)^(0+128)
 14031  21D8  3000               	movlw	0
 14032  21D9  00A8               	movwf	___lmul@product^(0+128)
 14033  21DA                     l7360:	
 14034  21DA  1C20               	btfss	___lmul@multiplier^(0+128),0
 14035  21DB  29E4               	goto	l7364
 14036  21DC  0824               	movf	___lmul@multiplicand^(0+128),w
 14037  21DD  07A8               	addwf	___lmul@product^(0+128),f
 14038  21DE  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14039  21DF  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14040  21E0  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14041  21E1  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14042  21E2  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14043  21E3  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14044  21E4                     l7364:	
 14045  21E4  3001               	movlw	1
 14046  21E5                     u7295:	
 14047  21E5  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14048  21E6  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14049  21E7  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14050  21E8  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14051  21E9  0B89               	decfsz	9,f
 14052  21EA  29E5               	goto	u7295
 14053  21EB  3001               	movlw	1
 14054  21EC                     u7305:	
 14055  21EC  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14056  21ED  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14057  21EE  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14058  21EF  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14059  21F0  0B89               	decfsz	9,f
 14060  21F1  29EC               	goto	u7305
 14061  21F2  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14062  21F3  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14063  21F4  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14064  21F5  0420               	iorwf	___lmul@multiplier^(0+128),w
 14065  21F6  1D03               	skipz
 14066  21F7  29DA               	goto	l7360
 14067  21F8  082B               	movf	(___lmul@product+3)^(0+128),w
 14068  21F9  00A3               	movwf	(?___lmul+3)^(0+128)
 14069  21FA  082A               	movf	(___lmul@product+2)^(0+128),w
 14070  21FB  00A2               	movwf	(?___lmul+2)^(0+128)
 14071  21FC  0829               	movf	(___lmul@product+1)^(0+128),w
 14072  21FD  00A1               	movwf	(?___lmul+1)^(0+128)
 14073  21FE  0828               	movf	___lmul@product^(0+128),w
 14074  21FF  00A0               	movwf	?___lmul^(0+128)
 14075  2200  0008               	return
 14076  2201                     __end_of___lmul:	
 14077                           
 14078                           	psect	text39
 14079  0801                     __ptext39:	
 14080 ;; *************** function _updateSwitchBypassState *****************
 14081 ;; Defined at:
 14082 ;;		line 96 in file "state_manager.c"
 14083 ;; Parameters:    Size  Location     Type
 14084 ;;  state           2    0[BANK1 ] int 
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;		None
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  1    wreg      void 
 14089 ;; Registers used:
 14090 ;;		None
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14096 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14099 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14100 ;;Total ram usage:        2 bytes
 14101 ;; Hardware stack levels used:    1
 14102 ;; Hardware stack levels required when called:    3
 14103 ;; This function calls:
 14104 ;;		Nothing
 14105 ;; This function is called by:
 14106 ;;		_setSwitchBypassState
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           
 14111                           ;psect for function _updateSwitchBypassState
 14112  0801                     _updateSwitchBypassState:	
 14113                           
 14114                           ;incstack = 0
 14115                           ; Regs used in _updateSwitchBypassState: []
 14116  0801  0008               	return
 14117  0802                     __end_of_updateSwitchBypassState:	
 14118                           
 14119                           	psect	text40
 14120  2004                     __ptext40:	
 14121 ;; *************** function _getSwitchBypassState *****************
 14122 ;; Defined at:
 14123 ;;		line 103 in file "state_manager.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;		None
 14126 ;; Auto vars:     Size  Location     Type
 14127 ;;		None
 14128 ;; Return value:  Size  Location     Type
 14129 ;;                  2    0[BANK1 ] int 
 14130 ;; Registers used:
 14131 ;;		status,2
 14132 ;; Tracked objects:
 14133 ;;		On entry : 0/0
 14134 ;;		On exit  : 0/0
 14135 ;;		Unchanged: 0/0
 14136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14137 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14140 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14141 ;;Total ram usage:        2 bytes
 14142 ;; Hardware stack levels used:    1
 14143 ;; Hardware stack levels required when called:    3
 14144 ;; This function calls:
 14145 ;;		Nothing
 14146 ;; This function is called by:
 14147 ;;		_initSwitchBypass
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _getSwitchBypassState
 14153  2004                     _getSwitchBypassState:	
 14154                           
 14155                           ;state_manager.c: 108: return 0;
 14156                           
 14157                           ;incstack = 0
 14158                           ; Regs used in _getSwitchBypassState: [status,2]
 14159  2004  0021               	movlb	1	; select bank1
 14160  2005  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14161  2006  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14162  2007  0008               	return
 14163  2008                     __end_of_getSwitchBypassState:	
 14164                           
 14165                           	psect	text41
 14166  1AF3                     __ptext41:	
 14167 ;; *************** function _calcSinArray *****************
 14168 ;; Defined at:
 14169 ;;		line 15 in file "modulation.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;		None
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;  tmpVal          3   56[BANK2 ] int 
 14174 ;;  iAngle          1   59[BANK2 ] unsigned char 
 14175 ;;  x               1   55[BANK2 ] unsigned char 
 14176 ;; Return value:  Size  Location     Type
 14177 ;;                  1    wreg      void 
 14178 ;; Registers used:
 14179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14180 ;; Tracked objects:
 14181 ;;		On entry : 0/0
 14182 ;;		On exit  : 0/0
 14183 ;;		Unchanged: 0/0
 14184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14186 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14187 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14188 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14189 ;;Total ram usage:        9 bytes
 14190 ;; Hardware stack levels used:    1
 14191 ;; Hardware stack levels required when called:    7
 14192 ;; This function calls:
 14193 ;;		___awtoft
 14194 ;;		___ftdiv
 14195 ;;		___ftmul
 14196 ;;		___wmul
 14197 ;;		_sin
 14198 ;; This function is called by:
 14199 ;;		_main
 14200 ;; This function uses a non-reentrant model
 14201 ;;
 14202                           
 14203                           
 14204                           ;psect for function _calcSinArray
 14205  1AF3                     _calcSinArray:	
 14206                           
 14207                           ;modulation.c: 16: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14208                           
 14209                           ;incstack = 0
 14210                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14211  1AF3  0022               	movlb	2	; select bank2
 14212  1AF4  01DB               	clrf	calcSinArray@iAngle^(0+256)
 14213  1AF5  3078               	movlw	120
 14214  1AF6  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14215  1AF7  1803               	btfsc	3,0
 14216  1AF8  2B77               	goto	l1884
 14217  1AF9                     l8310:	
 14218                           
 14219                           ;modulation.c: 17: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14220  1AF9  3000               	movlw	0
 14221  1AFA  0021               	movlb	1	; select bank1
 14222  1AFB  00CE               	movwf	___ftdiv@f2^(0+128)
 14223  1AFC  3034               	movlw	52
 14224  1AFD  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14225  1AFE  3043               	movlw	67
 14226  1AFF  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14227  1B00  3010               	movlw	16
 14228  1B01  00AE               	movwf	___ftmul@f1^(0+128)
 14229  1B02  3049               	movlw	73
 14230  1B03  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14231  1B04  3040               	movlw	64
 14232  1B05  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14233  1B06  0022               	movlb	2	; select bank2
 14234  1B07  085B               	movf	calcSinArray@iAngle^(0+256),w
 14235  1B08  00D3               	movwf	??_calcSinArray^(0+256)
 14236  1B09  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14237  1B0A  0853               	movf	??_calcSinArray^(0+256),w
 14238  1B0B  00AE               	movwf	___wmul@multiplier^(0+256)
 14239  1B0C  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14240  1B0D  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14241  1B0E  3003               	movlw	3
 14242  1B0F  00B0               	movwf	___wmul@multiplicand^(0+256)
 14243  1B10  3000               	movlw	0
 14244  1B11  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14245  1B12  31A0  2056  319A   	fcall	___wmul
 14246  1B15  0022               	movlb	2	; select bank2
 14247  1B16  082F               	movf	(?___wmul+1)^(0+256),w
 14248  1B17  0021               	movlb	1	; select bank1
 14249  1B18  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14250  1B19  0022               	movlb	2	; select bank2
 14251  1B1A  082E               	movf	?___wmul^(0+256),w
 14252  1B1B  0021               	movlb	1	; select bank1
 14253  1B1C  00A8               	movwf	___awtoft@c^(0+128)
 14254  1B1D  31A0  20AE  319A   	fcall	___awtoft
 14255  1B20  0021               	movlb	1	; select bank1
 14256  1B21  0828               	movf	?___awtoft^(0+128),w
 14257  1B22  00B1               	movwf	___ftmul@f2^(0+128)
 14258  1B23  0829               	movf	(?___awtoft+1)^(0+128),w
 14259  1B24  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14260  1B25  082A               	movf	(?___awtoft+2)^(0+128),w
 14261  1B26  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14262  1B27  319E  2691  319A   	fcall	___ftmul
 14263  1B2A  0021               	movlb	1	; select bank1
 14264  1B2B  082E               	movf	?___ftmul^(0+128),w
 14265  1B2C  00D1               	movwf	___ftdiv@f1^(0+128)
 14266  1B2D  082F               	movf	(?___ftmul+1)^(0+128),w
 14267  1B2E  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14268  1B2F  0830               	movf	(?___ftmul+2)^(0+128),w
 14269  1B30  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14270  1B31  319D  253D  319A   	fcall	___ftdiv
 14271  1B34  0021               	movlb	1	; select bank1
 14272  1B35  084E               	movf	?___ftdiv^(0+128),w
 14273  1B36  0022               	movlb	2	; select bank2
 14274  1B37  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14275  1B38  0021               	movlb	1	; select bank1
 14276  1B39  084F               	movf	(?___ftdiv+1)^(0+128),w
 14277  1B3A  0022               	movlb	2	; select bank2
 14278  1B3B  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14279  1B3C  0021               	movlb	1	; select bank1
 14280  1B3D  0850               	movf	(?___ftdiv+2)^(0+128),w
 14281  1B3E  0022               	movlb	2	; select bank2
 14282  1B3F  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14283                           
 14284                           ;modulation.c: 18: tmpVal = sin(tmpVal);
 14285  1B40  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14286  1B41  00C5               	movwf	sin@f^(0+256)
 14287  1B42  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14288  1B43  00C6               	movwf	(sin@f+1)^(0+256)
 14289  1B44  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14290  1B45  00C7               	movwf	(sin@f+2)^(0+256)
 14291  1B46  3188  2067  319A   	fcall	_sin
 14292  1B49  0022               	movlb	2	; select bank2
 14293  1B4A  0845               	movf	?_sin^(0+256),w
 14294  1B4B  00D8               	movwf	calcSinArray@tmpVal^(0+256)
 14295  1B4C  0846               	movf	(?_sin+1)^(0+256),w
 14296  1B4D  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14297  1B4E  0847               	movf	(?_sin+2)^(0+256),w
 14298  1B4F  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14299                           
 14300                           ;modulation.c: 19: sinArray[iAngle] = tmpVal;
 14301  1B50  085B               	movf	calcSinArray@iAngle^(0+256),w
 14302  1B51  00D3               	movwf	??_calcSinArray^(0+256)
 14303  1B52  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 14304  1B53  0853               	movf	??_calcSinArray^(0+256),w
 14305  1B54  00AE               	movwf	___wmul@multiplier^(0+256)
 14306  1B55  0854               	movf	(??_calcSinArray+1)^(0+256),w
 14307  1B56  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14308  1B57  3003               	movlw	3
 14309  1B58  00B0               	movwf	___wmul@multiplicand^(0+256)
 14310  1B59  3000               	movlw	0
 14311  1B5A  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14312  1B5B  31A0  2056  319A   	fcall	___wmul
 14313  1B5E  3082               	movlw	130
 14314  1B5F  0022               	movlb	2	; select bank2
 14315  1B60  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 14316  1B61  3024               	movlw	36
 14317  1B62  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 14318  1B63  082E               	movf	?___wmul^(0+256),w
 14319  1B64  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 14320  1B65  0086               	movwf	6
 14321  1B66  082F               	movf	(?___wmul+1)^(0+256),w
 14322  1B67  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 14323  1B68  0087               	movwf	7
 14324  1B69  0858               	movf	calcSinArray@tmpVal^(0+256),w
 14325  1B6A  3FC0               	movwi [0]fsr1
 14326  1B6B  0859               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14327  1B6C  3FC1               	movwi [1]fsr1
 14328  1B6D  085A               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14329  1B6E  3FC2               	movwi [2]fsr1
 14330  1B6F  3001               	movlw	1
 14331  1B70  00D3               	movwf	??_calcSinArray^(0+256)
 14332  1B71  0853               	movf	??_calcSinArray^(0+256),w
 14333  1B72  07DB               	addwf	calcSinArray@iAngle^(0+256),f
 14334  1B73  3078               	movlw	120
 14335  1B74  025B               	subwf	calcSinArray@iAngle^(0+256),w
 14336  1B75  1C03               	skipc
 14337  1B76  2AF9               	goto	l8310
 14338  1B77                     l1884:	
 14339                           
 14340                           ;modulation.c: 20: }
 14341                           ;modulation.c: 21: char x = 1;
 14342  1B77  01D7               	clrf	calcSinArray@x^(0+256)
 14343  1B78  0AD7               	incf	calcSinArray@x^(0+256),f
 14344  1B79  0008               	return
 14345  1B7A                     __end_of_calcSinArray:	
 14346                           
 14347                           	psect	text42
 14348  0867                     __ptext42:	
 14349 ;; *************** function _sin *****************
 14350 ;; Defined at:
 14351 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 14352 ;; Parameters:    Size  Location     Type
 14353 ;;  f               3   37[BANK2 ] void 
 14354 ;; Auto vars:     Size  Location     Type
 14355 ;;  x2              3   47[BANK2 ] void 
 14356 ;;  y               3   41[BANK2 ] void 
 14357 ;;  sgn             1   50[BANK2 ] unsigned char 
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  3   37[BANK2 ] unsigned char 
 14360 ;; Registers used:
 14361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14367 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14368 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14369 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14370 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14371 ;;Total ram usage:       14 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    6
 14374 ;; This function calls:
 14375 ;;		___ftadd
 14376 ;;		___ftdiv
 14377 ;;		___ftge
 14378 ;;		___ftmul
 14379 ;;		___ftneg
 14380 ;;		___ftsub
 14381 ;;		_eval_poly
 14382 ;;		_floor
 14383 ;; This function is called by:
 14384 ;;		_calcSinArray
 14385 ;; This function uses a non-reentrant model
 14386 ;;
 14387                           
 14388                           
 14389                           ;psect for function _sin
 14390  0867                     _sin:	
 14391                           
 14392                           ;incstack = 0
 14393                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14394  0867  0022               	movlb	2	; select bank2
 14395  0868  01D2               	clrf	sin@sgn^(0+256)
 14396  0869  0845               	movf	sin@f^(0+256),w
 14397  086A  0021               	movlb	1	; select bank1
 14398  086B  00A0               	movwf	___ftge@ff1^(0+128)
 14399  086C  0022               	movlb	2	; select bank2
 14400  086D  0846               	movf	(sin@f+1)^(0+256),w
 14401  086E  0021               	movlb	1	; select bank1
 14402  086F  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14403  0870  0022               	movlb	2	; select bank2
 14404  0871  0847               	movf	(sin@f+2)^(0+256),w
 14405  0872  0021               	movlb	1	; select bank1
 14406  0873  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14407  0874  3000               	movlw	0
 14408  0875  00A3               	movwf	___ftge@ff2^(0+128)
 14409  0876  3000               	movlw	0
 14410  0877  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14411  0878  3000               	movlw	0
 14412  0879  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14413  087A  31A2  22E0  3188   	fcall	___ftge
 14414  087D  1803               	btfsc	3,0
 14415  087E  289C               	goto	l8208
 14416  087F  0022               	movlb	2	; select bank2
 14417  0880  0845               	movf	sin@f^(0+256),w
 14418  0881  0021               	movlb	1	; select bank1
 14419  0882  00BE               	movwf	___ftneg@f1^(0+128)
 14420  0883  0022               	movlb	2	; select bank2
 14421  0884  0846               	movf	(sin@f+1)^(0+256),w
 14422  0885  0021               	movlb	1	; select bank1
 14423  0886  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14424  0887  0022               	movlb	2	; select bank2
 14425  0888  0847               	movf	(sin@f+2)^(0+256),w
 14426  0889  0021               	movlb	1	; select bank1
 14427  088A  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14428  088B  31AF  2779  3188   	fcall	___ftneg
 14429  088E  0021               	movlb	1	; select bank1
 14430  088F  083E               	movf	?___ftneg^(0+128),w
 14431  0890  0022               	movlb	2	; select bank2
 14432  0891  00C5               	movwf	sin@f^(0+256)
 14433  0892  0021               	movlb	1	; select bank1
 14434  0893  083F               	movf	(?___ftneg+1)^(0+128),w
 14435  0894  0022               	movlb	2	; select bank2
 14436  0895  00C6               	movwf	(sin@f+1)^(0+256)
 14437  0896  0021               	movlb	1	; select bank1
 14438  0897  0840               	movf	(?___ftneg+2)^(0+128),w
 14439  0898  0022               	movlb	2	; select bank2
 14440  0899  00C7               	movwf	(sin@f+2)^(0+256)
 14441  089A  01D2               	clrf	sin@sgn^(0+256)
 14442  089B  0AD2               	incf	sin@sgn^(0+256),f
 14443  089C                     l8208:	
 14444  089C  30FA               	movlw	250
 14445  089D  0021               	movlb	1	; select bank1
 14446  089E  00AE               	movwf	___ftmul@f1^(0+128)
 14447  089F  3022               	movlw	34
 14448  08A0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14449  08A1  303E               	movlw	62
 14450  08A2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14451  08A3  0022               	movlb	2	; select bank2
 14452  08A4  0845               	movf	sin@f^(0+256),w
 14453  08A5  0021               	movlb	1	; select bank1
 14454  08A6  00B1               	movwf	___ftmul@f2^(0+128)
 14455  08A7  0022               	movlb	2	; select bank2
 14456  08A8  0846               	movf	(sin@f+1)^(0+256),w
 14457  08A9  0021               	movlb	1	; select bank1
 14458  08AA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14459  08AB  0022               	movlb	2	; select bank2
 14460  08AC  0847               	movf	(sin@f+2)^(0+256),w
 14461  08AD  0021               	movlb	1	; select bank1
 14462  08AE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14463  08AF  319E  2691  3188   	fcall	___ftmul
 14464  08B2  0021               	movlb	1	; select bank1
 14465  08B3  082E               	movf	?___ftmul^(0+128),w
 14466  08B4  0022               	movlb	2	; select bank2
 14467  08B5  00C5               	movwf	sin@f^(0+256)
 14468  08B6  0021               	movlb	1	; select bank1
 14469  08B7  082F               	movf	(?___ftmul+1)^(0+128),w
 14470  08B8  0022               	movlb	2	; select bank2
 14471  08B9  00C6               	movwf	(sin@f+1)^(0+256)
 14472  08BA  0021               	movlb	1	; select bank1
 14473  08BB  0830               	movf	(?___ftmul+2)^(0+128),w
 14474  08BC  0022               	movlb	2	; select bank2
 14475  08BD  00C7               	movwf	(sin@f+2)^(0+256)
 14476  08BE  0845               	movf	sin@f^(0+256),w
 14477  08BF  00B6               	movwf	floor@x^(0+256)
 14478  08C0  0846               	movf	(sin@f+1)^(0+256),w
 14479  08C1  00B7               	movwf	(floor@x+1)^(0+256)
 14480  08C2  0847               	movf	(sin@f+2)^(0+256),w
 14481  08C3  00B8               	movwf	(floor@x+2)^(0+256)
 14482  08C4  319C  2496  3188   	fcall	_floor
 14483  08C7  0022               	movlb	2	; select bank2
 14484  08C8  0836               	movf	?_floor^(0+256),w
 14485  08C9  00BF               	movwf	___ftsub@f2^(0+256)
 14486  08CA  0837               	movf	(?_floor+1)^(0+256),w
 14487  08CB  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14488  08CC  0838               	movf	(?_floor+2)^(0+256),w
 14489  08CD  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14490  08CE  0845               	movf	sin@f^(0+256),w
 14491  08CF  00C2               	movwf	___ftsub@f1^(0+256)
 14492  08D0  0846               	movf	(sin@f+1)^(0+256),w
 14493  08D1  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14494  08D2  0847               	movf	(sin@f+2)^(0+256),w
 14495  08D3  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14496  08D4  31A1  2144  3188   	fcall	___ftsub
 14497  08D7  0022               	movlb	2	; select bank2
 14498  08D8  083F               	movf	?___ftsub^(0+256),w
 14499  08D9  00C5               	movwf	sin@f^(0+256)
 14500  08DA  0840               	movf	(?___ftsub+1)^(0+256),w
 14501  08DB  00C6               	movwf	(sin@f+1)^(0+256)
 14502  08DC  0841               	movf	(?___ftsub+2)^(0+256),w
 14503  08DD  00C7               	movwf	(sin@f+2)^(0+256)
 14504  08DE  3000               	movlw	0
 14505  08DF  0021               	movlb	1	; select bank1
 14506  08E0  00AE               	movwf	___ftmul@f1^(0+128)
 14507  08E1  3080               	movlw	128
 14508  08E2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14509  08E3  3040               	movlw	64
 14510  08E4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14511  08E5  0022               	movlb	2	; select bank2
 14512  08E6  0845               	movf	sin@f^(0+256),w
 14513  08E7  0021               	movlb	1	; select bank1
 14514  08E8  00B1               	movwf	___ftmul@f2^(0+128)
 14515  08E9  0022               	movlb	2	; select bank2
 14516  08EA  0846               	movf	(sin@f+1)^(0+256),w
 14517  08EB  0021               	movlb	1	; select bank1
 14518  08EC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14519  08ED  0022               	movlb	2	; select bank2
 14520  08EE  0847               	movf	(sin@f+2)^(0+256),w
 14521  08EF  0021               	movlb	1	; select bank1
 14522  08F0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14523  08F1  319E  2691  3188   	fcall	___ftmul
 14524  08F4  0021               	movlb	1	; select bank1
 14525  08F5  082E               	movf	?___ftmul^(0+128),w
 14526  08F6  0022               	movlb	2	; select bank2
 14527  08F7  00C5               	movwf	sin@f^(0+256)
 14528  08F8  0021               	movlb	1	; select bank1
 14529  08F9  082F               	movf	(?___ftmul+1)^(0+128),w
 14530  08FA  0022               	movlb	2	; select bank2
 14531  08FB  00C6               	movwf	(sin@f+1)^(0+256)
 14532  08FC  0021               	movlb	1	; select bank1
 14533  08FD  0830               	movf	(?___ftmul+2)^(0+128),w
 14534  08FE  0022               	movlb	2	; select bank2
 14535  08FF  00C7               	movwf	(sin@f+2)^(0+256)
 14536  0900  3000               	movlw	0
 14537  0901  0021               	movlb	1	; select bank1
 14538  0902  00A0               	movwf	___ftge@ff1^(0+128)
 14539  0903  3000               	movlw	0
 14540  0904  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14541  0905  3040               	movlw	64
 14542  0906  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14543  0907  0022               	movlb	2	; select bank2
 14544  0908  0845               	movf	sin@f^(0+256),w
 14545  0909  0021               	movlb	1	; select bank1
 14546  090A  00A3               	movwf	___ftge@ff2^(0+128)
 14547  090B  0022               	movlb	2	; select bank2
 14548  090C  0846               	movf	(sin@f+1)^(0+256),w
 14549  090D  0021               	movlb	1	; select bank1
 14550  090E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14551  090F  0022               	movlb	2	; select bank2
 14552  0910  0847               	movf	(sin@f+2)^(0+256),w
 14553  0911  0021               	movlb	1	; select bank1
 14554  0912  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14555  0913  31A2  22E0  3188   	fcall	___ftge
 14556  0916  1803               	btfsc	3,0
 14557  0917  2938               	goto	l8220
 14558  0918  3000               	movlw	0
 14559  0919  0022               	movlb	2	; select bank2
 14560  091A  00BF               	movwf	___ftsub@f2^(0+256)
 14561  091B  3000               	movlw	0
 14562  091C  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 14563  091D  3040               	movlw	64
 14564  091E  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 14565  091F  0845               	movf	sin@f^(0+256),w
 14566  0920  00C2               	movwf	___ftsub@f1^(0+256)
 14567  0921  0846               	movf	(sin@f+1)^(0+256),w
 14568  0922  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 14569  0923  0847               	movf	(sin@f+2)^(0+256),w
 14570  0924  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 14571  0925  31A1  2144  3188   	fcall	___ftsub
 14572  0928  0022               	movlb	2	; select bank2
 14573  0929  083F               	movf	?___ftsub^(0+256),w
 14574  092A  00C5               	movwf	sin@f^(0+256)
 14575  092B  0840               	movf	(?___ftsub+1)^(0+256),w
 14576  092C  00C6               	movwf	(sin@f+1)^(0+256)
 14577  092D  0841               	movf	(?___ftsub+2)^(0+256),w
 14578  092E  00C7               	movwf	(sin@f+2)^(0+256)
 14579  092F  0852               	movf	sin@sgn^(0+256),w
 14580  0930  1D03               	btfss	3,2
 14581  0931  2934               	goto	u8590
 14582  0932  3001               	movlw	1
 14583  0933  2935               	goto	u8600
 14584  0934                     u8590:	
 14585  0934  3000               	movlw	0
 14586  0935                     u8600:	
 14587  0935  00C8               	movwf	??_sin^(0+256)
 14588  0936  0848               	movf	??_sin^(0+256),w
 14589  0937  00D2               	movwf	sin@sgn^(0+256)
 14590  0938                     l8220:	
 14591  0938  3000               	movlw	0
 14592  0939  0021               	movlb	1	; select bank1
 14593  093A  00A0               	movwf	___ftge@ff1^(0+128)
 14594  093B  3080               	movlw	128
 14595  093C  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14596  093D  303F               	movlw	63
 14597  093E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14598  093F  0022               	movlb	2	; select bank2
 14599  0940  0845               	movf	sin@f^(0+256),w
 14600  0941  0021               	movlb	1	; select bank1
 14601  0942  00A3               	movwf	___ftge@ff2^(0+128)
 14602  0943  0022               	movlb	2	; select bank2
 14603  0944  0846               	movf	(sin@f+1)^(0+256),w
 14604  0945  0021               	movlb	1	; select bank1
 14605  0946  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14606  0947  0022               	movlb	2	; select bank2
 14607  0948  0847               	movf	(sin@f+2)^(0+256),w
 14608  0949  0021               	movlb	1	; select bank1
 14609  094A  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14610  094B  31A2  22E0  3188   	fcall	___ftge
 14611  094E  1803               	btfsc	3,0
 14612  094F  297C               	goto	l2313
 14613  0950  3000               	movlw	0
 14614  0951  0021               	movlb	1	; select bank1
 14615  0952  00C1               	movwf	___ftadd@f1^(0+128)
 14616  0953  3000               	movlw	0
 14617  0954  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14618  0955  3040               	movlw	64
 14619  0956  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14620  0957  0022               	movlb	2	; select bank2
 14621  0958  0845               	movf	sin@f^(0+256),w
 14622  0959  0021               	movlb	1	; select bank1
 14623  095A  00BE               	movwf	___ftneg@f1^(0+128)
 14624  095B  0022               	movlb	2	; select bank2
 14625  095C  0846               	movf	(sin@f+1)^(0+256),w
 14626  095D  0021               	movlb	1	; select bank1
 14627  095E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14628  095F  0022               	movlb	2	; select bank2
 14629  0960  0847               	movf	(sin@f+2)^(0+256),w
 14630  0961  0021               	movlb	1	; select bank1
 14631  0962  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14632  0963  31AF  2779  3188   	fcall	___ftneg
 14633  0966  0021               	movlb	1	; select bank1
 14634  0967  083E               	movf	?___ftneg^(0+128),w
 14635  0968  00C4               	movwf	___ftadd@f2^(0+128)
 14636  0969  083F               	movf	(?___ftneg+1)^(0+128),w
 14637  096A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14638  096B  0840               	movf	(?___ftneg+2)^(0+128),w
 14639  096C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14640  096D  3192  225B  3188   	fcall	___ftadd
 14641  0970  0021               	movlb	1	; select bank1
 14642  0971  0841               	movf	?___ftadd^(0+128),w
 14643  0972  0022               	movlb	2	; select bank2
 14644  0973  00C5               	movwf	sin@f^(0+256)
 14645  0974  0021               	movlb	1	; select bank1
 14646  0975  0842               	movf	(?___ftadd+1)^(0+128),w
 14647  0976  0022               	movlb	2	; select bank2
 14648  0977  00C6               	movwf	(sin@f+1)^(0+256)
 14649  0978  0021               	movlb	1	; select bank1
 14650  0979  0843               	movf	(?___ftadd+2)^(0+128),w
 14651  097A  0022               	movlb	2	; select bank2
 14652  097B  00C7               	movwf	(sin@f+2)^(0+256)
 14653  097C                     l2313:	
 14654  097C  0022               	movlb	2	; select bank2
 14655  097D  0845               	movf	sin@f^(0+256),w
 14656  097E  0021               	movlb	1	; select bank1
 14657  097F  00AE               	movwf	___ftmul@f1^(0+128)
 14658  0980  0022               	movlb	2	; select bank2
 14659  0981  0846               	movf	(sin@f+1)^(0+256),w
 14660  0982  0021               	movlb	1	; select bank1
 14661  0983  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14662  0984  0022               	movlb	2	; select bank2
 14663  0985  0847               	movf	(sin@f+2)^(0+256),w
 14664  0986  0021               	movlb	1	; select bank1
 14665  0987  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14666  0988  0022               	movlb	2	; select bank2
 14667  0989  0845               	movf	sin@f^(0+256),w
 14668  098A  0021               	movlb	1	; select bank1
 14669  098B  00B1               	movwf	___ftmul@f2^(0+128)
 14670  098C  0022               	movlb	2	; select bank2
 14671  098D  0846               	movf	(sin@f+1)^(0+256),w
 14672  098E  0021               	movlb	1	; select bank1
 14673  098F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14674  0990  0022               	movlb	2	; select bank2
 14675  0991  0847               	movf	(sin@f+2)^(0+256),w
 14676  0992  0021               	movlb	1	; select bank1
 14677  0993  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14678  0994  319E  2691  3188   	fcall	___ftmul
 14679  0997  0021               	movlb	1	; select bank1
 14680  0998  082E               	movf	?___ftmul^(0+128),w
 14681  0999  0022               	movlb	2	; select bank2
 14682  099A  00CF               	movwf	sin@x2^(0+256)
 14683  099B  0021               	movlb	1	; select bank1
 14684  099C  082F               	movf	(?___ftmul+1)^(0+128),w
 14685  099D  0022               	movlb	2	; select bank2
 14686  099E  00D0               	movwf	(sin@x2+1)^(0+256)
 14687  099F  0021               	movlb	1	; select bank1
 14688  09A0  0830               	movf	(?___ftmul+2)^(0+128),w
 14689  09A1  0022               	movlb	2	; select bank2
 14690  09A2  00D1               	movwf	(sin@x2+2)^(0+256)
 14691  09A3  084F               	movf	sin@x2^(0+256),w
 14692  09A4  00B4               	movwf	eval_poly@x^(0+256)
 14693  09A5  0850               	movf	(sin@x2+1)^(0+256),w
 14694  09A6  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14695  09A7  0851               	movf	(sin@x2+2)^(0+256),w
 14696  09A8  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14697  09A9  3048               	movlw	low (sin@coeff_b| (0+32768))
 14698  09AA  00B7               	movwf	eval_poly@d^(0+256)
 14699  09AB  30A8               	movlw	high (sin@coeff_b| (0+32768))
 14700  09AC  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14701  09AD  3003               	movlw	3
 14702  09AE  00B9               	movwf	eval_poly@n^(0+256)
 14703  09AF  3000               	movlw	0
 14704  09B0  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14705  09B1  31A7  278E  3188   	fcall	_eval_poly
 14706  09B4  0022               	movlb	2	; select bank2
 14707  09B5  0834               	movf	?_eval_poly^(0+256),w
 14708  09B6  00C9               	movwf	sin@y^(0+256)
 14709  09B7  0835               	movf	(?_eval_poly+1)^(0+256),w
 14710  09B8  00CA               	movwf	(sin@y+1)^(0+256)
 14711  09B9  0836               	movf	(?_eval_poly+2)^(0+256),w
 14712  09BA  00CB               	movwf	(sin@y+2)^(0+256)
 14713  09BB  3004               	movlw	4
 14714  09BC  00B9               	movwf	eval_poly@n^(0+256)
 14715  09BD  3000               	movlw	0
 14716  09BE  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14717  09BF  3039               	movlw	low (sin@coeff_a| (0+32768))
 14718  09C0  00B7               	movwf	eval_poly@d^(0+256)
 14719  09C1  30A8               	movlw	high (sin@coeff_a| (0+32768))
 14720  09C2  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14721  09C3  084F               	movf	sin@x2^(0+256),w
 14722  09C4  00B4               	movwf	eval_poly@x^(0+256)
 14723  09C5  0850               	movf	(sin@x2+1)^(0+256),w
 14724  09C6  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14725  09C7  0851               	movf	(sin@x2+2)^(0+256),w
 14726  09C8  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14727  09C9  31A7  278E  3188   	fcall	_eval_poly
 14728  09CC  0022               	movlb	2	; select bank2
 14729  09CD  0834               	movf	?_eval_poly^(0+256),w
 14730  09CE  0021               	movlb	1	; select bank1
 14731  09CF  00D1               	movwf	___ftdiv@f1^(0+128)
 14732  09D0  0022               	movlb	2	; select bank2
 14733  09D1  0835               	movf	(?_eval_poly+1)^(0+256),w
 14734  09D2  0021               	movlb	1	; select bank1
 14735  09D3  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14736  09D4  0022               	movlb	2	; select bank2
 14737  09D5  0836               	movf	(?_eval_poly+2)^(0+256),w
 14738  09D6  0021               	movlb	1	; select bank1
 14739  09D7  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14740  09D8  0022               	movlb	2	; select bank2
 14741  09D9  0849               	movf	sin@y^(0+256),w
 14742  09DA  0021               	movlb	1	; select bank1
 14743  09DB  00CE               	movwf	___ftdiv@f2^(0+128)
 14744  09DC  0022               	movlb	2	; select bank2
 14745  09DD  084A               	movf	(sin@y+1)^(0+256),w
 14746  09DE  0021               	movlb	1	; select bank1
 14747  09DF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14748  09E0  0022               	movlb	2	; select bank2
 14749  09E1  084B               	movf	(sin@y+2)^(0+256),w
 14750  09E2  0021               	movlb	1	; select bank1
 14751  09E3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14752  09E4  319D  253D  3188   	fcall	___ftdiv
 14753  09E7  0021               	movlb	1	; select bank1
 14754  09E8  084E               	movf	?___ftdiv^(0+128),w
 14755  09E9  0022               	movlb	2	; select bank2
 14756  09EA  00CC               	movwf	_sin$2826^(0+256)
 14757  09EB  0021               	movlb	1	; select bank1
 14758  09EC  084F               	movf	(?___ftdiv+1)^(0+128),w
 14759  09ED  0022               	movlb	2	; select bank2
 14760  09EE  00CD               	movwf	(_sin$2826+1)^(0+256)
 14761  09EF  0021               	movlb	1	; select bank1
 14762  09F0  0850               	movf	(?___ftdiv+2)^(0+128),w
 14763  09F1  0022               	movlb	2	; select bank2
 14764  09F2  00CE               	movwf	(_sin$2826+2)^(0+256)
 14765  09F3  084C               	movf	_sin$2826^(0+256),w
 14766  09F4  0021               	movlb	1	; select bank1
 14767  09F5  00AE               	movwf	___ftmul@f1^(0+128)
 14768  09F6  0022               	movlb	2	; select bank2
 14769  09F7  084D               	movf	(_sin$2826+1)^(0+256),w
 14770  09F8  0021               	movlb	1	; select bank1
 14771  09F9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14772  09FA  0022               	movlb	2	; select bank2
 14773  09FB  084E               	movf	(_sin$2826+2)^(0+256),w
 14774  09FC  0021               	movlb	1	; select bank1
 14775  09FD  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14776  09FE  0022               	movlb	2	; select bank2
 14777  09FF  0845               	movf	sin@f^(0+256),w
 14778  0A00  0021               	movlb	1	; select bank1
 14779  0A01  00B1               	movwf	___ftmul@f2^(0+128)
 14780  0A02  0022               	movlb	2	; select bank2
 14781  0A03  0846               	movf	(sin@f+1)^(0+256),w
 14782  0A04  0021               	movlb	1	; select bank1
 14783  0A05  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14784  0A06  0022               	movlb	2	; select bank2
 14785  0A07  0847               	movf	(sin@f+2)^(0+256),w
 14786  0A08  0021               	movlb	1	; select bank1
 14787  0A09  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14788  0A0A  319E  2691  3188   	fcall	___ftmul
 14789  0A0D  0021               	movlb	1	; select bank1
 14790  0A0E  082E               	movf	?___ftmul^(0+128),w
 14791  0A0F  0022               	movlb	2	; select bank2
 14792  0A10  00C5               	movwf	sin@f^(0+256)
 14793  0A11  0021               	movlb	1	; select bank1
 14794  0A12  082F               	movf	(?___ftmul+1)^(0+128),w
 14795  0A13  0022               	movlb	2	; select bank2
 14796  0A14  00C6               	movwf	(sin@f+1)^(0+256)
 14797  0A15  0021               	movlb	1	; select bank1
 14798  0A16  0830               	movf	(?___ftmul+2)^(0+128),w
 14799  0A17  0022               	movlb	2	; select bank2
 14800  0A18  00C7               	movwf	(sin@f+2)^(0+256)
 14801  0A19  0852               	movf	sin@sgn^(0+256),w
 14802  0A1A  1903               	btfsc	3,2
 14803  0A1B  0008               	return
 14804  0A1C  0845               	movf	sin@f^(0+256),w
 14805  0A1D  0021               	movlb	1	; select bank1
 14806  0A1E  00BE               	movwf	___ftneg@f1^(0+128)
 14807  0A1F  0022               	movlb	2	; select bank2
 14808  0A20  0846               	movf	(sin@f+1)^(0+256),w
 14809  0A21  0021               	movlb	1	; select bank1
 14810  0A22  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14811  0A23  0022               	movlb	2	; select bank2
 14812  0A24  0847               	movf	(sin@f+2)^(0+256),w
 14813  0A25  0021               	movlb	1	; select bank1
 14814  0A26  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14815  0A27  31AF  2779         	fcall	___ftneg
 14816  0A29  0021               	movlb	1	; select bank1
 14817  0A2A  083E               	movf	?___ftneg^(0+128),w
 14818  0A2B  0022               	movlb	2	; select bank2
 14819  0A2C  00C5               	movwf	?_sin^(0+256)
 14820  0A2D  0021               	movlb	1	; select bank1
 14821  0A2E  083F               	movf	(?___ftneg+1)^(0+128),w
 14822  0A2F  0022               	movlb	2	; select bank2
 14823  0A30  00C6               	movwf	(?_sin+1)^(0+256)
 14824  0A31  0021               	movlb	1	; select bank1
 14825  0A32  0840               	movf	(?___ftneg+2)^(0+128),w
 14826  0A33  0022               	movlb	2	; select bank2
 14827  0A34  00C7               	movwf	(?_sin+2)^(0+256)
 14828  0A35  0008               	return
 14829  0A36                     __end_of_sin:	
 14830                           
 14831                           	psect	text43
 14832  1C96                     __ptext43:	
 14833 ;; *************** function _floor *****************
 14834 ;; Defined at:
 14835 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 14836 ;; Parameters:    Size  Location     Type
 14837 ;;  x               3   22[BANK2 ] unsigned char 
 14838 ;; Auto vars:     Size  Location     Type
 14839 ;;  i               3   26[BANK2 ] unsigned char 
 14840 ;;  expon           2   29[BANK2 ] int 
 14841 ;; Return value:  Size  Location     Type
 14842 ;;                  3   22[BANK2 ] int 
 14843 ;; Registers used:
 14844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14845 ;; Tracked objects:
 14846 ;;		On entry : 0/0
 14847 ;;		On exit  : 0/0
 14848 ;;		Unchanged: 0/0
 14849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14850 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14851 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14852 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14853 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14854 ;;Total ram usage:        9 bytes
 14855 ;; Hardware stack levels used:    1
 14856 ;; Hardware stack levels required when called:    5
 14857 ;; This function calls:
 14858 ;;		___altoft
 14859 ;;		___ftadd
 14860 ;;		___ftge
 14861 ;;		___fttol
 14862 ;;		_frexp
 14863 ;; This function is called by:
 14864 ;;		_sin
 14865 ;;		_exp
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           
 14870                           ;psect for function _floor
 14871  1C96                     _floor:	
 14872                           
 14873                           ;incstack = 0
 14874                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14875  1C96  0022               	movlb	2	; select bank2
 14876  1C97  0836               	movf	floor@x^(0+256),w
 14877  1C98  0021               	movlb	1	; select bank1
 14878  1C99  00A0               	movwf	frexp@value^(0+128)
 14879  1C9A  0022               	movlb	2	; select bank2
 14880  1C9B  0837               	movf	(floor@x+1)^(0+256),w
 14881  1C9C  0021               	movlb	1	; select bank1
 14882  1C9D  00A1               	movwf	(frexp@value+1)^(0+128)
 14883  1C9E  0022               	movlb	2	; select bank2
 14884  1C9F  0838               	movf	(floor@x+2)^(0+256),w
 14885  1CA0  0021               	movlb	1	; select bank1
 14886  1CA1  00A2               	movwf	(frexp@value+2)^(0+128)
 14887  1CA2  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 14888  1CA3  0022               	movlb	2	; select bank2
 14889  1CA4  00B9               	movwf	??_floor^(0+256)
 14890  1CA5  0839               	movf	??_floor^(0+256),w
 14891  1CA6  0021               	movlb	1	; select bank1
 14892  1CA7  00A3               	movwf	frexp@eptr^(0+128)
 14893  1CA8  31A3  2397  319C   	fcall	_frexp
 14894  1CAB  0022               	movlb	2	; select bank2
 14895  1CAC  1FBE               	btfss	(floor@expon+1)^(0+256),7
 14896  1CAD  2CD4               	goto	l7806
 14897  1CAE  0836               	movf	floor@x^(0+256),w
 14898  1CAF  0021               	movlb	1	; select bank1
 14899  1CB0  00A0               	movwf	___ftge@ff1^(0+128)
 14900  1CB1  0022               	movlb	2	; select bank2
 14901  1CB2  0837               	movf	(floor@x+1)^(0+256),w
 14902  1CB3  0021               	movlb	1	; select bank1
 14903  1CB4  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14904  1CB5  0022               	movlb	2	; select bank2
 14905  1CB6  0838               	movf	(floor@x+2)^(0+256),w
 14906  1CB7  0021               	movlb	1	; select bank1
 14907  1CB8  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14908  1CB9  3000               	movlw	0
 14909  1CBA  00A3               	movwf	___ftge@ff2^(0+128)
 14910  1CBB  3000               	movlw	0
 14911  1CBC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14912  1CBD  3000               	movlw	0
 14913  1CBE  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14914  1CBF  31A2  22E0  319C   	fcall	___ftge
 14915  1CC2  1803               	btfsc	3,0
 14916  1CC3  2CCC               	goto	l7802
 14917  1CC4  3000               	movlw	0
 14918  1CC5  0022               	movlb	2	; select bank2
 14919  1CC6  00B6               	movwf	?_floor^(0+256)
 14920  1CC7  3080               	movlw	128
 14921  1CC8  00B7               	movwf	(?_floor+1)^(0+256)
 14922  1CC9  30BF               	movlw	191
 14923  1CCA  00B8               	movwf	(?_floor+2)^(0+256)
 14924  1CCB  0008               	return
 14925  1CCC                     l7802:	
 14926  1CCC  3000               	movlw	0
 14927  1CCD  0022               	movlb	2	; select bank2
 14928  1CCE  00B6               	movwf	?_floor^(0+256)
 14929  1CCF  3000               	movlw	0
 14930  1CD0  00B7               	movwf	(?_floor+1)^(0+256)
 14931  1CD1  3000               	movlw	0
 14932  1CD2  00B8               	movwf	(?_floor+2)^(0+256)
 14933  1CD3  0008               	return
 14934  1CD4                     l7806:	
 14935  1CD4  3000               	movlw	0
 14936  1CD5  023E               	subwf	(floor@expon+1)^(0+256),w
 14937  1CD6  3015               	movlw	21
 14938  1CD7  1903               	skipnz
 14939  1CD8  023D               	subwf	floor@expon^(0+256),w
 14940  1CD9  1803               	btfsc	3,0
 14941  1CDA  0008               	return
 14942  1CDB  0836               	movf	floor@x^(0+256),w
 14943  1CDC  00A0               	movwf	___fttol@f1^(0+256)
 14944  1CDD  0837               	movf	(floor@x+1)^(0+256),w
 14945  1CDE  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14946  1CDF  0838               	movf	(floor@x+2)^(0+256),w
 14947  1CE0  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14948  1CE1  319A  226C  319C   	fcall	___fttol
 14949  1CE4  0022               	movlb	2	; select bank2
 14950  1CE5  0823               	movf	(?___fttol+3)^(0+256),w
 14951  1CE6  00B1               	movwf	(___altoft@c+3)^(0+256)
 14952  1CE7  0822               	movf	(?___fttol+2)^(0+256),w
 14953  1CE8  00B0               	movwf	(___altoft@c+2)^(0+256)
 14954  1CE9  0821               	movf	(?___fttol+1)^(0+256),w
 14955  1CEA  00AF               	movwf	(___altoft@c+1)^(0+256)
 14956  1CEB  0820               	movf	?___fttol^(0+256),w
 14957  1CEC  00AE               	movwf	___altoft@c^(0+256)
 14958  1CED  31A6  2600  319C   	fcall	___altoft
 14959  1CF0  0022               	movlb	2	; select bank2
 14960  1CF1  082E               	movf	?___altoft^(0+256),w
 14961  1CF2  00BA               	movwf	floor@i^(0+256)
 14962  1CF3  082F               	movf	(?___altoft+1)^(0+256),w
 14963  1CF4  00BB               	movwf	(floor@i+1)^(0+256)
 14964  1CF5  0830               	movf	(?___altoft+2)^(0+256),w
 14965  1CF6  00BC               	movwf	(floor@i+2)^(0+256)
 14966  1CF7  0836               	movf	floor@x^(0+256),w
 14967  1CF8  0021               	movlb	1	; select bank1
 14968  1CF9  00A0               	movwf	___ftge@ff1^(0+128)
 14969  1CFA  0022               	movlb	2	; select bank2
 14970  1CFB  0837               	movf	(floor@x+1)^(0+256),w
 14971  1CFC  0021               	movlb	1	; select bank1
 14972  1CFD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14973  1CFE  0022               	movlb	2	; select bank2
 14974  1CFF  0838               	movf	(floor@x+2)^(0+256),w
 14975  1D00  0021               	movlb	1	; select bank1
 14976  1D01  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14977  1D02  0022               	movlb	2	; select bank2
 14978  1D03  083A               	movf	floor@i^(0+256),w
 14979  1D04  0021               	movlb	1	; select bank1
 14980  1D05  00A3               	movwf	___ftge@ff2^(0+128)
 14981  1D06  0022               	movlb	2	; select bank2
 14982  1D07  083B               	movf	(floor@i+1)^(0+256),w
 14983  1D08  0021               	movlb	1	; select bank1
 14984  1D09  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14985  1D0A  0022               	movlb	2	; select bank2
 14986  1D0B  083C               	movf	(floor@i+2)^(0+256),w
 14987  1D0C  0021               	movlb	1	; select bank1
 14988  1D0D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14989  1D0E  31A2  22E0  319C   	fcall	___ftge
 14990  1D11  1803               	btfsc	3,0
 14991  1D12  2D35               	goto	l7816
 14992  1D13  3000               	movlw	0
 14993  1D14  0021               	movlb	1	; select bank1
 14994  1D15  00C1               	movwf	___ftadd@f1^(0+128)
 14995  1D16  3080               	movlw	128
 14996  1D17  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14997  1D18  30BF               	movlw	191
 14998  1D19  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14999  1D1A  0022               	movlb	2	; select bank2
 15000  1D1B  083A               	movf	floor@i^(0+256),w
 15001  1D1C  0021               	movlb	1	; select bank1
 15002  1D1D  00C4               	movwf	___ftadd@f2^(0+128)
 15003  1D1E  0022               	movlb	2	; select bank2
 15004  1D1F  083B               	movf	(floor@i+1)^(0+256),w
 15005  1D20  0021               	movlb	1	; select bank1
 15006  1D21  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15007  1D22  0022               	movlb	2	; select bank2
 15008  1D23  083C               	movf	(floor@i+2)^(0+256),w
 15009  1D24  0021               	movlb	1	; select bank1
 15010  1D25  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15011  1D26  3192  225B         	fcall	___ftadd
 15012  1D28  0021               	movlb	1	; select bank1
 15013  1D29  0841               	movf	?___ftadd^(0+128),w
 15014  1D2A  0022               	movlb	2	; select bank2
 15015  1D2B  00B6               	movwf	?_floor^(0+256)
 15016  1D2C  0021               	movlb	1	; select bank1
 15017  1D2D  0842               	movf	(?___ftadd+1)^(0+128),w
 15018  1D2E  0022               	movlb	2	; select bank2
 15019  1D2F  00B7               	movwf	(?_floor+1)^(0+256)
 15020  1D30  0021               	movlb	1	; select bank1
 15021  1D31  0843               	movf	(?___ftadd+2)^(0+128),w
 15022  1D32  0022               	movlb	2	; select bank2
 15023  1D33  00B8               	movwf	(?_floor+2)^(0+256)
 15024  1D34  0008               	return
 15025  1D35                     l7816:	
 15026  1D35  0022               	movlb	2	; select bank2
 15027  1D36  083A               	movf	floor@i^(0+256),w
 15028  1D37  00B6               	movwf	?_floor^(0+256)
 15029  1D38  083B               	movf	(floor@i+1)^(0+256),w
 15030  1D39  00B7               	movwf	(?_floor+1)^(0+256)
 15031  1D3A  083C               	movf	(floor@i+2)^(0+256),w
 15032  1D3B  00B8               	movwf	(?_floor+2)^(0+256)
 15033  1D3C  0008               	return
 15034  1D3D                     __end_of_floor:	
 15035                           
 15036                           	psect	text44
 15037  2397                     __ptext44:	
 15038 ;; *************** function _frexp *****************
 15039 ;; Defined at:
 15040 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15041 ;; Parameters:    Size  Location     Type
 15042 ;;  value           3    0[BANK1 ] int 
 15043 ;;  eptr            1    3[BANK1 ] PTR int 
 15044 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 15045 ;; Auto vars:     Size  Location     Type
 15046 ;;		None
 15047 ;; Return value:  Size  Location     Type
 15048 ;;                  3    0[BANK1 ] PTR int 
 15049 ;; Registers used:
 15050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15051 ;; Tracked objects:
 15052 ;;		On entry : 0/0
 15053 ;;		On exit  : 0/0
 15054 ;;		Unchanged: 0/0
 15055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15056 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15058 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15059 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15060 ;;Total ram usage:        6 bytes
 15061 ;; Hardware stack levels used:    1
 15062 ;; Hardware stack levels required when called:    3
 15063 ;; This function calls:
 15064 ;;		Nothing
 15065 ;; This function is called by:
 15066 ;;		_trunc
 15067 ;;		_floor
 15068 ;;		_log
 15069 ;; This function uses a non-reentrant model
 15070 ;;
 15071                           
 15072                           
 15073                           ;psect for function _frexp
 15074  2397                     _frexp:	
 15075                           
 15076                           ;incstack = 0
 15077                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15078  2397  0021               	movlb	1	; select bank1
 15079  2398  0822               	movf	(frexp@value+2)^(0+128),w
 15080  2399  0421               	iorwf	(frexp@value+1)^(0+128),w
 15081  239A  0420               	iorwf	frexp@value^(0+128),w
 15082  239B  1D03               	skipz
 15083  239C  2BAB               	goto	l7668
 15084  239D  0823               	movf	frexp@eptr^(0+128),w
 15085  239E  0086               	movwf	6
 15086  239F  3001               	movlw	1	; select bank2/3
 15087  23A0  0087               	movwf	7
 15088  23A1  3000               	movlw	0
 15089  23A2  3FC0               	movwi [0]fsr1
 15090  23A3  3FC1               	movwi [1]fsr1
 15091  23A4  3000               	movlw	0
 15092  23A5  00A0               	movwf	?_frexp^(0+128)
 15093  23A6  3000               	movlw	0
 15094  23A7  00A1               	movwf	(?_frexp+1)^(0+128)
 15095  23A8  3000               	movlw	0
 15096  23A9  00A2               	movwf	(?_frexp+2)^(0+128)
 15097  23AA  0008               	return
 15098  23AB                     l7668:	
 15099  23AB  0822               	movf	(frexp@value^(0+128)+2),w
 15100  23AC  397F               	andlw	127
 15101  23AD  00A4               	movwf	??_frexp^(0+128)
 15102  23AE  01A5               	clrf	(??_frexp^(0+128)+1)
 15103  23AF  35A4               	lslf	??_frexp^(0+128),f
 15104  23B0  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15105  23B1  0823               	movf	frexp@eptr^(0+128),w
 15106  23B2  0086               	movwf	6
 15107  23B3  3001               	movlw	1	; select bank2/3
 15108  23B4  0087               	movwf	7
 15109  23B5  0824               	movf	??_frexp^(0+128),w
 15110  23B6  3FC0               	movwi [0]fsr1
 15111  23B7  0825               	movf	(??_frexp+1)^(0+128),w
 15112  23B8  3FC1               	movwi [1]fsr1
 15113  23B9  0D21               	rlf	(frexp@value^(0+128)+1),w
 15114  23BA  0D21               	rlf	(frexp@value^(0+128)+1),w
 15115  23BB  3901               	andlw	1
 15116  23BC  00A4               	movwf	??_frexp^(0+128)
 15117  23BD  01A5               	clrf	(??_frexp^(0+128)+1)
 15118  23BE  0823               	movf	frexp@eptr^(0+128),w
 15119  23BF  0086               	movwf	6
 15120  23C0  3001               	movlw	1	; select bank2/3
 15121  23C1  0087               	movwf	7
 15122  23C2  0824               	movf	??_frexp^(0+128),w
 15123  23C3  0481               	iorwf	1,f
 15124  23C4  3141               	addfsr 1,1
 15125  23C5  0825               	movf	(??_frexp+1)^(0+128),w
 15126  23C6  0481               	iorwf	1,f
 15127  23C7  0823               	movf	frexp@eptr^(0+128),w
 15128  23C8  0086               	movwf	6
 15129  23C9  3001               	movlw	1	; select bank2/3
 15130  23CA  0087               	movwf	7
 15131  23CB  3082               	movlw	130
 15132  23CC  0781               	addwf	1,f
 15133  23CD  3141               	addfsr 1,1
 15134  23CE  30FF               	movlw	255
 15135  23CF  3D81               	addwfc	1,f
 15136  23D0  317F               	addfsr 1,-1
 15137  23D1  0822               	movf	(frexp@value^(0+128)+2),w
 15138  23D2  3980               	andlw	-128
 15139  23D3  383F               	iorlw	63
 15140  23D4  00A2               	movwf	(frexp@value^(0+128)+2)
 15141  23D5  13A1               	bcf	(frexp@value^(0+128)+1),7
 15142  23D6  0008               	return
 15143  23D7                     __end_of_frexp:	
 15144                           
 15145                           	psect	text45
 15146  1A6C                     __ptext45:	
 15147 ;; *************** function ___fttol *****************
 15148 ;; Defined at:
 15149 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15150 ;; Parameters:    Size  Location     Type
 15151 ;;  f1              3    0[BANK2 ] float 
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;  lval            4    9[BANK2 ] unsigned long 
 15154 ;;  exp1            1   13[BANK2 ] unsigned char 
 15155 ;;  sign1           1    8[BANK2 ] unsigned char 
 15156 ;; Return value:  Size  Location     Type
 15157 ;;                  4    0[BANK2 ] long 
 15158 ;; Registers used:
 15159 ;;		wreg, status,2, status,0
 15160 ;; Tracked objects:
 15161 ;;		On entry : 0/0
 15162 ;;		On exit  : 0/0
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15165 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15166 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15167 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15168 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15169 ;;Total ram usage:       14 bytes
 15170 ;; Hardware stack levels used:    1
 15171 ;; Hardware stack levels required when called:    3
 15172 ;; This function calls:
 15173 ;;		Nothing
 15174 ;; This function is called by:
 15175 ;;		_main
 15176 ;;		_set_subdivision
 15177 ;;		_scaleA100kPot
 15178 ;;		_scaleA10kPot
 15179 ;;		_scaleiA10kPot
 15180 ;;		_modSin
 15181 ;;		_modTri
 15182 ;;		_modSaw
 15183 ;;		_pow
 15184 ;;		_trunc
 15185 ;;		_exp
 15186 ;;		_floor
 15187 ;;		_scaleiA100kPot
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function ___fttol
 15193  1A6C                     ___fttol:	
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15197  1A6C  0022               	movlb	2	; select bank2
 15198  1A6D  0820               	movf	___fttol@f1^(0+256),w
 15199  1A6E  00A4               	movwf	??___fttol^(0+256)
 15200  1A6F  0821               	movf	(___fttol@f1+1)^(0+256),w
 15201  1A70  00A5               	movwf	(??___fttol^(0+256)+1)
 15202  1A71  0822               	movf	(___fttol@f1+2)^(0+256),w
 15203  1A72  00A6               	movwf	(??___fttol^(0+256)+2)
 15204  1A73  1003               	clrc
 15205  1A74  0D25               	rlf	(??___fttol^(0+256)+1),w
 15206  1A75  0D26               	rlf	(??___fttol^(0+256)+2),w
 15207  1A76  00A7               	movwf	(??___fttol+3)^(0+256)
 15208  1A77  0827               	movf	(??___fttol+3)^(0+256),w
 15209  1A78  00AD               	movwf	___fttol@exp1^(0+256)
 15210  1A79  082D               	movf	___fttol@exp1^(0+256),w
 15211  1A7A  1D03               	btfss	3,2
 15212  1A7B  2A85               	goto	l7624
 15213  1A7C  3000               	movlw	0
 15214  1A7D  00A3               	movwf	(?___fttol+3)^(0+256)
 15215  1A7E  3000               	movlw	0
 15216  1A7F  00A2               	movwf	(?___fttol+2)^(0+256)
 15217  1A80  3000               	movlw	0
 15218  1A81  00A1               	movwf	(?___fttol+1)^(0+256)
 15219  1A82  3000               	movlw	0
 15220  1A83  00A0               	movwf	?___fttol^(0+256)
 15221  1A84  0008               	return
 15222  1A85                     l7624:	
 15223  1A85  0820               	movf	___fttol@f1^(0+256),w
 15224  1A86  00A4               	movwf	??___fttol^(0+256)
 15225  1A87  0821               	movf	(___fttol@f1+1)^(0+256),w
 15226  1A88  00A5               	movwf	(??___fttol^(0+256)+1)
 15227  1A89  0822               	movf	(___fttol@f1+2)^(0+256),w
 15228  1A8A  00A6               	movwf	(??___fttol^(0+256)+2)
 15229  1A8B  3017               	movlw	23
 15230  1A8C                     u7925:	
 15231  1A8C  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15232  1A8D  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15233  1A8E  0CA4               	rrf	??___fttol^(0+256),f
 15234  1A8F  0B89               	decfsz	9,f
 15235  1A90  2A8C               	goto	u7925
 15236  1A91  0824               	movf	??___fttol^(0+256),w
 15237  1A92  00A7               	movwf	(??___fttol+3)^(0+256)
 15238  1A93  0827               	movf	(??___fttol+3)^(0+256),w
 15239  1A94  00A8               	movwf	___fttol@sign1^(0+256)
 15240  1A95  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15241  1A96  30FF               	movlw	255
 15242  1A97  05A0               	andwf	___fttol@f1^(0+256),f
 15243  1A98  30FF               	movlw	255
 15244  1A99  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15245  1A9A  3000               	movlw	0
 15246  1A9B  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15247  1A9C  0820               	movf	___fttol@f1^(0+256),w
 15248  1A9D  00A9               	movwf	___fttol@lval^(0+256)
 15249  1A9E  0821               	movf	(___fttol@f1+1)^(0+256),w
 15250  1A9F  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15251  1AA0  0822               	movf	(___fttol@f1+2)^(0+256),w
 15252  1AA1  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15253  1AA2  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15254  1AA3  308E               	movlw	142
 15255  1AA4  02AD               	subwf	___fttol@exp1^(0+256),f
 15256  1AA5  1FAD               	btfss	___fttol@exp1^(0+256),7
 15257  1AA6  2AC3               	goto	l7644
 15258  1AA7  082D               	movf	___fttol@exp1^(0+256),w
 15259  1AA8  3A80               	xorlw	128
 15260  1AA9  3E8F               	addlw	143
 15261  1AAA  1803               	skipnc
 15262  1AAB  2AB5               	goto	l7642
 15263  1AAC  3000               	movlw	0
 15264  1AAD  00A3               	movwf	(?___fttol+3)^(0+256)
 15265  1AAE  3000               	movlw	0
 15266  1AAF  00A2               	movwf	(?___fttol+2)^(0+256)
 15267  1AB0  3000               	movlw	0
 15268  1AB1  00A1               	movwf	(?___fttol+1)^(0+256)
 15269  1AB2  3000               	movlw	0
 15270  1AB3  00A0               	movwf	?___fttol^(0+256)
 15271  1AB4  0008               	return
 15272  1AB5                     l7642:	
 15273  1AB5  3001               	movlw	1
 15274  1AB6                     u7955:	
 15275  1AB6  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 15276  1AB7  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 15277  1AB8  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 15278  1AB9  0CA9               	rrf	___fttol@lval^(0+256),f
 15279  1ABA  0B89               	decfsz	9,f
 15280  1ABB  2AB6               	goto	u7955
 15281  1ABC  3001               	movlw	1
 15282  1ABD  00A4               	movwf	??___fttol^(0+256)
 15283  1ABE  0824               	movf	??___fttol^(0+256),w
 15284  1ABF  07AD               	addwf	___fttol@exp1^(0+256),f
 15285  1AC0  1903               	btfsc	3,2
 15286  1AC1  2ADC               	goto	l7652
 15287  1AC2  2AB5               	goto	l7642
 15288  1AC3                     l7644:	
 15289  1AC3  3018               	movlw	24
 15290  1AC4  022D               	subwf	___fttol@exp1^(0+256),w
 15291  1AC5  1C03               	skipc
 15292  1AC6  2AD9               	goto	l2183
 15293  1AC7  3000               	movlw	0
 15294  1AC8  00A3               	movwf	(?___fttol+3)^(0+256)
 15295  1AC9  3000               	movlw	0
 15296  1ACA  00A2               	movwf	(?___fttol+2)^(0+256)
 15297  1ACB  3000               	movlw	0
 15298  1ACC  00A1               	movwf	(?___fttol+1)^(0+256)
 15299  1ACD  3000               	movlw	0
 15300  1ACE  00A0               	movwf	?___fttol^(0+256)
 15301  1ACF  0008               	return
 15302  1AD0                     l7650:	
 15303  1AD0  3001               	movlw	1
 15304  1AD1                     u7985:	
 15305  1AD1  35A9               	lslf	___fttol@lval^(0+256),f
 15306  1AD2  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 15307  1AD3  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 15308  1AD4  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 15309  1AD5  0B89               	decfsz	9,f
 15310  1AD6  2AD1               	goto	u7985
 15311  1AD7  3001               	movlw	1
 15312  1AD8  02AD               	subwf	___fttol@exp1^(0+256),f
 15313  1AD9                     l2183:	
 15314  1AD9  082D               	movf	___fttol@exp1^(0+256),w
 15315  1ADA  1D03               	btfss	3,2
 15316  1ADB  2AD0               	goto	l7650
 15317  1ADC                     l7652:	
 15318  1ADC  0828               	movf	___fttol@sign1^(0+256),w
 15319  1ADD  1903               	btfsc	3,2
 15320  1ADE  2AEA               	goto	l7656
 15321  1ADF  09A9               	comf	___fttol@lval^(0+256),f
 15322  1AE0  09AA               	comf	(___fttol@lval+1)^(0+256),f
 15323  1AE1  09AB               	comf	(___fttol@lval+2)^(0+256),f
 15324  1AE2  09AC               	comf	(___fttol@lval+3)^(0+256),f
 15325  1AE3  0AA9               	incf	___fttol@lval^(0+256),f
 15326  1AE4  1903               	skipnz
 15327  1AE5  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 15328  1AE6  1903               	skipnz
 15329  1AE7  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 15330  1AE8  1903               	skipnz
 15331  1AE9  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 15332  1AEA                     l7656:	
 15333  1AEA  082C               	movf	(___fttol@lval+3)^(0+256),w
 15334  1AEB  00A3               	movwf	(?___fttol+3)^(0+256)
 15335  1AEC  082B               	movf	(___fttol@lval+2)^(0+256),w
 15336  1AED  00A2               	movwf	(?___fttol+2)^(0+256)
 15337  1AEE  082A               	movf	(___fttol@lval+1)^(0+256),w
 15338  1AEF  00A1               	movwf	(?___fttol+1)^(0+256)
 15339  1AF0  0829               	movf	___fttol@lval^(0+256),w
 15340  1AF1  00A0               	movwf	?___fttol^(0+256)
 15341  1AF2  0008               	return
 15342  1AF3                     __end_of___fttol:	
 15343                           
 15344                           	psect	text46
 15345  22E0                     __ptext46:	
 15346 ;; *************** function ___ftge *****************
 15347 ;; Defined at:
 15348 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 15349 ;; Parameters:    Size  Location     Type
 15350 ;;  ff1             3    0[BANK1 ] float 
 15351 ;;  ff2             3    3[BANK1 ] float 
 15352 ;; Auto vars:     Size  Location     Type
 15353 ;;		None
 15354 ;; Return value:  Size  Location     Type
 15355 ;;		None               void
 15356 ;; Registers used:
 15357 ;;		wreg, status,2, status,0
 15358 ;; Tracked objects:
 15359 ;;		On entry : 0/0
 15360 ;;		On exit  : 0/0
 15361 ;;		Unchanged: 0/0
 15362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15363 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15365 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15366 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15367 ;;Total ram usage:        9 bytes
 15368 ;; Hardware stack levels used:    1
 15369 ;; Hardware stack levels required when called:    3
 15370 ;; This function calls:
 15371 ;;		Nothing
 15372 ;; This function is called by:
 15373 ;;		_modSin
 15374 ;;		_modTri
 15375 ;;		_modSaw
 15376 ;;		_modSquare
 15377 ;;		_pow
 15378 ;;		_sin
 15379 ;;		_exp
 15380 ;;		_floor
 15381 ;;		_ldexp
 15382 ;;		_log
 15383 ;; This function uses a non-reentrant model
 15384 ;;
 15385                           
 15386                           
 15387                           ;psect for function ___ftge
 15388  22E0                     ___ftge:	
 15389                           
 15390                           ;incstack = 0
 15391                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 15392  22E0  0021               	movlb	1	; select bank1
 15393  22E1  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 15394  22E2  2AF7               	goto	l7544
 15395  22E3  0920               	comf	___ftge@ff1^(0+128),w
 15396  22E4  00A6               	movwf	??___ftge^(0+128)
 15397  22E5  0921               	comf	(___ftge@ff1+1)^(0+128),w
 15398  22E6  00A7               	movwf	(??___ftge^(0+128)+1)
 15399  22E7  0922               	comf	(___ftge@ff1+2)^(0+128),w
 15400  22E8  00A8               	movwf	(??___ftge^(0+128)+2)
 15401  22E9  0AA6               	incf	??___ftge^(0+128),f
 15402  22EA  1903               	skipnz
 15403  22EB  0AA7               	incf	(??___ftge^(0+128)+1),f
 15404  22EC  1903               	skipnz
 15405  22ED  0AA8               	incf	(??___ftge^(0+128)+2),f
 15406  22EE  3000               	movlw	0
 15407  22EF  0726               	addwf	??___ftge^(0+128),w
 15408  22F0  00A0               	movwf	___ftge@ff1^(0+128)
 15409  22F1  3000               	movlw	0
 15410  22F2  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15411  22F3  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15412  22F4  3080               	movlw	128
 15413  22F5  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15414  22F6  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15415  22F7                     l7544:	
 15416  22F7  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 15417  22F8  2B0D               	goto	l7548
 15418  22F9  0923               	comf	___ftge@ff2^(0+128),w
 15419  22FA  00A6               	movwf	??___ftge^(0+128)
 15420  22FB  0924               	comf	(___ftge@ff2+1)^(0+128),w
 15421  22FC  00A7               	movwf	(??___ftge^(0+128)+1)
 15422  22FD  0925               	comf	(___ftge@ff2+2)^(0+128),w
 15423  22FE  00A8               	movwf	(??___ftge^(0+128)+2)
 15424  22FF  0AA6               	incf	??___ftge^(0+128),f
 15425  2300  1903               	skipnz
 15426  2301  0AA7               	incf	(??___ftge^(0+128)+1),f
 15427  2302  1903               	skipnz
 15428  2303  0AA8               	incf	(??___ftge^(0+128)+2),f
 15429  2304  3000               	movlw	0
 15430  2305  0726               	addwf	??___ftge^(0+128),w
 15431  2306  00A3               	movwf	___ftge@ff2^(0+128)
 15432  2307  3000               	movlw	0
 15433  2308  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15434  2309  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15435  230A  3080               	movlw	128
 15436  230B  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15437  230C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15438  230D                     l7548:	
 15439  230D  3080               	movlw	128
 15440  230E  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 15441  230F  3080               	movlw	128
 15442  2310  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 15443  2311  0825               	movf	(___ftge@ff2+2)^(0+128),w
 15444  2312  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 15445  2313  1D03               	skipz
 15446  2314  0008               	return
 15447  2315  0824               	movf	(___ftge@ff2+1)^(0+128),w
 15448  2316  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 15449  2317  1D03               	skipz
 15450  2318  0008               	return
 15451  2319  0823               	movf	___ftge@ff2^(0+128),w
 15452  231A  0220               	subwf	___ftge@ff1^(0+128),w
 15453  231B  0008               	return
 15454  231C                     __end_of___ftge:	
 15455                           
 15456                           	psect	text47
 15457  2600                     __ptext47:	
 15458 ;; *************** function ___altoft *****************
 15459 ;; Defined at:
 15460 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;  c               4   14[BANK2 ] long 
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;  sign            1   21[BANK2 ] unsigned char 
 15465 ;;  exp             1   20[BANK2 ] unsigned char 
 15466 ;; Return value:  Size  Location     Type
 15467 ;;                  3   14[BANK2 ] float 
 15468 ;; Registers used:
 15469 ;;		wreg, status,2, status,0, pclath, cstack
 15470 ;; Tracked objects:
 15471 ;;		On entry : 0/0
 15472 ;;		On exit  : 0/0
 15473 ;;		Unchanged: 0/0
 15474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15475 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15476 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15477 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15478 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15479 ;;Total ram usage:        8 bytes
 15480 ;; Hardware stack levels used:    1
 15481 ;; Hardware stack levels required when called:    4
 15482 ;; This function calls:
 15483 ;;		___ftpack
 15484 ;; This function is called by:
 15485 ;;		_trunc
 15486 ;;		_floor
 15487 ;; This function uses a non-reentrant model
 15488 ;;
 15489                           
 15490                           
 15491                           ;psect for function ___altoft
 15492  2600                     ___altoft:	
 15493                           
 15494                           ;incstack = 0
 15495                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15496  2600  0022               	movlb	2	; select bank2
 15497  2601  01B5               	clrf	___altoft@sign^(0+256)
 15498  2602  308E               	movlw	142
 15499  2603  00B2               	movwf	??___altoft^(0+256)
 15500  2604  0832               	movf	??___altoft^(0+256),w
 15501  2605  00B4               	movwf	___altoft@exp^(0+256)
 15502  2606  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 15503  2607  2E15               	goto	l7464
 15504  2608  09AE               	comf	___altoft@c^(0+256),f
 15505  2609  09AF               	comf	(___altoft@c+1)^(0+256),f
 15506  260A  09B0               	comf	(___altoft@c+2)^(0+256),f
 15507  260B  09B1               	comf	(___altoft@c+3)^(0+256),f
 15508  260C  0AAE               	incf	___altoft@c^(0+256),f
 15509  260D  1903               	skipnz
 15510  260E  0AAF               	incf	(___altoft@c+1)^(0+256),f
 15511  260F  1903               	skipnz
 15512  2610  0AB0               	incf	(___altoft@c+2)^(0+256),f
 15513  2611  1903               	skipnz
 15514  2612  0AB1               	incf	(___altoft@c+3)^(0+256),f
 15515  2613  01B5               	clrf	___altoft@sign^(0+256)
 15516  2614  0AB5               	incf	___altoft@sign^(0+256),f
 15517  2615                     l7464:	
 15518  2615  30FF               	movlw	255
 15519  2616  0531               	andwf	(___altoft@c+3)^(0+256),w
 15520  2617  1903               	btfsc	3,2
 15521  2618  2E25               	goto	l7466
 15522  2619  3001               	movlw	1
 15523  261A                     u7505:	
 15524  261A  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 15525  261B  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 15526  261C  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 15527  261D  0CAE               	rrf	___altoft@c^(0+256),f
 15528  261E  0B89               	decfsz	9,f
 15529  261F  2E1A               	goto	u7505
 15530  2620  3001               	movlw	1
 15531  2621  00B2               	movwf	??___altoft^(0+256)
 15532  2622  0832               	movf	??___altoft^(0+256),w
 15533  2623  07B4               	addwf	___altoft@exp^(0+256),f
 15534  2624  2E15               	goto	l7464
 15535  2625                     l7466:	
 15536  2625  082E               	movf	___altoft@c^(0+256),w
 15537  2626  0021               	movlb	1	; select bank1
 15538  2627  00A0               	movwf	___ftpack@arg^(0+128)
 15539  2628  0022               	movlb	2	; select bank2
 15540  2629  082F               	movf	(___altoft@c+1)^(0+256),w
 15541  262A  0021               	movlb	1	; select bank1
 15542  262B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15543  262C  0022               	movlb	2	; select bank2
 15544  262D  0830               	movf	(___altoft@c+2)^(0+256),w
 15545  262E  0021               	movlb	1	; select bank1
 15546  262F  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15547  2630  0022               	movlb	2	; select bank2
 15548  2631  0834               	movf	___altoft@exp^(0+256),w
 15549  2632  00B2               	movwf	??___altoft^(0+256)
 15550  2633  0832               	movf	??___altoft^(0+256),w
 15551  2634  0021               	movlb	1	; select bank1
 15552  2635  00A3               	movwf	___ftpack@exp^(0+128)
 15553  2636  0022               	movlb	2	; select bank2
 15554  2637  0835               	movf	___altoft@sign^(0+256),w
 15555  2638  00B3               	movwf	(??___altoft+1)^(0+256)
 15556  2639  0833               	movf	(??___altoft+1)^(0+256),w
 15557  263A  0021               	movlb	1	; select bank1
 15558  263B  00A4               	movwf	___ftpack@sign^(0+128)
 15559  263C  3188  2002         	fcall	___ftpack
 15560  263E  0021               	movlb	1	; select bank1
 15561  263F  0820               	movf	?___ftpack^(0+128),w
 15562  2640  0022               	movlb	2	; select bank2
 15563  2641  00AE               	movwf	?___altoft^(0+256)
 15564  2642  0021               	movlb	1	; select bank1
 15565  2643  0821               	movf	(?___ftpack+1)^(0+128),w
 15566  2644  0022               	movlb	2	; select bank2
 15567  2645  00AF               	movwf	(?___altoft+1)^(0+256)
 15568  2646  0021               	movlb	1	; select bank1
 15569  2647  0822               	movf	(?___ftpack+2)^(0+128),w
 15570  2648  0022               	movlb	2	; select bank2
 15571  2649  00B0               	movwf	(?___altoft+2)^(0+256)
 15572  264A  0008               	return
 15573  264B                     __end_of___altoft:	
 15574                           
 15575                           	psect	text48
 15576  278E                     __ptext48:	
 15577 ;; *************** function _eval_poly *****************
 15578 ;; Defined at:
 15579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 15580 ;; Parameters:    Size  Location     Type
 15581 ;;  x               3   20[BANK2 ] float 
 15582 ;;  d               2   23[BANK2 ] PTR const 
 15583 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 15584 ;;  n               2   25[BANK2 ] int 
 15585 ;; Auto vars:     Size  Location     Type
 15586 ;;  res             3   27[BANK2 ] int 
 15587 ;; Return value:  Size  Location     Type
 15588 ;;                  3   20[BANK2 ] int 
 15589 ;; Registers used:
 15590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15591 ;; Tracked objects:
 15592 ;;		On entry : 0/0
 15593 ;;		On exit  : 0/0
 15594 ;;		Unchanged: 0/0
 15595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15596 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15597 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15599 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15600 ;;Total ram usage:       10 bytes
 15601 ;; Hardware stack levels used:    1
 15602 ;; Hardware stack levels required when called:    5
 15603 ;; This function calls:
 15604 ;;		___ftadd
 15605 ;;		___ftmul
 15606 ;;		___wmul
 15607 ;; This function is called by:
 15608 ;;		_sin
 15609 ;;		_exp
 15610 ;;		_log
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           
 15615                           ;psect for function _eval_poly
 15616  278E                     _eval_poly:	
 15617                           
 15618                           ;incstack = 0
 15619                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15620  278E  0022               	movlb	2	; select bank2
 15621  278F  083A               	movf	(eval_poly@n+1)^(0+256),w
 15622  2790  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15623  2791  0839               	movf	eval_poly@n^(0+256),w
 15624  2792  00AE               	movwf	___wmul@multiplier^(0+256)
 15625  2793  3003               	movlw	3
 15626  2794  00B0               	movwf	___wmul@multiplicand^(0+256)
 15627  2795  3000               	movlw	0
 15628  2796  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15629  2797  31A0  2056  31A7   	fcall	___wmul
 15630  279A  0022               	movlb	2	; select bank2
 15631  279B  0837               	movf	eval_poly@d^(0+256),w
 15632  279C  072E               	addwf	?___wmul^(0+256),w
 15633  279D  0084               	movwf	4
 15634  279E  0838               	movf	(eval_poly@d+1)^(0+256),w
 15635  279F  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15636  27A0  0085               	movwf	5
 15637  27A1  3F00               	moviw [0]fsr0
 15638  27A2  00BB               	movwf	eval_poly@res^(0+256)
 15639  27A3  3F01               	moviw [1]fsr0
 15640  27A4  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15641  27A5  3F02               	moviw [2]fsr0
 15642  27A6                     L18:	
 15643  27A6  00BD               	movwf	(eval_poly@res+2)^(0+256)
 15644  27A7  0839               	movf	eval_poly@n^(0+256),w
 15645  27A8  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 15646  27A9  1903               	btfsc	3,2
 15647  27AA  2FF9               	goto	l7826
 15648  27AB  30FF               	movlw	255
 15649  27AC  07B9               	addwf	eval_poly@n^(0+256),f
 15650  27AD  30FF               	movlw	255
 15651  27AE  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 15652  27AF  083A               	movf	(eval_poly@n+1)^(0+256),w
 15653  27B0  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15654  27B1  0839               	movf	eval_poly@n^(0+256),w
 15655  27B2  00AE               	movwf	___wmul@multiplier^(0+256)
 15656  27B3  3003               	movlw	3
 15657  27B4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15658  27B5  3000               	movlw	0
 15659  27B6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15660  27B7  31A0  2056  31A7   	fcall	___wmul
 15661  27BA  0022               	movlb	2	; select bank2
 15662  27BB  0837               	movf	eval_poly@d^(0+256),w
 15663  27BC  072E               	addwf	?___wmul^(0+256),w
 15664  27BD  0084               	movwf	4
 15665  27BE  0838               	movf	(eval_poly@d+1)^(0+256),w
 15666  27BF  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15667  27C0  0085               	movwf	5
 15668  27C1  3F00               	moviw [0]fsr0
 15669  27C2  0021               	movlb	1	; select bank1
 15670  27C3  00C1               	movwf	___ftadd@f1^(0+128)
 15671  27C4  3F01               	moviw [1]fsr0
 15672  27C5  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15673  27C6  3F02               	moviw [2]fsr0
 15674  27C7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15675  27C8  0022               	movlb	2	; select bank2
 15676  27C9  083B               	movf	eval_poly@res^(0+256),w
 15677  27CA  0021               	movlb	1	; select bank1
 15678  27CB  00AE               	movwf	___ftmul@f1^(0+128)
 15679  27CC  0022               	movlb	2	; select bank2
 15680  27CD  083C               	movf	(eval_poly@res+1)^(0+256),w
 15681  27CE  0021               	movlb	1	; select bank1
 15682  27CF  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15683  27D0  0022               	movlb	2	; select bank2
 15684  27D1  083D               	movf	(eval_poly@res+2)^(0+256),w
 15685  27D2  0021               	movlb	1	; select bank1
 15686  27D3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15687  27D4  0022               	movlb	2	; select bank2
 15688  27D5  0834               	movf	eval_poly@x^(0+256),w
 15689  27D6  0021               	movlb	1	; select bank1
 15690  27D7  00B1               	movwf	___ftmul@f2^(0+128)
 15691  27D8  0022               	movlb	2	; select bank2
 15692  27D9  0835               	movf	(eval_poly@x+1)^(0+256),w
 15693  27DA  0021               	movlb	1	; select bank1
 15694  27DB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15695  27DC  0022               	movlb	2	; select bank2
 15696  27DD  0836               	movf	(eval_poly@x+2)^(0+256),w
 15697  27DE  0021               	movlb	1	; select bank1
 15698  27DF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15699  27E0  319E  2691  31A7   	fcall	___ftmul
 15700  27E3  0021               	movlb	1	; select bank1
 15701  27E4  082E               	movf	?___ftmul^(0+128),w
 15702  27E5  00C4               	movwf	___ftadd@f2^(0+128)
 15703  27E6  082F               	movf	(?___ftmul+1)^(0+128),w
 15704  27E7  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15705  27E8  0830               	movf	(?___ftmul+2)^(0+128),w
 15706  27E9  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15707  27EA  3192  225B  31A7   	fcall	___ftadd
 15708  27ED  0021               	movlb	1	; select bank1
 15709  27EE  0841               	movf	?___ftadd^(0+128),w
 15710  27EF  0022               	movlb	2	; select bank2
 15711  27F0  00BB               	movwf	eval_poly@res^(0+256)
 15712  27F1  0021               	movlb	1	; select bank1
 15713  27F2  0842               	movf	(?___ftadd+1)^(0+128),w
 15714  27F3  0022               	movlb	2	; select bank2
 15715  27F4  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15716  27F5  0021               	movlb	1	; select bank1
 15717  27F6  0843               	movf	(?___ftadd+2)^(0+128),w
 15718  27F7  0022               	movlb	2	; select bank2
 15719  27F8  2FA6               	goto	L18
 15720  27F9                     l7826:	
 15721  27F9  083B               	movf	eval_poly@res^(0+256),w
 15722  27FA  00B4               	movwf	?_eval_poly^(0+256)
 15723  27FB  083C               	movf	(eval_poly@res+1)^(0+256),w
 15724  27FC  00B5               	movwf	(?_eval_poly+1)^(0+256)
 15725  27FD  083D               	movf	(eval_poly@res+2)^(0+256),w
 15726  27FE  00B6               	movwf	(?_eval_poly+2)^(0+256)
 15727  27FF  0008               	return
 15728  2800                     __end_of_eval_poly:	
 15729                           
 15730                           	psect	text49
 15731  2056                     __ptext49:	
 15732 ;; *************** function ___wmul *****************
 15733 ;; Defined at:
 15734 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 15735 ;; Parameters:    Size  Location     Type
 15736 ;;  multiplier      2   14[BANK2 ] unsigned int 
 15737 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;  product         2   18[BANK2 ] unsigned int 
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  2   14[BANK2 ] unsigned int 
 15742 ;; Registers used:
 15743 ;;		wreg, status,2, status,0
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15749 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15750 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15752 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15753 ;;Total ram usage:        6 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:    3
 15756 ;; This function calls:
 15757 ;;		Nothing
 15758 ;; This function is called by:
 15759 ;;		_calcSinArray
 15760 ;;		_updateModulationArray
 15761 ;;		_modSin
 15762 ;;		_eval_poly
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           
 15767                           ;psect for function ___wmul
 15768  2056                     ___wmul:	
 15769                           
 15770                           ;incstack = 0
 15771                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15772  2056  0022               	movlb	2	; select bank2
 15773  2057  01B2               	clrf	___wmul@product^(0+256)
 15774  2058  01B3               	clrf	(___wmul@product+1)^(0+256)
 15775  2059                     l7442:	
 15776  2059  1C2E               	btfss	___wmul@multiplier^(0+256),0
 15777  205A  285F               	goto	l1931
 15778  205B  0830               	movf	___wmul@multiplicand^(0+256),w
 15779  205C  07B2               	addwf	___wmul@product^(0+256),f
 15780  205D  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 15781  205E  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 15782  205F                     l1931:	
 15783  205F  3001               	movlw	1
 15784  2060                     u7465:	
 15785  2060  35B0               	lslf	___wmul@multiplicand^(0+256),f
 15786  2061  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 15787  2062  0B89               	decfsz	9,f
 15788  2063  2860               	goto	u7465
 15789  2064  3001               	movlw	1
 15790  2065                     u7475:	
 15791  2065  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 15792  2066  0CAE               	rrf	___wmul@multiplier^(0+256),f
 15793  2067  0B89               	decfsz	9,f
 15794  2068  2865               	goto	u7475
 15795  2069  082E               	movf	___wmul@multiplier^(0+256),w
 15796  206A  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 15797  206B  1D03               	btfss	3,2
 15798  206C  2859               	goto	l7442
 15799  206D  0833               	movf	(___wmul@product+1)^(0+256),w
 15800  206E  00AF               	movwf	(?___wmul+1)^(0+256)
 15801  206F  0832               	movf	___wmul@product^(0+256),w
 15802  2070  00AE               	movwf	?___wmul^(0+256)
 15803  2071  0008               	return
 15804  2072                     __end_of___wmul:	
 15805                           
 15806                           	psect	text50
 15807  1E91                     __ptext50:	
 15808 ;; *************** function ___ftmul *****************
 15809 ;; Defined at:
 15810 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 15811 ;; Parameters:    Size  Location     Type
 15812 ;;  f1              3   14[BANK1 ] float 
 15813 ;;  f2              3   17[BANK1 ] float 
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 15816 ;;  sign            1   29[BANK1 ] unsigned char 
 15817 ;;  cntr            1   28[BANK1 ] unsigned char 
 15818 ;;  exp             1   24[BANK1 ] unsigned char 
 15819 ;; Return value:  Size  Location     Type
 15820 ;;                  3   14[BANK1 ] float 
 15821 ;; Registers used:
 15822 ;;		wreg, status,2, status,0, pclath, cstack
 15823 ;; Tracked objects:
 15824 ;;		On entry : 0/0
 15825 ;;		On exit  : 0/0
 15826 ;;		Unchanged: 0/0
 15827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15828 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15829 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15830 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15831 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15832 ;;Total ram usage:       16 bytes
 15833 ;; Hardware stack levels used:    1
 15834 ;; Hardware stack levels required when called:    4
 15835 ;; This function calls:
 15836 ;;		___ftpack
 15837 ;; This function is called by:
 15838 ;;		_set_subdivision
 15839 ;;		_map
 15840 ;;		_scaleA100kPot
 15841 ;;		_scaleA10kPot
 15842 ;;		_scaleiA10kPot
 15843 ;;		_calcSinArray
 15844 ;;		_modSin
 15845 ;;		_modTri
 15846 ;;		_modSaw
 15847 ;;		_pow
 15848 ;;		_sin
 15849 ;;		_eval_poly
 15850 ;;		_exp
 15851 ;;		_log
 15852 ;;		_scalePotValue
 15853 ;;		_scaleiA100kPot
 15854 ;; This function uses a non-reentrant model
 15855 ;;
 15856                           
 15857                           
 15858                           ;psect for function ___ftmul
 15859  1E91                     ___ftmul:	
 15860                           
 15861                           ;incstack = 0
 15862                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15863  1E91  0021               	movlb	1	; select bank1
 15864  1E92  082E               	movf	___ftmul@f1^(0+128),w
 15865  1E93  00B4               	movwf	??___ftmul^(0+128)
 15866  1E94  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15867  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 15868  1E96  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15869  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 15870  1E98  1003               	clrc
 15871  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15872  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15873  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 15874  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 15875  1E9D  00B8               	movwf	___ftmul@exp^(0+128)
 15876  1E9E  0838               	movf	___ftmul@exp^(0+128),w
 15877  1E9F  1D03               	btfss	3,2
 15878  1EA0  2EA8               	goto	l7566
 15879  1EA1  3000               	movlw	0
 15880  1EA2  00AE               	movwf	?___ftmul^(0+128)
 15881  1EA3  3000               	movlw	0
 15882  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 15883  1EA5  3000               	movlw	0
 15884  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 15885  1EA7  0008               	return
 15886  1EA8                     l7566:	
 15887  1EA8  0831               	movf	___ftmul@f2^(0+128),w
 15888  1EA9  00B4               	movwf	??___ftmul^(0+128)
 15889  1EAA  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15890  1EAB  00B5               	movwf	(??___ftmul^(0+128)+1)
 15891  1EAC  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15892  1EAD  00B6               	movwf	(??___ftmul^(0+128)+2)
 15893  1EAE  1003               	clrc
 15894  1EAF  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15895  1EB0  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15896  1EB1  00B7               	movwf	(??___ftmul+3)^(0+128)
 15897  1EB2  0837               	movf	(??___ftmul+3)^(0+128),w
 15898  1EB3  00BD               	movwf	___ftmul@sign^(0+128)
 15899  1EB4  083D               	movf	___ftmul@sign^(0+128),w
 15900  1EB5  1D03               	btfss	3,2
 15901  1EB6  2EBE               	goto	l7572
 15902  1EB7  3000               	movlw	0
 15903  1EB8  00AE               	movwf	?___ftmul^(0+128)
 15904  1EB9  3000               	movlw	0
 15905  1EBA  00AF               	movwf	(?___ftmul+1)^(0+128)
 15906  1EBB  3000               	movlw	0
 15907  1EBC  00B0               	movwf	(?___ftmul+2)^(0+128)
 15908  1EBD  0008               	return
 15909  1EBE                     l7572:	
 15910  1EBE  083D               	movf	___ftmul@sign^(0+128),w
 15911  1EBF  3E7B               	addlw	123
 15912  1EC0  00B4               	movwf	??___ftmul^(0+128)
 15913  1EC1  0834               	movf	??___ftmul^(0+128),w
 15914  1EC2  07B8               	addwf	___ftmul@exp^(0+128),f
 15915  1EC3  082E               	movf	___ftmul@f1^(0+128),w
 15916  1EC4  00B4               	movwf	??___ftmul^(0+128)
 15917  1EC5  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15918  1EC6  00B5               	movwf	(??___ftmul^(0+128)+1)
 15919  1EC7  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15920  1EC8  00B6               	movwf	(??___ftmul^(0+128)+2)
 15921  1EC9  3010               	movlw	16
 15922  1ECA                     u7805:	
 15923  1ECA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15924  1ECB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15925  1ECC  0CB4               	rrf	??___ftmul^(0+128),f
 15926  1ECD  0B89               	decfsz	9,f
 15927  1ECE  2ECA               	goto	u7805
 15928  1ECF  0834               	movf	??___ftmul^(0+128),w
 15929  1ED0  00B7               	movwf	(??___ftmul+3)^(0+128)
 15930  1ED1  0837               	movf	(??___ftmul+3)^(0+128),w
 15931  1ED2  00BD               	movwf	___ftmul@sign^(0+128)
 15932  1ED3  0831               	movf	___ftmul@f2^(0+128),w
 15933  1ED4  00B4               	movwf	??___ftmul^(0+128)
 15934  1ED5  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15935  1ED6  00B5               	movwf	(??___ftmul^(0+128)+1)
 15936  1ED7  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15937  1ED8  00B6               	movwf	(??___ftmul^(0+128)+2)
 15938  1ED9  3010               	movlw	16
 15939  1EDA                     u7815:	
 15940  1EDA  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15941  1EDB  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15942  1EDC  0CB4               	rrf	??___ftmul^(0+128),f
 15943  1EDD  0B89               	decfsz	9,f
 15944  1EDE  2EDA               	goto	u7815
 15945  1EDF  0834               	movf	??___ftmul^(0+128),w
 15946  1EE0  00B7               	movwf	(??___ftmul+3)^(0+128)
 15947  1EE1  0837               	movf	(??___ftmul+3)^(0+128),w
 15948  1EE2  06BD               	xorwf	___ftmul@sign^(0+128),f
 15949  1EE3  3080               	movlw	128
 15950  1EE4  00B4               	movwf	??___ftmul^(0+128)
 15951  1EE5  0834               	movf	??___ftmul^(0+128),w
 15952  1EE6  05BD               	andwf	___ftmul@sign^(0+128),f
 15953  1EE7  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 15954  1EE8  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 15955  1EE9  30FF               	movlw	255
 15956  1EEA  05B1               	andwf	___ftmul@f2^(0+128),f
 15957  1EEB  30FF               	movlw	255
 15958  1EEC  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 15959  1EED  3000               	movlw	0
 15960  1EEE  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 15961  1EEF  3000               	movlw	0
 15962  1EF0  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 15963  1EF1  3000               	movlw	0
 15964  1EF2  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 15965  1EF3  3000               	movlw	0
 15966  1EF4  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 15967  1EF5  3007               	movlw	7
 15968  1EF6  00B4               	movwf	??___ftmul^(0+128)
 15969  1EF7  0834               	movf	??___ftmul^(0+128),w
 15970  1EF8  00BC               	movwf	___ftmul@cntr^(0+128)
 15971  1EF9                     l7584:	
 15972  1EF9  1C2E               	btfss	___ftmul@f1^(0+128),0
 15973  1EFA  2F01               	goto	l7588
 15974  1EFB  0831               	movf	___ftmul@f2^(0+128),w
 15975  1EFC  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 15976  1EFD  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15977  1EFE  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 15978  1EFF  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15979  1F00  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 15980  1F01                     l7588:	
 15981  1F01  3001               	movlw	1
 15982  1F02                     u7835:	
 15983  1F02  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 15984  1F03  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 15985  1F04  0CAE               	rrf	___ftmul@f1^(0+128),f
 15986  1F05  0B89               	decfsz	9,f
 15987  1F06  2F02               	goto	u7835
 15988  1F07  3001               	movlw	1
 15989  1F08                     u7845:	
 15990  1F08  35B1               	lslf	___ftmul@f2^(0+128),f
 15991  1F09  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 15992  1F0A  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 15993  1F0B  0B89               	decfsz	9,f
 15994  1F0C  2F08               	goto	u7845
 15995  1F0D  3001               	movlw	1
 15996  1F0E  02BC               	subwf	___ftmul@cntr^(0+128),f
 15997  1F0F  1D03               	btfss	3,2
 15998  1F10  2EF9               	goto	l7584
 15999  1F11  3009               	movlw	9
 16000  1F12  00B4               	movwf	??___ftmul^(0+128)
 16001  1F13  0834               	movf	??___ftmul^(0+128),w
 16002  1F14  00BC               	movwf	___ftmul@cntr^(0+128)
 16003  1F15                     l7596:	
 16004  1F15  1C2E               	btfss	___ftmul@f1^(0+128),0
 16005  1F16  2F1D               	goto	l7600
 16006  1F17  0831               	movf	___ftmul@f2^(0+128),w
 16007  1F18  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16008  1F19  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16009  1F1A  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16010  1F1B  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16011  1F1C  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16012  1F1D                     l7600:	
 16013  1F1D  3001               	movlw	1
 16014  1F1E                     u7875:	
 16015  1F1E  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16016  1F1F  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16017  1F20  0CAE               	rrf	___ftmul@f1^(0+128),f
 16018  1F21  0B89               	decfsz	9,f
 16019  1F22  2F1E               	goto	u7875
 16020  1F23  3001               	movlw	1
 16021  1F24                     u7885:	
 16022  1F24  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16023  1F25  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16024  1F26  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16025  1F27  0B89               	decfsz	9,f
 16026  1F28  2F24               	goto	u7885
 16027  1F29  3001               	movlw	1
 16028  1F2A  02BC               	subwf	___ftmul@cntr^(0+128),f
 16029  1F2B  1D03               	btfss	3,2
 16030  1F2C  2F15               	goto	l7596
 16031  1F2D  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16032  1F2E  00A0               	movwf	___ftpack@arg^(0+128)
 16033  1F2F  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16034  1F30  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16035  1F31  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16036  1F32  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16037  1F33  0838               	movf	___ftmul@exp^(0+128),w
 16038  1F34  00B4               	movwf	??___ftmul^(0+128)
 16039  1F35  0834               	movf	??___ftmul^(0+128),w
 16040  1F36  00A3               	movwf	___ftpack@exp^(0+128)
 16041  1F37  083D               	movf	___ftmul@sign^(0+128),w
 16042  1F38  00B5               	movwf	(??___ftmul+1)^(0+128)
 16043  1F39  0835               	movf	(??___ftmul+1)^(0+128),w
 16044  1F3A  00A4               	movwf	___ftpack@sign^(0+128)
 16045  1F3B  3188  2002         	fcall	___ftpack
 16046  1F3D  0021               	movlb	1	; select bank1
 16047  1F3E  0820               	movf	?___ftpack^(0+128),w
 16048  1F3F  00AE               	movwf	?___ftmul^(0+128)
 16049  1F40  0821               	movf	(?___ftpack+1)^(0+128),w
 16050  1F41  00AF               	movwf	(?___ftmul+1)^(0+128)
 16051  1F42  0822               	movf	(?___ftpack+2)^(0+128),w
 16052  1F43  00B0               	movwf	(?___ftmul+2)^(0+128)
 16053  1F44  0008               	return
 16054  1F45                     __end_of___ftmul:	
 16055                           
 16056                           	psect	text51
 16057  2144                     __ptext51:	
 16058 ;; *************** function ___ftsub *****************
 16059 ;; Defined at:
 16060 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16061 ;; Parameters:    Size  Location     Type
 16062 ;;  f2              3   31[BANK2 ] float 
 16063 ;;  f1              3   34[BANK2 ] float 
 16064 ;; Auto vars:     Size  Location     Type
 16065 ;;		None
 16066 ;; Return value:  Size  Location     Type
 16067 ;;                  3   31[BANK2 ] float 
 16068 ;; Registers used:
 16069 ;;		wreg, status,2, status,0, pclath, cstack
 16070 ;; Tracked objects:
 16071 ;;		On entry : 0/0
 16072 ;;		On exit  : 0/0
 16073 ;;		Unchanged: 0/0
 16074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16075 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16078 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16079 ;;Total ram usage:        6 bytes
 16080 ;; Hardware stack levels used:    1
 16081 ;; Hardware stack levels required when called:    5
 16082 ;; This function calls:
 16083 ;;		___ftadd
 16084 ;; This function is called by:
 16085 ;;		_sin
 16086 ;;		_exp
 16087 ;; This function uses a non-reentrant model
 16088 ;;
 16089                           
 16090                           
 16091                           ;psect for function ___ftsub
 16092  2144                     ___ftsub:	
 16093                           
 16094                           ;incstack = 0
 16095                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16096  2144  0022               	movlb	2	; select bank2
 16097  2145  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16098  2146  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16099  2147  043F               	iorwf	___ftsub@f2^(0+256),w
 16100  2148  1903               	skipnz
 16101  2149  294C               	goto	l7788
 16102  214A  3080               	movlw	128
 16103  214B  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16104  214C                     l7788:	
 16105  214C  0842               	movf	___ftsub@f1^(0+256),w
 16106  214D  0021               	movlb	1	; select bank1
 16107  214E  00C1               	movwf	___ftadd@f1^(0+128)
 16108  214F  0022               	movlb	2	; select bank2
 16109  2150  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16110  2151  0021               	movlb	1	; select bank1
 16111  2152  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16112  2153  0022               	movlb	2	; select bank2
 16113  2154  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16114  2155  0021               	movlb	1	; select bank1
 16115  2156  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16116  2157  0022               	movlb	2	; select bank2
 16117  2158  083F               	movf	___ftsub@f2^(0+256),w
 16118  2159  0021               	movlb	1	; select bank1
 16119  215A  00C4               	movwf	___ftadd@f2^(0+128)
 16120  215B  0022               	movlb	2	; select bank2
 16121  215C  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16122  215D  0021               	movlb	1	; select bank1
 16123  215E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16124  215F  0022               	movlb	2	; select bank2
 16125  2160  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16126  2161  0021               	movlb	1	; select bank1
 16127  2162  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16128  2163  3192  225B         	fcall	___ftadd
 16129  2165  0021               	movlb	1	; select bank1
 16130  2166  0841               	movf	?___ftadd^(0+128),w
 16131  2167  0022               	movlb	2	; select bank2
 16132  2168  00BF               	movwf	?___ftsub^(0+256)
 16133  2169  0021               	movlb	1	; select bank1
 16134  216A  0842               	movf	(?___ftadd+1)^(0+128),w
 16135  216B  0022               	movlb	2	; select bank2
 16136  216C  00C0               	movwf	(?___ftsub+1)^(0+256)
 16137  216D  0021               	movlb	1	; select bank1
 16138  216E  0843               	movf	(?___ftadd+2)^(0+128),w
 16139  216F  0022               	movlb	2	; select bank2
 16140  2170  00C1               	movwf	(?___ftsub+2)^(0+256)
 16141  2171  0008               	return
 16142  2172                     __end_of___ftsub:	
 16143                           
 16144                           	psect	text52
 16145  125B                     __ptext52:	
 16146 ;; *************** function ___ftadd *****************
 16147 ;; Defined at:
 16148 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;  f1              3   33[BANK1 ] float 
 16151 ;;  f2              3   36[BANK1 ] float 
 16152 ;; Auto vars:     Size  Location     Type
 16153 ;;  exp1            1   45[BANK1 ] unsigned char 
 16154 ;;  exp2            1   44[BANK1 ] unsigned char 
 16155 ;;  sign            1   43[BANK1 ] unsigned char 
 16156 ;; Return value:  Size  Location     Type
 16157 ;;                  3   33[BANK1 ] float 
 16158 ;; Registers used:
 16159 ;;		wreg, status,2, status,0, pclath, cstack
 16160 ;; Tracked objects:
 16161 ;;		On entry : 0/0
 16162 ;;		On exit  : 0/0
 16163 ;;		Unchanged: 0/0
 16164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16165 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16166 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16167 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16168 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16169 ;;Total ram usage:       13 bytes
 16170 ;; Hardware stack levels used:    1
 16171 ;; Hardware stack levels required when called:    4
 16172 ;; This function calls:
 16173 ;;		___ftpack
 16174 ;; This function is called by:
 16175 ;;		_map
 16176 ;;		_scaleiA10kPot
 16177 ;;		_modSin
 16178 ;;		_modTri
 16179 ;;		_modSaw
 16180 ;;		___ftsub
 16181 ;;		_sin
 16182 ;;		_eval_poly
 16183 ;;		_floor
 16184 ;;		_log
 16185 ;;		_scalePotValue
 16186 ;; This function uses a non-reentrant model
 16187 ;;
 16188                           
 16189                           
 16190                           ;psect for function ___ftadd
 16191  125B                     ___ftadd:	
 16192                           
 16193                           ;incstack = 0
 16194                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16195  125B  0021               	movlb	1	; select bank1
 16196  125C  0841               	movf	___ftadd@f1^(0+128),w
 16197  125D  00C7               	movwf	??___ftadd^(0+128)
 16198  125E  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16199  125F  00C8               	movwf	(??___ftadd^(0+128)+1)
 16200  1260  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16201  1261  00C9               	movwf	(??___ftadd^(0+128)+2)
 16202  1262  1003               	clrc
 16203  1263  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16204  1264  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16205  1265  00CA               	movwf	(??___ftadd+3)^(0+128)
 16206  1266  084A               	movf	(??___ftadd+3)^(0+128),w
 16207  1267  00CD               	movwf	___ftadd@exp1^(0+128)
 16208  1268  0844               	movf	___ftadd@f2^(0+128),w
 16209  1269  00C7               	movwf	??___ftadd^(0+128)
 16210  126A  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16211  126B  00C8               	movwf	(??___ftadd^(0+128)+1)
 16212  126C  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16213  126D  00C9               	movwf	(??___ftadd^(0+128)+2)
 16214  126E  1003               	clrc
 16215  126F  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16216  1270  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16217  1271  00CA               	movwf	(??___ftadd+3)^(0+128)
 16218  1272  084A               	movf	(??___ftadd+3)^(0+128),w
 16219  1273  00CC               	movwf	___ftadd@exp2^(0+128)
 16220  1274  084D               	movf	___ftadd@exp1^(0+128),w
 16221  1275  1903               	btfsc	3,2
 16222  1276  2A83               	goto	l7476
 16223  1277  084C               	movf	___ftadd@exp2^(0+128),w
 16224  1278  024D               	subwf	___ftadd@exp1^(0+128),w
 16225  1279  1803               	skipnc
 16226  127A  2A8A               	goto	l7480
 16227  127B  034D               	decf	___ftadd@exp1^(0+128),w
 16228  127C  3AFF               	xorlw	255
 16229  127D  074C               	addwf	___ftadd@exp2^(0+128),w
 16230  127E  00C7               	movwf	??___ftadd^(0+128)
 16231  127F  3019               	movlw	25
 16232  1280  0247               	subwf	??___ftadd^(0+128),w
 16233  1281  1C03               	skipc
 16234  1282  2A8A               	goto	l7480
 16235  1283                     l7476:	
 16236  1283  0844               	movf	___ftadd@f2^(0+128),w
 16237  1284  00C1               	movwf	?___ftadd^(0+128)
 16238  1285  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16239  1286  00C2               	movwf	(?___ftadd+1)^(0+128)
 16240  1287  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16241  1288  00C3               	movwf	(?___ftadd+2)^(0+128)
 16242  1289  0008               	return
 16243  128A                     l7480:	
 16244  128A  084C               	movf	___ftadd@exp2^(0+128),w
 16245  128B  1903               	btfsc	3,2
 16246  128C  0008               	return
 16247  128D  084D               	movf	___ftadd@exp1^(0+128),w
 16248  128E  024C               	subwf	___ftadd@exp2^(0+128),w
 16249  128F  1803               	skipnc
 16250  1290  2A99               	goto	l7486
 16251  1291  034C               	decf	___ftadd@exp2^(0+128),w
 16252  1292  3AFF               	xorlw	255
 16253  1293  074D               	addwf	___ftadd@exp1^(0+128),w
 16254  1294  00C7               	movwf	??___ftadd^(0+128)
 16255  1295  3019               	movlw	25
 16256  1296  0247               	subwf	??___ftadd^(0+128),w
 16257  1297  1803               	btfsc	3,0
 16258  1298  0008               	return
 16259  1299                     l7486:	
 16260  1299  3006               	movlw	6
 16261  129A  00C7               	movwf	??___ftadd^(0+128)
 16262  129B  0847               	movf	??___ftadd^(0+128),w
 16263  129C  00CB               	movwf	___ftadd@sign^(0+128)
 16264  129D  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16265  129E  17CB               	bsf	___ftadd@sign^(0+128),7
 16266  129F  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16267  12A0  174B               	bsf	___ftadd@sign^(0+128),6
 16268  12A1  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16269  12A2  30FF               	movlw	255
 16270  12A3  05C1               	andwf	___ftadd@f1^(0+128),f
 16271  12A4  30FF               	movlw	255
 16272  12A5  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16273  12A6  3000               	movlw	0
 16274  12A7  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 16275  12A8  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 16276  12A9  30FF               	movlw	255
 16277  12AA  05C4               	andwf	___ftadd@f2^(0+128),f
 16278  12AB  30FF               	movlw	255
 16279  12AC  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 16280  12AD  3000               	movlw	0
 16281  12AE  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 16282  12AF  084C               	movf	___ftadd@exp2^(0+128),w
 16283  12B0  024D               	subwf	___ftadd@exp1^(0+128),w
 16284  12B1  1803               	skipnc
 16285  12B2  2AD5               	goto	l7508
 16286  12B3                     l7498:	
 16287  12B3  3001               	movlw	1
 16288  12B4                     u7615:	
 16289  12B4  35C4               	lslf	___ftadd@f2^(0+128),f
 16290  12B5  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 16291  12B6  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 16292  12B7  0B89               	decfsz	9,f
 16293  12B8  2AB4               	goto	u7615
 16294  12B9  3001               	movlw	1
 16295  12BA  02CC               	subwf	___ftadd@exp2^(0+128),f
 16296  12BB  084C               	movf	___ftadd@exp2^(0+128),w
 16297  12BC  064D               	xorwf	___ftadd@exp1^(0+128),w
 16298  12BD  1903               	skipnz
 16299  12BE  2AD0               	goto	l7506
 16300  12BF  3001               	movlw	1
 16301  12C0  02CB               	subwf	___ftadd@sign^(0+128),f
 16302  12C1  084B               	movf	___ftadd@sign^(0+128),w
 16303  12C2  3907               	andlw	7
 16304  12C3  1903               	btfsc	3,2
 16305  12C4  2AD0               	goto	l7506
 16306  12C5  2AB3               	goto	l7498
 16307  12C6                     l7504:	
 16308  12C6  3001               	movlw	1
 16309  12C7                     u7645:	
 16310  12C7  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 16311  12C8  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 16312  12C9  0CC1               	rrf	___ftadd@f1^(0+128),f
 16313  12CA  0B89               	decfsz	9,f
 16314  12CB  2AC7               	goto	u7645
 16315  12CC  3001               	movlw	1
 16316  12CD  00C7               	movwf	??___ftadd^(0+128)
 16317  12CE  0847               	movf	??___ftadd^(0+128),w
 16318  12CF  07CD               	addwf	___ftadd@exp1^(0+128),f
 16319  12D0                     l7506:	
 16320  12D0  084D               	movf	___ftadd@exp1^(0+128),w
 16321  12D1  064C               	xorwf	___ftadd@exp2^(0+128),w
 16322  12D2  1903               	btfsc	3,2
 16323  12D3  2AFA               	goto	l2123
 16324  12D4  2AC6               	goto	l7504
 16325  12D5                     l7508:	
 16326  12D5  084D               	movf	___ftadd@exp1^(0+128),w
 16327  12D6  024C               	subwf	___ftadd@exp2^(0+128),w
 16328  12D7  1803               	skipnc
 16329  12D8  2AFA               	goto	l2123
 16330  12D9                     l7510:	
 16331  12D9  3001               	movlw	1
 16332  12DA                     u7675:	
 16333  12DA  35C1               	lslf	___ftadd@f1^(0+128),f
 16334  12DB  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 16335  12DC  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 16336  12DD  0B89               	decfsz	9,f
 16337  12DE  2ADA               	goto	u7675
 16338  12DF  3001               	movlw	1
 16339  12E0  02CD               	subwf	___ftadd@exp1^(0+128),f
 16340  12E1  084C               	movf	___ftadd@exp2^(0+128),w
 16341  12E2  064D               	xorwf	___ftadd@exp1^(0+128),w
 16342  12E3  1903               	skipnz
 16343  12E4  2AF6               	goto	l7518
 16344  12E5  3001               	movlw	1
 16345  12E6  02CB               	subwf	___ftadd@sign^(0+128),f
 16346  12E7  084B               	movf	___ftadd@sign^(0+128),w
 16347  12E8  3907               	andlw	7
 16348  12E9  1903               	btfsc	3,2
 16349  12EA  2AF6               	goto	l7518
 16350  12EB  2AD9               	goto	l7510
 16351  12EC                     l7516:	
 16352  12EC  3001               	movlw	1
 16353  12ED                     u7705:	
 16354  12ED  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 16355  12EE  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 16356  12EF  0CC4               	rrf	___ftadd@f2^(0+128),f
 16357  12F0  0B89               	decfsz	9,f
 16358  12F1  2AED               	goto	u7705
 16359  12F2  3001               	movlw	1
 16360  12F3  00C7               	movwf	??___ftadd^(0+128)
 16361  12F4  0847               	movf	??___ftadd^(0+128),w
 16362  12F5  07CC               	addwf	___ftadd@exp2^(0+128),f
 16363  12F6                     l7518:	
 16364  12F6  084D               	movf	___ftadd@exp1^(0+128),w
 16365  12F7  064C               	xorwf	___ftadd@exp2^(0+128),w
 16366  12F8  1D03               	skipz
 16367  12F9  2AEC               	goto	l7516
 16368  12FA                     l2123:	
 16369  12FA  1FCB               	btfss	___ftadd@sign^(0+128),7
 16370  12FB  2B0C               	goto	l7522
 16371  12FC  30FF               	movlw	255
 16372  12FD  06C1               	xorwf	___ftadd@f1^(0+128),f
 16373  12FE  30FF               	movlw	255
 16374  12FF  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 16375  1300  30FF               	movlw	255
 16376  1301  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 16377  1302  3001               	movlw	1
 16378  1303  07C1               	addwf	___ftadd@f1^(0+128),f
 16379  1304  3000               	movlw	0
 16380  1305  1803               	skipnc
 16381  1306  3001               	movlw	1
 16382  1307  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 16383  1308  3000               	movlw	0
 16384  1309  1803               	skipnc
 16385  130A  3001               	movlw	1
 16386  130B  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 16387  130C                     l7522:	
 16388  130C  1F4B               	btfss	___ftadd@sign^(0+128),6
 16389  130D  2B1E               	goto	l7526
 16390  130E  30FF               	movlw	255
 16391  130F  06C4               	xorwf	___ftadd@f2^(0+128),f
 16392  1310  30FF               	movlw	255
 16393  1311  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16394  1312  30FF               	movlw	255
 16395  1313  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16396  1314  3001               	movlw	1
 16397  1315  07C4               	addwf	___ftadd@f2^(0+128),f
 16398  1316  3000               	movlw	0
 16399  1317  1803               	skipnc
 16400  1318  3001               	movlw	1
 16401  1319  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16402  131A  3000               	movlw	0
 16403  131B  1803               	skipnc
 16404  131C  3001               	movlw	1
 16405  131D  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16406  131E                     l7526:	
 16407  131E  01CB               	clrf	___ftadd@sign^(0+128)
 16408  131F  0841               	movf	___ftadd@f1^(0+128),w
 16409  1320  07C4               	addwf	___ftadd@f2^(0+128),f
 16410  1321  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16411  1322  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 16412  1323  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16413  1324  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 16414  1325  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 16415  1326  2B39               	goto	l7536
 16416  1327  30FF               	movlw	255
 16417  1328  06C4               	xorwf	___ftadd@f2^(0+128),f
 16418  1329  30FF               	movlw	255
 16419  132A  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16420  132B  30FF               	movlw	255
 16421  132C  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16422  132D  3001               	movlw	1
 16423  132E  07C4               	addwf	___ftadd@f2^(0+128),f
 16424  132F  3000               	movlw	0
 16425  1330  1803               	skipnc
 16426  1331  3001               	movlw	1
 16427  1332  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16428  1333  3000               	movlw	0
 16429  1334  1803               	skipnc
 16430  1335  3001               	movlw	1
 16431  1336  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16432  1337  01CB               	clrf	___ftadd@sign^(0+128)
 16433  1338  0ACB               	incf	___ftadd@sign^(0+128),f
 16434  1339                     l7536:	
 16435  1339  0844               	movf	___ftadd@f2^(0+128),w
 16436  133A  00A0               	movwf	___ftpack@arg^(0+128)
 16437  133B  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16438  133C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16439  133D  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16440  133E  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16441  133F  084D               	movf	___ftadd@exp1^(0+128),w
 16442  1340  00C7               	movwf	??___ftadd^(0+128)
 16443  1341  0847               	movf	??___ftadd^(0+128),w
 16444  1342  00A3               	movwf	___ftpack@exp^(0+128)
 16445  1343  084B               	movf	___ftadd@sign^(0+128),w
 16446  1344  00C8               	movwf	(??___ftadd+1)^(0+128)
 16447  1345  0848               	movf	(??___ftadd+1)^(0+128),w
 16448  1346  00A4               	movwf	___ftpack@sign^(0+128)
 16449  1347  3188  2002         	fcall	___ftpack
 16450  1349  0021               	movlb	1	; select bank1
 16451  134A  0820               	movf	?___ftpack^(0+128),w
 16452  134B  00C1               	movwf	?___ftadd^(0+128)
 16453  134C  0821               	movf	(?___ftpack+1)^(0+128),w
 16454  134D  00C2               	movwf	(?___ftadd+1)^(0+128)
 16455  134E  0822               	movf	(?___ftpack+2)^(0+128),w
 16456  134F  00C3               	movwf	(?___ftadd+2)^(0+128)
 16457  1350  0008               	return
 16458  1351                     __end_of___ftadd:	
 16459                           
 16460                           	psect	text53
 16461  2F79                     __ptext53:	
 16462 ;; *************** function ___ftneg *****************
 16463 ;; Defined at:
 16464 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 16465 ;; Parameters:    Size  Location     Type
 16466 ;;  f1              3   30[BANK1 ] float 
 16467 ;; Auto vars:     Size  Location     Type
 16468 ;;		None
 16469 ;; Return value:  Size  Location     Type
 16470 ;;                  3   30[BANK1 ] float 
 16471 ;; Registers used:
 16472 ;;		wreg
 16473 ;; Tracked objects:
 16474 ;;		On entry : 0/0
 16475 ;;		On exit  : 0/0
 16476 ;;		Unchanged: 0/0
 16477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16478 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16481 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16482 ;;Total ram usage:        3 bytes
 16483 ;; Hardware stack levels used:    1
 16484 ;; Hardware stack levels required when called:    3
 16485 ;; This function calls:
 16486 ;;		Nothing
 16487 ;; This function is called by:
 16488 ;;		_map
 16489 ;;		_scaleiA10kPot
 16490 ;;		_modSin
 16491 ;;		_modTri
 16492 ;;		_modSaw
 16493 ;;		_pow
 16494 ;;		_sin
 16495 ;;		_exp
 16496 ;;		_ldexp
 16497 ;;		_scalePotValue
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           
 16502                           ;psect for function ___ftneg
 16503  2F79                     ___ftneg:	
 16504                           
 16505                           ;incstack = 0
 16506                           ; Regs used in ___ftneg: [wreg]
 16507  2F79  0021               	movlb	1	; select bank1
 16508  2F7A  0840               	movf	(___ftneg@f1+2)^(0+128),w
 16509  2F7B  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 16510  2F7C  043E               	iorwf	___ftneg@f1^(0+128),w
 16511  2F7D  1903               	skipnz
 16512  2F7E  0008               	return
 16513  2F7F  3080               	movlw	128
 16514  2F80  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 16515  2F81  0008               	return
 16516  2F82                     __end_of___ftneg:	
 16517                           
 16518                           	psect	text54
 16519  1D3D                     __ptext54:	
 16520 ;; *************** function ___ftdiv *****************
 16521 ;; Defined at:
 16522 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 16523 ;; Parameters:    Size  Location     Type
 16524 ;;  f2              3   46[BANK1 ] float 
 16525 ;;  f1              3   49[BANK1 ] float 
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;  f3              3   57[BANK1 ] float 
 16528 ;;  sign            1   61[BANK1 ] unsigned char 
 16529 ;;  exp             1   60[BANK1 ] unsigned char 
 16530 ;;  cntr            1   56[BANK1 ] unsigned char 
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  3   46[BANK1 ] float 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2, status,0, pclath, cstack
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16540 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16541 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16542 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16543 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16544 ;;Total ram usage:       16 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; Hardware stack levels required when called:    4
 16547 ;; This function calls:
 16548 ;;		___ftpack
 16549 ;; This function is called by:
 16550 ;;		_map
 16551 ;;		_scaleA100kPot
 16552 ;;		_scaleA10kPot
 16553 ;;		_scaleiA10kPot
 16554 ;;		_calcSinArray
 16555 ;;		_modSin
 16556 ;;		_modTri
 16557 ;;		_modSaw
 16558 ;;		_sin
 16559 ;;		_exp
 16560 ;;		_scalePotValue
 16561 ;;		_scaleiA100kPot
 16562 ;; This function uses a non-reentrant model
 16563 ;;
 16564                           
 16565                           
 16566                           ;psect for function ___ftdiv
 16567  1D3D                     ___ftdiv:	
 16568                           
 16569                           ;incstack = 0
 16570                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16571  1D3D  0021               	movlb	1	; select bank1
 16572  1D3E  0851               	movf	___ftdiv@f1^(0+128),w
 16573  1D3F  00D4               	movwf	??___ftdiv^(0+128)
 16574  1D40  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16575  1D41  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16576  1D42  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16577  1D43  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16578  1D44  1003               	clrc
 16579  1D45  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16580  1D46  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16581  1D47  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16582  1D48  0857               	movf	(??___ftdiv+3)^(0+128),w
 16583  1D49  00DC               	movwf	___ftdiv@exp^(0+128)
 16584  1D4A  085C               	movf	___ftdiv@exp^(0+128),w
 16585  1D4B  1D03               	btfss	3,2
 16586  1D4C  2D54               	goto	l7748
 16587  1D4D  3000               	movlw	0
 16588  1D4E  00CE               	movwf	?___ftdiv^(0+128)
 16589  1D4F  3000               	movlw	0
 16590  1D50  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16591  1D51  3000               	movlw	0
 16592  1D52  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16593  1D53  0008               	return
 16594  1D54                     l7748:	
 16595  1D54  084E               	movf	___ftdiv@f2^(0+128),w
 16596  1D55  00D4               	movwf	??___ftdiv^(0+128)
 16597  1D56  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16598  1D57  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16599  1D58  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16600  1D59  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16601  1D5A  1003               	clrc
 16602  1D5B  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16603  1D5C  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16604  1D5D  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16605  1D5E  0857               	movf	(??___ftdiv+3)^(0+128),w
 16606  1D5F  00DD               	movwf	___ftdiv@sign^(0+128)
 16607  1D60  085D               	movf	___ftdiv@sign^(0+128),w
 16608  1D61  1D03               	btfss	3,2
 16609  1D62  2D6A               	goto	l7754
 16610  1D63  3000               	movlw	0
 16611  1D64  00CE               	movwf	?___ftdiv^(0+128)
 16612  1D65  3000               	movlw	0
 16613  1D66  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16614  1D67  3000               	movlw	0
 16615  1D68  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16616  1D69  0008               	return
 16617  1D6A                     l7754:	
 16618  1D6A  3000               	movlw	0
 16619  1D6B  00D9               	movwf	___ftdiv@f3^(0+128)
 16620  1D6C  3000               	movlw	0
 16621  1D6D  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 16622  1D6E  3000               	movlw	0
 16623  1D6F  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 16624  1D70  3089               	movlw	137
 16625  1D71  075D               	addwf	___ftdiv@sign^(0+128),w
 16626  1D72  00D4               	movwf	??___ftdiv^(0+128)
 16627  1D73  0854               	movf	??___ftdiv^(0+128),w
 16628  1D74  02DC               	subwf	___ftdiv@exp^(0+128),f
 16629  1D75  0851               	movf	___ftdiv@f1^(0+128),w
 16630  1D76  00D4               	movwf	??___ftdiv^(0+128)
 16631  1D77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16632  1D78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16633  1D79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16634  1D7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16635  1D7B  3010               	movlw	16
 16636  1D7C                     u8105:	
 16637  1D7C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16638  1D7D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16639  1D7E  0CD4               	rrf	??___ftdiv^(0+128),f
 16640  1D7F  0B89               	decfsz	9,f
 16641  1D80  2D7C               	goto	u8105
 16642  1D81  0854               	movf	??___ftdiv^(0+128),w
 16643  1D82  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16644  1D83  0857               	movf	(??___ftdiv+3)^(0+128),w
 16645  1D84  00DD               	movwf	___ftdiv@sign^(0+128)
 16646  1D85  084E               	movf	___ftdiv@f2^(0+128),w
 16647  1D86  00D4               	movwf	??___ftdiv^(0+128)
 16648  1D87  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16649  1D88  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16650  1D89  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16651  1D8A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16652  1D8B  3010               	movlw	16
 16653  1D8C                     u8115:	
 16654  1D8C  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16655  1D8D  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16656  1D8E  0CD4               	rrf	??___ftdiv^(0+128),f
 16657  1D8F  0B89               	decfsz	9,f
 16658  1D90  2D8C               	goto	u8115
 16659  1D91  0854               	movf	??___ftdiv^(0+128),w
 16660  1D92  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16661  1D93  0857               	movf	(??___ftdiv+3)^(0+128),w
 16662  1D94  06DD               	xorwf	___ftdiv@sign^(0+128),f
 16663  1D95  3080               	movlw	128
 16664  1D96  00D4               	movwf	??___ftdiv^(0+128)
 16665  1D97  0854               	movf	??___ftdiv^(0+128),w
 16666  1D98  05DD               	andwf	___ftdiv@sign^(0+128),f
 16667  1D99  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 16668  1D9A  30FF               	movlw	255
 16669  1D9B  05D1               	andwf	___ftdiv@f1^(0+128),f
 16670  1D9C  30FF               	movlw	255
 16671  1D9D  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 16672  1D9E  3000               	movlw	0
 16673  1D9F  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 16674  1DA0  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 16675  1DA1  30FF               	movlw	255
 16676  1DA2  05CE               	andwf	___ftdiv@f2^(0+128),f
 16677  1DA3  30FF               	movlw	255
 16678  1DA4  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 16679  1DA5  3000               	movlw	0
 16680  1DA6  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 16681  1DA7  3018               	movlw	24
 16682  1DA8  00D4               	movwf	??___ftdiv^(0+128)
 16683  1DA9  0854               	movf	??___ftdiv^(0+128),w
 16684  1DAA  00D8               	movwf	___ftdiv@cntr^(0+128)
 16685  1DAB                     l7768:	
 16686  1DAB  3001               	movlw	1
 16687  1DAC                     u8125:	
 16688  1DAC  35D9               	lslf	___ftdiv@f3^(0+128),f
 16689  1DAD  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 16690  1DAE  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 16691  1DAF  0B89               	decfsz	9,f
 16692  1DB0  2DAC               	goto	u8125
 16693  1DB1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16694  1DB2  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 16695  1DB3  1D03               	skipz
 16696  1DB4  2DBB               	goto	u8135
 16697  1DB5  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16698  1DB6  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 16699  1DB7  1D03               	skipz
 16700  1DB8  2DBB               	goto	u8135
 16701  1DB9  084E               	movf	___ftdiv@f2^(0+128),w
 16702  1DBA  0251               	subwf	___ftdiv@f1^(0+128),w
 16703  1DBB                     u8135:	
 16704  1DBB  1C03               	skipc
 16705  1DBC  2DC4               	goto	l7776
 16706  1DBD  084E               	movf	___ftdiv@f2^(0+128),w
 16707  1DBE  02D1               	subwf	___ftdiv@f1^(0+128),f
 16708  1DBF  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16709  1DC0  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 16710  1DC1  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16711  1DC2  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 16712  1DC3  1459               	bsf	___ftdiv@f3^(0+128),0
 16713  1DC4                     l7776:	
 16714  1DC4  3001               	movlw	1
 16715  1DC5                     u8145:	
 16716  1DC5  35D1               	lslf	___ftdiv@f1^(0+128),f
 16717  1DC6  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 16718  1DC7  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 16719  1DC8  0B89               	decfsz	9,f
 16720  1DC9  2DC5               	goto	u8145
 16721  1DCA  3001               	movlw	1
 16722  1DCB  02D8               	subwf	___ftdiv@cntr^(0+128),f
 16723  1DCC  1D03               	btfss	3,2
 16724  1DCD  2DAB               	goto	l7768
 16725  1DCE  0859               	movf	___ftdiv@f3^(0+128),w
 16726  1DCF  00A0               	movwf	___ftpack@arg^(0+128)
 16727  1DD0  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 16728  1DD1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16729  1DD2  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 16730  1DD3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16731  1DD4  085C               	movf	___ftdiv@exp^(0+128),w
 16732  1DD5  00D4               	movwf	??___ftdiv^(0+128)
 16733  1DD6  0854               	movf	??___ftdiv^(0+128),w
 16734  1DD7  00A3               	movwf	___ftpack@exp^(0+128)
 16735  1DD8  085D               	movf	___ftdiv@sign^(0+128),w
 16736  1DD9  00D5               	movwf	(??___ftdiv+1)^(0+128)
 16737  1DDA  0855               	movf	(??___ftdiv+1)^(0+128),w
 16738  1DDB  00A4               	movwf	___ftpack@sign^(0+128)
 16739  1DDC  3188  2002         	fcall	___ftpack
 16740  1DDE  0021               	movlb	1	; select bank1
 16741  1DDF  0820               	movf	?___ftpack^(0+128),w
 16742  1DE0  00CE               	movwf	?___ftdiv^(0+128)
 16743  1DE1  0821               	movf	(?___ftpack+1)^(0+128),w
 16744  1DE2  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16745  1DE3  0822               	movf	(?___ftpack+2)^(0+128),w
 16746  1DE4  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16747  1DE5  0008               	return
 16748  1DE6                     __end_of___ftdiv:	
 16749                           
 16750                           	psect	text55
 16751  20AE                     __ptext55:	
 16752 ;; *************** function ___awtoft *****************
 16753 ;; Defined at:
 16754 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 16755 ;; Parameters:    Size  Location     Type
 16756 ;;  c               2    8[BANK1 ] int 
 16757 ;; Auto vars:     Size  Location     Type
 16758 ;;  sign            1   13[BANK1 ] unsigned char 
 16759 ;; Return value:  Size  Location     Type
 16760 ;;                  3    8[BANK1 ] float 
 16761 ;; Registers used:
 16762 ;;		wreg, status,2, status,0, pclath, cstack
 16763 ;; Tracked objects:
 16764 ;;		On entry : 0/0
 16765 ;;		On exit  : 0/0
 16766 ;;		Unchanged: 0/0
 16767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16768 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16769 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16770 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16771 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16772 ;;Total ram usage:        6 bytes
 16773 ;; Hardware stack levels used:    1
 16774 ;; Hardware stack levels required when called:    4
 16775 ;; This function calls:
 16776 ;;		___ftpack
 16777 ;; This function is called by:
 16778 ;;		_main
 16779 ;;		_set_subdivision
 16780 ;;		_calcSinArray
 16781 ;;		_updateModulationArray
 16782 ;;		_exp
 16783 ;;		_log
 16784 ;; This function uses a non-reentrant model
 16785 ;;
 16786                           
 16787                           
 16788                           ;psect for function ___awtoft
 16789  20AE                     ___awtoft:	
 16790                           
 16791                           ;incstack = 0
 16792                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16793  20AE  0021               	movlb	1	; select bank1
 16794  20AF  01AD               	clrf	___awtoft@sign^(0+128)
 16795  20B0  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 16796  20B1  28B9               	goto	l7738
 16797  20B2  09A8               	comf	___awtoft@c^(0+128),f
 16798  20B3  09A9               	comf	(___awtoft@c+1)^(0+128),f
 16799  20B4  0AA8               	incf	___awtoft@c^(0+128),f
 16800  20B5  1903               	skipnz
 16801  20B6  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 16802  20B7  01AD               	clrf	___awtoft@sign^(0+128)
 16803  20B8  0AAD               	incf	___awtoft@sign^(0+128),f
 16804  20B9                     l7738:	
 16805  20B9  0828               	movf	___awtoft@c^(0+128),w
 16806  20BA  00A0               	movwf	___ftpack@arg^(0+128)
 16807  20BB  0829               	movf	(___awtoft@c+1)^(0+128),w
 16808  20BC  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16809  20BD  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 16810  20BE  308E               	movlw	142
 16811  20BF  00AB               	movwf	??___awtoft^(0+128)
 16812  20C0  082B               	movf	??___awtoft^(0+128),w
 16813  20C1  00A3               	movwf	___ftpack@exp^(0+128)
 16814  20C2  082D               	movf	___awtoft@sign^(0+128),w
 16815  20C3  00AC               	movwf	(??___awtoft+1)^(0+128)
 16816  20C4  082C               	movf	(??___awtoft+1)^(0+128),w
 16817  20C5  00A4               	movwf	___ftpack@sign^(0+128)
 16818  20C6  3188  2002         	fcall	___ftpack
 16819  20C8  0021               	movlb	1	; select bank1
 16820  20C9  0820               	movf	?___ftpack^(0+128),w
 16821  20CA  00A8               	movwf	?___awtoft^(0+128)
 16822  20CB  0821               	movf	(?___ftpack+1)^(0+128),w
 16823  20CC  00A9               	movwf	(?___awtoft+1)^(0+128)
 16824  20CD  0822               	movf	(?___ftpack+2)^(0+128),w
 16825  20CE  00AA               	movwf	(?___awtoft+2)^(0+128)
 16826  20CF  0008               	return
 16827  20D0                     __end_of___awtoft:	
 16828                           
 16829                           	psect	text56
 16830  0802                     __ptext56:	
 16831 ;; *************** function ___ftpack *****************
 16832 ;; Defined at:
 16833 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 16834 ;; Parameters:    Size  Location     Type
 16835 ;;  arg             3    0[BANK1 ] unsigned um
 16836 ;;  exp             1    3[BANK1 ] unsigned char 
 16837 ;;  sign            1    4[BANK1 ] unsigned char 
 16838 ;; Auto vars:     Size  Location     Type
 16839 ;;		None
 16840 ;; Return value:  Size  Location     Type
 16841 ;;                  3    0[BANK1 ] float 
 16842 ;; Registers used:
 16843 ;;		wreg, status,2, status,0
 16844 ;; Tracked objects:
 16845 ;;		On entry : 0/0
 16846 ;;		On exit  : 0/0
 16847 ;;		Unchanged: 0/0
 16848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16849 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16851 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16852 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16853 ;;Total ram usage:        8 bytes
 16854 ;; Hardware stack levels used:    1
 16855 ;; Hardware stack levels required when called:    3
 16856 ;; This function calls:
 16857 ;;		Nothing
 16858 ;; This function is called by:
 16859 ;;		___altoft
 16860 ;;		___awtoft
 16861 ;;		___ftadd
 16862 ;;		___ftdiv
 16863 ;;		___ftmul
 16864 ;;		___lltoft
 16865 ;; This function uses a non-reentrant model
 16866 ;;
 16867                           
 16868                           
 16869                           ;psect for function ___ftpack
 16870  0802                     ___ftpack:	
 16871                           
 16872                           ;incstack = 0
 16873                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16874  0802  0021               	movlb	1	; select bank1
 16875  0803  0823               	movf	___ftpack@exp^(0+128),w
 16876  0804  1903               	btfsc	3,2
 16877  0805  280B               	goto	l7376
 16878  0806  0822               	movf	(___ftpack@arg+2)^(0+128),w
 16879  0807  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 16880  0808  0420               	iorwf	___ftpack@arg^(0+128),w
 16881  0809  1D03               	skipz
 16882  080A  281C               	goto	l7382
 16883  080B                     l7376:	
 16884  080B  3000               	movlw	0
 16885  080C  00A0               	movwf	?___ftpack^(0+128)
 16886  080D  3000               	movlw	0
 16887  080E  00A1               	movwf	(?___ftpack+1)^(0+128)
 16888  080F  3000               	movlw	0
 16889  0810  00A2               	movwf	(?___ftpack+2)^(0+128)
 16890  0811  0008               	return
 16891  0812                     l7380:	
 16892  0812  3001               	movlw	1
 16893  0813  00A5               	movwf	??___ftpack^(0+128)
 16894  0814  0825               	movf	??___ftpack^(0+128),w
 16895  0815  07A3               	addwf	___ftpack@exp^(0+128),f
 16896  0816  3001               	movlw	1
 16897  0817                     u7345:	
 16898  0817  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16899  0818  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16900  0819  0CA0               	rrf	___ftpack@arg^(0+128),f
 16901  081A  0B89               	decfsz	9,f
 16902  081B  2817               	goto	u7345
 16903  081C                     l7382:	
 16904  081C  30FE               	movlw	254
 16905  081D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16906  081E  1903               	btfsc	3,2
 16907  081F  2835               	goto	l2092
 16908  0820  2812               	goto	l7380
 16909  0821                     l7384:	
 16910  0821  3001               	movlw	1
 16911  0822  00A5               	movwf	??___ftpack^(0+128)
 16912  0823  0825               	movf	??___ftpack^(0+128),w
 16913  0824  07A3               	addwf	___ftpack@exp^(0+128),f
 16914  0825  3001               	movlw	1
 16915  0826  07A0               	addwf	___ftpack@arg^(0+128),f
 16916  0827  3000               	movlw	0
 16917  0828  1803               	skipnc
 16918  0829  3001               	movlw	1
 16919  082A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 16920  082B  3000               	movlw	0
 16921  082C  1803               	skipnc
 16922  082D  3001               	movlw	1
 16923  082E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 16924  082F  3001               	movlw	1
 16925  0830                     u7365:	
 16926  0830  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16927  0831  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16928  0832  0CA0               	rrf	___ftpack@arg^(0+128),f
 16929  0833  0B89               	decfsz	9,f
 16930  0834  2830               	goto	u7365
 16931  0835                     l2092:	
 16932  0835  30FF               	movlw	255
 16933  0836  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16934  0837  1903               	btfsc	3,2
 16935  0838  2842               	goto	l7392
 16936  0839  2821               	goto	l7384
 16937  083A                     l7390:	
 16938  083A  3001               	movlw	1
 16939  083B  02A3               	subwf	___ftpack@exp^(0+128),f
 16940  083C  3001               	movlw	1
 16941  083D                     u7385:	
 16942  083D  35A0               	lslf	___ftpack@arg^(0+128),f
 16943  083E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 16944  083F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 16945  0840  0B89               	decfsz	9,f
 16946  0841  283D               	goto	u7385
 16947  0842                     l7392:	
 16948  0842  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 16949  0843  2848               	goto	l2099
 16950  0844  3002               	movlw	2
 16951  0845  0223               	subwf	___ftpack@exp^(0+128),w
 16952  0846  1803               	skipnc
 16953  0847  283A               	goto	l7390
 16954  0848                     l2099:	
 16955  0848  1823               	btfsc	___ftpack@exp^(0+128),0
 16956  0849  2850               	goto	l2100
 16957  084A  30FF               	movlw	255
 16958  084B  05A0               	andwf	___ftpack@arg^(0+128),f
 16959  084C  307F               	movlw	127
 16960  084D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 16961  084E  30FF               	movlw	255
 16962  084F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 16963  0850                     l2100:	
 16964  0850  1003               	clrc
 16965  0851  0CA3               	rrf	___ftpack@exp^(0+128),f
 16966  0852  0823               	movf	___ftpack@exp^(0+128),w
 16967  0853  00A5               	movwf	??___ftpack^(0+128)
 16968  0854  01A6               	clrf	(??___ftpack^(0+128)+1)
 16969  0855  01A7               	clrf	(??___ftpack^(0+128)+2)
 16970  0856  3010               	movlw	16
 16971  0857                     u7425:	
 16972  0857  35A5               	lslf	??___ftpack^(0+128),f
 16973  0858  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 16974  0859  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 16975  085A  0B89               	decfsz	9,f
 16976  085B  2857               	goto	u7425
 16977  085C  0825               	movf	??___ftpack^(0+128),w
 16978  085D  04A0               	iorwf	___ftpack@arg^(0+128),f
 16979  085E  0826               	movf	(??___ftpack+1)^(0+128),w
 16980  085F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 16981  0860  0827               	movf	(??___ftpack+2)^(0+128),w
 16982  0861  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 16983  0862  0824               	movf	___ftpack@sign^(0+128),w
 16984  0863  1903               	btfsc	3,2
 16985  0864  0008               	return
 16986  0865  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 16987  0866  0008               	return
 16988  0867                     __end_of___ftpack:	
 16989                           
 16990                           	psect	text57
 16991  2FA7                     __ptext57:	
 16992 ;; *************** function _adc_convert *****************
 16993 ;; Defined at:
 16994 ;;		line 122 in file "user.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  channel         1    wreg     unsigned char 
 16997 ;; Auto vars:     Size  Location     Type
 16998 ;;  channel         1    3[BANK1 ] unsigned char 
 16999 ;; Return value:  Size  Location     Type
 17000 ;;                  2    0[BANK1 ] unsigned int 
 17001 ;; Registers used:
 17002 ;;		wreg, status,2, status,0
 17003 ;; Tracked objects:
 17004 ;;		On entry : 0/0
 17005 ;;		On exit  : 0/0
 17006 ;;		Unchanged: 0/0
 17007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17008 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17009 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17010 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17011 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17012 ;;Total ram usage:        4 bytes
 17013 ;; Hardware stack levels used:    1
 17014 ;; Hardware stack levels required when called:    3
 17015 ;; This function calls:
 17016 ;;		Nothing
 17017 ;; This function is called by:
 17018 ;;		_main
 17019 ;; This function uses a non-reentrant model
 17020 ;;
 17021                           
 17022                           
 17023                           ;psect for function _adc_convert
 17024  2FA7                     _adc_convert:	
 17025                           
 17026                           ;incstack = 0
 17027                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17028                           ;adc_convert@channel stored from wreg
 17029  2FA7  0021               	movlb	1	; select bank1
 17030  2FA8  00A3               	movwf	adc_convert@channel^(0+128)
 17031                           
 17032                           ;user.c: 123: ADCON0bits.CHS = channel;
 17033  2FA9  0823               	movf	adc_convert@channel^(0+128),w
 17034  2FAA  00A2               	movwf	??_adc_convert^(0+128)
 17035  2FAB  0DA2               	rlf	??_adc_convert^(0+128),f
 17036  2FAC  0DA2               	rlf	??_adc_convert^(0+128),f
 17037  2FAD  081D               	movf	29,w	;volatile
 17038  2FAE  0622               	xorwf	??_adc_convert^(0+128),w
 17039  2FAF  3983               	andlw	-125
 17040  2FB0  0622               	xorwf	??_adc_convert^(0+128),w
 17041  2FB1  009D               	movwf	29	;volatile
 17042                           
 17043                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17044  2FB2  149D               	bsf	29,1	;volatile
 17045  2FB3                     l590:	
 17046                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17047                           
 17048  2FB3  189D               	btfsc	29,1	;volatile
 17049  2FB4  2FB3               	goto	l590
 17050                           
 17051                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17052  2FB5  081C               	movf	28,w	;volatile
 17053  2FB6  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17054  2FB7  081B               	movf	27,w	;volatile
 17055  2FB8  00A0               	movwf	?_adc_convert^(0+128)
 17056  2FB9  0008               	return
 17057  2FBA                     __end_of_adc_convert:	
 17058                           
 17059                           	psect	text58
 17060  2499                     __ptext58:	
 17061 ;; *************** function _USARTInit *****************
 17062 ;; Defined at:
 17063 ;;		line 31 in file "usart_pic16.c"
 17064 ;; Parameters:    Size  Location     Type
 17065 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17066 ;; Auto vars:     Size  Location     Type
 17067 ;;		None
 17068 ;; Return value:  Size  Location     Type
 17069 ;;                  1    wreg      void 
 17070 ;; Registers used:
 17071 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17072 ;; Tracked objects:
 17073 ;;		On entry : 0/0
 17074 ;;		On exit  : 0/0
 17075 ;;		Unchanged: 0/0
 17076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17077 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17079 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17080 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17081 ;;Total ram usage:        3 bytes
 17082 ;; Hardware stack levels used:    1
 17083 ;; Hardware stack levels required when called:    3
 17084 ;; This function calls:
 17085 ;;		Nothing
 17086 ;; This function is called by:
 17087 ;;		_main
 17088 ;; This function uses a non-reentrant model
 17089 ;;
 17090                           
 17091                           
 17092                           ;psect for function _USARTInit
 17093  2499                     _USARTInit:	
 17094                           
 17095                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17096                           
 17097                           ;incstack = 0
 17098                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17099  2499  30FF               	movlw	255
 17100  249A  0020               	movlb	0	; select bank0
 17101  249B  00E5               	movwf	_UQEnd	;volatile
 17102  249C  0021               	movlb	1	; select bank1
 17103  249D  00A2               	movwf	??_USARTInit^(0+128)
 17104  249E  0822               	movf	??_USARTInit^(0+128),w
 17105  249F  00FD               	movwf	_UQFront	;volatile
 17106                           
 17107                           ;usart_pic16.c: 37: switch(baud_rate)
 17108  24A0  2CAB               	goto	l8372
 17109  24A1                     l8362:	
 17110                           ;usart_pic16.c: 38: {
 17111                           ;usart_pic16.c: 39: case 9600:
 17112                           
 17113                           
 17114                           ;usart_pic16.c: 40: SPBRG=103;
 17115  24A1  3067               	movlw	103
 17116  24A2  2CA8               	goto	L21
 17117  24A3                     l8364:	
 17118                           ;usart_pic16.c: 42: case 19200:
 17119                           
 17120                           ;usart_pic16.c: 41: break;
 17121                           
 17122                           
 17123                           ;usart_pic16.c: 43: SPBRG=51;
 17124  24A3  3033               	movlw	51
 17125  24A4  2CA8               	goto	L21
 17126  24A5                     l8366:	
 17127                           ;usart_pic16.c: 45: case 31250:
 17128                           
 17129                           ;usart_pic16.c: 44: break;
 17130                           
 17131                           
 17132                           ;usart_pic16.c: 46: SPBRG = 31;
 17133  24A5  301F               	movlw	31
 17134  24A6  2CA8               	goto	L21
 17135  24A7                     l8368:	
 17136                           ;usart_pic16.c: 48: case 38400:
 17137                           
 17138                           ;usart_pic16.c: 47: break;
 17139                           
 17140                           
 17141                           ;usart_pic16.c: 49: SPBRG=25;
 17142  24A7  3019               	movlw	25
 17143  24A8                     L21:	
 17144  24A8  0023               	movlb	3	; select bank3
 17145  24A9  009B               	movwf	27	;volatile
 17146                           
 17147                           ;usart_pic16.c: 51: }
 17148                           
 17149                           ;usart_pic16.c: 50: break;
 17150  24AA  2CCE               	goto	l1699
 17151  24AB                     l8372:	
 17152                           
 17153                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17154                           ; Switch size 1, requested type "space"
 17155                           ; Number of cases is 4, Range of values is 37 to 150
 17156                           ; switch strategies available:
 17157                           ; Name         Instructions Cycles
 17158                           ; simple_byte           13     7 (average)
 17159                           ; direct_byte          237     9 (fixed)
 17160                           ; jumptable            263     9 (fixed)
 17161                           ;	Chosen strategy is simple_byte
 17162  24AB  0021               	movlb	1	; select bank1
 17163  24AC  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17164  24AD  3A25               	xorlw	37	; case 37
 17165  24AE  1903               	skipnz
 17166  24AF  2CBA               	goto	l9344
 17167  24B0  3A6E               	xorlw	110	; case 75
 17168  24B1  1903               	skipnz
 17169  24B2  2CBF               	goto	l9346
 17170  24B3  3A31               	xorlw	49	; case 122
 17171  24B4  1903               	skipnz
 17172  24B5  2CC4               	goto	l9348
 17173  24B6  3AEC               	xorlw	236	; case 150
 17174  24B7  1903               	skipnz
 17175  24B8  2CC9               	goto	l9350
 17176  24B9  2CCE               	goto	l1699
 17177  24BA                     l9344:	
 17178                           
 17179                           ; Switch size 1, requested type "space"
 17180                           ; Number of cases is 1, Range of values is 128 to 128
 17181                           ; switch strategies available:
 17182                           ; Name         Instructions Cycles
 17183                           ; simple_byte            4     3 (average)
 17184                           ; direct_byte           11     9 (fixed)
 17185                           ; jumptable            263     9 (fixed)
 17186                           ;	Chosen strategy is simple_byte
 17187  24BA  0820               	movf	USARTInit@baud_rate^(0+128),w
 17188  24BB  3A80               	xorlw	128	; case 128
 17189  24BC  1903               	skipnz
 17190  24BD  2CA1               	goto	l8362
 17191  24BE  2CCE               	goto	l1699
 17192  24BF                     l9346:	
 17193                           
 17194                           ; Switch size 1, requested type "space"
 17195                           ; Number of cases is 1, Range of values is 0 to 0
 17196                           ; switch strategies available:
 17197                           ; Name         Instructions Cycles
 17198                           ; simple_byte            4     3 (average)
 17199                           ; direct_byte            8     6 (fixed)
 17200                           ; jumptable            260     6 (fixed)
 17201                           ;	Chosen strategy is simple_byte
 17202  24BF  0820               	movf	USARTInit@baud_rate^(0+128),w
 17203  24C0  3A00               	xorlw	0	; case 0
 17204  24C1  1903               	skipnz
 17205  24C2  2CA3               	goto	l8364
 17206  24C3  2CCE               	goto	l1699
 17207  24C4                     l9348:	
 17208                           
 17209                           ; Switch size 1, requested type "space"
 17210                           ; Number of cases is 1, Range of values is 18 to 18
 17211                           ; switch strategies available:
 17212                           ; Name         Instructions Cycles
 17213                           ; simple_byte            4     3 (average)
 17214                           ; direct_byte           11     9 (fixed)
 17215                           ; jumptable            263     9 (fixed)
 17216                           ;	Chosen strategy is simple_byte
 17217  24C4  0820               	movf	USARTInit@baud_rate^(0+128),w
 17218  24C5  3A12               	xorlw	18	; case 18
 17219  24C6  1903               	skipnz
 17220  24C7  2CA5               	goto	l8366
 17221  24C8  2CCE               	goto	l1699
 17222  24C9                     l9350:	
 17223                           
 17224                           ; Switch size 1, requested type "space"
 17225                           ; Number of cases is 1, Range of values is 0 to 0
 17226                           ; switch strategies available:
 17227                           ; Name         Instructions Cycles
 17228                           ; simple_byte            4     3 (average)
 17229                           ; direct_byte            8     6 (fixed)
 17230                           ; jumptable            260     6 (fixed)
 17231                           ;	Chosen strategy is simple_byte
 17232  24C9  0820               	movf	USARTInit@baud_rate^(0+128),w
 17233  24CA  3A00               	xorlw	0	; case 0
 17234  24CB  1903               	skipnz
 17235  24CC  2CA7               	goto	l8368
 17236  24CD  2CCE               	goto	l1699
 17237  24CE                     l1699:	
 17238                           
 17239                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17240  24CE  0023               	movlb	3	; select bank3
 17241  24CF  131E               	bcf	30,6	;volatile
 17242                           
 17243                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17244  24D0  169E               	bsf	30,5	;volatile
 17245                           
 17246                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17247  24D1  121E               	bcf	30,4	;volatile
 17248                           
 17249                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17250  24D2  151E               	bsf	30,2	;volatile
 17251                           
 17252                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17253  24D3  179D               	bsf	29,7	;volatile
 17254                           
 17255                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17256  24D4  131D               	bcf	29,6	;volatile
 17257                           
 17258                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17259  24D5  161D               	bsf	29,4	;volatile
 17260                           
 17261                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17262  24D6  119D               	bcf	29,3	;volatile
 17263                           
 17264                           ;usart_pic16.c: 65: RCIE=1;
 17265  24D7  0021               	movlb	1	; select bank1
 17266  24D8  1691               	bsf	17,5	;volatile
 17267                           
 17268                           ;usart_pic16.c: 66: PEIE=1;
 17269  24D9  170B               	bsf	11,6	;volatile
 17270                           
 17271                           ;usart_pic16.c: 68: (GIE = 1);
 17272  24DA  178B               	bsf	11,7	;volatile
 17273  24DB  0008               	return
 17274  24DC                     __end_of_USARTInit:	
 17275                           
 17276                           	psect	text59
 17277  186D                     __ptext59:	
 17278 ;; *************** function _ReadSavedSettings *****************
 17279 ;; Defined at:
 17280 ;;		line 234 in file "user.c"
 17281 ;; Parameters:    Size  Location     Type
 17282 ;;		None
 17283 ;; Auto vars:     Size  Location     Type
 17284 ;;		None
 17285 ;; Return value:  Size  Location     Type
 17286 ;;                  1    wreg      void 
 17287 ;; Registers used:
 17288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17289 ;; Tracked objects:
 17290 ;;		On entry : 0/0
 17291 ;;		On exit  : 0/0
 17292 ;;		Unchanged: 0/0
 17293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17296 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17297 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17298 ;;Total ram usage:        1 bytes
 17299 ;; Hardware stack levels used:    1
 17300 ;; Hardware stack levels required when called:    4
 17301 ;; This function calls:
 17302 ;;		_FLASH_ReadWord
 17303 ;;		_set_leds_bottom
 17304 ;;		_set_leds_top
 17305 ;; This function is called by:
 17306 ;;		_main
 17307 ;; This function uses a non-reentrant model
 17308 ;;
 17309                           
 17310                           
 17311                           ;psect for function _ReadSavedSettings
 17312  186D                     _ReadSavedSettings:	
 17313                           
 17314                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 17315                           
 17316                           ;incstack = 0
 17317                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17318  186D  3081               	movlw	129
 17319  186E  0021               	movlb	1	; select bank1
 17320  186F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17321  1870  301F               	movlw	31
 17322  1871  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17323  1872  31A0  208E  3198   	fcall	_FLASH_ReadWord
 17324  1875  0021               	movlb	1	; select bank1
 17325  1876  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17326  1877  0020               	movlb	0	; select bank0
 17327  1878  00D2               	movwf	_top_push_state+1
 17328  1879  0021               	movlb	1	; select bank1
 17329  187A  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17330  187B  0020               	movlb	0	; select bank0
 17331  187C  00D1               	movwf	_top_push_state
 17332                           
 17333                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 17334  187D  3082               	movlw	130
 17335  187E  0021               	movlb	1	; select bank1
 17336  187F  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17337  1880  301F               	movlw	31
 17338  1881  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17339  1882  31A0  208E  3198   	fcall	_FLASH_ReadWord
 17340  1885  0021               	movlb	1	; select bank1
 17341  1886  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17342  1887  0020               	movlb	0	; select bank0
 17343  1888  00CE               	movwf	_bottom_push_state+1
 17344  1889  0021               	movlb	1	; select bank1
 17345  188A  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17346  188B  0020               	movlb	0	; select bank0
 17347  188C  00CD               	movwf	_bottom_push_state
 17348                           
 17349                           ;user.c: 239: if (top_push_state > 6) {
 17350  188D  0852               	movf	_top_push_state+1,w
 17351  188E  3A80               	xorlw	128
 17352  188F  0021               	movlb	1	; select bank1
 17353  1890  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17354  1891  3080               	movlw	128
 17355  1892  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17356  1893  1D03               	skipz
 17357  1894  2898               	goto	u8865
 17358  1895  3007               	movlw	7
 17359  1896  0020               	movlb	0	; select bank0
 17360  1897  0251               	subwf	_top_push_state,w
 17361  1898                     u8865:	
 17362  1898  1C03               	skipc
 17363  1899  289F               	goto	l637
 17364                           
 17365                           ;user.c: 241: top_push_state = 6;
 17366  189A  3006               	movlw	6
 17367  189B  0020               	movlb	0	; select bank0
 17368  189C  00D1               	movwf	_top_push_state
 17369  189D  3000               	movlw	0
 17370  189E  00D2               	movwf	_top_push_state+1
 17371  189F                     l637:	
 17372                           
 17373                           ;user.c: 242: }
 17374                           ;user.c: 243: if (bottom_push_state > 5) {
 17375  189F  0020               	movlb	0	; select bank0
 17376  18A0  084E               	movf	_bottom_push_state+1,w
 17377  18A1  3A80               	xorlw	128
 17378  18A2  0021               	movlb	1	; select bank1
 17379  18A3  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17380  18A4  3080               	movlw	128
 17381  18A5  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17382  18A6  1D03               	skipz
 17383  18A7  28AB               	goto	u8875
 17384  18A8  3006               	movlw	6
 17385  18A9  0020               	movlb	0	; select bank0
 17386  18AA  024D               	subwf	_bottom_push_state,w
 17387  18AB                     u8875:	
 17388  18AB  1C03               	skipc
 17389  18AC  28B2               	goto	l8426
 17390                           
 17391                           ;user.c: 245: bottom_push_state = 1;
 17392  18AD  3001               	movlw	1
 17393  18AE  0020               	movlb	0	; select bank0
 17394  18AF  00CD               	movwf	_bottom_push_state
 17395  18B0  3000               	movlw	0
 17396  18B1  00CE               	movwf	_bottom_push_state+1
 17397  18B2                     l8426:	
 17398                           
 17399                           ;user.c: 246: }
 17400                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 17401  18B2  0020               	movlb	0	; select bank0
 17402  18B3  0858               	movf	_switchBypass_state,w
 17403  18B4  1D03               	btfss	3,2
 17404  18B5  28B9               	goto	u8880
 17405  18B6  0027               	movlb	7	; select bank7
 17406  18B7  148D               	bsf	13,1	;volatile
 17407  18B8  28BB               	goto	l8428
 17408  18B9                     u8880:	
 17409  18B9  0027               	movlb	7	; select bank7
 17410  18BA  108D               	bcf	13,1	;volatile
 17411  18BB                     l8428:	
 17412                           
 17413                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 17414  18BB  0020               	movlb	0	; select bank0
 17415  18BC  0C58               	rrf	_switchBypass_state,w
 17416  18BD  0027               	movlb	7	; select bank7
 17417  18BE  1C03               	skipc
 17418  18BF  110D               	bcf	13,2	;volatile
 17419  18C0  1803               	skipnc
 17420  18C1  150D               	bsf	13,2	;volatile
 17421                           
 17422                           ;user.c: 251: LATBbits.LATB2 = 0;
 17423  18C2  0022               	movlb	2	; select bank2
 17424  18C3  110D               	bcf	13,2	;volatile
 17425                           
 17426                           ;user.c: 252: LATBbits.LATB3 = 0;
 17427  18C4  118D               	bcf	13,3	;volatile
 17428                           
 17429                           ;user.c: 254: LATBbits.LATB4 = 0;
 17430  18C5  120D               	bcf	13,4	;volatile
 17431                           
 17432                           ;user.c: 255: LATBbits.LATB5 = 0;
 17433  18C6  128D               	bcf	13,5	;volatile
 17434                           
 17435                           ;user.c: 257: LATBbits.LATB1 = 0;
 17436  18C7  108D               	bcf	13,1	;volatile
 17437                           
 17438                           ;user.c: 258: LATBbits.LATB0 = 0;
 17439  18C8  100D               	bcf	13,0	;volatile
 17440                           
 17441                           ;user.c: 261: set_leds_top(top_push_state, 1);
 17442  18C9  0020               	movlb	0	; select bank0
 17443  18CA  0852               	movf	_top_push_state+1,w
 17444  18CB  0021               	movlb	1	; select bank1
 17445  18CC  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 17446  18CD  0020               	movlb	0	; select bank0
 17447  18CE  0851               	movf	_top_push_state,w
 17448  18CF  0021               	movlb	1	; select bank1
 17449  18D0  00A0               	movwf	set_leds_top@x^(0+128)
 17450  18D1  3001               	movlw	1
 17451  18D2  00A2               	movwf	set_leds_top@ledState^(0+128)
 17452  18D3  3000               	movlw	0
 17453  18D4  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 17454  18D5  31A7  273A  3198   	fcall	_set_leds_top
 17455                           
 17456                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 17457  18D8  0020               	movlb	0	; select bank0
 17458  18D9  084E               	movf	_bottom_push_state+1,w
 17459  18DA  0021               	movlb	1	; select bank1
 17460  18DB  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 17461  18DC  0020               	movlb	0	; select bank0
 17462  18DD  084D               	movf	_bottom_push_state,w
 17463  18DE  0021               	movlb	1	; select bank1
 17464  18DF  00A0               	movwf	set_leds_bottom@x^(0+128)
 17465  18E0  31A2  22A5         	fcall	_set_leds_bottom
 17466  18E2  0008               	return
 17467  18E3                     __end_of_ReadSavedSettings:	
 17468                           
 17469                           	psect	text60
 17470  273A                     __ptext60:	
 17471 ;; *************** function _set_leds_top *****************
 17472 ;; Defined at:
 17473 ;;		line 16 in file "LEDs.c"
 17474 ;; Parameters:    Size  Location     Type
 17475 ;;  x               2    0[BANK1 ] int 
 17476 ;;  ledState        2    2[BANK1 ] int 
 17477 ;; Auto vars:     Size  Location     Type
 17478 ;;		None
 17479 ;; Return value:  Size  Location     Type
 17480 ;;                  1    wreg      void 
 17481 ;; Registers used:
 17482 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17483 ;; Tracked objects:
 17484 ;;		On entry : 0/0
 17485 ;;		On exit  : 0/0
 17486 ;;		Unchanged: 0/0
 17487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17488 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17491 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17492 ;;Total ram usage:        4 bytes
 17493 ;; Hardware stack levels used:    1
 17494 ;; Hardware stack levels required when called:    3
 17495 ;; This function calls:
 17496 ;;		Nothing
 17497 ;; This function is called by:
 17498 ;;		_ReadSavedSettings
 17499 ;;		_ring_tactiles
 17500 ;;		_solidring_tactiles
 17501 ;;		_read_top_tactile
 17502 ;;		_setPresetDisplay
 17503 ;;		_resetRingLEDs
 17504 ;;		_setExpressionDisplay
 17505 ;;		_star_tactiles
 17506 ;; This function uses a non-reentrant model
 17507 ;;
 17508                           
 17509                           
 17510                           ;psect for function _set_leds_top
 17511  273A                     _set_leds_top:	
 17512                           
 17513                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 17514                           
 17515                           ;incstack = 0
 17516                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 17517  273A  0027               	movlb	7	; select bank7
 17518  273B  100C               	bcf	12,0	;volatile
 17519                           
 17520                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 17521  273C  108C               	bcf	12,1	;volatile
 17522                           
 17523                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 17524  273D  110C               	bcf	12,2	;volatile
 17525                           
 17526                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 17527  273E  118C               	bcf	12,3	;volatile
 17528                           
 17529                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 17530  273F  120C               	bcf	12,4	;volatile
 17531                           
 17532                           ;LEDs.c: 22: switch (x) {
 17533  2740  2F70               	goto	l7418
 17534  2741                     l7406:	
 17535                           ;LEDs.c: 23: case 1:
 17536                           
 17537                           
 17538                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 17539  2741  0021               	movlb	1	; select bank1
 17540  2742  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17541  2743  0027               	movlb	7	; select bank7
 17542  2744  1C03               	skipc
 17543  2745  100C               	bcf	12,0	;volatile
 17544  2746  1803               	skipnc
 17545  2747  140C               	bsf	12,0	;volatile
 17546                           
 17547                           ;LEDs.c: 25: break;
 17548  2748  0008               	return
 17549  2749                     l7408:	
 17550                           ;LEDs.c: 26: case 2:
 17551                           
 17552                           
 17553                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17554  2749  0021               	movlb	1	; select bank1
 17555  274A  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17556  274B  0027               	movlb	7	; select bank7
 17557  274C  1C03               	skipc
 17558  274D  108C               	bcf	12,1	;volatile
 17559  274E  1803               	skipnc
 17560  274F  148C               	bsf	12,1	;volatile
 17561                           
 17562                           ;LEDs.c: 28: break;
 17563  2750  0008               	return
 17564  2751                     l7410:	
 17565                           ;LEDs.c: 29: case 3:
 17566                           
 17567                           
 17568                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17569  2751  0021               	movlb	1	; select bank1
 17570  2752  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17571  2753  0027               	movlb	7	; select bank7
 17572  2754  1C03               	skipc
 17573  2755  110C               	bcf	12,2	;volatile
 17574  2756  1803               	skipnc
 17575  2757  150C               	bsf	12,2	;volatile
 17576                           
 17577                           ;LEDs.c: 31: break;
 17578  2758  0008               	return
 17579  2759                     l7412:	
 17580                           ;LEDs.c: 32: case 4:
 17581                           
 17582                           
 17583                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17584  2759  0021               	movlb	1	; select bank1
 17585  275A  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17586  275B  0027               	movlb	7	; select bank7
 17587  275C  1C03               	skipc
 17588  275D  118C               	bcf	12,3	;volatile
 17589  275E  1803               	skipnc
 17590  275F  158C               	bsf	12,3	;volatile
 17591                           
 17592                           ;LEDs.c: 34: break;
 17593  2760  0008               	return
 17594  2761                     l7414:	
 17595                           ;LEDs.c: 35: case 5:
 17596                           
 17597                           
 17598                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17599  2761  0021               	movlb	1	; select bank1
 17600  2762  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17601  2763  0027               	movlb	7	; select bank7
 17602  2764  1C03               	skipc
 17603  2765  120C               	bcf	12,4	;volatile
 17604  2766  1803               	skipnc
 17605  2767  160C               	bsf	12,4	;volatile
 17606                           
 17607                           ;LEDs.c: 39: break;
 17608                           
 17609                           ;LEDs.c: 38: case 6:
 17610                           
 17611                           ;LEDs.c: 37: break;
 17612  2768  0008               	return
 17613  2769                     l796:	
 17614                           ;LEDs.c: 40: case 100:
 17615                           
 17616                           
 17617                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17618  2769  0027               	movlb	7	; select bank7
 17619  276A  140C               	bsf	12,0	;volatile
 17620                           
 17621                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17622  276B  148C               	bsf	12,1	;volatile
 17623                           
 17624                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17625  276C  150C               	bsf	12,2	;volatile
 17626                           
 17627                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17628  276D  158C               	bsf	12,3	;volatile
 17629                           
 17630                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17631  276E  160C               	bsf	12,4	;volatile
 17632                           
 17633                           ;LEDs.c: 47: }
 17634                           
 17635                           ;LEDs.c: 46: break;
 17636  276F  0008               	return
 17637  2770                     l7418:	
 17638                           
 17639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17640                           ; Switch size 1, requested type "space"
 17641                           ; Number of cases is 1, Range of values is 0 to 0
 17642                           ; switch strategies available:
 17643                           ; Name         Instructions Cycles
 17644                           ; simple_byte            4     3 (average)
 17645                           ; direct_byte            8     6 (fixed)
 17646                           ; jumptable            260     6 (fixed)
 17647                           ;	Chosen strategy is simple_byte
 17648  2770  0021               	movlb	1	; select bank1
 17649  2771  0821               	movf	(set_leds_top@x+1)^(0+128),w
 17650  2772  3A00               	xorlw	0	; case 0
 17651  2773  1903               	skipnz
 17652  2774  2F76               	goto	l9352
 17653  2775  2F8D               	goto	l797
 17654  2776                     l9352:	
 17655                           
 17656                           ; Switch size 1, requested type "space"
 17657                           ; Number of cases is 7, Range of values is 1 to 100
 17658                           ; switch strategies available:
 17659                           ; Name         Instructions Cycles
 17660                           ; simple_byte           22    12 (average)
 17661                           ; direct_byte          209     9 (fixed)
 17662                           ; jumptable            263     9 (fixed)
 17663                           ;	Chosen strategy is simple_byte
 17664  2776  0820               	movf	set_leds_top@x^(0+128),w
 17665  2777  3A01               	xorlw	1	; case 1
 17666  2778  1903               	skipnz
 17667  2779  2F41               	goto	l7406
 17668  277A  3A03               	xorlw	3	; case 2
 17669  277B  1903               	skipnz
 17670  277C  2F49               	goto	l7408
 17671  277D  3A01               	xorlw	1	; case 3
 17672  277E  1903               	skipnz
 17673  277F  2F51               	goto	l7410
 17674  2780  3A07               	xorlw	7	; case 4
 17675  2781  1903               	skipnz
 17676  2782  2F59               	goto	l7412
 17677  2783  3A01               	xorlw	1	; case 5
 17678  2784  1903               	skipnz
 17679  2785  2F61               	goto	l7414
 17680  2786  3A03               	xorlw	3	; case 6
 17681  2787  1903               	skipnz
 17682  2788  2F8D               	goto	l797
 17683  2789  3A62               	xorlw	98	; case 100
 17684  278A  1903               	skipnz
 17685  278B  2F69               	goto	l796
 17686  278C  2F8D               	goto	l797
 17687  278D                     l797:	
 17688  278D  0008               	return
 17689  278E                     __end_of_set_leds_top:	
 17690                           
 17691                           	psect	text61
 17692  22A5                     __ptext61:	
 17693 ;; *************** function _set_leds_bottom *****************
 17694 ;; Defined at:
 17695 ;;		line 51 in file "LEDs.c"
 17696 ;; Parameters:    Size  Location     Type
 17697 ;;  x               2    0[BANK1 ] int 
 17698 ;; Auto vars:     Size  Location     Type
 17699 ;;		None
 17700 ;; Return value:  Size  Location     Type
 17701 ;;                  1    wreg      void 
 17702 ;; Registers used:
 17703 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17704 ;; Tracked objects:
 17705 ;;		On entry : 0/0
 17706 ;;		On exit  : 0/0
 17707 ;;		Unchanged: 0/0
 17708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17709 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17712 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17713 ;;Total ram usage:        2 bytes
 17714 ;; Hardware stack levels used:    1
 17715 ;; Hardware stack levels required when called:    3
 17716 ;; This function calls:
 17717 ;;		Nothing
 17718 ;; This function is called by:
 17719 ;;		_ReadSavedSettings
 17720 ;;		_ring_tactiles
 17721 ;;		_solidring_tactiles
 17722 ;;		_read_bottom_tactile
 17723 ;;		_setPresetDisplay
 17724 ;;		_resetRingLEDs
 17725 ;;		_setExpressionDisplay
 17726 ;;		_star_tactiles
 17727 ;; This function uses a non-reentrant model
 17728 ;;
 17729                           
 17730                           
 17731                           ;psect for function _set_leds_bottom
 17732  22A5                     _set_leds_bottom:	
 17733                           
 17734                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 17735                           
 17736                           ;incstack = 0
 17737                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 17738  22A5  0022               	movlb	2	; select bank2
 17739  22A6  100F               	bcf	15,0	;volatile
 17740                           
 17741                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 17742  22A7  108F               	bcf	15,1	;volatile
 17743                           
 17744                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 17745  22A8  110F               	bcf	15,2	;volatile
 17746                           
 17747                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 17748  22A9  118F               	bcf	15,3	;volatile
 17749                           
 17750                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 17751  22AA  120F               	bcf	15,4	;volatile
 17752                           
 17753                           ;LEDs.c: 57: switch (x) {
 17754  22AB  2AC2               	goto	l7434
 17755  22AC                     l801:	
 17756                           ;LEDs.c: 58: case 1:
 17757                           
 17758                           
 17759                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 17760  22AC  0022               	movlb	2	; select bank2
 17761  22AD  140F               	bsf	15,0	;volatile
 17762                           
 17763                           ;LEDs.c: 60: break;
 17764  22AE  0008               	return
 17765  22AF                     l803:	
 17766                           ;LEDs.c: 61: case 2:
 17767                           
 17768                           
 17769                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 17770  22AF  0022               	movlb	2	; select bank2
 17771  22B0  148F               	bsf	15,1	;volatile
 17772                           
 17773                           ;LEDs.c: 63: break;
 17774  22B1  0008               	return
 17775  22B2                     l804:	
 17776                           ;LEDs.c: 64: case 3:
 17777                           
 17778                           
 17779                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 17780  22B2  0022               	movlb	2	; select bank2
 17781  22B3  150F               	bsf	15,2	;volatile
 17782                           
 17783                           ;LEDs.c: 66: break;
 17784  22B4  0008               	return
 17785  22B5                     l805:	
 17786                           ;LEDs.c: 67: case 4:
 17787                           
 17788                           
 17789                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 17790  22B5  0022               	movlb	2	; select bank2
 17791  22B6  158F               	bsf	15,3	;volatile
 17792                           
 17793                           ;LEDs.c: 69: break;
 17794  22B7  0008               	return
 17795  22B8                     l806:	
 17796                           ;LEDs.c: 70: case 5:
 17797                           
 17798                           
 17799                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 17800  22B8  0022               	movlb	2	; select bank2
 17801  22B9  160F               	bsf	15,4	;volatile
 17802                           
 17803                           ;LEDs.c: 74: break;
 17804                           
 17805                           ;LEDs.c: 73: case 6:
 17806                           
 17807                           ;LEDs.c: 72: break;
 17808  22BA  0008               	return
 17809  22BB                     l808:	
 17810                           ;LEDs.c: 75: case 100:
 17811                           
 17812                           
 17813                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 17814  22BB  0022               	movlb	2	; select bank2
 17815  22BC  140F               	bsf	15,0	;volatile
 17816                           
 17817                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 17818  22BD  148F               	bsf	15,1	;volatile
 17819                           
 17820                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 17821  22BE  150F               	bsf	15,2	;volatile
 17822                           
 17823                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 17824  22BF  158F               	bsf	15,3	;volatile
 17825                           
 17826                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 17827  22C0  160F               	bsf	15,4	;volatile
 17828                           
 17829                           ;LEDs.c: 82: }
 17830                           
 17831                           ;LEDs.c: 81: break;
 17832  22C1  0008               	return
 17833  22C2                     l7434:	
 17834                           
 17835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17836                           ; Switch size 1, requested type "space"
 17837                           ; Number of cases is 1, Range of values is 0 to 0
 17838                           ; switch strategies available:
 17839                           ; Name         Instructions Cycles
 17840                           ; simple_byte            4     3 (average)
 17841                           ; direct_byte            8     6 (fixed)
 17842                           ; jumptable            260     6 (fixed)
 17843                           ;	Chosen strategy is simple_byte
 17844  22C2  0021               	movlb	1	; select bank1
 17845  22C3  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 17846  22C4  3A00               	xorlw	0	; case 0
 17847  22C5  1903               	skipnz
 17848  22C6  2AC8               	goto	l9354
 17849  22C7  2ADF               	goto	l809
 17850  22C8                     l9354:	
 17851                           
 17852                           ; Switch size 1, requested type "space"
 17853                           ; Number of cases is 7, Range of values is 1 to 100
 17854                           ; switch strategies available:
 17855                           ; Name         Instructions Cycles
 17856                           ; simple_byte           22    12 (average)
 17857                           ; direct_byte          209     9 (fixed)
 17858                           ; jumptable            263     9 (fixed)
 17859                           ;	Chosen strategy is simple_byte
 17860  22C8  0820               	movf	set_leds_bottom@x^(0+128),w
 17861  22C9  3A01               	xorlw	1	; case 1
 17862  22CA  1903               	skipnz
 17863  22CB  2AAC               	goto	l801
 17864  22CC  3A03               	xorlw	3	; case 2
 17865  22CD  1903               	skipnz
 17866  22CE  2AAF               	goto	l803
 17867  22CF  3A01               	xorlw	1	; case 3
 17868  22D0  1903               	skipnz
 17869  22D1  2AB2               	goto	l804
 17870  22D2  3A07               	xorlw	7	; case 4
 17871  22D3  1903               	skipnz
 17872  22D4  2AB5               	goto	l805
 17873  22D5  3A01               	xorlw	1	; case 5
 17874  22D6  1903               	skipnz
 17875  22D7  2AB8               	goto	l806
 17876  22D8  3A03               	xorlw	3	; case 6
 17877  22D9  1903               	skipnz
 17878  22DA  2ADF               	goto	l809
 17879  22DB  3A62               	xorlw	98	; case 100
 17880  22DC  1903               	skipnz
 17881  22DD  2ABB               	goto	l808
 17882  22DE  2ADF               	goto	l809
 17883  22DF                     l809:	
 17884  22DF  0008               	return
 17885  22E0                     __end_of_set_leds_bottom:	
 17886                           
 17887                           	psect	text62
 17888  208E                     __ptext62:	
 17889 ;; *************** function _FLASH_ReadWord *****************
 17890 ;; Defined at:
 17891 ;;		line 58 in file "memory.c"
 17892 ;; Parameters:    Size  Location     Type
 17893 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 17894 ;; Auto vars:     Size  Location     Type
 17895 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 17896 ;; Return value:  Size  Location     Type
 17897 ;;                  2    0[BANK1 ] unsigned int 
 17898 ;; Registers used:
 17899 ;;		wreg, status,2, status,0
 17900 ;; Tracked objects:
 17901 ;;		On entry : 0/0
 17902 ;;		On exit  : 0/0
 17903 ;;		Unchanged: 0/0
 17904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17905 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17906 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17908 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17909 ;;Total ram usage:        3 bytes
 17910 ;; Hardware stack levels used:    1
 17911 ;; Hardware stack levels required when called:    3
 17912 ;; This function calls:
 17913 ;;		Nothing
 17914 ;; This function is called by:
 17915 ;;		_ReadSavedSettings
 17916 ;;		_FLASH_WriteWord
 17917 ;; This function uses a non-reentrant model
 17918 ;;
 17919                           
 17920                           
 17921                           ;psect for function _FLASH_ReadWord
 17922  208E                     _FLASH_ReadWord:	
 17923                           
 17924                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 17925                           
 17926                           ;incstack = 0
 17927                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 17928  208E  3000               	movlw	0
 17929  208F  1B8B               	btfsc	11,7	;volatile
 17930  2090  3001               	movlw	1
 17931  2091  0021               	movlb	1	; select bank1
 17932  2092  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 17933                           
 17934                           ;memory.c: 61: INTCONbits.GIE = 0;
 17935  2093  138B               	bcf	11,7	;volatile
 17936                           
 17937                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 17938  2094  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 17939  2095  0023               	movlb	3	; select bank3
 17940  2096  0091               	movwf	17	;volatile
 17941                           
 17942                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 17943  2097  0021               	movlb	1	; select bank1
 17944  2098  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 17945  2099  0023               	movlb	3	; select bank3
 17946  209A  0092               	movwf	18	;volatile
 17947                           
 17948                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 17949  209B  1315               	bcf	21,6	;volatile
 17950                           
 17951                           ;memory.c: 66: PMCON1bits.RD = 1;
 17952  209C  1415               	bsf	21,0	;volatile
 17953                           
 17954                           ;memory.c: 67: __nop();
 17955  209D  0000               	nop
 17956                           
 17957                           ;memory.c: 68: __nop();
 17958  209E  0000               	nop
 17959                           
 17960                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 17961  209F  0021               	movlb	1	; select bank1
 17962  20A0  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 17963  20A1  1C03               	skipc
 17964  20A2  138B               	bcf	11,7	;volatile
 17965  20A3  1803               	skipnc
 17966  20A4  178B               	bsf	11,7	;volatile
 17967                           
 17968                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 17969  20A5  0023               	movlb	3	; select bank3
 17970  20A6  0814               	movf	20,w	;volatile
 17971  20A7  0021               	movlb	1	; select bank1
 17972  20A8  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 17973  20A9  0023               	movlb	3	; select bank3
 17974  20AA  0813               	movf	19,w	;volatile
 17975  20AB  0021               	movlb	1	; select bank1
 17976  20AC  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 17977  20AD  0008               	return
 17978  20AE                     __end_of_FLASH_ReadWord:	
 17979                           
 17980                           	psect	text63
 17981  20F4                     __ptext63:	
 17982 ;; *************** function _InitializeTaps *****************
 17983 ;; Defined at:
 17984 ;;		line 228 in file "user.c"
 17985 ;; Parameters:    Size  Location     Type
 17986 ;;		None
 17987 ;; Auto vars:     Size  Location     Type
 17988 ;;  itap            2    1[BANK1 ] int 
 17989 ;; Return value:  Size  Location     Type
 17990 ;;                  1    wreg      void 
 17991 ;; Registers used:
 17992 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17993 ;; Tracked objects:
 17994 ;;		On entry : 0/0
 17995 ;;		On exit  : 0/0
 17996 ;;		Unchanged: 0/0
 17997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17999 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18000 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18001 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18002 ;;Total ram usage:        3 bytes
 18003 ;; Hardware stack levels used:    1
 18004 ;; Hardware stack levels required when called:    3
 18005 ;; This function calls:
 18006 ;;		Nothing
 18007 ;; This function is called by:
 18008 ;;		_main
 18009 ;; This function uses a non-reentrant model
 18010 ;;
 18011                           
 18012                           
 18013                           ;psect for function _InitializeTaps
 18014  20F4                     _InitializeTaps:	
 18015                           
 18016                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18017                           
 18018                           ;incstack = 0
 18019                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18020  20F4  0021               	movlb	1	; select bank1
 18021  20F5  01A1               	clrf	InitializeTaps@itap^(0+128)
 18022  20F6  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18023  20F7                     L22:	
 18024  20F7  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18025  20F8  3A80               	xorlw	128
 18026  20F9  00A0               	movwf	??_InitializeTaps^(0+128)
 18027  20FA  3080               	movlw	128
 18028  20FB  0220               	subwf	??_InitializeTaps^(0+128),w
 18029  20FC  1D03               	skipz
 18030  20FD  2900               	goto	u8835
 18031  20FE  300C               	movlw	12
 18032  20FF  0221               	subwf	InitializeTaps@itap^(0+128),w
 18033  2100                     u8835:	
 18034  2100  1803               	btfsc	3,0
 18035  2101  0008               	return
 18036                           
 18037                           ;user.c: 230: tap[itap] = 0;
 18038  2102  0021               	movlb	1	; select bank1
 18039  2103  0821               	movf	InitializeTaps@itap^(0+128),w
 18040  2104  00A0               	movwf	??_InitializeTaps^(0+128)
 18041  2105  3001               	movlw	1
 18042  2106                     u8845:	
 18043  2106  35A0               	lslf	??_InitializeTaps^(0+128),f
 18044  2107  3EFF               	addlw	-1
 18045  2108  1D03               	skipz
 18046  2109  2906               	goto	u8845
 18047  210A  3520               	lslf	??_InitializeTaps^(0+128),w
 18048  210B  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18049  210C  0086               	movwf	6
 18050  210D  3002               	movlw	2	; select bank5/6
 18051  210E  0087               	movwf	7
 18052  210F  3000               	movlw	0
 18053  2110  3FC0               	movwi [0]fsr1
 18054  2111  3000               	movlw	0
 18055  2112  3FC1               	movwi [1]fsr1
 18056  2113  3FC2               	movwi [2]fsr1
 18057  2114  3FC3               	movwi [3]fsr1
 18058  2115  3001               	movlw	1
 18059  2116  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18060  2117  3000               	movlw	0
 18061  2118  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18062  2119  28F7               	goto	L22
 18063  211A                     __end_of_InitializeTaps:	
 18064                           
 18065                           	psect	text64
 18066  21A1                     __ptext64:	
 18067 ;; *************** function _InitApp *****************
 18068 ;; Defined at:
 18069 ;;		line 23 in file "user.c"
 18070 ;; Parameters:    Size  Location     Type
 18071 ;;		None
 18072 ;; Auto vars:     Size  Location     Type
 18073 ;;		None
 18074 ;; Return value:  Size  Location     Type
 18075 ;;                  1    wreg      void 
 18076 ;; Registers used:
 18077 ;;		wreg, status,2, status,0, pclath, cstack
 18078 ;; Tracked objects:
 18079 ;;		On entry : 0/0
 18080 ;;		On exit  : 0/0
 18081 ;;		Unchanged: 0/0
 18082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18087 ;;Total ram usage:        0 bytes
 18088 ;; Hardware stack levels used:    1
 18089 ;; Hardware stack levels required when called:    5
 18090 ;; This function calls:
 18091 ;;		_init_adc
 18092 ;;		_init_pwm
 18093 ;; This function is called by:
 18094 ;;		_main
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _InitApp
 18100  21A1                     _InitApp:	
 18101                           
 18102                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18103                           
 18104                           ;incstack = 0
 18105                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18106  21A1  0021               	movlb	1	; select bank1
 18107  21A2  100D               	bcf	13,0	;volatile
 18108                           
 18109                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18110  21A3  108D               	bcf	13,1	;volatile
 18111                           
 18112                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18113  21A4  110D               	bcf	13,2	;volatile
 18114                           
 18115                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18116  21A5  118D               	bcf	13,3	;volatile
 18117                           
 18118                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18119  21A6  120D               	bcf	13,4	;volatile
 18120                           
 18121                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18122  21A7  128D               	bcf	13,5	;volatile
 18123                           
 18124                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18125  21A8  140E               	bsf	14,0	;volatile
 18126                           
 18127                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18128  21A9  120E               	bcf	14,4	;volatile
 18129                           
 18130                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18131  21AA  128E               	bcf	14,5	;volatile
 18132                           
 18133                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18134  21AB  100F               	bcf	15,0	;volatile
 18135                           
 18136                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18137  21AC  108F               	bcf	15,1	;volatile
 18138                           
 18139                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18140  21AD  110F               	bcf	15,2	;volatile
 18141                           
 18142                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18143  21AE  118F               	bcf	15,3	;volatile
 18144                           
 18145                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18146  21AF  120F               	bcf	15,4	;volatile
 18147                           
 18148                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18149  21B0  168F               	bsf	15,5	;volatile
 18150                           
 18151                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18152  21B1  170F               	bsf	15,6	;volatile
 18153                           
 18154                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18155  21B2  178F               	bsf	15,7	;volatile
 18156                           
 18157                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18158  21B3  1410               	bsf	16,0	;volatile
 18159                           
 18160                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18161  21B4  1490               	bsf	16,1	;volatile
 18162                           
 18163                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18164  21B5  0023               	movlb	3	; select bank3
 18165  21B6  1010               	bcf	16,0	;volatile
 18166                           
 18167                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18168  21B7  1090               	bcf	16,1	;volatile
 18169                           
 18170                           ;user.c: 53: PORTEbits.RE0 = 0;
 18171  21B8  0020               	movlb	0	; select bank0
 18172  21B9  1010               	bcf	16,0	;volatile
 18173                           
 18174                           ;user.c: 54: PORTEbits.RE1 = 0;
 18175  21BA  1090               	bcf	16,1	;volatile
 18176                           
 18177                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18178  21BB  0026               	movlb	6	; select bank6
 18179  21BC  100C               	bcf	12,0	;volatile
 18180                           
 18181                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18182  21BD  108C               	bcf	12,1	;volatile
 18183                           
 18184                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18185  21BE  110C               	bcf	12,2	;volatile
 18186                           
 18187                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18188  21BF  118C               	bcf	12,3	;volatile
 18189                           
 18190                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18191  21C0  120C               	bcf	12,4	;volatile
 18192                           
 18193                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18194  21C1  128C               	bcf	12,5	;volatile
 18195                           
 18196                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18197  21C2  170C               	bsf	12,6	;volatile
 18198                           
 18199                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18200  21C3  0028               	movlb	8	; select bank8
 18201  21C4  130C               	bcf	12,6	;volatile
 18202                           
 18203                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18204  21C5  0026               	movlb	6	; select bank6
 18205  21C6  108D               	bcf	13,1	;volatile
 18206                           
 18207                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18208  21C7  110D               	bcf	13,2	;volatile
 18209                           
 18210                           ;user.c: 68: init_adc();
 18211  21C8  31AF  2782  31A1   	fcall	_init_adc
 18212                           
 18213                           ;user.c: 69: init_pwm();
 18214  21CB  31A4  2458         	fcall	_init_pwm
 18215                           
 18216                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18217  21CD  178B               	bsf	11,7	;volatile
 18218                           
 18219                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18220  21CE  168B               	bsf	11,5	;volatile
 18221                           
 18222                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18223  21CF  110B               	bcf	11,2	;volatile
 18224  21D0  0008               	return
 18225  21D1                     __end_of_InitApp:	
 18226                           
 18227                           	psect	text65
 18228  2458                     __ptext65:	
 18229 ;; *************** function _init_pwm *****************
 18230 ;; Defined at:
 18231 ;;		line 129 in file "user.c"
 18232 ;; Parameters:    Size  Location     Type
 18233 ;;		None
 18234 ;; Auto vars:     Size  Location     Type
 18235 ;;		None
 18236 ;; Return value:  Size  Location     Type
 18237 ;;                  1    wreg      void 
 18238 ;; Registers used:
 18239 ;;		wreg, status,2, status,0, pclath, cstack
 18240 ;; Tracked objects:
 18241 ;;		On entry : 0/0
 18242 ;;		On exit  : 0/0
 18243 ;;		Unchanged: 0/0
 18244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18249 ;;Total ram usage:        0 bytes
 18250 ;; Hardware stack levels used:    1
 18251 ;; Hardware stack levels required when called:    4
 18252 ;; This function calls:
 18253 ;;		_init_timer0
 18254 ;;		_init_timer2
 18255 ;; This function is called by:
 18256 ;;		_InitApp
 18257 ;; This function uses a non-reentrant model
 18258 ;;
 18259                           
 18260                           
 18261                           ;psect for function _init_pwm
 18262  2458                     _init_pwm:	
 18263                           
 18264                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18265                           
 18266                           ;incstack = 0
 18267                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18268  2458  0022               	movlb	2	; select bank2
 18269  2459  101D               	bcf	29,0	;volatile
 18270                           
 18271                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 18272  245A  0021               	movlb	1	; select bank1
 18273  245B  110E               	bcf	14,2	;volatile
 18274                           
 18275                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 18276  245C  108E               	bcf	14,1	;volatile
 18277                           
 18278                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 18279  245D  0026               	movlb	6	; select bank6
 18280  245E  100D               	bcf	13,0	;volatile
 18281                           
 18282                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 18283  245F  118D               	bcf	13,3	;volatile
 18284                           
 18285                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 18286  2460  120D               	bcf	13,4	;volatile
 18287                           
 18288                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 18289  2461  0021               	movlb	1	; select bank1
 18290  2462  1310               	bcf	16,6	;volatile
 18291                           
 18292                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 18293  2463  1290               	bcf	16,5	;volatile
 18294                           
 18295                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 18296  2464  1210               	bcf	16,4	;volatile
 18297                           
 18298                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 18299  2465  1190               	bcf	16,3	;volatile
 18300                           
 18301                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 18302  2466  1110               	bcf	16,2	;volatile
 18303                           
 18304                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 18305  2467  300F               	movlw	15
 18306  2468  0025               	movlb	5	; select bank5
 18307  2469  0493               	iorwf	19,f	;volatile
 18308                           
 18309                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 18310  246A  300F               	movlw	15
 18311  246B  049A               	iorwf	26,f	;volatile
 18312                           
 18313                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 18314  246C  300F               	movlw	15
 18315  246D  0026               	movlb	6	; select bank6
 18316  246E  0493               	iorwf	19,f	;volatile
 18317                           
 18318                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 18319  246F  300F               	movlw	15
 18320  2470  049A               	iorwf	26,f	;volatile
 18321                           
 18322                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 18323  2471  300F               	movlw	15
 18324  2472  049E               	iorwf	30,f	;volatile
 18325                           
 18326                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 18327  2473  300F               	movlw	15
 18328  2474  002C               	movlb	12	; select bank12
 18329  2475  0493               	iorwf	19,f	;volatile
 18330                           
 18331                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 18332  2476  300F               	movlw	15
 18333  2477  0496               	iorwf	22,f	;volatile
 18334                           
 18335                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 18336  2478  300F               	movlw	15
 18337  2479  0499               	iorwf	25,f	;volatile
 18338                           
 18339                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 18340  247A  300F               	movlw	15
 18341  247B  049C               	iorwf	28,f	;volatile
 18342                           
 18343                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 18344  247C  300F               	movlw	15
 18345  247D  049F               	iorwf	31,f	;volatile
 18346                           
 18347                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 18348  247E  0025               	movlb	5	; select bank5
 18349  247F  019D               	clrf	29	;volatile
 18350                           
 18351                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 18352  2480  019E               	clrf	30	;volatile
 18353                           
 18354                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 18355  2481  019F               	clrf	31	;volatile
 18356                           
 18357                           ;user.c: 154: CCPR1 = 50;
 18358  2482  3000               	movlw	0
 18359  2483  0092               	movwf	18	;volatile
 18360  2484  3032               	movlw	50
 18361  2485  0091               	movwf	17	;volatile
 18362                           
 18363                           ;user.c: 155: CCPR2 = 100;
 18364  2486  3000               	movlw	0
 18365  2487  0099               	movwf	25	;volatile
 18366  2488  3064               	movlw	100
 18367  2489  0098               	movwf	24	;volatile
 18368                           
 18369                           ;user.c: 156: CCPR3 = 150;
 18370  248A  3000               	movlw	0
 18371  248B  0026               	movlb	6	; select bank6
 18372  248C  0092               	movwf	18	;volatile
 18373  248D  3096               	movlw	150
 18374  248E  0091               	movwf	17	;volatile
 18375                           
 18376                           ;user.c: 157: CCPR4 = 200;
 18377  248F  3000               	movlw	0
 18378  2490  0099               	movwf	25	;volatile
 18379  2491  30C8               	movlw	200
 18380  2492  0098               	movwf	24	;volatile
 18381                           
 18382                           ;user.c: 158: init_timer2();
 18383  2493  31AF  2770  31A4   	fcall	_init_timer2
 18384                           
 18385                           ;user.c: 159: init_timer0();
 18386  2496  3190  2001         	fcall	_init_timer0
 18387  2498  0008               	return
 18388  2499                     __end_of_init_pwm:	
 18389                           
 18390                           	psect	text66
 18391  2F70                     __ptext66:	
 18392 ;; *************** function _init_timer2 *****************
 18393 ;; Defined at:
 18394 ;;		line 162 in file "user.c"
 18395 ;; Parameters:    Size  Location     Type
 18396 ;;		None
 18397 ;; Auto vars:     Size  Location     Type
 18398 ;;		None
 18399 ;; Return value:  Size  Location     Type
 18400 ;;                  1    wreg      void 
 18401 ;; Registers used:
 18402 ;;		wreg, status,2, status,0
 18403 ;; Tracked objects:
 18404 ;;		On entry : 0/0
 18405 ;;		On exit  : 0/0
 18406 ;;		Unchanged: 0/0
 18407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18412 ;;Total ram usage:        0 bytes
 18413 ;; Hardware stack levels used:    1
 18414 ;; Hardware stack levels required when called:    3
 18415 ;; This function calls:
 18416 ;;		Nothing
 18417 ;; This function is called by:
 18418 ;;		_init_pwm
 18419 ;; This function uses a non-reentrant model
 18420 ;;
 18421                           
 18422                           
 18423                           ;psect for function _init_timer2
 18424  2F70                     _init_timer2:	
 18425                           
 18426                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 18427                           
 18428                           ;incstack = 0
 18429                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 18430  2F70  3087               	movlw	-121
 18431  2F71  0020               	movlb	0	; select bank0
 18432  2F72  059C               	andwf	28,f	;volatile
 18433                           
 18434                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 18435  2F73  30FC               	movlw	-4
 18436  2F74  059C               	andwf	28,f	;volatile
 18437                           
 18438                           ;user.c: 165: PR2 = 0xFF;
 18439  2F75  30FF               	movlw	255
 18440  2F76  009B               	movwf	27	;volatile
 18441                           
 18442                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 18443  2F77  151C               	bsf	28,2	;volatile
 18444  2F78  0008               	return
 18445  2F79                     __end_of_init_timer2:	
 18446                           
 18447                           	psect	text67
 18448  1001                     __ptext67:	
 18449 ;; *************** function _init_timer0 *****************
 18450 ;; Defined at:
 18451 ;;		line 169 in file "user.c"
 18452 ;; Parameters:    Size  Location     Type
 18453 ;;		None
 18454 ;; Auto vars:     Size  Location     Type
 18455 ;;		None
 18456 ;; Return value:  Size  Location     Type
 18457 ;;                  1    wreg      void 
 18458 ;; Registers used:
 18459 ;;		None
 18460 ;; Tracked objects:
 18461 ;;		On entry : 0/0
 18462 ;;		On exit  : 0/0
 18463 ;;		Unchanged: 0/0
 18464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18469 ;;Total ram usage:        0 bytes
 18470 ;; Hardware stack levels used:    1
 18471 ;; Hardware stack levels required when called:    3
 18472 ;; This function calls:
 18473 ;;		Nothing
 18474 ;; This function is called by:
 18475 ;;		_init_pwm
 18476 ;; This function uses a non-reentrant model
 18477 ;;
 18478                           
 18479                           
 18480                           ;psect for function _init_timer0
 18481  1001                     _init_timer0:	
 18482                           
 18483                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 18484                           
 18485                           ;incstack = 0
 18486                           ; Regs used in _init_timer0: []
 18487  1001  0021               	movlb	1	; select bank1
 18488  1002  1295               	bcf	21,5	;volatile
 18489                           
 18490                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 18491  1003  1195               	bcf	21,3	;volatile
 18492                           
 18493                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 18494  1004  1015               	bcf	21,0	;volatile
 18495                           
 18496                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 18497  1005  1495               	bsf	21,1	;volatile
 18498                           
 18499                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 18500  1006  1115               	bcf	21,2	;volatile
 18501  1007  0008               	return
 18502  1008                     __end_of_init_timer0:	
 18503                           
 18504                           	psect	text68
 18505  2F82                     __ptext68:	
 18506 ;; *************** function _init_adc *****************
 18507 ;; Defined at:
 18508 ;;		line 115 in file "user.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;		None
 18511 ;; Auto vars:     Size  Location     Type
 18512 ;;		None
 18513 ;; Return value:  Size  Location     Type
 18514 ;;                  1    wreg      void 
 18515 ;; Registers used:
 18516 ;;		wreg, status,2, status,0
 18517 ;; Tracked objects:
 18518 ;;		On entry : 0/0
 18519 ;;		On exit  : 0/0
 18520 ;;		Unchanged: 0/0
 18521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18526 ;;Total ram usage:        0 bytes
 18527 ;; Hardware stack levels used:    1
 18528 ;; Hardware stack levels required when called:    3
 18529 ;; This function calls:
 18530 ;;		Nothing
 18531 ;; This function is called by:
 18532 ;;		_InitApp
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           
 18537                           ;psect for function _init_adc
 18538  2F82                     _init_adc:	
 18539                           
 18540                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 18541                           
 18542                           ;incstack = 0
 18543                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 18544  2F82  0021               	movlb	1	; select bank1
 18545  2F83  179E               	bsf	30,7	;volatile
 18546                           
 18547                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 18548  2F84  081E               	movf	30,w	;volatile
 18549  2F85  398F               	andlw	-113
 18550  2F86  3860               	iorlw	96
 18551  2F87  009E               	movwf	30	;volatile
 18552                           
 18553                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 18554  2F88  30FC               	movlw	-4
 18555  2F89  059E               	andwf	30,f	;volatile
 18556                           
 18557                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 18558  2F8A  141D               	bsf	29,0	;volatile
 18559  2F8B  0008               	return
 18560  2F8C                     __end_of_init_adc:	
 18561                           
 18562                           	psect	text69
 18563  2000                     __ptext69:	
 18564 ;; *************** function _ConfigureOscillator *****************
 18565 ;; Defined at:
 18566 ;;		line 18 in file "system.c"
 18567 ;; Parameters:    Size  Location     Type
 18568 ;;		None
 18569 ;; Auto vars:     Size  Location     Type
 18570 ;;		None
 18571 ;; Return value:  Size  Location     Type
 18572 ;;                  1    wreg      void 
 18573 ;; Registers used:
 18574 ;;		wreg, status,2, status,0
 18575 ;; Tracked objects:
 18576 ;;		On entry : 0/0
 18577 ;;		On exit  : 0/0
 18578 ;;		Unchanged: 0/0
 18579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18584 ;;Total ram usage:        0 bytes
 18585 ;; Hardware stack levels used:    1
 18586 ;; Hardware stack levels required when called:    3
 18587 ;; This function calls:
 18588 ;;		Nothing
 18589 ;; This function is called by:
 18590 ;;		_main
 18591 ;; This function uses a non-reentrant model
 18592 ;;
 18593                           
 18594                           
 18595                           ;psect for function _ConfigureOscillator
 18596  2000                     _ConfigureOscillator:	
 18597                           
 18598                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 18599                           
 18600                           ;incstack = 0
 18601                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 18602  2000  30FC               	movlw	-4
 18603  2001  0021               	movlb	1	; select bank1
 18604  2002  0599               	andwf	25,f	;volatile
 18605  2003  0008               	return
 18606  2004                     __end_of_ConfigureOscillator:	
 18607                           
 18608                           	psect	intentry
 18609  0004                     __pintentry:	
 18610 ;; *************** function _isr *****************
 18611 ;; Defined at:
 18612 ;;		line 28 in file "interrupts.c"
 18613 ;; Parameters:    Size  Location     Type
 18614 ;;		None
 18615 ;; Auto vars:     Size  Location     Type
 18616 ;;  tmpSubDelay     2   35[BANK0 ] int 
 18617 ;; Return value:  Size  Location     Type
 18618 ;;                  1    wreg      void 
 18619 ;; Registers used:
 18620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18621 ;; Tracked objects:
 18622 ;;		On entry : 0/0
 18623 ;;		On exit  : 0/0
 18624 ;;		Unchanged: 0/0
 18625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18628 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18629 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18630 ;;Total ram usage:       11 bytes
 18631 ;; Hardware stack levels used:    1
 18632 ;; Hardware stack levels required when called:    2
 18633 ;; This function calls:
 18634 ;;		___awdiv
 18635 ;;		_modulation
 18636 ;;		i1_set_leds_top
 18637 ;; This function is called by:
 18638 ;;		Interrupt level 1
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642  0004                     _isr:	
 18643                           
 18644                           ;incstack = 0
 18645                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18646  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18647  0005  3180               	pagesel	$
 18648  0006  0020               	movlb	0	; select bank0
 18649  0007  087F               	movf	127,w
 18650  0008  00C2               	movwf	??_isr+8
 18651                           
 18652                           ;interrupts.c: 29: int tmpSubDelay;
 18653                           ;interrupts.c: 32: extern volatile long timer;
 18654                           ;interrupts.c: 33: extern volatile long sub_timer;
 18655                           ;interrupts.c: 34: extern volatile long tap_timer;
 18656                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 18657                           ;interrupts.c: 36: extern int mod_delay_time;
 18658                           ;interrupts.c: 38: extern volatile long baseline_delay_time;
 18659                           ;interrupts.c: 40: extern int top_push_state;
 18660                           ;interrupts.c: 41: extern uint8_t feedback_start;
 18661                           ;interrupts.c: 42: extern volatile long mod_timer;
 18662                           ;interrupts.c: 43: extern volatile long delay_time;
 18663  0009  1D0B               	btfss	11,2	;volatile
 18664  000A  2921               	goto	i1l135
 18665                           
 18666                           ;interrupts.c: 47: test_timer++;
 18667  000B  3001               	movlw	1
 18668  000C  0024               	movlb	4	; select bank4
 18669  000D  07C1               	addwf	_test_timer^(0+512),f
 18670  000E  3000               	movlw	0
 18671  000F  3DC2               	addwfc	(_test_timer+1)^(0+512),f
 18672  0010  3000               	movlw	0
 18673  0011  3DC3               	addwfc	(_test_timer+2)^(0+512),f
 18674  0012  3000               	movlw	0
 18675  0013  3DC4               	addwfc	(_test_timer+3)^(0+512),f
 18676                           
 18677                           ;interrupts.c: 48: tmpSubDelay = delay_time;
 18678  0014  0020               	movlb	0	; select bank0
 18679  0015  084A               	movf	_delay_time+1,w	;volatile
 18680  0016  00C4               	movwf	isr@tmpSubDelay+1
 18681  0017  0849               	movf	_delay_time,w	;volatile
 18682  0018  00C3               	movwf	isr@tmpSubDelay
 18683                           
 18684                           ;interrupts.c: 49: timer = timer + 1;
 18685  0019  3001               	movlw	1
 18686  001A  00BA               	movwf	??_isr
 18687  001B  3000               	movlw	0
 18688  001C  00BB               	movwf	??_isr+1
 18689  001D  3000               	movlw	0
 18690  001E  00BC               	movwf	??_isr+2
 18691  001F  3000               	movlw	0
 18692  0020  00BD               	movwf	??_isr+3
 18693  0021  0861               	movf	_timer,w	;volatile
 18694  0022  07BA               	addwf	??_isr,f
 18695  0023  0862               	movf	_timer+1,w	;volatile
 18696  0024  3DBB               	addwfc	??_isr+1,f
 18697  0025  0863               	movf	_timer+2,w	;volatile
 18698  0026  3DBC               	addwfc	??_isr+2,f
 18699  0027  0864               	movf	_timer+3,w	;volatile
 18700  0028  3DBD               	addwfc	??_isr+3,f
 18701  0029  083D               	movf	??_isr+3,w
 18702  002A  00E4               	movwf	_timer+3	;volatile
 18703  002B  083C               	movf	??_isr+2,w
 18704  002C  00E3               	movwf	_timer+2	;volatile
 18705  002D  083B               	movf	??_isr+1,w
 18706  002E  00E2               	movwf	_timer+1	;volatile
 18707  002F  083A               	movf	??_isr,w
 18708  0030  00E1               	movwf	_timer	;volatile
 18709                           
 18710                           ;interrupts.c: 50: sub_timer = sub_timer + 1;
 18711  0031  3001               	movlw	1
 18712  0032  00BA               	movwf	??_isr
 18713  0033  3000               	movlw	0
 18714  0034  00BB               	movwf	??_isr+1
 18715  0035  3000               	movlw	0
 18716  0036  00BC               	movwf	??_isr+2
 18717  0037  3000               	movlw	0
 18718  0038  00BD               	movwf	??_isr+3
 18719  0039  0859               	movf	_sub_timer,w	;volatile
 18720  003A  07BA               	addwf	??_isr,f
 18721  003B  085A               	movf	_sub_timer+1,w	;volatile
 18722  003C  3DBB               	addwfc	??_isr+1,f
 18723  003D  085B               	movf	_sub_timer+2,w	;volatile
 18724  003E  3DBC               	addwfc	??_isr+2,f
 18725  003F  085C               	movf	_sub_timer+3,w	;volatile
 18726  0040  3DBD               	addwfc	??_isr+3,f
 18727  0041  083D               	movf	??_isr+3,w
 18728  0042  00DC               	movwf	_sub_timer+3	;volatile
 18729  0043  083C               	movf	??_isr+2,w
 18730  0044  00DB               	movwf	_sub_timer+2	;volatile
 18731  0045  083B               	movf	??_isr+1,w
 18732  0046  00DA               	movwf	_sub_timer+1	;volatile
 18733  0047  083A               	movf	??_isr,w
 18734  0048  00D9               	movwf	_sub_timer	;volatile
 18735                           
 18736                           ;interrupts.c: 51: tap_timer = tap_timer + 1;
 18737  0049  3001               	movlw	1
 18738  004A  00BA               	movwf	??_isr
 18739  004B  3000               	movlw	0
 18740  004C  00BB               	movwf	??_isr+1
 18741  004D  3000               	movlw	0
 18742  004E  00BC               	movwf	??_isr+2
 18743  004F  3000               	movlw	0
 18744  0050  00BD               	movwf	??_isr+3
 18745  0051  085D               	movf	_tap_timer,w	;volatile
 18746  0052  07BA               	addwf	??_isr,f
 18747  0053  085E               	movf	_tap_timer+1,w	;volatile
 18748  0054  3DBB               	addwfc	??_isr+1,f
 18749  0055  085F               	movf	_tap_timer+2,w	;volatile
 18750  0056  3DBC               	addwfc	??_isr+2,f
 18751  0057  0860               	movf	_tap_timer+3,w	;volatile
 18752  0058  3DBD               	addwfc	??_isr+3,f
 18753  0059  083D               	movf	??_isr+3,w
 18754  005A  00E0               	movwf	_tap_timer+3	;volatile
 18755  005B  083C               	movf	??_isr+2,w
 18756  005C  00DF               	movwf	_tap_timer+2	;volatile
 18757  005D  083B               	movf	??_isr+1,w
 18758  005E  00DE               	movwf	_tap_timer+1	;volatile
 18759  005F  083A               	movf	??_isr,w
 18760  0060  00DD               	movwf	_tap_timer	;volatile
 18761                           
 18762                           ;interrupts.c: 52: mod_timer = mod_timer + 1;
 18763  0061  3001               	movlw	1
 18764  0062  00BA               	movwf	??_isr
 18765  0063  3000               	movlw	0
 18766  0064  00BB               	movwf	??_isr+1
 18767  0065  3000               	movlw	0
 18768  0066  00BC               	movwf	??_isr+2
 18769  0067  3000               	movlw	0
 18770  0068  00BD               	movwf	??_isr+3
 18771  0069  0023               	movlb	3	; select bank3
 18772  006A  0824               	movf	_mod_timer^(0+384),w	;volatile
 18773  006B  0020               	movlb	0	; select bank0
 18774  006C  07BA               	addwf	??_isr,f
 18775  006D  0023               	movlb	3	; select bank3
 18776  006E  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 18777  006F  0020               	movlb	0	; select bank0
 18778  0070  3DBB               	addwfc	??_isr+1,f
 18779  0071  0023               	movlb	3	; select bank3
 18780  0072  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 18781  0073  0020               	movlb	0	; select bank0
 18782  0074  3DBC               	addwfc	??_isr+2,f
 18783  0075  0023               	movlb	3	; select bank3
 18784  0076  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 18785  0077  0020               	movlb	0	; select bank0
 18786  0078  3DBD               	addwfc	??_isr+3,f
 18787  0079  083D               	movf	??_isr+3,w
 18788  007A  0023               	movlb	3	; select bank3
 18789  007B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 18790  007C  0020               	movlb	0	; select bank0
 18791  007D  083C               	movf	??_isr+2,w
 18792  007E  0023               	movlb	3	; select bank3
 18793  007F  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 18794  0080  0020               	movlb	0	; select bank0
 18795  0081  083B               	movf	??_isr+1,w
 18796  0082  0023               	movlb	3	; select bank3
 18797  0083  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 18798  0084  0020               	movlb	0	; select bank0
 18799  0085  083A               	movf	??_isr,w
 18800  0086  0023               	movlb	3	; select bank3
 18801  0087  00A4               	movwf	_mod_timer^(0+384)	;volatile
 18802                           
 18803                           ;interrupts.c: 53: double_timer++;
 18804  0088  3001               	movlw	1
 18805  0089  07A0               	addwf	_double_timer^(0+384),f	;volatile
 18806  008A  3000               	movlw	0
 18807  008B  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 18808  008C  3000               	movlw	0
 18809  008D  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 18810  008E  3000               	movlw	0
 18811  008F  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 18812                           
 18813                           ;interrupts.c: 58: if (feedback_start == 1) {
 18814  0090  0022               	movlb	2	; select bank2
 18815  0091  036A               	decf	_feedback_start^(0+256),w
 18816  0092  1D03               	btfss	3,2
 18817  0093  28AB               	goto	i1l6592
 18818                           
 18819                           ;interrupts.c: 59: feedback_timer++;
 18820  0094  3001               	movlw	1
 18821  0095  0023               	movlb	3	; select bank3
 18822  0096  07A8               	addwf	_feedback_timer^(0+384),f	;volatile
 18823  0097  3000               	movlw	0
 18824  0098  3DA9               	addwfc	(_feedback_timer+1)^(0+384),f	;volatile
 18825                           
 18826                           ;interrupts.c: 60: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 18827  0099  0829               	movf	(_feedback_timer+1)^(0+384),w	;volatile
 18828  009A  0020               	movlb	0	; select bank0
 18829  009B  0250               	subwf	_long_press_limit+1,w
 18830  009C  1D03               	skipz
 18831  009D  28A2               	goto	u638_25
 18832  009E  0023               	movlb	3	; select bank3
 18833  009F  0828               	movf	_feedback_timer^(0+384),w	;volatile
 18834  00A0  0020               	movlb	0	; select bank0
 18835  00A1  024F               	subwf	_long_press_limit,w
 18836  00A2                     u638_25:	
 18837  00A2  1803               	skipnc
 18838  00A3  28AB               	goto	i1l6592
 18839  00A4  0850               	movf	_long_press_limit+1,w
 18840  00A5  0023               	movlb	3	; select bank3
 18841  00A6  00A9               	movwf	(_feedback_timer+1)^(0+384)	;volatile
 18842  00A7  0020               	movlb	0	; select bank0
 18843  00A8  084F               	movf	_long_press_limit,w
 18844  00A9  0023               	movlb	3	; select bank3
 18845  00AA  00A8               	movwf	_feedback_timer^(0+384)	;volatile
 18846  00AB                     i1l6592:	
 18847                           
 18848                           ;interrupts.c: 61: }
 18849                           ;interrupts.c: 62: if (longTap_start == 1) {
 18850  00AB  0022               	movlb	2	; select bank2
 18851  00AC  036B               	decf	_longTap_start^(0+256),w
 18852  00AD  1D03               	btfss	3,2
 18853  00AE  28C6               	goto	i1l6598
 18854                           
 18855                           ;interrupts.c: 63: longTap_timer++;
 18856  00AF  3001               	movlw	1
 18857  00B0  0023               	movlb	3	; select bank3
 18858  00B1  07B4               	addwf	_longTap_timer^(0+384),f	;volatile
 18859  00B2  3000               	movlw	0
 18860  00B3  3DB5               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 18861                           
 18862                           ;interrupts.c: 64: if (longTap_timer > long_press_limit) {
 18863  00B4  0835               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 18864  00B5  0020               	movlb	0	; select bank0
 18865  00B6  0250               	subwf	_long_press_limit+1,w
 18866  00B7  1D03               	skipz
 18867  00B8  28BD               	goto	u640_25
 18868  00B9  0023               	movlb	3	; select bank3
 18869  00BA  0834               	movf	_longTap_timer^(0+384),w	;volatile
 18870  00BB  0020               	movlb	0	; select bank0
 18871  00BC  024F               	subwf	_long_press_limit,w
 18872  00BD                     u640_25:	
 18873  00BD  1803               	skipnc
 18874  00BE  28C6               	goto	i1l6598
 18875                           
 18876                           ;interrupts.c: 65: longTap_timer = long_press_limit;
 18877  00BF  0850               	movf	_long_press_limit+1,w
 18878  00C0  0023               	movlb	3	; select bank3
 18879  00C1  00B5               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 18880  00C2  0020               	movlb	0	; select bank0
 18881  00C3  084F               	movf	_long_press_limit,w
 18882  00C4  0023               	movlb	3	; select bank3
 18883  00C5  00B4               	movwf	_longTap_timer^(0+384)	;volatile
 18884  00C6                     i1l6598:	
 18885                           
 18886                           ;interrupts.c: 66: }
 18887                           ;interrupts.c: 67: }
 18888                           ;interrupts.c: 68: INTCONbits.TMR0IF = 0;
 18889  00C6  110B               	bcf	11,2	;volatile
 18890                           
 18891                           ;interrupts.c: 70: if (adjust_sub_delay == 1) {
 18892  00C7  0023               	movlb	3	; select bank3
 18893  00C8  033C               	decf	_adjust_sub_delay^(0+384),w
 18894  00C9  1D03               	btfss	3,2
 18895  00CA  2921               	goto	i1l135
 18896                           
 18897                           ;interrupts.c: 71: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 18898  00CB  0020               	movlb	0	; select bank0
 18899  00CC  085C               	movf	_sub_timer+3,w	;volatile
 18900  00CD  3A80               	xorlw	128
 18901  00CE  00BA               	movwf	??_isr
 18902  00CF  084C               	movf	_delay_time+3,w	;volatile
 18903  00D0  3A80               	xorlw	128
 18904  00D1  023A               	subwf	??_isr,w
 18905  00D2  1D03               	skipz
 18906  00D3  28DE               	goto	u642_23
 18907  00D4  084B               	movf	_delay_time+2,w	;volatile
 18908  00D5  025B               	subwf	_sub_timer+2,w	;volatile
 18909  00D6  1D03               	skipz
 18910  00D7  28DE               	goto	u642_23
 18911  00D8  084A               	movf	_delay_time+1,w	;volatile
 18912  00D9  025A               	subwf	_sub_timer+1,w	;volatile
 18913  00DA  1D03               	skipz
 18914  00DB  28DE               	goto	u642_23
 18915  00DC  0849               	movf	_delay_time,w	;volatile
 18916  00DD  0259               	subwf	_sub_timer,w	;volatile
 18917  00DE                     u642_23:	
 18918  00DE  1C03               	skipc
 18919  00DF  2921               	goto	i1l135
 18920  00E0  0845               	movf	_baseline_delay_time,w	;volatile
 18921  00E1  00BA               	movwf	??_isr
 18922  00E2  0846               	movf	_baseline_delay_time+1,w	;volatile
 18923  00E3  00BB               	movwf	??_isr+1
 18924  00E4  0847               	movf	_baseline_delay_time+2,w	;volatile
 18925  00E5  00BC               	movwf	??_isr+2
 18926  00E6  0848               	movf	_baseline_delay_time+3,w	;volatile
 18927  00E7  00BD               	movwf	??_isr+3
 18928  00E8  0961               	comf	_timer,w	;volatile
 18929  00E9  00BE               	movwf	??_isr+4
 18930  00EA  0962               	comf	_timer+1,w	;volatile
 18931  00EB  00BF               	movwf	??_isr+5
 18932  00EC  0963               	comf	_timer+2,w	;volatile
 18933  00ED  00C0               	movwf	??_isr+6
 18934  00EE  0964               	comf	_timer+3,w	;volatile
 18935  00EF  00C1               	movwf	??_isr+7
 18936  00F0  0ABE               	incf	??_isr+4,f
 18937  00F1  1903               	skipnz
 18938  00F2  0ABF               	incf	??_isr+5,f
 18939  00F3  1903               	skipnz
 18940  00F4  0AC0               	incf	??_isr+6,f
 18941  00F5  1903               	skipnz
 18942  00F6  0AC1               	incf	??_isr+7,f
 18943  00F7  083E               	movf	??_isr+4,w
 18944  00F8  07BA               	addwf	??_isr,f
 18945  00F9  083F               	movf	??_isr+5,w
 18946  00FA  3DBB               	addwfc	??_isr+1,f
 18947  00FB  0840               	movf	??_isr+6,w
 18948  00FC  3DBC               	addwfc	??_isr+2,f
 18949  00FD  0841               	movf	??_isr+7,w
 18950  00FE  3DBD               	addwfc	??_isr+3,f
 18951  00FF  1BBD               	btfsc	??_isr+3,7
 18952  0100  290E               	goto	i1l6606
 18953  0101  083D               	movf	??_isr+3,w
 18954  0102  1D03               	btfss	3,2
 18955  0103  2921               	goto	i1l135
 18956  0104  083C               	movf	??_isr+2,w
 18957  0105  1D03               	btfss	3,2
 18958  0106  2921               	goto	i1l135
 18959  0107  083B               	movf	??_isr+1,w
 18960  0108  1D03               	btfss	3,2
 18961  0109  2921               	goto	i1l135
 18962  010A  3004               	movlw	4
 18963  010B  023A               	subwf	??_isr,w
 18964  010C  1803               	btfsc	3,0
 18965  010D  2921               	goto	i1l135
 18966  010E                     i1l6606:	
 18967                           
 18968                           ;interrupts.c: 72: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 18969  010E  0961               	comf	_timer,w	;volatile
 18970  010F  00BA               	movwf	??_isr
 18971  0110  0962               	comf	_timer+1,w	;volatile
 18972  0111  00BB               	movwf	??_isr+1
 18973  0112  0ABA               	incf	??_isr,f
 18974  0113  1903               	skipnz
 18975  0114  0ABB               	incf	??_isr+1,f
 18976  0115  0845               	movf	_baseline_delay_time,w	;volatile
 18977  0116  073A               	addwf	??_isr,w
 18978  0117  00BC               	movwf	??_isr+2
 18979  0118  0846               	movf	_baseline_delay_time+1,w	;volatile
 18980  0119  3D3B               	addwfc	??_isr+1,w
 18981  011A  00BD               	movwf	??_isr+3
 18982  011B  0859               	movf	_sub_timer,w	;volatile
 18983  011C  073C               	addwf	??_isr+2,w
 18984  011D  00C3               	movwf	isr@tmpSubDelay
 18985  011E  085A               	movf	_sub_timer+1,w	;volatile
 18986  011F  3D3D               	addwfc	??_isr+3,w
 18987  0120  00C4               	movwf	isr@tmpSubDelay+1
 18988  0121                     i1l135:	
 18989                           
 18990                           ;interrupts.c: 73: }
 18991                           ;interrupts.c: 74: }
 18992                           ;interrupts.c: 75: }
 18993                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 18994  0121  0020               	movlb	0	; select bank0
 18995  0122  0855               	movf	_longTap_state,w	;volatile
 18996  0123  1D03               	btfss	3,2
 18997  0124  2978               	goto	i1l6632
 18998  0125  0866               	movf	_doubleTap_state,w	;volatile
 18999  0126  1D03               	btfss	3,2
 19000  0127  2978               	goto	i1l6632
 19001  0128  0868               	movf	_presetSaveMode,w
 19002  0129  1D03               	btfss	3,2
 19003  012A  2978               	goto	i1l6632
 19004                           
 19005                           ;interrupts.c: 81: if (timer >= baseline_delay_time) {
 19006  012B  0864               	movf	_timer+3,w	;volatile
 19007  012C  3A80               	xorlw	128
 19008  012D  00BA               	movwf	??_isr
 19009  012E  0848               	movf	_baseline_delay_time+3,w	;volatile
 19010  012F  3A80               	xorlw	128
 19011  0130  023A               	subwf	??_isr,w
 19012  0131  1D03               	skipz
 19013  0132  293D               	goto	u647_23
 19014  0133  0847               	movf	_baseline_delay_time+2,w	;volatile
 19015  0134  0263               	subwf	_timer+2,w	;volatile
 19016  0135  1D03               	skipz
 19017  0136  293D               	goto	u647_23
 19018  0137  0846               	movf	_baseline_delay_time+1,w	;volatile
 19019  0138  0262               	subwf	_timer+1,w	;volatile
 19020  0139  1D03               	skipz
 19021  013A  293D               	goto	u647_23
 19022  013B  0845               	movf	_baseline_delay_time,w	;volatile
 19023  013C  0261               	subwf	_timer,w	;volatile
 19024  013D                     u647_23:	
 19025  013D  1C03               	skipc
 19026  013E  2966               	goto	i1l6628
 19027                           
 19028                           ;interrupts.c: 84: LATBbits.LATB4 = 1;
 19029  013F  0022               	movlb	2	; select bank2
 19030  0140  160D               	bsf	13,4	;volatile
 19031                           
 19032                           ;interrupts.c: 86: timer = 0;
 19033  0141  3000               	movlw	0
 19034  0142  0020               	movlb	0	; select bank0
 19035  0143  00E4               	movwf	_timer+3	;volatile
 19036  0144  3000               	movlw	0
 19037  0145  00E3               	movwf	_timer+2	;volatile
 19038  0146  3000               	movlw	0
 19039  0147  00E2               	movwf	_timer+1	;volatile
 19040  0148  3000               	movlw	0
 19041  0149  00E1               	movwf	_timer	;volatile
 19042                           
 19043                           ;interrupts.c: 88: if (reset_sub_delay == 1 || modulation_changed == 1) {
 19044  014A  0023               	movlb	3	; select bank3
 19045  014B  0344               	decf	_reset_sub_delay^(0+384),w
 19046  014C  1D03               	btfss	3,2
 19047  014D  0341               	decf	_modulation_changed^(0+384),w
 19048  014E  1D03               	btfss	3,2
 19049  014F  2966               	goto	i1l6628
 19050                           
 19051                           ;interrupts.c: 93: mod_counter = 0;
 19052  0150  01B6               	clrf	_mod_counter^(0+384)
 19053  0151  01B7               	clrf	(_mod_counter+1)^(0+384)
 19054                           
 19055                           ;interrupts.c: 94: modulation_changed = 0;
 19056  0152  01C1               	clrf	_modulation_changed^(0+384)
 19057                           
 19058                           ;interrupts.c: 95: mod_timer = mod_delay_time;
 19059  0153  0853               	movf	_mod_delay_time^(0+384),w
 19060  0154  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19061  0155  0854               	movf	(_mod_delay_time+1)^(0+384),w
 19062  0156  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19063  0157  0D89               	rlf	9,f
 19064  0158  3B89               	subwfb	9,f
 19065  0159  0989               	comf	9,f
 19066  015A  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19067  015B  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19068                           
 19069                           ;interrupts.c: 97: reset_sub_delay = 0;
 19070  015C  01C4               	clrf	_reset_sub_delay^(0+384)
 19071                           
 19072                           ;interrupts.c: 98: sub_timer = delay_time;
 19073  015D  0020               	movlb	0	; select bank0
 19074  015E  084C               	movf	_delay_time+3,w	;volatile
 19075  015F  00DC               	movwf	_sub_timer+3	;volatile
 19076  0160  084B               	movf	_delay_time+2,w	;volatile
 19077  0161  00DB               	movwf	_sub_timer+2	;volatile
 19078  0162  084A               	movf	_delay_time+1,w	;volatile
 19079  0163  00DA               	movwf	_sub_timer+1	;volatile
 19080  0164  0849               	movf	_delay_time,w	;volatile
 19081  0165  00D9               	movwf	_sub_timer	;volatile
 19082  0166                     i1l6628:	
 19083                           
 19084                           ;interrupts.c: 99: }
 19085                           ;interrupts.c: 100: }
 19086                           ;interrupts.c: 102: if (timer >= 30) {
 19087  0166  0020               	movlb	0	; select bank0
 19088  0167  1BE4               	btfsc	_timer+3,7	;volatile
 19089  0168  2978               	goto	i1l6632
 19090  0169  0864               	movf	_timer+3,w	;volatile
 19091  016A  1D03               	btfss	3,2
 19092  016B  2976               	goto	i1l6630
 19093  016C  0863               	movf	_timer+2,w	;volatile
 19094  016D  1D03               	btfss	3,2
 19095  016E  2976               	goto	i1l6630
 19096  016F  0862               	movf	_timer+1,w	;volatile
 19097  0170  1D03               	btfss	3,2
 19098  0171  2976               	goto	i1l6630
 19099  0172  301E               	movlw	30
 19100  0173  0261               	subwf	_timer,w	;volatile
 19101  0174  1C03               	btfss	3,0
 19102  0175  2978               	goto	i1l6632
 19103  0176                     i1l6630:	
 19104                           
 19105                           ;interrupts.c: 104: LATBbits.LATB4 = 0;
 19106  0176  0022               	movlb	2	; select bank2
 19107  0177  120D               	bcf	13,4	;volatile
 19108  0178                     i1l6632:	
 19109                           
 19110                           ;interrupts.c: 106: }
 19111                           ;interrupts.c: 107: }
 19112                           ;interrupts.c: 110: if (presetSaveMode == 1) {
 19113  0178  0020               	movlb	0	; select bank0
 19114  0179  0368               	decf	_presetSaveMode,w
 19115  017A  1D03               	btfss	3,2
 19116  017B  29A8               	goto	i1l6644
 19117                           
 19118                           ;interrupts.c: 113: if (double_timer >= 250) {
 19119  017C  0023               	movlb	3	; select bank3
 19120  017D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19121  017E  2997               	goto	i1l6640
 19122  017F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19123  0180  1D03               	btfss	3,2
 19124  0181  298C               	goto	i1l6636
 19125  0182  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19126  0183  1D03               	btfss	3,2
 19127  0184  298C               	goto	i1l6636
 19128  0185  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19129  0186  1D03               	btfss	3,2
 19130  0187  298C               	goto	i1l6636
 19131  0188  30FA               	movlw	250
 19132  0189  0220               	subwf	_double_timer^(0+384),w	;volatile
 19133  018A  1C03               	btfss	3,0
 19134  018B  2997               	goto	i1l6640
 19135  018C                     i1l6636:	
 19136                           
 19137                           ;interrupts.c: 114: LATBbits.LATB0 = 1;
 19138  018C  0022               	movlb	2	; select bank2
 19139  018D  140D               	bsf	13,0	;volatile
 19140                           
 19141                           ;interrupts.c: 115: double_timer = 0;
 19142  018E  3000               	movlw	0
 19143  018F  0023               	movlb	3	; select bank3
 19144  0190  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19145  0191  3000               	movlw	0
 19146  0192  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19147  0193  3000               	movlw	0
 19148  0194  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19149  0195  3000               	movlw	0
 19150  0196  00A0               	movwf	_double_timer^(0+384)	;volatile
 19151  0197                     i1l6640:	
 19152                           
 19153                           ;interrupts.c: 117: }
 19154                           ;interrupts.c: 118: if (double_timer >= 30) {
 19155  0197  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19156  0198  29A8               	goto	i1l6644
 19157  0199  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19158  019A  1D03               	btfss	3,2
 19159  019B  29A6               	goto	i1l6642
 19160  019C  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19161  019D  1D03               	btfss	3,2
 19162  019E  29A6               	goto	i1l6642
 19163  019F  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19164  01A0  1D03               	btfss	3,2
 19165  01A1  29A6               	goto	i1l6642
 19166  01A2  301E               	movlw	30
 19167  01A3  0220               	subwf	_double_timer^(0+384),w	;volatile
 19168  01A4  1C03               	btfss	3,0
 19169  01A5  29A8               	goto	i1l6644
 19170  01A6                     i1l6642:	
 19171                           
 19172                           ;interrupts.c: 120: LATBbits.LATB0 = 0;
 19173  01A6  0022               	movlb	2	; select bank2
 19174  01A7  100D               	bcf	13,0	;volatile
 19175  01A8                     i1l6644:	
 19176                           
 19177                           ;interrupts.c: 121: }
 19178                           ;interrupts.c: 122: }
 19179                           ;interrupts.c: 124: if (presetSaveMode < 1 && mode2_state == 0) {
 19180  01A8  0020               	movlb	0	; select bank0
 19181  01A9  0868               	movf	_presetSaveMode,w
 19182  01AA  1D03               	btfss	3,2
 19183  01AB  2A03               	goto	i1l6664
 19184  01AC  0867               	movf	_mode2_state,w
 19185  01AD  1D03               	btfss	3,2
 19186  01AE  2A03               	goto	i1l6664
 19187                           
 19188                           ;interrupts.c: 125: if (sub_timer >= tmpSubDelay ) {
 19189  01AF  0843               	movf	isr@tmpSubDelay,w
 19190  01B0  00BA               	movwf	??_isr
 19191  01B1  0844               	movf	isr@tmpSubDelay+1,w
 19192  01B2  00BB               	movwf	??_isr+1
 19193  01B3  3000               	movlw	0
 19194  01B4  1BBB               	btfsc	??_isr+1,7
 19195  01B5  30FF               	movlw	255
 19196  01B6  00BC               	movwf	??_isr+2
 19197  01B7  00BD               	movwf	??_isr+3
 19198  01B8  085C               	movf	_sub_timer+3,w	;volatile
 19199  01B9  3A80               	xorlw	128
 19200  01BA  00BE               	movwf	??_isr+4
 19201  01BB  083D               	movf	??_isr+3,w
 19202  01BC  3A80               	xorlw	128
 19203  01BD  023E               	subwf	??_isr+4,w
 19204  01BE  1D03               	skipz
 19205  01BF  29CA               	goto	u656_23
 19206  01C0  083C               	movf	??_isr+2,w
 19207  01C1  025B               	subwf	_sub_timer+2,w	;volatile
 19208  01C2  1D03               	skipz
 19209  01C3  29CA               	goto	u656_23
 19210  01C4  083B               	movf	??_isr+1,w
 19211  01C5  025A               	subwf	_sub_timer+1,w	;volatile
 19212  01C6  1D03               	skipz
 19213  01C7  29CA               	goto	u656_23
 19214  01C8  083A               	movf	??_isr,w
 19215  01C9  0259               	subwf	_sub_timer,w	;volatile
 19216  01CA                     u656_23:	
 19217  01CA  1C03               	skipc
 19218  01CB  29E7               	goto	i1l6658
 19219                           
 19220                           ;interrupts.c: 126: if (suspend_blink == 0) {
 19221  01CC  0869               	movf	_suspend_blink,w	;volatile
 19222  01CD  1D03               	btfss	3,2
 19223  01CE  29DA               	goto	i1l6654
 19224                           
 19225                           ;interrupts.c: 127: set_leds_top(top_push_state, 1);
 19226  01CF  0852               	movf	_top_push_state+1,w
 19227  01D0  00F1               	movwf	i1set_leds_top@x+1
 19228  01D1  0851               	movf	_top_push_state,w
 19229  01D2  00F0               	movwf	i1set_leds_top@x
 19230  01D3  3001               	movlw	1
 19231  01D4  00F2               	movwf	i1set_leds_top@ledState
 19232  01D5  3000               	movlw	0
 19233  01D6  00F3               	movwf	i1set_leds_top@ledState+1
 19234  01D7  31A4  24DC  3180   	fcall	i1_set_leds_top
 19235  01DA                     i1l6654:	
 19236                           
 19237                           ;interrupts.c: 128: }
 19238                           ;interrupts.c: 129: tmpSubDelay = delay_time;
 19239  01DA  0020               	movlb	0	; select bank0
 19240  01DB  084A               	movf	_delay_time+1,w	;volatile
 19241  01DC  00C4               	movwf	isr@tmpSubDelay+1
 19242  01DD  0849               	movf	_delay_time,w	;volatile
 19243  01DE  00C3               	movwf	isr@tmpSubDelay
 19244                           
 19245                           ;interrupts.c: 130: sub_timer = 0;
 19246  01DF  3000               	movlw	0
 19247  01E0  00DC               	movwf	_sub_timer+3	;volatile
 19248  01E1  3000               	movlw	0
 19249  01E2  00DB               	movwf	_sub_timer+2	;volatile
 19250  01E3  3000               	movlw	0
 19251  01E4  00DA               	movwf	_sub_timer+1	;volatile
 19252  01E5  3000               	movlw	0
 19253  01E6  00D9               	movwf	_sub_timer	;volatile
 19254  01E7                     i1l6658:	
 19255                           
 19256                           ;interrupts.c: 131: }
 19257                           ;interrupts.c: 133: if (sub_timer >= 20) {
 19258  01E7  1BDC               	btfsc	_sub_timer+3,7	;volatile
 19259  01E8  2A03               	goto	i1l6664
 19260  01E9  085C               	movf	_sub_timer+3,w	;volatile
 19261  01EA  1D03               	btfss	3,2
 19262  01EB  29F6               	goto	i1l6660
 19263  01EC  085B               	movf	_sub_timer+2,w	;volatile
 19264  01ED  1D03               	btfss	3,2
 19265  01EE  29F6               	goto	i1l6660
 19266  01EF  085A               	movf	_sub_timer+1,w	;volatile
 19267  01F0  1D03               	btfss	3,2
 19268  01F1  29F6               	goto	i1l6660
 19269  01F2  3014               	movlw	20
 19270  01F3  0259               	subwf	_sub_timer,w	;volatile
 19271  01F4  1C03               	btfss	3,0
 19272  01F5  2A03               	goto	i1l6664
 19273  01F6                     i1l6660:	
 19274                           
 19275                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19276  01F6  0869               	movf	_suspend_blink,w	;volatile
 19277  01F7  1D03               	btfss	3,2
 19278  01F8  2A03               	goto	i1l6664
 19279                           
 19280                           ;interrupts.c: 135: set_leds_top(top_push_state, 0);
 19281  01F9  0852               	movf	_top_push_state+1,w
 19282  01FA  00F1               	movwf	i1set_leds_top@x+1
 19283  01FB  0851               	movf	_top_push_state,w
 19284  01FC  00F0               	movwf	i1set_leds_top@x
 19285  01FD  3000               	movlw	0
 19286  01FE  00F2               	movwf	i1set_leds_top@ledState
 19287  01FF  00F3               	movwf	i1set_leds_top@ledState+1
 19288  0200  31A4  24DC  3180   	fcall	i1_set_leds_top
 19289  0203                     i1l6664:	
 19290                           
 19291                           ;interrupts.c: 136: }
 19292                           ;interrupts.c: 137: }
 19293                           ;interrupts.c: 138: }
 19294                           ;interrupts.c: 154: if (mod_timer >= mod_delay_time) {
 19295  0203  0023               	movlb	3	; select bank3
 19296  0204  0853               	movf	_mod_delay_time^(0+384),w
 19297  0205  0020               	movlb	0	; select bank0
 19298  0206  00BA               	movwf	??_isr
 19299  0207  0023               	movlb	3	; select bank3
 19300  0208  0854               	movf	(_mod_delay_time+1)^(0+384),w
 19301  0209  0020               	movlb	0	; select bank0
 19302  020A  00BB               	movwf	??_isr+1
 19303  020B  3000               	movlw	0
 19304  020C  1BBB               	btfsc	??_isr+1,7
 19305  020D  30FF               	movlw	255
 19306  020E  00BC               	movwf	??_isr+2
 19307  020F  00BD               	movwf	??_isr+3
 19308  0210  0023               	movlb	3	; select bank3
 19309  0211  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19310  0212  3A80               	xorlw	128
 19311  0213  0020               	movlb	0	; select bank0
 19312  0214  00BE               	movwf	??_isr+4
 19313  0215  083D               	movf	??_isr+3,w
 19314  0216  3A80               	xorlw	128
 19315  0217  023E               	subwf	??_isr+4,w
 19316  0218  0023               	movlb	3	; select bank3
 19317  0219  1D03               	skipz
 19318  021A  2A2B               	goto	u660_23
 19319  021B  0020               	movlb	0	; select bank0
 19320  021C  083C               	movf	??_isr+2,w
 19321  021D  0023               	movlb	3	; select bank3
 19322  021E  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19323  021F  1D03               	skipz
 19324  0220  2A2B               	goto	u660_23
 19325  0221  0020               	movlb	0	; select bank0
 19326  0222  083B               	movf	??_isr+1,w
 19327  0223  0023               	movlb	3	; select bank3
 19328  0224  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19329  0225  1D03               	skipz
 19330  0226  2A2B               	goto	u660_23
 19331  0227  0020               	movlb	0	; select bank0
 19332  0228  083A               	movf	??_isr,w
 19333  0229  0023               	movlb	3	; select bank3
 19334  022A  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19335  022B                     u660_23:	
 19336  022B  1C03               	skipc
 19337  022C  2AA7               	goto	i1l6682
 19338                           
 19339                           ;interrupts.c: 155: mod_timer = 0;
 19340  022D  3000               	movlw	0
 19341  022E  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19342  022F  3000               	movlw	0
 19343  0230  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19344  0231  3000               	movlw	0
 19345  0232  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19346  0233  3000               	movlw	0
 19347  0234  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19348                           
 19349                           ;interrupts.c: 159: if (mod_counter >= 60) {
 19350  0235  0837               	movf	(_mod_counter+1)^(0+384),w
 19351  0236  3A80               	xorlw	128
 19352  0237  0020               	movlb	0	; select bank0
 19353  0238  00BA               	movwf	??_isr
 19354  0239  3080               	movlw	128
 19355  023A  023A               	subwf	??_isr,w
 19356  023B  1D03               	skipz
 19357  023C  2A40               	goto	u661_25
 19358  023D  303C               	movlw	60
 19359  023E  0023               	movlb	3	; select bank3
 19360  023F  0236               	subwf	_mod_counter^(0+384),w
 19361  0240                     u661_25:	
 19362  0240  1C03               	skipc
 19363  0241  2A51               	goto	i1l157
 19364                           
 19365                           ;interrupts.c: 160: mod_counter = 0;
 19366  0242  0023               	movlb	3	; select bank3
 19367  0243  01B6               	clrf	_mod_counter^(0+384)
 19368  0244  01B7               	clrf	(_mod_counter+1)^(0+384)
 19369                           
 19370                           ;interrupts.c: 161: test_timer = 0;
 19371  0245  3000               	movlw	0
 19372  0246  0024               	movlb	4	; select bank4
 19373  0247  00C4               	movwf	(_test_timer+3)^(0+512)
 19374  0248  3000               	movlw	0
 19375  0249  00C3               	movwf	(_test_timer+2)^(0+512)
 19376  024A  3000               	movlw	0
 19377  024B  00C2               	movwf	(_test_timer+1)^(0+512)
 19378  024C  3000               	movlw	0
 19379  024D  00C1               	movwf	_test_timer^(0+512)
 19380                           
 19381                           ;interrupts.c: 162: LATBbits.LATB0 = 1;
 19382  024E  0022               	movlb	2	; select bank2
 19383  024F  140D               	bsf	13,0	;volatile
 19384                           
 19385                           ;interrupts.c: 163: } else {
 19386  0250  2A53               	goto	i1l158
 19387  0251                     i1l157:	
 19388                           
 19389                           ;interrupts.c: 164: LATBbits.LATB0 = 0;
 19390  0251  0022               	movlb	2	; select bank2
 19391  0252  100D               	bcf	13,0	;volatile
 19392  0253                     i1l158:	
 19393                           
 19394                           ;interrupts.c: 165: }
 19395                           ;interrupts.c: 169: PORTCbits.RC4 = 0;
 19396  0253  0020               	movlb	0	; select bank0
 19397  0254  120E               	bcf	14,4	;volatile
 19398                           
 19399                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 19400  0255  0023               	movlb	3	; select bank3
 19401  0256  0837               	movf	(_mod_counter+1)^(0+384),w
 19402  0257  0020               	movlb	0	; select bank0
 19403  0258  00BB               	movwf	??_isr+1
 19404  0259  0023               	movlb	3	; select bank3
 19405  025A  0836               	movf	_mod_counter^(0+384),w
 19406  025B  0020               	movlb	0	; select bank0
 19407  025C  00BA               	movwf	??_isr
 19408  025D  35BA               	lslf	??_isr,f
 19409  025E  0DBB               	rlf	??_isr+1,f
 19410  025F  308E               	movlw	142
 19411  0260  00BC               	movwf	??_isr+2
 19412  0261  3023               	movlw	35
 19413  0262  00BD               	movwf	??_isr+3
 19414  0263  083A               	movf	??_isr,w
 19415  0264  073C               	addwf	??_isr+2,w
 19416  0265  0086               	movwf	6
 19417  0266  083B               	movf	??_isr+1,w
 19418  0267  3D3D               	addwfc	??_isr+3,w
 19419  0268  0087               	movwf	7
 19420  0269  3F40               	moviw [0]fsr1
 19421  026A  0023               	movlb	3	; select bank3
 19422  026B  00B8               	movwf	_mod_value^(0+384)
 19423  026C  3F41               	moviw [1]fsr1
 19424  026D  00B9               	movwf	(_mod_value+1)^(0+384)
 19425                           
 19426                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 19427  026E  0838               	movf	_mod_value^(0+384),w
 19428  026F  0020               	movlb	0	; select bank0
 19429  0270  00AE               	movwf	modulation@x
 19430  0271  0023               	movlb	3	; select bank3
 19431  0272  0839               	movf	(_mod_value+1)^(0+384),w
 19432  0273  0020               	movlb	0	; select bank0
 19433  0274  00AF               	movwf	modulation@x+1
 19434  0275  0D89               	rlf	9,f
 19435  0276  3B89               	subwfb	9,f
 19436  0277  0989               	comf	9,f
 19437  0278  00B0               	movwf	modulation@x+2
 19438  0279  00B1               	movwf	modulation@x+3
 19439  027A  0024               	movlb	4	; select bank4
 19440  027B  0845               	movf	_adjusted_pot_value^(0+512),w
 19441  027C  0020               	movlb	0	; select bank0
 19442  027D  00B2               	movwf	modulation@y
 19443  027E  0024               	movlb	4	; select bank4
 19444  027F  0846               	movf	(_adjusted_pot_value+1)^(0+512),w
 19445  0280  0020               	movlb	0	; select bank0
 19446  0281  00B3               	movwf	modulation@y+1
 19447  0282  0D89               	rlf	9,f
 19448  0283  3B89               	subwfb	9,f
 19449  0284  0989               	comf	9,f
 19450  0285  00B4               	movwf	modulation@y+2
 19451  0286  00B5               	movwf	modulation@y+3
 19452  0287  31A4  2417  3180   	fcall	_modulation
 19453  028A  0020               	movlb	0	; select bank0
 19454  028B  082F               	movf	?_modulation+1,w
 19455  028C  0023               	movlb	3	; select bank3
 19456  028D  00B9               	movwf	(_mod_value+1)^(0+384)
 19457  028E  0020               	movlb	0	; select bank0
 19458  028F  082E               	movf	?_modulation,w
 19459  0290  0023               	movlb	3	; select bank3
 19460  0291  00B8               	movwf	_mod_value^(0+384)
 19461                           
 19462                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 19463  0292  3002               	movlw	2
 19464  0293  00F0               	movwf	___awdiv@divisor
 19465  0294  3000               	movlw	0
 19466  0295  00F1               	movwf	___awdiv@divisor+1
 19467  0296  0839               	movf	(_mod_value+1)^(0+384),w
 19468  0297  00F3               	movwf	___awdiv@dividend+1
 19469  0298  0838               	movf	_mod_value^(0+384),w
 19470  0299  00F2               	movwf	___awdiv@dividend
 19471  029A  31A6  26E9  3180   	fcall	___awdiv
 19472  029D  0871               	movf	?___awdiv+1,w
 19473  029E  0026               	movlb	6	; select bank6
 19474  029F  0092               	movwf	18	;volatile
 19475  02A0  0870               	movf	?___awdiv,w
 19476  02A1  0091               	movwf	17	;volatile
 19477                           
 19478                           ;interrupts.c: 200: mod_counter++;
 19479  02A2  3001               	movlw	1
 19480  02A3  0023               	movlb	3	; select bank3
 19481  02A4  07B6               	addwf	_mod_counter^(0+384),f
 19482  02A5  3000               	movlw	0
 19483  02A6  3DB7               	addwfc	(_mod_counter+1)^(0+384),f
 19484  02A7                     i1l6682:	
 19485                           
 19486                           ;interrupts.c: 204: }
 19487                           ;interrupts.c: 208: if (preset_programmning_on == 1) {
 19488  02A7  0343               	decf	_preset_programmning_on^(0+384),w
 19489  02A8  1D03               	btfss	3,2
 19490  02A9  2AD5               	goto	i1l6694
 19491                           
 19492                           ;interrupts.c: 209: preset_blink++;
 19493  02AA  3001               	movlw	1
 19494  02AB  0020               	movlb	0	; select bank0
 19495  02AC  00BA               	movwf	??_isr
 19496  02AD  083A               	movf	??_isr,w
 19497  02AE  0023               	movlb	3	; select bank3
 19498  02AF  07C2               	addwf	_preset_blink^(0+384),f
 19499                           
 19500                           ;interrupts.c: 211: if (preset_blink >= blink_delay) {
 19501  02B0  0848               	movf	(_blink_delay+1)^(0+384),w
 19502  02B1  3A80               	xorlw	128
 19503  02B2  3C80               	sublw	128
 19504  02B3  1D03               	skipz
 19505  02B4  2AB7               	goto	u663_25
 19506  02B5  0847               	movf	_blink_delay^(0+384),w
 19507  02B6  0242               	subwf	_preset_blink^(0+384),w
 19508  02B7                     u663_25:	
 19509  02B7  1C03               	skipc
 19510  02B8  2ADA               	goto	i1l6698
 19511                           
 19512                           ;interrupts.c: 212: LATBbits.LATB1 = 1;
 19513  02B9  0022               	movlb	2	; select bank2
 19514  02BA  148D               	bsf	13,1	;volatile
 19515                           
 19516                           ;interrupts.c: 213: if (preset_blink > blink_delay*2) {
 19517  02BB  0023               	movlb	3	; select bank3
 19518  02BC  0848               	movf	(_blink_delay+1)^(0+384),w
 19519  02BD  0020               	movlb	0	; select bank0
 19520  02BE  00BB               	movwf	??_isr+1
 19521  02BF  0023               	movlb	3	; select bank3
 19522  02C0  0847               	movf	_blink_delay^(0+384),w
 19523  02C1  0020               	movlb	0	; select bank0
 19524  02C2  00BA               	movwf	??_isr
 19525  02C3  35BA               	lslf	??_isr,f
 19526  02C4  0DBB               	rlf	??_isr+1,f
 19527  02C5  083B               	movf	??_isr+1,w
 19528  02C6  3A80               	xorlw	128
 19529  02C7  00BC               	movwf	??_isr+2
 19530  02C8  3080               	movlw	128
 19531  02C9  023C               	subwf	??_isr+2,w
 19532  02CA  1D03               	skipz
 19533  02CB  2AD0               	goto	u664_25
 19534  02CC  0023               	movlb	3	; select bank3
 19535  02CD  0842               	movf	_preset_blink^(0+384),w
 19536  02CE  0020               	movlb	0	; select bank0
 19537  02CF  023A               	subwf	??_isr,w
 19538  02D0                     u664_25:	
 19539  02D0  1803               	skipnc
 19540  02D1  2ADC               	goto	i1l165
 19541                           
 19542                           ;interrupts.c: 214: preset_blink = 0;
 19543  02D2  0023               	movlb	3	; select bank3
 19544  02D3  01C2               	clrf	_preset_blink^(0+384)
 19545                           
 19546                           ;interrupts.c: 215: }
 19547                           ;interrupts.c: 217: } else {
 19548  02D4  2ADC               	goto	i1l165
 19549  02D5                     i1l6694:	
 19550                           ;interrupts.c: 219: }
 19551                           ;interrupts.c: 221: } else {
 19552                           
 19553                           ;interrupts.c: 218: LATBbits.LATB1 = 0;
 19554                           
 19555                           
 19556                           ;interrupts.c: 222: if (preset_blink > 0) {
 19557  02D5  0023               	movlb	3	; select bank3
 19558  02D6  0842               	movf	_preset_blink^(0+384),w
 19559  02D7  1903               	btfsc	3,2
 19560  02D8  2ADC               	goto	i1l165
 19561                           
 19562                           ;interrupts.c: 223: preset_blink = 0;
 19563  02D9  01C2               	clrf	_preset_blink^(0+384)
 19564  02DA                     i1l6698:	
 19565                           
 19566                           ;interrupts.c: 224: LATBbits.LATB1 = 0;
 19567  02DA  0022               	movlb	2	; select bank2
 19568  02DB  108D               	bcf	13,1	;volatile
 19569  02DC                     i1l165:	
 19570  02DC  0020               	movlb	0	; select bank0
 19571  02DD  0842               	movf	??_isr+8,w
 19572  02DE  00FF               	movwf	127
 19573  02DF  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19574  02E0  0009               	retfie
 19575  02E1                     __end_of_isr:	
 19576                           
 19577                           	psect	text71
 19578  24DC                     __ptext71:	
 19579 ;; *************** function i1_set_leds_top *****************
 19580 ;; Defined at:
 19581 ;;		line 16 in file "LEDs.c"
 19582 ;; Parameters:    Size  Location     Type
 19583 ;;  x               2    0[COMMON] int 
 19584 ;;  ledState        2    2[COMMON] int 
 19585 ;; Auto vars:     Size  Location     Type
 19586 ;;		None
 19587 ;; Return value:  Size  Location     Type
 19588 ;;                  1    wreg      void 
 19589 ;; Registers used:
 19590 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19596 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19599 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19600 ;;Total ram usage:        4 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; This function calls:
 19603 ;;		Nothing
 19604 ;; This function is called by:
 19605 ;;		_isr
 19606 ;; This function uses a non-reentrant model
 19607 ;;
 19608                           
 19609                           
 19610                           ;psect for function i1_set_leds_top
 19611  24DC                     i1_set_leds_top:	
 19612                           
 19613                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 19614                           
 19615                           ;incstack = 0
 19616                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 19617  24DC  0027               	movlb	7	; select bank7
 19618  24DD  100C               	bcf	12,0	;volatile
 19619                           
 19620                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 19621  24DE  108C               	bcf	12,1	;volatile
 19622                           
 19623                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 19624  24DF  110C               	bcf	12,2	;volatile
 19625                           
 19626                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 19627  24E0  118C               	bcf	12,3	;volatile
 19628                           
 19629                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 19630  24E1  120C               	bcf	12,4	;volatile
 19631                           
 19632                           ;LEDs.c: 22: switch (x) {
 19633  24E2  2D07               	goto	i1l6576
 19634  24E3                     i1l6564:	
 19635                           ;LEDs.c: 23: case 1:
 19636                           
 19637                           
 19638                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 19639  24E3  0C72               	rrf	i1set_leds_top@ledState,w
 19640  24E4  1C03               	skipc
 19641  24E5  100C               	bcf	12,0	;volatile
 19642  24E6  1803               	skipnc
 19643  24E7  140C               	bsf	12,0	;volatile
 19644                           
 19645                           ;LEDs.c: 25: break;
 19646  24E8  0008               	return
 19647  24E9                     i1l6566:	
 19648                           ;LEDs.c: 26: case 2:
 19649                           
 19650                           
 19651                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 19652  24E9  0C72               	rrf	i1set_leds_top@ledState,w
 19653  24EA  1C03               	skipc
 19654  24EB  108C               	bcf	12,1	;volatile
 19655  24EC  1803               	skipnc
 19656  24ED  148C               	bsf	12,1	;volatile
 19657                           
 19658                           ;LEDs.c: 28: break;
 19659  24EE  0008               	return
 19660  24EF                     i1l6568:	
 19661                           ;LEDs.c: 29: case 3:
 19662                           
 19663                           
 19664                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 19665  24EF  0C72               	rrf	i1set_leds_top@ledState,w
 19666  24F0  1C03               	skipc
 19667  24F1  110C               	bcf	12,2	;volatile
 19668  24F2  1803               	skipnc
 19669  24F3  150C               	bsf	12,2	;volatile
 19670                           
 19671                           ;LEDs.c: 31: break;
 19672  24F4  0008               	return
 19673  24F5                     i1l6570:	
 19674                           ;LEDs.c: 32: case 4:
 19675                           
 19676                           
 19677                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 19678  24F5  0C72               	rrf	i1set_leds_top@ledState,w
 19679  24F6  1C03               	skipc
 19680  24F7  118C               	bcf	12,3	;volatile
 19681  24F8  1803               	skipnc
 19682  24F9  158C               	bsf	12,3	;volatile
 19683                           
 19684                           ;LEDs.c: 34: break;
 19685  24FA  0008               	return
 19686  24FB                     i1l6572:	
 19687                           ;LEDs.c: 35: case 5:
 19688                           
 19689                           
 19690                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 19691  24FB  0C72               	rrf	i1set_leds_top@ledState,w
 19692  24FC  1C03               	skipc
 19693  24FD  120C               	bcf	12,4	;volatile
 19694  24FE  1803               	skipnc
 19695  24FF  160C               	bsf	12,4	;volatile
 19696                           
 19697                           ;LEDs.c: 39: break;
 19698                           
 19699                           ;LEDs.c: 38: case 6:
 19700                           
 19701                           ;LEDs.c: 37: break;
 19702  2500  0008               	return
 19703  2501                     i1l796:	
 19704                           ;LEDs.c: 40: case 100:
 19705                           
 19706                           
 19707                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 19708  2501  140C               	bsf	12,0	;volatile
 19709                           
 19710                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 19711  2502  148C               	bsf	12,1	;volatile
 19712                           
 19713                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 19714  2503  150C               	bsf	12,2	;volatile
 19715                           
 19716                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 19717  2504  158C               	bsf	12,3	;volatile
 19718                           
 19719                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 19720  2505  160C               	bsf	12,4	;volatile
 19721                           
 19722                           ;LEDs.c: 47: }
 19723                           
 19724                           ;LEDs.c: 46: break;
 19725  2506  0008               	return
 19726  2507                     i1l6576:	
 19727                           
 19728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19729                           ; Switch size 1, requested type "space"
 19730                           ; Number of cases is 1, Range of values is 0 to 0
 19731                           ; switch strategies available:
 19732                           ; Name         Instructions Cycles
 19733                           ; simple_byte            4     3 (average)
 19734                           ; direct_byte            8     6 (fixed)
 19735                           ; jumptable            260     6 (fixed)
 19736                           ;	Chosen strategy is simple_byte
 19737  2507  0871               	movf	i1set_leds_top@x+1,w
 19738  2508  3A00               	xorlw	0	; case 0
 19739  2509  1903               	skipnz
 19740  250A  2D0C               	goto	i1l9356
 19741  250B  2D23               	goto	i1l797
 19742  250C                     i1l9356:	
 19743                           
 19744                           ; Switch size 1, requested type "space"
 19745                           ; Number of cases is 7, Range of values is 1 to 100
 19746                           ; switch strategies available:
 19747                           ; Name         Instructions Cycles
 19748                           ; simple_byte           22    12 (average)
 19749                           ; direct_byte          209     9 (fixed)
 19750                           ; jumptable            263     9 (fixed)
 19751                           ;	Chosen strategy is simple_byte
 19752  250C  0870               	movf	i1set_leds_top@x,w
 19753  250D  3A01               	xorlw	1	; case 1
 19754  250E  1903               	skipnz
 19755  250F  2CE3               	goto	i1l6564
 19756  2510  3A03               	xorlw	3	; case 2
 19757  2511  1903               	skipnz
 19758  2512  2CE9               	goto	i1l6566
 19759  2513  3A01               	xorlw	1	; case 3
 19760  2514  1903               	skipnz
 19761  2515  2CEF               	goto	i1l6568
 19762  2516  3A07               	xorlw	7	; case 4
 19763  2517  1903               	skipnz
 19764  2518  2CF5               	goto	i1l6570
 19765  2519  3A01               	xorlw	1	; case 5
 19766  251A  1903               	skipnz
 19767  251B  2CFB               	goto	i1l6572
 19768  251C  3A03               	xorlw	3	; case 6
 19769  251D  1903               	skipnz
 19770  251E  2D23               	goto	i1l797
 19771  251F  3A62               	xorlw	98	; case 100
 19772  2520  1903               	skipnz
 19773  2521  2D01               	goto	i1l796
 19774  2522  2D23               	goto	i1l797
 19775  2523                     i1l797:	
 19776  2523  0008               	return
 19777  2524                     __end_ofi1_set_leds_top:	
 19778                           
 19779                           	psect	text72
 19780  2417                     __ptext72:	
 19781 ;; *************** function _modulation *****************
 19782 ;; Defined at:
 19783 ;;		line 222 in file "user.c"
 19784 ;; Parameters:    Size  Location     Type
 19785 ;;  x               4   14[BANK0 ] long 
 19786 ;;  y               4   18[BANK0 ] long 
 19787 ;; Auto vars:     Size  Location     Type
 19788 ;;		None
 19789 ;; Return value:  Size  Location     Type
 19790 ;;                  4   14[BANK0 ] long 
 19791 ;; Registers used:
 19792 ;;		wreg, status,2, status,0, pclath, cstack
 19793 ;; Tracked objects:
 19794 ;;		On entry : 0/0
 19795 ;;		On exit  : 0/0
 19796 ;;		Unchanged: 0/0
 19797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19798 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19800 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19801 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19802 ;;Total ram usage:       12 bytes
 19803 ;; Hardware stack levels used:    1
 19804 ;; Hardware stack levels required when called:    1
 19805 ;; This function calls:
 19806 ;;		i1___aldiv
 19807 ;;		i1___lmul
 19808 ;; This function is called by:
 19809 ;;		_isr
 19810 ;; This function uses a non-reentrant model
 19811 ;;
 19812                           
 19813                           
 19814                           ;psect for function _modulation
 19815  2417                     _modulation:	
 19816                           
 19817                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 19818                           
 19819                           ;incstack = 0
 19820                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 19821  2417  3000               	movlw	0
 19822  2418  0020               	movlb	0	; select bank0
 19823  2419  00A3               	movwf	i1___aldiv@divisor+3
 19824  241A  3000               	movlw	0
 19825  241B  00A2               	movwf	i1___aldiv@divisor+2
 19826  241C  3003               	movlw	3
 19827  241D  00A1               	movwf	i1___aldiv@divisor+1
 19828  241E  30E8               	movlw	232
 19829  241F  00A0               	movwf	i1___aldiv@divisor
 19830  2420  300C               	movlw	12
 19831  2421  00B6               	movwf	??_modulation
 19832  2422  30F2               	movlw	242
 19833  2423  00B7               	movwf	??_modulation+1
 19834  2424  3001               	movlw	1
 19835  2425  00B8               	movwf	??_modulation+2
 19836  2426  3000               	movlw	0
 19837  2427  00B9               	movwf	??_modulation+3
 19838  2428  0835               	movf	modulation@y+3,w
 19839  2429  00F3               	movwf	i1___lmul@multiplier+3
 19840  242A  0834               	movf	modulation@y+2,w
 19841  242B  00F2               	movwf	i1___lmul@multiplier+2
 19842  242C  0833               	movf	modulation@y+1,w
 19843  242D  00F1               	movwf	i1___lmul@multiplier+1
 19844  242E  0832               	movf	modulation@y,w
 19845  242F  00F0               	movwf	i1___lmul@multiplier
 19846  2430  0831               	movf	modulation@x+3,w
 19847  2431  00F7               	movwf	i1___lmul@multiplicand+3
 19848  2432  0830               	movf	modulation@x+2,w
 19849  2433  00F6               	movwf	i1___lmul@multiplicand+2
 19850  2434  082F               	movf	modulation@x+1,w
 19851  2435  00F5               	movwf	i1___lmul@multiplicand+1
 19852  2436  082E               	movf	modulation@x,w
 19853  2437  00F4               	movwf	i1___lmul@multiplicand
 19854  2438  31A1  2172  31A4   	fcall	i1___lmul
 19855  243B  0870               	movf	?i1___lmul,w
 19856  243C  0020               	movlb	0	; select bank0
 19857  243D  07B6               	addwf	??_modulation,f
 19858  243E  0871               	movf	?i1___lmul+1,w
 19859  243F  3DB7               	addwfc	??_modulation+1,f
 19860  2440  0872               	movf	?i1___lmul+2,w
 19861  2441  3DB8               	addwfc	??_modulation+2,f
 19862  2442  0873               	movf	?i1___lmul+3,w
 19863  2443  3DB9               	addwfc	??_modulation+3,f
 19864  2444  0839               	movf	??_modulation+3,w
 19865  2445  00A7               	movwf	i1___aldiv@dividend+3
 19866  2446  0838               	movf	??_modulation+2,w
 19867  2447  00A6               	movwf	i1___aldiv@dividend+2
 19868  2448  0837               	movf	??_modulation+1,w
 19869  2449  00A5               	movwf	i1___aldiv@dividend+1
 19870  244A  0836               	movf	??_modulation,w
 19871  244B  00A4               	movwf	i1___aldiv@dividend
 19872  244C  3198  20E3         	fcall	i1___aldiv
 19873  244E  0020               	movlb	0	; select bank0
 19874  244F  0823               	movf	?i1___aldiv+3,w
 19875  2450  00B1               	movwf	?_modulation+3
 19876  2451  0822               	movf	?i1___aldiv+2,w
 19877  2452  00B0               	movwf	?_modulation+2
 19878  2453  0821               	movf	?i1___aldiv+1,w
 19879  2454  00AF               	movwf	?_modulation+1
 19880  2455  0820               	movf	?i1___aldiv,w
 19881  2456  00AE               	movwf	?_modulation
 19882  2457  0008               	return
 19883  2458                     __end_of_modulation:	
 19884                           
 19885                           	psect	text73
 19886  2172                     __ptext73:	
 19887 ;; *************** function i1___lmul *****************
 19888 ;; Defined at:
 19889 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 19890 ;; Parameters:    Size  Location     Type
 19891 ;;  multiplier      4    0[COMMON] unsigned long 
 19892 ;;  multiplicand    4    4[COMMON] unsigned long 
 19893 ;; Auto vars:     Size  Location     Type
 19894 ;;  __lmul          4    8[COMMON] unsigned long 
 19895 ;; Return value:  Size  Location     Type
 19896 ;;                  4    0[COMMON] unsigned long 
 19897 ;; Registers used:
 19898 ;;		wreg, status,2, status,0
 19899 ;; Tracked objects:
 19900 ;;		On entry : 0/0
 19901 ;;		On exit  : 0/0
 19902 ;;		Unchanged: 0/0
 19903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19904 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19905 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19907 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19908 ;;Total ram usage:       12 bytes
 19909 ;; Hardware stack levels used:    1
 19910 ;; This function calls:
 19911 ;;		Nothing
 19912 ;; This function is called by:
 19913 ;;		_modulation
 19914 ;; This function uses a non-reentrant model
 19915 ;;
 19916                           
 19917                           
 19918                           ;psect for function i1___lmul
 19919  2172                     i1___lmul:	
 19920                           
 19921                           ;incstack = 0
 19922                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 19923  2172  3000               	movlw	0
 19924  2173  00FB               	movwf	i1___lmul@product+3
 19925  2174  3000               	movlw	0
 19926  2175  00FA               	movwf	i1___lmul@product+2
 19927  2176  3000               	movlw	0
 19928  2177  00F9               	movwf	i1___lmul@product+1
 19929  2178  3000               	movlw	0
 19930  2179  00F8               	movwf	i1___lmul@product
 19931  217A                     i1l5870:	
 19932  217A  1C70               	btfss	i1___lmul@multiplier,0
 19933  217B  2984               	goto	i1l5874
 19934  217C  0874               	movf	i1___lmul@multiplicand,w
 19935  217D  07F8               	addwf	i1___lmul@product,f
 19936  217E  0875               	movf	i1___lmul@multiplicand+1,w
 19937  217F  3DF9               	addwfc	i1___lmul@product+1,f
 19938  2180  0876               	movf	i1___lmul@multiplicand+2,w
 19939  2181  3DFA               	addwfc	i1___lmul@product+2,f
 19940  2182  0877               	movf	i1___lmul@multiplicand+3,w
 19941  2183  3DFB               	addwfc	i1___lmul@product+3,f
 19942  2184                     i1l5874:	
 19943  2184  3001               	movlw	1
 19944  2185                     u512_25:	
 19945  2185  35F4               	lslf	i1___lmul@multiplicand,f
 19946  2186  0DF5               	rlf	i1___lmul@multiplicand+1,f
 19947  2187  0DF6               	rlf	i1___lmul@multiplicand+2,f
 19948  2188  0DF7               	rlf	i1___lmul@multiplicand+3,f
 19949  2189  0B89               	decfsz	9,f
 19950  218A  2985               	goto	u512_25
 19951  218B  3001               	movlw	1
 19952  218C                     u513_25:	
 19953  218C  36F3               	lsrf	i1___lmul@multiplier+3,f
 19954  218D  0CF2               	rrf	i1___lmul@multiplier+2,f
 19955  218E  0CF1               	rrf	i1___lmul@multiplier+1,f
 19956  218F  0CF0               	rrf	i1___lmul@multiplier,f
 19957  2190  0B89               	decfsz	9,f
 19958  2191  298C               	goto	u513_25
 19959  2192  0873               	movf	i1___lmul@multiplier+3,w
 19960  2193  0472               	iorwf	i1___lmul@multiplier+2,w
 19961  2194  0471               	iorwf	i1___lmul@multiplier+1,w
 19962  2195  0470               	iorwf	i1___lmul@multiplier,w
 19963  2196  1D03               	skipz
 19964  2197  297A               	goto	i1l5870
 19965  2198  087B               	movf	i1___lmul@product+3,w
 19966  2199  00F3               	movwf	?i1___lmul+3
 19967  219A  087A               	movf	i1___lmul@product+2,w
 19968  219B  00F2               	movwf	?i1___lmul+2
 19969  219C  0879               	movf	i1___lmul@product+1,w
 19970  219D  00F1               	movwf	?i1___lmul+1
 19971  219E  0878               	movf	i1___lmul@product,w
 19972  219F  00F0               	movwf	?i1___lmul
 19973  21A0  0008               	return
 19974  21A1                     __end_ofi1___lmul:	
 19975                           
 19976                           	psect	text74
 19977  18E3                     __ptext74:	
 19978 ;; *************** function i1___aldiv *****************
 19979 ;; Defined at:
 19980 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 19981 ;; Parameters:    Size  Location     Type
 19982 ;;  divisor         4    0[BANK0 ] long 
 19983 ;;  dividend        4    4[BANK0 ] long 
 19984 ;; Auto vars:     Size  Location     Type
 19985 ;;  __aldiv         4   10[BANK0 ] long 
 19986 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 19987 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 19988 ;; Return value:  Size  Location     Type
 19989 ;;                  4    0[BANK0 ] long 
 19990 ;; Registers used:
 19991 ;;		wreg, status,2, status,0
 19992 ;; Tracked objects:
 19993 ;;		On entry : 0/0
 19994 ;;		On exit  : 0/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19997 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19998 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20000 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20001 ;;Total ram usage:       15 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; This function calls:
 20004 ;;		Nothing
 20005 ;; This function is called by:
 20006 ;;		_modulation
 20007 ;; This function uses a non-reentrant model
 20008 ;;
 20009                           
 20010                           
 20011                           ;psect for function i1___aldiv
 20012  18E3                     i1___aldiv:	
 20013                           
 20014                           ;incstack = 0
 20015                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20016  18E3  0020               	movlb	0	; select bank0
 20017  18E4  01A9               	clrf	i1___aldiv@sign
 20018  18E5  1FA3               	btfss	i1___aldiv@divisor+3,7
 20019  18E6  28F4               	goto	i1l1986
 20020  18E7  09A0               	comf	i1___aldiv@divisor,f
 20021  18E8  09A1               	comf	i1___aldiv@divisor+1,f
 20022  18E9  09A2               	comf	i1___aldiv@divisor+2,f
 20023  18EA  09A3               	comf	i1___aldiv@divisor+3,f
 20024  18EB  0AA0               	incf	i1___aldiv@divisor,f
 20025  18EC  1903               	skipnz
 20026  18ED  0AA1               	incf	i1___aldiv@divisor+1,f
 20027  18EE  1903               	skipnz
 20028  18EF  0AA2               	incf	i1___aldiv@divisor+2,f
 20029  18F0  1903               	skipnz
 20030  18F1  0AA3               	incf	i1___aldiv@divisor+3,f
 20031  18F2  01A9               	clrf	i1___aldiv@sign
 20032  18F3  0AA9               	incf	i1___aldiv@sign,f
 20033  18F4                     i1l1986:	
 20034  18F4  1FA7               	btfss	i1___aldiv@dividend+3,7
 20035  18F5  2905               	goto	i1l5892
 20036  18F6  09A4               	comf	i1___aldiv@dividend,f
 20037  18F7  09A5               	comf	i1___aldiv@dividend+1,f
 20038  18F8  09A6               	comf	i1___aldiv@dividend+2,f
 20039  18F9  09A7               	comf	i1___aldiv@dividend+3,f
 20040  18FA  0AA4               	incf	i1___aldiv@dividend,f
 20041  18FB  1903               	skipnz
 20042  18FC  0AA5               	incf	i1___aldiv@dividend+1,f
 20043  18FD  1903               	skipnz
 20044  18FE  0AA6               	incf	i1___aldiv@dividend+2,f
 20045  18FF  1903               	skipnz
 20046  1900  0AA7               	incf	i1___aldiv@dividend+3,f
 20047  1901  3001               	movlw	1
 20048  1902  00FC               	movwf	??i1___aldiv
 20049  1903  087C               	movf	??i1___aldiv,w
 20050  1904  06A9               	xorwf	i1___aldiv@sign,f
 20051  1905                     i1l5892:	
 20052  1905  3000               	movlw	0
 20053  1906  00AD               	movwf	i1___aldiv@quotient+3
 20054  1907  3000               	movlw	0
 20055  1908  00AC               	movwf	i1___aldiv@quotient+2
 20056  1909  3000               	movlw	0
 20057  190A  00AB               	movwf	i1___aldiv@quotient+1
 20058  190B  3000               	movlw	0
 20059  190C  00AA               	movwf	i1___aldiv@quotient
 20060  190D  0823               	movf	i1___aldiv@divisor+3,w
 20061  190E  0422               	iorwf	i1___aldiv@divisor+2,w
 20062  190F  0421               	iorwf	i1___aldiv@divisor+1,w
 20063  1910  0420               	iorwf	i1___aldiv@divisor,w
 20064  1911  1903               	skipnz
 20065  1912  294E               	goto	i1l5914
 20066  1913  01A8               	clrf	i1___aldiv@counter
 20067  1914  0AA8               	incf	i1___aldiv@counter,f
 20068  1915                     i1l5900:	
 20069  1915  1BA3               	btfsc	i1___aldiv@divisor+3,7
 20070  1916  2923               	goto	i1l5902
 20071  1917  3001               	movlw	1
 20072  1918                     u518_25:	
 20073  1918  35A0               	lslf	i1___aldiv@divisor,f
 20074  1919  0DA1               	rlf	i1___aldiv@divisor+1,f
 20075  191A  0DA2               	rlf	i1___aldiv@divisor+2,f
 20076  191B  0DA3               	rlf	i1___aldiv@divisor+3,f
 20077  191C  0B89               	decfsz	9,f
 20078  191D  2918               	goto	u518_25
 20079  191E  3001               	movlw	1
 20080  191F  00FC               	movwf	??i1___aldiv
 20081  1920  087C               	movf	??i1___aldiv,w
 20082  1921  07A8               	addwf	i1___aldiv@counter,f
 20083  1922  2915               	goto	i1l5900
 20084  1923                     i1l5902:	
 20085  1923  3001               	movlw	1
 20086  1924                     u520_25:	
 20087  1924  35AA               	lslf	i1___aldiv@quotient,f
 20088  1925  0DAB               	rlf	i1___aldiv@quotient+1,f
 20089  1926  0DAC               	rlf	i1___aldiv@quotient+2,f
 20090  1927  0DAD               	rlf	i1___aldiv@quotient+3,f
 20091  1928  0B89               	decfsz	9,f
 20092  1929  2924               	goto	u520_25
 20093  192A  0823               	movf	i1___aldiv@divisor+3,w
 20094  192B  0227               	subwf	i1___aldiv@dividend+3,w
 20095  192C  1D03               	skipz
 20096  192D  2938               	goto	u521_25
 20097  192E  0822               	movf	i1___aldiv@divisor+2,w
 20098  192F  0226               	subwf	i1___aldiv@dividend+2,w
 20099  1930  1D03               	skipz
 20100  1931  2938               	goto	u521_25
 20101  1932  0821               	movf	i1___aldiv@divisor+1,w
 20102  1933  0225               	subwf	i1___aldiv@dividend+1,w
 20103  1934  1D03               	skipz
 20104  1935  2938               	goto	u521_25
 20105  1936  0820               	movf	i1___aldiv@divisor,w
 20106  1937  0224               	subwf	i1___aldiv@dividend,w
 20107  1938                     u521_25:	
 20108  1938  1C03               	skipc
 20109  1939  2943               	goto	i1l5910
 20110  193A  0820               	movf	i1___aldiv@divisor,w
 20111  193B  02A4               	subwf	i1___aldiv@dividend,f
 20112  193C  0821               	movf	i1___aldiv@divisor+1,w
 20113  193D  3BA5               	subwfb	i1___aldiv@dividend+1,f
 20114  193E  0822               	movf	i1___aldiv@divisor+2,w
 20115  193F  3BA6               	subwfb	i1___aldiv@dividend+2,f
 20116  1940  0823               	movf	i1___aldiv@divisor+3,w
 20117  1941  3BA7               	subwfb	i1___aldiv@dividend+3,f
 20118  1942  142A               	bsf	i1___aldiv@quotient,0
 20119  1943                     i1l5910:	
 20120  1943  3001               	movlw	1
 20121  1944                     u522_25:	
 20122  1944  36A3               	lsrf	i1___aldiv@divisor+3,f
 20123  1945  0CA2               	rrf	i1___aldiv@divisor+2,f
 20124  1946  0CA1               	rrf	i1___aldiv@divisor+1,f
 20125  1947  0CA0               	rrf	i1___aldiv@divisor,f
 20126  1948  0B89               	decfsz	9,f
 20127  1949  2944               	goto	u522_25
 20128  194A  3001               	movlw	1
 20129  194B  02A8               	subwf	i1___aldiv@counter,f
 20130  194C  1D03               	btfss	3,2
 20131  194D  2923               	goto	i1l5902
 20132  194E                     i1l5914:	
 20133  194E  0829               	movf	i1___aldiv@sign,w
 20134  194F  1903               	btfsc	3,2
 20135  1950  295C               	goto	i1l5918
 20136  1951  09AA               	comf	i1___aldiv@quotient,f
 20137  1952  09AB               	comf	i1___aldiv@quotient+1,f
 20138  1953  09AC               	comf	i1___aldiv@quotient+2,f
 20139  1954  09AD               	comf	i1___aldiv@quotient+3,f
 20140  1955  0AAA               	incf	i1___aldiv@quotient,f
 20141  1956  1903               	skipnz
 20142  1957  0AAB               	incf	i1___aldiv@quotient+1,f
 20143  1958  1903               	skipnz
 20144  1959  0AAC               	incf	i1___aldiv@quotient+2,f
 20145  195A  1903               	skipnz
 20146  195B  0AAD               	incf	i1___aldiv@quotient+3,f
 20147  195C                     i1l5918:	
 20148  195C  082D               	movf	i1___aldiv@quotient+3,w
 20149  195D  00A3               	movwf	?i1___aldiv+3
 20150  195E  082C               	movf	i1___aldiv@quotient+2,w
 20151  195F  00A2               	movwf	?i1___aldiv+2
 20152  1960  082B               	movf	i1___aldiv@quotient+1,w
 20153  1961  00A1               	movwf	?i1___aldiv+1
 20154  1962  082A               	movf	i1___aldiv@quotient,w
 20155  1963  00A0               	movwf	?i1___aldiv
 20156  1964  0008               	return
 20157  1965                     __end_ofi1___aldiv:	
 20158                           
 20159                           	psect	text75
 20160  26E9                     __ptext75:	
 20161 ;; *************** function ___awdiv *****************
 20162 ;; Defined at:
 20163 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20164 ;; Parameters:    Size  Location     Type
 20165 ;;  divisor         2    0[COMMON] int 
 20166 ;;  dividend        2    2[COMMON] int 
 20167 ;; Auto vars:     Size  Location     Type
 20168 ;;  quotient        2    7[COMMON] int 
 20169 ;;  sign            1    6[COMMON] unsigned char 
 20170 ;;  counter         1    5[COMMON] unsigned char 
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  2    0[COMMON] int 
 20173 ;; Registers used:
 20174 ;;		wreg, status,2, status,0
 20175 ;; Tracked objects:
 20176 ;;		On entry : 0/0
 20177 ;;		On exit  : 0/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20180 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20181 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20183 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20184 ;;Total ram usage:        9 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; This function calls:
 20187 ;;		Nothing
 20188 ;; This function is called by:
 20189 ;;		_isr
 20190 ;;		_USARTWriteInt
 20191 ;; This function uses a non-reentrant model
 20192 ;;
 20193                           
 20194                           
 20195                           ;psect for function ___awdiv
 20196  26E9                     ___awdiv:	
 20197                           
 20198                           ;incstack = 0
 20199                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20200  26E9  01F6               	clrf	___awdiv@sign
 20201  26EA  1FF1               	btfss	___awdiv@divisor+1,7
 20202  26EB  2EF3               	goto	i1l6526
 20203  26EC  09F0               	comf	___awdiv@divisor,f
 20204  26ED  09F1               	comf	___awdiv@divisor+1,f
 20205  26EE  0AF0               	incf	___awdiv@divisor,f
 20206  26EF  1903               	skipnz
 20207  26F0  0AF1               	incf	___awdiv@divisor+1,f
 20208  26F1  01F6               	clrf	___awdiv@sign
 20209  26F2  0AF6               	incf	___awdiv@sign,f
 20210  26F3                     i1l6526:	
 20211  26F3  1FF3               	btfss	___awdiv@dividend+1,7
 20212  26F4  2EFE               	goto	i1l6532
 20213  26F5  09F2               	comf	___awdiv@dividend,f
 20214  26F6  09F3               	comf	___awdiv@dividend+1,f
 20215  26F7  0AF2               	incf	___awdiv@dividend,f
 20216  26F8  1903               	skipnz
 20217  26F9  0AF3               	incf	___awdiv@dividend+1,f
 20218  26FA  3001               	movlw	1
 20219  26FB  00F4               	movwf	??___awdiv
 20220  26FC  0874               	movf	??___awdiv,w
 20221  26FD  06F6               	xorwf	___awdiv@sign,f
 20222  26FE                     i1l6532:	
 20223  26FE  01F7               	clrf	___awdiv@quotient
 20224  26FF  01F8               	clrf	___awdiv@quotient+1
 20225  2700  0870               	movf	___awdiv@divisor,w
 20226  2701  0471               	iorwf	___awdiv@divisor+1,w
 20227  2702  1903               	btfsc	3,2
 20228  2703  2F2D               	goto	i1l6554
 20229  2704  01F5               	clrf	___awdiv@counter
 20230  2705  0AF5               	incf	___awdiv@counter,f
 20231  2706                     i1l6542:	
 20232  2706  1BF1               	btfsc	___awdiv@divisor+1,7
 20233  2707  2F12               	goto	i1l6544
 20234  2708  3001               	movlw	1
 20235  2709                     u629_25:	
 20236  2709  35F0               	lslf	___awdiv@divisor,f
 20237  270A  0DF1               	rlf	___awdiv@divisor+1,f
 20238  270B  0B89               	decfsz	9,f
 20239  270C  2F09               	goto	u629_25
 20240  270D  3001               	movlw	1
 20241  270E  00F4               	movwf	??___awdiv
 20242  270F  0874               	movf	??___awdiv,w
 20243  2710  07F5               	addwf	___awdiv@counter,f
 20244  2711  2F06               	goto	i1l6542
 20245  2712                     i1l6544:	
 20246  2712  3001               	movlw	1
 20247  2713                     u631_25:	
 20248  2713  35F7               	lslf	___awdiv@quotient,f
 20249  2714  0DF8               	rlf	___awdiv@quotient+1,f
 20250  2715  0B89               	decfsz	9,f
 20251  2716  2F13               	goto	u631_25
 20252  2717  0871               	movf	___awdiv@divisor+1,w
 20253  2718  0273               	subwf	___awdiv@dividend+1,w
 20254  2719  1D03               	skipz
 20255  271A  2F1D               	goto	u632_25
 20256  271B  0870               	movf	___awdiv@divisor,w
 20257  271C  0272               	subwf	___awdiv@dividend,w
 20258  271D                     u632_25:	
 20259  271D  1C03               	skipc
 20260  271E  2F24               	goto	i1l6550
 20261  271F  0870               	movf	___awdiv@divisor,w
 20262  2720  02F2               	subwf	___awdiv@dividend,f
 20263  2721  0871               	movf	___awdiv@divisor+1,w
 20264  2722  3BF3               	subwfb	___awdiv@dividend+1,f
 20265  2723  1477               	bsf	___awdiv@quotient,0
 20266  2724                     i1l6550:	
 20267  2724  3001               	movlw	1
 20268  2725                     u633_25:	
 20269  2725  36F1               	lsrf	___awdiv@divisor+1,f
 20270  2726  0CF0               	rrf	___awdiv@divisor,f
 20271  2727  0B89               	decfsz	9,f
 20272  2728  2F25               	goto	u633_25
 20273  2729  3001               	movlw	1
 20274  272A  02F5               	subwf	___awdiv@counter,f
 20275  272B  1D03               	btfss	3,2
 20276  272C  2F12               	goto	i1l6544
 20277  272D                     i1l6554:	
 20278  272D  0876               	movf	___awdiv@sign,w
 20279  272E  1903               	btfsc	3,2
 20280  272F  2F35               	goto	i1l6558
 20281  2730  09F7               	comf	___awdiv@quotient,f
 20282  2731  09F8               	comf	___awdiv@quotient+1,f
 20283  2732  0AF7               	incf	___awdiv@quotient,f
 20284  2733  1903               	skipnz
 20285  2734  0AF8               	incf	___awdiv@quotient+1,f
 20286  2735                     i1l6558:	
 20287  2735  0878               	movf	___awdiv@quotient+1,w
 20288  2736  00F1               	movwf	?___awdiv+1
 20289  2737  0877               	movf	___awdiv@quotient,w
 20290  2738  00F0               	movwf	?___awdiv
 20291  2739  0008               	return
 20292  273A                     __end_of___awdiv:	
 20293  007E                     btemp	set	126	;btemp
 20294  007E                     int$flags	set	126
 20295  007E                     wtemp	set	126
 20296  007E                     wtemp0	set	126
 20297  0080                     wtemp1	set	128
 20298  0082                     wtemp2	set	130
 20299  0084                     wtemp3	set	132
 20300  0086                     wtemp4	set	134
 20301  0088                     wtemp5	set	136
 20302  007F                     wtemp6	set	127
 20303  007E                     ttemp	set	126
 20304  007E                     ttemp0	set	126
 20305  0081                     ttemp1	set	129
 20306  0084                     ttemp2	set	132
 20307  0087                     ttemp3	set	135
 20308  007F                     ttemp4	set	127
 20309  007E                     ltemp	set	126
 20310  007E                     ltemp0	set	126
 20311  0082                     ltemp1	set	130
 20312  0086                     ltemp2	set	134
 20313  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        48
    BSS         289
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     74      77
    BANK3            80     14      79
    BANK4            80      9      68
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           30      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  855323
                                              9 BANK3      5     5      0
                                              0 BANK4      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                                7     7      0  159167
                                             48 BANK2      7     7      0
                           ___awtoft
                             ___wmul
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29485
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33820
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30569
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29759
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29543
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   19788
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5650
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  162066
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  151724
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  151773
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  135959
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42410
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75207
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25638
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         9     9      0   91240
                                             51 BANK2      9     9      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   71601
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   16942
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                             14 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18011
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6238
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4488
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1485
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      E      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     234      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     234      28        0.0%
BANK11              1E      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 13 14:49:54 2017

                     _update_mode 2233                      ___altoft@exp 0134                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0135                  modSaw@inflection 0131                  scaleA100kPot@pwm 01E1  
                    ___awdiv@sign 0076                _topTactile_pressed 01C6        setDoublePressState@f_state 00B8  
             ___wmul@multiplicand 0130                USARTInit@baud_rate 00A0                   _updateSwitchTap 0C1D  
                    ___ftadd@exp1 00CD                      ___ftadd@exp2 00CC                      ___ftadd@sign 00CB  
                             l366 05A6                               l801 22AC                               l386 2224  
                             l803 22AF              __size_of_adc_convert 0013                               l804 22B2  
                             l805 22B5                               l637 189F                               l806 22B8  
                             l590 2FB3                               l808 22BB                               l809 22DF  
                             l970 25F5                               l796 2769                               l797 278D  
                             l966 25CB                               l982 268E                               l993 2263  
                             l978 2660                               _GIE 005F                               _RB1 0069  
                             _PR2 001B      solidring_tactiles@ring_delay 00B4                               _map 1B7A  
                             _exp 1351                               _log 109F                               _isr 0004  
                             _tap 02A0                               _sin 0867                               _pow 06DE  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 0149           __end_of_set_leds_bottom 22E0  
                    __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029                      ___ftdiv@cntr 00D8  
                    ___ftdiv@sign 00DD                              l1001 20D1                              l1003 20D7  
                            l1004 20DF                              l1005 20F3                              l1008 181B  
                            l1019 1865                              l2100 0850                              l2123 12FA  
                            l1405 0C34                              l1263 11F6                              l2313 097C  
                            l1419 0CEE                              l2092 0835                              l2183 1AD9  
                            l2099 0848                              l1910 0FC0                              l2295 0702  
                            l1931 205F                              l1699 24CE                              l1884 1B77  
                            ?_map 00DE                              l1986 1976                              l8016 148A  
                            l7410 2751                              l7412 2759                              l8220 0938  
                            l8300 19DE                              ?_exp 0148                              ?_log 013E  
                            l7414 2761                              l7406 2741                              l7510 12D9  
                            l8310 1AF9                              l7408 2749                              l7504 12C6  
                            l7600 1F1D                              l8208 089C                              l7360 21DA  
                            l8056 2543                              l8240 0E3A                              l7434 22C2  
                            l7418 2770                              l7522 130C                              l7506 12D0  
                            l7442 2059                              l8146 2597                              l8090 0770  
                            l8082 0716                              l7380 0812                              l7516 12EC  
                            l7508 12D5                              l7364 21E4                              l8076 070A  
                            l8244 0F7C                              l8340 0B4A                              l8332 0A64  
                            ?_isr 0070                              l7390 083A                              l7382 081C  
                            l7526 131E                              l7518 12F6                              l8094 0790  
                            l8342 0B90                              l8350 0C01                              l8334 0A78  
                            l8326 0A5F                              l8182 2384                              l8190 238F  
                            l8174 2373                              l8510 1199                              l7392 0842  
                            l7384 0821                              l7376 080B                              l7536 1339  
                            l7480 128A                              l7464 2615                              l7544 22F7  
                            l7624 1A85                              l8256 2353                              l8344 0BD6  
                            l8336 0ABE                              l8600 0C46                              l8426 18B2  
                            l8362 24A1                              l7466 2625                              l7650 1AD0  
                            l7642 1AB5                              l7802 1CCC                              l8338 0B04  
                            l8354 0C0A                              l7706 26CD                              l8530 11C8  
                            l8506 1186                              l8282 1997                              l8274 1987  
                            l8428 18BB                              l8364 24A3                              l8372 24AB  
                            l7476 1283                              l7572 1EBE                              l7548 230D  
                            l7652 1ADC                              l7644 1AC3                              l9340 0BF0  
                            l8348 0BEA                              l8532 11D0                              l8292 19C5  
                            l8284 19A5                              l9350 24C9                              l8366 24A5  
                            l7486 1299                              l7566 1EA8                              l7806 1CD4  
                            l9342 1F73                              l7726 2287                              l8518 11A7  
                            l8550 11FA                              l8622 0C90                              l8614 0C68  
                            l9352 2776                              l9344 24BA                              l8368 24A7  
                            l7584 1EF9                              l7656 1AEA                              l7816 1D35  
                            l8560 121D                              l8544 11E8                              l8296 19D0  
                            l8640 0CCE                              l8616 0C85                              l8464 2260  
                            l8480 183E                              l9354 22C8                              l9346 24BF  
                            l7738 20B9                              l7754 1D6A                              l7498 12B3  
                            l7826 27F9                              l8706 25E7                              l8810 1F53  
                            l7914 1689                              l7906 20E7                              l8562 1223  
                            l8570 1236                              l8458 2256                              l8466 2267  
                            l9348 24C4                              l7748 1D54                              l7596 1F15  
                            l7588 1F01                              l7668 23AB                              l7940 212F  
                            l7836 1015                              l8812 1F59                              l8556 1215  
                            l8636 0CB7                              ?_sin 0145                              l8718 2655  
                            l7870 1087                              l7846 1037                              l7950 10C3  
                            l8830 1FFA                              l8814 1F5D                              l8822 1F6E  
                            l8670 0DAD                              l8638 0CBF                              l8486 184A  
                            l7776 1DC4                              l7768 1DAB                              l8728 267C  
                            l8816 1F63                              l8824 1F87                              l7928 14DF  
                            l8664 0D3D                              l8656 0D31                              l8648 0CE6  
                            l8496 1861                              l8488 184F                              l8904 046C  
                            l7938 211F                              l7866 107F                              l8754 1C1D  
                            l8770 1DEF                              l8818 1F67                              l7698 26A9  
                            l8666 0D87                              l8594 0C29                              l8498 1869  
                            l8922 0540                              l7788 214C                              l7972 135E  
                            l7956 10D6                              l8748 1C10                              l8908 049E  
                            ?_pow 0155                              l7982 1383                              l8790 19F3  
                            l8678 0DEB                              l8950 06A0                              l8942 0624  
                            l8934 05A8                              l8918 050E                              l8696 25C0  
                            l8776 1DFE                              l8880 03A1                              l8864 0382  
                            l7994 13E2                              l8954 06A7                              l8946 0656  
                            l8938 05DA                              l8874 0392                              l7988 13A7  
                            l8894 040E                              _PEIE 005E                              _RCIE 048D  
                            u8105 1D7C                              u7305 21EC                              u8025 26A7  
                            u8115 1D8C                              u8035 26CB                              u8125 1DAC  
                            u8135 1DBB                              u7425 0857                              u7345 0817  
                            u8145 1DC5                              u7505 261A                              u9105 11B1  
                            u7365 0830                              u8245 1040                              u8350 13C0  
                            u7615 12B4                              u7295 21E5                              u8600 0935  
                            u8360 13C1                              u7385 083D                              u7705 12ED  
                            u7465 2060                              u9065 117F                              u7475 2065  
                            u8515 2013                              u9075 1192                              u7645 12C7  
                            u7805 1ECA                              u8285 2124                              u8525 2364  
                            u9325 0C71                              u7815 1EDA                              u8465 0761  
                            u8705 199A                              u8490 2595                              u7675 12DA  
                            u7835 1F02                              u8395 1481                              u9195 1206  
                            u9435 0CFF                              u9355 0C9A                              u7845 1F08  
                            u7925 1A8C                              u8485 2577                              u8805 0A5D  
                            u8725 19A6                              u8565 202D                              u9445 0D16  
                            u8590 0934                              u9615 2675                              u8735 19BA  
                            u9455 0D46                              u8745 19C6                              u9465 0D5B  
                            u8835 2100                              u7875 1F1E                              u7955 1AB6  
                            u9555 25E0                              u9475 0D6F                              u8915 2246  
                            u8845 2106                              u7885 1F24                              u9805 05A1  
                            u9495 0D8C                              u9815 05BF                              u9735 03F3  
                            u8880 18B9                              u8865 1898                              u7985 1AD1  
                            u9825 05D8                              u9745 040C                              u8875 18AB  
                            u8795 0A49                              u9835 063B                              u9755 0483  
                            u9845 0654                              u9765 049C                              u9695 1FF5  
                            u9775 0525                              u8985 182D                              u9785 053E  
                            u9795 0595                scaleA100kPot@input 0167                      __CFG_WRT$OFF 0000  
               _scaleA10kPot$2815 01E4                 _scaleA10kPot$2816 01E7                     __CFG_FCMEN$ON 0000  
                            _iCnt 01BF                              _main 035D                      ___ftpack@arg 00A0  
                    ___ftpack@exp 00A3                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              map@x 00DE                              btemp 007E  
                            exp@x 0148                              log@x 013E                     __CFG_BOREN$ON 0000  
                            sin@f 0145                              sin@y 0149                              ltemp 007E  
                            pow@x 0155                              pow@y 0158          __end_of_setFeedbackState 2022  
                            start 02E1                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 2008                   _expressModeCnst 01DD      updateSwitchTap@tapCntDivisor 00C2  
    __end_of_setSwitchBypassState 25B6                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 00BC                      ___ftmul@sign 00BD                   __end_of_InitApp 21D1  
                    ___fttol@exp1 012D                             ??_map 00ED                             ??_exp 014B  
                           ??_log 0141                      ___fttol@lval 0129                             ??_isr 003A  
                           ??_sin 0148                             ??_pow 015B                   _switchBypass_up 0262  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 19E7                             ?_main 0070  
                 __end_of___awdiv 273A                   __end_of___ftadd 1351                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 1DE6  
                 __end_of___ftneg 2F82                   __end_of___ftmul 1F45                   ___awdiv@divisor 0070  
                 __end_of___ftsub 2172                   __end_of___fttol 1AF3                             i1l135 0121  
                           i1l165 02DC                             i1l157 0251                             i1l158 0253  
                           i1l796 2501                             i1l797 2523                   ___awdiv@counter 0075  
                           _RCREG 0199                             _SPBRG 019B                __end_ofsin@coeff_a 2848  
              __end_ofsin@coeff_b 2854                             _TXREG 019A                             _UQEnd 0065  
             _ConfigureOscillator 2000                  _setPresetDisplay 226B                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 00A4                      ___lltoft@exp 00AD  
           __size_of_calcSinArray 0087                   _switchTap_state 01E0                 ??_setLongTapState 00A2  
                   ___awtoft@sign 00AD                             _floor 1C96                             _ldexp 1008  
                           _frexp 2397                             _myBuf 03A0                             _errno 0253  
                   ___ftpack@sign 00A4                             _timer 0061                             _trunc 2524  
                __end_ofi1___lmul 21A1                             sin@x2 014F                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 2233                             pow@yi 0163                   scaleA10kPot@pwm 01E1  
              __size_of_USARTInit 0043                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 2600                __size_ofi1___aldiv 0082  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F             set_subdivision@scalar 0146                       exp@exponent 0152  
            ?_ConfigureOscillator 0070                _updateSwitchBypass 1170                       ldexp@newexp 0141  
         __end_of_updateSwitchTap 0E05                   __initialization 02E3                       log@exponent 0142  
     updateModulationArray@iAngle 0156           _updateSwitchBypassState 0801                      __end_of_main 06DE  
         __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070            __size_of_scaleA100kPot 0085  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000            ring_tactiles@iLed_1542 00B5  
                 _set_subdivision 1F45                      _calcSinArray 1AF3                            ??_main 01EA  
                   ___fttol@sign1 0128                     ?_scaleA10kPot 0167           __size_of_FLASH_ReadWord 0020  
      __end_of_solidring_tactiles 2417                    _feedback_timer 01A8                    _feedback_state 0054  
                  _feedback_start 016A                  ?_set_leds_bottom 00A0                            ?_floor 0136  
                          ?_ldexp 013E                            ?_frexp 00A0                  __end_of___altoft 264B  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0072  
             _baseline_delay_time 0045                  __end_of___awtoft 20D0                  __end_of___ftpack 0867  
            ??_updateSwitchBypass 00BC                            ?_trunc 0136                  __end_of___lltoft 2144  
                          i1l1986 18F4                            i1l6532 26FE                            i1l5900 1915  
                          i1l6550 2724                            i1l6542 2706                            i1l6526 26F3  
                          i1l5910 1943                            i1l5902 1923                            i1l6630 0176  
                          i1l6606 010E                            i1l6544 2712                            i1l6640 0197  
                          i1l6632 0178                            i1l6554 272D                            i1l5914 194E  
                          i1l6570 24F5                            i1l6642 01A6                            i1l6572 24FB  
                          i1l6564 24E3                            i1l6660 01F6                            i1l6636 018C  
                          i1l6644 01A8                            i1l6628 0166                            i1l6558 2735  
                          i1l5918 195C                            i1l5870 217A                            i1l6566 24E9  
                          i1l6654 01DA                            i1l6568 24EF                            i1l6576 2507  
                          i1l6664 0203                            i1l6592 00AB                            i1l5874 2184  
                          i1l6682 02A7                            i1l6658 01E7                            i1l5892 1905  
                          i1l6694 02D5                            i1l6598 00C6                            i1l6698 02DA  
                          i1l9356 250C                            _PMADRH 0192                            u520_25 1924  
                          u512_25 2185                            _PMADRL 0191                            u521_25 1938  
                          u513_25 218C                            _PMDATH 0194                            u522_25 1944  
                          _PMDATL 0193                            _PMCON2 0196                            u518_25 1918  
                          u631_25 2713                            u632_25 271D                            u640_25 00BD  
                          u633_25 2725                            u642_23 00DE                            u660_23 022B  
                          u629_25 2709                            u661_25 0240                            u638_25 00A2  
                          u647_23 013D                            u663_25 02B7                            u656_23 01CA  
                          u664_25 02D0                    _debounce_count 0249                       modSaw@angle 012E  
                  _debounce_mode1 024B                    _debounce_mode2 024D                       modSaw@shift 013F  
                          _URBuff 0320                         ??_InitApp 00A0             ??_ConfigureOscillator 00A0  
        __end_of_read_top_tactile 2699                       modSin@angle 0134                    __CFG_PWRTE$OFF 0000  
                     modSin@shift 013F                            ___ftge 22E0                            ___lmul 21D1  
                       ??___aldiv 00A8                            ___wmul 2056                 _update_selectMode 1814  
                       ??___awdiv 0074                         ??___ftadd 00C7                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 00D4                         ??___ftneg 00C1                         ??___ftmul 00B4  
                       ??___ftsub 00F0                         ??___fttol 0124                       modTri@angle 012E  
                __end_of_init_adc 2F8C                            _modSaw 14AA                            _modSin 1654  
                          _modTri 0E05                  __end_of_init_pwm 2499                ?_update_selectMode 0070  
                     modTri@shift 0137                  ___awdiv@quotient 0077             __end_of_resetRingLEDs 3000  
                          _tmpVal 0257                 __end_of_USARTInit 24DC                    ??_scaleA10kPot 00F0  
               __end_ofi1___aldiv 1965                            floor@i 013A                            floor@x 0136  
           ___ftmul@f3_as_product 00B9           FLASH_ReadWord@flashAddr 00A0                            sin@sgn 0152  
                __end_of_showSave 2FCE               ??_update_selectMode 00A7              _getSwitchBypassState 2004  
                       ??_wait_ms 00AE              _setSwitchBypassState 256C                            trunc@i 013A  
                          trunc@x 0136                     _scaleA100kPot 19E7      __end_of_setExpressionDisplay 2FE6  
          __size_of_scaleiA10kPot 00AB            setLongTapState@f_state 00A0                  modSin@inflection 0137  
                __end_ofexp@coeff 281E                  __end_oflog@coeff 2839           __end_of__initialization 0359  
                      ___altoft@c 012E                        ___ftadd@f1 00C1                        ___ftadd@f2 00C4  
                      ___ftge@ff1 00A0                        ___ftge@ff2 00A3                 _bypass_turning_on 01BE  
                    eval_poly@res 013B                        ___ftdiv@f1 00D1                        ___ftdiv@f2 00CE  
                      ___ftdiv@f3 00D9                    _top_push_state 0051         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00BE               _switchBypass_toggle 0255                        ___awtoft@c 00A8  
           __end_of_ring_tactiles 26E9         __end_of_update_selectMode 186D           __end_of_set_subdivision 2000  
                      ___ftmul@f1 00AE                        ___ftmul@f2 00B1                        ___ftsub@f1 0142  
                      ___ftsub@f2 013F                        ___fttol@f1 0120                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 1800  
                    __pidataBANK3 203C                      __pidataBANK4 0002                        ___lltoft@c 00A8  
                   __end_of_floor 1D3D                     __end_of_ldexp 109F                     __end_of_frexp 23D7  
                   __end_of_trunc 256C                  _initSwitchBypass 2F98                         ?i1___lmul 0070  
           _updateModulationArray 0A36                   _doubleTap_state 0066                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2                    ?_scaleA100kPot 0167  
                         ??_floor 0139                           ??_ldexp 0143                           ??_frexp 00A4  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                 i1___aldiv@divisor 0020  
               i1___aldiv@counter 0028                           ??_trunc 0139                     ?_setPedalMode 0070  
                      __pbssBANK0 0059                        __pbssBANK2 016A                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                        __pbssBANK5 02A0                        __pbssBANK6 0320  
                      __pbssBANK7 03A0                __size_of_eval_poly 0072                  ??i1_set_leds_top 0074  
                 __CFG_VCAPEN$OFF 0000                __size_of_modSawRev 001C                __size_of_modSquare 003D  
               ?_setFeedbackState 00A0          __end_of_setPresetDisplay 22A5                        _delay_time 0049  
                _long_press_limit 004F      __size_of_setDoublePressState 003E                        _delayfound 0251  
                      __pmaintext 035D                ??_setFeedbackState 00A2                    _InitializeTaps 20F4  
                         ?___ftge 00A0                           ?___lmul 00A0                           ?___wmul 012E  
  updateModulationArray@thisAngle 0154                        __pintentry 0004                     _scaleiA10kPot 1DE6  
                      _blink_rate 0053                     ??_adc_convert 00A2                         ?___altoft 012E  
                         ?_modSaw 012E                           ?_modSin 0134                           ?_modTri 012E  
                  ___lmul@product 00A8                   _setLongTapState 2022                         ?___awtoft 00A8  
                       ?___ftpack 00A0               modSquare@inflection 014B                         ?___lltoft 00A8  
                      ??i1___lmul 0078                    _FLASH_ReadWord 208E   __end_of_updateSwitchBypassState 0802  
                     modulation@x 002E                       modulation@y 0032                        _ldexp$2615 0145  
                 _debounce_bypass 0247                    ??_setPedalMode 00A7                USARTWriteInt@F3536 0234  
                   _suspend_blink 0069                      modSaw@period 0142                           _UQFront 007D  
                       ?_init_adc 0070                         ?_init_pwm 0070                           _InitApp 21A1  
            __end_of_scaleA10kPot 1C96                      modSin@period 0142            __end_of_InitializeTaps 211A  
                    modSin@tmpVal 0145                     ?_set_leds_top 00A0                        _knob1_prev 01C9  
      __size_of_update_selectMode 0059                        _knob2_prev 01CB                        _knob3_prev 01CD  
                      _knob4_prev 01CF                        _knob5_prev 01D1                  ?_set_subdivision 013F  
                       ?_showSave 0070                           ___aldiv 1965                    ?_scaleiA10kPot 0167  
                 __size_of___ftge 003C                           ___awdiv 26E9                   __size_of___lmul 0030  
                         ___ftadd 125B                           ___ftdiv 1D3D                           ___ftneg 2F79  
                      _knob_1_pos 01AA                        _knob_2_pos 01AC                   __size_of___wmul 001C  
                         ___ftmul 1E91                        _knob_3_pos 01AE                           ___ftsub 2144  
                         ___fttol 1A6C                        _knob_4_pos 01B0                        _knob_5_pos 01B2  
               _switchTap_pressed 016C                        ??___altoft 0132              _setExpressionDisplay 2FCE  
          ?_updateModulationArray 0070            __end_of_FLASH_ReadWord 20AE                   __size_of_modSaw 01AA  
                 __size_of_modSin 01AC                        ??___awtoft 00AB                        ??___ftpack 00A5  
                 __size_of_modTri 01FB                 __end_of_eval_poly 2800                InitializeTaps@itap 00A1  
                      ??___lltoft 00AC                           __ptext1 1814                           __ptext2 2233  
                         __ptext3 0C1D                           __ptext4 2022                           __ptext5 1965  
                         __ptext6 1170                           __ptext7 2008                           __ptext8 2359  
                         __ptext9 2FBA            ??_getSwitchBypassState 00A2                 __end_of_modSawRev 208E  
                       _T2CONbits 001C                  _adjust_sub_delay 01BC                      __size_of_map 008B  
                    __size_of_exp 0159                      __size_of_log 00D1                      __size_of_isr 02DD  
          ??_setSwitchBypassState 00B4                      __size_of_sin 01CF                      __size_of_pow 0116  
             __end_of_adc_convert 2FBA                      modTri@period 013A                 __end_of_modSquare 2359  
                 ??_scaleA100kPot 00F0                  ___aldiv@dividend 00A4                      modTri@tmpVal 013D  
                         _wait_ms 2201                           clrloop0 07F5              end_of_initialization 0359  
                         exp@sign 0154                        _modulation 2417                           init_ram 2F8C  
                      ??_init_adc 00A0                           initloop 2F8D                        ??_init_pwm 00A0  
    updateSwitchBypassState@state 00A0                _solidring_tactiles 23D7                     _longTap_timer 01B4  
                   _longTap_state 0055                     _longTap_start 016B                    ??_set_leds_top 00A4  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070                           pow@sign 0162  
               scaleA10kPot@input 0167           __end_of_setLongTapState 203C            i1set_leds_top@ledState 0072  
              ??_read_top_tactile 00B2                         _RCSTAbits 019D                        ??_showSave 00B7  
                ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 004A               ?_solidring_tactiles 0070  
                    __pstringtext 2800         FLASH_ReadWord@GIEBitValue 00A2             ?_setExpressionDisplay 0070  
            __size_of_update_mode 0038                   ?_FLASH_ReadWord 00A0                 _expressionChannel 01DE  
                       _PORTAbits 000C                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010                        _test_timer 0241                         _USARTInit 2499  
                       _TRISBbits 008D                         _TRISCbits 008E                         _TRISDbits 008F  
                       _TRISEbits 0090                         _TRISFbits 030C                         _TRISGbits 030D  
                       i1___aldiv 18E3           setFeedbackState@f_state 00A0              ??_solidring_tactiles 00B2  
     __end_of_ConfigureOscillator 2004                        map@out_max 00EA                        map@out_min 00E7  
     __size_of_updateSwitchBypass 00EB          __end_of_initSwitchBypass 2FA7                       _CCP1CONbits 0293  
                     ___ftdiv@exp 00DC          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
                       _TXSTAbits 019E              _switchBypass_pressed 01BA                       _CCP3CONbits 0313  
                     _CCP4CONbits 031A                       _CCP5CONbits 031E                       _CCP6CONbits 0613  
                 ??_scaleiA10kPot 00F0                       _CCP7CONbits 0616                       ___ftmul@exp 00B8  
              adc_convert@channel 00A3                       _CCP8CONbits 0619                       _CCP9CONbits 061C  
            set_leds_top@ledState 00A2                    __end_of___ftge 231C              __end_of_setPedalMode 20F4  
                  __end_of___lmul 2201                    __end_of___wmul 2072                      _double_timer 01A0  
                     _adc_convert 2FA7                    _switchTap_down 01C5                    __end_of_modSaw 1654  
                  __end_of_modSin 1800                    __end_of_modTri 1000                    modSawRev@angle 0145  
                      floor@expon 013D             i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F  
             start_initialization 02E3                        ?_USARTInit 00A0                        eval_poly@d 0137  
                      eval_poly@n 0139                        eval_poly@x 0134             _bottomTactile_pressed 01BD  
             _setDoublePressState 2359                        ldexp@value 013E                        ?i1___aldiv 0020  
                     __end_of_map 1C05                       __end_of_exp 14AA                       __end_of_log 1170  
                     __end_of_isr 02E1                       __end_of_sin 0A36                       __end_of_pow 07F4  
           __size_of_scaleA10kPot 0091                _adjusted_pot_value 0245                       ?_modulation 002E  
              scaleiA10kPot@input 0167                        frexp@value 00A0            __size_of_resetRingLEDs 001A  
            ?_setDoublePressState 00B8                  ?_setLongTapState 00A0                 ?_setPresetDisplay 0070  
                        ??___ftge 00A6                          ??___lmul 00A8            ??_setExpressionDisplay 00A4  
                        ??___wmul 00F0                ??_setPresetDisplay 00A4                       __pdataBANK0 0045  
                     __pdataBANK3 01C7                       __pdataBANK4 0262                          ??_modSaw 00F0  
                        ??_modSin 013A                i1___aldiv@dividend 0024                          ??_modTri 00F0  
                   _tap_iteration 01D7          __size_of_updateSwitchTap 01E8                 __size_of___altoft 004B  
       __size_of_setFeedbackState 001A                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                     __pbssBIGRAM 238E                      _scaleA10kPot 1C05                 __size_of___lltoft 002A  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0                       __pbssCOMMON 007D  
            __end_of_set_leds_top 278E                         ___latbits 0003    setExpressionDisplay@ledChannel 00A6  
              _switchBypass_state 0058                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                   __pcstackBANK2 0120                     __pcstackBANK3 01E1                     __pcstackBANK4 0259  
          __size_of_ring_tactiles 0050                    _expSwitchState 01DC                     _delay_counter 024F  
                i1___lmul@product 0078                  scaleiA10kPot@pwm 01E1          ?_updateSwitchBypassState 00A0  
                      sin@coeff_a 2839                        sin@coeff_b 2848                i1___aldiv@quotient 002A  
                  isr@tmpSubDelay 0043                          ?_InitApp 0070             ??_setDoublePressState 00BA  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                         _main$2806 0259  
                       _main$2807 025C                         _main$2808 025F           ??_updateModulationArray 0150  
                        ?___aldiv 00A0                 ??_set_leds_bottom 00A2                _currentBypassState 01DA  
                        ?___awdiv 0070                          ?___ftadd 00C1                          ?___ftdiv 00CE  
                        ?___ftneg 00BE                          ?___ftmul 00AE                          ?___ftsub 013F  
                        ?___fttol 0120                 __size_of_showSave 0014                _modulation_changed 01C1  
              _scaleA100kPot$2811 01E4                _scaleA100kPot$2812 01E7                     ?_calcSinArray 0070  
                     _blink_delay 01C7               __size_of_modulation 0041                     _resetRingLEDs 2FE6  
                     _blink_state 01D9                         _eval_poly 278E                       ??_USARTInit 00A2  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                     ??i1___aldiv 007C                          ?_wait_ms 00AC                         _modSawRev 2072  
             _read_bottom_tactile 25B6                    __size_of_floor 00A7                    __size_of_ldexp 0097  
                  __size_of_frexp 0040                         _modSquare 231C                    _presetModeCnst 01DF  
                  __size_of_trunc 0048               __end_of_init_timer0 1008               __end_of_init_timer2 2F79  
                       _mod_value 01B8                         _mod_timer 01A4                  ??_InitializeTaps 00A0  
                 ___aldiv@divisor 00A0                   ___aldiv@counter 00A9                    _presetSaveMode 0068  
                  ___wmul@product 0132                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 01D3  
                       clear_ram0 07F4                         _tap_timer 005D                         _tap_total 023D  
           __size_of_setPedalMode 0024                     set_leds_top@x 00A0                          _PIR1bits 0011  
                   _ring_tactiles 2699                  ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048                    ??_calcSinArray 0153         initSwitchBypass@initState 00B6  
                       map@in_max 00E4                         map@in_min 00E1                    ?_resetRingLEDs 0070  
                       _sub_timer 0059                        _ADCON0bits 009D                          i1___lmul 2172  
                      _ADCON1bits 009E          __size_of_set_subdivision 00BB                 ___wmul@multiplier 012E  
                set_subdivision@x 013F                  set_subdivision@y 0141         __size_of_read_top_tactile 004E  
                      ?_eval_poly 0134     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A  
                      ?_modSawRev 0145             __end_of_scaleA100kPot 1A6C                 ??_updateSwitchTap 00BC  
               ___lmul@multiplier 00A0                        ?_modSquare 0148                   modSquare@tmpVal 014E  
                    _setPedalMode 20D0                 _ReadSavedSettings 186D                 ?_initSwitchBypass 0070  
               ring_tactiles@iLed 00B3                    wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070  
                     _modSaw$2821 0134                       _modSaw$2822 0137                       _modSaw$2823 013A  
                  wait_ms@timemsl 00AE                         frexp@eptr 00A3       setSwitchBypassState@f_state 00B2  
                     _modSin$2819 013C                ??_initSwitchBypass 00B6                  __size_of_InitApp 0030  
                  ?_ring_tactiles 0070                         modSaw@mod 013D                       _mode1_state 01C0  
                   ??_update_mode 00A7                       _mode2_state 0067             ??_read_bottom_tactile 00B2  
                     _modTri$2820 0134               updateSwitchTap@iCnt 00C4               ??_ReadSavedSettings 00A4  
                      _APFCONbits 011D                  __size_of___aldiv 0082                  __size_of___awdiv 0051  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 00A0  
                __size_of___ftneg 0009                          ___altoft 2600                  __size_of___ftmul 00B4  
                __size_of___ftsub 002E                  __size_of___fttol 0087                          ___awtoft 20AE  
           __size_of_set_leds_top 0054                          ___ftpack 0802                          _map$2809 00ED  
                        ___lltoft 211A            _preset_programmning_on 01C3                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  modTri@inflection 0131                  set_leds_bottom@x 00A0  
                _setFeedbackState 2008                          _exp$2583 014F                          _exp$2827 014C  
                     _init_timer0 1001                       _init_timer2 2F70                _delay_time_changed 01DB  
      __end_of_updateSwitchBypass 125B                          __ptext10 23D7                          __ptext11 2699  
                        __ptext20 2072                          __ptext12 20D0                          __ptext21 14AA  
                        __ptext13 226B                          __ptext30 1008                          __ptext22 1F45  
                        __ptext14 2FCE                          __ptext31 211A                          __ptext23 2524  
                        __ptext15 2FE6                          __ptext40 2004                          __ptext32 264B  
                        __ptext24 1DE6                          __ptext16 0A36                          __ptext41 1AF3  
                        __ptext33 25B6                          __ptext25 1C05                          __ptext17 0E05  
                        __ptext50 1E91                          __ptext42 0867                          __ptext34 1B7A  
                        __ptext26 19E7                          __ptext18 231C                          __ptext51 2144  
                        __ptext43 1C96                          __ptext35 2F98                          __ptext27 06DE  
                        __ptext19 1654                          __ptext60 273A                          __ptext52 125B  
                        __ptext44 2397                          __ptext36 256C                          __ptext28 109F  
                        __ptext61 22A5                          __ptext53 2F79                          __ptext45 1A6C  
                        __ptext37 2201                          __ptext29 1351                          __ptext62 208E  
                        __ptext54 1D3D                          __ptext46 22E0                          __ptext38 21D1  
                        __ptext71 24DC                          __ptext63 20F4                          __ptext55 20AE  
                        __ptext47 2600                          __ptext39 0801                          __ptext72 2417  
                        __ptext64 21A1                          __ptext56 0802                          __ptext48 278E  
                        __ptext73 2172                          __ptext65 2458                          __ptext57 2FA7  
                        __ptext49 2056                          __ptext74 18E3                          __ptext66 2F70  
                        __ptext58 2499                          __ptext75 26E9                          __ptext67 1001  
                        __ptext59 186D                          __ptext68 2F82                          __ptext69 2000  
                        _sin$2826 014C         __end_of_ReadSavedSettings 18E3                  __size_of_wait_ms 0032  
     __size_of_solidring_tactiles 0040                          _ledState 0239                          _pow$2824 015C  
                        _pow$2825 015F                     _presetChannel 0057                      ??_modulation 0036  
                     _mod_counter 01B6                          _modArray 238E                        trunc@expon 013D  
                        _init_adc 2F82                     __size_of_main 0381                          _init_pwm 2458  
                        _sinArray 2482      __size_of_ConfigureOscillator 0004                      _set_leds_top 273A  
                        _showSave 2FBA                          _num_taps 0056                     calcSinArray@x 0157  
           __end_of_scaleiA10kPot 1E91                          int$flags 007E                   ??_resetRingLEDs 00A4  
                 i1set_leds_top@x 0070                    modSquare@angle 0148               __end_of_update_mode 226B  
                        exp@coeff 2800                          _symmetry 01D5               modSawRev@inflection 0148  
                        log@coeff 281E                __end_of_modulation 2458                calcSinArray@iAngle 015B  
                      _INTCONbits 000B                       ??_eval_poly 00F0         __size_of_setPresetDisplay 003A  
                     _tap_history 0220                       ??_modSawRev 014B                 ??_set_subdivision 0143  
                     ??_modSquare 00F0                calcSinArray@tmpVal 0158                          intlevel1 0000  
            __end_of_calcSinArray 1B7A                   _set_leds_bottom 22A5                        _PMCON1bits 0195  
                 ??_ring_tactiles 00B2                 __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 01C4  
                      _OSCCONbits 0099                      _preset_blink 01C2                    i1_set_leds_top 24DC  
  __size_of_updateModulationArray 01E7  __size_of_updateSwitchBypassState 0001     __end_of_updateModulationArray 0C1D  
   __size_of_setExpressionDisplay 0018                _scaleiA10kPot$2817 01E4                _scaleiA10kPot$2818 01E7  
        __size_of_setLongTapState 001A                  _read_top_tactile 264B                      ___aldiv@sign 00AA  
      __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 2397                      _CCP10CONbits 061F  
               _bottom_push_state 004D        setPresetDisplay@ledChannel 00A6            __end_ofi1_set_leds_top 2524  
