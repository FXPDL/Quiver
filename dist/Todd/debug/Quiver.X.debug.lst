

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jan 13 20:08:05 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x920,80
   111                           	dabs	1,0x8A0,80
   112                           	dabs	1,0x820,80
   113                           	dabs	1,0x7A0,80
   114                           	dabs	1,0x742,46
   115                           	dabs	1,0x720,34
   116                           	dabs	1,0x6A0,80
   117                           	dabs	1,0x620,80
   118                           	dabs	1,0x5BA,54
   119                           	dabs	1,0x2482,0,_sinArray
   120                           	dabs	1,0x238A,0,_modArray
   121                           	dabs	1,0x7E,2
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0110                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  011D                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  018F                     	;# 
   182  0190                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0194                     	;# 
   189  0195                     	;# 
   190  0196                     	;# 
   191  0197                     	;# 
   192  0199                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  020D                     	;# 
   216  020F                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0219                     	;# 
   234  021A                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021D                     	;# 
   238  021E                     	;# 
   239  021F                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  029F                     	;# 
   253  030C                     	;# 
   254  030D                     	;# 
   255  0311                     	;# 
   256  0311                     	;# 
   257  0312                     	;# 
   258  0313                     	;# 
   259  0318                     	;# 
   260  0318                     	;# 
   261  0319                     	;# 
   262  031A                     	;# 
   263  031C                     	;# 
   264  031C                     	;# 
   265  031D                     	;# 
   266  031E                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  040C                     	;# 
   273  040D                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  048D                     	;# 
   291  0491                     	;# 
   292  0491                     	;# 
   293  0492                     	;# 
   294  0492                     	;# 
   295  0493                     	;# 
   296  0493                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0494                     	;# 
   300  0495                     	;# 
   301  0495                     	;# 
   302  0496                     	;# 
   303  0496                     	;# 
   304  0497                     	;# 
   305  0497                     	;# 
   306  0595                     	;# 
   307  0596                     	;# 
   308  0597                     	;# 
   309  059C                     	;# 
   310  059D                     	;# 
   311  059E                     	;# 
   312  0611                     	;# 
   313  0611                     	;# 
   314  0612                     	;# 
   315  0613                     	;# 
   316  0614                     	;# 
   317  0614                     	;# 
   318  0615                     	;# 
   319  0616                     	;# 
   320  0617                     	;# 
   321  0617                     	;# 
   322  0618                     	;# 
   323  0619                     	;# 
   324  061A                     	;# 
   325  061A                     	;# 
   326  061B                     	;# 
   327  061C                     	;# 
   328  061D                     	;# 
   329  061D                     	;# 
   330  061E                     	;# 
   331  061F                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  008F                     	;# 
   377  0090                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0093                     	;# 
   381  0094                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0110                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  011D                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  018F                     	;# 
   403  0190                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  0197                     	;# 
   413  0199                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  020D                     	;# 
   437  020F                     	;# 
   438  0210                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0219                     	;# 
   455  021A                     	;# 
   456  021B                     	;# 
   457  021C                     	;# 
   458  021D                     	;# 
   459  021E                     	;# 
   460  021F                     	;# 
   461  028C                     	;# 
   462  028D                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  029D                     	;# 
   472  029E                     	;# 
   473  029F                     	;# 
   474  030C                     	;# 
   475  030D                     	;# 
   476  0311                     	;# 
   477  0311                     	;# 
   478  0312                     	;# 
   479  0313                     	;# 
   480  0318                     	;# 
   481  0318                     	;# 
   482  0319                     	;# 
   483  031A                     	;# 
   484  031C                     	;# 
   485  031C                     	;# 
   486  031D                     	;# 
   487  031E                     	;# 
   488  038C                     	;# 
   489  038D                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  040C                     	;# 
   494  040D                     	;# 
   495  0411                     	;# 
   496  0411                     	;# 
   497  0412                     	;# 
   498  0413                     	;# 
   499  0414                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  0418                     	;# 
   504  0418                     	;# 
   505  0419                     	;# 
   506  041A                     	;# 
   507  041B                     	;# 
   508  041C                     	;# 
   509  041D                     	;# 
   510  041E                     	;# 
   511  048D                     	;# 
   512  0491                     	;# 
   513  0491                     	;# 
   514  0492                     	;# 
   515  0492                     	;# 
   516  0493                     	;# 
   517  0493                     	;# 
   518  0493                     	;# 
   519  0494                     	;# 
   520  0494                     	;# 
   521  0495                     	;# 
   522  0495                     	;# 
   523  0496                     	;# 
   524  0496                     	;# 
   525  0497                     	;# 
   526  0497                     	;# 
   527  0595                     	;# 
   528  0596                     	;# 
   529  0597                     	;# 
   530  059C                     	;# 
   531  059D                     	;# 
   532  059E                     	;# 
   533  0611                     	;# 
   534  0611                     	;# 
   535  0612                     	;# 
   536  0613                     	;# 
   537  0614                     	;# 
   538  0614                     	;# 
   539  0615                     	;# 
   540  0616                     	;# 
   541  0617                     	;# 
   542  0617                     	;# 
   543  0618                     	;# 
   544  0619                     	;# 
   545  061A                     	;# 
   546  061A                     	;# 
   547  061B                     	;# 
   548  061C                     	;# 
   549  061D                     	;# 
   550  061D                     	;# 
   551  061E                     	;# 
   552  061F                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  008F                     	;# 
   598  0090                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  010F                     	;# 
   617  0110                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018D                     	;# 
   623  018F                     	;# 
   624  0190                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0197                     	;# 
   634  0199                     	;# 
   635  0199                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019A                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019D                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019E                     	;# 
   653  019E                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  020F                     	;# 
   659  0210                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  028C                     	;# 
   683  028D                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  029D                     	;# 
   693  029E                     	;# 
   694  029F                     	;# 
   695  030C                     	;# 
   696  030D                     	;# 
   697  0311                     	;# 
   698  0311                     	;# 
   699  0312                     	;# 
   700  0313                     	;# 
   701  0318                     	;# 
   702  0318                     	;# 
   703  0319                     	;# 
   704  031A                     	;# 
   705  031C                     	;# 
   706  031C                     	;# 
   707  031D                     	;# 
   708  031E                     	;# 
   709  038C                     	;# 
   710  038D                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  040C                     	;# 
   715  040D                     	;# 
   716  0411                     	;# 
   717  0411                     	;# 
   718  0412                     	;# 
   719  0413                     	;# 
   720  0414                     	;# 
   721  0415                     	;# 
   722  0416                     	;# 
   723  0417                     	;# 
   724  0418                     	;# 
   725  0418                     	;# 
   726  0419                     	;# 
   727  041A                     	;# 
   728  041B                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  048D                     	;# 
   733  0491                     	;# 
   734  0491                     	;# 
   735  0492                     	;# 
   736  0492                     	;# 
   737  0493                     	;# 
   738  0493                     	;# 
   739  0493                     	;# 
   740  0494                     	;# 
   741  0494                     	;# 
   742  0495                     	;# 
   743  0495                     	;# 
   744  0496                     	;# 
   745  0496                     	;# 
   746  0497                     	;# 
   747  0497                     	;# 
   748  0595                     	;# 
   749  0596                     	;# 
   750  0597                     	;# 
   751  059C                     	;# 
   752  059D                     	;# 
   753  059E                     	;# 
   754  0611                     	;# 
   755  0611                     	;# 
   756  0612                     	;# 
   757  0613                     	;# 
   758  0614                     	;# 
   759  0614                     	;# 
   760  0615                     	;# 
   761  0616                     	;# 
   762  0617                     	;# 
   763  0617                     	;# 
   764  0618                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061A                     	;# 
   768  061B                     	;# 
   769  061C                     	;# 
   770  061D                     	;# 
   771  061D                     	;# 
   772  061E                     	;# 
   773  061F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  010C                     	;# 
   835  010D                     	;# 
   836  010E                     	;# 
   837  010F                     	;# 
   838  0110                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  011D                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018F                     	;# 
   845  0190                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0197                     	;# 
   855  0199                     	;# 
   856  0199                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019A                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019D                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019E                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  020F                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0219                     	;# 
   897  021A                     	;# 
   898  021B                     	;# 
   899  021C                     	;# 
   900  021D                     	;# 
   901  021E                     	;# 
   902  021F                     	;# 
   903  028C                     	;# 
   904  028D                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  029D                     	;# 
   914  029E                     	;# 
   915  029F                     	;# 
   916  030C                     	;# 
   917  030D                     	;# 
   918  0311                     	;# 
   919  0311                     	;# 
   920  0312                     	;# 
   921  0313                     	;# 
   922  0318                     	;# 
   923  0318                     	;# 
   924  0319                     	;# 
   925  031A                     	;# 
   926  031C                     	;# 
   927  031C                     	;# 
   928  031D                     	;# 
   929  031E                     	;# 
   930  038C                     	;# 
   931  038D                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  040C                     	;# 
   936  040D                     	;# 
   937  0411                     	;# 
   938  0411                     	;# 
   939  0412                     	;# 
   940  0413                     	;# 
   941  0414                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  0418                     	;# 
   946  0418                     	;# 
   947  0419                     	;# 
   948  041A                     	;# 
   949  041B                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  048D                     	;# 
   954  0491                     	;# 
   955  0491                     	;# 
   956  0492                     	;# 
   957  0492                     	;# 
   958  0493                     	;# 
   959  0493                     	;# 
   960  0493                     	;# 
   961  0494                     	;# 
   962  0494                     	;# 
   963  0495                     	;# 
   964  0495                     	;# 
   965  0496                     	;# 
   966  0496                     	;# 
   967  0497                     	;# 
   968  0497                     	;# 
   969  0595                     	;# 
   970  0596                     	;# 
   971  0597                     	;# 
   972  059C                     	;# 
   973  059D                     	;# 
   974  059E                     	;# 
   975  0611                     	;# 
   976  0611                     	;# 
   977  0612                     	;# 
   978  0613                     	;# 
   979  0614                     	;# 
   980  0614                     	;# 
   981  0615                     	;# 
   982  0616                     	;# 
   983  0617                     	;# 
   984  0617                     	;# 
   985  0618                     	;# 
   986  0619                     	;# 
   987  061A                     	;# 
   988  061A                     	;# 
   989  061B                     	;# 
   990  061C                     	;# 
   991  061D                     	;# 
   992  061D                     	;# 
   993  061E                     	;# 
   994  061F                     	;# 
   995  0FE4                     	;# 
   996  0FE5                     	;# 
   997  0FE6                     	;# 
   998  0FE7                     	;# 
   999  0FE8                     	;# 
  1000  0FE9                     	;# 
  1001  0FEA                     	;# 
  1002  0FEB                     	;# 
  1003  0FED                     	;# 
  1004  0FEE                     	;# 
  1005  0FEF                     	;# 
  1006  0000                     	;# 
  1007  0001                     	;# 
  1008  0002                     	;# 
  1009  0003                     	;# 
  1010  0004                     	;# 
  1011  0005                     	;# 
  1012  0006                     	;# 
  1013  0007                     	;# 
  1014  0008                     	;# 
  1015  0009                     	;# 
  1016  000A                     	;# 
  1017  000B                     	;# 
  1018  000C                     	;# 
  1019  000D                     	;# 
  1020  000E                     	;# 
  1021  000F                     	;# 
  1022  0010                     	;# 
  1023  0011                     	;# 
  1024  0012                     	;# 
  1025  0013                     	;# 
  1026  0014                     	;# 
  1027  0015                     	;# 
  1028  0016                     	;# 
  1029  0016                     	;# 
  1030  0017                     	;# 
  1031  0018                     	;# 
  1032  0019                     	;# 
  1033  001A                     	;# 
  1034  001B                     	;# 
  1035  001C                     	;# 
  1036  008C                     	;# 
  1037  008D                     	;# 
  1038  008E                     	;# 
  1039  008F                     	;# 
  1040  0090                     	;# 
  1041  0091                     	;# 
  1042  0092                     	;# 
  1043  0093                     	;# 
  1044  0094                     	;# 
  1045  0095                     	;# 
  1046  0096                     	;# 
  1047  0097                     	;# 
  1048  0099                     	;# 
  1049  009A                     	;# 
  1050  009B                     	;# 
  1051  009B                     	;# 
  1052  009C                     	;# 
  1053  009D                     	;# 
  1054  009E                     	;# 
  1055  010C                     	;# 
  1056  010D                     	;# 
  1057  010E                     	;# 
  1058  010F                     	;# 
  1059  0110                     	;# 
  1060  0116                     	;# 
  1061  0117                     	;# 
  1062  011D                     	;# 
  1063  018C                     	;# 
  1064  018D                     	;# 
  1065  018F                     	;# 
  1066  0190                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0194                     	;# 
  1073  0195                     	;# 
  1074  0196                     	;# 
  1075  0197                     	;# 
  1076  0199                     	;# 
  1077  0199                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019A                     	;# 
  1081  019A                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019D                     	;# 
  1092  019D                     	;# 
  1093  019E                     	;# 
  1094  019E                     	;# 
  1095  019E                     	;# 
  1096  019F                     	;# 
  1097  019F                     	;# 
  1098  019F                     	;# 
  1099  020D                     	;# 
  1100  020F                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0219                     	;# 
  1118  021A                     	;# 
  1119  021B                     	;# 
  1120  021C                     	;# 
  1121  021D                     	;# 
  1122  021E                     	;# 
  1123  021F                     	;# 
  1124  028C                     	;# 
  1125  028D                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0298                     	;# 
  1131  0298                     	;# 
  1132  0299                     	;# 
  1133  029A                     	;# 
  1134  029D                     	;# 
  1135  029E                     	;# 
  1136  029F                     	;# 
  1137  030C                     	;# 
  1138  030D                     	;# 
  1139  0311                     	;# 
  1140  0311                     	;# 
  1141  0312                     	;# 
  1142  0313                     	;# 
  1143  0318                     	;# 
  1144  0318                     	;# 
  1145  0319                     	;# 
  1146  031A                     	;# 
  1147  031C                     	;# 
  1148  031C                     	;# 
  1149  031D                     	;# 
  1150  031E                     	;# 
  1151  038C                     	;# 
  1152  038D                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  040C                     	;# 
  1157  040D                     	;# 
  1158  0411                     	;# 
  1159  0411                     	;# 
  1160  0412                     	;# 
  1161  0413                     	;# 
  1162  0414                     	;# 
  1163  0415                     	;# 
  1164  0416                     	;# 
  1165  0417                     	;# 
  1166  0418                     	;# 
  1167  0418                     	;# 
  1168  0419                     	;# 
  1169  041A                     	;# 
  1170  041B                     	;# 
  1171  041C                     	;# 
  1172  041D                     	;# 
  1173  041E                     	;# 
  1174  048D                     	;# 
  1175  0491                     	;# 
  1176  0491                     	;# 
  1177  0492                     	;# 
  1178  0492                     	;# 
  1179  0493                     	;# 
  1180  0493                     	;# 
  1181  0493                     	;# 
  1182  0494                     	;# 
  1183  0494                     	;# 
  1184  0495                     	;# 
  1185  0495                     	;# 
  1186  0496                     	;# 
  1187  0496                     	;# 
  1188  0497                     	;# 
  1189  0497                     	;# 
  1190  0595                     	;# 
  1191  0596                     	;# 
  1192  0597                     	;# 
  1193  059C                     	;# 
  1194  059D                     	;# 
  1195  059E                     	;# 
  1196  0611                     	;# 
  1197  0611                     	;# 
  1198  0612                     	;# 
  1199  0613                     	;# 
  1200  0614                     	;# 
  1201  0614                     	;# 
  1202  0615                     	;# 
  1203  0616                     	;# 
  1204  0617                     	;# 
  1205  0617                     	;# 
  1206  0618                     	;# 
  1207  0619                     	;# 
  1208  061A                     	;# 
  1209  061A                     	;# 
  1210  061B                     	;# 
  1211  061C                     	;# 
  1212  061D                     	;# 
  1213  061D                     	;# 
  1214  061E                     	;# 
  1215  061F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  000F                     	;# 
  1243  0010                     	;# 
  1244  0011                     	;# 
  1245  0012                     	;# 
  1246  0013                     	;# 
  1247  0014                     	;# 
  1248  0015                     	;# 
  1249  0016                     	;# 
  1250  0016                     	;# 
  1251  0017                     	;# 
  1252  0018                     	;# 
  1253  0019                     	;# 
  1254  001A                     	;# 
  1255  001B                     	;# 
  1256  001C                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  008F                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0095                     	;# 
  1267  0096                     	;# 
  1268  0097                     	;# 
  1269  0099                     	;# 
  1270  009A                     	;# 
  1271  009B                     	;# 
  1272  009B                     	;# 
  1273  009C                     	;# 
  1274  009D                     	;# 
  1275  009E                     	;# 
  1276  010C                     	;# 
  1277  010D                     	;# 
  1278  010E                     	;# 
  1279  010F                     	;# 
  1280  0110                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  011D                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018F                     	;# 
  1287  0190                     	;# 
  1288  0191                     	;# 
  1289  0191                     	;# 
  1290  0192                     	;# 
  1291  0193                     	;# 
  1292  0193                     	;# 
  1293  0194                     	;# 
  1294  0195                     	;# 
  1295  0196                     	;# 
  1296  0197                     	;# 
  1297  0199                     	;# 
  1298  0199                     	;# 
  1299  0199                     	;# 
  1300  019A                     	;# 
  1301  019A                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019D                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019E                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  020F                     	;# 
  1322  0210                     	;# 
  1323  0211                     	;# 
  1324  0211                     	;# 
  1325  0212                     	;# 
  1326  0212                     	;# 
  1327  0213                     	;# 
  1328  0213                     	;# 
  1329  0214                     	;# 
  1330  0214                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0216                     	;# 
  1335  0216                     	;# 
  1336  0217                     	;# 
  1337  0217                     	;# 
  1338  0219                     	;# 
  1339  021A                     	;# 
  1340  021B                     	;# 
  1341  021C                     	;# 
  1342  021D                     	;# 
  1343  021E                     	;# 
  1344  021F                     	;# 
  1345  028C                     	;# 
  1346  028D                     	;# 
  1347  0291                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0293                     	;# 
  1351  0298                     	;# 
  1352  0298                     	;# 
  1353  0299                     	;# 
  1354  029A                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  029F                     	;# 
  1358  030C                     	;# 
  1359  030D                     	;# 
  1360  0311                     	;# 
  1361  0311                     	;# 
  1362  0312                     	;# 
  1363  0313                     	;# 
  1364  0318                     	;# 
  1365  0318                     	;# 
  1366  0319                     	;# 
  1367  031A                     	;# 
  1368  031C                     	;# 
  1369  031C                     	;# 
  1370  031D                     	;# 
  1371  031E                     	;# 
  1372  038C                     	;# 
  1373  038D                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  040C                     	;# 
  1378  040D                     	;# 
  1379  0411                     	;# 
  1380  0411                     	;# 
  1381  0412                     	;# 
  1382  0413                     	;# 
  1383  0414                     	;# 
  1384  0415                     	;# 
  1385  0416                     	;# 
  1386  0417                     	;# 
  1387  0418                     	;# 
  1388  0418                     	;# 
  1389  0419                     	;# 
  1390  041A                     	;# 
  1391  041B                     	;# 
  1392  041C                     	;# 
  1393  041D                     	;# 
  1394  041E                     	;# 
  1395  048D                     	;# 
  1396  0491                     	;# 
  1397  0491                     	;# 
  1398  0492                     	;# 
  1399  0492                     	;# 
  1400  0493                     	;# 
  1401  0493                     	;# 
  1402  0493                     	;# 
  1403  0494                     	;# 
  1404  0494                     	;# 
  1405  0495                     	;# 
  1406  0495                     	;# 
  1407  0496                     	;# 
  1408  0496                     	;# 
  1409  0497                     	;# 
  1410  0497                     	;# 
  1411  0595                     	;# 
  1412  0596                     	;# 
  1413  0597                     	;# 
  1414  059C                     	;# 
  1415  059D                     	;# 
  1416  059E                     	;# 
  1417  0611                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061D                     	;# 
  1434  061D                     	;# 
  1435  061E                     	;# 
  1436  061F                     	;# 
  1437  0FE4                     	;# 
  1438  0FE5                     	;# 
  1439  0FE6                     	;# 
  1440  0FE7                     	;# 
  1441  0FE8                     	;# 
  1442  0FE9                     	;# 
  1443  0FEA                     	;# 
  1444  0FEB                     	;# 
  1445  0FED                     	;# 
  1446  0FEE                     	;# 
  1447  0FEF                     	;# 
  1448  0000                     	;# 
  1449  0001                     	;# 
  1450  0002                     	;# 
  1451  0003                     	;# 
  1452  0004                     	;# 
  1453  0005                     	;# 
  1454  0006                     	;# 
  1455  0007                     	;# 
  1456  0008                     	;# 
  1457  0009                     	;# 
  1458  000A                     	;# 
  1459  000B                     	;# 
  1460  000C                     	;# 
  1461  000D                     	;# 
  1462  000E                     	;# 
  1463  000F                     	;# 
  1464  0010                     	;# 
  1465  0011                     	;# 
  1466  0012                     	;# 
  1467  0013                     	;# 
  1468  0014                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  008C                     	;# 
  1479  008D                     	;# 
  1480  008E                     	;# 
  1481  008F                     	;# 
  1482  0090                     	;# 
  1483  0091                     	;# 
  1484  0092                     	;# 
  1485  0093                     	;# 
  1486  0094                     	;# 
  1487  0095                     	;# 
  1488  0096                     	;# 
  1489  0097                     	;# 
  1490  0099                     	;# 
  1491  009A                     	;# 
  1492  009B                     	;# 
  1493  009B                     	;# 
  1494  009C                     	;# 
  1495  009D                     	;# 
  1496  009E                     	;# 
  1497  010C                     	;# 
  1498  010D                     	;# 
  1499  010E                     	;# 
  1500  010F                     	;# 
  1501  0110                     	;# 
  1502  0116                     	;# 
  1503  0117                     	;# 
  1504  011D                     	;# 
  1505  018C                     	;# 
  1506  018D                     	;# 
  1507  018F                     	;# 
  1508  0190                     	;# 
  1509  0191                     	;# 
  1510  0191                     	;# 
  1511  0192                     	;# 
  1512  0193                     	;# 
  1513  0193                     	;# 
  1514  0194                     	;# 
  1515  0195                     	;# 
  1516  0196                     	;# 
  1517  0197                     	;# 
  1518  0199                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019B                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019C                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019D                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019F                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  020D                     	;# 
  1542  020F                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0219                     	;# 
  1560  021A                     	;# 
  1561  021B                     	;# 
  1562  021C                     	;# 
  1563  021D                     	;# 
  1564  021E                     	;# 
  1565  021F                     	;# 
  1566  028C                     	;# 
  1567  028D                     	;# 
  1568  0291                     	;# 
  1569  0291                     	;# 
  1570  0292                     	;# 
  1571  0293                     	;# 
  1572  0298                     	;# 
  1573  0298                     	;# 
  1574  0299                     	;# 
  1575  029A                     	;# 
  1576  029D                     	;# 
  1577  029E                     	;# 
  1578  029F                     	;# 
  1579  030C                     	;# 
  1580  030D                     	;# 
  1581  0311                     	;# 
  1582  0311                     	;# 
  1583  0312                     	;# 
  1584  0313                     	;# 
  1585  0318                     	;# 
  1586  0318                     	;# 
  1587  0319                     	;# 
  1588  031A                     	;# 
  1589  031C                     	;# 
  1590  031C                     	;# 
  1591  031D                     	;# 
  1592  031E                     	;# 
  1593  038C                     	;# 
  1594  038D                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  040C                     	;# 
  1599  040D                     	;# 
  1600  0411                     	;# 
  1601  0411                     	;# 
  1602  0412                     	;# 
  1603  0413                     	;# 
  1604  0414                     	;# 
  1605  0415                     	;# 
  1606  0416                     	;# 
  1607  0417                     	;# 
  1608  0418                     	;# 
  1609  0418                     	;# 
  1610  0419                     	;# 
  1611  041A                     	;# 
  1612  041B                     	;# 
  1613  041C                     	;# 
  1614  041D                     	;# 
  1615  041E                     	;# 
  1616  048D                     	;# 
  1617  0491                     	;# 
  1618  0491                     	;# 
  1619  0492                     	;# 
  1620  0492                     	;# 
  1621  0493                     	;# 
  1622  0493                     	;# 
  1623  0493                     	;# 
  1624  0494                     	;# 
  1625  0494                     	;# 
  1626  0495                     	;# 
  1627  0495                     	;# 
  1628  0496                     	;# 
  1629  0496                     	;# 
  1630  0497                     	;# 
  1631  0497                     	;# 
  1632  0595                     	;# 
  1633  0596                     	;# 
  1634  0597                     	;# 
  1635  059C                     	;# 
  1636  059D                     	;# 
  1637  059E                     	;# 
  1638  0611                     	;# 
  1639  0611                     	;# 
  1640  0612                     	;# 
  1641  0613                     	;# 
  1642  0614                     	;# 
  1643  0614                     	;# 
  1644  0615                     	;# 
  1645  0616                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  061D                     	;# 
  1655  061D                     	;# 
  1656  061E                     	;# 
  1657  061F                     	;# 
  1658  0FE4                     	;# 
  1659  0FE5                     	;# 
  1660  0FE6                     	;# 
  1661  0FE7                     	;# 
  1662  0FE8                     	;# 
  1663  0FE9                     	;# 
  1664  0FEA                     	;# 
  1665  0FEB                     	;# 
  1666  0FED                     	;# 
  1667  0FEE                     	;# 
  1668  0FEF                     	;# 
  1669  0000                     	;# 
  1670  0001                     	;# 
  1671  0002                     	;# 
  1672  0003                     	;# 
  1673  0004                     	;# 
  1674  0005                     	;# 
  1675  0006                     	;# 
  1676  0007                     	;# 
  1677  0008                     	;# 
  1678  0009                     	;# 
  1679  000A                     	;# 
  1680  000B                     	;# 
  1681  000C                     	;# 
  1682  000D                     	;# 
  1683  000E                     	;# 
  1684  000F                     	;# 
  1685  0010                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0014                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  001A                     	;# 
  1697  001B                     	;# 
  1698  001C                     	;# 
  1699  008C                     	;# 
  1700  008D                     	;# 
  1701  008E                     	;# 
  1702  008F                     	;# 
  1703  0090                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0093                     	;# 
  1707  0094                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0099                     	;# 
  1712  009A                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  010F                     	;# 
  1722  0110                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  011D                     	;# 
  1726  018C                     	;# 
  1727  018D                     	;# 
  1728  018F                     	;# 
  1729  0190                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0197                     	;# 
  1739  0199                     	;# 
  1740  0199                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019A                     	;# 
  1744  019A                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019C                     	;# 
  1752  019C                     	;# 
  1753  019D                     	;# 
  1754  019D                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019E                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028D                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0298                     	;# 
  1794  0298                     	;# 
  1795  0299                     	;# 
  1796  029A                     	;# 
  1797  029D                     	;# 
  1798  029E                     	;# 
  1799  029F                     	;# 
  1800  030C                     	;# 
  1801  030D                     	;# 
  1802  0311                     	;# 
  1803  0311                     	;# 
  1804  0312                     	;# 
  1805  0313                     	;# 
  1806  0318                     	;# 
  1807  0318                     	;# 
  1808  0319                     	;# 
  1809  031A                     	;# 
  1810  031C                     	;# 
  1811  031C                     	;# 
  1812  031D                     	;# 
  1813  031E                     	;# 
  1814  038C                     	;# 
  1815  038D                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  040C                     	;# 
  1820  040D                     	;# 
  1821  0411                     	;# 
  1822  0411                     	;# 
  1823  0412                     	;# 
  1824  0413                     	;# 
  1825  0414                     	;# 
  1826  0415                     	;# 
  1827  0416                     	;# 
  1828  0417                     	;# 
  1829  0418                     	;# 
  1830  0418                     	;# 
  1831  0419                     	;# 
  1832  041A                     	;# 
  1833  041B                     	;# 
  1834  041C                     	;# 
  1835  041D                     	;# 
  1836  041E                     	;# 
  1837  048D                     	;# 
  1838  0491                     	;# 
  1839  0491                     	;# 
  1840  0492                     	;# 
  1841  0492                     	;# 
  1842  0493                     	;# 
  1843  0493                     	;# 
  1844  0493                     	;# 
  1845  0494                     	;# 
  1846  0494                     	;# 
  1847  0495                     	;# 
  1848  0495                     	;# 
  1849  0496                     	;# 
  1850  0496                     	;# 
  1851  0497                     	;# 
  1852  0497                     	;# 
  1853  0595                     	;# 
  1854  0596                     	;# 
  1855  0597                     	;# 
  1856  059C                     	;# 
  1857  059D                     	;# 
  1858  059E                     	;# 
  1859  0611                     	;# 
  1860  0611                     	;# 
  1861  0612                     	;# 
  1862  0613                     	;# 
  1863  0614                     	;# 
  1864  0614                     	;# 
  1865  0615                     	;# 
  1866  0616                     	;# 
  1867  0617                     	;# 
  1868  0617                     	;# 
  1869  0618                     	;# 
  1870  0619                     	;# 
  1871  061A                     	;# 
  1872  061A                     	;# 
  1873  061B                     	;# 
  1874  061C                     	;# 
  1875  061D                     	;# 
  1876  061D                     	;# 
  1877  061E                     	;# 
  1878  061F                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  000F                     	;# 
  1906  0010                     	;# 
  1907  0011                     	;# 
  1908  0012                     	;# 
  1909  0013                     	;# 
  1910  0014                     	;# 
  1911  0015                     	;# 
  1912  0016                     	;# 
  1913  0016                     	;# 
  1914  0017                     	;# 
  1915  0018                     	;# 
  1916  0019                     	;# 
  1917  001A                     	;# 
  1918  001B                     	;# 
  1919  001C                     	;# 
  1920  008C                     	;# 
  1921  008D                     	;# 
  1922  008E                     	;# 
  1923  008F                     	;# 
  1924  0090                     	;# 
  1925  0091                     	;# 
  1926  0092                     	;# 
  1927  0093                     	;# 
  1928  0094                     	;# 
  1929  0095                     	;# 
  1930  0096                     	;# 
  1931  0097                     	;# 
  1932  0099                     	;# 
  1933  009A                     	;# 
  1934  009B                     	;# 
  1935  009B                     	;# 
  1936  009C                     	;# 
  1937  009D                     	;# 
  1938  009E                     	;# 
  1939  010C                     	;# 
  1940  010D                     	;# 
  1941  010E                     	;# 
  1942  010F                     	;# 
  1943  0110                     	;# 
  1944  0116                     	;# 
  1945  0117                     	;# 
  1946  011D                     	;# 
  1947  018C                     	;# 
  1948  018D                     	;# 
  1949  018F                     	;# 
  1950  0190                     	;# 
  1951  0191                     	;# 
  1952  0191                     	;# 
  1953  0192                     	;# 
  1954  0193                     	;# 
  1955  0193                     	;# 
  1956  0194                     	;# 
  1957  0195                     	;# 
  1958  0196                     	;# 
  1959  0197                     	;# 
  1960  0199                     	;# 
  1961  0199                     	;# 
  1962  0199                     	;# 
  1963  019A                     	;# 
  1964  019A                     	;# 
  1965  019A                     	;# 
  1966  019B                     	;# 
  1967  019B                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019C                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019D                     	;# 
  1977  019E                     	;# 
  1978  019E                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  019F                     	;# 
  1982  019F                     	;# 
  1983  020D                     	;# 
  1984  020F                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0219                     	;# 
  2002  021A                     	;# 
  2003  021B                     	;# 
  2004  021C                     	;# 
  2005  021D                     	;# 
  2006  021E                     	;# 
  2007  021F                     	;# 
  2008  028C                     	;# 
  2009  028D                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  029D                     	;# 
  2019  029E                     	;# 
  2020  029F                     	;# 
  2021  030C                     	;# 
  2022  030D                     	;# 
  2023  0311                     	;# 
  2024  0311                     	;# 
  2025  0312                     	;# 
  2026  0313                     	;# 
  2027  0318                     	;# 
  2028  0318                     	;# 
  2029  0319                     	;# 
  2030  031A                     	;# 
  2031  031C                     	;# 
  2032  031C                     	;# 
  2033  031D                     	;# 
  2034  031E                     	;# 
  2035  038C                     	;# 
  2036  038D                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  040C                     	;# 
  2041  040D                     	;# 
  2042  0411                     	;# 
  2043  0411                     	;# 
  2044  0412                     	;# 
  2045  0413                     	;# 
  2046  0414                     	;# 
  2047  0415                     	;# 
  2048  0416                     	;# 
  2049  0417                     	;# 
  2050  0418                     	;# 
  2051  0418                     	;# 
  2052  0419                     	;# 
  2053  041A                     	;# 
  2054  041B                     	;# 
  2055  041C                     	;# 
  2056  041D                     	;# 
  2057  041E                     	;# 
  2058  048D                     	;# 
  2059  0491                     	;# 
  2060  0491                     	;# 
  2061  0492                     	;# 
  2062  0492                     	;# 
  2063  0493                     	;# 
  2064  0493                     	;# 
  2065  0493                     	;# 
  2066  0494                     	;# 
  2067  0494                     	;# 
  2068  0495                     	;# 
  2069  0495                     	;# 
  2070  0496                     	;# 
  2071  0496                     	;# 
  2072  0497                     	;# 
  2073  0497                     	;# 
  2074  0595                     	;# 
  2075  0596                     	;# 
  2076  0597                     	;# 
  2077  059C                     	;# 
  2078  059D                     	;# 
  2079  059E                     	;# 
  2080  0611                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  0614                     	;# 
  2086  0615                     	;# 
  2087  0616                     	;# 
  2088  0617                     	;# 
  2089  0617                     	;# 
  2090  0618                     	;# 
  2091  0619                     	;# 
  2092  061A                     	;# 
  2093  061A                     	;# 
  2094  061B                     	;# 
  2095  061C                     	;# 
  2096  061D                     	;# 
  2097  061D                     	;# 
  2098  061E                     	;# 
  2099  061F                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111  0000                     	;# 
  2112  0001                     	;# 
  2113  0002                     	;# 
  2114  0003                     	;# 
  2115  0004                     	;# 
  2116  0005                     	;# 
  2117  0006                     	;# 
  2118  0007                     	;# 
  2119  0008                     	;# 
  2120  0009                     	;# 
  2121  000A                     	;# 
  2122  000B                     	;# 
  2123  000C                     	;# 
  2124  000D                     	;# 
  2125  000E                     	;# 
  2126  000F                     	;# 
  2127  0010                     	;# 
  2128  0011                     	;# 
  2129  0012                     	;# 
  2130  0013                     	;# 
  2131  0014                     	;# 
  2132  0015                     	;# 
  2133  0016                     	;# 
  2134  0016                     	;# 
  2135  0017                     	;# 
  2136  0018                     	;# 
  2137  0019                     	;# 
  2138  001A                     	;# 
  2139  001B                     	;# 
  2140  001C                     	;# 
  2141  008C                     	;# 
  2142  008D                     	;# 
  2143  008E                     	;# 
  2144  008F                     	;# 
  2145  0090                     	;# 
  2146  0091                     	;# 
  2147  0092                     	;# 
  2148  0093                     	;# 
  2149  0094                     	;# 
  2150  0095                     	;# 
  2151  0096                     	;# 
  2152  0097                     	;# 
  2153  0099                     	;# 
  2154  009A                     	;# 
  2155  009B                     	;# 
  2156  009B                     	;# 
  2157  009C                     	;# 
  2158  009D                     	;# 
  2159  009E                     	;# 
  2160  010C                     	;# 
  2161  010D                     	;# 
  2162  010E                     	;# 
  2163  010F                     	;# 
  2164  0110                     	;# 
  2165  0116                     	;# 
  2166  0117                     	;# 
  2167  011D                     	;# 
  2168  018C                     	;# 
  2169  018D                     	;# 
  2170  018F                     	;# 
  2171  0190                     	;# 
  2172  0191                     	;# 
  2173  0191                     	;# 
  2174  0192                     	;# 
  2175  0193                     	;# 
  2176  0193                     	;# 
  2177  0194                     	;# 
  2178  0195                     	;# 
  2179  0196                     	;# 
  2180  0197                     	;# 
  2181  0199                     	;# 
  2182  0199                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019A                     	;# 
  2186  019A                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019B                     	;# 
  2190  019B                     	;# 
  2191  019B                     	;# 
  2192  019C                     	;# 
  2193  019C                     	;# 
  2194  019C                     	;# 
  2195  019D                     	;# 
  2196  019D                     	;# 
  2197  019D                     	;# 
  2198  019E                     	;# 
  2199  019E                     	;# 
  2200  019E                     	;# 
  2201  019F                     	;# 
  2202  019F                     	;# 
  2203  019F                     	;# 
  2204  020D                     	;# 
  2205  020F                     	;# 
  2206  0210                     	;# 
  2207  0211                     	;# 
  2208  0211                     	;# 
  2209  0212                     	;# 
  2210  0212                     	;# 
  2211  0213                     	;# 
  2212  0213                     	;# 
  2213  0214                     	;# 
  2214  0214                     	;# 
  2215  0215                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0216                     	;# 
  2219  0216                     	;# 
  2220  0217                     	;# 
  2221  0217                     	;# 
  2222  0219                     	;# 
  2223  021A                     	;# 
  2224  021B                     	;# 
  2225  021C                     	;# 
  2226  021D                     	;# 
  2227  021E                     	;# 
  2228  021F                     	;# 
  2229  028C                     	;# 
  2230  028D                     	;# 
  2231  0291                     	;# 
  2232  0291                     	;# 
  2233  0292                     	;# 
  2234  0293                     	;# 
  2235  0298                     	;# 
  2236  0298                     	;# 
  2237  0299                     	;# 
  2238  029A                     	;# 
  2239  029D                     	;# 
  2240  029E                     	;# 
  2241  029F                     	;# 
  2242  030C                     	;# 
  2243  030D                     	;# 
  2244  0311                     	;# 
  2245  0311                     	;# 
  2246  0312                     	;# 
  2247  0313                     	;# 
  2248  0318                     	;# 
  2249  0318                     	;# 
  2250  0319                     	;# 
  2251  031A                     	;# 
  2252  031C                     	;# 
  2253  031C                     	;# 
  2254  031D                     	;# 
  2255  031E                     	;# 
  2256  038C                     	;# 
  2257  038D                     	;# 
  2258  0394                     	;# 
  2259  0395                     	;# 
  2260  0396                     	;# 
  2261  040C                     	;# 
  2262  040D                     	;# 
  2263  0411                     	;# 
  2264  0411                     	;# 
  2265  0412                     	;# 
  2266  0413                     	;# 
  2267  0414                     	;# 
  2268  0415                     	;# 
  2269  0416                     	;# 
  2270  0417                     	;# 
  2271  0418                     	;# 
  2272  0418                     	;# 
  2273  0419                     	;# 
  2274  041A                     	;# 
  2275  041B                     	;# 
  2276  041C                     	;# 
  2277  041D                     	;# 
  2278  041E                     	;# 
  2279  048D                     	;# 
  2280  0491                     	;# 
  2281  0491                     	;# 
  2282  0492                     	;# 
  2283  0492                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0493                     	;# 
  2287  0494                     	;# 
  2288  0494                     	;# 
  2289  0495                     	;# 
  2290  0495                     	;# 
  2291  0496                     	;# 
  2292  0496                     	;# 
  2293  0497                     	;# 
  2294  0497                     	;# 
  2295  0595                     	;# 
  2296  0596                     	;# 
  2297  0597                     	;# 
  2298  059C                     	;# 
  2299  059D                     	;# 
  2300  059E                     	;# 
  2301  0611                     	;# 
  2302  0611                     	;# 
  2303  0612                     	;# 
  2304  0613                     	;# 
  2305  0614                     	;# 
  2306  0614                     	;# 
  2307  0615                     	;# 
  2308  0616                     	;# 
  2309  0617                     	;# 
  2310  0617                     	;# 
  2311  0618                     	;# 
  2312  0619                     	;# 
  2313  061A                     	;# 
  2314  061A                     	;# 
  2315  061B                     	;# 
  2316  061C                     	;# 
  2317  061D                     	;# 
  2318  061D                     	;# 
  2319  061E                     	;# 
  2320  061F                     	;# 
  2321  0FE4                     	;# 
  2322  0FE5                     	;# 
  2323  0FE6                     	;# 
  2324  0FE7                     	;# 
  2325  0FE8                     	;# 
  2326  0FE9                     	;# 
  2327  0FEA                     	;# 
  2328  0FEB                     	;# 
  2329  0FED                     	;# 
  2330  0FEE                     	;# 
  2331  0FEF                     	;# 
  2332  0000                     	;# 
  2333  0001                     	;# 
  2334  0002                     	;# 
  2335  0003                     	;# 
  2336  0004                     	;# 
  2337  0005                     	;# 
  2338  0006                     	;# 
  2339  0007                     	;# 
  2340  0008                     	;# 
  2341  0009                     	;# 
  2342  000A                     	;# 
  2343  000B                     	;# 
  2344  000C                     	;# 
  2345  000D                     	;# 
  2346  000E                     	;# 
  2347  000F                     	;# 
  2348  0010                     	;# 
  2349  0011                     	;# 
  2350  0012                     	;# 
  2351  0013                     	;# 
  2352  0014                     	;# 
  2353  0015                     	;# 
  2354  0016                     	;# 
  2355  0016                     	;# 
  2356  0017                     	;# 
  2357  0018                     	;# 
  2358  0019                     	;# 
  2359  001A                     	;# 
  2360  001B                     	;# 
  2361  001C                     	;# 
  2362  008C                     	;# 
  2363  008D                     	;# 
  2364  008E                     	;# 
  2365  008F                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0097                     	;# 
  2374  0099                     	;# 
  2375  009A                     	;# 
  2376  009B                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  010C                     	;# 
  2382  010D                     	;# 
  2383  010E                     	;# 
  2384  010F                     	;# 
  2385  0110                     	;# 
  2386  0116                     	;# 
  2387  0117                     	;# 
  2388  011D                     	;# 
  2389  018C                     	;# 
  2390  018D                     	;# 
  2391  018F                     	;# 
  2392  0190                     	;# 
  2393  0191                     	;# 
  2394  0191                     	;# 
  2395  0192                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0197                     	;# 
  2402  0199                     	;# 
  2403  0199                     	;# 
  2404  0199                     	;# 
  2405  019A                     	;# 
  2406  019A                     	;# 
  2407  019A                     	;# 
  2408  019B                     	;# 
  2409  019B                     	;# 
  2410  019B                     	;# 
  2411  019B                     	;# 
  2412  019B                     	;# 
  2413  019C                     	;# 
  2414  019C                     	;# 
  2415  019C                     	;# 
  2416  019D                     	;# 
  2417  019D                     	;# 
  2418  019D                     	;# 
  2419  019E                     	;# 
  2420  019E                     	;# 
  2421  019E                     	;# 
  2422  019F                     	;# 
  2423  019F                     	;# 
  2424  019F                     	;# 
  2425  020D                     	;# 
  2426  020F                     	;# 
  2427  0210                     	;# 
  2428  0211                     	;# 
  2429  0211                     	;# 
  2430  0212                     	;# 
  2431  0212                     	;# 
  2432  0213                     	;# 
  2433  0213                     	;# 
  2434  0214                     	;# 
  2435  0214                     	;# 
  2436  0215                     	;# 
  2437  0215                     	;# 
  2438  0215                     	;# 
  2439  0216                     	;# 
  2440  0216                     	;# 
  2441  0217                     	;# 
  2442  0217                     	;# 
  2443  0219                     	;# 
  2444  021A                     	;# 
  2445  021B                     	;# 
  2446  021C                     	;# 
  2447  021D                     	;# 
  2448  021E                     	;# 
  2449  021F                     	;# 
  2450  028C                     	;# 
  2451  028D                     	;# 
  2452  0291                     	;# 
  2453  0291                     	;# 
  2454  0292                     	;# 
  2455  0293                     	;# 
  2456  0298                     	;# 
  2457  0298                     	;# 
  2458  0299                     	;# 
  2459  029A                     	;# 
  2460  029D                     	;# 
  2461  029E                     	;# 
  2462  029F                     	;# 
  2463  030C                     	;# 
  2464  030D                     	;# 
  2465  0311                     	;# 
  2466  0311                     	;# 
  2467  0312                     	;# 
  2468  0313                     	;# 
  2469  0318                     	;# 
  2470  0318                     	;# 
  2471  0319                     	;# 
  2472  031A                     	;# 
  2473  031C                     	;# 
  2474  031C                     	;# 
  2475  031D                     	;# 
  2476  031E                     	;# 
  2477  038C                     	;# 
  2478  038D                     	;# 
  2479  0394                     	;# 
  2480  0395                     	;# 
  2481  0396                     	;# 
  2482  040C                     	;# 
  2483  040D                     	;# 
  2484  0411                     	;# 
  2485  0411                     	;# 
  2486  0412                     	;# 
  2487  0413                     	;# 
  2488  0414                     	;# 
  2489  0415                     	;# 
  2490  0416                     	;# 
  2491  0417                     	;# 
  2492  0418                     	;# 
  2493  0418                     	;# 
  2494  0419                     	;# 
  2495  041A                     	;# 
  2496  041B                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  048D                     	;# 
  2501  0491                     	;# 
  2502  0491                     	;# 
  2503  0492                     	;# 
  2504  0492                     	;# 
  2505  0493                     	;# 
  2506  0493                     	;# 
  2507  0493                     	;# 
  2508  0494                     	;# 
  2509  0494                     	;# 
  2510  0495                     	;# 
  2511  0495                     	;# 
  2512  0496                     	;# 
  2513  0496                     	;# 
  2514  0497                     	;# 
  2515  0497                     	;# 
  2516  0595                     	;# 
  2517  0596                     	;# 
  2518  0597                     	;# 
  2519  059C                     	;# 
  2520  059D                     	;# 
  2521  059E                     	;# 
  2522  0611                     	;# 
  2523  0611                     	;# 
  2524  0612                     	;# 
  2525  0613                     	;# 
  2526  0614                     	;# 
  2527  0614                     	;# 
  2528  0615                     	;# 
  2529  0616                     	;# 
  2530  0617                     	;# 
  2531  0617                     	;# 
  2532  0618                     	;# 
  2533  0619                     	;# 
  2534  061A                     	;# 
  2535  061A                     	;# 
  2536  061B                     	;# 
  2537  061C                     	;# 
  2538  061D                     	;# 
  2539  061D                     	;# 
  2540  061E                     	;# 
  2541  061F                     	;# 
  2542  0FE4                     	;# 
  2543  0FE5                     	;# 
  2544  0FE6                     	;# 
  2545  0FE7                     	;# 
  2546  0FE8                     	;# 
  2547  0FE9                     	;# 
  2548  0FEA                     	;# 
  2549  0FEB                     	;# 
  2550  0FED                     	;# 
  2551  0FEE                     	;# 
  2552  0FEF                     	;# 
  2553  0000                     	;# 
  2554  0001                     	;# 
  2555  0002                     	;# 
  2556  0003                     	;# 
  2557  0004                     	;# 
  2558  0005                     	;# 
  2559  0006                     	;# 
  2560  0007                     	;# 
  2561  0008                     	;# 
  2562  0009                     	;# 
  2563  000A                     	;# 
  2564  000B                     	;# 
  2565  000C                     	;# 
  2566  000D                     	;# 
  2567  000E                     	;# 
  2568  000F                     	;# 
  2569  0010                     	;# 
  2570  0011                     	;# 
  2571  0012                     	;# 
  2572  0013                     	;# 
  2573  0014                     	;# 
  2574  0015                     	;# 
  2575  0016                     	;# 
  2576  0016                     	;# 
  2577  0017                     	;# 
  2578  0018                     	;# 
  2579  0019                     	;# 
  2580  001A                     	;# 
  2581  001B                     	;# 
  2582  001C                     	;# 
  2583  008C                     	;# 
  2584  008D                     	;# 
  2585  008E                     	;# 
  2586  008F                     	;# 
  2587  0090                     	;# 
  2588  0091                     	;# 
  2589  0092                     	;# 
  2590  0093                     	;# 
  2591  0094                     	;# 
  2592  0095                     	;# 
  2593  0096                     	;# 
  2594  0097                     	;# 
  2595  0099                     	;# 
  2596  009A                     	;# 
  2597  009B                     	;# 
  2598  009B                     	;# 
  2599  009C                     	;# 
  2600  009D                     	;# 
  2601  009E                     	;# 
  2602  010C                     	;# 
  2603  010D                     	;# 
  2604  010E                     	;# 
  2605  010F                     	;# 
  2606  0110                     	;# 
  2607  0116                     	;# 
  2608  0117                     	;# 
  2609  011D                     	;# 
  2610  018C                     	;# 
  2611  018D                     	;# 
  2612  018F                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0194                     	;# 
  2620  0195                     	;# 
  2621  0196                     	;# 
  2622  0197                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  0199                     	;# 
  2626  019A                     	;# 
  2627  019A                     	;# 
  2628  019A                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019B                     	;# 
  2632  019B                     	;# 
  2633  019B                     	;# 
  2634  019C                     	;# 
  2635  019C                     	;# 
  2636  019C                     	;# 
  2637  019D                     	;# 
  2638  019D                     	;# 
  2639  019D                     	;# 
  2640  019E                     	;# 
  2641  019E                     	;# 
  2642  019E                     	;# 
  2643  019F                     	;# 
  2644  019F                     	;# 
  2645  019F                     	;# 
  2646  020D                     	;# 
  2647  020F                     	;# 
  2648  0210                     	;# 
  2649  0211                     	;# 
  2650  0211                     	;# 
  2651  0212                     	;# 
  2652  0212                     	;# 
  2653  0213                     	;# 
  2654  0213                     	;# 
  2655  0214                     	;# 
  2656  0214                     	;# 
  2657  0215                     	;# 
  2658  0215                     	;# 
  2659  0215                     	;# 
  2660  0216                     	;# 
  2661  0216                     	;# 
  2662  0217                     	;# 
  2663  0217                     	;# 
  2664  0219                     	;# 
  2665  021A                     	;# 
  2666  021B                     	;# 
  2667  021C                     	;# 
  2668  021D                     	;# 
  2669  021E                     	;# 
  2670  021F                     	;# 
  2671  028C                     	;# 
  2672  028D                     	;# 
  2673  0291                     	;# 
  2674  0291                     	;# 
  2675  0292                     	;# 
  2676  0293                     	;# 
  2677  0298                     	;# 
  2678  0298                     	;# 
  2679  0299                     	;# 
  2680  029A                     	;# 
  2681  029D                     	;# 
  2682  029E                     	;# 
  2683  029F                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  0311                     	;# 
  2687  0311                     	;# 
  2688  0312                     	;# 
  2689  0313                     	;# 
  2690  0318                     	;# 
  2691  0318                     	;# 
  2692  0319                     	;# 
  2693  031A                     	;# 
  2694  031C                     	;# 
  2695  031C                     	;# 
  2696  031D                     	;# 
  2697  031E                     	;# 
  2698  038C                     	;# 
  2699  038D                     	;# 
  2700  0394                     	;# 
  2701  0395                     	;# 
  2702  0396                     	;# 
  2703  040C                     	;# 
  2704  040D                     	;# 
  2705  0411                     	;# 
  2706  0411                     	;# 
  2707  0412                     	;# 
  2708  0413                     	;# 
  2709  0414                     	;# 
  2710  0415                     	;# 
  2711  0416                     	;# 
  2712  0417                     	;# 
  2713  0418                     	;# 
  2714  0418                     	;# 
  2715  0419                     	;# 
  2716  041A                     	;# 
  2717  041B                     	;# 
  2718  041C                     	;# 
  2719  041D                     	;# 
  2720  041E                     	;# 
  2721  048D                     	;# 
  2722  0491                     	;# 
  2723  0491                     	;# 
  2724  0492                     	;# 
  2725  0492                     	;# 
  2726  0493                     	;# 
  2727  0493                     	;# 
  2728  0493                     	;# 
  2729  0494                     	;# 
  2730  0494                     	;# 
  2731  0495                     	;# 
  2732  0495                     	;# 
  2733  0496                     	;# 
  2734  0496                     	;# 
  2735  0497                     	;# 
  2736  0497                     	;# 
  2737  0595                     	;# 
  2738  0596                     	;# 
  2739  0597                     	;# 
  2740  059C                     	;# 
  2741  059D                     	;# 
  2742  059E                     	;# 
  2743  0611                     	;# 
  2744  0611                     	;# 
  2745  0612                     	;# 
  2746  0613                     	;# 
  2747  0614                     	;# 
  2748  0614                     	;# 
  2749  0615                     	;# 
  2750  0616                     	;# 
  2751  0617                     	;# 
  2752  0617                     	;# 
  2753  0618                     	;# 
  2754  0619                     	;# 
  2755  061A                     	;# 
  2756  061A                     	;# 
  2757  061B                     	;# 
  2758  061C                     	;# 
  2759  061D                     	;# 
  2760  061D                     	;# 
  2761  061E                     	;# 
  2762  061F                     	;# 
  2763  0FE4                     	;# 
  2764  0FE5                     	;# 
  2765  0FE6                     	;# 
  2766  0FE7                     	;# 
  2767  0FE8                     	;# 
  2768  0FE9                     	;# 
  2769  0FEA                     	;# 
  2770  0FEB                     	;# 
  2771  0FED                     	;# 
  2772  0FEE                     	;# 
  2773  0FEF                     	;# 
  2774  0000                     	;# 
  2775  0001                     	;# 
  2776  0002                     	;# 
  2777  0003                     	;# 
  2778  0004                     	;# 
  2779  0005                     	;# 
  2780  0006                     	;# 
  2781  0007                     	;# 
  2782  0008                     	;# 
  2783  0009                     	;# 
  2784  000A                     	;# 
  2785  000B                     	;# 
  2786  000C                     	;# 
  2787  000D                     	;# 
  2788  000E                     	;# 
  2789  000F                     	;# 
  2790  0010                     	;# 
  2791  0011                     	;# 
  2792  0012                     	;# 
  2793  0013                     	;# 
  2794  0014                     	;# 
  2795  0015                     	;# 
  2796  0016                     	;# 
  2797  0016                     	;# 
  2798  0017                     	;# 
  2799  0018                     	;# 
  2800  0019                     	;# 
  2801  001A                     	;# 
  2802  001B                     	;# 
  2803  001C                     	;# 
  2804  008C                     	;# 
  2805  008D                     	;# 
  2806  008E                     	;# 
  2807  008F                     	;# 
  2808  0090                     	;# 
  2809  0091                     	;# 
  2810  0092                     	;# 
  2811  0093                     	;# 
  2812  0094                     	;# 
  2813  0095                     	;# 
  2814  0096                     	;# 
  2815  0097                     	;# 
  2816  0099                     	;# 
  2817  009A                     	;# 
  2818  009B                     	;# 
  2819  009B                     	;# 
  2820  009C                     	;# 
  2821  009D                     	;# 
  2822  009E                     	;# 
  2823  010C                     	;# 
  2824  010D                     	;# 
  2825  010E                     	;# 
  2826  010F                     	;# 
  2827  0110                     	;# 
  2828  0116                     	;# 
  2829  0117                     	;# 
  2830  011D                     	;# 
  2831  018C                     	;# 
  2832  018D                     	;# 
  2833  018F                     	;# 
  2834  0190                     	;# 
  2835  0191                     	;# 
  2836  0191                     	;# 
  2837  0192                     	;# 
  2838  0193                     	;# 
  2839  0193                     	;# 
  2840  0194                     	;# 
  2841  0195                     	;# 
  2842  0196                     	;# 
  2843  0197                     	;# 
  2844  0199                     	;# 
  2845  0199                     	;# 
  2846  0199                     	;# 
  2847  019A                     	;# 
  2848  019A                     	;# 
  2849  019A                     	;# 
  2850  019B                     	;# 
  2851  019B                     	;# 
  2852  019B                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019C                     	;# 
  2856  019C                     	;# 
  2857  019C                     	;# 
  2858  019D                     	;# 
  2859  019D                     	;# 
  2860  019D                     	;# 
  2861  019E                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  019F                     	;# 
  2867  020D                     	;# 
  2868  020F                     	;# 
  2869  0210                     	;# 
  2870  0211                     	;# 
  2871  0211                     	;# 
  2872  0212                     	;# 
  2873  0212                     	;# 
  2874  0213                     	;# 
  2875  0213                     	;# 
  2876  0214                     	;# 
  2877  0214                     	;# 
  2878  0215                     	;# 
  2879  0215                     	;# 
  2880  0215                     	;# 
  2881  0216                     	;# 
  2882  0216                     	;# 
  2883  0217                     	;# 
  2884  0217                     	;# 
  2885  0219                     	;# 
  2886  021A                     	;# 
  2887  021B                     	;# 
  2888  021C                     	;# 
  2889  021D                     	;# 
  2890  021E                     	;# 
  2891  021F                     	;# 
  2892  028C                     	;# 
  2893  028D                     	;# 
  2894  0291                     	;# 
  2895  0291                     	;# 
  2896  0292                     	;# 
  2897  0293                     	;# 
  2898  0298                     	;# 
  2899  0298                     	;# 
  2900  0299                     	;# 
  2901  029A                     	;# 
  2902  029D                     	;# 
  2903  029E                     	;# 
  2904  029F                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  0311                     	;# 
  2908  0311                     	;# 
  2909  0312                     	;# 
  2910  0313                     	;# 
  2911  0318                     	;# 
  2912  0318                     	;# 
  2913  0319                     	;# 
  2914  031A                     	;# 
  2915  031C                     	;# 
  2916  031C                     	;# 
  2917  031D                     	;# 
  2918  031E                     	;# 
  2919  038C                     	;# 
  2920  038D                     	;# 
  2921  0394                     	;# 
  2922  0395                     	;# 
  2923  0396                     	;# 
  2924  040C                     	;# 
  2925  040D                     	;# 
  2926  0411                     	;# 
  2927  0411                     	;# 
  2928  0412                     	;# 
  2929  0413                     	;# 
  2930  0414                     	;# 
  2931  0415                     	;# 
  2932  0416                     	;# 
  2933  0417                     	;# 
  2934  0418                     	;# 
  2935  0418                     	;# 
  2936  0419                     	;# 
  2937  041A                     	;# 
  2938  041B                     	;# 
  2939  041C                     	;# 
  2940  041D                     	;# 
  2941  041E                     	;# 
  2942  048D                     	;# 
  2943  0491                     	;# 
  2944  0491                     	;# 
  2945  0492                     	;# 
  2946  0492                     	;# 
  2947  0493                     	;# 
  2948  0493                     	;# 
  2949  0493                     	;# 
  2950  0494                     	;# 
  2951  0494                     	;# 
  2952  0495                     	;# 
  2953  0495                     	;# 
  2954  0496                     	;# 
  2955  0496                     	;# 
  2956  0497                     	;# 
  2957  0497                     	;# 
  2958  0595                     	;# 
  2959  0596                     	;# 
  2960  0597                     	;# 
  2961  059C                     	;# 
  2962  059D                     	;# 
  2963  059E                     	;# 
  2964  0611                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0614                     	;# 
  2970  0615                     	;# 
  2971  0616                     	;# 
  2972  0617                     	;# 
  2973  0617                     	;# 
  2974  0618                     	;# 
  2975  0619                     	;# 
  2976  061A                     	;# 
  2977  061A                     	;# 
  2978  061B                     	;# 
  2979  061C                     	;# 
  2980  061D                     	;# 
  2981  061D                     	;# 
  2982  061E                     	;# 
  2983  061F                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  008C                     	;# 
  3026  008D                     	;# 
  3027  008E                     	;# 
  3028  008F                     	;# 
  3029  0090                     	;# 
  3030  0091                     	;# 
  3031  0092                     	;# 
  3032  0093                     	;# 
  3033  0094                     	;# 
  3034  0095                     	;# 
  3035  0096                     	;# 
  3036  0097                     	;# 
  3037  0099                     	;# 
  3038  009A                     	;# 
  3039  009B                     	;# 
  3040  009B                     	;# 
  3041  009C                     	;# 
  3042  009D                     	;# 
  3043  009E                     	;# 
  3044  010C                     	;# 
  3045  010D                     	;# 
  3046  010E                     	;# 
  3047  010F                     	;# 
  3048  0110                     	;# 
  3049  0116                     	;# 
  3050  0117                     	;# 
  3051  011D                     	;# 
  3052  018C                     	;# 
  3053  018D                     	;# 
  3054  018F                     	;# 
  3055  0190                     	;# 
  3056  0191                     	;# 
  3057  0191                     	;# 
  3058  0192                     	;# 
  3059  0193                     	;# 
  3060  0193                     	;# 
  3061  0194                     	;# 
  3062  0195                     	;# 
  3063  0196                     	;# 
  3064  0197                     	;# 
  3065  0199                     	;# 
  3066  0199                     	;# 
  3067  0199                     	;# 
  3068  019A                     	;# 
  3069  019A                     	;# 
  3070  019A                     	;# 
  3071  019B                     	;# 
  3072  019B                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019C                     	;# 
  3077  019C                     	;# 
  3078  019C                     	;# 
  3079  019D                     	;# 
  3080  019D                     	;# 
  3081  019D                     	;# 
  3082  019E                     	;# 
  3083  019E                     	;# 
  3084  019E                     	;# 
  3085  019F                     	;# 
  3086  019F                     	;# 
  3087  019F                     	;# 
  3088  020D                     	;# 
  3089  020F                     	;# 
  3090  0210                     	;# 
  3091  0211                     	;# 
  3092  0211                     	;# 
  3093  0212                     	;# 
  3094  0212                     	;# 
  3095  0213                     	;# 
  3096  0213                     	;# 
  3097  0214                     	;# 
  3098  0214                     	;# 
  3099  0215                     	;# 
  3100  0215                     	;# 
  3101  0215                     	;# 
  3102  0216                     	;# 
  3103  0216                     	;# 
  3104  0217                     	;# 
  3105  0217                     	;# 
  3106  0219                     	;# 
  3107  021A                     	;# 
  3108  021B                     	;# 
  3109  021C                     	;# 
  3110  021D                     	;# 
  3111  021E                     	;# 
  3112  021F                     	;# 
  3113  028C                     	;# 
  3114  028D                     	;# 
  3115  0291                     	;# 
  3116  0291                     	;# 
  3117  0292                     	;# 
  3118  0293                     	;# 
  3119  0298                     	;# 
  3120  0298                     	;# 
  3121  0299                     	;# 
  3122  029A                     	;# 
  3123  029D                     	;# 
  3124  029E                     	;# 
  3125  029F                     	;# 
  3126  030C                     	;# 
  3127  030D                     	;# 
  3128  0311                     	;# 
  3129  0311                     	;# 
  3130  0312                     	;# 
  3131  0313                     	;# 
  3132  0318                     	;# 
  3133  0318                     	;# 
  3134  0319                     	;# 
  3135  031A                     	;# 
  3136  031C                     	;# 
  3137  031C                     	;# 
  3138  031D                     	;# 
  3139  031E                     	;# 
  3140  038C                     	;# 
  3141  038D                     	;# 
  3142  0394                     	;# 
  3143  0395                     	;# 
  3144  0396                     	;# 
  3145  040C                     	;# 
  3146  040D                     	;# 
  3147  0411                     	;# 
  3148  0411                     	;# 
  3149  0412                     	;# 
  3150  0413                     	;# 
  3151  0414                     	;# 
  3152  0415                     	;# 
  3153  0416                     	;# 
  3154  0417                     	;# 
  3155  0418                     	;# 
  3156  0418                     	;# 
  3157  0419                     	;# 
  3158  041A                     	;# 
  3159  041B                     	;# 
  3160  041C                     	;# 
  3161  041D                     	;# 
  3162  041E                     	;# 
  3163  048D                     	;# 
  3164  0491                     	;# 
  3165  0491                     	;# 
  3166  0492                     	;# 
  3167  0492                     	;# 
  3168  0493                     	;# 
  3169  0493                     	;# 
  3170  0493                     	;# 
  3171  0494                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0495                     	;# 
  3175  0496                     	;# 
  3176  0496                     	;# 
  3177  0497                     	;# 
  3178  0497                     	;# 
  3179  0595                     	;# 
  3180  0596                     	;# 
  3181  0597                     	;# 
  3182  059C                     	;# 
  3183  059D                     	;# 
  3184  059E                     	;# 
  3185  0611                     	;# 
  3186  0611                     	;# 
  3187  0612                     	;# 
  3188  0613                     	;# 
  3189  0614                     	;# 
  3190  0614                     	;# 
  3191  0615                     	;# 
  3192  0616                     	;# 
  3193  0617                     	;# 
  3194  0617                     	;# 
  3195  0618                     	;# 
  3196  0619                     	;# 
  3197  061A                     	;# 
  3198  061A                     	;# 
  3199  061B                     	;# 
  3200  061C                     	;# 
  3201  061D                     	;# 
  3202  061D                     	;# 
  3203  061E                     	;# 
  3204  061F                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  000F                     	;# 
  3232  0010                     	;# 
  3233  0011                     	;# 
  3234  0012                     	;# 
  3235  0013                     	;# 
  3236  0014                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  001A                     	;# 
  3244  001B                     	;# 
  3245  001C                     	;# 
  3246  008C                     	;# 
  3247  008D                     	;# 
  3248  008E                     	;# 
  3249  008F                     	;# 
  3250  0090                     	;# 
  3251  0091                     	;# 
  3252  0092                     	;# 
  3253  0093                     	;# 
  3254  0094                     	;# 
  3255  0095                     	;# 
  3256  0096                     	;# 
  3257  0097                     	;# 
  3258  0099                     	;# 
  3259  009A                     	;# 
  3260  009B                     	;# 
  3261  009B                     	;# 
  3262  009C                     	;# 
  3263  009D                     	;# 
  3264  009E                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  010F                     	;# 
  3269  0110                     	;# 
  3270  0116                     	;# 
  3271  0117                     	;# 
  3272  011D                     	;# 
  3273  018C                     	;# 
  3274  018D                     	;# 
  3275  018F                     	;# 
  3276  0190                     	;# 
  3277  0191                     	;# 
  3278  0191                     	;# 
  3279  0192                     	;# 
  3280  0193                     	;# 
  3281  0193                     	;# 
  3282  0194                     	;# 
  3283  0195                     	;# 
  3284  0196                     	;# 
  3285  0197                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  0199                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019A                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019B                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019C                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019D                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019E                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  020D                     	;# 
  3310  020F                     	;# 
  3311  0210                     	;# 
  3312  0211                     	;# 
  3313  0211                     	;# 
  3314  0212                     	;# 
  3315  0212                     	;# 
  3316  0213                     	;# 
  3317  0213                     	;# 
  3318  0214                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0216                     	;# 
  3324  0216                     	;# 
  3325  0217                     	;# 
  3326  0217                     	;# 
  3327  0219                     	;# 
  3328  021A                     	;# 
  3329  021B                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021E                     	;# 
  3333  021F                     	;# 
  3334  028C                     	;# 
  3335  028D                     	;# 
  3336  0291                     	;# 
  3337  0291                     	;# 
  3338  0292                     	;# 
  3339  0293                     	;# 
  3340  0298                     	;# 
  3341  0298                     	;# 
  3342  0299                     	;# 
  3343  029A                     	;# 
  3344  029D                     	;# 
  3345  029E                     	;# 
  3346  029F                     	;# 
  3347  030C                     	;# 
  3348  030D                     	;# 
  3349  0311                     	;# 
  3350  0311                     	;# 
  3351  0312                     	;# 
  3352  0313                     	;# 
  3353  0318                     	;# 
  3354  0318                     	;# 
  3355  0319                     	;# 
  3356  031A                     	;# 
  3357  031C                     	;# 
  3358  031C                     	;# 
  3359  031D                     	;# 
  3360  031E                     	;# 
  3361  038C                     	;# 
  3362  038D                     	;# 
  3363  0394                     	;# 
  3364  0395                     	;# 
  3365  0396                     	;# 
  3366  040C                     	;# 
  3367  040D                     	;# 
  3368  0411                     	;# 
  3369  0411                     	;# 
  3370  0412                     	;# 
  3371  0413                     	;# 
  3372  0414                     	;# 
  3373  0415                     	;# 
  3374  0416                     	;# 
  3375  0417                     	;# 
  3376  0418                     	;# 
  3377  0418                     	;# 
  3378  0419                     	;# 
  3379  041A                     	;# 
  3380  041B                     	;# 
  3381  041C                     	;# 
  3382  041D                     	;# 
  3383  041E                     	;# 
  3384  048D                     	;# 
  3385  0491                     	;# 
  3386  0491                     	;# 
  3387  0492                     	;# 
  3388  0492                     	;# 
  3389  0493                     	;# 
  3390  0493                     	;# 
  3391  0493                     	;# 
  3392  0494                     	;# 
  3393  0494                     	;# 
  3394  0495                     	;# 
  3395  0495                     	;# 
  3396  0496                     	;# 
  3397  0496                     	;# 
  3398  0497                     	;# 
  3399  0497                     	;# 
  3400  0595                     	;# 
  3401  0596                     	;# 
  3402  0597                     	;# 
  3403  059C                     	;# 
  3404  059D                     	;# 
  3405  059E                     	;# 
  3406  0611                     	;# 
  3407  0611                     	;# 
  3408  0612                     	;# 
  3409  0613                     	;# 
  3410  0614                     	;# 
  3411  0614                     	;# 
  3412  0615                     	;# 
  3413  0616                     	;# 
  3414  0617                     	;# 
  3415  0617                     	;# 
  3416  0618                     	;# 
  3417  0619                     	;# 
  3418  061A                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061D                     	;# 
  3424  061E                     	;# 
  3425  061F                     	;# 
  3426  0FE4                     	;# 
  3427  0FE5                     	;# 
  3428  0FE6                     	;# 
  3429  0FE7                     	;# 
  3430  0FE8                     	;# 
  3431  0FE9                     	;# 
  3432  0FEA                     	;# 
  3433  0FEB                     	;# 
  3434  0FED                     	;# 
  3435  0FEE                     	;# 
  3436  0FEF                     	;_modArray
  3437                           
  3438                           	psect	idataBANK0
  3439  2DAF                     __pidataBANK0:	
  3440                           
  3441                           ;initializer for _delay_time
  3442  2DAF  34D0               	retlw	208
  3443  2DB0  3407               	retlw	7
  3444  2DB1  3400               	retlw	0
  3445  2DB2  3400               	retlw	0
  3446                           
  3447                           ;initializer for _bottom_push_state
  3448  2DB3  3401               	retlw	1
  3449  2DB4  3400               	retlw	0
  3450                           
  3451                           ;initializer for _long_press_limit
  3452  2DB5  34E8               	retlw	232
  3453  2DB6  3403               	retlw	3
  3454                           
  3455                           ;initializer for _top_push_state
  3456  2DB7  3406               	retlw	6
  3457  2DB8  3400               	retlw	0
  3458                           
  3459                           ;initializer for _blink_rate
  3460  2DB9  3414               	retlw	20
  3461                           
  3462                           ;initializer for _expressionChannel
  3463  2DBA  3401               	retlw	1
  3464                           
  3465                           ;initializer for _longTap_state
  3466  2DBB  34FF               	retlw	255
  3467                           
  3468                           ;initializer for _num_taps
  3469  2DBC  3404               	retlw	4
  3470                           
  3471                           ;initializer for _presetChannel
  3472  2DBD  3401               	retlw	1
  3473                           
  3474                           ;initializer for _switchBypass_state
  3475  2DBE  34FF               	retlw	255
  3476                           
  3477                           	psect	idataBANK2
  3478  2000                     __pidataBANK2:	
  3479                           
  3480                           ;initializer for _switchTap_state
  3481  2000  34FF               	retlw	255
  3482                           
  3483                           	psect	idataBANK3
  3484  2E72                     __pidataBANK3:	
  3485                           
  3486                           ;initializer for _baseline_mod_time
  3487  2E72  34D0               	retlw	208
  3488  2E73  3407               	retlw	7
  3489  2E74  3400               	retlw	0
  3490  2E75  3400               	retlw	0
  3491                           
  3492                           ;initializer for _blink_delay
  3493  2E76  3464               	retlw	100
  3494  2E77  3400               	retlw	0
  3495                           
  3496                           ;initializer for _knob1_prev
  3497  2E78  34D0               	retlw	208
  3498  2E79  3407               	retlw	7
  3499                           
  3500                           ;initializer for _knob2_prev
  3501  2E7A  34D0               	retlw	208
  3502  2E7B  3407               	retlw	7
  3503                           
  3504                           ;initializer for _knob3_prev
  3505  2E7C  34D0               	retlw	208
  3506  2E7D  3407               	retlw	7
  3507                           
  3508                           ;initializer for _knob4_prev
  3509  2E7E  34D0               	retlw	208
  3510  2E7F  3407               	retlw	7
  3511                           
  3512                           ;initializer for _knob5_prev
  3513  2E80  34D0               	retlw	208
  3514  2E81  3407               	retlw	7
  3515                           
  3516                           ;initializer for _mod_delay_time
  3517  2E82  34D0               	retlw	208
  3518  2E83  3407               	retlw	7
  3519                           
  3520                           ;initializer for _symmetry
  3521  2E84  34B4               	retlw	180
  3522  2E85  3400               	retlw	0
  3523                           
  3524                           ;initializer for _tap_iteration
  3525  2E86  3401               	retlw	1
  3526  2E87  3400               	retlw	0
  3527                           
  3528                           ;initializer for _blink_state
  3529  2E88  3401               	retlw	1
  3530                           
  3531                           ;initializer for _currentBypassState
  3532  2E89  34FF               	retlw	255
  3533                           
  3534                           ;initializer for _expSwitchState
  3535  2E8A  34FF               	retlw	255
  3536                           
  3537                           ;initializer for _expressModeCnst
  3538  2E8B  3402               	retlw	2
  3539                           
  3540                           ;initializer for _mod_time_changed
  3541  2E8C  3401               	retlw	1
  3542                           
  3543                           ;initializer for _presetModeCnst
  3544  2E8D  3401               	retlw	1
  3545                           
  3546                           	psect	idataBANK4
  3547  0002                     __pidataBANK4:	
  3548                           
  3549                           ;initializer for _switchBypass_up
  3550  0002  3401               	retlw	1
  3551  0003  3400               	retlw	0
  3552                           
  3553                           	psect	stringtext
  3554  2800                     __pstringtext:	
  3555  2800                     exp@coeff:	
  3556  2800  3400               	retlw	0
  3557  2801  3480               	retlw	128
  3558  2802  343F               	retlw	63
  3559  2803  3472               	retlw	114
  3560  2804  3431               	retlw	49
  3561  2805  343F               	retlw	63
  3562  2806  34FE               	retlw	254
  3563  2807  3475               	retlw	117
  3564  2808  343E               	retlw	62
  3565  2809  3458               	retlw	88
  3566  280A  3463               	retlw	99
  3567  280B  343D               	retlw	61
  3568  280C  3495               	retlw	149
  3569  280D  341D               	retlw	29
  3570  280E  343C               	retlw	60
  3571  280F  34C5               	retlw	197
  3572  2810  34AE               	retlw	174
  3573  2811  343A               	retlw	58
  3574  2812  3479               	retlw	121
  3575  2813  3421               	retlw	33
  3576  2814  3439               	retlw	57
  3577  2815  3494               	retlw	148
  3578  2816  3480               	retlw	128
  3579  2817  3437               	retlw	55
  3580  2818  3493               	retlw	147
  3581  2819  34A7               	retlw	167
  3582  281A  3435               	retlw	53
  3583  281B  3456               	retlw	86
  3584  281C  3415               	retlw	21
  3585  281D  3434               	retlw	52
  3586  281E                     __end_ofexp@coeff:	
  3587  281E                     log@coeff:	
  3588  281E  3400               	retlw	0
  3589  281F  3400               	retlw	0
  3590  2820  3400               	retlw	0
  3591  2821  3400               	retlw	0
  3592  2822  3480               	retlw	128
  3593  2823  343F               	retlw	63
  3594  2824  34F0               	retlw	240
  3595  2825  34FF               	retlw	255
  3596  2826  34BE               	retlw	190
  3597  2827  34E2               	retlw	226
  3598  2828  34A9               	retlw	169
  3599  2829  343E               	retlw	62
  3600  282A  3483               	retlw	131
  3601  282B  3476               	retlw	118
  3602  282C  34BE               	retlw	190
  3603  282D  34AE               	retlw	174
  3604  282E  342B               	retlw	43
  3605  282F  343E               	retlw	62
  3606  2830  343C               	retlw	60
  3607  2831  34C3               	retlw	195
  3608  2832  34BD               	retlw	189
  3609  2833  34D2               	retlw	210
  3610  2834  3413               	retlw	19
  3611  2835  343D               	retlw	61
  3612  2836  3478               	retlw	120
  3613  2837  34D3               	retlw	211
  3614  2838  34BB               	retlw	187
  3615  2839                     __end_oflog@coeff:	
  3616  2839                     sin@coeff_a:	
  3617  2839  34F4               	retlw	244
  3618  283A  344A               	retlw	74
  3619  283B  3448               	retlw	72
  3620  283C  3495               	retlw	149
  3621  283D  3495               	retlw	149
  3622  283E  34C7               	retlw	199
  3623  283F  34C1               	retlw	193
  3624  2840  34DC               	retlw	220
  3625  2841  3445               	retlw	69
  3626  2842  34DC               	retlw	220
  3627  2843  346D               	retlw	109
  3628  2844  34C3               	retlw	195
  3629  2845  34B3               	retlw	179
  3630  2846  3433               	retlw	51
  3631  2847  3440               	retlw	64
  3632  2848                     __end_ofsin@coeff_a:	
  3633  2848                     sin@coeff_b:	
  3634  2848  3434               	retlw	52
  3635  2849  3401               	retlw	1
  3636  284A  3448               	retlw	72
  3637  284B  349D               	retlw	157
  3638  284C  34B0               	retlw	176
  3639  284D  3445               	retlw	69
  3640  284E  3400               	retlw	0
  3641  284F  34DA               	retlw	218
  3642  2850  3442               	retlw	66
  3643  2851  3400               	retlw	0
  3644  2852  3480               	retlw	128
  3645  2853  343F               	retlw	63
  3646  2854                     __end_ofsin@coeff_b:	
  3647  000B                     _INTCONbits	set	11
  3648  0011                     _PIR1bits	set	17
  3649  000C                     _PORTAbits	set	12
  3650  000E                     _PORTCbits	set	14
  3651  000F                     _PORTDbits	set	15
  3652  0010                     _PORTEbits	set	16
  3653  001B                     _PR2	set	27
  3654  001C                     _T2CONbits	set	28
  3655  005F                     _GIE	set	95
  3656  005E                     _PEIE	set	94
  3657  0069                     _RB1	set	105
  3658  009D                     _ADCON0bits	set	157
  3659  009E                     _ADCON1bits	set	158
  3660  009C                     _ADRESH	set	156
  3661  009B                     _ADRESL	set	155
  3662  0095                     _OPTION_REGbits	set	149
  3663  0099                     _OSCCONbits	set	153
  3664  008D                     _TRISBbits	set	141
  3665  008E                     _TRISCbits	set	142
  3666  008F                     _TRISDbits	set	143
  3667  0090                     _TRISEbits	set	144
  3668  048D                     _RCIE	set	1165
  3669  011D                     _APFCONbits	set	285
  3670  010D                     _LATBbits	set	269
  3671  010F                     _LATDbits	set	271
  3672  0190                     _ANSELEbits	set	400
  3673  0192                     _PMADRH	set	402
  3674  0191                     _PMADRL	set	401
  3675  0195                     _PMCON1bits	set	405
  3676  0196                     _PMCON2	set	406
  3677  0194                     _PMDATH	set	404
  3678  0193                     _PMDATL	set	403
  3679  0199                     _RCREG	set	409
  3680  019D                     _RCSTAbits	set	413
  3681  019B                     _SPBRG	set	411
  3682  019A                     _TXREG	set	410
  3683  019E                     _TXSTAbits	set	414
  3684  0291                     _CCPR1	set	657
  3685  0298                     _CCPR2	set	664
  3686  0293                     _CCP1CONbits	set	659
  3687  029A                     _CCP2CONbits	set	666
  3688  029D                     _CCPTMRS0	set	669
  3689  029E                     _CCPTMRS1	set	670
  3690  029F                     _CCPTMRS2	set	671
  3691  0311                     _CCPR3	set	785
  3692  0318                     _CCPR4	set	792
  3693  031C                     _CCPR5	set	796
  3694  0313                     _CCP3CONbits	set	787
  3695  031A                     _CCP4CONbits	set	794
  3696  031E                     _CCP5CONbits	set	798
  3697  030C                     _TRISFbits	set	780
  3698  030D                     _TRISGbits	set	781
  3699  038C                     _LATFbits	set	908
  3700  038D                     _LATGbits	set	909
  3701  040C                     _ANSELFbits	set	1036
  3702  061F                     _CCP10CONbits	set	1567
  3703  0613                     _CCP6CONbits	set	1555
  3704  0616                     _CCP7CONbits	set	1558
  3705  0619                     _CCP8CONbits	set	1561
  3706  061C                     _CCP9CONbits	set	1564
  3707                           
  3708                           ; #config settings
  3709  0000                     
  3710                           	psect	cinit
  3711  02E8                     start_initialization:	
  3712  02E8                     __initialization:		;BIGRAM
  3713                           
  3714                           ; Clear objects allocated to BIGRAM
  3715  02E8  308A               	movlw	low (0+9098)
  3716  02E9  0084               	movwf	4
  3717  02EA  3023               	movlw	high (0+9098)
  3718  02EB  0085               	movwf	5
  3719  02EC  3066               	movlw	102
  3720  02ED  00FE               	movwf	btemp
  3721  02EE  3002               	movlw	2
  3722  02EF  00FF               	movwf	btemp+1
  3723  02F0  31AD  2594  3182   	fcall	clear_ram0
  3724                           
  3725                           ; Clear objects allocated to COMMON
  3726  02F3  01FD               	clrf	__pbssCOMMON& (0+127)
  3727                           
  3728                           ; Clear objects allocated to BANK0
  3729  02F4  3046               	movlw	low __pbssBANK0
  3730  02F5  0084               	movwf	4
  3731  02F6  3000               	movlw	high __pbssBANK0
  3732  02F7  0085               	movwf	5
  3733  02F8  3016               	movlw	22
  3734  02F9  00FE               	movwf	btemp
  3735  02FA  3000               	movlw	0
  3736  02FB  00FF               	movwf	btemp+1
  3737  02FC  31AD  2594  3182   	fcall	clear_ram0
  3738                           
  3739                           ; Clear objects allocated to BANK3
  3740  02FF  30A0               	movlw	low __pbssBANK3
  3741  0300  0084               	movwf	4
  3742  0301  3001               	movlw	high __pbssBANK3
  3743  0302  0085               	movwf	5
  3744  0303  3026               	movlw	38
  3745  0304  00FE               	movwf	btemp
  3746  0305  3000               	movlw	0
  3747  0306  00FF               	movwf	btemp+1
  3748  0307  31AD  2594  3182   	fcall	clear_ram0
  3749                           
  3750                           ; Clear objects allocated to BANK4
  3751  030A  3020               	movlw	low __pbssBANK4
  3752  030B  0084               	movwf	4
  3753  030C  3002               	movlw	high __pbssBANK4
  3754  030D  0085               	movwf	5
  3755  030E  3035               	movlw	53
  3756  030F  00FE               	movwf	btemp
  3757  0310  3000               	movlw	0
  3758  0311  00FF               	movwf	btemp+1
  3759  0312  31AD  2594  3182   	fcall	clear_ram0
  3760                           
  3761                           ; Clear objects allocated to BANK5
  3762  0315  30A0               	movlw	low __pbssBANK5
  3763  0316  0084               	movwf	4
  3764  0317  3002               	movlw	high __pbssBANK5
  3765  0318  0085               	movwf	5
  3766  0319  302C               	movlw	44
  3767  031A  00FE               	movwf	btemp
  3768  031B  3000               	movlw	0
  3769  031C  00FF               	movwf	btemp+1
  3770  031D  31AD  2594  3182   	fcall	clear_ram0
  3771                           
  3772                           ; Clear objects allocated to BANK6
  3773  0320  3020               	movlw	low __pbssBANK6
  3774  0321  0084               	movwf	4
  3775  0322  3003               	movlw	high __pbssBANK6
  3776  0323  0085               	movwf	5
  3777  0324  3040               	movlw	64
  3778  0325  00FE               	movwf	btemp
  3779  0326  3000               	movlw	0
  3780  0327  00FF               	movwf	btemp+1
  3781  0328  31AD  2594  3182   	fcall	clear_ram0
  3782                           
  3783                           ; Clear objects allocated to BANK7
  3784  032B  30A0               	movlw	low __pbssBANK7
  3785  032C  0084               	movwf	4
  3786  032D  3003               	movlw	high __pbssBANK7
  3787  032E  0085               	movwf	5
  3788  032F  3040               	movlw	64
  3789  0330  00FE               	movwf	btemp
  3790  0331  3000               	movlw	0
  3791  0332  00FF               	movwf	btemp+1
  3792  0333  31AD  2594  3182   	fcall	clear_ram0
  3793                           
  3794                           ; Initialize objects allocated to BANK0
  3795  0336  30AF               	movlw	low __pidataBANK0
  3796  0337  0084               	movwf	4
  3797  0338  30AD               	movlw	(high __pidataBANK0)| (0+128)
  3798  0339  0085               	movwf	5
  3799  033A  305C               	movlw	low __pdataBANK0
  3800  033B  0086               	movwf	6
  3801  033C  3000               	movlw	high __pdataBANK0
  3802  033D  0087               	movwf	7
  3803  033E  3000               	movlw	0
  3804  033F  00FF               	movwf	btemp+1
  3805  0340  3010               	movlw	16
  3806  0341  31AD  2588  3182   	fcall	init_ram
  3807                           
  3808                           ; Initialize objects allocated to BANK2
  3809  0344  0022               	movlb	2	; select bank2
  3810  0345  31A0  2000  3182   	fcall	__pidataBANK2	;fetch initializer
  3811  0348  00EF               	movwf	__pdataBANK2& (0+127)
  3812                           
  3813                           ; Initialize objects allocated to BANK3
  3814  0349  3072               	movlw	low __pidataBANK3
  3815  034A  0084               	movwf	4
  3816  034B  30AE               	movlw	(high __pidataBANK3)| (0+128)
  3817  034C  0085               	movwf	5
  3818  034D  30C6               	movlw	low __pdataBANK3
  3819  034E  0086               	movwf	6
  3820  034F  3001               	movlw	high __pdataBANK3
  3821  0350  0087               	movwf	7
  3822  0351  3000               	movlw	0
  3823  0352  00FF               	movwf	btemp+1
  3824  0353  301C               	movlw	28
  3825  0354  31AD  2588  3182   	fcall	init_ram
  3826                           
  3827                           ; Initialize objects allocated to BANK4
  3828  0357  0024               	movlb	4	; select bank4
  3829  0358  3180  2002  3182   	fcall	__pidataBANK4	;fetch initializer
  3830  035B  00DE               	movwf	__pdataBANK4& (0+127)
  3831  035C  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3832  035E  00DF               	movwf	(__pdataBANK4+1)& (0+127)
  3833  035F                     end_of_initialization:	
  3834                           ;End of C runtime variable initialization code
  3835                           
  3836  035F                     __end_of__initialization:	
  3837  035F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3838  0360  0020               	movlb	0
  3839  0361  3183  2B63         	ljmp	_main	;jump to C main() function
  3840                           
  3841                           	psect	bssCOMMON
  3842  007D                     __pbssCOMMON:	
  3843  007D                     _UQFront:	
  3844  007D                     	ds	1
  3845                           
  3846                           	psect	bssBANK0
  3847  0046                     __pbssBANK0:	
  3848  0046                     _tap_timer:	
  3849  0046                     	ds	4
  3850  004A                     _timer:	
  3851  004A                     	ds	4
  3852  004E                     _UQEnd:	
  3853  004E                     	ds	1
  3854  004F                     _bottomTactile_pressed:	
  3855  004F                     	ds	1
  3856  0050                     _doubleTap_state:	
  3857  0050                     	ds	1
  3858  0051                     _longBypass_down:	
  3859  0051                     	ds	1
  3860  0052                     _longBypass_start:	
  3861  0052                     	ds	1
  3862  0053                     _longBypass_state:	
  3863  0053                     	ds	1
  3864  0054                     _longTap_start:	
  3865  0054                     	ds	1
  3866  0055                     _mode2_state:	
  3867  0055                     	ds	1
  3868  0056                     _modulation_changed:	
  3869  0056                     	ds	1
  3870  0057                     _presetSaveMode:	
  3871  0057                     	ds	1
  3872  0058                     _preset_blink:	
  3873  0058                     	ds	1
  3874  0059                     _suspend_blink:	
  3875  0059                     	ds	1
  3876  005A                     _switchTap_pressed:	
  3877  005A                     	ds	1
  3878  005B                     _topTactile_pressed:	
  3879  005B                     	ds	1
  3880                           
  3881                           	psect	dataBANK0
  3882  005C                     __pdataBANK0:	
  3883  005C                     _delay_time:	
  3884  005C                     	ds	4
  3885  0060                     _bottom_push_state:	
  3886  0060                     	ds	2
  3887  0062                     _long_press_limit:	
  3888  0062                     	ds	2
  3889  0064                     _top_push_state:	
  3890  0064                     	ds	2
  3891  0066                     _blink_rate:	
  3892  0066                     	ds	1
  3893  0067                     _expressionChannel:	
  3894  0067                     	ds	1
  3895  0068                     _longTap_state:	
  3896  0068                     	ds	1
  3897  0069                     _num_taps:	
  3898  0069                     	ds	1
  3899  006A                     _presetChannel:	
  3900  006A                     	ds	1
  3901  006B                     _switchBypass_state:	
  3902  006B                     	ds	1
  3903                           
  3904                           	psect	dataBANK2
  3905  016F                     __pdataBANK2:	
  3906  016F                     _switchTap_state:	
  3907  016F                     	ds	1
  3908                           
  3909                           	psect	bssBANK3
  3910  01A0                     __pbssBANK3:	
  3911  01A0                     _double_timer:	
  3912  01A0                     	ds	4
  3913  01A4                     _mod_timer:	
  3914  01A4                     	ds	4
  3915  01A8                     _sub_timer:	
  3916  01A8                     	ds	4
  3917  01AC                     _knob_1_pos:	
  3918  01AC                     	ds	2
  3919  01AE                     _knob_2_pos:	
  3920  01AE                     	ds	2
  3921  01B0                     _knob_3_pos:	
  3922  01B0                     	ds	2
  3923  01B2                     _knob_4_pos:	
  3924  01B2                     	ds	2
  3925  01B4                     _knob_5_pos:	
  3926  01B4                     	ds	2
  3927  01B6                     _longBypass_timer:	
  3928  01B6                     	ds	2
  3929  01B8                     _longTap_timer:	
  3930  01B8                     	ds	2
  3931  01BA                     _mod_value:	
  3932  01BA                     	ds	2
  3933  01BC                     _switchBypass_pressed:	
  3934  01BC                     	ds	2
  3935  01BE                     _adjust_mod_delay:	
  3936  01BE                     	ds	1
  3937  01BF                     _bypass_turning_on:	
  3938  01BF                     	ds	1
  3939  01C0                     _iCnt:	
  3940  01C0                     	ds	1
  3941  01C1                     _longBypass_save:	
  3942  01C1                     	ds	1
  3943  01C2                     _mode1_state:	
  3944  01C2                     	ds	1
  3945  01C3                     _preset_programmning_on:	
  3946  01C3                     	ds	1
  3947  01C4                     _reset_sub_delay:	
  3948  01C4                     	ds	1
  3949  01C5                     _switchTap_down:	
  3950  01C5                     	ds	1
  3951                           
  3952                           	psect	dataBANK3
  3953  01C6                     __pdataBANK3:	
  3954  01C6                     _baseline_mod_time:	
  3955  01C6                     	ds	4
  3956  01CA                     _blink_delay:	
  3957  01CA                     	ds	2
  3958  01CC                     _knob1_prev:	
  3959  01CC                     	ds	2
  3960  01CE                     _knob2_prev:	
  3961  01CE                     	ds	2
  3962  01D0                     _knob3_prev:	
  3963  01D0                     	ds	2
  3964  01D2                     _knob4_prev:	
  3965  01D2                     	ds	2
  3966  01D4                     _knob5_prev:	
  3967  01D4                     	ds	2
  3968  01D6                     _mod_delay_time:	
  3969  01D6                     	ds	2
  3970  01D8                     _symmetry:	
  3971  01D8                     	ds	2
  3972  01DA                     _tap_iteration:	
  3973  01DA                     	ds	2
  3974  01DC                     _blink_state:	
  3975  01DC                     	ds	1
  3976  01DD                     _currentBypassState:	
  3977  01DD                     	ds	1
  3978  01DE                     _expSwitchState:	
  3979  01DE                     	ds	1
  3980  01DF                     _expressModeCnst:	
  3981  01DF                     	ds	1
  3982  01E0                     _mod_time_changed:	
  3983  01E0                     	ds	1
  3984  01E1                     _presetModeCnst:	
  3985  01E1                     	ds	1
  3986                           
  3987                           	psect	bssBANK4
  3988  0220                     __pbssBANK4:	
  3989  0220                     _tap_history:	
  3990  0220                     	ds	20
  3991  0234                     USARTWriteInt@F3536:	
  3992  0234                     	ds	5
  3993  0239                     _ledState:	
  3994  0239                     	ds	4
  3995  023D                     _tap_total:	
  3996  023D                     	ds	4
  3997  0241                     _adjusted_pot_value:	
  3998  0241                     	ds	2
  3999  0243                     _debounce_bypass:	
  4000  0243                     	ds	2
  4001  0245                     _debounce_count:	
  4002  0245                     	ds	2
  4003  0247                     _debounce_mode1:	
  4004  0247                     	ds	2
  4005  0249                     _debounce_mode2:	
  4006  0249                     	ds	2
  4007  024B                     _delayfound:	
  4008  024B                     	ds	2
  4009  024D                     _errno:	
  4010  024D                     	ds	2
  4011  024F                     _mod_counter:	
  4012  024F                     	ds	2
  4013  0251                     _switchBypass_toggle:	
  4014  0251                     	ds	2
  4015  0253                     _tmpVal:	
  4016  0253                     	ds	2
  4017                           
  4018                           	psect	dataBANK4
  4019  025E                     __pdataBANK4:	
  4020  025E                     _switchBypass_up:	
  4021  025E                     	ds	2
  4022                           
  4023                           	psect	bssBANK5
  4024  02A0                     __pbssBANK5:	
  4025  02A0                     _tap:	
  4026  02A0                     	ds	44
  4027                           
  4028                           	psect	bssBANK6
  4029  0320                     __pbssBANK6:	
  4030  0320                     _URBuff:	
  4031  0320                     	ds	64
  4032                           
  4033                           	psect	bssBANK7
  4034  03A0                     __pbssBANK7:	
  4035  03A0                     _myBuf:	
  4036  03A0                     	ds	64
  4037                           
  4038                           	psect	clrtext
  4039  2D94                     clear_ram0:	
  4040                           ;	Called with FSR0 containing the base address, and
  4041                           ;	btemp/btemp+1 has the size to clear
  4042                           
  4043  2D94  0064               	clrwdt	;clear the watchdog before getting into this loop
  4044  2D95                     clrloop0:	
  4045  2D95  0180               	clrf	0	;clear RAM location pointed to by FSR
  4046  2D96  3101               	addfsr 0,1
  4047  2D97  3001               	movlw	1
  4048  2D98  02FE               	subwf	126,f
  4049  2D99  3000               	movlw	0
  4050  2D9A  3BFF               	subwfb	127,f
  4051  2D9B  087F               	movf	127,w
  4052  2D9C  047E               	iorwf	126,w
  4053  2D9D  1903               	btfsc	3,2
  4054  2D9E  3400               	retlw	0	;all done for this memory range, return
  4055  2D9F  2D95               	goto	clrloop0	;have we reached the end yet?
  4056                           
  4057                           	psect	inittext
  4058  2D88                     init_ram:	
  4059  2D88  00FE               	movwf	126
  4060  2D89                     initloop:	
  4061  2D89  0012               	moviw fsr0++
  4062  2D8A  001E               	movwi fsr1++
  4063  2D8B  3001               	movlw	1
  4064  2D8C  02FE               	subwf	126,f
  4065  2D8D  3000               	movlw	0
  4066  2D8E  3BFF               	subwfb	127,f
  4067  2D8F  087F               	movf	127,w
  4068  2D90  047E               	iorwf	126,w
  4069  2D91  1903               	btfsc	3,2
  4070  2D92  3400               	retlw	0
  4071  2D93  2D89               	goto	initloop
  4072                           
  4073                           	psect	cstackBANK4
  4074  0255                     __pcstackBANK4:	
  4075  0255                     _main$2832:	
  4076                           
  4077                           ; 3 bytes @ 0x0
  4078  0255                     	ds	3
  4079  0258                     _main$2833:	
  4080                           
  4081                           ; 3 bytes @ 0x3
  4082  0258                     	ds	3
  4083  025B                     _main$2834:	
  4084                           
  4085                           ; 3 bytes @ 0x6
  4086  025B                     	ds	3
  4087                           
  4088                           	psect	cstackBANK3
  4089  01E2                     __pcstackBANK3:	
  4090  01E2                     scaleA100kPot@pwm:	
  4091  01E2                     scaleA10kPot@pwm:	
  4092                           ; 3 bytes @ 0x0
  4093                           
  4094  01E2                     scaleiA10kPot@pwm:	
  4095                           ; 3 bytes @ 0x0
  4096                           
  4097                           
  4098                           ; 3 bytes @ 0x0
  4099  01E2                     	ds	3
  4100  01E5                     _scaleA100kPot$2837:	
  4101  01E5                     _scaleA10kPot$2841:	
  4102                           ; 3 bytes @ 0x3
  4103                           
  4104  01E5                     _scaleiA10kPot$2843:	
  4105                           ; 3 bytes @ 0x3
  4106                           
  4107                           
  4108                           ; 3 bytes @ 0x3
  4109  01E5                     	ds	3
  4110  01E8                     _scaleA100kPot$2838:	
  4111  01E8                     _scaleA10kPot$2842:	
  4112                           ; 3 bytes @ 0x6
  4113                           
  4114  01E8                     _scaleiA10kPot$2844:	
  4115                           ; 3 bytes @ 0x6
  4116                           
  4117                           
  4118                           ; 3 bytes @ 0x6
  4119  01E8                     	ds	3
  4120                           
  4121                           	psect	cstackBANK2
  4122  0120                     __pcstackBANK2:	
  4123  0120                     ?___fttol:	
  4124  0120                     ___fttol@f1:	
  4125                           ; 4 bytes @ 0x0
  4126                           
  4127                           
  4128                           ; 3 bytes @ 0x0
  4129  0120                     	ds	4
  4130  0124                     ??___fttol:	
  4131                           
  4132                           ; 1 bytes @ 0x4
  4133  0124                     	ds	4
  4134  0128                     ___fttol@sign1:	
  4135                           
  4136                           ; 1 bytes @ 0x8
  4137  0128                     	ds	1
  4138  0129                     ___fttol@lval:	
  4139                           
  4140                           ; 4 bytes @ 0x9
  4141  0129                     	ds	4
  4142  012D                     ___fttol@exp1:	
  4143                           
  4144                           ; 1 bytes @ 0xD
  4145  012D                     	ds	1
  4146  012E                     ?_modTri:	
  4147  012E                     ?_modSaw:	
  4148                           ; 2 bytes @ 0xE
  4149                           
  4150  012E                     ?___wmul:	
  4151                           ; 2 bytes @ 0xE
  4152                           
  4153  012E                     ?___altoft:	
  4154                           ; 2 bytes @ 0xE
  4155                           
  4156  012E                     ___wmul@multiplier:	
  4157                           ; 3 bytes @ 0xE
  4158                           
  4159  012E                     modTri@angle:	
  4160                           ; 2 bytes @ 0xE
  4161                           
  4162  012E                     modSaw@angle:	
  4163                           ; 3 bytes @ 0xE
  4164                           
  4165  012E                     ___altoft@c:	
  4166                           ; 3 bytes @ 0xE
  4167                           
  4168                           
  4169                           ; 4 bytes @ 0xE
  4170  012E                     	ds	2
  4171  0130                     ___wmul@multiplicand:	
  4172                           
  4173                           ; 2 bytes @ 0x10
  4174  0130                     	ds	1
  4175  0131                     modTri@inflection:	
  4176  0131                     modSaw@inflection:	
  4177                           ; 3 bytes @ 0x11
  4178                           
  4179                           
  4180                           ; 3 bytes @ 0x11
  4181  0131                     	ds	1
  4182  0132                     ??___altoft:	
  4183  0132                     ___wmul@product:	
  4184                           ; 1 bytes @ 0x12
  4185                           
  4186                           
  4187                           ; 2 bytes @ 0x12
  4188  0132                     	ds	2
  4189  0134                     ?_modSin:	
  4190  0134                     ?_eval_poly:	
  4191                           ; 2 bytes @ 0x14
  4192                           
  4193  0134                     ___altoft@exp:	
  4194                           ; 3 bytes @ 0x14
  4195                           
  4196  0134                     modSin@angle:	
  4197                           ; 1 bytes @ 0x14
  4198                           
  4199  0134                     eval_poly@x:	
  4200                           ; 3 bytes @ 0x14
  4201                           
  4202  0134                     _modTri$2846:	
  4203                           ; 3 bytes @ 0x14
  4204                           
  4205  0134                     _modSaw$2847:	
  4206                           ; 3 bytes @ 0x14
  4207                           
  4208                           
  4209                           ; 3 bytes @ 0x14
  4210  0134                     	ds	1
  4211  0135                     ___altoft@sign:	
  4212                           
  4213                           ; 1 bytes @ 0x15
  4214  0135                     	ds	1
  4215  0136                     ??_getModulationDelayTime:	
  4216  0136                     ?_trunc:	
  4217                           ; 1 bytes @ 0x16
  4218                           
  4219  0136                     ?_floor:	
  4220                           ; 3 bytes @ 0x16
  4221                           
  4222  0136                     trunc@x:	
  4223                           ; 3 bytes @ 0x16
  4224                           
  4225  0136                     floor@x:	
  4226                           ; 3 bytes @ 0x16
  4227                           
  4228                           
  4229                           ; 3 bytes @ 0x16
  4230  0136                     	ds	1
  4231  0137                     eval_poly@d:	
  4232  0137                     modSin@inflection:	
  4233                           ; 2 bytes @ 0x17
  4234                           
  4235  0137                     modTri@shift:	
  4236                           ; 3 bytes @ 0x17
  4237                           
  4238  0137                     _modSaw$2848:	
  4239                           ; 3 bytes @ 0x17
  4240                           
  4241                           
  4242                           ; 3 bytes @ 0x17
  4243  0137                     	ds	2
  4244  0139                     ??_trunc:	
  4245  0139                     ??_floor:	
  4246                           ; 1 bytes @ 0x19
  4247                           
  4248  0139                     eval_poly@n:	
  4249                           ; 1 bytes @ 0x19
  4250                           
  4251                           
  4252                           ; 2 bytes @ 0x19
  4253  0139                     	ds	1
  4254  013A                     ??_modSin:	
  4255  013A                     getModulationDelayTime@subDiv:	
  4256                           ; 1 bytes @ 0x1A
  4257                           
  4258  013A                     modTri@period:	
  4259                           ; 2 bytes @ 0x1A
  4260                           
  4261  013A                     trunc@i:	
  4262                           ; 3 bytes @ 0x1A
  4263                           
  4264  013A                     floor@i:	
  4265                           ; 3 bytes @ 0x1A
  4266                           
  4267  013A                     _modSaw$2849:	
  4268                           ; 3 bytes @ 0x1A
  4269                           
  4270                           
  4271                           ; 3 bytes @ 0x1A
  4272  013A                     	ds	1
  4273  013B                     eval_poly@res:	
  4274                           
  4275                           ; 3 bytes @ 0x1B
  4276  013B                     	ds	1
  4277  013C                     _modSin$2845:	
  4278                           
  4279                           ; 3 bytes @ 0x1C
  4280  013C                     	ds	1
  4281  013D                     modSaw@mod:	
  4282  013D                     trunc@expon:	
  4283                           ; 2 bytes @ 0x1D
  4284                           
  4285  013D                     floor@expon:	
  4286                           ; 2 bytes @ 0x1D
  4287                           
  4288  013D                     modTri@tmpVal:	
  4289                           ; 2 bytes @ 0x1D
  4290                           
  4291                           
  4292                           ; 3 bytes @ 0x1D
  4293  013D                     	ds	1
  4294  013E                     ?_log:	
  4295  013E                     ?_ldexp:	
  4296                           ; 3 bytes @ 0x1E
  4297                           
  4298  013E                     ldexp@value:	
  4299                           ; 3 bytes @ 0x1E
  4300                           
  4301  013E                     log@x:	
  4302                           ; 3 bytes @ 0x1E
  4303                           
  4304                           
  4305                           ; 3 bytes @ 0x1E
  4306  013E                     	ds	1
  4307  013F                     ?_set_subdivision:	
  4308  013F                     ?___ftsub:	
  4309                           ; 2 bytes @ 0x1F
  4310                           
  4311  013F                     set_subdivision@x:	
  4312                           ; 3 bytes @ 0x1F
  4313                           
  4314  013F                     modSin@shift:	
  4315                           ; 2 bytes @ 0x1F
  4316                           
  4317  013F                     modSaw@shift:	
  4318                           ; 3 bytes @ 0x1F
  4319                           
  4320  013F                     ___ftsub@f2:	
  4321                           ; 3 bytes @ 0x1F
  4322                           
  4323                           
  4324                           ; 3 bytes @ 0x1F
  4325  013F                     	ds	2
  4326  0141                     ??_log:	
  4327  0141                     set_subdivision@y:	
  4328                           ; 1 bytes @ 0x21
  4329                           
  4330  0141                     ldexp@newexp:	
  4331                           ; 2 bytes @ 0x21
  4332                           
  4333                           
  4334                           ; 2 bytes @ 0x21
  4335  0141                     	ds	1
  4336  0142                     log@exponent:	
  4337  0142                     modSin@period:	
  4338                           ; 2 bytes @ 0x22
  4339                           
  4340  0142                     modSaw@period:	
  4341                           ; 3 bytes @ 0x22
  4342                           
  4343  0142                     ___ftsub@f1:	
  4344                           ; 3 bytes @ 0x22
  4345                           
  4346                           
  4347                           ; 3 bytes @ 0x22
  4348  0142                     	ds	1
  4349  0143                     ??_set_subdivision:	
  4350  0143                     ??_ldexp:	
  4351                           ; 1 bytes @ 0x23
  4352                           
  4353                           
  4354                           ; 1 bytes @ 0x23
  4355  0143                     	ds	2
  4356  0145                     ?_modSawRev:	
  4357  0145                     ?_sin:	
  4358                           ; 2 bytes @ 0x25
  4359                           
  4360  0145                     modSin@tmpVal:	
  4361                           ; 3 bytes @ 0x25
  4362                           
  4363  0145                     modSawRev@angle:	
  4364                           ; 3 bytes @ 0x25
  4365                           
  4366  0145                     sin@f:	
  4367                           ; 3 bytes @ 0x25
  4368                           
  4369  0145                     _ldexp$2641:	
  4370                           ; 3 bytes @ 0x25
  4371                           
  4372                           
  4373                           ; 3 bytes @ 0x25
  4374  0145                     	ds	1
  4375  0146                     set_subdivision@scalar:	
  4376                           
  4377                           ; 3 bytes @ 0x26
  4378  0146                     	ds	2
  4379  0148                     ??_sin:	
  4380  0148                     ?_modSquare:	
  4381                           ; 1 bytes @ 0x28
  4382                           
  4383  0148                     ?_exp:	
  4384                           ; 2 bytes @ 0x28
  4385                           
  4386  0148                     modSawRev@inflection:	
  4387                           ; 3 bytes @ 0x28
  4388                           
  4389  0148                     modSquare@angle:	
  4390                           ; 3 bytes @ 0x28
  4391                           
  4392  0148                     exp@x:	
  4393                           ; 3 bytes @ 0x28
  4394                           
  4395                           
  4396                           ; 3 bytes @ 0x28
  4397  0148                     	ds	1
  4398  0149                     set_subdivision@tmpX:	
  4399  0149                     sin@y:	
  4400                           ; 2 bytes @ 0x29
  4401                           
  4402                           
  4403                           ; 3 bytes @ 0x29
  4404  0149                     	ds	2
  4405  014B                     ??_modSawRev:	
  4406  014B                     ??_exp:	
  4407                           ; 1 bytes @ 0x2B
  4408                           
  4409  014B                     modSquare@inflection:	
  4410                           ; 1 bytes @ 0x2B
  4411                           
  4412                           
  4413                           ; 3 bytes @ 0x2B
  4414  014B                     	ds	1
  4415  014C                     _sin$2852:	
  4416  014C                     _exp$2853:	
  4417                           ; 3 bytes @ 0x2C
  4418                           
  4419                           
  4420                           ; 3 bytes @ 0x2C
  4421  014C                     	ds	2
  4422  014E                     modSquare@tmpVal:	
  4423                           
  4424                           ; 2 bytes @ 0x2E
  4425  014E                     	ds	1
  4426  014F                     sin@x2:	
  4427  014F                     _exp$2609:	
  4428                           ; 3 bytes @ 0x2F
  4429                           
  4430                           
  4431                           ; 3 bytes @ 0x2F
  4432  014F                     	ds	1
  4433  0150                     ??_updateModulationArray:	
  4434                           
  4435                           ; 1 bytes @ 0x30
  4436  0150                     	ds	2
  4437  0152                     sin@sgn:	
  4438  0152                     exp@exponent:	
  4439                           ; 1 bytes @ 0x32
  4440                           
  4441                           
  4442                           ; 2 bytes @ 0x32
  4443  0152                     	ds	1
  4444  0153                     ??_calcSinArray:	
  4445                           
  4446                           ; 1 bytes @ 0x33
  4447  0153                     	ds	1
  4448  0154                     exp@sign:	
  4449  0154                     updateModulationArray@angleFactor:	
  4450                           ; 1 bytes @ 0x34
  4451                           
  4452                           
  4453                           ; 2 bytes @ 0x34
  4454  0154                     	ds	1
  4455  0155                     ?_pow:	
  4456  0155                     pow@x:	
  4457                           ; 3 bytes @ 0x35
  4458                           
  4459                           
  4460                           ; 3 bytes @ 0x35
  4461  0155                     	ds	1
  4462  0156                     updateModulationArray@subDiv:	
  4463                           
  4464                           ; 2 bytes @ 0x36
  4465  0156                     	ds	1
  4466  0157                     calcSinArray@tmpVal:	
  4467                           
  4468                           ; 3 bytes @ 0x37
  4469  0157                     	ds	1
  4470  0158                     updateModulationArray@thisAngle:	
  4471  0158                     pow@y:	
  4472                           ; 2 bytes @ 0x38
  4473                           
  4474                           
  4475                           ; 3 bytes @ 0x38
  4476  0158                     	ds	2
  4477  015A                     calcSinArray@iAngle:	
  4478  015A                     updateModulationArray@iAngle:	
  4479                           ; 1 bytes @ 0x3A
  4480                           
  4481                           
  4482                           ; 1 bytes @ 0x3A
  4483  015A                     	ds	1
  4484  015B                     ??_pow:	
  4485                           
  4486                           ; 1 bytes @ 0x3B
  4487  015B                     	ds	1
  4488  015C                     _pow$2850:	
  4489                           
  4490                           ; 3 bytes @ 0x3C
  4491  015C                     	ds	3
  4492  015F                     _pow$2851:	
  4493                           
  4494                           ; 3 bytes @ 0x3F
  4495  015F                     	ds	3
  4496  0162                     pow@sign:	
  4497                           
  4498                           ; 1 bytes @ 0x42
  4499  0162                     	ds	1
  4500  0163                     pow@yi:	
  4501                           
  4502                           ; 4 bytes @ 0x43
  4503  0163                     	ds	4
  4504  0167                     ?_scaleA10kPot:	
  4505  0167                     ?_scaleiA10kPot:	
  4506                           ; 2 bytes @ 0x47
  4507                           
  4508  0167                     ?_scaleA100kPot:	
  4509                           ; 2 bytes @ 0x47
  4510                           
  4511  0167                     scaleA100kPot@input:	
  4512                           ; 2 bytes @ 0x47
  4513                           
  4514  0167                     scaleA10kPot@input:	
  4515                           ; 3 bytes @ 0x47
  4516                           
  4517  0167                     scaleiA10kPot@input:	
  4518                           ; 3 bytes @ 0x47
  4519                           
  4520                           
  4521                           ; 3 bytes @ 0x47
  4522  0167                     	ds	3
  4523  016A                     ??_main:	
  4524                           
  4525                           ; 1 bytes @ 0x4A
  4526  016A                     	ds	5
  4527                           
  4528                           	psect	cstackBANK1
  4529  00A0                     __pcstackBANK1:	
  4530  00A0                     ?___ftge:	
  4531  00A0                     ?_set_leds_top:	
  4532                           ; 1 bit 
  4533                           
  4534  00A0                     ?_USARTInit:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  00A0                     ??_ConfigureOscillator:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  00A0                     ??_InitApp:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  00A0                     ??_InitializeTaps:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  00A0                     ??_init_adc:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  00A0                     ??_init_pwm:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  00A0                     ??_init_timer2:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  00A0                     ??_init_timer0:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  00A0                     ?_set_leds_bottom:	
  4559                           ; 1 bytes @ 0x0
  4560                           
  4561  00A0                     ?_setLongBypassState:	
  4562                           ; 1 bytes @ 0x0
  4563                           
  4564  00A0                     ?_setLongTapState:	
  4565                           ; 1 bytes @ 0x0
  4566                           
  4567  00A0                     ?_updateSwitchBypassState:	
  4568                           ; 1 bytes @ 0x0
  4569                           
  4570  00A0                     ?_getModulationSubdivision:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  00A0                     ?_adc_convert:	
  4574                           ; 2 bytes @ 0x0
  4575                           
  4576  00A0                     ?_FLASH_ReadWord:	
  4577                           ; 2 bytes @ 0x0
  4578                           
  4579  00A0                     ?_getSwitchBypassState:	
  4580                           ; 2 bytes @ 0x0
  4581                           
  4582  00A0                     ?___awdiv:	
  4583                           ; 2 bytes @ 0x0
  4584                           
  4585  00A0                     ?___ftpack:	
  4586                           ; 2 bytes @ 0x0
  4587                           
  4588  00A0                     ?_frexp:	
  4589                           ; 3 bytes @ 0x0
  4590                           
  4591  00A0                     ?___lmul:	
  4592                           ; 3 bytes @ 0x0
  4593                           
  4594  00A0                     ?___aldiv:	
  4595                           ; 4 bytes @ 0x0
  4596                           
  4597  00A0                     FLASH_ReadWord@flashAddr:	
  4598                           ; 4 bytes @ 0x0
  4599                           
  4600  00A0                     set_leds_top@x:	
  4601                           ; 2 bytes @ 0x0
  4602                           
  4603  00A0                     set_leds_bottom@x:	
  4604                           ; 2 bytes @ 0x0
  4605                           
  4606  00A0                     updateSwitchBypassState@state:	
  4607                           ; 2 bytes @ 0x0
  4608                           
  4609  00A0                     setLongBypassState@f_state:	
  4610                           ; 2 bytes @ 0x0
  4611                           
  4612  00A0                     setLongTapState@f_state:	
  4613                           ; 2 bytes @ 0x0
  4614                           
  4615  00A0                     USARTInit@baud_rate:	
  4616                           ; 2 bytes @ 0x0
  4617                           
  4618  00A0                     ___awdiv@divisor:	
  4619                           ; 2 bytes @ 0x0
  4620                           
  4621  00A0                     ___ftpack@arg:	
  4622                           ; 2 bytes @ 0x0
  4623                           
  4624  00A0                     ___ftge@ff1:	
  4625                           ; 3 bytes @ 0x0
  4626                           
  4627  00A0                     frexp@value:	
  4628                           ; 3 bytes @ 0x0
  4629                           
  4630  00A0                     ___lmul@multiplier:	
  4631                           ; 3 bytes @ 0x0
  4632                           
  4633  00A0                     ___aldiv@divisor:	
  4634                           ; 4 bytes @ 0x0
  4635                           
  4636                           
  4637                           ; 4 bytes @ 0x0
  4638  00A0                     	ds	1
  4639  00A1                     InitializeTaps@itap:	
  4640                           
  4641                           ; 2 bytes @ 0x1
  4642  00A1                     	ds	1
  4643  00A2                     ??_getModulationSubdivision:	
  4644  00A2                     ??_USARTInit:	
  4645                           ; 1 bytes @ 0x2
  4646                           
  4647  00A2                     ??_adc_convert:	
  4648                           ; 1 bytes @ 0x2
  4649                           
  4650  00A2                     ??_FLASH_ReadWord:	
  4651                           ; 1 bytes @ 0x2
  4652                           
  4653  00A2                     ??_set_leds_bottom:	
  4654                           ; 1 bytes @ 0x2
  4655                           
  4656  00A2                     ??_setLongBypassState:	
  4657                           ; 1 bytes @ 0x2
  4658                           
  4659  00A2                     ??_setLongTapState:	
  4660                           ; 1 bytes @ 0x2
  4661                           
  4662  00A2                     ??_updateSwitchBypassState:	
  4663                           ; 1 bytes @ 0x2
  4664                           
  4665  00A2                     ??_getSwitchBypassState:	
  4666                           ; 1 bytes @ 0x2
  4667                           
  4668  00A2                     FLASH_ReadWord@GIEBitValue:	
  4669                           ; 1 bytes @ 0x2
  4670                           
  4671  00A2                     set_leds_top@ledState:	
  4672                           ; 1 bytes @ 0x2
  4673                           
  4674  00A2                     ___awdiv@dividend:	
  4675                           ; 2 bytes @ 0x2
  4676                           
  4677                           
  4678                           ; 2 bytes @ 0x2
  4679  00A2                     	ds	1
  4680  00A3                     adc_convert@channel:	
  4681  00A3                     ___ftpack@exp:	
  4682                           ; 1 bytes @ 0x3
  4683                           
  4684  00A3                     frexp@eptr:	
  4685                           ; 1 bytes @ 0x3
  4686                           
  4687  00A3                     ___ftge@ff2:	
  4688                           ; 1 bytes @ 0x3
  4689                           
  4690                           
  4691                           ; 3 bytes @ 0x3
  4692  00A3                     	ds	1
  4693  00A4                     ??_set_leds_top:	
  4694  00A4                     ??_ReadSavedSettings:	
  4695                           ; 1 bytes @ 0x4
  4696                           
  4697  00A4                     ??_resetRingLEDs:	
  4698                           ; 1 bytes @ 0x4
  4699                           
  4700  00A4                     ??_setPresetDisplay:	
  4701                           ; 1 bytes @ 0x4
  4702                           
  4703  00A4                     ??_setExpressionDisplay:	
  4704                           ; 1 bytes @ 0x4
  4705                           
  4706  00A4                     ??_frexp:	
  4707                           ; 1 bytes @ 0x4
  4708                           
  4709  00A4                     ??___awdiv:	
  4710                           ; 1 bytes @ 0x4
  4711                           
  4712  00A4                     ___ftpack@sign:	
  4713                           ; 1 bytes @ 0x4
  4714                           
  4715  00A4                     ___lmul@multiplicand:	
  4716                           ; 1 bytes @ 0x4
  4717                           
  4718  00A4                     ___aldiv@dividend:	
  4719                           ; 4 bytes @ 0x4
  4720                           
  4721                           
  4722                           ; 4 bytes @ 0x4
  4723  00A4                     	ds	1
  4724  00A5                     ??___ftpack:	
  4725  00A5                     ___awdiv@counter:	
  4726                           ; 1 bytes @ 0x5
  4727                           
  4728                           
  4729                           ; 1 bytes @ 0x5
  4730  00A5                     	ds	1
  4731  00A6                     ??___ftge:	
  4732  00A6                     setPresetDisplay@ledChannel:	
  4733                           ; 1 bytes @ 0x6
  4734                           
  4735  00A6                     setExpressionDisplay@ledChannel:	
  4736                           ; 1 bytes @ 0x6
  4737                           
  4738  00A6                     ___awdiv@sign:	
  4739                           ; 1 bytes @ 0x6
  4740                           
  4741                           
  4742                           ; 1 bytes @ 0x6
  4743  00A6                     	ds	1
  4744  00A7                     ??_update_mode:	
  4745  00A7                     ??_update_selectMode:	
  4746                           ; 1 bytes @ 0x7
  4747                           
  4748  00A7                     ??_setPedalMode:	
  4749                           ; 1 bytes @ 0x7
  4750                           
  4751  00A7                     ___awdiv@quotient:	
  4752                           ; 1 bytes @ 0x7
  4753                           
  4754                           
  4755                           ; 2 bytes @ 0x7
  4756  00A7                     	ds	1
  4757  00A8                     ??___lmul:	
  4758  00A8                     ??___aldiv:	
  4759                           ; 1 bytes @ 0x8
  4760                           
  4761  00A8                     ?___awtoft:	
  4762                           ; 1 bytes @ 0x8
  4763                           
  4764  00A8                     ?___lltoft:	
  4765                           ; 3 bytes @ 0x8
  4766                           
  4767  00A8                     ___awtoft@c:	
  4768                           ; 3 bytes @ 0x8
  4769                           
  4770  00A8                     ___lmul@product:	
  4771                           ; 2 bytes @ 0x8
  4772                           
  4773  00A8                     ___lltoft@c:	
  4774                           ; 4 bytes @ 0x8
  4775                           
  4776                           
  4777                           ; 4 bytes @ 0x8
  4778  00A8                     	ds	1
  4779  00A9                     ___aldiv@counter:	
  4780                           
  4781                           ; 1 bytes @ 0x9
  4782  00A9                     	ds	1
  4783  00AA                     ___aldiv@sign:	
  4784                           
  4785                           ; 1 bytes @ 0xA
  4786  00AA                     	ds	1
  4787  00AB                     ??___awtoft:	
  4788  00AB                     ___aldiv@quotient:	
  4789                           ; 1 bytes @ 0xB
  4790                           
  4791                           
  4792                           ; 4 bytes @ 0xB
  4793  00AB                     	ds	1
  4794  00AC                     ?_wait_ms:	
  4795  00AC                     ??___lltoft:	
  4796                           ; 1 bytes @ 0xC
  4797                           
  4798  00AC                     wait_ms@timeSec:	
  4799                           ; 1 bytes @ 0xC
  4800                           
  4801                           
  4802                           ; 2 bytes @ 0xC
  4803  00AC                     	ds	1
  4804  00AD                     ___awtoft@sign:	
  4805  00AD                     ___lltoft@exp:	
  4806                           ; 1 bytes @ 0xD
  4807                           
  4808                           
  4809                           ; 1 bytes @ 0xD
  4810  00AD                     	ds	1
  4811  00AE                     ??_wait_ms:	
  4812  00AE                     ?___ftmul:	
  4813                           ; 1 bytes @ 0xE
  4814                           
  4815  00AE                     ___ftmul@f1:	
  4816                           ; 3 bytes @ 0xE
  4817                           
  4818  00AE                     wait_ms@timemsl:	
  4819                           ; 3 bytes @ 0xE
  4820                           
  4821                           
  4822                           ; 4 bytes @ 0xE
  4823  00AE                     	ds	3
  4824  00B1                     ___ftmul@f2:	
  4825                           
  4826                           ; 3 bytes @ 0x11
  4827  00B1                     	ds	1
  4828  00B2                     ??_read_bottom_tactile:	
  4829  00B2                     ??_read_top_tactile:	
  4830                           ; 1 bytes @ 0x12
  4831                           
  4832  00B2                     ??_solidring_tactiles:	
  4833                           ; 1 bytes @ 0x12
  4834                           
  4835  00B2                     ??_ring_tactiles:	
  4836                           ; 1 bytes @ 0x12
  4837                           
  4838  00B2                     ?_setSwitchBypassRelays:	
  4839                           ; 1 bytes @ 0x12
  4840                           
  4841  00B2                     setSwitchBypassRelays@f_state:	
  4842                           ; 1 bytes @ 0x12
  4843                           
  4844                           
  4845                           ; 2 bytes @ 0x12
  4846  00B2                     	ds	1
  4847  00B3                     ring_tactiles@iLed:	
  4848                           
  4849                           ; 2 bytes @ 0x13
  4850  00B3                     	ds	1
  4851  00B4                     ??_setSwitchBypassRelays:	
  4852  00B4                     ??___ftmul:	
  4853                           ; 1 bytes @ 0x14
  4854                           
  4855  00B4                     solidring_tactiles@ring_delay:	
  4856                           ; 1 bytes @ 0x14
  4857                           
  4858                           
  4859                           ; 1 bytes @ 0x14
  4860  00B4                     	ds	1
  4861  00B5                     ring_tactiles@iLed_1533:	
  4862                           
  4863                           ; 2 bytes @ 0x15
  4864  00B5                     	ds	1
  4865  00B6                     ?_setSwitchBypassState:	
  4866  00B6                     setSwitchBypassState@f_state:	
  4867                           ; 1 bytes @ 0x16
  4868                           
  4869                           
  4870                           ; 2 bytes @ 0x16
  4871  00B6                     	ds	1
  4872  00B7                     ??_showSave:	
  4873                           
  4874                           ; 1 bytes @ 0x17
  4875  00B7                     	ds	1
  4876  00B8                     ??_setSwitchBypassState:	
  4877  00B8                     ?_setDoublePressState:	
  4878                           ; 1 bytes @ 0x18
  4879                           
  4880  00B8                     ___ftmul@exp:	
  4881                           ; 1 bytes @ 0x18
  4882                           
  4883  00B8                     setDoublePressState@f_state:	
  4884                           ; 1 bytes @ 0x18
  4885                           
  4886                           
  4887                           ; 2 bytes @ 0x18
  4888  00B8                     	ds	1
  4889  00B9                     ___ftmul@f3_as_product:	
  4890                           
  4891                           ; 3 bytes @ 0x19
  4892  00B9                     	ds	1
  4893  00BA                     ??_initSwitchBypass:	
  4894  00BA                     ??_setDoublePressState:	
  4895                           ; 1 bytes @ 0x1A
  4896                           
  4897  00BA                     initSwitchBypass@initState:	
  4898                           ; 1 bytes @ 0x1A
  4899                           
  4900                           
  4901                           ; 2 bytes @ 0x1A
  4902  00BA                     	ds	2
  4903  00BC                     ??_updateSwitchBypass:	
  4904  00BC                     ??_updateSwitchTap:	
  4905                           ; 1 bytes @ 0x1C
  4906                           
  4907  00BC                     ___ftmul@cntr:	
  4908                           ; 1 bytes @ 0x1C
  4909                           
  4910                           
  4911                           ; 1 bytes @ 0x1C
  4912  00BC                     	ds	1
  4913  00BD                     ___ftmul@sign:	
  4914                           
  4915                           ; 1 bytes @ 0x1D
  4916  00BD                     	ds	1
  4917  00BE                     ?___ftneg:	
  4918  00BE                     ___ftneg@f1:	
  4919                           ; 3 bytes @ 0x1E
  4920                           
  4921                           
  4922                           ; 3 bytes @ 0x1E
  4923  00BE                     	ds	3
  4924  00C1                     ??___ftneg:	
  4925  00C1                     ?___ftadd:	
  4926                           ; 1 bytes @ 0x21
  4927                           
  4928  00C1                     ___ftadd@f1:	
  4929                           ; 3 bytes @ 0x21
  4930                           
  4931                           
  4932                           ; 3 bytes @ 0x21
  4933  00C1                     	ds	1
  4934  00C2                     updateSwitchTap@tapCntDivisor:	
  4935                           
  4936                           ; 2 bytes @ 0x22
  4937  00C2                     	ds	2
  4938  00C4                     updateSwitchTap@iCnt:	
  4939  00C4                     ___ftadd@f2:	
  4940                           ; 1 bytes @ 0x24
  4941                           
  4942                           
  4943                           ; 3 bytes @ 0x24
  4944  00C4                     	ds	3
  4945  00C7                     ??___ftadd:	
  4946                           
  4947                           ; 1 bytes @ 0x27
  4948  00C7                     	ds	4
  4949  00CB                     ___ftadd@sign:	
  4950                           
  4951                           ; 1 bytes @ 0x2B
  4952  00CB                     	ds	1
  4953  00CC                     ___ftadd@exp2:	
  4954                           
  4955                           ; 1 bytes @ 0x2C
  4956  00CC                     	ds	1
  4957  00CD                     ___ftadd@exp1:	
  4958                           
  4959                           ; 1 bytes @ 0x2D
  4960  00CD                     	ds	1
  4961  00CE                     ?___ftdiv:	
  4962  00CE                     ___ftdiv@f2:	
  4963                           ; 3 bytes @ 0x2E
  4964                           
  4965                           
  4966                           ; 3 bytes @ 0x2E
  4967  00CE                     	ds	3
  4968  00D1                     ___ftdiv@f1:	
  4969                           
  4970                           ; 3 bytes @ 0x31
  4971  00D1                     	ds	3
  4972  00D4                     ??___ftdiv:	
  4973                           
  4974                           ; 1 bytes @ 0x34
  4975  00D4                     	ds	4
  4976  00D8                     ___ftdiv@cntr:	
  4977                           
  4978                           ; 1 bytes @ 0x38
  4979  00D8                     	ds	1
  4980  00D9                     ___ftdiv@f3:	
  4981                           
  4982                           ; 3 bytes @ 0x39
  4983  00D9                     	ds	3
  4984  00DC                     ___ftdiv@exp:	
  4985                           
  4986                           ; 1 bytes @ 0x3C
  4987  00DC                     	ds	1
  4988  00DD                     ___ftdiv@sign:	
  4989                           
  4990                           ; 1 bytes @ 0x3D
  4991  00DD                     	ds	1
  4992  00DE                     ?_map:	
  4993  00DE                     map@x:	
  4994                           ; 3 bytes @ 0x3E
  4995                           
  4996                           
  4997                           ; 3 bytes @ 0x3E
  4998  00DE                     	ds	3
  4999  00E1                     map@in_min:	
  5000                           
  5001                           ; 3 bytes @ 0x41
  5002  00E1                     	ds	3
  5003  00E4                     map@in_max:	
  5004                           
  5005                           ; 3 bytes @ 0x44
  5006  00E4                     	ds	3
  5007  00E7                     map@out_min:	
  5008                           
  5009                           ; 3 bytes @ 0x47
  5010  00E7                     	ds	3
  5011  00EA                     map@out_max:	
  5012                           
  5013                           ; 3 bytes @ 0x4A
  5014  00EA                     	ds	3
  5015  00ED                     ??_map:	
  5016  00ED                     _map$2835:	
  5017                           ; 1 bytes @ 0x4D
  5018                           
  5019                           
  5020                           ; 3 bytes @ 0x4D
  5021  00ED                     	ds	3
  5022  00F0                     ??_scaleA10kPot:	
  5023  00F0                     ??_scaleiA10kPot:	
  5024                           ; 1 bytes @ 0x50
  5025                           
  5026  00F0                     ??_scaleA100kPot:	
  5027                           ; 1 bytes @ 0x50
  5028                           
  5029  00F0                     ??_modTri:	
  5030                           ; 1 bytes @ 0x50
  5031                           
  5032  00F0                     ??_modSquare:	
  5033                           ; 1 bytes @ 0x50
  5034                           
  5035  00F0                     ??_modSaw:	
  5036                           ; 1 bytes @ 0x50
  5037                           
  5038  00F0                     ??_eval_poly:	
  5039                           ; 1 bytes @ 0x50
  5040                           
  5041  00F0                     ??___wmul:	
  5042                           ; 1 bytes @ 0x50
  5043                           
  5044  00F0                     ??___ftsub:	
  5045                           ; 1 bytes @ 0x50
  5046                           
  5047                           
  5048                           	psect	cstackCOMMON
  5049  0070                     __pcstackCOMMON:	
  5050                           ; 1 bytes @ 0x50
  5051                           
  5052  0070                     ?_calcSinArray:	
  5053  0070                     ?_updateModulationArray:	
  5054                           ; 1 bytes @ 0x0
  5055                           
  5056  0070                     ?_ConfigureOscillator:	
  5057                           ; 1 bytes @ 0x0
  5058                           
  5059  0070                     ?_InitApp:	
  5060                           ; 1 bytes @ 0x0
  5061                           
  5062  0070                     ?_InitializeTaps:	
  5063                           ; 1 bytes @ 0x0
  5064                           
  5065  0070                     ?_initSwitchBypass:	
  5066                           ; 1 bytes @ 0x0
  5067                           
  5068  0070                     ?_ReadSavedSettings:	
  5069                           ; 1 bytes @ 0x0
  5070                           
  5071  0070                     ?_update_mode:	
  5072                           ; 1 bytes @ 0x0
  5073                           
  5074  0070                     ?_update_selectMode:	
  5075                           ; 1 bytes @ 0x0
  5076                           
  5077  0070                     ?_updateSwitchBypass:	
  5078                           ; 1 bytes @ 0x0
  5079                           
  5080  0070                     ?_updateSwitchTap:	
  5081                           ; 1 bytes @ 0x0
  5082                           
  5083  0070                     ?_read_bottom_tactile:	
  5084                           ; 1 bytes @ 0x0
  5085                           
  5086  0070                     ?_read_top_tactile:	
  5087                           ; 1 bytes @ 0x0
  5088                           
  5089  0070                     ?_getModulationDelayTime:	
  5090                           ; 1 bytes @ 0x0
  5091                           
  5092  0070                     ?_init_adc:	
  5093                           ; 1 bytes @ 0x0
  5094                           
  5095  0070                     ?_init_pwm:	
  5096                           ; 1 bytes @ 0x0
  5097                           
  5098  0070                     ?_init_timer2:	
  5099                           ; 1 bytes @ 0x0
  5100                           
  5101  0070                     ?_init_timer0:	
  5102                           ; 1 bytes @ 0x0
  5103                           
  5104  0070                     ?_solidring_tactiles:	
  5105                           ; 1 bytes @ 0x0
  5106                           
  5107  0070                     ?_ring_tactiles:	
  5108                           ; 1 bytes @ 0x0
  5109                           
  5110  0070                     ?_resetRingLEDs:	
  5111                           ; 1 bytes @ 0x0
  5112                           
  5113  0070                     ?_setPedalMode:	
  5114                           ; 1 bytes @ 0x0
  5115                           
  5116  0070                     ?_setPresetDisplay:	
  5117                           ; 1 bytes @ 0x0
  5118                           
  5119  0070                     ?_setExpressionDisplay:	
  5120                           ; 1 bytes @ 0x0
  5121                           
  5122  0070                     ?_isr:	
  5123                           ; 1 bytes @ 0x0
  5124                           
  5125  0070                     ?_main:	
  5126                           ; 1 bytes @ 0x0
  5127                           
  5128  0070                     ?_showSave:	
  5129                           ; 1 bytes @ 0x0
  5130                           
  5131  0070                     ?i1_set_leds_top:	
  5132                           ; 1 bytes @ 0x0
  5133                           
  5134  0070                     ?i1_getModulationSubdivision:	
  5135                           ; 1 bytes @ 0x0
  5136                           
  5137  0070                     ?i1___awdiv:	
  5138                           ; 2 bytes @ 0x0
  5139                           
  5140  0070                     ?i1___lmul:	
  5141                           ; 2 bytes @ 0x0
  5142                           
  5143  0070                     i1set_leds_top@x:	
  5144                           ; 4 bytes @ 0x0
  5145                           
  5146  0070                     i1___awdiv@divisor:	
  5147                           ; 2 bytes @ 0x0
  5148                           
  5149  0070                     i1___lmul@multiplier:	
  5150                           ; 2 bytes @ 0x0
  5151                           
  5152                           
  5153                           ; 4 bytes @ 0x0
  5154  0070                     	ds	2
  5155  0072                     ??i1_getModulationSubdivision:	
  5156  0072                     i1set_leds_top@ledState:	
  5157                           ; 1 bytes @ 0x2
  5158                           
  5159  0072                     i1___awdiv@dividend:	
  5160                           ; 2 bytes @ 0x2
  5161                           
  5162                           
  5163                           ; 2 bytes @ 0x2
  5164  0072                     	ds	2
  5165  0074                     ??i1_set_leds_top:	
  5166  0074                     ??i1___awdiv:	
  5167                           ; 1 bytes @ 0x4
  5168                           
  5169  0074                     i1___lmul@multiplicand:	
  5170                           ; 1 bytes @ 0x4
  5171                           
  5172                           
  5173                           ; 4 bytes @ 0x4
  5174  0074                     	ds	1
  5175  0075                     i1___awdiv@counter:	
  5176                           
  5177                           ; 1 bytes @ 0x5
  5178  0075                     	ds	1
  5179  0076                     i1___awdiv@sign:	
  5180                           
  5181                           ; 1 bytes @ 0x6
  5182  0076                     	ds	1
  5183  0077                     i1___awdiv@quotient:	
  5184                           
  5185                           ; 2 bytes @ 0x7
  5186  0077                     	ds	1
  5187  0078                     ??i1___lmul:	
  5188  0078                     i1___lmul@product:	
  5189                           ; 1 bytes @ 0x8
  5190                           
  5191                           
  5192                           ; 4 bytes @ 0x8
  5193  0078                     	ds	4
  5194  007C                     ??i1___aldiv:	
  5195                           
  5196                           ; 1 bytes @ 0xC
  5197  007C                     	ds	1
  5198                           
  5199                           	psect	cstackBANK0
  5200  0020                     __pcstackBANK0:	
  5201  0020                     ?i1___aldiv:	
  5202  0020                     i1___aldiv@divisor:	
  5203                           ; 4 bytes @ 0x0
  5204                           
  5205                           
  5206                           ; 4 bytes @ 0x0
  5207  0020                     	ds	4
  5208  0024                     i1___aldiv@dividend:	
  5209                           
  5210                           ; 4 bytes @ 0x4
  5211  0024                     	ds	4
  5212  0028                     i1___aldiv@counter:	
  5213                           
  5214                           ; 1 bytes @ 0x8
  5215  0028                     	ds	1
  5216  0029                     i1___aldiv@sign:	
  5217                           
  5218                           ; 1 bytes @ 0x9
  5219  0029                     	ds	1
  5220  002A                     i1___aldiv@quotient:	
  5221                           
  5222                           ; 4 bytes @ 0xA
  5223  002A                     	ds	4
  5224  002E                     ?_modulation:	
  5225  002E                     modulation@x:	
  5226                           ; 4 bytes @ 0xE
  5227                           
  5228                           
  5229                           ; 4 bytes @ 0xE
  5230  002E                     	ds	4
  5231  0032                     modulation@y:	
  5232                           
  5233                           ; 4 bytes @ 0x12
  5234  0032                     	ds	4
  5235  0036                     ??_modulation:	
  5236                           
  5237                           ; 1 bytes @ 0x16
  5238  0036                     	ds	4
  5239  003A                     ??_isr:	
  5240                           
  5241                           ; 1 bytes @ 0x1A
  5242  003A                     	ds	10
  5243  0044                     isr@tmpModDelay:	
  5244                           
  5245                           ; 2 bytes @ 0x24
  5246  0044                     	ds	2
  5247                           
  5248                           	psect	maintext
  5249  0363                     __pmaintext:	
  5250 ;;
  5251 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5252 ;;
  5253 ;; *************** function _main *****************
  5254 ;; Defined at:
  5255 ;;		line 68 in file "main.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : B1F/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5271 ;;      Temps:          0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5272 ;;      Totals:         0       0       0       5       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5273 ;;Total ram usage:       14 bytes
  5274 ;; Hardware stack levels required when called:    9
  5275 ;; This function calls:
  5276 ;;		_ConfigureOscillator
  5277 ;;		_InitApp
  5278 ;;		_InitializeTaps
  5279 ;;		_ReadSavedSettings
  5280 ;;		_USARTInit
  5281 ;;		___awtoft
  5282 ;;		___fttol
  5283 ;;		_adc_convert
  5284 ;;		_calcSinArray
  5285 ;;		_getModulationDelayTime
  5286 ;;		_initSwitchBypass
  5287 ;;		_map
  5288 ;;		_read_bottom_tactile
  5289 ;;		_read_top_tactile
  5290 ;;		_scaleA100kPot
  5291 ;;		_scaleA10kPot
  5292 ;;		_scaleiA10kPot
  5293 ;;		_set_subdivision
  5294 ;;		_updateModulationArray
  5295 ;;		_updateSwitchBypass
  5296 ;;		_updateSwitchTap
  5297 ;;		_update_mode
  5298 ;;		_update_selectMode
  5299 ;; This function is called by:
  5300 ;;		Startup code after reset
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _main
  5306  0363                     _main:	
  5307                           
  5308                           ;main.c: 70: calcSinArray();
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5312  0363  31A7  277F  3183   	fcall	_calcSinArray
  5313                           
  5314                           ;main.c: 72: delay_time = 2600;
  5315  0366  3000               	movlw	0
  5316  0367  0020               	movlb	0	; select bank0
  5317  0368  00DF               	movwf	_delay_time+3	;volatile
  5318  0369  3000               	movlw	0
  5319  036A  00DE               	movwf	_delay_time+2	;volatile
  5320  036B  300A               	movlw	10
  5321  036C  00DD               	movwf	_delay_time+1	;volatile
  5322  036D  3028               	movlw	40
  5323  036E  00DC               	movwf	_delay_time	;volatile
  5324                           
  5325                           ;main.c: 73: updateModulationArray();
  5326  036F  318D  25DD  3183   	fcall	_updateModulationArray
  5327                           
  5328                           ;main.c: 74: __nop();
  5329  0372  0000               	nop
  5330                           
  5331                           ;main.c: 83: USARTInit(31250);
  5332  0373  3012               	movlw	18
  5333  0374  0021               	movlb	1	; select bank1
  5334  0375  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5335  0376  307A               	movlw	122
  5336  0377  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5337  0378  31A2  22E3  3183   	fcall	_USARTInit
  5338                           
  5339                           ;main.c: 84: ConfigureOscillator();
  5340  037B  31AD  255D  3183   	fcall	_ConfigureOscillator
  5341                           
  5342                           ;main.c: 85: InitApp();
  5343  037E  31AF  2770  3183   	fcall	_InitApp
  5344                           
  5345                           ;main.c: 87: PORTEbits.RE0 = 1;
  5346  0381  0020               	movlb	0	; select bank0
  5347  0382  1410               	bsf	16,0	;volatile
  5348                           
  5349                           ;main.c: 88: PORTEbits.RE1 = 1;
  5350  0383  1490               	bsf	16,1	;volatile
  5351                           
  5352                           ;main.c: 89: PORTDbits.RD6 = 1;
  5353  0384  170F               	bsf	15,6	;volatile
  5354                           
  5355                           ;main.c: 90: PORTDbits.RD5 = 1;
  5356  0385  168F               	bsf	15,5	;volatile
  5357                           
  5358                           ;main.c: 91: PORTCbits.RC0 = 1;
  5359  0386  140E               	bsf	14,0	;volatile
  5360                           
  5361                           ;main.c: 92: PORTDbits.RD7 = 1;
  5362  0387  178F               	bsf	15,7	;volatile
  5363                           
  5364                           ;main.c: 94: InitializeTaps();
  5365  0388  3190  2000  3183   	fcall	_InitializeTaps
  5366                           
  5367                           ;main.c: 95: initSwitchBypass();
  5368  038B  31AD  25A0  3183   	fcall	_initSwitchBypass
  5369                           
  5370                           ;main.c: 98: ReadSavedSettings();
  5371  038E  31A7  2709  3183   	fcall	_ReadSavedSettings
  5372  0391                     L1:	
  5373                           
  5374                           ;main.c: 99: updateModulationArray();
  5375  0391  318D  25DD  3183   	fcall	_updateModulationArray
  5376  0394                     l9255:	
  5377                           ;main.c: 100: while (1) {
  5378                           
  5379                           
  5380                           ;main.c: 103: update_mode();
  5381  0394  31A0  207D  3183   	fcall	_update_mode
  5382                           
  5383                           ;main.c: 104: update_selectMode();
  5384  0397  31A5  25D9  3183   	fcall	_update_selectMode
  5385                           
  5386                           ;main.c: 107: updateSwitchBypass();
  5387  039A  3192  2232  3183   	fcall	_updateSwitchBypass
  5388                           
  5389                           ;main.c: 108: if (presetSaveMode != 1) {
  5390  039D  0020               	movlb	0	; select bank0
  5391  039E  0357               	decf	_presetSaveMode,w
  5392  039F  1903               	btfsc	3,2
  5393  03A0  2BA4               	goto	l9265
  5394                           
  5395                           ;main.c: 109: updateSwitchTap();
  5396  03A1  3189  21FD  3183   	fcall	_updateSwitchTap
  5397  03A4                     l9265:	
  5398                           
  5399                           ;main.c: 110: }
  5400                           ;main.c: 112: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5401  03A4  0020               	movlb	0	; select bank0
  5402  03A5  0357               	decf	_presetSaveMode,w
  5403  03A6  1903               	btfsc	3,2
  5404  03A7  2BB3               	goto	l9271
  5405  03A8  0855               	movf	_mode2_state,w
  5406  03A9  0023               	movlb	3	; select bank3
  5407  03AA  0661               	xorwf	_presetModeCnst^(0+384),w
  5408  03AB  1903               	skipnz
  5409  03AC  2BB3               	goto	l9271
  5410                           
  5411                           ;main.c: 113: read_bottom_tactile();
  5412  03AD  31A3  2326  3183   	fcall	_read_bottom_tactile
  5413                           
  5414                           ;main.c: 114: read_top_tactile();
  5415  03B0  31A4  2447  3183   	fcall	_read_top_tactile
  5416  03B3                     l9271:	
  5417                           
  5418                           ;main.c: 115: }
  5419                           ;main.c: 118: knob_1_pos = adc_convert(0);
  5420  03B3  3000               	movlw	0
  5421  03B4  31AD  25BF  3183   	fcall	_adc_convert
  5422  03B7  0021               	movlb	1	; select bank1
  5423  03B8  0821               	movf	(?_adc_convert+1)^(0+128),w
  5424  03B9  0023               	movlb	3	; select bank3
  5425  03BA  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5426  03BB  0021               	movlb	1	; select bank1
  5427  03BC  0820               	movf	?_adc_convert^(0+128),w
  5428  03BD  0023               	movlb	3	; select bank3
  5429  03BE  00AC               	movwf	_knob_1_pos^(0+384)
  5430                           
  5431                           ;main.c: 119: knob_2_pos = adc_convert(1);
  5432  03BF  3001               	movlw	1
  5433  03C0  31AD  25BF  3183   	fcall	_adc_convert
  5434  03C3  0021               	movlb	1	; select bank1
  5435  03C4  0821               	movf	(?_adc_convert+1)^(0+128),w
  5436  03C5  0023               	movlb	3	; select bank3
  5437  03C6  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5438  03C7  0021               	movlb	1	; select bank1
  5439  03C8  0820               	movf	?_adc_convert^(0+128),w
  5440  03C9  0023               	movlb	3	; select bank3
  5441  03CA  00AE               	movwf	_knob_2_pos^(0+384)
  5442                           
  5443                           ;main.c: 120: knob_3_pos = adc_convert(2);
  5444  03CB  3002               	movlw	2
  5445  03CC  31AD  25BF  3183   	fcall	_adc_convert
  5446  03CF  0021               	movlb	1	; select bank1
  5447  03D0  0821               	movf	(?_adc_convert+1)^(0+128),w
  5448  03D1  0023               	movlb	3	; select bank3
  5449  03D2  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5450  03D3  0021               	movlb	1	; select bank1
  5451  03D4  0820               	movf	?_adc_convert^(0+128),w
  5452  03D5  0023               	movlb	3	; select bank3
  5453  03D6  00B0               	movwf	_knob_3_pos^(0+384)
  5454                           
  5455                           ;main.c: 121: knob_4_pos = adc_convert(3);
  5456  03D7  3003               	movlw	3
  5457  03D8  31AD  25BF  3183   	fcall	_adc_convert
  5458  03DB  0021               	movlb	1	; select bank1
  5459  03DC  0821               	movf	(?_adc_convert+1)^(0+128),w
  5460  03DD  0023               	movlb	3	; select bank3
  5461  03DE  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5462  03DF  0021               	movlb	1	; select bank1
  5463  03E0  0820               	movf	?_adc_convert^(0+128),w
  5464  03E1  0023               	movlb	3	; select bank3
  5465  03E2  00B2               	movwf	_knob_4_pos^(0+384)
  5466                           
  5467                           ;main.c: 122: knob_5_pos = adc_convert(4);
  5468  03E3  3004               	movlw	4
  5469  03E4  31AD  25BF  3183   	fcall	_adc_convert
  5470  03E7  0021               	movlb	1	; select bank1
  5471  03E8  0821               	movf	(?_adc_convert+1)^(0+128),w
  5472  03E9  0023               	movlb	3	; select bank3
  5473  03EA  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5474  03EB  0021               	movlb	1	; select bank1
  5475  03EC  0820               	movf	?_adc_convert^(0+128),w
  5476  03ED  0023               	movlb	3	; select bank3
  5477  03EE  00B4               	movwf	_knob_5_pos^(0+384)
  5478                           
  5479                           ;main.c: 126: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5480  03EF  094C               	comf	_knob1_prev^(0+384),w	;volatile
  5481  03F0  0022               	movlb	2	; select bank2
  5482  03F1  00EA               	movwf	??_main^(0+256)
  5483  03F2  0023               	movlb	3	; select bank3
  5484  03F3  094D               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5485  03F4  0022               	movlb	2	; select bank2
  5486  03F5  00EB               	movwf	(??_main^(0+256)+1)
  5487  03F6  0AEA               	incf	??_main^(0+256),f
  5488  03F7  1903               	skipnz
  5489  03F8  0AEB               	incf	(??_main^(0+256)+1),f
  5490  03F9  0023               	movlb	3	; select bank3
  5491  03FA  082C               	movf	_knob_1_pos^(0+384),w
  5492  03FB  0022               	movlb	2	; select bank2
  5493  03FC  076A               	addwf	??_main^(0+256),w
  5494  03FD  00EC               	movwf	(??_main+2)^(0+256)
  5495  03FE  0023               	movlb	3	; select bank3
  5496  03FF  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5497  0400  0022               	movlb	2	; select bank2
  5498  0401  3D6B               	addwfc	(??_main+1)^(0+256),w
  5499  0402  00ED               	movwf	(??_main+3)^(0+256)
  5500  0403  086D               	movf	(??_main+3)^(0+256),w
  5501  0404  3A80               	xorlw	128
  5502  0405  00EE               	movwf	(??_main+4)^(0+256)
  5503  0406  3080               	movlw	128
  5504  0407  026E               	subwf	(??_main+4)^(0+256),w
  5505  0408  1D03               	skipz
  5506  0409  2C0C               	goto	u10235
  5507  040A  3004               	movlw	4
  5508  040B  026C               	subwf	(??_main+2)^(0+256),w
  5509  040C                     u10235:	
  5510  040C  1803               	skipnc
  5511  040D  2C2E               	goto	l9285
  5512  040E  0023               	movlb	3	; select bank3
  5513  040F  094C               	comf	_knob1_prev^(0+384),w	;volatile
  5514  0410  0022               	movlb	2	; select bank2
  5515  0411  00EA               	movwf	??_main^(0+256)
  5516  0412  0023               	movlb	3	; select bank3
  5517  0413  094D               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5518  0414  0022               	movlb	2	; select bank2
  5519  0415  00EB               	movwf	(??_main^(0+256)+1)
  5520  0416  0AEA               	incf	??_main^(0+256),f
  5521  0417  1903               	skipnz
  5522  0418  0AEB               	incf	(??_main^(0+256)+1),f
  5523  0419  0023               	movlb	3	; select bank3
  5524  041A  082C               	movf	_knob_1_pos^(0+384),w
  5525  041B  0022               	movlb	2	; select bank2
  5526  041C  076A               	addwf	??_main^(0+256),w
  5527  041D  00EC               	movwf	(??_main+2)^(0+256)
  5528  041E  0023               	movlb	3	; select bank3
  5529  041F  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5530  0420  0022               	movlb	2	; select bank2
  5531  0421  3D6B               	addwfc	(??_main+1)^(0+256),w
  5532  0422  00ED               	movwf	(??_main+3)^(0+256)
  5533  0423  086D               	movf	(??_main+3)^(0+256),w
  5534  0424  3A80               	xorlw	128
  5535  0425  00EE               	movwf	(??_main+4)^(0+256)
  5536  0426  307F               	movlw	127
  5537  0427  026E               	subwf	(??_main+4)^(0+256),w
  5538  0428  1D03               	skipz
  5539  0429  2C2C               	goto	u10245
  5540  042A  30FD               	movlw	253
  5541  042B  026C               	subwf	(??_main+2)^(0+256),w
  5542  042C                     u10245:	
  5543  042C  1803               	skipnc
  5544  042D  2C8C               	goto	l9295
  5545  042E                     l9285:	
  5546                           
  5547                           ;main.c: 127: knob1_prev = knob_1_pos;
  5548  042E  0023               	movlb	3	; select bank3
  5549  042F  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5550  0430  00CD               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5551  0431  082C               	movf	_knob_1_pos^(0+384),w
  5552  0432  00CC               	movwf	_knob1_prev^(0+384)	;volatile
  5553                           
  5554                           ;main.c: 128: CCPR4 = scaleA10kPot(knob1_prev);
  5555  0433  084D               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5556  0434  0021               	movlb	1	; select bank1
  5557  0435  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5558  0436  0023               	movlb	3	; select bank3
  5559  0437  084C               	movf	_knob1_prev^(0+384),w	;volatile
  5560  0438  0021               	movlb	1	; select bank1
  5561  0439  00A8               	movwf	___awtoft@c^(0+128)
  5562  043A  31AE  26CF  3183   	fcall	___awtoft
  5563  043D  0021               	movlb	1	; select bank1
  5564  043E  0828               	movf	?___awtoft^(0+128),w
  5565  043F  0024               	movlb	4	; select bank4
  5566  0440  00D5               	movwf	_main$2832^(0+512)
  5567  0441  0021               	movlb	1	; select bank1
  5568  0442  0829               	movf	(?___awtoft+1)^(0+128),w
  5569  0443  0024               	movlb	4	; select bank4
  5570  0444  00D6               	movwf	(_main$2832+1)^(0+512)
  5571  0445  0021               	movlb	1	; select bank1
  5572  0446  082A               	movf	(?___awtoft+2)^(0+128),w
  5573  0447  0024               	movlb	4	; select bank4
  5574  0448  00D7               	movwf	(_main$2832+2)^(0+512)
  5575                           
  5576                           ;main.c: 128: CCPR4 = scaleA10kPot(knob1_prev);
  5577  0449  0855               	movf	_main$2832^(0+512),w
  5578  044A  0022               	movlb	2	; select bank2
  5579  044B  00E7               	movwf	scaleA10kPot@input^(0+256)
  5580  044C  0024               	movlb	4	; select bank4
  5581  044D  0856               	movf	(_main$2832+1)^(0+512),w
  5582  044E  0022               	movlb	2	; select bank2
  5583  044F  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5584  0450  0024               	movlb	4	; select bank4
  5585  0451  0857               	movf	(_main$2832+2)^(0+512),w
  5586  0452  0022               	movlb	2	; select bank2
  5587  0453  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5588  0454  319B  2351  3183   	fcall	_scaleA10kPot
  5589  0457  0022               	movlb	2	; select bank2
  5590  0458  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5591  0459  0026               	movlb	6	; select bank6
  5592  045A  0099               	movwf	25	;volatile
  5593  045B  0022               	movlb	2	; select bank2
  5594  045C  0867               	movf	?_scaleA10kPot^(0+256),w
  5595  045D  0026               	movlb	6	; select bank6
  5596  045E  0098               	movwf	24	;volatile
  5597                           
  5598                           ;main.c: 129: CCPR5 = scaleiA10kPot(knob1_prev);
  5599  045F  0023               	movlb	3	; select bank3
  5600  0460  084D               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5601  0461  0021               	movlb	1	; select bank1
  5602  0462  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5603  0463  0023               	movlb	3	; select bank3
  5604  0464  084C               	movf	_knob1_prev^(0+384),w	;volatile
  5605  0465  0021               	movlb	1	; select bank1
  5606  0466  00A8               	movwf	___awtoft@c^(0+128)
  5607  0467  31AE  26CF  3183   	fcall	___awtoft
  5608  046A  0021               	movlb	1	; select bank1
  5609  046B  0828               	movf	?___awtoft^(0+128),w
  5610  046C  0024               	movlb	4	; select bank4
  5611  046D  00D8               	movwf	_main$2833^(0+512)
  5612  046E  0021               	movlb	1	; select bank1
  5613  046F  0829               	movf	(?___awtoft+1)^(0+128),w
  5614  0470  0024               	movlb	4	; select bank4
  5615  0471  00D9               	movwf	(_main$2833+1)^(0+512)
  5616  0472  0021               	movlb	1	; select bank1
  5617  0473  082A               	movf	(?___awtoft+2)^(0+128),w
  5618  0474  0024               	movlb	4	; select bank4
  5619  0475  00DA               	movwf	(_main$2833+2)^(0+512)
  5620                           
  5621                           ;main.c: 129: CCPR5 = scaleiA10kPot(knob1_prev);
  5622  0476  0858               	movf	_main$2833^(0+512),w
  5623  0477  0022               	movlb	2	; select bank2
  5624  0478  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5625  0479  0024               	movlb	4	; select bank4
  5626  047A  0859               	movf	(_main$2833+1)^(0+512),w
  5627  047B  0022               	movlb	2	; select bank2
  5628  047C  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5629  047D  0024               	movlb	4	; select bank4
  5630  047E  085A               	movf	(_main$2833+2)^(0+512),w
  5631  047F  0022               	movlb	2	; select bank2
  5632  0480  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5633  0481  319D  25C9  3183   	fcall	_scaleiA10kPot
  5634  0484  0022               	movlb	2	; select bank2
  5635  0485  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5636  0486  0026               	movlb	6	; select bank6
  5637  0487  009D               	movwf	29	;volatile
  5638  0488  0022               	movlb	2	; select bank2
  5639  0489  0867               	movf	?_scaleiA10kPot^(0+256),w
  5640  048A  0026               	movlb	6	; select bank6
  5641  048B  009C               	movwf	28	;volatile
  5642  048C                     l9295:	
  5643                           
  5644                           ;main.c: 131: }
  5645                           ;main.c: 135: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5646  048C  0023               	movlb	3	; select bank3
  5647  048D  094E               	comf	_knob2_prev^(0+384),w	;volatile
  5648  048E  0022               	movlb	2	; select bank2
  5649  048F  00EA               	movwf	??_main^(0+256)
  5650  0490  0023               	movlb	3	; select bank3
  5651  0491  094F               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5652  0492  0022               	movlb	2	; select bank2
  5653  0493  00EB               	movwf	(??_main^(0+256)+1)
  5654  0494  0AEA               	incf	??_main^(0+256),f
  5655  0495  1903               	skipnz
  5656  0496  0AEB               	incf	(??_main^(0+256)+1),f
  5657  0497  0023               	movlb	3	; select bank3
  5658  0498  082E               	movf	_knob_2_pos^(0+384),w
  5659  0499  0022               	movlb	2	; select bank2
  5660  049A  076A               	addwf	??_main^(0+256),w
  5661  049B  00EC               	movwf	(??_main+2)^(0+256)
  5662  049C  0023               	movlb	3	; select bank3
  5663  049D  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5664  049E  0022               	movlb	2	; select bank2
  5665  049F  3D6B               	addwfc	(??_main+1)^(0+256),w
  5666  04A0  00ED               	movwf	(??_main+3)^(0+256)
  5667  04A1  086D               	movf	(??_main+3)^(0+256),w
  5668  04A2  3A80               	xorlw	128
  5669  04A3  00EE               	movwf	(??_main+4)^(0+256)
  5670  04A4  3080               	movlw	128
  5671  04A5  026E               	subwf	(??_main+4)^(0+256),w
  5672  04A6  1D03               	skipz
  5673  04A7  2CAA               	goto	u10255
  5674  04A8  3004               	movlw	4
  5675  04A9  026C               	subwf	(??_main+2)^(0+256),w
  5676  04AA                     u10255:	
  5677  04AA  1803               	skipnc
  5678  04AB  2CCC               	goto	l9299
  5679  04AC  0023               	movlb	3	; select bank3
  5680  04AD  094E               	comf	_knob2_prev^(0+384),w	;volatile
  5681  04AE  0022               	movlb	2	; select bank2
  5682  04AF  00EA               	movwf	??_main^(0+256)
  5683  04B0  0023               	movlb	3	; select bank3
  5684  04B1  094F               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5685  04B2  0022               	movlb	2	; select bank2
  5686  04B3  00EB               	movwf	(??_main^(0+256)+1)
  5687  04B4  0AEA               	incf	??_main^(0+256),f
  5688  04B5  1903               	skipnz
  5689  04B6  0AEB               	incf	(??_main^(0+256)+1),f
  5690  04B7  0023               	movlb	3	; select bank3
  5691  04B8  082E               	movf	_knob_2_pos^(0+384),w
  5692  04B9  0022               	movlb	2	; select bank2
  5693  04BA  076A               	addwf	??_main^(0+256),w
  5694  04BB  00EC               	movwf	(??_main+2)^(0+256)
  5695  04BC  0023               	movlb	3	; select bank3
  5696  04BD  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5697  04BE  0022               	movlb	2	; select bank2
  5698  04BF  3D6B               	addwfc	(??_main+1)^(0+256),w
  5699  04C0  00ED               	movwf	(??_main+3)^(0+256)
  5700  04C1  086D               	movf	(??_main+3)^(0+256),w
  5701  04C2  3A80               	xorlw	128
  5702  04C3  00EE               	movwf	(??_main+4)^(0+256)
  5703  04C4  307F               	movlw	127
  5704  04C5  026E               	subwf	(??_main+4)^(0+256),w
  5705  04C6  1D03               	skipz
  5706  04C7  2CCA               	goto	u10265
  5707  04C8  30FD               	movlw	253
  5708  04C9  026C               	subwf	(??_main+2)^(0+256),w
  5709  04CA                     u10265:	
  5710  04CA  1803               	skipnc
  5711  04CB  2D42               	goto	l9309
  5712  04CC                     l9299:	
  5713                           
  5714                           ;main.c: 136: knob2_prev = knob_2_pos;
  5715  04CC  0023               	movlb	3	; select bank3
  5716  04CD  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5717  04CE  00CF               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5718  04CF  082E               	movf	_knob_2_pos^(0+384),w
  5719  04D0  00CE               	movwf	_knob2_prev^(0+384)	;volatile
  5720                           
  5721                           ;main.c: 137: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5722  04D1  094E               	comf	_knob2_prev^(0+384),w	;volatile
  5723  04D2  0022               	movlb	2	; select bank2
  5724  04D3  00EA               	movwf	??_main^(0+256)
  5725  04D4  0023               	movlb	3	; select bank3
  5726  04D5  094F               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5727  04D6  0022               	movlb	2	; select bank2
  5728  04D7  00EB               	movwf	(??_main^(0+256)+1)
  5729  04D8  0AEA               	incf	??_main^(0+256),f
  5730  04D9  1903               	skipnz
  5731  04DA  0AEB               	incf	(??_main^(0+256)+1),f
  5732  04DB  086A               	movf	??_main^(0+256),w
  5733  04DC  3EFF               	addlw	255
  5734  04DD  0021               	movlb	1	; select bank1
  5735  04DE  00A8               	movwf	___awtoft@c^(0+128)
  5736  04DF  3003               	movlw	3
  5737  04E0  0022               	movlb	2	; select bank2
  5738  04E1  3D6B               	addwfc	(??_main+1)^(0+256),w
  5739  04E2  0021               	movlb	1	; select bank1
  5740  04E3  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5741  04E4  31AE  26CF  3183   	fcall	___awtoft
  5742  04E7  0021               	movlb	1	; select bank1
  5743  04E8  0828               	movf	?___awtoft^(0+128),w
  5744  04E9  0024               	movlb	4	; select bank4
  5745  04EA  00DB               	movwf	_main$2834^(0+512)
  5746  04EB  0021               	movlb	1	; select bank1
  5747  04EC  0829               	movf	(?___awtoft+1)^(0+128),w
  5748  04ED  0024               	movlb	4	; select bank4
  5749  04EE  00DC               	movwf	(_main$2834+1)^(0+512)
  5750  04EF  0021               	movlb	1	; select bank1
  5751  04F0  082A               	movf	(?___awtoft+2)^(0+128),w
  5752  04F1  0024               	movlb	4	; select bank4
  5753  04F2  00DD               	movwf	(_main$2834+2)^(0+512)
  5754                           
  5755                           ;main.c: 137: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5756  04F3  085B               	movf	_main$2834^(0+512),w
  5757  04F4  0022               	movlb	2	; select bank2
  5758  04F5  00E7               	movwf	scaleA100kPot@input^(0+256)
  5759  04F6  0024               	movlb	4	; select bank4
  5760  04F7  085C               	movf	(_main$2834+1)^(0+512),w
  5761  04F8  0022               	movlb	2	; select bank2
  5762  04F9  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5763  04FA  0024               	movlb	4	; select bank4
  5764  04FB  085D               	movf	(_main$2834+2)^(0+512),w
  5765  04FC  0022               	movlb	2	; select bank2
  5766  04FD  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5767  04FE  3199  212E  3183   	fcall	_scaleA100kPot
  5768  0501  0022               	movlb	2	; select bank2
  5769  0502  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5770  0503  0025               	movlb	5	; select bank5
  5771  0504  0092               	movwf	18	;volatile
  5772  0505  0022               	movlb	2	; select bank2
  5773  0506  0867               	movf	?_scaleA100kPot^(0+256),w
  5774  0507  0025               	movlb	5	; select bank5
  5775  0508  0091               	movwf	17	;volatile
  5776                           
  5777                           ;main.c: 138: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5778  0509  0023               	movlb	3	; select bank3
  5779  050A  094E               	comf	_knob2_prev^(0+384),w	;volatile
  5780  050B  0022               	movlb	2	; select bank2
  5781  050C  00EA               	movwf	??_main^(0+256)
  5782  050D  0023               	movlb	3	; select bank3
  5783  050E  094F               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5784  050F  0022               	movlb	2	; select bank2
  5785  0510  00EB               	movwf	(??_main^(0+256)+1)
  5786  0511  0AEA               	incf	??_main^(0+256),f
  5787  0512  1903               	skipnz
  5788  0513  0AEB               	incf	(??_main^(0+256)+1),f
  5789  0514  086A               	movf	??_main^(0+256),w
  5790  0515  3EFF               	addlw	255
  5791  0516  0021               	movlb	1	; select bank1
  5792  0517  00A8               	movwf	___awtoft@c^(0+128)
  5793  0518  3003               	movlw	3
  5794  0519  0022               	movlb	2	; select bank2
  5795  051A  3D6B               	addwfc	(??_main+1)^(0+256),w
  5796  051B  0021               	movlb	1	; select bank1
  5797  051C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5798  051D  31AE  26CF  3183   	fcall	___awtoft
  5799  0520  0021               	movlb	1	; select bank1
  5800  0521  0828               	movf	?___awtoft^(0+128),w
  5801  0522  0024               	movlb	4	; select bank4
  5802  0523  00DB               	movwf	_main$2834^(0+512)
  5803  0524  0021               	movlb	1	; select bank1
  5804  0525  0829               	movf	(?___awtoft+1)^(0+128),w
  5805  0526  0024               	movlb	4	; select bank4
  5806  0527  00DC               	movwf	(_main$2834+1)^(0+512)
  5807  0528  0021               	movlb	1	; select bank1
  5808  0529  082A               	movf	(?___awtoft+2)^(0+128),w
  5809  052A  0024               	movlb	4	; select bank4
  5810  052B  00DD               	movwf	(_main$2834+2)^(0+512)
  5811                           
  5812                           ;main.c: 138: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5813  052C  085B               	movf	_main$2834^(0+512),w
  5814  052D  0022               	movlb	2	; select bank2
  5815  052E  00E7               	movwf	scaleA100kPot@input^(0+256)
  5816  052F  0024               	movlb	4	; select bank4
  5817  0530  085C               	movf	(_main$2834+1)^(0+512),w
  5818  0531  0022               	movlb	2	; select bank2
  5819  0532  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5820  0533  0024               	movlb	4	; select bank4
  5821  0534  085D               	movf	(_main$2834+2)^(0+512),w
  5822  0535  0022               	movlb	2	; select bank2
  5823  0536  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5824  0537  3199  212E  3183   	fcall	_scaleA100kPot
  5825  053A  0022               	movlb	2	; select bank2
  5826  053B  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5827  053C  0025               	movlb	5	; select bank5
  5828  053D  0099               	movwf	25	;volatile
  5829  053E  0022               	movlb	2	; select bank2
  5830  053F  0867               	movf	?_scaleA100kPot^(0+256),w
  5831  0540  0025               	movlb	5	; select bank5
  5832  0541  0098               	movwf	24	;volatile
  5833  0542                     l9309:	
  5834                           
  5835                           ;main.c: 139: }
  5836                           ;main.c: 149: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5837  0542  0023               	movlb	3	; select bank3
  5838  0543  0950               	comf	_knob3_prev^(0+384),w	;volatile
  5839  0544  0022               	movlb	2	; select bank2
  5840  0545  00EA               	movwf	??_main^(0+256)
  5841  0546  0023               	movlb	3	; select bank3
  5842  0547  0951               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5843  0548  0022               	movlb	2	; select bank2
  5844  0549  00EB               	movwf	(??_main^(0+256)+1)
  5845  054A  0AEA               	incf	??_main^(0+256),f
  5846  054B  1903               	skipnz
  5847  054C  0AEB               	incf	(??_main^(0+256)+1),f
  5848  054D  0023               	movlb	3	; select bank3
  5849  054E  0830               	movf	_knob_3_pos^(0+384),w
  5850  054F  0022               	movlb	2	; select bank2
  5851  0550  076A               	addwf	??_main^(0+256),w
  5852  0551  00EC               	movwf	(??_main+2)^(0+256)
  5853  0552  0023               	movlb	3	; select bank3
  5854  0553  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5855  0554  0022               	movlb	2	; select bank2
  5856  0555  3D6B               	addwfc	(??_main+1)^(0+256),w
  5857  0556  00ED               	movwf	(??_main+3)^(0+256)
  5858  0557  086D               	movf	(??_main+3)^(0+256),w
  5859  0558  3A80               	xorlw	128
  5860  0559  00EE               	movwf	(??_main+4)^(0+256)
  5861  055A  3080               	movlw	128
  5862  055B  026E               	subwf	(??_main+4)^(0+256),w
  5863  055C  1D03               	skipz
  5864  055D  2D60               	goto	u10275
  5865  055E  3004               	movlw	4
  5866  055F  026C               	subwf	(??_main+2)^(0+256),w
  5867  0560                     u10275:	
  5868  0560  1803               	skipnc
  5869  0561  2D82               	goto	l9313
  5870  0562  0023               	movlb	3	; select bank3
  5871  0563  0950               	comf	_knob3_prev^(0+384),w	;volatile
  5872  0564  0022               	movlb	2	; select bank2
  5873  0565  00EA               	movwf	??_main^(0+256)
  5874  0566  0023               	movlb	3	; select bank3
  5875  0567  0951               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5876  0568  0022               	movlb	2	; select bank2
  5877  0569  00EB               	movwf	(??_main^(0+256)+1)
  5878  056A  0AEA               	incf	??_main^(0+256),f
  5879  056B  1903               	skipnz
  5880  056C  0AEB               	incf	(??_main^(0+256)+1),f
  5881  056D  0023               	movlb	3	; select bank3
  5882  056E  0830               	movf	_knob_3_pos^(0+384),w
  5883  056F  0022               	movlb	2	; select bank2
  5884  0570  076A               	addwf	??_main^(0+256),w
  5885  0571  00EC               	movwf	(??_main+2)^(0+256)
  5886  0572  0023               	movlb	3	; select bank3
  5887  0573  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5888  0574  0022               	movlb	2	; select bank2
  5889  0575  3D6B               	addwfc	(??_main+1)^(0+256),w
  5890  0576  00ED               	movwf	(??_main+3)^(0+256)
  5891  0577  086D               	movf	(??_main+3)^(0+256),w
  5892  0578  3A80               	xorlw	128
  5893  0579  00EE               	movwf	(??_main+4)^(0+256)
  5894  057A  307F               	movlw	127
  5895  057B  026E               	subwf	(??_main+4)^(0+256),w
  5896  057C  1D03               	skipz
  5897  057D  2D80               	goto	u10285
  5898  057E  30FD               	movlw	253
  5899  057F  026C               	subwf	(??_main+2)^(0+256),w
  5900  0580                     u10285:	
  5901  0580  1803               	skipnc
  5902  0581  2DF0               	goto	l9325
  5903  0582                     l9313:	
  5904                           
  5905                           ;main.c: 150: knob3_prev = knob_3_pos;
  5906  0582  0023               	movlb	3	; select bank3
  5907  0583  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5908  0584  00D1               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5909  0585  0830               	movf	_knob_3_pos^(0+384),w
  5910  0586  00D0               	movwf	_knob3_prev^(0+384)	;volatile
  5911                           
  5912                           ;main.c: 151: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5913  0587  3080               	movlw	128
  5914  0588  0021               	movlb	1	; select bank1
  5915  0589  00EA               	movwf	map@out_max^(0+128)
  5916  058A  309D               	movlw	157
  5917  058B  00EB               	movwf	(map@out_max+1)^(0+128)
  5918  058C  3043               	movlw	67
  5919  058D  00EC               	movwf	(map@out_max+2)^(0+128)
  5920  058E  3000               	movlw	0
  5921  058F  00E7               	movwf	map@out_min^(0+128)
  5922  0590  3034               	movlw	52
  5923  0591  00E8               	movwf	(map@out_min+1)^(0+128)
  5924  0592  3042               	movlw	66
  5925  0593  00E9               	movwf	(map@out_min+2)^(0+128)
  5926  0594  30C0               	movlw	192
  5927  0595  00E4               	movwf	map@in_max^(0+128)
  5928  0596  307F               	movlw	127
  5929  0597  00E5               	movwf	(map@in_max+1)^(0+128)
  5930  0598  3044               	movlw	68
  5931  0599  00E6               	movwf	(map@in_max+2)^(0+128)
  5932  059A  3000               	movlw	0
  5933  059B  00E1               	movwf	map@in_min^(0+128)
  5934  059C  3000               	movlw	0
  5935  059D  00E2               	movwf	(map@in_min+1)^(0+128)
  5936  059E  3000               	movlw	0
  5937  059F  00E3               	movwf	(map@in_min+2)^(0+128)
  5938  05A0  0023               	movlb	3	; select bank3
  5939  05A1  0851               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5940  05A2  0021               	movlb	1	; select bank1
  5941  05A3  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5942  05A4  0023               	movlb	3	; select bank3
  5943  05A5  0850               	movf	_knob3_prev^(0+384),w	;volatile
  5944  05A6  0021               	movlb	1	; select bank1
  5945  05A7  00A8               	movwf	___awtoft@c^(0+128)
  5946  05A8  31AE  26CF  3183   	fcall	___awtoft
  5947  05AB  0021               	movlb	1	; select bank1
  5948  05AC  0828               	movf	?___awtoft^(0+128),w
  5949  05AD  00DE               	movwf	map@x^(0+128)
  5950  05AE  0829               	movf	(?___awtoft+1)^(0+128),w
  5951  05AF  00DF               	movwf	(map@x+1)^(0+128)
  5952  05B0  082A               	movf	(?___awtoft+2)^(0+128),w
  5953  05B1  00E0               	movwf	(map@x+2)^(0+128)
  5954  05B2  319A  223A  3183   	fcall	_map
  5955  05B5  0021               	movlb	1	; select bank1
  5956  05B6  085E               	movf	?_map^(0+128),w
  5957  05B7  0022               	movlb	2	; select bank2
  5958  05B8  00A0               	movwf	___fttol@f1^(0+256)
  5959  05B9  0021               	movlb	1	; select bank1
  5960  05BA  085F               	movf	(?_map+1)^(0+128),w
  5961  05BB  0022               	movlb	2	; select bank2
  5962  05BC  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5963  05BD  0021               	movlb	1	; select bank1
  5964  05BE  0860               	movf	(?_map+2)^(0+128),w
  5965  05BF  0022               	movlb	2	; select bank2
  5966  05C0  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5967  05C1  3199  21B3  3183   	fcall	___fttol
  5968  05C4  0022               	movlb	2	; select bank2
  5969  05C5  0821               	movf	(?___fttol^(0+256)+1),w
  5970  05C6  0023               	movlb	3	; select bank3
  5971  05C7  00D9               	movwf	(_symmetry+1)^(0+384)
  5972  05C8  0022               	movlb	2	; select bank2
  5973  05C9  0820               	movf	?___fttol^(0+256),w
  5974  05CA  0023               	movlb	3	; select bank3
  5975  05CB  00D8               	movwf	_symmetry^(0+384)
  5976                           
  5977                           ;main.c: 153: modulation_changed = 1;
  5978  05CC  0020               	movlb	0	; select bank0
  5979  05CD  01D6               	clrf	_modulation_changed
  5980  05CE  0AD6               	incf	_modulation_changed,f
  5981                           
  5982                           ;main.c: 154: if (symmetry > 174 && symmetry < 185) {
  5983  05CF  0023               	movlb	3	; select bank3
  5984  05D0  0859               	movf	(_symmetry+1)^(0+384),w
  5985  05D1  3A80               	xorlw	128
  5986  05D2  0022               	movlb	2	; select bank2
  5987  05D3  00EA               	movwf	??_main^(0+256)
  5988  05D4  3080               	movlw	128
  5989  05D5  026A               	subwf	??_main^(0+256),w
  5990  05D6  1D03               	skipz
  5991  05D7  2DDB               	goto	u10295
  5992  05D8  30AF               	movlw	175
  5993  05D9  0023               	movlb	3	; select bank3
  5994  05DA  0258               	subwf	_symmetry^(0+384),w
  5995  05DB                     u10295:	
  5996  05DB  1C03               	skipc
  5997  05DC  2DEE               	goto	l360
  5998  05DD  0023               	movlb	3	; select bank3
  5999  05DE  0859               	movf	(_symmetry+1)^(0+384),w
  6000  05DF  3A80               	xorlw	128
  6001  05E0  0022               	movlb	2	; select bank2
  6002  05E1  00EA               	movwf	??_main^(0+256)
  6003  05E2  3080               	movlw	128
  6004  05E3  026A               	subwf	??_main^(0+256),w
  6005  05E4  1D03               	skipz
  6006  05E5  2DE9               	goto	u10305
  6007  05E6  30B9               	movlw	185
  6008  05E7  0023               	movlb	3	; select bank3
  6009  05E8  0258               	subwf	_symmetry^(0+384),w
  6010  05E9                     u10305:	
  6011  05E9  1803               	skipnc
  6012  05EA  2DEE               	goto	l360
  6013                           
  6014                           ;main.c: 155: LATBbits.LATB1 = 1;
  6015  05EB  0022               	movlb	2	; select bank2
  6016  05EC  148D               	bsf	13,1	;volatile
  6017                           
  6018                           ;main.c: 156: } else {
  6019  05ED  2DF0               	goto	l9325
  6020  05EE                     l360:	
  6021                           
  6022                           ;main.c: 157: LATBbits.LATB1 = 0;
  6023  05EE  0022               	movlb	2	; select bank2
  6024  05EF  108D               	bcf	13,1	;volatile
  6025  05F0                     l9325:	
  6026                           
  6027                           ;main.c: 158: }
  6028                           ;main.c: 159: }
  6029                           ;main.c: 170: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6030  05F0  0023               	movlb	3	; select bank3
  6031  05F1  0952               	comf	_knob4_prev^(0+384),w	;volatile
  6032  05F2  0022               	movlb	2	; select bank2
  6033  05F3  00EA               	movwf	??_main^(0+256)
  6034  05F4  0023               	movlb	3	; select bank3
  6035  05F5  0953               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6036  05F6  0022               	movlb	2	; select bank2
  6037  05F7  00EB               	movwf	(??_main^(0+256)+1)
  6038  05F8  0AEA               	incf	??_main^(0+256),f
  6039  05F9  1903               	skipnz
  6040  05FA  0AEB               	incf	(??_main^(0+256)+1),f
  6041  05FB  0023               	movlb	3	; select bank3
  6042  05FC  0832               	movf	_knob_4_pos^(0+384),w
  6043  05FD  0022               	movlb	2	; select bank2
  6044  05FE  076A               	addwf	??_main^(0+256),w
  6045  05FF  00EC               	movwf	(??_main+2)^(0+256)
  6046  0600  0023               	movlb	3	; select bank3
  6047  0601  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6048  0602  0022               	movlb	2	; select bank2
  6049  0603  3D6B               	addwfc	(??_main+1)^(0+256),w
  6050  0604  00ED               	movwf	(??_main+3)^(0+256)
  6051  0605  086D               	movf	(??_main+3)^(0+256),w
  6052  0606  3A80               	xorlw	128
  6053  0607  00EE               	movwf	(??_main+4)^(0+256)
  6054  0608  3080               	movlw	128
  6055  0609  026E               	subwf	(??_main+4)^(0+256),w
  6056  060A  1D03               	skipz
  6057  060B  2E0E               	goto	u10315
  6058  060C  3004               	movlw	4
  6059  060D  026C               	subwf	(??_main+2)^(0+256),w
  6060  060E                     u10315:	
  6061  060E  1803               	skipnc
  6062  060F  2E30               	goto	l9329
  6063  0610  0023               	movlb	3	; select bank3
  6064  0611  0952               	comf	_knob4_prev^(0+384),w	;volatile
  6065  0612  0022               	movlb	2	; select bank2
  6066  0613  00EA               	movwf	??_main^(0+256)
  6067  0614  0023               	movlb	3	; select bank3
  6068  0615  0953               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  6069  0616  0022               	movlb	2	; select bank2
  6070  0617  00EB               	movwf	(??_main^(0+256)+1)
  6071  0618  0AEA               	incf	??_main^(0+256),f
  6072  0619  1903               	skipnz
  6073  061A  0AEB               	incf	(??_main^(0+256)+1),f
  6074  061B  0023               	movlb	3	; select bank3
  6075  061C  0832               	movf	_knob_4_pos^(0+384),w
  6076  061D  0022               	movlb	2	; select bank2
  6077  061E  076A               	addwf	??_main^(0+256),w
  6078  061F  00EC               	movwf	(??_main+2)^(0+256)
  6079  0620  0023               	movlb	3	; select bank3
  6080  0621  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6081  0622  0022               	movlb	2	; select bank2
  6082  0623  3D6B               	addwfc	(??_main+1)^(0+256),w
  6083  0624  00ED               	movwf	(??_main+3)^(0+256)
  6084  0625  086D               	movf	(??_main+3)^(0+256),w
  6085  0626  3A80               	xorlw	128
  6086  0627  00EE               	movwf	(??_main+4)^(0+256)
  6087  0628  307F               	movlw	127
  6088  0629  026E               	subwf	(??_main+4)^(0+256),w
  6089  062A  1D03               	skipz
  6090  062B  2E2E               	goto	u10325
  6091  062C  30FD               	movlw	253
  6092  062D  026C               	subwf	(??_main+2)^(0+256),w
  6093  062E                     u10325:	
  6094  062E  1803               	skipnc
  6095  062F  2E81               	goto	l9335
  6096  0630                     l9329:	
  6097                           
  6098                           ;main.c: 171: knob4_prev = knob_4_pos;
  6099  0630  0023               	movlb	3	; select bank3
  6100  0631  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6101  0632  00D3               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6102  0633  0832               	movf	_knob_4_pos^(0+384),w
  6103  0634  00D2               	movwf	_knob4_prev^(0+384)	;volatile
  6104                           
  6105                           ;main.c: 172: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6106  0635  3040               	movlw	64
  6107  0636  0021               	movlb	1	; select bank1
  6108  0637  00EA               	movwf	map@out_max^(0+128)
  6109  0638  3030               	movlw	48
  6110  0639  00EB               	movwf	(map@out_max+1)^(0+128)
  6111  063A  3045               	movlw	69
  6112  063B  00EC               	movwf	(map@out_max+2)^(0+128)
  6113  063C  3000               	movlw	0
  6114  063D  00E7               	movwf	map@out_min^(0+128)
  6115  063E  3034               	movlw	52
  6116  063F  00E8               	movwf	(map@out_min+1)^(0+128)
  6117  0640  3043               	movlw	67
  6118  0641  00E9               	movwf	(map@out_min+2)^(0+128)
  6119  0642  30C0               	movlw	192
  6120  0643  00E4               	movwf	map@in_max^(0+128)
  6121  0644  307F               	movlw	127
  6122  0645  00E5               	movwf	(map@in_max+1)^(0+128)
  6123  0646  3044               	movlw	68
  6124  0647  00E6               	movwf	(map@in_max+2)^(0+128)
  6125  0648  3000               	movlw	0
  6126  0649  00E1               	movwf	map@in_min^(0+128)
  6127  064A  3000               	movlw	0
  6128  064B  00E2               	movwf	(map@in_min+1)^(0+128)
  6129  064C  3000               	movlw	0
  6130  064D  00E3               	movwf	(map@in_min+2)^(0+128)
  6131  064E  0023               	movlb	3	; select bank3
  6132  064F  0853               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6133  0650  0021               	movlb	1	; select bank1
  6134  0651  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6135  0652  0023               	movlb	3	; select bank3
  6136  0653  0852               	movf	_knob4_prev^(0+384),w	;volatile
  6137  0654  0021               	movlb	1	; select bank1
  6138  0655  00A8               	movwf	___awtoft@c^(0+128)
  6139  0656  31AE  26CF  3183   	fcall	___awtoft
  6140  0659  0021               	movlb	1	; select bank1
  6141  065A  0828               	movf	?___awtoft^(0+128),w
  6142  065B  00DE               	movwf	map@x^(0+128)
  6143  065C  0829               	movf	(?___awtoft+1)^(0+128),w
  6144  065D  00DF               	movwf	(map@x+1)^(0+128)
  6145  065E  082A               	movf	(?___awtoft+2)^(0+128),w
  6146  065F  00E0               	movwf	(map@x+2)^(0+128)
  6147  0660  319A  223A  3183   	fcall	_map
  6148  0663  0021               	movlb	1	; select bank1
  6149  0664  085E               	movf	?_map^(0+128),w
  6150  0665  0022               	movlb	2	; select bank2
  6151  0666  00A0               	movwf	___fttol@f1^(0+256)
  6152  0667  0021               	movlb	1	; select bank1
  6153  0668  085F               	movf	(?_map+1)^(0+128),w
  6154  0669  0022               	movlb	2	; select bank2
  6155  066A  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6156  066B  0021               	movlb	1	; select bank1
  6157  066C  0860               	movf	(?_map+2)^(0+128),w
  6158  066D  0022               	movlb	2	; select bank2
  6159  066E  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6160  066F  3199  21B3  3183   	fcall	___fttol
  6161  0672  0022               	movlb	2	; select bank2
  6162  0673  0820               	movf	?___fttol^(0+256),w
  6163  0674  0023               	movlb	3	; select bank3
  6164  0675  00C6               	movwf	_baseline_mod_time^(0+384)	;volatile
  6165  0676  0022               	movlb	2	; select bank2
  6166  0677  0821               	movf	(?___fttol^(0+256)+1),w
  6167  0678  0023               	movlb	3	; select bank3
  6168  0679  00C7               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6169  067A  0D89               	rlf	9,f
  6170  067B  3B89               	subwfb	9,f
  6171  067C  0989               	comf	9,f
  6172  067D  00C8               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6173  067E  00C9               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6174                           
  6175                           ;main.c: 173: mod_time_changed = 1;
  6176  067F  01E0               	clrf	_mod_time_changed^(0+384)
  6177  0680  0AE0               	incf	_mod_time_changed^(0+384),f
  6178  0681                     l9335:	
  6179                           
  6180                           ;main.c: 175: }
  6181                           ;main.c: 178: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6182  0681  0023               	movlb	3	; select bank3
  6183  0682  0954               	comf	_knob5_prev^(0+384),w	;volatile
  6184  0683  0022               	movlb	2	; select bank2
  6185  0684  00EA               	movwf	??_main^(0+256)
  6186  0685  0023               	movlb	3	; select bank3
  6187  0686  0955               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6188  0687  0022               	movlb	2	; select bank2
  6189  0688  00EB               	movwf	(??_main^(0+256)+1)
  6190  0689  0AEA               	incf	??_main^(0+256),f
  6191  068A  1903               	skipnz
  6192  068B  0AEB               	incf	(??_main^(0+256)+1),f
  6193  068C  0023               	movlb	3	; select bank3
  6194  068D  0834               	movf	_knob_5_pos^(0+384),w
  6195  068E  0022               	movlb	2	; select bank2
  6196  068F  076A               	addwf	??_main^(0+256),w
  6197  0690  00EC               	movwf	(??_main+2)^(0+256)
  6198  0691  0023               	movlb	3	; select bank3
  6199  0692  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6200  0693  0022               	movlb	2	; select bank2
  6201  0694  3D6B               	addwfc	(??_main+1)^(0+256),w
  6202  0695  00ED               	movwf	(??_main+3)^(0+256)
  6203  0696  086D               	movf	(??_main+3)^(0+256),w
  6204  0697  3A80               	xorlw	128
  6205  0698  00EE               	movwf	(??_main+4)^(0+256)
  6206  0699  3080               	movlw	128
  6207  069A  026E               	subwf	(??_main+4)^(0+256),w
  6208  069B  1D03               	skipz
  6209  069C  2E9F               	goto	u10335
  6210  069D  3004               	movlw	4
  6211  069E  026C               	subwf	(??_main+2)^(0+256),w
  6212  069F                     u10335:	
  6213  069F  1803               	skipnc
  6214  06A0  2EC1               	goto	l9339
  6215  06A1  0023               	movlb	3	; select bank3
  6216  06A2  0954               	comf	_knob5_prev^(0+384),w	;volatile
  6217  06A3  0022               	movlb	2	; select bank2
  6218  06A4  00EA               	movwf	??_main^(0+256)
  6219  06A5  0023               	movlb	3	; select bank3
  6220  06A6  0955               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6221  06A7  0022               	movlb	2	; select bank2
  6222  06A8  00EB               	movwf	(??_main^(0+256)+1)
  6223  06A9  0AEA               	incf	??_main^(0+256),f
  6224  06AA  1903               	skipnz
  6225  06AB  0AEB               	incf	(??_main^(0+256)+1),f
  6226  06AC  0023               	movlb	3	; select bank3
  6227  06AD  0834               	movf	_knob_5_pos^(0+384),w
  6228  06AE  0022               	movlb	2	; select bank2
  6229  06AF  076A               	addwf	??_main^(0+256),w
  6230  06B0  00EC               	movwf	(??_main+2)^(0+256)
  6231  06B1  0023               	movlb	3	; select bank3
  6232  06B2  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6233  06B3  0022               	movlb	2	; select bank2
  6234  06B4  3D6B               	addwfc	(??_main+1)^(0+256),w
  6235  06B5  00ED               	movwf	(??_main+3)^(0+256)
  6236  06B6  086D               	movf	(??_main+3)^(0+256),w
  6237  06B7  3A80               	xorlw	128
  6238  06B8  00EE               	movwf	(??_main+4)^(0+256)
  6239  06B9  307F               	movlw	127
  6240  06BA  026E               	subwf	(??_main+4)^(0+256),w
  6241  06BB  1D03               	skipz
  6242  06BC  2EBF               	goto	u10345
  6243  06BD  30FD               	movlw	253
  6244  06BE  026C               	subwf	(??_main+2)^(0+256),w
  6245  06BF                     u10345:	
  6246  06BF  1803               	skipnc
  6247  06C0  2F0B               	goto	l9343
  6248  06C1                     l9339:	
  6249                           
  6250                           ;main.c: 179: knob5_prev = knob_5_pos;
  6251  06C1  0023               	movlb	3	; select bank3
  6252  06C2  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6253  06C3  00D5               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6254  06C4  0834               	movf	_knob_5_pos^(0+384),w
  6255  06C5  00D4               	movwf	_knob5_prev^(0+384)	;volatile
  6256                           
  6257                           ;main.c: 180: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6258  06C6  3000               	movlw	0
  6259  06C7  0021               	movlb	1	; select bank1
  6260  06C8  00EA               	movwf	map@out_max^(0+128)
  6261  06C9  3000               	movlw	0
  6262  06CA  00EB               	movwf	(map@out_max+1)^(0+128)
  6263  06CB  3000               	movlw	0
  6264  06CC  00EC               	movwf	(map@out_max+2)^(0+128)
  6265  06CD  3060               	movlw	96
  6266  06CE  00E7               	movwf	map@out_min^(0+128)
  6267  06CF  309F               	movlw	159
  6268  06D0  00E8               	movwf	(map@out_min+1)^(0+128)
  6269  06D1  3044               	movlw	68
  6270  06D2  00E9               	movwf	(map@out_min+2)^(0+128)
  6271  06D3  30C0               	movlw	192
  6272  06D4  00E4               	movwf	map@in_max^(0+128)
  6273  06D5  307F               	movlw	127
  6274  06D6  00E5               	movwf	(map@in_max+1)^(0+128)
  6275  06D7  3044               	movlw	68
  6276  06D8  00E6               	movwf	(map@in_max+2)^(0+128)
  6277  06D9  3000               	movlw	0
  6278  06DA  00E1               	movwf	map@in_min^(0+128)
  6279  06DB  3000               	movlw	0
  6280  06DC  00E2               	movwf	(map@in_min+1)^(0+128)
  6281  06DD  3000               	movlw	0
  6282  06DE  00E3               	movwf	(map@in_min+2)^(0+128)
  6283  06DF  0023               	movlb	3	; select bank3
  6284  06E0  0855               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6285  06E1  0021               	movlb	1	; select bank1
  6286  06E2  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6287  06E3  0023               	movlb	3	; select bank3
  6288  06E4  0854               	movf	_knob5_prev^(0+384),w	;volatile
  6289  06E5  0021               	movlb	1	; select bank1
  6290  06E6  00A8               	movwf	___awtoft@c^(0+128)
  6291  06E7  31AE  26CF  3183   	fcall	___awtoft
  6292  06EA  0021               	movlb	1	; select bank1
  6293  06EB  0828               	movf	?___awtoft^(0+128),w
  6294  06EC  00DE               	movwf	map@x^(0+128)
  6295  06ED  0829               	movf	(?___awtoft+1)^(0+128),w
  6296  06EE  00DF               	movwf	(map@x+1)^(0+128)
  6297  06EF  082A               	movf	(?___awtoft+2)^(0+128),w
  6298  06F0  00E0               	movwf	(map@x+2)^(0+128)
  6299  06F1  319A  223A  3183   	fcall	_map
  6300  06F4  0021               	movlb	1	; select bank1
  6301  06F5  085E               	movf	?_map^(0+128),w
  6302  06F6  0022               	movlb	2	; select bank2
  6303  06F7  00A0               	movwf	___fttol@f1^(0+256)
  6304  06F8  0021               	movlb	1	; select bank1
  6305  06F9  085F               	movf	(?_map+1)^(0+128),w
  6306  06FA  0022               	movlb	2	; select bank2
  6307  06FB  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6308  06FC  0021               	movlb	1	; select bank1
  6309  06FD  0860               	movf	(?_map+2)^(0+128),w
  6310  06FE  0022               	movlb	2	; select bank2
  6311  06FF  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6312  0700  3199  21B3  3183   	fcall	___fttol
  6313  0703  0022               	movlb	2	; select bank2
  6314  0704  0821               	movf	(?___fttol^(0+256)+1),w
  6315  0705  0024               	movlb	4	; select bank4
  6316  0706  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6317  0707  0022               	movlb	2	; select bank2
  6318  0708  0820               	movf	?___fttol^(0+256),w
  6319  0709  0024               	movlb	4	; select bank4
  6320  070A  00C1               	movwf	_adjusted_pot_value^(0+512)
  6321  070B                     l9343:	
  6322                           
  6323                           ;main.c: 181: }
  6324                           ;main.c: 185: if (mod_time_changed == 1) {
  6325  070B  0023               	movlb	3	; select bank3
  6326  070C  0360               	decf	_mod_time_changed^(0+384),w
  6327  070D  1D03               	btfss	3,2
  6328  070E  2F43               	goto	l9353
  6329                           
  6330                           ;main.c: 186: delay_time = baseline_mod_time;
  6331  070F  0849               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6332  0710  0020               	movlb	0	; select bank0
  6333  0711  00DF               	movwf	_delay_time+3	;volatile
  6334  0712  0023               	movlb	3	; select bank3
  6335  0713  0848               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6336  0714  0020               	movlb	0	; select bank0
  6337  0715  00DE               	movwf	_delay_time+2	;volatile
  6338  0716  0023               	movlb	3	; select bank3
  6339  0717  0847               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6340  0718  0020               	movlb	0	; select bank0
  6341  0719  00DD               	movwf	_delay_time+1	;volatile
  6342  071A  0023               	movlb	3	; select bank3
  6343  071B  0846               	movf	_baseline_mod_time^(0+384),w	;volatile
  6344  071C  0020               	movlb	0	; select bank0
  6345  071D  00DC               	movwf	_delay_time	;volatile
  6346                           
  6347                           ;main.c: 187: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6348  071E  0023               	movlb	3	; select bank3
  6349  071F  0847               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6350  0720  0022               	movlb	2	; select bank2
  6351  0721  00C0               	movwf	(set_subdivision@x+1)^(0+256)
  6352  0722  0023               	movlb	3	; select bank3
  6353  0723  0846               	movf	_baseline_mod_time^(0+384),w	;volatile
  6354  0724  0022               	movlb	2	; select bank2
  6355  0725  00BF               	movwf	set_subdivision@x^(0+256)
  6356  0726  0020               	movlb	0	; select bank0
  6357  0727  0865               	movf	_top_push_state+1,w
  6358  0728  0022               	movlb	2	; select bank2
  6359  0729  00C2               	movwf	(set_subdivision@y+1)^(0+256)
  6360  072A  0020               	movlb	0	; select bank0
  6361  072B  0864               	movf	_top_push_state,w
  6362  072C  0022               	movlb	2	; select bank2
  6363  072D  00C1               	movwf	set_subdivision@y^(0+256)
  6364  072E  319E  2674  3183   	fcall	_set_subdivision
  6365  0731  0022               	movlb	2	; select bank2
  6366  0732  083F               	movf	?_set_subdivision^(0+256),w
  6367  0733  0020               	movlb	0	; select bank0
  6368  0734  00DC               	movwf	_delay_time	;volatile
  6369  0735  0022               	movlb	2	; select bank2
  6370  0736  0840               	movf	(?_set_subdivision+1)^(0+256),w
  6371  0737  0020               	movlb	0	; select bank0
  6372  0738  00DD               	movwf	_delay_time+1	;volatile
  6373  0739  0D89               	rlf	9,f
  6374  073A  3B89               	subwfb	9,f
  6375  073B  0989               	comf	9,f
  6376  073C  00DE               	movwf	_delay_time+2	;volatile
  6377  073D  00DF               	movwf	_delay_time+3	;volatile
  6378                           
  6379                           ;main.c: 188: getModulationDelayTime();
  6380  073E  319A  22C5  3183   	fcall	_getModulationDelayTime
  6381                           
  6382                           ;main.c: 189: mod_time_changed = 0;
  6383  0741  0023               	movlb	3	; select bank3
  6384  0742  01E0               	clrf	_mod_time_changed^(0+384)
  6385  0743                     l9353:	
  6386                           
  6387                           ;main.c: 191: }
  6388                           ;main.c: 193: if (modulation_changed == 1 || mod_time_changed == 1) {
  6389  0743  0020               	movlb	0	; select bank0
  6390  0744  0356               	decf	_modulation_changed,w
  6391  0745  1903               	btfsc	3,2
  6392  0746  2B91               	goto	L1
  6393  0747  0023               	movlb	3	; select bank3
  6394  0748  0360               	decf	_mod_time_changed^(0+384),w
  6395  0749  1D03               	btfss	3,2
  6396  074A  2B94               	goto	l9255
  6397  074B  2B91               	goto	L1
  6398  074C                     __end_of_main:	
  6399                           ;main.c: 194: updateModulationArray();
  6400                           
  6401                           
  6402                           	psect	text1
  6403  25D9                     __ptext1:	
  6404 ;; *************** function _update_selectMode *****************
  6405 ;; Defined at:
  6406 ;;		line 139 in file "tactiles.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      void 
  6413 ;; Registers used:
  6414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6422 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6423 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6424 ;;Total ram usage:        1 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    5
  6427 ;; This function calls:
  6428 ;;		_setExpressionDisplay
  6429 ;;		_setPresetDisplay
  6430 ;; This function is called by:
  6431 ;;		_main
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function _update_selectMode
  6437  25D9                     _update_selectMode:	
  6438                           
  6439                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6440                           
  6441                           ;incstack = 0
  6442                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6443  25D9  0020               	movlb	0	; select bank0
  6444  25DA  0855               	movf	_mode2_state,w
  6445  25DB  1D03               	btfss	3,2
  6446  25DC  2DE0               	goto	l998
  6447  25DD  0357               	decf	_presetSaveMode,w
  6448  25DE  1D03               	btfss	3,2
  6449  25DF  0008               	return
  6450  25E0                     l998:	
  6451                           ;tactiles.c: 142: return;
  6452                           
  6453                           
  6454                           ;tactiles.c: 143: }
  6455                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6456  25E0  1B8F               	btfsc	15,7	;volatile
  6457  25E1  2E2E               	goto	l8843
  6458                           
  6459                           ;tactiles.c: 145: debounce_mode1++;
  6460  25E2  3001               	movlw	1
  6461  25E3  0024               	movlb	4	; select bank4
  6462  25E4  07C7               	addwf	_debounce_mode1^(0+512),f
  6463  25E5  3000               	movlw	0
  6464  25E6  3DC8               	addwfc	(_debounce_mode1+1)^(0+512),f
  6465                           
  6466                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6467  25E7  0848               	movf	(_debounce_mode1+1)^(0+512),w
  6468  25E8  3A80               	xorlw	128
  6469  25E9  0021               	movlb	1	; select bank1
  6470  25EA  00A7               	movwf	??_update_selectMode^(0+128)
  6471  25EB  3080               	movlw	128
  6472  25EC  0227               	subwf	??_update_selectMode^(0+128),w
  6473  25ED  1D03               	skipz
  6474  25EE  2DF2               	goto	u9445
  6475  25EF  301A               	movlw	26
  6476  25F0  0024               	movlb	4	; select bank4
  6477  25F1  0247               	subwf	_debounce_mode1^(0+512),w
  6478  25F2                     u9445:	
  6479  25F2  1C03               	skipc
  6480  25F3  0008               	return
  6481                           
  6482                           ;tactiles.c: 147: debounce_mode1 = 25;
  6483  25F4  3019               	movlw	25
  6484  25F5  0024               	movlb	4	; select bank4
  6485  25F6  00C7               	movwf	_debounce_mode1^(0+512)
  6486  25F7  3000               	movlw	0
  6487  25F8  00C8               	movwf	(_debounce_mode1^(0+512)+1)
  6488                           
  6489                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6490  25F9  0020               	movlb	0	; select bank0
  6491  25FA  0855               	movf	_mode2_state,w
  6492  25FB  0023               	movlb	3	; select bank3
  6493  25FC  0661               	xorwf	_presetModeCnst^(0+384),w
  6494  25FD  1903               	skipnz
  6495  25FE  2E03               	goto	l8825
  6496  25FF  0020               	movlb	0	; select bank0
  6497  2600  0357               	decf	_presetSaveMode,w
  6498  2601  1D03               	btfss	3,2
  6499  2602  2E14               	goto	l8833
  6500  2603                     l8825:	
  6501                           
  6502                           ;tactiles.c: 149: presetChannel++;
  6503  2603  3001               	movlw	1
  6504  2604  0021               	movlb	1	; select bank1
  6505  2605  00A7               	movwf	??_update_selectMode^(0+128)
  6506  2606  0827               	movf	??_update_selectMode^(0+128),w
  6507  2607  0020               	movlb	0	; select bank0
  6508  2608  07EA               	addwf	_presetChannel,f
  6509                           
  6510                           ;tactiles.c: 150: if (presetChannel > 10) {
  6511  2609  300B               	movlw	11
  6512  260A  026A               	subwf	_presetChannel,w
  6513  260B  1C03               	skipc
  6514  260C  2E0F               	goto	l8831
  6515                           
  6516                           ;tactiles.c: 151: presetChannel = 1;
  6517  260D  01EA               	clrf	_presetChannel
  6518  260E  0AEA               	incf	_presetChannel,f
  6519  260F                     l8831:	
  6520                           
  6521                           ;tactiles.c: 152: }
  6522                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6523  260F  086A               	movf	_presetChannel,w
  6524  2610  31A0  20B5  31A5   	fcall	_setPresetDisplay
  6525                           
  6526                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6527  2613  2E2A               	goto	l1009
  6528  2614                     l8833:	
  6529  2614  0020               	movlb	0	; select bank0
  6530  2615  0855               	movf	_mode2_state,w
  6531  2616  0023               	movlb	3	; select bank3
  6532  2617  065F               	xorwf	_expressModeCnst^(0+384),w
  6533  2618  1D03               	skipz
  6534  2619  2E2A               	goto	l1009
  6535                           
  6536                           ;tactiles.c: 155: expressionChannel++;
  6537  261A  3001               	movlw	1
  6538  261B  0021               	movlb	1	; select bank1
  6539  261C  00A7               	movwf	??_update_selectMode^(0+128)
  6540  261D  0827               	movf	??_update_selectMode^(0+128),w
  6541  261E  0020               	movlb	0	; select bank0
  6542  261F  07E7               	addwf	_expressionChannel,f
  6543                           
  6544                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6545  2620  3006               	movlw	6
  6546  2621  0267               	subwf	_expressionChannel,w
  6547  2622  1C03               	skipc
  6548  2623  2E26               	goto	l8841
  6549                           
  6550                           ;tactiles.c: 157: expressionChannel = 1;
  6551  2624  01E7               	clrf	_expressionChannel
  6552  2625  0AE7               	incf	_expressionChannel,f
  6553  2626                     l8841:	
  6554                           
  6555                           ;tactiles.c: 158: }
  6556                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6557  2626  0867               	movf	_expressionChannel,w
  6558  2627  31AD  25D2  31A5   	fcall	_setExpressionDisplay
  6559  262A                     l1009:	
  6560                           ;tactiles.c: 160: }
  6561                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6562                           
  6563  262A  0020               	movlb	0	; select bank0
  6564  262B  1B8F               	btfsc	15,7	;volatile
  6565  262C  0008               	return
  6566  262D  2E2A               	goto	l1009
  6567  262E                     l8843:	
  6568                           ;tactiles.c: 168: }
  6569                           ;tactiles.c: 169: }
  6570                           ;tactiles.c: 170: } else {
  6571                           
  6572                           
  6573                           ;tactiles.c: 171: debounce_mode1 = 0;
  6574  262E  0024               	movlb	4	; select bank4
  6575  262F  01C7               	clrf	_debounce_mode1^(0+512)
  6576  2630  01C8               	clrf	(_debounce_mode1+1)^(0+512)
  6577  2631  0008               	return
  6578  2632                     __end_of_update_selectMode:	
  6579                           
  6580                           	psect	text2
  6581  207D                     __ptext2:	
  6582 ;; *************** function _update_mode *****************
  6583 ;; Defined at:
  6584 ;;		line 87 in file "tactiles.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;		None
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      void 
  6591 ;; Registers used:
  6592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6600 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6601 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6602 ;;Total ram usage:        1 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    6
  6605 ;; This function calls:
  6606 ;;		_resetRingLEDs
  6607 ;;		_setPedalMode
  6608 ;; This function is called by:
  6609 ;;		_main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _update_mode
  6615  207D                     _update_mode:	
  6616                           
  6617                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6621  207D  0020               	movlb	0	; select bank0
  6622  207E  180E               	btfsc	14,0	;volatile
  6623  207F  28B1               	goto	l8811
  6624                           
  6625                           ;tactiles.c: 95: debounce_mode2++;
  6626  2080  3001               	movlw	1
  6627  2081  0024               	movlb	4	; select bank4
  6628  2082  07C9               	addwf	_debounce_mode2^(0+512),f
  6629  2083  3000               	movlw	0
  6630  2084  3DCA               	addwfc	(_debounce_mode2+1)^(0+512),f
  6631                           
  6632                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6633  2085  084A               	movf	(_debounce_mode2+1)^(0+512),w
  6634  2086  3A80               	xorlw	128
  6635  2087  0021               	movlb	1	; select bank1
  6636  2088  00A7               	movwf	??_update_mode^(0+128)
  6637  2089  3080               	movlw	128
  6638  208A  0227               	subwf	??_update_mode^(0+128),w
  6639  208B  1D03               	skipz
  6640  208C  2890               	goto	u9375
  6641  208D  301A               	movlw	26
  6642  208E  0024               	movlb	4	; select bank4
  6643  208F  0249               	subwf	_debounce_mode2^(0+512),w
  6644  2090                     u9375:	
  6645  2090  1C03               	skipc
  6646  2091  0008               	return
  6647                           
  6648                           ;tactiles.c: 97: debounce_mode2 = 25;
  6649  2092  3019               	movlw	25
  6650  2093  0024               	movlb	4	; select bank4
  6651  2094  00C9               	movwf	_debounce_mode2^(0+512)
  6652  2095  3000               	movlw	0
  6653  2096  00CA               	movwf	(_debounce_mode2^(0+512)+1)
  6654                           
  6655                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6656  2097  0020               	movlb	0	; select bank0
  6657  2098  0357               	decf	_presetSaveMode,w
  6658  2099  1D03               	btfss	3,2
  6659  209A  28A0               	goto	l8803
  6660                           
  6661                           ;tactiles.c: 100: presetSaveMode = 0;
  6662  209B  01D7               	clrf	_presetSaveMode
  6663                           
  6664                           ;tactiles.c: 101: resetRingLEDs();
  6665  209C  31AD  25EA  31A0   	fcall	_resetRingLEDs
  6666                           
  6667                           ;tactiles.c: 102: } else {
  6668  209F  28AA               	goto	l8809
  6669  20A0                     l8803:	
  6670                           
  6671                           ;tactiles.c: 103: mode2_state++;
  6672  20A0  3001               	movlw	1
  6673  20A1  0021               	movlb	1	; select bank1
  6674  20A2  00A7               	movwf	??_update_mode^(0+128)
  6675  20A3  0827               	movf	??_update_mode^(0+128),w
  6676  20A4  0020               	movlb	0	; select bank0
  6677  20A5  07D5               	addwf	_mode2_state,f
  6678                           
  6679                           ;tactiles.c: 104: if (mode2_state > 2) {
  6680  20A6  3003               	movlw	3
  6681  20A7  0255               	subwf	_mode2_state,w
  6682  20A8  1803               	btfsc	3,0
  6683                           
  6684                           ;tactiles.c: 105: mode2_state = 0;
  6685  20A9  01D5               	clrf	_mode2_state
  6686  20AA                     l8809:	
  6687                           
  6688                           ;tactiles.c: 106: }
  6689                           ;tactiles.c: 107: }
  6690                           ;tactiles.c: 109: setPedalMode();
  6691  20AA  31AE  26F1  31A0   	fcall	_setPedalMode
  6692  20AD                     l983:	
  6693                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6694                           
  6695  20AD  0020               	movlb	0	; select bank0
  6696  20AE  180E               	btfsc	14,0	;volatile
  6697  20AF  0008               	return
  6698  20B0  28AD               	goto	l983
  6699  20B1                     l8811:	
  6700                           ;tactiles.c: 111: }
  6701                           ;tactiles.c: 112: }
  6702                           ;tactiles.c: 113: } else {
  6703                           
  6704                           
  6705                           ;tactiles.c: 114: debounce_mode2 = 0;
  6706  20B1  0024               	movlb	4	; select bank4
  6707  20B2  01C9               	clrf	_debounce_mode2^(0+512)
  6708  20B3  01CA               	clrf	(_debounce_mode2+1)^(0+512)
  6709  20B4  0008               	return
  6710  20B5                     __end_of_update_mode:	
  6711                           
  6712                           	psect	text3
  6713  09FD                     __ptext3:	
  6714 ;; *************** function _updateSwitchTap *****************
  6715 ;; Defined at:
  6716 ;;		line 48 in file "SwitchTap.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6721 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  1    wreg      void 
  6724 ;; Registers used:
  6725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6732 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6733 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6734 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6735 ;;Total ram usage:        9 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    8
  6738 ;; This function calls:
  6739 ;;		___aldiv
  6740 ;;		_setDoublePressState
  6741 ;;		_setLongTapState
  6742 ;; This function is called by:
  6743 ;;		_main
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _updateSwitchTap
  6749  09FD                     _updateSwitchTap:	
  6750                           
  6751                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6755  09FD  0021               	movlb	1	; select bank1
  6756  09FE  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6757                           
  6758                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6759  09FF  0020               	movlb	0	; select bank0
  6760  0A00  1810               	btfsc	16,0	;volatile
  6761  0A01  2A08               	goto	l8967
  6762                           
  6763                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6764  0A02  085A               	movf	_switchTap_pressed,w
  6765  0A03  1903               	btfsc	3,2
  6766  0A04  2A12               	goto	l1406
  6767                           
  6768                           ;SwitchTap.c: 59: switchTap_pressed--;
  6769  0A05  3001               	movlw	1
  6770  0A06  02DA               	subwf	_switchTap_pressed,f
  6771                           
  6772                           ;SwitchTap.c: 60: }
  6773                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6774  0A07  2A12               	goto	l1406
  6775  0A08                     l8967:	
  6776  0A08  3019               	movlw	25
  6777  0A09  025A               	subwf	_switchTap_pressed,w
  6778  0A0A  1803               	skipnc
  6779  0A0B  2A12               	goto	l1406
  6780                           
  6781                           ;SwitchTap.c: 62: switchTap_pressed++;
  6782  0A0C  3001               	movlw	1
  6783  0A0D  0021               	movlb	1	; select bank1
  6784  0A0E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6785  0A0F  083C               	movf	??_updateSwitchTap^(0+128),w
  6786  0A10  0020               	movlb	0	; select bank0
  6787  0A11  07DA               	addwf	_switchTap_pressed,f
  6788  0A12                     l1406:	
  6789                           
  6790                           ;SwitchTap.c: 63: }
  6791                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6792  0A12  085A               	movf	_switchTap_pressed,w
  6793  0A13  1D03               	btfss	3,2
  6794  0A14  2BC7               	goto	l9051
  6795                           
  6796                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6797  0A15  1BC9               	btfsc	_tap_timer+3,7	;volatile
  6798  0A16  2A9C               	goto	l9011
  6799  0A17  0849               	movf	_tap_timer+3,w	;volatile
  6800  0A18  1D03               	btfss	3,2
  6801  0A19  2A23               	goto	l8973
  6802  0A1A  0848               	movf	_tap_timer+2,w	;volatile
  6803  0A1B  1D03               	btfss	3,2
  6804  0A1C  2A23               	goto	l8973
  6805  0A1D  301B               	movlw	27
  6806  0A1E  0246               	subwf	_tap_timer,w	;volatile
  6807  0A1F  3006               	movlw	6
  6808  0A20  3B47               	subwfb	_tap_timer+1,w	;volatile
  6809  0A21  1C03               	btfss	3,0
  6810  0A22  2A9C               	goto	l9011
  6811  0A23                     l8973:	
  6812                           
  6813                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6814  0A23  0023               	movlb	3	; select bank3
  6815  0A24  0345               	decf	_switchTap_down^(0+384),w
  6816  0A25  1903               	btfsc	3,2
  6817  0A26  2A62               	goto	l8989
  6818                           
  6819                           ;SwitchTap.c: 78: switchTap_down = 1;
  6820  0A27  01C5               	clrf	_switchTap_down^(0+384)
  6821  0A28  0AC5               	incf	_switchTap_down^(0+384),f
  6822                           
  6823                           ;SwitchTap.c: 79: tap_timer = 0;
  6824  0A29  3000               	movlw	0
  6825  0A2A  0020               	movlb	0	; select bank0
  6826  0A2B  00C9               	movwf	_tap_timer+3	;volatile
  6827  0A2C  3000               	movlw	0
  6828  0A2D  00C8               	movwf	_tap_timer+2	;volatile
  6829  0A2E  3000               	movlw	0
  6830  0A2F  00C7               	movwf	_tap_timer+1	;volatile
  6831  0A30  3000               	movlw	0
  6832  0A31  00C6               	movwf	_tap_timer	;volatile
  6833                           
  6834                           ;SwitchTap.c: 80: tap_iteration = 1;
  6835  0A32  3001               	movlw	1
  6836  0A33  0023               	movlb	3	; select bank3
  6837  0A34  00DA               	movwf	_tap_iteration^(0+384)
  6838  0A35  3000               	movlw	0
  6839  0A36  00DB               	movwf	(_tap_iteration^(0+384)+1)
  6840                           
  6841                           ;SwitchTap.c: 81: tap_total = 0;
  6842  0A37  3000               	movlw	0
  6843  0A38  0024               	movlb	4	; select bank4
  6844  0A39  00C0               	movwf	(_tap_total+3)^(0+512)
  6845  0A3A  3000               	movlw	0
  6846  0A3B  00BF               	movwf	(_tap_total+2)^(0+512)
  6847  0A3C  3000               	movlw	0
  6848  0A3D  00BE               	movwf	(_tap_total+1)^(0+512)
  6849  0A3E  3000               	movlw	0
  6850  0A3F  00BD               	movwf	_tap_total^(0+512)
  6851                           
  6852                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6853  0A40  0023               	movlb	3	; select bank3
  6854  0A41  01E0               	clrf	_mod_time_changed^(0+384)
  6855                           
  6856                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6857  0A42  0021               	movlb	1	; select bank1
  6858  0A43  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6859  0A44  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6860  0A45                     l8987:	
  6861  0A45  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6862  0A46  0020               	movlb	0	; select bank0
  6863  0A47  0269               	subwf	_num_taps,w
  6864  0A48  1C03               	btfss	3,0
  6865  0A49  2A62               	goto	l8989
  6866                           
  6867                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6868  0A4A  0021               	movlb	1	; select bank1
  6869  0A4B  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6870  0A4C  00BC               	movwf	??_updateSwitchTap^(0+128)
  6871  0A4D  3001               	movlw	1
  6872  0A4E                     u9815:	
  6873  0A4E  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6874  0A4F  3EFF               	addlw	-1
  6875  0A50  1D03               	skipz
  6876  0A51  2A4E               	goto	u9815
  6877  0A52  353C               	lslf	??_updateSwitchTap^(0+128),w
  6878  0A53  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6879  0A54  0086               	movwf	6
  6880  0A55  3002               	movlw	2	; select bank4/5
  6881  0A56  0087               	movwf	7
  6882  0A57  3000               	movlw	0
  6883  0A58  3FC0               	movwi [0]fsr1
  6884  0A59  3000               	movlw	0
  6885  0A5A  3FC1               	movwi [1]fsr1
  6886  0A5B  3FC2               	movwi [2]fsr1
  6887  0A5C  3FC3               	movwi [3]fsr1
  6888  0A5D  3001               	movlw	1
  6889  0A5E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6890  0A5F  083C               	movf	??_updateSwitchTap^(0+128),w
  6891  0A60  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6892  0A61  2A45               	goto	l8987
  6893  0A62                     l8989:	
  6894                           
  6895                           ;SwitchTap.c: 86: }
  6896                           ;SwitchTap.c: 87: }
  6897                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6898  0A62  0020               	movlb	0	; select bank0
  6899  0A63  0854               	movf	_longTap_start,w
  6900  0A64  1D03               	btfss	3,2
  6901  0A65  2A6C               	goto	l8995
  6902                           
  6903                           ;SwitchTap.c: 91: longTap_start = 1;
  6904  0A66  01D4               	clrf	_longTap_start
  6905  0A67  0AD4               	incf	_longTap_start,f
  6906                           
  6907                           ;SwitchTap.c: 92: longTap_state = 0;
  6908  0A68  01E8               	clrf	_longTap_state	;volatile
  6909                           
  6910                           ;SwitchTap.c: 93: longTap_timer = 0;
  6911  0A69  0023               	movlb	3	; select bank3
  6912  0A6A  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  6913  0A6B  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6914  0A6C                     l8995:	
  6915                           
  6916                           ;SwitchTap.c: 94: }
  6917                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6918  0A6C  0020               	movlb	0	; select bank0
  6919  0A6D  0863               	movf	_long_press_limit+1,w
  6920  0A6E  0023               	movlb	3	; select bank3
  6921  0A6F  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6922  0A70  1D03               	skipz
  6923  0A71  2A76               	goto	u9845
  6924  0A72  0020               	movlb	0	; select bank0
  6925  0A73  0862               	movf	_long_press_limit,w
  6926  0A74  0023               	movlb	3	; select bank3
  6927  0A75  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  6928  0A76                     u9845:	
  6929  0A76  1C03               	skipc
  6930  0A77  0008               	return
  6931  0A78  0020               	movlb	0	; select bank0
  6932  0A79  0868               	movf	_longTap_state,w	;volatile
  6933  0A7A  1D03               	btfss	3,2
  6934  0A7B  0008               	return
  6935  0A7C  0850               	movf	_doubleTap_state,w	;volatile
  6936  0A7D  1D03               	btfss	3,2
  6937  0A7E  0008               	return
  6938                           
  6939                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6940  0A7F  0863               	movf	_long_press_limit+1,w
  6941  0A80  0023               	movlb	3	; select bank3
  6942  0A81  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6943  0A82  0020               	movlb	0	; select bank0
  6944  0A83  0862               	movf	_long_press_limit,w
  6945  0A84  0023               	movlb	3	; select bank3
  6946  0A85  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  6947                           
  6948                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6949  0A86  0022               	movlb	2	; select bank2
  6950  0A87  120D               	bcf	13,4	;volatile
  6951                           
  6952                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6953  0A88  0020               	movlb	0	; select bank0
  6954  0A89  0352               	decf	_longBypass_start,w
  6955  0A8A  1903               	btfsc	3,2
  6956  0A8B  2A94               	goto	l9009
  6957                           
  6958                           ;SwitchTap.c: 104: setLongTapState(1);
  6959  0A8C  3001               	movlw	1
  6960  0A8D  0021               	movlb	1	; select bank1
  6961  0A8E  00A0               	movwf	setLongTapState@f_state^(0+128)
  6962  0A8F  3000               	movlw	0
  6963  0A90  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6964  0A91  31AE  2604         	fcall	_setLongTapState
  6965                           
  6966                           ;SwitchTap.c: 105: } else {
  6967  0A93  0008               	return
  6968  0A94                     l9009:	
  6969                           
  6970                           ;SwitchTap.c: 106: setDoublePressState(1);
  6971  0A94  3001               	movlw	1
  6972  0A95  0021               	movlb	1	; select bank1
  6973  0A96  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6974  0A97  3000               	movlw	0
  6975  0A98  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6976  0A99  31A1  21A3         	fcall	_setDoublePressState
  6977                           
  6978                           ;SwitchTap.c: 107: }
  6979                           ;SwitchTap.c: 108: }
  6980                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6981  0A9B  0008               	return
  6982  0A9C                     l9011:	
  6983  0A9C  0020               	movlb	0	; select bank0
  6984  0A9D  1BC9               	btfsc	_tap_timer+3,7	;volatile
  6985  0A9E  2AAB               	goto	l9013
  6986  0A9F  0849               	movf	_tap_timer+3,w	;volatile
  6987  0AA0  1D03               	btfss	3,2
  6988  0AA1  0008               	return
  6989  0AA2  0848               	movf	_tap_timer+2,w	;volatile
  6990  0AA3  1D03               	btfss	3,2
  6991  0AA4  0008               	return
  6992  0AA5  301B               	movlw	27
  6993  0AA6  0246               	subwf	_tap_timer,w	;volatile
  6994  0AA7  3006               	movlw	6
  6995  0AA8  3B47               	subwfb	_tap_timer+1,w	;volatile
  6996  0AA9  1803               	btfsc	3,0
  6997  0AAA  0008               	return
  6998  0AAB                     l9013:	
  6999  0AAB  0868               	movf	_longTap_state,w	;volatile
  7000  0AAC  1D03               	btfss	3,2
  7001  0AAD  0008               	return
  7002  0AAE  0023               	movlb	3	; select bank3
  7003  0AAF  0345               	decf	_switchTap_down^(0+384),w
  7004  0AB0  1903               	btfsc	3,2
  7005  0AB1  0008               	return
  7006                           
  7007                           ;SwitchTap.c: 112: switchTap_down = 1;
  7008  0AB2  01C5               	clrf	_switchTap_down^(0+384)
  7009  0AB3  0AC5               	incf	_switchTap_down^(0+384),f
  7010                           
  7011                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7012  0AB4  0020               	movlb	0	; select bank0
  7013  0AB5  1BC9               	btfsc	_tap_timer+3,7	;volatile
  7014  0AB6  2ACB               	goto	l1420
  7015  0AB7  0849               	movf	_tap_timer+3,w	;volatile
  7016  0AB8  1D03               	btfss	3,2
  7017  0AB9  2AC3               	goto	l9021
  7018  0ABA  0848               	movf	_tap_timer+2,w	;volatile
  7019  0ABB  1D03               	btfss	3,2
  7020  0ABC  2AC3               	goto	l9021
  7021  0ABD  3094               	movlw	148
  7022  0ABE  0246               	subwf	_tap_timer,w	;volatile
  7023  0ABF  3004               	movlw	4
  7024  0AC0  3B47               	subwfb	_tap_timer+1,w	;volatile
  7025  0AC1  1C03               	btfss	3,0
  7026  0AC2  2ACB               	goto	l1420
  7027  0AC3                     l9021:	
  7028                           
  7029                           ;SwitchTap.c: 114: tap_timer = 1172;
  7030  0AC3  3000               	movlw	0
  7031  0AC4  00C9               	movwf	_tap_timer+3	;volatile
  7032  0AC5  3000               	movlw	0
  7033  0AC6  00C8               	movwf	_tap_timer+2	;volatile
  7034  0AC7  3004               	movlw	4
  7035  0AC8  00C7               	movwf	_tap_timer+1	;volatile
  7036  0AC9  3094               	movlw	148
  7037  0ACA  00C6               	movwf	_tap_timer	;volatile
  7038  0ACB                     l1420:	
  7039                           
  7040                           ;SwitchTap.c: 115: }
  7041                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7042  0ACB  0869               	movf	_num_taps,w
  7043  0ACC  0021               	movlb	1	; select bank1
  7044  0ACD  00BC               	movwf	??_updateSwitchTap^(0+128)
  7045  0ACE  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7046  0ACF  083C               	movf	??_updateSwitchTap^(0+128),w
  7047  0AD0  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7048  0AD1  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7049  0AD2  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7050                           
  7051                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7052  0AD3  0023               	movlb	3	; select bank3
  7053  0AD4  085B               	movf	(_tap_iteration+1)^(0+384),w
  7054  0AD5  3A80               	xorlw	128
  7055  0AD6  3C80               	sublw	128
  7056  0AD7  1D03               	skipz
  7057  0AD8  2ADC               	goto	u9925
  7058  0AD9  085A               	movf	_tap_iteration^(0+384),w
  7059  0ADA  0020               	movlb	0	; select bank0
  7060  0ADB  0269               	subwf	_num_taps,w
  7061  0ADC                     u9925:	
  7062  0ADC  1C03               	skipc
  7063  0ADD  2B0E               	goto	l9029
  7064                           
  7065                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7066  0ADE  0020               	movlb	0	; select bank0
  7067  0ADF  0846               	movf	_tap_timer,w	;volatile
  7068  0AE0  0024               	movlb	4	; select bank4
  7069  0AE1  07BD               	addwf	_tap_total^(0+512),f
  7070  0AE2  0020               	movlb	0	; select bank0
  7071  0AE3  0847               	movf	_tap_timer+1,w	;volatile
  7072  0AE4  0024               	movlb	4	; select bank4
  7073  0AE5  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7074  0AE6  0020               	movlb	0	; select bank0
  7075  0AE7  0848               	movf	_tap_timer+2,w	;volatile
  7076  0AE8  0024               	movlb	4	; select bank4
  7077  0AE9  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7078  0AEA  0020               	movlb	0	; select bank0
  7079  0AEB  0849               	movf	_tap_timer+3,w	;volatile
  7080  0AEC  0024               	movlb	4	; select bank4
  7081  0AED  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7082                           
  7083                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7084  0AEE  0023               	movlb	3	; select bank3
  7085  0AEF  085A               	movf	_tap_iteration^(0+384),w
  7086  0AF0  0021               	movlb	1	; select bank1
  7087  0AF1  00BC               	movwf	??_updateSwitchTap^(0+128)
  7088  0AF2  3001               	movlw	1
  7089  0AF3                     u9935:	
  7090  0AF3  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7091  0AF4  3EFF               	addlw	-1
  7092  0AF5  1D03               	skipz
  7093  0AF6  2AF3               	goto	u9935
  7094  0AF7  353C               	lslf	??_updateSwitchTap^(0+128),w
  7095  0AF8  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7096  0AF9  0086               	movwf	6
  7097  0AFA  3002               	movlw	2	; select bank4/5
  7098  0AFB  0087               	movwf	7
  7099  0AFC  0020               	movlb	0	; select bank0
  7100  0AFD  0846               	movf	_tap_timer,w	;volatile
  7101  0AFE  3FC0               	movwi [0]fsr1
  7102  0AFF  0847               	movf	_tap_timer+1,w	;volatile
  7103  0B00  3FC1               	movwi [1]fsr1
  7104  0B01  0848               	movf	_tap_timer+2,w	;volatile
  7105  0B02  3FC2               	movwi [2]fsr1
  7106  0B03  0849               	movf	_tap_timer+3,w	;volatile
  7107  0B04  3FC3               	movwi [3]fsr1
  7108                           
  7109                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7110  0B05  0023               	movlb	3	; select bank3
  7111  0B06  085B               	movf	(_tap_iteration+1)^(0+384),w
  7112  0B07  0021               	movlb	1	; select bank1
  7113  0B08  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7114  0B09  0023               	movlb	3	; select bank3
  7115  0B0A  085A               	movf	_tap_iteration^(0+384),w
  7116  0B0B  0021               	movlb	1	; select bank1
  7117  0B0C  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7118                           
  7119                           ;SwitchTap.c: 122: } else {
  7120  0B0D  2B8A               	goto	l9043
  7121  0B0E                     l9029:	
  7122                           
  7123                           ;SwitchTap.c: 123: tap_total = 0;
  7124  0B0E  3000               	movlw	0
  7125  0B0F  0024               	movlb	4	; select bank4
  7126  0B10  00C0               	movwf	(_tap_total+3)^(0+512)
  7127  0B11  3000               	movlw	0
  7128  0B12  00BF               	movwf	(_tap_total+2)^(0+512)
  7129  0B13  3000               	movlw	0
  7130  0B14  00BE               	movwf	(_tap_total+1)^(0+512)
  7131  0B15  3000               	movlw	0
  7132  0B16  00BD               	movwf	_tap_total^(0+512)
  7133                           
  7134                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7135  0B17  0021               	movlb	1	; select bank1
  7136  0B18  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7137  0B19  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7138  0B1A                     l9037:	
  7139  0B1A  0020               	movlb	0	; select bank0
  7140  0B1B  0869               	movf	_num_taps,w
  7141  0B1C  0021               	movlb	1	; select bank1
  7142  0B1D  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7143  0B1E  1803               	btfsc	3,0
  7144  0B1F  2B64               	goto	l9039
  7145                           
  7146                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7147  0B20  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7148  0B21  00BC               	movwf	??_updateSwitchTap^(0+128)
  7149  0B22  3001               	movlw	1
  7150  0B23                     u9945:	
  7151  0B23  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7152  0B24  3EFF               	addlw	-1
  7153  0B25  1D03               	skipz
  7154  0B26  2B23               	goto	u9945
  7155  0B27  353C               	lslf	??_updateSwitchTap^(0+128),w
  7156  0B28  3E04               	addlw	4
  7157  0B29  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7158  0B2A  0086               	movwf	6
  7159  0B2B  3002               	movlw	2	; select bank4/5
  7160  0B2C  0087               	movwf	7
  7161  0B2D  3F40               	moviw [0]fsr1
  7162  0B2E  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7163  0B2F  3F41               	moviw [1]fsr1
  7164  0B30  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7165  0B31  3F42               	moviw [2]fsr1
  7166  0B32  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7167  0B33  3F43               	moviw [3]fsr1
  7168  0B34  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7169  0B35  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7170  0B36  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7171  0B37  3001               	movlw	1
  7172  0B38                     u9955:	
  7173  0B38  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7174  0B39  3EFF               	addlw	-1
  7175  0B3A  1D03               	skipz
  7176  0B3B  2B38               	goto	u9955
  7177  0B3C  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7178  0B3D  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7179  0B3E  0086               	movwf	6
  7180  0B3F  3002               	movlw	2	; select bank4/5
  7181  0B40  0087               	movwf	7
  7182  0B41  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7183  0B42  3FC0               	movwi [0]fsr1
  7184  0B43  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7185  0B44  3FC1               	movwi [1]fsr1
  7186  0B45  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7187  0B46  3FC2               	movwi [2]fsr1
  7188  0B47  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7189  0B48  3FC3               	movwi [3]fsr1
  7190                           
  7191                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7192  0B49  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7193  0B4A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7194  0B4B  3001               	movlw	1
  7195  0B4C                     u9965:	
  7196  0B4C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7197  0B4D  3EFF               	addlw	-1
  7198  0B4E  1D03               	skipz
  7199  0B4F  2B4C               	goto	u9965
  7200  0B50  353C               	lslf	??_updateSwitchTap^(0+128),w
  7201  0B51  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7202  0B52  0086               	movwf	6
  7203  0B53  3002               	movlw	2	; select bank4/5
  7204  0B54  0087               	movwf	7
  7205  0B55  3F40               	moviw [0]fsr1
  7206  0B56  0024               	movlb	4	; select bank4
  7207  0B57  07BD               	addwf	_tap_total^(0+512),f
  7208  0B58  3F41               	moviw [1]fsr1
  7209  0B59  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7210  0B5A  3F42               	moviw [2]fsr1
  7211  0B5B  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7212  0B5C  3F43               	moviw [3]fsr1
  7213  0B5D  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7214  0B5E  3001               	movlw	1
  7215  0B5F  0021               	movlb	1	; select bank1
  7216  0B60  00BC               	movwf	??_updateSwitchTap^(0+128)
  7217  0B61  083C               	movf	??_updateSwitchTap^(0+128),w
  7218  0B62  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7219  0B63  2B1A               	goto	l9037
  7220  0B64                     l9039:	
  7221                           
  7222                           ;SwitchTap.c: 127: }
  7223                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7224  0B64  0020               	movlb	0	; select bank0
  7225  0B65  0869               	movf	_num_taps,w
  7226  0B66  0021               	movlb	1	; select bank1
  7227  0B67  00BC               	movwf	??_updateSwitchTap^(0+128)
  7228  0B68  3001               	movlw	1
  7229  0B69                     u9985:	
  7230  0B69  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7231  0B6A  3EFF               	addlw	-1
  7232  0B6B  1D03               	skipz
  7233  0B6C  2B69               	goto	u9985
  7234  0B6D  353C               	lslf	??_updateSwitchTap^(0+128),w
  7235  0B6E  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7236  0B6F  0086               	movwf	6
  7237  0B70  3002               	movlw	2	; select bank4/5
  7238  0B71  0087               	movwf	7
  7239  0B72  0020               	movlb	0	; select bank0
  7240  0B73  0846               	movf	_tap_timer,w	;volatile
  7241  0B74  3FC0               	movwi [0]fsr1
  7242  0B75  0847               	movf	_tap_timer+1,w	;volatile
  7243  0B76  3FC1               	movwi [1]fsr1
  7244  0B77  0848               	movf	_tap_timer+2,w	;volatile
  7245  0B78  3FC2               	movwi [2]fsr1
  7246  0B79  0849               	movf	_tap_timer+3,w	;volatile
  7247  0B7A  3FC3               	movwi [3]fsr1
  7248                           
  7249                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7250  0B7B  0846               	movf	_tap_timer,w	;volatile
  7251  0B7C  0024               	movlb	4	; select bank4
  7252  0B7D  07BD               	addwf	_tap_total^(0+512),f
  7253  0B7E  0020               	movlb	0	; select bank0
  7254  0B7F  0847               	movf	_tap_timer+1,w	;volatile
  7255  0B80  0024               	movlb	4	; select bank4
  7256  0B81  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  7257  0B82  0020               	movlb	0	; select bank0
  7258  0B83  0848               	movf	_tap_timer+2,w	;volatile
  7259  0B84  0024               	movlb	4	; select bank4
  7260  0B85  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  7261  0B86  0020               	movlb	0	; select bank0
  7262  0B87  0849               	movf	_tap_timer+3,w	;volatile
  7263  0B88  0024               	movlb	4	; select bank4
  7264  0B89  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  7265  0B8A                     l9043:	
  7266                           
  7267                           ;SwitchTap.c: 130: }
  7268                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  7269  0B8A  0021               	movlb	1	; select bank1
  7270  0B8B  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7271  0B8C  00A0               	movwf	___aldiv@divisor^(0+128)
  7272  0B8D  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7273  0B8E  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7274  0B8F  0D89               	rlf	9,f
  7275  0B90  3B89               	subwfb	9,f
  7276  0B91  0989               	comf	9,f
  7277  0B92  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7278  0B93  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7279  0B94  0024               	movlb	4	; select bank4
  7280  0B95  0840               	movf	(_tap_total+3)^(0+512),w
  7281  0B96  0021               	movlb	1	; select bank1
  7282  0B97  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7283  0B98  0024               	movlb	4	; select bank4
  7284  0B99  083F               	movf	(_tap_total+2)^(0+512),w
  7285  0B9A  0021               	movlb	1	; select bank1
  7286  0B9B  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7287  0B9C  0024               	movlb	4	; select bank4
  7288  0B9D  083E               	movf	(_tap_total+1)^(0+512),w
  7289  0B9E  0021               	movlb	1	; select bank1
  7290  0B9F  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7291  0BA0  0024               	movlb	4	; select bank4
  7292  0BA1  083D               	movf	_tap_total^(0+512),w
  7293  0BA2  0021               	movlb	1	; select bank1
  7294  0BA3  00A4               	movwf	___aldiv@dividend^(0+128)
  7295  0BA4  3198  20AC         	fcall	___aldiv
  7296  0BA6  0021               	movlb	1	; select bank1
  7297  0BA7  0823               	movf	(?___aldiv+3)^(0+128),w
  7298  0BA8  0023               	movlb	3	; select bank3
  7299  0BA9  00C9               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  7300  0BAA  0021               	movlb	1	; select bank1
  7301  0BAB  0822               	movf	(?___aldiv+2)^(0+128),w
  7302  0BAC  0023               	movlb	3	; select bank3
  7303  0BAD  00C8               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  7304  0BAE  0021               	movlb	1	; select bank1
  7305  0BAF  0821               	movf	(?___aldiv+1)^(0+128),w
  7306  0BB0  0023               	movlb	3	; select bank3
  7307  0BB1  00C7               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  7308  0BB2  0021               	movlb	1	; select bank1
  7309  0BB3  0820               	movf	?___aldiv^(0+128),w
  7310  0BB4  0023               	movlb	3	; select bank3
  7311  0BB5  00C6               	movwf	_baseline_mod_time^(0+384)	;volatile
  7312                           
  7313                           ;SwitchTap.c: 133: mod_time_changed = 1;
  7314  0BB6  01E0               	clrf	_mod_time_changed^(0+384)
  7315  0BB7  0AE0               	incf	_mod_time_changed^(0+384),f
  7316                           
  7317                           ;SwitchTap.c: 134: tap_timer = 0;
  7318  0BB8  3000               	movlw	0
  7319  0BB9  0020               	movlb	0	; select bank0
  7320  0BBA  00C9               	movwf	_tap_timer+3	;volatile
  7321  0BBB  3000               	movlw	0
  7322  0BBC  00C8               	movwf	_tap_timer+2	;volatile
  7323  0BBD  3000               	movlw	0
  7324  0BBE  00C7               	movwf	_tap_timer+1	;volatile
  7325  0BBF  3000               	movlw	0
  7326  0BC0  00C6               	movwf	_tap_timer	;volatile
  7327                           
  7328                           ;SwitchTap.c: 136: tap_iteration++;
  7329  0BC1  3001               	movlw	1
  7330  0BC2  0023               	movlb	3	; select bank3
  7331  0BC3  07DA               	addwf	_tap_iteration^(0+384),f
  7332  0BC4  3000               	movlw	0
  7333  0BC5  3DDB               	addwfc	(_tap_iteration+1)^(0+384),f
  7334                           
  7335                           ;SwitchTap.c: 137: }
  7336                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7337  0BC6  0008               	return
  7338  0BC7                     l9051:	
  7339  0BC7  3019               	movlw	25
  7340  0BC8  0020               	movlb	0	; select bank0
  7341  0BC9  025A               	subwf	_switchTap_pressed,w
  7342  0BCA  1C03               	skipc
  7343  0BCB  0008               	return
  7344                           
  7345                           ;SwitchTap.c: 140: switchTap_down = 0;
  7346  0BCC  0023               	movlb	3	; select bank3
  7347  0BCD  01C5               	clrf	_switchTap_down^(0+384)
  7348                           
  7349                           ;SwitchTap.c: 141: switchTap_state = 0;
  7350  0BCE  0022               	movlb	2	; select bank2
  7351  0BCF  01EF               	clrf	_switchTap_state^(0+256)
  7352                           
  7353                           ;SwitchTap.c: 147: setLongTapState(0);
  7354  0BD0  3000               	movlw	0
  7355  0BD1  0021               	movlb	1	; select bank1
  7356  0BD2  00A0               	movwf	setLongTapState@f_state^(0+128)
  7357  0BD3  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7358  0BD4  31AE  2604         	fcall	_setLongTapState
  7359                           
  7360                           ;SwitchTap.c: 149: longTap_timer = 0;
  7361  0BD6  0023               	movlb	3	; select bank3
  7362  0BD7  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  7363  0BD8  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  7364                           
  7365                           ;SwitchTap.c: 150: longTap_start = 0;
  7366  0BD9  0020               	movlb	0	; select bank0
  7367  0BDA  01D4               	clrf	_longTap_start
  7368                           
  7369                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7370  0BDB  3019               	movlw	25
  7371  0BDC  0021               	movlb	1	; select bank1
  7372  0BDD  00BC               	movwf	??_updateSwitchTap^(0+128)
  7373  0BDE  083C               	movf	??_updateSwitchTap^(0+128),w
  7374  0BDF  0020               	movlb	0	; select bank0
  7375  0BE0  00DA               	movwf	_switchTap_pressed
  7376  0BE1  0008               	return
  7377  0BE2                     __end_of_updateSwitchTap:	
  7378                           
  7379                           	psect	text4
  7380  2E04                     __ptext4:	
  7381 ;; *************** function _setLongTapState *****************
  7382 ;; Defined at:
  7383 ;;		line 167 in file "SwitchTap.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  f_state         2    0[BANK1 ] int 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, status,0
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7397 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7399 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7400 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7401 ;;Total ram usage:        4 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    3
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_updateSwitchTap
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           
  7412                           ;psect for function _setLongTapState
  7413  2E04                     _setLongTapState:	
  7414                           
  7415                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7416                           
  7417                           ;incstack = 0
  7418                           ; Regs used in _setLongTapState: [wreg+status,0]
  7419  2E04  0020               	movlb	0	; select bank0
  7420  2E05  0868               	movf	_longTap_state,w	;volatile
  7421  2E06  0021               	movlb	1	; select bank1
  7422  2E07  00A2               	movwf	??_setLongTapState^(0+128)
  7423  2E08  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7424  2E09  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7425  2E0A  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7426  2E0B  1D03               	skipz
  7427  2E0C  2E0F               	goto	u8925
  7428  2E0D  0820               	movf	setLongTapState@f_state^(0+128),w
  7429  2E0E  0622               	xorwf	??_setLongTapState^(0+128),w
  7430  2E0F                     u8925:	
  7431  2E0F  1903               	btfsc	3,2
  7432  2E10  0008               	return
  7433                           
  7434                           ;SwitchTap.c: 169: longTap_state = f_state;
  7435  2E11  0820               	movf	setLongTapState@f_state^(0+128),w
  7436  2E12  00A2               	movwf	??_setLongTapState^(0+128)
  7437  2E13  0822               	movf	??_setLongTapState^(0+128),w
  7438  2E14  0020               	movlb	0	; select bank0
  7439  2E15  00E8               	movwf	_longTap_state	;volatile
  7440                           
  7441                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7442  2E16  0021               	movlb	1	; select bank1
  7443  2E17  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7444  2E18  0022               	movlb	2	; select bank2
  7445  2E19  1C03               	skipc
  7446  2E1A  128D               	bcf	13,5	;volatile
  7447  2E1B  1803               	skipnc
  7448  2E1C  168D               	bsf	13,5	;volatile
  7449  2E1D  0008               	return
  7450  2E1E                     __end_of_setLongTapState:	
  7451                           
  7452                           	psect	text5
  7453  18AC                     __ptext5:	
  7454 ;; *************** function ___aldiv *****************
  7455 ;; Defined at:
  7456 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  divisor         4    0[BANK1 ] long 
  7459 ;;  dividend        4    4[BANK1 ] long 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  quotient        4   11[BANK1 ] long 
  7462 ;;  sign            1   10[BANK1 ] unsigned char 
  7463 ;;  counter         1    9[BANK1 ] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  4    0[BANK1 ] long 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7473 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7474 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7475 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7476 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7477 ;;Total ram usage:       15 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    3
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_updateSwitchTap
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function ___aldiv
  7489  18AC                     ___aldiv:	
  7490                           
  7491                           ;incstack = 0
  7492                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7493  18AC  0021               	movlb	1	; select bank1
  7494  18AD  01AA               	clrf	___aldiv@sign^(0+128)
  7495  18AE  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7496  18AF  28BD               	goto	l1997
  7497  18B0  09A0               	comf	___aldiv@divisor^(0+128),f
  7498  18B1  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7499  18B2  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7500  18B3  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7501  18B4  0AA0               	incf	___aldiv@divisor^(0+128),f
  7502  18B5  1903               	skipnz
  7503  18B6  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7504  18B7  1903               	skipnz
  7505  18B8  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7506  18B9  1903               	skipnz
  7507  18BA  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7508  18BB  01AA               	clrf	___aldiv@sign^(0+128)
  7509  18BC  0AAA               	incf	___aldiv@sign^(0+128),f
  7510  18BD                     l1997:	
  7511  18BD  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7512  18BE  28CE               	goto	l8573
  7513  18BF  09A4               	comf	___aldiv@dividend^(0+128),f
  7514  18C0  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7515  18C1  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7516  18C2  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7517  18C3  0AA4               	incf	___aldiv@dividend^(0+128),f
  7518  18C4  1903               	skipnz
  7519  18C5  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7520  18C6  1903               	skipnz
  7521  18C7  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7522  18C8  1903               	skipnz
  7523  18C9  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7524  18CA  3001               	movlw	1
  7525  18CB  00A8               	movwf	??___aldiv^(0+128)
  7526  18CC  0828               	movf	??___aldiv^(0+128),w
  7527  18CD  06AA               	xorwf	___aldiv@sign^(0+128),f
  7528  18CE                     l8573:	
  7529  18CE  3000               	movlw	0
  7530  18CF  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7531  18D0  3000               	movlw	0
  7532  18D1  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7533  18D2  3000               	movlw	0
  7534  18D3  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7535  18D4  3000               	movlw	0
  7536  18D5  00AB               	movwf	___aldiv@quotient^(0+128)
  7537  18D6  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7538  18D7  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7539  18D8  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7540  18D9  0420               	iorwf	___aldiv@divisor^(0+128),w
  7541  18DA  1903               	skipnz
  7542  18DB  2917               	goto	l8595
  7543  18DC  01A9               	clrf	___aldiv@counter^(0+128)
  7544  18DD  0AA9               	incf	___aldiv@counter^(0+128),f
  7545  18DE                     l8581:	
  7546  18DE  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7547  18DF  28EC               	goto	l8583
  7548  18E0  3001               	movlw	1
  7549  18E1                     u9065:	
  7550  18E1  35A0               	lslf	___aldiv@divisor^(0+128),f
  7551  18E2  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7552  18E3  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7553  18E4  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7554  18E5  0B89               	decfsz	9,f
  7555  18E6  28E1               	goto	u9065
  7556  18E7  3001               	movlw	1
  7557  18E8  00A8               	movwf	??___aldiv^(0+128)
  7558  18E9  0828               	movf	??___aldiv^(0+128),w
  7559  18EA  07A9               	addwf	___aldiv@counter^(0+128),f
  7560  18EB  28DE               	goto	l8581
  7561  18EC                     l8583:	
  7562  18EC  3001               	movlw	1
  7563  18ED                     u9085:	
  7564  18ED  35AB               	lslf	___aldiv@quotient^(0+128),f
  7565  18EE  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7566  18EF  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7567  18F0  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7568  18F1  0B89               	decfsz	9,f
  7569  18F2  28ED               	goto	u9085
  7570  18F3  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7571  18F4  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7572  18F5  1D03               	skipz
  7573  18F6  2901               	goto	u9095
  7574  18F7  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7575  18F8  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7576  18F9  1D03               	skipz
  7577  18FA  2901               	goto	u9095
  7578  18FB  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7579  18FC  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7580  18FD  1D03               	skipz
  7581  18FE  2901               	goto	u9095
  7582  18FF  0820               	movf	___aldiv@divisor^(0+128),w
  7583  1900  0224               	subwf	___aldiv@dividend^(0+128),w
  7584  1901                     u9095:	
  7585  1901  1C03               	skipc
  7586  1902  290C               	goto	l8591
  7587  1903  0820               	movf	___aldiv@divisor^(0+128),w
  7588  1904  02A4               	subwf	___aldiv@dividend^(0+128),f
  7589  1905  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7590  1906  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7591  1907  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7592  1908  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7593  1909  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7594  190A  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7595  190B  142B               	bsf	___aldiv@quotient^(0+128),0
  7596  190C                     l8591:	
  7597  190C  3001               	movlw	1
  7598  190D                     u9105:	
  7599  190D  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7600  190E  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7601  190F  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7602  1910  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7603  1911  0B89               	decfsz	9,f
  7604  1912  290D               	goto	u9105
  7605  1913  3001               	movlw	1
  7606  1914  02A9               	subwf	___aldiv@counter^(0+128),f
  7607  1915  1D03               	btfss	3,2
  7608  1916  28EC               	goto	l8583
  7609  1917                     l8595:	
  7610  1917  082A               	movf	___aldiv@sign^(0+128),w
  7611  1918  1903               	btfsc	3,2
  7612  1919  2925               	goto	l8599
  7613  191A  09AB               	comf	___aldiv@quotient^(0+128),f
  7614  191B  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7615  191C  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7616  191D  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7617  191E  0AAB               	incf	___aldiv@quotient^(0+128),f
  7618  191F  1903               	skipnz
  7619  1920  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7620  1921  1903               	skipnz
  7621  1922  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7622  1923  1903               	skipnz
  7623  1924  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7624  1925                     l8599:	
  7625  1925  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7626  1926  00A3               	movwf	(?___aldiv+3)^(0+128)
  7627  1927  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7628  1928  00A2               	movwf	(?___aldiv+2)^(0+128)
  7629  1929  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7630  192A  00A1               	movwf	(?___aldiv+1)^(0+128)
  7631  192B  082B               	movf	___aldiv@quotient^(0+128),w
  7632  192C  00A0               	movwf	?___aldiv^(0+128)
  7633  192D  0008               	return
  7634  192E                     __end_of___aldiv:	
  7635                           
  7636                           	psect	text6
  7637  1232                     __ptext6:	
  7638 ;; *************** function _updateSwitchBypass *****************
  7639 ;; Defined at:
  7640 ;;		line 34 in file "SwitchBypass.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;		None
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;		None
  7645 ;; Return value:  Size  Location     Type
  7646 ;;                  1    wreg      void 
  7647 ;; Registers used:
  7648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7656 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7657 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7658 ;;Total ram usage:        2 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    8
  7661 ;; This function calls:
  7662 ;;		_setDoublePressState
  7663 ;;		_setLongBypassState
  7664 ;;		_setSwitchBypassRelays
  7665 ;;		_setSwitchBypassState
  7666 ;; This function is called by:
  7667 ;;		_main
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _updateSwitchBypass
  7673  1232                     _updateSwitchBypass:	
  7674                           
  7675                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7679  1232  0020               	movlb	0	; select bank0
  7680  1233  1890               	btfsc	16,1	;volatile
  7681  1234  2A48               	goto	l8851
  7682                           
  7683                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7684  1235  0023               	movlb	3	; select bank3
  7685  1236  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7686  1237  3A80               	xorlw	128
  7687  1238  0021               	movlb	1	; select bank1
  7688  1239  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7689  123A  3080               	movlw	128
  7690  123B  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7691  123C  1D03               	skipz
  7692  123D  2A41               	goto	u9525
  7693  123E  3001               	movlw	1
  7694  123F  0023               	movlb	3	; select bank3
  7695  1240  023C               	subwf	_switchBypass_pressed^(0+384),w
  7696  1241                     u9525:	
  7697  1241  1C03               	skipc
  7698  1242  2A5B               	goto	l8855
  7699                           
  7700                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7701  1243  30FF               	movlw	255
  7702  1244  0023               	movlb	3	; select bank3
  7703  1245  07BC               	addwf	_switchBypass_pressed^(0+384),f
  7704  1246  30FF               	movlw	255
  7705  1247  2A5A               	goto	L2
  7706  1248                     l8851:	
  7707                           ;SwitchBypass.c: 44: }
  7708                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7709                           
  7710  1248  0023               	movlb	3	; select bank3
  7711  1249  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7712  124A  3A80               	xorlw	128
  7713  124B  0021               	movlb	1	; select bank1
  7714  124C  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7715  124D  3080               	movlw	128
  7716  124E  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7717  124F  1D03               	skipz
  7718  1250  2A54               	goto	u9535
  7719  1251  3019               	movlw	25
  7720  1252  0023               	movlb	3	; select bank3
  7721  1253  023C               	subwf	_switchBypass_pressed^(0+384),w
  7722  1254                     u9535:	
  7723  1254  1803               	skipnc
  7724  1255  2A5B               	goto	l8855
  7725                           
  7726                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7727  1256  3001               	movlw	1
  7728  1257  0023               	movlb	3	; select bank3
  7729  1258  07BC               	addwf	_switchBypass_pressed^(0+384),f
  7730  1259  3000               	movlw	0
  7731  125A                     L2:	
  7732  125A  3DBD               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7733  125B                     l8855:	
  7734                           
  7735                           ;SwitchBypass.c: 47: }
  7736                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7737  125B  0023               	movlb	3	; select bank3
  7738  125C  083C               	movf	_switchBypass_pressed^(0+384),w
  7739  125D  043D               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7740  125E  1D03               	btfss	3,2
  7741  125F  2AE1               	goto	l8917
  7742                           
  7743                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7744  1260  0020               	movlb	0	; select bank0
  7745  1261  0852               	movf	_longBypass_start,w
  7746  1262  1D03               	btfss	3,2
  7747  1263  2A69               	goto	l8863
  7748                           
  7749                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7750  1264  01D2               	clrf	_longBypass_start
  7751  1265  0AD2               	incf	_longBypass_start,f
  7752                           
  7753                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7754  1266  0023               	movlb	3	; select bank3
  7755  1267  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7756  1268  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7757  1269                     l8863:	
  7758                           
  7759                           ;SwitchBypass.c: 59: }
  7760                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7761  1269  0020               	movlb	0	; select bank0
  7762  126A  0863               	movf	_long_press_limit+1,w
  7763  126B  0023               	movlb	3	; select bank3
  7764  126C  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7765  126D  1D03               	skipz
  7766  126E  2A73               	goto	u9565
  7767  126F  0020               	movlb	0	; select bank0
  7768  1270  0862               	movf	_long_press_limit,w
  7769  1271  0023               	movlb	3	; select bank3
  7770  1272  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7771  1273                     u9565:	
  7772  1273  1C03               	skipc
  7773  1274  2AAF               	goto	l8889
  7774  1275  0020               	movlb	0	; select bank0
  7775  1276  0851               	movf	_longBypass_down,w
  7776  1277  1D03               	btfss	3,2
  7777  1278  2AAF               	goto	l8889
  7778  1279  0850               	movf	_doubleTap_state,w	;volatile
  7779  127A  1D03               	btfss	3,2
  7780  127B  2AAF               	goto	l8889
  7781                           
  7782                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7783  127C  0022               	movlb	2	; select bank2
  7784  127D  110D               	bcf	13,2	;volatile
  7785                           
  7786                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7787  127E  0020               	movlb	0	; select bank0
  7788  127F  0354               	decf	_longTap_start,w
  7789  1280  1903               	btfsc	3,2
  7790  1281  2AA7               	goto	l8887
  7791                           
  7792                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7793  1282  036B               	decf	_switchBypass_state,w
  7794  1283  1D03               	btfss	3,2
  7795  1284  2AAF               	goto	l8889
  7796                           
  7797                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7798  1285  01D1               	clrf	_longBypass_down
  7799  1286  0AD1               	incf	_longBypass_down,f
  7800                           
  7801                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7802  1287  0853               	movf	_longBypass_state,w	;volatile
  7803  1288  1D03               	btfss	3,2
  7804  1289  2A95               	goto	l8883
  7805                           
  7806                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7807  128A  0022               	movlb	2	; select bank2
  7808  128B  110D               	bcf	13,2	;volatile
  7809                           
  7810                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7811  128C  3001               	movlw	1
  7812  128D  0021               	movlb	1	; select bank1
  7813  128E  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7814  128F  3000               	movlw	0
  7815  1290  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7816  1291  31AE  26AE  3192   	fcall	_setLongBypassState
  7817                           
  7818                           ;SwitchBypass.c: 71: } else {
  7819  1294  2AAF               	goto	l8889
  7820  1295                     l8883:	
  7821                           
  7822                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7823  1295  3001               	movlw	1
  7824  1296  0021               	movlb	1	; select bank1
  7825  1297  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7826  1298  3000               	movlw	0
  7827  1299  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7828  129A  31AE  263A  3192   	fcall	_setSwitchBypassState
  7829                           
  7830                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7831  129D  3000               	movlw	0
  7832  129E  0021               	movlb	1	; select bank1
  7833  129F  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7834  12A0  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7835  12A1  31AE  26AE  3192   	fcall	_setLongBypassState
  7836                           
  7837                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7838  12A4  0022               	movlb	2	; select bank2
  7839  12A5  150D               	bsf	13,2	;volatile
  7840                           
  7841                           ;SwitchBypass.c: 75: }
  7842                           ;SwitchBypass.c: 76: }
  7843                           ;SwitchBypass.c: 77: } else {
  7844  12A6  2AAF               	goto	l8889
  7845  12A7                     l8887:	
  7846                           
  7847                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7848  12A7  3001               	movlw	1
  7849  12A8  0021               	movlb	1	; select bank1
  7850  12A9  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7851  12AA  3000               	movlw	0
  7852  12AB  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7853  12AC  31A1  21A3  3192   	fcall	_setDoublePressState
  7854  12AF                     l8889:	
  7855                           
  7856                           ;SwitchBypass.c: 79: }
  7857                           ;SwitchBypass.c: 80: }
  7858                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7859  12AF  0022               	movlb	2	; select bank2
  7860  12B0  120F               	bcf	15,4	;volatile
  7861                           
  7862                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7863  12B1  0020               	movlb	0	; select bank0
  7864  12B2  0850               	movf	_doubleTap_state,w	;volatile
  7865  12B3  1D03               	btfss	3,2
  7866  12B4  2ADD               	goto	l8915
  7867  12B5  0851               	movf	_longBypass_down,w
  7868  12B6  1D03               	btfss	3,2
  7869  12B7  2ADD               	goto	l8915
  7870                           
  7871                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7872  12B8  036B               	decf	_switchBypass_state,w
  7873  12B9  1D03               	btfss	3,2
  7874  12BA  2AC9               	goto	l8903
  7875                           
  7876                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7877  12BB  0024               	movlb	4	; select bank4
  7878  12BC  035E               	decf	_switchBypass_up^(0+512),w
  7879  12BD  045F               	iorwf	(_switchBypass_up+1)^(0+512),w
  7880  12BE  1D03               	btfss	3,2
  7881  12BF  2ADD               	goto	l8915
  7882                           
  7883                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7884  12C0  0023               	movlb	3	; select bank3
  7885  12C1  01DD               	clrf	_currentBypassState^(0+384)
  7886  12C2  0ADD               	incf	_currentBypassState^(0+384),f
  7887                           
  7888                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7889  12C3  3001               	movlw	1
  7890  12C4  0024               	movlb	4	; select bank4
  7891  12C5  00D1               	movwf	_switchBypass_toggle^(0+512)
  7892  12C6  3000               	movlw	0
  7893  12C7  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7894                           
  7895                           ;SwitchBypass.c: 88: }
  7896                           ;SwitchBypass.c: 89: } else {
  7897  12C8  2ADD               	goto	l8915
  7898  12C9                     l8903:	
  7899                           
  7900                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7901  12C9  0023               	movlb	3	; select bank3
  7902  12CA  033F               	decf	_bypass_turning_on^(0+384),w
  7903  12CB  1903               	btfsc	3,2
  7904  12CC  2ADD               	goto	l8915
  7905                           
  7906                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7907  12CD  01DD               	clrf	_currentBypassState^(0+384)
  7908                           
  7909                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7910  12CE  01BF               	clrf	_bypass_turning_on^(0+384)
  7911  12CF  0ABF               	incf	_bypass_turning_on^(0+384),f
  7912                           
  7913                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7914  12D0  0024               	movlb	4	; select bank4
  7915  12D1  01D1               	clrf	_switchBypass_toggle^(0+512)
  7916  12D2  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7917                           
  7918                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7919  12D3  0020               	movlb	0	; select bank0
  7920  12D4  0853               	movf	_longBypass_state,w	;volatile
  7921  12D5  0021               	movlb	1	; select bank1
  7922  12D6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7923  12D7  083C               	movf	??_updateSwitchBypass^(0+128),w
  7924  12D8  0023               	movlb	3	; select bank3
  7925  12D9  00C1               	movwf	_longBypass_save^(0+384)
  7926                           
  7927                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7928  12DA  0020               	movlb	0	; select bank0
  7929  12DB  01D3               	clrf	_longBypass_state	;volatile
  7930                           
  7931                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7932  12DC  01D2               	clrf	_longBypass_start
  7933  12DD                     l8915:	
  7934                           
  7935                           ;SwitchBypass.c: 100: }
  7936                           ;SwitchBypass.c: 101: }
  7937                           ;SwitchBypass.c: 103: }
  7938                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7939  12DD  0024               	movlb	4	; select bank4
  7940  12DE  01DE               	clrf	_switchBypass_up^(0+512)
  7941  12DF  01DF               	clrf	(_switchBypass_up+1)^(0+512)
  7942                           
  7943                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7944  12E0  0008               	return
  7945  12E1                     l8917:	
  7946  12E1  0023               	movlb	3	; select bank3
  7947  12E2  083D               	movf	(_switchBypass_pressed+1)^(0+384),w
  7948  12E3  3A80               	xorlw	128
  7949  12E4  0021               	movlb	1	; select bank1
  7950  12E5  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7951  12E6  3080               	movlw	128
  7952  12E7  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7953  12E8  1D03               	skipz
  7954  12E9  2AED               	goto	u9675
  7955  12EA  3019               	movlw	25
  7956  12EB  0023               	movlb	3	; select bank3
  7957  12EC  023C               	subwf	_switchBypass_pressed^(0+384),w
  7958  12ED                     u9675:	
  7959  12ED  1C03               	skipc
  7960  12EE  0008               	return
  7961                           
  7962                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7963  12EF  0020               	movlb	0	; select bank0
  7964  12F0  0350               	decf	_doubleTap_state,w	;volatile
  7965  12F1  1D03               	btfss	3,2
  7966  12F2  2AFC               	goto	l8923
  7967                           
  7968                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7969  12F3  0023               	movlb	3	; select bank3
  7970  12F4  085D               	movf	_currentBypassState^(0+384),w
  7971  12F5  0021               	movlb	1	; select bank1
  7972  12F6  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7973  12F7  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7974  12F8  083C               	movf	??_updateSwitchBypass^(0+128),w
  7975  12F9  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7976  12FA  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7977  12FB  2B2B               	goto	L3
  7978  12FC                     l8923:	
  7979                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7980                           
  7981  12FC  0023               	movlb	3	; select bank3
  7982  12FD  033F               	decf	_bypass_turning_on^(0+384),w
  7983  12FE  1D03               	btfss	3,2
  7984  12FF  2B1C               	goto	l8933
  7985                           
  7986                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7987  1300  0341               	decf	_longBypass_save^(0+384),w
  7988  1301  1D03               	btfss	3,2
  7989  1302  2B16               	goto	l8931
  7990                           
  7991                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7992  1303  0022               	movlb	2	; select bank2
  7993  1304  110D               	bcf	13,2	;volatile
  7994                           
  7995                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7996  1305  3001               	movlw	1
  7997  1306  0021               	movlb	1	; select bank1
  7998  1307  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7999  1308  3000               	movlw	0
  8000  1309  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  8001  130A  31AE  26AE  3192   	fcall	_setLongBypassState
  8002                           
  8003                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  8004  130D  3001               	movlw	1
  8005  130E  0021               	movlb	1	; select bank1
  8006  130F  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  8007  1310  3000               	movlw	0
  8008  1311  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  8009  1312  31A0  2047  3192   	fcall	_setSwitchBypassRelays
  8010                           
  8011                           ;SwitchBypass.c: 114: } else {
  8012  1315  2B2F               	goto	l8941
  8013  1316                     l8931:	
  8014                           
  8015                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  8016  1316  3001               	movlw	1
  8017  1317  0021               	movlb	1	; select bank1
  8018  1318  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8019  1319  3000               	movlw	0
  8020  131A  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  8021  131B  2B2C               	goto	L4
  8022  131C                     l8933:	
  8023                           ;SwitchBypass.c: 116: }
  8024                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  8025                           
  8026  131C  0024               	movlb	4	; select bank4
  8027  131D  0351               	decf	_switchBypass_toggle^(0+512),w
  8028  131E  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  8029  131F  1D03               	btfss	3,2
  8030  1320  2B2F               	goto	l8941
  8031  1321  0020               	movlb	0	; select bank0
  8032  1322  0851               	movf	_longBypass_down,w
  8033  1323  1D03               	btfss	3,2
  8034  1324  2B2F               	goto	l8941
  8035  1325  0850               	movf	_doubleTap_state,w	;volatile
  8036  1326  1D03               	btfss	3,2
  8037  1327  2B2F               	goto	l8941
  8038                           
  8039                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  8040  1328  3000               	movlw	0
  8041  1329  0021               	movlb	1	; select bank1
  8042  132A  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  8043  132B                     L3:	
  8044  132B  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8045  132C                     L4:	
  8046  132C  31AE  263A  3192   	fcall	_setSwitchBypassState
  8047  132F                     l8941:	
  8048                           
  8049                           ;SwitchBypass.c: 120: }
  8050                           ;SwitchBypass.c: 122: longBypass_down = 0;
  8051  132F  0020               	movlb	0	; select bank0
  8052  1330  01D1               	clrf	_longBypass_down
  8053                           
  8054                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  8055  1331  0853               	movf	_longBypass_state,w	;volatile
  8056  1332  1D03               	btfss	3,2
  8057  1333  2B3A               	goto	l8947
  8058                           
  8059                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  8060  1334  0C6B               	rrf	_switchBypass_state,w
  8061  1335  0022               	movlb	2	; select bank2
  8062  1336  1C03               	skipc
  8063  1337  110D               	bcf	13,2	;volatile
  8064  1338  1803               	skipnc
  8065  1339  150D               	bsf	13,2	;volatile
  8066  133A                     l8947:	
  8067                           
  8068                           ;SwitchBypass.c: 125: }
  8069                           ;SwitchBypass.c: 127: setDoublePressState(0);
  8070  133A  3000               	movlw	0
  8071  133B  0021               	movlb	1	; select bank1
  8072  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8073  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8074  133E  31A1  21A3         	fcall	_setDoublePressState
  8075                           
  8076                           ;SwitchBypass.c: 128: longBypass_start = 0;
  8077  1340  0020               	movlb	0	; select bank0
  8078  1341  01D2               	clrf	_longBypass_start
  8079                           
  8080                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  8081  1342  0023               	movlb	3	; select bank3
  8082  1343  01BF               	clrf	_bypass_turning_on^(0+384)
  8083                           
  8084                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  8085  1344  0024               	movlb	4	; select bank4
  8086  1345  01D1               	clrf	_switchBypass_toggle^(0+512)
  8087  1346  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  8088                           
  8089                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  8090  1347  3001               	movlw	1
  8091  1348  00DE               	movwf	_switchBypass_up^(0+512)
  8092  1349  3000               	movlw	0
  8093  134A  00DF               	movwf	(_switchBypass_up^(0+512)+1)
  8094                           
  8095                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  8096  134B  3019               	movlw	25
  8097  134C  0023               	movlb	3	; select bank3
  8098  134D  00BC               	movwf	_switchBypass_pressed^(0+384)
  8099  134E  3000               	movlw	0
  8100  134F  00BD               	movwf	(_switchBypass_pressed^(0+384)+1)
  8101  1350  0008               	return
  8102  1351                     __end_of_updateSwitchBypass:	
  8103                           
  8104                           	psect	text7
  8105  2EAE                     __ptext7:	
  8106 ;; *************** function _setLongBypassState *****************
  8107 ;; Defined at:
  8108 ;;		line 163 in file "SwitchBypass.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  f_state         2    0[BANK1 ] int 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		wreg, status,0
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8122 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8125 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8126 ;;Total ram usage:        4 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    3
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_updateSwitchBypass
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           
  8137                           ;psect for function _setLongBypassState
  8138  2EAE                     _setLongBypassState:	
  8139                           
  8140                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _setLongBypassState: [wreg+status,0]
  8144  2EAE  0020               	movlb	0	; select bank0
  8145  2EAF  0853               	movf	_longBypass_state,w	;volatile
  8146  2EB0  0021               	movlb	1	; select bank1
  8147  2EB1  00A2               	movwf	??_setLongBypassState^(0+128)
  8148  2EB2  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  8149  2EB3  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  8150  2EB4  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  8151  2EB5  1D03               	skipz
  8152  2EB6  2EB9               	goto	u8875
  8153  2EB7  0820               	movf	setLongBypassState@f_state^(0+128),w
  8154  2EB8  0622               	xorwf	??_setLongBypassState^(0+128),w
  8155  2EB9                     u8875:	
  8156  2EB9  1903               	btfsc	3,2
  8157  2EBA  0008               	return
  8158                           
  8159                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  8160  2EBB  0820               	movf	setLongBypassState@f_state^(0+128),w
  8161  2EBC  00A2               	movwf	??_setLongBypassState^(0+128)
  8162  2EBD  0822               	movf	??_setLongBypassState^(0+128),w
  8163  2EBE  0020               	movlb	0	; select bank0
  8164  2EBF  00D3               	movwf	_longBypass_state	;volatile
  8165                           
  8166                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  8167  2EC0  0021               	movlb	1	; select bank1
  8168  2EC1  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8169  2EC2  0022               	movlb	2	; select bank2
  8170  2EC3  1C03               	skipc
  8171  2EC4  118D               	bcf	13,3	;volatile
  8172  2EC5  1803               	skipnc
  8173  2EC6  158D               	bsf	13,3	;volatile
  8174                           
  8175                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  8176  2EC7  0021               	movlb	1	; select bank1
  8177  2EC8  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  8178  2EC9  0020               	movlb	0	; select bank0
  8179  2ECA  1C03               	skipc
  8180  2ECB  120E               	bcf	14,4	;volatile
  8181  2ECC  1803               	skipnc
  8182  2ECD  160E               	bsf	14,4	;volatile
  8183  2ECE  0008               	return
  8184  2ECF                     __end_of_setLongBypassState:	
  8185                           
  8186                           	psect	text8
  8187  21A3                     __ptext8:	
  8188 ;; *************** function _setDoublePressState *****************
  8189 ;; Defined at:
  8190 ;;		line 21 in file "preset_programming.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  f_state         2   24[BANK1 ] int 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8204 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8207 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8208 ;;Total ram usage:        4 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    7
  8211 ;; This function calls:
  8212 ;;		_resetRingLEDs
  8213 ;;		_setPedalMode
  8214 ;;		_setPresetDisplay
  8215 ;;		_showSave
  8216 ;;		_wait_ms
  8217 ;; This function is called by:
  8218 ;;		_updateSwitchBypass
  8219 ;;		_updateSwitchTap
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           
  8224                           ;psect for function _setDoublePressState
  8225  21A3                     _setDoublePressState:	
  8226                           
  8227                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8231  21A3  0020               	movlb	0	; select bank0
  8232  21A4  0850               	movf	_doubleTap_state,w	;volatile
  8233  21A5  0021               	movlb	1	; select bank1
  8234  21A6  00BA               	movwf	??_setDoublePressState^(0+128)
  8235  21A7  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8236  21A8  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8237  21A9  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8238  21AA  1D03               	skipz
  8239  21AB  29AE               	goto	u8885
  8240  21AC  0838               	movf	setDoublePressState@f_state^(0+128),w
  8241  21AD  063A               	xorwf	??_setDoublePressState^(0+128),w
  8242  21AE                     u8885:	
  8243  21AE  1903               	btfsc	3,2
  8244  21AF  0008               	return
  8245                           
  8246                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8247  21B0  0838               	movf	setDoublePressState@f_state^(0+128),w
  8248  21B1  00BA               	movwf	??_setDoublePressState^(0+128)
  8249  21B2  083A               	movf	??_setDoublePressState^(0+128),w
  8250  21B3  0020               	movlb	0	; select bank0
  8251  21B4  00D0               	movwf	_doubleTap_state	;volatile
  8252                           
  8253                           ;preset_programming.c: 24: if (f_state == 1) {
  8254  21B5  0021               	movlb	1	; select bank1
  8255  21B6  0338               	decf	setDoublePressState@f_state^(0+128),w
  8256  21B7  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8257  21B8  1D03               	btfss	3,2
  8258  21B9  29BD               	goto	l8473
  8259                           
  8260                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8261  21BA  0022               	movlb	2	; select bank2
  8262  21BB  120D               	bcf	13,4	;volatile
  8263                           
  8264                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8265  21BC  128D               	bcf	13,5	;volatile
  8266  21BD                     l8473:	
  8267                           
  8268                           ;preset_programming.c: 30: }
  8269                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8270  21BD  0020               	movlb	0	; select bank0
  8271  21BE  0350               	decf	_doubleTap_state,w	;volatile
  8272  21BF  1D03               	btfss	3,2
  8273  21C0  29D9               	goto	l8489
  8274                           
  8275                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8276  21C1  0857               	movf	_presetSaveMode,w
  8277  21C2  1D03               	btfss	3,2
  8278  21C3  29CE               	goto	l8481
  8279                           
  8280                           ;preset_programming.c: 34: presetSaveMode = 1;
  8281  21C4  01D7               	clrf	_presetSaveMode
  8282  21C5  0AD7               	incf	_presetSaveMode,f
  8283                           
  8284                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8285  21C6  0022               	movlb	2	; select bank2
  8286  21C7  108D               	bcf	13,1	;volatile
  8287                           
  8288                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8289  21C8  0020               	movlb	0	; select bank0
  8290  21C9  086A               	movf	_presetChannel,w
  8291  21CA  31A0  20B5  31A1   	fcall	_setPresetDisplay
  8292                           
  8293                           ;preset_programming.c: 37: } else {
  8294  21CD  29D9               	goto	l8489
  8295  21CE                     l8481:	
  8296                           
  8297                           ;preset_programming.c: 39: presetSaveMode = 0;
  8298  21CE  0020               	movlb	0	; select bank0
  8299  21CF  01D7               	clrf	_presetSaveMode
  8300                           
  8301                           ;preset_programming.c: 40: setPedalMode();
  8302  21D0  31AE  26F1  31A1   	fcall	_setPedalMode
  8303                           
  8304                           ;preset_programming.c: 41: resetRingLEDs();
  8305  21D3  31AD  25EA  31A1   	fcall	_resetRingLEDs
  8306                           
  8307                           ;preset_programming.c: 42: showSave();
  8308  21D6  31A0  2001  31A1   	fcall	_showSave
  8309  21D9                     l8489:	
  8310                           
  8311                           ;preset_programming.c: 44: }
  8312                           ;preset_programming.c: 45: }
  8313                           ;preset_programming.c: 47: wait_ms(20);
  8314  21D9  3014               	movlw	20
  8315  21DA  0021               	movlb	1	; select bank1
  8316  21DB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8317  21DC  3000               	movlw	0
  8318  21DD  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8319  21DE  31A0  2015         	fcall	_wait_ms
  8320  21E0  0008               	return
  8321  21E1                     __end_of_setDoublePressState:	
  8322                           
  8323                           	psect	text9
  8324  2001                     __ptext9:	
  8325 ;; *************** function _showSave *****************
  8326 ;; Defined at:
  8327 ;;		line 112 in file "LEDs.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      void 
  8334 ;; Registers used:
  8335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8343 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8344 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8345 ;;Total ram usage:        1 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    6
  8348 ;; This function calls:
  8349 ;;		_ring_tactiles
  8350 ;;		_solidring_tactiles
  8351 ;; This function is called by:
  8352 ;;		_setDoublePressState
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _showSave
  8358  2001                     _showSave:	
  8359                           
  8360                           ;LEDs.c: 113: suspend_blink = 1;
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8364  2001  3001               	movlw	1
  8365  2002  0021               	movlb	1	; select bank1
  8366  2003  00B7               	movwf	??_showSave^(0+128)
  8367  2004  0837               	movf	??_showSave^(0+128),w
  8368  2005  0020               	movlb	0	; select bank0
  8369  2006  00D9               	movwf	_suspend_blink	;volatile
  8370                           
  8371                           ;LEDs.c: 114: ring_tactiles();
  8372  2007  31A4  2492  31A0   	fcall	_ring_tactiles
  8373                           
  8374                           ;LEDs.c: 115: ring_tactiles();
  8375  200A  31A4  2492  31A0   	fcall	_ring_tactiles
  8376                           
  8377                           ;LEDs.c: 116: solidring_tactiles();
  8378  200D  31A2  2221  31A0   	fcall	_solidring_tactiles
  8379                           
  8380                           ;LEDs.c: 117: solidring_tactiles();
  8381  2010  31A2  2221         	fcall	_solidring_tactiles
  8382                           
  8383                           ;LEDs.c: 118: suspend_blink = 0;
  8384  2012  0020               	movlb	0	; select bank0
  8385  2013  01D9               	clrf	_suspend_blink	;volatile
  8386  2014  0008               	return
  8387  2015                     __end_of_showSave:	
  8388                           
  8389                           	psect	text10
  8390  2221                     __ptext10:	
  8391 ;; *************** function _solidring_tactiles *****************
  8392 ;; Defined at:
  8393 ;;		line 208 in file "LEDs.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8408 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8409 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8410 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8411 ;;Total ram usage:        3 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    5
  8414 ;; This function calls:
  8415 ;;		_set_leds_bottom
  8416 ;;		_set_leds_top
  8417 ;;		_wait_ms
  8418 ;; This function is called by:
  8419 ;;		_showSave
  8420 ;;		_showBootSequence
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _solidring_tactiles
  8426  2221                     _solidring_tactiles:	
  8427                           
  8428                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8432  2221  301E               	movlw	30
  8433  2222  0021               	movlb	1	; select bank1
  8434  2223  00B2               	movwf	??_solidring_tactiles^(0+128)
  8435  2224  0832               	movf	??_solidring_tactiles^(0+128),w
  8436  2225  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8437                           
  8438                           ;LEDs.c: 210: set_leds_top(100, 1);
  8439  2226  3064               	movlw	100
  8440  2227  00A0               	movwf	set_leds_top@x^(0+128)
  8441  2228  3000               	movlw	0
  8442  2229  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8443  222A  3001               	movlw	1
  8444  222B  00A2               	movwf	set_leds_top@ledState^(0+128)
  8445  222C  3000               	movlw	0
  8446  222D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8447  222E  31A5  2585  31A2   	fcall	_set_leds_top
  8448                           
  8449                           ;LEDs.c: 211: set_leds_bottom(100);
  8450  2231  3064               	movlw	100
  8451  2232  0021               	movlb	1	; select bank1
  8452  2233  00A0               	movwf	set_leds_bottom@x^(0+128)
  8453  2234  3000               	movlw	0
  8454  2235  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8455  2236  31A0  20EF  31A2   	fcall	_set_leds_bottom
  8456                           
  8457                           ;LEDs.c: 212: wait_ms(ring_delay);
  8458  2239  0021               	movlb	1	; select bank1
  8459  223A  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8460  223B  00B2               	movwf	??_solidring_tactiles^(0+128)
  8461  223C  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8462  223D  0832               	movf	??_solidring_tactiles^(0+128),w
  8463  223E  00AC               	movwf	wait_ms@timeSec^(0+128)
  8464  223F  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8465  2240  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8466  2241  31A0  2015  31A2   	fcall	_wait_ms
  8467                           
  8468                           ;LEDs.c: 214: set_leds_top(0, 1);
  8469  2244  3000               	movlw	0
  8470  2245  0021               	movlb	1	; select bank1
  8471  2246  00A0               	movwf	set_leds_top@x^(0+128)
  8472  2247  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8473  2248  3001               	movlw	1
  8474  2249  00A2               	movwf	set_leds_top@ledState^(0+128)
  8475  224A  3000               	movlw	0
  8476  224B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8477  224C  31A5  2585  31A2   	fcall	_set_leds_top
  8478                           
  8479                           ;LEDs.c: 215: set_leds_bottom(0);
  8480  224F  3000               	movlw	0
  8481  2250  0021               	movlb	1	; select bank1
  8482  2251  00A0               	movwf	set_leds_bottom@x^(0+128)
  8483  2252  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8484  2253  31A0  20EF  31A2   	fcall	_set_leds_bottom
  8485                           
  8486                           ;LEDs.c: 216: wait_ms(ring_delay);
  8487  2256  0021               	movlb	1	; select bank1
  8488  2257  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8489  2258  00B2               	movwf	??_solidring_tactiles^(0+128)
  8490  2259  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8491  225A  0832               	movf	??_solidring_tactiles^(0+128),w
  8492  225B  00AC               	movwf	wait_ms@timeSec^(0+128)
  8493  225C  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8494  225D  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8495  225E  31A0  2015         	fcall	_wait_ms
  8496  2260  0008               	return
  8497  2261                     __end_of_solidring_tactiles:	
  8498                           
  8499                           	psect	text11
  8500  2492                     __ptext11:	
  8501 ;; *************** function _ring_tactiles *****************
  8502 ;; Defined at:
  8503 ;;		line 196 in file "LEDs.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;		None
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  iLed            2   21[BANK1 ] int 
  8508 ;;  iLed            2   19[BANK1 ] int 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      void 
  8511 ;; Registers used:
  8512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8519 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8520 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8521 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8522 ;;Total ram usage:        5 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    5
  8525 ;; This function calls:
  8526 ;;		_set_leds_bottom
  8527 ;;		_set_leds_top
  8528 ;;		_wait_ms
  8529 ;; This function is called by:
  8530 ;;		_showSave
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _ring_tactiles
  8536  2492                     _ring_tactiles:	
  8537                           
  8538                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8539                           
  8540                           ;incstack = 0
  8541                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8542  2492  3001               	movlw	1
  8543  2493  0021               	movlb	1	; select bank1
  8544  2494  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8545  2495  3000               	movlw	0
  8546  2496  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8547  2497  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8548  2498  3A80               	xorlw	128
  8549  2499  00B2               	movwf	??_ring_tactiles^(0+128)
  8550  249A  3080               	movlw	128
  8551  249B  0232               	subwf	??_ring_tactiles^(0+128),w
  8552  249C  1D03               	skipz
  8553  249D  2CA0               	goto	u8365
  8554  249E  3007               	movlw	7
  8555  249F  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8556  24A0                     u8365:	
  8557  24A0  1803               	btfsc	3,0
  8558  24A1  2CC6               	goto	l7981
  8559  24A2                     l7973:	
  8560                           
  8561                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8562  24A2  0021               	movlb	1	; select bank1
  8563  24A3  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8564  24A4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8565  24A5  0833               	movf	ring_tactiles@iLed^(0+128),w
  8566  24A6  00A0               	movwf	set_leds_top@x^(0+128)
  8567  24A7  3001               	movlw	1
  8568  24A8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8569  24A9  3000               	movlw	0
  8570  24AA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8571  24AB  31A5  2585  31A4   	fcall	_set_leds_top
  8572                           
  8573                           ;LEDs.c: 199: wait_ms(5);
  8574  24AE  3005               	movlw	5
  8575  24AF  0021               	movlb	1	; select bank1
  8576  24B0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8577  24B1  3000               	movlw	0
  8578  24B2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8579  24B3  31A0  2015  31A4   	fcall	_wait_ms
  8580  24B6  3001               	movlw	1
  8581  24B7  0021               	movlb	1	; select bank1
  8582  24B8  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8583  24B9  3000               	movlw	0
  8584  24BA  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8585  24BB  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8586  24BC  3A80               	xorlw	128
  8587  24BD  00B2               	movwf	??_ring_tactiles^(0+128)
  8588  24BE  3080               	movlw	128
  8589  24BF  0232               	subwf	??_ring_tactiles^(0+128),w
  8590  24C0  1D03               	skipz
  8591  24C1  2CC4               	goto	u8375
  8592  24C2  3007               	movlw	7
  8593  24C3  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8594  24C4                     u8375:	
  8595  24C4  1C03               	skipc
  8596  24C5  2CA2               	goto	l7973
  8597  24C6                     l7981:	
  8598                           
  8599                           ;LEDs.c: 200: }
  8600                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8601  24C6  3005               	movlw	5
  8602  24C7  0021               	movlb	1	; select bank1
  8603  24C8  00B5               	movwf	ring_tactiles@iLed_1533^(0+128)
  8604  24C9  3000               	movlw	0
  8605  24CA  00B6               	movwf	(ring_tactiles@iLed_1533^(0+128)+1)
  8606  24CB                     L5:	
  8607  24CB  1BB6               	btfsc	(ring_tactiles@iLed_1533+1)^(0+128),7
  8608  24CC  0008               	return
  8609                           
  8610                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8611  24CD  0836               	movf	(ring_tactiles@iLed_1533+1)^(0+128),w
  8612  24CE  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8613  24CF  0835               	movf	ring_tactiles@iLed_1533^(0+128),w
  8614  24D0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8615  24D1  31A0  20EF  31A4   	fcall	_set_leds_bottom
  8616                           
  8617                           ;LEDs.c: 203: wait_ms(5);
  8618  24D4  3005               	movlw	5
  8619  24D5  0021               	movlb	1	; select bank1
  8620  24D6  00AC               	movwf	wait_ms@timeSec^(0+128)
  8621  24D7  3000               	movlw	0
  8622  24D8  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8623  24D9  31A0  2015  31A4   	fcall	_wait_ms
  8624  24DC  30FF               	movlw	255
  8625  24DD  0021               	movlb	1	; select bank1
  8626  24DE  07B5               	addwf	ring_tactiles@iLed_1533^(0+128),f
  8627  24DF  30FF               	movlw	255
  8628  24E0  3DB6               	addwfc	(ring_tactiles@iLed_1533+1)^(0+128),f
  8629  24E1  2CCB               	goto	L5
  8630  24E2                     __end_of_ring_tactiles:	
  8631                           
  8632                           	psect	text12
  8633  2EF1                     __ptext12:	
  8634 ;; *************** function _setPedalMode *****************
  8635 ;; Defined at:
  8636 ;;		line 119 in file "tactiles.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;		None
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;		None
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  1    wreg      void 
  8643 ;; Registers used:
  8644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8654 ;;Total ram usage:        0 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    5
  8657 ;; This function calls:
  8658 ;;		_resetRingLEDs
  8659 ;;		_setExpressionDisplay
  8660 ;;		_setPresetDisplay
  8661 ;; This function is called by:
  8662 ;;		_update_mode
  8663 ;;		_setDoublePressState
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _setPedalMode
  8669  2EF1                     _setPedalMode:	
  8670                           
  8671                           ;tactiles.c: 120: switch (mode2_state) {
  8672                           
  8673                           ;incstack = 0
  8674                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8675  2EF1  2F08               	goto	l8181
  8676  2EF2                     l991:	
  8677                           ;tactiles.c: 121: case 0:
  8678                           
  8679                           
  8680                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8681  2EF2  0022               	movlb	2	; select bank2
  8682  2EF3  108D               	bcf	13,1	;volatile
  8683                           
  8684                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8685  2EF4  100D               	bcf	13,0	;volatile
  8686                           
  8687                           ;tactiles.c: 124: resetRingLEDs();
  8688  2EF5  31AD  25EA         	fcall	_resetRingLEDs
  8689                           
  8690                           ;tactiles.c: 125: break;
  8691  2EF7  0008               	return
  8692  2EF8                     l993:	
  8693                           ;tactiles.c: 126: case 1:
  8694                           
  8695                           
  8696                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8697  2EF8  0022               	movlb	2	; select bank2
  8698  2EF9  108D               	bcf	13,1	;volatile
  8699                           
  8700                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8701  2EFA  140D               	bsf	13,0	;volatile
  8702                           
  8703                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8704  2EFB  0020               	movlb	0	; select bank0
  8705  2EFC  086A               	movf	_presetChannel,w
  8706  2EFD  31A0  20B5         	fcall	_setPresetDisplay
  8707                           
  8708                           ;tactiles.c: 130: break;
  8709  2EFF  0008               	return
  8710  2F00                     l994:	
  8711                           ;tactiles.c: 131: case 2:
  8712                           
  8713                           
  8714                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8715  2F00  0022               	movlb	2	; select bank2
  8716  2F01  148D               	bsf	13,1	;volatile
  8717                           
  8718                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8719  2F02  100D               	bcf	13,0	;volatile
  8720                           
  8721                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8722  2F03  0020               	movlb	0	; select bank0
  8723  2F04  0867               	movf	_expressionChannel,w
  8724  2F05  31AD  25D2         	fcall	_setExpressionDisplay
  8725                           
  8726                           ;tactiles.c: 136: }
  8727                           
  8728                           ;tactiles.c: 135: break;
  8729  2F07  0008               	return
  8730  2F08                     l8181:	
  8731  2F08  0020               	movlb	0	; select bank0
  8732  2F09  0855               	movf	_mode2_state,w
  8733                           
  8734                           ; Switch size 1, requested type "space"
  8735                           ; Number of cases is 3, Range of values is 0 to 2
  8736                           ; switch strategies available:
  8737                           ; Name         Instructions Cycles
  8738                           ; simple_byte           10     6 (average)
  8739                           ; direct_byte           12     6 (fixed)
  8740                           ; jumptable            260     6 (fixed)
  8741                           ;	Chosen strategy is simple_byte
  8742  2F0A  3A00               	xorlw	0	; case 0
  8743  2F0B  1903               	skipnz
  8744  2F0C  2EF2               	goto	l991
  8745  2F0D  3A01               	xorlw	1	; case 1
  8746  2F0E  1903               	skipnz
  8747  2F0F  2EF8               	goto	l993
  8748  2F10  3A03               	xorlw	3	; case 2
  8749  2F11  1903               	skipnz
  8750  2F12  2F00               	goto	l994
  8751  2F13  2F14               	goto	l995
  8752  2F14                     l995:	
  8753  2F14  0008               	return
  8754  2F15                     __end_of_setPedalMode:	
  8755                           
  8756                           	psect	text13
  8757  20B5                     __ptext13:	
  8758 ;; *************** function _setPresetDisplay *****************
  8759 ;; Defined at:
  8760 ;;		line 51 in file "preset_programming.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;  ledChannel      1    wreg     unsigned char 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  1    wreg      void 
  8767 ;; Registers used:
  8768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8775 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8776 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8777 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8778 ;;Total ram usage:        3 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    4
  8781 ;; This function calls:
  8782 ;;		_set_leds_bottom
  8783 ;;		_set_leds_top
  8784 ;; This function is called by:
  8785 ;;		_setPedalMode
  8786 ;;		_update_selectMode
  8787 ;;		_setDoublePressState
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           
  8792                           ;psect for function _setPresetDisplay
  8793  20B5                     _setPresetDisplay:	
  8794                           
  8795                           ;incstack = 0
  8796                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8797                           ;setPresetDisplay@ledChannel stored from wreg
  8798  20B5  0021               	movlb	1	; select bank1
  8799  20B6  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8800                           
  8801                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8802  20B7  3006               	movlw	6
  8803  20B8  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8804  20B9  1803               	skipnc
  8805  20BA  28D1               	goto	l8001
  8806                           
  8807                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8808  20BB  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8809  20BC  00A4               	movwf	??_setPresetDisplay^(0+128)
  8810  20BD  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8811  20BE  0824               	movf	??_setPresetDisplay^(0+128),w
  8812  20BF  00A0               	movwf	set_leds_top@x^(0+128)
  8813  20C0  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8814  20C1  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8815  20C2  3001               	movlw	1
  8816  20C3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8817  20C4  3000               	movlw	0
  8818  20C5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8819  20C6  31A5  2585  31A0   	fcall	_set_leds_top
  8820                           
  8821                           ;preset_programming.c: 54: set_leds_bottom(6);
  8822  20C9  3006               	movlw	6
  8823  20CA  0021               	movlb	1	; select bank1
  8824  20CB  00A0               	movwf	set_leds_bottom@x^(0+128)
  8825  20CC  3000               	movlw	0
  8826  20CD  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8827  20CE  31A0  20EF         	fcall	_set_leds_bottom
  8828                           
  8829                           ;preset_programming.c: 55: } else {
  8830  20D0  0008               	return
  8831  20D1                     l8001:	
  8832                           
  8833                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8834  20D1  3006               	movlw	6
  8835  20D2  0021               	movlb	1	; select bank1
  8836  20D3  00A0               	movwf	set_leds_top@x^(0+128)
  8837  20D4  3000               	movlw	0
  8838  20D5  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8839  20D6  3001               	movlw	1
  8840  20D7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8841  20D8  3000               	movlw	0
  8842  20D9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8843  20DA  31A5  2585  31A0   	fcall	_set_leds_top
  8844                           
  8845                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8846  20DD  0021               	movlb	1	; select bank1
  8847  20DE  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8848  20DF  00A4               	movwf	??_setPresetDisplay^(0+128)
  8849  20E0  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8850  20E1  09A4               	comf	??_setPresetDisplay^(0+128),f
  8851  20E2  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8852  20E3  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8853  20E4  1903               	skipnz
  8854  20E5  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8855  20E6  0824               	movf	??_setPresetDisplay^(0+128),w
  8856  20E7  3E0B               	addlw	11
  8857  20E8  00A0               	movwf	set_leds_bottom@x^(0+128)
  8858  20E9  3000               	movlw	0
  8859  20EA  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8860  20EB  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8861  20EC  31A0  20EF         	fcall	_set_leds_bottom
  8862  20EE  0008               	return
  8863  20EF                     __end_of_setPresetDisplay:	
  8864                           
  8865                           	psect	text14
  8866  2DD2                     __ptext14:	
  8867 ;; *************** function _setExpressionDisplay *****************
  8868 ;; Defined at:
  8869 ;;		line 66 in file "preset_programming.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  ledChannel      1    wreg     unsigned char 
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8884 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8885 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8886 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8887 ;;Total ram usage:        3 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    4
  8890 ;; This function calls:
  8891 ;;		_set_leds_bottom
  8892 ;;		_set_leds_top
  8893 ;; This function is called by:
  8894 ;;		_setPedalMode
  8895 ;;		_update_selectMode
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           
  8900                           ;psect for function _setExpressionDisplay
  8901  2DD2                     _setExpressionDisplay:	
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8905                           ;setExpressionDisplay@ledChannel stored from wreg
  8906  2DD2  0021               	movlb	1	; select bank1
  8907  2DD3  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8908                           
  8909                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8910  2DD4  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8911  2DD5  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8912  2DD6  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8913  2DD7  0824               	movf	??_setExpressionDisplay^(0+128),w
  8914  2DD8  00A0               	movwf	set_leds_top@x^(0+128)
  8915  2DD9  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8916  2DDA  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8917  2DDB  3001               	movlw	1
  8918  2DDC  00A2               	movwf	set_leds_top@ledState^(0+128)
  8919  2DDD  3000               	movlw	0
  8920  2DDE  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8921  2DDF  31A5  2585  31AD   	fcall	_set_leds_top
  8922                           
  8923                           ;preset_programming.c: 68: set_leds_bottom(6);
  8924  2DE2  3006               	movlw	6
  8925  2DE3  0021               	movlb	1	; select bank1
  8926  2DE4  00A0               	movwf	set_leds_bottom@x^(0+128)
  8927  2DE5  3000               	movlw	0
  8928  2DE6  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8929  2DE7  31A0  20EF         	fcall	_set_leds_bottom
  8930  2DE9  0008               	return
  8931  2DEA                     __end_of_setExpressionDisplay:	
  8932                           
  8933                           	psect	text15
  8934  2DEA                     __ptext15:	
  8935 ;; *************** function _resetRingLEDs *****************
  8936 ;; Defined at:
  8937 ;;		line 61 in file "preset_programming.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;		None
  8940 ;; Auto vars:     Size  Location     Type
  8941 ;;		None
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  1    wreg      void 
  8944 ;; Registers used:
  8945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8955 ;;Total ram usage:        0 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:    4
  8958 ;; This function calls:
  8959 ;;		_set_leds_bottom
  8960 ;;		_set_leds_top
  8961 ;; This function is called by:
  8962 ;;		_update_mode
  8963 ;;		_setPedalMode
  8964 ;;		_setDoublePressState
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function _resetRingLEDs
  8970  2DEA                     _resetRingLEDs:	
  8971                           
  8972                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8976  2DEA  0020               	movlb	0	; select bank0
  8977  2DEB  0865               	movf	_top_push_state+1,w
  8978  2DEC  0021               	movlb	1	; select bank1
  8979  2DED  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8980  2DEE  0020               	movlb	0	; select bank0
  8981  2DEF  0864               	movf	_top_push_state,w
  8982  2DF0  0021               	movlb	1	; select bank1
  8983  2DF1  00A0               	movwf	set_leds_top@x^(0+128)
  8984  2DF2  3001               	movlw	1
  8985  2DF3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8986  2DF4  3000               	movlw	0
  8987  2DF5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8988  2DF6  31A5  2585  31AD   	fcall	_set_leds_top
  8989                           
  8990                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8991  2DF9  0020               	movlb	0	; select bank0
  8992  2DFA  0861               	movf	_bottom_push_state+1,w
  8993  2DFB  0021               	movlb	1	; select bank1
  8994  2DFC  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8995  2DFD  0020               	movlb	0	; select bank0
  8996  2DFE  0860               	movf	_bottom_push_state,w
  8997  2DFF  0021               	movlb	1	; select bank1
  8998  2E00  00A0               	movwf	set_leds_bottom@x^(0+128)
  8999  2E01  31A0  20EF         	fcall	_set_leds_bottom
  9000  2E03  0008               	return
  9001  2E04                     __end_of_resetRingLEDs:	
  9002                           
  9003                           	psect	text16
  9004  0DDD                     __ptext16:	
  9005 ;; *************** function _updateModulationArray *****************
  9006 ;; Defined at:
  9007 ;;		line 44 in file "modulation.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  thisAngle       2   56[BANK2 ] int 
  9012 ;;  iAngle          1   58[BANK2 ] unsigned char 
  9013 ;;  subDiv          2   54[BANK2 ] int 
  9014 ;;  angleFactor     2   52[BANK2 ] int 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9025 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9026 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9027 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9028 ;;Total ram usage:       11 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    7
  9031 ;; This function calls:
  9032 ;;		___awdiv
  9033 ;;		___awtoft
  9034 ;;		___wmul
  9035 ;;		_getModulationSubdivision
  9036 ;;		_modSaw
  9037 ;;		_modSawRev
  9038 ;;		_modSin
  9039 ;;		_modSquare
  9040 ;;		_modTri
  9041 ;; This function is called by:
  9042 ;;		_main
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _updateModulationArray
  9048  0DDD                     _updateModulationArray:	
  9049                           
  9050                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9054  0DDD  31AF  27A0  318D   	fcall	_getModulationSubdivision
  9055  0DE0  0021               	movlb	1	; select bank1
  9056  0DE1  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  9057  0DE2  0022               	movlb	2	; select bank2
  9058  0DE3  00D7               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  9059  0DE4  0021               	movlb	1	; select bank1
  9060  0DE5  0820               	movf	?_getModulationSubdivision^(0+128),w
  9061  0DE6  0022               	movlb	2	; select bank2
  9062  0DE7  00D6               	movwf	updateModulationArray@subDiv^(0+256)
  9063                           
  9064                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  9065  0DE8  307A               	movlw	122
  9066  0DE9  0086               	movwf	6
  9067  0DEA  3024               	movlw	36
  9068  0DEB  0087               	movwf	7
  9069  0DEC  3F40               	moviw [0]fsr1
  9070  0DED  00D0               	movwf	??_updateModulationArray^(0+256)
  9071  0DEE  3F41               	moviw [1]fsr1
  9072  0DEF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9073  0DF0  0020               	movlb	0	; select bank0
  9074  0DF1  0861               	movf	_bottom_push_state+1,w
  9075  0DF2  0022               	movlb	2	; select bank2
  9076  0DF3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9077  0DF4  1D03               	skipz
  9078  0DF5  2DFA               	goto	u9255
  9079  0DF6  0020               	movlb	0	; select bank0
  9080  0DF7  0860               	movf	_bottom_push_state,w
  9081  0DF8  0022               	movlb	2	; select bank2
  9082  0DF9  0650               	xorwf	??_updateModulationArray^(0+256),w
  9083  0DFA                     u9255:	
  9084  0DFA  1D03               	skipz
  9085  0DFB  2E20               	goto	l8673
  9086  0DFC  307C               	movlw	124
  9087  0DFD  0086               	movwf	6
  9088  0DFE  3024               	movlw	36
  9089  0DFF  0087               	movwf	7
  9090  0E00  3F40               	moviw [0]fsr1
  9091  0E01  00D0               	movwf	??_updateModulationArray^(0+256)
  9092  0E02  3F41               	moviw [1]fsr1
  9093  0E03  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9094  0E04  0023               	movlb	3	; select bank3
  9095  0E05  0859               	movf	(_symmetry+1)^(0+384),w
  9096  0E06  0022               	movlb	2	; select bank2
  9097  0E07  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9098  0E08  1D03               	skipz
  9099  0E09  2E0E               	goto	u9265
  9100  0E0A  0023               	movlb	3	; select bank3
  9101  0E0B  0858               	movf	_symmetry^(0+384),w
  9102  0E0C  0022               	movlb	2	; select bank2
  9103  0E0D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9104  0E0E                     u9265:	
  9105  0E0E  1D03               	skipz
  9106  0E0F  2E20               	goto	l8673
  9107  0E10  307E               	movlw	126
  9108  0E11  0086               	movwf	6
  9109  0E12  3024               	movlw	36
  9110  0E13  0087               	movwf	7
  9111  0E14  3F40               	moviw [0]fsr1
  9112  0E15  00D0               	movwf	??_updateModulationArray^(0+256)
  9113  0E16  3F41               	moviw [1]fsr1
  9114  0E17  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  9115  0E18  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9116  0E19  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  9117  0E1A  1D03               	skipz
  9118  0E1B  2E1E               	goto	u9275
  9119  0E1C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9120  0E1D  0650               	xorwf	??_updateModulationArray^(0+256),w
  9121  0E1E                     u9275:	
  9122  0E1E  1903               	btfsc	3,2
  9123  0E1F  0008               	return
  9124  0E20                     l8673:	
  9125                           ;modulation.c: 48: return;
  9126                           
  9127                           
  9128                           ;modulation.c: 49: }
  9129                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  9130  0E20  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9131  0E21  0021               	movlb	1	; select bank1
  9132  0E22  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  9133  0E23  0022               	movlb	2	; select bank2
  9134  0E24  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9135  0E25  0021               	movlb	1	; select bank1
  9136  0E26  00A0               	movwf	___awdiv@divisor^(0+128)
  9137  0E27  3068               	movlw	104
  9138  0E28  00A2               	movwf	___awdiv@dividend^(0+128)
  9139  0E29  3001               	movlw	1
  9140  0E2A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  9141  0E2B  31A5  2533  318D   	fcall	___awdiv
  9142  0E2E  0021               	movlb	1	; select bank1
  9143  0E2F  0821               	movf	(?___awdiv+1)^(0+128),w
  9144  0E30  0022               	movlb	2	; select bank2
  9145  0E31  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  9146  0E32  0021               	movlb	1	; select bank1
  9147  0E33  0820               	movf	?___awdiv^(0+128),w
  9148  0E34  0022               	movlb	2	; select bank2
  9149  0E35  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  9150                           
  9151                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  9152  0E36  01DA               	clrf	updateModulationArray@iAngle^(0+256)
  9153  0E37                     l8697:	
  9154  0E37  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9155  0E38  3A80               	xorlw	128
  9156  0E39  3C80               	sublw	128
  9157  0E3A  1D03               	skipz
  9158  0E3B  2E3E               	goto	u9285
  9159  0E3C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9160  0E3D  025A               	subwf	updateModulationArray@iAngle^(0+256),w
  9161  0E3E                     u9285:	
  9162  0E3E  1803               	btfsc	3,0
  9163  0E3F  2FE4               	goto	l8699
  9164                           
  9165                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  9166  0E40  0022               	movlb	2	; select bank2
  9167  0E41  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9168  0E42  00D0               	movwf	??_updateModulationArray^(0+256)
  9169  0E43  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9170  0E44  0850               	movf	??_updateModulationArray^(0+256),w
  9171  0E45  00AE               	movwf	___wmul@multiplier^(0+256)
  9172  0E46  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9173  0E47  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  9174  0E48  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  9175  0E49  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  9176  0E4A  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  9177  0E4B  00B0               	movwf	___wmul@multiplicand^(0+256)
  9178  0E4C  31AE  261E  318D   	fcall	___wmul
  9179  0E4F  0022               	movlb	2	; select bank2
  9180  0E50  082F               	movf	(?___wmul+1)^(0+256),w
  9181  0E51  00D9               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  9182  0E52  082E               	movf	?___wmul^(0+256),w
  9183  0E53  00D8               	movwf	updateModulationArray@thisAngle^(0+256)
  9184                           
  9185                           ;modulation.c: 54: switch (bottom_push_state) {
  9186  0E54  2FC7               	goto	l8693
  9187  0E55                     l8679:	
  9188                           ;modulation.c: 55: case 1:
  9189                           
  9190                           
  9191                           ;modulation.c: 56: modArray[iAngle] = modSin(thisAngle, symmetry);
  9192  0E55  0022               	movlb	2	; select bank2
  9193  0E56  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9194  0E57  0021               	movlb	1	; select bank1
  9195  0E58  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9196  0E59  0022               	movlb	2	; select bank2
  9197  0E5A  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9198  0E5B  0021               	movlb	1	; select bank1
  9199  0E5C  00A8               	movwf	___awtoft@c^(0+128)
  9200  0E5D  31AE  26CF  318D   	fcall	___awtoft
  9201  0E60  0021               	movlb	1	; select bank1
  9202  0E61  0828               	movf	?___awtoft^(0+128),w
  9203  0E62  0022               	movlb	2	; select bank2
  9204  0E63  00B4               	movwf	modSin@angle^(0+256)
  9205  0E64  0021               	movlb	1	; select bank1
  9206  0E65  0829               	movf	(?___awtoft+1)^(0+128),w
  9207  0E66  0022               	movlb	2	; select bank2
  9208  0E67  00B5               	movwf	(modSin@angle+1)^(0+256)
  9209  0E68  0021               	movlb	1	; select bank1
  9210  0E69  082A               	movf	(?___awtoft+2)^(0+128),w
  9211  0E6A  0022               	movlb	2	; select bank2
  9212  0E6B  00B6               	movwf	(modSin@angle+2)^(0+256)
  9213  0E6C  0023               	movlb	3	; select bank3
  9214  0E6D  0859               	movf	(_symmetry+1)^(0+384),w
  9215  0E6E  0021               	movlb	1	; select bank1
  9216  0E6F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9217  0E70  0023               	movlb	3	; select bank3
  9218  0E71  0858               	movf	_symmetry^(0+384),w
  9219  0E72  0021               	movlb	1	; select bank1
  9220  0E73  00A8               	movwf	___awtoft@c^(0+128)
  9221  0E74  31AE  26CF  318D   	fcall	___awtoft
  9222  0E77  0021               	movlb	1	; select bank1
  9223  0E78  0828               	movf	?___awtoft^(0+128),w
  9224  0E79  0022               	movlb	2	; select bank2
  9225  0E7A  00B7               	movwf	modSin@inflection^(0+256)
  9226  0E7B  0021               	movlb	1	; select bank1
  9227  0E7C  0829               	movf	(?___awtoft+1)^(0+128),w
  9228  0E7D  0022               	movlb	2	; select bank2
  9229  0E7E  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9230  0E7F  0021               	movlb	1	; select bank1
  9231  0E80  082A               	movf	(?___awtoft+2)^(0+128),w
  9232  0E81  0022               	movlb	2	; select bank2
  9233  0E82  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9234  0E83  3196  2654  318D   	fcall	_modSin
  9235  0E86  0022               	movlb	2	; select bank2
  9236  0E87  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9237  0E88  00D0               	movwf	??_updateModulationArray^(0+256)
  9238  0E89  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9239  0E8A  35D0               	lslf	??_updateModulationArray^(0+256),f
  9240  0E8B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9241  0E8C  308A               	movlw	138
  9242  0E8D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9243  0E8E  3023               	movlw	35
  9244  0E8F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9245  0E90  0850               	movf	??_updateModulationArray^(0+256),w
  9246  0E91  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9247  0E92  0086               	movwf	6
  9248  0E93  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9249  0E94  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9250  0E95  0087               	movwf	7
  9251  0E96  0834               	movf	?_modSin^(0+256),w
  9252  0E97  3FC0               	movwi [0]fsr1
  9253  0E98  0835               	movf	(?_modSin+1)^(0+256),w
  9254  0E99  3FC1               	movwi [1]fsr1
  9255                           
  9256                           ;modulation.c: 57: break;
  9257  0E9A  2FDE               	goto	l8695
  9258  0E9B                     l8681:	
  9259                           ;modulation.c: 58: case 2:
  9260                           
  9261                           
  9262                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  9263  0E9B  0022               	movlb	2	; select bank2
  9264  0E9C  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9265  0E9D  0021               	movlb	1	; select bank1
  9266  0E9E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9267  0E9F  0022               	movlb	2	; select bank2
  9268  0EA0  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9269  0EA1  0021               	movlb	1	; select bank1
  9270  0EA2  00A8               	movwf	___awtoft@c^(0+128)
  9271  0EA3  31AE  26CF  318D   	fcall	___awtoft
  9272  0EA6  0021               	movlb	1	; select bank1
  9273  0EA7  0828               	movf	?___awtoft^(0+128),w
  9274  0EA8  0022               	movlb	2	; select bank2
  9275  0EA9  00AE               	movwf	modTri@angle^(0+256)
  9276  0EAA  0021               	movlb	1	; select bank1
  9277  0EAB  0829               	movf	(?___awtoft+1)^(0+128),w
  9278  0EAC  0022               	movlb	2	; select bank2
  9279  0EAD  00AF               	movwf	(modTri@angle+1)^(0+256)
  9280  0EAE  0021               	movlb	1	; select bank1
  9281  0EAF  082A               	movf	(?___awtoft+2)^(0+128),w
  9282  0EB0  0022               	movlb	2	; select bank2
  9283  0EB1  00B0               	movwf	(modTri@angle+2)^(0+256)
  9284  0EB2  0023               	movlb	3	; select bank3
  9285  0EB3  0859               	movf	(_symmetry+1)^(0+384),w
  9286  0EB4  0021               	movlb	1	; select bank1
  9287  0EB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9288  0EB6  0023               	movlb	3	; select bank3
  9289  0EB7  0858               	movf	_symmetry^(0+384),w
  9290  0EB8  0021               	movlb	1	; select bank1
  9291  0EB9  00A8               	movwf	___awtoft@c^(0+128)
  9292  0EBA  31AE  26CF  318D   	fcall	___awtoft
  9293  0EBD  0021               	movlb	1	; select bank1
  9294  0EBE  0828               	movf	?___awtoft^(0+128),w
  9295  0EBF  0022               	movlb	2	; select bank2
  9296  0EC0  00B1               	movwf	modTri@inflection^(0+256)
  9297  0EC1  0021               	movlb	1	; select bank1
  9298  0EC2  0829               	movf	(?___awtoft+1)^(0+128),w
  9299  0EC3  0022               	movlb	2	; select bank2
  9300  0EC4  00B2               	movwf	(modTri@inflection+1)^(0+256)
  9301  0EC5  0021               	movlb	1	; select bank1
  9302  0EC6  082A               	movf	(?___awtoft+2)^(0+128),w
  9303  0EC7  0022               	movlb	2	; select bank2
  9304  0EC8  00B3               	movwf	(modTri@inflection+2)^(0+256)
  9305  0EC9  318B  23E2  318D   	fcall	_modTri
  9306  0ECC  0022               	movlb	2	; select bank2
  9307  0ECD  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9308  0ECE  00D0               	movwf	??_updateModulationArray^(0+256)
  9309  0ECF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9310  0ED0  35D0               	lslf	??_updateModulationArray^(0+256),f
  9311  0ED1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9312  0ED2  308A               	movlw	138
  9313  0ED3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9314  0ED4  3023               	movlw	35
  9315  0ED5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9316  0ED6  0850               	movf	??_updateModulationArray^(0+256),w
  9317  0ED7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9318  0ED8  0086               	movwf	6
  9319  0ED9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9320  0EDA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9321  0EDB  0087               	movwf	7
  9322  0EDC  082E               	movf	?_modTri^(0+256),w
  9323  0EDD  3FC0               	movwi [0]fsr1
  9324  0EDE  082F               	movf	(?_modTri+1)^(0+256),w
  9325  0EDF  3FC1               	movwi [1]fsr1
  9326                           
  9327                           ;modulation.c: 60: break;
  9328  0EE0  2FDE               	goto	l8695
  9329  0EE1                     l8683:	
  9330                           ;modulation.c: 61: case 3:
  9331                           
  9332                           
  9333                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  9334  0EE1  0022               	movlb	2	; select bank2
  9335  0EE2  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9336  0EE3  0021               	movlb	1	; select bank1
  9337  0EE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9338  0EE5  0022               	movlb	2	; select bank2
  9339  0EE6  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9340  0EE7  0021               	movlb	1	; select bank1
  9341  0EE8  00A8               	movwf	___awtoft@c^(0+128)
  9342  0EE9  31AE  26CF  318D   	fcall	___awtoft
  9343  0EEC  0021               	movlb	1	; select bank1
  9344  0EED  0828               	movf	?___awtoft^(0+128),w
  9345  0EEE  0022               	movlb	2	; select bank2
  9346  0EEF  00C8               	movwf	modSquare@angle^(0+256)
  9347  0EF0  0021               	movlb	1	; select bank1
  9348  0EF1  0829               	movf	(?___awtoft+1)^(0+128),w
  9349  0EF2  0022               	movlb	2	; select bank2
  9350  0EF3  00C9               	movwf	(modSquare@angle+1)^(0+256)
  9351  0EF4  0021               	movlb	1	; select bank1
  9352  0EF5  082A               	movf	(?___awtoft+2)^(0+128),w
  9353  0EF6  0022               	movlb	2	; select bank2
  9354  0EF7  00CA               	movwf	(modSquare@angle+2)^(0+256)
  9355  0EF8  0023               	movlb	3	; select bank3
  9356  0EF9  0859               	movf	(_symmetry+1)^(0+384),w
  9357  0EFA  0021               	movlb	1	; select bank1
  9358  0EFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9359  0EFC  0023               	movlb	3	; select bank3
  9360  0EFD  0858               	movf	_symmetry^(0+384),w
  9361  0EFE  0021               	movlb	1	; select bank1
  9362  0EFF  00A8               	movwf	___awtoft@c^(0+128)
  9363  0F00  31AE  26CF  318D   	fcall	___awtoft
  9364  0F03  0021               	movlb	1	; select bank1
  9365  0F04  0828               	movf	?___awtoft^(0+128),w
  9366  0F05  0022               	movlb	2	; select bank2
  9367  0F06  00CB               	movwf	modSquare@inflection^(0+256)
  9368  0F07  0021               	movlb	1	; select bank1
  9369  0F08  0829               	movf	(?___awtoft+1)^(0+128),w
  9370  0F09  0022               	movlb	2	; select bank2
  9371  0F0A  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  9372  0F0B  0021               	movlb	1	; select bank1
  9373  0F0C  082A               	movf	(?___awtoft+2)^(0+128),w
  9374  0F0D  0022               	movlb	2	; select bank2
  9375  0F0E  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9376  0F0F  31A1  2166  318D   	fcall	_modSquare
  9377  0F12  0022               	movlb	2	; select bank2
  9378  0F13  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9379  0F14  00D0               	movwf	??_updateModulationArray^(0+256)
  9380  0F15  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9381  0F16  35D0               	lslf	??_updateModulationArray^(0+256),f
  9382  0F17  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9383  0F18  308A               	movlw	138
  9384  0F19  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9385  0F1A  3023               	movlw	35
  9386  0F1B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9387  0F1C  0850               	movf	??_updateModulationArray^(0+256),w
  9388  0F1D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9389  0F1E  0086               	movwf	6
  9390  0F1F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9391  0F20  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9392  0F21  0087               	movwf	7
  9393  0F22  0848               	movf	?_modSquare^(0+256),w
  9394  0F23  3FC0               	movwi [0]fsr1
  9395  0F24  0849               	movf	(?_modSquare+1)^(0+256),w
  9396  0F25  3FC1               	movwi [1]fsr1
  9397                           
  9398                           ;modulation.c: 63: break;
  9399  0F26  2FDE               	goto	l8695
  9400  0F27                     l8685:	
  9401                           ;modulation.c: 64: case 4:
  9402                           
  9403                           
  9404                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9405  0F27  0022               	movlb	2	; select bank2
  9406  0F28  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9407  0F29  0021               	movlb	1	; select bank1
  9408  0F2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9409  0F2B  0022               	movlb	2	; select bank2
  9410  0F2C  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9411  0F2D  0021               	movlb	1	; select bank1
  9412  0F2E  00A8               	movwf	___awtoft@c^(0+128)
  9413  0F2F  31AE  26CF  318D   	fcall	___awtoft
  9414  0F32  0021               	movlb	1	; select bank1
  9415  0F33  0828               	movf	?___awtoft^(0+128),w
  9416  0F34  0022               	movlb	2	; select bank2
  9417  0F35  00C5               	movwf	modSawRev@angle^(0+256)
  9418  0F36  0021               	movlb	1	; select bank1
  9419  0F37  0829               	movf	(?___awtoft+1)^(0+128),w
  9420  0F38  0022               	movlb	2	; select bank2
  9421  0F39  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9422  0F3A  0021               	movlb	1	; select bank1
  9423  0F3B  082A               	movf	(?___awtoft+2)^(0+128),w
  9424  0F3C  0022               	movlb	2	; select bank2
  9425  0F3D  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9426  0F3E  0023               	movlb	3	; select bank3
  9427  0F3F  0859               	movf	(_symmetry+1)^(0+384),w
  9428  0F40  0021               	movlb	1	; select bank1
  9429  0F41  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9430  0F42  0023               	movlb	3	; select bank3
  9431  0F43  0858               	movf	_symmetry^(0+384),w
  9432  0F44  0021               	movlb	1	; select bank1
  9433  0F45  00A8               	movwf	___awtoft@c^(0+128)
  9434  0F46  31AE  26CF  318D   	fcall	___awtoft
  9435  0F49  0021               	movlb	1	; select bank1
  9436  0F4A  0828               	movf	?___awtoft^(0+128),w
  9437  0F4B  0022               	movlb	2	; select bank2
  9438  0F4C  00C8               	movwf	modSawRev@inflection^(0+256)
  9439  0F4D  0021               	movlb	1	; select bank1
  9440  0F4E  0829               	movf	(?___awtoft+1)^(0+128),w
  9441  0F4F  0022               	movlb	2	; select bank2
  9442  0F50  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9443  0F51  0021               	movlb	1	; select bank1
  9444  0F52  082A               	movf	(?___awtoft+2)^(0+128),w
  9445  0F53  0022               	movlb	2	; select bank2
  9446  0F54  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9447  0F55  31AE  2656  318D   	fcall	_modSawRev
  9448  0F58  0022               	movlb	2	; select bank2
  9449  0F59  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9450  0F5A  00D0               	movwf	??_updateModulationArray^(0+256)
  9451  0F5B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9452  0F5C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9453  0F5D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9454  0F5E  308A               	movlw	138
  9455  0F5F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9456  0F60  3023               	movlw	35
  9457  0F61  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9458  0F62  0850               	movf	??_updateModulationArray^(0+256),w
  9459  0F63  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9460  0F64  0086               	movwf	6
  9461  0F65  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9462  0F66  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9463  0F67  0087               	movwf	7
  9464  0F68  0845               	movf	?_modSawRev^(0+256),w
  9465  0F69  3FC0               	movwi [0]fsr1
  9466  0F6A  0846               	movf	(?_modSawRev+1)^(0+256),w
  9467  0F6B  3FC1               	movwi [1]fsr1
  9468                           
  9469                           ;modulation.c: 66: break;
  9470  0F6C  2FDE               	goto	l8695
  9471  0F6D                     l8687:	
  9472                           ;modulation.c: 67: case 5:
  9473                           
  9474                           
  9475                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9476  0F6D  0022               	movlb	2	; select bank2
  9477  0F6E  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9478  0F6F  0021               	movlb	1	; select bank1
  9479  0F70  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9480  0F71  0022               	movlb	2	; select bank2
  9481  0F72  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9482  0F73  0021               	movlb	1	; select bank1
  9483  0F74  00A8               	movwf	___awtoft@c^(0+128)
  9484  0F75  31AE  26CF  318D   	fcall	___awtoft
  9485  0F78  0021               	movlb	1	; select bank1
  9486  0F79  0828               	movf	?___awtoft^(0+128),w
  9487  0F7A  0022               	movlb	2	; select bank2
  9488  0F7B  00AE               	movwf	modSaw@angle^(0+256)
  9489  0F7C  0021               	movlb	1	; select bank1
  9490  0F7D  0829               	movf	(?___awtoft+1)^(0+128),w
  9491  0F7E  0022               	movlb	2	; select bank2
  9492  0F7F  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9493  0F80  0021               	movlb	1	; select bank1
  9494  0F81  082A               	movf	(?___awtoft+2)^(0+128),w
  9495  0F82  0022               	movlb	2	; select bank2
  9496  0F83  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9497  0F84  0023               	movlb	3	; select bank3
  9498  0F85  0859               	movf	(_symmetry+1)^(0+384),w
  9499  0F86  0021               	movlb	1	; select bank1
  9500  0F87  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9501  0F88  0023               	movlb	3	; select bank3
  9502  0F89  0858               	movf	_symmetry^(0+384),w
  9503  0F8A  0021               	movlb	1	; select bank1
  9504  0F8B  00A8               	movwf	___awtoft@c^(0+128)
  9505  0F8C  31AE  26CF  318D   	fcall	___awtoft
  9506  0F8F  0021               	movlb	1	; select bank1
  9507  0F90  0828               	movf	?___awtoft^(0+128),w
  9508  0F91  0022               	movlb	2	; select bank2
  9509  0F92  00B1               	movwf	modSaw@inflection^(0+256)
  9510  0F93  0021               	movlb	1	; select bank1
  9511  0F94  0829               	movf	(?___awtoft+1)^(0+128),w
  9512  0F95  0022               	movlb	2	; select bank2
  9513  0F96  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9514  0F97  0021               	movlb	1	; select bank1
  9515  0F98  082A               	movf	(?___awtoft+2)^(0+128),w
  9516  0F99  0022               	movlb	2	; select bank2
  9517  0F9A  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9518  0F9B  3194  24AA  318D   	fcall	_modSaw
  9519  0F9E  0022               	movlb	2	; select bank2
  9520  0F9F  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9521  0FA0  00D0               	movwf	??_updateModulationArray^(0+256)
  9522  0FA1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9523  0FA2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9524  0FA3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9525  0FA4  308A               	movlw	138
  9526  0FA5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9527  0FA6  3023               	movlw	35
  9528  0FA7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9529  0FA8  0850               	movf	??_updateModulationArray^(0+256),w
  9530  0FA9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9531  0FAA  0086               	movwf	6
  9532  0FAB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9533  0FAC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9534  0FAD  0087               	movwf	7
  9535  0FAE  082E               	movf	?_modSaw^(0+256),w
  9536  0FAF  3FC0               	movwi [0]fsr1
  9537  0FB0  082F               	movf	(?_modSaw+1)^(0+256),w
  9538  0FB1  3FC1               	movwi [1]fsr1
  9539                           
  9540                           ;modulation.c: 69: break;
  9541  0FB2  2FDE               	goto	l8695
  9542  0FB3                     l8689:	
  9543                           ;modulation.c: 70: default:
  9544                           
  9545                           
  9546                           ;modulation.c: 71: modArray[iAngle] = 0;
  9547  0FB3  0022               	movlb	2	; select bank2
  9548  0FB4  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9549  0FB5  00D0               	movwf	??_updateModulationArray^(0+256)
  9550  0FB6  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9551  0FB7  35D0               	lslf	??_updateModulationArray^(0+256),f
  9552  0FB8  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9553  0FB9  308A               	movlw	138
  9554  0FBA  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9555  0FBB  3023               	movlw	35
  9556  0FBC  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9557  0FBD  0850               	movf	??_updateModulationArray^(0+256),w
  9558  0FBE  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9559  0FBF  0086               	movwf	6
  9560  0FC0  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9561  0FC1  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9562  0FC2  0087               	movwf	7
  9563  0FC3  3000               	movlw	0
  9564  0FC4  3FC0               	movwi [0]fsr1
  9565  0FC5  3FC1               	movwi [1]fsr1
  9566                           
  9567                           ;modulation.c: 73: }
  9568                           
  9569                           ;modulation.c: 72: break;
  9570  0FC6  2FDE               	goto	l8695
  9571  0FC7                     l8693:	
  9572                           
  9573                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9574                           ; Switch size 1, requested type "space"
  9575                           ; Number of cases is 1, Range of values is 0 to 0
  9576                           ; switch strategies available:
  9577                           ; Name         Instructions Cycles
  9578                           ; simple_byte            4     3 (average)
  9579                           ; direct_byte            8     6 (fixed)
  9580                           ; jumptable            260     6 (fixed)
  9581                           ;	Chosen strategy is simple_byte
  9582  0FC7  0020               	movlb	0	; select bank0
  9583  0FC8  0861               	movf	_bottom_push_state+1,w
  9584  0FC9  3A00               	xorlw	0	; case 0
  9585  0FCA  1903               	skipnz
  9586  0FCB  2FCD               	goto	l9783
  9587  0FCC  2FB3               	goto	l8689
  9588  0FCD                     l9783:	
  9589                           
  9590                           ; Switch size 1, requested type "space"
  9591                           ; Number of cases is 5, Range of values is 1 to 5
  9592                           ; switch strategies available:
  9593                           ; Name         Instructions Cycles
  9594                           ; simple_byte           16     9 (average)
  9595                           ; direct_byte           19     9 (fixed)
  9596                           ; jumptable            263     9 (fixed)
  9597                           ;	Chosen strategy is simple_byte
  9598  0FCD  0860               	movf	_bottom_push_state,w
  9599  0FCE  3A01               	xorlw	1	; case 1
  9600  0FCF  1903               	skipnz
  9601  0FD0  2E55               	goto	l8679
  9602  0FD1  3A03               	xorlw	3	; case 2
  9603  0FD2  1903               	skipnz
  9604  0FD3  2E9B               	goto	l8681
  9605  0FD4  3A01               	xorlw	1	; case 3
  9606  0FD5  1903               	skipnz
  9607  0FD6  2EE1               	goto	l8683
  9608  0FD7  3A07               	xorlw	7	; case 4
  9609  0FD8  1903               	skipnz
  9610  0FD9  2F27               	goto	l8685
  9611  0FDA  3A01               	xorlw	1	; case 5
  9612  0FDB  1903               	skipnz
  9613  0FDC  2F6D               	goto	l8687
  9614  0FDD  2FB3               	goto	l8689
  9615  0FDE                     l8695:	
  9616  0FDE  3001               	movlw	1
  9617  0FDF  0022               	movlb	2	; select bank2
  9618  0FE0  00D0               	movwf	??_updateModulationArray^(0+256)
  9619  0FE1  0850               	movf	??_updateModulationArray^(0+256),w
  9620  0FE2  07DA               	addwf	updateModulationArray@iAngle^(0+256),f
  9621  0FE3  2E37               	goto	l8697
  9622  0FE4                     l8699:	
  9623                           
  9624                           ;modulation.c: 74: }
  9625                           ;modulation.c: 75: modArray[120] = bottom_push_state;
  9626  0FE4  307A               	movlw	122
  9627  0FE5  0086               	movwf	6
  9628  0FE6  3024               	movlw	36
  9629  0FE7  0087               	movwf	7
  9630  0FE8  0020               	movlb	0	; select bank0
  9631  0FE9  0860               	movf	_bottom_push_state,w
  9632  0FEA  3FC0               	movwi [0]fsr1
  9633  0FEB  0861               	movf	_bottom_push_state+1,w
  9634  0FEC  3FC1               	movwi [1]fsr1
  9635                           
  9636                           ;modulation.c: 76: modArray[121] = symmetry;
  9637  0FED  307C               	movlw	124
  9638  0FEE  0086               	movwf	6
  9639  0FEF  3024               	movlw	36
  9640  0FF0  0087               	movwf	7
  9641  0FF1  0023               	movlb	3	; select bank3
  9642  0FF2  0858               	movf	_symmetry^(0+384),w
  9643  0FF3  3FC0               	movwi [0]fsr1
  9644  0FF4  0859               	movf	(_symmetry+1)^(0+384),w
  9645  0FF5  3FC1               	movwi [1]fsr1
  9646                           
  9647                           ;modulation.c: 77: modArray[122] = subDiv;
  9648  0FF6  307E               	movlw	126
  9649  0FF7  0086               	movwf	6
  9650  0FF8  3024               	movlw	36
  9651  0FF9  0087               	movwf	7
  9652  0FFA  0022               	movlb	2	; select bank2
  9653  0FFB  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9654  0FFC  3FC0               	movwi [0]fsr1
  9655  0FFD  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9656  0FFE  3FC1               	movwi [1]fsr1
  9657  0FFF  0008               	return
  9658  1000                     __end_of_updateModulationArray:	
  9659                           
  9660                           	psect	text17
  9661  0BE2                     __ptext17:	
  9662 ;; *************** function _modTri *****************
  9663 ;; Defined at:
  9664 ;;		line 96 in file "modulation.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;  angle           3   14[BANK2 ] void 
  9667 ;;  inflection      3   17[BANK2 ] void 
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  tmpVal          3   29[BANK2 ] void 
  9670 ;;  period          3   26[BANK2 ] void 
  9671 ;;  shift           3   23[BANK2 ] void 
  9672 ;; Return value:  Size  Location     Type
  9673 ;;                  2   14[BANK2 ] int 
  9674 ;; Registers used:
  9675 ;;		wreg, status,2, status,0, pclath, cstack
  9676 ;; Tracked objects:
  9677 ;;		On entry : 0/0
  9678 ;;		On exit  : 0/0
  9679 ;;		Unchanged: 0/0
  9680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9681 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9682 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9684 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9685 ;;Total ram usage:       18 bytes
  9686 ;; Hardware stack levels used:    1
  9687 ;; Hardware stack levels required when called:    5
  9688 ;; This function calls:
  9689 ;;		___ftadd
  9690 ;;		___ftdiv
  9691 ;;		___ftge
  9692 ;;		___ftmul
  9693 ;;		___ftneg
  9694 ;;		___fttol
  9695 ;; This function is called by:
  9696 ;;		_updateModulationArray
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           
  9701                           ;psect for function _modTri
  9702  0BE2                     _modTri:	
  9703                           
  9704                           ;modulation.c: 97: double period = 1.0;
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9708  0BE2  3000               	movlw	0
  9709  0BE3  0022               	movlb	2	; select bank2
  9710  0BE4  00BA               	movwf	modTri@period^(0+256)
  9711  0BE5  3080               	movlw	128
  9712  0BE6  00BB               	movwf	(modTri@period+1)^(0+256)
  9713  0BE7  303F               	movlw	63
  9714  0BE8  00BC               	movwf	(modTri@period+2)^(0+256)
  9715                           
  9716                           ;modulation.c: 98: double shift = 0;
  9717  0BE9  3000               	movlw	0
  9718  0BEA  00B7               	movwf	modTri@shift^(0+256)
  9719  0BEB  3000               	movlw	0
  9720  0BEC  00B8               	movwf	(modTri@shift+1)^(0+256)
  9721  0BED  3000               	movlw	0
  9722  0BEE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9723                           
  9724                           ;modulation.c: 100: if(angle<=inflection) {
  9725  0BEF  0831               	movf	modTri@inflection^(0+256),w
  9726  0BF0  0021               	movlb	1	; select bank1
  9727  0BF1  00A0               	movwf	___ftge@ff1^(0+128)
  9728  0BF2  0022               	movlb	2	; select bank2
  9729  0BF3  0832               	movf	(modTri@inflection+1)^(0+256),w
  9730  0BF4  0021               	movlb	1	; select bank1
  9731  0BF5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9732  0BF6  0022               	movlb	2	; select bank2
  9733  0BF7  0833               	movf	(modTri@inflection+2)^(0+256),w
  9734  0BF8  0021               	movlb	1	; select bank1
  9735  0BF9  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9736  0BFA  0022               	movlb	2	; select bank2
  9737  0BFB  082E               	movf	modTri@angle^(0+256),w
  9738  0BFC  0021               	movlb	1	; select bank1
  9739  0BFD  00A3               	movwf	___ftge@ff2^(0+128)
  9740  0BFE  0022               	movlb	2	; select bank2
  9741  0BFF  082F               	movf	(modTri@angle+1)^(0+256),w
  9742  0C00  0021               	movlb	1	; select bank1
  9743  0C01  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9744  0C02  0022               	movlb	2	; select bank2
  9745  0C03  0830               	movf	(modTri@angle+2)^(0+256),w
  9746  0C04  0021               	movlb	1	; select bank1
  9747  0C05  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9748  0C06  31A1  212A  318B   	fcall	___ftge
  9749  0C09  1C03               	btfss	3,0
  9750  0C0A  2C17               	goto	l8539
  9751                           
  9752                           ;modulation.c: 101: period = 180.0/inflection;
  9753  0C0B  0022               	movlb	2	; select bank2
  9754  0C0C  0831               	movf	modTri@inflection^(0+256),w
  9755  0C0D  0021               	movlb	1	; select bank1
  9756  0C0E  00CE               	movwf	___ftdiv@f2^(0+128)
  9757  0C0F  0022               	movlb	2	; select bank2
  9758  0C10  0832               	movf	(modTri@inflection+1)^(0+256),w
  9759  0C11  0021               	movlb	1	; select bank1
  9760  0C12  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9761  0C13  0022               	movlb	2	; select bank2
  9762  0C14  0833               	movf	(modTri@inflection+2)^(0+256),w
  9763  0C15  0021               	movlb	1	; select bank1
  9764  0C16  2CD2               	goto	L6
  9765  0C17                     l8539:	
  9766                           ;modulation.c: 102: } else {
  9767                           
  9768                           
  9769                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9770  0C17  0022               	movlb	2	; select bank2
  9771  0C18  0831               	movf	modTri@inflection^(0+256),w
  9772  0C19  0021               	movlb	1	; select bank1
  9773  0C1A  00B1               	movwf	___ftmul@f2^(0+128)
  9774  0C1B  0022               	movlb	2	; select bank2
  9775  0C1C  0832               	movf	(modTri@inflection+1)^(0+256),w
  9776  0C1D  0021               	movlb	1	; select bank1
  9777  0C1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9778  0C1F  0022               	movlb	2	; select bank2
  9779  0C20  0833               	movf	(modTri@inflection+2)^(0+256),w
  9780  0C21  0021               	movlb	1	; select bank1
  9781  0C22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9782  0C23  3000               	movlw	0
  9783  0C24  00AE               	movwf	___ftmul@f1^(0+128)
  9784  0C25  3000               	movlw	0
  9785  0C26  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9786  0C27  3040               	movlw	64
  9787  0C28  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9788  0C29  3187  274C  318B   	fcall	___ftmul
  9789  0C2C  0021               	movlb	1	; select bank1
  9790  0C2D  082E               	movf	?___ftmul^(0+128),w
  9791  0C2E  00BE               	movwf	___ftneg@f1^(0+128)
  9792  0C2F  082F               	movf	(?___ftmul+1)^(0+128),w
  9793  0C30  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9794  0C31  0830               	movf	(?___ftmul+2)^(0+128),w
  9795  0C32  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9796  0C33  31AD  2575  318B   	fcall	___ftneg
  9797  0C36  0021               	movlb	1	; select bank1
  9798  0C37  083E               	movf	?___ftneg^(0+128),w
  9799  0C38  00C4               	movwf	___ftadd@f2^(0+128)
  9800  0C39  083F               	movf	(?___ftneg+1)^(0+128),w
  9801  0C3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9802  0C3B  0840               	movf	(?___ftneg+2)^(0+128),w
  9803  0C3C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9804  0C3D  3000               	movlw	0
  9805  0C3E  00C1               	movwf	___ftadd@f1^(0+128)
  9806  0C3F  30B4               	movlw	180
  9807  0C40  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9808  0C41  3043               	movlw	67
  9809  0C42  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9810  0C43  3190  2026  318B   	fcall	___ftadd
  9811  0C46  0021               	movlb	1	; select bank1
  9812  0C47  0841               	movf	?___ftadd^(0+128),w
  9813  0C48  0022               	movlb	2	; select bank2
  9814  0C49  00B4               	movwf	_modTri$2846^(0+256)
  9815  0C4A  0021               	movlb	1	; select bank1
  9816  0C4B  0842               	movf	(?___ftadd+1)^(0+128),w
  9817  0C4C  0022               	movlb	2	; select bank2
  9818  0C4D  00B5               	movwf	(_modTri$2846+1)^(0+256)
  9819  0C4E  0021               	movlb	1	; select bank1
  9820  0C4F  0843               	movf	(?___ftadd+2)^(0+128),w
  9821  0C50  0022               	movlb	2	; select bank2
  9822  0C51  00B6               	movwf	(_modTri$2846+2)^(0+256)
  9823                           
  9824                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9825  0C52  0834               	movf	_modTri$2846^(0+256),w
  9826  0C53  0021               	movlb	1	; select bank1
  9827  0C54  00BE               	movwf	___ftneg@f1^(0+128)
  9828  0C55  0022               	movlb	2	; select bank2
  9829  0C56  0835               	movf	(_modTri$2846+1)^(0+256),w
  9830  0C57  0021               	movlb	1	; select bank1
  9831  0C58  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9832  0C59  0022               	movlb	2	; select bank2
  9833  0C5A  0836               	movf	(_modTri$2846+2)^(0+256),w
  9834  0C5B  0021               	movlb	1	; select bank1
  9835  0C5C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9836  0C5D  31AD  2575  318B   	fcall	___ftneg
  9837  0C60  0021               	movlb	1	; select bank1
  9838  0C61  083E               	movf	?___ftneg^(0+128),w
  9839  0C62  00AE               	movwf	___ftmul@f1^(0+128)
  9840  0C63  083F               	movf	(?___ftneg+1)^(0+128),w
  9841  0C64  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9842  0C65  0840               	movf	(?___ftneg+2)^(0+128),w
  9843  0C66  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9844  0C67  3000               	movlw	0
  9845  0C68  00C1               	movwf	___ftadd@f1^(0+128)
  9846  0C69  30B4               	movlw	180
  9847  0C6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9848  0C6B  3043               	movlw	67
  9849  0C6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9850  0C6D  0022               	movlb	2	; select bank2
  9851  0C6E  0831               	movf	modTri@inflection^(0+256),w
  9852  0C6F  0021               	movlb	1	; select bank1
  9853  0C70  00BE               	movwf	___ftneg@f1^(0+128)
  9854  0C71  0022               	movlb	2	; select bank2
  9855  0C72  0832               	movf	(modTri@inflection+1)^(0+256),w
  9856  0C73  0021               	movlb	1	; select bank1
  9857  0C74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9858  0C75  0022               	movlb	2	; select bank2
  9859  0C76  0833               	movf	(modTri@inflection+2)^(0+256),w
  9860  0C77  0021               	movlb	1	; select bank1
  9861  0C78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9862  0C79  31AD  2575  318B   	fcall	___ftneg
  9863  0C7C  0021               	movlb	1	; select bank1
  9864  0C7D  083E               	movf	?___ftneg^(0+128),w
  9865  0C7E  00C4               	movwf	___ftadd@f2^(0+128)
  9866  0C7F  083F               	movf	(?___ftneg+1)^(0+128),w
  9867  0C80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9868  0C81  0840               	movf	(?___ftneg+2)^(0+128),w
  9869  0C82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9870  0C83  3190  2026  318B   	fcall	___ftadd
  9871  0C86  0021               	movlb	1	; select bank1
  9872  0C87  0841               	movf	?___ftadd^(0+128),w
  9873  0C88  00CE               	movwf	___ftdiv@f2^(0+128)
  9874  0C89  0842               	movf	(?___ftadd+1)^(0+128),w
  9875  0C8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9876  0C8B  0843               	movf	(?___ftadd+2)^(0+128),w
  9877  0C8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9878  0C8D  3000               	movlw	0
  9879  0C8E  00D1               	movwf	___ftdiv@f1^(0+128)
  9880  0C8F  3034               	movlw	52
  9881  0C90  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9882  0C91  3043               	movlw	67
  9883  0C92  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9884  0C93  319D  2520  318B   	fcall	___ftdiv
  9885  0C96  0021               	movlb	1	; select bank1
  9886  0C97  084E               	movf	?___ftdiv^(0+128),w
  9887  0C98  00B1               	movwf	___ftmul@f2^(0+128)
  9888  0C99  084F               	movf	(?___ftdiv+1)^(0+128),w
  9889  0C9A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9890  0C9B  0850               	movf	(?___ftdiv+2)^(0+128),w
  9891  0C9C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9892  0C9D  3187  274C  318B   	fcall	___ftmul
  9893  0CA0  0021               	movlb	1	; select bank1
  9894  0CA1  082E               	movf	?___ftmul^(0+128),w
  9895  0CA2  0022               	movlb	2	; select bank2
  9896  0CA3  00B7               	movwf	modTri@shift^(0+256)
  9897  0CA4  0021               	movlb	1	; select bank1
  9898  0CA5  082F               	movf	(?___ftmul+1)^(0+128),w
  9899  0CA6  0022               	movlb	2	; select bank2
  9900  0CA7  00B8               	movwf	(modTri@shift+1)^(0+256)
  9901  0CA8  0021               	movlb	1	; select bank1
  9902  0CA9  0830               	movf	(?___ftmul+2)^(0+128),w
  9903  0CAA  0022               	movlb	2	; select bank2
  9904  0CAB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9905                           
  9906                           ;modulation.c: 104: period = 180/(360-inflection);
  9907  0CAC  3000               	movlw	0
  9908  0CAD  0021               	movlb	1	; select bank1
  9909  0CAE  00C1               	movwf	___ftadd@f1^(0+128)
  9910  0CAF  30B4               	movlw	180
  9911  0CB0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9912  0CB1  3043               	movlw	67
  9913  0CB2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9914  0CB3  0022               	movlb	2	; select bank2
  9915  0CB4  0831               	movf	modTri@inflection^(0+256),w
  9916  0CB5  0021               	movlb	1	; select bank1
  9917  0CB6  00BE               	movwf	___ftneg@f1^(0+128)
  9918  0CB7  0022               	movlb	2	; select bank2
  9919  0CB8  0832               	movf	(modTri@inflection+1)^(0+256),w
  9920  0CB9  0021               	movlb	1	; select bank1
  9921  0CBA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9922  0CBB  0022               	movlb	2	; select bank2
  9923  0CBC  0833               	movf	(modTri@inflection+2)^(0+256),w
  9924  0CBD  0021               	movlb	1	; select bank1
  9925  0CBE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9926  0CBF  31AD  2575  318B   	fcall	___ftneg
  9927  0CC2  0021               	movlb	1	; select bank1
  9928  0CC3  083E               	movf	?___ftneg^(0+128),w
  9929  0CC4  00C4               	movwf	___ftadd@f2^(0+128)
  9930  0CC5  083F               	movf	(?___ftneg+1)^(0+128),w
  9931  0CC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9932  0CC7  0840               	movf	(?___ftneg+2)^(0+128),w
  9933  0CC8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9934  0CC9  3190  2026  318B   	fcall	___ftadd
  9935  0CCC  0021               	movlb	1	; select bank1
  9936  0CCD  0841               	movf	?___ftadd^(0+128),w
  9937  0CCE  00CE               	movwf	___ftdiv@f2^(0+128)
  9938  0CCF  0842               	movf	(?___ftadd+1)^(0+128),w
  9939  0CD0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9940  0CD1  0843               	movf	(?___ftadd+2)^(0+128),w
  9941  0CD2                     L6:	
  9942  0CD2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9943  0CD3  3000               	movlw	0
  9944  0CD4  00D1               	movwf	___ftdiv@f1^(0+128)
  9945  0CD5  3034               	movlw	52
  9946  0CD6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9947  0CD7  3043               	movlw	67
  9948  0CD8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9949  0CD9  319D  2520  318B   	fcall	___ftdiv
  9950  0CDC  0021               	movlb	1	; select bank1
  9951  0CDD  084E               	movf	?___ftdiv^(0+128),w
  9952  0CDE  0022               	movlb	2	; select bank2
  9953  0CDF  00BA               	movwf	modTri@period^(0+256)
  9954  0CE0  0021               	movlb	1	; select bank1
  9955  0CE1  084F               	movf	(?___ftdiv+1)^(0+128),w
  9956  0CE2  0022               	movlb	2	; select bank2
  9957  0CE3  00BB               	movwf	(modTri@period+1)^(0+256)
  9958  0CE4  0021               	movlb	1	; select bank1
  9959  0CE5  0850               	movf	(?___ftdiv+2)^(0+128),w
  9960  0CE6  0022               	movlb	2	; select bank2
  9961  0CE7  00BC               	movwf	(modTri@period+2)^(0+256)
  9962                           
  9963                           ;modulation.c: 106: }
  9964                           ;modulation.c: 107: double tmpVal = (period*angle-shift) ;
  9965  0CE8  0837               	movf	modTri@shift^(0+256),w
  9966  0CE9  0021               	movlb	1	; select bank1
  9967  0CEA  00BE               	movwf	___ftneg@f1^(0+128)
  9968  0CEB  0022               	movlb	2	; select bank2
  9969  0CEC  0838               	movf	(modTri@shift+1)^(0+256),w
  9970  0CED  0021               	movlb	1	; select bank1
  9971  0CEE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9972  0CEF  0022               	movlb	2	; select bank2
  9973  0CF0  0839               	movf	(modTri@shift+2)^(0+256),w
  9974  0CF1  0021               	movlb	1	; select bank1
  9975  0CF2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9976  0CF3  31AD  2575  318B   	fcall	___ftneg
  9977  0CF6  0021               	movlb	1	; select bank1
  9978  0CF7  083E               	movf	?___ftneg^(0+128),w
  9979  0CF8  00C1               	movwf	___ftadd@f1^(0+128)
  9980  0CF9  083F               	movf	(?___ftneg+1)^(0+128),w
  9981  0CFA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9982  0CFB  0840               	movf	(?___ftneg+2)^(0+128),w
  9983  0CFC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9984  0CFD  0022               	movlb	2	; select bank2
  9985  0CFE  082E               	movf	modTri@angle^(0+256),w
  9986  0CFF  0021               	movlb	1	; select bank1
  9987  0D00  00AE               	movwf	___ftmul@f1^(0+128)
  9988  0D01  0022               	movlb	2	; select bank2
  9989  0D02  082F               	movf	(modTri@angle+1)^(0+256),w
  9990  0D03  0021               	movlb	1	; select bank1
  9991  0D04  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9992  0D05  0022               	movlb	2	; select bank2
  9993  0D06  0830               	movf	(modTri@angle+2)^(0+256),w
  9994  0D07  0021               	movlb	1	; select bank1
  9995  0D08  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9996  0D09  0022               	movlb	2	; select bank2
  9997  0D0A  083A               	movf	modTri@period^(0+256),w
  9998  0D0B  0021               	movlb	1	; select bank1
  9999  0D0C  00B1               	movwf	___ftmul@f2^(0+128)
 10000  0D0D  0022               	movlb	2	; select bank2
 10001  0D0E  083B               	movf	(modTri@period+1)^(0+256),w
 10002  0D0F  0021               	movlb	1	; select bank1
 10003  0D10  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10004  0D11  0022               	movlb	2	; select bank2
 10005  0D12  083C               	movf	(modTri@period+2)^(0+256),w
 10006  0D13  0021               	movlb	1	; select bank1
 10007  0D14  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10008  0D15  3187  274C  318B   	fcall	___ftmul
 10009  0D18  0021               	movlb	1	; select bank1
 10010  0D19  082E               	movf	?___ftmul^(0+128),w
 10011  0D1A  00C4               	movwf	___ftadd@f2^(0+128)
 10012  0D1B  082F               	movf	(?___ftmul+1)^(0+128),w
 10013  0D1C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10014  0D1D  0830               	movf	(?___ftmul+2)^(0+128),w
 10015  0D1E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10016  0D1F  3190  2026  318B   	fcall	___ftadd
 10017  0D22  0021               	movlb	1	; select bank1
 10018  0D23  0841               	movf	?___ftadd^(0+128),w
 10019  0D24  0022               	movlb	2	; select bank2
 10020  0D25  00BD               	movwf	modTri@tmpVal^(0+256)
 10021  0D26  0021               	movlb	1	; select bank1
 10022  0D27  0842               	movf	(?___ftadd+1)^(0+128),w
 10023  0D28  0022               	movlb	2	; select bank2
 10024  0D29  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10025  0D2A  0021               	movlb	1	; select bank1
 10026  0D2B  0843               	movf	(?___ftadd+2)^(0+128),w
 10027  0D2C  0022               	movlb	2	; select bank2
 10028  0D2D  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10029                           
 10030                           ;modulation.c: 108: if (tmpVal > 270) {
 10031  0D2E  3000               	movlw	0
 10032  0D2F  0021               	movlb	1	; select bank1
 10033  0D30  00A0               	movwf	___ftge@ff1^(0+128)
 10034  0D31  3087               	movlw	135
 10035  0D32  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10036  0D33  3043               	movlw	67
 10037  0D34  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10038  0D35  0022               	movlb	2	; select bank2
 10039  0D36  083D               	movf	modTri@tmpVal^(0+256),w
 10040  0D37  0021               	movlb	1	; select bank1
 10041  0D38  00A3               	movwf	___ftge@ff2^(0+128)
 10042  0D39  0022               	movlb	2	; select bank2
 10043  0D3A  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10044  0D3B  0021               	movlb	1	; select bank1
 10045  0D3C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10046  0D3D  0022               	movlb	2	; select bank2
 10047  0D3E  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10048  0D3F  0021               	movlb	1	; select bank1
 10049  0D40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10050  0D41  31A1  212A  318B   	fcall	___ftge
 10051  0D44  1803               	btfsc	3,0
 10052  0D45  2D59               	goto	l8543
 10053                           
 10054                           ;modulation.c: 109: tmpVal = tmpVal - 360.0;
 10055  0D46  3000               	movlw	0
 10056  0D47  0021               	movlb	1	; select bank1
 10057  0D48  00C1               	movwf	___ftadd@f1^(0+128)
 10058  0D49  30B4               	movlw	180
 10059  0D4A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10060  0D4B  30C3               	movlw	195
 10061  0D4C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10062  0D4D  0022               	movlb	2	; select bank2
 10063  0D4E  083D               	movf	modTri@tmpVal^(0+256),w
 10064  0D4F  0021               	movlb	1	; select bank1
 10065  0D50  00C4               	movwf	___ftadd@f2^(0+128)
 10066  0D51  0022               	movlb	2	; select bank2
 10067  0D52  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10068  0D53  0021               	movlb	1	; select bank1
 10069  0D54  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10070  0D55  0022               	movlb	2	; select bank2
 10071  0D56  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10072  0D57  0021               	movlb	1	; select bank1
 10073  0D58  2D8D               	goto	L8
 10074  0D59                     l8543:	
 10075                           ;modulation.c: 110: } else if (tmpVal > 90) {
 10076                           
 10077  0D59  3000               	movlw	0
 10078  0D5A  0021               	movlb	1	; select bank1
 10079  0D5B  00A0               	movwf	___ftge@ff1^(0+128)
 10080  0D5C  30B4               	movlw	180
 10081  0D5D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10082  0D5E  3042               	movlw	66
 10083  0D5F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10084  0D60  0022               	movlb	2	; select bank2
 10085  0D61  083D               	movf	modTri@tmpVal^(0+256),w
 10086  0D62  0021               	movlb	1	; select bank1
 10087  0D63  00A3               	movwf	___ftge@ff2^(0+128)
 10088  0D64  0022               	movlb	2	; select bank2
 10089  0D65  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10090  0D66  0021               	movlb	1	; select bank1
 10091  0D67  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10092  0D68  0022               	movlb	2	; select bank2
 10093  0D69  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10094  0D6A  0021               	movlb	1	; select bank1
 10095  0D6B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10096  0D6C  31A1  212A  318B   	fcall	___ftge
 10097  0D6F  1803               	btfsc	3,0
 10098  0D70  2D9D               	goto	l1921
 10099                           
 10100                           ;modulation.c: 111: tmpVal = 180 - tmpVal;
 10101  0D71  3000               	movlw	0
 10102  0D72  0021               	movlb	1	; select bank1
 10103  0D73  00C1               	movwf	___ftadd@f1^(0+128)
 10104  0D74  3034               	movlw	52
 10105  0D75  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10106  0D76  3043               	movlw	67
 10107  0D77  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10108  0D78  0022               	movlb	2	; select bank2
 10109  0D79  083D               	movf	modTri@tmpVal^(0+256),w
 10110  0D7A  0021               	movlb	1	; select bank1
 10111  0D7B  00BE               	movwf	___ftneg@f1^(0+128)
 10112  0D7C  0022               	movlb	2	; select bank2
 10113  0D7D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10114  0D7E  0021               	movlb	1	; select bank1
 10115  0D7F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10116  0D80  0022               	movlb	2	; select bank2
 10117  0D81  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10118  0D82  0021               	movlb	1	; select bank1
 10119  0D83  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10120  0D84  31AD  2575  318B   	fcall	___ftneg
 10121  0D87  0021               	movlb	1	; select bank1
 10122  0D88  083E               	movf	?___ftneg^(0+128),w
 10123  0D89  00C4               	movwf	___ftadd@f2^(0+128)
 10124  0D8A  083F               	movf	(?___ftneg+1)^(0+128),w
 10125  0D8B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10126  0D8C  0840               	movf	(?___ftneg+2)^(0+128),w
 10127  0D8D                     L8:	
 10128  0D8D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10129  0D8E  3190  2026  318B   	fcall	___ftadd
 10130  0D91  0021               	movlb	1	; select bank1
 10131  0D92  0841               	movf	?___ftadd^(0+128),w
 10132  0D93  0022               	movlb	2	; select bank2
 10133  0D94  00BD               	movwf	modTri@tmpVal^(0+256)
 10134  0D95  0021               	movlb	1	; select bank1
 10135  0D96  0842               	movf	(?___ftadd+1)^(0+128),w
 10136  0D97  0022               	movlb	2	; select bank2
 10137  0D98  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10138  0D99  0021               	movlb	1	; select bank1
 10139  0D9A  0843               	movf	(?___ftadd+2)^(0+128),w
 10140  0D9B  0022               	movlb	2	; select bank2
 10141  0D9C  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10142  0D9D                     l1921:	
 10143                           
 10144                           ;modulation.c: 112: }
 10145                           ;modulation.c: 113: tmpVal = tmpVal * 10/9;
 10146  0D9D  3000               	movlw	0
 10147  0D9E  0021               	movlb	1	; select bank1
 10148  0D9F  00CE               	movwf	___ftdiv@f2^(0+128)
 10149  0DA0  3010               	movlw	16
 10150  0DA1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10151  0DA2  3041               	movlw	65
 10152  0DA3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10153  0DA4  3000               	movlw	0
 10154  0DA5  00AE               	movwf	___ftmul@f1^(0+128)
 10155  0DA6  3020               	movlw	32
 10156  0DA7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10157  0DA8  3041               	movlw	65
 10158  0DA9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10159  0DAA  0022               	movlb	2	; select bank2
 10160  0DAB  083D               	movf	modTri@tmpVal^(0+256),w
 10161  0DAC  0021               	movlb	1	; select bank1
 10162  0DAD  00B1               	movwf	___ftmul@f2^(0+128)
 10163  0DAE  0022               	movlb	2	; select bank2
 10164  0DAF  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10165  0DB0  0021               	movlb	1	; select bank1
 10166  0DB1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10167  0DB2  0022               	movlb	2	; select bank2
 10168  0DB3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10169  0DB4  0021               	movlb	1	; select bank1
 10170  0DB5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10171  0DB6  3187  274C  318B   	fcall	___ftmul
 10172  0DB9  0021               	movlb	1	; select bank1
 10173  0DBA  082E               	movf	?___ftmul^(0+128),w
 10174  0DBB  00D1               	movwf	___ftdiv@f1^(0+128)
 10175  0DBC  082F               	movf	(?___ftmul+1)^(0+128),w
 10176  0DBD  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10177  0DBE  0830               	movf	(?___ftmul+2)^(0+128),w
 10178  0DBF  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10179  0DC0  319D  2520  318B   	fcall	___ftdiv
 10180  0DC3  0021               	movlb	1	; select bank1
 10181  0DC4  084E               	movf	?___ftdiv^(0+128),w
 10182  0DC5  0022               	movlb	2	; select bank2
 10183  0DC6  00BD               	movwf	modTri@tmpVal^(0+256)
 10184  0DC7  0021               	movlb	1	; select bank1
 10185  0DC8  084F               	movf	(?___ftdiv+1)^(0+128),w
 10186  0DC9  0022               	movlb	2	; select bank2
 10187  0DCA  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
 10188  0DCB  0021               	movlb	1	; select bank1
 10189  0DCC  0850               	movf	(?___ftdiv+2)^(0+128),w
 10190  0DCD  0022               	movlb	2	; select bank2
 10191  0DCE  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
 10192                           
 10193                           ;modulation.c: 115: return (int)(tmpVal);
 10194  0DCF  083D               	movf	modTri@tmpVal^(0+256),w
 10195  0DD0  00A0               	movwf	___fttol@f1^(0+256)
 10196  0DD1  083E               	movf	(modTri@tmpVal+1)^(0+256),w
 10197  0DD2  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10198  0DD3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
 10199  0DD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10200  0DD5  3199  21B3         	fcall	___fttol
 10201  0DD7  0022               	movlb	2	; select bank2
 10202  0DD8  0821               	movf	(?___fttol^(0+256)+1),w
 10203  0DD9  00AF               	movwf	(?_modTri+1)^(0+256)
 10204  0DDA  0820               	movf	?___fttol^(0+256),w
 10205  0DDB  00AE               	movwf	?_modTri^(0+256)
 10206  0DDC  0008               	return
 10207  0DDD                     __end_of_modTri:	
 10208                           
 10209                           	psect	text18
 10210  2166                     __ptext18:	
 10211 ;; *************** function _modSquare *****************
 10212 ;; Defined at:
 10213 ;;		line 141 in file "modulation.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;  angle           3   40[BANK2 ] int 
 10216 ;;  inflection      3   43[BANK2 ] int 
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;  tmpVal          2   46[BANK2 ] int 
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  2   40[BANK2 ] int 
 10221 ;; Registers used:
 10222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10228 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10229 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10231 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10232 ;;Total ram usage:        8 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    6
 10235 ;; This function calls:
 10236 ;;		___ftge
 10237 ;;		_modSin
 10238 ;; This function is called by:
 10239 ;;		_updateModulationArray
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           
 10244                           ;psect for function _modSquare
 10245  2166                     _modSquare:	
 10246                           
 10247                           ;modulation.c: 142: int tmpVal = modSin(angle, inflection);
 10248                           
 10249                           ;incstack = 0
 10250                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10251  2166  0022               	movlb	2	; select bank2
 10252  2167  0848               	movf	modSquare@angle^(0+256),w
 10253  2168  00B4               	movwf	modSin@angle^(0+256)
 10254  2169  0849               	movf	(modSquare@angle+1)^(0+256),w
 10255  216A  00B5               	movwf	(modSin@angle+1)^(0+256)
 10256  216B  084A               	movf	(modSquare@angle+2)^(0+256),w
 10257  216C  00B6               	movwf	(modSin@angle+2)^(0+256)
 10258  216D  084B               	movf	modSquare@inflection^(0+256),w
 10259  216E  00B7               	movwf	modSin@inflection^(0+256)
 10260  216F  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10261  2170  00B8               	movwf	(modSin@inflection+1)^(0+256)
 10262  2171  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10263  2172  00B9               	movwf	(modSin@inflection+2)^(0+256)
 10264  2173  3196  2654  31A1   	fcall	_modSin
 10265  2176  0022               	movlb	2	; select bank2
 10266  2177  0835               	movf	(?_modSin+1)^(0+256),w
 10267  2178  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
 10268  2179  0834               	movf	?_modSin^(0+256),w
 10269  217A  00CE               	movwf	modSquare@tmpVal^(0+256)
 10270                           
 10271                           ;modulation.c: 144: return (angle <= inflection) ? 100 : -100;
 10272  217B  084B               	movf	modSquare@inflection^(0+256),w
 10273  217C  0021               	movlb	1	; select bank1
 10274  217D  00A0               	movwf	___ftge@ff1^(0+128)
 10275  217E  0022               	movlb	2	; select bank2
 10276  217F  084C               	movf	(modSquare@inflection+1)^(0+256),w
 10277  2180  0021               	movlb	1	; select bank1
 10278  2181  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10279  2182  0022               	movlb	2	; select bank2
 10280  2183  084D               	movf	(modSquare@inflection+2)^(0+256),w
 10281  2184  0021               	movlb	1	; select bank1
 10282  2185  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10283  2186  0022               	movlb	2	; select bank2
 10284  2187  0848               	movf	modSquare@angle^(0+256),w
 10285  2188  0021               	movlb	1	; select bank1
 10286  2189  00A3               	movwf	___ftge@ff2^(0+128)
 10287  218A  0022               	movlb	2	; select bank2
 10288  218B  0849               	movf	(modSquare@angle+1)^(0+256),w
 10289  218C  0021               	movlb	1	; select bank1
 10290  218D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10291  218E  0022               	movlb	2	; select bank2
 10292  218F  084A               	movf	(modSquare@angle+2)^(0+256),w
 10293  2190  0021               	movlb	1	; select bank1
 10294  2191  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10295  2192  31A1  212A  31A1   	fcall	___ftge
 10296  2195  1803               	btfsc	3,0
 10297  2196  299D               	goto	l8555
 10298  2197  309C               	movlw	156
 10299  2198  0022               	movlb	2	; select bank2
 10300  2199  00C8               	movwf	?_modSquare^(0+256)
 10301  219A  30FF               	movlw	255
 10302  219B  00C9               	movwf	(?_modSquare^(0+256)+1)
 10303  219C  0008               	return
 10304  219D                     l8555:	
 10305  219D  3064               	movlw	100
 10306  219E  0022               	movlb	2	; select bank2
 10307  219F  00C8               	movwf	?_modSquare^(0+256)
 10308  21A0  3000               	movlw	0
 10309  21A1  00C9               	movwf	(?_modSquare^(0+256)+1)
 10310  21A2  0008               	return
 10311  21A3                     __end_of_modSquare:	
 10312                           
 10313                           	psect	text19
 10314  1654                     __ptext19:	
 10315 ;; *************** function _modSin *****************
 10316 ;; Defined at:
 10317 ;;		line 80 in file "modulation.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;  angle           3   20[BANK2 ] int 
 10320 ;;  inflection      3   23[BANK2 ] int 
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;  tmpVal          3   37[BANK2 ] int 
 10323 ;;  period          3   34[BANK2 ] int 
 10324 ;;  shift           3   31[BANK2 ] int 
 10325 ;; Return value:  Size  Location     Type
 10326 ;;                  2   20[BANK2 ] int 
 10327 ;; Registers used:
 10328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10329 ;; Tracked objects:
 10330 ;;		On entry : 0/0
 10331 ;;		On exit  : 0/0
 10332 ;;		Unchanged: 0/0
 10333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10334 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10335 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10336 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10337 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10338 ;;Total ram usage:       20 bytes
 10339 ;; Hardware stack levels used:    1
 10340 ;; Hardware stack levels required when called:    5
 10341 ;; This function calls:
 10342 ;;		___ftadd
 10343 ;;		___ftdiv
 10344 ;;		___ftge
 10345 ;;		___ftmul
 10346 ;;		___ftneg
 10347 ;;		___fttol
 10348 ;;		___wmul
 10349 ;; This function is called by:
 10350 ;;		_updateModulationArray
 10351 ;;		_modSquare
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function _modSin
 10357  1654                     _modSin:	
 10358                           
 10359                           ;modulation.c: 81: double period = 1.0;
 10360                           
 10361                           ;incstack = 0
 10362                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10363  1654  3000               	movlw	0
 10364  1655  0022               	movlb	2	; select bank2
 10365  1656  00C2               	movwf	modSin@period^(0+256)
 10366  1657  3080               	movlw	128
 10367  1658  00C3               	movwf	(modSin@period+1)^(0+256)
 10368  1659  303F               	movlw	63
 10369  165A  00C4               	movwf	(modSin@period+2)^(0+256)
 10370                           
 10371                           ;modulation.c: 82: double shift = 0.0;
 10372  165B  3000               	movlw	0
 10373  165C  00BF               	movwf	modSin@shift^(0+256)
 10374  165D  3000               	movlw	0
 10375  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10376  165F  3000               	movlw	0
 10377  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10378                           
 10379                           ;modulation.c: 84: if(angle<=inflection) {
 10380  1661  0837               	movf	modSin@inflection^(0+256),w
 10381  1662  0021               	movlb	1	; select bank1
 10382  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10383  1664  0022               	movlb	2	; select bank2
 10384  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10385  1666  0021               	movlb	1	; select bank1
 10386  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10387  1668  0022               	movlb	2	; select bank2
 10388  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10389  166A  0021               	movlb	1	; select bank1
 10390  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10391  166C  0022               	movlb	2	; select bank2
 10392  166D  0834               	movf	modSin@angle^(0+256),w
 10393  166E  0021               	movlb	1	; select bank1
 10394  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10395  1670  0022               	movlb	2	; select bank2
 10396  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10397  1672  0021               	movlb	1	; select bank1
 10398  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10399  1674  0022               	movlb	2	; select bank2
 10400  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10401  1676  0021               	movlb	1	; select bank1
 10402  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10403  1678  31A1  212A  3196   	fcall	___ftge
 10404  167B  1C03               	btfss	3,0
 10405  167C  2E89               	goto	l8205
 10406                           
 10407                           ;modulation.c: 85: period = 180.0/inflection;
 10408  167D  0022               	movlb	2	; select bank2
 10409  167E  0837               	movf	modSin@inflection^(0+256),w
 10410  167F  0021               	movlb	1	; select bank1
 10411  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10412  1681  0022               	movlb	2	; select bank2
 10413  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10414  1683  0021               	movlb	1	; select bank1
 10415  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10416  1685  0022               	movlb	2	; select bank2
 10417  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10418  1687  0021               	movlb	1	; select bank1
 10419  1688  2F44               	goto	L9
 10420  1689                     l8205:	
 10421                           ;modulation.c: 86: } else {
 10422                           
 10423                           
 10424                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10425  1689  0022               	movlb	2	; select bank2
 10426  168A  0837               	movf	modSin@inflection^(0+256),w
 10427  168B  0021               	movlb	1	; select bank1
 10428  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10429  168D  0022               	movlb	2	; select bank2
 10430  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10431  168F  0021               	movlb	1	; select bank1
 10432  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10433  1691  0022               	movlb	2	; select bank2
 10434  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10435  1693  0021               	movlb	1	; select bank1
 10436  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10437  1695  3000               	movlw	0
 10438  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10439  1697  3000               	movlw	0
 10440  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10441  1699  3040               	movlw	64
 10442  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10443  169B  3187  274C  3196   	fcall	___ftmul
 10444  169E  0021               	movlb	1	; select bank1
 10445  169F  082E               	movf	?___ftmul^(0+128),w
 10446  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10447  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10448  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10449  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10450  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10451  16A5  31AD  2575  3196   	fcall	___ftneg
 10452  16A8  0021               	movlb	1	; select bank1
 10453  16A9  083E               	movf	?___ftneg^(0+128),w
 10454  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10455  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10456  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10457  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10458  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10459  16AF  3000               	movlw	0
 10460  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10461  16B1  30B4               	movlw	180
 10462  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10463  16B3  3043               	movlw	67
 10464  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10465  16B5  3190  2026  3196   	fcall	___ftadd
 10466  16B8  0021               	movlb	1	; select bank1
 10467  16B9  0841               	movf	?___ftadd^(0+128),w
 10468  16BA  0022               	movlb	2	; select bank2
 10469  16BB  00BC               	movwf	_modSin$2845^(0+256)
 10470  16BC  0021               	movlb	1	; select bank1
 10471  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10472  16BE  0022               	movlb	2	; select bank2
 10473  16BF  00BD               	movwf	(_modSin$2845+1)^(0+256)
 10474  16C0  0021               	movlb	1	; select bank1
 10475  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10476  16C2  0022               	movlb	2	; select bank2
 10477  16C3  00BE               	movwf	(_modSin$2845+2)^(0+256)
 10478                           
 10479                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10480  16C4  083C               	movf	_modSin$2845^(0+256),w
 10481  16C5  0021               	movlb	1	; select bank1
 10482  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10483  16C7  0022               	movlb	2	; select bank2
 10484  16C8  083D               	movf	(_modSin$2845+1)^(0+256),w
 10485  16C9  0021               	movlb	1	; select bank1
 10486  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10487  16CB  0022               	movlb	2	; select bank2
 10488  16CC  083E               	movf	(_modSin$2845+2)^(0+256),w
 10489  16CD  0021               	movlb	1	; select bank1
 10490  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10491  16CF  31AD  2575  3196   	fcall	___ftneg
 10492  16D2  0021               	movlb	1	; select bank1
 10493  16D3  083E               	movf	?___ftneg^(0+128),w
 10494  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10495  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10496  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10497  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10498  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10499  16D9  3000               	movlw	0
 10500  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10501  16DB  30B4               	movlw	180
 10502  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10503  16DD  3043               	movlw	67
 10504  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10505  16DF  0022               	movlb	2	; select bank2
 10506  16E0  0837               	movf	modSin@inflection^(0+256),w
 10507  16E1  0021               	movlb	1	; select bank1
 10508  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10509  16E3  0022               	movlb	2	; select bank2
 10510  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10511  16E5  0021               	movlb	1	; select bank1
 10512  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10513  16E7  0022               	movlb	2	; select bank2
 10514  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10515  16E9  0021               	movlb	1	; select bank1
 10516  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10517  16EB  31AD  2575  3196   	fcall	___ftneg
 10518  16EE  0021               	movlb	1	; select bank1
 10519  16EF  083E               	movf	?___ftneg^(0+128),w
 10520  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10521  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10522  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10523  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10524  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10525  16F5  3190  2026  3196   	fcall	___ftadd
 10526  16F8  0021               	movlb	1	; select bank1
 10527  16F9  0841               	movf	?___ftadd^(0+128),w
 10528  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10529  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10530  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10531  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10532  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10533  16FF  3000               	movlw	0
 10534  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10535  1701  3034               	movlw	52
 10536  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10537  1703  3043               	movlw	67
 10538  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10539  1705  319D  2520  3196   	fcall	___ftdiv
 10540  1708  0021               	movlb	1	; select bank1
 10541  1709  084E               	movf	?___ftdiv^(0+128),w
 10542  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10543  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10544  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10545  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10546  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10547  170F  3187  274C  3196   	fcall	___ftmul
 10548  1712  0021               	movlb	1	; select bank1
 10549  1713  082E               	movf	?___ftmul^(0+128),w
 10550  1714  0022               	movlb	2	; select bank2
 10551  1715  00BF               	movwf	modSin@shift^(0+256)
 10552  1716  0021               	movlb	1	; select bank1
 10553  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10554  1718  0022               	movlb	2	; select bank2
 10555  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10556  171A  0021               	movlb	1	; select bank1
 10557  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10558  171C  0022               	movlb	2	; select bank2
 10559  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10560                           
 10561                           ;modulation.c: 88: period = 180/(360-inflection);
 10562  171E  3000               	movlw	0
 10563  171F  0021               	movlb	1	; select bank1
 10564  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10565  1721  30B4               	movlw	180
 10566  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10567  1723  3043               	movlw	67
 10568  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10569  1725  0022               	movlb	2	; select bank2
 10570  1726  0837               	movf	modSin@inflection^(0+256),w
 10571  1727  0021               	movlb	1	; select bank1
 10572  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10573  1729  0022               	movlb	2	; select bank2
 10574  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10575  172B  0021               	movlb	1	; select bank1
 10576  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10577  172D  0022               	movlb	2	; select bank2
 10578  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10579  172F  0021               	movlb	1	; select bank1
 10580  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10581  1731  31AD  2575  3196   	fcall	___ftneg
 10582  1734  0021               	movlb	1	; select bank1
 10583  1735  083E               	movf	?___ftneg^(0+128),w
 10584  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10585  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10586  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10587  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10588  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10589  173B  3190  2026  3196   	fcall	___ftadd
 10590  173E  0021               	movlb	1	; select bank1
 10591  173F  0841               	movf	?___ftadd^(0+128),w
 10592  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10593  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10594  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10595  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10596  1744                     L9:	
 10597  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10598  1745  3000               	movlw	0
 10599  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10600  1747  3034               	movlw	52
 10601  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10602  1749  3043               	movlw	67
 10603  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10604  174B  319D  2520  3196   	fcall	___ftdiv
 10605  174E  0021               	movlb	1	; select bank1
 10606  174F  084E               	movf	?___ftdiv^(0+128),w
 10607  1750  0022               	movlb	2	; select bank2
 10608  1751  00C2               	movwf	modSin@period^(0+256)
 10609  1752  0021               	movlb	1	; select bank1
 10610  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10611  1754  0022               	movlb	2	; select bank2
 10612  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10613  1756  0021               	movlb	1	; select bank1
 10614  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10615  1758  0022               	movlb	2	; select bank2
 10616  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10617                           
 10618                           ;modulation.c: 90: }
 10619                           ;modulation.c: 91: double tmpVal = (period*angle-shift) /3;
 10620  175A  3000               	movlw	0
 10621  175B  0021               	movlb	1	; select bank1
 10622  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10623  175D  3040               	movlw	64
 10624  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10625  175F  3040               	movlw	64
 10626  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10627  1761  0022               	movlb	2	; select bank2
 10628  1762  083F               	movf	modSin@shift^(0+256),w
 10629  1763  0021               	movlb	1	; select bank1
 10630  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10631  1765  0022               	movlb	2	; select bank2
 10632  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10633  1767  0021               	movlb	1	; select bank1
 10634  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10635  1769  0022               	movlb	2	; select bank2
 10636  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10637  176B  0021               	movlb	1	; select bank1
 10638  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10639  176D  31AD  2575  3196   	fcall	___ftneg
 10640  1770  0021               	movlb	1	; select bank1
 10641  1771  083E               	movf	?___ftneg^(0+128),w
 10642  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10643  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10644  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10645  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10646  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10647  1777  0022               	movlb	2	; select bank2
 10648  1778  0834               	movf	modSin@angle^(0+256),w
 10649  1779  0021               	movlb	1	; select bank1
 10650  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10651  177B  0022               	movlb	2	; select bank2
 10652  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10653  177D  0021               	movlb	1	; select bank1
 10654  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10655  177F  0022               	movlb	2	; select bank2
 10656  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10657  1781  0021               	movlb	1	; select bank1
 10658  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10659  1783  0022               	movlb	2	; select bank2
 10660  1784  0842               	movf	modSin@period^(0+256),w
 10661  1785  0021               	movlb	1	; select bank1
 10662  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10663  1787  0022               	movlb	2	; select bank2
 10664  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10665  1789  0021               	movlb	1	; select bank1
 10666  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10667  178B  0022               	movlb	2	; select bank2
 10668  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10669  178D  0021               	movlb	1	; select bank1
 10670  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10671  178F  3187  274C  3196   	fcall	___ftmul
 10672  1792  0021               	movlb	1	; select bank1
 10673  1793  082E               	movf	?___ftmul^(0+128),w
 10674  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10675  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10676  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10677  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10678  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10679  1799  3190  2026  3196   	fcall	___ftadd
 10680  179C  0021               	movlb	1	; select bank1
 10681  179D  0841               	movf	?___ftadd^(0+128),w
 10682  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10683  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10684  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10685  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10686  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10687  17A3  319D  2520  3196   	fcall	___ftdiv
 10688  17A6  0021               	movlb	1	; select bank1
 10689  17A7  084E               	movf	?___ftdiv^(0+128),w
 10690  17A8  0022               	movlb	2	; select bank2
 10691  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10692  17AA  0021               	movlb	1	; select bank1
 10693  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10694  17AC  0022               	movlb	2	; select bank2
 10695  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10696  17AE  0021               	movlb	1	; select bank1
 10697  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10698  17B0  0022               	movlb	2	; select bank2
 10699  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10700                           
 10701                           ;modulation.c: 92: tmpVal = sinArray[(int)(tmpVal)];
 10702  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10703  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10704  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10705  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10706  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10707  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10708  17B8  3199  21B3  3196   	fcall	___fttol
 10709  17BB  0022               	movlb	2	; select bank2
 10710  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10711  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10712  17BE  0820               	movf	?___fttol^(0+256),w
 10713  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10714  17C0  3003               	movlw	3
 10715  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10716  17C2  3000               	movlw	0
 10717  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10718  17C4  31AE  261E  3196   	fcall	___wmul
 10719  17C7  3082               	movlw	130
 10720  17C8  0022               	movlb	2	; select bank2
 10721  17C9  00BA               	movwf	??_modSin^(0+256)
 10722  17CA  3024               	movlw	36
 10723  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10724  17CC  082E               	movf	?___wmul^(0+256),w
 10725  17CD  073A               	addwf	??_modSin^(0+256),w
 10726  17CE  0086               	movwf	6
 10727  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10728  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10729  17D1  0087               	movwf	7
 10730  17D2  3F40               	moviw [0]fsr1
 10731  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10732  17D4  3F41               	moviw [1]fsr1
 10733  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10734  17D6  3F42               	moviw [2]fsr1
 10735  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10736                           
 10737                           ;modulation.c: 93: return (int)(100.0 * tmpVal);
 10738  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10739  17D9  0021               	movlb	1	; select bank1
 10740  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10741  17DB  0022               	movlb	2	; select bank2
 10742  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10743  17DD  0021               	movlb	1	; select bank1
 10744  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10745  17DF  0022               	movlb	2	; select bank2
 10746  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10747  17E1  0021               	movlb	1	; select bank1
 10748  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10749  17E3  3000               	movlw	0
 10750  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10751  17E5  30C8               	movlw	200
 10752  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10753  17E7  3042               	movlw	66
 10754  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10755  17E9  3187  274C  3196   	fcall	___ftmul
 10756  17EC  0021               	movlb	1	; select bank1
 10757  17ED  082E               	movf	?___ftmul^(0+128),w
 10758  17EE  0022               	movlb	2	; select bank2
 10759  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10760  17F0  0021               	movlb	1	; select bank1
 10761  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10762  17F2  0022               	movlb	2	; select bank2
 10763  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10764  17F4  0021               	movlb	1	; select bank1
 10765  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10766  17F6  0022               	movlb	2	; select bank2
 10767  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10768  17F8  3199  21B3         	fcall	___fttol
 10769  17FA  0022               	movlb	2	; select bank2
 10770  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10771  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10772  17FD  0820               	movf	?___fttol^(0+256),w
 10773  17FE  00B4               	movwf	?_modSin^(0+256)
 10774  17FF  0008               	return
 10775  1800                     __end_of_modSin:	
 10776                           
 10777                           	psect	text20
 10778  2E56                     __ptext20:	
 10779 ;; *************** function _modSawRev *****************
 10780 ;; Defined at:
 10781 ;;		line 135 in file "modulation.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;  angle           3   37[BANK2 ] int 
 10784 ;;  inflection      3   40[BANK2 ] int 
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;		None
 10787 ;; Return value:  Size  Location     Type
 10788 ;;                  2   37[BANK2 ] int 
 10789 ;; Registers used:
 10790 ;;		wreg, status,2, status,0, pclath, cstack
 10791 ;; Tracked objects:
 10792 ;;		On entry : 0/0
 10793 ;;		On exit  : 0/0
 10794 ;;		Unchanged: 0/0
 10795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10796 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10798 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10799 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10800 ;;Total ram usage:        8 bytes
 10801 ;; Hardware stack levels used:    1
 10802 ;; Hardware stack levels required when called:    6
 10803 ;; This function calls:
 10804 ;;		_modSaw
 10805 ;; This function is called by:
 10806 ;;		_updateModulationArray
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           
 10811                           ;psect for function _modSawRev
 10812  2E56                     _modSawRev:	
 10813                           
 10814                           ;modulation.c: 136: return -1 * modSaw(angle, inflection);
 10815                           
 10816                           ;incstack = 0
 10817                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10818  2E56  0022               	movlb	2	; select bank2
 10819  2E57  0845               	movf	modSawRev@angle^(0+256),w
 10820  2E58  00AE               	movwf	modSaw@angle^(0+256)
 10821  2E59  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10822  2E5A  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10823  2E5B  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10824  2E5C  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10825  2E5D  0848               	movf	modSawRev@inflection^(0+256),w
 10826  2E5E  00B1               	movwf	modSaw@inflection^(0+256)
 10827  2E5F  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10828  2E60  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10829  2E61  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10830  2E62  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10831  2E63  3194  24AA         	fcall	_modSaw
 10832  2E65  0022               	movlb	2	; select bank2
 10833  2E66  092E               	comf	?_modSaw^(0+256),w
 10834  2E67  00CB               	movwf	??_modSawRev^(0+256)
 10835  2E68  092F               	comf	(?_modSaw+1)^(0+256),w
 10836  2E69  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10837  2E6A  0ACB               	incf	??_modSawRev^(0+256),f
 10838  2E6B  1903               	skipnz
 10839  2E6C  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10840  2E6D  084B               	movf	??_modSawRev^(0+256),w
 10841  2E6E  00C5               	movwf	?_modSawRev^(0+256)
 10842  2E6F  084C               	movf	(??_modSawRev+1)^(0+256),w
 10843  2E70  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10844  2E71  0008               	return
 10845  2E72                     __end_of_modSawRev:	
 10846                           
 10847                           	psect	text21
 10848  14AA                     __ptext21:	
 10849 ;; *************** function _modSaw *****************
 10850 ;; Defined at:
 10851 ;;		line 119 in file "modulation.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  angle           3   14[BANK2 ] int 
 10854 ;;  inflection      3   17[BANK2 ] int 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;  period          3   34[BANK2 ] int 
 10857 ;;  shift           3   31[BANK2 ] int 
 10858 ;;  mod             2   29[BANK2 ] int 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  2   14[BANK2 ] int 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, pclath, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10868 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10869 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10871 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10872 ;;Total ram usage:       23 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    5
 10875 ;; This function calls:
 10876 ;;		___ftadd
 10877 ;;		___ftdiv
 10878 ;;		___ftge
 10879 ;;		___ftmul
 10880 ;;		___ftneg
 10881 ;;		___fttol
 10882 ;; This function is called by:
 10883 ;;		_updateModulationArray
 10884 ;;		_modSawRev
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           
 10889                           ;psect for function _modSaw
 10890  14AA                     _modSaw:	
 10891                           
 10892                           ;modulation.c: 120: double period = 1.0;
 10893                           
 10894                           ;incstack = 0
 10895                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10896  14AA  3000               	movlw	0
 10897  14AB  0022               	movlb	2	; select bank2
 10898  14AC  00C2               	movwf	modSaw@period^(0+256)
 10899  14AD  3080               	movlw	128
 10900  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10901  14AF  303F               	movlw	63
 10902  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10903                           
 10904                           ;modulation.c: 121: double shift = 0;
 10905  14B1  3000               	movlw	0
 10906  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10907  14B3  3000               	movlw	0
 10908  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10909  14B5  3000               	movlw	0
 10910  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10911                           
 10912                           ;modulation.c: 123: if(angle<=inflection) {
 10913  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10914  14B8  0021               	movlb	1	; select bank1
 10915  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10916  14BA  0022               	movlb	2	; select bank2
 10917  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10918  14BC  0021               	movlb	1	; select bank1
 10919  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10920  14BE  0022               	movlb	2	; select bank2
 10921  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10922  14C0  0021               	movlb	1	; select bank1
 10923  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10924  14C2  0022               	movlb	2	; select bank2
 10925  14C3  082E               	movf	modSaw@angle^(0+256),w
 10926  14C4  0021               	movlb	1	; select bank1
 10927  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10928  14C6  0022               	movlb	2	; select bank2
 10929  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10930  14C8  0021               	movlb	1	; select bank1
 10931  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10932  14CA  0022               	movlb	2	; select bank2
 10933  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10934  14CC  0021               	movlb	1	; select bank1
 10935  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10936  14CE  31A1  212A  3194   	fcall	___ftge
 10937  14D1  1C03               	btfss	3,0
 10938  14D2  2CDF               	goto	l8219
 10939                           
 10940                           ;modulation.c: 124: period = 180.0/inflection;
 10941  14D3  0022               	movlb	2	; select bank2
 10942  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10943  14D5  0021               	movlb	1	; select bank1
 10944  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10945  14D7  0022               	movlb	2	; select bank2
 10946  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10947  14D9  0021               	movlb	1	; select bank1
 10948  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10949  14DB  0022               	movlb	2	; select bank2
 10950  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10951  14DD  0021               	movlb	1	; select bank1
 10952  14DE  2DBC               	goto	L10
 10953  14DF                     l8219:	
 10954                           ;modulation.c: 125: } else {
 10955                           
 10956                           
 10957                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10958  14DF  0022               	movlb	2	; select bank2
 10959  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10960  14E1  0021               	movlb	1	; select bank1
 10961  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10962  14E3  0022               	movlb	2	; select bank2
 10963  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10964  14E5  0021               	movlb	1	; select bank1
 10965  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10966  14E7  0022               	movlb	2	; select bank2
 10967  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10968  14E9  0021               	movlb	1	; select bank1
 10969  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10970  14EB  3000               	movlw	0
 10971  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10972  14ED  3000               	movlw	0
 10973  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10974  14EF  3040               	movlw	64
 10975  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10976  14F1  3187  274C  3194   	fcall	___ftmul
 10977  14F4  0021               	movlb	1	; select bank1
 10978  14F5  082E               	movf	?___ftmul^(0+128),w
 10979  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10980  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10981  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10982  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10983  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10984  14FB  31AD  2575  3194   	fcall	___ftneg
 10985  14FE  0021               	movlb	1	; select bank1
 10986  14FF  083E               	movf	?___ftneg^(0+128),w
 10987  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10988  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10989  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10990  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10991  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10992  1505  3000               	movlw	0
 10993  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10994  1507  30B4               	movlw	180
 10995  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10996  1509  3043               	movlw	67
 10997  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10998  150B  3190  2026  3194   	fcall	___ftadd
 10999  150E  0021               	movlb	1	; select bank1
 11000  150F  0841               	movf	?___ftadd^(0+128),w
 11001  1510  0022               	movlb	2	; select bank2
 11002  1511  00B4               	movwf	_modSaw$2847^(0+256)
 11003  1512  0021               	movlb	1	; select bank1
 11004  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 11005  1514  0022               	movlb	2	; select bank2
 11006  1515  00B5               	movwf	(_modSaw$2847+1)^(0+256)
 11007  1516  0021               	movlb	1	; select bank1
 11008  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 11009  1518  0022               	movlb	2	; select bank2
 11010  1519  00B6               	movwf	(_modSaw$2847+2)^(0+256)
 11011                           
 11012                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 11013  151A  0834               	movf	_modSaw$2847^(0+256),w
 11014  151B  0021               	movlb	1	; select bank1
 11015  151C  00BE               	movwf	___ftneg@f1^(0+128)
 11016  151D  0022               	movlb	2	; select bank2
 11017  151E  0835               	movf	(_modSaw$2847+1)^(0+256),w
 11018  151F  0021               	movlb	1	; select bank1
 11019  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11020  1521  0022               	movlb	2	; select bank2
 11021  1522  0836               	movf	(_modSaw$2847+2)^(0+256),w
 11022  1523  0021               	movlb	1	; select bank1
 11023  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11024  1525  31AD  2575  3194   	fcall	___ftneg
 11025  1528  0021               	movlb	1	; select bank1
 11026  1529  083E               	movf	?___ftneg^(0+128),w
 11027  152A  00AE               	movwf	___ftmul@f1^(0+128)
 11028  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 11029  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11030  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 11031  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11032  152F  3000               	movlw	0
 11033  1530  00C1               	movwf	___ftadd@f1^(0+128)
 11034  1531  30B4               	movlw	180
 11035  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11036  1533  3043               	movlw	67
 11037  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11038  1535  0022               	movlb	2	; select bank2
 11039  1536  0831               	movf	modSaw@inflection^(0+256),w
 11040  1537  0021               	movlb	1	; select bank1
 11041  1538  00BE               	movwf	___ftneg@f1^(0+128)
 11042  1539  0022               	movlb	2	; select bank2
 11043  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11044  153B  0021               	movlb	1	; select bank1
 11045  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11046  153D  0022               	movlb	2	; select bank2
 11047  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11048  153F  0021               	movlb	1	; select bank1
 11049  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11050  1541  31AD  2575  3194   	fcall	___ftneg
 11051  1544  0021               	movlb	1	; select bank1
 11052  1545  083E               	movf	?___ftneg^(0+128),w
 11053  1546  00C4               	movwf	___ftadd@f2^(0+128)
 11054  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 11055  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11056  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 11057  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11058  154B  3190  2026  3194   	fcall	___ftadd
 11059  154E  0021               	movlb	1	; select bank1
 11060  154F  0841               	movf	?___ftadd^(0+128),w
 11061  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 11062  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 11063  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11064  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 11065  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11066  1555  3000               	movlw	0
 11067  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 11068  1557  3034               	movlw	52
 11069  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11070  1559  3043               	movlw	67
 11071  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11072  155B  319D  2520  3194   	fcall	___ftdiv
 11073  155E  0021               	movlb	1	; select bank1
 11074  155F  084E               	movf	?___ftdiv^(0+128),w
 11075  1560  00B1               	movwf	___ftmul@f2^(0+128)
 11076  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 11077  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11078  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 11079  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11080  1565  3187  274C  3194   	fcall	___ftmul
 11081  1568  0021               	movlb	1	; select bank1
 11082  1569  082E               	movf	?___ftmul^(0+128),w
 11083  156A  0022               	movlb	2	; select bank2
 11084  156B  00B7               	movwf	_modSaw$2848^(0+256)
 11085  156C  0021               	movlb	1	; select bank1
 11086  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 11087  156E  0022               	movlb	2	; select bank2
 11088  156F  00B8               	movwf	(_modSaw$2848+1)^(0+256)
 11089  1570  0021               	movlb	1	; select bank1
 11090  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 11091  1572  0022               	movlb	2	; select bank2
 11092  1573  00B9               	movwf	(_modSaw$2848+2)^(0+256)
 11093                           
 11094                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 11095  1574  3000               	movlw	0
 11096  1575  0021               	movlb	1	; select bank1
 11097  1576  00C1               	movwf	___ftadd@f1^(0+128)
 11098  1577  30B4               	movlw	180
 11099  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11100  1579  3043               	movlw	67
 11101  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11102  157B  0022               	movlb	2	; select bank2
 11103  157C  0837               	movf	_modSaw$2848^(0+256),w
 11104  157D  0021               	movlb	1	; select bank1
 11105  157E  00C4               	movwf	___ftadd@f2^(0+128)
 11106  157F  0022               	movlb	2	; select bank2
 11107  1580  0838               	movf	(_modSaw$2848+1)^(0+256),w
 11108  1581  0021               	movlb	1	; select bank1
 11109  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11110  1583  0022               	movlb	2	; select bank2
 11111  1584  0839               	movf	(_modSaw$2848+2)^(0+256),w
 11112  1585  0021               	movlb	1	; select bank1
 11113  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11114  1587  3190  2026  3194   	fcall	___ftadd
 11115  158A  0021               	movlb	1	; select bank1
 11116  158B  0841               	movf	?___ftadd^(0+128),w
 11117  158C  0022               	movlb	2	; select bank2
 11118  158D  00BF               	movwf	modSaw@shift^(0+256)
 11119  158E  0021               	movlb	1	; select bank1
 11120  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 11121  1590  0022               	movlb	2	; select bank2
 11122  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 11123  1592  0021               	movlb	1	; select bank1
 11124  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 11125  1594  0022               	movlb	2	; select bank2
 11126  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 11127                           
 11128                           ;modulation.c: 127: period = 180/(360-inflection);
 11129  1596  3000               	movlw	0
 11130  1597  0021               	movlb	1	; select bank1
 11131  1598  00C1               	movwf	___ftadd@f1^(0+128)
 11132  1599  30B4               	movlw	180
 11133  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11134  159B  3043               	movlw	67
 11135  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11136  159D  0022               	movlb	2	; select bank2
 11137  159E  0831               	movf	modSaw@inflection^(0+256),w
 11138  159F  0021               	movlb	1	; select bank1
 11139  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 11140  15A1  0022               	movlb	2	; select bank2
 11141  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 11142  15A3  0021               	movlb	1	; select bank1
 11143  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11144  15A5  0022               	movlb	2	; select bank2
 11145  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 11146  15A7  0021               	movlb	1	; select bank1
 11147  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11148  15A9  31AD  2575  3194   	fcall	___ftneg
 11149  15AC  0021               	movlb	1	; select bank1
 11150  15AD  083E               	movf	?___ftneg^(0+128),w
 11151  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 11152  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 11153  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11154  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 11155  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11156  15B3  3190  2026  3194   	fcall	___ftadd
 11157  15B6  0021               	movlb	1	; select bank1
 11158  15B7  0841               	movf	?___ftadd^(0+128),w
 11159  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 11160  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 11161  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11162  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 11163  15BC                     L10:	
 11164  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11165  15BD  3000               	movlw	0
 11166  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 11167  15BF  3034               	movlw	52
 11168  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11169  15C1  3043               	movlw	67
 11170  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11171  15C3  319D  2520  3194   	fcall	___ftdiv
 11172  15C6  0021               	movlb	1	; select bank1
 11173  15C7  084E               	movf	?___ftdiv^(0+128),w
 11174  15C8  0022               	movlb	2	; select bank2
 11175  15C9  00C2               	movwf	modSaw@period^(0+256)
 11176  15CA  0021               	movlb	1	; select bank1
 11177  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 11178  15CC  0022               	movlb	2	; select bank2
 11179  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 11180  15CE  0021               	movlb	1	; select bank1
 11181  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 11182  15D0  0022               	movlb	2	; select bank2
 11183  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 11184                           
 11185                           ;modulation.c: 128: }
 11186                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11187  15D2  0842               	movf	modSaw@period^(0+256),w
 11188  15D3  0021               	movlb	1	; select bank1
 11189  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 11190  15D5  0022               	movlb	2	; select bank2
 11191  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 11192  15D7  0021               	movlb	1	; select bank1
 11193  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11194  15D9  0022               	movlb	2	; select bank2
 11195  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 11196  15DB  0021               	movlb	1	; select bank1
 11197  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11198  15DD  0022               	movlb	2	; select bank2
 11199  15DE  082E               	movf	modSaw@angle^(0+256),w
 11200  15DF  0021               	movlb	1	; select bank1
 11201  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 11202  15E1  0022               	movlb	2	; select bank2
 11203  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 11204  15E3  0021               	movlb	1	; select bank1
 11205  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11206  15E5  0022               	movlb	2	; select bank2
 11207  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 11208  15E7  0021               	movlb	1	; select bank1
 11209  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11210  15E9  3187  274C  3194   	fcall	___ftmul
 11211  15EC  0021               	movlb	1	; select bank1
 11212  15ED  082E               	movf	?___ftmul^(0+128),w
 11213  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 11214  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 11215  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11216  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 11217  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11218  15F3  0022               	movlb	2	; select bank2
 11219  15F4  083F               	movf	modSaw@shift^(0+256),w
 11220  15F5  0021               	movlb	1	; select bank1
 11221  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 11222  15F7  0022               	movlb	2	; select bank2
 11223  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 11224  15F9  0021               	movlb	1	; select bank1
 11225  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11226  15FB  0022               	movlb	2	; select bank2
 11227  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 11228  15FD  0021               	movlb	1	; select bank1
 11229  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11230  15FF  31AD  2575  3194   	fcall	___ftneg
 11231  1602  0021               	movlb	1	; select bank1
 11232  1603  083E               	movf	?___ftneg^(0+128),w
 11233  1604  00C1               	movwf	___ftadd@f1^(0+128)
 11234  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 11235  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11236  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 11237  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11238  1609  3190  2026  3194   	fcall	___ftadd
 11239  160C  0021               	movlb	1	; select bank1
 11240  160D  0841               	movf	?___ftadd^(0+128),w
 11241  160E  0022               	movlb	2	; select bank2
 11242  160F  00BA               	movwf	_modSaw$2849^(0+256)
 11243  1610  0021               	movlb	1	; select bank1
 11244  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 11245  1612  0022               	movlb	2	; select bank2
 11246  1613  00BB               	movwf	(_modSaw$2849+1)^(0+256)
 11247  1614  0021               	movlb	1	; select bank1
 11248  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 11249  1616  0022               	movlb	2	; select bank2
 11250  1617  00BC               	movwf	(_modSaw$2849+2)^(0+256)
 11251                           
 11252                           ;modulation.c: 128: }
 11253                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 11254  1618  083A               	movf	_modSaw$2849^(0+256),w
 11255  1619  0021               	movlb	1	; select bank1
 11256  161A  00B1               	movwf	___ftmul@f2^(0+128)
 11257  161B  0022               	movlb	2	; select bank2
 11258  161C  083B               	movf	(_modSaw$2849+1)^(0+256),w
 11259  161D  0021               	movlb	1	; select bank1
 11260  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11261  161F  0022               	movlb	2	; select bank2
 11262  1620  083C               	movf	(_modSaw$2849+2)^(0+256),w
 11263  1621  0021               	movlb	1	; select bank1
 11264  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11265  1623  3000               	movlw	0
 11266  1624  00AE               	movwf	___ftmul@f1^(0+128)
 11267  1625  30A0               	movlw	160
 11268  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11269  1627  3040               	movlw	64
 11270  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11271  1629  3187  274C  3194   	fcall	___ftmul
 11272  162C  0021               	movlb	1	; select bank1
 11273  162D  082E               	movf	?___ftmul^(0+128),w
 11274  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 11275  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 11276  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11277  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 11278  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11279  1633  3000               	movlw	0
 11280  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 11281  1635  3010               	movlw	16
 11282  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11283  1637  3041               	movlw	65
 11284  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11285  1639  319D  2520  3194   	fcall	___ftdiv
 11286  163C  0021               	movlb	1	; select bank1
 11287  163D  084E               	movf	?___ftdiv^(0+128),w
 11288  163E  0022               	movlb	2	; select bank2
 11289  163F  00A0               	movwf	___fttol@f1^(0+256)
 11290  1640  0021               	movlb	1	; select bank1
 11291  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 11292  1642  0022               	movlb	2	; select bank2
 11293  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11294  1644  0021               	movlb	1	; select bank1
 11295  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 11296  1646  0022               	movlb	2	; select bank2
 11297  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11298  1648  3199  21B3         	fcall	___fttol
 11299  164A  0022               	movlb	2	; select bank2
 11300  164B  0821               	movf	(?___fttol^(0+256)+1),w
 11301  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 11302  164D  0820               	movf	?___fttol^(0+256),w
 11303  164E  00BD               	movwf	modSaw@mod^(0+256)
 11304                           
 11305                           ;modulation.c: 132: return mod;
 11306  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 11307  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 11308  1651  083D               	movf	modSaw@mod^(0+256),w
 11309  1652  00AE               	movwf	?_modSaw^(0+256)
 11310  1653  0008               	return
 11311  1654                     __end_of_modSaw:	
 11312                           
 11313                           	psect	text22
 11314  2533                     __ptext22:	
 11315 ;; *************** function ___awdiv *****************
 11316 ;; Defined at:
 11317 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;  divisor         2    0[BANK1 ] int 
 11320 ;;  dividend        2    2[BANK1 ] int 
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;  quotient        2    7[BANK1 ] int 
 11323 ;;  sign            1    6[BANK1 ] unsigned char 
 11324 ;;  counter         1    5[BANK1 ] unsigned char 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  2    0[BANK1 ] int 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2, status,0
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11334 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11335 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11336 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11337 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11338 ;;Total ram usage:        9 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    3
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		_updateModulationArray
 11345 ;;		_USARTWriteInt
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           
 11350                           ;psect for function ___awdiv
 11351  2533                     ___awdiv:	
 11352                           
 11353                           ;incstack = 0
 11354                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11355  2533  0021               	movlb	1	; select bank1
 11356  2534  01A6               	clrf	___awdiv@sign^(0+128)
 11357  2535  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 11358  2536  2D3E               	goto	l8611
 11359  2537  09A0               	comf	___awdiv@divisor^(0+128),f
 11360  2538  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 11361  2539  0AA0               	incf	___awdiv@divisor^(0+128),f
 11362  253A  1903               	skipnz
 11363  253B  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 11364  253C  01A6               	clrf	___awdiv@sign^(0+128)
 11365  253D  0AA6               	incf	___awdiv@sign^(0+128),f
 11366  253E                     l8611:	
 11367  253E  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 11368  253F  2D49               	goto	l8617
 11369  2540  09A2               	comf	___awdiv@dividend^(0+128),f
 11370  2541  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 11371  2542  0AA2               	incf	___awdiv@dividend^(0+128),f
 11372  2543  1903               	skipnz
 11373  2544  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11374  2545  3001               	movlw	1
 11375  2546  00A4               	movwf	??___awdiv^(0+128)
 11376  2547  0824               	movf	??___awdiv^(0+128),w
 11377  2548  06A6               	xorwf	___awdiv@sign^(0+128),f
 11378  2549                     l8617:	
 11379  2549  01A7               	clrf	___awdiv@quotient^(0+128)
 11380  254A  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11381  254B  0820               	movf	___awdiv@divisor^(0+128),w
 11382  254C  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11383  254D  1903               	btfsc	3,2
 11384  254E  2D78               	goto	l8639
 11385  254F  01A5               	clrf	___awdiv@counter^(0+128)
 11386  2550  0AA5               	incf	___awdiv@counter^(0+128),f
 11387  2551                     l8627:	
 11388  2551  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11389  2552  2D5D               	goto	l8629
 11390  2553  3001               	movlw	1
 11391  2554                     u9165:	
 11392  2554  35A0               	lslf	___awdiv@divisor^(0+128),f
 11393  2555  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11394  2556  0B89               	decfsz	9,f
 11395  2557  2D54               	goto	u9165
 11396  2558  3001               	movlw	1
 11397  2559  00A4               	movwf	??___awdiv^(0+128)
 11398  255A  0824               	movf	??___awdiv^(0+128),w
 11399  255B  07A5               	addwf	___awdiv@counter^(0+128),f
 11400  255C  2D51               	goto	l8627
 11401  255D                     l8629:	
 11402  255D  3001               	movlw	1
 11403  255E                     u9185:	
 11404  255E  35A7               	lslf	___awdiv@quotient^(0+128),f
 11405  255F  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11406  2560  0B89               	decfsz	9,f
 11407  2561  2D5E               	goto	u9185
 11408  2562  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11409  2563  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11410  2564  1D03               	skipz
 11411  2565  2D68               	goto	u9195
 11412  2566  0820               	movf	___awdiv@divisor^(0+128),w
 11413  2567  0222               	subwf	___awdiv@dividend^(0+128),w
 11414  2568                     u9195:	
 11415  2568  1C03               	skipc
 11416  2569  2D6F               	goto	l8635
 11417  256A  0820               	movf	___awdiv@divisor^(0+128),w
 11418  256B  02A2               	subwf	___awdiv@dividend^(0+128),f
 11419  256C  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11420  256D  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11421  256E  1427               	bsf	___awdiv@quotient^(0+128),0
 11422  256F                     l8635:	
 11423  256F  3001               	movlw	1
 11424  2570                     u9205:	
 11425  2570  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11426  2571  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11427  2572  0B89               	decfsz	9,f
 11428  2573  2D70               	goto	u9205
 11429  2574  3001               	movlw	1
 11430  2575  02A5               	subwf	___awdiv@counter^(0+128),f
 11431  2576  1D03               	btfss	3,2
 11432  2577  2D5D               	goto	l8629
 11433  2578                     l8639:	
 11434  2578  0826               	movf	___awdiv@sign^(0+128),w
 11435  2579  1903               	btfsc	3,2
 11436  257A  2D80               	goto	l8643
 11437  257B  09A7               	comf	___awdiv@quotient^(0+128),f
 11438  257C  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11439  257D  0AA7               	incf	___awdiv@quotient^(0+128),f
 11440  257E  1903               	skipnz
 11441  257F  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11442  2580                     l8643:	
 11443  2580  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11444  2581  00A1               	movwf	(?___awdiv+1)^(0+128)
 11445  2582  0827               	movf	___awdiv@quotient^(0+128),w
 11446  2583  00A0               	movwf	?___awdiv^(0+128)
 11447  2584  0008               	return
 11448  2585                     __end_of___awdiv:	
 11449                           
 11450                           	psect	text23
 11451  1E74                     __ptext23:	
 11452 ;; *************** function _set_subdivision *****************
 11453 ;; Defined at:
 11454 ;;		line 77 in file "user.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  x               2   31[BANK2 ] int 
 11457 ;;  y               2   33[BANK2 ] int 
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  scalar          3   38[BANK2 ] float 
 11460 ;;  tmpX            2   41[BANK2 ] int 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  2   31[BANK2 ] int 
 11463 ;; Registers used:
 11464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11470 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11471 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11472 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11473 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11474 ;;Total ram usage:       12 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    6
 11477 ;; This function calls:
 11478 ;;		___awtoft
 11479 ;;		___ftmul
 11480 ;;		___fttol
 11481 ;;		_trunc
 11482 ;; This function is called by:
 11483 ;;		_main
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function _set_subdivision
 11489  1E74                     _set_subdivision:	
 11490                           
 11491                           ;user.c: 81: adjust_mod_delay = 0;
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11495  1E74  0023               	movlb	3	; select bank3
 11496  1E75  01BE               	clrf	_adjust_mod_delay^(0+384)
 11497                           
 11498                           ;user.c: 82: int tmpX = x;
 11499  1E76  0022               	movlb	2	; select bank2
 11500  1E77  0840               	movf	(set_subdivision@x+1)^(0+256),w
 11501  1E78  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11502  1E79  083F               	movf	set_subdivision@x^(0+256),w
 11503  1E7A  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11504                           
 11505                           ;user.c: 83: float scalar = 1.0;
 11506  1E7B  3000               	movlw	0
 11507  1E7C  00C6               	movwf	set_subdivision@scalar^(0+256)
 11508  1E7D  3080               	movlw	128
 11509  1E7E  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11510  1E7F  303F               	movlw	63
 11511  1E80  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11512                           
 11513                           ;user.c: 85: switch (y) {
 11514  1E81  2E9D               	goto	l9195
 11515  1E82                     l9183:	
 11516                           ;user.c: 86: case 1:
 11517                           
 11518                           
 11519                           ;user.c: 87: scalar = 2.0;
 11520  1E82  3000               	movlw	0
 11521  1E83  00C6               	movwf	set_subdivision@scalar^(0+256)
 11522  1E84  3000               	movlw	0
 11523  1E85  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11524  1E86  3040               	movlw	64
 11525  1E87  2E9B               	goto	L14
 11526  1E88                     l9185:	
 11527                           ;user.c: 89: case 2:
 11528                           
 11529                           ;user.c: 88: break;
 11530                           
 11531                           
 11532                           ;user.c: 90: scalar = 0.6666;
 11533  1E88  30A6               	movlw	166
 11534  1E89  00C6               	movwf	set_subdivision@scalar^(0+256)
 11535  1E8A  302A               	movlw	42
 11536  1E8B  2E8F               	goto	L16
 11537  1E8C                     l9187:	
 11538                           ;user.c: 92: case 3:
 11539                           
 11540                           ;user.c: 91: break;
 11541                           
 11542                           
 11543                           ;user.c: 93: scalar = .5;
 11544  1E8C  3000               	movlw	0
 11545  1E8D  00C6               	movwf	set_subdivision@scalar^(0+256)
 11546  1E8E  3000               	movlw	0
 11547  1E8F                     L16:	
 11548  1E8F  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11549  1E90  303F               	movlw	63
 11550  1E91  2E9B               	goto	L14
 11551  1E92                     l9189:	
 11552                           ;user.c: 95: case 4:
 11553                           
 11554                           ;user.c: 94: break;
 11555                           
 11556                           
 11557                           ;user.c: 96: scalar = 0.3333;
 11558  1E92  30A6               	movlw	166
 11559  1E93  00C6               	movwf	set_subdivision@scalar^(0+256)
 11560  1E94  30AA               	movlw	170
 11561  1E95  2E99               	goto	L15
 11562  1E96                     l9191:	
 11563                           ;user.c: 98: case 5:
 11564                           
 11565                           ;user.c: 97: break;
 11566                           
 11567                           
 11568                           ;user.c: 99: scalar = 0.25;
 11569  1E96  3000               	movlw	0
 11570  1E97  00C6               	movwf	set_subdivision@scalar^(0+256)
 11571  1E98  3080               	movlw	128
 11572  1E99                     L15:	
 11573  1E99  00C7               	movwf	(set_subdivision@scalar+1)^(0+256)
 11574  1E9A  303E               	movlw	62
 11575  1E9B                     L14:	
 11576  1E9B  00C8               	movwf	(set_subdivision@scalar+2)^(0+256)
 11577                           
 11578                           ;user.c: 104: }
 11579                           
 11580                           ;user.c: 103: break;
 11581                           
 11582                           ;user.c: 101: case 6:
 11583                           
 11584                           ;user.c: 100: break;
 11585  1E9C  2EB6               	goto	l9197
 11586  1E9D                     l9195:	
 11587                           
 11588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11589                           ; Switch size 1, requested type "space"
 11590                           ; Number of cases is 1, Range of values is 0 to 0
 11591                           ; switch strategies available:
 11592                           ; Name         Instructions Cycles
 11593                           ; simple_byte            4     3 (average)
 11594                           ; direct_byte            8     6 (fixed)
 11595                           ; jumptable            260     6 (fixed)
 11596                           ;	Chosen strategy is simple_byte
 11597  1E9D  0842               	movf	(set_subdivision@y+1)^(0+256),w
 11598  1E9E  3A00               	xorlw	0	; case 0
 11599  1E9F  1903               	skipnz
 11600  1EA0  2EA2               	goto	l9785
 11601  1EA1  2EB6               	goto	l9197
 11602  1EA2                     l9785:	
 11603                           
 11604                           ; Switch size 1, requested type "space"
 11605                           ; Number of cases is 6, Range of values is 1 to 6
 11606                           ; switch strategies available:
 11607                           ; Name         Instructions Cycles
 11608                           ; simple_byte           19    10 (average)
 11609                           ; direct_byte           21     9 (fixed)
 11610                           ; jumptable            263     9 (fixed)
 11611                           ;	Chosen strategy is simple_byte
 11612  1EA2  0841               	movf	set_subdivision@y^(0+256),w
 11613  1EA3  3A01               	xorlw	1	; case 1
 11614  1EA4  1903               	skipnz
 11615  1EA5  2E82               	goto	l9183
 11616  1EA6  3A03               	xorlw	3	; case 2
 11617  1EA7  1903               	skipnz
 11618  1EA8  2E88               	goto	l9185
 11619  1EA9  3A01               	xorlw	1	; case 3
 11620  1EAA  1903               	skipnz
 11621  1EAB  2E8C               	goto	l9187
 11622  1EAC  3A07               	xorlw	7	; case 4
 11623  1EAD  1903               	skipnz
 11624  1EAE  2E92               	goto	l9189
 11625  1EAF  3A01               	xorlw	1	; case 5
 11626  1EB0  1903               	skipnz
 11627  1EB1  2E96               	goto	l9191
 11628  1EB2  3A03               	xorlw	3	; case 6
 11629  1EB3  1903               	skipnz
 11630  1EB4  2EB6               	goto	l9197
 11631  1EB5  2EB6               	goto	l9197
 11632  1EB6                     l9197:	
 11633                           
 11634                           ;user.c: 106: tmpX = tmpX * scalar;
 11635  1EB6  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11636  1EB7  0021               	movlb	1	; select bank1
 11637  1EB8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11638  1EB9  0022               	movlb	2	; select bank2
 11639  1EBA  0849               	movf	set_subdivision@tmpX^(0+256),w
 11640  1EBB  0021               	movlb	1	; select bank1
 11641  1EBC  00A8               	movwf	___awtoft@c^(0+128)
 11642  1EBD  31AE  26CF  319E   	fcall	___awtoft
 11643  1EC0  0021               	movlb	1	; select bank1
 11644  1EC1  0828               	movf	?___awtoft^(0+128),w
 11645  1EC2  00B1               	movwf	___ftmul@f2^(0+128)
 11646  1EC3  0829               	movf	(?___awtoft+1)^(0+128),w
 11647  1EC4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11648  1EC5  082A               	movf	(?___awtoft+2)^(0+128),w
 11649  1EC6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11650  1EC7  0022               	movlb	2	; select bank2
 11651  1EC8  0846               	movf	set_subdivision@scalar^(0+256),w
 11652  1EC9  0021               	movlb	1	; select bank1
 11653  1ECA  00AE               	movwf	___ftmul@f1^(0+128)
 11654  1ECB  0022               	movlb	2	; select bank2
 11655  1ECC  0847               	movf	(set_subdivision@scalar+1)^(0+256),w
 11656  1ECD  0021               	movlb	1	; select bank1
 11657  1ECE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11658  1ECF  0022               	movlb	2	; select bank2
 11659  1ED0  0848               	movf	(set_subdivision@scalar+2)^(0+256),w
 11660  1ED1  0021               	movlb	1	; select bank1
 11661  1ED2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11662  1ED3  3187  274C  319E   	fcall	___ftmul
 11663  1ED6  0021               	movlb	1	; select bank1
 11664  1ED7  082E               	movf	?___ftmul^(0+128),w
 11665  1ED8  0022               	movlb	2	; select bank2
 11666  1ED9  00A0               	movwf	___fttol@f1^(0+256)
 11667  1EDA  0021               	movlb	1	; select bank1
 11668  1EDB  082F               	movf	(?___ftmul+1)^(0+128),w
 11669  1EDC  0022               	movlb	2	; select bank2
 11670  1EDD  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11671  1EDE  0021               	movlb	1	; select bank1
 11672  1EDF  0830               	movf	(?___ftmul+2)^(0+128),w
 11673  1EE0  0022               	movlb	2	; select bank2
 11674  1EE1  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11675  1EE2  3199  21B3  319E   	fcall	___fttol
 11676  1EE5  0022               	movlb	2	; select bank2
 11677  1EE6  0821               	movf	(?___fttol^(0+256)+1),w
 11678  1EE7  00CA               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11679  1EE8  0820               	movf	?___fttol^(0+256),w
 11680  1EE9  00C9               	movwf	set_subdivision@tmpX^(0+256)
 11681                           
 11682                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
 11683  1EEA  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11684  1EEB  0021               	movlb	1	; select bank1
 11685  1EEC  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11686  1EED  0022               	movlb	2	; select bank2
 11687  1EEE  0849               	movf	set_subdivision@tmpX^(0+256),w
 11688  1EEF  0021               	movlb	1	; select bank1
 11689  1EF0  00A8               	movwf	___awtoft@c^(0+128)
 11690  1EF1  31AE  26CF  319E   	fcall	___awtoft
 11691  1EF4  0021               	movlb	1	; select bank1
 11692  1EF5  0828               	movf	?___awtoft^(0+128),w
 11693  1EF6  0022               	movlb	2	; select bank2
 11694  1EF7  00B6               	movwf	trunc@x^(0+256)
 11695  1EF8  0021               	movlb	1	; select bank1
 11696  1EF9  0829               	movf	(?___awtoft+1)^(0+128),w
 11697  1EFA  0022               	movlb	2	; select bank2
 11698  1EFB  00B7               	movwf	(trunc@x+1)^(0+256)
 11699  1EFC  0021               	movlb	1	; select bank1
 11700  1EFD  082A               	movf	(?___awtoft+2)^(0+128),w
 11701  1EFE  0022               	movlb	2	; select bank2
 11702  1EFF  00B8               	movwf	(trunc@x+2)^(0+256)
 11703  1F00  31A3  23B4  319E   	fcall	_trunc
 11704  1F03  0022               	movlb	2	; select bank2
 11705  1F04  0836               	movf	?_trunc^(0+256),w
 11706  1F05  00C3               	movwf	??_set_subdivision^(0+256)
 11707  1F06  0837               	movf	(?_trunc+1)^(0+256),w
 11708  1F07  00C4               	movwf	(??_set_subdivision^(0+256)+1)
 11709  1F08  0838               	movf	(?_trunc+2)^(0+256),w
 11710  1F09  00C5               	movwf	(??_set_subdivision^(0+256)+2)
 11711  1F0A  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11712  1F0B  0021               	movlb	1	; select bank1
 11713  1F0C  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11714  1F0D  0022               	movlb	2	; select bank2
 11715  1F0E  0849               	movf	set_subdivision@tmpX^(0+256),w
 11716  1F0F  0021               	movlb	1	; select bank1
 11717  1F10  00A8               	movwf	___awtoft@c^(0+128)
 11718  1F11  31AE  26CF  319E   	fcall	___awtoft
 11719  1F14  0021               	movlb	1	; select bank1
 11720  1F15  082A               	movf	(?___awtoft+2)^(0+128),w
 11721  1F16  0022               	movlb	2	; select bank2
 11722  1F17  0645               	xorwf	(??_set_subdivision+2)^(0+256),w
 11723  1F18  1D03               	skipz
 11724  1F19  2F24               	goto	u10185
 11725  1F1A  0021               	movlb	1	; select bank1
 11726  1F1B  0829               	movf	(?___awtoft+1)^(0+128),w
 11727  1F1C  0022               	movlb	2	; select bank2
 11728  1F1D  0644               	xorwf	(??_set_subdivision+1)^(0+256),w
 11729  1F1E  1D03               	skipz
 11730  1F1F  2F24               	goto	u10185
 11731  1F20  0021               	movlb	1	; select bank1
 11732  1F21  0828               	movf	?___awtoft^(0+128),w
 11733  1F22  0022               	movlb	2	; select bank2
 11734  1F23  0643               	xorwf	??_set_subdivision^(0+256),w
 11735  1F24                     u10185:	
 11736  1F24  1903               	skipnz
 11737  1F25  2F29               	goto	l9203
 11738                           
 11739                           ;user.c: 109: adjust_mod_delay = 1;
 11740  1F26  0023               	movlb	3	; select bank3
 11741  1F27  01BE               	clrf	_adjust_mod_delay^(0+384)
 11742  1F28  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11743  1F29                     l9203:	
 11744                           
 11745                           ;user.c: 110: }
 11746                           ;user.c: 112: return tmpX;
 11747  1F29  0022               	movlb	2	; select bank2
 11748  1F2A  084A               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11749  1F2B  00C0               	movwf	(?_set_subdivision+1)^(0+256)
 11750  1F2C  0849               	movf	set_subdivision@tmpX^(0+256),w
 11751  1F2D  00BF               	movwf	?_set_subdivision^(0+256)
 11752  1F2E  0008               	return
 11753  1F2F                     __end_of_set_subdivision:	
 11754                           
 11755                           	psect	text24
 11756  23B4                     __ptext24:	
 11757 ;; *************** function _trunc *****************
 11758 ;; Defined at:
 11759 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  x               3   22[BANK2 ] int 
 11762 ;; Auto vars:     Size  Location     Type
 11763 ;;  i               3   26[BANK2 ] int 
 11764 ;;  expon           2   29[BANK2 ] int 
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  3   22[BANK2 ] int 
 11767 ;; Registers used:
 11768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11774 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11775 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11776 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11777 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11778 ;;Total ram usage:        9 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; Hardware stack levels required when called:    5
 11781 ;; This function calls:
 11782 ;;		___altoft
 11783 ;;		___fttol
 11784 ;;		_frexp
 11785 ;; This function is called by:
 11786 ;;		_set_subdivision
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           
 11791                           ;psect for function _trunc
 11792  23B4                     _trunc:	
 11793                           
 11794                           ;incstack = 0
 11795                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11796  23B4  0022               	movlb	2	; select bank2
 11797  23B5  0836               	movf	trunc@x^(0+256),w
 11798  23B6  0021               	movlb	1	; select bank1
 11799  23B7  00A0               	movwf	frexp@value^(0+128)
 11800  23B8  0022               	movlb	2	; select bank2
 11801  23B9  0837               	movf	(trunc@x+1)^(0+256),w
 11802  23BA  0021               	movlb	1	; select bank1
 11803  23BB  00A1               	movwf	(frexp@value+1)^(0+128)
 11804  23BC  0022               	movlb	2	; select bank2
 11805  23BD  0838               	movf	(trunc@x+2)^(0+256),w
 11806  23BE  0021               	movlb	1	; select bank1
 11807  23BF  00A2               	movwf	(frexp@value+2)^(0+128)
 11808  23C0  303D               	movlw	(low (trunc@expon| (0+256)))& (0+255)
 11809  23C1  0022               	movlb	2	; select bank2
 11810  23C2  00B9               	movwf	??_trunc^(0+256)
 11811  23C3  0839               	movf	??_trunc^(0+256),w
 11812  23C4  0021               	movlb	1	; select bank1
 11813  23C5  00A3               	movwf	frexp@eptr^(0+128)
 11814  23C6  31A1  21E1  31A3   	fcall	_frexp
 11815  23C9  0022               	movlb	2	; select bank2
 11816  23CA  1FBE               	btfss	(trunc@expon+1)^(0+256),7
 11817  23CB  2BD3               	goto	l8367
 11818  23CC  3000               	movlw	0
 11819  23CD  00B6               	movwf	?_trunc^(0+256)
 11820  23CE  3000               	movlw	0
 11821  23CF  00B7               	movwf	(?_trunc+1)^(0+256)
 11822  23D0  3000               	movlw	0
 11823  23D1  00B8               	movwf	(?_trunc+2)^(0+256)
 11824  23D2  0008               	return
 11825  23D3                     l8367:	
 11826  23D3  3000               	movlw	0
 11827  23D4  023E               	subwf	(trunc@expon+1)^(0+256),w
 11828  23D5  3015               	movlw	21
 11829  23D6  1903               	skipnz
 11830  23D7  023D               	subwf	trunc@expon^(0+256),w
 11831  23D8  1803               	btfsc	3,0
 11832  23D9  0008               	return
 11833  23DA  0836               	movf	trunc@x^(0+256),w
 11834  23DB  00A0               	movwf	___fttol@f1^(0+256)
 11835  23DC  0837               	movf	(trunc@x+1)^(0+256),w
 11836  23DD  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11837  23DE  0838               	movf	(trunc@x+2)^(0+256),w
 11838  23DF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11839  23E0  3199  21B3  31A3   	fcall	___fttol
 11840  23E3  0022               	movlb	2	; select bank2
 11841  23E4  0823               	movf	(?___fttol+3)^(0+256),w
 11842  23E5  00B1               	movwf	(___altoft@c+3)^(0+256)
 11843  23E6  0822               	movf	(?___fttol+2)^(0+256),w
 11844  23E7  00B0               	movwf	(___altoft@c+2)^(0+256)
 11845  23E8  0821               	movf	(?___fttol+1)^(0+256),w
 11846  23E9  00AF               	movwf	(___altoft@c+1)^(0+256)
 11847  23EA  0820               	movf	?___fttol^(0+256),w
 11848  23EB  00AE               	movwf	___altoft@c^(0+256)
 11849  23EC  31A3  23FC         	fcall	___altoft
 11850  23EE  0022               	movlb	2	; select bank2
 11851  23EF  082E               	movf	?___altoft^(0+256),w
 11852  23F0  00BA               	movwf	trunc@i^(0+256)
 11853  23F1  082F               	movf	(?___altoft+1)^(0+256),w
 11854  23F2  00BB               	movwf	(trunc@i+1)^(0+256)
 11855  23F3  0830               	movf	(?___altoft+2)^(0+256),w
 11856  23F4  00BC               	movwf	(trunc@i+2)^(0+256)
 11857  23F5  083A               	movf	trunc@i^(0+256),w
 11858  23F6  00B6               	movwf	?_trunc^(0+256)
 11859  23F7  083B               	movf	(trunc@i+1)^(0+256),w
 11860  23F8  00B7               	movwf	(?_trunc+1)^(0+256)
 11861  23F9  083C               	movf	(trunc@i+2)^(0+256),w
 11862  23FA  00B8               	movwf	(?_trunc+2)^(0+256)
 11863  23FB  0008               	return
 11864  23FC                     __end_of_trunc:	
 11865                           
 11866                           	psect	text25
 11867  1DC9                     __ptext25:	
 11868 ;; *************** function _scaleiA10kPot *****************
 11869 ;; Defined at:
 11870 ;;		line 211 in file "user.c"
 11871 ;; Parameters:    Size  Location     Type
 11872 ;;  input           3   71[BANK2 ] int 
 11873 ;; Auto vars:     Size  Location     Type
 11874 ;;  pwm             3    0[BANK3 ] float 
 11875 ;; Return value:  Size  Location     Type
 11876 ;;                  2   71[BANK2 ] int 
 11877 ;; Registers used:
 11878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11879 ;; Tracked objects:
 11880 ;;		On entry : 0/0
 11881 ;;		On exit  : 0/0
 11882 ;;		Unchanged: 0/0
 11883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11884 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11885 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11887 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11888 ;;Total ram usage:       12 bytes
 11889 ;; Hardware stack levels used:    1
 11890 ;; Hardware stack levels required when called:    8
 11891 ;; This function calls:
 11892 ;;		___ftadd
 11893 ;;		___ftdiv
 11894 ;;		___ftmul
 11895 ;;		___ftneg
 11896 ;;		___fttol
 11897 ;;		_pow
 11898 ;; This function is called by:
 11899 ;;		_main
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           
 11904                           ;psect for function _scaleiA10kPot
 11905  1DC9                     _scaleiA10kPot:	
 11906                           
 11907                           ;user.c: 214: if (input == 0.0) {return 0;}
 11908                           
 11909                           ;incstack = 0
 11910                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11911  1DC9  0022               	movlb	2	; select bank2
 11912  1DCA  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11913  1DCB  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11914  1DCC  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11915  1DCD  1D03               	skipz
 11916  1DCE  2DD2               	goto	l9143
 11917  1DCF  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11918  1DD0  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11919  1DD1  0008               	return
 11920  1DD2                     l9143:	
 11921                           
 11922                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11923  1DD2  30C0               	movlw	192
 11924  1DD3  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11925  1DD4  307F               	movlw	127
 11926  1DD5  1903               	skipnz
 11927  1DD6  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11928  1DD7  3044               	movlw	68
 11929  1DD8  1903               	skipnz
 11930  1DD9  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11931  1DDA  1D03               	btfss	3,2
 11932  1DDB  2DE1               	goto	l9149
 11933  1DDC  30FF               	movlw	255
 11934  1DDD  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11935  1DDE  3000               	movlw	0
 11936  1DDF  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11937  1DE0  0008               	return
 11938  1DE1                     l9149:	
 11939                           
 11940                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11941  1DE1  3000               	movlw	0
 11942  1DE2  0021               	movlb	1	; select bank1
 11943  1DE3  00C1               	movwf	___ftadd@f1^(0+128)
 11944  1DE4  3080               	movlw	128
 11945  1DE5  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11946  1DE6  303F               	movlw	63
 11947  1DE7  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11948  1DE8  0022               	movlb	2	; select bank2
 11949  1DE9  0867               	movf	scaleiA10kPot@input^(0+256),w
 11950  1DEA  0021               	movlb	1	; select bank1
 11951  1DEB  00D1               	movwf	___ftdiv@f1^(0+128)
 11952  1DEC  0022               	movlb	2	; select bank2
 11953  1DED  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11954  1DEE  0021               	movlb	1	; select bank1
 11955  1DEF  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11956  1DF0  0022               	movlb	2	; select bank2
 11957  1DF1  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11958  1DF2  0021               	movlb	1	; select bank1
 11959  1DF3  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11960  1DF4  30C0               	movlw	192
 11961  1DF5  00CE               	movwf	___ftdiv@f2^(0+128)
 11962  1DF6  307F               	movlw	127
 11963  1DF7  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11964  1DF8  3044               	movlw	68
 11965  1DF9  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11966  1DFA  319D  2520  319D   	fcall	___ftdiv
 11967  1DFD  0021               	movlb	1	; select bank1
 11968  1DFE  084E               	movf	?___ftdiv^(0+128),w
 11969  1DFF  00BE               	movwf	___ftneg@f1^(0+128)
 11970  1E00  084F               	movf	(?___ftdiv+1)^(0+128),w
 11971  1E01  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11972  1E02  0850               	movf	(?___ftdiv+2)^(0+128),w
 11973  1E03  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11974  1E04  31AD  2575  319D   	fcall	___ftneg
 11975  1E07  0021               	movlb	1	; select bank1
 11976  1E08  083E               	movf	?___ftneg^(0+128),w
 11977  1E09  00C4               	movwf	___ftadd@f2^(0+128)
 11978  1E0A  083F               	movf	(?___ftneg+1)^(0+128),w
 11979  1E0B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11980  1E0C  0840               	movf	(?___ftneg+2)^(0+128),w
 11981  1E0D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11982  1E0E  3190  2026  319D   	fcall	___ftadd
 11983  1E11  0021               	movlb	1	; select bank1
 11984  1E12  0841               	movf	?___ftadd^(0+128),w
 11985  1E13  0023               	movlb	3	; select bank3
 11986  1E14  00E5               	movwf	_scaleiA10kPot$2843^(0+384)
 11987  1E15  0021               	movlb	1	; select bank1
 11988  1E16  0842               	movf	(?___ftadd+1)^(0+128),w
 11989  1E17  0023               	movlb	3	; select bank3
 11990  1E18  00E6               	movwf	(_scaleiA10kPot$2843+1)^(0+384)
 11991  1E19  0021               	movlb	1	; select bank1
 11992  1E1A  0843               	movf	(?___ftadd+2)^(0+128),w
 11993  1E1B  0023               	movlb	3	; select bank3
 11994  1E1C  00E7               	movwf	(_scaleiA10kPot$2843+2)^(0+384)
 11995                           
 11996                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11997  1E1D  306A               	movlw	106
 11998  1E1E  0022               	movlb	2	; select bank2
 11999  1E1F  00D8               	movwf	pow@y^(0+256)
 12000  1E20  309C               	movlw	156
 12001  1E21  00D9               	movwf	(pow@y+1)^(0+256)
 12002  1E22  30BF               	movlw	191
 12003  1E23  00DA               	movwf	(pow@y+2)^(0+256)
 12004  1E24  0023               	movlb	3	; select bank3
 12005  1E25  0865               	movf	_scaleiA10kPot$2843^(0+384),w
 12006  1E26  0022               	movlb	2	; select bank2
 12007  1E27  00D5               	movwf	pow@x^(0+256)
 12008  1E28  0023               	movlb	3	; select bank3
 12009  1E29  0866               	movf	(_scaleiA10kPot$2843+1)^(0+384),w
 12010  1E2A  0022               	movlb	2	; select bank2
 12011  1E2B  00D6               	movwf	(pow@x+1)^(0+256)
 12012  1E2C  0023               	movlb	3	; select bank3
 12013  1E2D  0867               	movf	(_scaleiA10kPot$2843+2)^(0+384),w
 12014  1E2E  0022               	movlb	2	; select bank2
 12015  1E2F  00D7               	movwf	(pow@x+2)^(0+256)
 12016  1E30  3191  211C  319D   	fcall	_pow
 12017  1E33  0022               	movlb	2	; select bank2
 12018  1E34  0855               	movf	?_pow^(0+256),w
 12019  1E35  0023               	movlb	3	; select bank3
 12020  1E36  00E8               	movwf	_scaleiA10kPot$2844^(0+384)
 12021  1E37  0022               	movlb	2	; select bank2
 12022  1E38  0856               	movf	(?_pow+1)^(0+256),w
 12023  1E39  0023               	movlb	3	; select bank3
 12024  1E3A  00E9               	movwf	(_scaleiA10kPot$2844+1)^(0+384)
 12025  1E3B  0022               	movlb	2	; select bank2
 12026  1E3C  0857               	movf	(?_pow+2)^(0+256),w
 12027  1E3D  0023               	movlb	3	; select bank3
 12028  1E3E  00EA               	movwf	(_scaleiA10kPot$2844+2)^(0+384)
 12029                           
 12030                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 12031  1E3F  30E3               	movlw	227
 12032  1E40  0021               	movlb	1	; select bank1
 12033  1E41  00AE               	movwf	___ftmul@f1^(0+128)
 12034  1E42  300B               	movlw	11
 12035  1E43  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12036  1E44  3041               	movlw	65
 12037  1E45  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12038  1E46  0023               	movlb	3	; select bank3
 12039  1E47  0868               	movf	_scaleiA10kPot$2844^(0+384),w
 12040  1E48  0021               	movlb	1	; select bank1
 12041  1E49  00B1               	movwf	___ftmul@f2^(0+128)
 12042  1E4A  0023               	movlb	3	; select bank3
 12043  1E4B  0869               	movf	(_scaleiA10kPot$2844+1)^(0+384),w
 12044  1E4C  0021               	movlb	1	; select bank1
 12045  1E4D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12046  1E4E  0023               	movlb	3	; select bank3
 12047  1E4F  086A               	movf	(_scaleiA10kPot$2844+2)^(0+384),w
 12048  1E50  0021               	movlb	1	; select bank1
 12049  1E51  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12050  1E52  3187  274C  319D   	fcall	___ftmul
 12051  1E55  0021               	movlb	1	; select bank1
 12052  1E56  082E               	movf	?___ftmul^(0+128),w
 12053  1E57  0023               	movlb	3	; select bank3
 12054  1E58  00E2               	movwf	scaleiA10kPot@pwm^(0+384)
 12055  1E59  0021               	movlb	1	; select bank1
 12056  1E5A  082F               	movf	(?___ftmul+1)^(0+128),w
 12057  1E5B  0023               	movlb	3	; select bank3
 12058  1E5C  00E3               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 12059  1E5D  0021               	movlb	1	; select bank1
 12060  1E5E  0830               	movf	(?___ftmul+2)^(0+128),w
 12061  1E5F  0023               	movlb	3	; select bank3
 12062  1E60  00E4               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 12063                           
 12064                           ;user.c: 219: return (int)(pwm);
 12065  1E61  0862               	movf	scaleiA10kPot@pwm^(0+384),w
 12066  1E62  0022               	movlb	2	; select bank2
 12067  1E63  00A0               	movwf	___fttol@f1^(0+256)
 12068  1E64  0023               	movlb	3	; select bank3
 12069  1E65  0863               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 12070  1E66  0022               	movlb	2	; select bank2
 12071  1E67  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12072  1E68  0023               	movlb	3	; select bank3
 12073  1E69  0864               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 12074  1E6A  0022               	movlb	2	; select bank2
 12075  1E6B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12076  1E6C  3199  21B3         	fcall	___fttol
 12077  1E6E  0022               	movlb	2	; select bank2
 12078  1E6F  0821               	movf	(?___fttol^(0+256)+1),w
 12079  1E70  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 12080  1E71  0820               	movf	?___fttol^(0+256),w
 12081  1E72  00E7               	movwf	?_scaleiA10kPot^(0+256)
 12082  1E73  0008               	return
 12083  1E74                     __end_of_scaleiA10kPot:	
 12084                           
 12085                           	psect	text26
 12086  1B51                     __ptext26:	
 12087 ;; *************** function _scaleA10kPot *****************
 12088 ;; Defined at:
 12089 ;;		line 202 in file "user.c"
 12090 ;; Parameters:    Size  Location     Type
 12091 ;;  input           3   71[BANK2 ] int 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  pwm             3    0[BANK3 ] float 
 12094 ;; Return value:  Size  Location     Type
 12095 ;;                  2   71[BANK2 ] int 
 12096 ;; Registers used:
 12097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12098 ;; Tracked objects:
 12099 ;;		On entry : 0/0
 12100 ;;		On exit  : 0/0
 12101 ;;		Unchanged: 0/0
 12102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12103 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12104 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12106 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12107 ;;Total ram usage:       12 bytes
 12108 ;; Hardware stack levels used:    1
 12109 ;; Hardware stack levels required when called:    8
 12110 ;; This function calls:
 12111 ;;		___ftdiv
 12112 ;;		___ftmul
 12113 ;;		___fttol
 12114 ;;		_pow
 12115 ;; This function is called by:
 12116 ;;		_main
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _scaleA10kPot
 12122  1B51                     _scaleA10kPot:	
 12123                           
 12124                           ;user.c: 204: if (input == 0.0) {return 255;}
 12125                           
 12126                           ;incstack = 0
 12127                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12128  1B51  0022               	movlb	2	; select bank2
 12129  1B52  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12130  1B53  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 12131  1B54  0467               	iorwf	scaleA10kPot@input^(0+256),w
 12132  1B55  1D03               	skipz
 12133  1B56  2B5C               	goto	l9121
 12134  1B57  30FF               	movlw	255
 12135  1B58  00E7               	movwf	?_scaleA10kPot^(0+256)
 12136  1B59  3000               	movlw	0
 12137  1B5A  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 12138  1B5B  0008               	return
 12139  1B5C                     l9121:	
 12140                           
 12141                           ;user.c: 205: if (input == 1023.0) {return 0;}
 12142  1B5C  30C0               	movlw	192
 12143  1B5D  0667               	xorwf	scaleA10kPot@input^(0+256),w
 12144  1B5E  307F               	movlw	127
 12145  1B5F  1903               	skipnz
 12146  1B60  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 12147  1B61  3044               	movlw	68
 12148  1B62  1903               	skipnz
 12149  1B63  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 12150  1B64  1D03               	btfss	3,2
 12151  1B65  2B69               	goto	l9127
 12152  1B66  01E7               	clrf	?_scaleA10kPot^(0+256)
 12153  1B67  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 12154  1B68  0008               	return
 12155  1B69                     l9127:	
 12156                           
 12157                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12158  1B69  30C0               	movlw	192
 12159  1B6A  0021               	movlb	1	; select bank1
 12160  1B6B  00CE               	movwf	___ftdiv@f2^(0+128)
 12161  1B6C  307F               	movlw	127
 12162  1B6D  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12163  1B6E  3044               	movlw	68
 12164  1B6F  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12165  1B70  0022               	movlb	2	; select bank2
 12166  1B71  0867               	movf	scaleA10kPot@input^(0+256),w
 12167  1B72  0021               	movlb	1	; select bank1
 12168  1B73  00D1               	movwf	___ftdiv@f1^(0+128)
 12169  1B74  0022               	movlb	2	; select bank2
 12170  1B75  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 12171  1B76  0021               	movlb	1	; select bank1
 12172  1B77  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12173  1B78  0022               	movlb	2	; select bank2
 12174  1B79  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 12175  1B7A  0021               	movlb	1	; select bank1
 12176  1B7B  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12177  1B7C  319D  2520  319B   	fcall	___ftdiv
 12178  1B7F  0021               	movlb	1	; select bank1
 12179  1B80  084E               	movf	?___ftdiv^(0+128),w
 12180  1B81  0023               	movlb	3	; select bank3
 12181  1B82  00E5               	movwf	_scaleA10kPot$2841^(0+384)
 12182  1B83  0021               	movlb	1	; select bank1
 12183  1B84  084F               	movf	(?___ftdiv+1)^(0+128),w
 12184  1B85  0023               	movlb	3	; select bank3
 12185  1B86  00E6               	movwf	(_scaleA10kPot$2841+1)^(0+384)
 12186  1B87  0021               	movlb	1	; select bank1
 12187  1B88  0850               	movf	(?___ftdiv+2)^(0+128),w
 12188  1B89  0023               	movlb	3	; select bank3
 12189  1B8A  00E7               	movwf	(_scaleA10kPot$2841+2)^(0+384)
 12190                           
 12191                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12192  1B8B  306A               	movlw	106
 12193  1B8C  0022               	movlb	2	; select bank2
 12194  1B8D  00D8               	movwf	pow@y^(0+256)
 12195  1B8E  309C               	movlw	156
 12196  1B8F  00D9               	movwf	(pow@y+1)^(0+256)
 12197  1B90  30BF               	movlw	191
 12198  1B91  00DA               	movwf	(pow@y+2)^(0+256)
 12199  1B92  0023               	movlb	3	; select bank3
 12200  1B93  0865               	movf	_scaleA10kPot$2841^(0+384),w
 12201  1B94  0022               	movlb	2	; select bank2
 12202  1B95  00D5               	movwf	pow@x^(0+256)
 12203  1B96  0023               	movlb	3	; select bank3
 12204  1B97  0866               	movf	(_scaleA10kPot$2841+1)^(0+384),w
 12205  1B98  0022               	movlb	2	; select bank2
 12206  1B99  00D6               	movwf	(pow@x+1)^(0+256)
 12207  1B9A  0023               	movlb	3	; select bank3
 12208  1B9B  0867               	movf	(_scaleA10kPot$2841+2)^(0+384),w
 12209  1B9C  0022               	movlb	2	; select bank2
 12210  1B9D  00D7               	movwf	(pow@x+2)^(0+256)
 12211  1B9E  3191  211C  319B   	fcall	_pow
 12212  1BA1  0022               	movlb	2	; select bank2
 12213  1BA2  0855               	movf	?_pow^(0+256),w
 12214  1BA3  0023               	movlb	3	; select bank3
 12215  1BA4  00E8               	movwf	_scaleA10kPot$2842^(0+384)
 12216  1BA5  0022               	movlb	2	; select bank2
 12217  1BA6  0856               	movf	(?_pow+1)^(0+256),w
 12218  1BA7  0023               	movlb	3	; select bank3
 12219  1BA8  00E9               	movwf	(_scaleA10kPot$2842+1)^(0+384)
 12220  1BA9  0022               	movlb	2	; select bank2
 12221  1BAA  0857               	movf	(?_pow+2)^(0+256),w
 12222  1BAB  0023               	movlb	3	; select bank3
 12223  1BAC  00EA               	movwf	(_scaleA10kPot$2842+2)^(0+384)
 12224                           
 12225                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 12226  1BAD  30E3               	movlw	227
 12227  1BAE  0021               	movlb	1	; select bank1
 12228  1BAF  00AE               	movwf	___ftmul@f1^(0+128)
 12229  1BB0  300B               	movlw	11
 12230  1BB1  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12231  1BB2  3041               	movlw	65
 12232  1BB3  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12233  1BB4  0023               	movlb	3	; select bank3
 12234  1BB5  0868               	movf	_scaleA10kPot$2842^(0+384),w
 12235  1BB6  0021               	movlb	1	; select bank1
 12236  1BB7  00B1               	movwf	___ftmul@f2^(0+128)
 12237  1BB8  0023               	movlb	3	; select bank3
 12238  1BB9  0869               	movf	(_scaleA10kPot$2842+1)^(0+384),w
 12239  1BBA  0021               	movlb	1	; select bank1
 12240  1BBB  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12241  1BBC  0023               	movlb	3	; select bank3
 12242  1BBD  086A               	movf	(_scaleA10kPot$2842+2)^(0+384),w
 12243  1BBE  0021               	movlb	1	; select bank1
 12244  1BBF  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12245  1BC0  3187  274C  319B   	fcall	___ftmul
 12246  1BC3  0021               	movlb	1	; select bank1
 12247  1BC4  082E               	movf	?___ftmul^(0+128),w
 12248  1BC5  0023               	movlb	3	; select bank3
 12249  1BC6  00E2               	movwf	scaleA10kPot@pwm^(0+384)
 12250  1BC7  0021               	movlb	1	; select bank1
 12251  1BC8  082F               	movf	(?___ftmul+1)^(0+128),w
 12252  1BC9  0023               	movlb	3	; select bank3
 12253  1BCA  00E3               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 12254  1BCB  0021               	movlb	1	; select bank1
 12255  1BCC  0830               	movf	(?___ftmul+2)^(0+128),w
 12256  1BCD  0023               	movlb	3	; select bank3
 12257  1BCE  00E4               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 12258                           
 12259                           ;user.c: 207: return (int)(pwm);
 12260  1BCF  0862               	movf	scaleA10kPot@pwm^(0+384),w
 12261  1BD0  0022               	movlb	2	; select bank2
 12262  1BD1  00A0               	movwf	___fttol@f1^(0+256)
 12263  1BD2  0023               	movlb	3	; select bank3
 12264  1BD3  0863               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 12265  1BD4  0022               	movlb	2	; select bank2
 12266  1BD5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12267  1BD6  0023               	movlb	3	; select bank3
 12268  1BD7  0864               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 12269  1BD8  0022               	movlb	2	; select bank2
 12270  1BD9  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12271  1BDA  3199  21B3         	fcall	___fttol
 12272  1BDC  0022               	movlb	2	; select bank2
 12273  1BDD  0821               	movf	(?___fttol^(0+256)+1),w
 12274  1BDE  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 12275  1BDF  0820               	movf	?___fttol^(0+256),w
 12276  1BE0  00E7               	movwf	?_scaleA10kPot^(0+256)
 12277  1BE1  0008               	return
 12278  1BE2                     __end_of_scaleA10kPot:	
 12279                           
 12280                           	psect	text27
 12281  192E                     __ptext27:	
 12282 ;; *************** function _scaleA100kPot *****************
 12283 ;; Defined at:
 12284 ;;		line 188 in file "user.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;  input           3   71[BANK2 ] int 
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;  pwm             3    0[BANK3 ] float 
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  2   71[BANK2 ] int 
 12291 ;; Registers used:
 12292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12298 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12299 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12301 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12302 ;;Total ram usage:       12 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:    8
 12305 ;; This function calls:
 12306 ;;		___ftdiv
 12307 ;;		___ftmul
 12308 ;;		___fttol
 12309 ;;		_pow
 12310 ;; This function is called by:
 12311 ;;		_main
 12312 ;; This function uses a non-reentrant model
 12313 ;;
 12314                           
 12315                           
 12316                           ;psect for function _scaleA100kPot
 12317  192E                     _scaleA100kPot:	
 12318                           
 12319                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 12320                           
 12321                           ;incstack = 0
 12322                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12323  192E  0022               	movlb	2	; select bank2
 12324  192F  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12325  1930  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 12326  1931  0467               	iorwf	scaleA100kPot@input^(0+256),w
 12327  1932  1D03               	skipz
 12328  1933  293A               	goto	l9163
 12329  1934  3000               	movlw	0
 12330  1935  00E7               	movwf	scaleA100kPot@input^(0+256)
 12331  1936  3080               	movlw	128
 12332  1937  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 12333  1938  303F               	movlw	63
 12334  1939  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 12335  193A                     l9163:	
 12336                           
 12337                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12338  193A  30C0               	movlw	192
 12339  193B  0021               	movlb	1	; select bank1
 12340  193C  00CE               	movwf	___ftdiv@f2^(0+128)
 12341  193D  307F               	movlw	127
 12342  193E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12343  193F  3044               	movlw	68
 12344  1940  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12345  1941  0022               	movlb	2	; select bank2
 12346  1942  0867               	movf	scaleA100kPot@input^(0+256),w
 12347  1943  0021               	movlb	1	; select bank1
 12348  1944  00D1               	movwf	___ftdiv@f1^(0+128)
 12349  1945  0022               	movlb	2	; select bank2
 12350  1946  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 12351  1947  0021               	movlb	1	; select bank1
 12352  1948  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12353  1949  0022               	movlb	2	; select bank2
 12354  194A  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 12355  194B  0021               	movlb	1	; select bank1
 12356  194C  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12357  194D  319D  2520  3199   	fcall	___ftdiv
 12358  1950  0021               	movlb	1	; select bank1
 12359  1951  084E               	movf	?___ftdiv^(0+128),w
 12360  1952  0023               	movlb	3	; select bank3
 12361  1953  00E5               	movwf	_scaleA100kPot$2837^(0+384)
 12362  1954  0021               	movlb	1	; select bank1
 12363  1955  084F               	movf	(?___ftdiv+1)^(0+128),w
 12364  1956  0023               	movlb	3	; select bank3
 12365  1957  00E6               	movwf	(_scaleA100kPot$2837+1)^(0+384)
 12366  1958  0021               	movlb	1	; select bank1
 12367  1959  0850               	movf	(?___ftdiv+2)^(0+128),w
 12368  195A  0023               	movlb	3	; select bank3
 12369  195B  00E7               	movwf	(_scaleA100kPot$2837+2)^(0+384)
 12370                           
 12371                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12372  195C  3056               	movlw	86
 12373  195D  0022               	movlb	2	; select bank2
 12374  195E  00D8               	movwf	pow@y^(0+256)
 12375  195F  308E               	movlw	142
 12376  1960  00D9               	movwf	(pow@y+1)^(0+256)
 12377  1961  30BF               	movlw	191
 12378  1962  00DA               	movwf	(pow@y+2)^(0+256)
 12379  1963  0023               	movlb	3	; select bank3
 12380  1964  0865               	movf	_scaleA100kPot$2837^(0+384),w
 12381  1965  0022               	movlb	2	; select bank2
 12382  1966  00D5               	movwf	pow@x^(0+256)
 12383  1967  0023               	movlb	3	; select bank3
 12384  1968  0866               	movf	(_scaleA100kPot$2837+1)^(0+384),w
 12385  1969  0022               	movlb	2	; select bank2
 12386  196A  00D6               	movwf	(pow@x+1)^(0+256)
 12387  196B  0023               	movlb	3	; select bank3
 12388  196C  0867               	movf	(_scaleA100kPot$2837+2)^(0+384),w
 12389  196D  0022               	movlb	2	; select bank2
 12390  196E  00D7               	movwf	(pow@x+2)^(0+256)
 12391  196F  3191  211C  3199   	fcall	_pow
 12392  1972  0022               	movlb	2	; select bank2
 12393  1973  0855               	movf	?_pow^(0+256),w
 12394  1974  0023               	movlb	3	; select bank3
 12395  1975  00E8               	movwf	_scaleA100kPot$2838^(0+384)
 12396  1976  0022               	movlb	2	; select bank2
 12397  1977  0856               	movf	(?_pow+1)^(0+256),w
 12398  1978  0023               	movlb	3	; select bank3
 12399  1979  00E9               	movwf	(_scaleA100kPot$2838+1)^(0+384)
 12400  197A  0022               	movlb	2	; select bank2
 12401  197B  0857               	movf	(?_pow+2)^(0+256),w
 12402  197C  0023               	movlb	3	; select bank3
 12403  197D  00EA               	movwf	(_scaleA100kPot$2838+2)^(0+384)
 12404                           
 12405                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 12406  197E  309F               	movlw	159
 12407  197F  0021               	movlb	1	; select bank1
 12408  1980  00AE               	movwf	___ftmul@f1^(0+128)
 12409  1981  3068               	movlw	104
 12410  1982  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12411  1983  3040               	movlw	64
 12412  1984  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12413  1985  0023               	movlb	3	; select bank3
 12414  1986  0868               	movf	_scaleA100kPot$2838^(0+384),w
 12415  1987  0021               	movlb	1	; select bank1
 12416  1988  00B1               	movwf	___ftmul@f2^(0+128)
 12417  1989  0023               	movlb	3	; select bank3
 12418  198A  0869               	movf	(_scaleA100kPot$2838+1)^(0+384),w
 12419  198B  0021               	movlb	1	; select bank1
 12420  198C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12421  198D  0023               	movlb	3	; select bank3
 12422  198E  086A               	movf	(_scaleA100kPot$2838+2)^(0+384),w
 12423  198F  0021               	movlb	1	; select bank1
 12424  1990  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12425  1991  3187  274C  3199   	fcall	___ftmul
 12426  1994  0021               	movlb	1	; select bank1
 12427  1995  082E               	movf	?___ftmul^(0+128),w
 12428  1996  0023               	movlb	3	; select bank3
 12429  1997  00E2               	movwf	scaleA100kPot@pwm^(0+384)
 12430  1998  0021               	movlb	1	; select bank1
 12431  1999  082F               	movf	(?___ftmul+1)^(0+128),w
 12432  199A  0023               	movlb	3	; select bank3
 12433  199B  00E3               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 12434  199C  0021               	movlb	1	; select bank1
 12435  199D  0830               	movf	(?___ftmul+2)^(0+128),w
 12436  199E  0023               	movlb	3	; select bank3
 12437  199F  00E4               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 12438                           
 12439                           ;user.c: 192: return (int)(pwm);
 12440  19A0  0862               	movf	scaleA100kPot@pwm^(0+384),w
 12441  19A1  0022               	movlb	2	; select bank2
 12442  19A2  00A0               	movwf	___fttol@f1^(0+256)
 12443  19A3  0023               	movlb	3	; select bank3
 12444  19A4  0863               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 12445  19A5  0022               	movlb	2	; select bank2
 12446  19A6  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12447  19A7  0023               	movlb	3	; select bank3
 12448  19A8  0864               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 12449  19A9  0022               	movlb	2	; select bank2
 12450  19AA  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12451  19AB  3199  21B3         	fcall	___fttol
 12452  19AD  0022               	movlb	2	; select bank2
 12453  19AE  0821               	movf	(?___fttol^(0+256)+1),w
 12454  19AF  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 12455  19B0  0820               	movf	?___fttol^(0+256),w
 12456  19B1  00E7               	movwf	?_scaleA100kPot^(0+256)
 12457  19B2  0008               	return
 12458  19B3                     __end_of_scaleA100kPot:	
 12459                           
 12460                           	psect	text28
 12461  111C                     __ptext28:	
 12462 ;; *************** function _pow *****************
 12463 ;; Defined at:
 12464 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 12465 ;; Parameters:    Size  Location     Type
 12466 ;;  x               3   53[BANK2 ] int 
 12467 ;;  y               3   56[BANK2 ] int 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  yi              4   67[BANK2 ] unsigned long 
 12470 ;;  sign            1   66[BANK2 ] unsigned char 
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  3   53[BANK2 ] unsigned char 
 12473 ;; Registers used:
 12474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12480 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12481 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12482 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12483 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12484 ;;Total ram usage:       18 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    7
 12487 ;; This function calls:
 12488 ;;		___ftge
 12489 ;;		___ftmul
 12490 ;;		___ftneg
 12491 ;;		___fttol
 12492 ;;		___lltoft
 12493 ;;		_exp
 12494 ;;		_log
 12495 ;; This function is called by:
 12496 ;;		_scaleA100kPot
 12497 ;;		_scaleA10kPot
 12498 ;;		_scaleiA10kPot
 12499 ;;		_scaleiA100kPot
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _pow
 12505  111C                     _pow:	
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12509  111C  0022               	movlb	2	; select bank2
 12510  111D  01E2               	clrf	pow@sign^(0+256)
 12511  111E  0857               	movf	(pow@x+2)^(0+256),w
 12512  111F  0456               	iorwf	(pow@x+1)^(0+256),w
 12513  1120  0455               	iorwf	pow@x^(0+256),w
 12514  1121  1D03               	skipz
 12515  1122  2948               	goto	l8387
 12516  1123  3000               	movlw	0
 12517  1124  0021               	movlb	1	; select bank1
 12518  1125  00A0               	movwf	___ftge@ff1^(0+128)
 12519  1126  3000               	movlw	0
 12520  1127  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12521  1128  3000               	movlw	0
 12522  1129  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12523  112A  0022               	movlb	2	; select bank2
 12524  112B  0858               	movf	pow@y^(0+256),w
 12525  112C  0021               	movlb	1	; select bank1
 12526  112D  00A3               	movwf	___ftge@ff2^(0+128)
 12527  112E  0022               	movlb	2	; select bank2
 12528  112F  0859               	movf	(pow@y+1)^(0+256),w
 12529  1130  0021               	movlb	1	; select bank1
 12530  1131  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12531  1132  0022               	movlb	2	; select bank2
 12532  1133  085A               	movf	(pow@y+2)^(0+256),w
 12533  1134  0021               	movlb	1	; select bank1
 12534  1135  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12535  1136  31A1  212A  3191   	fcall	___ftge
 12536  1139  1C03               	btfss	3,0
 12537  113A  2940               	goto	l2306
 12538  113B  3021               	movlw	33
 12539  113C  0024               	movlb	4	; select bank4
 12540  113D  00CD               	movwf	_errno^(0+512)
 12541  113E  3000               	movlw	0
 12542  113F  00CE               	movwf	(_errno^(0+512)+1)
 12543  1140                     l2306:	
 12544  1140  3000               	movlw	0
 12545  1141  0022               	movlb	2	; select bank2
 12546  1142  00D5               	movwf	?_pow^(0+256)
 12547  1143  3000               	movlw	0
 12548  1144  00D6               	movwf	(?_pow+1)^(0+256)
 12549  1145  3000               	movlw	0
 12550  1146  00D7               	movwf	(?_pow+2)^(0+256)
 12551  1147  0008               	return
 12552  1148                     l8387:	
 12553  1148  085A               	movf	(pow@y+2)^(0+256),w
 12554  1149  0459               	iorwf	(pow@y+1)^(0+256),w
 12555  114A  0458               	iorwf	pow@y^(0+256),w
 12556  114B  1D03               	skipz
 12557  114C  2954               	goto	l8393
 12558  114D  3000               	movlw	0
 12559  114E  00D5               	movwf	?_pow^(0+256)
 12560  114F  3080               	movlw	128
 12561  1150  00D6               	movwf	(?_pow+1)^(0+256)
 12562  1151  303F               	movlw	63
 12563  1152  00D7               	movwf	(?_pow+2)^(0+256)
 12564  1153  0008               	return
 12565  1154                     l8393:	
 12566  1154  0855               	movf	pow@x^(0+256),w
 12567  1155  0021               	movlb	1	; select bank1
 12568  1156  00A0               	movwf	___ftge@ff1^(0+128)
 12569  1157  0022               	movlb	2	; select bank2
 12570  1158  0856               	movf	(pow@x+1)^(0+256),w
 12571  1159  0021               	movlb	1	; select bank1
 12572  115A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12573  115B  0022               	movlb	2	; select bank2
 12574  115C  0857               	movf	(pow@x+2)^(0+256),w
 12575  115D  0021               	movlb	1	; select bank1
 12576  115E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12577  115F  3000               	movlw	0
 12578  1160  00A3               	movwf	___ftge@ff2^(0+128)
 12579  1161  3000               	movlw	0
 12580  1162  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12581  1163  3000               	movlw	0
 12582  1164  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12583  1165  31A1  212A  3191   	fcall	___ftge
 12584  1168  1803               	btfsc	3,0
 12585  1169  29CE               	goto	l8405
 12586  116A  0022               	movlb	2	; select bank2
 12587  116B  0858               	movf	pow@y^(0+256),w
 12588  116C  00A0               	movwf	___fttol@f1^(0+256)
 12589  116D  0859               	movf	(pow@y+1)^(0+256),w
 12590  116E  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12591  116F  085A               	movf	(pow@y+2)^(0+256),w
 12592  1170  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12593  1171  3199  21B3  3191   	fcall	___fttol
 12594  1174  0022               	movlb	2	; select bank2
 12595  1175  0823               	movf	(?___fttol+3)^(0+256),w
 12596  1176  00E6               	movwf	(pow@yi+3)^(0+256)
 12597  1177  0822               	movf	(?___fttol+2)^(0+256),w
 12598  1178  00E5               	movwf	(pow@yi+2)^(0+256)
 12599  1179  0821               	movf	(?___fttol+1)^(0+256),w
 12600  117A  00E4               	movwf	(pow@yi+1)^(0+256)
 12601  117B  0820               	movf	?___fttol^(0+256),w
 12602  117C  00E3               	movwf	pow@yi^(0+256)
 12603  117D  0866               	movf	(pow@yi+3)^(0+256),w
 12604  117E  0021               	movlb	1	; select bank1
 12605  117F  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12606  1180  0022               	movlb	2	; select bank2
 12607  1181  0865               	movf	(pow@yi+2)^(0+256),w
 12608  1182  0021               	movlb	1	; select bank1
 12609  1183  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12610  1184  0022               	movlb	2	; select bank2
 12611  1185  0864               	movf	(pow@yi+1)^(0+256),w
 12612  1186  0021               	movlb	1	; select bank1
 12613  1187  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12614  1188  0022               	movlb	2	; select bank2
 12615  1189  0863               	movf	pow@yi^(0+256),w
 12616  118A  0021               	movlb	1	; select bank1
 12617  118B  00A8               	movwf	___lltoft@c^(0+128)
 12618  118C  3198  2000  3191   	fcall	___lltoft
 12619  118F  0022               	movlb	2	; select bank2
 12620  1190  085A               	movf	(pow@y+2)^(0+256),w
 12621  1191  0021               	movlb	1	; select bank1
 12622  1192  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12623  1193  1D03               	skipz
 12624  1194  299F               	goto	u8845
 12625  1195  0022               	movlb	2	; select bank2
 12626  1196  0859               	movf	(pow@y+1)^(0+256),w
 12627  1197  0021               	movlb	1	; select bank1
 12628  1198  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12629  1199  1D03               	skipz
 12630  119A  299F               	goto	u8845
 12631  119B  0022               	movlb	2	; select bank2
 12632  119C  0858               	movf	pow@y^(0+256),w
 12633  119D  0021               	movlb	1	; select bank1
 12634  119E  0628               	xorwf	?___lltoft^(0+128),w
 12635  119F                     u8845:	
 12636  119F  1903               	skipnz
 12637  11A0  29AE               	goto	l8401
 12638  11A1  3021               	movlw	33
 12639  11A2  0024               	movlb	4	; select bank4
 12640  11A3  00CD               	movwf	_errno^(0+512)
 12641  11A4  3000               	movlw	0
 12642  11A5  00CE               	movwf	(_errno^(0+512)+1)
 12643  11A6  3000               	movlw	0
 12644  11A7  0022               	movlb	2	; select bank2
 12645  11A8  00D5               	movwf	?_pow^(0+256)
 12646  11A9  3000               	movlw	0
 12647  11AA  00D6               	movwf	(?_pow+1)^(0+256)
 12648  11AB  3000               	movlw	0
 12649  11AC  00D7               	movwf	(?_pow+2)^(0+256)
 12650  11AD  0008               	return
 12651  11AE                     l8401:	
 12652  11AE  0022               	movlb	2	; select bank2
 12653  11AF  0863               	movf	pow@yi^(0+256),w
 12654  11B0  3901               	andlw	1
 12655  11B1  00DB               	movwf	??_pow^(0+256)
 12656  11B2  085B               	movf	??_pow^(0+256),w
 12657  11B3  00E2               	movwf	pow@sign^(0+256)
 12658  11B4  0855               	movf	pow@x^(0+256),w
 12659  11B5  0021               	movlb	1	; select bank1
 12660  11B6  00BE               	movwf	___ftneg@f1^(0+128)
 12661  11B7  0022               	movlb	2	; select bank2
 12662  11B8  0856               	movf	(pow@x+1)^(0+256),w
 12663  11B9  0021               	movlb	1	; select bank1
 12664  11BA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12665  11BB  0022               	movlb	2	; select bank2
 12666  11BC  0857               	movf	(pow@x+2)^(0+256),w
 12667  11BD  0021               	movlb	1	; select bank1
 12668  11BE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12669  11BF  31AD  2575  3191   	fcall	___ftneg
 12670  11C2  0021               	movlb	1	; select bank1
 12671  11C3  083E               	movf	?___ftneg^(0+128),w
 12672  11C4  0022               	movlb	2	; select bank2
 12673  11C5  00D5               	movwf	pow@x^(0+256)
 12674  11C6  0021               	movlb	1	; select bank1
 12675  11C7  083F               	movf	(?___ftneg+1)^(0+128),w
 12676  11C8  0022               	movlb	2	; select bank2
 12677  11C9  00D6               	movwf	(pow@x+1)^(0+256)
 12678  11CA  0021               	movlb	1	; select bank1
 12679  11CB  0840               	movf	(?___ftneg+2)^(0+128),w
 12680  11CC  0022               	movlb	2	; select bank2
 12681  11CD  00D7               	movwf	(pow@x+2)^(0+256)
 12682  11CE                     l8405:	
 12683  11CE  0022               	movlb	2	; select bank2
 12684  11CF  0855               	movf	pow@x^(0+256),w
 12685  11D0  00BE               	movwf	log@x^(0+256)
 12686  11D1  0856               	movf	(pow@x+1)^(0+256),w
 12687  11D2  00BF               	movwf	(log@x+1)^(0+256)
 12688  11D3  0857               	movf	(pow@x+2)^(0+256),w
 12689  11D4  00C0               	movwf	(log@x+2)^(0+256)
 12690  11D5  319F  272F  3191   	fcall	_log
 12691  11D8  0022               	movlb	2	; select bank2
 12692  11D9  083E               	movf	?_log^(0+256),w
 12693  11DA  00DC               	movwf	_pow$2850^(0+256)
 12694  11DB  083F               	movf	(?_log+1)^(0+256),w
 12695  11DC  00DD               	movwf	(_pow$2850+1)^(0+256)
 12696  11DD  0840               	movf	(?_log+2)^(0+256),w
 12697  11DE  00DE               	movwf	(_pow$2850+2)^(0+256)
 12698  11DF  0858               	movf	pow@y^(0+256),w
 12699  11E0  0021               	movlb	1	; select bank1
 12700  11E1  00AE               	movwf	___ftmul@f1^(0+128)
 12701  11E2  0022               	movlb	2	; select bank2
 12702  11E3  0859               	movf	(pow@y+1)^(0+256),w
 12703  11E4  0021               	movlb	1	; select bank1
 12704  11E5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12705  11E6  0022               	movlb	2	; select bank2
 12706  11E7  085A               	movf	(pow@y+2)^(0+256),w
 12707  11E8  0021               	movlb	1	; select bank1
 12708  11E9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12709  11EA  0022               	movlb	2	; select bank2
 12710  11EB  085C               	movf	_pow$2850^(0+256),w
 12711  11EC  0021               	movlb	1	; select bank1
 12712  11ED  00B1               	movwf	___ftmul@f2^(0+128)
 12713  11EE  0022               	movlb	2	; select bank2
 12714  11EF  085D               	movf	(_pow$2850+1)^(0+256),w
 12715  11F0  0021               	movlb	1	; select bank1
 12716  11F1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12717  11F2  0022               	movlb	2	; select bank2
 12718  11F3  085E               	movf	(_pow$2850+2)^(0+256),w
 12719  11F4  0021               	movlb	1	; select bank1
 12720  11F5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12721  11F6  3187  274C  3191   	fcall	___ftmul
 12722  11F9  0021               	movlb	1	; select bank1
 12723  11FA  082E               	movf	?___ftmul^(0+128),w
 12724  11FB  0022               	movlb	2	; select bank2
 12725  11FC  00DF               	movwf	_pow$2851^(0+256)
 12726  11FD  0021               	movlb	1	; select bank1
 12727  11FE  082F               	movf	(?___ftmul+1)^(0+128),w
 12728  11FF  0022               	movlb	2	; select bank2
 12729  1200  00E0               	movwf	(_pow$2851+1)^(0+256)
 12730  1201  0021               	movlb	1	; select bank1
 12731  1202  0830               	movf	(?___ftmul+2)^(0+128),w
 12732  1203  0022               	movlb	2	; select bank2
 12733  1204  00E1               	movwf	(_pow$2851+2)^(0+256)
 12734  1205  085F               	movf	_pow$2851^(0+256),w
 12735  1206  00C8               	movwf	exp@x^(0+256)
 12736  1207  0860               	movf	(_pow$2851+1)^(0+256),w
 12737  1208  00C9               	movwf	(exp@x+1)^(0+256)
 12738  1209  0861               	movf	(_pow$2851+2)^(0+256),w
 12739  120A  00CA               	movwf	(exp@x+2)^(0+256)
 12740  120B  3193  2351  3191   	fcall	_exp
 12741  120E  0022               	movlb	2	; select bank2
 12742  120F  0848               	movf	?_exp^(0+256),w
 12743  1210  00D5               	movwf	pow@x^(0+256)
 12744  1211  0849               	movf	(?_exp+1)^(0+256),w
 12745  1212  00D6               	movwf	(pow@x+1)^(0+256)
 12746  1213  084A               	movf	(?_exp+2)^(0+256),w
 12747  1214  00D7               	movwf	(pow@x+2)^(0+256)
 12748  1215  0862               	movf	pow@sign^(0+256),w
 12749  1216  1903               	btfsc	3,2
 12750  1217  0008               	return
 12751  1218  0855               	movf	pow@x^(0+256),w
 12752  1219  0021               	movlb	1	; select bank1
 12753  121A  00BE               	movwf	___ftneg@f1^(0+128)
 12754  121B  0022               	movlb	2	; select bank2
 12755  121C  0856               	movf	(pow@x+1)^(0+256),w
 12756  121D  0021               	movlb	1	; select bank1
 12757  121E  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12758  121F  0022               	movlb	2	; select bank2
 12759  1220  0857               	movf	(pow@x+2)^(0+256),w
 12760  1221  0021               	movlb	1	; select bank1
 12761  1222  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12762  1223  31AD  2575         	fcall	___ftneg
 12763  1225  0021               	movlb	1	; select bank1
 12764  1226  083E               	movf	?___ftneg^(0+128),w
 12765  1227  0022               	movlb	2	; select bank2
 12766  1228  00D5               	movwf	?_pow^(0+256)
 12767  1229  0021               	movlb	1	; select bank1
 12768  122A  083F               	movf	(?___ftneg+1)^(0+128),w
 12769  122B  0022               	movlb	2	; select bank2
 12770  122C  00D6               	movwf	(?_pow+1)^(0+256)
 12771  122D  0021               	movlb	1	; select bank1
 12772  122E  0840               	movf	(?___ftneg+2)^(0+128),w
 12773  122F  0022               	movlb	2	; select bank2
 12774  1230  00D7               	movwf	(?_pow+2)^(0+256)
 12775  1231  0008               	return
 12776  1232                     __end_of_pow:	
 12777                           
 12778                           	psect	text29
 12779  1F2F                     __ptext29:	
 12780 ;; *************** function _log *****************
 12781 ;; Defined at:
 12782 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12783 ;; Parameters:    Size  Location     Type
 12784 ;;  x               3   30[BANK2 ] unsigned char 
 12785 ;; Auto vars:     Size  Location     Type
 12786 ;;  exponent        2   34[BANK2 ] int 
 12787 ;; Return value:  Size  Location     Type
 12788 ;;                  3   30[BANK2 ] int 
 12789 ;; Registers used:
 12790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12791 ;; Tracked objects:
 12792 ;;		On entry : 0/0
 12793 ;;		On exit  : 0/0
 12794 ;;		Unchanged: 0/0
 12795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12796 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12797 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12798 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12799 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12800 ;;Total ram usage:        6 bytes
 12801 ;; Hardware stack levels used:    1
 12802 ;; Hardware stack levels required when called:    6
 12803 ;; This function calls:
 12804 ;;		___awtoft
 12805 ;;		___ftadd
 12806 ;;		___ftge
 12807 ;;		___ftmul
 12808 ;;		_eval_poly
 12809 ;;		_frexp
 12810 ;; This function is called by:
 12811 ;;		_pow
 12812 ;; This function uses a non-reentrant model
 12813 ;;
 12814                           
 12815                           
 12816                           ;psect for function _log
 12817  1F2F                     _log:	
 12818                           
 12819                           ;incstack = 0
 12820                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12821  1F2F  0022               	movlb	2	; select bank2
 12822  1F30  083E               	movf	log@x^(0+256),w
 12823  1F31  0021               	movlb	1	; select bank1
 12824  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12825  1F33  0022               	movlb	2	; select bank2
 12826  1F34  083F               	movf	(log@x+1)^(0+256),w
 12827  1F35  0021               	movlb	1	; select bank1
 12828  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12829  1F37  0022               	movlb	2	; select bank2
 12830  1F38  0840               	movf	(log@x+2)^(0+256),w
 12831  1F39  0021               	movlb	1	; select bank1
 12832  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12833  1F3B  3000               	movlw	0
 12834  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12835  1F3D  3000               	movlw	0
 12836  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12837  1F3F  3000               	movlw	0
 12838  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12839  1F41  31A1  212A  319F   	fcall	___ftge
 12840  1F44  1803               	btfsc	3,0
 12841  1F45  2F53               	goto	l8241
 12842  1F46  3021               	movlw	33
 12843  1F47  0024               	movlb	4	; select bank4
 12844  1F48  00CD               	movwf	_errno^(0+512)
 12845  1F49  3000               	movlw	0
 12846  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12847  1F4B  3000               	movlw	0
 12848  1F4C  0022               	movlb	2	; select bank2
 12849  1F4D  00BE               	movwf	?_log^(0+256)
 12850  1F4E  3000               	movlw	0
 12851  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12852  1F50  3000               	movlw	0
 12853  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12854  1F52  0008               	return
 12855  1F53                     l8241:	
 12856  1F53  0022               	movlb	2	; select bank2
 12857  1F54  0840               	movf	(log@x+2)^(0+256),w
 12858  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12859  1F56  043E               	iorwf	log@x^(0+256),w
 12860  1F57  1D03               	skipz
 12861  1F58  2F66               	goto	l8247
 12862  1F59  3022               	movlw	34
 12863  1F5A  0024               	movlb	4	; select bank4
 12864  1F5B  00CD               	movwf	_errno^(0+512)
 12865  1F5C  3000               	movlw	0
 12866  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12867  1F5E  3000               	movlw	0
 12868  1F5F  0022               	movlb	2	; select bank2
 12869  1F60  00BE               	movwf	?_log^(0+256)
 12870  1F61  3000               	movlw	0
 12871  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12872  1F63  3000               	movlw	0
 12873  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12874  1F65  0008               	return
 12875  1F66                     l8247:	
 12876  1F66  3000               	movlw	0
 12877  1F67  0021               	movlb	1	; select bank1
 12878  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12879  1F69  3080               	movlw	128
 12880  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12881  1F6B  30BF               	movlw	191
 12882  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12883  1F6D  3000               	movlw	0
 12884  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12885  1F6F  3000               	movlw	0
 12886  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12887  1F71  3040               	movlw	64
 12888  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12889  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12890  1F74  0022               	movlb	2	; select bank2
 12891  1F75  00C1               	movwf	??_log^(0+256)
 12892  1F76  0841               	movf	??_log^(0+256),w
 12893  1F77  0021               	movlb	1	; select bank1
 12894  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12895  1F79  0022               	movlb	2	; select bank2
 12896  1F7A  083E               	movf	log@x^(0+256),w
 12897  1F7B  0021               	movlb	1	; select bank1
 12898  1F7C  00A0               	movwf	frexp@value^(0+128)
 12899  1F7D  0022               	movlb	2	; select bank2
 12900  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12901  1F7F  0021               	movlb	1	; select bank1
 12902  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12903  1F81  0022               	movlb	2	; select bank2
 12904  1F82  0840               	movf	(log@x+2)^(0+256),w
 12905  1F83  0021               	movlb	1	; select bank1
 12906  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12907  1F85  31A1  21E1  319F   	fcall	_frexp
 12908  1F88  0021               	movlb	1	; select bank1
 12909  1F89  0820               	movf	?_frexp^(0+128),w
 12910  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12911  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12912  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12913  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12914  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12915  1F8F  3187  274C  319F   	fcall	___ftmul
 12916  1F92  0021               	movlb	1	; select bank1
 12917  1F93  082E               	movf	?___ftmul^(0+128),w
 12918  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12919  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12920  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12921  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12922  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12923  1F99  3190  2026  319F   	fcall	___ftadd
 12924  1F9C  0021               	movlb	1	; select bank1
 12925  1F9D  0841               	movf	?___ftadd^(0+128),w
 12926  1F9E  0022               	movlb	2	; select bank2
 12927  1F9F  00BE               	movwf	log@x^(0+256)
 12928  1FA0  0021               	movlb	1	; select bank1
 12929  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12930  1FA2  0022               	movlb	2	; select bank2
 12931  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12932  1FA4  0021               	movlb	1	; select bank1
 12933  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12934  1FA6  0022               	movlb	2	; select bank2
 12935  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12936  1FA8  30FF               	movlw	255
 12937  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12938  1FAA  30FF               	movlw	255
 12939  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12940  1FAC  083E               	movf	log@x^(0+256),w
 12941  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12942  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12943  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12944  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12945  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12946  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12947  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12948  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12949  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12950  1FB6  3008               	movlw	8
 12951  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12952  1FB8  3000               	movlw	0
 12953  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12954  1FBA  31A6  2697  319F   	fcall	_eval_poly
 12955  1FBD  0022               	movlb	2	; select bank2
 12956  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12957  1FBF  00BE               	movwf	log@x^(0+256)
 12958  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12959  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12960  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12961  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12962  1FC4  083E               	movf	log@x^(0+256),w
 12963  1FC5  0021               	movlb	1	; select bank1
 12964  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12965  1FC7  0022               	movlb	2	; select bank2
 12966  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12967  1FC9  0021               	movlb	1	; select bank1
 12968  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12969  1FCB  0022               	movlb	2	; select bank2
 12970  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12971  1FCD  0021               	movlb	1	; select bank1
 12972  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12973  1FCF  3072               	movlw	114
 12974  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12975  1FD1  3031               	movlw	49
 12976  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12977  1FD3  303F               	movlw	63
 12978  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12979  1FD5  0022               	movlb	2	; select bank2
 12980  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12981  1FD7  0021               	movlb	1	; select bank1
 12982  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12983  1FD9  0022               	movlb	2	; select bank2
 12984  1FDA  0842               	movf	log@exponent^(0+256),w
 12985  1FDB  0021               	movlb	1	; select bank1
 12986  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12987  1FDD  31AE  26CF  319F   	fcall	___awtoft
 12988  1FE0  0021               	movlb	1	; select bank1
 12989  1FE1  0828               	movf	?___awtoft^(0+128),w
 12990  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12991  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12992  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12993  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12994  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12995  1FE7  3187  274C  319F   	fcall	___ftmul
 12996  1FEA  0021               	movlb	1	; select bank1
 12997  1FEB  082E               	movf	?___ftmul^(0+128),w
 12998  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12999  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 13000  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13001  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 13002  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13003  1FF1  3190  2026         	fcall	___ftadd
 13004  1FF3  0021               	movlb	1	; select bank1
 13005  1FF4  0841               	movf	?___ftadd^(0+128),w
 13006  1FF5  0022               	movlb	2	; select bank2
 13007  1FF6  00BE               	movwf	?_log^(0+256)
 13008  1FF7  0021               	movlb	1	; select bank1
 13009  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 13010  1FF9  0022               	movlb	2	; select bank2
 13011  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 13012  1FFB  0021               	movlb	1	; select bank1
 13013  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 13014  1FFD  0022               	movlb	2	; select bank2
 13015  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 13016  1FFF  0008               	return
 13017  2000                     __end_of_log:	
 13018                           
 13019                           	psect	text30
 13020  1351                     __ptext30:	
 13021 ;; *************** function _exp *****************
 13022 ;; Defined at:
 13023 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  x               3   40[BANK2 ] int 
 13026 ;; Auto vars:     Size  Location     Type
 13027 ;;  exponent        2   50[BANK2 ] int 
 13028 ;;  sign            1   52[BANK2 ] unsigned char 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  3   40[BANK2 ] unsigned char 
 13031 ;; Registers used:
 13032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13038 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13039 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13040 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13041 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13042 ;;Total ram usage:       13 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    6
 13045 ;; This function calls:
 13046 ;;		___awtoft
 13047 ;;		___ftdiv
 13048 ;;		___ftge
 13049 ;;		___ftmul
 13050 ;;		___ftneg
 13051 ;;		___ftsub
 13052 ;;		___fttol
 13053 ;;		_eval_poly
 13054 ;;		_floor
 13055 ;;		_ldexp
 13056 ;; This function is called by:
 13057 ;;		_pow
 13058 ;; This function uses a non-reentrant model
 13059 ;;
 13060                           
 13061                           
 13062                           ;psect for function _exp
 13063  1351                     _exp:	
 13064                           
 13065                           ;incstack = 0
 13066                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13067  1351  0022               	movlb	2	; select bank2
 13068  1352  084A               	movf	(exp@x+2)^(0+256),w
 13069  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 13070  1354  0448               	iorwf	exp@x^(0+256),w
 13071  1355  1D03               	skipz
 13072  1356  2B5E               	goto	l8263
 13073  1357  3000               	movlw	0
 13074  1358  00C8               	movwf	?_exp^(0+256)
 13075  1359  3080               	movlw	128
 13076  135A  00C9               	movwf	(?_exp+1)^(0+256)
 13077  135B  303F               	movlw	63
 13078  135C  00CA               	movwf	(?_exp+2)^(0+256)
 13079  135D  0008               	return
 13080  135E                     l8263:	
 13081  135E  3072               	movlw	114
 13082  135F  0021               	movlb	1	; select bank1
 13083  1360  00A0               	movwf	___ftge@ff1^(0+128)
 13084  1361  3031               	movlw	49
 13085  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13086  1363  3044               	movlw	68
 13087  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13088  1365  0022               	movlb	2	; select bank2
 13089  1366  0848               	movf	exp@x^(0+256),w
 13090  1367  0021               	movlb	1	; select bank1
 13091  1368  00A3               	movwf	___ftge@ff2^(0+128)
 13092  1369  0022               	movlb	2	; select bank2
 13093  136A  0849               	movf	(exp@x+1)^(0+256),w
 13094  136B  0021               	movlb	1	; select bank1
 13095  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13096  136D  0022               	movlb	2	; select bank2
 13097  136E  084A               	movf	(exp@x+2)^(0+256),w
 13098  136F  0021               	movlb	1	; select bank1
 13099  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13100  1371  31A1  212A  3193   	fcall	___ftge
 13101  1374  1803               	btfsc	3,0
 13102  1375  2B83               	goto	l8273
 13103  1376  3022               	movlw	34
 13104  1377  0024               	movlb	4	; select bank4
 13105  1378  00CD               	movwf	_errno^(0+512)
 13106  1379  3000               	movlw	0
 13107  137A  00CE               	movwf	(_errno^(0+512)+1)
 13108  137B  30FF               	movlw	255
 13109  137C  0022               	movlb	2	; select bank2
 13110  137D  00C8               	movwf	?_exp^(0+256)
 13111  137E  307F               	movlw	127
 13112  137F  00C9               	movwf	(?_exp+1)^(0+256)
 13113  1380  307F               	movlw	127
 13114  1381  00CA               	movwf	(?_exp+2)^(0+256)
 13115  1382  0008               	return
 13116  1383                     l8273:	
 13117  1383  0022               	movlb	2	; select bank2
 13118  1384  0848               	movf	exp@x^(0+256),w
 13119  1385  0021               	movlb	1	; select bank1
 13120  1386  00A0               	movwf	___ftge@ff1^(0+128)
 13121  1387  0022               	movlb	2	; select bank2
 13122  1388  0849               	movf	(exp@x+1)^(0+256),w
 13123  1389  0021               	movlb	1	; select bank1
 13124  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13125  138B  0022               	movlb	2	; select bank2
 13126  138C  084A               	movf	(exp@x+2)^(0+256),w
 13127  138D  0021               	movlb	1	; select bank1
 13128  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13129  138F  3049               	movlw	73
 13130  1390  00A3               	movwf	___ftge@ff2^(0+128)
 13131  1391  303A               	movlw	58
 13132  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13133  1393  30C4               	movlw	196
 13134  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13135  1395  31A1  212A  3193   	fcall	___ftge
 13136  1398  1803               	btfsc	3,0
 13137  1399  2BA7               	goto	l8279
 13138  139A  3022               	movlw	34
 13139  139B  0024               	movlb	4	; select bank4
 13140  139C  00CD               	movwf	_errno^(0+512)
 13141  139D  3000               	movlw	0
 13142  139E  00CE               	movwf	(_errno^(0+512)+1)
 13143  139F  3000               	movlw	0
 13144  13A0  0022               	movlb	2	; select bank2
 13145  13A1  00C8               	movwf	?_exp^(0+256)
 13146  13A2  3000               	movlw	0
 13147  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 13148  13A4  3000               	movlw	0
 13149  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 13150  13A6  0008               	return
 13151  13A7                     l8279:	
 13152  13A7  0022               	movlb	2	; select bank2
 13153  13A8  0848               	movf	exp@x^(0+256),w
 13154  13A9  0021               	movlb	1	; select bank1
 13155  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 13156  13AB  0022               	movlb	2	; select bank2
 13157  13AC  0849               	movf	(exp@x+1)^(0+256),w
 13158  13AD  0021               	movlb	1	; select bank1
 13159  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13160  13AF  0022               	movlb	2	; select bank2
 13161  13B0  084A               	movf	(exp@x+2)^(0+256),w
 13162  13B1  0021               	movlb	1	; select bank1
 13163  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13164  13B3  3000               	movlw	0
 13165  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 13166  13B5  3000               	movlw	0
 13167  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13168  13B7  3000               	movlw	0
 13169  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13170  13B9  31A1  212A  3193   	fcall	___ftge
 13171  13BC  1803               	btfsc	3,0
 13172  13BD  2BC0               	goto	u8710
 13173  13BE  3001               	movlw	1
 13174  13BF  2BC1               	goto	u8720
 13175  13C0                     u8710:	
 13176  13C0  3000               	movlw	0
 13177  13C1                     u8720:	
 13178  13C1  0022               	movlb	2	; select bank2
 13179  13C2  00CB               	movwf	??_exp^(0+256)
 13180  13C3  084B               	movf	??_exp^(0+256),w
 13181  13C4  00D4               	movwf	exp@sign^(0+256)
 13182  13C5  0854               	movf	exp@sign^(0+256),w
 13183  13C6  1903               	btfsc	3,2
 13184  13C7  2BE2               	goto	l8285
 13185  13C8  0848               	movf	exp@x^(0+256),w
 13186  13C9  0021               	movlb	1	; select bank1
 13187  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 13188  13CB  0022               	movlb	2	; select bank2
 13189  13CC  0849               	movf	(exp@x+1)^(0+256),w
 13190  13CD  0021               	movlb	1	; select bank1
 13191  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13192  13CF  0022               	movlb	2	; select bank2
 13193  13D0  084A               	movf	(exp@x+2)^(0+256),w
 13194  13D1  0021               	movlb	1	; select bank1
 13195  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13196  13D3  31AD  2575  3193   	fcall	___ftneg
 13197  13D6  0021               	movlb	1	; select bank1
 13198  13D7  083E               	movf	?___ftneg^(0+128),w
 13199  13D8  0022               	movlb	2	; select bank2
 13200  13D9  00C8               	movwf	exp@x^(0+256)
 13201  13DA  0021               	movlb	1	; select bank1
 13202  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 13203  13DC  0022               	movlb	2	; select bank2
 13204  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 13205  13DE  0021               	movlb	1	; select bank1
 13206  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 13207  13E0  0022               	movlb	2	; select bank2
 13208  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 13209  13E2                     l8285:	
 13210  13E2  30AA               	movlw	170
 13211  13E3  0021               	movlb	1	; select bank1
 13212  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 13213  13E5  30B8               	movlw	184
 13214  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13215  13E7  303F               	movlw	63
 13216  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13217  13E9  0022               	movlb	2	; select bank2
 13218  13EA  0848               	movf	exp@x^(0+256),w
 13219  13EB  0021               	movlb	1	; select bank1
 13220  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 13221  13ED  0022               	movlb	2	; select bank2
 13222  13EE  0849               	movf	(exp@x+1)^(0+256),w
 13223  13EF  0021               	movlb	1	; select bank1
 13224  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13225  13F1  0022               	movlb	2	; select bank2
 13226  13F2  084A               	movf	(exp@x+2)^(0+256),w
 13227  13F3  0021               	movlb	1	; select bank1
 13228  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13229  13F5  3187  274C  3193   	fcall	___ftmul
 13230  13F8  0021               	movlb	1	; select bank1
 13231  13F9  082E               	movf	?___ftmul^(0+128),w
 13232  13FA  0022               	movlb	2	; select bank2
 13233  13FB  00C8               	movwf	exp@x^(0+256)
 13234  13FC  0021               	movlb	1	; select bank1
 13235  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 13236  13FE  0022               	movlb	2	; select bank2
 13237  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 13238  1400  0021               	movlb	1	; select bank1
 13239  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 13240  1402  0022               	movlb	2	; select bank2
 13241  1403  00CA               	movwf	(exp@x+2)^(0+256)
 13242  1404  0848               	movf	exp@x^(0+256),w
 13243  1405  00B6               	movwf	floor@x^(0+256)
 13244  1406  0849               	movf	(exp@x+1)^(0+256),w
 13245  1407  00B7               	movwf	(floor@x+1)^(0+256)
 13246  1408  084A               	movf	(exp@x+2)^(0+256),w
 13247  1409  00B8               	movwf	(floor@x+2)^(0+256)
 13248  140A  319C  2479  3193   	fcall	_floor
 13249  140D  0022               	movlb	2	; select bank2
 13250  140E  0836               	movf	?_floor^(0+256),w
 13251  140F  00CC               	movwf	_exp$2853^(0+256)
 13252  1410  0837               	movf	(?_floor+1)^(0+256),w
 13253  1411  00CD               	movwf	(_exp$2853+1)^(0+256)
 13254  1412  0838               	movf	(?_floor+2)^(0+256),w
 13255  1413  00CE               	movwf	(_exp$2853+2)^(0+256)
 13256  1414  084C               	movf	_exp$2853^(0+256),w
 13257  1415  00A0               	movwf	___fttol@f1^(0+256)
 13258  1416  084D               	movf	(_exp$2853+1)^(0+256),w
 13259  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13260  1418  084E               	movf	(_exp$2853+2)^(0+256),w
 13261  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13262  141A  3199  21B3  3193   	fcall	___fttol
 13263  141D  0022               	movlb	2	; select bank2
 13264  141E  0821               	movf	(?___fttol^(0+256)+1),w
 13265  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 13266  1420  0820               	movf	?___fttol^(0+256),w
 13267  1421  00D2               	movwf	exp@exponent^(0+256)
 13268  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 13269  1423  0021               	movlb	1	; select bank1
 13270  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13271  1425  0022               	movlb	2	; select bank2
 13272  1426  0852               	movf	exp@exponent^(0+256),w
 13273  1427  0021               	movlb	1	; select bank1
 13274  1428  00A8               	movwf	___awtoft@c^(0+128)
 13275  1429  31AE  26CF  3193   	fcall	___awtoft
 13276  142C  0021               	movlb	1	; select bank1
 13277  142D  0828               	movf	?___awtoft^(0+128),w
 13278  142E  0022               	movlb	2	; select bank2
 13279  142F  00BF               	movwf	___ftsub@f2^(0+256)
 13280  1430  0021               	movlb	1	; select bank1
 13281  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 13282  1432  0022               	movlb	2	; select bank2
 13283  1433  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 13284  1434  0021               	movlb	1	; select bank1
 13285  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 13286  1436  0022               	movlb	2	; select bank2
 13287  1437  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 13288  1438  0848               	movf	exp@x^(0+256),w
 13289  1439  00C2               	movwf	___ftsub@f1^(0+256)
 13290  143A  0849               	movf	(exp@x+1)^(0+256),w
 13291  143B  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 13292  143C  084A               	movf	(exp@x+2)^(0+256),w
 13293  143D  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 13294  143E  3188  2000  3193   	fcall	___ftsub
 13295  1441  0022               	movlb	2	; select bank2
 13296  1442  083F               	movf	?___ftsub^(0+256),w
 13297  1443  00C8               	movwf	exp@x^(0+256)
 13298  1444  0840               	movf	(?___ftsub+1)^(0+256),w
 13299  1445  00C9               	movwf	(exp@x+1)^(0+256)
 13300  1446  0841               	movf	(?___ftsub+2)^(0+256),w
 13301  1447  00CA               	movwf	(exp@x+2)^(0+256)
 13302  1448  0848               	movf	exp@x^(0+256),w
 13303  1449  00B4               	movwf	eval_poly@x^(0+256)
 13304  144A  0849               	movf	(exp@x+1)^(0+256),w
 13305  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 13306  144C  084A               	movf	(exp@x+2)^(0+256),w
 13307  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 13308  144E  3000               	movlw	low (exp@coeff| (0+32768))
 13309  144F  00B7               	movwf	eval_poly@d^(0+256)
 13310  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 13311  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 13312  1452  3009               	movlw	9
 13313  1453  00B9               	movwf	eval_poly@n^(0+256)
 13314  1454  3000               	movlw	0
 13315  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 13316  1456  31A6  2697  3193   	fcall	_eval_poly
 13317  1459  0022               	movlb	2	; select bank2
 13318  145A  0834               	movf	?_eval_poly^(0+256),w
 13319  145B  00BE               	movwf	ldexp@value^(0+256)
 13320  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 13321  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 13322  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 13323  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 13324  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 13325  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 13326  1462  0852               	movf	exp@exponent^(0+256),w
 13327  1463  00C1               	movwf	ldexp@newexp^(0+256)
 13328  1464  319B  23E2  3193   	fcall	_ldexp
 13329  1467  0022               	movlb	2	; select bank2
 13330  1468  083E               	movf	?_ldexp^(0+256),w
 13331  1469  00C8               	movwf	exp@x^(0+256)
 13332  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 13333  146B  00C9               	movwf	(exp@x+1)^(0+256)
 13334  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 13335  146D  00CA               	movwf	(exp@x+2)^(0+256)
 13336  146E  0854               	movf	exp@sign^(0+256),w
 13337  146F  1903               	btfsc	3,2
 13338  1470  0008               	return
 13339  1471  30FF               	movlw	255
 13340  1472  00CF               	movwf	_exp$2609^(0+256)
 13341  1473  307F               	movlw	127
 13342  1474  00D0               	movwf	(_exp$2609+1)^(0+256)
 13343  1475  307F               	movlw	127
 13344  1476  00D1               	movwf	(_exp$2609+2)^(0+256)
 13345  1477  084A               	movf	(exp@x+2)^(0+256),w
 13346  1478  0651               	xorwf	(_exp$2609+2)^(0+256),w
 13347  1479  1D03               	skipz
 13348  147A  2C81               	goto	u8755
 13349  147B  0849               	movf	(exp@x+1)^(0+256),w
 13350  147C  0650               	xorwf	(_exp$2609+1)^(0+256),w
 13351  147D  1D03               	skipz
 13352  147E  2C81               	goto	u8755
 13353  147F  0848               	movf	exp@x^(0+256),w
 13354  1480  064F               	xorwf	_exp$2609^(0+256),w
 13355  1481                     u8755:	
 13356  1481  1D03               	skipz
 13357  1482  2C8A               	goto	l8307
 13358  1483  3000               	movlw	0
 13359  1484  00C8               	movwf	?_exp^(0+256)
 13360  1485  3000               	movlw	0
 13361  1486  00C9               	movwf	(?_exp+1)^(0+256)
 13362  1487  3000               	movlw	0
 13363  1488  00CA               	movwf	(?_exp+2)^(0+256)
 13364  1489  0008               	return
 13365  148A                     l8307:	
 13366  148A  0848               	movf	exp@x^(0+256),w
 13367  148B  0021               	movlb	1	; select bank1
 13368  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 13369  148D  0022               	movlb	2	; select bank2
 13370  148E  0849               	movf	(exp@x+1)^(0+256),w
 13371  148F  0021               	movlb	1	; select bank1
 13372  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13373  1491  0022               	movlb	2	; select bank2
 13374  1492  084A               	movf	(exp@x+2)^(0+256),w
 13375  1493  0021               	movlb	1	; select bank1
 13376  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13377  1495  3000               	movlw	0
 13378  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 13379  1497  3080               	movlw	128
 13380  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13381  1499  303F               	movlw	63
 13382  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13383  149B  319D  2520         	fcall	___ftdiv
 13384  149D  0021               	movlb	1	; select bank1
 13385  149E  084E               	movf	?___ftdiv^(0+128),w
 13386  149F  0022               	movlb	2	; select bank2
 13387  14A0  00C8               	movwf	?_exp^(0+256)
 13388  14A1  0021               	movlb	1	; select bank1
 13389  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 13390  14A3  0022               	movlb	2	; select bank2
 13391  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 13392  14A5  0021               	movlb	1	; select bank1
 13393  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 13394  14A7  0022               	movlb	2	; select bank2
 13395  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 13396  14A9  0008               	return
 13397  14AA                     __end_of_exp:	
 13398                           
 13399                           	psect	text31
 13400  1BE2                     __ptext31:	
 13401 ;; *************** function _ldexp *****************
 13402 ;; Defined at:
 13403 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;  value           3   30[BANK2 ] unsigned char 
 13406 ;;  newexp          2   33[BANK2 ] int 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;		None
 13409 ;; Return value:  Size  Location     Type
 13410 ;;                  3   30[BANK2 ] int 
 13411 ;; Registers used:
 13412 ;;		wreg, status,2, status,0, pclath, cstack
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13418 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13419 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13420 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13421 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13422 ;;Total ram usage:       10 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; Hardware stack levels required when called:    4
 13425 ;; This function calls:
 13426 ;;		___ftge
 13427 ;;		___ftneg
 13428 ;; This function is called by:
 13429 ;;		_exp
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           
 13434                           ;psect for function _ldexp
 13435  1BE2                     _ldexp:	
 13436                           
 13437                           ;incstack = 0
 13438                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 13439  1BE2  0022               	movlb	2	; select bank2
 13440  1BE3  0840               	movf	(ldexp@value+2)^(0+256),w
 13441  1BE4  043F               	iorwf	(ldexp@value+1)^(0+256),w
 13442  1BE5  043E               	iorwf	ldexp@value^(0+256),w
 13443  1BE6  1D03               	skipz
 13444  1BE7  2BEF               	goto	l8111
 13445  1BE8  3000               	movlw	0
 13446  1BE9  00BE               	movwf	?_ldexp^(0+256)
 13447  1BEA  3000               	movlw	0
 13448  1BEB  00BF               	movwf	(?_ldexp+1)^(0+256)
 13449  1BEC  3000               	movlw	0
 13450  1BED  00C0               	movwf	(?_ldexp+2)^(0+256)
 13451  1BEE  0008               	return
 13452  1BEF                     l8111:	
 13453  1BEF  0840               	movf	(ldexp@value^(0+256)+2),w
 13454  1BF0  397F               	andlw	127
 13455  1BF1  00C3               	movwf	??_ldexp^(0+256)
 13456  1BF2  01C4               	clrf	(??_ldexp^(0+256)+1)
 13457  1BF3  35C3               	lslf	??_ldexp^(0+256),f
 13458  1BF4  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 13459  1BF5  0843               	movf	??_ldexp^(0+256),w
 13460  1BF6  07C1               	addwf	ldexp@newexp^(0+256),f
 13461  1BF7  0844               	movf	(??_ldexp+1)^(0+256),w
 13462  1BF8  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13463  1BF9  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13464  1BFA  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 13465  1BFB  3901               	andlw	1
 13466  1BFC  00C3               	movwf	??_ldexp^(0+256)
 13467  1BFD  01C4               	clrf	(??_ldexp^(0+256)+1)
 13468  1BFE  0843               	movf	??_ldexp^(0+256),w
 13469  1BFF  07C1               	addwf	ldexp@newexp^(0+256),f
 13470  1C00  0844               	movf	(??_ldexp+1)^(0+256),w
 13471  1C01  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 13472  1C02  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 13473  1C03  2C11               	goto	l8121
 13474  1C04  3022               	movlw	34
 13475  1C05  0024               	movlb	4	; select bank4
 13476  1C06  00CD               	movwf	_errno^(0+512)
 13477  1C07  3000               	movlw	0
 13478  1C08  00CE               	movwf	(_errno^(0+512)+1)
 13479  1C09  3000               	movlw	0
 13480  1C0A  0022               	movlb	2	; select bank2
 13481  1C0B  00BE               	movwf	?_ldexp^(0+256)
 13482  1C0C  3000               	movlw	0
 13483  1C0D  00BF               	movwf	(?_ldexp+1)^(0+256)
 13484  1C0E  3000               	movlw	0
 13485  1C0F  00C0               	movwf	(?_ldexp+2)^(0+256)
 13486  1C10  0008               	return
 13487  1C11                     l8121:	
 13488  1C11  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13489  1C12  3A80               	xorlw	128
 13490  1C13  00C3               	movwf	??_ldexp^(0+256)
 13491  1C14  3081               	movlw	129
 13492  1C15  0243               	subwf	??_ldexp^(0+256),w
 13493  1C16  1D03               	skipz
 13494  1C17  2C1A               	goto	u8585
 13495  1C18  3000               	movlw	0
 13496  1C19  0241               	subwf	ldexp@newexp^(0+256),w
 13497  1C1A                     u8585:	
 13498  1C1A  1C03               	skipc
 13499  1C1B  2C61               	goto	l8145
 13500  1C1C  3022               	movlw	34
 13501  1C1D  0024               	movlb	4	; select bank4
 13502  1C1E  00CD               	movwf	_errno^(0+512)
 13503  1C1F  3000               	movlw	0
 13504  1C20  00CE               	movwf	(_errno^(0+512)+1)
 13505  1C21  0022               	movlb	2	; select bank2
 13506  1C22  083E               	movf	ldexp@value^(0+256),w
 13507  1C23  0021               	movlb	1	; select bank1
 13508  1C24  00A0               	movwf	___ftge@ff1^(0+128)
 13509  1C25  0022               	movlb	2	; select bank2
 13510  1C26  083F               	movf	(ldexp@value+1)^(0+256),w
 13511  1C27  0021               	movlb	1	; select bank1
 13512  1C28  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 13513  1C29  0022               	movlb	2	; select bank2
 13514  1C2A  0840               	movf	(ldexp@value+2)^(0+256),w
 13515  1C2B  0021               	movlb	1	; select bank1
 13516  1C2C  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 13517  1C2D  3000               	movlw	0
 13518  1C2E  00A3               	movwf	___ftge@ff2^(0+128)
 13519  1C2F  3000               	movlw	0
 13520  1C30  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 13521  1C31  3000               	movlw	0
 13522  1C32  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 13523  1C33  31A1  212A  319B   	fcall	___ftge
 13524  1C36  1803               	btfsc	3,0
 13525  1C37  2C59               	goto	l8141
 13526  1C38  30FF               	movlw	255
 13527  1C39  0022               	movlb	2	; select bank2
 13528  1C3A  00C5               	movwf	_ldexp$2641^(0+256)
 13529  1C3B  307F               	movlw	127
 13530  1C3C  00C6               	movwf	(_ldexp$2641+1)^(0+256)
 13531  1C3D  307F               	movlw	127
 13532  1C3E  00C7               	movwf	(_ldexp$2641+2)^(0+256)
 13533  1C3F  0845               	movf	_ldexp$2641^(0+256),w
 13534  1C40  0021               	movlb	1	; select bank1
 13535  1C41  00BE               	movwf	___ftneg@f1^(0+128)
 13536  1C42  0022               	movlb	2	; select bank2
 13537  1C43  0846               	movf	(_ldexp$2641+1)^(0+256),w
 13538  1C44  0021               	movlb	1	; select bank1
 13539  1C45  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13540  1C46  0022               	movlb	2	; select bank2
 13541  1C47  0847               	movf	(_ldexp$2641+2)^(0+256),w
 13542  1C48  0021               	movlb	1	; select bank1
 13543  1C49  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13544  1C4A  31AD  2575         	fcall	___ftneg
 13545  1C4C  0021               	movlb	1	; select bank1
 13546  1C4D  083E               	movf	?___ftneg^(0+128),w
 13547  1C4E  0022               	movlb	2	; select bank2
 13548  1C4F  00BE               	movwf	?_ldexp^(0+256)
 13549  1C50  0021               	movlb	1	; select bank1
 13550  1C51  083F               	movf	(?___ftneg+1)^(0+128),w
 13551  1C52  0022               	movlb	2	; select bank2
 13552  1C53  00BF               	movwf	(?_ldexp+1)^(0+256)
 13553  1C54  0021               	movlb	1	; select bank1
 13554  1C55  0840               	movf	(?___ftneg+2)^(0+128),w
 13555  1C56  0022               	movlb	2	; select bank2
 13556  1C57  00C0               	movwf	(?_ldexp+2)^(0+256)
 13557  1C58  0008               	return
 13558  1C59                     l8141:	
 13559  1C59  30FF               	movlw	255
 13560  1C5A  0022               	movlb	2	; select bank2
 13561  1C5B  00BE               	movwf	?_ldexp^(0+256)
 13562  1C5C  307F               	movlw	127
 13563  1C5D  00BF               	movwf	(?_ldexp+1)^(0+256)
 13564  1C5E  307F               	movlw	127
 13565  1C5F  00C0               	movwf	(?_ldexp+2)^(0+256)
 13566  1C60  0008               	return
 13567  1C61                     l8145:	
 13568  1C61  0022               	movlb	2	; select bank2
 13569  1C62  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13570  1C63  00C4               	movwf	(??_ldexp^(0+256)+1)
 13571  1C64  0841               	movf	ldexp@newexp^(0+256),w
 13572  1C65  00C3               	movwf	??_ldexp^(0+256)
 13573  1C66  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13574  1C67  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13575  1C68  0CC3               	rrf	??_ldexp^(0+256),f
 13576  1C69  0840               	movf	(ldexp@value^(0+256)+2),w
 13577  1C6A  0643               	xorwf	??_ldexp^(0+256),w
 13578  1C6B  3980               	andlw	-128
 13579  1C6C  0643               	xorwf	??_ldexp^(0+256),w
 13580  1C6D  00C0               	movwf	(ldexp@value^(0+256)+2)
 13581  1C6E  0841               	movf	ldexp@newexp^(0+256),w
 13582  1C6F  3901               	andlw	1
 13583  1C70  00C3               	movwf	??_ldexp^(0+256)
 13584  1C71  0CC3               	rrf	??_ldexp^(0+256),f
 13585  1C72  0CC3               	rrf	??_ldexp^(0+256),f
 13586  1C73  083F               	movf	(ldexp@value^(0+256)+1),w
 13587  1C74  0643               	xorwf	??_ldexp^(0+256),w
 13588  1C75  397F               	andlw	-129
 13589  1C76  0643               	xorwf	??_ldexp^(0+256),w
 13590  1C77  00BF               	movwf	(ldexp@value^(0+256)+1)
 13591  1C78  0008               	return
 13592  1C79                     __end_of_ldexp:	
 13593                           
 13594                           	psect	text32
 13595  1800                     __ptext32:	
 13596 ;; *************** function ___lltoft *****************
 13597 ;; Defined at:
 13598 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;  c               4    8[BANK1 ] unsigned long 
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  exp             1   13[BANK1 ] unsigned char 
 13603 ;; Return value:  Size  Location     Type
 13604 ;;                  3    8[BANK1 ] float 
 13605 ;; Registers used:
 13606 ;;		wreg, status,2, status,0, pclath, cstack
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13612 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13613 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13614 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13615 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13616 ;;Total ram usage:        6 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    4
 13619 ;; This function calls:
 13620 ;;		___ftpack
 13621 ;; This function is called by:
 13622 ;;		_pow
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function ___lltoft
 13628  1800                     ___lltoft:	
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13632  1800  308E               	movlw	142
 13633  1801  0021               	movlb	1	; select bank1
 13634  1802  00AC               	movwf	??___lltoft^(0+128)
 13635  1803  082C               	movf	??___lltoft^(0+128),w
 13636  1804  00AD               	movwf	___lltoft@exp^(0+128)
 13637  1805                     l8229:	
 13638  1805  30FF               	movlw	255
 13639  1806  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13640  1807  1903               	btfsc	3,2
 13641  1808  2815               	goto	l8231
 13642  1809  3001               	movlw	1
 13643  180A                     u8645:	
 13644  180A  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13645  180B  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13646  180C  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13647  180D  0CA8               	rrf	___lltoft@c^(0+128),f
 13648  180E  0B89               	decfsz	9,f
 13649  180F  280A               	goto	u8645
 13650  1810  3001               	movlw	1
 13651  1811  00AC               	movwf	??___lltoft^(0+128)
 13652  1812  082C               	movf	??___lltoft^(0+128),w
 13653  1813  07AD               	addwf	___lltoft@exp^(0+128),f
 13654  1814  2805               	goto	l8229
 13655  1815                     l8231:	
 13656  1815  0828               	movf	___lltoft@c^(0+128),w
 13657  1816  00A0               	movwf	___ftpack@arg^(0+128)
 13658  1817  0829               	movf	(___lltoft@c+1)^(0+128),w
 13659  1818  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13660  1819  082A               	movf	(___lltoft@c+2)^(0+128),w
 13661  181A  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13662  181B  082D               	movf	___lltoft@exp^(0+128),w
 13663  181C  00AC               	movwf	??___lltoft^(0+128)
 13664  181D  082C               	movf	??___lltoft^(0+128),w
 13665  181E  00A3               	movwf	___ftpack@exp^(0+128)
 13666  181F  01A4               	clrf	___ftpack@sign^(0+128)
 13667  1820  31A6  2632         	fcall	___ftpack
 13668  1822  0021               	movlb	1	; select bank1
 13669  1823  0820               	movf	?___ftpack^(0+128),w
 13670  1824  00A8               	movwf	?___lltoft^(0+128)
 13671  1825  0821               	movf	(?___ftpack+1)^(0+128),w
 13672  1826  00A9               	movwf	(?___lltoft+1)^(0+128)
 13673  1827  0822               	movf	(?___ftpack+2)^(0+128),w
 13674  1828  00AA               	movwf	(?___lltoft+2)^(0+128)
 13675  1829  0008               	return
 13676  182A                     __end_of___lltoft:	
 13677                           
 13678                           	psect	text33
 13679  2447                     __ptext33:	
 13680 ;; *************** function _read_top_tactile *****************
 13681 ;; Defined at:
 13682 ;;		line 50 in file "tactiles.c"
 13683 ;; Parameters:    Size  Location     Type
 13684 ;;		None
 13685 ;; Auto vars:     Size  Location     Type
 13686 ;;		None
 13687 ;; Return value:  Size  Location     Type
 13688 ;;                  1    wreg      void 
 13689 ;; Registers used:
 13690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13698 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13699 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13700 ;;Total ram usage:        1 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; Hardware stack levels required when called:    5
 13703 ;; This function calls:
 13704 ;;		_set_leds_top
 13705 ;;		_wait_ms
 13706 ;; This function is called by:
 13707 ;;		_main
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           
 13712                           ;psect for function _read_top_tactile
 13713  2447                     _read_top_tactile:	
 13714                           
 13715                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 13716                           
 13717                           ;incstack = 0
 13718                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13719  2447  0020               	movlb	0	; select bank0
 13720  2448  1A8F               	btfsc	15,5	;volatile
 13721  2449  2C50               	goto	l9091
 13722                           
 13723                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 13724  244A  085B               	movf	_topTactile_pressed,w
 13725  244B  1903               	btfsc	3,2
 13726  244C  2C5A               	goto	l968
 13727                           
 13728                           ;tactiles.c: 62: topTactile_pressed--;
 13729  244D  3001               	movlw	1
 13730  244E  02DB               	subwf	_topTactile_pressed,f
 13731                           
 13732                           ;tactiles.c: 63: }
 13733                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 13734  244F  2C5A               	goto	l968
 13735  2450                     l9091:	
 13736  2450  3019               	movlw	25
 13737  2451  025B               	subwf	_topTactile_pressed,w
 13738  2452  1803               	skipnc
 13739  2453  2C5A               	goto	l968
 13740                           
 13741                           ;tactiles.c: 65: topTactile_pressed++;
 13742  2454  3001               	movlw	1
 13743  2455  0021               	movlb	1	; select bank1
 13744  2456  00B2               	movwf	??_read_top_tactile^(0+128)
 13745  2457  0832               	movf	??_read_top_tactile^(0+128),w
 13746  2458  0020               	movlb	0	; select bank0
 13747  2459  07DB               	addwf	_topTactile_pressed,f
 13748  245A                     l968:	
 13749                           
 13750                           ;tactiles.c: 66: }
 13751                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 13752  245A  085B               	movf	_topTactile_pressed,w
 13753  245B  1D03               	btfss	3,2
 13754  245C  0008               	return
 13755                           
 13756                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 13757  245D  0864               	movf	_top_push_state,w
 13758  245E  3E01               	addlw	1
 13759  245F  00E4               	movwf	_top_push_state
 13760  2460  3000               	movlw	0
 13761  2461  3D65               	addwfc	_top_push_state+1,w
 13762  2462  00E5               	movwf	_top_push_state+1
 13763                           
 13764                           ;tactiles.c: 74: if (top_push_state >= 7) {
 13765  2463  0865               	movf	_top_push_state+1,w
 13766  2464  3A80               	xorlw	128
 13767  2465  0021               	movlb	1	; select bank1
 13768  2466  00B2               	movwf	??_read_top_tactile^(0+128)
 13769  2467  3080               	movlw	128
 13770  2468  0232               	subwf	??_read_top_tactile^(0+128),w
 13771  2469  1D03               	skipz
 13772  246A  2C6E               	goto	u10105
 13773  246B  3007               	movlw	7
 13774  246C  0020               	movlb	0	; select bank0
 13775  246D  0264               	subwf	_top_push_state,w
 13776  246E                     u10105:	
 13777  246E  1C03               	skipc
 13778  246F  2C75               	goto	l9101
 13779                           
 13780                           ;tactiles.c: 75: top_push_state = 1;
 13781  2470  3001               	movlw	1
 13782  2471  0020               	movlb	0	; select bank0
 13783  2472  00E4               	movwf	_top_push_state
 13784  2473  3000               	movlw	0
 13785  2474  00E5               	movwf	_top_push_state+1
 13786  2475                     l9101:	
 13787                           
 13788                           ;tactiles.c: 76: }
 13789                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 13790  2475  0020               	movlb	0	; select bank0
 13791  2476  0865               	movf	_top_push_state+1,w
 13792  2477  0021               	movlb	1	; select bank1
 13793  2478  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 13794  2479  0020               	movlb	0	; select bank0
 13795  247A  0864               	movf	_top_push_state,w
 13796  247B  0021               	movlb	1	; select bank1
 13797  247C  00A0               	movwf	set_leds_top@x^(0+128)
 13798  247D  3001               	movlw	1
 13799  247E  00A2               	movwf	set_leds_top@ledState^(0+128)
 13800  247F  3000               	movlw	0
 13801  2480  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 13802  2481  31A5  2585  31A4   	fcall	_set_leds_top
 13803                           
 13804                           ;tactiles.c: 78: mod_time_changed = 1;
 13805  2484  0023               	movlb	3	; select bank3
 13806  2485  01E0               	clrf	_mod_time_changed^(0+384)
 13807  2486  0AE0               	incf	_mod_time_changed^(0+384),f
 13808  2487                     l972:	
 13809                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 13810                           
 13811  2487  0020               	movlb	0	; select bank0
 13812  2488  1E8F               	btfss	15,5	;volatile
 13813  2489  2C87               	goto	l972
 13814                           
 13815                           ;tactiles.c: 82: }
 13816                           ;tactiles.c: 83: wait_ms(20);
 13817  248A  3014               	movlw	20
 13818  248B  0021               	movlb	1	; select bank1
 13819  248C  00AC               	movwf	wait_ms@timeSec^(0+128)
 13820  248D  3000               	movlw	0
 13821  248E  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13822  248F  31A0  2015         	fcall	_wait_ms
 13823  2491  0008               	return
 13824  2492                     __end_of_read_top_tactile:	
 13825                           
 13826                           	psect	text34
 13827  2326                     __ptext34:	
 13828 ;; *************** function _read_bottom_tactile *****************
 13829 ;; Defined at:
 13830 ;;		line 18 in file "tactiles.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;		None
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;		None
 13835 ;; Return value:  Size  Location     Type
 13836 ;;                  1    wreg      void 
 13837 ;; Registers used:
 13838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13839 ;; Tracked objects:
 13840 ;;		On entry : 0/0
 13841 ;;		On exit  : 0/0
 13842 ;;		Unchanged: 0/0
 13843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13846 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13847 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13848 ;;Total ram usage:        1 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    5
 13851 ;; This function calls:
 13852 ;;		_set_leds_bottom
 13853 ;;		_wait_ms
 13854 ;; This function is called by:
 13855 ;;		_main
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           
 13860                           ;psect for function _read_bottom_tactile
 13861  2326                     _read_bottom_tactile:	
 13862                           
 13863                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 13864                           
 13865                           ;incstack = 0
 13866                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13867  2326  0020               	movlb	0	; select bank0
 13868  2327  1B0F               	btfsc	15,6	;volatile
 13869  2328  2B2F               	goto	l9069
 13870                           
 13871                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 13872  2329  084F               	movf	_bottomTactile_pressed,w
 13873  232A  1903               	btfsc	3,2
 13874  232B  2B39               	goto	l956
 13875                           
 13876                           ;tactiles.c: 29: bottomTactile_pressed--;
 13877  232C  3001               	movlw	1
 13878  232D  02CF               	subwf	_bottomTactile_pressed,f
 13879                           
 13880                           ;tactiles.c: 30: }
 13881                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 13882  232E  2B39               	goto	l956
 13883  232F                     l9069:	
 13884  232F  3019               	movlw	25
 13885  2330  024F               	subwf	_bottomTactile_pressed,w
 13886  2331  1803               	skipnc
 13887  2332  2B39               	goto	l956
 13888                           
 13889                           ;tactiles.c: 32: bottomTactile_pressed++;
 13890  2333  3001               	movlw	1
 13891  2334  0021               	movlb	1	; select bank1
 13892  2335  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13893  2336  0832               	movf	??_read_bottom_tactile^(0+128),w
 13894  2337  0020               	movlb	0	; select bank0
 13895  2338  07CF               	addwf	_bottomTactile_pressed,f
 13896  2339                     l956:	
 13897                           
 13898                           ;tactiles.c: 33: }
 13899                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 13900  2339  084F               	movf	_bottomTactile_pressed,w
 13901  233A  1D03               	btfss	3,2
 13902  233B  0008               	return
 13903                           
 13904                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 13905  233C  0860               	movf	_bottom_push_state,w
 13906  233D  3E01               	addlw	1
 13907  233E  00E0               	movwf	_bottom_push_state
 13908  233F  3000               	movlw	0
 13909  2340  3D61               	addwfc	_bottom_push_state+1,w
 13910  2341  00E1               	movwf	_bottom_push_state+1
 13911                           
 13912                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 13913  2342  0861               	movf	_bottom_push_state+1,w
 13914  2343  3A80               	xorlw	128
 13915  2344  0021               	movlb	1	; select bank1
 13916  2345  00B2               	movwf	??_read_bottom_tactile^(0+128)
 13917  2346  3080               	movlw	128
 13918  2347  0232               	subwf	??_read_bottom_tactile^(0+128),w
 13919  2348  1D03               	skipz
 13920  2349  2B4D               	goto	u10045
 13921  234A  3006               	movlw	6
 13922  234B  0020               	movlb	0	; select bank0
 13923  234C  0260               	subwf	_bottom_push_state,w
 13924  234D                     u10045:	
 13925  234D  1C03               	skipc
 13926  234E  2B54               	goto	l9079
 13927                           
 13928                           ;tactiles.c: 39: bottom_push_state = 1;
 13929  234F  3001               	movlw	1
 13930  2350  0020               	movlb	0	; select bank0
 13931  2351  00E0               	movwf	_bottom_push_state
 13932  2352  3000               	movlw	0
 13933  2353  00E1               	movwf	_bottom_push_state+1
 13934  2354                     l9079:	
 13935                           
 13936                           ;tactiles.c: 40: }
 13937                           ;tactiles.c: 41: modulation_changed = 1;
 13938  2354  0020               	movlb	0	; select bank0
 13939  2355  01D6               	clrf	_modulation_changed
 13940  2356  0AD6               	incf	_modulation_changed,f
 13941                           
 13942                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 13943  2357  0861               	movf	_bottom_push_state+1,w
 13944  2358  0021               	movlb	1	; select bank1
 13945  2359  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 13946  235A  0020               	movlb	0	; select bank0
 13947  235B  0860               	movf	_bottom_push_state,w
 13948  235C  0021               	movlb	1	; select bank1
 13949  235D  00A0               	movwf	set_leds_bottom@x^(0+128)
 13950  235E  31A0  20EF  31A3   	fcall	_set_leds_bottom
 13951  2361                     l960:	
 13952                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 13953                           
 13954  2361  0020               	movlb	0	; select bank0
 13955  2362  1F0F               	btfss	15,6	;volatile
 13956  2363  2B61               	goto	l960
 13957                           
 13958                           ;tactiles.c: 45: }
 13959                           ;tactiles.c: 46: wait_ms(20);
 13960  2364  3014               	movlw	20
 13961  2365  0021               	movlb	1	; select bank1
 13962  2366  00AC               	movwf	wait_ms@timeSec^(0+128)
 13963  2367  3000               	movlw	0
 13964  2368  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13965  2369  31A0  2015         	fcall	_wait_ms
 13966  236B  0008               	return
 13967  236C                     __end_of_read_bottom_tactile:	
 13968                           
 13969                           	psect	text35
 13970  1A3A                     __ptext35:	
 13971 ;; *************** function _map *****************
 13972 ;; Defined at:
 13973 ;;		line 177 in file "user.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;  x               3   62[BANK1 ] float 
 13976 ;;  in_min          3   65[BANK1 ] float 
 13977 ;;  in_max          3   68[BANK1 ] float 
 13978 ;;  out_min         3   71[BANK1 ] float 
 13979 ;;  out_max         3   74[BANK1 ] float 
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;		None
 13982 ;; Return value:  Size  Location     Type
 13983 ;;                  3   62[BANK1 ] float 
 13984 ;; Registers used:
 13985 ;;		wreg, status,2, status,0, pclath, cstack
 13986 ;; Tracked objects:
 13987 ;;		On entry : 0/0
 13988 ;;		On exit  : 0/0
 13989 ;;		Unchanged: 0/0
 13990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13991 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13992 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13994 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13995 ;;Total ram usage:       18 bytes
 13996 ;; Hardware stack levels used:    1
 13997 ;; Hardware stack levels required when called:    5
 13998 ;; This function calls:
 13999 ;;		___ftadd
 14000 ;;		___ftdiv
 14001 ;;		___ftmul
 14002 ;;		___ftneg
 14003 ;; This function is called by:
 14004 ;;		_main
 14005 ;; This function uses a non-reentrant model
 14006 ;;
 14007                           
 14008                           
 14009                           ;psect for function _map
 14010  1A3A                     _map:	
 14011                           
 14012                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14013                           
 14014                           ;incstack = 0
 14015                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 14016  1A3A  0021               	movlb	1	; select bank1
 14017  1A3B  0864               	movf	map@in_max^(0+128),w
 14018  1A3C  00C1               	movwf	___ftadd@f1^(0+128)
 14019  1A3D  0865               	movf	(map@in_max+1)^(0+128),w
 14020  1A3E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14021  1A3F  0866               	movf	(map@in_max+2)^(0+128),w
 14022  1A40  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14023  1A41  0861               	movf	map@in_min^(0+128),w
 14024  1A42  00BE               	movwf	___ftneg@f1^(0+128)
 14025  1A43  0862               	movf	(map@in_min+1)^(0+128),w
 14026  1A44  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14027  1A45  0863               	movf	(map@in_min+2)^(0+128),w
 14028  1A46  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14029  1A47  31AD  2575  319A   	fcall	___ftneg
 14030  1A4A  0021               	movlb	1	; select bank1
 14031  1A4B  083E               	movf	?___ftneg^(0+128),w
 14032  1A4C  00C4               	movwf	___ftadd@f2^(0+128)
 14033  1A4D  083F               	movf	(?___ftneg+1)^(0+128),w
 14034  1A4E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14035  1A4F  0840               	movf	(?___ftneg+2)^(0+128),w
 14036  1A50  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14037  1A51  3190  2026  319A   	fcall	___ftadd
 14038  1A54  0021               	movlb	1	; select bank1
 14039  1A55  0841               	movf	?___ftadd^(0+128),w
 14040  1A56  00CE               	movwf	___ftdiv@f2^(0+128)
 14041  1A57  0842               	movf	(?___ftadd+1)^(0+128),w
 14042  1A58  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14043  1A59  0843               	movf	(?___ftadd+2)^(0+128),w
 14044  1A5A  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14045  1A5B  086A               	movf	map@out_max^(0+128),w
 14046  1A5C  00C1               	movwf	___ftadd@f1^(0+128)
 14047  1A5D  086B               	movf	(map@out_max+1)^(0+128),w
 14048  1A5E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14049  1A5F  086C               	movf	(map@out_max+2)^(0+128),w
 14050  1A60  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14051  1A61  0867               	movf	map@out_min^(0+128),w
 14052  1A62  00BE               	movwf	___ftneg@f1^(0+128)
 14053  1A63  0868               	movf	(map@out_min+1)^(0+128),w
 14054  1A64  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14055  1A65  0869               	movf	(map@out_min+2)^(0+128),w
 14056  1A66  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14057  1A67  31AD  2575  319A   	fcall	___ftneg
 14058  1A6A  0021               	movlb	1	; select bank1
 14059  1A6B  083E               	movf	?___ftneg^(0+128),w
 14060  1A6C  00C4               	movwf	___ftadd@f2^(0+128)
 14061  1A6D  083F               	movf	(?___ftneg+1)^(0+128),w
 14062  1A6E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14063  1A6F  0840               	movf	(?___ftneg+2)^(0+128),w
 14064  1A70  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14065  1A71  3190  2026  319A   	fcall	___ftadd
 14066  1A74  0021               	movlb	1	; select bank1
 14067  1A75  0841               	movf	?___ftadd^(0+128),w
 14068  1A76  00AE               	movwf	___ftmul@f1^(0+128)
 14069  1A77  0842               	movf	(?___ftadd+1)^(0+128),w
 14070  1A78  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14071  1A79  0843               	movf	(?___ftadd+2)^(0+128),w
 14072  1A7A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14073  1A7B  085E               	movf	map@x^(0+128),w
 14074  1A7C  00C1               	movwf	___ftadd@f1^(0+128)
 14075  1A7D  085F               	movf	(map@x+1)^(0+128),w
 14076  1A7E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14077  1A7F  0860               	movf	(map@x+2)^(0+128),w
 14078  1A80  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14079  1A81  0861               	movf	map@in_min^(0+128),w
 14080  1A82  00BE               	movwf	___ftneg@f1^(0+128)
 14081  1A83  0862               	movf	(map@in_min+1)^(0+128),w
 14082  1A84  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14083  1A85  0863               	movf	(map@in_min+2)^(0+128),w
 14084  1A86  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14085  1A87  31AD  2575  319A   	fcall	___ftneg
 14086  1A8A  0021               	movlb	1	; select bank1
 14087  1A8B  083E               	movf	?___ftneg^(0+128),w
 14088  1A8C  00C4               	movwf	___ftadd@f2^(0+128)
 14089  1A8D  083F               	movf	(?___ftneg+1)^(0+128),w
 14090  1A8E  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14091  1A8F  0840               	movf	(?___ftneg+2)^(0+128),w
 14092  1A90  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14093  1A91  3190  2026  319A   	fcall	___ftadd
 14094  1A94  0021               	movlb	1	; select bank1
 14095  1A95  0841               	movf	?___ftadd^(0+128),w
 14096  1A96  00B1               	movwf	___ftmul@f2^(0+128)
 14097  1A97  0842               	movf	(?___ftadd+1)^(0+128),w
 14098  1A98  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14099  1A99  0843               	movf	(?___ftadd+2)^(0+128),w
 14100  1A9A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14101  1A9B  3187  274C  319A   	fcall	___ftmul
 14102  1A9E  0021               	movlb	1	; select bank1
 14103  1A9F  082E               	movf	?___ftmul^(0+128),w
 14104  1AA0  00D1               	movwf	___ftdiv@f1^(0+128)
 14105  1AA1  082F               	movf	(?___ftmul+1)^(0+128),w
 14106  1AA2  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14107  1AA3  0830               	movf	(?___ftmul+2)^(0+128),w
 14108  1AA4  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14109  1AA5  319D  2520  319A   	fcall	___ftdiv
 14110  1AA8  0021               	movlb	1	; select bank1
 14111  1AA9  084E               	movf	?___ftdiv^(0+128),w
 14112  1AAA  00ED               	movwf	_map$2835^(0+128)
 14113  1AAB  084F               	movf	(?___ftdiv+1)^(0+128),w
 14114  1AAC  00EE               	movwf	(_map$2835+1)^(0+128)
 14115  1AAD  0850               	movf	(?___ftdiv+2)^(0+128),w
 14116  1AAE  00EF               	movwf	(_map$2835+2)^(0+128)
 14117                           
 14118                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 14119  1AAF  0867               	movf	map@out_min^(0+128),w
 14120  1AB0  00C1               	movwf	___ftadd@f1^(0+128)
 14121  1AB1  0868               	movf	(map@out_min+1)^(0+128),w
 14122  1AB2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14123  1AB3  0869               	movf	(map@out_min+2)^(0+128),w
 14124  1AB4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14125  1AB5  086D               	movf	_map$2835^(0+128),w
 14126  1AB6  00C4               	movwf	___ftadd@f2^(0+128)
 14127  1AB7  086E               	movf	(_map$2835+1)^(0+128),w
 14128  1AB8  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14129  1AB9  086F               	movf	(_map$2835+2)^(0+128),w
 14130  1ABA  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14131  1ABB  3190  2026         	fcall	___ftadd
 14132  1ABD  0021               	movlb	1	; select bank1
 14133  1ABE  0841               	movf	?___ftadd^(0+128),w
 14134  1ABF  00DE               	movwf	?_map^(0+128)
 14135  1AC0  0842               	movf	(?___ftadd+1)^(0+128),w
 14136  1AC1  00DF               	movwf	(?_map+1)^(0+128)
 14137  1AC2  0843               	movf	(?___ftadd+2)^(0+128),w
 14138  1AC3  00E0               	movwf	(?_map+2)^(0+128)
 14139  1AC4  0008               	return
 14140  1AC5                     __end_of_map:	
 14141                           
 14142                           	psect	text36
 14143  2DA0                     __ptext36:	
 14144 ;; *************** function _initSwitchBypass *****************
 14145 ;; Defined at:
 14146 ;;		line 29 in file "SwitchBypass.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;		None
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  initState       2   26[BANK1 ] int 
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  1    wreg      void 
 14153 ;; Registers used:
 14154 ;;		wreg, status,2, status,0, pclath, cstack
 14155 ;; Tracked objects:
 14156 ;;		On entry : 0/0
 14157 ;;		On exit  : 0/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14161 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14163 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14164 ;;Total ram usage:        2 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    7
 14167 ;; This function calls:
 14168 ;;		_getSwitchBypassState
 14169 ;;		_setSwitchBypassState
 14170 ;; This function is called by:
 14171 ;;		_main
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           
 14176                           ;psect for function _initSwitchBypass
 14177  2DA0                     _initSwitchBypass:	
 14178                           
 14179                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 14180                           
 14181                           ;incstack = 0
 14182                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 14183  2DA0  31AD  2561  31AD   	fcall	_getSwitchBypassState
 14184  2DA3  0021               	movlb	1	; select bank1
 14185  2DA4  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 14186  2DA5  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 14187  2DA6  0820               	movf	?_getSwitchBypassState^(0+128),w
 14188  2DA7  00BA               	movwf	initSwitchBypass@initState^(0+128)
 14189                           
 14190                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 14191  2DA8  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 14192  2DA9  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 14193  2DAA  083A               	movf	initSwitchBypass@initState^(0+128),w
 14194  2DAB  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 14195  2DAC  31AE  263A         	fcall	_setSwitchBypassState
 14196  2DAE  0008               	return
 14197  2DAF                     __end_of_initSwitchBypass:	
 14198                           
 14199                           	psect	text37
 14200  2E3A                     __ptext37:	
 14201 ;; *************** function _setSwitchBypassState *****************
 14202 ;; Defined at:
 14203 ;;		line 140 in file "SwitchBypass.c"
 14204 ;; Parameters:    Size  Location     Type
 14205 ;;  f_state         2   22[BANK1 ] int 
 14206 ;; Auto vars:     Size  Location     Type
 14207 ;;		None
 14208 ;; Return value:  Size  Location     Type
 14209 ;;                  1    wreg      void 
 14210 ;; Registers used:
 14211 ;;		wreg, status,2, status,0, pclath, cstack
 14212 ;; Tracked objects:
 14213 ;;		On entry : 0/0
 14214 ;;		On exit  : 0/0
 14215 ;;		Unchanged: 0/0
 14216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14217 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14219 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14220 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14221 ;;Total ram usage:        4 bytes
 14222 ;; Hardware stack levels used:    1
 14223 ;; Hardware stack levels required when called:    6
 14224 ;; This function calls:
 14225 ;;		_setSwitchBypassRelays
 14226 ;; This function is called by:
 14227 ;;		_initSwitchBypass
 14228 ;;		_updateSwitchBypass
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function _setSwitchBypassState
 14234  2E3A                     _setSwitchBypassState:	
 14235                           
 14236                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 14237                           
 14238                           ;incstack = 0
 14239                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 14240  2E3A  0020               	movlb	0	; select bank0
 14241  2E3B  086B               	movf	_switchBypass_state,w
 14242  2E3C  0021               	movlb	1	; select bank1
 14243  2E3D  00B8               	movwf	??_setSwitchBypassState^(0+128)
 14244  2E3E  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 14245  2E3F  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14246  2E40  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 14247  2E41  1D03               	skipz
 14248  2E42  2E45               	goto	u8865
 14249  2E43  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14250  2E44  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 14251  2E45                     u8865:	
 14252  2E45  1903               	btfsc	3,2
 14253  2E46  0008               	return
 14254                           
 14255                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 14256  2E47  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 14257  2E48  0022               	movlb	2	; select bank2
 14258  2E49  1C03               	skipc
 14259  2E4A  110D               	bcf	13,2	;volatile
 14260  2E4B  1803               	skipnc
 14261  2E4C  150D               	bsf	13,2	;volatile
 14262                           
 14263                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 14264  2E4D  118D               	bcf	13,3	;volatile
 14265                           
 14266                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 14267  2E4E  0021               	movlb	1	; select bank1
 14268  2E4F  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 14269  2E50  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 14270  2E51  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 14271  2E52  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 14272  2E53  31A0  2047         	fcall	_setSwitchBypassRelays
 14273  2E55  0008               	return
 14274  2E56                     __end_of_setSwitchBypassState:	
 14275                           
 14276                           	psect	text38
 14277  2047                     __ptext38:	
 14278 ;; *************** function _setSwitchBypassRelays *****************
 14279 ;; Defined at:
 14280 ;;		line 148 in file "SwitchBypass.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;  f_state         2   18[BANK1 ] int 
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;		None
 14285 ;; Return value:  Size  Location     Type
 14286 ;;                  1    wreg      void 
 14287 ;; Registers used:
 14288 ;;		wreg, status,2, status,0, pclath, cstack
 14289 ;; Tracked objects:
 14290 ;;		On entry : 0/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14294 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14296 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14297 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14298 ;;Total ram usage:        4 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; Hardware stack levels required when called:    5
 14301 ;; This function calls:
 14302 ;;		_updateSwitchBypassState
 14303 ;;		_wait_ms
 14304 ;; This function is called by:
 14305 ;;		_updateSwitchBypass
 14306 ;;		_setSwitchBypassState
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           
 14311                           ;psect for function _setSwitchBypassRelays
 14312  2047                     _setSwitchBypassRelays:	
 14313                           
 14314                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 14315                           
 14316                           ;incstack = 0
 14317                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 14318  2047  0021               	movlb	1	; select bank1
 14319  2048  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14320  2049  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14321  204A  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14322  204B  0020               	movlb	0	; select bank0
 14323  204C  00EB               	movwf	_switchBypass_state
 14324                           
 14325                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 14326  204D  0021               	movlb	1	; select bank1
 14327  204E  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 14328  204F  0027               	movlb	7	; select bank7
 14329  2050  1C03               	skipc
 14330  2051  110D               	bcf	13,2	;volatile
 14331  2052  1803               	skipnc
 14332  2053  150D               	bsf	13,2	;volatile
 14333                           
 14334                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 14335  2054  0021               	movlb	1	; select bank1
 14336  2055  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 14337  2056  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 14338  2057  1D03               	btfss	3,2
 14339  2058  285C               	goto	u8600
 14340  2059  0027               	movlb	7	; select bank7
 14341  205A  148D               	bsf	13,1	;volatile
 14342  205B  285E               	goto	l8189
 14343  205C                     u8600:	
 14344  205C  0027               	movlb	7	; select bank7
 14345  205D  108D               	bcf	13,1	;volatile
 14346  205E                     l8189:	
 14347                           
 14348                           ;SwitchBypass.c: 153: wait_ms(20);
 14349  205E  3014               	movlw	20
 14350  205F  0021               	movlb	1	; select bank1
 14351  2060  00AC               	movwf	wait_ms@timeSec^(0+128)
 14352  2061  3000               	movlw	0
 14353  2062  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14354  2063  31A0  2015  31A0   	fcall	_wait_ms
 14355                           
 14356                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 14357  2066  0027               	movlb	7	; select bank7
 14358  2067  110D               	bcf	13,2	;volatile
 14359                           
 14360                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 14361  2068  108D               	bcf	13,1	;volatile
 14362                           
 14363                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 14364  2069  0020               	movlb	0	; select bank0
 14365  206A  086B               	movf	_switchBypass_state,w
 14366  206B  0021               	movlb	1	; select bank1
 14367  206C  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 14368  206D  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 14369  206E  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 14370  206F  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 14371  2070  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 14372  2071  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 14373  2072  31AD  255C  31A0   	fcall	_updateSwitchBypassState
 14374                           
 14375                           ;SwitchBypass.c: 159: wait_ms(20);
 14376  2075  3014               	movlw	20
 14377  2076  0021               	movlb	1	; select bank1
 14378  2077  00AC               	movwf	wait_ms@timeSec^(0+128)
 14379  2078  3000               	movlw	0
 14380  2079  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 14381  207A  31A0  2015         	fcall	_wait_ms
 14382  207C  0008               	return
 14383  207D                     __end_of_setSwitchBypassRelays:	
 14384                           
 14385                           	psect	text39
 14386  2015                     __ptext39:	
 14387 ;; *************** function _wait_ms *****************
 14388 ;; Defined at:
 14389 ;;		line 23 in file "system.c"
 14390 ;; Parameters:    Size  Location     Type
 14391 ;;  timeSec         2   12[BANK1 ] unsigned int 
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;  timemsl         4   14[BANK1 ] long 
 14394 ;; Return value:  Size  Location     Type
 14395 ;;                  1    wreg      void 
 14396 ;; Registers used:
 14397 ;;		wreg, status,2, status,0, pclath, cstack
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14403 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14404 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14406 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14407 ;;Total ram usage:        6 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    4
 14410 ;; This function calls:
 14411 ;;		___lmul
 14412 ;; This function is called by:
 14413 ;;		_ring_tactiles
 14414 ;;		_solidring_tactiles
 14415 ;;		_read_bottom_tactile
 14416 ;;		_read_top_tactile
 14417 ;;		_setSwitchBypassRelays
 14418 ;;		_setDoublePressState
 14419 ;;		_showError_Alternating
 14420 ;;		_show_error
 14421 ;;		_show_cancel
 14422 ;;		_star_tactiles
 14423 ;;		_initExpModeState
 14424 ;; This function uses a non-reentrant model
 14425 ;;
 14426                           
 14427                           
 14428                           ;psect for function _wait_ms
 14429  2015                     _wait_ms:	
 14430                           
 14431                           ;system.c: 25: long timemsl = 0;
 14432                           
 14433                           ;incstack = 0
 14434                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 14435  2015  3000               	movlw	0
 14436  2016  0021               	movlb	1	; select bank1
 14437  2017  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14438  2018  3000               	movlw	0
 14439  2019  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14440  201A  3000               	movlw	0
 14441  201B  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14442  201C  3000               	movlw	0
 14443  201D  00AE               	movwf	wait_ms@timemsl^(0+128)
 14444                           
 14445                           ;system.c: 26: timemsl = timeSec * 1000l;
 14446  201E  082C               	movf	wait_ms@timeSec^(0+128),w
 14447  201F  00A0               	movwf	___lmul@multiplier^(0+128)
 14448  2020  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 14449  2021  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 14450  2022  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 14451  2023  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 14452  2024  3000               	movlw	0
 14453  2025  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 14454  2026  3000               	movlw	0
 14455  2027  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 14456  2028  3003               	movlw	3
 14457  2029  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 14458  202A  30E8               	movlw	232
 14459  202B  00A4               	movwf	___lmul@multiplicand^(0+128)
 14460  202C  31AF  27D0  31A0   	fcall	___lmul
 14461  202F  0021               	movlb	1	; select bank1
 14462  2030  0823               	movf	(?___lmul+3)^(0+128),w
 14463  2031  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 14464  2032  0822               	movf	(?___lmul+2)^(0+128),w
 14465  2033  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 14466  2034  0821               	movf	(?___lmul+1)^(0+128),w
 14467  2035  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 14468  2036  0820               	movf	?___lmul^(0+128),w
 14469  2037  00AE               	movwf	wait_ms@timemsl^(0+128)
 14470  2038                     l382:	
 14471                           ;system.c: 27: for( ; timemsl; timemsl--);
 14472                           
 14473  2038  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 14474  2039  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 14475  203A  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 14476  203B  042E               	iorwf	wait_ms@timemsl^(0+128),w
 14477  203C  1903               	btfsc	3,2
 14478  203D  0008               	return
 14479  203E  30FF               	movlw	255
 14480  203F  07AE               	addwf	wait_ms@timemsl^(0+128),f
 14481  2040  30FF               	movlw	255
 14482  2041  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 14483  2042  30FF               	movlw	255
 14484  2043  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 14485  2044  30FF               	movlw	255
 14486  2045  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 14487  2046  2838               	goto	l382
 14488  2047                     __end_of_wait_ms:	
 14489                           
 14490                           	psect	text40
 14491  2FD0                     __ptext40:	
 14492 ;; *************** function ___lmul *****************
 14493 ;; Defined at:
 14494 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14495 ;; Parameters:    Size  Location     Type
 14496 ;;  multiplier      4    0[BANK1 ] unsigned long 
 14497 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;  product         4    8[BANK1 ] unsigned long 
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  4    0[BANK1 ] unsigned long 
 14502 ;; Registers used:
 14503 ;;		wreg, status,2, status,0
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14509 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14510 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14512 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14513 ;;Total ram usage:       12 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    3
 14516 ;; This function calls:
 14517 ;;		Nothing
 14518 ;; This function is called by:
 14519 ;;		_wait_ms
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           
 14524                           ;psect for function ___lmul
 14525  2FD0                     ___lmul:	
 14526                           
 14527                           ;incstack = 0
 14528                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14529  2FD0  3000               	movlw	0
 14530  2FD1  0021               	movlb	1	; select bank1
 14531  2FD2  00AB               	movwf	(___lmul@product+3)^(0+128)
 14532  2FD3  3000               	movlw	0
 14533  2FD4  00AA               	movwf	(___lmul@product+2)^(0+128)
 14534  2FD5  3000               	movlw	0
 14535  2FD6  00A9               	movwf	(___lmul@product+1)^(0+128)
 14536  2FD7  3000               	movlw	0
 14537  2FD8  00A8               	movwf	___lmul@product^(0+128)
 14538  2FD9                     l7635:	
 14539  2FD9  1C20               	btfss	___lmul@multiplier^(0+128),0
 14540  2FDA  2FE3               	goto	l7639
 14541  2FDB  0824               	movf	___lmul@multiplicand^(0+128),w
 14542  2FDC  07A8               	addwf	___lmul@product^(0+128),f
 14543  2FDD  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 14544  2FDE  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 14545  2FDF  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 14546  2FE0  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 14547  2FE1  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 14548  2FE2  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 14549  2FE3                     l7639:	
 14550  2FE3  3001               	movlw	1
 14551  2FE4                     u7635:	
 14552  2FE4  35A4               	lslf	___lmul@multiplicand^(0+128),f
 14553  2FE5  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 14554  2FE6  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 14555  2FE7  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 14556  2FE8  0B89               	decfsz	9,f
 14557  2FE9  2FE4               	goto	u7635
 14558  2FEA  3001               	movlw	1
 14559  2FEB                     u7645:	
 14560  2FEB  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 14561  2FEC  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 14562  2FED  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 14563  2FEE  0CA0               	rrf	___lmul@multiplier^(0+128),f
 14564  2FEF  0B89               	decfsz	9,f
 14565  2FF0  2FEB               	goto	u7645
 14566  2FF1  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 14567  2FF2  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 14568  2FF3  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 14569  2FF4  0420               	iorwf	___lmul@multiplier^(0+128),w
 14570  2FF5  1D03               	skipz
 14571  2FF6  2FD9               	goto	l7635
 14572  2FF7  082B               	movf	(___lmul@product+3)^(0+128),w
 14573  2FF8  00A3               	movwf	(?___lmul+3)^(0+128)
 14574  2FF9  082A               	movf	(___lmul@product+2)^(0+128),w
 14575  2FFA  00A2               	movwf	(?___lmul+2)^(0+128)
 14576  2FFB  0829               	movf	(___lmul@product+1)^(0+128),w
 14577  2FFC  00A1               	movwf	(?___lmul+1)^(0+128)
 14578  2FFD  0828               	movf	___lmul@product^(0+128),w
 14579  2FFE  00A0               	movwf	?___lmul^(0+128)
 14580  2FFF  0008               	return
 14581  3000                     __end_of___lmul:	
 14582                           
 14583                           	psect	text41
 14584  2D5C                     __ptext41:	
 14585 ;; *************** function _updateSwitchBypassState *****************
 14586 ;; Defined at:
 14587 ;;		line 96 in file "state_manager.c"
 14588 ;; Parameters:    Size  Location     Type
 14589 ;;  state           2    0[BANK1 ] int 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;		None
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  1    wreg      void 
 14594 ;; Registers used:
 14595 ;;		None
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14601 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14604 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14605 ;;Total ram usage:        2 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    3
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_setSwitchBypassRelays
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           
 14616                           ;psect for function _updateSwitchBypassState
 14617  2D5C                     _updateSwitchBypassState:	
 14618                           
 14619                           ;incstack = 0
 14620                           ; Regs used in _updateSwitchBypassState: []
 14621  2D5C  0008               	return
 14622  2D5D                     __end_of_updateSwitchBypassState:	
 14623                           
 14624                           	psect	text42
 14625  2D61                     __ptext42:	
 14626 ;; *************** function _getSwitchBypassState *****************
 14627 ;; Defined at:
 14628 ;;		line 103 in file "state_manager.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;		None
 14631 ;; Auto vars:     Size  Location     Type
 14632 ;;		None
 14633 ;; Return value:  Size  Location     Type
 14634 ;;                  2    0[BANK1 ] int 
 14635 ;; Registers used:
 14636 ;;		status,2
 14637 ;; Tracked objects:
 14638 ;;		On entry : 0/0
 14639 ;;		On exit  : 0/0
 14640 ;;		Unchanged: 0/0
 14641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14642 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14645 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14646 ;;Total ram usage:        2 bytes
 14647 ;; Hardware stack levels used:    1
 14648 ;; Hardware stack levels required when called:    3
 14649 ;; This function calls:
 14650 ;;		Nothing
 14651 ;; This function is called by:
 14652 ;;		_initSwitchBypass
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           
 14657                           ;psect for function _getSwitchBypassState
 14658  2D61                     _getSwitchBypassState:	
 14659                           
 14660                           ;state_manager.c: 108: return 0;
 14661                           
 14662                           ;incstack = 0
 14663                           ; Regs used in _getSwitchBypassState: [status,2]
 14664  2D61  0021               	movlb	1	; select bank1
 14665  2D62  01A0               	clrf	?_getSwitchBypassState^(0+128)
 14666  2D63  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 14667  2D64  0008               	return
 14668  2D65                     __end_of_getSwitchBypassState:	
 14669                           
 14670                           	psect	text43
 14671  1AC5                     __ptext43:	
 14672 ;; *************** function _getModulationDelayTime *****************
 14673 ;; Defined at:
 14674 ;;		line 35 in file "modulation.c"
 14675 ;; Parameters:    Size  Location     Type
 14676 ;;		None
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;  subDiv          2   26[BANK2 ] int 
 14679 ;; Return value:  Size  Location     Type
 14680 ;;                  1    wreg      void 
 14681 ;; Registers used:
 14682 ;;		wreg, status,2, status,0, pclath, cstack
 14683 ;; Tracked objects:
 14684 ;;		On entry : 0/0
 14685 ;;		On exit  : 0/0
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14689 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14690 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14691 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14692 ;;Total ram usage:        6 bytes
 14693 ;; Hardware stack levels used:    1
 14694 ;; Hardware stack levels required when called:    5
 14695 ;; This function calls:
 14696 ;;		___altoft
 14697 ;;		___awtoft
 14698 ;;		___ftdiv
 14699 ;;		___fttol
 14700 ;;		___wmul
 14701 ;;		_getModulationSubdivision
 14702 ;; This function is called by:
 14703 ;;		_main
 14704 ;; This function uses a non-reentrant model
 14705 ;;
 14706                           
 14707                           
 14708                           ;psect for function _getModulationDelayTime
 14709  1AC5                     _getModulationDelayTime:	
 14710                           
 14711                           ;modulation.c: 36: adjust_mod_delay = 0;
 14712                           
 14713                           ;incstack = 0
 14714                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 14715  1AC5  0023               	movlb	3	; select bank3
 14716  1AC6  01BE               	clrf	_adjust_mod_delay^(0+384)
 14717                           
 14718                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 14719  1AC7  31AF  27A0  319A   	fcall	_getModulationSubdivision
 14720  1ACA  0021               	movlb	1	; select bank1
 14721  1ACB  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 14722  1ACC  0022               	movlb	2	; select bank2
 14723  1ACD  00BB               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 14724  1ACE  0021               	movlb	1	; select bank1
 14725  1ACF  0820               	movf	?_getModulationSubdivision^(0+128),w
 14726  1AD0  0022               	movlb	2	; select bank2
 14727  1AD1  00BA               	movwf	getModulationDelayTime@subDiv^(0+256)
 14728                           
 14729                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 14730  1AD2  0020               	movlb	0	; select bank0
 14731  1AD3  085F               	movf	_delay_time+3,w	;volatile
 14732  1AD4  0022               	movlb	2	; select bank2
 14733  1AD5  00B1               	movwf	(___altoft@c+3)^(0+256)
 14734  1AD6  0020               	movlb	0	; select bank0
 14735  1AD7  085E               	movf	_delay_time+2,w	;volatile
 14736  1AD8  0022               	movlb	2	; select bank2
 14737  1AD9  00B0               	movwf	(___altoft@c+2)^(0+256)
 14738  1ADA  0020               	movlb	0	; select bank0
 14739  1ADB  085D               	movf	_delay_time+1,w	;volatile
 14740  1ADC  0022               	movlb	2	; select bank2
 14741  1ADD  00AF               	movwf	(___altoft@c+1)^(0+256)
 14742  1ADE  0020               	movlb	0	; select bank0
 14743  1ADF  085C               	movf	_delay_time,w	;volatile
 14744  1AE0  0022               	movlb	2	; select bank2
 14745  1AE1  00AE               	movwf	___altoft@c^(0+256)
 14746  1AE2  31A3  23FC  319A   	fcall	___altoft
 14747  1AE5  0022               	movlb	2	; select bank2
 14748  1AE6  082E               	movf	?___altoft^(0+256),w
 14749  1AE7  0021               	movlb	1	; select bank1
 14750  1AE8  00D1               	movwf	___ftdiv@f1^(0+128)
 14751  1AE9  0022               	movlb	2	; select bank2
 14752  1AEA  082F               	movf	(?___altoft+1)^(0+256),w
 14753  1AEB  0021               	movlb	1	; select bank1
 14754  1AEC  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14755  1AED  0022               	movlb	2	; select bank2
 14756  1AEE  0830               	movf	(?___altoft+2)^(0+256),w
 14757  1AEF  0021               	movlb	1	; select bank1
 14758  1AF0  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14759  1AF1  0022               	movlb	2	; select bank2
 14760  1AF2  083B               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14761  1AF3  0021               	movlb	1	; select bank1
 14762  1AF4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14763  1AF5  0022               	movlb	2	; select bank2
 14764  1AF6  083A               	movf	getModulationDelayTime@subDiv^(0+256),w
 14765  1AF7  0021               	movlb	1	; select bank1
 14766  1AF8  00A8               	movwf	___awtoft@c^(0+128)
 14767  1AF9  31AE  26CF  319A   	fcall	___awtoft
 14768  1AFC  0021               	movlb	1	; select bank1
 14769  1AFD  0828               	movf	?___awtoft^(0+128),w
 14770  1AFE  00CE               	movwf	___ftdiv@f2^(0+128)
 14771  1AFF  0829               	movf	(?___awtoft+1)^(0+128),w
 14772  1B00  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14773  1B01  082A               	movf	(?___awtoft+2)^(0+128),w
 14774  1B02  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14775  1B03  319D  2520  319A   	fcall	___ftdiv
 14776  1B06  0021               	movlb	1	; select bank1
 14777  1B07  084E               	movf	?___ftdiv^(0+128),w
 14778  1B08  0022               	movlb	2	; select bank2
 14779  1B09  00A0               	movwf	___fttol@f1^(0+256)
 14780  1B0A  0021               	movlb	1	; select bank1
 14781  1B0B  084F               	movf	(?___ftdiv+1)^(0+128),w
 14782  1B0C  0022               	movlb	2	; select bank2
 14783  1B0D  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14784  1B0E  0021               	movlb	1	; select bank1
 14785  1B0F  0850               	movf	(?___ftdiv+2)^(0+128),w
 14786  1B10  0022               	movlb	2	; select bank2
 14787  1B11  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14788  1B12  3199  21B3  319A   	fcall	___fttol
 14789  1B15  0022               	movlb	2	; select bank2
 14790  1B16  0821               	movf	(?___fttol^(0+256)+1),w
 14791  1B17  0023               	movlb	3	; select bank3
 14792  1B18  00D7               	movwf	(_mod_delay_time+1)^(0+384)
 14793  1B19  0022               	movlb	2	; select bank2
 14794  1B1A  0820               	movf	?___fttol^(0+256),w
 14795  1B1B  0023               	movlb	3	; select bank3
 14796  1B1C  00D6               	movwf	_mod_delay_time^(0+384)
 14797                           
 14798                           ;modulation.c: 39: if (mod_delay_time * subDiv != delay_time) {
 14799  1B1D  0857               	movf	(_mod_delay_time+1)^(0+384),w
 14800  1B1E  0022               	movlb	2	; select bank2
 14801  1B1F  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14802  1B20  0023               	movlb	3	; select bank3
 14803  1B21  0856               	movf	_mod_delay_time^(0+384),w
 14804  1B22  0022               	movlb	2	; select bank2
 14805  1B23  00AE               	movwf	___wmul@multiplier^(0+256)
 14806  1B24  083B               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 14807  1B25  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
 14808  1B26  083A               	movf	getModulationDelayTime@subDiv^(0+256),w
 14809  1B27  00B0               	movwf	___wmul@multiplicand^(0+256)
 14810  1B28  31AE  261E  319A   	fcall	___wmul
 14811  1B2B  0022               	movlb	2	; select bank2
 14812  1B2C  082E               	movf	?___wmul^(0+256),w
 14813  1B2D  00B6               	movwf	??_getModulationDelayTime^(0+256)
 14814  1B2E  082F               	movf	(?___wmul+1)^(0+256),w
 14815  1B2F  00B7               	movwf	(??_getModulationDelayTime^(0+256)+1)
 14816  1B30  3000               	movlw	0
 14817  1B31  1BB7               	btfsc	(??_getModulationDelayTime^(0+256)+1),7
 14818  1B32  30FF               	movlw	255
 14819  1B33  00B8               	movwf	(??_getModulationDelayTime^(0+256)+2)
 14820  1B34  00B9               	movwf	(??_getModulationDelayTime^(0+256)+3)
 14821  1B35  0020               	movlb	0	; select bank0
 14822  1B36  085F               	movf	_delay_time+3,w	;volatile
 14823  1B37  0022               	movlb	2	; select bank2
 14824  1B38  0639               	xorwf	(??_getModulationDelayTime+3)^(0+256),w
 14825  1B39  1D03               	skipz
 14826  1B3A  2B4B               	goto	u10195
 14827  1B3B  0020               	movlb	0	; select bank0
 14828  1B3C  085E               	movf	_delay_time+2,w	;volatile
 14829  1B3D  0022               	movlb	2	; select bank2
 14830  1B3E  0638               	xorwf	(??_getModulationDelayTime+2)^(0+256),w
 14831  1B3F  1D03               	skipz
 14832  1B40  2B4B               	goto	u10195
 14833  1B41  0020               	movlb	0	; select bank0
 14834  1B42  085D               	movf	_delay_time+1,w	;volatile
 14835  1B43  0022               	movlb	2	; select bank2
 14836  1B44  0637               	xorwf	(??_getModulationDelayTime+1)^(0+256),w
 14837  1B45  1D03               	skipz
 14838  1B46  2B4B               	goto	u10195
 14839  1B47  0020               	movlb	0	; select bank0
 14840  1B48  085C               	movf	_delay_time,w	;volatile
 14841  1B49  0022               	movlb	2	; select bank2
 14842  1B4A  0636               	xorwf	??_getModulationDelayTime^(0+256),w
 14843  1B4B                     u10195:	
 14844  1B4B  1903               	skipnz
 14845  1B4C  0008               	return
 14846                           
 14847                           ;modulation.c: 40: adjust_mod_delay = 1;
 14848  1B4D  0023               	movlb	3	; select bank3
 14849  1B4E  01BE               	clrf	_adjust_mod_delay^(0+384)
 14850  1B4F  0ABE               	incf	_adjust_mod_delay^(0+384),f
 14851  1B50  0008               	return
 14852  1B51                     __end_of_getModulationDelayTime:	
 14853                           
 14854                           	psect	text44
 14855  2FA0                     __ptext44:	
 14856 ;; *************** function _getModulationSubdivision *****************
 14857 ;; Defined at:
 14858 ;;		line 26 in file "modulation.c"
 14859 ;; Parameters:    Size  Location     Type
 14860 ;;		None
 14861 ;; Auto vars:     Size  Location     Type
 14862 ;;		None
 14863 ;; Return value:  Size  Location     Type
 14864 ;;                  2    0[BANK1 ] int 
 14865 ;; Registers used:
 14866 ;;		wreg, status,2, status,0
 14867 ;; Tracked objects:
 14868 ;;		On entry : 0/0
 14869 ;;		On exit  : 0/0
 14870 ;;		Unchanged: 0/0
 14871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14872 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14875 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14876 ;;Total ram usage:        2 bytes
 14877 ;; Hardware stack levels used:    1
 14878 ;; Hardware stack levels required when called:    3
 14879 ;; This function calls:
 14880 ;;		Nothing
 14881 ;; This function is called by:
 14882 ;;		_getModulationDelayTime
 14883 ;;		_updateModulationArray
 14884 ;; This function uses a non-reentrant model
 14885 ;;
 14886                           
 14887                           
 14888                           ;psect for function _getModulationSubdivision
 14889  2FA0                     _getModulationSubdivision:	
 14890                           
 14891                           ;modulation.c: 27: if (delay_time >= 2400) {
 14892                           
 14893                           ;incstack = 0
 14894                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14895  2FA0  0020               	movlb	0	; select bank0
 14896  2FA1  1BDF               	btfsc	_delay_time+3,7	;volatile
 14897  2FA2  2FB5               	goto	l8319
 14898  2FA3  085F               	movf	_delay_time+3,w	;volatile
 14899  2FA4  1D03               	btfss	3,2
 14900  2FA5  2FAF               	goto	l8313
 14901  2FA6  085E               	movf	_delay_time+2,w	;volatile
 14902  2FA7  1D03               	btfss	3,2
 14903  2FA8  2FAF               	goto	l8313
 14904  2FA9  3060               	movlw	96
 14905  2FAA  025C               	subwf	_delay_time,w	;volatile
 14906  2FAB  3009               	movlw	9
 14907  2FAC  3B5D               	subwfb	_delay_time+1,w	;volatile
 14908  2FAD  1C03               	btfss	3,0
 14909  2FAE  2FB5               	goto	l8319
 14910  2FAF                     l8313:	
 14911                           
 14912                           ;modulation.c: 28: return 120;
 14913  2FAF  3078               	movlw	120
 14914  2FB0  0021               	movlb	1	; select bank1
 14915  2FB1  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14916  2FB2  3000               	movlw	0
 14917  2FB3  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14918                           
 14919                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14920  2FB4  0008               	return
 14921  2FB5                     l8319:	
 14922  2FB5  0020               	movlb	0	; select bank0
 14923  2FB6  1BDF               	btfsc	_delay_time+3,7	;volatile
 14924  2FB7  2FCA               	goto	l8327
 14925  2FB8  085F               	movf	_delay_time+3,w	;volatile
 14926  2FB9  1D03               	btfss	3,2
 14927  2FBA  2FC4               	goto	l8321
 14928  2FBB  085E               	movf	_delay_time+2,w	;volatile
 14929  2FBC  1D03               	btfss	3,2
 14930  2FBD  2FC4               	goto	l8321
 14931  2FBE  3058               	movlw	88
 14932  2FBF  025C               	subwf	_delay_time,w	;volatile
 14933  2FC0  3002               	movlw	2
 14934  2FC1  3B5D               	subwfb	_delay_time+1,w	;volatile
 14935  2FC2  1C03               	btfss	3,0
 14936  2FC3  2FCA               	goto	l8327
 14937  2FC4                     l8321:	
 14938                           
 14939                           ;modulation.c: 30: return 60;
 14940  2FC4  303C               	movlw	60
 14941  2FC5  0021               	movlb	1	; select bank1
 14942  2FC6  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14943  2FC7  3000               	movlw	0
 14944  2FC8  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14945                           
 14946                           ;modulation.c: 31: } else {
 14947  2FC9  0008               	return
 14948  2FCA                     l8327:	
 14949                           
 14950                           ;modulation.c: 32: return 30;
 14951  2FCA  301E               	movlw	30
 14952  2FCB  0021               	movlb	1	; select bank1
 14953  2FCC  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14954  2FCD  3000               	movlw	0
 14955  2FCE  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14956  2FCF  0008               	return
 14957  2FD0                     __end_of_getModulationSubdivision:	
 14958                           
 14959                           	psect	text45
 14960  277F                     __ptext45:	
 14961 ;; *************** function _calcSinArray *****************
 14962 ;; Defined at:
 14963 ;;		line 18 in file "modulation.c"
 14964 ;; Parameters:    Size  Location     Type
 14965 ;;		None
 14966 ;; Auto vars:     Size  Location     Type
 14967 ;;  tmpVal          3   55[BANK2 ] int 
 14968 ;;  iAngle          1   58[BANK2 ] unsigned char 
 14969 ;; Return value:  Size  Location     Type
 14970 ;;                  1    wreg      void 
 14971 ;; Registers used:
 14972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14973 ;; Tracked objects:
 14974 ;;		On entry : 0/0
 14975 ;;		On exit  : 0/0
 14976 ;;		Unchanged: 0/0
 14977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14979 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14980 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14981 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14982 ;;Total ram usage:        8 bytes
 14983 ;; Hardware stack levels used:    1
 14984 ;; Hardware stack levels required when called:    7
 14985 ;; This function calls:
 14986 ;;		___awtoft
 14987 ;;		___ftdiv
 14988 ;;		___ftmul
 14989 ;;		___wmul
 14990 ;;		_sin
 14991 ;; This function is called by:
 14992 ;;		_main
 14993 ;; This function uses a non-reentrant model
 14994 ;;
 14995                           
 14996                           
 14997                           ;psect for function _calcSinArray
 14998  277F                     _calcSinArray:	
 14999                           
 15000                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 15001                           
 15002                           ;incstack = 0
 15003                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15004  277F  0022               	movlb	2	; select bank2
 15005  2780  01DA               	clrf	calcSinArray@iAngle^(0+256)
 15006  2781                     L18:	
 15007  2781  3078               	movlw	120
 15008  2782  025A               	subwf	calcSinArray@iAngle^(0+256),w
 15009  2783  1803               	btfsc	3,0
 15010  2784  0008               	return
 15011                           
 15012                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 15013  2785  3000               	movlw	0
 15014  2786  0021               	movlb	1	; select bank1
 15015  2787  00CE               	movwf	___ftdiv@f2^(0+128)
 15016  2788  3034               	movlw	52
 15017  2789  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15018  278A  3043               	movlw	67
 15019  278B  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15020  278C  3010               	movlw	16
 15021  278D  00AE               	movwf	___ftmul@f1^(0+128)
 15022  278E  3049               	movlw	73
 15023  278F  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15024  2790  3040               	movlw	64
 15025  2791  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15026  2792  0022               	movlb	2	; select bank2
 15027  2793  085A               	movf	calcSinArray@iAngle^(0+256),w
 15028  2794  00D3               	movwf	??_calcSinArray^(0+256)
 15029  2795  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 15030  2796  0853               	movf	??_calcSinArray^(0+256),w
 15031  2797  00AE               	movwf	___wmul@multiplier^(0+256)
 15032  2798  0854               	movf	(??_calcSinArray+1)^(0+256),w
 15033  2799  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15034  279A  3003               	movlw	3
 15035  279B  00B0               	movwf	___wmul@multiplicand^(0+256)
 15036  279C  3000               	movlw	0
 15037  279D  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15038  279E  31AE  261E  31A7   	fcall	___wmul
 15039  27A1  0022               	movlb	2	; select bank2
 15040  27A2  082F               	movf	(?___wmul+1)^(0+256),w
 15041  27A3  0021               	movlb	1	; select bank1
 15042  27A4  00A9               	movwf	(___awtoft@c+1)^(0+128)
 15043  27A5  0022               	movlb	2	; select bank2
 15044  27A6  082E               	movf	?___wmul^(0+256),w
 15045  27A7  0021               	movlb	1	; select bank1
 15046  27A8  00A8               	movwf	___awtoft@c^(0+128)
 15047  27A9  31AE  26CF  31A7   	fcall	___awtoft
 15048  27AC  0021               	movlb	1	; select bank1
 15049  27AD  0828               	movf	?___awtoft^(0+128),w
 15050  27AE  00B1               	movwf	___ftmul@f2^(0+128)
 15051  27AF  0829               	movf	(?___awtoft+1)^(0+128),w
 15052  27B0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15053  27B1  082A               	movf	(?___awtoft+2)^(0+128),w
 15054  27B2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15055  27B3  3187  274C  31A7   	fcall	___ftmul
 15056  27B6  0021               	movlb	1	; select bank1
 15057  27B7  082E               	movf	?___ftmul^(0+128),w
 15058  27B8  00D1               	movwf	___ftdiv@f1^(0+128)
 15059  27B9  082F               	movf	(?___ftmul+1)^(0+128),w
 15060  27BA  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15061  27BB  0830               	movf	(?___ftmul+2)^(0+128),w
 15062  27BC  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15063  27BD  319D  2520  31A7   	fcall	___ftdiv
 15064  27C0  0021               	movlb	1	; select bank1
 15065  27C1  084E               	movf	?___ftdiv^(0+128),w
 15066  27C2  0022               	movlb	2	; select bank2
 15067  27C3  00D7               	movwf	calcSinArray@tmpVal^(0+256)
 15068  27C4  0021               	movlb	1	; select bank1
 15069  27C5  084F               	movf	(?___ftdiv+1)^(0+128),w
 15070  27C6  0022               	movlb	2	; select bank2
 15071  27C7  00D8               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 15072  27C8  0021               	movlb	1	; select bank1
 15073  27C9  0850               	movf	(?___ftdiv+2)^(0+128),w
 15074  27CA  0022               	movlb	2	; select bank2
 15075  27CB  00D9               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 15076                           
 15077                           ;modulation.c: 21: tmpVal = sin(tmpVal);
 15078  27CC  0857               	movf	calcSinArray@tmpVal^(0+256),w
 15079  27CD  00C5               	movwf	sin@f^(0+256)
 15080  27CE  0858               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 15081  27CF  00C6               	movwf	(sin@f+1)^(0+256)
 15082  27D0  0859               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 15083  27D1  00C7               	movwf	(sin@f+2)^(0+256)
 15084  27D2  3188  202E  31A7   	fcall	_sin
 15085  27D5  0022               	movlb	2	; select bank2
 15086  27D6  0845               	movf	?_sin^(0+256),w
 15087  27D7  00D7               	movwf	calcSinArray@tmpVal^(0+256)
 15088  27D8  0846               	movf	(?_sin+1)^(0+256),w
 15089  27D9  00D8               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 15090  27DA  0847               	movf	(?_sin+2)^(0+256),w
 15091  27DB  00D9               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 15092                           
 15093                           ;modulation.c: 22: sinArray[iAngle] = tmpVal;
 15094  27DC  085A               	movf	calcSinArray@iAngle^(0+256),w
 15095  27DD  00D3               	movwf	??_calcSinArray^(0+256)
 15096  27DE  01D4               	clrf	(??_calcSinArray^(0+256)+1)
 15097  27DF  0853               	movf	??_calcSinArray^(0+256),w
 15098  27E0  00AE               	movwf	___wmul@multiplier^(0+256)
 15099  27E1  0854               	movf	(??_calcSinArray+1)^(0+256),w
 15100  27E2  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15101  27E3  3003               	movlw	3
 15102  27E4  00B0               	movwf	___wmul@multiplicand^(0+256)
 15103  27E5  3000               	movlw	0
 15104  27E6  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15105  27E7  31AE  261E  31A7   	fcall	___wmul
 15106  27EA  3082               	movlw	130
 15107  27EB  0022               	movlb	2	; select bank2
 15108  27EC  00D5               	movwf	(??_calcSinArray+2)^(0+256)
 15109  27ED  3024               	movlw	36
 15110  27EE  00D6               	movwf	((??_calcSinArray+2)^(0+256)+1)
 15111  27EF  082E               	movf	?___wmul^(0+256),w
 15112  27F0  0755               	addwf	(??_calcSinArray+2)^(0+256),w
 15113  27F1  0086               	movwf	6
 15114  27F2  082F               	movf	(?___wmul+1)^(0+256),w
 15115  27F3  3D56               	addwfc	(??_calcSinArray+3)^(0+256),w
 15116  27F4  0087               	movwf	7
 15117  27F5  0857               	movf	calcSinArray@tmpVal^(0+256),w
 15118  27F6  3FC0               	movwi [0]fsr1
 15119  27F7  0858               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 15120  27F8  3FC1               	movwi [1]fsr1
 15121  27F9  0859               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 15122  27FA  3FC2               	movwi [2]fsr1
 15123  27FB  3001               	movlw	1
 15124  27FC  00D3               	movwf	??_calcSinArray^(0+256)
 15125  27FD  0853               	movf	??_calcSinArray^(0+256),w
 15126  27FE  07DA               	addwf	calcSinArray@iAngle^(0+256),f
 15127  27FF  2F81               	goto	L18
 15128  2800                     __end_of_calcSinArray:	
 15129                           
 15130                           	psect	text46
 15131  082E                     __ptext46:	
 15132 ;; *************** function _sin *****************
 15133 ;; Defined at:
 15134 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 15135 ;; Parameters:    Size  Location     Type
 15136 ;;  f               3   37[BANK2 ] void 
 15137 ;; Auto vars:     Size  Location     Type
 15138 ;;  x2              3   47[BANK2 ] void 
 15139 ;;  y               3   41[BANK2 ] void 
 15140 ;;  sgn             1   50[BANK2 ] unsigned char 
 15141 ;; Return value:  Size  Location     Type
 15142 ;;                  3   37[BANK2 ] unsigned char 
 15143 ;; Registers used:
 15144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15145 ;; Tracked objects:
 15146 ;;		On entry : 0/0
 15147 ;;		On exit  : 0/0
 15148 ;;		Unchanged: 0/0
 15149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15150 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15151 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15152 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15153 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15154 ;;Total ram usage:       14 bytes
 15155 ;; Hardware stack levels used:    1
 15156 ;; Hardware stack levels required when called:    6
 15157 ;; This function calls:
 15158 ;;		___ftadd
 15159 ;;		___ftdiv
 15160 ;;		___ftge
 15161 ;;		___ftmul
 15162 ;;		___ftneg
 15163 ;;		___ftsub
 15164 ;;		_eval_poly
 15165 ;;		_floor
 15166 ;; This function is called by:
 15167 ;;		_calcSinArray
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171                           
 15172                           ;psect for function _sin
 15173  082E                     _sin:	
 15174                           
 15175                           ;incstack = 0
 15176                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15177  082E  0022               	movlb	2	; select bank2
 15178  082F  01D2               	clrf	sin@sgn^(0+256)
 15179  0830  0845               	movf	sin@f^(0+256),w
 15180  0831  0021               	movlb	1	; select bank1
 15181  0832  00A0               	movwf	___ftge@ff1^(0+128)
 15182  0833  0022               	movlb	2	; select bank2
 15183  0834  0846               	movf	(sin@f+1)^(0+256),w
 15184  0835  0021               	movlb	1	; select bank1
 15185  0836  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15186  0837  0022               	movlb	2	; select bank2
 15187  0838  0847               	movf	(sin@f+2)^(0+256),w
 15188  0839  0021               	movlb	1	; select bank1
 15189  083A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15190  083B  3000               	movlw	0
 15191  083C  00A3               	movwf	___ftge@ff2^(0+128)
 15192  083D  3000               	movlw	0
 15193  083E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15194  083F  3000               	movlw	0
 15195  0840  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15196  0841  31A1  212A  3188   	fcall	___ftge
 15197  0844  1803               	btfsc	3,0
 15198  0845  2863               	goto	l8507
 15199  0846  0022               	movlb	2	; select bank2
 15200  0847  0845               	movf	sin@f^(0+256),w
 15201  0848  0021               	movlb	1	; select bank1
 15202  0849  00BE               	movwf	___ftneg@f1^(0+128)
 15203  084A  0022               	movlb	2	; select bank2
 15204  084B  0846               	movf	(sin@f+1)^(0+256),w
 15205  084C  0021               	movlb	1	; select bank1
 15206  084D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15207  084E  0022               	movlb	2	; select bank2
 15208  084F  0847               	movf	(sin@f+2)^(0+256),w
 15209  0850  0021               	movlb	1	; select bank1
 15210  0851  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15211  0852  31AD  2575  3188   	fcall	___ftneg
 15212  0855  0021               	movlb	1	; select bank1
 15213  0856  083E               	movf	?___ftneg^(0+128),w
 15214  0857  0022               	movlb	2	; select bank2
 15215  0858  00C5               	movwf	sin@f^(0+256)
 15216  0859  0021               	movlb	1	; select bank1
 15217  085A  083F               	movf	(?___ftneg+1)^(0+128),w
 15218  085B  0022               	movlb	2	; select bank2
 15219  085C  00C6               	movwf	(sin@f+1)^(0+256)
 15220  085D  0021               	movlb	1	; select bank1
 15221  085E  0840               	movf	(?___ftneg+2)^(0+128),w
 15222  085F  0022               	movlb	2	; select bank2
 15223  0860  00C7               	movwf	(sin@f+2)^(0+256)
 15224  0861  01D2               	clrf	sin@sgn^(0+256)
 15225  0862  0AD2               	incf	sin@sgn^(0+256),f
 15226  0863                     l8507:	
 15227  0863  30FA               	movlw	250
 15228  0864  0021               	movlb	1	; select bank1
 15229  0865  00AE               	movwf	___ftmul@f1^(0+128)
 15230  0866  3022               	movlw	34
 15231  0867  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15232  0868  303E               	movlw	62
 15233  0869  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15234  086A  0022               	movlb	2	; select bank2
 15235  086B  0845               	movf	sin@f^(0+256),w
 15236  086C  0021               	movlb	1	; select bank1
 15237  086D  00B1               	movwf	___ftmul@f2^(0+128)
 15238  086E  0022               	movlb	2	; select bank2
 15239  086F  0846               	movf	(sin@f+1)^(0+256),w
 15240  0870  0021               	movlb	1	; select bank1
 15241  0871  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15242  0872  0022               	movlb	2	; select bank2
 15243  0873  0847               	movf	(sin@f+2)^(0+256),w
 15244  0874  0021               	movlb	1	; select bank1
 15245  0875  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15246  0876  3187  274C  3188   	fcall	___ftmul
 15247  0879  0021               	movlb	1	; select bank1
 15248  087A  082E               	movf	?___ftmul^(0+128),w
 15249  087B  0022               	movlb	2	; select bank2
 15250  087C  00C5               	movwf	sin@f^(0+256)
 15251  087D  0021               	movlb	1	; select bank1
 15252  087E  082F               	movf	(?___ftmul+1)^(0+128),w
 15253  087F  0022               	movlb	2	; select bank2
 15254  0880  00C6               	movwf	(sin@f+1)^(0+256)
 15255  0881  0021               	movlb	1	; select bank1
 15256  0882  0830               	movf	(?___ftmul+2)^(0+128),w
 15257  0883  0022               	movlb	2	; select bank2
 15258  0884  00C7               	movwf	(sin@f+2)^(0+256)
 15259  0885  0845               	movf	sin@f^(0+256),w
 15260  0886  00B6               	movwf	floor@x^(0+256)
 15261  0887  0846               	movf	(sin@f+1)^(0+256),w
 15262  0888  00B7               	movwf	(floor@x+1)^(0+256)
 15263  0889  0847               	movf	(sin@f+2)^(0+256),w
 15264  088A  00B8               	movwf	(floor@x+2)^(0+256)
 15265  088B  319C  2479  3188   	fcall	_floor
 15266  088E  0022               	movlb	2	; select bank2
 15267  088F  0836               	movf	?_floor^(0+256),w
 15268  0890  00BF               	movwf	___ftsub@f2^(0+256)
 15269  0891  0837               	movf	(?_floor+1)^(0+256),w
 15270  0892  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 15271  0893  0838               	movf	(?_floor+2)^(0+256),w
 15272  0894  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 15273  0895  0845               	movf	sin@f^(0+256),w
 15274  0896  00C2               	movwf	___ftsub@f1^(0+256)
 15275  0897  0846               	movf	(sin@f+1)^(0+256),w
 15276  0898  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 15277  0899  0847               	movf	(sin@f+2)^(0+256),w
 15278  089A  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 15279  089B  3188  2000  3188   	fcall	___ftsub
 15280  089E  0022               	movlb	2	; select bank2
 15281  089F  083F               	movf	?___ftsub^(0+256),w
 15282  08A0  00C5               	movwf	sin@f^(0+256)
 15283  08A1  0840               	movf	(?___ftsub+1)^(0+256),w
 15284  08A2  00C6               	movwf	(sin@f+1)^(0+256)
 15285  08A3  0841               	movf	(?___ftsub+2)^(0+256),w
 15286  08A4  00C7               	movwf	(sin@f+2)^(0+256)
 15287  08A5  3000               	movlw	0
 15288  08A6  0021               	movlb	1	; select bank1
 15289  08A7  00AE               	movwf	___ftmul@f1^(0+128)
 15290  08A8  3080               	movlw	128
 15291  08A9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15292  08AA  3040               	movlw	64
 15293  08AB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15294  08AC  0022               	movlb	2	; select bank2
 15295  08AD  0845               	movf	sin@f^(0+256),w
 15296  08AE  0021               	movlb	1	; select bank1
 15297  08AF  00B1               	movwf	___ftmul@f2^(0+128)
 15298  08B0  0022               	movlb	2	; select bank2
 15299  08B1  0846               	movf	(sin@f+1)^(0+256),w
 15300  08B2  0021               	movlb	1	; select bank1
 15301  08B3  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15302  08B4  0022               	movlb	2	; select bank2
 15303  08B5  0847               	movf	(sin@f+2)^(0+256),w
 15304  08B6  0021               	movlb	1	; select bank1
 15305  08B7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15306  08B8  3187  274C  3188   	fcall	___ftmul
 15307  08BB  0021               	movlb	1	; select bank1
 15308  08BC  082E               	movf	?___ftmul^(0+128),w
 15309  08BD  0022               	movlb	2	; select bank2
 15310  08BE  00C5               	movwf	sin@f^(0+256)
 15311  08BF  0021               	movlb	1	; select bank1
 15312  08C0  082F               	movf	(?___ftmul+1)^(0+128),w
 15313  08C1  0022               	movlb	2	; select bank2
 15314  08C2  00C6               	movwf	(sin@f+1)^(0+256)
 15315  08C3  0021               	movlb	1	; select bank1
 15316  08C4  0830               	movf	(?___ftmul+2)^(0+128),w
 15317  08C5  0022               	movlb	2	; select bank2
 15318  08C6  00C7               	movwf	(sin@f+2)^(0+256)
 15319  08C7  3000               	movlw	0
 15320  08C8  0021               	movlb	1	; select bank1
 15321  08C9  00A0               	movwf	___ftge@ff1^(0+128)
 15322  08CA  3000               	movlw	0
 15323  08CB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15324  08CC  3040               	movlw	64
 15325  08CD  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15326  08CE  0022               	movlb	2	; select bank2
 15327  08CF  0845               	movf	sin@f^(0+256),w
 15328  08D0  0021               	movlb	1	; select bank1
 15329  08D1  00A3               	movwf	___ftge@ff2^(0+128)
 15330  08D2  0022               	movlb	2	; select bank2
 15331  08D3  0846               	movf	(sin@f+1)^(0+256),w
 15332  08D4  0021               	movlb	1	; select bank1
 15333  08D5  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15334  08D6  0022               	movlb	2	; select bank2
 15335  08D7  0847               	movf	(sin@f+2)^(0+256),w
 15336  08D8  0021               	movlb	1	; select bank1
 15337  08D9  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15338  08DA  31A1  212A  3188   	fcall	___ftge
 15339  08DD  1803               	btfsc	3,0
 15340  08DE  28FF               	goto	l8519
 15341  08DF  3000               	movlw	0
 15342  08E0  0022               	movlb	2	; select bank2
 15343  08E1  00BF               	movwf	___ftsub@f2^(0+256)
 15344  08E2  3000               	movlw	0
 15345  08E3  00C0               	movwf	(___ftsub@f2+1)^(0+256)
 15346  08E4  3040               	movlw	64
 15347  08E5  00C1               	movwf	(___ftsub@f2+2)^(0+256)
 15348  08E6  0845               	movf	sin@f^(0+256),w
 15349  08E7  00C2               	movwf	___ftsub@f1^(0+256)
 15350  08E8  0846               	movf	(sin@f+1)^(0+256),w
 15351  08E9  00C3               	movwf	(___ftsub@f1+1)^(0+256)
 15352  08EA  0847               	movf	(sin@f+2)^(0+256),w
 15353  08EB  00C4               	movwf	(___ftsub@f1+2)^(0+256)
 15354  08EC  3188  2000  3188   	fcall	___ftsub
 15355  08EF  0022               	movlb	2	; select bank2
 15356  08F0  083F               	movf	?___ftsub^(0+256),w
 15357  08F1  00C5               	movwf	sin@f^(0+256)
 15358  08F2  0840               	movf	(?___ftsub+1)^(0+256),w
 15359  08F3  00C6               	movwf	(sin@f+1)^(0+256)
 15360  08F4  0841               	movf	(?___ftsub+2)^(0+256),w
 15361  08F5  00C7               	movwf	(sin@f+2)^(0+256)
 15362  08F6  0852               	movf	sin@sgn^(0+256),w
 15363  08F7  1D03               	btfss	3,2
 15364  08F8  28FB               	goto	u8950
 15365  08F9  3001               	movlw	1
 15366  08FA  28FC               	goto	u8960
 15367  08FB                     u8950:	
 15368  08FB  3000               	movlw	0
 15369  08FC                     u8960:	
 15370  08FC  00C8               	movwf	??_sin^(0+256)
 15371  08FD  0848               	movf	??_sin^(0+256),w
 15372  08FE  00D2               	movwf	sin@sgn^(0+256)
 15373  08FF                     l8519:	
 15374  08FF  3000               	movlw	0
 15375  0900  0021               	movlb	1	; select bank1
 15376  0901  00A0               	movwf	___ftge@ff1^(0+128)
 15377  0902  3080               	movlw	128
 15378  0903  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15379  0904  303F               	movlw	63
 15380  0905  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15381  0906  0022               	movlb	2	; select bank2
 15382  0907  0845               	movf	sin@f^(0+256),w
 15383  0908  0021               	movlb	1	; select bank1
 15384  0909  00A3               	movwf	___ftge@ff2^(0+128)
 15385  090A  0022               	movlb	2	; select bank2
 15386  090B  0846               	movf	(sin@f+1)^(0+256),w
 15387  090C  0021               	movlb	1	; select bank1
 15388  090D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15389  090E  0022               	movlb	2	; select bank2
 15390  090F  0847               	movf	(sin@f+2)^(0+256),w
 15391  0910  0021               	movlb	1	; select bank1
 15392  0911  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15393  0912  31A1  212A  3188   	fcall	___ftge
 15394  0915  1803               	btfsc	3,0
 15395  0916  2943               	goto	l2324
 15396  0917  3000               	movlw	0
 15397  0918  0021               	movlb	1	; select bank1
 15398  0919  00C1               	movwf	___ftadd@f1^(0+128)
 15399  091A  3000               	movlw	0
 15400  091B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15401  091C  3040               	movlw	64
 15402  091D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15403  091E  0022               	movlb	2	; select bank2
 15404  091F  0845               	movf	sin@f^(0+256),w
 15405  0920  0021               	movlb	1	; select bank1
 15406  0921  00BE               	movwf	___ftneg@f1^(0+128)
 15407  0922  0022               	movlb	2	; select bank2
 15408  0923  0846               	movf	(sin@f+1)^(0+256),w
 15409  0924  0021               	movlb	1	; select bank1
 15410  0925  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15411  0926  0022               	movlb	2	; select bank2
 15412  0927  0847               	movf	(sin@f+2)^(0+256),w
 15413  0928  0021               	movlb	1	; select bank1
 15414  0929  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15415  092A  31AD  2575  3188   	fcall	___ftneg
 15416  092D  0021               	movlb	1	; select bank1
 15417  092E  083E               	movf	?___ftneg^(0+128),w
 15418  092F  00C4               	movwf	___ftadd@f2^(0+128)
 15419  0930  083F               	movf	(?___ftneg+1)^(0+128),w
 15420  0931  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15421  0932  0840               	movf	(?___ftneg+2)^(0+128),w
 15422  0933  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15423  0934  3190  2026  3188   	fcall	___ftadd
 15424  0937  0021               	movlb	1	; select bank1
 15425  0938  0841               	movf	?___ftadd^(0+128),w
 15426  0939  0022               	movlb	2	; select bank2
 15427  093A  00C5               	movwf	sin@f^(0+256)
 15428  093B  0021               	movlb	1	; select bank1
 15429  093C  0842               	movf	(?___ftadd+1)^(0+128),w
 15430  093D  0022               	movlb	2	; select bank2
 15431  093E  00C6               	movwf	(sin@f+1)^(0+256)
 15432  093F  0021               	movlb	1	; select bank1
 15433  0940  0843               	movf	(?___ftadd+2)^(0+128),w
 15434  0941  0022               	movlb	2	; select bank2
 15435  0942  00C7               	movwf	(sin@f+2)^(0+256)
 15436  0943                     l2324:	
 15437  0943  0022               	movlb	2	; select bank2
 15438  0944  0845               	movf	sin@f^(0+256),w
 15439  0945  0021               	movlb	1	; select bank1
 15440  0946  00AE               	movwf	___ftmul@f1^(0+128)
 15441  0947  0022               	movlb	2	; select bank2
 15442  0948  0846               	movf	(sin@f+1)^(0+256),w
 15443  0949  0021               	movlb	1	; select bank1
 15444  094A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15445  094B  0022               	movlb	2	; select bank2
 15446  094C  0847               	movf	(sin@f+2)^(0+256),w
 15447  094D  0021               	movlb	1	; select bank1
 15448  094E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15449  094F  0022               	movlb	2	; select bank2
 15450  0950  0845               	movf	sin@f^(0+256),w
 15451  0951  0021               	movlb	1	; select bank1
 15452  0952  00B1               	movwf	___ftmul@f2^(0+128)
 15453  0953  0022               	movlb	2	; select bank2
 15454  0954  0846               	movf	(sin@f+1)^(0+256),w
 15455  0955  0021               	movlb	1	; select bank1
 15456  0956  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15457  0957  0022               	movlb	2	; select bank2
 15458  0958  0847               	movf	(sin@f+2)^(0+256),w
 15459  0959  0021               	movlb	1	; select bank1
 15460  095A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15461  095B  3187  274C  3188   	fcall	___ftmul
 15462  095E  0021               	movlb	1	; select bank1
 15463  095F  082E               	movf	?___ftmul^(0+128),w
 15464  0960  0022               	movlb	2	; select bank2
 15465  0961  00CF               	movwf	sin@x2^(0+256)
 15466  0962  0021               	movlb	1	; select bank1
 15467  0963  082F               	movf	(?___ftmul+1)^(0+128),w
 15468  0964  0022               	movlb	2	; select bank2
 15469  0965  00D0               	movwf	(sin@x2+1)^(0+256)
 15470  0966  0021               	movlb	1	; select bank1
 15471  0967  0830               	movf	(?___ftmul+2)^(0+128),w
 15472  0968  0022               	movlb	2	; select bank2
 15473  0969  00D1               	movwf	(sin@x2+2)^(0+256)
 15474  096A  084F               	movf	sin@x2^(0+256),w
 15475  096B  00B4               	movwf	eval_poly@x^(0+256)
 15476  096C  0850               	movf	(sin@x2+1)^(0+256),w
 15477  096D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15478  096E  0851               	movf	(sin@x2+2)^(0+256),w
 15479  096F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15480  0970  3048               	movlw	low (sin@coeff_b| (0+32768))
 15481  0971  00B7               	movwf	eval_poly@d^(0+256)
 15482  0972  30A8               	movlw	high (sin@coeff_b| (0+32768))
 15483  0973  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15484  0974  3003               	movlw	3
 15485  0975  00B9               	movwf	eval_poly@n^(0+256)
 15486  0976  3000               	movlw	0
 15487  0977  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15488  0978  31A6  2697  3188   	fcall	_eval_poly
 15489  097B  0022               	movlb	2	; select bank2
 15490  097C  0834               	movf	?_eval_poly^(0+256),w
 15491  097D  00C9               	movwf	sin@y^(0+256)
 15492  097E  0835               	movf	(?_eval_poly+1)^(0+256),w
 15493  097F  00CA               	movwf	(sin@y+1)^(0+256)
 15494  0980  0836               	movf	(?_eval_poly+2)^(0+256),w
 15495  0981  00CB               	movwf	(sin@y+2)^(0+256)
 15496  0982  3004               	movlw	4
 15497  0983  00B9               	movwf	eval_poly@n^(0+256)
 15498  0984  3000               	movlw	0
 15499  0985  00BA               	movwf	(eval_poly@n^(0+256)+1)
 15500  0986  3039               	movlw	low (sin@coeff_a| (0+32768))
 15501  0987  00B7               	movwf	eval_poly@d^(0+256)
 15502  0988  30A8               	movlw	high (sin@coeff_a| (0+32768))
 15503  0989  00B8               	movwf	(eval_poly@d^(0+256)+1)
 15504  098A  084F               	movf	sin@x2^(0+256),w
 15505  098B  00B4               	movwf	eval_poly@x^(0+256)
 15506  098C  0850               	movf	(sin@x2+1)^(0+256),w
 15507  098D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 15508  098E  0851               	movf	(sin@x2+2)^(0+256),w
 15509  098F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 15510  0990  31A6  2697  3188   	fcall	_eval_poly
 15511  0993  0022               	movlb	2	; select bank2
 15512  0994  0834               	movf	?_eval_poly^(0+256),w
 15513  0995  0021               	movlb	1	; select bank1
 15514  0996  00D1               	movwf	___ftdiv@f1^(0+128)
 15515  0997  0022               	movlb	2	; select bank2
 15516  0998  0835               	movf	(?_eval_poly+1)^(0+256),w
 15517  0999  0021               	movlb	1	; select bank1
 15518  099A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 15519  099B  0022               	movlb	2	; select bank2
 15520  099C  0836               	movf	(?_eval_poly+2)^(0+256),w
 15521  099D  0021               	movlb	1	; select bank1
 15522  099E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 15523  099F  0022               	movlb	2	; select bank2
 15524  09A0  0849               	movf	sin@y^(0+256),w
 15525  09A1  0021               	movlb	1	; select bank1
 15526  09A2  00CE               	movwf	___ftdiv@f2^(0+128)
 15527  09A3  0022               	movlb	2	; select bank2
 15528  09A4  084A               	movf	(sin@y+1)^(0+256),w
 15529  09A5  0021               	movlb	1	; select bank1
 15530  09A6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 15531  09A7  0022               	movlb	2	; select bank2
 15532  09A8  084B               	movf	(sin@y+2)^(0+256),w
 15533  09A9  0021               	movlb	1	; select bank1
 15534  09AA  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 15535  09AB  319D  2520  3188   	fcall	___ftdiv
 15536  09AE  0021               	movlb	1	; select bank1
 15537  09AF  084E               	movf	?___ftdiv^(0+128),w
 15538  09B0  0022               	movlb	2	; select bank2
 15539  09B1  00CC               	movwf	_sin$2852^(0+256)
 15540  09B2  0021               	movlb	1	; select bank1
 15541  09B3  084F               	movf	(?___ftdiv+1)^(0+128),w
 15542  09B4  0022               	movlb	2	; select bank2
 15543  09B5  00CD               	movwf	(_sin$2852+1)^(0+256)
 15544  09B6  0021               	movlb	1	; select bank1
 15545  09B7  0850               	movf	(?___ftdiv+2)^(0+128),w
 15546  09B8  0022               	movlb	2	; select bank2
 15547  09B9  00CE               	movwf	(_sin$2852+2)^(0+256)
 15548  09BA  084C               	movf	_sin$2852^(0+256),w
 15549  09BB  0021               	movlb	1	; select bank1
 15550  09BC  00AE               	movwf	___ftmul@f1^(0+128)
 15551  09BD  0022               	movlb	2	; select bank2
 15552  09BE  084D               	movf	(_sin$2852+1)^(0+256),w
 15553  09BF  0021               	movlb	1	; select bank1
 15554  09C0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15555  09C1  0022               	movlb	2	; select bank2
 15556  09C2  084E               	movf	(_sin$2852+2)^(0+256),w
 15557  09C3  0021               	movlb	1	; select bank1
 15558  09C4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15559  09C5  0022               	movlb	2	; select bank2
 15560  09C6  0845               	movf	sin@f^(0+256),w
 15561  09C7  0021               	movlb	1	; select bank1
 15562  09C8  00B1               	movwf	___ftmul@f2^(0+128)
 15563  09C9  0022               	movlb	2	; select bank2
 15564  09CA  0846               	movf	(sin@f+1)^(0+256),w
 15565  09CB  0021               	movlb	1	; select bank1
 15566  09CC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15567  09CD  0022               	movlb	2	; select bank2
 15568  09CE  0847               	movf	(sin@f+2)^(0+256),w
 15569  09CF  0021               	movlb	1	; select bank1
 15570  09D0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15571  09D1  3187  274C  3188   	fcall	___ftmul
 15572  09D4  0021               	movlb	1	; select bank1
 15573  09D5  082E               	movf	?___ftmul^(0+128),w
 15574  09D6  0022               	movlb	2	; select bank2
 15575  09D7  00C5               	movwf	sin@f^(0+256)
 15576  09D8  0021               	movlb	1	; select bank1
 15577  09D9  082F               	movf	(?___ftmul+1)^(0+128),w
 15578  09DA  0022               	movlb	2	; select bank2
 15579  09DB  00C6               	movwf	(sin@f+1)^(0+256)
 15580  09DC  0021               	movlb	1	; select bank1
 15581  09DD  0830               	movf	(?___ftmul+2)^(0+128),w
 15582  09DE  0022               	movlb	2	; select bank2
 15583  09DF  00C7               	movwf	(sin@f+2)^(0+256)
 15584  09E0  0852               	movf	sin@sgn^(0+256),w
 15585  09E1  1903               	btfsc	3,2
 15586  09E2  0008               	return
 15587  09E3  0845               	movf	sin@f^(0+256),w
 15588  09E4  0021               	movlb	1	; select bank1
 15589  09E5  00BE               	movwf	___ftneg@f1^(0+128)
 15590  09E6  0022               	movlb	2	; select bank2
 15591  09E7  0846               	movf	(sin@f+1)^(0+256),w
 15592  09E8  0021               	movlb	1	; select bank1
 15593  09E9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 15594  09EA  0022               	movlb	2	; select bank2
 15595  09EB  0847               	movf	(sin@f+2)^(0+256),w
 15596  09EC  0021               	movlb	1	; select bank1
 15597  09ED  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 15598  09EE  31AD  2575         	fcall	___ftneg
 15599  09F0  0021               	movlb	1	; select bank1
 15600  09F1  083E               	movf	?___ftneg^(0+128),w
 15601  09F2  0022               	movlb	2	; select bank2
 15602  09F3  00C5               	movwf	?_sin^(0+256)
 15603  09F4  0021               	movlb	1	; select bank1
 15604  09F5  083F               	movf	(?___ftneg+1)^(0+128),w
 15605  09F6  0022               	movlb	2	; select bank2
 15606  09F7  00C6               	movwf	(?_sin+1)^(0+256)
 15607  09F8  0021               	movlb	1	; select bank1
 15608  09F9  0840               	movf	(?___ftneg+2)^(0+128),w
 15609  09FA  0022               	movlb	2	; select bank2
 15610  09FB  00C7               	movwf	(?_sin+2)^(0+256)
 15611  09FC  0008               	return
 15612  09FD                     __end_of_sin:	
 15613                           
 15614                           	psect	text47
 15615  1C79                     __ptext47:	
 15616 ;; *************** function _floor *****************
 15617 ;; Defined at:
 15618 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 15619 ;; Parameters:    Size  Location     Type
 15620 ;;  x               3   22[BANK2 ] unsigned char 
 15621 ;; Auto vars:     Size  Location     Type
 15622 ;;  i               3   26[BANK2 ] unsigned char 
 15623 ;;  expon           2   29[BANK2 ] int 
 15624 ;; Return value:  Size  Location     Type
 15625 ;;                  3   22[BANK2 ] int 
 15626 ;; Registers used:
 15627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15628 ;; Tracked objects:
 15629 ;;		On entry : 0/0
 15630 ;;		On exit  : 0/0
 15631 ;;		Unchanged: 0/0
 15632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15633 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15634 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15635 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15636 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15637 ;;Total ram usage:        9 bytes
 15638 ;; Hardware stack levels used:    1
 15639 ;; Hardware stack levels required when called:    5
 15640 ;; This function calls:
 15641 ;;		___altoft
 15642 ;;		___ftadd
 15643 ;;		___ftge
 15644 ;;		___fttol
 15645 ;;		_frexp
 15646 ;; This function is called by:
 15647 ;;		_sin
 15648 ;;		_exp
 15649 ;; This function uses a non-reentrant model
 15650 ;;
 15651                           
 15652                           
 15653                           ;psect for function _floor
 15654  1C79                     _floor:	
 15655                           
 15656                           ;incstack = 0
 15657                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15658  1C79  0022               	movlb	2	; select bank2
 15659  1C7A  0836               	movf	floor@x^(0+256),w
 15660  1C7B  0021               	movlb	1	; select bank1
 15661  1C7C  00A0               	movwf	frexp@value^(0+128)
 15662  1C7D  0022               	movlb	2	; select bank2
 15663  1C7E  0837               	movf	(floor@x+1)^(0+256),w
 15664  1C7F  0021               	movlb	1	; select bank1
 15665  1C80  00A1               	movwf	(frexp@value+1)^(0+128)
 15666  1C81  0022               	movlb	2	; select bank2
 15667  1C82  0838               	movf	(floor@x+2)^(0+256),w
 15668  1C83  0021               	movlb	1	; select bank1
 15669  1C84  00A2               	movwf	(frexp@value+2)^(0+128)
 15670  1C85  303D               	movlw	(low (floor@expon| (0+256)))& (0+255)
 15671  1C86  0022               	movlb	2	; select bank2
 15672  1C87  00B9               	movwf	??_floor^(0+256)
 15673  1C88  0839               	movf	??_floor^(0+256),w
 15674  1C89  0021               	movlb	1	; select bank1
 15675  1C8A  00A3               	movwf	frexp@eptr^(0+128)
 15676  1C8B  31A1  21E1  319C   	fcall	_frexp
 15677  1C8E  0022               	movlb	2	; select bank2
 15678  1C8F  1FBE               	btfss	(floor@expon+1)^(0+256),7
 15679  1C90  2CB7               	goto	l8081
 15680  1C91  0836               	movf	floor@x^(0+256),w
 15681  1C92  0021               	movlb	1	; select bank1
 15682  1C93  00A0               	movwf	___ftge@ff1^(0+128)
 15683  1C94  0022               	movlb	2	; select bank2
 15684  1C95  0837               	movf	(floor@x+1)^(0+256),w
 15685  1C96  0021               	movlb	1	; select bank1
 15686  1C97  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15687  1C98  0022               	movlb	2	; select bank2
 15688  1C99  0838               	movf	(floor@x+2)^(0+256),w
 15689  1C9A  0021               	movlb	1	; select bank1
 15690  1C9B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15691  1C9C  3000               	movlw	0
 15692  1C9D  00A3               	movwf	___ftge@ff2^(0+128)
 15693  1C9E  3000               	movlw	0
 15694  1C9F  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15695  1CA0  3000               	movlw	0
 15696  1CA1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15697  1CA2  31A1  212A  319C   	fcall	___ftge
 15698  1CA5  1803               	btfsc	3,0
 15699  1CA6  2CAF               	goto	l8077
 15700  1CA7  3000               	movlw	0
 15701  1CA8  0022               	movlb	2	; select bank2
 15702  1CA9  00B6               	movwf	?_floor^(0+256)
 15703  1CAA  3080               	movlw	128
 15704  1CAB  00B7               	movwf	(?_floor+1)^(0+256)
 15705  1CAC  30BF               	movlw	191
 15706  1CAD  00B8               	movwf	(?_floor+2)^(0+256)
 15707  1CAE  0008               	return
 15708  1CAF                     l8077:	
 15709  1CAF  3000               	movlw	0
 15710  1CB0  0022               	movlb	2	; select bank2
 15711  1CB1  00B6               	movwf	?_floor^(0+256)
 15712  1CB2  3000               	movlw	0
 15713  1CB3  00B7               	movwf	(?_floor+1)^(0+256)
 15714  1CB4  3000               	movlw	0
 15715  1CB5  00B8               	movwf	(?_floor+2)^(0+256)
 15716  1CB6  0008               	return
 15717  1CB7                     l8081:	
 15718  1CB7  3000               	movlw	0
 15719  1CB8  023E               	subwf	(floor@expon+1)^(0+256),w
 15720  1CB9  3015               	movlw	21
 15721  1CBA  1903               	skipnz
 15722  1CBB  023D               	subwf	floor@expon^(0+256),w
 15723  1CBC  1803               	btfsc	3,0
 15724  1CBD  0008               	return
 15725  1CBE  0836               	movf	floor@x^(0+256),w
 15726  1CBF  00A0               	movwf	___fttol@f1^(0+256)
 15727  1CC0  0837               	movf	(floor@x+1)^(0+256),w
 15728  1CC1  00A1               	movwf	(___fttol@f1+1)^(0+256)
 15729  1CC2  0838               	movf	(floor@x+2)^(0+256),w
 15730  1CC3  00A2               	movwf	(___fttol@f1+2)^(0+256)
 15731  1CC4  3199  21B3  319C   	fcall	___fttol
 15732  1CC7  0022               	movlb	2	; select bank2
 15733  1CC8  0823               	movf	(?___fttol+3)^(0+256),w
 15734  1CC9  00B1               	movwf	(___altoft@c+3)^(0+256)
 15735  1CCA  0822               	movf	(?___fttol+2)^(0+256),w
 15736  1CCB  00B0               	movwf	(___altoft@c+2)^(0+256)
 15737  1CCC  0821               	movf	(?___fttol+1)^(0+256),w
 15738  1CCD  00AF               	movwf	(___altoft@c+1)^(0+256)
 15739  1CCE  0820               	movf	?___fttol^(0+256),w
 15740  1CCF  00AE               	movwf	___altoft@c^(0+256)
 15741  1CD0  31A3  23FC  319C   	fcall	___altoft
 15742  1CD3  0022               	movlb	2	; select bank2
 15743  1CD4  082E               	movf	?___altoft^(0+256),w
 15744  1CD5  00BA               	movwf	floor@i^(0+256)
 15745  1CD6  082F               	movf	(?___altoft+1)^(0+256),w
 15746  1CD7  00BB               	movwf	(floor@i+1)^(0+256)
 15747  1CD8  0830               	movf	(?___altoft+2)^(0+256),w
 15748  1CD9  00BC               	movwf	(floor@i+2)^(0+256)
 15749  1CDA  0836               	movf	floor@x^(0+256),w
 15750  1CDB  0021               	movlb	1	; select bank1
 15751  1CDC  00A0               	movwf	___ftge@ff1^(0+128)
 15752  1CDD  0022               	movlb	2	; select bank2
 15753  1CDE  0837               	movf	(floor@x+1)^(0+256),w
 15754  1CDF  0021               	movlb	1	; select bank1
 15755  1CE0  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15756  1CE1  0022               	movlb	2	; select bank2
 15757  1CE2  0838               	movf	(floor@x+2)^(0+256),w
 15758  1CE3  0021               	movlb	1	; select bank1
 15759  1CE4  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15760  1CE5  0022               	movlb	2	; select bank2
 15761  1CE6  083A               	movf	floor@i^(0+256),w
 15762  1CE7  0021               	movlb	1	; select bank1
 15763  1CE8  00A3               	movwf	___ftge@ff2^(0+128)
 15764  1CE9  0022               	movlb	2	; select bank2
 15765  1CEA  083B               	movf	(floor@i+1)^(0+256),w
 15766  1CEB  0021               	movlb	1	; select bank1
 15767  1CEC  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15768  1CED  0022               	movlb	2	; select bank2
 15769  1CEE  083C               	movf	(floor@i+2)^(0+256),w
 15770  1CEF  0021               	movlb	1	; select bank1
 15771  1CF0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15772  1CF1  31A1  212A  319C   	fcall	___ftge
 15773  1CF4  1803               	btfsc	3,0
 15774  1CF5  2D18               	goto	l8091
 15775  1CF6  3000               	movlw	0
 15776  1CF7  0021               	movlb	1	; select bank1
 15777  1CF8  00C1               	movwf	___ftadd@f1^(0+128)
 15778  1CF9  3080               	movlw	128
 15779  1CFA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15780  1CFB  30BF               	movlw	191
 15781  1CFC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15782  1CFD  0022               	movlb	2	; select bank2
 15783  1CFE  083A               	movf	floor@i^(0+256),w
 15784  1CFF  0021               	movlb	1	; select bank1
 15785  1D00  00C4               	movwf	___ftadd@f2^(0+128)
 15786  1D01  0022               	movlb	2	; select bank2
 15787  1D02  083B               	movf	(floor@i+1)^(0+256),w
 15788  1D03  0021               	movlb	1	; select bank1
 15789  1D04  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15790  1D05  0022               	movlb	2	; select bank2
 15791  1D06  083C               	movf	(floor@i+2)^(0+256),w
 15792  1D07  0021               	movlb	1	; select bank1
 15793  1D08  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15794  1D09  3190  2026         	fcall	___ftadd
 15795  1D0B  0021               	movlb	1	; select bank1
 15796  1D0C  0841               	movf	?___ftadd^(0+128),w
 15797  1D0D  0022               	movlb	2	; select bank2
 15798  1D0E  00B6               	movwf	?_floor^(0+256)
 15799  1D0F  0021               	movlb	1	; select bank1
 15800  1D10  0842               	movf	(?___ftadd+1)^(0+128),w
 15801  1D11  0022               	movlb	2	; select bank2
 15802  1D12  00B7               	movwf	(?_floor+1)^(0+256)
 15803  1D13  0021               	movlb	1	; select bank1
 15804  1D14  0843               	movf	(?___ftadd+2)^(0+128),w
 15805  1D15  0022               	movlb	2	; select bank2
 15806  1D16  00B8               	movwf	(?_floor+2)^(0+256)
 15807  1D17  0008               	return
 15808  1D18                     l8091:	
 15809  1D18  0022               	movlb	2	; select bank2
 15810  1D19  083A               	movf	floor@i^(0+256),w
 15811  1D1A  00B6               	movwf	?_floor^(0+256)
 15812  1D1B  083B               	movf	(floor@i+1)^(0+256),w
 15813  1D1C  00B7               	movwf	(?_floor+1)^(0+256)
 15814  1D1D  083C               	movf	(floor@i+2)^(0+256),w
 15815  1D1E  00B8               	movwf	(?_floor+2)^(0+256)
 15816  1D1F  0008               	return
 15817  1D20                     __end_of_floor:	
 15818                           
 15819                           	psect	text48
 15820  21E1                     __ptext48:	
 15821 ;; *************** function _frexp *****************
 15822 ;; Defined at:
 15823 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 15824 ;; Parameters:    Size  Location     Type
 15825 ;;  value           3    0[BANK1 ] int 
 15826 ;;  eptr            1    3[BANK1 ] PTR int 
 15827 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 15828 ;; Auto vars:     Size  Location     Type
 15829 ;;		None
 15830 ;; Return value:  Size  Location     Type
 15831 ;;                  3    0[BANK1 ] PTR int 
 15832 ;; Registers used:
 15833 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15834 ;; Tracked objects:
 15835 ;;		On entry : 0/0
 15836 ;;		On exit  : 0/0
 15837 ;;		Unchanged: 0/0
 15838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15839 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15841 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15842 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15843 ;;Total ram usage:        6 bytes
 15844 ;; Hardware stack levels used:    1
 15845 ;; Hardware stack levels required when called:    3
 15846 ;; This function calls:
 15847 ;;		Nothing
 15848 ;; This function is called by:
 15849 ;;		_trunc
 15850 ;;		_floor
 15851 ;;		_log
 15852 ;; This function uses a non-reentrant model
 15853 ;;
 15854                           
 15855                           
 15856                           ;psect for function _frexp
 15857  21E1                     _frexp:	
 15858                           
 15859                           ;incstack = 0
 15860                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 15861  21E1  0021               	movlb	1	; select bank1
 15862  21E2  0822               	movf	(frexp@value+2)^(0+128),w
 15863  21E3  0421               	iorwf	(frexp@value+1)^(0+128),w
 15864  21E4  0420               	iorwf	frexp@value^(0+128),w
 15865  21E5  1D03               	skipz
 15866  21E6  29F5               	goto	l7943
 15867  21E7  0823               	movf	frexp@eptr^(0+128),w
 15868  21E8  0086               	movwf	6
 15869  21E9  3001               	movlw	1	; select bank2/3
 15870  21EA  0087               	movwf	7
 15871  21EB  3000               	movlw	0
 15872  21EC  3FC0               	movwi [0]fsr1
 15873  21ED  3FC1               	movwi [1]fsr1
 15874  21EE  3000               	movlw	0
 15875  21EF  00A0               	movwf	?_frexp^(0+128)
 15876  21F0  3000               	movlw	0
 15877  21F1  00A1               	movwf	(?_frexp+1)^(0+128)
 15878  21F2  3000               	movlw	0
 15879  21F3  00A2               	movwf	(?_frexp+2)^(0+128)
 15880  21F4  0008               	return
 15881  21F5                     l7943:	
 15882  21F5  0822               	movf	(frexp@value^(0+128)+2),w
 15883  21F6  397F               	andlw	127
 15884  21F7  00A4               	movwf	??_frexp^(0+128)
 15885  21F8  01A5               	clrf	(??_frexp^(0+128)+1)
 15886  21F9  35A4               	lslf	??_frexp^(0+128),f
 15887  21FA  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15888  21FB  0823               	movf	frexp@eptr^(0+128),w
 15889  21FC  0086               	movwf	6
 15890  21FD  3001               	movlw	1	; select bank2/3
 15891  21FE  0087               	movwf	7
 15892  21FF  0824               	movf	??_frexp^(0+128),w
 15893  2200  3FC0               	movwi [0]fsr1
 15894  2201  0825               	movf	(??_frexp+1)^(0+128),w
 15895  2202  3FC1               	movwi [1]fsr1
 15896  2203  0D21               	rlf	(frexp@value^(0+128)+1),w
 15897  2204  0D21               	rlf	(frexp@value^(0+128)+1),w
 15898  2205  3901               	andlw	1
 15899  2206  00A4               	movwf	??_frexp^(0+128)
 15900  2207  01A5               	clrf	(??_frexp^(0+128)+1)
 15901  2208  0823               	movf	frexp@eptr^(0+128),w
 15902  2209  0086               	movwf	6
 15903  220A  3001               	movlw	1	; select bank2/3
 15904  220B  0087               	movwf	7
 15905  220C  0824               	movf	??_frexp^(0+128),w
 15906  220D  0481               	iorwf	1,f
 15907  220E  3141               	addfsr 1,1
 15908  220F  0825               	movf	(??_frexp+1)^(0+128),w
 15909  2210  0481               	iorwf	1,f
 15910  2211  0823               	movf	frexp@eptr^(0+128),w
 15911  2212  0086               	movwf	6
 15912  2213  3001               	movlw	1	; select bank2/3
 15913  2214  0087               	movwf	7
 15914  2215  3082               	movlw	130
 15915  2216  0781               	addwf	1,f
 15916  2217  3141               	addfsr 1,1
 15917  2218  30FF               	movlw	255
 15918  2219  3D81               	addwfc	1,f
 15919  221A  317F               	addfsr 1,-1
 15920  221B  0822               	movf	(frexp@value^(0+128)+2),w
 15921  221C  3980               	andlw	-128
 15922  221D  383F               	iorlw	63
 15923  221E  00A2               	movwf	(frexp@value^(0+128)+2)
 15924  221F  13A1               	bcf	(frexp@value^(0+128)+1),7
 15925  2220  0008               	return
 15926  2221                     __end_of_frexp:	
 15927                           
 15928                           	psect	text49
 15929  19B3                     __ptext49:	
 15930 ;; *************** function ___fttol *****************
 15931 ;; Defined at:
 15932 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15933 ;; Parameters:    Size  Location     Type
 15934 ;;  f1              3    0[BANK2 ] float 
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;  lval            4    9[BANK2 ] unsigned long 
 15937 ;;  exp1            1   13[BANK2 ] unsigned char 
 15938 ;;  sign1           1    8[BANK2 ] unsigned char 
 15939 ;; Return value:  Size  Location     Type
 15940 ;;                  4    0[BANK2 ] long 
 15941 ;; Registers used:
 15942 ;;		wreg, status,2, status,0
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15948 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15949 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15950 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15951 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15952 ;;Total ram usage:       14 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; Hardware stack levels required when called:    3
 15955 ;; This function calls:
 15956 ;;		Nothing
 15957 ;; This function is called by:
 15958 ;;		_main
 15959 ;;		_set_subdivision
 15960 ;;		_scaleA100kPot
 15961 ;;		_scaleA10kPot
 15962 ;;		_scaleiA10kPot
 15963 ;;		_getModulationDelayTime
 15964 ;;		_modSin
 15965 ;;		_modTri
 15966 ;;		_modSaw
 15967 ;;		_pow
 15968 ;;		_trunc
 15969 ;;		_exp
 15970 ;;		_floor
 15971 ;;		_scaleiA100kPot
 15972 ;; This function uses a non-reentrant model
 15973 ;;
 15974                           
 15975                           
 15976                           ;psect for function ___fttol
 15977  19B3                     ___fttol:	
 15978                           
 15979                           ;incstack = 0
 15980                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15981  19B3  0022               	movlb	2	; select bank2
 15982  19B4  0820               	movf	___fttol@f1^(0+256),w
 15983  19B5  00A4               	movwf	??___fttol^(0+256)
 15984  19B6  0821               	movf	(___fttol@f1+1)^(0+256),w
 15985  19B7  00A5               	movwf	(??___fttol^(0+256)+1)
 15986  19B8  0822               	movf	(___fttol@f1+2)^(0+256),w
 15987  19B9  00A6               	movwf	(??___fttol^(0+256)+2)
 15988  19BA  1003               	clrc
 15989  19BB  0D25               	rlf	(??___fttol^(0+256)+1),w
 15990  19BC  0D26               	rlf	(??___fttol^(0+256)+2),w
 15991  19BD  00A7               	movwf	(??___fttol+3)^(0+256)
 15992  19BE  0827               	movf	(??___fttol+3)^(0+256),w
 15993  19BF  00AD               	movwf	___fttol@exp1^(0+256)
 15994  19C0  082D               	movf	___fttol@exp1^(0+256),w
 15995  19C1  1D03               	btfss	3,2
 15996  19C2  29CC               	goto	l7899
 15997  19C3  3000               	movlw	0
 15998  19C4  00A3               	movwf	(?___fttol+3)^(0+256)
 15999  19C5  3000               	movlw	0
 16000  19C6  00A2               	movwf	(?___fttol+2)^(0+256)
 16001  19C7  3000               	movlw	0
 16002  19C8  00A1               	movwf	(?___fttol+1)^(0+256)
 16003  19C9  3000               	movlw	0
 16004  19CA  00A0               	movwf	?___fttol^(0+256)
 16005  19CB  0008               	return
 16006  19CC                     l7899:	
 16007  19CC  0820               	movf	___fttol@f1^(0+256),w
 16008  19CD  00A4               	movwf	??___fttol^(0+256)
 16009  19CE  0821               	movf	(___fttol@f1+1)^(0+256),w
 16010  19CF  00A5               	movwf	(??___fttol^(0+256)+1)
 16011  19D0  0822               	movf	(___fttol@f1+2)^(0+256),w
 16012  19D1  00A6               	movwf	(??___fttol^(0+256)+2)
 16013  19D2  3017               	movlw	23
 16014  19D3                     u8265:	
 16015  19D3  36A6               	lsrf	(??___fttol^(0+256)+2),f
 16016  19D4  0CA5               	rrf	(??___fttol^(0+256)+1),f
 16017  19D5  0CA4               	rrf	??___fttol^(0+256),f
 16018  19D6  0B89               	decfsz	9,f
 16019  19D7  29D3               	goto	u8265
 16020  19D8  0824               	movf	??___fttol^(0+256),w
 16021  19D9  00A7               	movwf	(??___fttol+3)^(0+256)
 16022  19DA  0827               	movf	(??___fttol+3)^(0+256),w
 16023  19DB  00A8               	movwf	___fttol@sign1^(0+256)
 16024  19DC  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 16025  19DD  30FF               	movlw	255
 16026  19DE  05A0               	andwf	___fttol@f1^(0+256),f
 16027  19DF  30FF               	movlw	255
 16028  19E0  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 16029  19E1  3000               	movlw	0
 16030  19E2  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 16031  19E3  0820               	movf	___fttol@f1^(0+256),w
 16032  19E4  00A9               	movwf	___fttol@lval^(0+256)
 16033  19E5  0821               	movf	(___fttol@f1+1)^(0+256),w
 16034  19E6  00AA               	movwf	(___fttol@lval^(0+256)+1)
 16035  19E7  0822               	movf	(___fttol@f1+2)^(0+256),w
 16036  19E8  00AB               	movwf	(___fttol@lval^(0+256)+2)
 16037  19E9  01AC               	clrf	(___fttol@lval^(0+256)+3)
 16038  19EA  308E               	movlw	142
 16039  19EB  02AD               	subwf	___fttol@exp1^(0+256),f
 16040  19EC  1FAD               	btfss	___fttol@exp1^(0+256),7
 16041  19ED  2A0A               	goto	l7919
 16042  19EE  082D               	movf	___fttol@exp1^(0+256),w
 16043  19EF  3A80               	xorlw	128
 16044  19F0  3E8F               	addlw	143
 16045  19F1  1803               	skipnc
 16046  19F2  29FC               	goto	l7917
 16047  19F3  3000               	movlw	0
 16048  19F4  00A3               	movwf	(?___fttol+3)^(0+256)
 16049  19F5  3000               	movlw	0
 16050  19F6  00A2               	movwf	(?___fttol+2)^(0+256)
 16051  19F7  3000               	movlw	0
 16052  19F8  00A1               	movwf	(?___fttol+1)^(0+256)
 16053  19F9  3000               	movlw	0
 16054  19FA  00A0               	movwf	?___fttol^(0+256)
 16055  19FB  0008               	return
 16056  19FC                     l7917:	
 16057  19FC  3001               	movlw	1
 16058  19FD                     u8295:	
 16059  19FD  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 16060  19FE  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 16061  19FF  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 16062  1A00  0CA9               	rrf	___fttol@lval^(0+256),f
 16063  1A01  0B89               	decfsz	9,f
 16064  1A02  29FD               	goto	u8295
 16065  1A03  3001               	movlw	1
 16066  1A04  00A4               	movwf	??___fttol^(0+256)
 16067  1A05  0824               	movf	??___fttol^(0+256),w
 16068  1A06  07AD               	addwf	___fttol@exp1^(0+256),f
 16069  1A07  1903               	btfsc	3,2
 16070  1A08  2A23               	goto	l7927
 16071  1A09  29FC               	goto	l7917
 16072  1A0A                     l7919:	
 16073  1A0A  3018               	movlw	24
 16074  1A0B  022D               	subwf	___fttol@exp1^(0+256),w
 16075  1A0C  1C03               	skipc
 16076  1A0D  2A20               	goto	l2194
 16077  1A0E  3000               	movlw	0
 16078  1A0F  00A3               	movwf	(?___fttol+3)^(0+256)
 16079  1A10  3000               	movlw	0
 16080  1A11  00A2               	movwf	(?___fttol+2)^(0+256)
 16081  1A12  3000               	movlw	0
 16082  1A13  00A1               	movwf	(?___fttol+1)^(0+256)
 16083  1A14  3000               	movlw	0
 16084  1A15  00A0               	movwf	?___fttol^(0+256)
 16085  1A16  0008               	return
 16086  1A17                     l7925:	
 16087  1A17  3001               	movlw	1
 16088  1A18                     u8325:	
 16089  1A18  35A9               	lslf	___fttol@lval^(0+256),f
 16090  1A19  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 16091  1A1A  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 16092  1A1B  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 16093  1A1C  0B89               	decfsz	9,f
 16094  1A1D  2A18               	goto	u8325
 16095  1A1E  3001               	movlw	1
 16096  1A1F  02AD               	subwf	___fttol@exp1^(0+256),f
 16097  1A20                     l2194:	
 16098  1A20  082D               	movf	___fttol@exp1^(0+256),w
 16099  1A21  1D03               	btfss	3,2
 16100  1A22  2A17               	goto	l7925
 16101  1A23                     l7927:	
 16102  1A23  0828               	movf	___fttol@sign1^(0+256),w
 16103  1A24  1903               	btfsc	3,2
 16104  1A25  2A31               	goto	l7931
 16105  1A26  09A9               	comf	___fttol@lval^(0+256),f
 16106  1A27  09AA               	comf	(___fttol@lval+1)^(0+256),f
 16107  1A28  09AB               	comf	(___fttol@lval+2)^(0+256),f
 16108  1A29  09AC               	comf	(___fttol@lval+3)^(0+256),f
 16109  1A2A  0AA9               	incf	___fttol@lval^(0+256),f
 16110  1A2B  1903               	skipnz
 16111  1A2C  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 16112  1A2D  1903               	skipnz
 16113  1A2E  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 16114  1A2F  1903               	skipnz
 16115  1A30  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 16116  1A31                     l7931:	
 16117  1A31  082C               	movf	(___fttol@lval+3)^(0+256),w
 16118  1A32  00A3               	movwf	(?___fttol+3)^(0+256)
 16119  1A33  082B               	movf	(___fttol@lval+2)^(0+256),w
 16120  1A34  00A2               	movwf	(?___fttol+2)^(0+256)
 16121  1A35  082A               	movf	(___fttol@lval+1)^(0+256),w
 16122  1A36  00A1               	movwf	(?___fttol+1)^(0+256)
 16123  1A37  0829               	movf	___fttol@lval^(0+256),w
 16124  1A38  00A0               	movwf	?___fttol^(0+256)
 16125  1A39  0008               	return
 16126  1A3A                     __end_of___fttol:	
 16127                           
 16128                           	psect	text50
 16129  212A                     __ptext50:	
 16130 ;; *************** function ___ftge *****************
 16131 ;; Defined at:
 16132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 16133 ;; Parameters:    Size  Location     Type
 16134 ;;  ff1             3    0[BANK1 ] float 
 16135 ;;  ff2             3    3[BANK1 ] float 
 16136 ;; Auto vars:     Size  Location     Type
 16137 ;;		None
 16138 ;; Return value:  Size  Location     Type
 16139 ;;		None               void
 16140 ;; Registers used:
 16141 ;;		wreg, status,2, status,0
 16142 ;; Tracked objects:
 16143 ;;		On entry : 0/0
 16144 ;;		On exit  : 0/0
 16145 ;;		Unchanged: 0/0
 16146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16147 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16149 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16150 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16151 ;;Total ram usage:        9 bytes
 16152 ;; Hardware stack levels used:    1
 16153 ;; Hardware stack levels required when called:    3
 16154 ;; This function calls:
 16155 ;;		Nothing
 16156 ;; This function is called by:
 16157 ;;		_modSin
 16158 ;;		_modTri
 16159 ;;		_modSaw
 16160 ;;		_modSquare
 16161 ;;		_pow
 16162 ;;		_sin
 16163 ;;		_exp
 16164 ;;		_floor
 16165 ;;		_ldexp
 16166 ;;		_log
 16167 ;; This function uses a non-reentrant model
 16168 ;;
 16169                           
 16170                           
 16171                           ;psect for function ___ftge
 16172  212A                     ___ftge:	
 16173                           
 16174                           ;incstack = 0
 16175                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 16176  212A  0021               	movlb	1	; select bank1
 16177  212B  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 16178  212C  2941               	goto	l7819
 16179  212D  0920               	comf	___ftge@ff1^(0+128),w
 16180  212E  00A6               	movwf	??___ftge^(0+128)
 16181  212F  0921               	comf	(___ftge@ff1+1)^(0+128),w
 16182  2130  00A7               	movwf	(??___ftge^(0+128)+1)
 16183  2131  0922               	comf	(___ftge@ff1+2)^(0+128),w
 16184  2132  00A8               	movwf	(??___ftge^(0+128)+2)
 16185  2133  0AA6               	incf	??___ftge^(0+128),f
 16186  2134  1903               	skipnz
 16187  2135  0AA7               	incf	(??___ftge^(0+128)+1),f
 16188  2136  1903               	skipnz
 16189  2137  0AA8               	incf	(??___ftge^(0+128)+2),f
 16190  2138  3000               	movlw	0
 16191  2139  0726               	addwf	??___ftge^(0+128),w
 16192  213A  00A0               	movwf	___ftge@ff1^(0+128)
 16193  213B  3000               	movlw	0
 16194  213C  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16195  213D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 16196  213E  3080               	movlw	128
 16197  213F  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16198  2140  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 16199  2141                     l7819:	
 16200  2141  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 16201  2142  2957               	goto	l7823
 16202  2143  0923               	comf	___ftge@ff2^(0+128),w
 16203  2144  00A6               	movwf	??___ftge^(0+128)
 16204  2145  0924               	comf	(___ftge@ff2+1)^(0+128),w
 16205  2146  00A7               	movwf	(??___ftge^(0+128)+1)
 16206  2147  0925               	comf	(___ftge@ff2+2)^(0+128),w
 16207  2148  00A8               	movwf	(??___ftge^(0+128)+2)
 16208  2149  0AA6               	incf	??___ftge^(0+128),f
 16209  214A  1903               	skipnz
 16210  214B  0AA7               	incf	(??___ftge^(0+128)+1),f
 16211  214C  1903               	skipnz
 16212  214D  0AA8               	incf	(??___ftge^(0+128)+2),f
 16213  214E  3000               	movlw	0
 16214  214F  0726               	addwf	??___ftge^(0+128),w
 16215  2150  00A3               	movwf	___ftge@ff2^(0+128)
 16216  2151  3000               	movlw	0
 16217  2152  3D27               	addwfc	(??___ftge+1)^(0+128),w
 16218  2153  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 16219  2154  3080               	movlw	128
 16220  2155  3D28               	addwfc	(??___ftge+2)^(0+128),w
 16221  2156  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 16222  2157                     l7823:	
 16223  2157  3080               	movlw	128
 16224  2158  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 16225  2159  3080               	movlw	128
 16226  215A  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 16227  215B  0825               	movf	(___ftge@ff2+2)^(0+128),w
 16228  215C  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 16229  215D  1D03               	skipz
 16230  215E  0008               	return
 16231  215F  0824               	movf	(___ftge@ff2+1)^(0+128),w
 16232  2160  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 16233  2161  1D03               	skipz
 16234  2162  0008               	return
 16235  2163  0823               	movf	___ftge@ff2^(0+128),w
 16236  2164  0220               	subwf	___ftge@ff1^(0+128),w
 16237  2165  0008               	return
 16238  2166                     __end_of___ftge:	
 16239                           
 16240                           	psect	text51
 16241  23FC                     __ptext51:	
 16242 ;; *************** function ___altoft *****************
 16243 ;; Defined at:
 16244 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 16245 ;; Parameters:    Size  Location     Type
 16246 ;;  c               4   14[BANK2 ] long 
 16247 ;; Auto vars:     Size  Location     Type
 16248 ;;  sign            1   21[BANK2 ] unsigned char 
 16249 ;;  exp             1   20[BANK2 ] unsigned char 
 16250 ;; Return value:  Size  Location     Type
 16251 ;;                  3   14[BANK2 ] float 
 16252 ;; Registers used:
 16253 ;;		wreg, status,2, status,0, pclath, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16259 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16260 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16261 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16262 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16263 ;;Total ram usage:        8 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    4
 16266 ;; This function calls:
 16267 ;;		___ftpack
 16268 ;; This function is called by:
 16269 ;;		_getModulationDelayTime
 16270 ;;		_trunc
 16271 ;;		_floor
 16272 ;; This function uses a non-reentrant model
 16273 ;;
 16274                           
 16275                           
 16276                           ;psect for function ___altoft
 16277  23FC                     ___altoft:	
 16278                           
 16279                           ;incstack = 0
 16280                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 16281  23FC  0022               	movlb	2	; select bank2
 16282  23FD  01B5               	clrf	___altoft@sign^(0+256)
 16283  23FE  308E               	movlw	142
 16284  23FF  00B2               	movwf	??___altoft^(0+256)
 16285  2400  0832               	movf	??___altoft^(0+256),w
 16286  2401  00B4               	movwf	___altoft@exp^(0+256)
 16287  2402  1FB1               	btfss	(___altoft@c+3)^(0+256),7
 16288  2403  2C11               	goto	l7739
 16289  2404  09AE               	comf	___altoft@c^(0+256),f
 16290  2405  09AF               	comf	(___altoft@c+1)^(0+256),f
 16291  2406  09B0               	comf	(___altoft@c+2)^(0+256),f
 16292  2407  09B1               	comf	(___altoft@c+3)^(0+256),f
 16293  2408  0AAE               	incf	___altoft@c^(0+256),f
 16294  2409  1903               	skipnz
 16295  240A  0AAF               	incf	(___altoft@c+1)^(0+256),f
 16296  240B  1903               	skipnz
 16297  240C  0AB0               	incf	(___altoft@c+2)^(0+256),f
 16298  240D  1903               	skipnz
 16299  240E  0AB1               	incf	(___altoft@c+3)^(0+256),f
 16300  240F  01B5               	clrf	___altoft@sign^(0+256)
 16301  2410  0AB5               	incf	___altoft@sign^(0+256),f
 16302  2411                     l7739:	
 16303  2411  30FF               	movlw	255
 16304  2412  0531               	andwf	(___altoft@c+3)^(0+256),w
 16305  2413  1903               	btfsc	3,2
 16306  2414  2C21               	goto	l7741
 16307  2415  3001               	movlw	1
 16308  2416                     u7845:	
 16309  2416  36B1               	lsrf	(___altoft@c+3)^(0+256),f
 16310  2417  0CB0               	rrf	(___altoft@c+2)^(0+256),f
 16311  2418  0CAF               	rrf	(___altoft@c+1)^(0+256),f
 16312  2419  0CAE               	rrf	___altoft@c^(0+256),f
 16313  241A  0B89               	decfsz	9,f
 16314  241B  2C16               	goto	u7845
 16315  241C  3001               	movlw	1
 16316  241D  00B2               	movwf	??___altoft^(0+256)
 16317  241E  0832               	movf	??___altoft^(0+256),w
 16318  241F  07B4               	addwf	___altoft@exp^(0+256),f
 16319  2420  2C11               	goto	l7739
 16320  2421                     l7741:	
 16321  2421  082E               	movf	___altoft@c^(0+256),w
 16322  2422  0021               	movlb	1	; select bank1
 16323  2423  00A0               	movwf	___ftpack@arg^(0+128)
 16324  2424  0022               	movlb	2	; select bank2
 16325  2425  082F               	movf	(___altoft@c+1)^(0+256),w
 16326  2426  0021               	movlb	1	; select bank1
 16327  2427  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16328  2428  0022               	movlb	2	; select bank2
 16329  2429  0830               	movf	(___altoft@c+2)^(0+256),w
 16330  242A  0021               	movlb	1	; select bank1
 16331  242B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16332  242C  0022               	movlb	2	; select bank2
 16333  242D  0834               	movf	___altoft@exp^(0+256),w
 16334  242E  00B2               	movwf	??___altoft^(0+256)
 16335  242F  0832               	movf	??___altoft^(0+256),w
 16336  2430  0021               	movlb	1	; select bank1
 16337  2431  00A3               	movwf	___ftpack@exp^(0+128)
 16338  2432  0022               	movlb	2	; select bank2
 16339  2433  0835               	movf	___altoft@sign^(0+256),w
 16340  2434  00B3               	movwf	(??___altoft+1)^(0+256)
 16341  2435  0833               	movf	(??___altoft+1)^(0+256),w
 16342  2436  0021               	movlb	1	; select bank1
 16343  2437  00A4               	movwf	___ftpack@sign^(0+128)
 16344  2438  31A6  2632         	fcall	___ftpack
 16345  243A  0021               	movlb	1	; select bank1
 16346  243B  0820               	movf	?___ftpack^(0+128),w
 16347  243C  0022               	movlb	2	; select bank2
 16348  243D  00AE               	movwf	?___altoft^(0+256)
 16349  243E  0021               	movlb	1	; select bank1
 16350  243F  0821               	movf	(?___ftpack+1)^(0+128),w
 16351  2440  0022               	movlb	2	; select bank2
 16352  2441  00AF               	movwf	(?___altoft+1)^(0+256)
 16353  2442  0021               	movlb	1	; select bank1
 16354  2443  0822               	movf	(?___ftpack+2)^(0+128),w
 16355  2444  0022               	movlb	2	; select bank2
 16356  2445  00B0               	movwf	(?___altoft+2)^(0+256)
 16357  2446  0008               	return
 16358  2447                     __end_of___altoft:	
 16359                           
 16360                           	psect	text52
 16361  2697                     __ptext52:	
 16362 ;; *************** function _eval_poly *****************
 16363 ;; Defined at:
 16364 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 16365 ;; Parameters:    Size  Location     Type
 16366 ;;  x               3   20[BANK2 ] float 
 16367 ;;  d               2   23[BANK2 ] PTR const 
 16368 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 16369 ;;  n               2   25[BANK2 ] int 
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;  res             3   27[BANK2 ] int 
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  3   20[BANK2 ] int 
 16374 ;; Registers used:
 16375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16381 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16382 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16384 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16385 ;;Total ram usage:       10 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    5
 16388 ;; This function calls:
 16389 ;;		___ftadd
 16390 ;;		___ftmul
 16391 ;;		___wmul
 16392 ;; This function is called by:
 16393 ;;		_sin
 16394 ;;		_exp
 16395 ;;		_log
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           
 16400                           ;psect for function _eval_poly
 16401  2697                     _eval_poly:	
 16402                           
 16403                           ;incstack = 0
 16404                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16405  2697  0022               	movlb	2	; select bank2
 16406  2698  083A               	movf	(eval_poly@n+1)^(0+256),w
 16407  2699  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16408  269A  0839               	movf	eval_poly@n^(0+256),w
 16409  269B  00AE               	movwf	___wmul@multiplier^(0+256)
 16410  269C  3003               	movlw	3
 16411  269D  00B0               	movwf	___wmul@multiplicand^(0+256)
 16412  269E  3000               	movlw	0
 16413  269F  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16414  26A0  31AE  261E  31A6   	fcall	___wmul
 16415  26A3  0022               	movlb	2	; select bank2
 16416  26A4  0837               	movf	eval_poly@d^(0+256),w
 16417  26A5  072E               	addwf	?___wmul^(0+256),w
 16418  26A6  0084               	movwf	4
 16419  26A7  0838               	movf	(eval_poly@d+1)^(0+256),w
 16420  26A8  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16421  26A9  0085               	movwf	5
 16422  26AA  3F00               	moviw [0]fsr0
 16423  26AB  00BB               	movwf	eval_poly@res^(0+256)
 16424  26AC  3F01               	moviw [1]fsr0
 16425  26AD  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16426  26AE  3F02               	moviw [2]fsr0
 16427  26AF                     L20:	
 16428  26AF  00BD               	movwf	(eval_poly@res+2)^(0+256)
 16429  26B0  0839               	movf	eval_poly@n^(0+256),w
 16430  26B1  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 16431  26B2  1903               	btfsc	3,2
 16432  26B3  2F02               	goto	l8101
 16433  26B4  30FF               	movlw	255
 16434  26B5  07B9               	addwf	eval_poly@n^(0+256),f
 16435  26B6  30FF               	movlw	255
 16436  26B7  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 16437  26B8  083A               	movf	(eval_poly@n+1)^(0+256),w
 16438  26B9  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 16439  26BA  0839               	movf	eval_poly@n^(0+256),w
 16440  26BB  00AE               	movwf	___wmul@multiplier^(0+256)
 16441  26BC  3003               	movlw	3
 16442  26BD  00B0               	movwf	___wmul@multiplicand^(0+256)
 16443  26BE  3000               	movlw	0
 16444  26BF  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 16445  26C0  31AE  261E  31A6   	fcall	___wmul
 16446  26C3  0022               	movlb	2	; select bank2
 16447  26C4  0837               	movf	eval_poly@d^(0+256),w
 16448  26C5  072E               	addwf	?___wmul^(0+256),w
 16449  26C6  0084               	movwf	4
 16450  26C7  0838               	movf	(eval_poly@d+1)^(0+256),w
 16451  26C8  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 16452  26C9  0085               	movwf	5
 16453  26CA  3F00               	moviw [0]fsr0
 16454  26CB  0021               	movlb	1	; select bank1
 16455  26CC  00C1               	movwf	___ftadd@f1^(0+128)
 16456  26CD  3F01               	moviw [1]fsr0
 16457  26CE  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16458  26CF  3F02               	moviw [2]fsr0
 16459  26D0  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16460  26D1  0022               	movlb	2	; select bank2
 16461  26D2  083B               	movf	eval_poly@res^(0+256),w
 16462  26D3  0021               	movlb	1	; select bank1
 16463  26D4  00AE               	movwf	___ftmul@f1^(0+128)
 16464  26D5  0022               	movlb	2	; select bank2
 16465  26D6  083C               	movf	(eval_poly@res+1)^(0+256),w
 16466  26D7  0021               	movlb	1	; select bank1
 16467  26D8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 16468  26D9  0022               	movlb	2	; select bank2
 16469  26DA  083D               	movf	(eval_poly@res+2)^(0+256),w
 16470  26DB  0021               	movlb	1	; select bank1
 16471  26DC  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 16472  26DD  0022               	movlb	2	; select bank2
 16473  26DE  0834               	movf	eval_poly@x^(0+256),w
 16474  26DF  0021               	movlb	1	; select bank1
 16475  26E0  00B1               	movwf	___ftmul@f2^(0+128)
 16476  26E1  0022               	movlb	2	; select bank2
 16477  26E2  0835               	movf	(eval_poly@x+1)^(0+256),w
 16478  26E3  0021               	movlb	1	; select bank1
 16479  26E4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 16480  26E5  0022               	movlb	2	; select bank2
 16481  26E6  0836               	movf	(eval_poly@x+2)^(0+256),w
 16482  26E7  0021               	movlb	1	; select bank1
 16483  26E8  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 16484  26E9  3187  274C  31A6   	fcall	___ftmul
 16485  26EC  0021               	movlb	1	; select bank1
 16486  26ED  082E               	movf	?___ftmul^(0+128),w
 16487  26EE  00C4               	movwf	___ftadd@f2^(0+128)
 16488  26EF  082F               	movf	(?___ftmul+1)^(0+128),w
 16489  26F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16490  26F1  0830               	movf	(?___ftmul+2)^(0+128),w
 16491  26F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16492  26F3  3190  2026  31A6   	fcall	___ftadd
 16493  26F6  0021               	movlb	1	; select bank1
 16494  26F7  0841               	movf	?___ftadd^(0+128),w
 16495  26F8  0022               	movlb	2	; select bank2
 16496  26F9  00BB               	movwf	eval_poly@res^(0+256)
 16497  26FA  0021               	movlb	1	; select bank1
 16498  26FB  0842               	movf	(?___ftadd+1)^(0+128),w
 16499  26FC  0022               	movlb	2	; select bank2
 16500  26FD  00BC               	movwf	(eval_poly@res+1)^(0+256)
 16501  26FE  0021               	movlb	1	; select bank1
 16502  26FF  0843               	movf	(?___ftadd+2)^(0+128),w
 16503  2700  0022               	movlb	2	; select bank2
 16504  2701  2EAF               	goto	L20
 16505  2702                     l8101:	
 16506  2702  083B               	movf	eval_poly@res^(0+256),w
 16507  2703  00B4               	movwf	?_eval_poly^(0+256)
 16508  2704  083C               	movf	(eval_poly@res+1)^(0+256),w
 16509  2705  00B5               	movwf	(?_eval_poly+1)^(0+256)
 16510  2706  083D               	movf	(eval_poly@res+2)^(0+256),w
 16511  2707  00B6               	movwf	(?_eval_poly+2)^(0+256)
 16512  2708  0008               	return
 16513  2709                     __end_of_eval_poly:	
 16514                           
 16515                           	psect	text53
 16516  2E1E                     __ptext53:	
 16517 ;; *************** function ___wmul *****************
 16518 ;; Defined at:
 16519 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 16520 ;; Parameters:    Size  Location     Type
 16521 ;;  multiplier      2   14[BANK2 ] unsigned int 
 16522 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;  product         2   18[BANK2 ] unsigned int 
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  2   14[BANK2 ] unsigned int 
 16527 ;; Registers used:
 16528 ;;		wreg, status,2, status,0
 16529 ;; Tracked objects:
 16530 ;;		On entry : 0/0
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16534 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16535 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16537 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16538 ;;Total ram usage:        6 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    3
 16541 ;; This function calls:
 16542 ;;		Nothing
 16543 ;; This function is called by:
 16544 ;;		_calcSinArray
 16545 ;;		_getModulationDelayTime
 16546 ;;		_updateModulationArray
 16547 ;;		_modSin
 16548 ;;		_eval_poly
 16549 ;; This function uses a non-reentrant model
 16550 ;;
 16551                           
 16552                           
 16553                           ;psect for function ___wmul
 16554  2E1E                     ___wmul:	
 16555                           
 16556                           ;incstack = 0
 16557                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16558  2E1E  0022               	movlb	2	; select bank2
 16559  2E1F  01B2               	clrf	___wmul@product^(0+256)
 16560  2E20  01B3               	clrf	(___wmul@product+1)^(0+256)
 16561  2E21                     l7717:	
 16562  2E21  1C2E               	btfss	___wmul@multiplier^(0+256),0
 16563  2E22  2E27               	goto	l1942
 16564  2E23  0830               	movf	___wmul@multiplicand^(0+256),w
 16565  2E24  07B2               	addwf	___wmul@product^(0+256),f
 16566  2E25  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 16567  2E26  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 16568  2E27                     l1942:	
 16569  2E27  3001               	movlw	1
 16570  2E28                     u7805:	
 16571  2E28  35B0               	lslf	___wmul@multiplicand^(0+256),f
 16572  2E29  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 16573  2E2A  0B89               	decfsz	9,f
 16574  2E2B  2E28               	goto	u7805
 16575  2E2C  3001               	movlw	1
 16576  2E2D                     u7815:	
 16577  2E2D  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 16578  2E2E  0CAE               	rrf	___wmul@multiplier^(0+256),f
 16579  2E2F  0B89               	decfsz	9,f
 16580  2E30  2E2D               	goto	u7815
 16581  2E31  082E               	movf	___wmul@multiplier^(0+256),w
 16582  2E32  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 16583  2E33  1D03               	btfss	3,2
 16584  2E34  2E21               	goto	l7717
 16585  2E35  0833               	movf	(___wmul@product+1)^(0+256),w
 16586  2E36  00AF               	movwf	(?___wmul+1)^(0+256)
 16587  2E37  0832               	movf	___wmul@product^(0+256),w
 16588  2E38  00AE               	movwf	?___wmul^(0+256)
 16589  2E39  0008               	return
 16590  2E3A                     __end_of___wmul:	
 16591                           
 16592                           	psect	text54
 16593  074C                     __ptext54:	
 16594 ;; *************** function ___ftmul *****************
 16595 ;; Defined at:
 16596 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 16597 ;; Parameters:    Size  Location     Type
 16598 ;;  f1              3   14[BANK1 ] float 
 16599 ;;  f2              3   17[BANK1 ] float 
 16600 ;; Auto vars:     Size  Location     Type
 16601 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 16602 ;;  sign            1   29[BANK1 ] unsigned char 
 16603 ;;  cntr            1   28[BANK1 ] unsigned char 
 16604 ;;  exp             1   24[BANK1 ] unsigned char 
 16605 ;; Return value:  Size  Location     Type
 16606 ;;                  3   14[BANK1 ] float 
 16607 ;; Registers used:
 16608 ;;		wreg, status,2, status,0, pclath, cstack
 16609 ;; Tracked objects:
 16610 ;;		On entry : 0/0
 16611 ;;		On exit  : 0/0
 16612 ;;		Unchanged: 0/0
 16613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16614 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16615 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16616 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16617 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16618 ;;Total ram usage:       16 bytes
 16619 ;; Hardware stack levels used:    1
 16620 ;; Hardware stack levels required when called:    4
 16621 ;; This function calls:
 16622 ;;		___ftpack
 16623 ;; This function is called by:
 16624 ;;		_set_subdivision
 16625 ;;		_map
 16626 ;;		_scaleA100kPot
 16627 ;;		_scaleA10kPot
 16628 ;;		_scaleiA10kPot
 16629 ;;		_calcSinArray
 16630 ;;		_modSin
 16631 ;;		_modTri
 16632 ;;		_modSaw
 16633 ;;		_pow
 16634 ;;		_sin
 16635 ;;		_eval_poly
 16636 ;;		_exp
 16637 ;;		_log
 16638 ;;		_scalePotValue
 16639 ;;		_scaleiA100kPot
 16640 ;; This function uses a non-reentrant model
 16641 ;;
 16642                           
 16643                           
 16644                           ;psect for function ___ftmul
 16645  074C                     ___ftmul:	
 16646                           
 16647                           ;incstack = 0
 16648                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16649  074C  0021               	movlb	1	; select bank1
 16650  074D  082E               	movf	___ftmul@f1^(0+128),w
 16651  074E  00B4               	movwf	??___ftmul^(0+128)
 16652  074F  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16653  0750  00B5               	movwf	(??___ftmul^(0+128)+1)
 16654  0751  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16655  0752  00B6               	movwf	(??___ftmul^(0+128)+2)
 16656  0753  1003               	clrc
 16657  0754  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16658  0755  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16659  0756  00B7               	movwf	(??___ftmul+3)^(0+128)
 16660  0757  0837               	movf	(??___ftmul+3)^(0+128),w
 16661  0758  00B8               	movwf	___ftmul@exp^(0+128)
 16662  0759  0838               	movf	___ftmul@exp^(0+128),w
 16663  075A  1D03               	btfss	3,2
 16664  075B  2F63               	goto	l7841
 16665  075C  3000               	movlw	0
 16666  075D  00AE               	movwf	?___ftmul^(0+128)
 16667  075E  3000               	movlw	0
 16668  075F  00AF               	movwf	(?___ftmul+1)^(0+128)
 16669  0760  3000               	movlw	0
 16670  0761  00B0               	movwf	(?___ftmul+2)^(0+128)
 16671  0762  0008               	return
 16672  0763                     l7841:	
 16673  0763  0831               	movf	___ftmul@f2^(0+128),w
 16674  0764  00B4               	movwf	??___ftmul^(0+128)
 16675  0765  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16676  0766  00B5               	movwf	(??___ftmul^(0+128)+1)
 16677  0767  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16678  0768  00B6               	movwf	(??___ftmul^(0+128)+2)
 16679  0769  1003               	clrc
 16680  076A  0D35               	rlf	(??___ftmul^(0+128)+1),w
 16681  076B  0D36               	rlf	(??___ftmul^(0+128)+2),w
 16682  076C  00B7               	movwf	(??___ftmul+3)^(0+128)
 16683  076D  0837               	movf	(??___ftmul+3)^(0+128),w
 16684  076E  00BD               	movwf	___ftmul@sign^(0+128)
 16685  076F  083D               	movf	___ftmul@sign^(0+128),w
 16686  0770  1D03               	btfss	3,2
 16687  0771  2F79               	goto	l7847
 16688  0772  3000               	movlw	0
 16689  0773  00AE               	movwf	?___ftmul^(0+128)
 16690  0774  3000               	movlw	0
 16691  0775  00AF               	movwf	(?___ftmul+1)^(0+128)
 16692  0776  3000               	movlw	0
 16693  0777  00B0               	movwf	(?___ftmul+2)^(0+128)
 16694  0778  0008               	return
 16695  0779                     l7847:	
 16696  0779  083D               	movf	___ftmul@sign^(0+128),w
 16697  077A  3E7B               	addlw	123
 16698  077B  00B4               	movwf	??___ftmul^(0+128)
 16699  077C  0834               	movf	??___ftmul^(0+128),w
 16700  077D  07B8               	addwf	___ftmul@exp^(0+128),f
 16701  077E  082E               	movf	___ftmul@f1^(0+128),w
 16702  077F  00B4               	movwf	??___ftmul^(0+128)
 16703  0780  082F               	movf	(___ftmul@f1+1)^(0+128),w
 16704  0781  00B5               	movwf	(??___ftmul^(0+128)+1)
 16705  0782  0830               	movf	(___ftmul@f1+2)^(0+128),w
 16706  0783  00B6               	movwf	(??___ftmul^(0+128)+2)
 16707  0784  3010               	movlw	16
 16708  0785                     u8145:	
 16709  0785  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16710  0786  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16711  0787  0CB4               	rrf	??___ftmul^(0+128),f
 16712  0788  0B89               	decfsz	9,f
 16713  0789  2F85               	goto	u8145
 16714  078A  0834               	movf	??___ftmul^(0+128),w
 16715  078B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16716  078C  0837               	movf	(??___ftmul+3)^(0+128),w
 16717  078D  00BD               	movwf	___ftmul@sign^(0+128)
 16718  078E  0831               	movf	___ftmul@f2^(0+128),w
 16719  078F  00B4               	movwf	??___ftmul^(0+128)
 16720  0790  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16721  0791  00B5               	movwf	(??___ftmul^(0+128)+1)
 16722  0792  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16723  0793  00B6               	movwf	(??___ftmul^(0+128)+2)
 16724  0794  3010               	movlw	16
 16725  0795                     u8155:	
 16726  0795  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 16727  0796  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 16728  0797  0CB4               	rrf	??___ftmul^(0+128),f
 16729  0798  0B89               	decfsz	9,f
 16730  0799  2F95               	goto	u8155
 16731  079A  0834               	movf	??___ftmul^(0+128),w
 16732  079B  00B7               	movwf	(??___ftmul+3)^(0+128)
 16733  079C  0837               	movf	(??___ftmul+3)^(0+128),w
 16734  079D  06BD               	xorwf	___ftmul@sign^(0+128),f
 16735  079E  3080               	movlw	128
 16736  079F  00B4               	movwf	??___ftmul^(0+128)
 16737  07A0  0834               	movf	??___ftmul^(0+128),w
 16738  07A1  05BD               	andwf	___ftmul@sign^(0+128),f
 16739  07A2  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 16740  07A3  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 16741  07A4  30FF               	movlw	255
 16742  07A5  05B1               	andwf	___ftmul@f2^(0+128),f
 16743  07A6  30FF               	movlw	255
 16744  07A7  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 16745  07A8  3000               	movlw	0
 16746  07A9  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 16747  07AA  3000               	movlw	0
 16748  07AB  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 16749  07AC  3000               	movlw	0
 16750  07AD  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 16751  07AE  3000               	movlw	0
 16752  07AF  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 16753  07B0  3007               	movlw	7
 16754  07B1  00B4               	movwf	??___ftmul^(0+128)
 16755  07B2  0834               	movf	??___ftmul^(0+128),w
 16756  07B3  00BC               	movwf	___ftmul@cntr^(0+128)
 16757  07B4                     l7859:	
 16758  07B4  1C2E               	btfss	___ftmul@f1^(0+128),0
 16759  07B5  2FBC               	goto	l7863
 16760  07B6  0831               	movf	___ftmul@f2^(0+128),w
 16761  07B7  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16762  07B8  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16763  07B9  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16764  07BA  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16765  07BB  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16766  07BC                     l7863:	
 16767  07BC  3001               	movlw	1
 16768  07BD                     u8175:	
 16769  07BD  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16770  07BE  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16771  07BF  0CAE               	rrf	___ftmul@f1^(0+128),f
 16772  07C0  0B89               	decfsz	9,f
 16773  07C1  2FBD               	goto	u8175
 16774  07C2  3001               	movlw	1
 16775  07C3                     u8185:	
 16776  07C3  35B1               	lslf	___ftmul@f2^(0+128),f
 16777  07C4  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 16778  07C5  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 16779  07C6  0B89               	decfsz	9,f
 16780  07C7  2FC3               	goto	u8185
 16781  07C8  3001               	movlw	1
 16782  07C9  02BC               	subwf	___ftmul@cntr^(0+128),f
 16783  07CA  1D03               	btfss	3,2
 16784  07CB  2FB4               	goto	l7859
 16785  07CC  3009               	movlw	9
 16786  07CD  00B4               	movwf	??___ftmul^(0+128)
 16787  07CE  0834               	movf	??___ftmul^(0+128),w
 16788  07CF  00BC               	movwf	___ftmul@cntr^(0+128)
 16789  07D0                     l7871:	
 16790  07D0  1C2E               	btfss	___ftmul@f1^(0+128),0
 16791  07D1  2FD8               	goto	l7875
 16792  07D2  0831               	movf	___ftmul@f2^(0+128),w
 16793  07D3  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 16794  07D4  0832               	movf	(___ftmul@f2+1)^(0+128),w
 16795  07D5  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 16796  07D6  0833               	movf	(___ftmul@f2+2)^(0+128),w
 16797  07D7  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 16798  07D8                     l7875:	
 16799  07D8  3001               	movlw	1
 16800  07D9                     u8215:	
 16801  07D9  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 16802  07DA  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 16803  07DB  0CAE               	rrf	___ftmul@f1^(0+128),f
 16804  07DC  0B89               	decfsz	9,f
 16805  07DD  2FD9               	goto	u8215
 16806  07DE  3001               	movlw	1
 16807  07DF                     u8225:	
 16808  07DF  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 16809  07E0  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 16810  07E1  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 16811  07E2  0B89               	decfsz	9,f
 16812  07E3  2FDF               	goto	u8225
 16813  07E4  3001               	movlw	1
 16814  07E5  02BC               	subwf	___ftmul@cntr^(0+128),f
 16815  07E6  1D03               	btfss	3,2
 16816  07E7  2FD0               	goto	l7871
 16817  07E8  0839               	movf	___ftmul@f3_as_product^(0+128),w
 16818  07E9  00A0               	movwf	___ftpack@arg^(0+128)
 16819  07EA  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 16820  07EB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16821  07EC  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 16822  07ED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16823  07EE  0838               	movf	___ftmul@exp^(0+128),w
 16824  07EF  00B4               	movwf	??___ftmul^(0+128)
 16825  07F0  0834               	movf	??___ftmul^(0+128),w
 16826  07F1  00A3               	movwf	___ftpack@exp^(0+128)
 16827  07F2  083D               	movf	___ftmul@sign^(0+128),w
 16828  07F3  00B5               	movwf	(??___ftmul+1)^(0+128)
 16829  07F4  0835               	movf	(??___ftmul+1)^(0+128),w
 16830  07F5  00A4               	movwf	___ftpack@sign^(0+128)
 16831  07F6  31A6  2632         	fcall	___ftpack
 16832  07F8  0021               	movlb	1	; select bank1
 16833  07F9  0820               	movf	?___ftpack^(0+128),w
 16834  07FA  00AE               	movwf	?___ftmul^(0+128)
 16835  07FB  0821               	movf	(?___ftpack+1)^(0+128),w
 16836  07FC  00AF               	movwf	(?___ftmul+1)^(0+128)
 16837  07FD  0822               	movf	(?___ftpack+2)^(0+128),w
 16838  07FE  00B0               	movwf	(?___ftmul+2)^(0+128)
 16839  07FF  0008               	return
 16840  0800                     __end_of___ftmul:	
 16841                           
 16842                           	psect	text55
 16843  0800                     __ptext55:	
 16844 ;; *************** function ___ftsub *****************
 16845 ;; Defined at:
 16846 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16847 ;; Parameters:    Size  Location     Type
 16848 ;;  f2              3   31[BANK2 ] float 
 16849 ;;  f1              3   34[BANK2 ] float 
 16850 ;; Auto vars:     Size  Location     Type
 16851 ;;		None
 16852 ;; Return value:  Size  Location     Type
 16853 ;;                  3   31[BANK2 ] float 
 16854 ;; Registers used:
 16855 ;;		wreg, status,2, status,0, pclath, cstack
 16856 ;; Tracked objects:
 16857 ;;		On entry : 0/0
 16858 ;;		On exit  : 0/0
 16859 ;;		Unchanged: 0/0
 16860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16861 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16864 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16865 ;;Total ram usage:        6 bytes
 16866 ;; Hardware stack levels used:    1
 16867 ;; Hardware stack levels required when called:    5
 16868 ;; This function calls:
 16869 ;;		___ftadd
 16870 ;; This function is called by:
 16871 ;;		_sin
 16872 ;;		_exp
 16873 ;; This function uses a non-reentrant model
 16874 ;;
 16875                           
 16876                           
 16877                           ;psect for function ___ftsub
 16878  0800                     ___ftsub:	
 16879                           
 16880                           ;incstack = 0
 16881                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16882  0800  0022               	movlb	2	; select bank2
 16883  0801  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16884  0802  0440               	iorwf	(___ftsub@f2+1)^(0+256),w
 16885  0803  043F               	iorwf	___ftsub@f2^(0+256),w
 16886  0804  1903               	skipnz
 16887  0805  2808               	goto	l8063
 16888  0806  3080               	movlw	128
 16889  0807  06C1               	xorwf	(___ftsub@f2+2)^(0+256),f
 16890  0808                     l8063:	
 16891  0808  0842               	movf	___ftsub@f1^(0+256),w
 16892  0809  0021               	movlb	1	; select bank1
 16893  080A  00C1               	movwf	___ftadd@f1^(0+128)
 16894  080B  0022               	movlb	2	; select bank2
 16895  080C  0843               	movf	(___ftsub@f1+1)^(0+256),w
 16896  080D  0021               	movlb	1	; select bank1
 16897  080E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16898  080F  0022               	movlb	2	; select bank2
 16899  0810  0844               	movf	(___ftsub@f1+2)^(0+256),w
 16900  0811  0021               	movlb	1	; select bank1
 16901  0812  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16902  0813  0022               	movlb	2	; select bank2
 16903  0814  083F               	movf	___ftsub@f2^(0+256),w
 16904  0815  0021               	movlb	1	; select bank1
 16905  0816  00C4               	movwf	___ftadd@f2^(0+128)
 16906  0817  0022               	movlb	2	; select bank2
 16907  0818  0840               	movf	(___ftsub@f2+1)^(0+256),w
 16908  0819  0021               	movlb	1	; select bank1
 16909  081A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16910  081B  0022               	movlb	2	; select bank2
 16911  081C  0841               	movf	(___ftsub@f2+2)^(0+256),w
 16912  081D  0021               	movlb	1	; select bank1
 16913  081E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16914  081F  3190  2026         	fcall	___ftadd
 16915  0821  0021               	movlb	1	; select bank1
 16916  0822  0841               	movf	?___ftadd^(0+128),w
 16917  0823  0022               	movlb	2	; select bank2
 16918  0824  00BF               	movwf	?___ftsub^(0+256)
 16919  0825  0021               	movlb	1	; select bank1
 16920  0826  0842               	movf	(?___ftadd+1)^(0+128),w
 16921  0827  0022               	movlb	2	; select bank2
 16922  0828  00C0               	movwf	(?___ftsub+1)^(0+256)
 16923  0829  0021               	movlb	1	; select bank1
 16924  082A  0843               	movf	(?___ftadd+2)^(0+128),w
 16925  082B  0022               	movlb	2	; select bank2
 16926  082C  00C1               	movwf	(?___ftsub+2)^(0+256)
 16927  082D  0008               	return
 16928  082E                     __end_of___ftsub:	
 16929                           
 16930                           	psect	text56
 16931  1026                     __ptext56:	
 16932 ;; *************** function ___ftadd *****************
 16933 ;; Defined at:
 16934 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16935 ;; Parameters:    Size  Location     Type
 16936 ;;  f1              3   33[BANK1 ] float 
 16937 ;;  f2              3   36[BANK1 ] float 
 16938 ;; Auto vars:     Size  Location     Type
 16939 ;;  exp1            1   45[BANK1 ] unsigned char 
 16940 ;;  exp2            1   44[BANK1 ] unsigned char 
 16941 ;;  sign            1   43[BANK1 ] unsigned char 
 16942 ;; Return value:  Size  Location     Type
 16943 ;;                  3   33[BANK1 ] float 
 16944 ;; Registers used:
 16945 ;;		wreg, status,2, status,0, pclath, cstack
 16946 ;; Tracked objects:
 16947 ;;		On entry : 0/0
 16948 ;;		On exit  : 0/0
 16949 ;;		Unchanged: 0/0
 16950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16951 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16952 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16953 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16954 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16955 ;;Total ram usage:       13 bytes
 16956 ;; Hardware stack levels used:    1
 16957 ;; Hardware stack levels required when called:    4
 16958 ;; This function calls:
 16959 ;;		___ftpack
 16960 ;; This function is called by:
 16961 ;;		_map
 16962 ;;		_scaleiA10kPot
 16963 ;;		_modSin
 16964 ;;		_modTri
 16965 ;;		_modSaw
 16966 ;;		___ftsub
 16967 ;;		_sin
 16968 ;;		_eval_poly
 16969 ;;		_floor
 16970 ;;		_log
 16971 ;;		_scalePotValue
 16972 ;; This function uses a non-reentrant model
 16973 ;;
 16974                           
 16975                           
 16976                           ;psect for function ___ftadd
 16977  1026                     ___ftadd:	
 16978                           
 16979                           ;incstack = 0
 16980                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16981  1026  0021               	movlb	1	; select bank1
 16982  1027  0841               	movf	___ftadd@f1^(0+128),w
 16983  1028  00C7               	movwf	??___ftadd^(0+128)
 16984  1029  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16985  102A  00C8               	movwf	(??___ftadd^(0+128)+1)
 16986  102B  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16987  102C  00C9               	movwf	(??___ftadd^(0+128)+2)
 16988  102D  1003               	clrc
 16989  102E  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16990  102F  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16991  1030  00CA               	movwf	(??___ftadd+3)^(0+128)
 16992  1031  084A               	movf	(??___ftadd+3)^(0+128),w
 16993  1032  00CD               	movwf	___ftadd@exp1^(0+128)
 16994  1033  0844               	movf	___ftadd@f2^(0+128),w
 16995  1034  00C7               	movwf	??___ftadd^(0+128)
 16996  1035  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16997  1036  00C8               	movwf	(??___ftadd^(0+128)+1)
 16998  1037  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16999  1038  00C9               	movwf	(??___ftadd^(0+128)+2)
 17000  1039  1003               	clrc
 17001  103A  0D48               	rlf	(??___ftadd^(0+128)+1),w
 17002  103B  0D49               	rlf	(??___ftadd^(0+128)+2),w
 17003  103C  00CA               	movwf	(??___ftadd+3)^(0+128)
 17004  103D  084A               	movf	(??___ftadd+3)^(0+128),w
 17005  103E  00CC               	movwf	___ftadd@exp2^(0+128)
 17006  103F  084D               	movf	___ftadd@exp1^(0+128),w
 17007  1040  1903               	btfsc	3,2
 17008  1041  284E               	goto	l7751
 17009  1042  084C               	movf	___ftadd@exp2^(0+128),w
 17010  1043  024D               	subwf	___ftadd@exp1^(0+128),w
 17011  1044  1803               	skipnc
 17012  1045  2855               	goto	l7755
 17013  1046  034D               	decf	___ftadd@exp1^(0+128),w
 17014  1047  3AFF               	xorlw	255
 17015  1048  074C               	addwf	___ftadd@exp2^(0+128),w
 17016  1049  00C7               	movwf	??___ftadd^(0+128)
 17017  104A  3019               	movlw	25
 17018  104B  0247               	subwf	??___ftadd^(0+128),w
 17019  104C  1C03               	skipc
 17020  104D  2855               	goto	l7755
 17021  104E                     l7751:	
 17022  104E  0844               	movf	___ftadd@f2^(0+128),w
 17023  104F  00C1               	movwf	?___ftadd^(0+128)
 17024  1050  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17025  1051  00C2               	movwf	(?___ftadd+1)^(0+128)
 17026  1052  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17027  1053  00C3               	movwf	(?___ftadd+2)^(0+128)
 17028  1054  0008               	return
 17029  1055                     l7755:	
 17030  1055  084C               	movf	___ftadd@exp2^(0+128),w
 17031  1056  1903               	btfsc	3,2
 17032  1057  0008               	return
 17033  1058  084D               	movf	___ftadd@exp1^(0+128),w
 17034  1059  024C               	subwf	___ftadd@exp2^(0+128),w
 17035  105A  1803               	skipnc
 17036  105B  2864               	goto	l7761
 17037  105C  034C               	decf	___ftadd@exp2^(0+128),w
 17038  105D  3AFF               	xorlw	255
 17039  105E  074D               	addwf	___ftadd@exp1^(0+128),w
 17040  105F  00C7               	movwf	??___ftadd^(0+128)
 17041  1060  3019               	movlw	25
 17042  1061  0247               	subwf	??___ftadd^(0+128),w
 17043  1062  1803               	btfsc	3,0
 17044  1063  0008               	return
 17045  1064                     l7761:	
 17046  1064  3006               	movlw	6
 17047  1065  00C7               	movwf	??___ftadd^(0+128)
 17048  1066  0847               	movf	??___ftadd^(0+128),w
 17049  1067  00CB               	movwf	___ftadd@sign^(0+128)
 17050  1068  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 17051  1069  17CB               	bsf	___ftadd@sign^(0+128),7
 17052  106A  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 17053  106B  174B               	bsf	___ftadd@sign^(0+128),6
 17054  106C  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 17055  106D  30FF               	movlw	255
 17056  106E  05C1               	andwf	___ftadd@f1^(0+128),f
 17057  106F  30FF               	movlw	255
 17058  1070  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 17059  1071  3000               	movlw	0
 17060  1072  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 17061  1073  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 17062  1074  30FF               	movlw	255
 17063  1075  05C4               	andwf	___ftadd@f2^(0+128),f
 17064  1076  30FF               	movlw	255
 17065  1077  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 17066  1078  3000               	movlw	0
 17067  1079  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 17068  107A  084C               	movf	___ftadd@exp2^(0+128),w
 17069  107B  024D               	subwf	___ftadd@exp1^(0+128),w
 17070  107C  1803               	skipnc
 17071  107D  28A0               	goto	l7783
 17072  107E                     l7773:	
 17073  107E  3001               	movlw	1
 17074  107F                     u7955:	
 17075  107F  35C4               	lslf	___ftadd@f2^(0+128),f
 17076  1080  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 17077  1081  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 17078  1082  0B89               	decfsz	9,f
 17079  1083  287F               	goto	u7955
 17080  1084  3001               	movlw	1
 17081  1085  02CC               	subwf	___ftadd@exp2^(0+128),f
 17082  1086  084C               	movf	___ftadd@exp2^(0+128),w
 17083  1087  064D               	xorwf	___ftadd@exp1^(0+128),w
 17084  1088  1903               	skipnz
 17085  1089  289B               	goto	l7781
 17086  108A  3001               	movlw	1
 17087  108B  02CB               	subwf	___ftadd@sign^(0+128),f
 17088  108C  084B               	movf	___ftadd@sign^(0+128),w
 17089  108D  3907               	andlw	7
 17090  108E  1903               	btfsc	3,2
 17091  108F  289B               	goto	l7781
 17092  1090  287E               	goto	l7773
 17093  1091                     l7779:	
 17094  1091  3001               	movlw	1
 17095  1092                     u7985:	
 17096  1092  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 17097  1093  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 17098  1094  0CC1               	rrf	___ftadd@f1^(0+128),f
 17099  1095  0B89               	decfsz	9,f
 17100  1096  2892               	goto	u7985
 17101  1097  3001               	movlw	1
 17102  1098  00C7               	movwf	??___ftadd^(0+128)
 17103  1099  0847               	movf	??___ftadd^(0+128),w
 17104  109A  07CD               	addwf	___ftadd@exp1^(0+128),f
 17105  109B                     l7781:	
 17106  109B  084D               	movf	___ftadd@exp1^(0+128),w
 17107  109C  064C               	xorwf	___ftadd@exp2^(0+128),w
 17108  109D  1903               	btfsc	3,2
 17109  109E  28C5               	goto	l2134
 17110  109F  2891               	goto	l7779
 17111  10A0                     l7783:	
 17112  10A0  084D               	movf	___ftadd@exp1^(0+128),w
 17113  10A1  024C               	subwf	___ftadd@exp2^(0+128),w
 17114  10A2  1803               	skipnc
 17115  10A3  28C5               	goto	l2134
 17116  10A4                     l7785:	
 17117  10A4  3001               	movlw	1
 17118  10A5                     u8015:	
 17119  10A5  35C1               	lslf	___ftadd@f1^(0+128),f
 17120  10A6  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 17121  10A7  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 17122  10A8  0B89               	decfsz	9,f
 17123  10A9  28A5               	goto	u8015
 17124  10AA  3001               	movlw	1
 17125  10AB  02CD               	subwf	___ftadd@exp1^(0+128),f
 17126  10AC  084C               	movf	___ftadd@exp2^(0+128),w
 17127  10AD  064D               	xorwf	___ftadd@exp1^(0+128),w
 17128  10AE  1903               	skipnz
 17129  10AF  28C1               	goto	l7793
 17130  10B0  3001               	movlw	1
 17131  10B1  02CB               	subwf	___ftadd@sign^(0+128),f
 17132  10B2  084B               	movf	___ftadd@sign^(0+128),w
 17133  10B3  3907               	andlw	7
 17134  10B4  1903               	btfsc	3,2
 17135  10B5  28C1               	goto	l7793
 17136  10B6  28A4               	goto	l7785
 17137  10B7                     l7791:	
 17138  10B7  3001               	movlw	1
 17139  10B8                     u8045:	
 17140  10B8  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 17141  10B9  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 17142  10BA  0CC4               	rrf	___ftadd@f2^(0+128),f
 17143  10BB  0B89               	decfsz	9,f
 17144  10BC  28B8               	goto	u8045
 17145  10BD  3001               	movlw	1
 17146  10BE  00C7               	movwf	??___ftadd^(0+128)
 17147  10BF  0847               	movf	??___ftadd^(0+128),w
 17148  10C0  07CC               	addwf	___ftadd@exp2^(0+128),f
 17149  10C1                     l7793:	
 17150  10C1  084D               	movf	___ftadd@exp1^(0+128),w
 17151  10C2  064C               	xorwf	___ftadd@exp2^(0+128),w
 17152  10C3  1D03               	skipz
 17153  10C4  28B7               	goto	l7791
 17154  10C5                     l2134:	
 17155  10C5  1FCB               	btfss	___ftadd@sign^(0+128),7
 17156  10C6  28D7               	goto	l7797
 17157  10C7  30FF               	movlw	255
 17158  10C8  06C1               	xorwf	___ftadd@f1^(0+128),f
 17159  10C9  30FF               	movlw	255
 17160  10CA  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 17161  10CB  30FF               	movlw	255
 17162  10CC  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 17163  10CD  3001               	movlw	1
 17164  10CE  07C1               	addwf	___ftadd@f1^(0+128),f
 17165  10CF  3000               	movlw	0
 17166  10D0  1803               	skipnc
 17167  10D1  3001               	movlw	1
 17168  10D2  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 17169  10D3  3000               	movlw	0
 17170  10D4  1803               	skipnc
 17171  10D5  3001               	movlw	1
 17172  10D6  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 17173  10D7                     l7797:	
 17174  10D7  1F4B               	btfss	___ftadd@sign^(0+128),6
 17175  10D8  28E9               	goto	l7801
 17176  10D9  30FF               	movlw	255
 17177  10DA  06C4               	xorwf	___ftadd@f2^(0+128),f
 17178  10DB  30FF               	movlw	255
 17179  10DC  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17180  10DD  30FF               	movlw	255
 17181  10DE  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17182  10DF  3001               	movlw	1
 17183  10E0  07C4               	addwf	___ftadd@f2^(0+128),f
 17184  10E1  3000               	movlw	0
 17185  10E2  1803               	skipnc
 17186  10E3  3001               	movlw	1
 17187  10E4  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17188  10E5  3000               	movlw	0
 17189  10E6  1803               	skipnc
 17190  10E7  3001               	movlw	1
 17191  10E8  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17192  10E9                     l7801:	
 17193  10E9  01CB               	clrf	___ftadd@sign^(0+128)
 17194  10EA  0841               	movf	___ftadd@f1^(0+128),w
 17195  10EB  07C4               	addwf	___ftadd@f2^(0+128),f
 17196  10EC  0842               	movf	(___ftadd@f1+1)^(0+128),w
 17197  10ED  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 17198  10EE  0843               	movf	(___ftadd@f1+2)^(0+128),w
 17199  10EF  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 17200  10F0  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 17201  10F1  2904               	goto	l7811
 17202  10F2  30FF               	movlw	255
 17203  10F3  06C4               	xorwf	___ftadd@f2^(0+128),f
 17204  10F4  30FF               	movlw	255
 17205  10F5  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 17206  10F6  30FF               	movlw	255
 17207  10F7  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 17208  10F8  3001               	movlw	1
 17209  10F9  07C4               	addwf	___ftadd@f2^(0+128),f
 17210  10FA  3000               	movlw	0
 17211  10FB  1803               	skipnc
 17212  10FC  3001               	movlw	1
 17213  10FD  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 17214  10FE  3000               	movlw	0
 17215  10FF  1803               	skipnc
 17216  1100  3001               	movlw	1
 17217  1101  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 17218  1102  01CB               	clrf	___ftadd@sign^(0+128)
 17219  1103  0ACB               	incf	___ftadd@sign^(0+128),f
 17220  1104                     l7811:	
 17221  1104  0844               	movf	___ftadd@f2^(0+128),w
 17222  1105  00A0               	movwf	___ftpack@arg^(0+128)
 17223  1106  0845               	movf	(___ftadd@f2+1)^(0+128),w
 17224  1107  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17225  1108  0846               	movf	(___ftadd@f2+2)^(0+128),w
 17226  1109  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17227  110A  084D               	movf	___ftadd@exp1^(0+128),w
 17228  110B  00C7               	movwf	??___ftadd^(0+128)
 17229  110C  0847               	movf	??___ftadd^(0+128),w
 17230  110D  00A3               	movwf	___ftpack@exp^(0+128)
 17231  110E  084B               	movf	___ftadd@sign^(0+128),w
 17232  110F  00C8               	movwf	(??___ftadd+1)^(0+128)
 17233  1110  0848               	movf	(??___ftadd+1)^(0+128),w
 17234  1111  00A4               	movwf	___ftpack@sign^(0+128)
 17235  1112  31A6  2632         	fcall	___ftpack
 17236  1114  0021               	movlb	1	; select bank1
 17237  1115  0820               	movf	?___ftpack^(0+128),w
 17238  1116  00C1               	movwf	?___ftadd^(0+128)
 17239  1117  0821               	movf	(?___ftpack+1)^(0+128),w
 17240  1118  00C2               	movwf	(?___ftadd+1)^(0+128)
 17241  1119  0822               	movf	(?___ftpack+2)^(0+128),w
 17242  111A  00C3               	movwf	(?___ftadd+2)^(0+128)
 17243  111B  0008               	return
 17244  111C                     __end_of___ftadd:	
 17245                           
 17246                           	psect	text57
 17247  2D75                     __ptext57:	
 17248 ;; *************** function ___ftneg *****************
 17249 ;; Defined at:
 17250 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17251 ;; Parameters:    Size  Location     Type
 17252 ;;  f1              3   30[BANK1 ] float 
 17253 ;; Auto vars:     Size  Location     Type
 17254 ;;		None
 17255 ;; Return value:  Size  Location     Type
 17256 ;;                  3   30[BANK1 ] float 
 17257 ;; Registers used:
 17258 ;;		wreg
 17259 ;; Tracked objects:
 17260 ;;		On entry : 0/0
 17261 ;;		On exit  : 0/0
 17262 ;;		Unchanged: 0/0
 17263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17264 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17267 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17268 ;;Total ram usage:        3 bytes
 17269 ;; Hardware stack levels used:    1
 17270 ;; Hardware stack levels required when called:    3
 17271 ;; This function calls:
 17272 ;;		Nothing
 17273 ;; This function is called by:
 17274 ;;		_map
 17275 ;;		_scaleiA10kPot
 17276 ;;		_modSin
 17277 ;;		_modTri
 17278 ;;		_modSaw
 17279 ;;		_pow
 17280 ;;		_sin
 17281 ;;		_exp
 17282 ;;		_ldexp
 17283 ;;		_scalePotValue
 17284 ;; This function uses a non-reentrant model
 17285 ;;
 17286                           
 17287                           
 17288                           ;psect for function ___ftneg
 17289  2D75                     ___ftneg:	
 17290                           
 17291                           ;incstack = 0
 17292                           ; Regs used in ___ftneg: [wreg]
 17293  2D75  0021               	movlb	1	; select bank1
 17294  2D76  0840               	movf	(___ftneg@f1+2)^(0+128),w
 17295  2D77  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 17296  2D78  043E               	iorwf	___ftneg@f1^(0+128),w
 17297  2D79  1903               	skipnz
 17298  2D7A  0008               	return
 17299  2D7B  3080               	movlw	128
 17300  2D7C  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 17301  2D7D  0008               	return
 17302  2D7E                     __end_of___ftneg:	
 17303                           
 17304                           	psect	text58
 17305  1D20                     __ptext58:	
 17306 ;; *************** function ___ftdiv *****************
 17307 ;; Defined at:
 17308 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17309 ;; Parameters:    Size  Location     Type
 17310 ;;  f2              3   46[BANK1 ] float 
 17311 ;;  f1              3   49[BANK1 ] float 
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;  f3              3   57[BANK1 ] float 
 17314 ;;  sign            1   61[BANK1 ] unsigned char 
 17315 ;;  exp             1   60[BANK1 ] unsigned char 
 17316 ;;  cntr            1   56[BANK1 ] unsigned char 
 17317 ;; Return value:  Size  Location     Type
 17318 ;;                  3   46[BANK1 ] float 
 17319 ;; Registers used:
 17320 ;;		wreg, status,2, status,0, pclath, cstack
 17321 ;; Tracked objects:
 17322 ;;		On entry : 0/0
 17323 ;;		On exit  : 0/0
 17324 ;;		Unchanged: 0/0
 17325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17326 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17327 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17328 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17329 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17330 ;;Total ram usage:       16 bytes
 17331 ;; Hardware stack levels used:    1
 17332 ;; Hardware stack levels required when called:    4
 17333 ;; This function calls:
 17334 ;;		___ftpack
 17335 ;; This function is called by:
 17336 ;;		_map
 17337 ;;		_scaleA100kPot
 17338 ;;		_scaleA10kPot
 17339 ;;		_scaleiA10kPot
 17340 ;;		_calcSinArray
 17341 ;;		_getModulationDelayTime
 17342 ;;		_modSin
 17343 ;;		_modTri
 17344 ;;		_modSaw
 17345 ;;		_sin
 17346 ;;		_exp
 17347 ;;		_scalePotValue
 17348 ;;		_scaleiA100kPot
 17349 ;; This function uses a non-reentrant model
 17350 ;;
 17351                           
 17352                           
 17353                           ;psect for function ___ftdiv
 17354  1D20                     ___ftdiv:	
 17355                           
 17356                           ;incstack = 0
 17357                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17358  1D20  0021               	movlb	1	; select bank1
 17359  1D21  0851               	movf	___ftdiv@f1^(0+128),w
 17360  1D22  00D4               	movwf	??___ftdiv^(0+128)
 17361  1D23  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17362  1D24  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17363  1D25  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17364  1D26  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17365  1D27  1003               	clrc
 17366  1D28  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17367  1D29  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17368  1D2A  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17369  1D2B  0857               	movf	(??___ftdiv+3)^(0+128),w
 17370  1D2C  00DC               	movwf	___ftdiv@exp^(0+128)
 17371  1D2D  085C               	movf	___ftdiv@exp^(0+128),w
 17372  1D2E  1D03               	btfss	3,2
 17373  1D2F  2D37               	goto	l8023
 17374  1D30  3000               	movlw	0
 17375  1D31  00CE               	movwf	?___ftdiv^(0+128)
 17376  1D32  3000               	movlw	0
 17377  1D33  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17378  1D34  3000               	movlw	0
 17379  1D35  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17380  1D36  0008               	return
 17381  1D37                     l8023:	
 17382  1D37  084E               	movf	___ftdiv@f2^(0+128),w
 17383  1D38  00D4               	movwf	??___ftdiv^(0+128)
 17384  1D39  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17385  1D3A  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17386  1D3B  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17387  1D3C  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17388  1D3D  1003               	clrc
 17389  1D3E  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 17390  1D3F  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 17391  1D40  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17392  1D41  0857               	movf	(??___ftdiv+3)^(0+128),w
 17393  1D42  00DD               	movwf	___ftdiv@sign^(0+128)
 17394  1D43  085D               	movf	___ftdiv@sign^(0+128),w
 17395  1D44  1D03               	btfss	3,2
 17396  1D45  2D4D               	goto	l8029
 17397  1D46  3000               	movlw	0
 17398  1D47  00CE               	movwf	?___ftdiv^(0+128)
 17399  1D48  3000               	movlw	0
 17400  1D49  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17401  1D4A  3000               	movlw	0
 17402  1D4B  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17403  1D4C  0008               	return
 17404  1D4D                     l8029:	
 17405  1D4D  3000               	movlw	0
 17406  1D4E  00D9               	movwf	___ftdiv@f3^(0+128)
 17407  1D4F  3000               	movlw	0
 17408  1D50  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 17409  1D51  3000               	movlw	0
 17410  1D52  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 17411  1D53  3089               	movlw	137
 17412  1D54  075D               	addwf	___ftdiv@sign^(0+128),w
 17413  1D55  00D4               	movwf	??___ftdiv^(0+128)
 17414  1D56  0854               	movf	??___ftdiv^(0+128),w
 17415  1D57  02DC               	subwf	___ftdiv@exp^(0+128),f
 17416  1D58  0851               	movf	___ftdiv@f1^(0+128),w
 17417  1D59  00D4               	movwf	??___ftdiv^(0+128)
 17418  1D5A  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 17419  1D5B  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17420  1D5C  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 17421  1D5D  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17422  1D5E  3010               	movlw	16
 17423  1D5F                     u8445:	
 17424  1D5F  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17425  1D60  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17426  1D61  0CD4               	rrf	??___ftdiv^(0+128),f
 17427  1D62  0B89               	decfsz	9,f
 17428  1D63  2D5F               	goto	u8445
 17429  1D64  0854               	movf	??___ftdiv^(0+128),w
 17430  1D65  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17431  1D66  0857               	movf	(??___ftdiv+3)^(0+128),w
 17432  1D67  00DD               	movwf	___ftdiv@sign^(0+128)
 17433  1D68  084E               	movf	___ftdiv@f2^(0+128),w
 17434  1D69  00D4               	movwf	??___ftdiv^(0+128)
 17435  1D6A  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17436  1D6B  00D5               	movwf	(??___ftdiv^(0+128)+1)
 17437  1D6C  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17438  1D6D  00D6               	movwf	(??___ftdiv^(0+128)+2)
 17439  1D6E  3010               	movlw	16
 17440  1D6F                     u8455:	
 17441  1D6F  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 17442  1D70  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 17443  1D71  0CD4               	rrf	??___ftdiv^(0+128),f
 17444  1D72  0B89               	decfsz	9,f
 17445  1D73  2D6F               	goto	u8455
 17446  1D74  0854               	movf	??___ftdiv^(0+128),w
 17447  1D75  00D7               	movwf	(??___ftdiv+3)^(0+128)
 17448  1D76  0857               	movf	(??___ftdiv+3)^(0+128),w
 17449  1D77  06DD               	xorwf	___ftdiv@sign^(0+128),f
 17450  1D78  3080               	movlw	128
 17451  1D79  00D4               	movwf	??___ftdiv^(0+128)
 17452  1D7A  0854               	movf	??___ftdiv^(0+128),w
 17453  1D7B  05DD               	andwf	___ftdiv@sign^(0+128),f
 17454  1D7C  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 17455  1D7D  30FF               	movlw	255
 17456  1D7E  05D1               	andwf	___ftdiv@f1^(0+128),f
 17457  1D7F  30FF               	movlw	255
 17458  1D80  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 17459  1D81  3000               	movlw	0
 17460  1D82  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 17461  1D83  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 17462  1D84  30FF               	movlw	255
 17463  1D85  05CE               	andwf	___ftdiv@f2^(0+128),f
 17464  1D86  30FF               	movlw	255
 17465  1D87  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 17466  1D88  3000               	movlw	0
 17467  1D89  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 17468  1D8A  3018               	movlw	24
 17469  1D8B  00D4               	movwf	??___ftdiv^(0+128)
 17470  1D8C  0854               	movf	??___ftdiv^(0+128),w
 17471  1D8D  00D8               	movwf	___ftdiv@cntr^(0+128)
 17472  1D8E                     l8043:	
 17473  1D8E  3001               	movlw	1
 17474  1D8F                     u8465:	
 17475  1D8F  35D9               	lslf	___ftdiv@f3^(0+128),f
 17476  1D90  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 17477  1D91  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 17478  1D92  0B89               	decfsz	9,f
 17479  1D93  2D8F               	goto	u8465
 17480  1D94  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17481  1D95  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 17482  1D96  1D03               	skipz
 17483  1D97  2D9E               	goto	u8475
 17484  1D98  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17485  1D99  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 17486  1D9A  1D03               	skipz
 17487  1D9B  2D9E               	goto	u8475
 17488  1D9C  084E               	movf	___ftdiv@f2^(0+128),w
 17489  1D9D  0251               	subwf	___ftdiv@f1^(0+128),w
 17490  1D9E                     u8475:	
 17491  1D9E  1C03               	skipc
 17492  1D9F  2DA7               	goto	l8051
 17493  1DA0  084E               	movf	___ftdiv@f2^(0+128),w
 17494  1DA1  02D1               	subwf	___ftdiv@f1^(0+128),f
 17495  1DA2  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 17496  1DA3  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 17497  1DA4  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 17498  1DA5  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 17499  1DA6  1459               	bsf	___ftdiv@f3^(0+128),0
 17500  1DA7                     l8051:	
 17501  1DA7  3001               	movlw	1
 17502  1DA8                     u8485:	
 17503  1DA8  35D1               	lslf	___ftdiv@f1^(0+128),f
 17504  1DA9  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 17505  1DAA  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 17506  1DAB  0B89               	decfsz	9,f
 17507  1DAC  2DA8               	goto	u8485
 17508  1DAD  3001               	movlw	1
 17509  1DAE  02D8               	subwf	___ftdiv@cntr^(0+128),f
 17510  1DAF  1D03               	btfss	3,2
 17511  1DB0  2D8E               	goto	l8043
 17512  1DB1  0859               	movf	___ftdiv@f3^(0+128),w
 17513  1DB2  00A0               	movwf	___ftpack@arg^(0+128)
 17514  1DB3  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 17515  1DB4  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17516  1DB5  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 17517  1DB6  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 17518  1DB7  085C               	movf	___ftdiv@exp^(0+128),w
 17519  1DB8  00D4               	movwf	??___ftdiv^(0+128)
 17520  1DB9  0854               	movf	??___ftdiv^(0+128),w
 17521  1DBA  00A3               	movwf	___ftpack@exp^(0+128)
 17522  1DBB  085D               	movf	___ftdiv@sign^(0+128),w
 17523  1DBC  00D5               	movwf	(??___ftdiv+1)^(0+128)
 17524  1DBD  0855               	movf	(??___ftdiv+1)^(0+128),w
 17525  1DBE  00A4               	movwf	___ftpack@sign^(0+128)
 17526  1DBF  31A6  2632         	fcall	___ftpack
 17527  1DC1  0021               	movlb	1	; select bank1
 17528  1DC2  0820               	movf	?___ftpack^(0+128),w
 17529  1DC3  00CE               	movwf	?___ftdiv^(0+128)
 17530  1DC4  0821               	movf	(?___ftpack+1)^(0+128),w
 17531  1DC5  00CF               	movwf	(?___ftdiv+1)^(0+128)
 17532  1DC6  0822               	movf	(?___ftpack+2)^(0+128),w
 17533  1DC7  00D0               	movwf	(?___ftdiv+2)^(0+128)
 17534  1DC8  0008               	return
 17535  1DC9                     __end_of___ftdiv:	
 17536                           
 17537                           	psect	text59
 17538  2ECF                     __ptext59:	
 17539 ;; *************** function ___awtoft *****************
 17540 ;; Defined at:
 17541 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 17542 ;; Parameters:    Size  Location     Type
 17543 ;;  c               2    8[BANK1 ] int 
 17544 ;; Auto vars:     Size  Location     Type
 17545 ;;  sign            1   13[BANK1 ] unsigned char 
 17546 ;; Return value:  Size  Location     Type
 17547 ;;                  3    8[BANK1 ] float 
 17548 ;; Registers used:
 17549 ;;		wreg, status,2, status,0, pclath, cstack
 17550 ;; Tracked objects:
 17551 ;;		On entry : 0/0
 17552 ;;		On exit  : 0/0
 17553 ;;		Unchanged: 0/0
 17554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17555 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17556 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17557 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17558 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17559 ;;Total ram usage:        6 bytes
 17560 ;; Hardware stack levels used:    1
 17561 ;; Hardware stack levels required when called:    4
 17562 ;; This function calls:
 17563 ;;		___ftpack
 17564 ;; This function is called by:
 17565 ;;		_main
 17566 ;;		_set_subdivision
 17567 ;;		_calcSinArray
 17568 ;;		_getModulationDelayTime
 17569 ;;		_updateModulationArray
 17570 ;;		_exp
 17571 ;;		_log
 17572 ;; This function uses a non-reentrant model
 17573 ;;
 17574                           
 17575                           
 17576                           ;psect for function ___awtoft
 17577  2ECF                     ___awtoft:	
 17578                           
 17579                           ;incstack = 0
 17580                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17581  2ECF  0021               	movlb	1	; select bank1
 17582  2ED0  01AD               	clrf	___awtoft@sign^(0+128)
 17583  2ED1  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 17584  2ED2  2EDA               	goto	l8013
 17585  2ED3  09A8               	comf	___awtoft@c^(0+128),f
 17586  2ED4  09A9               	comf	(___awtoft@c+1)^(0+128),f
 17587  2ED5  0AA8               	incf	___awtoft@c^(0+128),f
 17588  2ED6  1903               	skipnz
 17589  2ED7  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 17590  2ED8  01AD               	clrf	___awtoft@sign^(0+128)
 17591  2ED9  0AAD               	incf	___awtoft@sign^(0+128),f
 17592  2EDA                     l8013:	
 17593  2EDA  0828               	movf	___awtoft@c^(0+128),w
 17594  2EDB  00A0               	movwf	___ftpack@arg^(0+128)
 17595  2EDC  0829               	movf	(___awtoft@c+1)^(0+128),w
 17596  2EDD  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 17597  2EDE  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 17598  2EDF  308E               	movlw	142
 17599  2EE0  00AB               	movwf	??___awtoft^(0+128)
 17600  2EE1  082B               	movf	??___awtoft^(0+128),w
 17601  2EE2  00A3               	movwf	___ftpack@exp^(0+128)
 17602  2EE3  082D               	movf	___awtoft@sign^(0+128),w
 17603  2EE4  00AC               	movwf	(??___awtoft+1)^(0+128)
 17604  2EE5  082C               	movf	(??___awtoft+1)^(0+128),w
 17605  2EE6  00A4               	movwf	___ftpack@sign^(0+128)
 17606  2EE7  31A6  2632         	fcall	___ftpack
 17607  2EE9  0021               	movlb	1	; select bank1
 17608  2EEA  0820               	movf	?___ftpack^(0+128),w
 17609  2EEB  00A8               	movwf	?___awtoft^(0+128)
 17610  2EEC  0821               	movf	(?___ftpack+1)^(0+128),w
 17611  2EED  00A9               	movwf	(?___awtoft+1)^(0+128)
 17612  2EEE  0822               	movf	(?___ftpack+2)^(0+128),w
 17613  2EEF  00AA               	movwf	(?___awtoft+2)^(0+128)
 17614  2EF0  0008               	return
 17615  2EF1                     __end_of___awtoft:	
 17616                           
 17617                           	psect	text60
 17618  2632                     __ptext60:	
 17619 ;; *************** function ___ftpack *****************
 17620 ;; Defined at:
 17621 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;  arg             3    0[BANK1 ] unsigned um
 17624 ;;  exp             1    3[BANK1 ] unsigned char 
 17625 ;;  sign            1    4[BANK1 ] unsigned char 
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;		None
 17628 ;; Return value:  Size  Location     Type
 17629 ;;                  3    0[BANK1 ] float 
 17630 ;; Registers used:
 17631 ;;		wreg, status,2, status,0
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17637 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17639 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17640 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17641 ;;Total ram usage:        8 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    3
 17644 ;; This function calls:
 17645 ;;		Nothing
 17646 ;; This function is called by:
 17647 ;;		___altoft
 17648 ;;		___awtoft
 17649 ;;		___ftadd
 17650 ;;		___ftdiv
 17651 ;;		___ftmul
 17652 ;;		___lltoft
 17653 ;; This function uses a non-reentrant model
 17654 ;;
 17655                           
 17656                           
 17657                           ;psect for function ___ftpack
 17658  2632                     ___ftpack:	
 17659                           
 17660                           ;incstack = 0
 17661                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17662  2632  0021               	movlb	1	; select bank1
 17663  2633  0823               	movf	___ftpack@exp^(0+128),w
 17664  2634  1903               	btfsc	3,2
 17665  2635  2E3B               	goto	l7651
 17666  2636  0822               	movf	(___ftpack@arg+2)^(0+128),w
 17667  2637  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 17668  2638  0420               	iorwf	___ftpack@arg^(0+128),w
 17669  2639  1D03               	skipz
 17670  263A  2E4C               	goto	l7657
 17671  263B                     l7651:	
 17672  263B  3000               	movlw	0
 17673  263C  00A0               	movwf	?___ftpack^(0+128)
 17674  263D  3000               	movlw	0
 17675  263E  00A1               	movwf	(?___ftpack+1)^(0+128)
 17676  263F  3000               	movlw	0
 17677  2640  00A2               	movwf	(?___ftpack+2)^(0+128)
 17678  2641  0008               	return
 17679  2642                     l7655:	
 17680  2642  3001               	movlw	1
 17681  2643  00A5               	movwf	??___ftpack^(0+128)
 17682  2644  0825               	movf	??___ftpack^(0+128),w
 17683  2645  07A3               	addwf	___ftpack@exp^(0+128),f
 17684  2646  3001               	movlw	1
 17685  2647                     u7685:	
 17686  2647  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17687  2648  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17688  2649  0CA0               	rrf	___ftpack@arg^(0+128),f
 17689  264A  0B89               	decfsz	9,f
 17690  264B  2E47               	goto	u7685
 17691  264C                     l7657:	
 17692  264C  30FE               	movlw	254
 17693  264D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17694  264E  1903               	btfsc	3,2
 17695  264F  2E65               	goto	l2103
 17696  2650  2E42               	goto	l7655
 17697  2651                     l7659:	
 17698  2651  3001               	movlw	1
 17699  2652  00A5               	movwf	??___ftpack^(0+128)
 17700  2653  0825               	movf	??___ftpack^(0+128),w
 17701  2654  07A3               	addwf	___ftpack@exp^(0+128),f
 17702  2655  3001               	movlw	1
 17703  2656  07A0               	addwf	___ftpack@arg^(0+128),f
 17704  2657  3000               	movlw	0
 17705  2658  1803               	skipnc
 17706  2659  3001               	movlw	1
 17707  265A  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 17708  265B  3000               	movlw	0
 17709  265C  1803               	skipnc
 17710  265D  3001               	movlw	1
 17711  265E  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 17712  265F  3001               	movlw	1
 17713  2660                     u7705:	
 17714  2660  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 17715  2661  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 17716  2662  0CA0               	rrf	___ftpack@arg^(0+128),f
 17717  2663  0B89               	decfsz	9,f
 17718  2664  2E60               	goto	u7705
 17719  2665                     l2103:	
 17720  2665  30FF               	movlw	255
 17721  2666  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 17722  2667  1903               	btfsc	3,2
 17723  2668  2E72               	goto	l7667
 17724  2669  2E51               	goto	l7659
 17725  266A                     l7665:	
 17726  266A  3001               	movlw	1
 17727  266B  02A3               	subwf	___ftpack@exp^(0+128),f
 17728  266C  3001               	movlw	1
 17729  266D                     u7725:	
 17730  266D  35A0               	lslf	___ftpack@arg^(0+128),f
 17731  266E  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 17732  266F  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 17733  2670  0B89               	decfsz	9,f
 17734  2671  2E6D               	goto	u7725
 17735  2672                     l7667:	
 17736  2672  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 17737  2673  2E78               	goto	l2110
 17738  2674  3002               	movlw	2
 17739  2675  0223               	subwf	___ftpack@exp^(0+128),w
 17740  2676  1803               	skipnc
 17741  2677  2E6A               	goto	l7665
 17742  2678                     l2110:	
 17743  2678  1823               	btfsc	___ftpack@exp^(0+128),0
 17744  2679  2E80               	goto	l2111
 17745  267A  30FF               	movlw	255
 17746  267B  05A0               	andwf	___ftpack@arg^(0+128),f
 17747  267C  307F               	movlw	127
 17748  267D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 17749  267E  30FF               	movlw	255
 17750  267F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 17751  2680                     l2111:	
 17752  2680  1003               	clrc
 17753  2681  0CA3               	rrf	___ftpack@exp^(0+128),f
 17754  2682  0823               	movf	___ftpack@exp^(0+128),w
 17755  2683  00A5               	movwf	??___ftpack^(0+128)
 17756  2684  01A6               	clrf	(??___ftpack^(0+128)+1)
 17757  2685  01A7               	clrf	(??___ftpack^(0+128)+2)
 17758  2686  3010               	movlw	16
 17759  2687                     u7765:	
 17760  2687  35A5               	lslf	??___ftpack^(0+128),f
 17761  2688  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 17762  2689  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 17763  268A  0B89               	decfsz	9,f
 17764  268B  2E87               	goto	u7765
 17765  268C  0825               	movf	??___ftpack^(0+128),w
 17766  268D  04A0               	iorwf	___ftpack@arg^(0+128),f
 17767  268E  0826               	movf	(??___ftpack+1)^(0+128),w
 17768  268F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 17769  2690  0827               	movf	(??___ftpack+2)^(0+128),w
 17770  2691  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 17771  2692  0824               	movf	___ftpack@sign^(0+128),w
 17772  2693  1903               	btfsc	3,2
 17773  2694  0008               	return
 17774  2695  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 17775  2696  0008               	return
 17776  2697                     __end_of___ftpack:	
 17777                           
 17778                           	psect	text61
 17779  2DBF                     __ptext61:	
 17780 ;; *************** function _adc_convert *****************
 17781 ;; Defined at:
 17782 ;;		line 122 in file "user.c"
 17783 ;; Parameters:    Size  Location     Type
 17784 ;;  channel         1    wreg     unsigned char 
 17785 ;; Auto vars:     Size  Location     Type
 17786 ;;  channel         1    3[BANK1 ] unsigned char 
 17787 ;; Return value:  Size  Location     Type
 17788 ;;                  2    0[BANK1 ] unsigned int 
 17789 ;; Registers used:
 17790 ;;		wreg, status,2, status,0
 17791 ;; Tracked objects:
 17792 ;;		On entry : 0/0
 17793 ;;		On exit  : 0/0
 17794 ;;		Unchanged: 0/0
 17795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17796 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17797 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17798 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17799 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17800 ;;Total ram usage:        4 bytes
 17801 ;; Hardware stack levels used:    1
 17802 ;; Hardware stack levels required when called:    3
 17803 ;; This function calls:
 17804 ;;		Nothing
 17805 ;; This function is called by:
 17806 ;;		_main
 17807 ;; This function uses a non-reentrant model
 17808 ;;
 17809                           
 17810                           
 17811                           ;psect for function _adc_convert
 17812  2DBF                     _adc_convert:	
 17813                           
 17814                           ;incstack = 0
 17815                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 17816                           ;adc_convert@channel stored from wreg
 17817  2DBF  0021               	movlb	1	; select bank1
 17818  2DC0  00A3               	movwf	adc_convert@channel^(0+128)
 17819                           
 17820                           ;user.c: 123: ADCON0bits.CHS = channel;
 17821  2DC1  0823               	movf	adc_convert@channel^(0+128),w
 17822  2DC2  00A2               	movwf	??_adc_convert^(0+128)
 17823  2DC3  0DA2               	rlf	??_adc_convert^(0+128),f
 17824  2DC4  0DA2               	rlf	??_adc_convert^(0+128),f
 17825  2DC5  081D               	movf	29,w	;volatile
 17826  2DC6  0622               	xorwf	??_adc_convert^(0+128),w
 17827  2DC7  3983               	andlw	-125
 17828  2DC8  0622               	xorwf	??_adc_convert^(0+128),w
 17829  2DC9  009D               	movwf	29	;volatile
 17830                           
 17831                           ;user.c: 124: ADCON0bits.GO = 0b1;
 17832  2DCA  149D               	bsf	29,1	;volatile
 17833  2DCB                     l584:	
 17834                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 17835                           
 17836  2DCB  189D               	btfsc	29,1	;volatile
 17837  2DCC  2DCB               	goto	l584
 17838                           
 17839                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 17840  2DCD  081C               	movf	28,w	;volatile
 17841  2DCE  00A1               	movwf	(?_adc_convert+1)^(0+128)
 17842  2DCF  081B               	movf	27,w	;volatile
 17843  2DD0  00A0               	movwf	?_adc_convert^(0+128)
 17844  2DD1  0008               	return
 17845  2DD2                     __end_of_adc_convert:	
 17846                           
 17847                           	psect	text62
 17848  22E3                     __ptext62:	
 17849 ;; *************** function _USARTInit *****************
 17850 ;; Defined at:
 17851 ;;		line 31 in file "usart_pic16.c"
 17852 ;; Parameters:    Size  Location     Type
 17853 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 17854 ;; Auto vars:     Size  Location     Type
 17855 ;;		None
 17856 ;; Return value:  Size  Location     Type
 17857 ;;                  1    wreg      void 
 17858 ;; Registers used:
 17859 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17860 ;; Tracked objects:
 17861 ;;		On entry : 0/0
 17862 ;;		On exit  : 0/0
 17863 ;;		Unchanged: 0/0
 17864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17865 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17867 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17868 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17869 ;;Total ram usage:        3 bytes
 17870 ;; Hardware stack levels used:    1
 17871 ;; Hardware stack levels required when called:    3
 17872 ;; This function calls:
 17873 ;;		Nothing
 17874 ;; This function is called by:
 17875 ;;		_main
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           
 17880                           ;psect for function _USARTInit
 17881  22E3                     _USARTInit:	
 17882                           
 17883                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17884                           
 17885                           ;incstack = 0
 17886                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17887  22E3  30FF               	movlw	255
 17888  22E4  0020               	movlb	0	; select bank0
 17889  22E5  00CE               	movwf	_UQEnd	;volatile
 17890  22E6  0021               	movlb	1	; select bank1
 17891  22E7  00A2               	movwf	??_USARTInit^(0+128)
 17892  22E8  0822               	movf	??_USARTInit^(0+128),w
 17893  22E9  00FD               	movwf	_UQFront	;volatile
 17894                           
 17895                           ;usart_pic16.c: 37: switch(baud_rate)
 17896  22EA  2AF5               	goto	l8717
 17897  22EB                     l8707:	
 17898                           ;usart_pic16.c: 38: {
 17899                           ;usart_pic16.c: 39: case 9600:
 17900                           
 17901                           
 17902                           ;usart_pic16.c: 40: SPBRG=103;
 17903  22EB  3067               	movlw	103
 17904  22EC  2AF2               	goto	L23
 17905  22ED                     l8709:	
 17906                           ;usart_pic16.c: 42: case 19200:
 17907                           
 17908                           ;usart_pic16.c: 41: break;
 17909                           
 17910                           
 17911                           ;usart_pic16.c: 43: SPBRG=51;
 17912  22ED  3033               	movlw	51
 17913  22EE  2AF2               	goto	L23
 17914  22EF                     l8711:	
 17915                           ;usart_pic16.c: 45: case 31250:
 17916                           
 17917                           ;usart_pic16.c: 44: break;
 17918                           
 17919                           
 17920                           ;usart_pic16.c: 46: SPBRG = 31;
 17921  22EF  301F               	movlw	31
 17922  22F0  2AF2               	goto	L23
 17923  22F1                     l8713:	
 17924                           ;usart_pic16.c: 48: case 38400:
 17925                           
 17926                           ;usart_pic16.c: 47: break;
 17927                           
 17928                           
 17929                           ;usart_pic16.c: 49: SPBRG=25;
 17930  22F1  3019               	movlw	25
 17931  22F2                     L23:	
 17932  22F2  0023               	movlb	3	; select bank3
 17933  22F3  009B               	movwf	27	;volatile
 17934                           
 17935                           ;usart_pic16.c: 51: }
 17936                           
 17937                           ;usart_pic16.c: 50: break;
 17938  22F4  2B18               	goto	l1696
 17939  22F5                     l8717:	
 17940                           
 17941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17942                           ; Switch size 1, requested type "space"
 17943                           ; Number of cases is 4, Range of values is 37 to 150
 17944                           ; switch strategies available:
 17945                           ; Name         Instructions Cycles
 17946                           ; simple_byte           13     7 (average)
 17947                           ; direct_byte          237     9 (fixed)
 17948                           ; jumptable            263     9 (fixed)
 17949                           ;	Chosen strategy is simple_byte
 17950  22F5  0021               	movlb	1	; select bank1
 17951  22F6  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17952  22F7  3A25               	xorlw	37	; case 37
 17953  22F8  1903               	skipnz
 17954  22F9  2B04               	goto	l9787
 17955  22FA  3A6E               	xorlw	110	; case 75
 17956  22FB  1903               	skipnz
 17957  22FC  2B09               	goto	l9789
 17958  22FD  3A31               	xorlw	49	; case 122
 17959  22FE  1903               	skipnz
 17960  22FF  2B0E               	goto	l9791
 17961  2300  3AEC               	xorlw	236	; case 150
 17962  2301  1903               	skipnz
 17963  2302  2B13               	goto	l9793
 17964  2303  2B18               	goto	l1696
 17965  2304                     l9787:	
 17966                           
 17967                           ; Switch size 1, requested type "space"
 17968                           ; Number of cases is 1, Range of values is 128 to 128
 17969                           ; switch strategies available:
 17970                           ; Name         Instructions Cycles
 17971                           ; simple_byte            4     3 (average)
 17972                           ; direct_byte           11     9 (fixed)
 17973                           ; jumptable            263     9 (fixed)
 17974                           ;	Chosen strategy is simple_byte
 17975  2304  0820               	movf	USARTInit@baud_rate^(0+128),w
 17976  2305  3A80               	xorlw	128	; case 128
 17977  2306  1903               	skipnz
 17978  2307  2AEB               	goto	l8707
 17979  2308  2B18               	goto	l1696
 17980  2309                     l9789:	
 17981                           
 17982                           ; Switch size 1, requested type "space"
 17983                           ; Number of cases is 1, Range of values is 0 to 0
 17984                           ; switch strategies available:
 17985                           ; Name         Instructions Cycles
 17986                           ; simple_byte            4     3 (average)
 17987                           ; direct_byte            8     6 (fixed)
 17988                           ; jumptable            260     6 (fixed)
 17989                           ;	Chosen strategy is simple_byte
 17990  2309  0820               	movf	USARTInit@baud_rate^(0+128),w
 17991  230A  3A00               	xorlw	0	; case 0
 17992  230B  1903               	skipnz
 17993  230C  2AED               	goto	l8709
 17994  230D  2B18               	goto	l1696
 17995  230E                     l9791:	
 17996                           
 17997                           ; Switch size 1, requested type "space"
 17998                           ; Number of cases is 1, Range of values is 18 to 18
 17999                           ; switch strategies available:
 18000                           ; Name         Instructions Cycles
 18001                           ; simple_byte            4     3 (average)
 18002                           ; direct_byte           11     9 (fixed)
 18003                           ; jumptable            263     9 (fixed)
 18004                           ;	Chosen strategy is simple_byte
 18005  230E  0820               	movf	USARTInit@baud_rate^(0+128),w
 18006  230F  3A12               	xorlw	18	; case 18
 18007  2310  1903               	skipnz
 18008  2311  2AEF               	goto	l8711
 18009  2312  2B18               	goto	l1696
 18010  2313                     l9793:	
 18011                           
 18012                           ; Switch size 1, requested type "space"
 18013                           ; Number of cases is 1, Range of values is 0 to 0
 18014                           ; switch strategies available:
 18015                           ; Name         Instructions Cycles
 18016                           ; simple_byte            4     3 (average)
 18017                           ; direct_byte            8     6 (fixed)
 18018                           ; jumptable            260     6 (fixed)
 18019                           ;	Chosen strategy is simple_byte
 18020  2313  0820               	movf	USARTInit@baud_rate^(0+128),w
 18021  2314  3A00               	xorlw	0	; case 0
 18022  2315  1903               	skipnz
 18023  2316  2AF1               	goto	l8713
 18024  2317  2B18               	goto	l1696
 18025  2318                     l1696:	
 18026                           
 18027                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 18028  2318  0023               	movlb	3	; select bank3
 18029  2319  131E               	bcf	30,6	;volatile
 18030                           
 18031                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 18032  231A  169E               	bsf	30,5	;volatile
 18033                           
 18034                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 18035  231B  121E               	bcf	30,4	;volatile
 18036                           
 18037                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 18038  231C  151E               	bsf	30,2	;volatile
 18039                           
 18040                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 18041  231D  179D               	bsf	29,7	;volatile
 18042                           
 18043                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 18044  231E  131D               	bcf	29,6	;volatile
 18045                           
 18046                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 18047  231F  161D               	bsf	29,4	;volatile
 18048                           
 18049                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 18050  2320  119D               	bcf	29,3	;volatile
 18051                           
 18052                           ;usart_pic16.c: 65: RCIE=1;
 18053  2321  0021               	movlb	1	; select bank1
 18054  2322  1691               	bsf	17,5	;volatile
 18055                           
 18056                           ;usart_pic16.c: 66: PEIE=1;
 18057  2323  170B               	bsf	11,6	;volatile
 18058                           
 18059                           ;usart_pic16.c: 68: (GIE = 1);
 18060  2324  178B               	bsf	11,7	;volatile
 18061  2325  0008               	return
 18062  2326                     __end_of_USARTInit:	
 18063                           
 18064                           	psect	text63
 18065  2709                     __ptext63:	
 18066 ;; *************** function _ReadSavedSettings *****************
 18067 ;; Defined at:
 18068 ;;		line 234 in file "user.c"
 18069 ;; Parameters:    Size  Location     Type
 18070 ;;		None
 18071 ;; Auto vars:     Size  Location     Type
 18072 ;;		None
 18073 ;; Return value:  Size  Location     Type
 18074 ;;                  1    wreg      void 
 18075 ;; Registers used:
 18076 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18077 ;; Tracked objects:
 18078 ;;		On entry : 0/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18084 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18085 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18086 ;;Total ram usage:        1 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; Hardware stack levels required when called:    4
 18089 ;; This function calls:
 18090 ;;		_FLASH_ReadWord
 18091 ;;		_set_leds_bottom
 18092 ;;		_set_leds_top
 18093 ;; This function is called by:
 18094 ;;		_main
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _ReadSavedSettings
 18100  2709                     _ReadSavedSettings:	
 18101                           
 18102                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 18103                           
 18104                           ;incstack = 0
 18105                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18106  2709  3081               	movlw	129
 18107  270A  0021               	movlb	1	; select bank1
 18108  270B  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18109  270C  301F               	movlw	31
 18110  270D  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18111  270E  31AE  268E  31A7   	fcall	_FLASH_ReadWord
 18112  2711  0021               	movlb	1	; select bank1
 18113  2712  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18114  2713  0020               	movlb	0	; select bank0
 18115  2714  00E5               	movwf	_top_push_state+1
 18116  2715  0021               	movlb	1	; select bank1
 18117  2716  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18118  2717  0020               	movlb	0	; select bank0
 18119  2718  00E4               	movwf	_top_push_state
 18120                           
 18121                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 18122  2719  3082               	movlw	130
 18123  271A  0021               	movlb	1	; select bank1
 18124  271B  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 18125  271C  301F               	movlw	31
 18126  271D  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 18127  271E  31AE  268E  31A7   	fcall	_FLASH_ReadWord
 18128  2721  0021               	movlb	1	; select bank1
 18129  2722  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 18130  2723  0020               	movlb	0	; select bank0
 18131  2724  00E1               	movwf	_bottom_push_state+1
 18132  2725  0021               	movlb	1	; select bank1
 18133  2726  0820               	movf	?_FLASH_ReadWord^(0+128),w
 18134  2727  0020               	movlb	0	; select bank0
 18135  2728  00E0               	movwf	_bottom_push_state
 18136                           
 18137                           ;user.c: 239: if (top_push_state > 6) {
 18138  2729  0865               	movf	_top_push_state+1,w
 18139  272A  3A80               	xorlw	128
 18140  272B  0021               	movlb	1	; select bank1
 18141  272C  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18142  272D  3080               	movlw	128
 18143  272E  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18144  272F  1D03               	skipz
 18145  2730  2F34               	goto	u9325
 18146  2731  3007               	movlw	7
 18147  2732  0020               	movlb	0	; select bank0
 18148  2733  0264               	subwf	_top_push_state,w
 18149  2734                     u9325:	
 18150  2734  1C03               	skipc
 18151  2735  2F3B               	goto	l631
 18152                           
 18153                           ;user.c: 241: top_push_state = 6;
 18154  2736  3006               	movlw	6
 18155  2737  0020               	movlb	0	; select bank0
 18156  2738  00E4               	movwf	_top_push_state
 18157  2739  3000               	movlw	0
 18158  273A  00E5               	movwf	_top_push_state+1
 18159  273B                     l631:	
 18160                           
 18161                           ;user.c: 242: }
 18162                           ;user.c: 243: if (bottom_push_state > 5) {
 18163  273B  0020               	movlb	0	; select bank0
 18164  273C  0861               	movf	_bottom_push_state+1,w
 18165  273D  3A80               	xorlw	128
 18166  273E  0021               	movlb	1	; select bank1
 18167  273F  00A4               	movwf	??_ReadSavedSettings^(0+128)
 18168  2740  3080               	movlw	128
 18169  2741  0224               	subwf	??_ReadSavedSettings^(0+128),w
 18170  2742  1D03               	skipz
 18171  2743  2F47               	goto	u9335
 18172  2744  3006               	movlw	6
 18173  2745  0020               	movlb	0	; select bank0
 18174  2746  0260               	subwf	_bottom_push_state,w
 18175  2747                     u9335:	
 18176  2747  1C03               	skipc
 18177  2748  2F4E               	goto	l8771
 18178                           
 18179                           ;user.c: 245: bottom_push_state = 1;
 18180  2749  3001               	movlw	1
 18181  274A  0020               	movlb	0	; select bank0
 18182  274B  00E0               	movwf	_bottom_push_state
 18183  274C  3000               	movlw	0
 18184  274D  00E1               	movwf	_bottom_push_state+1
 18185  274E                     l8771:	
 18186                           
 18187                           ;user.c: 246: }
 18188                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 18189  274E  0020               	movlb	0	; select bank0
 18190  274F  086B               	movf	_switchBypass_state,w
 18191  2750  1D03               	btfss	3,2
 18192  2751  2F55               	goto	u9340
 18193  2752  0027               	movlb	7	; select bank7
 18194  2753  148D               	bsf	13,1	;volatile
 18195  2754  2F57               	goto	l8773
 18196  2755                     u9340:	
 18197  2755  0027               	movlb	7	; select bank7
 18198  2756  108D               	bcf	13,1	;volatile
 18199  2757                     l8773:	
 18200                           
 18201                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 18202  2757  0020               	movlb	0	; select bank0
 18203  2758  0C6B               	rrf	_switchBypass_state,w
 18204  2759  0027               	movlb	7	; select bank7
 18205  275A  1C03               	skipc
 18206  275B  110D               	bcf	13,2	;volatile
 18207  275C  1803               	skipnc
 18208  275D  150D               	bsf	13,2	;volatile
 18209                           
 18210                           ;user.c: 251: LATBbits.LATB2 = 0;
 18211  275E  0022               	movlb	2	; select bank2
 18212  275F  110D               	bcf	13,2	;volatile
 18213                           
 18214                           ;user.c: 252: LATBbits.LATB3 = 0;
 18215  2760  118D               	bcf	13,3	;volatile
 18216                           
 18217                           ;user.c: 254: LATBbits.LATB4 = 0;
 18218  2761  120D               	bcf	13,4	;volatile
 18219                           
 18220                           ;user.c: 255: LATBbits.LATB5 = 0;
 18221  2762  128D               	bcf	13,5	;volatile
 18222                           
 18223                           ;user.c: 257: LATBbits.LATB1 = 0;
 18224  2763  108D               	bcf	13,1	;volatile
 18225                           
 18226                           ;user.c: 258: LATBbits.LATB0 = 0;
 18227  2764  100D               	bcf	13,0	;volatile
 18228                           
 18229                           ;user.c: 261: set_leds_top(top_push_state, 1);
 18230  2765  0020               	movlb	0	; select bank0
 18231  2766  0865               	movf	_top_push_state+1,w
 18232  2767  0021               	movlb	1	; select bank1
 18233  2768  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 18234  2769  0020               	movlb	0	; select bank0
 18235  276A  0864               	movf	_top_push_state,w
 18236  276B  0021               	movlb	1	; select bank1
 18237  276C  00A0               	movwf	set_leds_top@x^(0+128)
 18238  276D  3001               	movlw	1
 18239  276E  00A2               	movwf	set_leds_top@ledState^(0+128)
 18240  276F  3000               	movlw	0
 18241  2770  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 18242  2771  31A5  2585  31A7   	fcall	_set_leds_top
 18243                           
 18244                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 18245  2774  0020               	movlb	0	; select bank0
 18246  2775  0861               	movf	_bottom_push_state+1,w
 18247  2776  0021               	movlb	1	; select bank1
 18248  2777  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 18249  2778  0020               	movlb	0	; select bank0
 18250  2779  0860               	movf	_bottom_push_state,w
 18251  277A  0021               	movlb	1	; select bank1
 18252  277B  00A0               	movwf	set_leds_bottom@x^(0+128)
 18253  277C  31A0  20EF         	fcall	_set_leds_bottom
 18254  277E  0008               	return
 18255  277F                     __end_of_ReadSavedSettings:	
 18256                           
 18257                           	psect	text64
 18258  2585                     __ptext64:	
 18259 ;; *************** function _set_leds_top *****************
 18260 ;; Defined at:
 18261 ;;		line 16 in file "LEDs.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;  x               2    0[BANK1 ] int 
 18264 ;;  ledState        2    2[BANK1 ] int 
 18265 ;; Auto vars:     Size  Location     Type
 18266 ;;		None
 18267 ;; Return value:  Size  Location     Type
 18268 ;;                  1    wreg      void 
 18269 ;; Registers used:
 18270 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18271 ;; Tracked objects:
 18272 ;;		On entry : 0/0
 18273 ;;		On exit  : 0/0
 18274 ;;		Unchanged: 0/0
 18275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18276 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18279 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18280 ;;Total ram usage:        4 bytes
 18281 ;; Hardware stack levels used:    1
 18282 ;; Hardware stack levels required when called:    3
 18283 ;; This function calls:
 18284 ;;		Nothing
 18285 ;; This function is called by:
 18286 ;;		_ReadSavedSettings
 18287 ;;		_ring_tactiles
 18288 ;;		_solidring_tactiles
 18289 ;;		_read_top_tactile
 18290 ;;		_setPresetDisplay
 18291 ;;		_resetRingLEDs
 18292 ;;		_setExpressionDisplay
 18293 ;;		_star_tactiles
 18294 ;; This function uses a non-reentrant model
 18295 ;;
 18296                           
 18297                           
 18298                           ;psect for function _set_leds_top
 18299  2585                     _set_leds_top:	
 18300                           
 18301                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18302                           
 18303                           ;incstack = 0
 18304                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 18305  2585  0027               	movlb	7	; select bank7
 18306  2586  100C               	bcf	12,0	;volatile
 18307                           
 18308                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18309  2587  108C               	bcf	12,1	;volatile
 18310                           
 18311                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18312  2588  110C               	bcf	12,2	;volatile
 18313                           
 18314                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18315  2589  118C               	bcf	12,3	;volatile
 18316                           
 18317                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18318  258A  120C               	bcf	12,4	;volatile
 18319                           
 18320                           ;LEDs.c: 22: switch (x) {
 18321  258B  2DBB               	goto	l7693
 18322  258C                     l7681:	
 18323                           ;LEDs.c: 23: case 1:
 18324                           
 18325                           
 18326                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18327  258C  0021               	movlb	1	; select bank1
 18328  258D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18329  258E  0027               	movlb	7	; select bank7
 18330  258F  1C03               	skipc
 18331  2590  100C               	bcf	12,0	;volatile
 18332  2591  1803               	skipnc
 18333  2592  140C               	bsf	12,0	;volatile
 18334                           
 18335                           ;LEDs.c: 25: break;
 18336  2593  0008               	return
 18337  2594                     l7683:	
 18338                           ;LEDs.c: 26: case 2:
 18339                           
 18340                           
 18341                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18342  2594  0021               	movlb	1	; select bank1
 18343  2595  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18344  2596  0027               	movlb	7	; select bank7
 18345  2597  1C03               	skipc
 18346  2598  108C               	bcf	12,1	;volatile
 18347  2599  1803               	skipnc
 18348  259A  148C               	bsf	12,1	;volatile
 18349                           
 18350                           ;LEDs.c: 28: break;
 18351  259B  0008               	return
 18352  259C                     l7685:	
 18353                           ;LEDs.c: 29: case 3:
 18354                           
 18355                           
 18356                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18357  259C  0021               	movlb	1	; select bank1
 18358  259D  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18359  259E  0027               	movlb	7	; select bank7
 18360  259F  1C03               	skipc
 18361  25A0  110C               	bcf	12,2	;volatile
 18362  25A1  1803               	skipnc
 18363  25A2  150C               	bsf	12,2	;volatile
 18364                           
 18365                           ;LEDs.c: 31: break;
 18366  25A3  0008               	return
 18367  25A4                     l7687:	
 18368                           ;LEDs.c: 32: case 4:
 18369                           
 18370                           
 18371                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18372  25A4  0021               	movlb	1	; select bank1
 18373  25A5  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18374  25A6  0027               	movlb	7	; select bank7
 18375  25A7  1C03               	skipc
 18376  25A8  118C               	bcf	12,3	;volatile
 18377  25A9  1803               	skipnc
 18378  25AA  158C               	bsf	12,3	;volatile
 18379                           
 18380                           ;LEDs.c: 34: break;
 18381  25AB  0008               	return
 18382  25AC                     l7689:	
 18383                           ;LEDs.c: 35: case 5:
 18384                           
 18385                           
 18386                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18387  25AC  0021               	movlb	1	; select bank1
 18388  25AD  0C22               	rrf	set_leds_top@ledState^(0+128),w
 18389  25AE  0027               	movlb	7	; select bank7
 18390  25AF  1C03               	skipc
 18391  25B0  120C               	bcf	12,4	;volatile
 18392  25B1  1803               	skipnc
 18393  25B2  160C               	bsf	12,4	;volatile
 18394                           
 18395                           ;LEDs.c: 39: break;
 18396                           
 18397                           ;LEDs.c: 38: case 6:
 18398                           
 18399                           ;LEDs.c: 37: break;
 18400  25B3  0008               	return
 18401  25B4                     l788:	
 18402                           ;LEDs.c: 40: case 100:
 18403                           
 18404                           
 18405                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18406  25B4  0027               	movlb	7	; select bank7
 18407  25B5  140C               	bsf	12,0	;volatile
 18408                           
 18409                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18410  25B6  148C               	bsf	12,1	;volatile
 18411                           
 18412                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18413  25B7  150C               	bsf	12,2	;volatile
 18414                           
 18415                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18416  25B8  158C               	bsf	12,3	;volatile
 18417                           
 18418                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18419  25B9  160C               	bsf	12,4	;volatile
 18420                           
 18421                           ;LEDs.c: 47: }
 18422                           
 18423                           ;LEDs.c: 46: break;
 18424  25BA  0008               	return
 18425  25BB                     l7693:	
 18426                           
 18427                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18428                           ; Switch size 1, requested type "space"
 18429                           ; Number of cases is 1, Range of values is 0 to 0
 18430                           ; switch strategies available:
 18431                           ; Name         Instructions Cycles
 18432                           ; simple_byte            4     3 (average)
 18433                           ; direct_byte            8     6 (fixed)
 18434                           ; jumptable            260     6 (fixed)
 18435                           ;	Chosen strategy is simple_byte
 18436  25BB  0021               	movlb	1	; select bank1
 18437  25BC  0821               	movf	(set_leds_top@x+1)^(0+128),w
 18438  25BD  3A00               	xorlw	0	; case 0
 18439  25BE  1903               	skipnz
 18440  25BF  2DC1               	goto	l9795
 18441  25C0  2DD8               	goto	l789
 18442  25C1                     l9795:	
 18443                           
 18444                           ; Switch size 1, requested type "space"
 18445                           ; Number of cases is 7, Range of values is 1 to 100
 18446                           ; switch strategies available:
 18447                           ; Name         Instructions Cycles
 18448                           ; simple_byte           22    12 (average)
 18449                           ; direct_byte          209     9 (fixed)
 18450                           ; jumptable            263     9 (fixed)
 18451                           ;	Chosen strategy is simple_byte
 18452  25C1  0820               	movf	set_leds_top@x^(0+128),w
 18453  25C2  3A01               	xorlw	1	; case 1
 18454  25C3  1903               	skipnz
 18455  25C4  2D8C               	goto	l7681
 18456  25C5  3A03               	xorlw	3	; case 2
 18457  25C6  1903               	skipnz
 18458  25C7  2D94               	goto	l7683
 18459  25C8  3A01               	xorlw	1	; case 3
 18460  25C9  1903               	skipnz
 18461  25CA  2D9C               	goto	l7685
 18462  25CB  3A07               	xorlw	7	; case 4
 18463  25CC  1903               	skipnz
 18464  25CD  2DA4               	goto	l7687
 18465  25CE  3A01               	xorlw	1	; case 5
 18466  25CF  1903               	skipnz
 18467  25D0  2DAC               	goto	l7689
 18468  25D1  3A03               	xorlw	3	; case 6
 18469  25D2  1903               	skipnz
 18470  25D3  2DD8               	goto	l789
 18471  25D4  3A62               	xorlw	98	; case 100
 18472  25D5  1903               	skipnz
 18473  25D6  2DB4               	goto	l788
 18474  25D7  2DD8               	goto	l789
 18475  25D8                     l789:	
 18476  25D8  0008               	return
 18477  25D9                     __end_of_set_leds_top:	
 18478                           
 18479                           	psect	text65
 18480  20EF                     __ptext65:	
 18481 ;; *************** function _set_leds_bottom *****************
 18482 ;; Defined at:
 18483 ;;		line 51 in file "LEDs.c"
 18484 ;; Parameters:    Size  Location     Type
 18485 ;;  x               2    0[BANK1 ] int 
 18486 ;; Auto vars:     Size  Location     Type
 18487 ;;		None
 18488 ;; Return value:  Size  Location     Type
 18489 ;;                  1    wreg      void 
 18490 ;; Registers used:
 18491 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18492 ;; Tracked objects:
 18493 ;;		On entry : 0/0
 18494 ;;		On exit  : 0/0
 18495 ;;		Unchanged: 0/0
 18496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18497 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18500 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18501 ;;Total ram usage:        2 bytes
 18502 ;; Hardware stack levels used:    1
 18503 ;; Hardware stack levels required when called:    3
 18504 ;; This function calls:
 18505 ;;		Nothing
 18506 ;; This function is called by:
 18507 ;;		_ReadSavedSettings
 18508 ;;		_ring_tactiles
 18509 ;;		_solidring_tactiles
 18510 ;;		_read_bottom_tactile
 18511 ;;		_setPresetDisplay
 18512 ;;		_resetRingLEDs
 18513 ;;		_setExpressionDisplay
 18514 ;;		_star_tactiles
 18515 ;; This function uses a non-reentrant model
 18516 ;;
 18517                           
 18518                           
 18519                           ;psect for function _set_leds_bottom
 18520  20EF                     _set_leds_bottom:	
 18521                           
 18522                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 18523                           
 18524                           ;incstack = 0
 18525                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 18526  20EF  0022               	movlb	2	; select bank2
 18527  20F0  100F               	bcf	15,0	;volatile
 18528                           
 18529                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 18530  20F1  108F               	bcf	15,1	;volatile
 18531                           
 18532                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 18533  20F2  110F               	bcf	15,2	;volatile
 18534                           
 18535                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 18536  20F3  118F               	bcf	15,3	;volatile
 18537                           
 18538                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 18539  20F4  120F               	bcf	15,4	;volatile
 18540                           
 18541                           ;LEDs.c: 57: switch (x) {
 18542  20F5  290C               	goto	l7709
 18543  20F6                     l793:	
 18544                           ;LEDs.c: 58: case 1:
 18545                           
 18546                           
 18547                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 18548  20F6  0022               	movlb	2	; select bank2
 18549  20F7  140F               	bsf	15,0	;volatile
 18550                           
 18551                           ;LEDs.c: 60: break;
 18552  20F8  0008               	return
 18553  20F9                     l795:	
 18554                           ;LEDs.c: 61: case 2:
 18555                           
 18556                           
 18557                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 18558  20F9  0022               	movlb	2	; select bank2
 18559  20FA  148F               	bsf	15,1	;volatile
 18560                           
 18561                           ;LEDs.c: 63: break;
 18562  20FB  0008               	return
 18563  20FC                     l796:	
 18564                           ;LEDs.c: 64: case 3:
 18565                           
 18566                           
 18567                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 18568  20FC  0022               	movlb	2	; select bank2
 18569  20FD  150F               	bsf	15,2	;volatile
 18570                           
 18571                           ;LEDs.c: 66: break;
 18572  20FE  0008               	return
 18573  20FF                     l797:	
 18574                           ;LEDs.c: 67: case 4:
 18575                           
 18576                           
 18577                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 18578  20FF  0022               	movlb	2	; select bank2
 18579  2100  158F               	bsf	15,3	;volatile
 18580                           
 18581                           ;LEDs.c: 69: break;
 18582  2101  0008               	return
 18583  2102                     l798:	
 18584                           ;LEDs.c: 70: case 5:
 18585                           
 18586                           
 18587                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 18588  2102  0022               	movlb	2	; select bank2
 18589  2103  160F               	bsf	15,4	;volatile
 18590                           
 18591                           ;LEDs.c: 74: break;
 18592                           
 18593                           ;LEDs.c: 73: case 6:
 18594                           
 18595                           ;LEDs.c: 72: break;
 18596  2104  0008               	return
 18597  2105                     l800:	
 18598                           ;LEDs.c: 75: case 100:
 18599                           
 18600                           
 18601                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 18602  2105  0022               	movlb	2	; select bank2
 18603  2106  140F               	bsf	15,0	;volatile
 18604                           
 18605                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 18606  2107  148F               	bsf	15,1	;volatile
 18607                           
 18608                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 18609  2108  150F               	bsf	15,2	;volatile
 18610                           
 18611                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 18612  2109  158F               	bsf	15,3	;volatile
 18613                           
 18614                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 18615  210A  160F               	bsf	15,4	;volatile
 18616                           
 18617                           ;LEDs.c: 82: }
 18618                           
 18619                           ;LEDs.c: 81: break;
 18620  210B  0008               	return
 18621  210C                     l7709:	
 18622                           
 18623                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18624                           ; Switch size 1, requested type "space"
 18625                           ; Number of cases is 1, Range of values is 0 to 0
 18626                           ; switch strategies available:
 18627                           ; Name         Instructions Cycles
 18628                           ; simple_byte            4     3 (average)
 18629                           ; direct_byte            8     6 (fixed)
 18630                           ; jumptable            260     6 (fixed)
 18631                           ;	Chosen strategy is simple_byte
 18632  210C  0021               	movlb	1	; select bank1
 18633  210D  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 18634  210E  3A00               	xorlw	0	; case 0
 18635  210F  1903               	skipnz
 18636  2110  2912               	goto	l9797
 18637  2111  2929               	goto	l801
 18638  2112                     l9797:	
 18639                           
 18640                           ; Switch size 1, requested type "space"
 18641                           ; Number of cases is 7, Range of values is 1 to 100
 18642                           ; switch strategies available:
 18643                           ; Name         Instructions Cycles
 18644                           ; simple_byte           22    12 (average)
 18645                           ; direct_byte          209     9 (fixed)
 18646                           ; jumptable            263     9 (fixed)
 18647                           ;	Chosen strategy is simple_byte
 18648  2112  0820               	movf	set_leds_bottom@x^(0+128),w
 18649  2113  3A01               	xorlw	1	; case 1
 18650  2114  1903               	skipnz
 18651  2115  28F6               	goto	l793
 18652  2116  3A03               	xorlw	3	; case 2
 18653  2117  1903               	skipnz
 18654  2118  28F9               	goto	l795
 18655  2119  3A01               	xorlw	1	; case 3
 18656  211A  1903               	skipnz
 18657  211B  28FC               	goto	l796
 18658  211C  3A07               	xorlw	7	; case 4
 18659  211D  1903               	skipnz
 18660  211E  28FF               	goto	l797
 18661  211F  3A01               	xorlw	1	; case 5
 18662  2120  1903               	skipnz
 18663  2121  2902               	goto	l798
 18664  2122  3A03               	xorlw	3	; case 6
 18665  2123  1903               	skipnz
 18666  2124  2929               	goto	l801
 18667  2125  3A62               	xorlw	98	; case 100
 18668  2126  1903               	skipnz
 18669  2127  2905               	goto	l800
 18670  2128  2929               	goto	l801
 18671  2129                     l801:	
 18672  2129  0008               	return
 18673  212A                     __end_of_set_leds_bottom:	
 18674                           
 18675                           	psect	text66
 18676  2E8E                     __ptext66:	
 18677 ;; *************** function _FLASH_ReadWord *****************
 18678 ;; Defined at:
 18679 ;;		line 58 in file "memory.c"
 18680 ;; Parameters:    Size  Location     Type
 18681 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 18682 ;; Auto vars:     Size  Location     Type
 18683 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 18684 ;; Return value:  Size  Location     Type
 18685 ;;                  2    0[BANK1 ] unsigned int 
 18686 ;; Registers used:
 18687 ;;		wreg, status,2, status,0
 18688 ;; Tracked objects:
 18689 ;;		On entry : 0/0
 18690 ;;		On exit  : 0/0
 18691 ;;		Unchanged: 0/0
 18692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18693 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18694 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18696 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18697 ;;Total ram usage:        3 bytes
 18698 ;; Hardware stack levels used:    1
 18699 ;; Hardware stack levels required when called:    3
 18700 ;; This function calls:
 18701 ;;		Nothing
 18702 ;; This function is called by:
 18703 ;;		_ReadSavedSettings
 18704 ;;		_FLASH_WriteWord
 18705 ;; This function uses a non-reentrant model
 18706 ;;
 18707                           
 18708                           
 18709                           ;psect for function _FLASH_ReadWord
 18710  2E8E                     _FLASH_ReadWord:	
 18711                           
 18712                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 18713                           
 18714                           ;incstack = 0
 18715                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 18716  2E8E  3000               	movlw	0
 18717  2E8F  1B8B               	btfsc	11,7	;volatile
 18718  2E90  3001               	movlw	1
 18719  2E91  0021               	movlb	1	; select bank1
 18720  2E92  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 18721                           
 18722                           ;memory.c: 61: INTCONbits.GIE = 0;
 18723  2E93  138B               	bcf	11,7	;volatile
 18724                           
 18725                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 18726  2E94  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 18727  2E95  0023               	movlb	3	; select bank3
 18728  2E96  0091               	movwf	17	;volatile
 18729                           
 18730                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 18731  2E97  0021               	movlb	1	; select bank1
 18732  2E98  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 18733  2E99  0023               	movlb	3	; select bank3
 18734  2E9A  0092               	movwf	18	;volatile
 18735                           
 18736                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 18737  2E9B  1315               	bcf	21,6	;volatile
 18738                           
 18739                           ;memory.c: 66: PMCON1bits.RD = 1;
 18740  2E9C  1415               	bsf	21,0	;volatile
 18741                           
 18742                           ;memory.c: 67: __nop();
 18743  2E9D  0000               	nop
 18744                           
 18745                           ;memory.c: 68: __nop();
 18746  2E9E  0000               	nop
 18747                           
 18748                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 18749  2E9F  0021               	movlb	1	; select bank1
 18750  2EA0  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 18751  2EA1  1C03               	skipc
 18752  2EA2  138B               	bcf	11,7	;volatile
 18753  2EA3  1803               	skipnc
 18754  2EA4  178B               	bsf	11,7	;volatile
 18755                           
 18756                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 18757  2EA5  0023               	movlb	3	; select bank3
 18758  2EA6  0814               	movf	20,w	;volatile
 18759  2EA7  0021               	movlb	1	; select bank1
 18760  2EA8  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 18761  2EA9  0023               	movlb	3	; select bank3
 18762  2EAA  0813               	movf	19,w	;volatile
 18763  2EAB  0021               	movlb	1	; select bank1
 18764  2EAC  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 18765  2EAD  0008               	return
 18766  2EAE                     __end_of_FLASH_ReadWord:	
 18767                           
 18768                           	psect	text67
 18769  1000                     __ptext67:	
 18770 ;; *************** function _InitializeTaps *****************
 18771 ;; Defined at:
 18772 ;;		line 228 in file "user.c"
 18773 ;; Parameters:    Size  Location     Type
 18774 ;;		None
 18775 ;; Auto vars:     Size  Location     Type
 18776 ;;  itap            2    1[BANK1 ] int 
 18777 ;; Return value:  Size  Location     Type
 18778 ;;                  1    wreg      void 
 18779 ;; Registers used:
 18780 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18781 ;; Tracked objects:
 18782 ;;		On entry : 0/0
 18783 ;;		On exit  : 0/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18787 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18788 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18789 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18790 ;;Total ram usage:        3 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    3
 18793 ;; This function calls:
 18794 ;;		Nothing
 18795 ;; This function is called by:
 18796 ;;		_main
 18797 ;; This function uses a non-reentrant model
 18798 ;;
 18799                           
 18800                           
 18801                           ;psect for function _InitializeTaps
 18802  1000                     _InitializeTaps:	
 18803                           
 18804                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 18805                           
 18806                           ;incstack = 0
 18807                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 18808  1000  0021               	movlb	1	; select bank1
 18809  1001  01A1               	clrf	InitializeTaps@itap^(0+128)
 18810  1002  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 18811  1003                     L24:	
 18812  1003  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 18813  1004  3A80               	xorlw	128
 18814  1005  00A0               	movwf	??_InitializeTaps^(0+128)
 18815  1006  3080               	movlw	128
 18816  1007  0220               	subwf	??_InitializeTaps^(0+128),w
 18817  1008  1D03               	skipz
 18818  1009  280C               	goto	u9295
 18819  100A  300C               	movlw	12
 18820  100B  0221               	subwf	InitializeTaps@itap^(0+128),w
 18821  100C                     u9295:	
 18822  100C  1803               	btfsc	3,0
 18823  100D  0008               	return
 18824                           
 18825                           ;user.c: 230: tap[itap] = 0;
 18826  100E  0021               	movlb	1	; select bank1
 18827  100F  0821               	movf	InitializeTaps@itap^(0+128),w
 18828  1010  00A0               	movwf	??_InitializeTaps^(0+128)
 18829  1011  3001               	movlw	1
 18830  1012                     u9305:	
 18831  1012  35A0               	lslf	??_InitializeTaps^(0+128),f
 18832  1013  3EFF               	addlw	-1
 18833  1014  1D03               	skipz
 18834  1015  2812               	goto	u9305
 18835  1016  3520               	lslf	??_InitializeTaps^(0+128),w
 18836  1017  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 18837  1018  0086               	movwf	6
 18838  1019  3002               	movlw	2	; select bank5/6
 18839  101A  0087               	movwf	7
 18840  101B  3000               	movlw	0
 18841  101C  3FC0               	movwi [0]fsr1
 18842  101D  3000               	movlw	0
 18843  101E  3FC1               	movwi [1]fsr1
 18844  101F  3FC2               	movwi [2]fsr1
 18845  1020  3FC3               	movwi [3]fsr1
 18846  1021  3001               	movlw	1
 18847  1022  07A1               	addwf	InitializeTaps@itap^(0+128),f
 18848  1023  3000               	movlw	0
 18849  1024  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 18850  1025  2803               	goto	L24
 18851  1026                     __end_of_InitializeTaps:	
 18852                           
 18853                           	psect	text68
 18854  2F70                     __ptext68:	
 18855 ;; *************** function _InitApp *****************
 18856 ;; Defined at:
 18857 ;;		line 23 in file "user.c"
 18858 ;; Parameters:    Size  Location     Type
 18859 ;;		None
 18860 ;; Auto vars:     Size  Location     Type
 18861 ;;		None
 18862 ;; Return value:  Size  Location     Type
 18863 ;;                  1    wreg      void 
 18864 ;; Registers used:
 18865 ;;		wreg, status,2, status,0, pclath, cstack
 18866 ;; Tracked objects:
 18867 ;;		On entry : 0/0
 18868 ;;		On exit  : 0/0
 18869 ;;		Unchanged: 0/0
 18870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18875 ;;Total ram usage:        0 bytes
 18876 ;; Hardware stack levels used:    1
 18877 ;; Hardware stack levels required when called:    5
 18878 ;; This function calls:
 18879 ;;		_init_adc
 18880 ;;		_init_pwm
 18881 ;; This function is called by:
 18882 ;;		_main
 18883 ;; This function uses a non-reentrant model
 18884 ;;
 18885                           
 18886                           
 18887                           ;psect for function _InitApp
 18888  2F70                     _InitApp:	
 18889                           
 18890                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18891                           
 18892                           ;incstack = 0
 18893                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18894  2F70  0021               	movlb	1	; select bank1
 18895  2F71  100D               	bcf	13,0	;volatile
 18896                           
 18897                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18898  2F72  108D               	bcf	13,1	;volatile
 18899                           
 18900                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18901  2F73  110D               	bcf	13,2	;volatile
 18902                           
 18903                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18904  2F74  118D               	bcf	13,3	;volatile
 18905                           
 18906                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18907  2F75  120D               	bcf	13,4	;volatile
 18908                           
 18909                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18910  2F76  128D               	bcf	13,5	;volatile
 18911                           
 18912                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18913  2F77  140E               	bsf	14,0	;volatile
 18914                           
 18915                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18916  2F78  120E               	bcf	14,4	;volatile
 18917                           
 18918                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18919  2F79  128E               	bcf	14,5	;volatile
 18920                           
 18921                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18922  2F7A  100F               	bcf	15,0	;volatile
 18923                           
 18924                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18925  2F7B  108F               	bcf	15,1	;volatile
 18926                           
 18927                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18928  2F7C  110F               	bcf	15,2	;volatile
 18929                           
 18930                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18931  2F7D  118F               	bcf	15,3	;volatile
 18932                           
 18933                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18934  2F7E  120F               	bcf	15,4	;volatile
 18935                           
 18936                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18937  2F7F  168F               	bsf	15,5	;volatile
 18938                           
 18939                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18940  2F80  170F               	bsf	15,6	;volatile
 18941                           
 18942                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18943  2F81  178F               	bsf	15,7	;volatile
 18944                           
 18945                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18946  2F82  1410               	bsf	16,0	;volatile
 18947                           
 18948                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18949  2F83  1490               	bsf	16,1	;volatile
 18950                           
 18951                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18952  2F84  0023               	movlb	3	; select bank3
 18953  2F85  1010               	bcf	16,0	;volatile
 18954                           
 18955                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18956  2F86  1090               	bcf	16,1	;volatile
 18957                           
 18958                           ;user.c: 53: PORTEbits.RE0 = 0;
 18959  2F87  0020               	movlb	0	; select bank0
 18960  2F88  1010               	bcf	16,0	;volatile
 18961                           
 18962                           ;user.c: 54: PORTEbits.RE1 = 0;
 18963  2F89  1090               	bcf	16,1	;volatile
 18964                           
 18965                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18966  2F8A  0026               	movlb	6	; select bank6
 18967  2F8B  100C               	bcf	12,0	;volatile
 18968                           
 18969                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18970  2F8C  108C               	bcf	12,1	;volatile
 18971                           
 18972                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18973  2F8D  110C               	bcf	12,2	;volatile
 18974                           
 18975                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18976  2F8E  118C               	bcf	12,3	;volatile
 18977                           
 18978                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18979  2F8F  120C               	bcf	12,4	;volatile
 18980                           
 18981                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18982  2F90  128C               	bcf	12,5	;volatile
 18983                           
 18984                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18985  2F91  170C               	bsf	12,6	;volatile
 18986                           
 18987                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18988  2F92  0028               	movlb	8	; select bank8
 18989  2F93  130C               	bcf	12,6	;volatile
 18990                           
 18991                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18992  2F94  0026               	movlb	6	; select bank6
 18993  2F95  108D               	bcf	13,1	;volatile
 18994                           
 18995                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18996  2F96  110D               	bcf	13,2	;volatile
 18997                           
 18998                           ;user.c: 68: init_adc();
 18999  2F97  31AD  257E  31AF   	fcall	_init_adc
 19000                           
 19001                           ;user.c: 69: init_pwm();
 19002  2F9A  31A2  22A2         	fcall	_init_pwm
 19003                           
 19004                           ;user.c: 71: INTCONbits.GIE = 0b1;
 19005  2F9C  178B               	bsf	11,7	;volatile
 19006                           
 19007                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 19008  2F9D  168B               	bsf	11,5	;volatile
 19009                           
 19010                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 19011  2F9E  110B               	bcf	11,2	;volatile
 19012  2F9F  0008               	return
 19013  2FA0                     __end_of_InitApp:	
 19014                           
 19015                           	psect	text69
 19016  22A2                     __ptext69:	
 19017 ;; *************** function _init_pwm *****************
 19018 ;; Defined at:
 19019 ;;		line 129 in file "user.c"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;		None
 19022 ;; Auto vars:     Size  Location     Type
 19023 ;;		None
 19024 ;; Return value:  Size  Location     Type
 19025 ;;                  1    wreg      void 
 19026 ;; Registers used:
 19027 ;;		wreg, status,2, status,0, pclath, cstack
 19028 ;; Tracked objects:
 19029 ;;		On entry : 0/0
 19030 ;;		On exit  : 0/0
 19031 ;;		Unchanged: 0/0
 19032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19037 ;;Total ram usage:        0 bytes
 19038 ;; Hardware stack levels used:    1
 19039 ;; Hardware stack levels required when called:    4
 19040 ;; This function calls:
 19041 ;;		_init_timer0
 19042 ;;		_init_timer2
 19043 ;; This function is called by:
 19044 ;;		_InitApp
 19045 ;; This function uses a non-reentrant model
 19046 ;;
 19047                           
 19048                           
 19049                           ;psect for function _init_pwm
 19050  22A2                     _init_pwm:	
 19051                           
 19052                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 19053                           
 19054                           ;incstack = 0
 19055                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 19056  22A2  0022               	movlb	2	; select bank2
 19057  22A3  101D               	bcf	29,0	;volatile
 19058                           
 19059                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 19060  22A4  0021               	movlb	1	; select bank1
 19061  22A5  110E               	bcf	14,2	;volatile
 19062                           
 19063                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 19064  22A6  108E               	bcf	14,1	;volatile
 19065                           
 19066                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 19067  22A7  0026               	movlb	6	; select bank6
 19068  22A8  100D               	bcf	13,0	;volatile
 19069                           
 19070                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 19071  22A9  118D               	bcf	13,3	;volatile
 19072                           
 19073                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 19074  22AA  120D               	bcf	13,4	;volatile
 19075                           
 19076                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 19077  22AB  0021               	movlb	1	; select bank1
 19078  22AC  1310               	bcf	16,6	;volatile
 19079                           
 19080                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 19081  22AD  1290               	bcf	16,5	;volatile
 19082                           
 19083                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 19084  22AE  1210               	bcf	16,4	;volatile
 19085                           
 19086                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 19087  22AF  1190               	bcf	16,3	;volatile
 19088                           
 19089                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 19090  22B0  1110               	bcf	16,2	;volatile
 19091                           
 19092                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 19093  22B1  300F               	movlw	15
 19094  22B2  0025               	movlb	5	; select bank5
 19095  22B3  0493               	iorwf	19,f	;volatile
 19096                           
 19097                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 19098  22B4  300F               	movlw	15
 19099  22B5  049A               	iorwf	26,f	;volatile
 19100                           
 19101                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 19102  22B6  300F               	movlw	15
 19103  22B7  0026               	movlb	6	; select bank6
 19104  22B8  0493               	iorwf	19,f	;volatile
 19105                           
 19106                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 19107  22B9  300F               	movlw	15
 19108  22BA  049A               	iorwf	26,f	;volatile
 19109                           
 19110                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 19111  22BB  300F               	movlw	15
 19112  22BC  049E               	iorwf	30,f	;volatile
 19113                           
 19114                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 19115  22BD  300F               	movlw	15
 19116  22BE  002C               	movlb	12	; select bank12
 19117  22BF  0493               	iorwf	19,f	;volatile
 19118                           
 19119                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 19120  22C0  300F               	movlw	15
 19121  22C1  0496               	iorwf	22,f	;volatile
 19122                           
 19123                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 19124  22C2  300F               	movlw	15
 19125  22C3  0499               	iorwf	25,f	;volatile
 19126                           
 19127                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 19128  22C4  300F               	movlw	15
 19129  22C5  049C               	iorwf	28,f	;volatile
 19130                           
 19131                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 19132  22C6  300F               	movlw	15
 19133  22C7  049F               	iorwf	31,f	;volatile
 19134                           
 19135                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 19136  22C8  0025               	movlb	5	; select bank5
 19137  22C9  019D               	clrf	29	;volatile
 19138                           
 19139                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 19140  22CA  019E               	clrf	30	;volatile
 19141                           
 19142                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 19143  22CB  019F               	clrf	31	;volatile
 19144                           
 19145                           ;user.c: 154: CCPR1 = 50;
 19146  22CC  3000               	movlw	0
 19147  22CD  0092               	movwf	18	;volatile
 19148  22CE  3032               	movlw	50
 19149  22CF  0091               	movwf	17	;volatile
 19150                           
 19151                           ;user.c: 155: CCPR2 = 100;
 19152  22D0  3000               	movlw	0
 19153  22D1  0099               	movwf	25	;volatile
 19154  22D2  3064               	movlw	100
 19155  22D3  0098               	movwf	24	;volatile
 19156                           
 19157                           ;user.c: 156: CCPR3 = 150;
 19158  22D4  3000               	movlw	0
 19159  22D5  0026               	movlb	6	; select bank6
 19160  22D6  0092               	movwf	18	;volatile
 19161  22D7  3096               	movlw	150
 19162  22D8  0091               	movwf	17	;volatile
 19163                           
 19164                           ;user.c: 157: CCPR4 = 200;
 19165  22D9  3000               	movlw	0
 19166  22DA  0099               	movwf	25	;volatile
 19167  22DB  30C8               	movlw	200
 19168  22DC  0098               	movwf	24	;volatile
 19169                           
 19170                           ;user.c: 158: init_timer2();
 19171  22DD  31AD  256C  31A2   	fcall	_init_timer2
 19172                           
 19173                           ;user.c: 159: init_timer0();
 19174  22E0  31AD  2565         	fcall	_init_timer0
 19175  22E2  0008               	return
 19176  22E3                     __end_of_init_pwm:	
 19177                           
 19178                           	psect	text70
 19179  2D6C                     __ptext70:	
 19180 ;; *************** function _init_timer2 *****************
 19181 ;; Defined at:
 19182 ;;		line 162 in file "user.c"
 19183 ;; Parameters:    Size  Location     Type
 19184 ;;		None
 19185 ;; Auto vars:     Size  Location     Type
 19186 ;;		None
 19187 ;; Return value:  Size  Location     Type
 19188 ;;                  1    wreg      void 
 19189 ;; Registers used:
 19190 ;;		wreg, status,2, status,0
 19191 ;; Tracked objects:
 19192 ;;		On entry : 0/0
 19193 ;;		On exit  : 0/0
 19194 ;;		Unchanged: 0/0
 19195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19200 ;;Total ram usage:        0 bytes
 19201 ;; Hardware stack levels used:    1
 19202 ;; Hardware stack levels required when called:    3
 19203 ;; This function calls:
 19204 ;;		Nothing
 19205 ;; This function is called by:
 19206 ;;		_init_pwm
 19207 ;; This function uses a non-reentrant model
 19208 ;;
 19209                           
 19210                           
 19211                           ;psect for function _init_timer2
 19212  2D6C                     _init_timer2:	
 19213                           
 19214                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 19215                           
 19216                           ;incstack = 0
 19217                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 19218  2D6C  3087               	movlw	-121
 19219  2D6D  0020               	movlb	0	; select bank0
 19220  2D6E  059C               	andwf	28,f	;volatile
 19221                           
 19222                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 19223  2D6F  30FC               	movlw	-4
 19224  2D70  059C               	andwf	28,f	;volatile
 19225                           
 19226                           ;user.c: 165: PR2 = 0xFF;
 19227  2D71  30FF               	movlw	255
 19228  2D72  009B               	movwf	27	;volatile
 19229                           
 19230                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 19231  2D73  151C               	bsf	28,2	;volatile
 19232  2D74  0008               	return
 19233  2D75                     __end_of_init_timer2:	
 19234                           
 19235                           	psect	text71
 19236  2D65                     __ptext71:	
 19237 ;; *************** function _init_timer0 *****************
 19238 ;; Defined at:
 19239 ;;		line 169 in file "user.c"
 19240 ;; Parameters:    Size  Location     Type
 19241 ;;		None
 19242 ;; Auto vars:     Size  Location     Type
 19243 ;;		None
 19244 ;; Return value:  Size  Location     Type
 19245 ;;                  1    wreg      void 
 19246 ;; Registers used:
 19247 ;;		None
 19248 ;; Tracked objects:
 19249 ;;		On entry : 0/0
 19250 ;;		On exit  : 0/0
 19251 ;;		Unchanged: 0/0
 19252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19257 ;;Total ram usage:        0 bytes
 19258 ;; Hardware stack levels used:    1
 19259 ;; Hardware stack levels required when called:    3
 19260 ;; This function calls:
 19261 ;;		Nothing
 19262 ;; This function is called by:
 19263 ;;		_init_pwm
 19264 ;; This function uses a non-reentrant model
 19265 ;;
 19266                           
 19267                           
 19268                           ;psect for function _init_timer0
 19269  2D65                     _init_timer0:	
 19270                           
 19271                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 19272                           
 19273                           ;incstack = 0
 19274                           ; Regs used in _init_timer0: []
 19275  2D65  0021               	movlb	1	; select bank1
 19276  2D66  1295               	bcf	21,5	;volatile
 19277                           
 19278                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 19279  2D67  1195               	bcf	21,3	;volatile
 19280                           
 19281                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 19282  2D68  1015               	bcf	21,0	;volatile
 19283                           
 19284                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 19285  2D69  1495               	bsf	21,1	;volatile
 19286                           
 19287                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 19288  2D6A  1115               	bcf	21,2	;volatile
 19289  2D6B  0008               	return
 19290  2D6C                     __end_of_init_timer0:	
 19291                           
 19292                           	psect	text72
 19293  2D7E                     __ptext72:	
 19294 ;; *************** function _init_adc *****************
 19295 ;; Defined at:
 19296 ;;		line 115 in file "user.c"
 19297 ;; Parameters:    Size  Location     Type
 19298 ;;		None
 19299 ;; Auto vars:     Size  Location     Type
 19300 ;;		None
 19301 ;; Return value:  Size  Location     Type
 19302 ;;                  1    wreg      void 
 19303 ;; Registers used:
 19304 ;;		wreg, status,2, status,0
 19305 ;; Tracked objects:
 19306 ;;		On entry : 0/0
 19307 ;;		On exit  : 0/0
 19308 ;;		Unchanged: 0/0
 19309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19314 ;;Total ram usage:        0 bytes
 19315 ;; Hardware stack levels used:    1
 19316 ;; Hardware stack levels required when called:    3
 19317 ;; This function calls:
 19318 ;;		Nothing
 19319 ;; This function is called by:
 19320 ;;		_InitApp
 19321 ;; This function uses a non-reentrant model
 19322 ;;
 19323                           
 19324                           
 19325                           ;psect for function _init_adc
 19326  2D7E                     _init_adc:	
 19327                           
 19328                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 19329                           
 19330                           ;incstack = 0
 19331                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 19332  2D7E  0021               	movlb	1	; select bank1
 19333  2D7F  179E               	bsf	30,7	;volatile
 19334                           
 19335                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 19336  2D80  081E               	movf	30,w	;volatile
 19337  2D81  398F               	andlw	-113
 19338  2D82  3860               	iorlw	96
 19339  2D83  009E               	movwf	30	;volatile
 19340                           
 19341                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 19342  2D84  30FC               	movlw	-4
 19343  2D85  059E               	andwf	30,f	;volatile
 19344                           
 19345                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 19346  2D86  141D               	bsf	29,0	;volatile
 19347  2D87  0008               	return
 19348  2D88                     __end_of_init_adc:	
 19349                           
 19350                           	psect	text73
 19351  2D5D                     __ptext73:	
 19352 ;; *************** function _ConfigureOscillator *****************
 19353 ;; Defined at:
 19354 ;;		line 18 in file "system.c"
 19355 ;; Parameters:    Size  Location     Type
 19356 ;;		None
 19357 ;; Auto vars:     Size  Location     Type
 19358 ;;		None
 19359 ;; Return value:  Size  Location     Type
 19360 ;;                  1    wreg      void 
 19361 ;; Registers used:
 19362 ;;		wreg, status,2, status,0
 19363 ;; Tracked objects:
 19364 ;;		On entry : 0/0
 19365 ;;		On exit  : 0/0
 19366 ;;		Unchanged: 0/0
 19367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19372 ;;Total ram usage:        0 bytes
 19373 ;; Hardware stack levels used:    1
 19374 ;; Hardware stack levels required when called:    3
 19375 ;; This function calls:
 19376 ;;		Nothing
 19377 ;; This function is called by:
 19378 ;;		_main
 19379 ;; This function uses a non-reentrant model
 19380 ;;
 19381                           
 19382                           
 19383                           ;psect for function _ConfigureOscillator
 19384  2D5D                     _ConfigureOscillator:	
 19385                           
 19386                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 19387                           
 19388                           ;incstack = 0
 19389                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 19390  2D5D  30FC               	movlw	-4
 19391  2D5E  0021               	movlb	1	; select bank1
 19392  2D5F  0599               	andwf	25,f	;volatile
 19393  2D60  0008               	return
 19394  2D61                     __end_of_ConfigureOscillator:	
 19395                           
 19396                           	psect	intentry
 19397  0004                     __pintentry:	
 19398 ;; *************** function _isr *****************
 19399 ;; Defined at:
 19400 ;;		line 28 in file "interrupts.c"
 19401 ;; Parameters:    Size  Location     Type
 19402 ;;		None
 19403 ;; Auto vars:     Size  Location     Type
 19404 ;;  tmpModDelay     2   36[BANK0 ] int 
 19405 ;; Return value:  Size  Location     Type
 19406 ;;                  1    wreg      void 
 19407 ;; Registers used:
 19408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19409 ;; Tracked objects:
 19410 ;;		On entry : 0/0
 19411 ;;		On exit  : 0/0
 19412 ;;		Unchanged: 0/0
 19413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19415 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19416 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19417 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19418 ;;Total ram usage:       12 bytes
 19419 ;; Hardware stack levels used:    1
 19420 ;; Hardware stack levels required when called:    2
 19421 ;; This function calls:
 19422 ;;		_modulation
 19423 ;;		i1___awdiv
 19424 ;;		i1_getModulationSubdivision
 19425 ;;		i1_set_leds_top
 19426 ;; This function is called by:
 19427 ;;		Interrupt level 1
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431  0004                     _isr:	
 19432                           
 19433                           ;incstack = 0
 19434                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19435  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19436  0005  3180               	pagesel	$
 19437  0006  0020               	movlb	0	; select bank0
 19438  0007  087F               	movf	127,w
 19439  0008  00C3               	movwf	??_isr+9
 19440                           
 19441                           ;interrupts.c: 29: int tmpModDelay;
 19442                           ;interrupts.c: 32: extern volatile long timer;
 19443                           ;interrupts.c: 33: extern volatile long sub_timer;
 19444                           ;interrupts.c: 34: extern volatile long tap_timer;
 19445                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 19446                           ;interrupts.c: 36: extern int mod_delay_time;
 19447                           ;interrupts.c: 38: extern volatile long baseline_mod_time;
 19448                           ;interrupts.c: 40: extern int top_push_state;
 19449                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 19450                           ;interrupts.c: 42: extern volatile long mod_timer;
 19451                           ;interrupts.c: 43: extern volatile long delay_time;
 19452  0009  1D0B               	btfss	11,2	;volatile
 19453  000A  2AE1               	goto	i1l159
 19454                           
 19455                           ;interrupts.c: 47: tmpModDelay = mod_delay_time;
 19456  000B  0023               	movlb	3	; select bank3
 19457  000C  0857               	movf	(_mod_delay_time+1)^(0+384),w
 19458  000D  0020               	movlb	0	; select bank0
 19459  000E  00C5               	movwf	isr@tmpModDelay+1
 19460  000F  0023               	movlb	3	; select bank3
 19461  0010  0856               	movf	_mod_delay_time^(0+384),w
 19462  0011  0020               	movlb	0	; select bank0
 19463  0012  00C4               	movwf	isr@tmpModDelay
 19464                           
 19465                           ;interrupts.c: 48: timer = timer + 1;
 19466  0013  3001               	movlw	1
 19467  0014  00BA               	movwf	??_isr
 19468  0015  3000               	movlw	0
 19469  0016  00BB               	movwf	??_isr+1
 19470  0017  3000               	movlw	0
 19471  0018  00BC               	movwf	??_isr+2
 19472  0019  3000               	movlw	0
 19473  001A  00BD               	movwf	??_isr+3
 19474  001B  084A               	movf	_timer,w	;volatile
 19475  001C  07BA               	addwf	??_isr,f
 19476  001D  084B               	movf	_timer+1,w	;volatile
 19477  001E  3DBB               	addwfc	??_isr+1,f
 19478  001F  084C               	movf	_timer+2,w	;volatile
 19479  0020  3DBC               	addwfc	??_isr+2,f
 19480  0021  084D               	movf	_timer+3,w	;volatile
 19481  0022  3DBD               	addwfc	??_isr+3,f
 19482  0023  083D               	movf	??_isr+3,w
 19483  0024  00CD               	movwf	_timer+3	;volatile
 19484  0025  083C               	movf	??_isr+2,w
 19485  0026  00CC               	movwf	_timer+2	;volatile
 19486  0027  083B               	movf	??_isr+1,w
 19487  0028  00CB               	movwf	_timer+1	;volatile
 19488  0029  083A               	movf	??_isr,w
 19489  002A  00CA               	movwf	_timer	;volatile
 19490                           
 19491                           ;interrupts.c: 49: sub_timer = sub_timer + 1;
 19492  002B  3001               	movlw	1
 19493  002C  00BA               	movwf	??_isr
 19494  002D  3000               	movlw	0
 19495  002E  00BB               	movwf	??_isr+1
 19496  002F  3000               	movlw	0
 19497  0030  00BC               	movwf	??_isr+2
 19498  0031  3000               	movlw	0
 19499  0032  00BD               	movwf	??_isr+3
 19500  0033  0023               	movlb	3	; select bank3
 19501  0034  0828               	movf	_sub_timer^(0+384),w	;volatile
 19502  0035  0020               	movlb	0	; select bank0
 19503  0036  07BA               	addwf	??_isr,f
 19504  0037  0023               	movlb	3	; select bank3
 19505  0038  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19506  0039  0020               	movlb	0	; select bank0
 19507  003A  3DBB               	addwfc	??_isr+1,f
 19508  003B  0023               	movlb	3	; select bank3
 19509  003C  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19510  003D  0020               	movlb	0	; select bank0
 19511  003E  3DBC               	addwfc	??_isr+2,f
 19512  003F  0023               	movlb	3	; select bank3
 19513  0040  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19514  0041  0020               	movlb	0	; select bank0
 19515  0042  3DBD               	addwfc	??_isr+3,f
 19516  0043  083D               	movf	??_isr+3,w
 19517  0044  0023               	movlb	3	; select bank3
 19518  0045  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19519  0046  0020               	movlb	0	; select bank0
 19520  0047  083C               	movf	??_isr+2,w
 19521  0048  0023               	movlb	3	; select bank3
 19522  0049  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19523  004A  0020               	movlb	0	; select bank0
 19524  004B  083B               	movf	??_isr+1,w
 19525  004C  0023               	movlb	3	; select bank3
 19526  004D  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19527  004E  0020               	movlb	0	; select bank0
 19528  004F  083A               	movf	??_isr,w
 19529  0050  0023               	movlb	3	; select bank3
 19530  0051  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19531                           
 19532                           ;interrupts.c: 50: tap_timer = tap_timer + 1;
 19533  0052  3001               	movlw	1
 19534  0053  0020               	movlb	0	; select bank0
 19535  0054  00BA               	movwf	??_isr
 19536  0055  3000               	movlw	0
 19537  0056  00BB               	movwf	??_isr+1
 19538  0057  3000               	movlw	0
 19539  0058  00BC               	movwf	??_isr+2
 19540  0059  3000               	movlw	0
 19541  005A  00BD               	movwf	??_isr+3
 19542  005B  0846               	movf	_tap_timer,w	;volatile
 19543  005C  07BA               	addwf	??_isr,f
 19544  005D  0847               	movf	_tap_timer+1,w	;volatile
 19545  005E  3DBB               	addwfc	??_isr+1,f
 19546  005F  0848               	movf	_tap_timer+2,w	;volatile
 19547  0060  3DBC               	addwfc	??_isr+2,f
 19548  0061  0849               	movf	_tap_timer+3,w	;volatile
 19549  0062  3DBD               	addwfc	??_isr+3,f
 19550  0063  083D               	movf	??_isr+3,w
 19551  0064  00C9               	movwf	_tap_timer+3	;volatile
 19552  0065  083C               	movf	??_isr+2,w
 19553  0066  00C8               	movwf	_tap_timer+2	;volatile
 19554  0067  083B               	movf	??_isr+1,w
 19555  0068  00C7               	movwf	_tap_timer+1	;volatile
 19556  0069  083A               	movf	??_isr,w
 19557  006A  00C6               	movwf	_tap_timer	;volatile
 19558                           
 19559                           ;interrupts.c: 51: mod_timer = mod_timer + 1;
 19560  006B  3001               	movlw	1
 19561  006C  00BA               	movwf	??_isr
 19562  006D  3000               	movlw	0
 19563  006E  00BB               	movwf	??_isr+1
 19564  006F  3000               	movlw	0
 19565  0070  00BC               	movwf	??_isr+2
 19566  0071  3000               	movlw	0
 19567  0072  00BD               	movwf	??_isr+3
 19568  0073  0023               	movlb	3	; select bank3
 19569  0074  0824               	movf	_mod_timer^(0+384),w	;volatile
 19570  0075  0020               	movlb	0	; select bank0
 19571  0076  07BA               	addwf	??_isr,f
 19572  0077  0023               	movlb	3	; select bank3
 19573  0078  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 19574  0079  0020               	movlb	0	; select bank0
 19575  007A  3DBB               	addwfc	??_isr+1,f
 19576  007B  0023               	movlb	3	; select bank3
 19577  007C  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 19578  007D  0020               	movlb	0	; select bank0
 19579  007E  3DBC               	addwfc	??_isr+2,f
 19580  007F  0023               	movlb	3	; select bank3
 19581  0080  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19582  0081  0020               	movlb	0	; select bank0
 19583  0082  3DBD               	addwfc	??_isr+3,f
 19584  0083  083D               	movf	??_isr+3,w
 19585  0084  0023               	movlb	3	; select bank3
 19586  0085  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19587  0086  0020               	movlb	0	; select bank0
 19588  0087  083C               	movf	??_isr+2,w
 19589  0088  0023               	movlb	3	; select bank3
 19590  0089  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19591  008A  0020               	movlb	0	; select bank0
 19592  008B  083B               	movf	??_isr+1,w
 19593  008C  0023               	movlb	3	; select bank3
 19594  008D  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19595  008E  0020               	movlb	0	; select bank0
 19596  008F  083A               	movf	??_isr,w
 19597  0090  0023               	movlb	3	; select bank3
 19598  0091  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19599                           
 19600                           ;interrupts.c: 52: double_timer++;
 19601  0092  3001               	movlw	1
 19602  0093  07A0               	addwf	_double_timer^(0+384),f	;volatile
 19603  0094  3000               	movlw	0
 19604  0095  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 19605  0096  3000               	movlw	0
 19606  0097  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 19607  0098  3000               	movlw	0
 19608  0099  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 19609                           
 19610                           ;interrupts.c: 57: if (longBypass_start == 1) {
 19611  009A  0020               	movlb	0	; select bank0
 19612  009B  0352               	decf	_longBypass_start,w
 19613  009C  1D03               	btfss	3,2
 19614  009D  28B5               	goto	i1l6863
 19615                           
 19616                           ;interrupts.c: 58: longBypass_timer++;
 19617  009E  3001               	movlw	1
 19618  009F  0023               	movlb	3	; select bank3
 19619  00A0  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 19620  00A1  3000               	movlw	0
 19621  00A2  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 19622                           
 19623                           ;interrupts.c: 59: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 19624  00A3  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 19625  00A4  0020               	movlb	0	; select bank0
 19626  00A5  0263               	subwf	_long_press_limit+1,w
 19627  00A6  1D03               	skipz
 19628  00A7  28AC               	goto	u673_25
 19629  00A8  0023               	movlb	3	; select bank3
 19630  00A9  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 19631  00AA  0020               	movlb	0	; select bank0
 19632  00AB  0262               	subwf	_long_press_limit,w
 19633  00AC                     u673_25:	
 19634  00AC  1803               	skipnc
 19635  00AD  28B5               	goto	i1l6863
 19636  00AE  0863               	movf	_long_press_limit+1,w
 19637  00AF  0023               	movlb	3	; select bank3
 19638  00B0  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 19639  00B1  0020               	movlb	0	; select bank0
 19640  00B2  0862               	movf	_long_press_limit,w
 19641  00B3  0023               	movlb	3	; select bank3
 19642  00B4  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 19643  00B5                     i1l6863:	
 19644                           
 19645                           ;interrupts.c: 60: }
 19646                           ;interrupts.c: 61: if (longTap_start == 1) {
 19647  00B5  0020               	movlb	0	; select bank0
 19648  00B6  0354               	decf	_longTap_start,w
 19649  00B7  1D03               	btfss	3,2
 19650  00B8  28D0               	goto	i1l6869
 19651                           
 19652                           ;interrupts.c: 62: longTap_timer++;
 19653  00B9  3001               	movlw	1
 19654  00BA  0023               	movlb	3	; select bank3
 19655  00BB  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 19656  00BC  3000               	movlw	0
 19657  00BD  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 19658                           
 19659                           ;interrupts.c: 63: if (longTap_timer > long_press_limit) {
 19660  00BE  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 19661  00BF  0020               	movlb	0	; select bank0
 19662  00C0  0263               	subwf	_long_press_limit+1,w
 19663  00C1  1D03               	skipz
 19664  00C2  28C7               	goto	u675_25
 19665  00C3  0023               	movlb	3	; select bank3
 19666  00C4  0838               	movf	_longTap_timer^(0+384),w	;volatile
 19667  00C5  0020               	movlb	0	; select bank0
 19668  00C6  0262               	subwf	_long_press_limit,w
 19669  00C7                     u675_25:	
 19670  00C7  1803               	skipnc
 19671  00C8  28D0               	goto	i1l6869
 19672                           
 19673                           ;interrupts.c: 64: longTap_timer = long_press_limit;
 19674  00C9  0863               	movf	_long_press_limit+1,w
 19675  00CA  0023               	movlb	3	; select bank3
 19676  00CB  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 19677  00CC  0020               	movlb	0	; select bank0
 19678  00CD  0862               	movf	_long_press_limit,w
 19679  00CE  0023               	movlb	3	; select bank3
 19680  00CF  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 19681  00D0                     i1l6869:	
 19682                           
 19683                           ;interrupts.c: 65: }
 19684                           ;interrupts.c: 66: }
 19685                           ;interrupts.c: 69: if (adjust_mod_delay == 1) {
 19686  00D0  0023               	movlb	3	; select bank3
 19687  00D1  033E               	decf	_adjust_mod_delay^(0+384),w
 19688  00D2  1D03               	btfss	3,2
 19689  00D3  2913               	goto	i1l136
 19690                           
 19691                           ;interrupts.c: 70: if ((timer + mod_delay_time) > delay_time) {
 19692  00D4  0020               	movlb	0	; select bank0
 19693  00D5  084A               	movf	_timer,w	;volatile
 19694  00D6  00BA               	movwf	??_isr
 19695  00D7  084B               	movf	_timer+1,w	;volatile
 19696  00D8  00BB               	movwf	??_isr+1
 19697  00D9  084C               	movf	_timer+2,w	;volatile
 19698  00DA  00BC               	movwf	??_isr+2
 19699  00DB  084D               	movf	_timer+3,w	;volatile
 19700  00DC  00BD               	movwf	??_isr+3
 19701  00DD  0023               	movlb	3	; select bank3
 19702  00DE  0856               	movf	_mod_delay_time^(0+384),w
 19703  00DF  0020               	movlb	0	; select bank0
 19704  00E0  00BE               	movwf	??_isr+4
 19705  00E1  0023               	movlb	3	; select bank3
 19706  00E2  0857               	movf	(_mod_delay_time+1)^(0+384),w
 19707  00E3  0020               	movlb	0	; select bank0
 19708  00E4  00BF               	movwf	??_isr+5
 19709  00E5  3000               	movlw	0
 19710  00E6  1BBF               	btfsc	??_isr+5,7
 19711  00E7  30FF               	movlw	255
 19712  00E8  00C0               	movwf	??_isr+6
 19713  00E9  00C1               	movwf	??_isr+7
 19714  00EA  083E               	movf	??_isr+4,w
 19715  00EB  07BA               	addwf	??_isr,f
 19716  00EC  083F               	movf	??_isr+5,w
 19717  00ED  3DBB               	addwfc	??_isr+1,f
 19718  00EE  0840               	movf	??_isr+6,w
 19719  00EF  3DBC               	addwfc	??_isr+2,f
 19720  00F0  0841               	movf	??_isr+7,w
 19721  00F1  3DBD               	addwfc	??_isr+3,f
 19722  00F2  085F               	movf	_delay_time+3,w	;volatile
 19723  00F3  3A80               	xorlw	128
 19724  00F4  00C2               	movwf	??_isr+8
 19725  00F5  083D               	movf	??_isr+3,w
 19726  00F6  3A80               	xorlw	128
 19727  00F7  0242               	subwf	??_isr+8,w
 19728  00F8  1D03               	skipz
 19729  00F9  2904               	goto	u677_23
 19730  00FA  083C               	movf	??_isr+2,w
 19731  00FB  025E               	subwf	_delay_time+2,w	;volatile
 19732  00FC  1D03               	skipz
 19733  00FD  2904               	goto	u677_23
 19734  00FE  083B               	movf	??_isr+1,w
 19735  00FF  025D               	subwf	_delay_time+1,w	;volatile
 19736  0100  1D03               	skipz
 19737  0101  2904               	goto	u677_23
 19738  0102  083A               	movf	??_isr,w
 19739  0103  025C               	subwf	_delay_time,w	;volatile
 19740  0104                     u677_23:	
 19741  0104  1803               	skipnc
 19742  0105  2913               	goto	i1l136
 19743                           
 19744                           ;interrupts.c: 71: tmpModDelay = (delay_time - timer);
 19745  0106  094A               	comf	_timer,w	;volatile
 19746  0107  00BA               	movwf	??_isr
 19747  0108  094B               	comf	_timer+1,w	;volatile
 19748  0109  00BB               	movwf	??_isr+1
 19749  010A  0ABA               	incf	??_isr,f
 19750  010B  1903               	skipnz
 19751  010C  0ABB               	incf	??_isr+1,f
 19752  010D  085C               	movf	_delay_time,w	;volatile
 19753  010E  073A               	addwf	??_isr,w
 19754  010F  00C4               	movwf	isr@tmpModDelay
 19755  0110  085D               	movf	_delay_time+1,w	;volatile
 19756  0111  3D3B               	addwfc	??_isr+1,w
 19757  0112  00C5               	movwf	isr@tmpModDelay+1
 19758  0113                     i1l136:	
 19759                           
 19760                           ;interrupts.c: 72: }
 19761                           ;interrupts.c: 73: }
 19762                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 19763  0113  0020               	movlb	0	; select bank0
 19764  0114  0868               	movf	_longTap_state,w	;volatile
 19765  0115  1D03               	btfss	3,2
 19766  0116  2979               	goto	i1l6897
 19767  0117  0850               	movf	_doubleTap_state,w	;volatile
 19768  0118  1D03               	btfss	3,2
 19769  0119  2979               	goto	i1l6897
 19770  011A  0857               	movf	_presetSaveMode,w
 19771  011B  1D03               	btfss	3,2
 19772  011C  2979               	goto	i1l6897
 19773                           
 19774                           ;interrupts.c: 80: if (timer >= baseline_mod_time) {
 19775  011D  084D               	movf	_timer+3,w	;volatile
 19776  011E  3A80               	xorlw	128
 19777  011F  00BA               	movwf	??_isr
 19778  0120  0023               	movlb	3	; select bank3
 19779  0121  0849               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 19780  0122  3A80               	xorlw	128
 19781  0123  0020               	movlb	0	; select bank0
 19782  0124  023A               	subwf	??_isr,w
 19783  0125  1D03               	skipz
 19784  0126  2937               	goto	u681_23
 19785  0127  0023               	movlb	3	; select bank3
 19786  0128  0848               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 19787  0129  0020               	movlb	0	; select bank0
 19788  012A  024C               	subwf	_timer+2,w	;volatile
 19789  012B  1D03               	skipz
 19790  012C  2937               	goto	u681_23
 19791  012D  0023               	movlb	3	; select bank3
 19792  012E  0847               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 19793  012F  0020               	movlb	0	; select bank0
 19794  0130  024B               	subwf	_timer+1,w	;volatile
 19795  0131  1D03               	skipz
 19796  0132  2937               	goto	u681_23
 19797  0133  0023               	movlb	3	; select bank3
 19798  0134  0846               	movf	_baseline_mod_time^(0+384),w	;volatile
 19799  0135  0020               	movlb	0	; select bank0
 19800  0136  024A               	subwf	_timer,w	;volatile
 19801  0137                     u681_23:	
 19802  0137  1C03               	skipc
 19803  0138  2967               	goto	i1l6893
 19804                           
 19805                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 19806  0139  0022               	movlb	2	; select bank2
 19807  013A  160D               	bsf	13,4	;volatile
 19808                           
 19809                           ;interrupts.c: 85: timer = 0;
 19810  013B  3000               	movlw	0
 19811  013C  0020               	movlb	0	; select bank0
 19812  013D  00CD               	movwf	_timer+3	;volatile
 19813  013E  3000               	movlw	0
 19814  013F  00CC               	movwf	_timer+2	;volatile
 19815  0140  3000               	movlw	0
 19816  0141  00CB               	movwf	_timer+1	;volatile
 19817  0142  3000               	movlw	0
 19818  0143  00CA               	movwf	_timer	;volatile
 19819                           
 19820                           ;interrupts.c: 87: if (modulation_changed == 1) {
 19821  0144  0356               	decf	_modulation_changed,w
 19822  0145  1D03               	btfss	3,2
 19823  0146  2967               	goto	i1l6893
 19824                           
 19825                           ;interrupts.c: 90: mod_counter = 0;
 19826  0147  0024               	movlb	4	; select bank4
 19827  0148  01CF               	clrf	_mod_counter^(0+512)
 19828  0149  01D0               	clrf	(_mod_counter+1)^(0+512)
 19829                           
 19830                           ;interrupts.c: 91: modulation_changed = 0;
 19831  014A  0020               	movlb	0	; select bank0
 19832  014B  01D6               	clrf	_modulation_changed
 19833                           
 19834                           ;interrupts.c: 92: mod_timer = mod_delay_time;
 19835  014C  0023               	movlb	3	; select bank3
 19836  014D  0856               	movf	_mod_delay_time^(0+384),w
 19837  014E  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19838  014F  0857               	movf	(_mod_delay_time+1)^(0+384),w
 19839  0150  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19840  0151  0D89               	rlf	9,f
 19841  0152  3B89               	subwfb	9,f
 19842  0153  0989               	comf	9,f
 19843  0154  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19844  0155  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19845                           
 19846                           ;interrupts.c: 94: reset_sub_delay = 0;
 19847  0156  01C4               	clrf	_reset_sub_delay^(0+384)
 19848                           
 19849                           ;interrupts.c: 95: sub_timer = delay_time;
 19850  0157  0020               	movlb	0	; select bank0
 19851  0158  085F               	movf	_delay_time+3,w	;volatile
 19852  0159  0023               	movlb	3	; select bank3
 19853  015A  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19854  015B  0020               	movlb	0	; select bank0
 19855  015C  085E               	movf	_delay_time+2,w	;volatile
 19856  015D  0023               	movlb	3	; select bank3
 19857  015E  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19858  015F  0020               	movlb	0	; select bank0
 19859  0160  085D               	movf	_delay_time+1,w	;volatile
 19860  0161  0023               	movlb	3	; select bank3
 19861  0162  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19862  0163  0020               	movlb	0	; select bank0
 19863  0164  085C               	movf	_delay_time,w	;volatile
 19864  0165  0023               	movlb	3	; select bank3
 19865  0166  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19866  0167                     i1l6893:	
 19867                           
 19868                           ;interrupts.c: 96: }
 19869                           ;interrupts.c: 97: }
 19870                           ;interrupts.c: 99: if (timer >= 30) {
 19871  0167  0020               	movlb	0	; select bank0
 19872  0168  1BCD               	btfsc	_timer+3,7	;volatile
 19873  0169  2979               	goto	i1l6897
 19874  016A  084D               	movf	_timer+3,w	;volatile
 19875  016B  1D03               	btfss	3,2
 19876  016C  2977               	goto	i1l6895
 19877  016D  084C               	movf	_timer+2,w	;volatile
 19878  016E  1D03               	btfss	3,2
 19879  016F  2977               	goto	i1l6895
 19880  0170  084B               	movf	_timer+1,w	;volatile
 19881  0171  1D03               	btfss	3,2
 19882  0172  2977               	goto	i1l6895
 19883  0173  301E               	movlw	30
 19884  0174  024A               	subwf	_timer,w	;volatile
 19885  0175  1C03               	btfss	3,0
 19886  0176  2979               	goto	i1l6897
 19887  0177                     i1l6895:	
 19888                           
 19889                           ;interrupts.c: 101: LATBbits.LATB4 = 0;
 19890  0177  0022               	movlb	2	; select bank2
 19891  0178  120D               	bcf	13,4	;volatile
 19892  0179                     i1l6897:	
 19893                           
 19894                           ;interrupts.c: 103: }
 19895                           ;interrupts.c: 104: }
 19896                           ;interrupts.c: 107: if (presetSaveMode == 1) {
 19897  0179  0020               	movlb	0	; select bank0
 19898  017A  0357               	decf	_presetSaveMode,w
 19899  017B  1D03               	btfss	3,2
 19900  017C  29A9               	goto	i1l6909
 19901                           
 19902                           ;interrupts.c: 108: if (double_timer >= 250) {
 19903  017D  0023               	movlb	3	; select bank3
 19904  017E  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19905  017F  2998               	goto	i1l6905
 19906  0180  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19907  0181  1D03               	btfss	3,2
 19908  0182  298D               	goto	i1l6901
 19909  0183  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19910  0184  1D03               	btfss	3,2
 19911  0185  298D               	goto	i1l6901
 19912  0186  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19913  0187  1D03               	btfss	3,2
 19914  0188  298D               	goto	i1l6901
 19915  0189  30FA               	movlw	250
 19916  018A  0220               	subwf	_double_timer^(0+384),w	;volatile
 19917  018B  1C03               	btfss	3,0
 19918  018C  2998               	goto	i1l6905
 19919  018D                     i1l6901:	
 19920                           
 19921                           ;interrupts.c: 109: LATBbits.LATB0 = 1;
 19922  018D  0022               	movlb	2	; select bank2
 19923  018E  140D               	bsf	13,0	;volatile
 19924                           
 19925                           ;interrupts.c: 110: double_timer = 0;
 19926  018F  3000               	movlw	0
 19927  0190  0023               	movlb	3	; select bank3
 19928  0191  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19929  0192  3000               	movlw	0
 19930  0193  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19931  0194  3000               	movlw	0
 19932  0195  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19933  0196  3000               	movlw	0
 19934  0197  00A0               	movwf	_double_timer^(0+384)	;volatile
 19935  0198                     i1l6905:	
 19936                           
 19937                           ;interrupts.c: 111: }
 19938                           ;interrupts.c: 112: if (double_timer >= 30) {
 19939  0198  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19940  0199  29A9               	goto	i1l6909
 19941  019A  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19942  019B  1D03               	btfss	3,2
 19943  019C  29A7               	goto	i1l6907
 19944  019D  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19945  019E  1D03               	btfss	3,2
 19946  019F  29A7               	goto	i1l6907
 19947  01A0  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19948  01A1  1D03               	btfss	3,2
 19949  01A2  29A7               	goto	i1l6907
 19950  01A3  301E               	movlw	30
 19951  01A4  0220               	subwf	_double_timer^(0+384),w	;volatile
 19952  01A5  1C03               	btfss	3,0
 19953  01A6  29A9               	goto	i1l6909
 19954  01A7                     i1l6907:	
 19955                           
 19956                           ;interrupts.c: 113: LATBbits.LATB0 = 0;
 19957  01A7  0022               	movlb	2	; select bank2
 19958  01A8  100D               	bcf	13,0	;volatile
 19959  01A9                     i1l6909:	
 19960                           
 19961                           ;interrupts.c: 114: }
 19962                           ;interrupts.c: 115: }
 19963                           ;interrupts.c: 117: if (presetSaveMode < 1 && mode2_state == 0) {
 19964  01A9  0020               	movlb	0	; select bank0
 19965  01AA  0857               	movf	_presetSaveMode,w
 19966  01AB  1D03               	btfss	3,2
 19967  01AC  2A10               	goto	i1l6929
 19968  01AD  0855               	movf	_mode2_state,w
 19969  01AE  1D03               	btfss	3,2
 19970  01AF  2A10               	goto	i1l6929
 19971                           
 19972                           ;interrupts.c: 118: if (sub_timer >= tmpModDelay ) {
 19973  01B0  0844               	movf	isr@tmpModDelay,w
 19974  01B1  00BA               	movwf	??_isr
 19975  01B2  0845               	movf	isr@tmpModDelay+1,w
 19976  01B3  00BB               	movwf	??_isr+1
 19977  01B4  3000               	movlw	0
 19978  01B5  1BBB               	btfsc	??_isr+1,7
 19979  01B6  30FF               	movlw	255
 19980  01B7  00BC               	movwf	??_isr+2
 19981  01B8  00BD               	movwf	??_isr+3
 19982  01B9  0023               	movlb	3	; select bank3
 19983  01BA  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19984  01BB  3A80               	xorlw	128
 19985  01BC  0020               	movlb	0	; select bank0
 19986  01BD  00BE               	movwf	??_isr+4
 19987  01BE  083D               	movf	??_isr+3,w
 19988  01BF  3A80               	xorlw	128
 19989  01C0  023E               	subwf	??_isr+4,w
 19990  01C1  0023               	movlb	3	; select bank3
 19991  01C2  1D03               	skipz
 19992  01C3  29D4               	goto	u689_23
 19993  01C4  0020               	movlb	0	; select bank0
 19994  01C5  083C               	movf	??_isr+2,w
 19995  01C6  0023               	movlb	3	; select bank3
 19996  01C7  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 19997  01C8  1D03               	skipz
 19998  01C9  29D4               	goto	u689_23
 19999  01CA  0020               	movlb	0	; select bank0
 20000  01CB  083B               	movf	??_isr+1,w
 20001  01CC  0023               	movlb	3	; select bank3
 20002  01CD  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 20003  01CE  1D03               	skipz
 20004  01CF  29D4               	goto	u689_23
 20005  01D0  0020               	movlb	0	; select bank0
 20006  01D1  083A               	movf	??_isr,w
 20007  01D2  0023               	movlb	3	; select bank3
 20008  01D3  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20009  01D4                     u689_23:	
 20010  01D4  1C03               	skipc
 20011  01D5  29F3               	goto	i1l6923
 20012                           
 20013                           ;interrupts.c: 119: if (suspend_blink == 0) {
 20014  01D6  0020               	movlb	0	; select bank0
 20015  01D7  0859               	movf	_suspend_blink,w	;volatile
 20016  01D8  1D03               	btfss	3,2
 20017  01D9  29E5               	goto	i1l6919
 20018                           
 20019                           ;interrupts.c: 120: set_leds_top(top_push_state, 1);
 20020  01DA  0865               	movf	_top_push_state+1,w
 20021  01DB  00F1               	movwf	i1set_leds_top@x+1
 20022  01DC  0864               	movf	_top_push_state,w
 20023  01DD  00F0               	movwf	i1set_leds_top@x
 20024  01DE  3001               	movlw	1
 20025  01DF  00F2               	movwf	i1set_leds_top@ledState
 20026  01E0  3000               	movlw	0
 20027  01E1  00F3               	movwf	i1set_leds_top@ledState+1
 20028  01E2  31A3  236C  3180   	fcall	i1_set_leds_top
 20029  01E5                     i1l6919:	
 20030                           
 20031                           ;interrupts.c: 121: }
 20032                           ;interrupts.c: 122: tmpModDelay = delay_time;
 20033  01E5  0020               	movlb	0	; select bank0
 20034  01E6  085D               	movf	_delay_time+1,w	;volatile
 20035  01E7  00C5               	movwf	isr@tmpModDelay+1
 20036  01E8  085C               	movf	_delay_time,w	;volatile
 20037  01E9  00C4               	movwf	isr@tmpModDelay
 20038                           
 20039                           ;interrupts.c: 123: sub_timer = 0;
 20040  01EA  3000               	movlw	0
 20041  01EB  0023               	movlb	3	; select bank3
 20042  01EC  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 20043  01ED  3000               	movlw	0
 20044  01EE  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 20045  01EF  3000               	movlw	0
 20046  01F0  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 20047  01F1  3000               	movlw	0
 20048  01F2  00A8               	movwf	_sub_timer^(0+384)	;volatile
 20049  01F3                     i1l6923:	
 20050                           
 20051                           ;interrupts.c: 124: }
 20052                           ;interrupts.c: 126: if (sub_timer >= 20) {
 20053  01F3  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 20054  01F4  2A10               	goto	i1l6929
 20055  01F5  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 20056  01F6  1D03               	btfss	3,2
 20057  01F7  2A02               	goto	i1l6925
 20058  01F8  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 20059  01F9  1D03               	btfss	3,2
 20060  01FA  2A02               	goto	i1l6925
 20061  01FB  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 20062  01FC  1D03               	btfss	3,2
 20063  01FD  2A02               	goto	i1l6925
 20064  01FE  3014               	movlw	20
 20065  01FF  0228               	subwf	_sub_timer^(0+384),w	;volatile
 20066  0200  1C03               	btfss	3,0
 20067  0201  2A10               	goto	i1l6929
 20068  0202                     i1l6925:	
 20069                           
 20070                           ;interrupts.c: 127: if (suspend_blink == 0) {
 20071  0202  0020               	movlb	0	; select bank0
 20072  0203  0859               	movf	_suspend_blink,w	;volatile
 20073  0204  1D03               	btfss	3,2
 20074  0205  2A10               	goto	i1l6929
 20075                           
 20076                           ;interrupts.c: 128: set_leds_top(top_push_state, 0);
 20077  0206  0865               	movf	_top_push_state+1,w
 20078  0207  00F1               	movwf	i1set_leds_top@x+1
 20079  0208  0864               	movf	_top_push_state,w
 20080  0209  00F0               	movwf	i1set_leds_top@x
 20081  020A  3000               	movlw	0
 20082  020B  00F2               	movwf	i1set_leds_top@ledState
 20083  020C  00F3               	movwf	i1set_leds_top@ledState+1
 20084  020D  31A3  236C  3180   	fcall	i1_set_leds_top
 20085  0210                     i1l6929:	
 20086                           
 20087                           ;interrupts.c: 129: }
 20088                           ;interrupts.c: 130: }
 20089                           ;interrupts.c: 131: }
 20090                           ;interrupts.c: 147: if (mod_timer >= tmpModDelay) {
 20091  0210  0020               	movlb	0	; select bank0
 20092  0211  0844               	movf	isr@tmpModDelay,w
 20093  0212  00BA               	movwf	??_isr
 20094  0213  0845               	movf	isr@tmpModDelay+1,w
 20095  0214  00BB               	movwf	??_isr+1
 20096  0215  3000               	movlw	0
 20097  0216  1BBB               	btfsc	??_isr+1,7
 20098  0217  30FF               	movlw	255
 20099  0218  00BC               	movwf	??_isr+2
 20100  0219  00BD               	movwf	??_isr+3
 20101  021A  0023               	movlb	3	; select bank3
 20102  021B  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 20103  021C  3A80               	xorlw	128
 20104  021D  0020               	movlb	0	; select bank0
 20105  021E  00BE               	movwf	??_isr+4
 20106  021F  083D               	movf	??_isr+3,w
 20107  0220  3A80               	xorlw	128
 20108  0221  023E               	subwf	??_isr+4,w
 20109  0222  0023               	movlb	3	; select bank3
 20110  0223  1D03               	skipz
 20111  0224  2A35               	goto	u693_23
 20112  0225  0020               	movlb	0	; select bank0
 20113  0226  083C               	movf	??_isr+2,w
 20114  0227  0023               	movlb	3	; select bank3
 20115  0228  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 20116  0229  1D03               	skipz
 20117  022A  2A35               	goto	u693_23
 20118  022B  0020               	movlb	0	; select bank0
 20119  022C  083B               	movf	??_isr+1,w
 20120  022D  0023               	movlb	3	; select bank3
 20121  022E  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 20122  022F  1D03               	skipz
 20123  0230  2A35               	goto	u693_23
 20124  0231  0020               	movlb	0	; select bank0
 20125  0232  083A               	movf	??_isr,w
 20126  0233  0023               	movlb	3	; select bank3
 20127  0234  0224               	subwf	_mod_timer^(0+384),w	;volatile
 20128  0235                     u693_23:	
 20129  0235  1C03               	skipc
 20130  0236  2AAB               	goto	i1l6947
 20131                           
 20132                           ;interrupts.c: 148: mod_timer = 0;
 20133  0237  3000               	movlw	0
 20134  0238  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 20135  0239  3000               	movlw	0
 20136  023A  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 20137  023B  3000               	movlw	0
 20138  023C  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 20139  023D  3000               	movlw	0
 20140  023E  00A4               	movwf	_mod_timer^(0+384)	;volatile
 20141                           
 20142                           ;interrupts.c: 152: if (mod_counter >= getModulationSubdivision()) {
 20143  023F  31AF  2715  3180   	fcall	i1_getModulationSubdivision
 20144  0242  0024               	movlb	4	; select bank4
 20145  0243  0850               	movf	(_mod_counter+1)^(0+512),w
 20146  0244  3A80               	xorlw	128
 20147  0245  0020               	movlb	0	; select bank0
 20148  0246  00BA               	movwf	??_isr
 20149  0247  0871               	movf	?i1_getModulationSubdivision+1,w
 20150  0248  3A80               	xorlw	128
 20151  0249  023A               	subwf	??_isr,w
 20152  024A  1D03               	skipz
 20153  024B  2A4F               	goto	u694_25
 20154  024C  0870               	movf	?i1_getModulationSubdivision,w
 20155  024D  0024               	movlb	4	; select bank4
 20156  024E  024F               	subwf	_mod_counter^(0+512),w
 20157  024F                     u694_25:	
 20158  024F  1C03               	skipc
 20159  0250  2A57               	goto	i1l151
 20160                           
 20161                           ;interrupts.c: 153: mod_counter = 0;
 20162  0251  0024               	movlb	4	; select bank4
 20163  0252  01CF               	clrf	_mod_counter^(0+512)
 20164  0253  01D0               	clrf	(_mod_counter+1)^(0+512)
 20165                           
 20166                           ;interrupts.c: 154: LATBbits.LATB0 = 1;
 20167  0254  0022               	movlb	2	; select bank2
 20168  0255  140D               	bsf	13,0	;volatile
 20169                           
 20170                           ;interrupts.c: 155: } else {
 20171  0256  2A59               	goto	i1l6939
 20172  0257                     i1l151:	
 20173                           
 20174                           ;interrupts.c: 156: LATBbits.LATB0 = 0;
 20175  0257  0022               	movlb	2	; select bank2
 20176  0258  100D               	bcf	13,0	;volatile
 20177  0259                     i1l6939:	
 20178                           
 20179                           ;interrupts.c: 157: }
 20180                           ;interrupts.c: 159: mod_value = modArray[mod_counter];
 20181  0259  0024               	movlb	4	; select bank4
 20182  025A  0850               	movf	(_mod_counter+1)^(0+512),w
 20183  025B  0020               	movlb	0	; select bank0
 20184  025C  00BB               	movwf	??_isr+1
 20185  025D  0024               	movlb	4	; select bank4
 20186  025E  084F               	movf	_mod_counter^(0+512),w
 20187  025F  0020               	movlb	0	; select bank0
 20188  0260  00BA               	movwf	??_isr
 20189  0261  35BA               	lslf	??_isr,f
 20190  0262  0DBB               	rlf	??_isr+1,f
 20191  0263  308A               	movlw	138
 20192  0264  00BC               	movwf	??_isr+2
 20193  0265  3023               	movlw	35
 20194  0266  00BD               	movwf	??_isr+3
 20195  0267  083A               	movf	??_isr,w
 20196  0268  073C               	addwf	??_isr+2,w
 20197  0269  0086               	movwf	6
 20198  026A  083B               	movf	??_isr+1,w
 20199  026B  3D3D               	addwfc	??_isr+3,w
 20200  026C  0087               	movwf	7
 20201  026D  3F40               	moviw [0]fsr1
 20202  026E  0023               	movlb	3	; select bank3
 20203  026F  00BA               	movwf	_mod_value^(0+384)
 20204  0270  3F41               	moviw [1]fsr1
 20205  0271  00BB               	movwf	(_mod_value+1)^(0+384)
 20206                           
 20207                           ;interrupts.c: 166: mod_value = modulation(mod_value, adjusted_pot_value);
 20208  0272  083A               	movf	_mod_value^(0+384),w
 20209  0273  0020               	movlb	0	; select bank0
 20210  0274  00AE               	movwf	modulation@x
 20211  0275  0023               	movlb	3	; select bank3
 20212  0276  083B               	movf	(_mod_value+1)^(0+384),w
 20213  0277  0020               	movlb	0	; select bank0
 20214  0278  00AF               	movwf	modulation@x+1
 20215  0279  0D89               	rlf	9,f
 20216  027A  3B89               	subwfb	9,f
 20217  027B  0989               	comf	9,f
 20218  027C  00B0               	movwf	modulation@x+2
 20219  027D  00B1               	movwf	modulation@x+3
 20220  027E  0024               	movlb	4	; select bank4
 20221  027F  0841               	movf	_adjusted_pot_value^(0+512),w
 20222  0280  0020               	movlb	0	; select bank0
 20223  0281  00B2               	movwf	modulation@y
 20224  0282  0024               	movlb	4	; select bank4
 20225  0283  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 20226  0284  0020               	movlb	0	; select bank0
 20227  0285  00B3               	movwf	modulation@y+1
 20228  0286  0D89               	rlf	9,f
 20229  0287  3B89               	subwfb	9,f
 20230  0288  0989               	comf	9,f
 20231  0289  00B4               	movwf	modulation@y+2
 20232  028A  00B5               	movwf	modulation@y+3
 20233  028B  31A2  2261  3180   	fcall	_modulation
 20234  028E  0020               	movlb	0	; select bank0
 20235  028F  082F               	movf	?_modulation+1,w
 20236  0290  0023               	movlb	3	; select bank3
 20237  0291  00BB               	movwf	(_mod_value+1)^(0+384)
 20238  0292  0020               	movlb	0	; select bank0
 20239  0293  082E               	movf	?_modulation,w
 20240  0294  0023               	movlb	3	; select bank3
 20241  0295  00BA               	movwf	_mod_value^(0+384)
 20242                           
 20243                           ;interrupts.c: 167: CCPR3 = mod_value / 2;
 20244  0296  3002               	movlw	2
 20245  0297  00F0               	movwf	i1___awdiv@divisor
 20246  0298  3000               	movlw	0
 20247  0299  00F1               	movwf	i1___awdiv@divisor+1
 20248  029A  083B               	movf	(_mod_value+1)^(0+384),w
 20249  029B  00F3               	movwf	i1___awdiv@dividend+1
 20250  029C  083A               	movf	_mod_value^(0+384),w
 20251  029D  00F2               	movwf	i1___awdiv@dividend
 20252  029E  31A4  24E2  3180   	fcall	i1___awdiv
 20253  02A1  0871               	movf	?i1___awdiv+1,w
 20254  02A2  0026               	movlb	6	; select bank6
 20255  02A3  0092               	movwf	18	;volatile
 20256  02A4  0870               	movf	?i1___awdiv,w
 20257  02A5  0091               	movwf	17	;volatile
 20258                           
 20259                           ;interrupts.c: 168: mod_counter++;
 20260  02A6  3001               	movlw	1
 20261  02A7  0024               	movlb	4	; select bank4
 20262  02A8  07CF               	addwf	_mod_counter^(0+512),f
 20263  02A9  3000               	movlw	0
 20264  02AA  3DD0               	addwfc	(_mod_counter+1)^(0+512),f
 20265  02AB                     i1l6947:	
 20266                           
 20267                           ;interrupts.c: 170: }
 20268                           ;interrupts.c: 172: if (preset_programmning_on == 1) {
 20269  02AB  0023               	movlb	3	; select bank3
 20270  02AC  0343               	decf	_preset_programmning_on^(0+384),w
 20271  02AD  1D03               	btfss	3,2
 20272  02AE  2AD9               	goto	i1l6959
 20273                           
 20274                           ;interrupts.c: 173: preset_blink++;
 20275  02AF  3001               	movlw	1
 20276  02B0  0020               	movlb	0	; select bank0
 20277  02B1  00BA               	movwf	??_isr
 20278  02B2  083A               	movf	??_isr,w
 20279  02B3  07D8               	addwf	_preset_blink,f
 20280                           
 20281                           ;interrupts.c: 175: if (preset_blink >= blink_delay) {
 20282  02B4  0023               	movlb	3	; select bank3
 20283  02B5  084B               	movf	(_blink_delay+1)^(0+384),w
 20284  02B6  3A80               	xorlw	128
 20285  02B7  3C80               	sublw	128
 20286  02B8  1D03               	skipz
 20287  02B9  2ABD               	goto	u696_25
 20288  02BA  084A               	movf	_blink_delay^(0+384),w
 20289  02BB  0020               	movlb	0	; select bank0
 20290  02BC  0258               	subwf	_preset_blink,w
 20291  02BD                     u696_25:	
 20292  02BD  1C03               	skipc
 20293  02BE  2ADE               	goto	i1l6963
 20294                           
 20295                           ;interrupts.c: 176: LATBbits.LATB1 = 1;
 20296  02BF  0022               	movlb	2	; select bank2
 20297  02C0  148D               	bsf	13,1	;volatile
 20298                           
 20299                           ;interrupts.c: 177: if (preset_blink > blink_delay*2) {
 20300  02C1  0023               	movlb	3	; select bank3
 20301  02C2  084B               	movf	(_blink_delay+1)^(0+384),w
 20302  02C3  0020               	movlb	0	; select bank0
 20303  02C4  00BB               	movwf	??_isr+1
 20304  02C5  0023               	movlb	3	; select bank3
 20305  02C6  084A               	movf	_blink_delay^(0+384),w
 20306  02C7  0020               	movlb	0	; select bank0
 20307  02C8  00BA               	movwf	??_isr
 20308  02C9  35BA               	lslf	??_isr,f
 20309  02CA  0DBB               	rlf	??_isr+1,f
 20310  02CB  083B               	movf	??_isr+1,w
 20311  02CC  3A80               	xorlw	128
 20312  02CD  00BC               	movwf	??_isr+2
 20313  02CE  3080               	movlw	128
 20314  02CF  023C               	subwf	??_isr+2,w
 20315  02D0  1D03               	skipz
 20316  02D1  2AD4               	goto	u697_25
 20317  02D2  0858               	movf	_preset_blink,w
 20318  02D3  023A               	subwf	??_isr,w
 20319  02D4                     u697_25:	
 20320  02D4  1803               	skipnc
 20321  02D5  2AE0               	goto	i1l6965
 20322                           
 20323                           ;interrupts.c: 178: preset_blink = 0;
 20324  02D6  0020               	movlb	0	; select bank0
 20325  02D7  01D8               	clrf	_preset_blink
 20326                           
 20327                           ;interrupts.c: 179: }
 20328                           ;interrupts.c: 181: } else {
 20329  02D8  2AE0               	goto	i1l6965
 20330  02D9                     i1l6959:	
 20331                           ;interrupts.c: 183: }
 20332                           ;interrupts.c: 185: } else {
 20333                           
 20334                           ;interrupts.c: 182: LATBbits.LATB1 = 0;
 20335                           
 20336                           
 20337                           ;interrupts.c: 186: if (preset_blink > 0) {
 20338  02D9  0020               	movlb	0	; select bank0
 20339  02DA  0858               	movf	_preset_blink,w
 20340  02DB  1903               	btfsc	3,2
 20341  02DC  2AE0               	goto	i1l6965
 20342                           
 20343                           ;interrupts.c: 187: preset_blink = 0;
 20344  02DD  01D8               	clrf	_preset_blink
 20345  02DE                     i1l6963:	
 20346                           
 20347                           ;interrupts.c: 188: LATBbits.LATB1 = 0;
 20348  02DE  0022               	movlb	2	; select bank2
 20349  02DF  108D               	bcf	13,1	;volatile
 20350  02E0                     i1l6965:	
 20351                           
 20352                           ;interrupts.c: 189: }
 20353                           ;interrupts.c: 190: }
 20354                           ;interrupts.c: 194: INTCONbits.TMR0IF = 0;
 20355  02E0  110B               	bcf	11,2	;volatile
 20356  02E1                     i1l159:	
 20357  02E1  0020               	movlb	0	; select bank0
 20358  02E2  0843               	movf	??_isr+9,w
 20359  02E3  00FF               	movwf	127
 20360  02E4  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20361  02E5  0009               	retfie
 20362  02E6                     __end_of_isr:	
 20363                           
 20364                           	psect	text75
 20365  236C                     __ptext75:	
 20366 ;; *************** function i1_set_leds_top *****************
 20367 ;; Defined at:
 20368 ;;		line 16 in file "LEDs.c"
 20369 ;; Parameters:    Size  Location     Type
 20370 ;;  x               2    0[COMMON] int 
 20371 ;;  ledState        2    2[COMMON] int 
 20372 ;; Auto vars:     Size  Location     Type
 20373 ;;		None
 20374 ;; Return value:  Size  Location     Type
 20375 ;;                  1    wreg      void 
 20376 ;; Registers used:
 20377 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20378 ;; Tracked objects:
 20379 ;;		On entry : 0/0
 20380 ;;		On exit  : 0/0
 20381 ;;		Unchanged: 0/0
 20382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20386 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20387 ;;Total ram usage:        4 bytes
 20388 ;; Hardware stack levels used:    1
 20389 ;; This function calls:
 20390 ;;		Nothing
 20391 ;; This function is called by:
 20392 ;;		_isr
 20393 ;; This function uses a non-reentrant model
 20394 ;;
 20395                           
 20396                           
 20397                           ;psect for function i1_set_leds_top
 20398  236C                     i1_set_leds_top:	
 20399                           
 20400                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 20401                           
 20402                           ;incstack = 0
 20403                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 20404  236C  0027               	movlb	7	; select bank7
 20405  236D  100C               	bcf	12,0	;volatile
 20406                           
 20407                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 20408  236E  108C               	bcf	12,1	;volatile
 20409                           
 20410                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 20411  236F  110C               	bcf	12,2	;volatile
 20412                           
 20413                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 20414  2370  118C               	bcf	12,3	;volatile
 20415                           
 20416                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 20417  2371  120C               	bcf	12,4	;volatile
 20418                           
 20419                           ;LEDs.c: 22: switch (x) {
 20420  2372  2B97               	goto	i1l6783
 20421  2373                     i1l6771:	
 20422                           ;LEDs.c: 23: case 1:
 20423                           
 20424                           
 20425                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 20426  2373  0C72               	rrf	i1set_leds_top@ledState,w
 20427  2374  1C03               	skipc
 20428  2375  100C               	bcf	12,0	;volatile
 20429  2376  1803               	skipnc
 20430  2377  140C               	bsf	12,0	;volatile
 20431                           
 20432                           ;LEDs.c: 25: break;
 20433  2378  0008               	return
 20434  2379                     i1l6773:	
 20435                           ;LEDs.c: 26: case 2:
 20436                           
 20437                           
 20438                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 20439  2379  0C72               	rrf	i1set_leds_top@ledState,w
 20440  237A  1C03               	skipc
 20441  237B  108C               	bcf	12,1	;volatile
 20442  237C  1803               	skipnc
 20443  237D  148C               	bsf	12,1	;volatile
 20444                           
 20445                           ;LEDs.c: 28: break;
 20446  237E  0008               	return
 20447  237F                     i1l6775:	
 20448                           ;LEDs.c: 29: case 3:
 20449                           
 20450                           
 20451                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 20452  237F  0C72               	rrf	i1set_leds_top@ledState,w
 20453  2380  1C03               	skipc
 20454  2381  110C               	bcf	12,2	;volatile
 20455  2382  1803               	skipnc
 20456  2383  150C               	bsf	12,2	;volatile
 20457                           
 20458                           ;LEDs.c: 31: break;
 20459  2384  0008               	return
 20460  2385                     i1l6777:	
 20461                           ;LEDs.c: 32: case 4:
 20462                           
 20463                           
 20464                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 20465  2385  0C72               	rrf	i1set_leds_top@ledState,w
 20466  2386  1C03               	skipc
 20467  2387  118C               	bcf	12,3	;volatile
 20468  2388  1803               	skipnc
 20469  2389  158C               	bsf	12,3	;volatile
 20470                           
 20471                           ;LEDs.c: 34: break;
 20472  238A  0008               	return
 20473  238B                     i1l6779:	
 20474                           ;LEDs.c: 35: case 5:
 20475                           
 20476                           
 20477                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 20478  238B  0C72               	rrf	i1set_leds_top@ledState,w
 20479  238C  1C03               	skipc
 20480  238D  120C               	bcf	12,4	;volatile
 20481  238E  1803               	skipnc
 20482  238F  160C               	bsf	12,4	;volatile
 20483                           
 20484                           ;LEDs.c: 39: break;
 20485                           
 20486                           ;LEDs.c: 38: case 6:
 20487                           
 20488                           ;LEDs.c: 37: break;
 20489  2390  0008               	return
 20490  2391                     i1l788:	
 20491                           ;LEDs.c: 40: case 100:
 20492                           
 20493                           
 20494                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 20495  2391  140C               	bsf	12,0	;volatile
 20496                           
 20497                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 20498  2392  148C               	bsf	12,1	;volatile
 20499                           
 20500                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 20501  2393  150C               	bsf	12,2	;volatile
 20502                           
 20503                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 20504  2394  158C               	bsf	12,3	;volatile
 20505                           
 20506                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 20507  2395  160C               	bsf	12,4	;volatile
 20508                           
 20509                           ;LEDs.c: 47: }
 20510                           
 20511                           ;LEDs.c: 46: break;
 20512  2396  0008               	return
 20513  2397                     i1l6783:	
 20514                           
 20515                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20516                           ; Switch size 1, requested type "space"
 20517                           ; Number of cases is 1, Range of values is 0 to 0
 20518                           ; switch strategies available:
 20519                           ; Name         Instructions Cycles
 20520                           ; simple_byte            4     3 (average)
 20521                           ; direct_byte            8     6 (fixed)
 20522                           ; jumptable            260     6 (fixed)
 20523                           ;	Chosen strategy is simple_byte
 20524  2397  0871               	movf	i1set_leds_top@x+1,w
 20525  2398  3A00               	xorlw	0	; case 0
 20526  2399  1903               	skipnz
 20527  239A  2B9C               	goto	i1l9799
 20528  239B  2BB3               	goto	i1l789
 20529  239C                     i1l9799:	
 20530                           
 20531                           ; Switch size 1, requested type "space"
 20532                           ; Number of cases is 7, Range of values is 1 to 100
 20533                           ; switch strategies available:
 20534                           ; Name         Instructions Cycles
 20535                           ; simple_byte           22    12 (average)
 20536                           ; direct_byte          209     9 (fixed)
 20537                           ; jumptable            263     9 (fixed)
 20538                           ;	Chosen strategy is simple_byte
 20539  239C  0870               	movf	i1set_leds_top@x,w
 20540  239D  3A01               	xorlw	1	; case 1
 20541  239E  1903               	skipnz
 20542  239F  2B73               	goto	i1l6771
 20543  23A0  3A03               	xorlw	3	; case 2
 20544  23A1  1903               	skipnz
 20545  23A2  2B79               	goto	i1l6773
 20546  23A3  3A01               	xorlw	1	; case 3
 20547  23A4  1903               	skipnz
 20548  23A5  2B7F               	goto	i1l6775
 20549  23A6  3A07               	xorlw	7	; case 4
 20550  23A7  1903               	skipnz
 20551  23A8  2B85               	goto	i1l6777
 20552  23A9  3A01               	xorlw	1	; case 5
 20553  23AA  1903               	skipnz
 20554  23AB  2B8B               	goto	i1l6779
 20555  23AC  3A03               	xorlw	3	; case 6
 20556  23AD  1903               	skipnz
 20557  23AE  2BB3               	goto	i1l789
 20558  23AF  3A62               	xorlw	98	; case 100
 20559  23B0  1903               	skipnz
 20560  23B1  2B91               	goto	i1l788
 20561  23B2  2BB3               	goto	i1l789
 20562  23B3                     i1l789:	
 20563  23B3  0008               	return
 20564  23B4                     __end_ofi1_set_leds_top:	
 20565                           
 20566                           	psect	text76
 20567  2F15                     __ptext76:	
 20568 ;; *************** function i1_getModulationSubdivision *****************
 20569 ;; Defined at:
 20570 ;;		line 26 in file "modulation.c"
 20571 ;; Parameters:    Size  Location     Type
 20572 ;;		None
 20573 ;; Auto vars:     Size  Location     Type
 20574 ;;		None
 20575 ;; Return value:  Size  Location     Type
 20576 ;;                  2    0[COMMON] int 
 20577 ;; Registers used:
 20578 ;;		wreg, status,2, status,0
 20579 ;; Tracked objects:
 20580 ;;		On entry : 0/0
 20581 ;;		On exit  : 0/0
 20582 ;;		Unchanged: 0/0
 20583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20588 ;;Total ram usage:        2 bytes
 20589 ;; Hardware stack levels used:    1
 20590 ;; This function calls:
 20591 ;;		Nothing
 20592 ;; This function is called by:
 20593 ;;		_isr
 20594 ;; This function uses a non-reentrant model
 20595 ;;
 20596                           
 20597                           
 20598                           ;psect for function i1_getModulationSubdivision
 20599  2F15                     i1_getModulationSubdivision:	
 20600                           
 20601                           ;modulation.c: 27: if (delay_time >= 2400) {
 20602                           
 20603                           ;incstack = 0
 20604                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 20605  2F15  0020               	movlb	0	; select bank0
 20606  2F16  1BDF               	btfsc	_delay_time+3,7	;volatile
 20607  2F17  2F29               	goto	i1l6797
 20608  2F18  085F               	movf	_delay_time+3,w	;volatile
 20609  2F19  1D03               	btfss	3,2
 20610  2F1A  2F24               	goto	i1l6791
 20611  2F1B  085E               	movf	_delay_time+2,w	;volatile
 20612  2F1C  1D03               	btfss	3,2
 20613  2F1D  2F24               	goto	i1l6791
 20614  2F1E  3060               	movlw	96
 20615  2F1F  025C               	subwf	_delay_time,w	;volatile
 20616  2F20  3009               	movlw	9
 20617  2F21  3B5D               	subwfb	_delay_time+1,w	;volatile
 20618  2F22  1C03               	btfss	3,0
 20619  2F23  2F29               	goto	i1l6797
 20620  2F24                     i1l6791:	
 20621                           
 20622                           ;modulation.c: 28: return 120;
 20623  2F24  3078               	movlw	120
 20624  2F25  00F0               	movwf	?i1_getModulationSubdivision
 20625  2F26  3000               	movlw	0
 20626  2F27  00F1               	movwf	?i1_getModulationSubdivision+1
 20627                           
 20628                           ;modulation.c: 29: } else if (delay_time >= 600) {
 20629  2F28  0008               	return
 20630  2F29                     i1l6797:	
 20631  2F29  1BDF               	btfsc	_delay_time+3,7	;volatile
 20632  2F2A  2F3C               	goto	i1l6805
 20633  2F2B  085F               	movf	_delay_time+3,w	;volatile
 20634  2F2C  1D03               	btfss	3,2
 20635  2F2D  2F37               	goto	i1l6799
 20636  2F2E  085E               	movf	_delay_time+2,w	;volatile
 20637  2F2F  1D03               	btfss	3,2
 20638  2F30  2F37               	goto	i1l6799
 20639  2F31  3058               	movlw	88
 20640  2F32  025C               	subwf	_delay_time,w	;volatile
 20641  2F33  3002               	movlw	2
 20642  2F34  3B5D               	subwfb	_delay_time+1,w	;volatile
 20643  2F35  1C03               	btfss	3,0
 20644  2F36  2F3C               	goto	i1l6805
 20645  2F37                     i1l6799:	
 20646                           
 20647                           ;modulation.c: 30: return 60;
 20648  2F37  303C               	movlw	60
 20649  2F38  00F0               	movwf	?i1_getModulationSubdivision
 20650  2F39  3000               	movlw	0
 20651  2F3A  00F1               	movwf	?i1_getModulationSubdivision+1
 20652                           
 20653                           ;modulation.c: 31: } else {
 20654  2F3B  0008               	return
 20655  2F3C                     i1l6805:	
 20656                           
 20657                           ;modulation.c: 32: return 30;
 20658  2F3C  301E               	movlw	30
 20659  2F3D  00F0               	movwf	?i1_getModulationSubdivision
 20660  2F3E  3000               	movlw	0
 20661  2F3F  00F1               	movwf	?i1_getModulationSubdivision+1
 20662  2F40  0008               	return
 20663  2F41                     __end_ofi1_getModulationSubdivision:	
 20664                           
 20665                           	psect	text77
 20666  24E2                     __ptext77:	
 20667 ;; *************** function i1___awdiv *****************
 20668 ;; Defined at:
 20669 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 20670 ;; Parameters:    Size  Location     Type
 20671 ;;  divisor         2    0[COMMON] int 
 20672 ;;  dividend        2    2[COMMON] int 
 20673 ;; Auto vars:     Size  Location     Type
 20674 ;;  __awdiv         2    7[COMMON] int 
 20675 ;;  __awdiv         1    6[COMMON] unsigned char 
 20676 ;;  __awdiv         1    5[COMMON] unsigned char 
 20677 ;; Return value:  Size  Location     Type
 20678 ;;                  2    0[COMMON] int 
 20679 ;; Registers used:
 20680 ;;		wreg, status,2, status,0
 20681 ;; Tracked objects:
 20682 ;;		On entry : 0/0
 20683 ;;		On exit  : 0/0
 20684 ;;		Unchanged: 0/0
 20685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20687 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20689 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20690 ;;Total ram usage:        9 bytes
 20691 ;; Hardware stack levels used:    1
 20692 ;; This function calls:
 20693 ;;		Nothing
 20694 ;; This function is called by:
 20695 ;;		_isr
 20696 ;; This function uses a non-reentrant model
 20697 ;;
 20698                           
 20699                           
 20700                           ;psect for function i1___awdiv
 20701  24E2                     i1___awdiv:	
 20702                           
 20703                           ;incstack = 0
 20704                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 20705  24E2  01F6               	clrf	i1___awdiv@sign
 20706  24E3  1FF1               	btfss	i1___awdiv@divisor+1,7
 20707  24E4  2CEC               	goto	i1l6817
 20708  24E5  09F0               	comf	i1___awdiv@divisor,f
 20709  24E6  09F1               	comf	i1___awdiv@divisor+1,f
 20710  24E7  0AF0               	incf	i1___awdiv@divisor,f
 20711  24E8  1903               	skipnz
 20712  24E9  0AF1               	incf	i1___awdiv@divisor+1,f
 20713  24EA  01F6               	clrf	i1___awdiv@sign
 20714  24EB  0AF6               	incf	i1___awdiv@sign,f
 20715  24EC                     i1l6817:	
 20716  24EC  1FF3               	btfss	i1___awdiv@dividend+1,7
 20717  24ED  2CF7               	goto	i1l6823
 20718  24EE  09F2               	comf	i1___awdiv@dividend,f
 20719  24EF  09F3               	comf	i1___awdiv@dividend+1,f
 20720  24F0  0AF2               	incf	i1___awdiv@dividend,f
 20721  24F1  1903               	skipnz
 20722  24F2  0AF3               	incf	i1___awdiv@dividend+1,f
 20723  24F3  3001               	movlw	1
 20724  24F4  00F4               	movwf	??i1___awdiv
 20725  24F5  0874               	movf	??i1___awdiv,w
 20726  24F6  06F6               	xorwf	i1___awdiv@sign,f
 20727  24F7                     i1l6823:	
 20728  24F7  01F7               	clrf	i1___awdiv@quotient
 20729  24F8  01F8               	clrf	i1___awdiv@quotient+1
 20730  24F9  0870               	movf	i1___awdiv@divisor,w
 20731  24FA  0471               	iorwf	i1___awdiv@divisor+1,w
 20732  24FB  1903               	btfsc	3,2
 20733  24FC  2D26               	goto	i1l6845
 20734  24FD  01F5               	clrf	i1___awdiv@counter
 20735  24FE  0AF5               	incf	i1___awdiv@counter,f
 20736  24FF                     i1l6833:	
 20737  24FF  1BF1               	btfsc	i1___awdiv@divisor+1,7
 20738  2500  2D0B               	goto	i1l6835
 20739  2501  3001               	movlw	1
 20740  2502                     u664_25:	
 20741  2502  35F0               	lslf	i1___awdiv@divisor,f
 20742  2503  0DF1               	rlf	i1___awdiv@divisor+1,f
 20743  2504  0B89               	decfsz	9,f
 20744  2505  2D02               	goto	u664_25
 20745  2506  3001               	movlw	1
 20746  2507  00F4               	movwf	??i1___awdiv
 20747  2508  0874               	movf	??i1___awdiv,w
 20748  2509  07F5               	addwf	i1___awdiv@counter,f
 20749  250A  2CFF               	goto	i1l6833
 20750  250B                     i1l6835:	
 20751  250B  3001               	movlw	1
 20752  250C                     u666_25:	
 20753  250C  35F7               	lslf	i1___awdiv@quotient,f
 20754  250D  0DF8               	rlf	i1___awdiv@quotient+1,f
 20755  250E  0B89               	decfsz	9,f
 20756  250F  2D0C               	goto	u666_25
 20757  2510  0871               	movf	i1___awdiv@divisor+1,w
 20758  2511  0273               	subwf	i1___awdiv@dividend+1,w
 20759  2512  1D03               	skipz
 20760  2513  2D16               	goto	u667_25
 20761  2514  0870               	movf	i1___awdiv@divisor,w
 20762  2515  0272               	subwf	i1___awdiv@dividend,w
 20763  2516                     u667_25:	
 20764  2516  1C03               	skipc
 20765  2517  2D1D               	goto	i1l6841
 20766  2518  0870               	movf	i1___awdiv@divisor,w
 20767  2519  02F2               	subwf	i1___awdiv@dividend,f
 20768  251A  0871               	movf	i1___awdiv@divisor+1,w
 20769  251B  3BF3               	subwfb	i1___awdiv@dividend+1,f
 20770  251C  1477               	bsf	i1___awdiv@quotient,0
 20771  251D                     i1l6841:	
 20772  251D  3001               	movlw	1
 20773  251E                     u668_25:	
 20774  251E  36F1               	lsrf	i1___awdiv@divisor+1,f
 20775  251F  0CF0               	rrf	i1___awdiv@divisor,f
 20776  2520  0B89               	decfsz	9,f
 20777  2521  2D1E               	goto	u668_25
 20778  2522  3001               	movlw	1
 20779  2523  02F5               	subwf	i1___awdiv@counter,f
 20780  2524  1D03               	btfss	3,2
 20781  2525  2D0B               	goto	i1l6835
 20782  2526                     i1l6845:	
 20783  2526  0876               	movf	i1___awdiv@sign,w
 20784  2527  1903               	btfsc	3,2
 20785  2528  2D2E               	goto	i1l6849
 20786  2529  09F7               	comf	i1___awdiv@quotient,f
 20787  252A  09F8               	comf	i1___awdiv@quotient+1,f
 20788  252B  0AF7               	incf	i1___awdiv@quotient,f
 20789  252C  1903               	skipnz
 20790  252D  0AF8               	incf	i1___awdiv@quotient+1,f
 20791  252E                     i1l6849:	
 20792  252E  0878               	movf	i1___awdiv@quotient+1,w
 20793  252F  00F1               	movwf	?i1___awdiv+1
 20794  2530  0877               	movf	i1___awdiv@quotient,w
 20795  2531  00F0               	movwf	?i1___awdiv
 20796  2532  0008               	return
 20797  2533                     __end_ofi1___awdiv:	
 20798                           
 20799                           	psect	text78
 20800  2261                     __ptext78:	
 20801 ;; *************** function _modulation *****************
 20802 ;; Defined at:
 20803 ;;		line 222 in file "user.c"
 20804 ;; Parameters:    Size  Location     Type
 20805 ;;  x               4   14[BANK0 ] long 
 20806 ;;  y               4   18[BANK0 ] long 
 20807 ;; Auto vars:     Size  Location     Type
 20808 ;;		None
 20809 ;; Return value:  Size  Location     Type
 20810 ;;                  4   14[BANK0 ] long 
 20811 ;; Registers used:
 20812 ;;		wreg, status,2, status,0, pclath, cstack
 20813 ;; Tracked objects:
 20814 ;;		On entry : 0/0
 20815 ;;		On exit  : 0/0
 20816 ;;		Unchanged: 0/0
 20817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20818 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20820 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20821 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20822 ;;Total ram usage:       12 bytes
 20823 ;; Hardware stack levels used:    1
 20824 ;; Hardware stack levels required when called:    1
 20825 ;; This function calls:
 20826 ;;		i1___aldiv
 20827 ;;		i1___lmul
 20828 ;; This function is called by:
 20829 ;;		_isr
 20830 ;; This function uses a non-reentrant model
 20831 ;;
 20832                           
 20833                           
 20834                           ;psect for function _modulation
 20835  2261                     _modulation:	
 20836                           
 20837                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20838                           
 20839                           ;incstack = 0
 20840                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20841  2261  3000               	movlw	0
 20842  2262  0020               	movlb	0	; select bank0
 20843  2263  00A3               	movwf	i1___aldiv@divisor+3
 20844  2264  3000               	movlw	0
 20845  2265  00A2               	movwf	i1___aldiv@divisor+2
 20846  2266  3003               	movlw	3
 20847  2267  00A1               	movwf	i1___aldiv@divisor+1
 20848  2268  30E8               	movlw	232
 20849  2269  00A0               	movwf	i1___aldiv@divisor
 20850  226A  300C               	movlw	12
 20851  226B  00B6               	movwf	??_modulation
 20852  226C  30F2               	movlw	242
 20853  226D  00B7               	movwf	??_modulation+1
 20854  226E  3001               	movlw	1
 20855  226F  00B8               	movwf	??_modulation+2
 20856  2270  3000               	movlw	0
 20857  2271  00B9               	movwf	??_modulation+3
 20858  2272  0835               	movf	modulation@y+3,w
 20859  2273  00F3               	movwf	i1___lmul@multiplier+3
 20860  2274  0834               	movf	modulation@y+2,w
 20861  2275  00F2               	movwf	i1___lmul@multiplier+2
 20862  2276  0833               	movf	modulation@y+1,w
 20863  2277  00F1               	movwf	i1___lmul@multiplier+1
 20864  2278  0832               	movf	modulation@y,w
 20865  2279  00F0               	movwf	i1___lmul@multiplier
 20866  227A  0831               	movf	modulation@x+3,w
 20867  227B  00F7               	movwf	i1___lmul@multiplicand+3
 20868  227C  0830               	movf	modulation@x+2,w
 20869  227D  00F6               	movwf	i1___lmul@multiplicand+2
 20870  227E  082F               	movf	modulation@x+1,w
 20871  227F  00F5               	movwf	i1___lmul@multiplicand+1
 20872  2280  082E               	movf	modulation@x,w
 20873  2281  00F4               	movwf	i1___lmul@multiplicand
 20874  2282  31AF  2741  31A2   	fcall	i1___lmul
 20875  2285  0870               	movf	?i1___lmul,w
 20876  2286  0020               	movlb	0	; select bank0
 20877  2287  07B6               	addwf	??_modulation,f
 20878  2288  0871               	movf	?i1___lmul+1,w
 20879  2289  3DB7               	addwfc	??_modulation+1,f
 20880  228A  0872               	movf	?i1___lmul+2,w
 20881  228B  3DB8               	addwfc	??_modulation+2,f
 20882  228C  0873               	movf	?i1___lmul+3,w
 20883  228D  3DB9               	addwfc	??_modulation+3,f
 20884  228E  0839               	movf	??_modulation+3,w
 20885  228F  00A7               	movwf	i1___aldiv@dividend+3
 20886  2290  0838               	movf	??_modulation+2,w
 20887  2291  00A6               	movwf	i1___aldiv@dividend+2
 20888  2292  0837               	movf	??_modulation+1,w
 20889  2293  00A5               	movwf	i1___aldiv@dividend+1
 20890  2294  0836               	movf	??_modulation,w
 20891  2295  00A4               	movwf	i1___aldiv@dividend
 20892  2296  3198  202A         	fcall	i1___aldiv
 20893  2298  0020               	movlb	0	; select bank0
 20894  2299  0823               	movf	?i1___aldiv+3,w
 20895  229A  00B1               	movwf	?_modulation+3
 20896  229B  0822               	movf	?i1___aldiv+2,w
 20897  229C  00B0               	movwf	?_modulation+2
 20898  229D  0821               	movf	?i1___aldiv+1,w
 20899  229E  00AF               	movwf	?_modulation+1
 20900  229F  0820               	movf	?i1___aldiv,w
 20901  22A0  00AE               	movwf	?_modulation
 20902  22A1  0008               	return
 20903  22A2                     __end_of_modulation:	
 20904                           
 20905                           	psect	text79
 20906  2F41                     __ptext79:	
 20907 ;; *************** function i1___lmul *****************
 20908 ;; Defined at:
 20909 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20910 ;; Parameters:    Size  Location     Type
 20911 ;;  multiplier      4    0[COMMON] unsigned long 
 20912 ;;  multiplicand    4    4[COMMON] unsigned long 
 20913 ;; Auto vars:     Size  Location     Type
 20914 ;;  __lmul          4    8[COMMON] unsigned long 
 20915 ;; Return value:  Size  Location     Type
 20916 ;;                  4    0[COMMON] unsigned long 
 20917 ;; Registers used:
 20918 ;;		wreg, status,2, status,0
 20919 ;; Tracked objects:
 20920 ;;		On entry : 0/0
 20921 ;;		On exit  : 0/0
 20922 ;;		Unchanged: 0/0
 20923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20924 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20925 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20927 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20928 ;;Total ram usage:       12 bytes
 20929 ;; Hardware stack levels used:    1
 20930 ;; This function calls:
 20931 ;;		Nothing
 20932 ;; This function is called by:
 20933 ;;		_modulation
 20934 ;; This function uses a non-reentrant model
 20935 ;;
 20936                           
 20937                           
 20938                           ;psect for function i1___lmul
 20939  2F41                     i1___lmul:	
 20940                           
 20941                           ;incstack = 0
 20942                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20943  2F41  3000               	movlw	0
 20944  2F42  00FB               	movwf	i1___lmul@product+3
 20945  2F43  3000               	movlw	0
 20946  2F44  00FA               	movwf	i1___lmul@product+2
 20947  2F45  3000               	movlw	0
 20948  2F46  00F9               	movwf	i1___lmul@product+1
 20949  2F47  3000               	movlw	0
 20950  2F48  00F8               	movwf	i1___lmul@product
 20951  2F49                     i1l6081:	
 20952  2F49  1C70               	btfss	i1___lmul@multiplier,0
 20953  2F4A  2F53               	goto	i1l6085
 20954  2F4B  0874               	movf	i1___lmul@multiplicand,w
 20955  2F4C  07F8               	addwf	i1___lmul@product,f
 20956  2F4D  0875               	movf	i1___lmul@multiplicand+1,w
 20957  2F4E  3DF9               	addwfc	i1___lmul@product+1,f
 20958  2F4F  0876               	movf	i1___lmul@multiplicand+2,w
 20959  2F50  3DFA               	addwfc	i1___lmul@product+2,f
 20960  2F51  0877               	movf	i1___lmul@multiplicand+3,w
 20961  2F52  3DFB               	addwfc	i1___lmul@product+3,f
 20962  2F53                     i1l6085:	
 20963  2F53  3001               	movlw	1
 20964  2F54                     u541_25:	
 20965  2F54  35F4               	lslf	i1___lmul@multiplicand,f
 20966  2F55  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20967  2F56  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20968  2F57  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20969  2F58  0B89               	decfsz	9,f
 20970  2F59  2F54               	goto	u541_25
 20971  2F5A  3001               	movlw	1
 20972  2F5B                     u542_25:	
 20973  2F5B  36F3               	lsrf	i1___lmul@multiplier+3,f
 20974  2F5C  0CF2               	rrf	i1___lmul@multiplier+2,f
 20975  2F5D  0CF1               	rrf	i1___lmul@multiplier+1,f
 20976  2F5E  0CF0               	rrf	i1___lmul@multiplier,f
 20977  2F5F  0B89               	decfsz	9,f
 20978  2F60  2F5B               	goto	u542_25
 20979  2F61  0873               	movf	i1___lmul@multiplier+3,w
 20980  2F62  0472               	iorwf	i1___lmul@multiplier+2,w
 20981  2F63  0471               	iorwf	i1___lmul@multiplier+1,w
 20982  2F64  0470               	iorwf	i1___lmul@multiplier,w
 20983  2F65  1D03               	skipz
 20984  2F66  2F49               	goto	i1l6081
 20985  2F67  087B               	movf	i1___lmul@product+3,w
 20986  2F68  00F3               	movwf	?i1___lmul+3
 20987  2F69  087A               	movf	i1___lmul@product+2,w
 20988  2F6A  00F2               	movwf	?i1___lmul+2
 20989  2F6B  0879               	movf	i1___lmul@product+1,w
 20990  2F6C  00F1               	movwf	?i1___lmul+1
 20991  2F6D  0878               	movf	i1___lmul@product,w
 20992  2F6E  00F0               	movwf	?i1___lmul
 20993  2F6F  0008               	return
 20994  2F70                     __end_ofi1___lmul:	
 20995                           
 20996                           	psect	text80
 20997  182A                     __ptext80:	
 20998 ;; *************** function i1___aldiv *****************
 20999 ;; Defined at:
 21000 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 21001 ;; Parameters:    Size  Location     Type
 21002 ;;  divisor         4    0[BANK0 ] long 
 21003 ;;  dividend        4    4[BANK0 ] long 
 21004 ;; Auto vars:     Size  Location     Type
 21005 ;;  __aldiv         4   10[BANK0 ] long 
 21006 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21007 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21008 ;; Return value:  Size  Location     Type
 21009 ;;                  4    0[BANK0 ] long 
 21010 ;; Registers used:
 21011 ;;		wreg, status,2, status,0
 21012 ;; Tracked objects:
 21013 ;;		On entry : 0/0
 21014 ;;		On exit  : 0/0
 21015 ;;		Unchanged: 0/0
 21016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21017 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21018 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21020 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21021 ;;Total ram usage:       15 bytes
 21022 ;; Hardware stack levels used:    1
 21023 ;; This function calls:
 21024 ;;		Nothing
 21025 ;; This function is called by:
 21026 ;;		_modulation
 21027 ;; This function uses a non-reentrant model
 21028 ;;
 21029                           
 21030                           
 21031                           ;psect for function i1___aldiv
 21032  182A                     i1___aldiv:	
 21033                           
 21034                           ;incstack = 0
 21035                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 21036  182A  0020               	movlb	0	; select bank0
 21037  182B  01A9               	clrf	i1___aldiv@sign
 21038  182C  1FA3               	btfss	i1___aldiv@divisor+3,7
 21039  182D  283B               	goto	i1l1997
 21040  182E  09A0               	comf	i1___aldiv@divisor,f
 21041  182F  09A1               	comf	i1___aldiv@divisor+1,f
 21042  1830  09A2               	comf	i1___aldiv@divisor+2,f
 21043  1831  09A3               	comf	i1___aldiv@divisor+3,f
 21044  1832  0AA0               	incf	i1___aldiv@divisor,f
 21045  1833  1903               	skipnz
 21046  1834  0AA1               	incf	i1___aldiv@divisor+1,f
 21047  1835  1903               	skipnz
 21048  1836  0AA2               	incf	i1___aldiv@divisor+2,f
 21049  1837  1903               	skipnz
 21050  1838  0AA3               	incf	i1___aldiv@divisor+3,f
 21051  1839  01A9               	clrf	i1___aldiv@sign
 21052  183A  0AA9               	incf	i1___aldiv@sign,f
 21053  183B                     i1l1997:	
 21054  183B  1FA7               	btfss	i1___aldiv@dividend+3,7
 21055  183C  284C               	goto	i1l6103
 21056  183D  09A4               	comf	i1___aldiv@dividend,f
 21057  183E  09A5               	comf	i1___aldiv@dividend+1,f
 21058  183F  09A6               	comf	i1___aldiv@dividend+2,f
 21059  1840  09A7               	comf	i1___aldiv@dividend+3,f
 21060  1841  0AA4               	incf	i1___aldiv@dividend,f
 21061  1842  1903               	skipnz
 21062  1843  0AA5               	incf	i1___aldiv@dividend+1,f
 21063  1844  1903               	skipnz
 21064  1845  0AA6               	incf	i1___aldiv@dividend+2,f
 21065  1846  1903               	skipnz
 21066  1847  0AA7               	incf	i1___aldiv@dividend+3,f
 21067  1848  3001               	movlw	1
 21068  1849  00FC               	movwf	??i1___aldiv
 21069  184A  087C               	movf	??i1___aldiv,w
 21070  184B  06A9               	xorwf	i1___aldiv@sign,f
 21071  184C                     i1l6103:	
 21072  184C  3000               	movlw	0
 21073  184D  00AD               	movwf	i1___aldiv@quotient+3
 21074  184E  3000               	movlw	0
 21075  184F  00AC               	movwf	i1___aldiv@quotient+2
 21076  1850  3000               	movlw	0
 21077  1851  00AB               	movwf	i1___aldiv@quotient+1
 21078  1852  3000               	movlw	0
 21079  1853  00AA               	movwf	i1___aldiv@quotient
 21080  1854  0823               	movf	i1___aldiv@divisor+3,w
 21081  1855  0422               	iorwf	i1___aldiv@divisor+2,w
 21082  1856  0421               	iorwf	i1___aldiv@divisor+1,w
 21083  1857  0420               	iorwf	i1___aldiv@divisor,w
 21084  1858  1903               	skipnz
 21085  1859  2895               	goto	i1l6125
 21086  185A  01A8               	clrf	i1___aldiv@counter
 21087  185B  0AA8               	incf	i1___aldiv@counter,f
 21088  185C                     i1l6111:	
 21089  185C  1BA3               	btfsc	i1___aldiv@divisor+3,7
 21090  185D  286A               	goto	i1l6113
 21091  185E  3001               	movlw	1
 21092  185F                     u547_25:	
 21093  185F  35A0               	lslf	i1___aldiv@divisor,f
 21094  1860  0DA1               	rlf	i1___aldiv@divisor+1,f
 21095  1861  0DA2               	rlf	i1___aldiv@divisor+2,f
 21096  1862  0DA3               	rlf	i1___aldiv@divisor+3,f
 21097  1863  0B89               	decfsz	9,f
 21098  1864  285F               	goto	u547_25
 21099  1865  3001               	movlw	1
 21100  1866  00FC               	movwf	??i1___aldiv
 21101  1867  087C               	movf	??i1___aldiv,w
 21102  1868  07A8               	addwf	i1___aldiv@counter,f
 21103  1869  285C               	goto	i1l6111
 21104  186A                     i1l6113:	
 21105  186A  3001               	movlw	1
 21106  186B                     u549_25:	
 21107  186B  35AA               	lslf	i1___aldiv@quotient,f
 21108  186C  0DAB               	rlf	i1___aldiv@quotient+1,f
 21109  186D  0DAC               	rlf	i1___aldiv@quotient+2,f
 21110  186E  0DAD               	rlf	i1___aldiv@quotient+3,f
 21111  186F  0B89               	decfsz	9,f
 21112  1870  286B               	goto	u549_25
 21113  1871  0823               	movf	i1___aldiv@divisor+3,w
 21114  1872  0227               	subwf	i1___aldiv@dividend+3,w
 21115  1873  1D03               	skipz
 21116  1874  287F               	goto	u550_25
 21117  1875  0822               	movf	i1___aldiv@divisor+2,w
 21118  1876  0226               	subwf	i1___aldiv@dividend+2,w
 21119  1877  1D03               	skipz
 21120  1878  287F               	goto	u550_25
 21121  1879  0821               	movf	i1___aldiv@divisor+1,w
 21122  187A  0225               	subwf	i1___aldiv@dividend+1,w
 21123  187B  1D03               	skipz
 21124  187C  287F               	goto	u550_25
 21125  187D  0820               	movf	i1___aldiv@divisor,w
 21126  187E  0224               	subwf	i1___aldiv@dividend,w
 21127  187F                     u550_25:	
 21128  187F  1C03               	skipc
 21129  1880  288A               	goto	i1l6121
 21130  1881  0820               	movf	i1___aldiv@divisor,w
 21131  1882  02A4               	subwf	i1___aldiv@dividend,f
 21132  1883  0821               	movf	i1___aldiv@divisor+1,w
 21133  1884  3BA5               	subwfb	i1___aldiv@dividend+1,f
 21134  1885  0822               	movf	i1___aldiv@divisor+2,w
 21135  1886  3BA6               	subwfb	i1___aldiv@dividend+2,f
 21136  1887  0823               	movf	i1___aldiv@divisor+3,w
 21137  1888  3BA7               	subwfb	i1___aldiv@dividend+3,f
 21138  1889  142A               	bsf	i1___aldiv@quotient,0
 21139  188A                     i1l6121:	
 21140  188A  3001               	movlw	1
 21141  188B                     u551_25:	
 21142  188B  36A3               	lsrf	i1___aldiv@divisor+3,f
 21143  188C  0CA2               	rrf	i1___aldiv@divisor+2,f
 21144  188D  0CA1               	rrf	i1___aldiv@divisor+1,f
 21145  188E  0CA0               	rrf	i1___aldiv@divisor,f
 21146  188F  0B89               	decfsz	9,f
 21147  1890  288B               	goto	u551_25
 21148  1891  3001               	movlw	1
 21149  1892  02A8               	subwf	i1___aldiv@counter,f
 21150  1893  1D03               	btfss	3,2
 21151  1894  286A               	goto	i1l6113
 21152  1895                     i1l6125:	
 21153  1895  0829               	movf	i1___aldiv@sign,w
 21154  1896  1903               	btfsc	3,2
 21155  1897  28A3               	goto	i1l6129
 21156  1898  09AA               	comf	i1___aldiv@quotient,f
 21157  1899  09AB               	comf	i1___aldiv@quotient+1,f
 21158  189A  09AC               	comf	i1___aldiv@quotient+2,f
 21159  189B  09AD               	comf	i1___aldiv@quotient+3,f
 21160  189C  0AAA               	incf	i1___aldiv@quotient,f
 21161  189D  1903               	skipnz
 21162  189E  0AAB               	incf	i1___aldiv@quotient+1,f
 21163  189F  1903               	skipnz
 21164  18A0  0AAC               	incf	i1___aldiv@quotient+2,f
 21165  18A1  1903               	skipnz
 21166  18A2  0AAD               	incf	i1___aldiv@quotient+3,f
 21167  18A3                     i1l6129:	
 21168  18A3  082D               	movf	i1___aldiv@quotient+3,w
 21169  18A4  00A3               	movwf	?i1___aldiv+3
 21170  18A5  082C               	movf	i1___aldiv@quotient+2,w
 21171  18A6  00A2               	movwf	?i1___aldiv+2
 21172  18A7  082B               	movf	i1___aldiv@quotient+1,w
 21173  18A8  00A1               	movwf	?i1___aldiv+1
 21174  18A9  082A               	movf	i1___aldiv@quotient,w
 21175  18AA  00A0               	movwf	?i1___aldiv
 21176  18AB  0008               	return
 21177  18AC                     __end_ofi1___aldiv:	
 21178  007E                     btemp	set	126	;btemp
 21179  007E                     int$flags	set	126
 21180  007E                     wtemp	set	126
 21181  007E                     wtemp0	set	126
 21182  0080                     wtemp1	set	128
 21183  0082                     wtemp2	set	130
 21184  0084                     wtemp3	set	132
 21185  0086                     wtemp4	set	134
 21186  0088                     wtemp5	set	136
 21187  007F                     wtemp6	set	127
 21188  007E                     ttemp	set	126
 21189  007E                     ttemp0	set	126
 21190  0081                     ttemp1	set	129
 21191  0084                     ttemp2	set	132
 21192  0087                     ttemp3	set	135
 21193  007F                     ttemp4	set	127
 21194  007E                     ltemp	set	126
 21195  007E                     ltemp0	set	126
 21196  0082                     ltemp1	set	130
 21197  0086                     ltemp2	set	134
 21198  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        47
    BSS         286
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     38      76
    BANK1            80     80      80
    BANK2            80     79      80
    BANK3            80      9      75
    BANK4            80      9      64
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), trunc@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___altoft
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  882631
                                             74 BANK2      5     5      0
                                              0 BANK4      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               11    11      0  161828
                                             48 BANK2     11    11      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29716
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   34205
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30954
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29990
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29774
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   20096
                                             31 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5804
                                             22 BANK2      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  163221
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  152879
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  152928
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  136883
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42641
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75823
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25792
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               6     6      0   16935
                                             22 BANK2      6     6      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         8     8      0   92084
                                             51 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   72063
                                             37 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   17096
                                             22 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1680
                                              0 BANK2     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    3019
                                             14 BANK2      8     4      4
                            ___ftdiv (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18165
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1214
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             31 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4565
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 12    12      0    1303
                                             26 BANK0     12    12      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _getModulationDelayTime
     ___altoft
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     26      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4F      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     231      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     231      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jan 13 20:08:05 2017

                        _update_mode 207D                         ___altoft@exp 0134  
                        __CFG_CP$OFF 0000                        ___altoft@sign 0135  
                   modSaw@inflection 0131                     scaleA100kPot@pwm 01E2  
                       ___awdiv@sign 00A6                   _topTactile_pressed 005B  
         setDoublePressState@f_state 00B8                  ___wmul@multiplicand 0130  
                 USARTInit@baud_rate 00A0                      _updateSwitchTap 09FD  
                       ___ftadd@exp1 00CD                         ___ftadd@exp2 00CC  
                       ___ftadd@sign 00CB                                  l360 05EE  
                                l382 2038                                  l631 273B  
                                l800 2105                                  l801 2129  
               __size_of_adc_convert 0013                                  l584 2DCB  
                                l960 2361                                  l793 20F6  
                                l795 20F9                                  l796 20FC  
                                l788 25B4                                  l956 2339  
                                l972 2487                                  l797 20FF  
                                l789 25D8                                  l798 2102  
                                l991 2EF2                                  l983 20AD  
                                l968 245A                                  l993 2EF8  
                                l994 2F00                                  l995 2F14  
                                _GIE 005F                                  l998 25E0  
                                _RB1 0069                                  _PR2 001B  
       solidring_tactiles@ring_delay 00B4                                  _map 1A3A  
                                _exp 1351                                  _log 1F2F  
                                _isr 0004                                  _tap 02A0  
                                _sin 082E                                  _pow 111C  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                         __CFG_FOSC$HS 0000  
                set_subdivision@tmpX 0149              __end_of_set_leds_bottom 212A  
                       __CFG_LVP$OFF 0000                       i1___aldiv@sign 0029  
                       ___ftdiv@cntr 00D8                         ___ftdiv@sign 00DD  
                               l1009 262A                                 l2110 2678  
                               l2111 2680                                 l2103 2665  
                               l1420 0ACB                                 l2134 10C5  
                               l1406 0A12                                 l2306 1140  
                               l2324 0943                                 l2194 1A20  
                               l1921 0D9D                                 l1942 2E27  
                               l1696 2318                                 ?_map 00DE  
                               l8001 20D1                                 l8013 2EDA  
                               l8101 2702                                 l1997 18BD  
                               l8023 1D37                                 l8111 1BEF  
                               l8121 1C11                                 l8051 1DA7  
                               l8043 1D8E                                 l9011 0A9C  
                               ?_exp 0148                                 l8029 1D4D  
                               l9101 2475                                 l8141 1C59  
                               l8205 1689                                 l9021 0AC3  
                               l9013 0AAB                                 ?_log 013E  
                               l8063 0808                                 l8231 1815  
                               l8081 1CB7                                 l8321 2FC4  
                               l8313 2FAF                                 l8145 1C61  
                               l8241 1F53                                 l8401 11AE  
                               l9121 1B5C                                 l9009 0A94  
                               l8091 1D18                                 l8307 148A  
                               l9203 1F29                                 l8219 14DF  
                               l9043 0B8A                                 l9051 0BC7  
                               ?_isr 0070                                 l8077 1CAF  
                               l8229 1805                                 l8405 11CE  
                               l8181 2F08                                 l9037 0B1A  
                               l9029 0B0E                                 l8327 2FCA  
                               l8319 2FB5                                 l8263 135E  
                               l8247 1F66                                 l9127 1B69  
                               l9143 1DD2                                 l9039 0B64  
                               l7801 10E9                                 l8273 1383  
                               l9313 0582                                 l7651 263B  
                               l7811 1104                                 l8507 0863  
                               l7635 2FD9                                 l9091 2450  
                               l9163 193A                                 l8611 253E  
                               l7709 210C                                 l7717 2E21  
                               l7741 2421                                 l8189 205E  
                               l9069 232F                                 l8285 13E2  
                               l9149 1DE1                                 l9325 05F0  
                               l9309 0542                                 l8711 22EF  
                               l7655 2642                                 l7751 104E  
                               l7823 2157                                 l8519 08FF  
                               l7639 2FE3                                 l9079 2354  
                               l8279 13A7                                 l8367 23D3  
                               l9191 1E96                                 l9183 1E82  
                               l8543 0D59                                 l9343 070B  
                               l9335 0681                                 l9271 03B3  
                               l9255 0394                                 l7681 258C  
                               l8713 22F1                                 l7665 266A  
                               l7657 264C                                 l7761 1064  
                               l7841 0763                                 l8393 1154  
                               l9185 1E88                                 l8617 2549  
                               l8481 21CE                                 l8473 21BD  
                               l9353 0743                                 l9329 0630  
                               l9265 03A4                                 l7683 2594  
                               l8707 22EB                                 l7667 2672  
                               l7659 2651                                 l7755 1055  
                               l7739 2411                                 l7819 2141  
                               l7931 1A31                                 l8387 1148  
                               l9187 1E8C                                 l9195 1E9D  
                               l8643 2580                                 l8635 256F  
                               l8627 2551                                 l8555 219D  
                               l8539 0C17                                 l8803 20A0  
                               l8811 20B1                                 l9339 06C1  
                               ?_sin 0145                                 l7685 259C  
                               l7693 25BB                                 l8709 22ED  
                               l8717 22F5                                 l7781 109B  
                               l7773 107E                                 l7925 1A17  
                               l7917 19FC                                 l9189 1E92  
                               l9197 1EB6                                 l8629 255D  
                               l8581 18DE                                 l8573 18CE  
                               l9285 042E                                 l7687 25A4  
                               l7791 10B7                                 l7783 10A0  
                               l7871 07D0                                 l7863 07BC  
                               l7847 0779                                 l7927 1A23  
                               l7919 1A0A                                 l7943 21F5  
                               l8639 2578                                 l8903 12C9  
                               l8591 190C                                 l8583 18EC  
                               l8831 260F                                 l9295 048C  
                               l7689 25AC                                 l7793 10C1  
                               l7785 10A4                                 l8681 0E9B  
                               l8673 0E20                                 l8489 21D9  
                               l8809 20AA                                 l8841 2626  
                               l8833 2614                                 l8825 2603  
                               l8771 274E                                 l7779 1091  
                               l7875 07D8                                 l7859 07B4  
                               l8683 0EE1                                 l8931 1316  
                               l8923 12FC                                 l8915 12DD  
                               l8851 1248                                 l8595 1917  
                               l8843 262E                                 l9299 04CC  
                               l8773 2757                                 l7797 10D7  
                               l8685 0F27                                 l8693 0FC7  
                               l7981 24C6                                 l7973 24A2  
                               l8933 131C                                 l8941 132F  
                               l8917 12E1                                 ?_pow 0155  
                               l8687 0F6D                                 l8695 0FDE  
                               l8679 0E55                                 l8863 1269  
                               l8855 125B                                 l8599 1925  
                               l8689 0FB3                                 l8697 0E37  
                               l7899 19CC                                 l8699 0FE4  
                               l8947 133A                                 l8883 1295  
                               l8973 0A23                                 l9791 230E  
                               l9783 0FCD                                 l8887 12A7  
                               l8967 0A08                                 l9793 2313  
                               l9785 1EA2                                 l8889 12AF  
                               l9795 25C1                                 l9787 2304  
                               l8995 0A6C                                 l8987 0A45  
                               l9797 2112                                 l9789 2309  
                               l8989 0A62                                 _PEIE 005E  
                               _RCIE 048D                                 u8015 10A5  
                               u8045 10B8                                 u8215 07D9  
                               u8225 07DF                                 u8145 0785  
                               u9105 190D                                 u8155 0795  
                               u8325 1A18                                 u9205 2570  
                               u8175 07BD                                 u8600 205C  
                               u9305 1012                                 u7705 2660  
                               u8185 07C3                                 u8265 19D3  
                               u9065 18E1                                 u7635 2FE4  
                               u9340 2755                                 u9325 2734  
                               u7725 266D                                 u8445 1D5F  
                               u7805 2E28                                 u7645 2FEB  
                               u9165 2554                                 u8365 24A0  
                               u9085 18ED                                 u8710 13C0  
                               u9335 2747                                 u8455 1D6F  
                               u7815 2E2D                                 u8295 19FD  
                               u9255 0DFA                                 u8375 24C4  
                               u9095 1901                                 u8720 13C1  
                               u8465 1D8F                                 u9185 255E  
                               u9265 0E0E                                 u8475 1D9E  
                               u9195 2568                                 u9275 0E1E  
                               u7765 2687                                 u7685 2647  
                               u8485 1DA8                                 u7845 2416  
                               u8645 180A                                 u9285 0E3E  
                               u9525 1241                                 u9445 25F2  
                               u9295 100C                                 u9535 1254  
                               u9375 2090                                 u8585 1C1A  
                               u7955 107F                                 u8755 1481  
                               u8845 119F                                 u9565 1273  
                               u8925 2E0F                                 u8950 08FB  
                               u9815 0A4E                                 u8960 08FC  
                               u7985 1092                                 u8865 2E45  
                               u8875 2EB9                                 u9675 12ED  
                               u8885 21AE                                 u9925 0ADC  
                               u9845 0A76                                 u9935 0AF3  
                               u9945 0B23                                 u9955 0B38  
                               u9965 0B4C                                 u9985 0B69  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                    _scaleA10kPot$2841 01E5  
                  _scaleA10kPot$2842 01E8                                 _iCnt 01C0  
                               _main 0363                         ___ftpack@arg 00A0  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 0145                                 sin@y 0149  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 02E6  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2D65                      _expressModeCnst 01DF  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 2E56  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2FA0                         ___fttol@exp1 012D  
                              ??_map 00ED                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0148  
                              ??_pow 015B                      _switchBypass_up 025E  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 192E  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 013A                      __end_of___awdiv 2585  
                    __end_of___ftadd 111C                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1DC9  
                    __end_of___ftneg 2D7E                                u10105 246E  
                              u10045 234D                                u10305 05E9  
                              u10315 060E                                u10235 040C  
                    __end_of___ftmul 0800                                u10325 062E  
                              u10245 042C                                u10335 069F  
                              u10255 04AA                                u10185 1F24  
                              u10345 06BF                                u10265 04CA  
                              u10195 1B4B                                u10275 0560  
                    ___awdiv@divisor 00A0                                u10285 0580  
                              u10295 05DB                      __end_of___ftsub 082E  
                    __end_of___fttol 1A3A                                i1l151 0257  
                              i1l136 0113                                i1l159 02E1  
                              i1l788 2391                                i1l789 23B3  
                    ___awdiv@counter 00A5                                _RCREG 0199  
                              _SPBRG 019B                   __end_ofsin@coeff_a 2848  
                 __end_ofsin@coeff_b 2854                                _TXREG 019A  
                              _UQEnd 004E                  _ConfigureOscillator 2D5D  
        __size_of_setLongBypassState 0021                     _setPresetDisplay 20B5  
                       ?_init_timer0 0070                         ?_init_timer2 0070  
                ___lmul@multiplicand 00A4                         ___lltoft@exp 00AD  
              __size_of_calcSinArray 0081                      _switchTap_state 016F  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1C79                                _ldexp 1BE2  
                              _frexp 21E1                                _myBuf 03A0  
                              _errno 024D             _getModulationSubdivision 2FA0  
                      ___ftpack@sign 00A4                                _timer 004A  
                              _trunc 23B4                     __end_ofi1___lmul 2F70  
                              sin@x2 014F                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                      __end_of_wait_ms 2047  
                              pow@yi 0163                      scaleA10kPot@pwm 01E2  
                 __size_of_USARTInit 0043                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003          __end_of_read_bottom_tactile 236C  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                 __size_ofi1___awdiv 0051                set_subdivision@scalar 0146  
     __size_of_setSwitchBypassRelays 0036        __end_of_setSwitchBypassRelays 207D  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 1232                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0BE2                      __initialization 02E8  
                        log@exponent 0142          updateModulationArray@iAngle 015A  
            _updateSwitchBypassState 2D5C                         __end_of_main 074C  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1533 00B5  
                    _set_subdivision 1E74                         _calcSinArray 277F  
        updateModulationArray@subDiv 0156                               ??_main 016A  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 2F41  
         i1_getModulationSubdivision 2F15                        ?_scaleA10kPot 0167  
            __size_of_FLASH_ReadWord 0020            setLongBypassState@f_state 00A0  
         __end_of_solidring_tactiles 2261                     ?_set_leds_bottom 00A0  
                             ?_floor 0136                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 2447  
                             _ADRESH 009C                               _ADRESL 009B  
                   ___awdiv@dividend 00A2                     __end_of___awtoft 2EF1  
                   __end_of___ftpack 2697                 ??_updateSwitchBypass 00BC  
                             ?_trunc 0136                     __end_of___lltoft 182A  
                             i1l6111 185C                               i1l6103 184C  
                             i1l6121 188A                               i1l6113 186A  
                             i1l6125 1895                               i1l6129 18A3  
                             i1l6081 2F49                               i1l1997 183B  
                             i1l6085 2F53                               i1l6805 2F3C  
                             i1l6901 018D                               i1l6823 24F7  
                             i1l6841 251D                               i1l6833 24FF  
                             i1l6817 24EC                               i1l6905 0198  
                             i1l6835 250B                               i1l6771 2373  
                             i1l6923 01F3                               i1l6907 01A7  
                             i1l6845 2526                               i1l6773 2379  
                             i1l6925 0202                               i1l6909 01A9  
                             i1l6791 2F24                               i1l6775 237F  
                             i1l6783 2397                               i1l6919 01E5  
                             i1l6863 00B5                               i1l6849 252E  
                             i1l6777 2385                               i1l6929 0210  
                             i1l6779 238B                               i1l6963 02DE  
                             i1l6939 0259                               i1l6947 02AB  
                             i1l6797 2F29                               i1l6965 02E0  
                             i1l6893 0167                               i1l6869 00D0  
                             i1l6799 2F37                               i1l6959 02D9  
                             i1l6895 0177                               i1l6897 0179  
                             i1l9799 239C                               _PMADRH 0192  
                             _PMADRL 0191                               _PMDATH 0194  
                             _PMDATL 0193                               _PMCON2 0196  
                             u541_25 2F54                               u550_25 187F  
                             u542_25 2F5B                               u551_25 188B  
                             u547_25 185F                               u549_25 186B  
                             u664_25 2502                               u681_23 0137  
                             u673_25 00AC                               u666_25 250C  
                             u667_25 2516                               u675_25 00C7  
                             u668_25 251E                               u693_23 0235  
                             u677_23 0104                               u694_25 024F  
                             u696_25 02BD                               u689_23 01D4  
                             u697_25 02D4                       _debounce_count 0245  
                        modSaw@angle 012E                       _debounce_mode1 0247  
                     _debounce_mode2 0249                          modSaw@shift 013F  
                             _URBuff 0320                            ??_InitApp 00A0  
              ??_ConfigureOscillator 00A0             __end_of_read_top_tactile 2492  
                        modSin@angle 0134              ?_getModulationDelayTime 0070  
                     __CFG_PWRTE$OFF 0000                          modSin@shift 013F  
                             ___ftge 212A                               ___lmul 2FD0  
                          ??___aldiv 00A8                               ___wmul 2E1E  
                  _update_selectMode 25D9                            ??___awdiv 00A4  
                          ??___ftadd 00C7                       __CFG_STVREN$ON 0000  
                          ??___ftdiv 00D4                            ??___ftneg 00C1  
                          ??___ftmul 00B4                            ??___ftsub 00F0  
                          ??___fttol 0124                          modTri@angle 012E  
                   __end_of_init_adc 2D88                               _modSaw 14AA  
                             _modSin 1654                               _modTri 0BE2  
                   __end_of_init_pwm 22E3                   ?_update_selectMode 0070  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2E04                               _tmpVal 0253  
                  __end_of_USARTInit 2326                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 18AC                               floor@i 013A  
                             floor@x 0136                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 2533              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 0152                     __end_of_showSave 2015  
                ??_update_selectMode 00A7                 _getSwitchBypassState 2D61  
                          ??_wait_ms 00AE                 _setSwitchBypassState 2E3A  
                             trunc@i 013A                               trunc@x 0136  
                      _scaleA100kPot 192E         __end_of_setExpressionDisplay 2DEA  
             __size_of_scaleiA10kPot 00AB               setLongTapState@f_state 00A0  
                   modSin@inflection 0137                     __end_ofexp@coeff 281E  
                   __end_oflog@coeff 2839              __end_of__initialization 035F  
                         ___altoft@c 012E       __end_of_getModulationDelayTime 1B51  
                         ___ftadd@f1 00C1                           ___ftadd@f2 00C4  
                         ___ftge@ff1 00A0                           ___ftge@ff2 00A3  
                  _bypass_turning_on 01BF                         eval_poly@res 013B  
                         ___ftdiv@f1 00D1                           ___ftdiv@f2 00CE  
                         ___ftdiv@f3 00D9                       _top_push_state 0064  
          ??_updateSwitchBypassState 00A2                           ___ftneg@f1 00BE  
                _switchBypass_toggle 0251                           ___awtoft@c 00A8  
              __end_of_ring_tactiles 24E2            __end_of_update_selectMode 2632  
            __end_of_set_subdivision 1F2F                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 0142  
                         ___ftsub@f2 013F                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                         ?_update_mode 0070  
                     __pcstackCOMMON 0070                         __pidataBANK0 2DAF  
                       __pidataBANK2 2000                         __pidataBANK3 2E72  
                       __pidataBANK4 0002                           ___lltoft@c 00A8  
                      __end_of_floor 1D20                        __end_of_ldexp 1C79  
                      __end_of_frexp 2221                        __end_of_trunc 23FC  
                   _initSwitchBypass 2DA0                            ?i1___lmul 0070  
              _updateModulationArray 0DDD                      _doubleTap_state 0050  
                     _OPTION_REGbits 0095                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0139                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                              ??_trunc 0139  
                      ?_setPedalMode 0070                           __pbssBANK0 0046  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 20EF                           _delay_time 005C  
                   _long_press_limit 0062         __size_of_setDoublePressState 003E  
                         _delayfound 024B                           __pmaintext 0363  
                     _InitializeTaps 1000                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0158                           __pintentry 0004  
                      _scaleiA10kPot 1DC9                           _blink_rate 0066  
                      ??_adc_convert 00A2                            ?___altoft 012E  
                            ?_modSaw 012E                              ?_modSin 0134  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2E04                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 2E8E  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 2D5D  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2641 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 0059         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 0142                              _UQFront 007D  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BE                              _InitApp 2F70  
               __end_of_scaleA10kPot 1BE2                         modSin@period 0142  
             __end_of_InitializeTaps 1026                         modSin@tmpVal 0145  
                      ?_set_leds_top 00A0                           _knob1_prev 01CC  
         __size_of_update_selectMode 0059                   i1___awdiv@quotient 0077  
                         _knob2_prev 01CE                           _knob3_prev 01D0  
                         _knob4_prev 01D2                           _knob5_prev 01D4  
                   ?_set_subdivision 013F                            ?_showSave 0070  
                            ___aldiv 18AC                       ?_scaleiA10kPot 0167  
                    __size_of___ftge 003C                              ___awdiv 2533  
                    __size_of___lmul 0030                              ___ftadd 1026  
                            ___ftdiv 1D20                              ___ftneg 2D75  
                         _knob_1_pos 01AC                           _knob_2_pos 01AE  
                    __size_of___wmul 001C                              ___ftmul 074C  
                         _knob_3_pos 01B0                              ___ftsub 0800  
                            ___fttol 19B3                           _knob_4_pos 01B2  
                         _knob_5_pos 01B4                    _switchTap_pressed 005A  
                         ??___altoft 0132                 _setExpressionDisplay 2DD2  
             ?_updateModulationArray 0070               __end_of_FLASH_ReadWord 2EAE  
                    __size_of_modSaw 01AA                      __size_of_modSin 01AC  
                         ??___awtoft 00AB                           ??___ftpack 00A5  
                    __size_of_modTri 01FB                    __end_of_eval_poly 2709  
                 InitializeTaps@itap 00A1                           ??___lltoft 00AC  
                            __ptext1 25D9                              __ptext2 207D  
                            __ptext3 09FD                              __ptext4 2E04  
                            __ptext5 18AC                              __ptext6 1232  
                            __ptext7 2EAE                              __ptext8 21A3  
                            __ptext9 2001           __end_of_setLongBypassState 2ECF  
        ?i1_getModulationSubdivision 0070               ??_getSwitchBypassState 00A2  
                  __end_of_modSawRev 2E72                            _T2CONbits 001C  
                       __size_of_map 008B                         __size_of_exp 0159  
                       __size_of_log 00D1                         __size_of_isr 02E2  
             ??_setSwitchBypassState 00B8                         __size_of_sin 01CF  
                       __size_of_pow 0116                  __end_of_adc_convert 2DD2  
                       modTri@period 013A                    __end_of_modSquare 21A3  
                    ??_scaleA100kPot 00F0                     ___aldiv@dividend 00A4  
                       modTri@tmpVal 013D                              _wait_ms 2015  
                            clrloop0 2D95                 end_of_initialization 035F  
                            exp@sign 0154                           _modulation 2261  
                            init_ram 2D88                           ??_init_adc 00A0  
                            initloop 2D89                           ??_init_pwm 00A0  
       updateSwitchBypassState@state 00A0                   _solidring_tactiles 2221  
                      _longTap_timer 01B8                        _longTap_state 0068  
                      _longTap_start 0054                       ??_set_leds_top 00A4  
                  ?_read_top_tactile 0070                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 2E1E                _setSwitchBypassRelays 2047  
             i1set_leds_top@ledState 0072                   ??_read_top_tactile 00B2  
                          _RCSTAbits 019D                           ??_showSave 00B7  
                   _mod_time_changed 01E0                     _longBypass_timer 01B6  
                   ___aldiv@quotient 00AB                     _longBypass_state 0053  
                   _longBypass_start 0052         __size_of_read_bottom_tactile 0046  
                ?_solidring_tactiles 0070                         __pstringtext 2800  
          FLASH_ReadWord@GIEBitValue 00A2                ?_setExpressionDisplay 0070  
               __size_of_update_mode 0038                      ?_FLASH_ReadWord 00A0  
                  _expressionChannel 0067                            _PORTAbits 000C  
                          _PORTCbits 000E                            _PORTDbits 000F  
                          _PORTEbits 0010                            _USARTInit 22E3  
                          _TRISBbits 008D                            _TRISCbits 008E  
                          _TRISDbits 008F                            _TRISEbits 0090  
                          _TRISFbits 030C                            _TRISGbits 030D  
                          i1___aldiv 182A                            i1___awdiv 24E2  
               ??_solidring_tactiles 00B2          __end_of_ConfigureOscillator 2D61  
                         map@out_max 00EA                           map@out_min 00E7  
        __size_of_updateSwitchBypass 011F             __end_of_initSwitchBypass 2DAF  
                        _CCP1CONbits 0293                          ___ftdiv@exp 00DC  
           __size_of_set_leds_bottom 003B                          _CCP2CONbits 029A  
                          _TXSTAbits 019E                 _switchBypass_pressed 01BC  
                        _CCP3CONbits 0313                          _CCP4CONbits 031A  
                        _CCP5CONbits 031E                          _CCP6CONbits 0613  
                    ??_scaleiA10kPot 00F0                          _CCP7CONbits 0616  
                        ___ftmul@exp 00B8                   adc_convert@channel 00A3  
                        _CCP8CONbits 0619                          _CCP9CONbits 061C  
               set_leds_top@ledState 00A2                       __end_of___ftge 2166  
               __end_of_setPedalMode 2F15                       __end_of___lmul 3000  
                     __end_of___wmul 2E3A                         _double_timer 01A0  
                        _adc_convert 2DBF     __end_of_getModulationSubdivision 2FD0  
                     _switchTap_down 01C5                       __end_of_modSaw 1654  
                     __end_of_modSin 1800                       __end_of_modTri 0DDD  
                     modSawRev@angle 0145                           floor@expon 013D  
              i1___lmul@multiplicand 0074                    __size_ofi1___lmul 002F  
                start_initialization 02E8                           ?_USARTInit 00A0  
                         eval_poly@d 0137                           eval_poly@n 0139  
                         eval_poly@x 0134                _bottomTactile_pressed 004F  
                _setDoublePressState 21A3                           ldexp@value 013E  
                         ?i1___aldiv 0020                          __end_of_map 1AC5  
                        __end_of_exp 14AA                          __end_of_log 2000  
                        __end_of_isr 02E6                           ?i1___awdiv 0070  
                        __end_of_sin 09FD                          __end_of_pow 1232  
              __size_of_scaleA10kPot 0091                   _adjusted_pot_value 0241  
                        ?_modulation 002E                   scaleiA10kPot@input 0167  
                         frexp@value 00A0               __size_of_resetRingLEDs 001A  
             ?_setSwitchBypassRelays 00B2                 ?_setDoublePressState 00B8  
__size_ofi1_getModulationSubdivision 002C                     ?_setLongTapState 00A0  
                  ?_setPresetDisplay 0070                             ??___ftge 00A6  
                           ??___lmul 00A8               ??_setExpressionDisplay 00A4  
                           ??___wmul 00F0                   ??_setPresetDisplay 00A4  
                        __pdataBANK0 005C                          __pdataBANK2 016F  
                        __pdataBANK3 01C6                          __pdataBANK4 025E  
                           ??_modSaw 00F0                             ??_modSin 013A  
                 i1___aldiv@dividend 0024                             ??_modTri 00F0  
                      _tap_iteration 01DA             __size_of_updateSwitchTap 01E5  
                  __size_of___altoft 004B                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                          __pbssBIGRAM 238A  
                       _scaleA10kPot 1B51                    __size_of___lltoft 002A  
                      ??_init_timer0 00A0                        ??_init_timer2 00A0  
                        __pbssCOMMON 007D                 __end_of_set_leds_top 25D9  
                          ___latbits 0003       setExpressionDisplay@ledChannel 00A6  
                 _switchBypass_state 006B                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
                      __pcstackBANK3 01E2                        __pcstackBANK4 0255  
             __size_of_ring_tactiles 0050                       isr@tmpModDelay 0044  
                     _expSwitchState 01DE                     i1___lmul@product 0078  
                   scaleiA10kPot@pwm 01E2             ?_updateSwitchBypassState 00A0  
                         sin@coeff_a 2839                           sin@coeff_b 2848  
                 i1___aldiv@quotient 002A                             ?_InitApp 0070  
              ??_setDoublePressState 00BA                    __size_of_init_adc 000A  
                  __size_of_init_pwm 0041                            _main$2832 0255  
                          _main$2833 0258                            _main$2834 025B  
            ??_updateModulationArray 0150                             ?___aldiv 00A0  
                  ??_set_leds_bottom 00A2                   _currentBypassState 01DD  
                           ?___awdiv 00A0                             ?___ftadd 00C1  
                           ?___ftdiv 00CE                             ?___ftneg 00BE  
                           ?___ftmul 00AE                             ?___ftsub 013F  
                           ?___fttol 0120                    __size_of_showSave 0014  
                 _modulation_changed 0056                    i1___awdiv@divisor 0070  
                 _scaleA100kPot$2837 01E5                   _scaleA100kPot$2838 01E8  
                      ?_calcSinArray 0070                    i1___awdiv@counter 0075  
                        _blink_delay 01CA                  __size_of_modulation 0041  
                      _resetRingLEDs 2DEA                          _blink_state 01DC  
                          _eval_poly 2697                          ??_USARTInit 00A2  
                           _CCPTMRS0 029D                             _CCPTMRS1 029E  
                           _CCPTMRS2 029F                          ??i1___aldiv 007C  
                           ?_wait_ms 00AC                          ??i1___awdiv 0074  
                          _modSawRev 2E56             ??_getModulationDelayTime 0136  
                _read_bottom_tactile 2326                       __size_of_floor 00A7  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 2166                       _presetModeCnst 01E1  
                     __size_of_trunc 0048                   _setLongBypassState 2EAE  
                __end_of_init_timer0 2D6C                  __end_of_init_timer2 2D75  
                          _mod_value 01BA                            _mod_timer 01A4  
                   ??_InitializeTaps 00A0                      ___aldiv@divisor 00A0  
  __size_of_getModulationSubdivision 0030                      ___aldiv@counter 00A9  
          ?_getModulationSubdivision 00A0                       _presetSaveMode 0057  
                     ___wmul@product 0132                             _LATBbits 010D  
                           _LATDbits 010F                             _LATFbits 038C  
                           _LATGbits 038D                       _mod_delay_time 01D6  
                          clear_ram0 2D94                            _tap_timer 0046  
                ?_setLongBypassState 00A0                            _tap_total 023D  
              __size_of_setPedalMode 0024                        set_leds_top@x 00A0  
                           _PIR1bits 0011                        _ring_tactiles 2492  
                    _longBypass_down 0051                     ??_FLASH_ReadWord 00A2  
                    _longBypass_save 01C1                 ?_read_bottom_tactile 0070  
            __size_ofi1_set_leds_top 0048                       ??_calcSinArray 0153  
          initSwitchBypass@initState 00BA                            map@in_max 00E4  
                          map@in_min 00E1                       ?_resetRingLEDs 0070  
                          _sub_timer 01A8                           _ADCON0bits 009D  
                           i1___lmul 2F41                           _ADCON1bits 009E  
           __size_of_set_subdivision 00BB                    ___wmul@multiplier 012E  
                   set_subdivision@x 013F                     set_subdivision@y 0141  
          __size_of_read_top_tactile 004B                 ??_setLongBypassState 00A2  
                         ?_eval_poly 0134        __size_of_getSwitchBypassState 0004  
      __size_of_setSwitchBypassState 001C                           ?_modSawRev 0145  
              __end_of_scaleA100kPot 19B3                    ??_updateSwitchTap 00BC  
                  ___lmul@multiplier 00A0                           ?_modSquare 0148  
                    modSquare@tmpVal 014E                         _setPedalMode 2EF1  
                  _ReadSavedSettings 2709                    ?_initSwitchBypass 0070  
                  ring_tactiles@iLed 00B3                       wait_ms@timeSec 00AC  
                 ?_ReadSavedSettings 0070                          _modSaw$2847 0134  
                        _modSaw$2848 0137                          _modSaw$2849 013A  
                     wait_ms@timemsl 00AE                            frexp@eptr 00A3  
        setSwitchBypassState@f_state 00B6                          _modSin$2845 013C  
                 ??_initSwitchBypass 00BA                     __size_of_InitApp 0030  
                     ?_ring_tactiles 0070                            modSaw@mod 013D  
                        _mode1_state 01C2                        ??_update_mode 00A7  
                        _mode2_state 0055                ??_read_bottom_tactile 00B2  
                        _modTri$2846 0134                  updateSwitchTap@iCnt 00C4  
                ??_ReadSavedSettings 00A4                           _APFCONbits 011D  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 23FC                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           ___awtoft 2ECF                __size_of_set_leds_top 0054  
                           ___ftpack 2632                    _baseline_mod_time 01C6  
                           _map$2835 00ED                             ___lltoft 1800  
             _preset_programmning_on 01C3                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2609 014F  
                           _exp$2853 014C                          _init_timer0 2D65  
                        _init_timer2 2D6C           __end_of_updateSwitchBypass 1351  
                           __ptext10 2221                             __ptext11 2492  
                           __ptext20 2E56                             __ptext12 2EF1  
                           __ptext21 14AA                             __ptext13 20B5  
                           __ptext30 1351                             __ptext22 2533  
                           __ptext14 2DD2                             __ptext31 1BE2  
                           __ptext23 1E74                             __ptext15 2DEA  
                           __ptext40 2FD0                             __ptext32 1800  
                           __ptext24 23B4                             __ptext16 0DDD  
                           __ptext41 2D5C                             __ptext33 2447  
                           __ptext25 1DC9                             __ptext17 0BE2  
                           __ptext50 212A                             __ptext42 2D61  
                           __ptext34 2326                             __ptext26 1B51  
                           __ptext18 2166                             __ptext51 23FC  
                           __ptext43 1AC5                             __ptext35 1A3A  
                           __ptext27 192E                             __ptext19 1654  
                           __ptext60 2632                             __ptext52 2697  
                           __ptext44 2FA0                             __ptext36 2DA0  
                           __ptext28 111C                             __ptext61 2DBF  
                           __ptext53 2E1E                             __ptext45 277F  
                           __ptext37 2E3A                             __ptext29 1F2F  
                           __ptext70 2D6C                             __ptext62 22E3  
                           __ptext54 074C                             __ptext46 082E  
                           __ptext38 2047                             __ptext71 2D65  
                           __ptext63 2709                             __ptext55 0800  
                           __ptext47 1C79                             __ptext39 2015  
                           __ptext80 182A                             __ptext72 2D7E  
                           __ptext64 2585                             __ptext56 1026  
                           __ptext48 21E1                             __ptext73 2D5D  
                           __ptext65 20EF                             __ptext57 2D75  
                           __ptext49 19B3                             __ptext66 2E8E  
                           __ptext58 1D20                             __ptext75 236C  
                           __ptext67 1000                             __ptext59 2ECF  
                           __ptext76 2F15                             __ptext68 2F70  
                           __ptext77 24E2                             __ptext69 22A2  
                           __ptext78 2261                             __ptext79 2F41  
                           _sin$2852 014C            __end_of_ReadSavedSettings 277F  
                   __size_of_wait_ms 0032          __size_of_solidring_tactiles 0040  
    __size_of_getModulationDelayTime 008C                             _ledState 0239  
                           _pow$2850 015C                             _pow$2851 015F  
                      _presetChannel 006A                         ??_modulation 0036  
                        _mod_counter 024F                             _modArray 238A  
            ??_setSwitchBypassRelays 00B4                           trunc@expon 013D  
                           _init_adc 2D7E                        __size_of_main 03E9  
                           _init_pwm 22A2     updateModulationArray@angleFactor 0154  
                           _sinArray 2482         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 2585                             _showSave 2001  
                           _num_taps 0069                __end_of_scaleiA10kPot 1E74  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                __end_of_update_mode 20B5                             exp@coeff 2800  
                           _symmetry 01D8                  modSawRev@inflection 0148  
                           log@coeff 281E                   __end_of_modulation 22A2  
                 calcSinArray@iAngle 015A                           _INTCONbits 000B  
                        ??_eval_poly 00F0            __size_of_setPresetDisplay 003A  
                        _tap_history 0220                          ??_modSawRev 014B  
                  ??_set_subdivision 0143                          ??_modSquare 00F0  
                 calcSinArray@tmpVal 0157                             intlevel1 0000  
               __end_of_calcSinArray 2800                      _set_leds_bottom 20EF  
                         _PMCON1bits 0195                      ??_ring_tactiles 00B2  
                  __CFG_CLKOUTEN$OFF 0000                      _reset_sub_delay 01C4  
                         _OSCCONbits 0099                         _preset_blink 0058  
             _getModulationDelayTime 1AC5                       i1_set_leds_top 236C  
     __size_of_updateModulationArray 0223     __size_of_updateSwitchBypassState 0001  
      __end_of_updateModulationArray 1000        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2843 01E5                   _scaleiA10kPot$2844 01E8  
           __size_of_setLongTapState 001A                     _read_top_tactile 2447  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0076          __end_of_setDoublePressState 21E1  
                       _CCP10CONbits 061F                    _bottom_push_state 0060  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 23B4  
