

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Jan 11 20:46:19 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK5,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    20                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	text51,local,class=CODE,merge=1,delta=2
    82                           	psect	text52,local,class=CODE,merge=1,delta=2
    83                           	psect	text53,local,class=CODE,merge=1,delta=2
    84                           	psect	text54,local,class=CODE,merge=1,delta=2
    85                           	psect	text55,local,class=CODE,merge=1,delta=2
    86                           	psect	text56,local,class=CODE,merge=1,delta=2
    87                           	psect	text57,local,class=CODE,merge=1,delta=2
    88                           	psect	text58,local,class=CODE,merge=1,delta=2
    89                           	psect	text59,local,class=CODE,merge=1,delta=2
    90                           	psect	text60,local,class=CODE,merge=1,delta=2
    91                           	psect	text61,local,class=CODE,merge=1,delta=2
    92                           	psect	text62,local,class=CODE,merge=1,delta=2
    93                           	psect	text63,local,class=CODE,merge=1,delta=2
    94                           	psect	text64,local,class=CODE,merge=1,delta=2
    95                           	psect	intentry,global,class=CODE,delta=2
    96                           	psect	text66,local,class=CODE,merge=1,delta=2
    97                           	psect	text67,local,class=CODE,merge=1,delta=2
    98                           	psect	text68,local,class=CODE,merge=1,delta=2
    99                           	psect	text69,local,class=CODE,merge=1,delta=2
   100                           	psect	text70,local,class=CODE,merge=1,delta=2
   101                           	psect	text71,local,class=CODE,merge=1,delta=2
   102                           	psect	text72,local,class=CODE,merge=1,delta=2
   103                           	psect	text73,local,class=CODE,merge=1,delta=2
   104                           	psect	text74,local,class=CODE,merge=1,delta=2
   105                           	psect	text75,local,class=CODE,merge=1,delta=2
   106                           	psect	text76,local,class=CODE,merge=1,delta=2
   107                           	psect	text77,local,class=CODE,merge=1,delta=2
   108                           	psect	text78,local,class=CODE,merge=1,delta=2
   109                           	psect	text79,local,class=CODE,merge=1,delta=2
   110                           	psect	text80,local,class=CODE,merge=1,delta=2
   111                           	psect	text81,local,class=CODE,merge=1,delta=2
   112                           	psect	text82,local,class=CODE,merge=1,delta=2
   113                           	psect	text83,local,class=CODE,merge=1,delta=2
   114                           	psect	text84,local,class=CODE,merge=1,delta=2
   115                           	dabs	1,0x920,80
   116                           	dabs	1,0x8A0,80
   117                           	dabs	1,0x820,80
   118                           	dabs	1,0x7A0,80
   119                           	dabs	1,0x742,46
   120                           	dabs	1,0x720,34
   121                           	dabs	1,0x6A0,80
   122                           	dabs	1,0x668,8
   123                           	dabs	1,0x2482,0,_sinArray
   124                           	dabs	1,0x2408,0,_modArray
   125                           	dabs	1,0x7E,2
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  008F                     	;# 
   160  0090                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  0110                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  011D                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185  018F                     	;# 
   186  0190                     	;# 
   187  0191                     	;# 
   188  0191                     	;# 
   189  0192                     	;# 
   190  0193                     	;# 
   191  0193                     	;# 
   192  0194                     	;# 
   193  0195                     	;# 
   194  0196                     	;# 
   195  0197                     	;# 
   196  0199                     	;# 
   197  0199                     	;# 
   198  0199                     	;# 
   199  019A                     	;# 
   200  019A                     	;# 
   201  019A                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019C                     	;# 
   208  019C                     	;# 
   209  019C                     	;# 
   210  019D                     	;# 
   211  019D                     	;# 
   212  019D                     	;# 
   213  019E                     	;# 
   214  019E                     	;# 
   215  019E                     	;# 
   216  019F                     	;# 
   217  019F                     	;# 
   218  019F                     	;# 
   219  020D                     	;# 
   220  020F                     	;# 
   221  0210                     	;# 
   222  0211                     	;# 
   223  0211                     	;# 
   224  0212                     	;# 
   225  0212                     	;# 
   226  0213                     	;# 
   227  0213                     	;# 
   228  0214                     	;# 
   229  0214                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0216                     	;# 
   234  0216                     	;# 
   235  0217                     	;# 
   236  0217                     	;# 
   237  0219                     	;# 
   238  021A                     	;# 
   239  021B                     	;# 
   240  021C                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028D                     	;# 
   246  0291                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0293                     	;# 
   250  0298                     	;# 
   251  0298                     	;# 
   252  0299                     	;# 
   253  029A                     	;# 
   254  029D                     	;# 
   255  029E                     	;# 
   256  029F                     	;# 
   257  030C                     	;# 
   258  030D                     	;# 
   259  0311                     	;# 
   260  0311                     	;# 
   261  0312                     	;# 
   262  0313                     	;# 
   263  0318                     	;# 
   264  0318                     	;# 
   265  0319                     	;# 
   266  031A                     	;# 
   267  031C                     	;# 
   268  031C                     	;# 
   269  031D                     	;# 
   270  031E                     	;# 
   271  038C                     	;# 
   272  038D                     	;# 
   273  0394                     	;# 
   274  0395                     	;# 
   275  0396                     	;# 
   276  040C                     	;# 
   277  040D                     	;# 
   278  0411                     	;# 
   279  0411                     	;# 
   280  0412                     	;# 
   281  0413                     	;# 
   282  0414                     	;# 
   283  0415                     	;# 
   284  0416                     	;# 
   285  0417                     	;# 
   286  0418                     	;# 
   287  0418                     	;# 
   288  0419                     	;# 
   289  041A                     	;# 
   290  041B                     	;# 
   291  041C                     	;# 
   292  041D                     	;# 
   293  041E                     	;# 
   294  048D                     	;# 
   295  0491                     	;# 
   296  0491                     	;# 
   297  0492                     	;# 
   298  0492                     	;# 
   299  0493                     	;# 
   300  0493                     	;# 
   301  0493                     	;# 
   302  0494                     	;# 
   303  0494                     	;# 
   304  0495                     	;# 
   305  0495                     	;# 
   306  0496                     	;# 
   307  0496                     	;# 
   308  0497                     	;# 
   309  0497                     	;# 
   310  0595                     	;# 
   311  0596                     	;# 
   312  0597                     	;# 
   313  059C                     	;# 
   314  059D                     	;# 
   315  059E                     	;# 
   316  0611                     	;# 
   317  0611                     	;# 
   318  0612                     	;# 
   319  0613                     	;# 
   320  0614                     	;# 
   321  0614                     	;# 
   322  0615                     	;# 
   323  0616                     	;# 
   324  0617                     	;# 
   325  0617                     	;# 
   326  0618                     	;# 
   327  0619                     	;# 
   328  061A                     	;# 
   329  061A                     	;# 
   330  061B                     	;# 
   331  061C                     	;# 
   332  061D                     	;# 
   333  061D                     	;# 
   334  061E                     	;# 
   335  061F                     	;# 
   336  0FE4                     	;# 
   337  0FE5                     	;# 
   338  0FE6                     	;# 
   339  0FE7                     	;# 
   340  0FE8                     	;# 
   341  0FE9                     	;# 
   342  0FEA                     	;# 
   343  0FEB                     	;# 
   344  0FED                     	;# 
   345  0FEE                     	;# 
   346  0FEF                     	;# 
   347  0000                     	;# 
   348  0001                     	;# 
   349  0002                     	;# 
   350  0003                     	;# 
   351  0004                     	;# 
   352  0005                     	;# 
   353  0006                     	;# 
   354  0007                     	;# 
   355  0008                     	;# 
   356  0009                     	;# 
   357  000A                     	;# 
   358  000B                     	;# 
   359  000C                     	;# 
   360  000D                     	;# 
   361  000E                     	;# 
   362  000F                     	;# 
   363  0010                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0013                     	;# 
   367  0014                     	;# 
   368  0015                     	;# 
   369  0016                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001C                     	;# 
   377  008C                     	;# 
   378  008D                     	;# 
   379  008E                     	;# 
   380  008F                     	;# 
   381  0090                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0093                     	;# 
   385  0094                     	;# 
   386  0095                     	;# 
   387  0096                     	;# 
   388  0097                     	;# 
   389  0099                     	;# 
   390  009A                     	;# 
   391  009B                     	;# 
   392  009B                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  010C                     	;# 
   397  010D                     	;# 
   398  010E                     	;# 
   399  010F                     	;# 
   400  0110                     	;# 
   401  0116                     	;# 
   402  0117                     	;# 
   403  011D                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406  018F                     	;# 
   407  0190                     	;# 
   408  0191                     	;# 
   409  0191                     	;# 
   410  0192                     	;# 
   411  0193                     	;# 
   412  0193                     	;# 
   413  0194                     	;# 
   414  0195                     	;# 
   415  0196                     	;# 
   416  0197                     	;# 
   417  0199                     	;# 
   418  0199                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019A                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019C                     	;# 
   429  019C                     	;# 
   430  019C                     	;# 
   431  019D                     	;# 
   432  019D                     	;# 
   433  019D                     	;# 
   434  019E                     	;# 
   435  019E                     	;# 
   436  019E                     	;# 
   437  019F                     	;# 
   438  019F                     	;# 
   439  019F                     	;# 
   440  020D                     	;# 
   441  020F                     	;# 
   442  0210                     	;# 
   443  0211                     	;# 
   444  0211                     	;# 
   445  0212                     	;# 
   446  0212                     	;# 
   447  0213                     	;# 
   448  0213                     	;# 
   449  0214                     	;# 
   450  0214                     	;# 
   451  0215                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0216                     	;# 
   455  0216                     	;# 
   456  0217                     	;# 
   457  0217                     	;# 
   458  0219                     	;# 
   459  021A                     	;# 
   460  021B                     	;# 
   461  021C                     	;# 
   462  021D                     	;# 
   463  021E                     	;# 
   464  021F                     	;# 
   465  028C                     	;# 
   466  028D                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  029D                     	;# 
   476  029E                     	;# 
   477  029F                     	;# 
   478  030C                     	;# 
   479  030D                     	;# 
   480  0311                     	;# 
   481  0311                     	;# 
   482  0312                     	;# 
   483  0313                     	;# 
   484  0318                     	;# 
   485  0318                     	;# 
   486  0319                     	;# 
   487  031A                     	;# 
   488  031C                     	;# 
   489  031C                     	;# 
   490  031D                     	;# 
   491  031E                     	;# 
   492  038C                     	;# 
   493  038D                     	;# 
   494  0394                     	;# 
   495  0395                     	;# 
   496  0396                     	;# 
   497  040C                     	;# 
   498  040D                     	;# 
   499  0411                     	;# 
   500  0411                     	;# 
   501  0412                     	;# 
   502  0413                     	;# 
   503  0414                     	;# 
   504  0415                     	;# 
   505  0416                     	;# 
   506  0417                     	;# 
   507  0418                     	;# 
   508  0418                     	;# 
   509  0419                     	;# 
   510  041A                     	;# 
   511  041B                     	;# 
   512  041C                     	;# 
   513  041D                     	;# 
   514  041E                     	;# 
   515  048D                     	;# 
   516  0491                     	;# 
   517  0491                     	;# 
   518  0492                     	;# 
   519  0492                     	;# 
   520  0493                     	;# 
   521  0493                     	;# 
   522  0493                     	;# 
   523  0494                     	;# 
   524  0494                     	;# 
   525  0495                     	;# 
   526  0495                     	;# 
   527  0496                     	;# 
   528  0496                     	;# 
   529  0497                     	;# 
   530  0497                     	;# 
   531  0595                     	;# 
   532  0596                     	;# 
   533  0597                     	;# 
   534  059C                     	;# 
   535  059D                     	;# 
   536  059E                     	;# 
   537  0611                     	;# 
   538  0611                     	;# 
   539  0612                     	;# 
   540  0613                     	;# 
   541  0614                     	;# 
   542  0614                     	;# 
   543  0615                     	;# 
   544  0616                     	;# 
   545  0617                     	;# 
   546  0617                     	;# 
   547  0618                     	;# 
   548  0619                     	;# 
   549  061A                     	;# 
   550  061A                     	;# 
   551  061B                     	;# 
   552  061C                     	;# 
   553  061D                     	;# 
   554  061D                     	;# 
   555  061E                     	;# 
   556  061F                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  000F                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0016                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001C                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  008F                     	;# 
   602  0090                     	;# 
   603  0091                     	;# 
   604  0092                     	;# 
   605  0093                     	;# 
   606  0094                     	;# 
   607  0095                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0099                     	;# 
   611  009A                     	;# 
   612  009B                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  010C                     	;# 
   618  010D                     	;# 
   619  010E                     	;# 
   620  010F                     	;# 
   621  0110                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  011D                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018F                     	;# 
   628  0190                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0194                     	;# 
   635  0195                     	;# 
   636  0196                     	;# 
   637  0197                     	;# 
   638  0199                     	;# 
   639  0199                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019A                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019C                     	;# 
   652  019D                     	;# 
   653  019D                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019E                     	;# 
   657  019E                     	;# 
   658  019F                     	;# 
   659  019F                     	;# 
   660  019F                     	;# 
   661  020D                     	;# 
   662  020F                     	;# 
   663  0210                     	;# 
   664  0211                     	;# 
   665  0211                     	;# 
   666  0212                     	;# 
   667  0212                     	;# 
   668  0213                     	;# 
   669  0213                     	;# 
   670  0214                     	;# 
   671  0214                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0216                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0217                     	;# 
   679  0219                     	;# 
   680  021A                     	;# 
   681  021B                     	;# 
   682  021C                     	;# 
   683  021D                     	;# 
   684  021E                     	;# 
   685  021F                     	;# 
   686  028C                     	;# 
   687  028D                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  029D                     	;# 
   697  029E                     	;# 
   698  029F                     	;# 
   699  030C                     	;# 
   700  030D                     	;# 
   701  0311                     	;# 
   702  0311                     	;# 
   703  0312                     	;# 
   704  0313                     	;# 
   705  0318                     	;# 
   706  0318                     	;# 
   707  0319                     	;# 
   708  031A                     	;# 
   709  031C                     	;# 
   710  031C                     	;# 
   711  031D                     	;# 
   712  031E                     	;# 
   713  038C                     	;# 
   714  038D                     	;# 
   715  0394                     	;# 
   716  0395                     	;# 
   717  0396                     	;# 
   718  040C                     	;# 
   719  040D                     	;# 
   720  0411                     	;# 
   721  0411                     	;# 
   722  0412                     	;# 
   723  0413                     	;# 
   724  0414                     	;# 
   725  0415                     	;# 
   726  0416                     	;# 
   727  0417                     	;# 
   728  0418                     	;# 
   729  0418                     	;# 
   730  0419                     	;# 
   731  041A                     	;# 
   732  041B                     	;# 
   733  041C                     	;# 
   734  041D                     	;# 
   735  041E                     	;# 
   736  048D                     	;# 
   737  0491                     	;# 
   738  0491                     	;# 
   739  0492                     	;# 
   740  0492                     	;# 
   741  0493                     	;# 
   742  0493                     	;# 
   743  0493                     	;# 
   744  0494                     	;# 
   745  0494                     	;# 
   746  0495                     	;# 
   747  0495                     	;# 
   748  0496                     	;# 
   749  0496                     	;# 
   750  0497                     	;# 
   751  0497                     	;# 
   752  0595                     	;# 
   753  0596                     	;# 
   754  0597                     	;# 
   755  059C                     	;# 
   756  059D                     	;# 
   757  059E                     	;# 
   758  0611                     	;# 
   759  0611                     	;# 
   760  0612                     	;# 
   761  0613                     	;# 
   762  0614                     	;# 
   763  0614                     	;# 
   764  0615                     	;# 
   765  0616                     	;# 
   766  0617                     	;# 
   767  0617                     	;# 
   768  0618                     	;# 
   769  0619                     	;# 
   770  061A                     	;# 
   771  061A                     	;# 
   772  061B                     	;# 
   773  061C                     	;# 
   774  061D                     	;# 
   775  061D                     	;# 
   776  061E                     	;# 
   777  061F                     	;# 
   778  0FE4                     	;# 
   779  0FE5                     	;# 
   780  0FE6                     	;# 
   781  0FE7                     	;# 
   782  0FE8                     	;# 
   783  0FE9                     	;# 
   784  0FEA                     	;# 
   785  0FEB                     	;# 
   786  0FED                     	;# 
   787  0FEE                     	;# 
   788  0FEF                     	;# 
   789  0000                     	;# 
   790  0001                     	;# 
   791  0002                     	;# 
   792  0003                     	;# 
   793  0004                     	;# 
   794  0005                     	;# 
   795  0006                     	;# 
   796  0007                     	;# 
   797  0008                     	;# 
   798  0009                     	;# 
   799  000A                     	;# 
   800  000B                     	;# 
   801  000C                     	;# 
   802  000D                     	;# 
   803  000E                     	;# 
   804  000F                     	;# 
   805  0010                     	;# 
   806  0011                     	;# 
   807  0012                     	;# 
   808  0013                     	;# 
   809  0014                     	;# 
   810  0015                     	;# 
   811  0016                     	;# 
   812  0016                     	;# 
   813  0017                     	;# 
   814  0018                     	;# 
   815  0019                     	;# 
   816  001A                     	;# 
   817  001B                     	;# 
   818  001C                     	;# 
   819  008C                     	;# 
   820  008D                     	;# 
   821  008E                     	;# 
   822  008F                     	;# 
   823  0090                     	;# 
   824  0091                     	;# 
   825  0092                     	;# 
   826  0093                     	;# 
   827  0094                     	;# 
   828  0095                     	;# 
   829  0096                     	;# 
   830  0097                     	;# 
   831  0099                     	;# 
   832  009A                     	;# 
   833  009B                     	;# 
   834  009B                     	;# 
   835  009C                     	;# 
   836  009D                     	;# 
   837  009E                     	;# 
   838  010C                     	;# 
   839  010D                     	;# 
   840  010E                     	;# 
   841  010F                     	;# 
   842  0110                     	;# 
   843  0116                     	;# 
   844  0117                     	;# 
   845  011D                     	;# 
   846  018C                     	;# 
   847  018D                     	;# 
   848  018F                     	;# 
   849  0190                     	;# 
   850  0191                     	;# 
   851  0191                     	;# 
   852  0192                     	;# 
   853  0193                     	;# 
   854  0193                     	;# 
   855  0194                     	;# 
   856  0195                     	;# 
   857  0196                     	;# 
   858  0197                     	;# 
   859  0199                     	;# 
   860  0199                     	;# 
   861  0199                     	;# 
   862  019A                     	;# 
   863  019A                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019C                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019D                     	;# 
   875  019D                     	;# 
   876  019E                     	;# 
   877  019E                     	;# 
   878  019E                     	;# 
   879  019F                     	;# 
   880  019F                     	;# 
   881  019F                     	;# 
   882  020D                     	;# 
   883  020F                     	;# 
   884  0210                     	;# 
   885  0211                     	;# 
   886  0211                     	;# 
   887  0212                     	;# 
   888  0212                     	;# 
   889  0213                     	;# 
   890  0213                     	;# 
   891  0214                     	;# 
   892  0214                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0216                     	;# 
   897  0216                     	;# 
   898  0217                     	;# 
   899  0217                     	;# 
   900  0219                     	;# 
   901  021A                     	;# 
   902  021B                     	;# 
   903  021C                     	;# 
   904  021D                     	;# 
   905  021E                     	;# 
   906  021F                     	;# 
   907  028C                     	;# 
   908  028D                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  029D                     	;# 
   918  029E                     	;# 
   919  029F                     	;# 
   920  030C                     	;# 
   921  030D                     	;# 
   922  0311                     	;# 
   923  0311                     	;# 
   924  0312                     	;# 
   925  0313                     	;# 
   926  0318                     	;# 
   927  0318                     	;# 
   928  0319                     	;# 
   929  031A                     	;# 
   930  031C                     	;# 
   931  031C                     	;# 
   932  031D                     	;# 
   933  031E                     	;# 
   934  038C                     	;# 
   935  038D                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  040C                     	;# 
   940  040D                     	;# 
   941  0411                     	;# 
   942  0411                     	;# 
   943  0412                     	;# 
   944  0413                     	;# 
   945  0414                     	;# 
   946  0415                     	;# 
   947  0416                     	;# 
   948  0417                     	;# 
   949  0418                     	;# 
   950  0418                     	;# 
   951  0419                     	;# 
   952  041A                     	;# 
   953  041B                     	;# 
   954  041C                     	;# 
   955  041D                     	;# 
   956  041E                     	;# 
   957  048D                     	;# 
   958  0491                     	;# 
   959  0491                     	;# 
   960  0492                     	;# 
   961  0492                     	;# 
   962  0493                     	;# 
   963  0493                     	;# 
   964  0493                     	;# 
   965  0494                     	;# 
   966  0494                     	;# 
   967  0495                     	;# 
   968  0495                     	;# 
   969  0496                     	;# 
   970  0496                     	;# 
   971  0497                     	;# 
   972  0497                     	;# 
   973  0595                     	;# 
   974  0596                     	;# 
   975  0597                     	;# 
   976  059C                     	;# 
   977  059D                     	;# 
   978  059E                     	;# 
   979  0611                     	;# 
   980  0611                     	;# 
   981  0612                     	;# 
   982  0613                     	;# 
   983  0614                     	;# 
   984  0614                     	;# 
   985  0615                     	;# 
   986  0616                     	;# 
   987  0617                     	;# 
   988  0617                     	;# 
   989  0618                     	;# 
   990  0619                     	;# 
   991  061A                     	;# 
   992  061A                     	;# 
   993  061B                     	;# 
   994  061C                     	;# 
   995  061D                     	;# 
   996  061D                     	;# 
   997  061E                     	;# 
   998  061F                     	;# 
   999  0FE4                     	;# 
  1000  0FE5                     	;# 
  1001  0FE6                     	;# 
  1002  0FE7                     	;# 
  1003  0FE8                     	;# 
  1004  0FE9                     	;# 
  1005  0FEA                     	;# 
  1006  0FEB                     	;# 
  1007  0FED                     	;# 
  1008  0FEE                     	;# 
  1009  0FEF                     	;# 
  1010  0000                     	;# 
  1011  0001                     	;# 
  1012  0002                     	;# 
  1013  0003                     	;# 
  1014  0004                     	;# 
  1015  0005                     	;# 
  1016  0006                     	;# 
  1017  0007                     	;# 
  1018  0008                     	;# 
  1019  0009                     	;# 
  1020  000A                     	;# 
  1021  000B                     	;# 
  1022  000C                     	;# 
  1023  000D                     	;# 
  1024  000E                     	;# 
  1025  000F                     	;# 
  1026  0010                     	;# 
  1027  0011                     	;# 
  1028  0012                     	;# 
  1029  0013                     	;# 
  1030  0014                     	;# 
  1031  0015                     	;# 
  1032  0016                     	;# 
  1033  0016                     	;# 
  1034  0017                     	;# 
  1035  0018                     	;# 
  1036  0019                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001C                     	;# 
  1040  008C                     	;# 
  1041  008D                     	;# 
  1042  008E                     	;# 
  1043  008F                     	;# 
  1044  0090                     	;# 
  1045  0091                     	;# 
  1046  0092                     	;# 
  1047  0093                     	;# 
  1048  0094                     	;# 
  1049  0095                     	;# 
  1050  0096                     	;# 
  1051  0097                     	;# 
  1052  0099                     	;# 
  1053  009A                     	;# 
  1054  009B                     	;# 
  1055  009B                     	;# 
  1056  009C                     	;# 
  1057  009D                     	;# 
  1058  009E                     	;# 
  1059  010C                     	;# 
  1060  010D                     	;# 
  1061  010E                     	;# 
  1062  010F                     	;# 
  1063  0110                     	;# 
  1064  0116                     	;# 
  1065  0117                     	;# 
  1066  011D                     	;# 
  1067  018C                     	;# 
  1068  018D                     	;# 
  1069  018F                     	;# 
  1070  0190                     	;# 
  1071  0191                     	;# 
  1072  0191                     	;# 
  1073  0192                     	;# 
  1074  0193                     	;# 
  1075  0193                     	;# 
  1076  0194                     	;# 
  1077  0195                     	;# 
  1078  0196                     	;# 
  1079  0197                     	;# 
  1080  0199                     	;# 
  1081  0199                     	;# 
  1082  0199                     	;# 
  1083  019A                     	;# 
  1084  019A                     	;# 
  1085  019A                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019C                     	;# 
  1092  019C                     	;# 
  1093  019C                     	;# 
  1094  019D                     	;# 
  1095  019D                     	;# 
  1096  019D                     	;# 
  1097  019E                     	;# 
  1098  019E                     	;# 
  1099  019E                     	;# 
  1100  019F                     	;# 
  1101  019F                     	;# 
  1102  019F                     	;# 
  1103  020D                     	;# 
  1104  020F                     	;# 
  1105  0210                     	;# 
  1106  0211                     	;# 
  1107  0211                     	;# 
  1108  0212                     	;# 
  1109  0212                     	;# 
  1110  0213                     	;# 
  1111  0213                     	;# 
  1112  0214                     	;# 
  1113  0214                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0216                     	;# 
  1118  0216                     	;# 
  1119  0217                     	;# 
  1120  0217                     	;# 
  1121  0219                     	;# 
  1122  021A                     	;# 
  1123  021B                     	;# 
  1124  021C                     	;# 
  1125  021D                     	;# 
  1126  021E                     	;# 
  1127  021F                     	;# 
  1128  028C                     	;# 
  1129  028D                     	;# 
  1130  0291                     	;# 
  1131  0291                     	;# 
  1132  0292                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  029D                     	;# 
  1139  029E                     	;# 
  1140  029F                     	;# 
  1141  030C                     	;# 
  1142  030D                     	;# 
  1143  0311                     	;# 
  1144  0311                     	;# 
  1145  0312                     	;# 
  1146  0313                     	;# 
  1147  0318                     	;# 
  1148  0318                     	;# 
  1149  0319                     	;# 
  1150  031A                     	;# 
  1151  031C                     	;# 
  1152  031C                     	;# 
  1153  031D                     	;# 
  1154  031E                     	;# 
  1155  038C                     	;# 
  1156  038D                     	;# 
  1157  0394                     	;# 
  1158  0395                     	;# 
  1159  0396                     	;# 
  1160  040C                     	;# 
  1161  040D                     	;# 
  1162  0411                     	;# 
  1163  0411                     	;# 
  1164  0412                     	;# 
  1165  0413                     	;# 
  1166  0414                     	;# 
  1167  0415                     	;# 
  1168  0416                     	;# 
  1169  0417                     	;# 
  1170  0418                     	;# 
  1171  0418                     	;# 
  1172  0419                     	;# 
  1173  041A                     	;# 
  1174  041B                     	;# 
  1175  041C                     	;# 
  1176  041D                     	;# 
  1177  041E                     	;# 
  1178  048D                     	;# 
  1179  0491                     	;# 
  1180  0491                     	;# 
  1181  0492                     	;# 
  1182  0492                     	;# 
  1183  0493                     	;# 
  1184  0493                     	;# 
  1185  0493                     	;# 
  1186  0494                     	;# 
  1187  0494                     	;# 
  1188  0495                     	;# 
  1189  0495                     	;# 
  1190  0496                     	;# 
  1191  0496                     	;# 
  1192  0497                     	;# 
  1193  0497                     	;# 
  1194  0595                     	;# 
  1195  0596                     	;# 
  1196  0597                     	;# 
  1197  059C                     	;# 
  1198  059D                     	;# 
  1199  059E                     	;# 
  1200  0611                     	;# 
  1201  0611                     	;# 
  1202  0612                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0614                     	;# 
  1206  0615                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0617                     	;# 
  1210  0618                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061A                     	;# 
  1214  061B                     	;# 
  1215  061C                     	;# 
  1216  061D                     	;# 
  1217  061D                     	;# 
  1218  061E                     	;# 
  1219  061F                     	;# 
  1220  0FE4                     	;# 
  1221  0FE5                     	;# 
  1222  0FE6                     	;# 
  1223  0FE7                     	;# 
  1224  0FE8                     	;# 
  1225  0FE9                     	;# 
  1226  0FEA                     	;# 
  1227  0FEB                     	;# 
  1228  0FED                     	;# 
  1229  0FEE                     	;# 
  1230  0FEF                     	;# 
  1231  0000                     	;# 
  1232  0001                     	;# 
  1233  0002                     	;# 
  1234  0003                     	;# 
  1235  0004                     	;# 
  1236  0005                     	;# 
  1237  0006                     	;# 
  1238  0007                     	;# 
  1239  0008                     	;# 
  1240  0009                     	;# 
  1241  000A                     	;# 
  1242  000B                     	;# 
  1243  000C                     	;# 
  1244  000D                     	;# 
  1245  000E                     	;# 
  1246  000F                     	;# 
  1247  0010                     	;# 
  1248  0011                     	;# 
  1249  0012                     	;# 
  1250  0013                     	;# 
  1251  0014                     	;# 
  1252  0015                     	;# 
  1253  0016                     	;# 
  1254  0016                     	;# 
  1255  0017                     	;# 
  1256  0018                     	;# 
  1257  0019                     	;# 
  1258  001A                     	;# 
  1259  001B                     	;# 
  1260  001C                     	;# 
  1261  008C                     	;# 
  1262  008D                     	;# 
  1263  008E                     	;# 
  1264  008F                     	;# 
  1265  0090                     	;# 
  1266  0091                     	;# 
  1267  0092                     	;# 
  1268  0093                     	;# 
  1269  0094                     	;# 
  1270  0095                     	;# 
  1271  0096                     	;# 
  1272  0097                     	;# 
  1273  0099                     	;# 
  1274  009A                     	;# 
  1275  009B                     	;# 
  1276  009B                     	;# 
  1277  009C                     	;# 
  1278  009D                     	;# 
  1279  009E                     	;# 
  1280  010C                     	;# 
  1281  010D                     	;# 
  1282  010E                     	;# 
  1283  010F                     	;# 
  1284  0110                     	;# 
  1285  0116                     	;# 
  1286  0117                     	;# 
  1287  011D                     	;# 
  1288  018C                     	;# 
  1289  018D                     	;# 
  1290  018F                     	;# 
  1291  0190                     	;# 
  1292  0191                     	;# 
  1293  0191                     	;# 
  1294  0192                     	;# 
  1295  0193                     	;# 
  1296  0193                     	;# 
  1297  0194                     	;# 
  1298  0195                     	;# 
  1299  0196                     	;# 
  1300  0197                     	;# 
  1301  0199                     	;# 
  1302  0199                     	;# 
  1303  0199                     	;# 
  1304  019A                     	;# 
  1305  019A                     	;# 
  1306  019A                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019C                     	;# 
  1313  019C                     	;# 
  1314  019C                     	;# 
  1315  019D                     	;# 
  1316  019D                     	;# 
  1317  019D                     	;# 
  1318  019E                     	;# 
  1319  019E                     	;# 
  1320  019E                     	;# 
  1321  019F                     	;# 
  1322  019F                     	;# 
  1323  019F                     	;# 
  1324  020D                     	;# 
  1325  020F                     	;# 
  1326  0210                     	;# 
  1327  0211                     	;# 
  1328  0211                     	;# 
  1329  0212                     	;# 
  1330  0212                     	;# 
  1331  0213                     	;# 
  1332  0213                     	;# 
  1333  0214                     	;# 
  1334  0214                     	;# 
  1335  0215                     	;# 
  1336  0215                     	;# 
  1337  0215                     	;# 
  1338  0216                     	;# 
  1339  0216                     	;# 
  1340  0217                     	;# 
  1341  0217                     	;# 
  1342  0219                     	;# 
  1343  021A                     	;# 
  1344  021B                     	;# 
  1345  021C                     	;# 
  1346  021D                     	;# 
  1347  021E                     	;# 
  1348  021F                     	;# 
  1349  028C                     	;# 
  1350  028D                     	;# 
  1351  0291                     	;# 
  1352  0291                     	;# 
  1353  0292                     	;# 
  1354  0293                     	;# 
  1355  0298                     	;# 
  1356  0298                     	;# 
  1357  0299                     	;# 
  1358  029A                     	;# 
  1359  029D                     	;# 
  1360  029E                     	;# 
  1361  029F                     	;# 
  1362  030C                     	;# 
  1363  030D                     	;# 
  1364  0311                     	;# 
  1365  0311                     	;# 
  1366  0312                     	;# 
  1367  0313                     	;# 
  1368  0318                     	;# 
  1369  0318                     	;# 
  1370  0319                     	;# 
  1371  031A                     	;# 
  1372  031C                     	;# 
  1373  031C                     	;# 
  1374  031D                     	;# 
  1375  031E                     	;# 
  1376  038C                     	;# 
  1377  038D                     	;# 
  1378  0394                     	;# 
  1379  0395                     	;# 
  1380  0396                     	;# 
  1381  040C                     	;# 
  1382  040D                     	;# 
  1383  0411                     	;# 
  1384  0411                     	;# 
  1385  0412                     	;# 
  1386  0413                     	;# 
  1387  0414                     	;# 
  1388  0415                     	;# 
  1389  0416                     	;# 
  1390  0417                     	;# 
  1391  0418                     	;# 
  1392  0418                     	;# 
  1393  0419                     	;# 
  1394  041A                     	;# 
  1395  041B                     	;# 
  1396  041C                     	;# 
  1397  041D                     	;# 
  1398  041E                     	;# 
  1399  048D                     	;# 
  1400  0491                     	;# 
  1401  0491                     	;# 
  1402  0492                     	;# 
  1403  0492                     	;# 
  1404  0493                     	;# 
  1405  0493                     	;# 
  1406  0493                     	;# 
  1407  0494                     	;# 
  1408  0494                     	;# 
  1409  0495                     	;# 
  1410  0495                     	;# 
  1411  0496                     	;# 
  1412  0496                     	;# 
  1413  0497                     	;# 
  1414  0497                     	;# 
  1415  0595                     	;# 
  1416  0596                     	;# 
  1417  0597                     	;# 
  1418  059C                     	;# 
  1419  059D                     	;# 
  1420  059E                     	;# 
  1421  0611                     	;# 
  1422  0611                     	;# 
  1423  0612                     	;# 
  1424  0613                     	;# 
  1425  0614                     	;# 
  1426  0614                     	;# 
  1427  0615                     	;# 
  1428  0616                     	;# 
  1429  0617                     	;# 
  1430  0617                     	;# 
  1431  0618                     	;# 
  1432  0619                     	;# 
  1433  061A                     	;# 
  1434  061A                     	;# 
  1435  061B                     	;# 
  1436  061C                     	;# 
  1437  061D                     	;# 
  1438  061D                     	;# 
  1439  061E                     	;# 
  1440  061F                     	;# 
  1441  0FE4                     	;# 
  1442  0FE5                     	;# 
  1443  0FE6                     	;# 
  1444  0FE7                     	;# 
  1445  0FE8                     	;# 
  1446  0FE9                     	;# 
  1447  0FEA                     	;# 
  1448  0FEB                     	;# 
  1449  0FED                     	;# 
  1450  0FEE                     	;# 
  1451  0FEF                     	;# 
  1452  0000                     	;# 
  1453  0001                     	;# 
  1454  0002                     	;# 
  1455  0003                     	;# 
  1456  0004                     	;# 
  1457  0005                     	;# 
  1458  0006                     	;# 
  1459  0007                     	;# 
  1460  0008                     	;# 
  1461  0009                     	;# 
  1462  000A                     	;# 
  1463  000B                     	;# 
  1464  000C                     	;# 
  1465  000D                     	;# 
  1466  000E                     	;# 
  1467  000F                     	;# 
  1468  0010                     	;# 
  1469  0011                     	;# 
  1470  0012                     	;# 
  1471  0013                     	;# 
  1472  0014                     	;# 
  1473  0015                     	;# 
  1474  0016                     	;# 
  1475  0016                     	;# 
  1476  0017                     	;# 
  1477  0018                     	;# 
  1478  0019                     	;# 
  1479  001A                     	;# 
  1480  001B                     	;# 
  1481  001C                     	;# 
  1482  008C                     	;# 
  1483  008D                     	;# 
  1484  008E                     	;# 
  1485  008F                     	;# 
  1486  0090                     	;# 
  1487  0091                     	;# 
  1488  0092                     	;# 
  1489  0093                     	;# 
  1490  0094                     	;# 
  1491  0095                     	;# 
  1492  0096                     	;# 
  1493  0097                     	;# 
  1494  0099                     	;# 
  1495  009A                     	;# 
  1496  009B                     	;# 
  1497  009B                     	;# 
  1498  009C                     	;# 
  1499  009D                     	;# 
  1500  009E                     	;# 
  1501  010C                     	;# 
  1502  010D                     	;# 
  1503  010E                     	;# 
  1504  010F                     	;# 
  1505  0110                     	;# 
  1506  0116                     	;# 
  1507  0117                     	;# 
  1508  011D                     	;# 
  1509  018C                     	;# 
  1510  018D                     	;# 
  1511  018F                     	;# 
  1512  0190                     	;# 
  1513  0191                     	;# 
  1514  0191                     	;# 
  1515  0192                     	;# 
  1516  0193                     	;# 
  1517  0193                     	;# 
  1518  0194                     	;# 
  1519  0195                     	;# 
  1520  0196                     	;# 
  1521  0197                     	;# 
  1522  0199                     	;# 
  1523  0199                     	;# 
  1524  0199                     	;# 
  1525  019A                     	;# 
  1526  019A                     	;# 
  1527  019A                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019C                     	;# 
  1534  019C                     	;# 
  1535  019C                     	;# 
  1536  019D                     	;# 
  1537  019D                     	;# 
  1538  019D                     	;# 
  1539  019E                     	;# 
  1540  019E                     	;# 
  1541  019E                     	;# 
  1542  019F                     	;# 
  1543  019F                     	;# 
  1544  019F                     	;# 
  1545  020D                     	;# 
  1546  020F                     	;# 
  1547  0210                     	;# 
  1548  0211                     	;# 
  1549  0211                     	;# 
  1550  0212                     	;# 
  1551  0212                     	;# 
  1552  0213                     	;# 
  1553  0213                     	;# 
  1554  0214                     	;# 
  1555  0214                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0215                     	;# 
  1559  0216                     	;# 
  1560  0216                     	;# 
  1561  0217                     	;# 
  1562  0217                     	;# 
  1563  0219                     	;# 
  1564  021A                     	;# 
  1565  021B                     	;# 
  1566  021C                     	;# 
  1567  021D                     	;# 
  1568  021E                     	;# 
  1569  021F                     	;# 
  1570  028C                     	;# 
  1571  028D                     	;# 
  1572  0291                     	;# 
  1573  0291                     	;# 
  1574  0292                     	;# 
  1575  0293                     	;# 
  1576  0298                     	;# 
  1577  0298                     	;# 
  1578  0299                     	;# 
  1579  029A                     	;# 
  1580  029D                     	;# 
  1581  029E                     	;# 
  1582  029F                     	;# 
  1583  030C                     	;# 
  1584  030D                     	;# 
  1585  0311                     	;# 
  1586  0311                     	;# 
  1587  0312                     	;# 
  1588  0313                     	;# 
  1589  0318                     	;# 
  1590  0318                     	;# 
  1591  0319                     	;# 
  1592  031A                     	;# 
  1593  031C                     	;# 
  1594  031C                     	;# 
  1595  031D                     	;# 
  1596  031E                     	;# 
  1597  038C                     	;# 
  1598  038D                     	;# 
  1599  0394                     	;# 
  1600  0395                     	;# 
  1601  0396                     	;# 
  1602  040C                     	;# 
  1603  040D                     	;# 
  1604  0411                     	;# 
  1605  0411                     	;# 
  1606  0412                     	;# 
  1607  0413                     	;# 
  1608  0414                     	;# 
  1609  0415                     	;# 
  1610  0416                     	;# 
  1611  0417                     	;# 
  1612  0418                     	;# 
  1613  0418                     	;# 
  1614  0419                     	;# 
  1615  041A                     	;# 
  1616  041B                     	;# 
  1617  041C                     	;# 
  1618  041D                     	;# 
  1619  041E                     	;# 
  1620  048D                     	;# 
  1621  0491                     	;# 
  1622  0491                     	;# 
  1623  0492                     	;# 
  1624  0492                     	;# 
  1625  0493                     	;# 
  1626  0493                     	;# 
  1627  0493                     	;# 
  1628  0494                     	;# 
  1629  0494                     	;# 
  1630  0495                     	;# 
  1631  0495                     	;# 
  1632  0496                     	;# 
  1633  0496                     	;# 
  1634  0497                     	;# 
  1635  0497                     	;# 
  1636  0595                     	;# 
  1637  0596                     	;# 
  1638  0597                     	;# 
  1639  059C                     	;# 
  1640  059D                     	;# 
  1641  059E                     	;# 
  1642  0611                     	;# 
  1643  0611                     	;# 
  1644  0612                     	;# 
  1645  0613                     	;# 
  1646  0614                     	;# 
  1647  0614                     	;# 
  1648  0615                     	;# 
  1649  0616                     	;# 
  1650  0617                     	;# 
  1651  0617                     	;# 
  1652  0618                     	;# 
  1653  0619                     	;# 
  1654  061A                     	;# 
  1655  061A                     	;# 
  1656  061B                     	;# 
  1657  061C                     	;# 
  1658  061D                     	;# 
  1659  061D                     	;# 
  1660  061E                     	;# 
  1661  061F                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673  0000                     	;# 
  1674  0001                     	;# 
  1675  0002                     	;# 
  1676  0003                     	;# 
  1677  0004                     	;# 
  1678  0005                     	;# 
  1679  0006                     	;# 
  1680  0007                     	;# 
  1681  0008                     	;# 
  1682  0009                     	;# 
  1683  000A                     	;# 
  1684  000B                     	;# 
  1685  000C                     	;# 
  1686  000D                     	;# 
  1687  000E                     	;# 
  1688  000F                     	;# 
  1689  0010                     	;# 
  1690  0011                     	;# 
  1691  0012                     	;# 
  1692  0013                     	;# 
  1693  0014                     	;# 
  1694  0015                     	;# 
  1695  0016                     	;# 
  1696  0016                     	;# 
  1697  0017                     	;# 
  1698  0018                     	;# 
  1699  0019                     	;# 
  1700  001A                     	;# 
  1701  001B                     	;# 
  1702  001C                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  008F                     	;# 
  1707  0090                     	;# 
  1708  0091                     	;# 
  1709  0092                     	;# 
  1710  0093                     	;# 
  1711  0094                     	;# 
  1712  0095                     	;# 
  1713  0096                     	;# 
  1714  0097                     	;# 
  1715  0099                     	;# 
  1716  009A                     	;# 
  1717  009B                     	;# 
  1718  009B                     	;# 
  1719  009C                     	;# 
  1720  009D                     	;# 
  1721  009E                     	;# 
  1722  010C                     	;# 
  1723  010D                     	;# 
  1724  010E                     	;# 
  1725  010F                     	;# 
  1726  0110                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  011D                     	;# 
  1730  018C                     	;# 
  1731  018D                     	;# 
  1732  018F                     	;# 
  1733  0190                     	;# 
  1734  0191                     	;# 
  1735  0191                     	;# 
  1736  0192                     	;# 
  1737  0193                     	;# 
  1738  0193                     	;# 
  1739  0194                     	;# 
  1740  0195                     	;# 
  1741  0196                     	;# 
  1742  0197                     	;# 
  1743  0199                     	;# 
  1744  0199                     	;# 
  1745  0199                     	;# 
  1746  019A                     	;# 
  1747  019A                     	;# 
  1748  019A                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019B                     	;# 
  1752  019B                     	;# 
  1753  019B                     	;# 
  1754  019C                     	;# 
  1755  019C                     	;# 
  1756  019C                     	;# 
  1757  019D                     	;# 
  1758  019D                     	;# 
  1759  019D                     	;# 
  1760  019E                     	;# 
  1761  019E                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  019F                     	;# 
  1765  019F                     	;# 
  1766  020D                     	;# 
  1767  020F                     	;# 
  1768  0210                     	;# 
  1769  0211                     	;# 
  1770  0211                     	;# 
  1771  0212                     	;# 
  1772  0212                     	;# 
  1773  0213                     	;# 
  1774  0213                     	;# 
  1775  0214                     	;# 
  1776  0214                     	;# 
  1777  0215                     	;# 
  1778  0215                     	;# 
  1779  0215                     	;# 
  1780  0216                     	;# 
  1781  0216                     	;# 
  1782  0217                     	;# 
  1783  0217                     	;# 
  1784  0219                     	;# 
  1785  021A                     	;# 
  1786  021B                     	;# 
  1787  021C                     	;# 
  1788  021D                     	;# 
  1789  021E                     	;# 
  1790  021F                     	;# 
  1791  028C                     	;# 
  1792  028D                     	;# 
  1793  0291                     	;# 
  1794  0291                     	;# 
  1795  0292                     	;# 
  1796  0293                     	;# 
  1797  0298                     	;# 
  1798  0298                     	;# 
  1799  0299                     	;# 
  1800  029A                     	;# 
  1801  029D                     	;# 
  1802  029E                     	;# 
  1803  029F                     	;# 
  1804  030C                     	;# 
  1805  030D                     	;# 
  1806  0311                     	;# 
  1807  0311                     	;# 
  1808  0312                     	;# 
  1809  0313                     	;# 
  1810  0318                     	;# 
  1811  0318                     	;# 
  1812  0319                     	;# 
  1813  031A                     	;# 
  1814  031C                     	;# 
  1815  031C                     	;# 
  1816  031D                     	;# 
  1817  031E                     	;# 
  1818  038C                     	;# 
  1819  038D                     	;# 
  1820  0394                     	;# 
  1821  0395                     	;# 
  1822  0396                     	;# 
  1823  040C                     	;# 
  1824  040D                     	;# 
  1825  0411                     	;# 
  1826  0411                     	;# 
  1827  0412                     	;# 
  1828  0413                     	;# 
  1829  0414                     	;# 
  1830  0415                     	;# 
  1831  0416                     	;# 
  1832  0417                     	;# 
  1833  0418                     	;# 
  1834  0418                     	;# 
  1835  0419                     	;# 
  1836  041A                     	;# 
  1837  041B                     	;# 
  1838  041C                     	;# 
  1839  041D                     	;# 
  1840  041E                     	;# 
  1841  048D                     	;# 
  1842  0491                     	;# 
  1843  0491                     	;# 
  1844  0492                     	;# 
  1845  0492                     	;# 
  1846  0493                     	;# 
  1847  0493                     	;# 
  1848  0493                     	;# 
  1849  0494                     	;# 
  1850  0494                     	;# 
  1851  0495                     	;# 
  1852  0495                     	;# 
  1853  0496                     	;# 
  1854  0496                     	;# 
  1855  0497                     	;# 
  1856  0497                     	;# 
  1857  0595                     	;# 
  1858  0596                     	;# 
  1859  0597                     	;# 
  1860  059C                     	;# 
  1861  059D                     	;# 
  1862  059E                     	;# 
  1863  0611                     	;# 
  1864  0611                     	;# 
  1865  0612                     	;# 
  1866  0613                     	;# 
  1867  0614                     	;# 
  1868  0614                     	;# 
  1869  0615                     	;# 
  1870  0616                     	;# 
  1871  0617                     	;# 
  1872  0617                     	;# 
  1873  0618                     	;# 
  1874  0619                     	;# 
  1875  061A                     	;# 
  1876  061A                     	;# 
  1877  061B                     	;# 
  1878  061C                     	;# 
  1879  061D                     	;# 
  1880  061D                     	;# 
  1881  061E                     	;# 
  1882  061F                     	;# 
  1883  0FE4                     	;# 
  1884  0FE5                     	;# 
  1885  0FE6                     	;# 
  1886  0FE7                     	;# 
  1887  0FE8                     	;# 
  1888  0FE9                     	;# 
  1889  0FEA                     	;# 
  1890  0FEB                     	;# 
  1891  0FED                     	;# 
  1892  0FEE                     	;# 
  1893  0FEF                     	;# 
  1894  0000                     	;# 
  1895  0001                     	;# 
  1896  0002                     	;# 
  1897  0003                     	;# 
  1898  0004                     	;# 
  1899  0005                     	;# 
  1900  0006                     	;# 
  1901  0007                     	;# 
  1902  0008                     	;# 
  1903  0009                     	;# 
  1904  000A                     	;# 
  1905  000B                     	;# 
  1906  000C                     	;# 
  1907  000D                     	;# 
  1908  000E                     	;# 
  1909  000F                     	;# 
  1910  0010                     	;# 
  1911  0011                     	;# 
  1912  0012                     	;# 
  1913  0013                     	;# 
  1914  0014                     	;# 
  1915  0015                     	;# 
  1916  0016                     	;# 
  1917  0016                     	;# 
  1918  0017                     	;# 
  1919  0018                     	;# 
  1920  0019                     	;# 
  1921  001A                     	;# 
  1922  001B                     	;# 
  1923  001C                     	;# 
  1924  008C                     	;# 
  1925  008D                     	;# 
  1926  008E                     	;# 
  1927  008F                     	;# 
  1928  0090                     	;# 
  1929  0091                     	;# 
  1930  0092                     	;# 
  1931  0093                     	;# 
  1932  0094                     	;# 
  1933  0095                     	;# 
  1934  0096                     	;# 
  1935  0097                     	;# 
  1936  0099                     	;# 
  1937  009A                     	;# 
  1938  009B                     	;# 
  1939  009B                     	;# 
  1940  009C                     	;# 
  1941  009D                     	;# 
  1942  009E                     	;# 
  1943  010C                     	;# 
  1944  010D                     	;# 
  1945  010E                     	;# 
  1946  010F                     	;# 
  1947  0110                     	;# 
  1948  0116                     	;# 
  1949  0117                     	;# 
  1950  011D                     	;# 
  1951  018C                     	;# 
  1952  018D                     	;# 
  1953  018F                     	;# 
  1954  0190                     	;# 
  1955  0191                     	;# 
  1956  0191                     	;# 
  1957  0192                     	;# 
  1958  0193                     	;# 
  1959  0193                     	;# 
  1960  0194                     	;# 
  1961  0195                     	;# 
  1962  0196                     	;# 
  1963  0197                     	;# 
  1964  0199                     	;# 
  1965  0199                     	;# 
  1966  0199                     	;# 
  1967  019A                     	;# 
  1968  019A                     	;# 
  1969  019A                     	;# 
  1970  019B                     	;# 
  1971  019B                     	;# 
  1972  019B                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019C                     	;# 
  1976  019C                     	;# 
  1977  019C                     	;# 
  1978  019D                     	;# 
  1979  019D                     	;# 
  1980  019D                     	;# 
  1981  019E                     	;# 
  1982  019E                     	;# 
  1983  019E                     	;# 
  1984  019F                     	;# 
  1985  019F                     	;# 
  1986  019F                     	;# 
  1987  020D                     	;# 
  1988  020F                     	;# 
  1989  0210                     	;# 
  1990  0211                     	;# 
  1991  0211                     	;# 
  1992  0212                     	;# 
  1993  0212                     	;# 
  1994  0213                     	;# 
  1995  0213                     	;# 
  1996  0214                     	;# 
  1997  0214                     	;# 
  1998  0215                     	;# 
  1999  0215                     	;# 
  2000  0215                     	;# 
  2001  0216                     	;# 
  2002  0216                     	;# 
  2003  0217                     	;# 
  2004  0217                     	;# 
  2005  0219                     	;# 
  2006  021A                     	;# 
  2007  021B                     	;# 
  2008  021C                     	;# 
  2009  021D                     	;# 
  2010  021E                     	;# 
  2011  021F                     	;# 
  2012  028C                     	;# 
  2013  028D                     	;# 
  2014  0291                     	;# 
  2015  0291                     	;# 
  2016  0292                     	;# 
  2017  0293                     	;# 
  2018  0298                     	;# 
  2019  0298                     	;# 
  2020  0299                     	;# 
  2021  029A                     	;# 
  2022  029D                     	;# 
  2023  029E                     	;# 
  2024  029F                     	;# 
  2025  030C                     	;# 
  2026  030D                     	;# 
  2027  0311                     	;# 
  2028  0311                     	;# 
  2029  0312                     	;# 
  2030  0313                     	;# 
  2031  0318                     	;# 
  2032  0318                     	;# 
  2033  0319                     	;# 
  2034  031A                     	;# 
  2035  031C                     	;# 
  2036  031C                     	;# 
  2037  031D                     	;# 
  2038  031E                     	;# 
  2039  038C                     	;# 
  2040  038D                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  040C                     	;# 
  2045  040D                     	;# 
  2046  0411                     	;# 
  2047  0411                     	;# 
  2048  0412                     	;# 
  2049  0413                     	;# 
  2050  0414                     	;# 
  2051  0415                     	;# 
  2052  0416                     	;# 
  2053  0417                     	;# 
  2054  0418                     	;# 
  2055  0418                     	;# 
  2056  0419                     	;# 
  2057  041A                     	;# 
  2058  041B                     	;# 
  2059  041C                     	;# 
  2060  041D                     	;# 
  2061  041E                     	;# 
  2062  048D                     	;# 
  2063  0491                     	;# 
  2064  0491                     	;# 
  2065  0492                     	;# 
  2066  0492                     	;# 
  2067  0493                     	;# 
  2068  0493                     	;# 
  2069  0493                     	;# 
  2070  0494                     	;# 
  2071  0494                     	;# 
  2072  0495                     	;# 
  2073  0495                     	;# 
  2074  0496                     	;# 
  2075  0496                     	;# 
  2076  0497                     	;# 
  2077  0497                     	;# 
  2078  0595                     	;# 
  2079  0596                     	;# 
  2080  0597                     	;# 
  2081  059C                     	;# 
  2082  059D                     	;# 
  2083  059E                     	;# 
  2084  0611                     	;# 
  2085  0611                     	;# 
  2086  0612                     	;# 
  2087  0613                     	;# 
  2088  0614                     	;# 
  2089  0614                     	;# 
  2090  0615                     	;# 
  2091  0616                     	;# 
  2092  0617                     	;# 
  2093  0617                     	;# 
  2094  0618                     	;# 
  2095  0619                     	;# 
  2096  061A                     	;# 
  2097  061A                     	;# 
  2098  061B                     	;# 
  2099  061C                     	;# 
  2100  061D                     	;# 
  2101  061D                     	;# 
  2102  061E                     	;# 
  2103  061F                     	;# 
  2104  0FE4                     	;# 
  2105  0FE5                     	;# 
  2106  0FE6                     	;# 
  2107  0FE7                     	;# 
  2108  0FE8                     	;# 
  2109  0FE9                     	;# 
  2110  0FEA                     	;# 
  2111  0FEB                     	;# 
  2112  0FED                     	;# 
  2113  0FEE                     	;# 
  2114  0FEF                     	;# 
  2115  0000                     	;# 
  2116  0001                     	;# 
  2117  0002                     	;# 
  2118  0003                     	;# 
  2119  0004                     	;# 
  2120  0005                     	;# 
  2121  0006                     	;# 
  2122  0007                     	;# 
  2123  0008                     	;# 
  2124  0009                     	;# 
  2125  000A                     	;# 
  2126  000B                     	;# 
  2127  000C                     	;# 
  2128  000D                     	;# 
  2129  000E                     	;# 
  2130  000F                     	;# 
  2131  0010                     	;# 
  2132  0011                     	;# 
  2133  0012                     	;# 
  2134  0013                     	;# 
  2135  0014                     	;# 
  2136  0015                     	;# 
  2137  0016                     	;# 
  2138  0016                     	;# 
  2139  0017                     	;# 
  2140  0018                     	;# 
  2141  0019                     	;# 
  2142  001A                     	;# 
  2143  001B                     	;# 
  2144  001C                     	;# 
  2145  008C                     	;# 
  2146  008D                     	;# 
  2147  008E                     	;# 
  2148  008F                     	;# 
  2149  0090                     	;# 
  2150  0091                     	;# 
  2151  0092                     	;# 
  2152  0093                     	;# 
  2153  0094                     	;# 
  2154  0095                     	;# 
  2155  0096                     	;# 
  2156  0097                     	;# 
  2157  0099                     	;# 
  2158  009A                     	;# 
  2159  009B                     	;# 
  2160  009B                     	;# 
  2161  009C                     	;# 
  2162  009D                     	;# 
  2163  009E                     	;# 
  2164  010C                     	;# 
  2165  010D                     	;# 
  2166  010E                     	;# 
  2167  010F                     	;# 
  2168  0110                     	;# 
  2169  0116                     	;# 
  2170  0117                     	;# 
  2171  011D                     	;# 
  2172  018C                     	;# 
  2173  018D                     	;# 
  2174  018F                     	;# 
  2175  0190                     	;# 
  2176  0191                     	;# 
  2177  0191                     	;# 
  2178  0192                     	;# 
  2179  0193                     	;# 
  2180  0193                     	;# 
  2181  0194                     	;# 
  2182  0195                     	;# 
  2183  0196                     	;# 
  2184  0197                     	;# 
  2185  0199                     	;# 
  2186  0199                     	;# 
  2187  0199                     	;# 
  2188  019A                     	;# 
  2189  019A                     	;# 
  2190  019A                     	;# 
  2191  019B                     	;# 
  2192  019B                     	;# 
  2193  019B                     	;# 
  2194  019B                     	;# 
  2195  019B                     	;# 
  2196  019C                     	;# 
  2197  019C                     	;# 
  2198  019C                     	;# 
  2199  019D                     	;# 
  2200  019D                     	;# 
  2201  019D                     	;# 
  2202  019E                     	;# 
  2203  019E                     	;# 
  2204  019E                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  019F                     	;# 
  2208  020D                     	;# 
  2209  020F                     	;# 
  2210  0210                     	;# 
  2211  0211                     	;# 
  2212  0211                     	;# 
  2213  0212                     	;# 
  2214  0212                     	;# 
  2215  0213                     	;# 
  2216  0213                     	;# 
  2217  0214                     	;# 
  2218  0214                     	;# 
  2219  0215                     	;# 
  2220  0215                     	;# 
  2221  0215                     	;# 
  2222  0216                     	;# 
  2223  0216                     	;# 
  2224  0217                     	;# 
  2225  0217                     	;# 
  2226  0219                     	;# 
  2227  021A                     	;# 
  2228  021B                     	;# 
  2229  021C                     	;# 
  2230  021D                     	;# 
  2231  021E                     	;# 
  2232  021F                     	;# 
  2233  028C                     	;# 
  2234  028D                     	;# 
  2235  0291                     	;# 
  2236  0291                     	;# 
  2237  0292                     	;# 
  2238  0293                     	;# 
  2239  0298                     	;# 
  2240  0298                     	;# 
  2241  0299                     	;# 
  2242  029A                     	;# 
  2243  029D                     	;# 
  2244  029E                     	;# 
  2245  029F                     	;# 
  2246  030C                     	;# 
  2247  030D                     	;# 
  2248  0311                     	;# 
  2249  0311                     	;# 
  2250  0312                     	;# 
  2251  0313                     	;# 
  2252  0318                     	;# 
  2253  0318                     	;# 
  2254  0319                     	;# 
  2255  031A                     	;# 
  2256  031C                     	;# 
  2257  031C                     	;# 
  2258  031D                     	;# 
  2259  031E                     	;# 
  2260  038C                     	;# 
  2261  038D                     	;# 
  2262  0394                     	;# 
  2263  0395                     	;# 
  2264  0396                     	;# 
  2265  040C                     	;# 
  2266  040D                     	;# 
  2267  0411                     	;# 
  2268  0411                     	;# 
  2269  0412                     	;# 
  2270  0413                     	;# 
  2271  0414                     	;# 
  2272  0415                     	;# 
  2273  0416                     	;# 
  2274  0417                     	;# 
  2275  0418                     	;# 
  2276  0418                     	;# 
  2277  0419                     	;# 
  2278  041A                     	;# 
  2279  041B                     	;# 
  2280  041C                     	;# 
  2281  041D                     	;# 
  2282  041E                     	;# 
  2283  048D                     	;# 
  2284  0491                     	;# 
  2285  0491                     	;# 
  2286  0492                     	;# 
  2287  0492                     	;# 
  2288  0493                     	;# 
  2289  0493                     	;# 
  2290  0493                     	;# 
  2291  0494                     	;# 
  2292  0494                     	;# 
  2293  0495                     	;# 
  2294  0495                     	;# 
  2295  0496                     	;# 
  2296  0496                     	;# 
  2297  0497                     	;# 
  2298  0497                     	;# 
  2299  0595                     	;# 
  2300  0596                     	;# 
  2301  0597                     	;# 
  2302  059C                     	;# 
  2303  059D                     	;# 
  2304  059E                     	;# 
  2305  0611                     	;# 
  2306  0611                     	;# 
  2307  0612                     	;# 
  2308  0613                     	;# 
  2309  0614                     	;# 
  2310  0614                     	;# 
  2311  0615                     	;# 
  2312  0616                     	;# 
  2313  0617                     	;# 
  2314  0617                     	;# 
  2315  0618                     	;# 
  2316  0619                     	;# 
  2317  061A                     	;# 
  2318  061A                     	;# 
  2319  061B                     	;# 
  2320  061C                     	;# 
  2321  061D                     	;# 
  2322  061D                     	;# 
  2323  061E                     	;# 
  2324  061F                     	;# 
  2325  0FE4                     	;# 
  2326  0FE5                     	;# 
  2327  0FE6                     	;# 
  2328  0FE7                     	;# 
  2329  0FE8                     	;# 
  2330  0FE9                     	;# 
  2331  0FEA                     	;# 
  2332  0FEB                     	;# 
  2333  0FED                     	;# 
  2334  0FEE                     	;# 
  2335  0FEF                     	;# 
  2336  0000                     	;# 
  2337  0001                     	;# 
  2338  0002                     	;# 
  2339  0003                     	;# 
  2340  0004                     	;# 
  2341  0005                     	;# 
  2342  0006                     	;# 
  2343  0007                     	;# 
  2344  0008                     	;# 
  2345  0009                     	;# 
  2346  000A                     	;# 
  2347  000B                     	;# 
  2348  000C                     	;# 
  2349  000D                     	;# 
  2350  000E                     	;# 
  2351  000F                     	;# 
  2352  0010                     	;# 
  2353  0011                     	;# 
  2354  0012                     	;# 
  2355  0013                     	;# 
  2356  0014                     	;# 
  2357  0015                     	;# 
  2358  0016                     	;# 
  2359  0016                     	;# 
  2360  0017                     	;# 
  2361  0018                     	;# 
  2362  0019                     	;# 
  2363  001A                     	;# 
  2364  001B                     	;# 
  2365  001C                     	;# 
  2366  008C                     	;# 
  2367  008D                     	;# 
  2368  008E                     	;# 
  2369  008F                     	;# 
  2370  0090                     	;# 
  2371  0091                     	;# 
  2372  0092                     	;# 
  2373  0093                     	;# 
  2374  0094                     	;# 
  2375  0095                     	;# 
  2376  0096                     	;# 
  2377  0097                     	;# 
  2378  0099                     	;# 
  2379  009A                     	;# 
  2380  009B                     	;# 
  2381  009B                     	;# 
  2382  009C                     	;# 
  2383  009D                     	;# 
  2384  009E                     	;# 
  2385  010C                     	;# 
  2386  010D                     	;# 
  2387  010E                     	;# 
  2388  010F                     	;# 
  2389  0110                     	;# 
  2390  0116                     	;# 
  2391  0117                     	;# 
  2392  011D                     	;# 
  2393  018C                     	;# 
  2394  018D                     	;# 
  2395  018F                     	;# 
  2396  0190                     	;# 
  2397  0191                     	;# 
  2398  0191                     	;# 
  2399  0192                     	;# 
  2400  0193                     	;# 
  2401  0193                     	;# 
  2402  0194                     	;# 
  2403  0195                     	;# 
  2404  0196                     	;# 
  2405  0197                     	;# 
  2406  0199                     	;# 
  2407  0199                     	;# 
  2408  0199                     	;# 
  2409  019A                     	;# 
  2410  019A                     	;# 
  2411  019A                     	;# 
  2412  019B                     	;# 
  2413  019B                     	;# 
  2414  019B                     	;# 
  2415  019B                     	;# 
  2416  019B                     	;# 
  2417  019C                     	;# 
  2418  019C                     	;# 
  2419  019C                     	;# 
  2420  019D                     	;# 
  2421  019D                     	;# 
  2422  019D                     	;# 
  2423  019E                     	;# 
  2424  019E                     	;# 
  2425  019E                     	;# 
  2426  019F                     	;# 
  2427  019F                     	;# 
  2428  019F                     	;# 
  2429  020D                     	;# 
  2430  020F                     	;# 
  2431  0210                     	;# 
  2432  0211                     	;# 
  2433  0211                     	;# 
  2434  0212                     	;# 
  2435  0212                     	;# 
  2436  0213                     	;# 
  2437  0213                     	;# 
  2438  0214                     	;# 
  2439  0214                     	;# 
  2440  0215                     	;# 
  2441  0215                     	;# 
  2442  0215                     	;# 
  2443  0216                     	;# 
  2444  0216                     	;# 
  2445  0217                     	;# 
  2446  0217                     	;# 
  2447  0219                     	;# 
  2448  021A                     	;# 
  2449  021B                     	;# 
  2450  021C                     	;# 
  2451  021D                     	;# 
  2452  021E                     	;# 
  2453  021F                     	;# 
  2454  028C                     	;# 
  2455  028D                     	;# 
  2456  0291                     	;# 
  2457  0291                     	;# 
  2458  0292                     	;# 
  2459  0293                     	;# 
  2460  0298                     	;# 
  2461  0298                     	;# 
  2462  0299                     	;# 
  2463  029A                     	;# 
  2464  029D                     	;# 
  2465  029E                     	;# 
  2466  029F                     	;# 
  2467  030C                     	;# 
  2468  030D                     	;# 
  2469  0311                     	;# 
  2470  0311                     	;# 
  2471  0312                     	;# 
  2472  0313                     	;# 
  2473  0318                     	;# 
  2474  0318                     	;# 
  2475  0319                     	;# 
  2476  031A                     	;# 
  2477  031C                     	;# 
  2478  031C                     	;# 
  2479  031D                     	;# 
  2480  031E                     	;# 
  2481  038C                     	;# 
  2482  038D                     	;# 
  2483  0394                     	;# 
  2484  0395                     	;# 
  2485  0396                     	;# 
  2486  040C                     	;# 
  2487  040D                     	;# 
  2488  0411                     	;# 
  2489  0411                     	;# 
  2490  0412                     	;# 
  2491  0413                     	;# 
  2492  0414                     	;# 
  2493  0415                     	;# 
  2494  0416                     	;# 
  2495  0417                     	;# 
  2496  0418                     	;# 
  2497  0418                     	;# 
  2498  0419                     	;# 
  2499  041A                     	;# 
  2500  041B                     	;# 
  2501  041C                     	;# 
  2502  041D                     	;# 
  2503  041E                     	;# 
  2504  048D                     	;# 
  2505  0491                     	;# 
  2506  0491                     	;# 
  2507  0492                     	;# 
  2508  0492                     	;# 
  2509  0493                     	;# 
  2510  0493                     	;# 
  2511  0493                     	;# 
  2512  0494                     	;# 
  2513  0494                     	;# 
  2514  0495                     	;# 
  2515  0495                     	;# 
  2516  0496                     	;# 
  2517  0496                     	;# 
  2518  0497                     	;# 
  2519  0497                     	;# 
  2520  0595                     	;# 
  2521  0596                     	;# 
  2522  0597                     	;# 
  2523  059C                     	;# 
  2524  059D                     	;# 
  2525  059E                     	;# 
  2526  0611                     	;# 
  2527  0611                     	;# 
  2528  0612                     	;# 
  2529  0613                     	;# 
  2530  0614                     	;# 
  2531  0614                     	;# 
  2532  0615                     	;# 
  2533  0616                     	;# 
  2534  0617                     	;# 
  2535  0617                     	;# 
  2536  0618                     	;# 
  2537  0619                     	;# 
  2538  061A                     	;# 
  2539  061A                     	;# 
  2540  061B                     	;# 
  2541  061C                     	;# 
  2542  061D                     	;# 
  2543  061D                     	;# 
  2544  061E                     	;# 
  2545  061F                     	;# 
  2546  0FE4                     	;# 
  2547  0FE5                     	;# 
  2548  0FE6                     	;# 
  2549  0FE7                     	;# 
  2550  0FE8                     	;# 
  2551  0FE9                     	;# 
  2552  0FEA                     	;# 
  2553  0FEB                     	;# 
  2554  0FED                     	;# 
  2555  0FEE                     	;# 
  2556  0FEF                     	;# 
  2557  0000                     	;# 
  2558  0001                     	;# 
  2559  0002                     	;# 
  2560  0003                     	;# 
  2561  0004                     	;# 
  2562  0005                     	;# 
  2563  0006                     	;# 
  2564  0007                     	;# 
  2565  0008                     	;# 
  2566  0009                     	;# 
  2567  000A                     	;# 
  2568  000B                     	;# 
  2569  000C                     	;# 
  2570  000D                     	;# 
  2571  000E                     	;# 
  2572  000F                     	;# 
  2573  0010                     	;# 
  2574  0011                     	;# 
  2575  0012                     	;# 
  2576  0013                     	;# 
  2577  0014                     	;# 
  2578  0015                     	;# 
  2579  0016                     	;# 
  2580  0016                     	;# 
  2581  0017                     	;# 
  2582  0018                     	;# 
  2583  0019                     	;# 
  2584  001A                     	;# 
  2585  001B                     	;# 
  2586  001C                     	;# 
  2587  008C                     	;# 
  2588  008D                     	;# 
  2589  008E                     	;# 
  2590  008F                     	;# 
  2591  0090                     	;# 
  2592  0091                     	;# 
  2593  0092                     	;# 
  2594  0093                     	;# 
  2595  0094                     	;# 
  2596  0095                     	;# 
  2597  0096                     	;# 
  2598  0097                     	;# 
  2599  0099                     	;# 
  2600  009A                     	;# 
  2601  009B                     	;# 
  2602  009B                     	;# 
  2603  009C                     	;# 
  2604  009D                     	;# 
  2605  009E                     	;# 
  2606  010C                     	;# 
  2607  010D                     	;# 
  2608  010E                     	;# 
  2609  010F                     	;# 
  2610  0110                     	;# 
  2611  0116                     	;# 
  2612  0117                     	;# 
  2613  011D                     	;# 
  2614  018C                     	;# 
  2615  018D                     	;# 
  2616  018F                     	;# 
  2617  0190                     	;# 
  2618  0191                     	;# 
  2619  0191                     	;# 
  2620  0192                     	;# 
  2621  0193                     	;# 
  2622  0193                     	;# 
  2623  0194                     	;# 
  2624  0195                     	;# 
  2625  0196                     	;# 
  2626  0197                     	;# 
  2627  0199                     	;# 
  2628  0199                     	;# 
  2629  0199                     	;# 
  2630  019A                     	;# 
  2631  019A                     	;# 
  2632  019A                     	;# 
  2633  019B                     	;# 
  2634  019B                     	;# 
  2635  019B                     	;# 
  2636  019B                     	;# 
  2637  019B                     	;# 
  2638  019C                     	;# 
  2639  019C                     	;# 
  2640  019C                     	;# 
  2641  019D                     	;# 
  2642  019D                     	;# 
  2643  019D                     	;# 
  2644  019E                     	;# 
  2645  019E                     	;# 
  2646  019E                     	;# 
  2647  019F                     	;# 
  2648  019F                     	;# 
  2649  019F                     	;# 
  2650  020D                     	;# 
  2651  020F                     	;# 
  2652  0210                     	;# 
  2653  0211                     	;# 
  2654  0211                     	;# 
  2655  0212                     	;# 
  2656  0212                     	;# 
  2657  0213                     	;# 
  2658  0213                     	;# 
  2659  0214                     	;# 
  2660  0214                     	;# 
  2661  0215                     	;# 
  2662  0215                     	;# 
  2663  0215                     	;# 
  2664  0216                     	;# 
  2665  0216                     	;# 
  2666  0217                     	;# 
  2667  0217                     	;# 
  2668  0219                     	;# 
  2669  021A                     	;# 
  2670  021B                     	;# 
  2671  021C                     	;# 
  2672  021D                     	;# 
  2673  021E                     	;# 
  2674  021F                     	;# 
  2675  028C                     	;# 
  2676  028D                     	;# 
  2677  0291                     	;# 
  2678  0291                     	;# 
  2679  0292                     	;# 
  2680  0293                     	;# 
  2681  0298                     	;# 
  2682  0298                     	;# 
  2683  0299                     	;# 
  2684  029A                     	;# 
  2685  029D                     	;# 
  2686  029E                     	;# 
  2687  029F                     	;# 
  2688  030C                     	;# 
  2689  030D                     	;# 
  2690  0311                     	;# 
  2691  0311                     	;# 
  2692  0312                     	;# 
  2693  0313                     	;# 
  2694  0318                     	;# 
  2695  0318                     	;# 
  2696  0319                     	;# 
  2697  031A                     	;# 
  2698  031C                     	;# 
  2699  031C                     	;# 
  2700  031D                     	;# 
  2701  031E                     	;# 
  2702  038C                     	;# 
  2703  038D                     	;# 
  2704  0394                     	;# 
  2705  0395                     	;# 
  2706  0396                     	;# 
  2707  040C                     	;# 
  2708  040D                     	;# 
  2709  0411                     	;# 
  2710  0411                     	;# 
  2711  0412                     	;# 
  2712  0413                     	;# 
  2713  0414                     	;# 
  2714  0415                     	;# 
  2715  0416                     	;# 
  2716  0417                     	;# 
  2717  0418                     	;# 
  2718  0418                     	;# 
  2719  0419                     	;# 
  2720  041A                     	;# 
  2721  041B                     	;# 
  2722  041C                     	;# 
  2723  041D                     	;# 
  2724  041E                     	;# 
  2725  048D                     	;# 
  2726  0491                     	;# 
  2727  0491                     	;# 
  2728  0492                     	;# 
  2729  0492                     	;# 
  2730  0493                     	;# 
  2731  0493                     	;# 
  2732  0493                     	;# 
  2733  0494                     	;# 
  2734  0494                     	;# 
  2735  0495                     	;# 
  2736  0495                     	;# 
  2737  0496                     	;# 
  2738  0496                     	;# 
  2739  0497                     	;# 
  2740  0497                     	;# 
  2741  0595                     	;# 
  2742  0596                     	;# 
  2743  0597                     	;# 
  2744  059C                     	;# 
  2745  059D                     	;# 
  2746  059E                     	;# 
  2747  0611                     	;# 
  2748  0611                     	;# 
  2749  0612                     	;# 
  2750  0613                     	;# 
  2751  0614                     	;# 
  2752  0614                     	;# 
  2753  0615                     	;# 
  2754  0616                     	;# 
  2755  0617                     	;# 
  2756  0617                     	;# 
  2757  0618                     	;# 
  2758  0619                     	;# 
  2759  061A                     	;# 
  2760  061A                     	;# 
  2761  061B                     	;# 
  2762  061C                     	;# 
  2763  061D                     	;# 
  2764  061D                     	;# 
  2765  061E                     	;# 
  2766  061F                     	;# 
  2767  0FE4                     	;# 
  2768  0FE5                     	;# 
  2769  0FE6                     	;# 
  2770  0FE7                     	;# 
  2771  0FE8                     	;# 
  2772  0FE9                     	;# 
  2773  0FEA                     	;# 
  2774  0FEB                     	;# 
  2775  0FED                     	;# 
  2776  0FEE                     	;# 
  2777  0FEF                     	;# 
  2778  0000                     	;# 
  2779  0001                     	;# 
  2780  0002                     	;# 
  2781  0003                     	;# 
  2782  0004                     	;# 
  2783  0005                     	;# 
  2784  0006                     	;# 
  2785  0007                     	;# 
  2786  0008                     	;# 
  2787  0009                     	;# 
  2788  000A                     	;# 
  2789  000B                     	;# 
  2790  000C                     	;# 
  2791  000D                     	;# 
  2792  000E                     	;# 
  2793  000F                     	;# 
  2794  0010                     	;# 
  2795  0011                     	;# 
  2796  0012                     	;# 
  2797  0013                     	;# 
  2798  0014                     	;# 
  2799  0015                     	;# 
  2800  0016                     	;# 
  2801  0016                     	;# 
  2802  0017                     	;# 
  2803  0018                     	;# 
  2804  0019                     	;# 
  2805  001A                     	;# 
  2806  001B                     	;# 
  2807  001C                     	;# 
  2808  008C                     	;# 
  2809  008D                     	;# 
  2810  008E                     	;# 
  2811  008F                     	;# 
  2812  0090                     	;# 
  2813  0091                     	;# 
  2814  0092                     	;# 
  2815  0093                     	;# 
  2816  0094                     	;# 
  2817  0095                     	;# 
  2818  0096                     	;# 
  2819  0097                     	;# 
  2820  0099                     	;# 
  2821  009A                     	;# 
  2822  009B                     	;# 
  2823  009B                     	;# 
  2824  009C                     	;# 
  2825  009D                     	;# 
  2826  009E                     	;# 
  2827  010C                     	;# 
  2828  010D                     	;# 
  2829  010E                     	;# 
  2830  010F                     	;# 
  2831  0110                     	;# 
  2832  0116                     	;# 
  2833  0117                     	;# 
  2834  011D                     	;# 
  2835  018C                     	;# 
  2836  018D                     	;# 
  2837  018F                     	;# 
  2838  0190                     	;# 
  2839  0191                     	;# 
  2840  0191                     	;# 
  2841  0192                     	;# 
  2842  0193                     	;# 
  2843  0193                     	;# 
  2844  0194                     	;# 
  2845  0195                     	;# 
  2846  0196                     	;# 
  2847  0197                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  0199                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019A                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019B                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019C                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019D                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019E                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  020D                     	;# 
  2872  020F                     	;# 
  2873  0210                     	;# 
  2874  0211                     	;# 
  2875  0211                     	;# 
  2876  0212                     	;# 
  2877  0212                     	;# 
  2878  0213                     	;# 
  2879  0213                     	;# 
  2880  0214                     	;# 
  2881  0214                     	;# 
  2882  0215                     	;# 
  2883  0215                     	;# 
  2884  0215                     	;# 
  2885  0216                     	;# 
  2886  0216                     	;# 
  2887  0217                     	;# 
  2888  0217                     	;# 
  2889  0219                     	;# 
  2890  021A                     	;# 
  2891  021B                     	;# 
  2892  021C                     	;# 
  2893  021D                     	;# 
  2894  021E                     	;# 
  2895  021F                     	;# 
  2896  028C                     	;# 
  2897  028D                     	;# 
  2898  0291                     	;# 
  2899  0291                     	;# 
  2900  0292                     	;# 
  2901  0293                     	;# 
  2902  0298                     	;# 
  2903  0298                     	;# 
  2904  0299                     	;# 
  2905  029A                     	;# 
  2906  029D                     	;# 
  2907  029E                     	;# 
  2908  029F                     	;# 
  2909  030C                     	;# 
  2910  030D                     	;# 
  2911  0311                     	;# 
  2912  0311                     	;# 
  2913  0312                     	;# 
  2914  0313                     	;# 
  2915  0318                     	;# 
  2916  0318                     	;# 
  2917  0319                     	;# 
  2918  031A                     	;# 
  2919  031C                     	;# 
  2920  031C                     	;# 
  2921  031D                     	;# 
  2922  031E                     	;# 
  2923  038C                     	;# 
  2924  038D                     	;# 
  2925  0394                     	;# 
  2926  0395                     	;# 
  2927  0396                     	;# 
  2928  040C                     	;# 
  2929  040D                     	;# 
  2930  0411                     	;# 
  2931  0411                     	;# 
  2932  0412                     	;# 
  2933  0413                     	;# 
  2934  0414                     	;# 
  2935  0415                     	;# 
  2936  0416                     	;# 
  2937  0417                     	;# 
  2938  0418                     	;# 
  2939  0418                     	;# 
  2940  0419                     	;# 
  2941  041A                     	;# 
  2942  041B                     	;# 
  2943  041C                     	;# 
  2944  041D                     	;# 
  2945  041E                     	;# 
  2946  048D                     	;# 
  2947  0491                     	;# 
  2948  0491                     	;# 
  2949  0492                     	;# 
  2950  0492                     	;# 
  2951  0493                     	;# 
  2952  0493                     	;# 
  2953  0493                     	;# 
  2954  0494                     	;# 
  2955  0494                     	;# 
  2956  0495                     	;# 
  2957  0495                     	;# 
  2958  0496                     	;# 
  2959  0496                     	;# 
  2960  0497                     	;# 
  2961  0497                     	;# 
  2962  0595                     	;# 
  2963  0596                     	;# 
  2964  0597                     	;# 
  2965  059C                     	;# 
  2966  059D                     	;# 
  2967  059E                     	;# 
  2968  0611                     	;# 
  2969  0611                     	;# 
  2970  0612                     	;# 
  2971  0613                     	;# 
  2972  0614                     	;# 
  2973  0614                     	;# 
  2974  0615                     	;# 
  2975  0616                     	;# 
  2976  0617                     	;# 
  2977  0617                     	;# 
  2978  0618                     	;# 
  2979  0619                     	;# 
  2980  061A                     	;# 
  2981  061A                     	;# 
  2982  061B                     	;# 
  2983  061C                     	;# 
  2984  061D                     	;# 
  2985  061D                     	;# 
  2986  061E                     	;# 
  2987  061F                     	;# 
  2988  0FE4                     	;# 
  2989  0FE5                     	;# 
  2990  0FE6                     	;# 
  2991  0FE7                     	;# 
  2992  0FE8                     	;# 
  2993  0FE9                     	;# 
  2994  0FEA                     	;# 
  2995  0FEB                     	;# 
  2996  0FED                     	;# 
  2997  0FEE                     	;# 
  2998  0FEF                     	;# 
  2999  0000                     	;# 
  3000  0001                     	;# 
  3001  0002                     	;# 
  3002  0003                     	;# 
  3003  0004                     	;# 
  3004  0005                     	;# 
  3005  0006                     	;# 
  3006  0007                     	;# 
  3007  0008                     	;# 
  3008  0009                     	;# 
  3009  000A                     	;# 
  3010  000B                     	;# 
  3011  000C                     	;# 
  3012  000D                     	;# 
  3013  000E                     	;# 
  3014  000F                     	;# 
  3015  0010                     	;# 
  3016  0011                     	;# 
  3017  0012                     	;# 
  3018  0013                     	;# 
  3019  0014                     	;# 
  3020  0015                     	;# 
  3021  0016                     	;# 
  3022  0016                     	;# 
  3023  0017                     	;# 
  3024  0018                     	;# 
  3025  0019                     	;# 
  3026  001A                     	;# 
  3027  001B                     	;# 
  3028  001C                     	;# 
  3029  008C                     	;# 
  3030  008D                     	;# 
  3031  008E                     	;# 
  3032  008F                     	;# 
  3033  0090                     	;# 
  3034  0091                     	;# 
  3035  0092                     	;# 
  3036  0093                     	;# 
  3037  0094                     	;# 
  3038  0095                     	;# 
  3039  0096                     	;# 
  3040  0097                     	;# 
  3041  0099                     	;# 
  3042  009A                     	;# 
  3043  009B                     	;# 
  3044  009B                     	;# 
  3045  009C                     	;# 
  3046  009D                     	;# 
  3047  009E                     	;# 
  3048  010C                     	;# 
  3049  010D                     	;# 
  3050  010E                     	;# 
  3051  010F                     	;# 
  3052  0110                     	;# 
  3053  0116                     	;# 
  3054  0117                     	;# 
  3055  011D                     	;# 
  3056  018C                     	;# 
  3057  018D                     	;# 
  3058  018F                     	;# 
  3059  0190                     	;# 
  3060  0191                     	;# 
  3061  0191                     	;# 
  3062  0192                     	;# 
  3063  0193                     	;# 
  3064  0193                     	;# 
  3065  0194                     	;# 
  3066  0195                     	;# 
  3067  0196                     	;# 
  3068  0197                     	;# 
  3069  0199                     	;# 
  3070  0199                     	;# 
  3071  0199                     	;# 
  3072  019A                     	;# 
  3073  019A                     	;# 
  3074  019A                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019B                     	;# 
  3078  019B                     	;# 
  3079  019B                     	;# 
  3080  019C                     	;# 
  3081  019C                     	;# 
  3082  019C                     	;# 
  3083  019D                     	;# 
  3084  019D                     	;# 
  3085  019D                     	;# 
  3086  019E                     	;# 
  3087  019E                     	;# 
  3088  019E                     	;# 
  3089  019F                     	;# 
  3090  019F                     	;# 
  3091  019F                     	;# 
  3092  020D                     	;# 
  3093  020F                     	;# 
  3094  0210                     	;# 
  3095  0211                     	;# 
  3096  0211                     	;# 
  3097  0212                     	;# 
  3098  0212                     	;# 
  3099  0213                     	;# 
  3100  0213                     	;# 
  3101  0214                     	;# 
  3102  0214                     	;# 
  3103  0215                     	;# 
  3104  0215                     	;# 
  3105  0215                     	;# 
  3106  0216                     	;# 
  3107  0216                     	;# 
  3108  0217                     	;# 
  3109  0217                     	;# 
  3110  0219                     	;# 
  3111  021A                     	;# 
  3112  021B                     	;# 
  3113  021C                     	;# 
  3114  021D                     	;# 
  3115  021E                     	;# 
  3116  021F                     	;# 
  3117  028C                     	;# 
  3118  028D                     	;# 
  3119  0291                     	;# 
  3120  0291                     	;# 
  3121  0292                     	;# 
  3122  0293                     	;# 
  3123  0298                     	;# 
  3124  0298                     	;# 
  3125  0299                     	;# 
  3126  029A                     	;# 
  3127  029D                     	;# 
  3128  029E                     	;# 
  3129  029F                     	;# 
  3130  030C                     	;# 
  3131  030D                     	;# 
  3132  0311                     	;# 
  3133  0311                     	;# 
  3134  0312                     	;# 
  3135  0313                     	;# 
  3136  0318                     	;# 
  3137  0318                     	;# 
  3138  0319                     	;# 
  3139  031A                     	;# 
  3140  031C                     	;# 
  3141  031C                     	;# 
  3142  031D                     	;# 
  3143  031E                     	;# 
  3144  038C                     	;# 
  3145  038D                     	;# 
  3146  0394                     	;# 
  3147  0395                     	;# 
  3148  0396                     	;# 
  3149  040C                     	;# 
  3150  040D                     	;# 
  3151  0411                     	;# 
  3152  0411                     	;# 
  3153  0412                     	;# 
  3154  0413                     	;# 
  3155  0414                     	;# 
  3156  0415                     	;# 
  3157  0416                     	;# 
  3158  0417                     	;# 
  3159  0418                     	;# 
  3160  0418                     	;# 
  3161  0419                     	;# 
  3162  041A                     	;# 
  3163  041B                     	;# 
  3164  041C                     	;# 
  3165  041D                     	;# 
  3166  041E                     	;# 
  3167  048D                     	;# 
  3168  0491                     	;# 
  3169  0491                     	;# 
  3170  0492                     	;# 
  3171  0492                     	;# 
  3172  0493                     	;# 
  3173  0493                     	;# 
  3174  0493                     	;# 
  3175  0494                     	;# 
  3176  0494                     	;# 
  3177  0495                     	;# 
  3178  0495                     	;# 
  3179  0496                     	;# 
  3180  0496                     	;# 
  3181  0497                     	;# 
  3182  0497                     	;# 
  3183  0595                     	;# 
  3184  0596                     	;# 
  3185  0597                     	;# 
  3186  059C                     	;# 
  3187  059D                     	;# 
  3188  059E                     	;# 
  3189  0611                     	;# 
  3190  0611                     	;# 
  3191  0612                     	;# 
  3192  0613                     	;# 
  3193  0614                     	;# 
  3194  0614                     	;# 
  3195  0615                     	;# 
  3196  0616                     	;# 
  3197  0617                     	;# 
  3198  0617                     	;# 
  3199  0618                     	;# 
  3200  0619                     	;# 
  3201  061A                     	;# 
  3202  061A                     	;# 
  3203  061B                     	;# 
  3204  061C                     	;# 
  3205  061D                     	;# 
  3206  061D                     	;# 
  3207  061E                     	;# 
  3208  061F                     	;# 
  3209  0FE4                     	;# 
  3210  0FE5                     	;# 
  3211  0FE6                     	;# 
  3212  0FE7                     	;# 
  3213  0FE8                     	;# 
  3214  0FE9                     	;# 
  3215  0FEA                     	;# 
  3216  0FEB                     	;# 
  3217  0FED                     	;# 
  3218  0FEE                     	;# 
  3219  0FEF                     	;# 
  3220  0000                     	;# 
  3221  0001                     	;# 
  3222  0002                     	;# 
  3223  0003                     	;# 
  3224  0004                     	;# 
  3225  0005                     	;# 
  3226  0006                     	;# 
  3227  0007                     	;# 
  3228  0008                     	;# 
  3229  0009                     	;# 
  3230  000A                     	;# 
  3231  000B                     	;# 
  3232  000C                     	;# 
  3233  000D                     	;# 
  3234  000E                     	;# 
  3235  000F                     	;# 
  3236  0010                     	;# 
  3237  0011                     	;# 
  3238  0012                     	;# 
  3239  0013                     	;# 
  3240  0014                     	;# 
  3241  0015                     	;# 
  3242  0016                     	;# 
  3243  0016                     	;# 
  3244  0017                     	;# 
  3245  0018                     	;# 
  3246  0019                     	;# 
  3247  001A                     	;# 
  3248  001B                     	;# 
  3249  001C                     	;# 
  3250  008C                     	;# 
  3251  008D                     	;# 
  3252  008E                     	;# 
  3253  008F                     	;# 
  3254  0090                     	;# 
  3255  0091                     	;# 
  3256  0092                     	;# 
  3257  0093                     	;# 
  3258  0094                     	;# 
  3259  0095                     	;# 
  3260  0096                     	;# 
  3261  0097                     	;# 
  3262  0099                     	;# 
  3263  009A                     	;# 
  3264  009B                     	;# 
  3265  009B                     	;# 
  3266  009C                     	;# 
  3267  009D                     	;# 
  3268  009E                     	;# 
  3269  010C                     	;# 
  3270  010D                     	;# 
  3271  010E                     	;# 
  3272  010F                     	;# 
  3273  0110                     	;# 
  3274  0116                     	;# 
  3275  0117                     	;# 
  3276  011D                     	;# 
  3277  018C                     	;# 
  3278  018D                     	;# 
  3279  018F                     	;# 
  3280  0190                     	;# 
  3281  0191                     	;# 
  3282  0191                     	;# 
  3283  0192                     	;# 
  3284  0193                     	;# 
  3285  0193                     	;# 
  3286  0194                     	;# 
  3287  0195                     	;# 
  3288  0196                     	;# 
  3289  0197                     	;# 
  3290  0199                     	;# 
  3291  0199                     	;# 
  3292  0199                     	;# 
  3293  019A                     	;# 
  3294  019A                     	;# 
  3295  019A                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019B                     	;# 
  3299  019B                     	;# 
  3300  019B                     	;# 
  3301  019C                     	;# 
  3302  019C                     	;# 
  3303  019C                     	;# 
  3304  019D                     	;# 
  3305  019D                     	;# 
  3306  019D                     	;# 
  3307  019E                     	;# 
  3308  019E                     	;# 
  3309  019E                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  019F                     	;# 
  3313  020D                     	;# 
  3314  020F                     	;# 
  3315  0210                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0214                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0215                     	;# 
  3327  0216                     	;# 
  3328  0216                     	;# 
  3329  0217                     	;# 
  3330  0217                     	;# 
  3331  0219                     	;# 
  3332  021A                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021D                     	;# 
  3336  021E                     	;# 
  3337  021F                     	;# 
  3338  028C                     	;# 
  3339  028D                     	;# 
  3340  0291                     	;# 
  3341  0291                     	;# 
  3342  0292                     	;# 
  3343  0293                     	;# 
  3344  0298                     	;# 
  3345  0298                     	;# 
  3346  0299                     	;# 
  3347  029A                     	;# 
  3348  029D                     	;# 
  3349  029E                     	;# 
  3350  029F                     	;# 
  3351  030C                     	;# 
  3352  030D                     	;# 
  3353  0311                     	;# 
  3354  0311                     	;# 
  3355  0312                     	;# 
  3356  0313                     	;# 
  3357  0318                     	;# 
  3358  0318                     	;# 
  3359  0319                     	;# 
  3360  031A                     	;# 
  3361  031C                     	;# 
  3362  031C                     	;# 
  3363  031D                     	;# 
  3364  031E                     	;# 
  3365  038C                     	;# 
  3366  038D                     	;# 
  3367  0394                     	;# 
  3368  0395                     	;# 
  3369  0396                     	;# 
  3370  040C                     	;# 
  3371  040D                     	;# 
  3372  0411                     	;# 
  3373  0411                     	;# 
  3374  0412                     	;# 
  3375  0413                     	;# 
  3376  0414                     	;# 
  3377  0415                     	;# 
  3378  0416                     	;# 
  3379  0417                     	;# 
  3380  0418                     	;# 
  3381  0418                     	;# 
  3382  0419                     	;# 
  3383  041A                     	;# 
  3384  041B                     	;# 
  3385  041C                     	;# 
  3386  041D                     	;# 
  3387  041E                     	;# 
  3388  048D                     	;# 
  3389  0491                     	;# 
  3390  0491                     	;# 
  3391  0492                     	;# 
  3392  0492                     	;# 
  3393  0493                     	;# 
  3394  0493                     	;# 
  3395  0493                     	;# 
  3396  0494                     	;# 
  3397  0494                     	;# 
  3398  0495                     	;# 
  3399  0495                     	;# 
  3400  0496                     	;# 
  3401  0496                     	;# 
  3402  0497                     	;# 
  3403  0497                     	;# 
  3404  0595                     	;# 
  3405  0596                     	;# 
  3406  0597                     	;# 
  3407  059C                     	;# 
  3408  059D                     	;# 
  3409  059E                     	;# 
  3410  0611                     	;# 
  3411  0611                     	;# 
  3412  0612                     	;# 
  3413  0613                     	;# 
  3414  0614                     	;# 
  3415  0614                     	;# 
  3416  0615                     	;# 
  3417  0616                     	;# 
  3418  0617                     	;# 
  3419  0617                     	;# 
  3420  0618                     	;# 
  3421  0619                     	;# 
  3422  061A                     	;# 
  3423  061A                     	;# 
  3424  061B                     	;# 
  3425  061C                     	;# 
  3426  061D                     	;# 
  3427  061D                     	;# 
  3428  061E                     	;# 
  3429  061F                     	;# 
  3430  0FE4                     	;# 
  3431  0FE5                     	;# 
  3432  0FE6                     	;# 
  3433  0FE7                     	;# 
  3434  0FE8                     	;# 
  3435  0FE9                     	;# 
  3436  0FEA                     	;# 
  3437  0FEB                     	;# 
  3438  0FED                     	;# 
  3439  0FEE                     	;# 
  3440  0FEF                     	;_modArray
  3441                           
  3442                           	psect	idataBANK1
  3443  2B23                     __pidataBANK1:	
  3444                           
  3445                           ;initializer for _baseline_delay_time
  3446  2B23  34D0               	retlw	208
  3447  2B24  3407               	retlw	7
  3448  2B25  3400               	retlw	0
  3449  2B26  3400               	retlw	0
  3450                           
  3451                           ;initializer for _bottom_push_state
  3452  2B27  3401               	retlw	1
  3453  2B28  3400               	retlw	0
  3454                           
  3455                           ;initializer for _long_press_limit
  3456  2B29  34E8               	retlw	232
  3457  2B2A  3403               	retlw	3
  3458                           
  3459                           ;initializer for _top_push_state
  3460  2B2B  3406               	retlw	6
  3461  2B2C  3400               	retlw	0
  3462                           
  3463                           ;initializer for _blink_rate
  3464  2B2D  3414               	retlw	20
  3465                           
  3466                           ;initializer for _feedback_state
  3467  2B2E  34FF               	retlw	255
  3468                           
  3469                           ;initializer for _longTap_state
  3470  2B2F  34FF               	retlw	255
  3471                           
  3472                           ;initializer for _num_taps
  3473  2B30  3404               	retlw	4
  3474                           
  3475                           ;initializer for _switchBypass_state
  3476  2B31  34FF               	retlw	255
  3477                           
  3478                           	psect	idataBANK3
  3479  1801                     __pidataBANK3:	
  3480                           
  3481                           ;initializer for _presetChannel
  3482  1801  3401               	retlw	1
  3483                           
  3484                           	psect	idataBANK4
  3485  2C19                     __pidataBANK4:	
  3486                           
  3487                           ;initializer for _delay_time
  3488  2C19  34D0               	retlw	208
  3489  2C1A  3407               	retlw	7
  3490  2C1B  3400               	retlw	0
  3491  2C1C  3400               	retlw	0
  3492                           
  3493                           ;initializer for _blink_delay
  3494  2C1D  3464               	retlw	100
  3495  2C1E  3400               	retlw	0
  3496                           
  3497                           ;initializer for _knob1_prev
  3498  2C1F  34D0               	retlw	208
  3499  2C20  3407               	retlw	7
  3500                           
  3501                           ;initializer for _knob2_prev
  3502  2C21  34D0               	retlw	208
  3503  2C22  3407               	retlw	7
  3504                           
  3505                           ;initializer for _knob3_prev
  3506  2C23  34D0               	retlw	208
  3507  2C24  3407               	retlw	7
  3508                           
  3509                           ;initializer for _knob4_prev
  3510  2C25  34D0               	retlw	208
  3511  2C26  3407               	retlw	7
  3512                           
  3513                           ;initializer for _knob5_prev
  3514  2C27  34D0               	retlw	208
  3515  2C28  3407               	retlw	7
  3516                           
  3517                           ;initializer for _mod_delay_time
  3518  2C29  34D0               	retlw	208
  3519  2C2A  3407               	retlw	7
  3520                           
  3521                           ;initializer for _symmetry
  3522  2C2B  34B4               	retlw	180
  3523  2C2C  3400               	retlw	0
  3524                           
  3525                           ;initializer for _tap_iteration
  3526  2C2D  3401               	retlw	1
  3527  2C2E  3400               	retlw	0
  3528                           
  3529                           ;initializer for _blink_state
  3530  2C2F  3401               	retlw	1
  3531                           
  3532                           ;initializer for _currentBypassState
  3533  2C30  34FF               	retlw	255
  3534                           
  3535                           ;initializer for _delay_time_changed
  3536  2C31  3401               	retlw	1
  3537                           
  3538                           ;initializer for _expSwitchState
  3539  2C32  34FF               	retlw	255
  3540                           
  3541                           ;initializer for _expressModeCnst
  3542  2C33  3402               	retlw	2
  3543                           
  3544                           ;initializer for _expressionChannel
  3545  2C34  3401               	retlw	1
  3546                           
  3547                           ;initializer for _presetModeCnst
  3548  2C35  3401               	retlw	1
  3549                           
  3550                           ;initializer for _switchTap_state
  3551  2C36  34FF               	retlw	255
  3552                           
  3553                           	psect	idataBANK5
  3554  0002                     __pidataBANK5:	
  3555                           
  3556                           ;initializer for _switchBypass_up
  3557  0002  3401               	retlw	1
  3558  0003  3400               	retlw	0
  3559                           
  3560                           	psect	stringtext
  3561  2800                     __pstringtext:	
  3562  2800                     exp@coeff:	
  3563  2800  3400               	retlw	0
  3564  2801  3480               	retlw	128
  3565  2802  343F               	retlw	63
  3566  2803  3472               	retlw	114
  3567  2804  3431               	retlw	49
  3568  2805  343F               	retlw	63
  3569  2806  34FE               	retlw	254
  3570  2807  3475               	retlw	117
  3571  2808  343E               	retlw	62
  3572  2809  3458               	retlw	88
  3573  280A  3463               	retlw	99
  3574  280B  343D               	retlw	61
  3575  280C  3495               	retlw	149
  3576  280D  341D               	retlw	29
  3577  280E  343C               	retlw	60
  3578  280F  34C5               	retlw	197
  3579  2810  34AE               	retlw	174
  3580  2811  343A               	retlw	58
  3581  2812  3479               	retlw	121
  3582  2813  3421               	retlw	33
  3583  2814  3439               	retlw	57
  3584  2815  3494               	retlw	148
  3585  2816  3480               	retlw	128
  3586  2817  3437               	retlw	55
  3587  2818  3493               	retlw	147
  3588  2819  34A7               	retlw	167
  3589  281A  3435               	retlw	53
  3590  281B  3456               	retlw	86
  3591  281C  3415               	retlw	21
  3592  281D  3434               	retlw	52
  3593  281E                     __end_ofexp@coeff:	
  3594  281E                     log@coeff:	
  3595  281E  3400               	retlw	0
  3596  281F  3400               	retlw	0
  3597  2820  3400               	retlw	0
  3598  2821  3400               	retlw	0
  3599  2822  3480               	retlw	128
  3600  2823  343F               	retlw	63
  3601  2824  34F0               	retlw	240
  3602  2825  34FF               	retlw	255
  3603  2826  34BE               	retlw	190
  3604  2827  34E2               	retlw	226
  3605  2828  34A9               	retlw	169
  3606  2829  343E               	retlw	62
  3607  282A  3483               	retlw	131
  3608  282B  3476               	retlw	118
  3609  282C  34BE               	retlw	190
  3610  282D  34AE               	retlw	174
  3611  282E  342B               	retlw	43
  3612  282F  343E               	retlw	62
  3613  2830  343C               	retlw	60
  3614  2831  34C3               	retlw	195
  3615  2832  34BD               	retlw	189
  3616  2833  34D2               	retlw	210
  3617  2834  3413               	retlw	19
  3618  2835  343D               	retlw	61
  3619  2836  3478               	retlw	120
  3620  2837  34D3               	retlw	211
  3621  2838  34BB               	retlw	187
  3622  2839                     __end_oflog@coeff:	
  3623  2839                     sin@coeff_a:	
  3624  2839  34F4               	retlw	244
  3625  283A  344A               	retlw	74
  3626  283B  3448               	retlw	72
  3627  283C  3495               	retlw	149
  3628  283D  3495               	retlw	149
  3629  283E  34C7               	retlw	199
  3630  283F  34C1               	retlw	193
  3631  2840  34DC               	retlw	220
  3632  2841  3445               	retlw	69
  3633  2842  34DC               	retlw	220
  3634  2843  346D               	retlw	109
  3635  2844  34C3               	retlw	195
  3636  2845  34B3               	retlw	179
  3637  2846  3433               	retlw	51
  3638  2847  3440               	retlw	64
  3639  2848                     __end_ofsin@coeff_a:	
  3640  2848                     sin@coeff_b:	
  3641  2848  3434               	retlw	52
  3642  2849  3401               	retlw	1
  3643  284A  3448               	retlw	72
  3644  284B  349D               	retlw	157
  3645  284C  34B0               	retlw	176
  3646  284D  3445               	retlw	69
  3647  284E  3400               	retlw	0
  3648  284F  34DA               	retlw	218
  3649  2850  3442               	retlw	66
  3650  2851  3400               	retlw	0
  3651  2852  3480               	retlw	128
  3652  2853  343F               	retlw	63
  3653  2854                     __end_ofsin@coeff_b:	
  3654  000B                     _INTCONbits	set	11
  3655  0011                     _PIR1bits	set	17
  3656  000C                     _PORTAbits	set	12
  3657  000E                     _PORTCbits	set	14
  3658  000F                     _PORTDbits	set	15
  3659  0010                     _PORTEbits	set	16
  3660  001B                     _PR2	set	27
  3661  001C                     _T2CONbits	set	28
  3662  005F                     _GIE	set	95
  3663  005E                     _PEIE	set	94
  3664  0069                     _RB1	set	105
  3665  009D                     _ADCON0bits	set	157
  3666  009E                     _ADCON1bits	set	158
  3667  009C                     _ADRESH	set	156
  3668  009B                     _ADRESL	set	155
  3669  0095                     _OPTION_REGbits	set	149
  3670  0099                     _OSCCONbits	set	153
  3671  008D                     _TRISBbits	set	141
  3672  008E                     _TRISCbits	set	142
  3673  008F                     _TRISDbits	set	143
  3674  0090                     _TRISEbits	set	144
  3675  048D                     _RCIE	set	1165
  3676  011D                     _APFCONbits	set	285
  3677  010D                     _LATBbits	set	269
  3678  010F                     _LATDbits	set	271
  3679  0190                     _ANSELEbits	set	400
  3680  0192                     _PMADRH	set	402
  3681  0191                     _PMADRL	set	401
  3682  0195                     _PMCON1bits	set	405
  3683  0196                     _PMCON2	set	406
  3684  0194                     _PMDATH	set	404
  3685  0193                     _PMDATL	set	403
  3686  0199                     _RCREG	set	409
  3687  019D                     _RCSTAbits	set	413
  3688  019B                     _SPBRG	set	411
  3689  019A                     _TXREG	set	410
  3690  019E                     _TXSTAbits	set	414
  3691  0291                     _CCPR1	set	657
  3692  0298                     _CCPR2	set	664
  3693  0293                     _CCP1CONbits	set	659
  3694  029A                     _CCP2CONbits	set	666
  3695  029D                     _CCPTMRS0	set	669
  3696  029E                     _CCPTMRS1	set	670
  3697  029F                     _CCPTMRS2	set	671
  3698  0311                     _CCPR3	set	785
  3699  0318                     _CCPR4	set	792
  3700  031C                     _CCPR5	set	796
  3701  0313                     _CCP3CONbits	set	787
  3702  031A                     _CCP4CONbits	set	794
  3703  031E                     _CCP5CONbits	set	798
  3704  030C                     _TRISFbits	set	780
  3705  030D                     _TRISGbits	set	781
  3706  038C                     _LATFbits	set	908
  3707  038D                     _LATGbits	set	909
  3708  040C                     _ANSELFbits	set	1036
  3709  061F                     _CCP10CONbits	set	1567
  3710  0613                     _CCP6CONbits	set	1555
  3711  0616                     _CCP7CONbits	set	1558
  3712  0619                     _CCP8CONbits	set	1561
  3713  061C                     _CCP9CONbits	set	1564
  3714                           
  3715                           ; #config settings
  3716  0000                     
  3717                           	psect	cinit
  3718  0448                     start_initialization:	
  3719  0448                     __initialization:		;BIGRAM
  3720                           
  3721                           ; Clear objects allocated to BIGRAM
  3722  0448  3008               	movlw	low (0+9224)
  3723  0449  0084               	movwf	4
  3724  044A  3024               	movlw	high (0+9224)
  3725  044B  0085               	movwf	5
  3726  044C  30E8               	movlw	232
  3727  044D  00FE               	movwf	btemp
  3728  044E  3001               	movlw	1
  3729  044F  00FF               	movwf	btemp+1
  3730  0450  31AB  2308  3184   	fcall	clear_ram0
  3731                           
  3732                           ; Clear objects allocated to BANK1
  3733  0453  30C1               	movlw	low __pbssBANK1
  3734  0454  0084               	movwf	4
  3735  0455  3000               	movlw	high __pbssBANK1
  3736  0456  0085               	movwf	5
  3737  0457  3012               	movlw	18
  3738  0458  00FE               	movwf	btemp
  3739  0459  3000               	movlw	0
  3740  045A  00FF               	movwf	btemp+1
  3741  045B  31AB  2308  3184   	fcall	clear_ram0
  3742                           
  3743                           ; Clear objects allocated to BANK3
  3744  045E  0023               	movlb	3	; select bank3
  3745  045F  01EA               	clrf	__pbssBANK3& (0+127)
  3746  0460  01EB               	clrf	(__pbssBANK3+1)& (0+127)
  3747  0461  01EC               	clrf	(__pbssBANK3+2)& (0+127)
  3748  0462  01ED               	clrf	(__pbssBANK3+3)& (0+127)
  3749  0463  01EE               	clrf	(__pbssBANK3+4)& (0+127)
  3750                           
  3751                           ; Clear objects allocated to BANK4
  3752  0464  3020               	movlw	low __pbssBANK4
  3753  0465  0084               	movwf	4
  3754  0466  3002               	movlw	high __pbssBANK4
  3755  0467  0085               	movwf	5
  3756  0468  3029               	movlw	41
  3757  0469  00FE               	movwf	btemp
  3758  046A  3000               	movlw	0
  3759  046B  00FF               	movwf	btemp+1
  3760  046C  31AB  2308  3184   	fcall	clear_ram0
  3761                           
  3762                           ; Clear objects allocated to BANK5
  3763  046F  30A0               	movlw	low __pbssBANK5
  3764  0470  0084               	movwf	4
  3765  0471  3002               	movlw	high __pbssBANK5
  3766  0472  0085               	movwf	5
  3767  0473  3035               	movlw	53
  3768  0474  00FE               	movwf	btemp
  3769  0475  3000               	movlw	0
  3770  0476  00FF               	movwf	btemp+1
  3771  0477  31AB  2308  3184   	fcall	clear_ram0
  3772                           
  3773                           ; Clear objects allocated to BANK6
  3774  047A  3020               	movlw	low __pbssBANK6
  3775  047B  0084               	movwf	4
  3776  047C  3003               	movlw	high __pbssBANK6
  3777  047D  0085               	movwf	5
  3778  047E  302C               	movlw	44
  3779  047F  00FE               	movwf	btemp
  3780  0480  3000               	movlw	0
  3781  0481  00FF               	movwf	btemp+1
  3782  0482  31AB  2308  3184   	fcall	clear_ram0
  3783                           
  3784                           ; Clear objects allocated to BANK7
  3785  0485  30A0               	movlw	low __pbssBANK7
  3786  0486  0084               	movwf	4
  3787  0487  3003               	movlw	high __pbssBANK7
  3788  0488  0085               	movwf	5
  3789  0489  3040               	movlw	64
  3790  048A  00FE               	movwf	btemp
  3791  048B  3000               	movlw	0
  3792  048C  00FF               	movwf	btemp+1
  3793  048D  31AB  2308  3184   	fcall	clear_ram0
  3794                           
  3795                           ; Clear objects allocated to BANK8
  3796  0490  3020               	movlw	low __pbssBANK8
  3797  0491  0084               	movwf	4
  3798  0492  3004               	movlw	high __pbssBANK8
  3799  0493  0085               	movwf	5
  3800  0494  3040               	movlw	64
  3801  0495  00FE               	movwf	btemp
  3802  0496  3000               	movlw	0
  3803  0497  00FF               	movwf	btemp+1
  3804  0498  31AB  2308  3184   	fcall	clear_ram0
  3805                           
  3806                           ; Initialize objects allocated to BANK1
  3807  049B  3023               	movlw	low __pidataBANK1
  3808  049C  0084               	movwf	4
  3809  049D  30AB               	movlw	(high __pidataBANK1)| (0+128)
  3810  049E  0085               	movwf	5
  3811  049F  30D3               	movlw	low __pdataBANK1
  3812  04A0  0086               	movwf	6
  3813  04A1  3000               	movlw	high __pdataBANK1
  3814  04A2  0087               	movwf	7
  3815  04A3  3000               	movlw	0
  3816  04A4  00FF               	movwf	btemp+1
  3817  04A5  300F               	movlw	15
  3818  04A6  31AA  22FC  3184   	fcall	init_ram
  3819                           
  3820                           ; Initialize objects allocated to BANK3
  3821  04A9  3198  2001  3184   	fcall	__pidataBANK3	;fetch initializer
  3822  04AC  00EF               	movwf	__pdataBANK3& (0+127)
  3823                           
  3824                           ; Initialize objects allocated to BANK4
  3825  04AD  3019               	movlw	low __pidataBANK4
  3826  04AE  0084               	movwf	4
  3827  04AF  30AC               	movlw	(high __pidataBANK4)| (0+128)
  3828  04B0  0085               	movwf	5
  3829  04B1  3049               	movlw	low __pdataBANK4
  3830  04B2  0086               	movwf	6
  3831  04B3  3002               	movlw	high __pdataBANK4
  3832  04B4  0087               	movwf	7
  3833  04B5  3000               	movlw	0
  3834  04B6  00FF               	movwf	btemp+1
  3835  04B7  301E               	movlw	30
  3836  04B8  31AA  22FC  3184   	fcall	init_ram
  3837                           
  3838                           ; Initialize objects allocated to BANK5
  3839  04BB  0025               	movlb	5	; select bank5
  3840  04BC  3180  2002  3184   	fcall	__pidataBANK5	;fetch initializer
  3841  04BF  00E3               	movwf	__pdataBANK5& (0+127)
  3842  04C0  3180  2003         	fcall	__pidataBANK5+1	;fetch initializer
  3843  04C2  00E4               	movwf	(__pdataBANK5+1)& (0+127)
  3844  04C3                     end_of_initialization:	
  3845                           ;End of C runtime variable initialization code
  3846                           
  3847  04C3                     __end_of__initialization:	
  3848  04C3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3849  04C4  0020               	movlb	0
  3850  04C5  318C  2C0A         	ljmp	_main	;jump to C main() function
  3851                           
  3852                           	psect	bssBANK1
  3853  00C1                     __pbssBANK1:	
  3854  00C1                     _sub_timer:	
  3855  00C1                     	ds	4
  3856  00C5                     _tap_timer:	
  3857  00C5                     	ds	4
  3858  00C9                     _timer:	
  3859  00C9                     	ds	4
  3860  00CD                     _UQEnd:	
  3861  00CD                     	ds	1
  3862  00CE                     _UQFront:	
  3863  00CE                     	ds	1
  3864  00CF                     _doubleTap_state:	
  3865  00CF                     	ds	1
  3866  00D0                     _mode2_state:	
  3867  00D0                     	ds	1
  3868  00D1                     _presetSaveMode:	
  3869  00D1                     	ds	1
  3870  00D2                     _suspend_blink:	
  3871  00D2                     	ds	1
  3872                           
  3873                           	psect	dataBANK1
  3874  00D3                     __pdataBANK1:	
  3875  00D3                     _baseline_delay_time:	
  3876  00D3                     	ds	4
  3877  00D7                     _bottom_push_state:	
  3878  00D7                     	ds	2
  3879  00D9                     _long_press_limit:	
  3880  00D9                     	ds	2
  3881  00DB                     _top_push_state:	
  3882  00DB                     	ds	2
  3883  00DD                     _blink_rate:	
  3884  00DD                     	ds	1
  3885  00DE                     _feedback_state:	
  3886  00DE                     	ds	1
  3887  00DF                     _longTap_state:	
  3888  00DF                     	ds	1
  3889  00E0                     _num_taps:	
  3890  00E0                     	ds	1
  3891  00E1                     _switchBypass_state:	
  3892  00E1                     	ds	1
  3893                           
  3894                           	psect	bssBANK3
  3895  01EA                     __pbssBANK3:	
  3896  01EA                     _mod_counter:	
  3897  01EA                     	ds	2
  3898  01EC                     _feedback_start:	
  3899  01EC                     	ds	1
  3900  01ED                     _longTap_start:	
  3901  01ED                     	ds	1
  3902  01EE                     _switchTap_pressed:	
  3903  01EE                     	ds	1
  3904                           
  3905                           	psect	dataBANK3
  3906  01EF                     __pdataBANK3:	
  3907  01EF                     _presetChannel:	
  3908  01EF                     	ds	1
  3909                           
  3910                           	psect	bssBANK4
  3911  0220                     __pbssBANK4:	
  3912  0220                     _double_timer:	
  3913  0220                     	ds	4
  3914  0224                     _mod_timer:	
  3915  0224                     	ds	4
  3916  0228                     _debounce_mode1:	
  3917  0228                     	ds	2
  3918  022A                     _debounce_mode2:	
  3919  022A                     	ds	2
  3920  022C                     _feedback_timer:	
  3921  022C                     	ds	2
  3922  022E                     _knob_1_pos:	
  3923  022E                     	ds	2
  3924  0230                     _knob_2_pos:	
  3925  0230                     	ds	2
  3926  0232                     _knob_3_pos:	
  3927  0232                     	ds	2
  3928  0234                     _knob_4_pos:	
  3929  0234                     	ds	2
  3930  0236                     _knob_5_pos:	
  3931  0236                     	ds	2
  3932  0238                     _longTap_timer:	
  3933  0238                     	ds	2
  3934  023A                     _mod_value:	
  3935  023A                     	ds	2
  3936  023C                     _switchBypass_pressed:	
  3937  023C                     	ds	2
  3938  023E                     _adjust_sub_delay:	
  3939  023E                     	ds	1
  3940  023F                     _bottomTactile_pressed:	
  3941  023F                     	ds	1
  3942  0240                     _bypass_turning_on:	
  3943  0240                     	ds	1
  3944  0241                     _iCnt:	
  3945  0241                     	ds	1
  3946  0242                     _mode1_state:	
  3947  0242                     	ds	1
  3948  0243                     _modulation_changed:	
  3949  0243                     	ds	1
  3950  0244                     _preset_blink:	
  3951  0244                     	ds	1
  3952  0245                     _preset_programmning_on:	
  3953  0245                     	ds	1
  3954  0246                     _reset_sub_delay:	
  3955  0246                     	ds	1
  3956  0247                     _switchTap_down:	
  3957  0247                     	ds	1
  3958  0248                     _topTactile_pressed:	
  3959  0248                     	ds	1
  3960                           
  3961                           	psect	dataBANK4
  3962  0249                     __pdataBANK4:	
  3963  0249                     _delay_time:	
  3964  0249                     	ds	4
  3965  024D                     _blink_delay:	
  3966  024D                     	ds	2
  3967  024F                     _knob1_prev:	
  3968  024F                     	ds	2
  3969  0251                     _knob2_prev:	
  3970  0251                     	ds	2
  3971  0253                     _knob3_prev:	
  3972  0253                     	ds	2
  3973  0255                     _knob4_prev:	
  3974  0255                     	ds	2
  3975  0257                     _knob5_prev:	
  3976  0257                     	ds	2
  3977  0259                     _mod_delay_time:	
  3978  0259                     	ds	2
  3979  025B                     _symmetry:	
  3980  025B                     	ds	2
  3981  025D                     _tap_iteration:	
  3982  025D                     	ds	2
  3983  025F                     _blink_state:	
  3984  025F                     	ds	1
  3985  0260                     _currentBypassState:	
  3986  0260                     	ds	1
  3987  0261                     _delay_time_changed:	
  3988  0261                     	ds	1
  3989  0262                     _expSwitchState:	
  3990  0262                     	ds	1
  3991  0263                     _expressModeCnst:	
  3992  0263                     	ds	1
  3993  0264                     _expressionChannel:	
  3994  0264                     	ds	1
  3995  0265                     _presetModeCnst:	
  3996  0265                     	ds	1
  3997  0266                     _switchTap_state:	
  3998  0266                     	ds	1
  3999                           
  4000                           	psect	bssBANK5
  4001  02A0                     __pbssBANK5:	
  4002  02A0                     _tap_history:	
  4003  02A0                     	ds	20
  4004  02B4                     USARTWriteInt@F3536:	
  4005  02B4                     	ds	5
  4006  02B9                     _ledState:	
  4007  02B9                     	ds	4
  4008  02BD                     _tap_total:	
  4009  02BD                     	ds	4
  4010  02C1                     _test_timer:	
  4011  02C1                     	ds	4
  4012  02C5                     _adjusted_pot_value:	
  4013  02C5                     	ds	2
  4014  02C7                     _debounce_bypass:	
  4015  02C7                     	ds	2
  4016  02C9                     _debounce_count:	
  4017  02C9                     	ds	2
  4018  02CB                     _delay_counter:	
  4019  02CB                     	ds	2
  4020  02CD                     _delayfound:	
  4021  02CD                     	ds	2
  4022  02CF                     _errno:	
  4023  02CF                     	ds	2
  4024  02D1                     _switchBypass_toggle:	
  4025  02D1                     	ds	2
  4026  02D3                     _tmpVal:	
  4027  02D3                     	ds	2
  4028                           
  4029                           	psect	dataBANK5
  4030  02E3                     __pdataBANK5:	
  4031  02E3                     _switchBypass_up:	
  4032  02E3                     	ds	2
  4033                           
  4034                           	psect	bssBANK6
  4035  0320                     __pbssBANK6:	
  4036  0320                     _tap:	
  4037  0320                     	ds	44
  4038                           
  4039                           	psect	bssBANK7
  4040  03A0                     __pbssBANK7:	
  4041  03A0                     _URBuff:	
  4042  03A0                     	ds	64
  4043                           
  4044                           	psect	bssBANK8
  4045  0420                     __pbssBANK8:	
  4046  0420                     _myBuf:	
  4047  0420                     	ds	64
  4048                           
  4049                           	psect	clrtext
  4050  2B08                     clear_ram0:	
  4051                           ;	Called with FSR0 containing the base address, and
  4052                           ;	btemp/btemp+1 has the size to clear
  4053                           
  4054  2B08  0064               	clrwdt	;clear the watchdog before getting into this loop
  4055  2B09                     clrloop0:	
  4056  2B09  0180               	clrf	0	;clear RAM location pointed to by FSR
  4057  2B0A  3101               	addfsr 0,1
  4058  2B0B  3001               	movlw	1
  4059  2B0C  02FE               	subwf	126,f
  4060  2B0D  3000               	movlw	0
  4061  2B0E  3BFF               	subwfb	127,f
  4062  2B0F  087F               	movf	127,w
  4063  2B10  047E               	iorwf	126,w
  4064  2B11  1903               	btfsc	3,2
  4065  2B12  3400               	retlw	0	;all done for this memory range, return
  4066  2B13  2B09               	goto	clrloop0	;have we reached the end yet?
  4067                           
  4068                           	psect	inittext
  4069  2AFC                     init_ram:	
  4070  2AFC  00FE               	movwf	126
  4071  2AFD                     initloop:	
  4072  2AFD  0012               	moviw fsr0++
  4073  2AFE  001E               	movwi fsr1++
  4074  2AFF  3001               	movlw	1
  4075  2B00  02FE               	subwf	126,f
  4076  2B01  3000               	movlw	0
  4077  2B02  3BFF               	subwfb	127,f
  4078  2B03  087F               	movf	127,w
  4079  2B04  047E               	iorwf	126,w
  4080  2B05  1903               	btfsc	3,2
  4081  2B06  3400               	retlw	0
  4082  2B07  2AFD               	goto	initloop
  4083                           
  4084                           	psect	cstackBANK5
  4085  02D5                     __pcstackBANK5:	
  4086  02D5                     ??_main:	
  4087                           
  4088                           ; 1 bytes @ 0x0
  4089  02D5                     	ds	5
  4090  02DA                     _main$2788:	
  4091                           
  4092                           ; 3 bytes @ 0x5
  4093  02DA                     	ds	3
  4094  02DD                     _main$2789:	
  4095                           
  4096                           ; 3 bytes @ 0x8
  4097  02DD                     	ds	3
  4098  02E0                     _main$2790:	
  4099                           
  4100                           ; 3 bytes @ 0xB
  4101  02E0                     	ds	3
  4102                           
  4103                           	psect	cstackBANK4
  4104  0267                     __pcstackBANK4:	
  4105  0267                     scaleA100kPot@pwm:	
  4106  0267                     scaleA10kPot@pwm:	
  4107                           ; 3 bytes @ 0x0
  4108                           
  4109  0267                     scaleiA10kPot@pwm:	
  4110                           ; 3 bytes @ 0x0
  4111                           
  4112                           
  4113                           ; 3 bytes @ 0x0
  4114  0267                     	ds	3
  4115  026A                     _scaleA100kPot$2793:	
  4116  026A                     _scaleA10kPot$2797:	
  4117                           ; 3 bytes @ 0x3
  4118                           
  4119  026A                     _scaleiA10kPot$2799:	
  4120                           ; 3 bytes @ 0x3
  4121                           
  4122                           
  4123                           ; 3 bytes @ 0x3
  4124  026A                     	ds	3
  4125  026D                     _scaleA100kPot$2794:	
  4126  026D                     _scaleA10kPot$2798:	
  4127                           ; 3 bytes @ 0x6
  4128                           
  4129  026D                     _scaleiA10kPot$2800:	
  4130                           ; 3 bytes @ 0x6
  4131                           
  4132                           
  4133                           ; 3 bytes @ 0x6
  4134  026D                     	ds	3
  4135                           
  4136                           	psect	cstackBANK3
  4137  01A0                     __pcstackBANK3:	
  4138  01A0                     ?___fttol:	
  4139  01A0                     ___fttol@f1:	
  4140                           ; 4 bytes @ 0x0
  4141                           
  4142                           
  4143                           ; 3 bytes @ 0x0
  4144  01A0                     	ds	4
  4145  01A4                     ??___fttol:	
  4146                           
  4147                           ; 1 bytes @ 0x4
  4148  01A4                     	ds	4
  4149  01A8                     ___fttol@sign1:	
  4150                           
  4151                           ; 1 bytes @ 0x8
  4152  01A8                     	ds	1
  4153  01A9                     ___fttol@lval:	
  4154                           
  4155                           ; 4 bytes @ 0x9
  4156  01A9                     	ds	4
  4157  01AD                     ___fttol@exp1:	
  4158                           
  4159                           ; 1 bytes @ 0xD
  4160  01AD                     	ds	1
  4161  01AE                     ?___wmul:	
  4162  01AE                     ?___altoft:	
  4163                           ; 2 bytes @ 0xE
  4164                           
  4165  01AE                     ___wmul@multiplier:	
  4166                           ; 3 bytes @ 0xE
  4167                           
  4168  01AE                     ___altoft@c:	
  4169                           ; 2 bytes @ 0xE
  4170                           
  4171                           
  4172                           ; 4 bytes @ 0xE
  4173  01AE                     	ds	2
  4174  01B0                     ___wmul@multiplicand:	
  4175                           
  4176                           ; 2 bytes @ 0x10
  4177  01B0                     	ds	2
  4178  01B2                     ??___altoft:	
  4179  01B2                     ___wmul@product:	
  4180                           ; 1 bytes @ 0x12
  4181                           
  4182                           
  4183                           ; 2 bytes @ 0x12
  4184  01B2                     	ds	2
  4185  01B4                     ?_modSin:	
  4186  01B4                     ?_eval_poly:	
  4187                           ; 2 bytes @ 0x14
  4188                           
  4189  01B4                     ___altoft@exp:	
  4190                           ; 3 bytes @ 0x14
  4191                           
  4192  01B4                     modSin@angle:	
  4193                           ; 1 bytes @ 0x14
  4194                           
  4195  01B4                     eval_poly@x:	
  4196                           ; 3 bytes @ 0x14
  4197                           
  4198                           
  4199                           ; 3 bytes @ 0x14
  4200  01B4                     	ds	1
  4201  01B5                     ___altoft@sign:	
  4202                           
  4203                           ; 1 bytes @ 0x15
  4204  01B5                     	ds	1
  4205  01B6                     ?_trunc:	
  4206  01B6                     ?_floor:	
  4207                           ; 3 bytes @ 0x16
  4208                           
  4209  01B6                     trunc@x:	
  4210                           ; 3 bytes @ 0x16
  4211                           
  4212  01B6                     floor@x:	
  4213                           ; 3 bytes @ 0x16
  4214                           
  4215                           
  4216                           ; 3 bytes @ 0x16
  4217  01B6                     	ds	1
  4218  01B7                     eval_poly@d:	
  4219  01B7                     modSin@inflection:	
  4220                           ; 2 bytes @ 0x17
  4221                           
  4222                           
  4223                           ; 3 bytes @ 0x17
  4224  01B7                     	ds	2
  4225  01B9                     ??_trunc:	
  4226  01B9                     ??_floor:	
  4227                           ; 1 bytes @ 0x19
  4228                           
  4229  01B9                     eval_poly@n:	
  4230                           ; 1 bytes @ 0x19
  4231                           
  4232                           
  4233                           ; 2 bytes @ 0x19
  4234  01B9                     	ds	1
  4235  01BA                     ??_modSin:	
  4236  01BA                     trunc@i:	
  4237                           ; 1 bytes @ 0x1A
  4238                           
  4239  01BA                     floor@i:	
  4240                           ; 3 bytes @ 0x1A
  4241                           
  4242                           
  4243                           ; 3 bytes @ 0x1A
  4244  01BA                     	ds	1
  4245  01BB                     eval_poly@res:	
  4246                           
  4247                           ; 3 bytes @ 0x1B
  4248  01BB                     	ds	1
  4249  01BC                     _modSin$2801:	
  4250                           
  4251                           ; 3 bytes @ 0x1C
  4252  01BC                     	ds	1
  4253  01BD                     trunc@expon:	
  4254  01BD                     floor@expon:	
  4255                           ; 2 bytes @ 0x1D
  4256                           
  4257                           
  4258                           ; 2 bytes @ 0x1D
  4259  01BD                     	ds	1
  4260  01BE                     ?_log:	
  4261  01BE                     ?_ldexp:	
  4262                           ; 3 bytes @ 0x1E
  4263                           
  4264  01BE                     ldexp@value:	
  4265                           ; 3 bytes @ 0x1E
  4266                           
  4267  01BE                     log@x:	
  4268                           ; 3 bytes @ 0x1E
  4269                           
  4270                           
  4271                           ; 3 bytes @ 0x1E
  4272  01BE                     	ds	1
  4273  01BF                     ?_set_subdivision:	
  4274  01BF                     ?___ftsub:	
  4275                           ; 2 bytes @ 0x1F
  4276                           
  4277  01BF                     set_subdivision@x:	
  4278                           ; 3 bytes @ 0x1F
  4279                           
  4280  01BF                     modSin@shift:	
  4281                           ; 2 bytes @ 0x1F
  4282                           
  4283  01BF                     ___ftsub@f2:	
  4284                           ; 3 bytes @ 0x1F
  4285                           
  4286                           
  4287                           ; 3 bytes @ 0x1F
  4288  01BF                     	ds	2
  4289  01C1                     ??_log:	
  4290  01C1                     set_subdivision@y:	
  4291                           ; 1 bytes @ 0x21
  4292                           
  4293  01C1                     ldexp@newexp:	
  4294                           ; 2 bytes @ 0x21
  4295                           
  4296                           
  4297                           ; 2 bytes @ 0x21
  4298  01C1                     	ds	1
  4299  01C2                     log@exponent:	
  4300  01C2                     modSin@period:	
  4301                           ; 2 bytes @ 0x22
  4302                           
  4303  01C2                     ___ftsub@f1:	
  4304                           ; 3 bytes @ 0x22
  4305                           
  4306                           
  4307                           ; 3 bytes @ 0x22
  4308  01C2                     	ds	1
  4309  01C3                     ??_set_subdivision:	
  4310  01C3                     ??_ldexp:	
  4311                           ; 1 bytes @ 0x23
  4312                           
  4313                           
  4314                           ; 1 bytes @ 0x23
  4315  01C3                     	ds	2
  4316  01C5                     ?_sin:	
  4317  01C5                     modSin@tmpVal:	
  4318                           ; 3 bytes @ 0x25
  4319                           
  4320  01C5                     sin@f:	
  4321                           ; 3 bytes @ 0x25
  4322                           
  4323  01C5                     _ldexp$2596:	
  4324                           ; 3 bytes @ 0x25
  4325                           
  4326                           
  4327                           ; 3 bytes @ 0x25
  4328  01C5                     	ds	1
  4329  01C6                     set_subdivision@scalar:	
  4330                           
  4331                           ; 3 bytes @ 0x26
  4332  01C6                     	ds	2
  4333  01C8                     ??_sin:	
  4334  01C8                     ?_exp:	
  4335                           ; 1 bytes @ 0x28
  4336                           
  4337  01C8                     exp@x:	
  4338                           ; 3 bytes @ 0x28
  4339                           
  4340                           
  4341                           ; 3 bytes @ 0x28
  4342  01C8                     	ds	1
  4343  01C9                     set_subdivision@tmpX:	
  4344  01C9                     sin@y:	
  4345                           ; 2 bytes @ 0x29
  4346                           
  4347                           
  4348                           ; 3 bytes @ 0x29
  4349  01C9                     	ds	2
  4350  01CB                     ??_exp:	
  4351                           
  4352                           ; 1 bytes @ 0x2B
  4353  01CB                     	ds	1
  4354  01CC                     _sin$2808:	
  4355  01CC                     _exp$2809:	
  4356                           ; 3 bytes @ 0x2C
  4357                           
  4358                           
  4359                           ; 3 bytes @ 0x2C
  4360  01CC                     	ds	3
  4361  01CF                     sin@x2:	
  4362  01CF                     _exp$2564:	
  4363                           ; 3 bytes @ 0x2F
  4364                           
  4365                           
  4366                           ; 3 bytes @ 0x2F
  4367  01CF                     	ds	3
  4368  01D2                     sin@sgn:	
  4369  01D2                     exp@exponent:	
  4370                           ; 1 bytes @ 0x32
  4371                           
  4372                           
  4373                           ; 2 bytes @ 0x32
  4374  01D2                     	ds	1
  4375  01D3                     ??_calcSinArray:	
  4376                           
  4377                           ; 1 bytes @ 0x33
  4378  01D3                     	ds	1
  4379  01D4                     exp@sign:	
  4380                           
  4381                           ; 1 bytes @ 0x34
  4382  01D4                     	ds	1
  4383  01D5                     ?_pow:	
  4384  01D5                     pow@x:	
  4385                           ; 3 bytes @ 0x35
  4386                           
  4387                           
  4388                           ; 3 bytes @ 0x35
  4389  01D5                     	ds	2
  4390  01D7                     calcSinArray@x:	
  4391                           
  4392                           ; 1 bytes @ 0x37
  4393  01D7                     	ds	1
  4394  01D8                     calcSinArray@tmpVal:	
  4395  01D8                     pow@y:	
  4396                           ; 3 bytes @ 0x38
  4397                           
  4398                           
  4399                           ; 3 bytes @ 0x38
  4400  01D8                     	ds	3
  4401  01DB                     ??_pow:	
  4402  01DB                     calcSinArray@iAngle:	
  4403                           ; 1 bytes @ 0x3B
  4404                           
  4405                           
  4406                           ; 1 bytes @ 0x3B
  4407  01DB                     	ds	1
  4408  01DC                     _pow$2806:	
  4409                           
  4410                           ; 3 bytes @ 0x3C
  4411  01DC                     	ds	3
  4412  01DF                     _pow$2807:	
  4413                           
  4414                           ; 3 bytes @ 0x3F
  4415  01DF                     	ds	3
  4416  01E2                     pow@sign:	
  4417                           
  4418                           ; 1 bytes @ 0x42
  4419  01E2                     	ds	1
  4420  01E3                     pow@yi:	
  4421                           
  4422                           ; 4 bytes @ 0x43
  4423  01E3                     	ds	4
  4424  01E7                     ?_scaleA10kPot:	
  4425  01E7                     ?_scaleiA10kPot:	
  4426                           ; 2 bytes @ 0x47
  4427                           
  4428  01E7                     ?_scaleA100kPot:	
  4429                           ; 2 bytes @ 0x47
  4430                           
  4431  01E7                     scaleA100kPot@input:	
  4432                           ; 2 bytes @ 0x47
  4433                           
  4434  01E7                     scaleA10kPot@input:	
  4435                           ; 3 bytes @ 0x47
  4436                           
  4437  01E7                     scaleiA10kPot@input:	
  4438                           ; 3 bytes @ 0x47
  4439                           
  4440                           
  4441                           ; 3 bytes @ 0x47
  4442  01E7                     	ds	3
  4443                           
  4444                           	psect	cstackBANK2
  4445  0120                     __pcstackBANK2:	
  4446  0120                     ?___ftge:	
  4447  0120                     ?_set_leds_top:	
  4448                           ; 1 bit 
  4449                           
  4450  0120                     ?_USARTInit:	
  4451                           ; 1 bytes @ 0x0
  4452                           
  4453  0120                     ??_ConfigureOscillator:	
  4454                           ; 1 bytes @ 0x0
  4455                           
  4456  0120                     ??_InitApp:	
  4457                           ; 1 bytes @ 0x0
  4458                           
  4459  0120                     ??_InitializeTaps:	
  4460                           ; 1 bytes @ 0x0
  4461                           
  4462  0120                     ??_init_adc:	
  4463                           ; 1 bytes @ 0x0
  4464                           
  4465  0120                     ??_init_pwm:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0120                     ??_init_timer2:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0120                     ??_init_timer0:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0120                     ?_set_leds_bottom:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0120                     ?_setFeedbackState:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0120                     ?_setLongTapState:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0120                     ?_updateSwitchBypassState:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0120                     ?_adc_convert:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0120                     ?_FLASH_ReadWord:	
  4490                           ; 2 bytes @ 0x0
  4491                           
  4492  0120                     ?_getSwitchBypassState:	
  4493                           ; 2 bytes @ 0x0
  4494                           
  4495  0120                     ?___ftpack:	
  4496                           ; 2 bytes @ 0x0
  4497                           
  4498  0120                     ?_frexp:	
  4499                           ; 3 bytes @ 0x0
  4500                           
  4501  0120                     ?___lmul:	
  4502                           ; 3 bytes @ 0x0
  4503                           
  4504  0120                     ?___aldiv:	
  4505                           ; 4 bytes @ 0x0
  4506                           
  4507  0120                     FLASH_ReadWord@flashAddr:	
  4508                           ; 4 bytes @ 0x0
  4509                           
  4510  0120                     set_leds_top@x:	
  4511                           ; 2 bytes @ 0x0
  4512                           
  4513  0120                     set_leds_bottom@x:	
  4514                           ; 2 bytes @ 0x0
  4515                           
  4516  0120                     updateSwitchBypassState@state:	
  4517                           ; 2 bytes @ 0x0
  4518                           
  4519  0120                     setFeedbackState@f_state:	
  4520                           ; 2 bytes @ 0x0
  4521                           
  4522  0120                     setLongTapState@f_state:	
  4523                           ; 2 bytes @ 0x0
  4524                           
  4525  0120                     USARTInit@baud_rate:	
  4526                           ; 2 bytes @ 0x0
  4527                           
  4528  0120                     ___ftpack@arg:	
  4529                           ; 2 bytes @ 0x0
  4530                           
  4531  0120                     ___ftge@ff1:	
  4532                           ; 3 bytes @ 0x0
  4533                           
  4534  0120                     frexp@value:	
  4535                           ; 3 bytes @ 0x0
  4536                           
  4537  0120                     ___lmul@multiplier:	
  4538                           ; 3 bytes @ 0x0
  4539                           
  4540  0120                     ___aldiv@divisor:	
  4541                           ; 4 bytes @ 0x0
  4542                           
  4543                           
  4544                           ; 4 bytes @ 0x0
  4545  0120                     	ds	1
  4546  0121                     InitializeTaps@itap:	
  4547                           
  4548                           ; 2 bytes @ 0x1
  4549  0121                     	ds	1
  4550  0122                     ??_USARTInit:	
  4551  0122                     ??_adc_convert:	
  4552                           ; 1 bytes @ 0x2
  4553                           
  4554  0122                     ??_FLASH_ReadWord:	
  4555                           ; 1 bytes @ 0x2
  4556                           
  4557  0122                     ??_set_leds_bottom:	
  4558                           ; 1 bytes @ 0x2
  4559                           
  4560  0122                     ??_setFeedbackState:	
  4561                           ; 1 bytes @ 0x2
  4562                           
  4563  0122                     ??_setLongTapState:	
  4564                           ; 1 bytes @ 0x2
  4565                           
  4566  0122                     ??_updateSwitchBypassState:	
  4567                           ; 1 bytes @ 0x2
  4568                           
  4569  0122                     ??_getSwitchBypassState:	
  4570                           ; 1 bytes @ 0x2
  4571                           
  4572  0122                     FLASH_ReadWord@GIEBitValue:	
  4573                           ; 1 bytes @ 0x2
  4574                           
  4575  0122                     set_leds_top@ledState:	
  4576                           ; 1 bytes @ 0x2
  4577                           
  4578                           
  4579                           ; 2 bytes @ 0x2
  4580  0122                     	ds	1
  4581  0123                     adc_convert@channel:	
  4582  0123                     ___ftpack@exp:	
  4583                           ; 1 bytes @ 0x3
  4584                           
  4585  0123                     frexp@eptr:	
  4586                           ; 1 bytes @ 0x3
  4587                           
  4588  0123                     ___ftge@ff2:	
  4589                           ; 1 bytes @ 0x3
  4590                           
  4591                           
  4592                           ; 3 bytes @ 0x3
  4593  0123                     	ds	1
  4594  0124                     ??_set_leds_top:	
  4595  0124                     ??_ReadSavedSettings:	
  4596                           ; 1 bytes @ 0x4
  4597                           
  4598  0124                     ??_resetRingLEDs:	
  4599                           ; 1 bytes @ 0x4
  4600                           
  4601  0124                     ??_setPresetDisplay:	
  4602                           ; 1 bytes @ 0x4
  4603                           
  4604  0124                     ??_setExpressionDisplay:	
  4605                           ; 1 bytes @ 0x4
  4606                           
  4607  0124                     ??_frexp:	
  4608                           ; 1 bytes @ 0x4
  4609                           
  4610  0124                     ___ftpack@sign:	
  4611                           ; 1 bytes @ 0x4
  4612                           
  4613  0124                     ___lmul@multiplicand:	
  4614                           ; 1 bytes @ 0x4
  4615                           
  4616  0124                     ___aldiv@dividend:	
  4617                           ; 4 bytes @ 0x4
  4618                           
  4619                           
  4620                           ; 4 bytes @ 0x4
  4621  0124                     	ds	1
  4622  0125                     ??___ftpack:	
  4623                           
  4624                           ; 1 bytes @ 0x5
  4625  0125                     	ds	1
  4626  0126                     ??___ftge:	
  4627  0126                     setPresetDisplay@ledChannel:	
  4628                           ; 1 bytes @ 0x6
  4629                           
  4630  0126                     setExpressionDisplay@ledChannel:	
  4631                           ; 1 bytes @ 0x6
  4632                           
  4633                           
  4634                           ; 1 bytes @ 0x6
  4635  0126                     	ds	1
  4636  0127                     ??_update_mode:	
  4637  0127                     ??_update_selectMode:	
  4638                           ; 1 bytes @ 0x7
  4639                           
  4640  0127                     ??_setPedalMode:	
  4641                           ; 1 bytes @ 0x7
  4642                           
  4643                           
  4644                           ; 1 bytes @ 0x7
  4645  0127                     	ds	1
  4646  0128                     ??___lmul:	
  4647  0128                     ??___aldiv:	
  4648                           ; 1 bytes @ 0x8
  4649                           
  4650  0128                     ?___awtoft:	
  4651                           ; 1 bytes @ 0x8
  4652                           
  4653  0128                     ?___lltoft:	
  4654                           ; 3 bytes @ 0x8
  4655                           
  4656  0128                     ___awtoft@c:	
  4657                           ; 3 bytes @ 0x8
  4658                           
  4659  0128                     ___lmul@product:	
  4660                           ; 2 bytes @ 0x8
  4661                           
  4662  0128                     ___lltoft@c:	
  4663                           ; 4 bytes @ 0x8
  4664                           
  4665                           
  4666                           ; 4 bytes @ 0x8
  4667  0128                     	ds	1
  4668  0129                     ___aldiv@counter:	
  4669                           
  4670                           ; 1 bytes @ 0x9
  4671  0129                     	ds	1
  4672  012A                     ___aldiv@sign:	
  4673                           
  4674                           ; 1 bytes @ 0xA
  4675  012A                     	ds	1
  4676  012B                     ??___awtoft:	
  4677  012B                     ___aldiv@quotient:	
  4678                           ; 1 bytes @ 0xB
  4679                           
  4680                           
  4681                           ; 4 bytes @ 0xB
  4682  012B                     	ds	1
  4683  012C                     ?_wait_ms:	
  4684  012C                     ??___lltoft:	
  4685                           ; 1 bytes @ 0xC
  4686                           
  4687  012C                     wait_ms@timeSec:	
  4688                           ; 1 bytes @ 0xC
  4689                           
  4690                           
  4691                           ; 2 bytes @ 0xC
  4692  012C                     	ds	1
  4693  012D                     ___awtoft@sign:	
  4694  012D                     ___lltoft@exp:	
  4695                           ; 1 bytes @ 0xD
  4696                           
  4697                           
  4698                           ; 1 bytes @ 0xD
  4699  012D                     	ds	1
  4700  012E                     ??_wait_ms:	
  4701  012E                     ?___ftdiv:	
  4702                           ; 1 bytes @ 0xE
  4703                           
  4704  012E                     ___ftdiv@f2:	
  4705                           ; 3 bytes @ 0xE
  4706                           
  4707  012E                     wait_ms@timemsl:	
  4708                           ; 3 bytes @ 0xE
  4709                           
  4710                           
  4711                           ; 4 bytes @ 0xE
  4712  012E                     	ds	3
  4713  0131                     ___ftdiv@f1:	
  4714                           
  4715                           ; 3 bytes @ 0x11
  4716  0131                     	ds	1
  4717  0132                     ??_read_bottom_tactile:	
  4718  0132                     ??_read_top_tactile:	
  4719                           ; 1 bytes @ 0x12
  4720                           
  4721  0132                     ??_solidring_tactiles:	
  4722                           ; 1 bytes @ 0x12
  4723                           
  4724  0132                     ??_ring_tactiles:	
  4725                           ; 1 bytes @ 0x12
  4726                           
  4727  0132                     ?_setSwitchBypassState:	
  4728                           ; 1 bytes @ 0x12
  4729                           
  4730  0132                     setSwitchBypassState@f_state:	
  4731                           ; 1 bytes @ 0x12
  4732                           
  4733                           
  4734                           ; 2 bytes @ 0x12
  4735  0132                     	ds	1
  4736  0133                     ring_tactiles@iLed:	
  4737                           
  4738                           ; 2 bytes @ 0x13
  4739  0133                     	ds	1
  4740  0134                     ??_setSwitchBypassState:	
  4741  0134                     ??___ftdiv:	
  4742                           ; 1 bytes @ 0x14
  4743                           
  4744  0134                     solidring_tactiles@ring_delay:	
  4745                           ; 1 bytes @ 0x14
  4746                           
  4747                           
  4748                           ; 1 bytes @ 0x14
  4749  0134                     	ds	1
  4750  0135                     ring_tactiles@iLed_1557:	
  4751                           
  4752                           ; 2 bytes @ 0x15
  4753  0135                     	ds	1
  4754  0136                     ??_initSwitchBypass:	
  4755  0136                     initSwitchBypass@initState:	
  4756                           ; 1 bytes @ 0x16
  4757                           
  4758                           
  4759                           ; 2 bytes @ 0x16
  4760  0136                     	ds	1
  4761  0137                     ??_showSave:	
  4762                           
  4763                           ; 1 bytes @ 0x17
  4764  0137                     	ds	1
  4765  0138                     ?_setDoublePressState:	
  4766  0138                     ___ftdiv@cntr:	
  4767                           ; 1 bytes @ 0x18
  4768                           
  4769  0138                     setDoublePressState@f_state:	
  4770                           ; 1 bytes @ 0x18
  4771                           
  4772                           
  4773                           ; 2 bytes @ 0x18
  4774  0138                     	ds	1
  4775  0139                     ___ftdiv@f3:	
  4776                           
  4777                           ; 3 bytes @ 0x19
  4778  0139                     	ds	1
  4779  013A                     ??_setDoublePressState:	
  4780                           
  4781                           ; 1 bytes @ 0x1A
  4782  013A                     	ds	2
  4783  013C                     ??_updateSwitchBypass:	
  4784  013C                     ??_updateSwitchTap:	
  4785                           ; 1 bytes @ 0x1C
  4786                           
  4787  013C                     ___ftdiv@exp:	
  4788                           ; 1 bytes @ 0x1C
  4789                           
  4790                           
  4791                           ; 1 bytes @ 0x1C
  4792  013C                     	ds	1
  4793  013D                     ___ftdiv@sign:	
  4794                           
  4795                           ; 1 bytes @ 0x1D
  4796  013D                     	ds	1
  4797  013E                     ?___ftneg:	
  4798  013E                     ___ftneg@f1:	
  4799                           ; 3 bytes @ 0x1E
  4800                           
  4801                           
  4802                           ; 3 bytes @ 0x1E
  4803  013E                     	ds	3
  4804  0141                     ??___ftneg:	
  4805  0141                     ?___ftadd:	
  4806                           ; 1 bytes @ 0x21
  4807                           
  4808  0141                     ___ftadd@f1:	
  4809                           ; 3 bytes @ 0x21
  4810                           
  4811                           
  4812                           ; 3 bytes @ 0x21
  4813  0141                     	ds	1
  4814  0142                     updateSwitchTap@tapCntDivisor:	
  4815                           
  4816                           ; 2 bytes @ 0x22
  4817  0142                     	ds	2
  4818  0144                     updateSwitchTap@iCnt:	
  4819  0144                     ___ftadd@f2:	
  4820                           ; 1 bytes @ 0x24
  4821                           
  4822                           
  4823                           ; 3 bytes @ 0x24
  4824  0144                     	ds	3
  4825  0147                     ??___ftadd:	
  4826                           
  4827                           ; 1 bytes @ 0x27
  4828  0147                     	ds	4
  4829  014B                     ___ftadd@sign:	
  4830                           
  4831                           ; 1 bytes @ 0x2B
  4832  014B                     	ds	1
  4833  014C                     ___ftadd@exp2:	
  4834                           
  4835                           ; 1 bytes @ 0x2C
  4836  014C                     	ds	1
  4837  014D                     ___ftadd@exp1:	
  4838                           
  4839                           ; 1 bytes @ 0x2D
  4840  014D                     	ds	1
  4841  014E                     ?___ftmul:	
  4842  014E                     ___ftmul@f1:	
  4843                           ; 3 bytes @ 0x2E
  4844                           
  4845                           
  4846                           ; 3 bytes @ 0x2E
  4847  014E                     	ds	3
  4848  0151                     ___ftmul@f2:	
  4849                           
  4850                           ; 3 bytes @ 0x31
  4851  0151                     	ds	3
  4852  0154                     ??___ftmul:	
  4853                           
  4854                           ; 1 bytes @ 0x34
  4855  0154                     	ds	4
  4856  0158                     ___ftmul@exp:	
  4857                           
  4858                           ; 1 bytes @ 0x38
  4859  0158                     	ds	1
  4860  0159                     ___ftmul@f3_as_product:	
  4861                           
  4862                           ; 3 bytes @ 0x39
  4863  0159                     	ds	3
  4864  015C                     ___ftmul@cntr:	
  4865                           
  4866                           ; 1 bytes @ 0x3C
  4867  015C                     	ds	1
  4868  015D                     ___ftmul@sign:	
  4869                           
  4870                           ; 1 bytes @ 0x3D
  4871  015D                     	ds	1
  4872  015E                     ?_map:	
  4873  015E                     map@x:	
  4874                           ; 3 bytes @ 0x3E
  4875                           
  4876                           
  4877                           ; 3 bytes @ 0x3E
  4878  015E                     	ds	3
  4879  0161                     map@in_min:	
  4880                           
  4881                           ; 3 bytes @ 0x41
  4882  0161                     	ds	3
  4883  0164                     map@in_max:	
  4884                           
  4885                           ; 3 bytes @ 0x44
  4886  0164                     	ds	3
  4887  0167                     map@out_min:	
  4888                           
  4889                           ; 3 bytes @ 0x47
  4890  0167                     	ds	3
  4891  016A                     map@out_max:	
  4892                           
  4893                           ; 3 bytes @ 0x4A
  4894  016A                     	ds	3
  4895  016D                     ??_map:	
  4896  016D                     _map$2791:	
  4897                           ; 1 bytes @ 0x4D
  4898                           
  4899                           
  4900                           ; 3 bytes @ 0x4D
  4901  016D                     	ds	3
  4902  0170                     ??_scaleA10kPot:	
  4903  0170                     ??_scaleiA10kPot:	
  4904                           ; 1 bytes @ 0x50
  4905                           
  4906  0170                     ??_scaleA100kPot:	
  4907                           ; 1 bytes @ 0x50
  4908                           
  4909  0170                     ??_eval_poly:	
  4910                           ; 1 bytes @ 0x50
  4911                           
  4912  0170                     ??___wmul:	
  4913                           ; 1 bytes @ 0x50
  4914                           
  4915  0170                     ??___ftsub:	
  4916                           ; 1 bytes @ 0x50
  4917                           
  4918                           
  4919                           	psect	cstackBANK1
  4920  00A0                     __pcstackBANK1:	
  4921                           ; 1 bytes @ 0x50
  4922                           
  4923  00A0                     _modTri$2912:	
  4924  00A0                     _modSaw$2913:	
  4925                           ; 3 bytes @ 0x0
  4926                           
  4927  00A0                     i1_modSin$2916:	
  4928                           ; 3 bytes @ 0x0
  4929                           
  4930                           
  4931                           ; 3 bytes @ 0x0
  4932  00A0                     	ds	3
  4933  00A3                     modTri@shift:	
  4934  00A3                     i1modSin@shift:	
  4935                           ; 3 bytes @ 0x3
  4936                           
  4937  00A3                     _modSaw$2914:	
  4938                           ; 3 bytes @ 0x3
  4939                           
  4940                           
  4941                           ; 3 bytes @ 0x3
  4942  00A3                     	ds	3
  4943  00A6                     modTri@period:	
  4944  00A6                     i1modSin@period:	
  4945                           ; 3 bytes @ 0x6
  4946                           
  4947  00A6                     _modSaw$2915:	
  4948                           ; 3 bytes @ 0x6
  4949                           
  4950                           
  4951                           ; 3 bytes @ 0x6
  4952  00A6                     	ds	3
  4953  00A9                     modSaw@mod:	
  4954  00A9                     modTri@tmpVal:	
  4955                           ; 2 bytes @ 0x9
  4956                           
  4957  00A9                     i1modSin@tmpVal:	
  4958                           ; 3 bytes @ 0x9
  4959                           
  4960                           
  4961                           ; 3 bytes @ 0x9
  4962  00A9                     	ds	2
  4963  00AB                     modSaw@shift:	
  4964                           
  4965                           ; 3 bytes @ 0xB
  4966  00AB                     	ds	3
  4967  00AE                     modSaw@period:	
  4968                           
  4969                           ; 3 bytes @ 0xE
  4970  00AE                     	ds	3
  4971  00B1                     ??_modSawRev:	
  4972                           
  4973                           ; 1 bytes @ 0x11
  4974  00B1                     	ds	2
  4975  00B3                     ??_isr:	
  4976                           
  4977                           ; 1 bytes @ 0x13
  4978  00B3                     	ds	9
  4979  00BC                     _isr$2911:	
  4980                           
  4981                           ; 3 bytes @ 0x1C
  4982  00BC                     	ds	3
  4983  00BF                     isr@tmpSubDelay:	
  4984                           
  4985                           ; 2 bytes @ 0x1F
  4986  00BF                     	ds	2
  4987                           
  4988                           	psect	cstackCOMMON
  4989  0070                     __pcstackCOMMON:	
  4990  0070                     ?i1___ftge:	
  4991  0070                     ?_calcSinArray:	
  4992                           ; 1 bit 
  4993                           
  4994  0070                     ?_ConfigureOscillator:	
  4995                           ; 1 bytes @ 0x0
  4996                           
  4997  0070                     ?_InitApp:	
  4998                           ; 1 bytes @ 0x0
  4999                           
  5000  0070                     ?_InitializeTaps:	
  5001                           ; 1 bytes @ 0x0
  5002                           
  5003  0070                     ?_initSwitchBypass:	
  5004                           ; 1 bytes @ 0x0
  5005                           
  5006  0070                     ?_ReadSavedSettings:	
  5007                           ; 1 bytes @ 0x0
  5008                           
  5009  0070                     ?_update_mode:	
  5010                           ; 1 bytes @ 0x0
  5011                           
  5012  0070                     ?_update_selectMode:	
  5013                           ; 1 bytes @ 0x0
  5014                           
  5015  0070                     ?_updateSwitchBypass:	
  5016                           ; 1 bytes @ 0x0
  5017                           
  5018  0070                     ?_updateSwitchTap:	
  5019                           ; 1 bytes @ 0x0
  5020                           
  5021  0070                     ?_read_bottom_tactile:	
  5022                           ; 1 bytes @ 0x0
  5023                           
  5024  0070                     ?_read_top_tactile:	
  5025                           ; 1 bytes @ 0x0
  5026                           
  5027  0070                     ?_init_adc:	
  5028                           ; 1 bytes @ 0x0
  5029                           
  5030  0070                     ?_init_pwm:	
  5031                           ; 1 bytes @ 0x0
  5032                           
  5033  0070                     ?_init_timer2:	
  5034                           ; 1 bytes @ 0x0
  5035                           
  5036  0070                     ?_init_timer0:	
  5037                           ; 1 bytes @ 0x0
  5038                           
  5039  0070                     ?_solidring_tactiles:	
  5040                           ; 1 bytes @ 0x0
  5041                           
  5042  0070                     ?_ring_tactiles:	
  5043                           ; 1 bytes @ 0x0
  5044                           
  5045  0070                     ?_resetRingLEDs:	
  5046                           ; 1 bytes @ 0x0
  5047                           
  5048  0070                     ?_setPedalMode:	
  5049                           ; 1 bytes @ 0x0
  5050                           
  5051  0070                     ?_setPresetDisplay:	
  5052                           ; 1 bytes @ 0x0
  5053                           
  5054  0070                     ?_setExpressionDisplay:	
  5055                           ; 1 bytes @ 0x0
  5056                           
  5057  0070                     ?_isr:	
  5058                           ; 1 bytes @ 0x0
  5059                           
  5060  0070                     ?_main:	
  5061                           ; 1 bytes @ 0x0
  5062                           
  5063  0070                     ?_showSave:	
  5064                           ; 1 bytes @ 0x0
  5065                           
  5066  0070                     ?i1_set_leds_top:	
  5067                           ; 1 bytes @ 0x0
  5068                           
  5069  0070                     ?___awdiv:	
  5070                           ; 1 bytes @ 0x0
  5071                           
  5072  0070                     ?i1___ftpack:	
  5073                           ; 2 bytes @ 0x0
  5074                           
  5075  0070                     ?i1___lmul:	
  5076                           ; 3 bytes @ 0x0
  5077                           
  5078  0070                     ___awdiv@divisor:	
  5079                           ; 4 bytes @ 0x0
  5080                           
  5081  0070                     i1set_leds_top@x:	
  5082                           ; 2 bytes @ 0x0
  5083                           
  5084  0070                     i1___ftpack@arg:	
  5085                           ; 2 bytes @ 0x0
  5086                           
  5087  0070                     i1___ftge@ff1:	
  5088                           ; 3 bytes @ 0x0
  5089                           
  5090  0070                     i1___lmul@multiplier:	
  5091                           ; 3 bytes @ 0x0
  5092                           
  5093                           
  5094                           ; 4 bytes @ 0x0
  5095  0070                     	ds	2
  5096  0072                     ___awdiv@dividend:	
  5097  0072                     i1set_leds_top@ledState:	
  5098                           ; 2 bytes @ 0x2
  5099                           
  5100                           
  5101                           ; 2 bytes @ 0x2
  5102  0072                     	ds	1
  5103  0073                     i1___ftpack@exp:	
  5104  0073                     i1___ftge@ff2:	
  5105                           ; 1 bytes @ 0x3
  5106                           
  5107                           
  5108                           ; 3 bytes @ 0x3
  5109  0073                     	ds	1
  5110  0074                     ??___awdiv:	
  5111  0074                     ??i1_set_leds_top:	
  5112                           ; 1 bytes @ 0x4
  5113                           
  5114  0074                     i1___ftpack@sign:	
  5115                           ; 1 bytes @ 0x4
  5116                           
  5117  0074                     i1___lmul@multiplicand:	
  5118                           ; 1 bytes @ 0x4
  5119                           
  5120                           
  5121                           ; 4 bytes @ 0x4
  5122  0074                     	ds	1
  5123  0075                     ??i1___ftpack:	
  5124  0075                     ___awdiv@counter:	
  5125                           ; 1 bytes @ 0x5
  5126                           
  5127                           
  5128                           ; 1 bytes @ 0x5
  5129  0075                     	ds	1
  5130  0076                     ??i1___ftge:	
  5131  0076                     ___awdiv@sign:	
  5132                           ; 1 bytes @ 0x6
  5133                           
  5134                           
  5135                           ; 1 bytes @ 0x6
  5136  0076                     	ds	1
  5137  0077                     ___awdiv@quotient:	
  5138                           
  5139                           ; 2 bytes @ 0x7
  5140  0077                     	ds	1
  5141  0078                     ??i1___lmul:	
  5142  0078                     ?i1___ftmul:	
  5143                           ; 1 bytes @ 0x8
  5144                           
  5145  0078                     i1___ftmul@f1:	
  5146                           ; 3 bytes @ 0x8
  5147                           
  5148  0078                     i1___lmul@product:	
  5149                           ; 3 bytes @ 0x8
  5150                           
  5151                           
  5152                           ; 4 bytes @ 0x8
  5153  0078                     	ds	3
  5154  007B                     i1___ftmul@f2:	
  5155                           
  5156                           ; 3 bytes @ 0xB
  5157  007B                     	ds	1
  5158  007C                     ??i1___aldiv:	
  5159                           
  5160                           ; 1 bytes @ 0xC
  5161  007C                     	ds	2
  5162  007E                     ??_modTri:	
  5163  007E                     ??_modSquare:	
  5164                           ; 1 bytes @ 0xE
  5165                           
  5166  007E                     ??_modSaw:	
  5167                           ; 1 bytes @ 0xE
  5168                           
  5169  007E                     ??i1___wmul:	
  5170                           ; 1 bytes @ 0xE
  5171                           
  5172  007E                     ??i1___ftneg:	
  5173                           ; 1 bytes @ 0xE
  5174                           
  5175                           
  5176                           	psect	cstackBANK0
  5177  0020                     __pcstackBANK0:	
  5178                           ; 1 bytes @ 0xE
  5179                           
  5180  0020                     ??i1___ftmul:	
  5181  0020                     ?i1___aldiv:	
  5182                           ; 1 bytes @ 0x0
  5183                           
  5184  0020                     i1___aldiv@divisor:	
  5185                           ; 4 bytes @ 0x0
  5186                           
  5187                           
  5188                           ; 4 bytes @ 0x0
  5189  0020                     	ds	4
  5190  0024                     i1___ftmul@exp:	
  5191  0024                     i1___aldiv@dividend:	
  5192                           ; 1 bytes @ 0x4
  5193                           
  5194                           
  5195                           ; 4 bytes @ 0x4
  5196  0024                     	ds	1
  5197  0025                     i1___ftmul@f3_as_product:	
  5198                           
  5199                           ; 3 bytes @ 0x5
  5200  0025                     	ds	3
  5201  0028                     i1___aldiv@counter:	
  5202  0028                     i1___ftmul@cntr:	
  5203                           ; 1 bytes @ 0x8
  5204                           
  5205                           
  5206                           ; 1 bytes @ 0x8
  5207  0028                     	ds	1
  5208  0029                     i1___aldiv@sign:	
  5209  0029                     i1___ftmul@sign:	
  5210                           ; 1 bytes @ 0x9
  5211                           
  5212                           
  5213                           ; 1 bytes @ 0x9
  5214  0029                     	ds	1
  5215  002A                     ?i1___ftneg:	
  5216  002A                     i1___ftneg@f1:	
  5217                           ; 3 bytes @ 0xA
  5218                           
  5219  002A                     i1___aldiv@quotient:	
  5220                           ; 3 bytes @ 0xA
  5221                           
  5222                           
  5223                           ; 4 bytes @ 0xA
  5224  002A                     	ds	3
  5225  002D                     ?i1___ftadd:	
  5226  002D                     i1___ftadd@f1:	
  5227                           ; 3 bytes @ 0xD
  5228                           
  5229                           
  5230                           ; 3 bytes @ 0xD
  5231  002D                     	ds	1
  5232  002E                     ?_modulation:	
  5233  002E                     modulation@x:	
  5234                           ; 4 bytes @ 0xE
  5235                           
  5236                           
  5237                           ; 4 bytes @ 0xE
  5238  002E                     	ds	2
  5239  0030                     i1___ftadd@f2:	
  5240                           
  5241                           ; 3 bytes @ 0x10
  5242  0030                     	ds	2
  5243  0032                     modulation@y:	
  5244                           
  5245                           ; 4 bytes @ 0x12
  5246  0032                     	ds	1
  5247  0033                     ??i1___ftadd:	
  5248                           
  5249                           ; 1 bytes @ 0x13
  5250  0033                     	ds	3
  5251  0036                     ??_modulation:	
  5252                           
  5253                           ; 1 bytes @ 0x16
  5254  0036                     	ds	1
  5255  0037                     i1___ftadd@sign:	
  5256                           
  5257                           ; 1 bytes @ 0x17
  5258  0037                     	ds	1
  5259  0038                     i1___ftadd@exp2:	
  5260                           
  5261                           ; 1 bytes @ 0x18
  5262  0038                     	ds	1
  5263  0039                     i1___ftadd@exp1:	
  5264                           
  5265                           ; 1 bytes @ 0x19
  5266  0039                     	ds	1
  5267  003A                     ?i1___ftdiv:	
  5268  003A                     i1___ftdiv@f2:	
  5269                           ; 3 bytes @ 0x1A
  5270                           
  5271                           
  5272                           ; 3 bytes @ 0x1A
  5273  003A                     	ds	3
  5274  003D                     i1___ftdiv@f1:	
  5275                           
  5276                           ; 3 bytes @ 0x1D
  5277  003D                     	ds	3
  5278  0040                     ??i1___ftdiv:	
  5279                           
  5280                           ; 1 bytes @ 0x20
  5281  0040                     	ds	4
  5282  0044                     i1___ftdiv@cntr:	
  5283                           
  5284                           ; 1 bytes @ 0x24
  5285  0044                     	ds	1
  5286  0045                     i1___ftdiv@f3:	
  5287                           
  5288                           ; 3 bytes @ 0x25
  5289  0045                     	ds	3
  5290  0048                     i1___ftdiv@exp:	
  5291                           
  5292                           ; 1 bytes @ 0x28
  5293  0048                     	ds	1
  5294  0049                     i1___ftdiv@sign:	
  5295                           
  5296                           ; 1 bytes @ 0x29
  5297  0049                     	ds	1
  5298  004A                     ?i1___fttol:	
  5299  004A                     i1___fttol@f1:	
  5300                           ; 4 bytes @ 0x2A
  5301                           
  5302                           
  5303                           ; 3 bytes @ 0x2A
  5304  004A                     	ds	4
  5305  004E                     ??i1___fttol:	
  5306                           
  5307                           ; 1 bytes @ 0x2E
  5308  004E                     	ds	4
  5309  0052                     i1___fttol@sign1:	
  5310                           
  5311                           ; 1 bytes @ 0x32
  5312  0052                     	ds	1
  5313  0053                     i1___fttol@lval:	
  5314                           
  5315                           ; 4 bytes @ 0x33
  5316  0053                     	ds	4
  5317  0057                     i1___fttol@exp1:	
  5318                           
  5319                           ; 1 bytes @ 0x37
  5320  0057                     	ds	1
  5321  0058                     ?i1___wmul:	
  5322  0058                     i1___wmul@multiplier:	
  5323                           ; 2 bytes @ 0x38
  5324                           
  5325                           
  5326                           ; 2 bytes @ 0x38
  5327  0058                     	ds	2
  5328  005A                     i1___wmul@multiplicand:	
  5329                           
  5330                           ; 2 bytes @ 0x3A
  5331  005A                     	ds	2
  5332  005C                     i1___wmul@product:	
  5333                           
  5334                           ; 2 bytes @ 0x3C
  5335  005C                     	ds	2
  5336  005E                     ?i1___awtoft:	
  5337  005E                     i1___awtoft@c:	
  5338                           ; 3 bytes @ 0x3E
  5339                           
  5340                           
  5341                           ; 2 bytes @ 0x3E
  5342  005E                     	ds	3
  5343  0061                     ??i1___awtoft:	
  5344                           
  5345                           ; 1 bytes @ 0x41
  5346  0061                     	ds	2
  5347  0063                     i1___awtoft@sign:	
  5348                           
  5349                           ; 1 bytes @ 0x43
  5350  0063                     	ds	1
  5351  0064                     ?_modTri:	
  5352  0064                     ?_modSquare:	
  5353                           ; 2 bytes @ 0x44
  5354                           
  5355  0064                     ?_modSaw:	
  5356                           ; 2 bytes @ 0x44
  5357                           
  5358  0064                     ?i1_modSin:	
  5359                           ; 2 bytes @ 0x44
  5360                           
  5361  0064                     modTri@angle:	
  5362                           ; 2 bytes @ 0x44
  5363                           
  5364  0064                     modSaw@angle:	
  5365                           ; 3 bytes @ 0x44
  5366                           
  5367  0064                     modSquare@angle:	
  5368                           ; 3 bytes @ 0x44
  5369                           
  5370  0064                     i1modSin@angle:	
  5371                           ; 3 bytes @ 0x44
  5372                           
  5373                           
  5374                           ; 3 bytes @ 0x44
  5375  0064                     	ds	3
  5376  0067                     modTri@inflection:	
  5377  0067                     modSaw@inflection:	
  5378                           ; 3 bytes @ 0x47
  5379                           
  5380  0067                     modSquare@inflection:	
  5381                           ; 3 bytes @ 0x47
  5382                           
  5383  0067                     i1modSin@inflection:	
  5384                           ; 3 bytes @ 0x47
  5385                           
  5386                           
  5387                           ; 3 bytes @ 0x47
  5388  0067                     	ds	3
  5389  006A                     ??i1_modSin:	
  5390  006A                     ?_modSawRev:	
  5391                           ; 1 bytes @ 0x4A
  5392                           
  5393  006A                     modSawRev@angle:	
  5394                           ; 2 bytes @ 0x4A
  5395                           
  5396                           
  5397                           ; 3 bytes @ 0x4A
  5398  006A                     	ds	3
  5399  006D                     modSawRev@inflection:	
  5400                           
  5401                           ; 3 bytes @ 0x4D
  5402  006D                     	ds	3
  5403                           
  5404                           	psect	maintext
  5405  0C0A                     __pmaintext:	
  5406 ;;
  5407 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5408 ;;
  5409 ;; *************** function _main *****************
  5410 ;; Defined at:
  5411 ;;		line 68 in file "main.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : B1F/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5426 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       5       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5428 ;;      Totals:         0       0       0       0       0       0      14       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5429 ;;Total ram usage:       14 bytes
  5430 ;; Hardware stack levels required when called:   11
  5431 ;; This function calls:
  5432 ;;		_ConfigureOscillator
  5433 ;;		_InitApp
  5434 ;;		_InitializeTaps
  5435 ;;		_ReadSavedSettings
  5436 ;;		_USARTInit
  5437 ;;		___awtoft
  5438 ;;		___fttol
  5439 ;;		_adc_convert
  5440 ;;		_calcSinArray
  5441 ;;		_initSwitchBypass
  5442 ;;		_map
  5443 ;;		_modSin
  5444 ;;		_read_bottom_tactile
  5445 ;;		_read_top_tactile
  5446 ;;		_scaleA100kPot
  5447 ;;		_scaleA10kPot
  5448 ;;		_scaleiA10kPot
  5449 ;;		_set_subdivision
  5450 ;;		_updateSwitchBypass
  5451 ;;		_updateSwitchTap
  5452 ;;		_update_mode
  5453 ;;		_update_selectMode
  5454 ;; This function is called by:
  5455 ;;		Startup code after reset
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _main
  5461  0C0A                     _main:	
  5462                           
  5463                           ;main.c: 71: calcSinArray();
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5467  0C0A  31A6  26EE  318C   	fcall	_calcSinArray
  5468                           
  5469                           ;main.c: 74: tmpVal = modSin(48, 180);
  5470  0C0D  3000               	movlw	0
  5471  0C0E  0023               	movlb	3	; select bank3
  5472  0C0F  00B4               	movwf	modSin@angle^(0+384)
  5473  0C10  3040               	movlw	64
  5474  0C11  00B5               	movwf	(modSin@angle+1)^(0+384)
  5475  0C12  3042               	movlw	66
  5476  0C13  00B6               	movwf	(modSin@angle+2)^(0+384)
  5477  0C14  3000               	movlw	0
  5478  0C15  00B7               	movwf	modSin@inflection^(0+384)
  5479  0C16  3034               	movlw	52
  5480  0C17  00B8               	movwf	(modSin@inflection+1)^(0+384)
  5481  0C18  3043               	movlw	67
  5482  0C19  00B9               	movwf	(modSin@inflection+2)^(0+384)
  5483  0C1A  3196  2654  318C   	fcall	_modSin
  5484  0C1D  0023               	movlb	3	; select bank3
  5485  0C1E  0835               	movf	(?_modSin+1)^(0+384),w
  5486  0C1F  0025               	movlb	5	; select bank5
  5487  0C20  00D4               	movwf	(_tmpVal+1)^(0+640)
  5488  0C21  0023               	movlb	3	; select bank3
  5489  0C22  0834               	movf	?_modSin^(0+384),w
  5490  0C23  0025               	movlb	5	; select bank5
  5491  0C24  00D3               	movwf	_tmpVal^(0+640)
  5492                           
  5493                           ;main.c: 75: __nop();
  5494  0C25  0000               	nop
  5495                           
  5496                           ;main.c: 76: tmpVal = modSin(48, 35);
  5497  0C26  3000               	movlw	0
  5498  0C27  0023               	movlb	3	; select bank3
  5499  0C28  00B4               	movwf	modSin@angle^(0+384)
  5500  0C29  3040               	movlw	64
  5501  0C2A  00B5               	movwf	(modSin@angle+1)^(0+384)
  5502  0C2B  3042               	movlw	66
  5503  0C2C  00B6               	movwf	(modSin@angle+2)^(0+384)
  5504  0C2D  3000               	movlw	0
  5505  0C2E  00B7               	movwf	modSin@inflection^(0+384)
  5506  0C2F  300C               	movlw	12
  5507  0C30  00B8               	movwf	(modSin@inflection+1)^(0+384)
  5508  0C31  3042               	movlw	66
  5509  0C32  00B9               	movwf	(modSin@inflection+2)^(0+384)
  5510  0C33  3196  2654  318C   	fcall	_modSin
  5511  0C36  0023               	movlb	3	; select bank3
  5512  0C37  0835               	movf	(?_modSin+1)^(0+384),w
  5513  0C38  0025               	movlb	5	; select bank5
  5514  0C39  00D4               	movwf	(_tmpVal+1)^(0+640)
  5515  0C3A  0023               	movlb	3	; select bank3
  5516  0C3B  0834               	movf	?_modSin^(0+384),w
  5517  0C3C  0025               	movlb	5	; select bank5
  5518  0C3D  00D3               	movwf	_tmpVal^(0+640)
  5519                           
  5520                           ;main.c: 77: __nop();
  5521  0C3E  0000               	nop
  5522                           
  5523                           ;main.c: 78: tmpVal = modSin(48, 310);
  5524  0C3F  3000               	movlw	0
  5525  0C40  0023               	movlb	3	; select bank3
  5526  0C41  00B4               	movwf	modSin@angle^(0+384)
  5527  0C42  3040               	movlw	64
  5528  0C43  00B5               	movwf	(modSin@angle+1)^(0+384)
  5529  0C44  3042               	movlw	66
  5530  0C45  00B6               	movwf	(modSin@angle+2)^(0+384)
  5531  0C46  3000               	movlw	0
  5532  0C47  00B7               	movwf	modSin@inflection^(0+384)
  5533  0C48  309B               	movlw	155
  5534  0C49  00B8               	movwf	(modSin@inflection+1)^(0+384)
  5535  0C4A  3043               	movlw	67
  5536  0C4B  00B9               	movwf	(modSin@inflection+2)^(0+384)
  5537  0C4C  3196  2654  318C   	fcall	_modSin
  5538  0C4F  0023               	movlb	3	; select bank3
  5539  0C50  0835               	movf	(?_modSin+1)^(0+384),w
  5540  0C51  0025               	movlb	5	; select bank5
  5541  0C52  00D4               	movwf	(_tmpVal+1)^(0+640)
  5542  0C53  0023               	movlb	3	; select bank3
  5543  0C54  0834               	movf	?_modSin^(0+384),w
  5544  0C55  0025               	movlb	5	; select bank5
  5545  0C56  00D3               	movwf	_tmpVal^(0+640)
  5546                           
  5547                           ;main.c: 79: __nop();
  5548  0C57  0000               	nop
  5549                           
  5550                           ;main.c: 91: USARTInit(31250);
  5551  0C58  3012               	movlw	18
  5552  0C59  0022               	movlb	2	; select bank2
  5553  0C5A  00A0               	movwf	USARTInit@baud_rate^(0+256)
  5554  0C5B  307A               	movlw	122
  5555  0C5C  00A1               	movwf	(USARTInit@baud_rate^(0+256)+1)
  5556  0C5D  31A0  2022  318C   	fcall	_USARTInit
  5557                           
  5558                           ;main.c: 92: ConfigureOscillator();
  5559  0C60  31AA  22CF  318C   	fcall	_ConfigureOscillator
  5560                           
  5561                           ;main.c: 93: InitApp();
  5562  0C63  31AD  254C  318C   	fcall	_InitApp
  5563                           
  5564                           ;main.c: 95: PORTEbits.RE0 = 1;
  5565  0C66  0020               	movlb	0	; select bank0
  5566  0C67  1410               	bsf	16,0	;volatile
  5567                           
  5568                           ;main.c: 96: PORTEbits.RE1 = 1;
  5569  0C68  1490               	bsf	16,1	;volatile
  5570                           
  5571                           ;main.c: 97: PORTDbits.RD6 = 1;
  5572  0C69  170F               	bsf	15,6	;volatile
  5573                           
  5574                           ;main.c: 98: PORTDbits.RD5 = 1;
  5575  0C6A  168F               	bsf	15,5	;volatile
  5576                           
  5577                           ;main.c: 99: PORTCbits.RC0 = 1;
  5578  0C6B  140E               	bsf	14,0	;volatile
  5579                           
  5580                           ;main.c: 100: PORTDbits.RD7 = 1;
  5581  0C6C  178F               	bsf	15,7	;volatile
  5582                           
  5583                           ;main.c: 102: InitializeTaps();
  5584  0C6D  31AC  249F  318C   	fcall	_InitializeTaps
  5585                           
  5586                           ;main.c: 103: initSwitchBypass();
  5587  0C70  31AB  2314  318C   	fcall	_initSwitchBypass
  5588                           
  5589                           ;main.c: 106: ReadSavedSettings();
  5590  0C73  3188  2007  318C   	fcall	_ReadSavedSettings
  5591  0C76                     l9389:	
  5592                           ;main.c: 108: while (1) {
  5593                           
  5594                           
  5595                           ;main.c: 111: update_mode();
  5596  0C76  31AE  2612  318C   	fcall	_update_mode
  5597                           
  5598                           ;main.c: 112: update_selectMode();
  5599  0C79  31A2  22C2  318C   	fcall	_update_selectMode
  5600                           
  5601                           ;main.c: 115: updateSwitchBypass();
  5602  0C7C  319F  2715  318C   	fcall	_updateSwitchBypass
  5603                           
  5604                           ;main.c: 116: if (presetSaveMode != 1) {
  5605  0C7F  0021               	movlb	1	; select bank1
  5606  0C80  0351               	decf	_presetSaveMode^(0+128),w
  5607  0C81  1903               	btfsc	3,2
  5608  0C82  2C86               	goto	l9399
  5609                           
  5610                           ;main.c: 117: updateSwitchTap();
  5611  0C83  3184  24C7  318C   	fcall	_updateSwitchTap
  5612  0C86                     l9399:	
  5613                           
  5614                           ;main.c: 118: }
  5615                           ;main.c: 120: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5616  0C86  0021               	movlb	1	; select bank1
  5617  0C87  0351               	decf	_presetSaveMode^(0+128),w
  5618  0C88  1903               	btfsc	3,2
  5619  0C89  2C95               	goto	l9405
  5620  0C8A  0850               	movf	_mode2_state^(0+128),w
  5621  0C8B  0024               	movlb	4	; select bank4
  5622  0C8C  0665               	xorwf	_presetModeCnst^(0+512),w
  5623  0C8D  1903               	skipnz
  5624  0C8E  2C95               	goto	l9405
  5625                           
  5626                           ;main.c: 121: read_bottom_tactile();
  5627  0C8F  31A1  213E  318C   	fcall	_read_bottom_tactile
  5628                           
  5629                           ;main.c: 122: read_top_tactile();
  5630  0C92  31A1  21D3  318C   	fcall	_read_top_tactile
  5631  0C95                     l9405:	
  5632                           
  5633                           ;main.c: 123: }
  5634                           ;main.c: 126: knob_1_pos = adc_convert(0);
  5635  0C95  3000               	movlw	0
  5636  0C96  31AB  235E  318C   	fcall	_adc_convert
  5637  0C99  0022               	movlb	2	; select bank2
  5638  0C9A  0821               	movf	(?_adc_convert+1)^(0+256),w
  5639  0C9B  0024               	movlb	4	; select bank4
  5640  0C9C  00AF               	movwf	(_knob_1_pos+1)^(0+512)
  5641  0C9D  0022               	movlb	2	; select bank2
  5642  0C9E  0820               	movf	?_adc_convert^(0+256),w
  5643  0C9F  0024               	movlb	4	; select bank4
  5644  0CA0  00AE               	movwf	_knob_1_pos^(0+512)
  5645                           
  5646                           ;main.c: 127: knob_2_pos = adc_convert(1);
  5647  0CA1  3001               	movlw	1
  5648  0CA2  31AB  235E  318C   	fcall	_adc_convert
  5649  0CA5  0022               	movlb	2	; select bank2
  5650  0CA6  0821               	movf	(?_adc_convert+1)^(0+256),w
  5651  0CA7  0024               	movlb	4	; select bank4
  5652  0CA8  00B1               	movwf	(_knob_2_pos+1)^(0+512)
  5653  0CA9  0022               	movlb	2	; select bank2
  5654  0CAA  0820               	movf	?_adc_convert^(0+256),w
  5655  0CAB  0024               	movlb	4	; select bank4
  5656  0CAC  00B0               	movwf	_knob_2_pos^(0+512)
  5657                           
  5658                           ;main.c: 128: knob_3_pos = adc_convert(2);
  5659  0CAD  3002               	movlw	2
  5660  0CAE  31AB  235E  318C   	fcall	_adc_convert
  5661  0CB1  0022               	movlb	2	; select bank2
  5662  0CB2  0821               	movf	(?_adc_convert+1)^(0+256),w
  5663  0CB3  0024               	movlb	4	; select bank4
  5664  0CB4  00B3               	movwf	(_knob_3_pos+1)^(0+512)
  5665  0CB5  0022               	movlb	2	; select bank2
  5666  0CB6  0820               	movf	?_adc_convert^(0+256),w
  5667  0CB7  0024               	movlb	4	; select bank4
  5668  0CB8  00B2               	movwf	_knob_3_pos^(0+512)
  5669                           
  5670                           ;main.c: 129: knob_4_pos = adc_convert(3);
  5671  0CB9  3003               	movlw	3
  5672  0CBA  31AB  235E  318C   	fcall	_adc_convert
  5673  0CBD  0022               	movlb	2	; select bank2
  5674  0CBE  0821               	movf	(?_adc_convert+1)^(0+256),w
  5675  0CBF  0024               	movlb	4	; select bank4
  5676  0CC0  00B5               	movwf	(_knob_4_pos+1)^(0+512)
  5677  0CC1  0022               	movlb	2	; select bank2
  5678  0CC2  0820               	movf	?_adc_convert^(0+256),w
  5679  0CC3  0024               	movlb	4	; select bank4
  5680  0CC4  00B4               	movwf	_knob_4_pos^(0+512)
  5681                           
  5682                           ;main.c: 130: knob_5_pos = adc_convert(4);
  5683  0CC5  3004               	movlw	4
  5684  0CC6  31AB  235E  318C   	fcall	_adc_convert
  5685  0CC9  0022               	movlb	2	; select bank2
  5686  0CCA  0821               	movf	(?_adc_convert+1)^(0+256),w
  5687  0CCB  0024               	movlb	4	; select bank4
  5688  0CCC  00B7               	movwf	(_knob_5_pos+1)^(0+512)
  5689  0CCD  0022               	movlb	2	; select bank2
  5690  0CCE  0820               	movf	?_adc_convert^(0+256),w
  5691  0CCF  0024               	movlb	4	; select bank4
  5692  0CD0  00B6               	movwf	_knob_5_pos^(0+512)
  5693                           
  5694                           ;main.c: 134: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5695  0CD1  094F               	comf	_knob1_prev^(0+512),w	;volatile
  5696  0CD2  0025               	movlb	5	; select bank5
  5697  0CD3  00D5               	movwf	??_main^(0+640)
  5698  0CD4  0024               	movlb	4	; select bank4
  5699  0CD5  0950               	comf	(_knob1_prev+1)^(0+512),w	;volatile
  5700  0CD6  0025               	movlb	5	; select bank5
  5701  0CD7  00D6               	movwf	(??_main^(0+640)+1)
  5702  0CD8  0AD5               	incf	??_main^(0+640),f
  5703  0CD9  1903               	skipnz
  5704  0CDA  0AD6               	incf	(??_main^(0+640)+1),f
  5705  0CDB  0024               	movlb	4	; select bank4
  5706  0CDC  082E               	movf	_knob_1_pos^(0+512),w
  5707  0CDD  0025               	movlb	5	; select bank5
  5708  0CDE  0755               	addwf	??_main^(0+640),w
  5709  0CDF  00D7               	movwf	(??_main+2)^(0+640)
  5710  0CE0  0024               	movlb	4	; select bank4
  5711  0CE1  082F               	movf	(_knob_1_pos+1)^(0+512),w
  5712  0CE2  0025               	movlb	5	; select bank5
  5713  0CE3  3D56               	addwfc	(??_main+1)^(0+640),w
  5714  0CE4  00D8               	movwf	(??_main+3)^(0+640)
  5715  0CE5  0858               	movf	(??_main+3)^(0+640),w
  5716  0CE6  3A80               	xorlw	128
  5717  0CE7  00D9               	movwf	(??_main+4)^(0+640)
  5718  0CE8  3080               	movlw	128
  5719  0CE9  0259               	subwf	(??_main+4)^(0+640),w
  5720  0CEA  1D03               	skipz
  5721  0CEB  2CEE               	goto	u11025
  5722  0CEC  3004               	movlw	4
  5723  0CED  0257               	subwf	(??_main+2)^(0+640),w
  5724  0CEE                     u11025:	
  5725  0CEE  1803               	skipnc
  5726  0CEF  2D10               	goto	l9419
  5727  0CF0  0024               	movlb	4	; select bank4
  5728  0CF1  094F               	comf	_knob1_prev^(0+512),w	;volatile
  5729  0CF2  0025               	movlb	5	; select bank5
  5730  0CF3  00D5               	movwf	??_main^(0+640)
  5731  0CF4  0024               	movlb	4	; select bank4
  5732  0CF5  0950               	comf	(_knob1_prev+1)^(0+512),w	;volatile
  5733  0CF6  0025               	movlb	5	; select bank5
  5734  0CF7  00D6               	movwf	(??_main^(0+640)+1)
  5735  0CF8  0AD5               	incf	??_main^(0+640),f
  5736  0CF9  1903               	skipnz
  5737  0CFA  0AD6               	incf	(??_main^(0+640)+1),f
  5738  0CFB  0024               	movlb	4	; select bank4
  5739  0CFC  082E               	movf	_knob_1_pos^(0+512),w
  5740  0CFD  0025               	movlb	5	; select bank5
  5741  0CFE  0755               	addwf	??_main^(0+640),w
  5742  0CFF  00D7               	movwf	(??_main+2)^(0+640)
  5743  0D00  0024               	movlb	4	; select bank4
  5744  0D01  082F               	movf	(_knob_1_pos+1)^(0+512),w
  5745  0D02  0025               	movlb	5	; select bank5
  5746  0D03  3D56               	addwfc	(??_main+1)^(0+640),w
  5747  0D04  00D8               	movwf	(??_main+3)^(0+640)
  5748  0D05  0858               	movf	(??_main+3)^(0+640),w
  5749  0D06  3A80               	xorlw	128
  5750  0D07  00D9               	movwf	(??_main+4)^(0+640)
  5751  0D08  307F               	movlw	127
  5752  0D09  0259               	subwf	(??_main+4)^(0+640),w
  5753  0D0A  1D03               	skipz
  5754  0D0B  2D0E               	goto	u11035
  5755  0D0C  30FD               	movlw	253
  5756  0D0D  0257               	subwf	(??_main+2)^(0+640),w
  5757  0D0E                     u11035:	
  5758  0D0E  1803               	skipnc
  5759  0D0F  2D6E               	goto	l9429
  5760  0D10                     l9419:	
  5761                           
  5762                           ;main.c: 135: knob1_prev = knob_1_pos;
  5763  0D10  0024               	movlb	4	; select bank4
  5764  0D11  082F               	movf	(_knob_1_pos+1)^(0+512),w
  5765  0D12  00D0               	movwf	(_knob1_prev+1)^(0+512)	;volatile
  5766  0D13  082E               	movf	_knob_1_pos^(0+512),w
  5767  0D14  00CF               	movwf	_knob1_prev^(0+512)	;volatile
  5768                           
  5769                           ;main.c: 136: CCPR4 = scaleA10kPot(knob1_prev);
  5770  0D15  0850               	movf	(_knob1_prev+1)^(0+512),w	;volatile
  5771  0D16  0022               	movlb	2	; select bank2
  5772  0D17  00A9               	movwf	(___awtoft@c+1)^(0+256)
  5773  0D18  0024               	movlb	4	; select bank4
  5774  0D19  084F               	movf	_knob1_prev^(0+512),w	;volatile
  5775  0D1A  0022               	movlb	2	; select bank2
  5776  0D1B  00A8               	movwf	___awtoft@c^(0+256)
  5777  0D1C  31A0  2000  318C   	fcall	___awtoft
  5778  0D1F  0022               	movlb	2	; select bank2
  5779  0D20  0828               	movf	?___awtoft^(0+256),w
  5780  0D21  0025               	movlb	5	; select bank5
  5781  0D22  00DA               	movwf	_main$2788^(0+640)
  5782  0D23  0022               	movlb	2	; select bank2
  5783  0D24  0829               	movf	(?___awtoft+1)^(0+256),w
  5784  0D25  0025               	movlb	5	; select bank5
  5785  0D26  00DB               	movwf	(_main$2788+1)^(0+640)
  5786  0D27  0022               	movlb	2	; select bank2
  5787  0D28  082A               	movf	(?___awtoft+2)^(0+256),w
  5788  0D29  0025               	movlb	5	; select bank5
  5789  0D2A  00DC               	movwf	(_main$2788+2)^(0+640)
  5790                           
  5791                           ;main.c: 136: CCPR4 = scaleA10kPot(knob1_prev);
  5792  0D2B  085A               	movf	_main$2788^(0+640),w
  5793  0D2C  0023               	movlb	3	; select bank3
  5794  0D2D  00E7               	movwf	scaleA10kPot@input^(0+384)
  5795  0D2E  0025               	movlb	5	; select bank5
  5796  0D2F  085B               	movf	(_main$2788+1)^(0+640),w
  5797  0D30  0023               	movlb	3	; select bank3
  5798  0D31  00E8               	movwf	(scaleA10kPot@input+1)^(0+384)
  5799  0D32  0025               	movlb	5	; select bank5
  5800  0D33  085C               	movf	(_main$2788+2)^(0+640),w
  5801  0D34  0023               	movlb	3	; select bank3
  5802  0D35  00E9               	movwf	(scaleA10kPot@input+2)^(0+384)
  5803  0D36  3198  2056  318C   	fcall	_scaleA10kPot
  5804  0D39  0023               	movlb	3	; select bank3
  5805  0D3A  0868               	movf	(?_scaleA10kPot+1)^(0+384),w
  5806  0D3B  0026               	movlb	6	; select bank6
  5807  0D3C  0099               	movwf	25	;volatile
  5808  0D3D  0023               	movlb	3	; select bank3
  5809  0D3E  0867               	movf	?_scaleA10kPot^(0+384),w
  5810  0D3F  0026               	movlb	6	; select bank6
  5811  0D40  0098               	movwf	24	;volatile
  5812                           
  5813                           ;main.c: 137: CCPR5 = scaleiA10kPot(knob1_prev);
  5814  0D41  0024               	movlb	4	; select bank4
  5815  0D42  0850               	movf	(_knob1_prev+1)^(0+512),w	;volatile
  5816  0D43  0022               	movlb	2	; select bank2
  5817  0D44  00A9               	movwf	(___awtoft@c+1)^(0+256)
  5818  0D45  0024               	movlb	4	; select bank4
  5819  0D46  084F               	movf	_knob1_prev^(0+512),w	;volatile
  5820  0D47  0022               	movlb	2	; select bank2
  5821  0D48  00A8               	movwf	___awtoft@c^(0+256)
  5822  0D49  31A0  2000  318C   	fcall	___awtoft
  5823  0D4C  0022               	movlb	2	; select bank2
  5824  0D4D  0828               	movf	?___awtoft^(0+256),w
  5825  0D4E  0025               	movlb	5	; select bank5
  5826  0D4F  00DD               	movwf	_main$2789^(0+640)
  5827  0D50  0022               	movlb	2	; select bank2
  5828  0D51  0829               	movf	(?___awtoft+1)^(0+256),w
  5829  0D52  0025               	movlb	5	; select bank5
  5830  0D53  00DE               	movwf	(_main$2789+1)^(0+640)
  5831  0D54  0022               	movlb	2	; select bank2
  5832  0D55  082A               	movf	(?___awtoft+2)^(0+256),w
  5833  0D56  0025               	movlb	5	; select bank5
  5834  0D57  00DF               	movwf	(_main$2789+2)^(0+640)
  5835                           
  5836                           ;main.c: 137: CCPR5 = scaleiA10kPot(knob1_prev);
  5837  0D58  085D               	movf	_main$2789^(0+640),w
  5838  0D59  0023               	movlb	3	; select bank3
  5839  0D5A  00E7               	movwf	scaleiA10kPot@input^(0+384)
  5840  0D5B  0025               	movlb	5	; select bank5
  5841  0D5C  085E               	movf	(_main$2789+1)^(0+640),w
  5842  0D5D  0023               	movlb	3	; select bank3
  5843  0D5E  00E8               	movwf	(scaleiA10kPot@input+1)^(0+384)
  5844  0D5F  0025               	movlb	5	; select bank5
  5845  0D60  085F               	movf	(_main$2789+2)^(0+640),w
  5846  0D61  0023               	movlb	3	; select bank3
  5847  0D62  00E9               	movwf	(scaleiA10kPot@input+2)^(0+384)
  5848  0D63  319B  2377  318C   	fcall	_scaleiA10kPot
  5849  0D66  0023               	movlb	3	; select bank3
  5850  0D67  0868               	movf	(?_scaleiA10kPot+1)^(0+384),w
  5851  0D68  0026               	movlb	6	; select bank6
  5852  0D69  009D               	movwf	29	;volatile
  5853  0D6A  0023               	movlb	3	; select bank3
  5854  0D6B  0867               	movf	?_scaleiA10kPot^(0+384),w
  5855  0D6C  0026               	movlb	6	; select bank6
  5856  0D6D  009C               	movwf	28	;volatile
  5857  0D6E                     l9429:	
  5858                           
  5859                           ;main.c: 139: }
  5860                           ;main.c: 143: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5861  0D6E  0024               	movlb	4	; select bank4
  5862  0D6F  0951               	comf	_knob2_prev^(0+512),w	;volatile
  5863  0D70  0025               	movlb	5	; select bank5
  5864  0D71  00D5               	movwf	??_main^(0+640)
  5865  0D72  0024               	movlb	4	; select bank4
  5866  0D73  0952               	comf	(_knob2_prev+1)^(0+512),w	;volatile
  5867  0D74  0025               	movlb	5	; select bank5
  5868  0D75  00D6               	movwf	(??_main^(0+640)+1)
  5869  0D76  0AD5               	incf	??_main^(0+640),f
  5870  0D77  1903               	skipnz
  5871  0D78  0AD6               	incf	(??_main^(0+640)+1),f
  5872  0D79  0024               	movlb	4	; select bank4
  5873  0D7A  0830               	movf	_knob_2_pos^(0+512),w
  5874  0D7B  0025               	movlb	5	; select bank5
  5875  0D7C  0755               	addwf	??_main^(0+640),w
  5876  0D7D  00D7               	movwf	(??_main+2)^(0+640)
  5877  0D7E  0024               	movlb	4	; select bank4
  5878  0D7F  0831               	movf	(_knob_2_pos+1)^(0+512),w
  5879  0D80  0025               	movlb	5	; select bank5
  5880  0D81  3D56               	addwfc	(??_main+1)^(0+640),w
  5881  0D82  00D8               	movwf	(??_main+3)^(0+640)
  5882  0D83  0858               	movf	(??_main+3)^(0+640),w
  5883  0D84  3A80               	xorlw	128
  5884  0D85  00D9               	movwf	(??_main+4)^(0+640)
  5885  0D86  3080               	movlw	128
  5886  0D87  0259               	subwf	(??_main+4)^(0+640),w
  5887  0D88  1D03               	skipz
  5888  0D89  2D8C               	goto	u11045
  5889  0D8A  3004               	movlw	4
  5890  0D8B  0257               	subwf	(??_main+2)^(0+640),w
  5891  0D8C                     u11045:	
  5892  0D8C  1803               	skipnc
  5893  0D8D  2DAE               	goto	l9433
  5894  0D8E  0024               	movlb	4	; select bank4
  5895  0D8F  0951               	comf	_knob2_prev^(0+512),w	;volatile
  5896  0D90  0025               	movlb	5	; select bank5
  5897  0D91  00D5               	movwf	??_main^(0+640)
  5898  0D92  0024               	movlb	4	; select bank4
  5899  0D93  0952               	comf	(_knob2_prev+1)^(0+512),w	;volatile
  5900  0D94  0025               	movlb	5	; select bank5
  5901  0D95  00D6               	movwf	(??_main^(0+640)+1)
  5902  0D96  0AD5               	incf	??_main^(0+640),f
  5903  0D97  1903               	skipnz
  5904  0D98  0AD6               	incf	(??_main^(0+640)+1),f
  5905  0D99  0024               	movlb	4	; select bank4
  5906  0D9A  0830               	movf	_knob_2_pos^(0+512),w
  5907  0D9B  0025               	movlb	5	; select bank5
  5908  0D9C  0755               	addwf	??_main^(0+640),w
  5909  0D9D  00D7               	movwf	(??_main+2)^(0+640)
  5910  0D9E  0024               	movlb	4	; select bank4
  5911  0D9F  0831               	movf	(_knob_2_pos+1)^(0+512),w
  5912  0DA0  0025               	movlb	5	; select bank5
  5913  0DA1  3D56               	addwfc	(??_main+1)^(0+640),w
  5914  0DA2  00D8               	movwf	(??_main+3)^(0+640)
  5915  0DA3  0858               	movf	(??_main+3)^(0+640),w
  5916  0DA4  3A80               	xorlw	128
  5917  0DA5  00D9               	movwf	(??_main+4)^(0+640)
  5918  0DA6  307F               	movlw	127
  5919  0DA7  0259               	subwf	(??_main+4)^(0+640),w
  5920  0DA8  1D03               	skipz
  5921  0DA9  2DAC               	goto	u11055
  5922  0DAA  30FD               	movlw	253
  5923  0DAB  0257               	subwf	(??_main+2)^(0+640),w
  5924  0DAC                     u11055:	
  5925  0DAC  1803               	skipnc
  5926  0DAD  2E24               	goto	l9443
  5927  0DAE                     l9433:	
  5928                           
  5929                           ;main.c: 144: knob2_prev = knob_2_pos;
  5930  0DAE  0024               	movlb	4	; select bank4
  5931  0DAF  0831               	movf	(_knob_2_pos+1)^(0+512),w
  5932  0DB0  00D2               	movwf	(_knob2_prev+1)^(0+512)	;volatile
  5933  0DB1  0830               	movf	_knob_2_pos^(0+512),w
  5934  0DB2  00D1               	movwf	_knob2_prev^(0+512)	;volatile
  5935                           
  5936                           ;main.c: 145: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5937  0DB3  0951               	comf	_knob2_prev^(0+512),w	;volatile
  5938  0DB4  0025               	movlb	5	; select bank5
  5939  0DB5  00D5               	movwf	??_main^(0+640)
  5940  0DB6  0024               	movlb	4	; select bank4
  5941  0DB7  0952               	comf	(_knob2_prev+1)^(0+512),w	;volatile
  5942  0DB8  0025               	movlb	5	; select bank5
  5943  0DB9  00D6               	movwf	(??_main^(0+640)+1)
  5944  0DBA  0AD5               	incf	??_main^(0+640),f
  5945  0DBB  1903               	skipnz
  5946  0DBC  0AD6               	incf	(??_main^(0+640)+1),f
  5947  0DBD  0855               	movf	??_main^(0+640),w
  5948  0DBE  3EFF               	addlw	255
  5949  0DBF  0022               	movlb	2	; select bank2
  5950  0DC0  00A8               	movwf	___awtoft@c^(0+256)
  5951  0DC1  3003               	movlw	3
  5952  0DC2  0025               	movlb	5	; select bank5
  5953  0DC3  3D56               	addwfc	(??_main+1)^(0+640),w
  5954  0DC4  0022               	movlb	2	; select bank2
  5955  0DC5  00A9               	movwf	(___awtoft@c+1)^(0+256)
  5956  0DC6  31A0  2000  318C   	fcall	___awtoft
  5957  0DC9  0022               	movlb	2	; select bank2
  5958  0DCA  0828               	movf	?___awtoft^(0+256),w
  5959  0DCB  0025               	movlb	5	; select bank5
  5960  0DCC  00E0               	movwf	_main$2790^(0+640)
  5961  0DCD  0022               	movlb	2	; select bank2
  5962  0DCE  0829               	movf	(?___awtoft+1)^(0+256),w
  5963  0DCF  0025               	movlb	5	; select bank5
  5964  0DD0  00E1               	movwf	(_main$2790+1)^(0+640)
  5965  0DD1  0022               	movlb	2	; select bank2
  5966  0DD2  082A               	movf	(?___awtoft+2)^(0+256),w
  5967  0DD3  0025               	movlb	5	; select bank5
  5968  0DD4  00E2               	movwf	(_main$2790+2)^(0+640)
  5969                           
  5970                           ;main.c: 145: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5971  0DD5  0860               	movf	_main$2790^(0+640),w
  5972  0DD6  0023               	movlb	3	; select bank3
  5973  0DD7  00E7               	movwf	scaleA100kPot@input^(0+384)
  5974  0DD8  0025               	movlb	5	; select bank5
  5975  0DD9  0861               	movf	(_main$2790+1)^(0+640),w
  5976  0DDA  0023               	movlb	3	; select bank3
  5977  0DDB  00E8               	movwf	(scaleA100kPot@input+1)^(0+384)
  5978  0DDC  0025               	movlb	5	; select bank5
  5979  0DDD  0862               	movf	(_main$2790+2)^(0+640),w
  5980  0DDE  0023               	movlb	3	; select bank3
  5981  0DDF  00E9               	movwf	(scaleA100kPot@input+2)^(0+384)
  5982  0DE0  31A5  255B  318C   	fcall	_scaleA100kPot
  5983  0DE3  0023               	movlb	3	; select bank3
  5984  0DE4  0868               	movf	(?_scaleA100kPot+1)^(0+384),w
  5985  0DE5  0025               	movlb	5	; select bank5
  5986  0DE6  0092               	movwf	18	;volatile
  5987  0DE7  0023               	movlb	3	; select bank3
  5988  0DE8  0867               	movf	?_scaleA100kPot^(0+384),w
  5989  0DE9  0025               	movlb	5	; select bank5
  5990  0DEA  0091               	movwf	17	;volatile
  5991                           
  5992                           ;main.c: 146: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5993  0DEB  0024               	movlb	4	; select bank4
  5994  0DEC  0951               	comf	_knob2_prev^(0+512),w	;volatile
  5995  0DED  0025               	movlb	5	; select bank5
  5996  0DEE  00D5               	movwf	??_main^(0+640)
  5997  0DEF  0024               	movlb	4	; select bank4
  5998  0DF0  0952               	comf	(_knob2_prev+1)^(0+512),w	;volatile
  5999  0DF1  0025               	movlb	5	; select bank5
  6000  0DF2  00D6               	movwf	(??_main^(0+640)+1)
  6001  0DF3  0AD5               	incf	??_main^(0+640),f
  6002  0DF4  1903               	skipnz
  6003  0DF5  0AD6               	incf	(??_main^(0+640)+1),f
  6004  0DF6  0855               	movf	??_main^(0+640),w
  6005  0DF7  3EFF               	addlw	255
  6006  0DF8  0022               	movlb	2	; select bank2
  6007  0DF9  00A8               	movwf	___awtoft@c^(0+256)
  6008  0DFA  3003               	movlw	3
  6009  0DFB  0025               	movlb	5	; select bank5
  6010  0DFC  3D56               	addwfc	(??_main+1)^(0+640),w
  6011  0DFD  0022               	movlb	2	; select bank2
  6012  0DFE  00A9               	movwf	(___awtoft@c+1)^(0+256)
  6013  0DFF  31A0  2000  318C   	fcall	___awtoft
  6014  0E02  0022               	movlb	2	; select bank2
  6015  0E03  0828               	movf	?___awtoft^(0+256),w
  6016  0E04  0025               	movlb	5	; select bank5
  6017  0E05  00E0               	movwf	_main$2790^(0+640)
  6018  0E06  0022               	movlb	2	; select bank2
  6019  0E07  0829               	movf	(?___awtoft+1)^(0+256),w
  6020  0E08  0025               	movlb	5	; select bank5
  6021  0E09  00E1               	movwf	(_main$2790+1)^(0+640)
  6022  0E0A  0022               	movlb	2	; select bank2
  6023  0E0B  082A               	movf	(?___awtoft+2)^(0+256),w
  6024  0E0C  0025               	movlb	5	; select bank5
  6025  0E0D  00E2               	movwf	(_main$2790+2)^(0+640)
  6026                           
  6027                           ;main.c: 146: CCPR2 = scaleA100kPot(1023-knob2_prev);
  6028  0E0E  0860               	movf	_main$2790^(0+640),w
  6029  0E0F  0023               	movlb	3	; select bank3
  6030  0E10  00E7               	movwf	scaleA100kPot@input^(0+384)
  6031  0E11  0025               	movlb	5	; select bank5
  6032  0E12  0861               	movf	(_main$2790+1)^(0+640),w
  6033  0E13  0023               	movlb	3	; select bank3
  6034  0E14  00E8               	movwf	(scaleA100kPot@input+1)^(0+384)
  6035  0E15  0025               	movlb	5	; select bank5
  6036  0E16  0862               	movf	(_main$2790+2)^(0+640),w
  6037  0E17  0023               	movlb	3	; select bank3
  6038  0E18  00E9               	movwf	(scaleA100kPot@input+2)^(0+384)
  6039  0E19  31A5  255B  318C   	fcall	_scaleA100kPot
  6040  0E1C  0023               	movlb	3	; select bank3
  6041  0E1D  0868               	movf	(?_scaleA100kPot+1)^(0+384),w
  6042  0E1E  0025               	movlb	5	; select bank5
  6043  0E1F  0099               	movwf	25	;volatile
  6044  0E20  0023               	movlb	3	; select bank3
  6045  0E21  0867               	movf	?_scaleA100kPot^(0+384),w
  6046  0E22  0025               	movlb	5	; select bank5
  6047  0E23  0098               	movwf	24	;volatile
  6048  0E24                     l9443:	
  6049                           
  6050                           ;main.c: 147: }
  6051                           ;main.c: 157: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  6052  0E24  0024               	movlb	4	; select bank4
  6053  0E25  0953               	comf	_knob3_prev^(0+512),w	;volatile
  6054  0E26  0025               	movlb	5	; select bank5
  6055  0E27  00D5               	movwf	??_main^(0+640)
  6056  0E28  0024               	movlb	4	; select bank4
  6057  0E29  0954               	comf	(_knob3_prev+1)^(0+512),w	;volatile
  6058  0E2A  0025               	movlb	5	; select bank5
  6059  0E2B  00D6               	movwf	(??_main^(0+640)+1)
  6060  0E2C  0AD5               	incf	??_main^(0+640),f
  6061  0E2D  1903               	skipnz
  6062  0E2E  0AD6               	incf	(??_main^(0+640)+1),f
  6063  0E2F  0024               	movlb	4	; select bank4
  6064  0E30  0832               	movf	_knob_3_pos^(0+512),w
  6065  0E31  0025               	movlb	5	; select bank5
  6066  0E32  0755               	addwf	??_main^(0+640),w
  6067  0E33  00D7               	movwf	(??_main+2)^(0+640)
  6068  0E34  0024               	movlb	4	; select bank4
  6069  0E35  0833               	movf	(_knob_3_pos+1)^(0+512),w
  6070  0E36  0025               	movlb	5	; select bank5
  6071  0E37  3D56               	addwfc	(??_main+1)^(0+640),w
  6072  0E38  00D8               	movwf	(??_main+3)^(0+640)
  6073  0E39  0858               	movf	(??_main+3)^(0+640),w
  6074  0E3A  3A80               	xorlw	128
  6075  0E3B  00D9               	movwf	(??_main+4)^(0+640)
  6076  0E3C  3080               	movlw	128
  6077  0E3D  0259               	subwf	(??_main+4)^(0+640),w
  6078  0E3E  1D03               	skipz
  6079  0E3F  2E42               	goto	u11065
  6080  0E40  3004               	movlw	4
  6081  0E41  0257               	subwf	(??_main+2)^(0+640),w
  6082  0E42                     u11065:	
  6083  0E42  1803               	skipnc
  6084  0E43  2E64               	goto	l9447
  6085  0E44  0024               	movlb	4	; select bank4
  6086  0E45  0953               	comf	_knob3_prev^(0+512),w	;volatile
  6087  0E46  0025               	movlb	5	; select bank5
  6088  0E47  00D5               	movwf	??_main^(0+640)
  6089  0E48  0024               	movlb	4	; select bank4
  6090  0E49  0954               	comf	(_knob3_prev+1)^(0+512),w	;volatile
  6091  0E4A  0025               	movlb	5	; select bank5
  6092  0E4B  00D6               	movwf	(??_main^(0+640)+1)
  6093  0E4C  0AD5               	incf	??_main^(0+640),f
  6094  0E4D  1903               	skipnz
  6095  0E4E  0AD6               	incf	(??_main^(0+640)+1),f
  6096  0E4F  0024               	movlb	4	; select bank4
  6097  0E50  0832               	movf	_knob_3_pos^(0+512),w
  6098  0E51  0025               	movlb	5	; select bank5
  6099  0E52  0755               	addwf	??_main^(0+640),w
  6100  0E53  00D7               	movwf	(??_main+2)^(0+640)
  6101  0E54  0024               	movlb	4	; select bank4
  6102  0E55  0833               	movf	(_knob_3_pos+1)^(0+512),w
  6103  0E56  0025               	movlb	5	; select bank5
  6104  0E57  3D56               	addwfc	(??_main+1)^(0+640),w
  6105  0E58  00D8               	movwf	(??_main+3)^(0+640)
  6106  0E59  0858               	movf	(??_main+3)^(0+640),w
  6107  0E5A  3A80               	xorlw	128
  6108  0E5B  00D9               	movwf	(??_main+4)^(0+640)
  6109  0E5C  307F               	movlw	127
  6110  0E5D  0259               	subwf	(??_main+4)^(0+640),w
  6111  0E5E  1D03               	skipz
  6112  0E5F  2E62               	goto	u11075
  6113  0E60  30FD               	movlw	253
  6114  0E61  0257               	subwf	(??_main+2)^(0+640),w
  6115  0E62                     u11075:	
  6116  0E62  1803               	skipnc
  6117  0E63  2EAE               	goto	l9451
  6118  0E64                     l9447:	
  6119                           
  6120                           ;main.c: 158: knob3_prev = knob_3_pos;
  6121  0E64  0024               	movlb	4	; select bank4
  6122  0E65  0833               	movf	(_knob_3_pos+1)^(0+512),w
  6123  0E66  00D4               	movwf	(_knob3_prev+1)^(0+512)	;volatile
  6124  0E67  0832               	movf	_knob_3_pos^(0+512),w
  6125  0E68  00D3               	movwf	_knob3_prev^(0+512)	;volatile
  6126                           
  6127                           ;main.c: 159: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  6128  0E69  3080               	movlw	128
  6129  0E6A  0022               	movlb	2	; select bank2
  6130  0E6B  00EA               	movwf	map@out_max^(0+256)
  6131  0E6C  309D               	movlw	157
  6132  0E6D  00EB               	movwf	(map@out_max+1)^(0+256)
  6133  0E6E  3043               	movlw	67
  6134  0E6F  00EC               	movwf	(map@out_max+2)^(0+256)
  6135  0E70  3000               	movlw	0
  6136  0E71  00E7               	movwf	map@out_min^(0+256)
  6137  0E72  3034               	movlw	52
  6138  0E73  00E8               	movwf	(map@out_min+1)^(0+256)
  6139  0E74  3042               	movlw	66
  6140  0E75  00E9               	movwf	(map@out_min+2)^(0+256)
  6141  0E76  30C0               	movlw	192
  6142  0E77  00E4               	movwf	map@in_max^(0+256)
  6143  0E78  307F               	movlw	127
  6144  0E79  00E5               	movwf	(map@in_max+1)^(0+256)
  6145  0E7A  3044               	movlw	68
  6146  0E7B  00E6               	movwf	(map@in_max+2)^(0+256)
  6147  0E7C  3000               	movlw	0
  6148  0E7D  00E1               	movwf	map@in_min^(0+256)
  6149  0E7E  3000               	movlw	0
  6150  0E7F  00E2               	movwf	(map@in_min+1)^(0+256)
  6151  0E80  3000               	movlw	0
  6152  0E81  00E3               	movwf	(map@in_min+2)^(0+256)
  6153  0E82  0024               	movlb	4	; select bank4
  6154  0E83  0854               	movf	(_knob3_prev+1)^(0+512),w	;volatile
  6155  0E84  0022               	movlb	2	; select bank2
  6156  0E85  00A9               	movwf	(___awtoft@c+1)^(0+256)
  6157  0E86  0024               	movlb	4	; select bank4
  6158  0E87  0853               	movf	_knob3_prev^(0+512),w	;volatile
  6159  0E88  0022               	movlb	2	; select bank2
  6160  0E89  00A8               	movwf	___awtoft@c^(0+256)
  6161  0E8A  31A0  2000  318C   	fcall	___awtoft
  6162  0E8D  0022               	movlb	2	; select bank2
  6163  0E8E  0828               	movf	?___awtoft^(0+256),w
  6164  0E8F  00DE               	movwf	map@x^(0+256)
  6165  0E90  0829               	movf	(?___awtoft+1)^(0+256),w
  6166  0E91  00DF               	movwf	(map@x+1)^(0+256)
  6167  0E92  082A               	movf	(?___awtoft+2)^(0+256),w
  6168  0E93  00E0               	movwf	(map@x+2)^(0+256)
  6169  0E94  31A7  2775  318C   	fcall	_map
  6170  0E97  0022               	movlb	2	; select bank2
  6171  0E98  085E               	movf	?_map^(0+256),w
  6172  0E99  0023               	movlb	3	; select bank3
  6173  0E9A  00A0               	movwf	___fttol@f1^(0+384)
  6174  0E9B  0022               	movlb	2	; select bank2
  6175  0E9C  085F               	movf	(?_map+1)^(0+256),w
  6176  0E9D  0023               	movlb	3	; select bank3
  6177  0E9E  00A1               	movwf	(___fttol@f1+1)^(0+384)
  6178  0E9F  0022               	movlb	2	; select bank2
  6179  0EA0  0860               	movf	(?_map+2)^(0+256),w
  6180  0EA1  0023               	movlb	3	; select bank3
  6181  0EA2  00A2               	movwf	(___fttol@f1+2)^(0+384)
  6182  0EA3  31A6  2667  318C   	fcall	___fttol
  6183  0EA6  0023               	movlb	3	; select bank3
  6184  0EA7  0821               	movf	(?___fttol^(0+384)+1),w
  6185  0EA8  0024               	movlb	4	; select bank4
  6186  0EA9  00DC               	movwf	(_symmetry+1)^(0+512)
  6187  0EAA  0023               	movlb	3	; select bank3
  6188  0EAB  0820               	movf	?___fttol^(0+384),w
  6189  0EAC  0024               	movlb	4	; select bank4
  6190  0EAD  00DB               	movwf	_symmetry^(0+512)
  6191  0EAE                     l9451:	
  6192                           
  6193                           ;main.c: 165: }
  6194                           ;main.c: 176: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6195  0EAE  0024               	movlb	4	; select bank4
  6196  0EAF  0955               	comf	_knob4_prev^(0+512),w	;volatile
  6197  0EB0  0025               	movlb	5	; select bank5
  6198  0EB1  00D5               	movwf	??_main^(0+640)
  6199  0EB2  0024               	movlb	4	; select bank4
  6200  0EB3  0956               	comf	(_knob4_prev+1)^(0+512),w	;volatile
  6201  0EB4  0025               	movlb	5	; select bank5
  6202  0EB5  00D6               	movwf	(??_main^(0+640)+1)
  6203  0EB6  0AD5               	incf	??_main^(0+640),f
  6204  0EB7  1903               	skipnz
  6205  0EB8  0AD6               	incf	(??_main^(0+640)+1),f
  6206  0EB9  0024               	movlb	4	; select bank4
  6207  0EBA  0834               	movf	_knob_4_pos^(0+512),w
  6208  0EBB  0025               	movlb	5	; select bank5
  6209  0EBC  0755               	addwf	??_main^(0+640),w
  6210  0EBD  00D7               	movwf	(??_main+2)^(0+640)
  6211  0EBE  0024               	movlb	4	; select bank4
  6212  0EBF  0835               	movf	(_knob_4_pos+1)^(0+512),w
  6213  0EC0  0025               	movlb	5	; select bank5
  6214  0EC1  3D56               	addwfc	(??_main+1)^(0+640),w
  6215  0EC2  00D8               	movwf	(??_main+3)^(0+640)
  6216  0EC3  0858               	movf	(??_main+3)^(0+640),w
  6217  0EC4  3A80               	xorlw	128
  6218  0EC5  00D9               	movwf	(??_main+4)^(0+640)
  6219  0EC6  3080               	movlw	128
  6220  0EC7  0259               	subwf	(??_main+4)^(0+640),w
  6221  0EC8  1D03               	skipz
  6222  0EC9  2ECC               	goto	u11085
  6223  0ECA  3004               	movlw	4
  6224  0ECB  0257               	subwf	(??_main+2)^(0+640),w
  6225  0ECC                     u11085:	
  6226  0ECC  1803               	skipnc
  6227  0ECD  2EEE               	goto	l9455
  6228  0ECE  0024               	movlb	4	; select bank4
  6229  0ECF  0955               	comf	_knob4_prev^(0+512),w	;volatile
  6230  0ED0  0025               	movlb	5	; select bank5
  6231  0ED1  00D5               	movwf	??_main^(0+640)
  6232  0ED2  0024               	movlb	4	; select bank4
  6233  0ED3  0956               	comf	(_knob4_prev+1)^(0+512),w	;volatile
  6234  0ED4  0025               	movlb	5	; select bank5
  6235  0ED5  00D6               	movwf	(??_main^(0+640)+1)
  6236  0ED6  0AD5               	incf	??_main^(0+640),f
  6237  0ED7  1903               	skipnz
  6238  0ED8  0AD6               	incf	(??_main^(0+640)+1),f
  6239  0ED9  0024               	movlb	4	; select bank4
  6240  0EDA  0834               	movf	_knob_4_pos^(0+512),w
  6241  0EDB  0025               	movlb	5	; select bank5
  6242  0EDC  0755               	addwf	??_main^(0+640),w
  6243  0EDD  00D7               	movwf	(??_main+2)^(0+640)
  6244  0EDE  0024               	movlb	4	; select bank4
  6245  0EDF  0835               	movf	(_knob_4_pos+1)^(0+512),w
  6246  0EE0  0025               	movlb	5	; select bank5
  6247  0EE1  3D56               	addwfc	(??_main+1)^(0+640),w
  6248  0EE2  00D8               	movwf	(??_main+3)^(0+640)
  6249  0EE3  0858               	movf	(??_main+3)^(0+640),w
  6250  0EE4  3A80               	xorlw	128
  6251  0EE5  00D9               	movwf	(??_main+4)^(0+640)
  6252  0EE6  307F               	movlw	127
  6253  0EE7  0259               	subwf	(??_main+4)^(0+640),w
  6254  0EE8  1D03               	skipz
  6255  0EE9  2EEC               	goto	u11095
  6256  0EEA  30FD               	movlw	253
  6257  0EEB  0257               	subwf	(??_main+2)^(0+640),w
  6258  0EEC                     u11095:	
  6259  0EEC  1803               	skipnc
  6260  0EED  2F38               	goto	l9459
  6261  0EEE                     l9455:	
  6262                           
  6263                           ;main.c: 177: knob4_prev = knob_4_pos;
  6264  0EEE  0024               	movlb	4	; select bank4
  6265  0EEF  0835               	movf	(_knob_4_pos+1)^(0+512),w
  6266  0EF0  00D6               	movwf	(_knob4_prev+1)^(0+512)	;volatile
  6267  0EF1  0834               	movf	_knob_4_pos^(0+512),w
  6268  0EF2  00D5               	movwf	_knob4_prev^(0+512)	;volatile
  6269                           
  6270                           ;main.c: 179: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  6271  0EF3  3000               	movlw	0
  6272  0EF4  0022               	movlb	2	; select bank2
  6273  0EF5  00EA               	movwf	map@out_max^(0+256)
  6274  0EF6  303C               	movlw	60
  6275  0EF7  00EB               	movwf	(map@out_max+1)^(0+256)
  6276  0EF8  3042               	movlw	66
  6277  0EF9  00EC               	movwf	(map@out_max+2)^(0+256)
  6278  0EFA  3000               	movlw	0
  6279  0EFB  00E7               	movwf	map@out_min^(0+256)
  6280  0EFC  3040               	movlw	64
  6281  0EFD  00E8               	movwf	(map@out_min+1)^(0+256)
  6282  0EFE  3040               	movlw	64
  6283  0EFF  00E9               	movwf	(map@out_min+2)^(0+256)
  6284  0F00  30C0               	movlw	192
  6285  0F01  00E4               	movwf	map@in_max^(0+256)
  6286  0F02  307F               	movlw	127
  6287  0F03  00E5               	movwf	(map@in_max+1)^(0+256)
  6288  0F04  3044               	movlw	68
  6289  0F05  00E6               	movwf	(map@in_max+2)^(0+256)
  6290  0F06  3000               	movlw	0
  6291  0F07  00E1               	movwf	map@in_min^(0+256)
  6292  0F08  3000               	movlw	0
  6293  0F09  00E2               	movwf	(map@in_min+1)^(0+256)
  6294  0F0A  3000               	movlw	0
  6295  0F0B  00E3               	movwf	(map@in_min+2)^(0+256)
  6296  0F0C  0024               	movlb	4	; select bank4
  6297  0F0D  0856               	movf	(_knob4_prev+1)^(0+512),w	;volatile
  6298  0F0E  0022               	movlb	2	; select bank2
  6299  0F0F  00A9               	movwf	(___awtoft@c+1)^(0+256)
  6300  0F10  0024               	movlb	4	; select bank4
  6301  0F11  0855               	movf	_knob4_prev^(0+512),w	;volatile
  6302  0F12  0022               	movlb	2	; select bank2
  6303  0F13  00A8               	movwf	___awtoft@c^(0+256)
  6304  0F14  31A0  2000  318C   	fcall	___awtoft
  6305  0F17  0022               	movlb	2	; select bank2
  6306  0F18  0828               	movf	?___awtoft^(0+256),w
  6307  0F19  00DE               	movwf	map@x^(0+256)
  6308  0F1A  0829               	movf	(?___awtoft+1)^(0+256),w
  6309  0F1B  00DF               	movwf	(map@x+1)^(0+256)
  6310  0F1C  082A               	movf	(?___awtoft+2)^(0+256),w
  6311  0F1D  00E0               	movwf	(map@x+2)^(0+256)
  6312  0F1E  31A7  2775  318C   	fcall	_map
  6313  0F21  0022               	movlb	2	; select bank2
  6314  0F22  085E               	movf	?_map^(0+256),w
  6315  0F23  0023               	movlb	3	; select bank3
  6316  0F24  00A0               	movwf	___fttol@f1^(0+384)
  6317  0F25  0022               	movlb	2	; select bank2
  6318  0F26  085F               	movf	(?_map+1)^(0+256),w
  6319  0F27  0023               	movlb	3	; select bank3
  6320  0F28  00A1               	movwf	(___fttol@f1+1)^(0+384)
  6321  0F29  0022               	movlb	2	; select bank2
  6322  0F2A  0860               	movf	(?_map+2)^(0+256),w
  6323  0F2B  0023               	movlb	3	; select bank3
  6324  0F2C  00A2               	movwf	(___fttol@f1+2)^(0+384)
  6325  0F2D  31A6  2667  318C   	fcall	___fttol
  6326  0F30  0023               	movlb	3	; select bank3
  6327  0F31  0821               	movf	(?___fttol^(0+384)+1),w
  6328  0F32  0024               	movlb	4	; select bank4
  6329  0F33  00DA               	movwf	(_mod_delay_time+1)^(0+512)
  6330  0F34  0023               	movlb	3	; select bank3
  6331  0F35  0820               	movf	?___fttol^(0+384),w
  6332  0F36  0024               	movlb	4	; select bank4
  6333  0F37  00D9               	movwf	_mod_delay_time^(0+512)
  6334  0F38                     l9459:	
  6335                           
  6336                           ;main.c: 181: }
  6337                           ;main.c: 186: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6338  0F38  0024               	movlb	4	; select bank4
  6339  0F39  0957               	comf	_knob5_prev^(0+512),w	;volatile
  6340  0F3A  0025               	movlb	5	; select bank5
  6341  0F3B  00D5               	movwf	??_main^(0+640)
  6342  0F3C  0024               	movlb	4	; select bank4
  6343  0F3D  0958               	comf	(_knob5_prev+1)^(0+512),w	;volatile
  6344  0F3E  0025               	movlb	5	; select bank5
  6345  0F3F  00D6               	movwf	(??_main^(0+640)+1)
  6346  0F40  0AD5               	incf	??_main^(0+640),f
  6347  0F41  1903               	skipnz
  6348  0F42  0AD6               	incf	(??_main^(0+640)+1),f
  6349  0F43  0024               	movlb	4	; select bank4
  6350  0F44  0836               	movf	_knob_5_pos^(0+512),w
  6351  0F45  0025               	movlb	5	; select bank5
  6352  0F46  0755               	addwf	??_main^(0+640),w
  6353  0F47  00D7               	movwf	(??_main+2)^(0+640)
  6354  0F48  0024               	movlb	4	; select bank4
  6355  0F49  0837               	movf	(_knob_5_pos+1)^(0+512),w
  6356  0F4A  0025               	movlb	5	; select bank5
  6357  0F4B  3D56               	addwfc	(??_main+1)^(0+640),w
  6358  0F4C  00D8               	movwf	(??_main+3)^(0+640)
  6359  0F4D  0858               	movf	(??_main+3)^(0+640),w
  6360  0F4E  3A80               	xorlw	128
  6361  0F4F  00D9               	movwf	(??_main+4)^(0+640)
  6362  0F50  3080               	movlw	128
  6363  0F51  0259               	subwf	(??_main+4)^(0+640),w
  6364  0F52  1D03               	skipz
  6365  0F53  2F56               	goto	u11105
  6366  0F54  3004               	movlw	4
  6367  0F55  0257               	subwf	(??_main+2)^(0+640),w
  6368  0F56                     u11105:	
  6369  0F56  1803               	skipnc
  6370  0F57  2F78               	goto	l9463
  6371  0F58  0024               	movlb	4	; select bank4
  6372  0F59  0957               	comf	_knob5_prev^(0+512),w	;volatile
  6373  0F5A  0025               	movlb	5	; select bank5
  6374  0F5B  00D5               	movwf	??_main^(0+640)
  6375  0F5C  0024               	movlb	4	; select bank4
  6376  0F5D  0958               	comf	(_knob5_prev+1)^(0+512),w	;volatile
  6377  0F5E  0025               	movlb	5	; select bank5
  6378  0F5F  00D6               	movwf	(??_main^(0+640)+1)
  6379  0F60  0AD5               	incf	??_main^(0+640),f
  6380  0F61  1903               	skipnz
  6381  0F62  0AD6               	incf	(??_main^(0+640)+1),f
  6382  0F63  0024               	movlb	4	; select bank4
  6383  0F64  0836               	movf	_knob_5_pos^(0+512),w
  6384  0F65  0025               	movlb	5	; select bank5
  6385  0F66  0755               	addwf	??_main^(0+640),w
  6386  0F67  00D7               	movwf	(??_main+2)^(0+640)
  6387  0F68  0024               	movlb	4	; select bank4
  6388  0F69  0837               	movf	(_knob_5_pos+1)^(0+512),w
  6389  0F6A  0025               	movlb	5	; select bank5
  6390  0F6B  3D56               	addwfc	(??_main+1)^(0+640),w
  6391  0F6C  00D8               	movwf	(??_main+3)^(0+640)
  6392  0F6D  0858               	movf	(??_main+3)^(0+640),w
  6393  0F6E  3A80               	xorlw	128
  6394  0F6F  00D9               	movwf	(??_main+4)^(0+640)
  6395  0F70  307F               	movlw	127
  6396  0F71  0259               	subwf	(??_main+4)^(0+640),w
  6397  0F72  1D03               	skipz
  6398  0F73  2F76               	goto	u11115
  6399  0F74  30FD               	movlw	253
  6400  0F75  0257               	subwf	(??_main+2)^(0+640),w
  6401  0F76                     u11115:	
  6402  0F76  1803               	skipnc
  6403  0F77  2FC2               	goto	l9467
  6404  0F78                     l9463:	
  6405                           
  6406                           ;main.c: 187: knob5_prev = knob_5_pos;
  6407  0F78  0024               	movlb	4	; select bank4
  6408  0F79  0837               	movf	(_knob_5_pos+1)^(0+512),w
  6409  0F7A  00D8               	movwf	(_knob5_prev+1)^(0+512)	;volatile
  6410  0F7B  0836               	movf	_knob_5_pos^(0+512),w
  6411  0F7C  00D7               	movwf	_knob5_prev^(0+512)	;volatile
  6412                           
  6413                           ;main.c: 188: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6414  0F7D  3000               	movlw	0
  6415  0F7E  0022               	movlb	2	; select bank2
  6416  0F7F  00EA               	movwf	map@out_max^(0+256)
  6417  0F80  3000               	movlw	0
  6418  0F81  00EB               	movwf	(map@out_max+1)^(0+256)
  6419  0F82  3000               	movlw	0
  6420  0F83  00EC               	movwf	(map@out_max+2)^(0+256)
  6421  0F84  3060               	movlw	96
  6422  0F85  00E7               	movwf	map@out_min^(0+256)
  6423  0F86  309F               	movlw	159
  6424  0F87  00E8               	movwf	(map@out_min+1)^(0+256)
  6425  0F88  3044               	movlw	68
  6426  0F89  00E9               	movwf	(map@out_min+2)^(0+256)
  6427  0F8A  30C0               	movlw	192
  6428  0F8B  00E4               	movwf	map@in_max^(0+256)
  6429  0F8C  307F               	movlw	127
  6430  0F8D  00E5               	movwf	(map@in_max+1)^(0+256)
  6431  0F8E  3044               	movlw	68
  6432  0F8F  00E6               	movwf	(map@in_max+2)^(0+256)
  6433  0F90  3000               	movlw	0
  6434  0F91  00E1               	movwf	map@in_min^(0+256)
  6435  0F92  3000               	movlw	0
  6436  0F93  00E2               	movwf	(map@in_min+1)^(0+256)
  6437  0F94  3000               	movlw	0
  6438  0F95  00E3               	movwf	(map@in_min+2)^(0+256)
  6439  0F96  0024               	movlb	4	; select bank4
  6440  0F97  0858               	movf	(_knob5_prev+1)^(0+512),w	;volatile
  6441  0F98  0022               	movlb	2	; select bank2
  6442  0F99  00A9               	movwf	(___awtoft@c+1)^(0+256)
  6443  0F9A  0024               	movlb	4	; select bank4
  6444  0F9B  0857               	movf	_knob5_prev^(0+512),w	;volatile
  6445  0F9C  0022               	movlb	2	; select bank2
  6446  0F9D  00A8               	movwf	___awtoft@c^(0+256)
  6447  0F9E  31A0  2000  318C   	fcall	___awtoft
  6448  0FA1  0022               	movlb	2	; select bank2
  6449  0FA2  0828               	movf	?___awtoft^(0+256),w
  6450  0FA3  00DE               	movwf	map@x^(0+256)
  6451  0FA4  0829               	movf	(?___awtoft+1)^(0+256),w
  6452  0FA5  00DF               	movwf	(map@x+1)^(0+256)
  6453  0FA6  082A               	movf	(?___awtoft+2)^(0+256),w
  6454  0FA7  00E0               	movwf	(map@x+2)^(0+256)
  6455  0FA8  31A7  2775  318C   	fcall	_map
  6456  0FAB  0022               	movlb	2	; select bank2
  6457  0FAC  085E               	movf	?_map^(0+256),w
  6458  0FAD  0023               	movlb	3	; select bank3
  6459  0FAE  00A0               	movwf	___fttol@f1^(0+384)
  6460  0FAF  0022               	movlb	2	; select bank2
  6461  0FB0  085F               	movf	(?_map+1)^(0+256),w
  6462  0FB1  0023               	movlb	3	; select bank3
  6463  0FB2  00A1               	movwf	(___fttol@f1+1)^(0+384)
  6464  0FB3  0022               	movlb	2	; select bank2
  6465  0FB4  0860               	movf	(?_map+2)^(0+256),w
  6466  0FB5  0023               	movlb	3	; select bank3
  6467  0FB6  00A2               	movwf	(___fttol@f1+2)^(0+384)
  6468  0FB7  31A6  2667  318C   	fcall	___fttol
  6469  0FBA  0023               	movlb	3	; select bank3
  6470  0FBB  0821               	movf	(?___fttol^(0+384)+1),w
  6471  0FBC  0025               	movlb	5	; select bank5
  6472  0FBD  00C6               	movwf	(_adjusted_pot_value+1)^(0+640)
  6473  0FBE  0023               	movlb	3	; select bank3
  6474  0FBF  0820               	movf	?___fttol^(0+384),w
  6475  0FC0  0025               	movlb	5	; select bank5
  6476  0FC1  00C5               	movwf	_adjusted_pot_value^(0+640)
  6477  0FC2                     l9467:	
  6478                           
  6479                           ;main.c: 189: }
  6480                           ;main.c: 194: if (delay_time_changed == 1) {
  6481  0FC2  0024               	movlb	4	; select bank4
  6482  0FC3  0361               	decf	_delay_time_changed^(0+512),w
  6483  0FC4  1D03               	btfss	3,2
  6484  0FC5  2C76               	goto	l9389
  6485                           
  6486                           ;main.c: 195: delay_time = baseline_delay_time;
  6487  0FC6  0021               	movlb	1	; select bank1
  6488  0FC7  0856               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6489  0FC8  0024               	movlb	4	; select bank4
  6490  0FC9  00CC               	movwf	(_delay_time+3)^(0+512)	;volatile
  6491  0FCA  0021               	movlb	1	; select bank1
  6492  0FCB  0855               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6493  0FCC  0024               	movlb	4	; select bank4
  6494  0FCD  00CB               	movwf	(_delay_time+2)^(0+512)	;volatile
  6495  0FCE  0021               	movlb	1	; select bank1
  6496  0FCF  0854               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6497  0FD0  0024               	movlb	4	; select bank4
  6498  0FD1  00CA               	movwf	(_delay_time+1)^(0+512)	;volatile
  6499  0FD2  0021               	movlb	1	; select bank1
  6500  0FD3  0853               	movf	_baseline_delay_time^(0+128),w	;volatile
  6501  0FD4  0024               	movlb	4	; select bank4
  6502  0FD5  00C9               	movwf	_delay_time^(0+512)	;volatile
  6503                           
  6504                           ;main.c: 196: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6505  0FD6  0021               	movlb	1	; select bank1
  6506  0FD7  0854               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6507  0FD8  0023               	movlb	3	; select bank3
  6508  0FD9  00C0               	movwf	(set_subdivision@x+1)^(0+384)
  6509  0FDA  0021               	movlb	1	; select bank1
  6510  0FDB  0853               	movf	_baseline_delay_time^(0+128),w	;volatile
  6511  0FDC  0023               	movlb	3	; select bank3
  6512  0FDD  00BF               	movwf	set_subdivision@x^(0+384)
  6513  0FDE  0021               	movlb	1	; select bank1
  6514  0FDF  085C               	movf	(_top_push_state+1)^(0+128),w
  6515  0FE0  0023               	movlb	3	; select bank3
  6516  0FE1  00C2               	movwf	(set_subdivision@y+1)^(0+384)
  6517  0FE2  0021               	movlb	1	; select bank1
  6518  0FE3  085B               	movf	_top_push_state^(0+128),w
  6519  0FE4  0023               	movlb	3	; select bank3
  6520  0FE5  00C1               	movwf	set_subdivision@y^(0+384)
  6521  0FE6  319D  2589  318C   	fcall	_set_subdivision
  6522  0FE9  0023               	movlb	3	; select bank3
  6523  0FEA  083F               	movf	?_set_subdivision^(0+384),w
  6524  0FEB  0024               	movlb	4	; select bank4
  6525  0FEC  00C9               	movwf	_delay_time^(0+512)	;volatile
  6526  0FED  0023               	movlb	3	; select bank3
  6527  0FEE  0840               	movf	(?_set_subdivision+1)^(0+384),w
  6528  0FEF  0024               	movlb	4	; select bank4
  6529  0FF0  00CA               	movwf	(_delay_time+1)^(0+512)	;volatile
  6530  0FF1  0D89               	rlf	9,f
  6531  0FF2  3B89               	subwfb	9,f
  6532  0FF3  0989               	comf	9,f
  6533  0FF4  00CB               	movwf	(_delay_time+2)^(0+512)	;volatile
  6534  0FF5  00CC               	movwf	(_delay_time+3)^(0+512)	;volatile
  6535                           
  6536                           ;main.c: 197: reset_sub_delay = 1;
  6537  0FF6  01C6               	clrf	_reset_sub_delay^(0+512)
  6538  0FF7  0AC6               	incf	_reset_sub_delay^(0+512),f
  6539                           
  6540                           ;main.c: 198: delayfound = 0;
  6541  0FF8  0025               	movlb	5	; select bank5
  6542  0FF9  01CD               	clrf	_delayfound^(0+640)
  6543  0FFA  01CE               	clrf	(_delayfound+1)^(0+640)
  6544                           
  6545                           ;main.c: 199: delay_counter = 0;
  6546  0FFB  01CB               	clrf	_delay_counter^(0+640)	;volatile
  6547  0FFC  01CC               	clrf	(_delay_counter+1)^(0+640)	;volatile
  6548                           
  6549                           ;main.c: 211: delay_time_changed = 0;
  6550  0FFD  0024               	movlb	4	; select bank4
  6551  0FFE  01E1               	clrf	_delay_time_changed^(0+512)
  6552  0FFF  2C76               	goto	l9389
  6553  1000                     __end_of_main:	
  6554                           
  6555                           	psect	text1
  6556  22C2                     __ptext1:	
  6557 ;; *************** function _update_selectMode *****************
  6558 ;; Defined at:
  6559 ;;		line 139 in file "tactiles.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      void 
  6566 ;; Registers used:
  6567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6575 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6576 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6577 ;;Total ram usage:        1 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    7
  6580 ;; This function calls:
  6581 ;;		_setExpressionDisplay
  6582 ;;		_setPresetDisplay
  6583 ;; This function is called by:
  6584 ;;		_main
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _update_selectMode
  6590  22C2                     _update_selectMode:	
  6591                           
  6592                           ;tactiles.c: 140: if (mode2_state == 0 && presetSaveMode != 1) {
  6593                           
  6594                           ;incstack = 0
  6595                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6596  22C2  0021               	movlb	1	; select bank1
  6597  22C3  0850               	movf	_mode2_state^(0+128),w
  6598  22C4  1D03               	btfss	3,2
  6599  22C5  2AC9               	goto	l1023
  6600  22C6  0351               	decf	_presetSaveMode^(0+128),w
  6601  22C7  1D03               	btfss	3,2
  6602  22C8  0008               	return
  6603  22C9                     l1023:	
  6604                           ;tactiles.c: 142: return;
  6605                           
  6606                           
  6607                           ;tactiles.c: 143: }
  6608                           ;tactiles.c: 144: if (PORTDbits.RD7 == 0) {
  6609  22C9  0020               	movlb	0	; select bank0
  6610  22CA  1B8F               	btfsc	15,7	;volatile
  6611  22CB  2B18               	goto	l9015
  6612                           
  6613                           ;tactiles.c: 145: debounce_mode1++;
  6614  22CC  3001               	movlw	1
  6615  22CD  0024               	movlb	4	; select bank4
  6616  22CE  07A8               	addwf	_debounce_mode1^(0+512),f
  6617  22CF  3000               	movlw	0
  6618  22D0  3DA9               	addwfc	(_debounce_mode1+1)^(0+512),f
  6619                           
  6620                           ;tactiles.c: 146: if (debounce_mode1 > 25) {
  6621  22D1  0829               	movf	(_debounce_mode1+1)^(0+512),w
  6622  22D2  3A80               	xorlw	128
  6623  22D3  0022               	movlb	2	; select bank2
  6624  22D4  00A7               	movwf	??_update_selectMode^(0+256)
  6625  22D5  3080               	movlw	128
  6626  22D6  0227               	subwf	??_update_selectMode^(0+256),w
  6627  22D7  1D03               	skipz
  6628  22D8  2ADC               	goto	u10275
  6629  22D9  301A               	movlw	26
  6630  22DA  0024               	movlb	4	; select bank4
  6631  22DB  0228               	subwf	_debounce_mode1^(0+512),w
  6632  22DC                     u10275:	
  6633  22DC  1C03               	skipc
  6634  22DD  0008               	return
  6635                           
  6636                           ;tactiles.c: 147: debounce_mode1 = 25;
  6637  22DE  3019               	movlw	25
  6638  22DF  0024               	movlb	4	; select bank4
  6639  22E0  00A8               	movwf	_debounce_mode1^(0+512)
  6640  22E1  3000               	movlw	0
  6641  22E2  00A9               	movwf	(_debounce_mode1^(0+512)+1)
  6642                           
  6643                           ;tactiles.c: 148: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6644  22E3  0021               	movlb	1	; select bank1
  6645  22E4  0850               	movf	_mode2_state^(0+128),w
  6646  22E5  0024               	movlb	4	; select bank4
  6647  22E6  0665               	xorwf	_presetModeCnst^(0+512),w
  6648  22E7  1903               	skipnz
  6649  22E8  2AED               	goto	l8997
  6650  22E9  0021               	movlb	1	; select bank1
  6651  22EA  0351               	decf	_presetSaveMode^(0+128),w
  6652  22EB  1D03               	btfss	3,2
  6653  22EC  2AFE               	goto	l9005
  6654  22ED                     l8997:	
  6655                           
  6656                           ;tactiles.c: 149: presetChannel++;
  6657  22ED  3001               	movlw	1
  6658  22EE  0022               	movlb	2	; select bank2
  6659  22EF  00A7               	movwf	??_update_selectMode^(0+256)
  6660  22F0  0827               	movf	??_update_selectMode^(0+256),w
  6661  22F1  0023               	movlb	3	; select bank3
  6662  22F2  07EF               	addwf	_presetChannel^(0+384),f
  6663                           
  6664                           ;tactiles.c: 150: if (presetChannel > 10) {
  6665  22F3  300B               	movlw	11
  6666  22F4  026F               	subwf	_presetChannel^(0+384),w
  6667  22F5  1C03               	skipc
  6668  22F6  2AF9               	goto	l9003
  6669                           
  6670                           ;tactiles.c: 151: presetChannel = 1;
  6671  22F7  01EF               	clrf	_presetChannel^(0+384)
  6672  22F8  0AEF               	incf	_presetChannel^(0+384),f
  6673  22F9                     l9003:	
  6674                           
  6675                           ;tactiles.c: 152: }
  6676                           ;tactiles.c: 153: setPresetDisplay(presetChannel);
  6677  22F9  086F               	movf	_presetChannel^(0+384),w
  6678  22FA  3187  27C6  31A2   	fcall	_setPresetDisplay
  6679                           
  6680                           ;tactiles.c: 154: } else if (mode2_state == expressModeCnst) {
  6681  22FD  2B14               	goto	l1034
  6682  22FE                     l9005:	
  6683  22FE  0021               	movlb	1	; select bank1
  6684  22FF  0850               	movf	_mode2_state^(0+128),w
  6685  2300  0024               	movlb	4	; select bank4
  6686  2301  0663               	xorwf	_expressModeCnst^(0+512),w
  6687  2302  1D03               	skipz
  6688  2303  2B14               	goto	l1034
  6689                           
  6690                           ;tactiles.c: 155: expressionChannel++;
  6691  2304  3001               	movlw	1
  6692  2305  0022               	movlb	2	; select bank2
  6693  2306  00A7               	movwf	??_update_selectMode^(0+256)
  6694  2307  0827               	movf	??_update_selectMode^(0+256),w
  6695  2308  0024               	movlb	4	; select bank4
  6696  2309  07E4               	addwf	_expressionChannel^(0+512),f
  6697                           
  6698                           ;tactiles.c: 156: if (expressionChannel > 5) {
  6699  230A  3006               	movlw	6
  6700  230B  0264               	subwf	_expressionChannel^(0+512),w
  6701  230C  1C03               	skipc
  6702  230D  2B10               	goto	l9013
  6703                           
  6704                           ;tactiles.c: 157: expressionChannel = 1;
  6705  230E  01E4               	clrf	_expressionChannel^(0+512)
  6706  230F  0AE4               	incf	_expressionChannel^(0+512),f
  6707  2310                     l9013:	
  6708                           
  6709                           ;tactiles.c: 158: }
  6710                           ;tactiles.c: 159: setExpressionDisplay(expressionChannel);
  6711  2310  0864               	movf	_expressionChannel^(0+512),w
  6712  2311  31AB  2346  31A2   	fcall	_setExpressionDisplay
  6713  2314                     l1034:	
  6714                           ;tactiles.c: 160: }
  6715                           ;tactiles.c: 167: while (PORTDbits.RD7 == 0) {
  6716                           
  6717  2314  0020               	movlb	0	; select bank0
  6718  2315  1B8F               	btfsc	15,7	;volatile
  6719  2316  0008               	return
  6720  2317  2B14               	goto	l1034
  6721  2318                     l9015:	
  6722                           ;tactiles.c: 168: }
  6723                           ;tactiles.c: 169: }
  6724                           ;tactiles.c: 170: } else {
  6725                           
  6726                           
  6727                           ;tactiles.c: 171: debounce_mode1 = 0;
  6728  2318  0024               	movlb	4	; select bank4
  6729  2319  01A8               	clrf	_debounce_mode1^(0+512)
  6730  231A  01A9               	clrf	(_debounce_mode1+1)^(0+512)
  6731  231B  0008               	return
  6732  231C                     __end_of_update_selectMode:	
  6733                           
  6734                           	psect	text2
  6735  2E12                     __ptext2:	
  6736 ;; *************** function _update_mode *****************
  6737 ;; Defined at:
  6738 ;;		line 87 in file "tactiles.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;		None
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6754 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6755 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6756 ;;Total ram usage:        1 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    8
  6759 ;; This function calls:
  6760 ;;		_resetRingLEDs
  6761 ;;		_setPedalMode
  6762 ;; This function is called by:
  6763 ;;		_main
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           
  6768                           ;psect for function _update_mode
  6769  2E12                     _update_mode:	
  6770                           
  6771                           ;tactiles.c: 92: if (PORTCbits.RC0 == 0) {
  6772                           
  6773                           ;incstack = 0
  6774                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6775  2E12  0020               	movlb	0	; select bank0
  6776  2E13  180E               	btfsc	14,0	;volatile
  6777  2E14  2E46               	goto	l8983
  6778                           
  6779                           ;tactiles.c: 95: debounce_mode2++;
  6780  2E15  3001               	movlw	1
  6781  2E16  0024               	movlb	4	; select bank4
  6782  2E17  07AA               	addwf	_debounce_mode2^(0+512),f
  6783  2E18  3000               	movlw	0
  6784  2E19  3DAB               	addwfc	(_debounce_mode2+1)^(0+512),f
  6785                           
  6786                           ;tactiles.c: 96: if (debounce_mode2 > 25) {
  6787  2E1A  082B               	movf	(_debounce_mode2+1)^(0+512),w
  6788  2E1B  3A80               	xorlw	128
  6789  2E1C  0022               	movlb	2	; select bank2
  6790  2E1D  00A7               	movwf	??_update_mode^(0+256)
  6791  2E1E  3080               	movlw	128
  6792  2E1F  0227               	subwf	??_update_mode^(0+256),w
  6793  2E20  1D03               	skipz
  6794  2E21  2E25               	goto	u10205
  6795  2E22  301A               	movlw	26
  6796  2E23  0024               	movlb	4	; select bank4
  6797  2E24  022A               	subwf	_debounce_mode2^(0+512),w
  6798  2E25                     u10205:	
  6799  2E25  1C03               	skipc
  6800  2E26  0008               	return
  6801                           
  6802                           ;tactiles.c: 97: debounce_mode2 = 25;
  6803  2E27  3019               	movlw	25
  6804  2E28  0024               	movlb	4	; select bank4
  6805  2E29  00AA               	movwf	_debounce_mode2^(0+512)
  6806  2E2A  3000               	movlw	0
  6807  2E2B  00AB               	movwf	(_debounce_mode2^(0+512)+1)
  6808                           
  6809                           ;tactiles.c: 99: if (presetSaveMode == 1) {
  6810  2E2C  0021               	movlb	1	; select bank1
  6811  2E2D  0351               	decf	_presetSaveMode^(0+128),w
  6812  2E2E  1D03               	btfss	3,2
  6813  2E2F  2E35               	goto	l8975
  6814                           
  6815                           ;tactiles.c: 100: presetSaveMode = 0;
  6816  2E30  01D1               	clrf	_presetSaveMode^(0+128)
  6817                           
  6818                           ;tactiles.c: 101: resetRingLEDs();
  6819  2E31  31AB  23A9  31AE   	fcall	_resetRingLEDs
  6820                           
  6821                           ;tactiles.c: 102: } else {
  6822  2E34  2E3F               	goto	l8981
  6823  2E35                     l8975:	
  6824                           
  6825                           ;tactiles.c: 103: mode2_state++;
  6826  2E35  3001               	movlw	1
  6827  2E36  0022               	movlb	2	; select bank2
  6828  2E37  00A7               	movwf	??_update_mode^(0+256)
  6829  2E38  0827               	movf	??_update_mode^(0+256),w
  6830  2E39  0021               	movlb	1	; select bank1
  6831  2E3A  07D0               	addwf	_mode2_state^(0+128),f
  6832                           
  6833                           ;tactiles.c: 104: if (mode2_state > 2) {
  6834  2E3B  3003               	movlw	3
  6835  2E3C  0250               	subwf	_mode2_state^(0+128),w
  6836  2E3D  1803               	btfsc	3,0
  6837                           
  6838                           ;tactiles.c: 105: mode2_state = 0;
  6839  2E3E  01D0               	clrf	_mode2_state^(0+128)
  6840  2E3F                     l8981:	
  6841                           
  6842                           ;tactiles.c: 106: }
  6843                           ;tactiles.c: 107: }
  6844                           ;tactiles.c: 109: setPedalMode();
  6845  2E3F  31AC  247B  31AE   	fcall	_setPedalMode
  6846  2E42                     l1008:	
  6847                           ;tactiles.c: 110: while (PORTCbits.RC0 == 0) {
  6848                           
  6849  2E42  0020               	movlb	0	; select bank0
  6850  2E43  180E               	btfsc	14,0	;volatile
  6851  2E44  0008               	return
  6852  2E45  2E42               	goto	l1008
  6853  2E46                     l8983:	
  6854                           ;tactiles.c: 111: }
  6855                           ;tactiles.c: 112: }
  6856                           ;tactiles.c: 113: } else {
  6857                           
  6858                           
  6859                           ;tactiles.c: 114: debounce_mode2 = 0;
  6860  2E46  0024               	movlb	4	; select bank4
  6861  2E47  01AA               	clrf	_debounce_mode2^(0+512)
  6862  2E48  01AB               	clrf	(_debounce_mode2+1)^(0+512)
  6863  2E49  0008               	return
  6864  2E4A                     __end_of_update_mode:	
  6865                           
  6866                           	psect	text3
  6867  04C7                     __ptext3:	
  6868 ;; *************** function _updateSwitchTap *****************
  6869 ;; Defined at:
  6870 ;;		line 48 in file "SwitchTap.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  tapCntDiviso    2   34[BANK2 ] int 
  6875 ;;  iCnt            1   36[BANK2 ] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  1    wreg      void 
  6878 ;; Registers used:
  6879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6886 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6887 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6888 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6889 ;;Total ram usage:        9 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:   10
  6892 ;; This function calls:
  6893 ;;		___aldiv
  6894 ;;		_setDoublePressState
  6895 ;;		_setLongTapState
  6896 ;; This function is called by:
  6897 ;;		_main
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           
  6902                           ;psect for function _updateSwitchTap
  6903  04C7                     _updateSwitchTap:	
  6904                           
  6905                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6906                           
  6907                           ;incstack = 0
  6908                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6909  04C7  0022               	movlb	2	; select bank2
  6910  04C8  01C4               	clrf	updateSwitchTap@iCnt^(0+256)
  6911                           
  6912                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6913  04C9  0020               	movlb	0	; select bank0
  6914  04CA  1810               	btfsc	16,0	;volatile
  6915  04CB  2CD3               	goto	l9111
  6916                           
  6917                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6918  04CC  0023               	movlb	3	; select bank3
  6919  04CD  086E               	movf	_switchTap_pressed^(0+384),w
  6920  04CE  1903               	btfsc	3,2
  6921  04CF  2CDE               	goto	l1420
  6922                           
  6923                           ;SwitchTap.c: 59: switchTap_pressed--;
  6924  04D0  3001               	movlw	1
  6925  04D1  02EE               	subwf	_switchTap_pressed^(0+384),f
  6926                           
  6927                           ;SwitchTap.c: 60: }
  6928                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6929  04D2  2CDE               	goto	l1420
  6930  04D3                     l9111:	
  6931  04D3  3019               	movlw	25
  6932  04D4  0023               	movlb	3	; select bank3
  6933  04D5  026E               	subwf	_switchTap_pressed^(0+384),w
  6934  04D6  1803               	skipnc
  6935  04D7  2CDE               	goto	l1420
  6936                           
  6937                           ;SwitchTap.c: 62: switchTap_pressed++;
  6938  04D8  3001               	movlw	1
  6939  04D9  0022               	movlb	2	; select bank2
  6940  04DA  00BC               	movwf	??_updateSwitchTap^(0+256)
  6941  04DB  083C               	movf	??_updateSwitchTap^(0+256),w
  6942  04DC  0023               	movlb	3	; select bank3
  6943  04DD  07EE               	addwf	_switchTap_pressed^(0+384),f
  6944  04DE                     l1420:	
  6945                           
  6946                           ;SwitchTap.c: 63: }
  6947                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6948  04DE  086E               	movf	_switchTap_pressed^(0+384),w
  6949  04DF  1D03               	btfss	3,2
  6950  04E0  2E96               	goto	l9195
  6951                           
  6952                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6953  04E1  0021               	movlb	1	; select bank1
  6954  04E2  1BC8               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  6955  04E3  2D6A               	goto	l9155
  6956  04E4  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  6957  04E5  1D03               	btfss	3,2
  6958  04E6  2CF0               	goto	l9117
  6959  04E7  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  6960  04E8  1D03               	btfss	3,2
  6961  04E9  2CF0               	goto	l9117
  6962  04EA  301B               	movlw	27
  6963  04EB  0245               	subwf	_tap_timer^(0+128),w	;volatile
  6964  04EC  3006               	movlw	6
  6965  04ED  3B46               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  6966  04EE  1C03               	btfss	3,0
  6967  04EF  2D6A               	goto	l9155
  6968  04F0                     l9117:	
  6969                           
  6970                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6971  04F0  0024               	movlb	4	; select bank4
  6972  04F1  0347               	decf	_switchTap_down^(0+512),w
  6973  04F2  1903               	btfsc	3,2
  6974  04F3  2D2F               	goto	l9133
  6975                           
  6976                           ;SwitchTap.c: 78: switchTap_down = 1;
  6977  04F4  01C7               	clrf	_switchTap_down^(0+512)
  6978  04F5  0AC7               	incf	_switchTap_down^(0+512),f
  6979                           
  6980                           ;SwitchTap.c: 79: tap_timer = 0;
  6981  04F6  3000               	movlw	0
  6982  04F7  0021               	movlb	1	; select bank1
  6983  04F8  00C8               	movwf	(_tap_timer+3)^(0+128)	;volatile
  6984  04F9  3000               	movlw	0
  6985  04FA  00C7               	movwf	(_tap_timer+2)^(0+128)	;volatile
  6986  04FB  3000               	movlw	0
  6987  04FC  00C6               	movwf	(_tap_timer+1)^(0+128)	;volatile
  6988  04FD  3000               	movlw	0
  6989  04FE  00C5               	movwf	_tap_timer^(0+128)	;volatile
  6990                           
  6991                           ;SwitchTap.c: 80: tap_iteration = 1;
  6992  04FF  3001               	movlw	1
  6993  0500  0024               	movlb	4	; select bank4
  6994  0501  00DD               	movwf	_tap_iteration^(0+512)
  6995  0502  3000               	movlw	0
  6996  0503  00DE               	movwf	(_tap_iteration^(0+512)+1)
  6997                           
  6998                           ;SwitchTap.c: 81: tap_total = 0;
  6999  0504  3000               	movlw	0
  7000  0505  0025               	movlb	5	; select bank5
  7001  0506  00C0               	movwf	(_tap_total+3)^(0+640)
  7002  0507  3000               	movlw	0
  7003  0508  00BF               	movwf	(_tap_total+2)^(0+640)
  7004  0509  3000               	movlw	0
  7005  050A  00BE               	movwf	(_tap_total+1)^(0+640)
  7006  050B  3000               	movlw	0
  7007  050C  00BD               	movwf	_tap_total^(0+640)
  7008                           
  7009                           ;SwitchTap.c: 82: delay_time_changed = 0;
  7010  050D  0024               	movlb	4	; select bank4
  7011  050E  01E1               	clrf	_delay_time_changed^(0+512)
  7012                           
  7013                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7014  050F  0022               	movlb	2	; select bank2
  7015  0510  01C4               	clrf	updateSwitchTap@iCnt^(0+256)
  7016  0511  0AC4               	incf	updateSwitchTap@iCnt^(0+256),f
  7017  0512                     l9131:	
  7018  0512  0844               	movf	updateSwitchTap@iCnt^(0+256),w
  7019  0513  0021               	movlb	1	; select bank1
  7020  0514  0260               	subwf	_num_taps^(0+128),w
  7021  0515  1C03               	btfss	3,0
  7022  0516  2D2F               	goto	l9133
  7023                           
  7024                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  7025  0517  0022               	movlb	2	; select bank2
  7026  0518  0844               	movf	updateSwitchTap@iCnt^(0+256),w
  7027  0519  00BC               	movwf	??_updateSwitchTap^(0+256)
  7028  051A  3001               	movlw	1
  7029  051B                     u10615:	
  7030  051B  35BC               	lslf	??_updateSwitchTap^(0+256),f
  7031  051C  3EFF               	addlw	-1
  7032  051D  1D03               	skipz
  7033  051E  2D1B               	goto	u10615
  7034  051F  353C               	lslf	??_updateSwitchTap^(0+256),w
  7035  0520  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7036  0521  0086               	movwf	6
  7037  0522  3002               	movlw	2	; select bank5/6
  7038  0523  0087               	movwf	7
  7039  0524  3000               	movlw	0
  7040  0525  3FC0               	movwi [0]fsr1
  7041  0526  3000               	movlw	0
  7042  0527  3FC1               	movwi [1]fsr1
  7043  0528  3FC2               	movwi [2]fsr1
  7044  0529  3FC3               	movwi [3]fsr1
  7045  052A  3001               	movlw	1
  7046  052B  00BC               	movwf	??_updateSwitchTap^(0+256)
  7047  052C  083C               	movf	??_updateSwitchTap^(0+256),w
  7048  052D  07C4               	addwf	updateSwitchTap@iCnt^(0+256),f
  7049  052E  2D12               	goto	l9131
  7050  052F                     l9133:	
  7051                           
  7052                           ;SwitchTap.c: 86: }
  7053                           ;SwitchTap.c: 87: }
  7054                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  7055  052F  0023               	movlb	3	; select bank3
  7056  0530  086D               	movf	_longTap_start^(0+384),w
  7057  0531  1D03               	btfss	3,2
  7058  0532  2D3A               	goto	l9139
  7059                           
  7060                           ;SwitchTap.c: 91: longTap_start = 1;
  7061  0533  01ED               	clrf	_longTap_start^(0+384)
  7062  0534  0AED               	incf	_longTap_start^(0+384),f
  7063                           
  7064                           ;SwitchTap.c: 92: longTap_state = 0;
  7065  0535  0021               	movlb	1	; select bank1
  7066  0536  01DF               	clrf	_longTap_state^(0+128)	;volatile
  7067                           
  7068                           ;SwitchTap.c: 93: longTap_timer = 0;
  7069  0537  0024               	movlb	4	; select bank4
  7070  0538  01B8               	clrf	_longTap_timer^(0+512)	;volatile
  7071  0539  01B9               	clrf	(_longTap_timer+1)^(0+512)	;volatile
  7072  053A                     l9139:	
  7073                           
  7074                           ;SwitchTap.c: 94: }
  7075                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  7076  053A  0021               	movlb	1	; select bank1
  7077  053B  085A               	movf	(_long_press_limit+1)^(0+128),w
  7078  053C  0024               	movlb	4	; select bank4
  7079  053D  0239               	subwf	(_longTap_timer+1)^(0+512),w	;volatile
  7080  053E  1D03               	skipz
  7081  053F  2D44               	goto	u10645
  7082  0540  0021               	movlb	1	; select bank1
  7083  0541  0859               	movf	_long_press_limit^(0+128),w
  7084  0542  0024               	movlb	4	; select bank4
  7085  0543  0238               	subwf	_longTap_timer^(0+512),w	;volatile
  7086  0544                     u10645:	
  7087  0544  1C03               	skipc
  7088  0545  0008               	return
  7089  0546  0021               	movlb	1	; select bank1
  7090  0547  085F               	movf	_longTap_state^(0+128),w	;volatile
  7091  0548  1D03               	btfss	3,2
  7092  0549  0008               	return
  7093  054A  084F               	movf	_doubleTap_state^(0+128),w	;volatile
  7094  054B  1D03               	btfss	3,2
  7095  054C  0008               	return
  7096                           
  7097                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  7098  054D  085A               	movf	(_long_press_limit+1)^(0+128),w
  7099  054E  0024               	movlb	4	; select bank4
  7100  054F  00B9               	movwf	(_longTap_timer+1)^(0+512)	;volatile
  7101  0550  0021               	movlb	1	; select bank1
  7102  0551  0859               	movf	_long_press_limit^(0+128),w
  7103  0552  0024               	movlb	4	; select bank4
  7104  0553  00B8               	movwf	_longTap_timer^(0+512)	;volatile
  7105                           
  7106                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7107  0554  0022               	movlb	2	; select bank2
  7108  0555  120D               	bcf	13,4	;volatile
  7109                           
  7110                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  7111  0556  0023               	movlb	3	; select bank3
  7112  0557  036C               	decf	_feedback_start^(0+384),w
  7113  0558  1903               	btfsc	3,2
  7114  0559  2D62               	goto	l9153
  7115                           
  7116                           ;SwitchTap.c: 104: setLongTapState(1);
  7117  055A  3001               	movlw	1
  7118  055B  0022               	movlb	2	; select bank2
  7119  055C  00A0               	movwf	setLongTapState@f_state^(0+256)
  7120  055D  3000               	movlw	0
  7121  055E  00A1               	movwf	(setLongTapState@f_state^(0+256)+1)
  7122  055F  31AB  2390         	fcall	_setLongTapState
  7123                           
  7124                           ;SwitchTap.c: 105: } else {
  7125  0561  0008               	return
  7126  0562                     l9153:	
  7127                           
  7128                           ;SwitchTap.c: 106: setDoublePressState(1);
  7129  0562  3001               	movlw	1
  7130  0563  0022               	movlb	2	; select bank2
  7131  0564  00B8               	movwf	setDoublePressState@f_state^(0+256)
  7132  0565  3000               	movlw	0
  7133  0566  00B9               	movwf	(setDoublePressState@f_state^(0+256)+1)
  7134  0567  31AE  26C1         	fcall	_setDoublePressState
  7135                           
  7136                           ;SwitchTap.c: 107: }
  7137                           ;SwitchTap.c: 108: }
  7138                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7139  0569  0008               	return
  7140  056A                     l9155:	
  7141  056A  0021               	movlb	1	; select bank1
  7142  056B  1BC8               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7143  056C  2D79               	goto	l9157
  7144  056D  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7145  056E  1D03               	btfss	3,2
  7146  056F  0008               	return
  7147  0570  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7148  0571  1D03               	btfss	3,2
  7149  0572  0008               	return
  7150  0573  301B               	movlw	27
  7151  0574  0245               	subwf	_tap_timer^(0+128),w	;volatile
  7152  0575  3006               	movlw	6
  7153  0576  3B46               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7154  0577  1803               	btfsc	3,0
  7155  0578  0008               	return
  7156  0579                     l9157:	
  7157  0579  085F               	movf	_longTap_state^(0+128),w	;volatile
  7158  057A  1D03               	btfss	3,2
  7159  057B  0008               	return
  7160  057C  0024               	movlb	4	; select bank4
  7161  057D  0347               	decf	_switchTap_down^(0+512),w
  7162  057E  1903               	btfsc	3,2
  7163  057F  0008               	return
  7164                           
  7165                           ;SwitchTap.c: 112: switchTap_down = 1;
  7166  0580  01C7               	clrf	_switchTap_down^(0+512)
  7167  0581  0AC7               	incf	_switchTap_down^(0+512),f
  7168                           
  7169                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7170  0582  0021               	movlb	1	; select bank1
  7171  0583  1BC8               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7172  0584  2D99               	goto	l1434
  7173  0585  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7174  0586  1D03               	btfss	3,2
  7175  0587  2D91               	goto	l9165
  7176  0588  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7177  0589  1D03               	btfss	3,2
  7178  058A  2D91               	goto	l9165
  7179  058B  3094               	movlw	148
  7180  058C  0245               	subwf	_tap_timer^(0+128),w	;volatile
  7181  058D  3004               	movlw	4
  7182  058E  3B46               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7183  058F  1C03               	btfss	3,0
  7184  0590  2D99               	goto	l1434
  7185  0591                     l9165:	
  7186                           
  7187                           ;SwitchTap.c: 114: tap_timer = 1172;
  7188  0591  3000               	movlw	0
  7189  0592  00C8               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7190  0593  3000               	movlw	0
  7191  0594  00C7               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7192  0595  3004               	movlw	4
  7193  0596  00C6               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7194  0597  3094               	movlw	148
  7195  0598  00C5               	movwf	_tap_timer^(0+128)	;volatile
  7196  0599                     l1434:	
  7197                           
  7198                           ;SwitchTap.c: 115: }
  7199                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7200  0599  0860               	movf	_num_taps^(0+128),w
  7201  059A  0022               	movlb	2	; select bank2
  7202  059B  00BC               	movwf	??_updateSwitchTap^(0+256)
  7203  059C  01BD               	clrf	(??_updateSwitchTap^(0+256)+1)
  7204  059D  083C               	movf	??_updateSwitchTap^(0+256),w
  7205  059E  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+256)
  7206  059F  083D               	movf	(??_updateSwitchTap+1)^(0+256),w
  7207  05A0  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+256)
  7208                           
  7209                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7210  05A1  0024               	movlb	4	; select bank4
  7211  05A2  085E               	movf	(_tap_iteration+1)^(0+512),w
  7212  05A3  3A80               	xorlw	128
  7213  05A4  3C80               	sublw	128
  7214  05A5  1D03               	skipz
  7215  05A6  2DAA               	goto	u10725
  7216  05A7  085D               	movf	_tap_iteration^(0+512),w
  7217  05A8  0021               	movlb	1	; select bank1
  7218  05A9  0260               	subwf	_num_taps^(0+128),w
  7219  05AA                     u10725:	
  7220  05AA  1C03               	skipc
  7221  05AB  2DDC               	goto	l9173
  7222                           
  7223                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7224  05AC  0021               	movlb	1	; select bank1
  7225  05AD  0845               	movf	_tap_timer^(0+128),w	;volatile
  7226  05AE  0025               	movlb	5	; select bank5
  7227  05AF  07BD               	addwf	_tap_total^(0+640),f
  7228  05B0  0021               	movlb	1	; select bank1
  7229  05B1  0846               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7230  05B2  0025               	movlb	5	; select bank5
  7231  05B3  3DBE               	addwfc	(_tap_total+1)^(0+640),f
  7232  05B4  0021               	movlb	1	; select bank1
  7233  05B5  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7234  05B6  0025               	movlb	5	; select bank5
  7235  05B7  3DBF               	addwfc	(_tap_total+2)^(0+640),f
  7236  05B8  0021               	movlb	1	; select bank1
  7237  05B9  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7238  05BA  0025               	movlb	5	; select bank5
  7239  05BB  3DC0               	addwfc	(_tap_total+3)^(0+640),f
  7240                           
  7241                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7242  05BC  0024               	movlb	4	; select bank4
  7243  05BD  085D               	movf	_tap_iteration^(0+512),w
  7244  05BE  0022               	movlb	2	; select bank2
  7245  05BF  00BC               	movwf	??_updateSwitchTap^(0+256)
  7246  05C0  3001               	movlw	1
  7247  05C1                     u10735:	
  7248  05C1  35BC               	lslf	??_updateSwitchTap^(0+256),f
  7249  05C2  3EFF               	addlw	-1
  7250  05C3  1D03               	skipz
  7251  05C4  2DC1               	goto	u10735
  7252  05C5  353C               	lslf	??_updateSwitchTap^(0+256),w
  7253  05C6  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7254  05C7  0086               	movwf	6
  7255  05C8  3002               	movlw	2	; select bank5/6
  7256  05C9  0087               	movwf	7
  7257  05CA  0021               	movlb	1	; select bank1
  7258  05CB  0845               	movf	_tap_timer^(0+128),w	;volatile
  7259  05CC  3FC0               	movwi [0]fsr1
  7260  05CD  0846               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7261  05CE  3FC1               	movwi [1]fsr1
  7262  05CF  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7263  05D0  3FC2               	movwi [2]fsr1
  7264  05D1  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7265  05D2  3FC3               	movwi [3]fsr1
  7266                           
  7267                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7268  05D3  0024               	movlb	4	; select bank4
  7269  05D4  085E               	movf	(_tap_iteration+1)^(0+512),w
  7270  05D5  0022               	movlb	2	; select bank2
  7271  05D6  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+256)
  7272  05D7  0024               	movlb	4	; select bank4
  7273  05D8  085D               	movf	_tap_iteration^(0+512),w
  7274  05D9  0022               	movlb	2	; select bank2
  7275  05DA  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+256)
  7276                           
  7277                           ;SwitchTap.c: 122: } else {
  7278  05DB  2E58               	goto	l9187
  7279  05DC                     l9173:	
  7280                           
  7281                           ;SwitchTap.c: 123: tap_total = 0;
  7282  05DC  3000               	movlw	0
  7283  05DD  0025               	movlb	5	; select bank5
  7284  05DE  00C0               	movwf	(_tap_total+3)^(0+640)
  7285  05DF  3000               	movlw	0
  7286  05E0  00BF               	movwf	(_tap_total+2)^(0+640)
  7287  05E1  3000               	movlw	0
  7288  05E2  00BE               	movwf	(_tap_total+1)^(0+640)
  7289  05E3  3000               	movlw	0
  7290  05E4  00BD               	movwf	_tap_total^(0+640)
  7291                           
  7292                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7293  05E5  0022               	movlb	2	; select bank2
  7294  05E6  01C4               	clrf	updateSwitchTap@iCnt^(0+256)
  7295  05E7  0AC4               	incf	updateSwitchTap@iCnt^(0+256),f
  7296  05E8                     l9181:	
  7297  05E8  0021               	movlb	1	; select bank1
  7298  05E9  0860               	movf	_num_taps^(0+128),w
  7299  05EA  0022               	movlb	2	; select bank2
  7300  05EB  0244               	subwf	updateSwitchTap@iCnt^(0+256),w
  7301  05EC  1803               	btfsc	3,0
  7302  05ED  2E32               	goto	l9183
  7303                           
  7304                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7305  05EE  0844               	movf	updateSwitchTap@iCnt^(0+256),w
  7306  05EF  00BC               	movwf	??_updateSwitchTap^(0+256)
  7307  05F0  3001               	movlw	1
  7308  05F1                     u10745:	
  7309  05F1  35BC               	lslf	??_updateSwitchTap^(0+256),f
  7310  05F2  3EFF               	addlw	-1
  7311  05F3  1D03               	skipz
  7312  05F4  2DF1               	goto	u10745
  7313  05F5  353C               	lslf	??_updateSwitchTap^(0+256),w
  7314  05F6  3E04               	addlw	4
  7315  05F7  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7316  05F8  0086               	movwf	6
  7317  05F9  3002               	movlw	2	; select bank5/6
  7318  05FA  0087               	movwf	7
  7319  05FB  3F40               	moviw [0]fsr1
  7320  05FC  00BD               	movwf	(??_updateSwitchTap+1)^(0+256)
  7321  05FD  3F41               	moviw [1]fsr1
  7322  05FE  00BE               	movwf	((??_updateSwitchTap+1)^(0+256)+1)
  7323  05FF  3F42               	moviw [2]fsr1
  7324  0600  00BF               	movwf	((??_updateSwitchTap+1)^(0+256)+2)
  7325  0601  3F43               	moviw [3]fsr1
  7326  0602  00C0               	movwf	((??_updateSwitchTap+1)^(0+256)+3)
  7327  0603  0844               	movf	updateSwitchTap@iCnt^(0+256),w
  7328  0604  00C1               	movwf	(??_updateSwitchTap+5)^(0+256)
  7329  0605  3001               	movlw	1
  7330  0606                     u10755:	
  7331  0606  35C1               	lslf	(??_updateSwitchTap+5)^(0+256),f
  7332  0607  3EFF               	addlw	-1
  7333  0608  1D03               	skipz
  7334  0609  2E06               	goto	u10755
  7335  060A  3541               	lslf	(??_updateSwitchTap+5)^(0+256),w
  7336  060B  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7337  060C  0086               	movwf	6
  7338  060D  3002               	movlw	2	; select bank5/6
  7339  060E  0087               	movwf	7
  7340  060F  083D               	movf	(??_updateSwitchTap+1)^(0+256),w
  7341  0610  3FC0               	movwi [0]fsr1
  7342  0611  083E               	movf	(??_updateSwitchTap+2)^(0+256),w
  7343  0612  3FC1               	movwi [1]fsr1
  7344  0613  083F               	movf	(??_updateSwitchTap+3)^(0+256),w
  7345  0614  3FC2               	movwi [2]fsr1
  7346  0615  0840               	movf	(??_updateSwitchTap+4)^(0+256),w
  7347  0616  3FC3               	movwi [3]fsr1
  7348                           
  7349                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7350  0617  0844               	movf	updateSwitchTap@iCnt^(0+256),w
  7351  0618  00BC               	movwf	??_updateSwitchTap^(0+256)
  7352  0619  3001               	movlw	1
  7353  061A                     u10765:	
  7354  061A  35BC               	lslf	??_updateSwitchTap^(0+256),f
  7355  061B  3EFF               	addlw	-1
  7356  061C  1D03               	skipz
  7357  061D  2E1A               	goto	u10765
  7358  061E  353C               	lslf	??_updateSwitchTap^(0+256),w
  7359  061F  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7360  0620  0086               	movwf	6
  7361  0621  3002               	movlw	2	; select bank5/6
  7362  0622  0087               	movwf	7
  7363  0623  3F40               	moviw [0]fsr1
  7364  0624  0025               	movlb	5	; select bank5
  7365  0625  07BD               	addwf	_tap_total^(0+640),f
  7366  0626  3F41               	moviw [1]fsr1
  7367  0627  3DBE               	addwfc	(_tap_total+1)^(0+640),f
  7368  0628  3F42               	moviw [2]fsr1
  7369  0629  3DBF               	addwfc	(_tap_total+2)^(0+640),f
  7370  062A  3F43               	moviw [3]fsr1
  7371  062B  3DC0               	addwfc	(_tap_total+3)^(0+640),f
  7372  062C  3001               	movlw	1
  7373  062D  0022               	movlb	2	; select bank2
  7374  062E  00BC               	movwf	??_updateSwitchTap^(0+256)
  7375  062F  083C               	movf	??_updateSwitchTap^(0+256),w
  7376  0630  07C4               	addwf	updateSwitchTap@iCnt^(0+256),f
  7377  0631  2DE8               	goto	l9181
  7378  0632                     l9183:	
  7379                           
  7380                           ;SwitchTap.c: 127: }
  7381                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7382  0632  0021               	movlb	1	; select bank1
  7383  0633  0860               	movf	_num_taps^(0+128),w
  7384  0634  0022               	movlb	2	; select bank2
  7385  0635  00BC               	movwf	??_updateSwitchTap^(0+256)
  7386  0636  3001               	movlw	1
  7387  0637                     u10785:	
  7388  0637  35BC               	lslf	??_updateSwitchTap^(0+256),f
  7389  0638  3EFF               	addlw	-1
  7390  0639  1D03               	skipz
  7391  063A  2E37               	goto	u10785
  7392  063B  353C               	lslf	??_updateSwitchTap^(0+256),w
  7393  063C  3EA0               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7394  063D  0086               	movwf	6
  7395  063E  3002               	movlw	2	; select bank5/6
  7396  063F  0087               	movwf	7
  7397  0640  0021               	movlb	1	; select bank1
  7398  0641  0845               	movf	_tap_timer^(0+128),w	;volatile
  7399  0642  3FC0               	movwi [0]fsr1
  7400  0643  0846               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7401  0644  3FC1               	movwi [1]fsr1
  7402  0645  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7403  0646  3FC2               	movwi [2]fsr1
  7404  0647  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7405  0648  3FC3               	movwi [3]fsr1
  7406                           
  7407                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7408  0649  0845               	movf	_tap_timer^(0+128),w	;volatile
  7409  064A  0025               	movlb	5	; select bank5
  7410  064B  07BD               	addwf	_tap_total^(0+640),f
  7411  064C  0021               	movlb	1	; select bank1
  7412  064D  0846               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7413  064E  0025               	movlb	5	; select bank5
  7414  064F  3DBE               	addwfc	(_tap_total+1)^(0+640),f
  7415  0650  0021               	movlb	1	; select bank1
  7416  0651  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7417  0652  0025               	movlb	5	; select bank5
  7418  0653  3DBF               	addwfc	(_tap_total+2)^(0+640),f
  7419  0654  0021               	movlb	1	; select bank1
  7420  0655  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7421  0656  0025               	movlb	5	; select bank5
  7422  0657  3DC0               	addwfc	(_tap_total+3)^(0+640),f
  7423  0658                     l9187:	
  7424                           
  7425                           ;SwitchTap.c: 130: }
  7426                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7427  0658  0022               	movlb	2	; select bank2
  7428  0659  0842               	movf	updateSwitchTap@tapCntDivisor^(0+256),w
  7429  065A  00A0               	movwf	___aldiv@divisor^(0+256)
  7430  065B  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+256),w
  7431  065C  00A1               	movwf	(___aldiv@divisor+1)^(0+256)
  7432  065D  0D89               	rlf	9,f
  7433  065E  3B89               	subwfb	9,f
  7434  065F  0989               	comf	9,f
  7435  0660  00A2               	movwf	(___aldiv@divisor+2)^(0+256)
  7436  0661  00A3               	movwf	(___aldiv@divisor+3)^(0+256)
  7437  0662  0025               	movlb	5	; select bank5
  7438  0663  0840               	movf	(_tap_total+3)^(0+640),w
  7439  0664  0022               	movlb	2	; select bank2
  7440  0665  00A7               	movwf	(___aldiv@dividend+3)^(0+256)
  7441  0666  0025               	movlb	5	; select bank5
  7442  0667  083F               	movf	(_tap_total+2)^(0+640),w
  7443  0668  0022               	movlb	2	; select bank2
  7444  0669  00A6               	movwf	(___aldiv@dividend+2)^(0+256)
  7445  066A  0025               	movlb	5	; select bank5
  7446  066B  083E               	movf	(_tap_total+1)^(0+640),w
  7447  066C  0022               	movlb	2	; select bank2
  7448  066D  00A5               	movwf	(___aldiv@dividend+1)^(0+256)
  7449  066E  0025               	movlb	5	; select bank5
  7450  066F  083D               	movf	_tap_total^(0+640),w
  7451  0670  0022               	movlb	2	; select bank2
  7452  0671  00A4               	movwf	___aldiv@dividend^(0+256)
  7453  0672  31A4  24D9         	fcall	___aldiv
  7454  0674  0022               	movlb	2	; select bank2
  7455  0675  0823               	movf	(?___aldiv+3)^(0+256),w
  7456  0676  0021               	movlb	1	; select bank1
  7457  0677  00D6               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7458  0678  0022               	movlb	2	; select bank2
  7459  0679  0822               	movf	(?___aldiv+2)^(0+256),w
  7460  067A  0021               	movlb	1	; select bank1
  7461  067B  00D5               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7462  067C  0022               	movlb	2	; select bank2
  7463  067D  0821               	movf	(?___aldiv+1)^(0+256),w
  7464  067E  0021               	movlb	1	; select bank1
  7465  067F  00D4               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7466  0680  0022               	movlb	2	; select bank2
  7467  0681  0820               	movf	?___aldiv^(0+256),w
  7468  0682  0021               	movlb	1	; select bank1
  7469  0683  00D3               	movwf	_baseline_delay_time^(0+128)	;volatile
  7470                           
  7471                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7472  0684  0024               	movlb	4	; select bank4
  7473  0685  01E1               	clrf	_delay_time_changed^(0+512)
  7474  0686  0AE1               	incf	_delay_time_changed^(0+512),f
  7475                           
  7476                           ;SwitchTap.c: 134: tap_timer = 0;
  7477  0687  3000               	movlw	0
  7478  0688  0021               	movlb	1	; select bank1
  7479  0689  00C8               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7480  068A  3000               	movlw	0
  7481  068B  00C7               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7482  068C  3000               	movlw	0
  7483  068D  00C6               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7484  068E  3000               	movlw	0
  7485  068F  00C5               	movwf	_tap_timer^(0+128)	;volatile
  7486                           
  7487                           ;SwitchTap.c: 136: tap_iteration++;
  7488  0690  3001               	movlw	1
  7489  0691  0024               	movlb	4	; select bank4
  7490  0692  07DD               	addwf	_tap_iteration^(0+512),f
  7491  0693  3000               	movlw	0
  7492  0694  3DDE               	addwfc	(_tap_iteration+1)^(0+512),f
  7493                           
  7494                           ;SwitchTap.c: 137: }
  7495                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7496  0695  0008               	return
  7497  0696                     l9195:	
  7498  0696  3019               	movlw	25
  7499  0697  0023               	movlb	3	; select bank3
  7500  0698  026E               	subwf	_switchTap_pressed^(0+384),w
  7501  0699  1C03               	skipc
  7502  069A  0008               	return
  7503                           
  7504                           ;SwitchTap.c: 140: switchTap_down = 0;
  7505  069B  0024               	movlb	4	; select bank4
  7506  069C  01C7               	clrf	_switchTap_down^(0+512)
  7507                           
  7508                           ;SwitchTap.c: 141: switchTap_state = 0;
  7509  069D  01E6               	clrf	_switchTap_state^(0+512)
  7510                           
  7511                           ;SwitchTap.c: 147: setLongTapState(0);
  7512  069E  3000               	movlw	0
  7513  069F  0022               	movlb	2	; select bank2
  7514  06A0  00A0               	movwf	setLongTapState@f_state^(0+256)
  7515  06A1  00A1               	movwf	(setLongTapState@f_state+1)^(0+256)
  7516  06A2  31AB  2390         	fcall	_setLongTapState
  7517                           
  7518                           ;SwitchTap.c: 149: longTap_timer = 0;
  7519  06A4  0024               	movlb	4	; select bank4
  7520  06A5  01B8               	clrf	_longTap_timer^(0+512)	;volatile
  7521  06A6  01B9               	clrf	(_longTap_timer+1)^(0+512)	;volatile
  7522                           
  7523                           ;SwitchTap.c: 150: longTap_start = 0;
  7524  06A7  0023               	movlb	3	; select bank3
  7525  06A8  01ED               	clrf	_longTap_start^(0+384)
  7526                           
  7527                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7528  06A9  3019               	movlw	25
  7529  06AA  0022               	movlb	2	; select bank2
  7530  06AB  00BC               	movwf	??_updateSwitchTap^(0+256)
  7531  06AC  083C               	movf	??_updateSwitchTap^(0+256),w
  7532  06AD  0023               	movlb	3	; select bank3
  7533  06AE  00EE               	movwf	_switchTap_pressed^(0+384)
  7534  06AF  0008               	return
  7535  06B0                     __end_of_updateSwitchTap:	
  7536                           
  7537                           	psect	text4
  7538  2B90                     __ptext4:	
  7539 ;; *************** function _setLongTapState *****************
  7540 ;; Defined at:
  7541 ;;		line 167 in file "SwitchTap.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  f_state         2    0[BANK2 ] int 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, status,0
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7555 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7557 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7558 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7559 ;;Total ram usage:        4 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    5
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_updateSwitchTap
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           
  7570                           ;psect for function _setLongTapState
  7571  2B90                     _setLongTapState:	
  7572                           
  7573                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _setLongTapState: [wreg+status,0]
  7577  2B90  0021               	movlb	1	; select bank1
  7578  2B91  085F               	movf	_longTap_state^(0+128),w	;volatile
  7579  2B92  0022               	movlb	2	; select bank2
  7580  2B93  00A2               	movwf	??_setLongTapState^(0+256)
  7581  2B94  01A3               	clrf	(??_setLongTapState^(0+256)+1)
  7582  2B95  0821               	movf	(setLongTapState@f_state+1)^(0+256),w
  7583  2B96  0623               	xorwf	(??_setLongTapState+1)^(0+256),w
  7584  2B97  1D03               	skipz
  7585  2B98  2B9B               	goto	u9925
  7586  2B99  0820               	movf	setLongTapState@f_state^(0+256),w
  7587  2B9A  0622               	xorwf	??_setLongTapState^(0+256),w
  7588  2B9B                     u9925:	
  7589  2B9B  1903               	btfsc	3,2
  7590  2B9C  0008               	return
  7591                           
  7592                           ;SwitchTap.c: 169: longTap_state = f_state;
  7593  2B9D  0820               	movf	setLongTapState@f_state^(0+256),w
  7594  2B9E  00A2               	movwf	??_setLongTapState^(0+256)
  7595  2B9F  0822               	movf	??_setLongTapState^(0+256),w
  7596  2BA0  0021               	movlb	1	; select bank1
  7597  2BA1  00DF               	movwf	_longTap_state^(0+128)	;volatile
  7598                           
  7599                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7600  2BA2  0022               	movlb	2	; select bank2
  7601  2BA3  0C20               	rrf	setLongTapState@f_state^(0+256),w
  7602  2BA4  1C03               	skipc
  7603  2BA5  128D               	bcf	13,5	;volatile
  7604  2BA6  1803               	skipnc
  7605  2BA7  168D               	bsf	13,5	;volatile
  7606  2BA8  0008               	return
  7607  2BA9                     __end_of_setLongTapState:	
  7608                           
  7609                           	psect	text5
  7610  24D9                     __ptext5:	
  7611 ;; *************** function ___aldiv *****************
  7612 ;; Defined at:
  7613 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  divisor         4    0[BANK2 ] long 
  7616 ;;  dividend        4    4[BANK2 ] long 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  quotient        4   11[BANK2 ] long 
  7619 ;;  sign            1   10[BANK2 ] unsigned char 
  7620 ;;  counter         1    9[BANK2 ] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  4    0[BANK2 ] long 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7630 ;;      Params:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7631 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7632 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7633 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7634 ;;Total ram usage:       15 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    5
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_updateSwitchTap
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function ___aldiv
  7646  24D9                     ___aldiv:	
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7650  24D9  0022               	movlb	2	; select bank2
  7651  24DA  01AA               	clrf	___aldiv@sign^(0+256)
  7652  24DB  1FA3               	btfss	(___aldiv@divisor+3)^(0+256),7
  7653  24DC  2CEA               	goto	l1977
  7654  24DD  09A0               	comf	___aldiv@divisor^(0+256),f
  7655  24DE  09A1               	comf	(___aldiv@divisor+1)^(0+256),f
  7656  24DF  09A2               	comf	(___aldiv@divisor+2)^(0+256),f
  7657  24E0  09A3               	comf	(___aldiv@divisor+3)^(0+256),f
  7658  24E1  0AA0               	incf	___aldiv@divisor^(0+256),f
  7659  24E2  1903               	skipnz
  7660  24E3  0AA1               	incf	(___aldiv@divisor+1)^(0+256),f
  7661  24E4  1903               	skipnz
  7662  24E5  0AA2               	incf	(___aldiv@divisor+2)^(0+256),f
  7663  24E6  1903               	skipnz
  7664  24E7  0AA3               	incf	(___aldiv@divisor+3)^(0+256),f
  7665  24E8  01AA               	clrf	___aldiv@sign^(0+256)
  7666  24E9  0AAA               	incf	___aldiv@sign^(0+256),f
  7667  24EA                     l1977:	
  7668  24EA  1FA7               	btfss	(___aldiv@dividend+3)^(0+256),7
  7669  24EB  2CFB               	goto	l8817
  7670  24EC  09A4               	comf	___aldiv@dividend^(0+256),f
  7671  24ED  09A5               	comf	(___aldiv@dividend+1)^(0+256),f
  7672  24EE  09A6               	comf	(___aldiv@dividend+2)^(0+256),f
  7673  24EF  09A7               	comf	(___aldiv@dividend+3)^(0+256),f
  7674  24F0  0AA4               	incf	___aldiv@dividend^(0+256),f
  7675  24F1  1903               	skipnz
  7676  24F2  0AA5               	incf	(___aldiv@dividend+1)^(0+256),f
  7677  24F3  1903               	skipnz
  7678  24F4  0AA6               	incf	(___aldiv@dividend+2)^(0+256),f
  7679  24F5  1903               	skipnz
  7680  24F6  0AA7               	incf	(___aldiv@dividend+3)^(0+256),f
  7681  24F7  3001               	movlw	1
  7682  24F8  00A8               	movwf	??___aldiv^(0+256)
  7683  24F9  0828               	movf	??___aldiv^(0+256),w
  7684  24FA  06AA               	xorwf	___aldiv@sign^(0+256),f
  7685  24FB                     l8817:	
  7686  24FB  3000               	movlw	0
  7687  24FC  00AE               	movwf	(___aldiv@quotient+3)^(0+256)
  7688  24FD  3000               	movlw	0
  7689  24FE  00AD               	movwf	(___aldiv@quotient+2)^(0+256)
  7690  24FF  3000               	movlw	0
  7691  2500  00AC               	movwf	(___aldiv@quotient+1)^(0+256)
  7692  2501  3000               	movlw	0
  7693  2502  00AB               	movwf	___aldiv@quotient^(0+256)
  7694  2503  0823               	movf	(___aldiv@divisor+3)^(0+256),w
  7695  2504  0422               	iorwf	(___aldiv@divisor+2)^(0+256),w
  7696  2505  0421               	iorwf	(___aldiv@divisor+1)^(0+256),w
  7697  2506  0420               	iorwf	___aldiv@divisor^(0+256),w
  7698  2507  1903               	skipnz
  7699  2508  2D44               	goto	l8839
  7700  2509  01A9               	clrf	___aldiv@counter^(0+256)
  7701  250A  0AA9               	incf	___aldiv@counter^(0+256),f
  7702  250B                     l8825:	
  7703  250B  1BA3               	btfsc	(___aldiv@divisor+3)^(0+256),7
  7704  250C  2D19               	goto	l8827
  7705  250D  3001               	movlw	1
  7706  250E                     u10025:	
  7707  250E  35A0               	lslf	___aldiv@divisor^(0+256),f
  7708  250F  0DA1               	rlf	(___aldiv@divisor+1)^(0+256),f
  7709  2510  0DA2               	rlf	(___aldiv@divisor+2)^(0+256),f
  7710  2511  0DA3               	rlf	(___aldiv@divisor+3)^(0+256),f
  7711  2512  0B89               	decfsz	9,f
  7712  2513  2D0E               	goto	u10025
  7713  2514  3001               	movlw	1
  7714  2515  00A8               	movwf	??___aldiv^(0+256)
  7715  2516  0828               	movf	??___aldiv^(0+256),w
  7716  2517  07A9               	addwf	___aldiv@counter^(0+256),f
  7717  2518  2D0B               	goto	l8825
  7718  2519                     l8827:	
  7719  2519  3001               	movlw	1
  7720  251A                     u10045:	
  7721  251A  35AB               	lslf	___aldiv@quotient^(0+256),f
  7722  251B  0DAC               	rlf	(___aldiv@quotient+1)^(0+256),f
  7723  251C  0DAD               	rlf	(___aldiv@quotient+2)^(0+256),f
  7724  251D  0DAE               	rlf	(___aldiv@quotient+3)^(0+256),f
  7725  251E  0B89               	decfsz	9,f
  7726  251F  2D1A               	goto	u10045
  7727  2520  0823               	movf	(___aldiv@divisor+3)^(0+256),w
  7728  2521  0227               	subwf	(___aldiv@dividend+3)^(0+256),w
  7729  2522  1D03               	skipz
  7730  2523  2D2E               	goto	u10055
  7731  2524  0822               	movf	(___aldiv@divisor+2)^(0+256),w
  7732  2525  0226               	subwf	(___aldiv@dividend+2)^(0+256),w
  7733  2526  1D03               	skipz
  7734  2527  2D2E               	goto	u10055
  7735  2528  0821               	movf	(___aldiv@divisor+1)^(0+256),w
  7736  2529  0225               	subwf	(___aldiv@dividend+1)^(0+256),w
  7737  252A  1D03               	skipz
  7738  252B  2D2E               	goto	u10055
  7739  252C  0820               	movf	___aldiv@divisor^(0+256),w
  7740  252D  0224               	subwf	___aldiv@dividend^(0+256),w
  7741  252E                     u10055:	
  7742  252E  1C03               	skipc
  7743  252F  2D39               	goto	l8835
  7744  2530  0820               	movf	___aldiv@divisor^(0+256),w
  7745  2531  02A4               	subwf	___aldiv@dividend^(0+256),f
  7746  2532  0821               	movf	(___aldiv@divisor+1)^(0+256),w
  7747  2533  3BA5               	subwfb	(___aldiv@dividend+1)^(0+256),f
  7748  2534  0822               	movf	(___aldiv@divisor+2)^(0+256),w
  7749  2535  3BA6               	subwfb	(___aldiv@dividend+2)^(0+256),f
  7750  2536  0823               	movf	(___aldiv@divisor+3)^(0+256),w
  7751  2537  3BA7               	subwfb	(___aldiv@dividend+3)^(0+256),f
  7752  2538  142B               	bsf	___aldiv@quotient^(0+256),0
  7753  2539                     l8835:	
  7754  2539  3001               	movlw	1
  7755  253A                     u10065:	
  7756  253A  36A3               	lsrf	(___aldiv@divisor+3)^(0+256),f
  7757  253B  0CA2               	rrf	(___aldiv@divisor+2)^(0+256),f
  7758  253C  0CA1               	rrf	(___aldiv@divisor+1)^(0+256),f
  7759  253D  0CA0               	rrf	___aldiv@divisor^(0+256),f
  7760  253E  0B89               	decfsz	9,f
  7761  253F  2D3A               	goto	u10065
  7762  2540  3001               	movlw	1
  7763  2541  02A9               	subwf	___aldiv@counter^(0+256),f
  7764  2542  1D03               	btfss	3,2
  7765  2543  2D19               	goto	l8827
  7766  2544                     l8839:	
  7767  2544  082A               	movf	___aldiv@sign^(0+256),w
  7768  2545  1903               	btfsc	3,2
  7769  2546  2D52               	goto	l8843
  7770  2547  09AB               	comf	___aldiv@quotient^(0+256),f
  7771  2548  09AC               	comf	(___aldiv@quotient+1)^(0+256),f
  7772  2549  09AD               	comf	(___aldiv@quotient+2)^(0+256),f
  7773  254A  09AE               	comf	(___aldiv@quotient+3)^(0+256),f
  7774  254B  0AAB               	incf	___aldiv@quotient^(0+256),f
  7775  254C  1903               	skipnz
  7776  254D  0AAC               	incf	(___aldiv@quotient+1)^(0+256),f
  7777  254E  1903               	skipnz
  7778  254F  0AAD               	incf	(___aldiv@quotient+2)^(0+256),f
  7779  2550  1903               	skipnz
  7780  2551  0AAE               	incf	(___aldiv@quotient+3)^(0+256),f
  7781  2552                     l8843:	
  7782  2552  082E               	movf	(___aldiv@quotient+3)^(0+256),w
  7783  2553  00A3               	movwf	(?___aldiv+3)^(0+256)
  7784  2554  082D               	movf	(___aldiv@quotient+2)^(0+256),w
  7785  2555  00A2               	movwf	(?___aldiv+2)^(0+256)
  7786  2556  082C               	movf	(___aldiv@quotient+1)^(0+256),w
  7787  2557  00A1               	movwf	(?___aldiv+1)^(0+256)
  7788  2558  082B               	movf	___aldiv@quotient^(0+256),w
  7789  2559  00A0               	movwf	?___aldiv^(0+256)
  7790  255A  0008               	return
  7791  255B                     __end_of___aldiv:	
  7792                           
  7793                           	psect	text6
  7794  1F15                     __ptext6:	
  7795 ;; *************** function _updateSwitchBypass *****************
  7796 ;; Defined at:
  7797 ;;		line 34 in file "SwitchBypass.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;		None
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;		None
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  1    wreg      void 
  7804 ;; Registers used:
  7805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7813 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7814 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7815 ;;Total ram usage:        2 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:   10
  7818 ;; This function calls:
  7819 ;;		_setDoublePressState
  7820 ;;		_setFeedbackState
  7821 ;;		_setSwitchBypassState
  7822 ;; This function is called by:
  7823 ;;		_main
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function _updateSwitchBypass
  7829  1F15                     _updateSwitchBypass:	
  7830                           
  7831                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7832                           
  7833                           ;incstack = 0
  7834                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7835  1F15  0020               	movlb	0	; select bank0
  7836  1F16  1890               	btfsc	16,1	;volatile
  7837  1F17  2F2B               	goto	l9023
  7838                           
  7839                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7840  1F18  0024               	movlb	4	; select bank4
  7841  1F19  083D               	movf	(_switchBypass_pressed+1)^(0+512),w
  7842  1F1A  3A80               	xorlw	128
  7843  1F1B  0022               	movlb	2	; select bank2
  7844  1F1C  00BC               	movwf	??_updateSwitchBypass^(0+256)
  7845  1F1D  3080               	movlw	128
  7846  1F1E  023C               	subwf	??_updateSwitchBypass^(0+256),w
  7847  1F1F  1D03               	skipz
  7848  1F20  2F24               	goto	u10355
  7849  1F21  3001               	movlw	1
  7850  1F22  0024               	movlb	4	; select bank4
  7851  1F23  023C               	subwf	_switchBypass_pressed^(0+512),w
  7852  1F24                     u10355:	
  7853  1F24  1C03               	skipc
  7854  1F25  2F3E               	goto	l9027
  7855                           
  7856                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7857  1F26  30FF               	movlw	255
  7858  1F27  0024               	movlb	4	; select bank4
  7859  1F28  07BC               	addwf	_switchBypass_pressed^(0+512),f
  7860  1F29  30FF               	movlw	255
  7861  1F2A  2F3D               	goto	L1
  7862  1F2B                     l9023:	
  7863                           ;SwitchBypass.c: 44: }
  7864                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7865                           
  7866  1F2B  0024               	movlb	4	; select bank4
  7867  1F2C  083D               	movf	(_switchBypass_pressed+1)^(0+512),w
  7868  1F2D  3A80               	xorlw	128
  7869  1F2E  0022               	movlb	2	; select bank2
  7870  1F2F  00BC               	movwf	??_updateSwitchBypass^(0+256)
  7871  1F30  3080               	movlw	128
  7872  1F31  023C               	subwf	??_updateSwitchBypass^(0+256),w
  7873  1F32  1D03               	skipz
  7874  1F33  2F37               	goto	u10365
  7875  1F34  3019               	movlw	25
  7876  1F35  0024               	movlb	4	; select bank4
  7877  1F36  023C               	subwf	_switchBypass_pressed^(0+512),w
  7878  1F37                     u10365:	
  7879  1F37  1803               	skipnc
  7880  1F38  2F3E               	goto	l9027
  7881                           
  7882                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7883  1F39  3001               	movlw	1
  7884  1F3A  0024               	movlb	4	; select bank4
  7885  1F3B  07BC               	addwf	_switchBypass_pressed^(0+512),f
  7886  1F3C  3000               	movlw	0
  7887  1F3D                     L1:	
  7888  1F3D  3DBD               	addwfc	(_switchBypass_pressed+1)^(0+512),f
  7889  1F3E                     l9027:	
  7890                           
  7891                           ;SwitchBypass.c: 47: }
  7892                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7893  1F3E  0024               	movlb	4	; select bank4
  7894  1F3F  083C               	movf	_switchBypass_pressed^(0+512),w
  7895  1F40  043D               	iorwf	(_switchBypass_pressed+1)^(0+512),w
  7896  1F41  1D03               	btfss	3,2
  7897  1F42  2FA0               	goto	l9067
  7898                           
  7899                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7900  1F43  0023               	movlb	3	; select bank3
  7901  1F44  086C               	movf	_feedback_start^(0+384),w
  7902  1F45  1D03               	btfss	3,2
  7903  1F46  2F4C               	goto	l9035
  7904                           
  7905                           ;SwitchBypass.c: 57: feedback_start = 1;
  7906  1F47  01EC               	clrf	_feedback_start^(0+384)
  7907  1F48  0AEC               	incf	_feedback_start^(0+384),f
  7908                           
  7909                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7910  1F49  0024               	movlb	4	; select bank4
  7911  1F4A  01AC               	clrf	_feedback_timer^(0+512)	;volatile
  7912  1F4B  01AD               	clrf	(_feedback_timer+1)^(0+512)	;volatile
  7913  1F4C                     l9035:	
  7914                           
  7915                           ;SwitchBypass.c: 59: }
  7916                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7917  1F4C  0021               	movlb	1	; select bank1
  7918  1F4D  085A               	movf	(_long_press_limit+1)^(0+128),w
  7919  1F4E  0024               	movlb	4	; select bank4
  7920  1F4F  022D               	subwf	(_feedback_timer+1)^(0+512),w	;volatile
  7921  1F50  1D03               	skipz
  7922  1F51  2F56               	goto	u10395
  7923  1F52  0021               	movlb	1	; select bank1
  7924  1F53  0859               	movf	_long_press_limit^(0+128),w
  7925  1F54  0024               	movlb	4	; select bank4
  7926  1F55  022C               	subwf	_feedback_timer^(0+512),w	;volatile
  7927  1F56                     u10395:	
  7928  1F56  1C03               	skipc
  7929  1F57  2F76               	goto	l9049
  7930  1F58  0021               	movlb	1	; select bank1
  7931  1F59  085E               	movf	_feedback_state^(0+128),w	;volatile
  7932  1F5A  1D03               	btfss	3,2
  7933  1F5B  2F76               	goto	l9049
  7934  1F5C  084F               	movf	_doubleTap_state^(0+128),w	;volatile
  7935  1F5D  1D03               	btfss	3,2
  7936  1F5E  2F76               	goto	l9049
  7937                           
  7938                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7939  1F5F  0022               	movlb	2	; select bank2
  7940  1F60  110D               	bcf	13,2	;volatile
  7941                           
  7942                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7943  1F61  0023               	movlb	3	; select bank3
  7944  1F62  036D               	decf	_longTap_start^(0+384),w
  7945  1F63  1903               	btfsc	3,2
  7946  1F64  2F6E               	goto	l9047
  7947                           
  7948                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7949  1F65  3001               	movlw	1
  7950  1F66  0022               	movlb	2	; select bank2
  7951  1F67  00A0               	movwf	setFeedbackState@f_state^(0+256)
  7952  1F68  3000               	movlw	0
  7953  1F69  00A1               	movwf	(setFeedbackState@f_state^(0+256)+1)
  7954  1F6A  31AB  2377  319F   	fcall	_setFeedbackState
  7955                           
  7956                           ;SwitchBypass.c: 67: } else {
  7957  1F6D  2F76               	goto	l9049
  7958  1F6E                     l9047:	
  7959                           
  7960                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7961  1F6E  3001               	movlw	1
  7962  1F6F  0022               	movlb	2	; select bank2
  7963  1F70  00B8               	movwf	setDoublePressState@f_state^(0+256)
  7964  1F71  3000               	movlw	0
  7965  1F72  00B9               	movwf	(setDoublePressState@f_state^(0+256)+1)
  7966  1F73  31AE  26C1  319F   	fcall	_setDoublePressState
  7967  1F76                     l9049:	
  7968                           
  7969                           ;SwitchBypass.c: 69: }
  7970                           ;SwitchBypass.c: 70: }
  7971                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7972  1F76  0021               	movlb	1	; select bank1
  7973  1F77  084F               	movf	_doubleTap_state^(0+128),w	;volatile
  7974  1F78  1D03               	btfss	3,2
  7975  1F79  2F9C               	goto	l1278
  7976  1F7A  085E               	movf	_feedback_state^(0+128),w	;volatile
  7977  1F7B  1D03               	btfss	3,2
  7978  1F7C  2F9C               	goto	l1278
  7979                           
  7980                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7981  1F7D  0361               	decf	_switchBypass_state^(0+128),w
  7982  1F7E  1D03               	btfss	3,2
  7983  1F7F  2F8E               	goto	l9061
  7984                           
  7985                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7986  1F80  0025               	movlb	5	; select bank5
  7987  1F81  0363               	decf	_switchBypass_up^(0+640),w
  7988  1F82  0464               	iorwf	(_switchBypass_up+1)^(0+640),w
  7989  1F83  1D03               	btfss	3,2
  7990  1F84  2F9C               	goto	l1278
  7991                           
  7992                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7993  1F85  0024               	movlb	4	; select bank4
  7994  1F86  01E0               	clrf	_currentBypassState^(0+512)
  7995  1F87  0AE0               	incf	_currentBypassState^(0+512),f
  7996                           
  7997                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7998  1F88  3001               	movlw	1
  7999  1F89  0025               	movlb	5	; select bank5
  8000  1F8A  00D1               	movwf	_switchBypass_toggle^(0+640)
  8001  1F8B  3000               	movlw	0
  8002  1F8C  00D2               	movwf	(_switchBypass_toggle^(0+640)+1)
  8003                           
  8004                           ;SwitchBypass.c: 78: }
  8005                           ;SwitchBypass.c: 93: } else {
  8006  1F8D  2F9C               	goto	l1278
  8007  1F8E                     l9061:	
  8008                           
  8009                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  8010  1F8E  0024               	movlb	4	; select bank4
  8011  1F8F  0340               	decf	_bypass_turning_on^(0+512),w
  8012  1F90  1903               	btfsc	3,2
  8013  1F91  2F9C               	goto	l1278
  8014                           
  8015                           ;SwitchBypass.c: 96: currentBypassState = 0;
  8016  1F92  01E0               	clrf	_currentBypassState^(0+512)
  8017                           
  8018                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  8019  1F93  01C0               	clrf	_bypass_turning_on^(0+512)
  8020  1F94  0AC0               	incf	_bypass_turning_on^(0+512),f
  8021                           
  8022                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  8023  1F95  0025               	movlb	5	; select bank5
  8024  1F96  01D1               	clrf	_switchBypass_toggle^(0+640)
  8025  1F97  01D2               	clrf	(_switchBypass_toggle+1)^(0+640)
  8026                           
  8027                           ;SwitchBypass.c: 101: feedback_state = 0;
  8028  1F98  0021               	movlb	1	; select bank1
  8029  1F99  01DE               	clrf	_feedback_state^(0+128)	;volatile
  8030                           
  8031                           ;SwitchBypass.c: 102: feedback_start = 0;
  8032  1F9A  0023               	movlb	3	; select bank3
  8033  1F9B  01EC               	clrf	_feedback_start^(0+384)
  8034  1F9C                     l1278:	
  8035                           
  8036                           ;SwitchBypass.c: 103: }
  8037                           ;SwitchBypass.c: 104: }
  8038                           ;SwitchBypass.c: 106: }
  8039                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  8040  1F9C  0025               	movlb	5	; select bank5
  8041  1F9D  01E3               	clrf	_switchBypass_up^(0+640)
  8042  1F9E  01E4               	clrf	(_switchBypass_up+1)^(0+640)
  8043                           
  8044                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  8045  1F9F  0008               	return
  8046  1FA0                     l9067:	
  8047  1FA0  0024               	movlb	4	; select bank4
  8048  1FA1  083D               	movf	(_switchBypass_pressed+1)^(0+512),w
  8049  1FA2  3A80               	xorlw	128
  8050  1FA3  0022               	movlb	2	; select bank2
  8051  1FA4  00BC               	movwf	??_updateSwitchBypass^(0+256)
  8052  1FA5  3080               	movlw	128
  8053  1FA6  023C               	subwf	??_updateSwitchBypass^(0+256),w
  8054  1FA7  1D03               	skipz
  8055  1FA8  2FAC               	goto	u10485
  8056  1FA9  3019               	movlw	25
  8057  1FAA  0024               	movlb	4	; select bank4
  8058  1FAB  023C               	subwf	_switchBypass_pressed^(0+512),w
  8059  1FAC                     u10485:	
  8060  1FAC  1C03               	skipc
  8061  1FAD  0008               	return
  8062                           
  8063                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  8064  1FAE  0021               	movlb	1	; select bank1
  8065  1FAF  034F               	decf	_doubleTap_state^(0+128),w	;volatile
  8066  1FB0  1D03               	btfss	3,2
  8067  1FB1  2FBB               	goto	l9073
  8068                           
  8069                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  8070  1FB2  0024               	movlb	4	; select bank4
  8071  1FB3  0860               	movf	_currentBypassState^(0+512),w
  8072  1FB4  0022               	movlb	2	; select bank2
  8073  1FB5  00BC               	movwf	??_updateSwitchBypass^(0+256)
  8074  1FB6  01BD               	clrf	(??_updateSwitchBypass^(0+256)+1)
  8075  1FB7  083C               	movf	??_updateSwitchBypass^(0+256),w
  8076  1FB8  00B2               	movwf	setSwitchBypassState@f_state^(0+256)
  8077  1FB9  083D               	movf	(??_updateSwitchBypass+1)^(0+256),w
  8078  1FBA  2FD8               	goto	L2
  8079  1FBB                     l9073:	
  8080                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  8081                           
  8082  1FBB  0024               	movlb	4	; select bank4
  8083  1FBC  0340               	decf	_bypass_turning_on^(0+512),w
  8084  1FBD  1903               	btfsc	3,2
  8085  1FBE  2FC3               	goto	l9077
  8086  1FBF  0021               	movlb	1	; select bank1
  8087  1FC0  035E               	decf	_feedback_state^(0+128),w	;volatile
  8088  1FC1  1D03               	btfss	3,2
  8089  1FC2  2FC9               	goto	l9079
  8090  1FC3                     l9077:	
  8091                           
  8092                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  8093  1FC3  3001               	movlw	1
  8094  1FC4  0022               	movlb	2	; select bank2
  8095  1FC5  00B2               	movwf	setSwitchBypassState@f_state^(0+256)
  8096  1FC6  3000               	movlw	0
  8097  1FC7  00B3               	movwf	(setSwitchBypassState@f_state^(0+256)+1)
  8098  1FC8  2FD9               	goto	L3
  8099  1FC9                     l9079:	
  8100                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  8101                           
  8102  1FC9  0025               	movlb	5	; select bank5
  8103  1FCA  0351               	decf	_switchBypass_toggle^(0+640),w
  8104  1FCB  0452               	iorwf	(_switchBypass_toggle+1)^(0+640),w
  8105  1FCC  1D03               	btfss	3,2
  8106  1FCD  2FDC               	goto	l9087
  8107  1FCE  0021               	movlb	1	; select bank1
  8108  1FCF  085E               	movf	_feedback_state^(0+128),w	;volatile
  8109  1FD0  1D03               	btfss	3,2
  8110  1FD1  2FDC               	goto	l9087
  8111  1FD2  084F               	movf	_doubleTap_state^(0+128),w	;volatile
  8112  1FD3  1D03               	btfss	3,2
  8113  1FD4  2FDC               	goto	l9087
  8114                           
  8115                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8116  1FD5  3000               	movlw	0
  8117  1FD6  0022               	movlb	2	; select bank2
  8118  1FD7  00B2               	movwf	setSwitchBypassState@f_state^(0+256)
  8119  1FD8                     L2:	
  8120  1FD8  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+256)
  8121  1FD9                     L3:	
  8122  1FD9  31A0  20AE  319F   	fcall	_setSwitchBypassState
  8123  1FDC                     l9087:	
  8124                           
  8125                           ;SwitchBypass.c: 115: }
  8126                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8127  1FDC  0021               	movlb	1	; select bank1
  8128  1FDD  0C61               	rrf	_switchBypass_state^(0+128),w
  8129  1FDE  0022               	movlb	2	; select bank2
  8130  1FDF  1C03               	skipc
  8131  1FE0  110D               	bcf	13,2	;volatile
  8132  1FE1  1803               	skipnc
  8133  1FE2  150D               	bsf	13,2	;volatile
  8134                           
  8135                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8136  1FE3  3000               	movlw	0
  8137  1FE4  00A0               	movwf	setFeedbackState@f_state^(0+256)
  8138  1FE5  00A1               	movwf	(setFeedbackState@f_state+1)^(0+256)
  8139  1FE6  31AB  2377  319F   	fcall	_setFeedbackState
  8140                           
  8141                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8142  1FE9  3000               	movlw	0
  8143  1FEA  0022               	movlb	2	; select bank2
  8144  1FEB  00B8               	movwf	setDoublePressState@f_state^(0+256)
  8145  1FEC  00B9               	movwf	(setDoublePressState@f_state+1)^(0+256)
  8146  1FED  31AE  26C1         	fcall	_setDoublePressState
  8147                           
  8148                           ;SwitchBypass.c: 122: feedback_start = 0;
  8149  1FEF  0023               	movlb	3	; select bank3
  8150  1FF0  01EC               	clrf	_feedback_start^(0+384)
  8151                           
  8152                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8153  1FF1  0024               	movlb	4	; select bank4
  8154  1FF2  01C0               	clrf	_bypass_turning_on^(0+512)
  8155                           
  8156                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8157  1FF3  0025               	movlb	5	; select bank5
  8158  1FF4  01D1               	clrf	_switchBypass_toggle^(0+640)
  8159  1FF5  01D2               	clrf	(_switchBypass_toggle+1)^(0+640)
  8160                           
  8161                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8162  1FF6  3001               	movlw	1
  8163  1FF7  00E3               	movwf	_switchBypass_up^(0+640)
  8164  1FF8  3000               	movlw	0
  8165  1FF9  00E4               	movwf	(_switchBypass_up^(0+640)+1)
  8166                           
  8167                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8168  1FFA  3019               	movlw	25
  8169  1FFB  0024               	movlb	4	; select bank4
  8170  1FFC  00BC               	movwf	_switchBypass_pressed^(0+512)
  8171  1FFD  3000               	movlw	0
  8172  1FFE  00BD               	movwf	(_switchBypass_pressed^(0+512)+1)
  8173  1FFF  0008               	return
  8174  2000                     __end_of_updateSwitchBypass:	
  8175                           
  8176                           	psect	text7
  8177  2B77                     __ptext7:	
  8178 ;; *************** function _setFeedbackState *****************
  8179 ;; Defined at:
  8180 ;;		line 151 in file "SwitchBypass.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  f_state         2    0[BANK2 ] int 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;		None
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      void 
  8187 ;; Registers used:
  8188 ;;		wreg, status,0
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8194 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8196 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8197 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8198 ;;Total ram usage:        4 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    5
  8201 ;; This function calls:
  8202 ;;		Nothing
  8203 ;; This function is called by:
  8204 ;;		_updateSwitchBypass
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           
  8209                           ;psect for function _setFeedbackState
  8210  2B77                     _setFeedbackState:	
  8211                           
  8212                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8213                           
  8214                           ;incstack = 0
  8215                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8216  2B77  0021               	movlb	1	; select bank1
  8217  2B78  085E               	movf	_feedback_state^(0+128),w	;volatile
  8218  2B79  0022               	movlb	2	; select bank2
  8219  2B7A  00A2               	movwf	??_setFeedbackState^(0+256)
  8220  2B7B  01A3               	clrf	(??_setFeedbackState^(0+256)+1)
  8221  2B7C  0821               	movf	(setFeedbackState@f_state+1)^(0+256),w
  8222  2B7D  0623               	xorwf	(??_setFeedbackState+1)^(0+256),w
  8223  2B7E  1D03               	skipz
  8224  2B7F  2B82               	goto	u9875
  8225  2B80  0820               	movf	setFeedbackState@f_state^(0+256),w
  8226  2B81  0622               	xorwf	??_setFeedbackState^(0+256),w
  8227  2B82                     u9875:	
  8228  2B82  1903               	btfsc	3,2
  8229  2B83  0008               	return
  8230                           
  8231                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8232  2B84  0820               	movf	setFeedbackState@f_state^(0+256),w
  8233  2B85  00A2               	movwf	??_setFeedbackState^(0+256)
  8234  2B86  0822               	movf	??_setFeedbackState^(0+256),w
  8235  2B87  0021               	movlb	1	; select bank1
  8236  2B88  00DE               	movwf	_feedback_state^(0+128)	;volatile
  8237                           
  8238                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8239  2B89  0022               	movlb	2	; select bank2
  8240  2B8A  0C20               	rrf	setFeedbackState@f_state^(0+256),w
  8241  2B8B  1C03               	skipc
  8242  2B8C  118D               	bcf	13,3	;volatile
  8243  2B8D  1803               	skipnc
  8244  2B8E  158D               	bsf	13,3	;volatile
  8245  2B8F  0008               	return
  8246  2B90                     __end_of_setFeedbackState:	
  8247                           
  8248                           	psect	text8
  8249  2EC1                     __ptext8:	
  8250 ;; *************** function _setDoublePressState *****************
  8251 ;; Defined at:
  8252 ;;		line 21 in file "preset_programming.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  f_state         2   24[BANK2 ] int 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;		None
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      void 
  8259 ;; Registers used:
  8260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8266 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8268 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8269 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8270 ;;Total ram usage:        4 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    9
  8273 ;; This function calls:
  8274 ;;		_resetRingLEDs
  8275 ;;		_setPedalMode
  8276 ;;		_setPresetDisplay
  8277 ;;		_showSave
  8278 ;;		_wait_ms
  8279 ;; This function is called by:
  8280 ;;		_updateSwitchBypass
  8281 ;;		_updateSwitchTap
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _setDoublePressState
  8287  2EC1                     _setDoublePressState:	
  8288                           
  8289                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8293  2EC1  0021               	movlb	1	; select bank1
  8294  2EC2  084F               	movf	_doubleTap_state^(0+128),w	;volatile
  8295  2EC3  0022               	movlb	2	; select bank2
  8296  2EC4  00BA               	movwf	??_setDoublePressState^(0+256)
  8297  2EC5  01BB               	clrf	(??_setDoublePressState^(0+256)+1)
  8298  2EC6  0839               	movf	(setDoublePressState@f_state+1)^(0+256),w
  8299  2EC7  063B               	xorwf	(??_setDoublePressState+1)^(0+256),w
  8300  2EC8  1D03               	skipz
  8301  2EC9  2ECC               	goto	u9885
  8302  2ECA  0838               	movf	setDoublePressState@f_state^(0+256),w
  8303  2ECB  063A               	xorwf	??_setDoublePressState^(0+256),w
  8304  2ECC                     u9885:	
  8305  2ECC  1903               	btfsc	3,2
  8306  2ECD  0008               	return
  8307                           
  8308                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8309  2ECE  0838               	movf	setDoublePressState@f_state^(0+256),w
  8310  2ECF  00BA               	movwf	??_setDoublePressState^(0+256)
  8311  2ED0  083A               	movf	??_setDoublePressState^(0+256),w
  8312  2ED1  0021               	movlb	1	; select bank1
  8313  2ED2  00CF               	movwf	_doubleTap_state^(0+128)	;volatile
  8314                           
  8315                           ;preset_programming.c: 24: if (f_state == 1) {
  8316  2ED3  0022               	movlb	2	; select bank2
  8317  2ED4  0338               	decf	setDoublePressState@f_state^(0+256),w
  8318  2ED5  0439               	iorwf	(setDoublePressState@f_state+1)^(0+256),w
  8319  2ED6  1D03               	btfss	3,2
  8320  2ED7  2EDA               	goto	l8747
  8321                           
  8322                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8323  2ED8  120D               	bcf	13,4	;volatile
  8324                           
  8325                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8326  2ED9  128D               	bcf	13,5	;volatile
  8327  2EDA                     l8747:	
  8328                           
  8329                           ;preset_programming.c: 30: }
  8330                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8331  2EDA  0021               	movlb	1	; select bank1
  8332  2EDB  034F               	decf	_doubleTap_state^(0+128),w	;volatile
  8333  2EDC  1D03               	btfss	3,2
  8334  2EDD  2EF6               	goto	l8763
  8335                           
  8336                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8337  2EDE  0851               	movf	_presetSaveMode^(0+128),w
  8338  2EDF  1D03               	btfss	3,2
  8339  2EE0  2EEB               	goto	l8755
  8340                           
  8341                           ;preset_programming.c: 34: presetSaveMode = 1;
  8342  2EE1  01D1               	clrf	_presetSaveMode^(0+128)
  8343  2EE2  0AD1               	incf	_presetSaveMode^(0+128),f
  8344                           
  8345                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8346  2EE3  0022               	movlb	2	; select bank2
  8347  2EE4  108D               	bcf	13,1	;volatile
  8348                           
  8349                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8350  2EE5  0023               	movlb	3	; select bank3
  8351  2EE6  086F               	movf	_presetChannel^(0+384),w
  8352  2EE7  3187  27C6  31AE   	fcall	_setPresetDisplay
  8353                           
  8354                           ;preset_programming.c: 37: } else {
  8355  2EEA  2EF6               	goto	l8763
  8356  2EEB                     l8755:	
  8357                           
  8358                           ;preset_programming.c: 39: presetSaveMode = 0;
  8359  2EEB  0021               	movlb	1	; select bank1
  8360  2EEC  01D1               	clrf	_presetSaveMode^(0+128)
  8361                           
  8362                           ;preset_programming.c: 40: setPedalMode();
  8363  2EED  31AC  247B  31AE   	fcall	_setPedalMode
  8364                           
  8365                           ;preset_programming.c: 41: resetRingLEDs();
  8366  2EF0  31AB  23A9  31AE   	fcall	_resetRingLEDs
  8367                           
  8368                           ;preset_programming.c: 42: showSave();
  8369  2EF3  31AB  2332  31AE   	fcall	_showSave
  8370  2EF6                     l8763:	
  8371                           
  8372                           ;preset_programming.c: 44: }
  8373                           ;preset_programming.c: 45: }
  8374                           ;preset_programming.c: 47: wait_ms(20);
  8375  2EF6  3014               	movlw	20
  8376  2EF7  0022               	movlb	2	; select bank2
  8377  2EF8  00AC               	movwf	wait_ms@timeSec^(0+256)
  8378  2EF9  3000               	movlw	0
  8379  2EFA  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
  8380  2EFB  31AD  25AC         	fcall	_wait_ms
  8381  2EFD  0008               	return
  8382  2EFE                     __end_of_setDoublePressState:	
  8383                           
  8384                           	psect	text9
  8385  2B32                     __ptext9:	
  8386 ;; *************** function _showSave *****************
  8387 ;; Defined at:
  8388 ;;		line 112 in file "LEDs.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      void 
  8395 ;; Registers used:
  8396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8404 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8405 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8406 ;;Total ram usage:        1 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    8
  8409 ;; This function calls:
  8410 ;;		_ring_tactiles
  8411 ;;		_solidring_tactiles
  8412 ;; This function is called by:
  8413 ;;		_setDoublePressState
  8414 ;; This function uses a non-reentrant model
  8415 ;;
  8416                           
  8417                           
  8418                           ;psect for function _showSave
  8419  2B32                     _showSave:	
  8420                           
  8421                           ;LEDs.c: 113: suspend_blink = 1;
  8422                           
  8423                           ;incstack = 0
  8424                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8425  2B32  3001               	movlw	1
  8426  2B33  0022               	movlb	2	; select bank2
  8427  2B34  00B7               	movwf	??_showSave^(0+256)
  8428  2B35  0837               	movf	??_showSave^(0+256),w
  8429  2B36  0021               	movlb	1	; select bank1
  8430  2B37  00D2               	movwf	_suspend_blink^(0+128)	;volatile
  8431                           
  8432                           ;LEDs.c: 114: ring_tactiles();
  8433  2B38  31A2  2221  31AB   	fcall	_ring_tactiles
  8434                           
  8435                           ;LEDs.c: 115: ring_tactiles();
  8436  2B3B  31A2  2221  31AB   	fcall	_ring_tactiles
  8437                           
  8438                           ;LEDs.c: 116: solidring_tactiles();
  8439  2B3E  31AF  273E  31AB   	fcall	_solidring_tactiles
  8440                           
  8441                           ;LEDs.c: 117: solidring_tactiles();
  8442  2B41  31AF  273E         	fcall	_solidring_tactiles
  8443                           
  8444                           ;LEDs.c: 118: suspend_blink = 0;
  8445  2B43  0021               	movlb	1	; select bank1
  8446  2B44  01D2               	clrf	_suspend_blink^(0+128)	;volatile
  8447  2B45  0008               	return
  8448  2B46                     __end_of_showSave:	
  8449                           
  8450                           	psect	text10
  8451  2F3E                     __ptext10:	
  8452 ;; *************** function _solidring_tactiles *****************
  8453 ;; Defined at:
  8454 ;;		line 208 in file "LEDs.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;		None
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;  ring_delay      1   20[BANK2 ] unsigned char 
  8459 ;; Return value:  Size  Location     Type
  8460 ;;                  1    wreg      void 
  8461 ;; Registers used:
  8462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8469 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8470 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8471 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8472 ;;Total ram usage:        3 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; Hardware stack levels required when called:    7
  8475 ;; This function calls:
  8476 ;;		_set_leds_bottom
  8477 ;;		_set_leds_top
  8478 ;;		_wait_ms
  8479 ;; This function is called by:
  8480 ;;		_showSave
  8481 ;;		_showBootSequence
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           
  8486                           ;psect for function _solidring_tactiles
  8487  2F3E                     _solidring_tactiles:	
  8488                           
  8489                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8490                           
  8491                           ;incstack = 0
  8492                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8493  2F3E  301E               	movlw	30
  8494  2F3F  0022               	movlb	2	; select bank2
  8495  2F40  00B2               	movwf	??_solidring_tactiles^(0+256)
  8496  2F41  0832               	movf	??_solidring_tactiles^(0+256),w
  8497  2F42  00B4               	movwf	solidring_tactiles@ring_delay^(0+256)
  8498                           
  8499                           ;LEDs.c: 210: set_leds_top(100, 1);
  8500  2F43  3064               	movlw	100
  8501  2F44  00A0               	movwf	set_leds_top@x^(0+256)
  8502  2F45  3000               	movlw	0
  8503  2F46  00A1               	movwf	(set_leds_top@x^(0+256)+1)
  8504  2F47  3001               	movlw	1
  8505  2F48  00A2               	movwf	set_leds_top@ledState^(0+256)
  8506  2F49  3000               	movlw	0
  8507  2F4A  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  8508  2F4B  3198  2002  31AF   	fcall	_set_leds_top
  8509                           
  8510                           ;LEDs.c: 211: set_leds_bottom(100);
  8511  2F4E  3064               	movlw	100
  8512  2F4F  0022               	movlb	2	; select bank2
  8513  2F50  00A0               	movwf	set_leds_bottom@x^(0+256)
  8514  2F51  3000               	movlw	0
  8515  2F52  00A1               	movwf	(set_leds_bottom@x^(0+256)+1)
  8516  2F53  31AD  25DE  31AF   	fcall	_set_leds_bottom
  8517                           
  8518                           ;LEDs.c: 212: wait_ms(ring_delay);
  8519  2F56  0022               	movlb	2	; select bank2
  8520  2F57  0834               	movf	solidring_tactiles@ring_delay^(0+256),w
  8521  2F58  00B2               	movwf	??_solidring_tactiles^(0+256)
  8522  2F59  01B3               	clrf	(??_solidring_tactiles^(0+256)+1)
  8523  2F5A  0832               	movf	??_solidring_tactiles^(0+256),w
  8524  2F5B  00AC               	movwf	wait_ms@timeSec^(0+256)
  8525  2F5C  0833               	movf	(??_solidring_tactiles+1)^(0+256),w
  8526  2F5D  00AD               	movwf	(wait_ms@timeSec+1)^(0+256)
  8527  2F5E  31AD  25AC  31AF   	fcall	_wait_ms
  8528                           
  8529                           ;LEDs.c: 214: set_leds_top(0, 1);
  8530  2F61  3000               	movlw	0
  8531  2F62  0022               	movlb	2	; select bank2
  8532  2F63  00A0               	movwf	set_leds_top@x^(0+256)
  8533  2F64  00A1               	movwf	(set_leds_top@x+1)^(0+256)
  8534  2F65  3001               	movlw	1
  8535  2F66  00A2               	movwf	set_leds_top@ledState^(0+256)
  8536  2F67  3000               	movlw	0
  8537  2F68  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  8538  2F69  3198  2002  31AF   	fcall	_set_leds_top
  8539                           
  8540                           ;LEDs.c: 215: set_leds_bottom(0);
  8541  2F6C  3000               	movlw	0
  8542  2F6D  0022               	movlb	2	; select bank2
  8543  2F6E  00A0               	movwf	set_leds_bottom@x^(0+256)
  8544  2F6F  00A1               	movwf	(set_leds_bottom@x+1)^(0+256)
  8545  2F70  31AD  25DE  31AF   	fcall	_set_leds_bottom
  8546                           
  8547                           ;LEDs.c: 216: wait_ms(ring_delay);
  8548  2F73  0022               	movlb	2	; select bank2
  8549  2F74  0834               	movf	solidring_tactiles@ring_delay^(0+256),w
  8550  2F75  00B2               	movwf	??_solidring_tactiles^(0+256)
  8551  2F76  01B3               	clrf	(??_solidring_tactiles^(0+256)+1)
  8552  2F77  0832               	movf	??_solidring_tactiles^(0+256),w
  8553  2F78  00AC               	movwf	wait_ms@timeSec^(0+256)
  8554  2F79  0833               	movf	(??_solidring_tactiles+1)^(0+256),w
  8555  2F7A  00AD               	movwf	(wait_ms@timeSec+1)^(0+256)
  8556  2F7B  31AD  25AC         	fcall	_wait_ms
  8557  2F7D  0008               	return
  8558  2F7E                     __end_of_solidring_tactiles:	
  8559                           
  8560                           	psect	text11
  8561  2221                     __ptext11:	
  8562 ;; *************** function _ring_tactiles *****************
  8563 ;; Defined at:
  8564 ;;		line 196 in file "LEDs.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  iLed            2   21[BANK2 ] int 
  8569 ;;  iLed            2   19[BANK2 ] int 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8580 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8581 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8582 ;;      Totals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8583 ;;Total ram usage:        5 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    7
  8586 ;; This function calls:
  8587 ;;		_set_leds_bottom
  8588 ;;		_set_leds_top
  8589 ;;		_wait_ms
  8590 ;; This function is called by:
  8591 ;;		_showSave
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _ring_tactiles
  8597  2221                     _ring_tactiles:	
  8598                           
  8599                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8603  2221  3001               	movlw	1
  8604  2222  0022               	movlb	2	; select bank2
  8605  2223  00B3               	movwf	ring_tactiles@iLed^(0+256)
  8606  2224  3000               	movlw	0
  8607  2225  00B4               	movwf	(ring_tactiles@iLed^(0+256)+1)
  8608  2226  0834               	movf	(ring_tactiles@iLed+1)^(0+256),w
  8609  2227  3A80               	xorlw	128
  8610  2228  00B2               	movwf	??_ring_tactiles^(0+256)
  8611  2229  3080               	movlw	128
  8612  222A  0232               	subwf	??_ring_tactiles^(0+256),w
  8613  222B  1D03               	skipz
  8614  222C  2A2F               	goto	u9405
  8615  222D  3007               	movlw	7
  8616  222E  0233               	subwf	ring_tactiles@iLed^(0+256),w
  8617  222F                     u9405:	
  8618  222F  1803               	btfsc	3,0
  8619  2230  2A55               	goto	l8305
  8620  2231                     l8297:	
  8621                           
  8622                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8623  2231  0022               	movlb	2	; select bank2
  8624  2232  0834               	movf	(ring_tactiles@iLed+1)^(0+256),w
  8625  2233  00A1               	movwf	(set_leds_top@x+1)^(0+256)
  8626  2234  0833               	movf	ring_tactiles@iLed^(0+256),w
  8627  2235  00A0               	movwf	set_leds_top@x^(0+256)
  8628  2236  3001               	movlw	1
  8629  2237  00A2               	movwf	set_leds_top@ledState^(0+256)
  8630  2238  3000               	movlw	0
  8631  2239  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  8632  223A  3198  2002  31A2   	fcall	_set_leds_top
  8633                           
  8634                           ;LEDs.c: 199: wait_ms(5);
  8635  223D  3005               	movlw	5
  8636  223E  0022               	movlb	2	; select bank2
  8637  223F  00AC               	movwf	wait_ms@timeSec^(0+256)
  8638  2240  3000               	movlw	0
  8639  2241  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
  8640  2242  31AD  25AC  31A2   	fcall	_wait_ms
  8641  2245  3001               	movlw	1
  8642  2246  0022               	movlb	2	; select bank2
  8643  2247  07B3               	addwf	ring_tactiles@iLed^(0+256),f
  8644  2248  3000               	movlw	0
  8645  2249  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+256),f
  8646  224A  0834               	movf	(ring_tactiles@iLed+1)^(0+256),w
  8647  224B  3A80               	xorlw	128
  8648  224C  00B2               	movwf	??_ring_tactiles^(0+256)
  8649  224D  3080               	movlw	128
  8650  224E  0232               	subwf	??_ring_tactiles^(0+256),w
  8651  224F  1D03               	skipz
  8652  2250  2A53               	goto	u9415
  8653  2251  3007               	movlw	7
  8654  2252  0233               	subwf	ring_tactiles@iLed^(0+256),w
  8655  2253                     u9415:	
  8656  2253  1C03               	skipc
  8657  2254  2A31               	goto	l8297
  8658  2255                     l8305:	
  8659                           
  8660                           ;LEDs.c: 200: }
  8661                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8662  2255  3005               	movlw	5
  8663  2256  0022               	movlb	2	; select bank2
  8664  2257  00B5               	movwf	ring_tactiles@iLed_1557^(0+256)
  8665  2258  3000               	movlw	0
  8666  2259  00B6               	movwf	(ring_tactiles@iLed_1557^(0+256)+1)
  8667  225A                     L4:	
  8668  225A  1BB6               	btfsc	(ring_tactiles@iLed_1557+1)^(0+256),7
  8669  225B  0008               	return
  8670                           
  8671                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8672  225C  0836               	movf	(ring_tactiles@iLed_1557+1)^(0+256),w
  8673  225D  00A1               	movwf	(set_leds_bottom@x+1)^(0+256)
  8674  225E  0835               	movf	ring_tactiles@iLed_1557^(0+256),w
  8675  225F  00A0               	movwf	set_leds_bottom@x^(0+256)
  8676  2260  31AD  25DE  31A2   	fcall	_set_leds_bottom
  8677                           
  8678                           ;LEDs.c: 203: wait_ms(5);
  8679  2263  3005               	movlw	5
  8680  2264  0022               	movlb	2	; select bank2
  8681  2265  00AC               	movwf	wait_ms@timeSec^(0+256)
  8682  2266  3000               	movlw	0
  8683  2267  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
  8684  2268  31AD  25AC  31A2   	fcall	_wait_ms
  8685  226B  30FF               	movlw	255
  8686  226C  0022               	movlb	2	; select bank2
  8687  226D  07B5               	addwf	ring_tactiles@iLed_1557^(0+256),f
  8688  226E  30FF               	movlw	255
  8689  226F  3DB6               	addwfc	(ring_tactiles@iLed_1557+1)^(0+256),f
  8690  2270  2A5A               	goto	L4
  8691  2271                     __end_of_ring_tactiles:	
  8692                           
  8693                           	psect	text12
  8694  2C7B                     __ptext12:	
  8695 ;; *************** function _setPedalMode *****************
  8696 ;; Defined at:
  8697 ;;		line 119 in file "tactiles.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8715 ;;Total ram usage:        0 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    7
  8718 ;; This function calls:
  8719 ;;		_resetRingLEDs
  8720 ;;		_setExpressionDisplay
  8721 ;;		_setPresetDisplay
  8722 ;; This function is called by:
  8723 ;;		_update_mode
  8724 ;;		_setDoublePressState
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function _setPedalMode
  8730  2C7B                     _setPedalMode:	
  8731                           
  8732                           ;tactiles.c: 120: switch (mode2_state) {
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8736  2C7B  2C92               	goto	l8505
  8737  2C7C                     l1016:	
  8738                           ;tactiles.c: 121: case 0:
  8739                           
  8740                           
  8741                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8742  2C7C  0022               	movlb	2	; select bank2
  8743  2C7D  108D               	bcf	13,1	;volatile
  8744                           
  8745                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8746  2C7E  100D               	bcf	13,0	;volatile
  8747                           
  8748                           ;tactiles.c: 124: resetRingLEDs();
  8749  2C7F  31AB  23A9         	fcall	_resetRingLEDs
  8750                           
  8751                           ;tactiles.c: 125: break;
  8752  2C81  0008               	return
  8753  2C82                     l1018:	
  8754                           ;tactiles.c: 126: case 1:
  8755                           
  8756                           
  8757                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8758  2C82  0022               	movlb	2	; select bank2
  8759  2C83  108D               	bcf	13,1	;volatile
  8760                           
  8761                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8762  2C84  140D               	bsf	13,0	;volatile
  8763                           
  8764                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8765  2C85  0023               	movlb	3	; select bank3
  8766  2C86  086F               	movf	_presetChannel^(0+384),w
  8767  2C87  3187  27C6         	fcall	_setPresetDisplay
  8768                           
  8769                           ;tactiles.c: 130: break;
  8770  2C89  0008               	return
  8771  2C8A                     l1019:	
  8772                           ;tactiles.c: 131: case 2:
  8773                           
  8774                           
  8775                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8776  2C8A  0022               	movlb	2	; select bank2
  8777  2C8B  148D               	bsf	13,1	;volatile
  8778                           
  8779                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8780  2C8C  100D               	bcf	13,0	;volatile
  8781                           
  8782                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8783  2C8D  0024               	movlb	4	; select bank4
  8784  2C8E  0864               	movf	_expressionChannel^(0+512),w
  8785  2C8F  31AB  2346         	fcall	_setExpressionDisplay
  8786                           
  8787                           ;tactiles.c: 136: }
  8788                           
  8789                           ;tactiles.c: 135: break;
  8790  2C91  0008               	return
  8791  2C92                     l8505:	
  8792  2C92  0021               	movlb	1	; select bank1
  8793  2C93  0850               	movf	_mode2_state^(0+128),w
  8794                           
  8795                           ; Switch size 1, requested type "space"
  8796                           ; Number of cases is 3, Range of values is 0 to 2
  8797                           ; switch strategies available:
  8798                           ; Name         Instructions Cycles
  8799                           ; simple_byte           10     6 (average)
  8800                           ; direct_byte           12     6 (fixed)
  8801                           ; jumptable            260     6 (fixed)
  8802                           ;	Chosen strategy is simple_byte
  8803  2C94  3A00               	xorlw	0	; case 0
  8804  2C95  1903               	skipnz
  8805  2C96  2C7C               	goto	l1016
  8806  2C97  3A01               	xorlw	1	; case 1
  8807  2C98  1903               	skipnz
  8808  2C99  2C82               	goto	l1018
  8809  2C9A  3A03               	xorlw	3	; case 2
  8810  2C9B  1903               	skipnz
  8811  2C9C  2C8A               	goto	l1019
  8812  2C9D  2C9E               	goto	l1020
  8813  2C9E                     l1020:	
  8814  2C9E  0008               	return
  8815  2C9F                     __end_of_setPedalMode:	
  8816                           
  8817                           	psect	text13
  8818  07C6                     __ptext13:	
  8819 ;; *************** function _setPresetDisplay *****************
  8820 ;; Defined at:
  8821 ;;		line 51 in file "preset_programming.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;  ledChannel      1    wreg     unsigned char 
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  ledChannel      1    6[BANK2 ] unsigned char 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  1    wreg      void 
  8828 ;; Registers used:
  8829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8836 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8837 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8838 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8839 ;;Total ram usage:        3 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    6
  8842 ;; This function calls:
  8843 ;;		_set_leds_bottom
  8844 ;;		_set_leds_top
  8845 ;; This function is called by:
  8846 ;;		_setPedalMode
  8847 ;;		_update_selectMode
  8848 ;;		_setDoublePressState
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _setPresetDisplay
  8854  07C6                     _setPresetDisplay:	
  8855                           
  8856                           ;incstack = 0
  8857                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8858                           ;setPresetDisplay@ledChannel stored from wreg
  8859  07C6  0022               	movlb	2	; select bank2
  8860  07C7  00A6               	movwf	setPresetDisplay@ledChannel^(0+256)
  8861                           
  8862                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8863  07C8  3006               	movlw	6
  8864  07C9  0226               	subwf	setPresetDisplay@ledChannel^(0+256),w
  8865  07CA  1803               	skipnc
  8866  07CB  2FE2               	goto	l8325
  8867                           
  8868                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8869  07CC  0826               	movf	setPresetDisplay@ledChannel^(0+256),w
  8870  07CD  00A4               	movwf	??_setPresetDisplay^(0+256)
  8871  07CE  01A5               	clrf	(??_setPresetDisplay^(0+256)+1)
  8872  07CF  0824               	movf	??_setPresetDisplay^(0+256),w
  8873  07D0  00A0               	movwf	set_leds_top@x^(0+256)
  8874  07D1  0825               	movf	(??_setPresetDisplay+1)^(0+256),w
  8875  07D2  00A1               	movwf	(set_leds_top@x+1)^(0+256)
  8876  07D3  3001               	movlw	1
  8877  07D4  00A2               	movwf	set_leds_top@ledState^(0+256)
  8878  07D5  3000               	movlw	0
  8879  07D6  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  8880  07D7  3198  2002  3187   	fcall	_set_leds_top
  8881                           
  8882                           ;preset_programming.c: 54: set_leds_bottom(6);
  8883  07DA  3006               	movlw	6
  8884  07DB  0022               	movlb	2	; select bank2
  8885  07DC  00A0               	movwf	set_leds_bottom@x^(0+256)
  8886  07DD  3000               	movlw	0
  8887  07DE  00A1               	movwf	(set_leds_bottom@x^(0+256)+1)
  8888  07DF  31AD  25DE         	fcall	_set_leds_bottom
  8889                           
  8890                           ;preset_programming.c: 55: } else {
  8891  07E1  0008               	return
  8892  07E2                     l8325:	
  8893                           
  8894                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8895  07E2  3006               	movlw	6
  8896  07E3  0022               	movlb	2	; select bank2
  8897  07E4  00A0               	movwf	set_leds_top@x^(0+256)
  8898  07E5  3000               	movlw	0
  8899  07E6  00A1               	movwf	(set_leds_top@x^(0+256)+1)
  8900  07E7  3001               	movlw	1
  8901  07E8  00A2               	movwf	set_leds_top@ledState^(0+256)
  8902  07E9  3000               	movlw	0
  8903  07EA  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  8904  07EB  3198  2002  3187   	fcall	_set_leds_top
  8905                           
  8906                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8907  07EE  0022               	movlb	2	; select bank2
  8908  07EF  0826               	movf	setPresetDisplay@ledChannel^(0+256),w
  8909  07F0  00A4               	movwf	??_setPresetDisplay^(0+256)
  8910  07F1  01A5               	clrf	(??_setPresetDisplay^(0+256)+1)
  8911  07F2  09A4               	comf	??_setPresetDisplay^(0+256),f
  8912  07F3  09A5               	comf	(??_setPresetDisplay^(0+256)+1),f
  8913  07F4  0AA4               	incf	??_setPresetDisplay^(0+256),f
  8914  07F5  1903               	skipnz
  8915  07F6  0AA5               	incf	(??_setPresetDisplay^(0+256)+1),f
  8916  07F7  0824               	movf	??_setPresetDisplay^(0+256),w
  8917  07F8  3E0B               	addlw	11
  8918  07F9  00A0               	movwf	set_leds_bottom@x^(0+256)
  8919  07FA  3000               	movlw	0
  8920  07FB  3D25               	addwfc	(??_setPresetDisplay+1)^(0+256),w
  8921  07FC  00A1               	movwf	(set_leds_bottom@x+1)^(0+256)
  8922  07FD  31AD  25DE         	fcall	_set_leds_bottom
  8923  07FF  0008               	return
  8924  0800                     __end_of_setPresetDisplay:	
  8925                           
  8926                           	psect	text14
  8927  2B46                     __ptext14:	
  8928 ;; *************** function _setExpressionDisplay *****************
  8929 ;; Defined at:
  8930 ;;		line 66 in file "preset_programming.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  ledChannel      1    wreg     unsigned char 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  ledChannel      1    6[BANK2 ] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      void 
  8937 ;; Registers used:
  8938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8945 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8946 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8947 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8948 ;;Total ram usage:        3 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    6
  8951 ;; This function calls:
  8952 ;;		_set_leds_bottom
  8953 ;;		_set_leds_top
  8954 ;; This function is called by:
  8955 ;;		_setPedalMode
  8956 ;;		_update_selectMode
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           
  8961                           ;psect for function _setExpressionDisplay
  8962  2B46                     _setExpressionDisplay:	
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8966                           ;setExpressionDisplay@ledChannel stored from wreg
  8967  2B46  0022               	movlb	2	; select bank2
  8968  2B47  00A6               	movwf	setExpressionDisplay@ledChannel^(0+256)
  8969                           
  8970                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8971  2B48  0826               	movf	setExpressionDisplay@ledChannel^(0+256),w
  8972  2B49  00A4               	movwf	??_setExpressionDisplay^(0+256)
  8973  2B4A  01A5               	clrf	(??_setExpressionDisplay^(0+256)+1)
  8974  2B4B  0824               	movf	??_setExpressionDisplay^(0+256),w
  8975  2B4C  00A0               	movwf	set_leds_top@x^(0+256)
  8976  2B4D  0825               	movf	(??_setExpressionDisplay+1)^(0+256),w
  8977  2B4E  00A1               	movwf	(set_leds_top@x+1)^(0+256)
  8978  2B4F  3001               	movlw	1
  8979  2B50  00A2               	movwf	set_leds_top@ledState^(0+256)
  8980  2B51  3000               	movlw	0
  8981  2B52  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  8982  2B53  3198  2002  31AB   	fcall	_set_leds_top
  8983                           
  8984                           ;preset_programming.c: 68: set_leds_bottom(6);
  8985  2B56  3006               	movlw	6
  8986  2B57  0022               	movlb	2	; select bank2
  8987  2B58  00A0               	movwf	set_leds_bottom@x^(0+256)
  8988  2B59  3000               	movlw	0
  8989  2B5A  00A1               	movwf	(set_leds_bottom@x^(0+256)+1)
  8990  2B5B  31AD  25DE         	fcall	_set_leds_bottom
  8991  2B5D  0008               	return
  8992  2B5E                     __end_of_setExpressionDisplay:	
  8993                           
  8994                           	psect	text15
  8995  2BA9                     __ptext15:	
  8996 ;; *************** function _resetRingLEDs *****************
  8997 ;; Defined at:
  8998 ;;		line 61 in file "preset_programming.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  1    wreg      void 
  9005 ;; Registers used:
  9006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9016 ;;Total ram usage:        0 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    6
  9019 ;; This function calls:
  9020 ;;		_set_leds_bottom
  9021 ;;		_set_leds_top
  9022 ;; This function is called by:
  9023 ;;		_update_mode
  9024 ;;		_setPedalMode
  9025 ;;		_setDoublePressState
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           
  9030                           ;psect for function _resetRingLEDs
  9031  2BA9                     _resetRingLEDs:	
  9032                           
  9033                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9037  2BA9  0021               	movlb	1	; select bank1
  9038  2BAA  085C               	movf	(_top_push_state+1)^(0+128),w
  9039  2BAB  0022               	movlb	2	; select bank2
  9040  2BAC  00A1               	movwf	(set_leds_top@x+1)^(0+256)
  9041  2BAD  0021               	movlb	1	; select bank1
  9042  2BAE  085B               	movf	_top_push_state^(0+128),w
  9043  2BAF  0022               	movlb	2	; select bank2
  9044  2BB0  00A0               	movwf	set_leds_top@x^(0+256)
  9045  2BB1  3001               	movlw	1
  9046  2BB2  00A2               	movwf	set_leds_top@ledState^(0+256)
  9047  2BB3  3000               	movlw	0
  9048  2BB4  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
  9049  2BB5  3198  2002  31AB   	fcall	_set_leds_top
  9050                           
  9051                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  9052  2BB8  0021               	movlb	1	; select bank1
  9053  2BB9  0858               	movf	(_bottom_push_state+1)^(0+128),w
  9054  2BBA  0022               	movlb	2	; select bank2
  9055  2BBB  00A1               	movwf	(set_leds_bottom@x+1)^(0+256)
  9056  2BBC  0021               	movlb	1	; select bank1
  9057  2BBD  0857               	movf	_bottom_push_state^(0+128),w
  9058  2BBE  0022               	movlb	2	; select bank2
  9059  2BBF  00A0               	movwf	set_leds_bottom@x^(0+256)
  9060  2BC0  31AD  25DE         	fcall	_set_leds_bottom
  9061  2BC2  0008               	return
  9062  2BC3                     __end_of_resetRingLEDs:	
  9063                           
  9064                           	psect	text16
  9065  1D89                     __ptext16:	
  9066 ;; *************** function _set_subdivision *****************
  9067 ;; Defined at:
  9068 ;;		line 77 in file "user.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;  x               2   31[BANK3 ] int 
  9071 ;;  y               2   33[BANK3 ] int 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  scalar          3   38[BANK3 ] float 
  9074 ;;  tmpX            2   41[BANK3 ] int 
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  2   31[BANK3 ] int 
  9077 ;; Registers used:
  9078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9084 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9085 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9086 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9087 ;;      Totals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9088 ;;Total ram usage:       12 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    8
  9091 ;; This function calls:
  9092 ;;		___awtoft
  9093 ;;		___ftmul
  9094 ;;		___fttol
  9095 ;;		_trunc
  9096 ;; This function is called by:
  9097 ;;		_main
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           
  9102                           ;psect for function _set_subdivision
  9103  1D89                     _set_subdivision:	
  9104                           
  9105                           ;user.c: 81: adjust_sub_delay = 0;
  9106                           
  9107                           ;incstack = 0
  9108                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9109  1D89  0024               	movlb	4	; select bank4
  9110  1D8A  01BE               	clrf	_adjust_sub_delay^(0+512)
  9111                           
  9112                           ;user.c: 82: int tmpX = x;
  9113  1D8B  0023               	movlb	3	; select bank3
  9114  1D8C  0840               	movf	(set_subdivision@x+1)^(0+384),w
  9115  1D8D  00CA               	movwf	(set_subdivision@tmpX+1)^(0+384)
  9116  1D8E  083F               	movf	set_subdivision@x^(0+384),w
  9117  1D8F  00C9               	movwf	set_subdivision@tmpX^(0+384)
  9118                           
  9119                           ;user.c: 83: float scalar = 1.0;
  9120  1D90  3000               	movlw	0
  9121  1D91  00C6               	movwf	set_subdivision@scalar^(0+384)
  9122  1D92  3080               	movlw	128
  9123  1D93  00C7               	movwf	(set_subdivision@scalar+1)^(0+384)
  9124  1D94  303F               	movlw	63
  9125  1D95  00C8               	movwf	(set_subdivision@scalar+2)^(0+384)
  9126                           
  9127                           ;user.c: 85: switch (y) {
  9128  1D96  2DB2               	goto	l9339
  9129  1D97                     l9327:	
  9130                           ;user.c: 86: case 1:
  9131                           
  9132                           
  9133                           ;user.c: 87: scalar = 2.0;
  9134  1D97  3000               	movlw	0
  9135  1D98  00C6               	movwf	set_subdivision@scalar^(0+384)
  9136  1D99  3000               	movlw	0
  9137  1D9A  00C7               	movwf	(set_subdivision@scalar+1)^(0+384)
  9138  1D9B  3040               	movlw	64
  9139  1D9C  2DB0               	goto	L8
  9140  1D9D                     l9329:	
  9141                           ;user.c: 89: case 2:
  9142                           
  9143                           ;user.c: 88: break;
  9144                           
  9145                           
  9146                           ;user.c: 90: scalar = 0.6666;
  9147  1D9D  30A6               	movlw	166
  9148  1D9E  00C6               	movwf	set_subdivision@scalar^(0+384)
  9149  1D9F  302A               	movlw	42
  9150  1DA0  2DA4               	goto	L10
  9151  1DA1                     l9331:	
  9152                           ;user.c: 92: case 3:
  9153                           
  9154                           ;user.c: 91: break;
  9155                           
  9156                           
  9157                           ;user.c: 93: scalar = .5;
  9158  1DA1  3000               	movlw	0
  9159  1DA2  00C6               	movwf	set_subdivision@scalar^(0+384)
  9160  1DA3  3000               	movlw	0
  9161  1DA4                     L10:	
  9162  1DA4  00C7               	movwf	(set_subdivision@scalar+1)^(0+384)
  9163  1DA5  303F               	movlw	63
  9164  1DA6  2DB0               	goto	L8
  9165  1DA7                     l9333:	
  9166                           ;user.c: 95: case 4:
  9167                           
  9168                           ;user.c: 94: break;
  9169                           
  9170                           
  9171                           ;user.c: 96: scalar = 0.3333;
  9172  1DA7  30A6               	movlw	166
  9173  1DA8  00C6               	movwf	set_subdivision@scalar^(0+384)
  9174  1DA9  30AA               	movlw	170
  9175  1DAA  2DAE               	goto	L9
  9176  1DAB                     l9335:	
  9177                           ;user.c: 98: case 5:
  9178                           
  9179                           ;user.c: 97: break;
  9180                           
  9181                           
  9182                           ;user.c: 99: scalar = 0.25;
  9183  1DAB  3000               	movlw	0
  9184  1DAC  00C6               	movwf	set_subdivision@scalar^(0+384)
  9185  1DAD  3080               	movlw	128
  9186  1DAE                     L9:	
  9187  1DAE  00C7               	movwf	(set_subdivision@scalar+1)^(0+384)
  9188  1DAF  303E               	movlw	62
  9189  1DB0                     L8:	
  9190  1DB0  00C8               	movwf	(set_subdivision@scalar+2)^(0+384)
  9191                           
  9192                           ;user.c: 104: }
  9193                           
  9194                           ;user.c: 103: break;
  9195                           
  9196                           ;user.c: 101: case 6:
  9197                           
  9198                           ;user.c: 100: break;
  9199  1DB1  2DCB               	goto	l9341
  9200  1DB2                     l9339:	
  9201                           
  9202                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9203                           ; Switch size 1, requested type "space"
  9204                           ; Number of cases is 1, Range of values is 0 to 0
  9205                           ; switch strategies available:
  9206                           ; Name         Instructions Cycles
  9207                           ; simple_byte            4     3 (average)
  9208                           ; direct_byte            8     6 (fixed)
  9209                           ; jumptable            260     6 (fixed)
  9210                           ;	Chosen strategy is simple_byte
  9211  1DB2  0842               	movf	(set_subdivision@y+1)^(0+384),w
  9212  1DB3  3A00               	xorlw	0	; case 0
  9213  1DB4  1903               	skipnz
  9214  1DB5  2DB7               	goto	l9863
  9215  1DB6  2DCB               	goto	l9341
  9216  1DB7                     l9863:	
  9217                           
  9218                           ; Switch size 1, requested type "space"
  9219                           ; Number of cases is 6, Range of values is 1 to 6
  9220                           ; switch strategies available:
  9221                           ; Name         Instructions Cycles
  9222                           ; simple_byte           19    10 (average)
  9223                           ; direct_byte           21     9 (fixed)
  9224                           ; jumptable            263     9 (fixed)
  9225                           ;	Chosen strategy is simple_byte
  9226  1DB7  0841               	movf	set_subdivision@y^(0+384),w
  9227  1DB8  3A01               	xorlw	1	; case 1
  9228  1DB9  1903               	skipnz
  9229  1DBA  2D97               	goto	l9327
  9230  1DBB  3A03               	xorlw	3	; case 2
  9231  1DBC  1903               	skipnz
  9232  1DBD  2D9D               	goto	l9329
  9233  1DBE  3A01               	xorlw	1	; case 3
  9234  1DBF  1903               	skipnz
  9235  1DC0  2DA1               	goto	l9331
  9236  1DC1  3A07               	xorlw	7	; case 4
  9237  1DC2  1903               	skipnz
  9238  1DC3  2DA7               	goto	l9333
  9239  1DC4  3A01               	xorlw	1	; case 5
  9240  1DC5  1903               	skipnz
  9241  1DC6  2DAB               	goto	l9335
  9242  1DC7  3A03               	xorlw	3	; case 6
  9243  1DC8  1903               	skipnz
  9244  1DC9  2DCB               	goto	l9341
  9245  1DCA  2DCB               	goto	l9341
  9246  1DCB                     l9341:	
  9247                           
  9248                           ;user.c: 106: tmpX = tmpX * scalar;
  9249  1DCB  084A               	movf	(set_subdivision@tmpX+1)^(0+384),w
  9250  1DCC  0022               	movlb	2	; select bank2
  9251  1DCD  00A9               	movwf	(___awtoft@c+1)^(0+256)
  9252  1DCE  0023               	movlb	3	; select bank3
  9253  1DCF  0849               	movf	set_subdivision@tmpX^(0+384),w
  9254  1DD0  0022               	movlb	2	; select bank2
  9255  1DD1  00A8               	movwf	___awtoft@c^(0+256)
  9256  1DD2  31A0  2000  319D   	fcall	___awtoft
  9257  1DD5  0022               	movlb	2	; select bank2
  9258  1DD6  0828               	movf	?___awtoft^(0+256),w
  9259  1DD7  00D1               	movwf	___ftmul@f2^(0+256)
  9260  1DD8  0829               	movf	(?___awtoft+1)^(0+256),w
  9261  1DD9  00D2               	movwf	(___ftmul@f2+1)^(0+256)
  9262  1DDA  082A               	movf	(?___awtoft+2)^(0+256),w
  9263  1DDB  00D3               	movwf	(___ftmul@f2+2)^(0+256)
  9264  1DDC  0023               	movlb	3	; select bank3
  9265  1DDD  0846               	movf	set_subdivision@scalar^(0+384),w
  9266  1DDE  0022               	movlb	2	; select bank2
  9267  1DDF  00CE               	movwf	___ftmul@f1^(0+256)
  9268  1DE0  0023               	movlb	3	; select bank3
  9269  1DE1  0847               	movf	(set_subdivision@scalar+1)^(0+384),w
  9270  1DE2  0022               	movlb	2	; select bank2
  9271  1DE3  00CF               	movwf	(___ftmul@f1+1)^(0+256)
  9272  1DE4  0023               	movlb	3	; select bank3
  9273  1DE5  0848               	movf	(set_subdivision@scalar+2)^(0+384),w
  9274  1DE6  0022               	movlb	2	; select bank2
  9275  1DE7  00D0               	movwf	(___ftmul@f1+2)^(0+256)
  9276  1DE8  319C  24D5  319D   	fcall	___ftmul
  9277  1DEB  0022               	movlb	2	; select bank2
  9278  1DEC  084E               	movf	?___ftmul^(0+256),w
  9279  1DED  0023               	movlb	3	; select bank3
  9280  1DEE  00A0               	movwf	___fttol@f1^(0+384)
  9281  1DEF  0022               	movlb	2	; select bank2
  9282  1DF0  084F               	movf	(?___ftmul+1)^(0+256),w
  9283  1DF1  0023               	movlb	3	; select bank3
  9284  1DF2  00A1               	movwf	(___fttol@f1+1)^(0+384)
  9285  1DF3  0022               	movlb	2	; select bank2
  9286  1DF4  0850               	movf	(?___ftmul+2)^(0+256),w
  9287  1DF5  0023               	movlb	3	; select bank3
  9288  1DF6  00A2               	movwf	(___fttol@f1+2)^(0+384)
  9289  1DF7  31A6  2667  319D   	fcall	___fttol
  9290  1DFA  0023               	movlb	3	; select bank3
  9291  1DFB  0821               	movf	(?___fttol^(0+384)+1),w
  9292  1DFC  00CA               	movwf	(set_subdivision@tmpX+1)^(0+384)
  9293  1DFD  0820               	movf	?___fttol^(0+384),w
  9294  1DFE  00C9               	movwf	set_subdivision@tmpX^(0+384)
  9295                           
  9296                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  9297  1DFF  084A               	movf	(set_subdivision@tmpX+1)^(0+384),w
  9298  1E00  0022               	movlb	2	; select bank2
  9299  1E01  00A9               	movwf	(___awtoft@c+1)^(0+256)
  9300  1E02  0023               	movlb	3	; select bank3
  9301  1E03  0849               	movf	set_subdivision@tmpX^(0+384),w
  9302  1E04  0022               	movlb	2	; select bank2
  9303  1E05  00A8               	movwf	___awtoft@c^(0+256)
  9304  1E06  31A0  2000  319D   	fcall	___awtoft
  9305  1E09  0022               	movlb	2	; select bank2
  9306  1E0A  0828               	movf	?___awtoft^(0+256),w
  9307  1E0B  0023               	movlb	3	; select bank3
  9308  1E0C  00B6               	movwf	trunc@x^(0+384)
  9309  1E0D  0022               	movlb	2	; select bank2
  9310  1E0E  0829               	movf	(?___awtoft+1)^(0+256),w
  9311  1E0F  0023               	movlb	3	; select bank3
  9312  1E10  00B7               	movwf	(trunc@x+1)^(0+384)
  9313  1E11  0022               	movlb	2	; select bank2
  9314  1E12  082A               	movf	(?___awtoft+2)^(0+256),w
  9315  1E13  0023               	movlb	3	; select bank3
  9316  1E14  00B8               	movwf	(trunc@x+2)^(0+384)
  9317  1E15  31A0  20F6  319D   	fcall	_trunc
  9318  1E18  0023               	movlb	3	; select bank3
  9319  1E19  0836               	movf	?_trunc^(0+384),w
  9320  1E1A  00C3               	movwf	??_set_subdivision^(0+384)
  9321  1E1B  0837               	movf	(?_trunc+1)^(0+384),w
  9322  1E1C  00C4               	movwf	(??_set_subdivision^(0+384)+1)
  9323  1E1D  0838               	movf	(?_trunc+2)^(0+384),w
  9324  1E1E  00C5               	movwf	(??_set_subdivision^(0+384)+2)
  9325  1E1F  084A               	movf	(set_subdivision@tmpX+1)^(0+384),w
  9326  1E20  0022               	movlb	2	; select bank2
  9327  1E21  00A9               	movwf	(___awtoft@c+1)^(0+256)
  9328  1E22  0023               	movlb	3	; select bank3
  9329  1E23  0849               	movf	set_subdivision@tmpX^(0+384),w
  9330  1E24  0022               	movlb	2	; select bank2
  9331  1E25  00A8               	movwf	___awtoft@c^(0+256)
  9332  1E26  31A0  2000  319D   	fcall	___awtoft
  9333  1E29  0022               	movlb	2	; select bank2
  9334  1E2A  082A               	movf	(?___awtoft+2)^(0+256),w
  9335  1E2B  0023               	movlb	3	; select bank3
  9336  1E2C  0645               	xorwf	(??_set_subdivision+2)^(0+384),w
  9337  1E2D  1D03               	skipz
  9338  1E2E  2E39               	goto	u10985
  9339  1E2F  0022               	movlb	2	; select bank2
  9340  1E30  0829               	movf	(?___awtoft+1)^(0+256),w
  9341  1E31  0023               	movlb	3	; select bank3
  9342  1E32  0644               	xorwf	(??_set_subdivision+1)^(0+384),w
  9343  1E33  1D03               	skipz
  9344  1E34  2E39               	goto	u10985
  9345  1E35  0022               	movlb	2	; select bank2
  9346  1E36  0828               	movf	?___awtoft^(0+256),w
  9347  1E37  0023               	movlb	3	; select bank3
  9348  1E38  0643               	xorwf	??_set_subdivision^(0+384),w
  9349  1E39                     u10985:	
  9350  1E39  1903               	skipnz
  9351  1E3A  2E3E               	goto	l9347
  9352                           
  9353                           ;user.c: 109: adjust_sub_delay = 1;
  9354  1E3B  0024               	movlb	4	; select bank4
  9355  1E3C  01BE               	clrf	_adjust_sub_delay^(0+512)
  9356  1E3D  0ABE               	incf	_adjust_sub_delay^(0+512),f
  9357  1E3E                     l9347:	
  9358                           
  9359                           ;user.c: 110: }
  9360                           ;user.c: 112: return tmpX;
  9361  1E3E  0023               	movlb	3	; select bank3
  9362  1E3F  084A               	movf	(set_subdivision@tmpX+1)^(0+384),w
  9363  1E40  00C0               	movwf	(?_set_subdivision+1)^(0+384)
  9364  1E41  0849               	movf	set_subdivision@tmpX^(0+384),w
  9365  1E42  00BF               	movwf	?_set_subdivision^(0+384)
  9366  1E43  0008               	return
  9367  1E44                     __end_of_set_subdivision:	
  9368                           
  9369                           	psect	text17
  9370  20F6                     __ptext17:	
  9371 ;; *************** function _trunc *****************
  9372 ;; Defined at:
  9373 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;  x               3   22[BANK3 ] int 
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;  i               3   26[BANK3 ] int 
  9378 ;;  expon           2   29[BANK3 ] int 
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  3   22[BANK3 ] int 
  9381 ;; Registers used:
  9382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9388 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9389 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9390 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9391 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9392 ;;Total ram usage:        9 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    7
  9395 ;; This function calls:
  9396 ;;		___altoft
  9397 ;;		___fttol
  9398 ;;		_frexp
  9399 ;; This function is called by:
  9400 ;;		_set_subdivision
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           
  9405                           ;psect for function _trunc
  9406  20F6                     _trunc:	
  9407                           
  9408                           ;incstack = 0
  9409                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9410  20F6  0023               	movlb	3	; select bank3
  9411  20F7  0836               	movf	trunc@x^(0+384),w
  9412  20F8  0022               	movlb	2	; select bank2
  9413  20F9  00A0               	movwf	frexp@value^(0+256)
  9414  20FA  0023               	movlb	3	; select bank3
  9415  20FB  0837               	movf	(trunc@x+1)^(0+384),w
  9416  20FC  0022               	movlb	2	; select bank2
  9417  20FD  00A1               	movwf	(frexp@value+1)^(0+256)
  9418  20FE  0023               	movlb	3	; select bank3
  9419  20FF  0838               	movf	(trunc@x+2)^(0+384),w
  9420  2100  0022               	movlb	2	; select bank2
  9421  2101  00A2               	movwf	(frexp@value+2)^(0+256)
  9422  2102  30BD               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  9423  2103  0023               	movlb	3	; select bank3
  9424  2104  00B9               	movwf	??_trunc^(0+384)
  9425  2105  0839               	movf	??_trunc^(0+384),w
  9426  2106  0022               	movlb	2	; select bank2
  9427  2107  00A3               	movwf	frexp@eptr^(0+256)
  9428  2108  31AE  26FE  31A0   	fcall	_frexp
  9429  210B  0023               	movlb	3	; select bank3
  9430  210C  1FBE               	btfss	(trunc@expon+1)^(0+384),7
  9431  210D  2915               	goto	l8629
  9432  210E  3000               	movlw	0
  9433  210F  00B6               	movwf	?_trunc^(0+384)
  9434  2110  3000               	movlw	0
  9435  2111  00B7               	movwf	(?_trunc+1)^(0+384)
  9436  2112  3000               	movlw	0
  9437  2113  00B8               	movwf	(?_trunc+2)^(0+384)
  9438  2114  0008               	return
  9439  2115                     l8629:	
  9440  2115  3000               	movlw	0
  9441  2116  023E               	subwf	(trunc@expon+1)^(0+384),w
  9442  2117  3015               	movlw	21
  9443  2118  1903               	skipnz
  9444  2119  023D               	subwf	trunc@expon^(0+384),w
  9445  211A  1803               	btfsc	3,0
  9446  211B  0008               	return
  9447  211C  0836               	movf	trunc@x^(0+384),w
  9448  211D  00A0               	movwf	___fttol@f1^(0+384)
  9449  211E  0837               	movf	(trunc@x+1)^(0+384),w
  9450  211F  00A1               	movwf	(___fttol@f1+1)^(0+384)
  9451  2120  0838               	movf	(trunc@x+2)^(0+384),w
  9452  2121  00A2               	movwf	(___fttol@f1+2)^(0+384)
  9453  2122  31A6  2667  31A0   	fcall	___fttol
  9454  2125  0023               	movlb	3	; select bank3
  9455  2126  0823               	movf	(?___fttol+3)^(0+384),w
  9456  2127  00B1               	movwf	(___altoft@c+3)^(0+384)
  9457  2128  0822               	movf	(?___fttol+2)^(0+384),w
  9458  2129  00B0               	movwf	(___altoft@c+2)^(0+384)
  9459  212A  0821               	movf	(?___fttol+1)^(0+384),w
  9460  212B  00AF               	movwf	(___altoft@c+1)^(0+384)
  9461  212C  0820               	movf	?___fttol^(0+384),w
  9462  212D  00AE               	movwf	___altoft@c^(0+384)
  9463  212E  31A1  2188         	fcall	___altoft
  9464  2130  0023               	movlb	3	; select bank3
  9465  2131  082E               	movf	?___altoft^(0+384),w
  9466  2132  00BA               	movwf	trunc@i^(0+384)
  9467  2133  082F               	movf	(?___altoft+1)^(0+384),w
  9468  2134  00BB               	movwf	(trunc@i+1)^(0+384)
  9469  2135  0830               	movf	(?___altoft+2)^(0+384),w
  9470  2136  00BC               	movwf	(trunc@i+2)^(0+384)
  9471  2137  083A               	movf	trunc@i^(0+384),w
  9472  2138  00B6               	movwf	?_trunc^(0+384)
  9473  2139  083B               	movf	(trunc@i+1)^(0+384),w
  9474  213A  00B7               	movwf	(?_trunc+1)^(0+384)
  9475  213B  083C               	movf	(trunc@i+2)^(0+384),w
  9476  213C  00B8               	movwf	(?_trunc+2)^(0+384)
  9477  213D  0008               	return
  9478  213E                     __end_of_trunc:	
  9479                           
  9480                           	psect	text18
  9481  1B77                     __ptext18:	
  9482 ;; *************** function _scaleiA10kPot *****************
  9483 ;; Defined at:
  9484 ;;		line 211 in file "user.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;  input           3   71[BANK3 ] int 
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;  pwm             3    0[BANK4 ] float 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  2   71[BANK3 ] int 
  9491 ;; Registers used:
  9492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9498 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9499 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9501 ;;      Totals:         0       0       0       0       3       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9502 ;;Total ram usage:       12 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:   10
  9505 ;; This function calls:
  9506 ;;		___ftadd
  9507 ;;		___ftdiv
  9508 ;;		___ftmul
  9509 ;;		___ftneg
  9510 ;;		___fttol
  9511 ;;		_pow
  9512 ;; This function is called by:
  9513 ;;		_main
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           
  9518                           ;psect for function _scaleiA10kPot
  9519  1B77                     _scaleiA10kPot:	
  9520                           
  9521                           ;user.c: 214: if (input == 0.0) {return 0;}
  9522                           
  9523                           ;incstack = 0
  9524                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9525  1B77  0023               	movlb	3	; select bank3
  9526  1B78  0869               	movf	(scaleiA10kPot@input+2)^(0+384),w
  9527  1B79  0468               	iorwf	(scaleiA10kPot@input+1)^(0+384),w
  9528  1B7A  0467               	iorwf	scaleiA10kPot@input^(0+384),w
  9529  1B7B  1D03               	skipz
  9530  1B7C  2B80               	goto	l9287
  9531  1B7D  01E7               	clrf	?_scaleiA10kPot^(0+384)
  9532  1B7E  01E8               	clrf	(?_scaleiA10kPot+1)^(0+384)
  9533  1B7F  0008               	return
  9534  1B80                     l9287:	
  9535                           
  9536                           ;user.c: 216: if (input == 1023.0) {return 255;}
  9537  1B80  30C0               	movlw	192
  9538  1B81  0667               	xorwf	scaleiA10kPot@input^(0+384),w
  9539  1B82  307F               	movlw	127
  9540  1B83  1903               	skipnz
  9541  1B84  0668               	xorwf	(scaleiA10kPot@input+1)^(0+384),w
  9542  1B85  3044               	movlw	68
  9543  1B86  1903               	skipnz
  9544  1B87  0669               	xorwf	(scaleiA10kPot@input+2)^(0+384),w
  9545  1B88  1D03               	btfss	3,2
  9546  1B89  2B8F               	goto	l9293
  9547  1B8A  30FF               	movlw	255
  9548  1B8B  00E7               	movwf	?_scaleiA10kPot^(0+384)
  9549  1B8C  3000               	movlw	0
  9550  1B8D  00E8               	movwf	(?_scaleiA10kPot^(0+384)+1)
  9551  1B8E  0008               	return
  9552  1B8F                     l9293:	
  9553                           
  9554                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
  9555  1B8F  3000               	movlw	0
  9556  1B90  0022               	movlb	2	; select bank2
  9557  1B91  00C1               	movwf	___ftadd@f1^(0+256)
  9558  1B92  3080               	movlw	128
  9559  1B93  00C2               	movwf	(___ftadd@f1+1)^(0+256)
  9560  1B94  303F               	movlw	63
  9561  1B95  00C3               	movwf	(___ftadd@f1+2)^(0+256)
  9562  1B96  0023               	movlb	3	; select bank3
  9563  1B97  0867               	movf	scaleiA10kPot@input^(0+384),w
  9564  1B98  0022               	movlb	2	; select bank2
  9565  1B99  00B1               	movwf	___ftdiv@f1^(0+256)
  9566  1B9A  0023               	movlb	3	; select bank3
  9567  1B9B  0868               	movf	(scaleiA10kPot@input+1)^(0+384),w
  9568  1B9C  0022               	movlb	2	; select bank2
  9569  1B9D  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
  9570  1B9E  0023               	movlb	3	; select bank3
  9571  1B9F  0869               	movf	(scaleiA10kPot@input+2)^(0+384),w
  9572  1BA0  0022               	movlb	2	; select bank2
  9573  1BA1  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
  9574  1BA2  30C0               	movlw	192
  9575  1BA3  00AE               	movwf	___ftdiv@f2^(0+256)
  9576  1BA4  307F               	movlw	127
  9577  1BA5  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
  9578  1BA6  3044               	movlw	68
  9579  1BA7  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
  9580  1BA8  319A  22CE  319B   	fcall	___ftdiv
  9581  1BAB  0022               	movlb	2	; select bank2
  9582  1BAC  082E               	movf	?___ftdiv^(0+256),w
  9583  1BAD  00BE               	movwf	___ftneg@f1^(0+256)
  9584  1BAE  082F               	movf	(?___ftdiv+1)^(0+256),w
  9585  1BAF  00BF               	movwf	(___ftneg@f1+1)^(0+256)
  9586  1BB0  0830               	movf	(?___ftdiv+2)^(0+256),w
  9587  1BB1  00C0               	movwf	(___ftneg@f1+2)^(0+256)
  9588  1BB2  31AA  22E9  319B   	fcall	___ftneg
  9589  1BB5  0022               	movlb	2	; select bank2
  9590  1BB6  083E               	movf	?___ftneg^(0+256),w
  9591  1BB7  00C4               	movwf	___ftadd@f2^(0+256)
  9592  1BB8  083F               	movf	(?___ftneg+1)^(0+256),w
  9593  1BB9  00C5               	movwf	(___ftadd@f2+1)^(0+256)
  9594  1BBA  0840               	movf	(?___ftneg+2)^(0+256),w
  9595  1BBB  00C6               	movwf	(___ftadd@f2+2)^(0+256)
  9596  1BBC  3191  2116  319B   	fcall	___ftadd
  9597  1BBF  0022               	movlb	2	; select bank2
  9598  1BC0  0841               	movf	?___ftadd^(0+256),w
  9599  1BC1  0024               	movlb	4	; select bank4
  9600  1BC2  00EA               	movwf	_scaleiA10kPot$2799^(0+512)
  9601  1BC3  0022               	movlb	2	; select bank2
  9602  1BC4  0842               	movf	(?___ftadd+1)^(0+256),w
  9603  1BC5  0024               	movlb	4	; select bank4
  9604  1BC6  00EB               	movwf	(_scaleiA10kPot$2799+1)^(0+512)
  9605  1BC7  0022               	movlb	2	; select bank2
  9606  1BC8  0843               	movf	(?___ftadd+2)^(0+256),w
  9607  1BC9  0024               	movlb	4	; select bank4
  9608  1BCA  00EC               	movwf	(_scaleiA10kPot$2799+2)^(0+512)
  9609                           
  9610                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
  9611  1BCB  306A               	movlw	106
  9612  1BCC  0023               	movlb	3	; select bank3
  9613  1BCD  00D8               	movwf	pow@y^(0+384)
  9614  1BCE  309C               	movlw	156
  9615  1BCF  00D9               	movwf	(pow@y+1)^(0+384)
  9616  1BD0  30BF               	movlw	191
  9617  1BD1  00DA               	movwf	(pow@y+2)^(0+384)
  9618  1BD2  0024               	movlb	4	; select bank4
  9619  1BD3  086A               	movf	_scaleiA10kPot$2799^(0+512),w
  9620  1BD4  0023               	movlb	3	; select bank3
  9621  1BD5  00D5               	movwf	pow@x^(0+384)
  9622  1BD6  0024               	movlb	4	; select bank4
  9623  1BD7  086B               	movf	(_scaleiA10kPot$2799+1)^(0+512),w
  9624  1BD8  0023               	movlb	3	; select bank3
  9625  1BD9  00D6               	movwf	(pow@x+1)^(0+384)
  9626  1BDA  0024               	movlb	4	; select bank4
  9627  1BDB  086C               	movf	(_scaleiA10kPot$2799+2)^(0+512),w
  9628  1BDC  0023               	movlb	3	; select bank3
  9629  1BDD  00D7               	movwf	(pow@x+2)^(0+384)
  9630  1BDE  3186  26B0  319B   	fcall	_pow
  9631  1BE1  0023               	movlb	3	; select bank3
  9632  1BE2  0855               	movf	?_pow^(0+384),w
  9633  1BE3  0024               	movlb	4	; select bank4
  9634  1BE4  00ED               	movwf	_scaleiA10kPot$2800^(0+512)
  9635  1BE5  0023               	movlb	3	; select bank3
  9636  1BE6  0856               	movf	(?_pow+1)^(0+384),w
  9637  1BE7  0024               	movlb	4	; select bank4
  9638  1BE8  00EE               	movwf	(_scaleiA10kPot$2800+1)^(0+512)
  9639  1BE9  0023               	movlb	3	; select bank3
  9640  1BEA  0857               	movf	(?_pow+2)^(0+384),w
  9641  1BEB  0024               	movlb	4	; select bank4
  9642  1BEC  00EF               	movwf	(_scaleiA10kPot$2800+2)^(0+512)
  9643                           
  9644                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
  9645  1BED  30E3               	movlw	227
  9646  1BEE  0022               	movlb	2	; select bank2
  9647  1BEF  00CE               	movwf	___ftmul@f1^(0+256)
  9648  1BF0  300B               	movlw	11
  9649  1BF1  00CF               	movwf	(___ftmul@f1+1)^(0+256)
  9650  1BF2  3041               	movlw	65
  9651  1BF3  00D0               	movwf	(___ftmul@f1+2)^(0+256)
  9652  1BF4  0024               	movlb	4	; select bank4
  9653  1BF5  086D               	movf	_scaleiA10kPot$2800^(0+512),w
  9654  1BF6  0022               	movlb	2	; select bank2
  9655  1BF7  00D1               	movwf	___ftmul@f2^(0+256)
  9656  1BF8  0024               	movlb	4	; select bank4
  9657  1BF9  086E               	movf	(_scaleiA10kPot$2800+1)^(0+512),w
  9658  1BFA  0022               	movlb	2	; select bank2
  9659  1BFB  00D2               	movwf	(___ftmul@f2+1)^(0+256)
  9660  1BFC  0024               	movlb	4	; select bank4
  9661  1BFD  086F               	movf	(_scaleiA10kPot$2800+2)^(0+512),w
  9662  1BFE  0022               	movlb	2	; select bank2
  9663  1BFF  00D3               	movwf	(___ftmul@f2+2)^(0+256)
  9664  1C00  319C  24D5  319B   	fcall	___ftmul
  9665  1C03  0022               	movlb	2	; select bank2
  9666  1C04  084E               	movf	?___ftmul^(0+256),w
  9667  1C05  0024               	movlb	4	; select bank4
  9668  1C06  00E7               	movwf	scaleiA10kPot@pwm^(0+512)
  9669  1C07  0022               	movlb	2	; select bank2
  9670  1C08  084F               	movf	(?___ftmul+1)^(0+256),w
  9671  1C09  0024               	movlb	4	; select bank4
  9672  1C0A  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+512)
  9673  1C0B  0022               	movlb	2	; select bank2
  9674  1C0C  0850               	movf	(?___ftmul+2)^(0+256),w
  9675  1C0D  0024               	movlb	4	; select bank4
  9676  1C0E  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+512)
  9677                           
  9678                           ;user.c: 219: return (int)(pwm);
  9679  1C0F  0867               	movf	scaleiA10kPot@pwm^(0+512),w
  9680  1C10  0023               	movlb	3	; select bank3
  9681  1C11  00A0               	movwf	___fttol@f1^(0+384)
  9682  1C12  0024               	movlb	4	; select bank4
  9683  1C13  0868               	movf	(scaleiA10kPot@pwm+1)^(0+512),w
  9684  1C14  0023               	movlb	3	; select bank3
  9685  1C15  00A1               	movwf	(___fttol@f1+1)^(0+384)
  9686  1C16  0024               	movlb	4	; select bank4
  9687  1C17  0869               	movf	(scaleiA10kPot@pwm+2)^(0+512),w
  9688  1C18  0023               	movlb	3	; select bank3
  9689  1C19  00A2               	movwf	(___fttol@f1+2)^(0+384)
  9690  1C1A  31A6  2667         	fcall	___fttol
  9691  1C1C  0023               	movlb	3	; select bank3
  9692  1C1D  0821               	movf	(?___fttol^(0+384)+1),w
  9693  1C1E  00E8               	movwf	(?_scaleiA10kPot+1)^(0+384)
  9694  1C1F  0820               	movf	?___fttol^(0+384),w
  9695  1C20  00E7               	movwf	?_scaleiA10kPot^(0+384)
  9696  1C21  0008               	return
  9697  1C22                     __end_of_scaleiA10kPot:	
  9698                           
  9699                           	psect	text19
  9700  1856                     __ptext19:	
  9701 ;; *************** function _scaleA10kPot *****************
  9702 ;; Defined at:
  9703 ;;		line 202 in file "user.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;  input           3   71[BANK3 ] int 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;  pwm             3    0[BANK4 ] float 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  2   71[BANK3 ] int 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9717 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9718 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9720 ;;      Totals:         0       0       0       0       3       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9721 ;;Total ram usage:       12 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:   10
  9724 ;; This function calls:
  9725 ;;		___ftdiv
  9726 ;;		___ftmul
  9727 ;;		___fttol
  9728 ;;		_pow
  9729 ;; This function is called by:
  9730 ;;		_main
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _scaleA10kPot
  9736  1856                     _scaleA10kPot:	
  9737                           
  9738                           ;user.c: 204: if (input == 0.0) {return 255;}
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9742  1856  0023               	movlb	3	; select bank3
  9743  1857  0869               	movf	(scaleA10kPot@input+2)^(0+384),w
  9744  1858  0468               	iorwf	(scaleA10kPot@input+1)^(0+384),w
  9745  1859  0467               	iorwf	scaleA10kPot@input^(0+384),w
  9746  185A  1D03               	skipz
  9747  185B  2861               	goto	l9265
  9748  185C  30FF               	movlw	255
  9749  185D  00E7               	movwf	?_scaleA10kPot^(0+384)
  9750  185E  3000               	movlw	0
  9751  185F  00E8               	movwf	(?_scaleA10kPot^(0+384)+1)
  9752  1860  0008               	return
  9753  1861                     l9265:	
  9754                           
  9755                           ;user.c: 205: if (input == 1023.0) {return 0;}
  9756  1861  30C0               	movlw	192
  9757  1862  0667               	xorwf	scaleA10kPot@input^(0+384),w
  9758  1863  307F               	movlw	127
  9759  1864  1903               	skipnz
  9760  1865  0668               	xorwf	(scaleA10kPot@input+1)^(0+384),w
  9761  1866  3044               	movlw	68
  9762  1867  1903               	skipnz
  9763  1868  0669               	xorwf	(scaleA10kPot@input+2)^(0+384),w
  9764  1869  1D03               	btfss	3,2
  9765  186A  286E               	goto	l9271
  9766  186B  01E7               	clrf	?_scaleA10kPot^(0+384)
  9767  186C  01E8               	clrf	(?_scaleA10kPot+1)^(0+384)
  9768  186D  0008               	return
  9769  186E                     l9271:	
  9770                           
  9771                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
  9772  186E  30C0               	movlw	192
  9773  186F  0022               	movlb	2	; select bank2
  9774  1870  00AE               	movwf	___ftdiv@f2^(0+256)
  9775  1871  307F               	movlw	127
  9776  1872  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
  9777  1873  3044               	movlw	68
  9778  1874  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
  9779  1875  0023               	movlb	3	; select bank3
  9780  1876  0867               	movf	scaleA10kPot@input^(0+384),w
  9781  1877  0022               	movlb	2	; select bank2
  9782  1878  00B1               	movwf	___ftdiv@f1^(0+256)
  9783  1879  0023               	movlb	3	; select bank3
  9784  187A  0868               	movf	(scaleA10kPot@input+1)^(0+384),w
  9785  187B  0022               	movlb	2	; select bank2
  9786  187C  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
  9787  187D  0023               	movlb	3	; select bank3
  9788  187E  0869               	movf	(scaleA10kPot@input+2)^(0+384),w
  9789  187F  0022               	movlb	2	; select bank2
  9790  1880  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
  9791  1881  319A  22CE  3198   	fcall	___ftdiv
  9792  1884  0022               	movlb	2	; select bank2
  9793  1885  082E               	movf	?___ftdiv^(0+256),w
  9794  1886  0024               	movlb	4	; select bank4
  9795  1887  00EA               	movwf	_scaleA10kPot$2797^(0+512)
  9796  1888  0022               	movlb	2	; select bank2
  9797  1889  082F               	movf	(?___ftdiv+1)^(0+256),w
  9798  188A  0024               	movlb	4	; select bank4
  9799  188B  00EB               	movwf	(_scaleA10kPot$2797+1)^(0+512)
  9800  188C  0022               	movlb	2	; select bank2
  9801  188D  0830               	movf	(?___ftdiv+2)^(0+256),w
  9802  188E  0024               	movlb	4	; select bank4
  9803  188F  00EC               	movwf	(_scaleA10kPot$2797+2)^(0+512)
  9804                           
  9805                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
  9806  1890  306A               	movlw	106
  9807  1891  0023               	movlb	3	; select bank3
  9808  1892  00D8               	movwf	pow@y^(0+384)
  9809  1893  309C               	movlw	156
  9810  1894  00D9               	movwf	(pow@y+1)^(0+384)
  9811  1895  30BF               	movlw	191
  9812  1896  00DA               	movwf	(pow@y+2)^(0+384)
  9813  1897  0024               	movlb	4	; select bank4
  9814  1898  086A               	movf	_scaleA10kPot$2797^(0+512),w
  9815  1899  0023               	movlb	3	; select bank3
  9816  189A  00D5               	movwf	pow@x^(0+384)
  9817  189B  0024               	movlb	4	; select bank4
  9818  189C  086B               	movf	(_scaleA10kPot$2797+1)^(0+512),w
  9819  189D  0023               	movlb	3	; select bank3
  9820  189E  00D6               	movwf	(pow@x+1)^(0+384)
  9821  189F  0024               	movlb	4	; select bank4
  9822  18A0  086C               	movf	(_scaleA10kPot$2797+2)^(0+512),w
  9823  18A1  0023               	movlb	3	; select bank3
  9824  18A2  00D7               	movwf	(pow@x+2)^(0+384)
  9825  18A3  3186  26B0  3198   	fcall	_pow
  9826  18A6  0023               	movlb	3	; select bank3
  9827  18A7  0855               	movf	?_pow^(0+384),w
  9828  18A8  0024               	movlb	4	; select bank4
  9829  18A9  00ED               	movwf	_scaleA10kPot$2798^(0+512)
  9830  18AA  0023               	movlb	3	; select bank3
  9831  18AB  0856               	movf	(?_pow+1)^(0+384),w
  9832  18AC  0024               	movlb	4	; select bank4
  9833  18AD  00EE               	movwf	(_scaleA10kPot$2798+1)^(0+512)
  9834  18AE  0023               	movlb	3	; select bank3
  9835  18AF  0857               	movf	(?_pow+2)^(0+384),w
  9836  18B0  0024               	movlb	4	; select bank4
  9837  18B1  00EF               	movwf	(_scaleA10kPot$2798+2)^(0+512)
  9838                           
  9839                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
  9840  18B2  30E3               	movlw	227
  9841  18B3  0022               	movlb	2	; select bank2
  9842  18B4  00CE               	movwf	___ftmul@f1^(0+256)
  9843  18B5  300B               	movlw	11
  9844  18B6  00CF               	movwf	(___ftmul@f1+1)^(0+256)
  9845  18B7  3041               	movlw	65
  9846  18B8  00D0               	movwf	(___ftmul@f1+2)^(0+256)
  9847  18B9  0024               	movlb	4	; select bank4
  9848  18BA  086D               	movf	_scaleA10kPot$2798^(0+512),w
  9849  18BB  0022               	movlb	2	; select bank2
  9850  18BC  00D1               	movwf	___ftmul@f2^(0+256)
  9851  18BD  0024               	movlb	4	; select bank4
  9852  18BE  086E               	movf	(_scaleA10kPot$2798+1)^(0+512),w
  9853  18BF  0022               	movlb	2	; select bank2
  9854  18C0  00D2               	movwf	(___ftmul@f2+1)^(0+256)
  9855  18C1  0024               	movlb	4	; select bank4
  9856  18C2  086F               	movf	(_scaleA10kPot$2798+2)^(0+512),w
  9857  18C3  0022               	movlb	2	; select bank2
  9858  18C4  00D3               	movwf	(___ftmul@f2+2)^(0+256)
  9859  18C5  319C  24D5  3198   	fcall	___ftmul
  9860  18C8  0022               	movlb	2	; select bank2
  9861  18C9  084E               	movf	?___ftmul^(0+256),w
  9862  18CA  0024               	movlb	4	; select bank4
  9863  18CB  00E7               	movwf	scaleA10kPot@pwm^(0+512)
  9864  18CC  0022               	movlb	2	; select bank2
  9865  18CD  084F               	movf	(?___ftmul+1)^(0+256),w
  9866  18CE  0024               	movlb	4	; select bank4
  9867  18CF  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+512)
  9868  18D0  0022               	movlb	2	; select bank2
  9869  18D1  0850               	movf	(?___ftmul+2)^(0+256),w
  9870  18D2  0024               	movlb	4	; select bank4
  9871  18D3  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+512)
  9872                           
  9873                           ;user.c: 207: return (int)(pwm);
  9874  18D4  0867               	movf	scaleA10kPot@pwm^(0+512),w
  9875  18D5  0023               	movlb	3	; select bank3
  9876  18D6  00A0               	movwf	___fttol@f1^(0+384)
  9877  18D7  0024               	movlb	4	; select bank4
  9878  18D8  0868               	movf	(scaleA10kPot@pwm+1)^(0+512),w
  9879  18D9  0023               	movlb	3	; select bank3
  9880  18DA  00A1               	movwf	(___fttol@f1+1)^(0+384)
  9881  18DB  0024               	movlb	4	; select bank4
  9882  18DC  0869               	movf	(scaleA10kPot@pwm+2)^(0+512),w
  9883  18DD  0023               	movlb	3	; select bank3
  9884  18DE  00A2               	movwf	(___fttol@f1+2)^(0+384)
  9885  18DF  31A6  2667         	fcall	___fttol
  9886  18E1  0023               	movlb	3	; select bank3
  9887  18E2  0821               	movf	(?___fttol^(0+384)+1),w
  9888  18E3  00E8               	movwf	(?_scaleA10kPot+1)^(0+384)
  9889  18E4  0820               	movf	?___fttol^(0+384),w
  9890  18E5  00E7               	movwf	?_scaleA10kPot^(0+384)
  9891  18E6  0008               	return
  9892  18E7                     __end_of_scaleA10kPot:	
  9893                           
  9894                           	psect	text20
  9895  255B                     __ptext20:	
  9896 ;; *************** function _scaleA100kPot *****************
  9897 ;; Defined at:
  9898 ;;		line 188 in file "user.c"
  9899 ;; Parameters:    Size  Location     Type
  9900 ;;  input           3   71[BANK3 ] int 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;  pwm             3    0[BANK4 ] float 
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  2   71[BANK3 ] int 
  9905 ;; Registers used:
  9906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9912 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9913 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9915 ;;      Totals:         0       0       0       0       3       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9916 ;;Total ram usage:       12 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:   10
  9919 ;; This function calls:
  9920 ;;		___ftdiv
  9921 ;;		___ftmul
  9922 ;;		___fttol
  9923 ;;		_pow
  9924 ;; This function is called by:
  9925 ;;		_main
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _scaleA100kPot
  9931  255B                     _scaleA100kPot:	
  9932                           
  9933                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9937  255B  0023               	movlb	3	; select bank3
  9938  255C  0869               	movf	(scaleA100kPot@input+2)^(0+384),w
  9939  255D  0468               	iorwf	(scaleA100kPot@input+1)^(0+384),w
  9940  255E  0467               	iorwf	scaleA100kPot@input^(0+384),w
  9941  255F  1D03               	skipz
  9942  2560  2D67               	goto	l9307
  9943  2561  3000               	movlw	0
  9944  2562  00E7               	movwf	scaleA100kPot@input^(0+384)
  9945  2563  3080               	movlw	128
  9946  2564  00E8               	movwf	(scaleA100kPot@input+1)^(0+384)
  9947  2565  303F               	movlw	63
  9948  2566  00E9               	movwf	(scaleA100kPot@input+2)^(0+384)
  9949  2567                     l9307:	
  9950                           
  9951                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
  9952  2567  30C0               	movlw	192
  9953  2568  0022               	movlb	2	; select bank2
  9954  2569  00AE               	movwf	___ftdiv@f2^(0+256)
  9955  256A  307F               	movlw	127
  9956  256B  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
  9957  256C  3044               	movlw	68
  9958  256D  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
  9959  256E  0023               	movlb	3	; select bank3
  9960  256F  0867               	movf	scaleA100kPot@input^(0+384),w
  9961  2570  0022               	movlb	2	; select bank2
  9962  2571  00B1               	movwf	___ftdiv@f1^(0+256)
  9963  2572  0023               	movlb	3	; select bank3
  9964  2573  0868               	movf	(scaleA100kPot@input+1)^(0+384),w
  9965  2574  0022               	movlb	2	; select bank2
  9966  2575  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
  9967  2576  0023               	movlb	3	; select bank3
  9968  2577  0869               	movf	(scaleA100kPot@input+2)^(0+384),w
  9969  2578  0022               	movlb	2	; select bank2
  9970  2579  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
  9971  257A  319A  22CE  31A5   	fcall	___ftdiv
  9972  257D  0022               	movlb	2	; select bank2
  9973  257E  082E               	movf	?___ftdiv^(0+256),w
  9974  257F  0024               	movlb	4	; select bank4
  9975  2580  00EA               	movwf	_scaleA100kPot$2793^(0+512)
  9976  2581  0022               	movlb	2	; select bank2
  9977  2582  082F               	movf	(?___ftdiv+1)^(0+256),w
  9978  2583  0024               	movlb	4	; select bank4
  9979  2584  00EB               	movwf	(_scaleA100kPot$2793+1)^(0+512)
  9980  2585  0022               	movlb	2	; select bank2
  9981  2586  0830               	movf	(?___ftdiv+2)^(0+256),w
  9982  2587  0024               	movlb	4	; select bank4
  9983  2588  00EC               	movwf	(_scaleA100kPot$2793+2)^(0+512)
  9984                           
  9985                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
  9986  2589  3056               	movlw	86
  9987  258A  0023               	movlb	3	; select bank3
  9988  258B  00D8               	movwf	pow@y^(0+384)
  9989  258C  308E               	movlw	142
  9990  258D  00D9               	movwf	(pow@y+1)^(0+384)
  9991  258E  30BF               	movlw	191
  9992  258F  00DA               	movwf	(pow@y+2)^(0+384)
  9993  2590  0024               	movlb	4	; select bank4
  9994  2591  086A               	movf	_scaleA100kPot$2793^(0+512),w
  9995  2592  0023               	movlb	3	; select bank3
  9996  2593  00D5               	movwf	pow@x^(0+384)
  9997  2594  0024               	movlb	4	; select bank4
  9998  2595  086B               	movf	(_scaleA100kPot$2793+1)^(0+512),w
  9999  2596  0023               	movlb	3	; select bank3
 10000  2597  00D6               	movwf	(pow@x+1)^(0+384)
 10001  2598  0024               	movlb	4	; select bank4
 10002  2599  086C               	movf	(_scaleA100kPot$2793+2)^(0+512),w
 10003  259A  0023               	movlb	3	; select bank3
 10004  259B  00D7               	movwf	(pow@x+2)^(0+384)
 10005  259C  3186  26B0  31A5   	fcall	_pow
 10006  259F  0023               	movlb	3	; select bank3
 10007  25A0  0855               	movf	?_pow^(0+384),w
 10008  25A1  0024               	movlb	4	; select bank4
 10009  25A2  00ED               	movwf	_scaleA100kPot$2794^(0+512)
 10010  25A3  0023               	movlb	3	; select bank3
 10011  25A4  0856               	movf	(?_pow+1)^(0+384),w
 10012  25A5  0024               	movlb	4	; select bank4
 10013  25A6  00EE               	movwf	(_scaleA100kPot$2794+1)^(0+512)
 10014  25A7  0023               	movlb	3	; select bank3
 10015  25A8  0857               	movf	(?_pow+2)^(0+384),w
 10016  25A9  0024               	movlb	4	; select bank4
 10017  25AA  00EF               	movwf	(_scaleA100kPot$2794+2)^(0+512)
 10018                           
 10019                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 10020  25AB  309F               	movlw	159
 10021  25AC  0022               	movlb	2	; select bank2
 10022  25AD  00CE               	movwf	___ftmul@f1^(0+256)
 10023  25AE  3068               	movlw	104
 10024  25AF  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 10025  25B0  3040               	movlw	64
 10026  25B1  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 10027  25B2  0024               	movlb	4	; select bank4
 10028  25B3  086D               	movf	_scaleA100kPot$2794^(0+512),w
 10029  25B4  0022               	movlb	2	; select bank2
 10030  25B5  00D1               	movwf	___ftmul@f2^(0+256)
 10031  25B6  0024               	movlb	4	; select bank4
 10032  25B7  086E               	movf	(_scaleA100kPot$2794+1)^(0+512),w
 10033  25B8  0022               	movlb	2	; select bank2
 10034  25B9  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 10035  25BA  0024               	movlb	4	; select bank4
 10036  25BB  086F               	movf	(_scaleA100kPot$2794+2)^(0+512),w
 10037  25BC  0022               	movlb	2	; select bank2
 10038  25BD  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 10039  25BE  319C  24D5  31A5   	fcall	___ftmul
 10040  25C1  0022               	movlb	2	; select bank2
 10041  25C2  084E               	movf	?___ftmul^(0+256),w
 10042  25C3  0024               	movlb	4	; select bank4
 10043  25C4  00E7               	movwf	scaleA100kPot@pwm^(0+512)
 10044  25C5  0022               	movlb	2	; select bank2
 10045  25C6  084F               	movf	(?___ftmul+1)^(0+256),w
 10046  25C7  0024               	movlb	4	; select bank4
 10047  25C8  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+512)
 10048  25C9  0022               	movlb	2	; select bank2
 10049  25CA  0850               	movf	(?___ftmul+2)^(0+256),w
 10050  25CB  0024               	movlb	4	; select bank4
 10051  25CC  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+512)
 10052                           
 10053                           ;user.c: 192: return (int)(pwm);
 10054  25CD  0867               	movf	scaleA100kPot@pwm^(0+512),w
 10055  25CE  0023               	movlb	3	; select bank3
 10056  25CF  00A0               	movwf	___fttol@f1^(0+384)
 10057  25D0  0024               	movlb	4	; select bank4
 10058  25D1  0868               	movf	(scaleA100kPot@pwm+1)^(0+512),w
 10059  25D2  0023               	movlb	3	; select bank3
 10060  25D3  00A1               	movwf	(___fttol@f1+1)^(0+384)
 10061  25D4  0024               	movlb	4	; select bank4
 10062  25D5  0869               	movf	(scaleA100kPot@pwm+2)^(0+512),w
 10063  25D6  0023               	movlb	3	; select bank3
 10064  25D7  00A2               	movwf	(___fttol@f1+2)^(0+384)
 10065  25D8  31A6  2667         	fcall	___fttol
 10066  25DA  0023               	movlb	3	; select bank3
 10067  25DB  0821               	movf	(?___fttol^(0+384)+1),w
 10068  25DC  00E8               	movwf	(?_scaleA100kPot+1)^(0+384)
 10069  25DD  0820               	movf	?___fttol^(0+384),w
 10070  25DE  00E7               	movwf	?_scaleA100kPot^(0+384)
 10071  25DF  0008               	return
 10072  25E0                     __end_of_scaleA100kPot:	
 10073                           
 10074                           	psect	text21
 10075  06B0                     __ptext21:	
 10076 ;; *************** function _pow *****************
 10077 ;; Defined at:
 10078 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;  x               3   53[BANK3 ] int 
 10081 ;;  y               3   56[BANK3 ] int 
 10082 ;; Auto vars:     Size  Location     Type
 10083 ;;  yi              4   67[BANK3 ] unsigned long 
 10084 ;;  sign            1   66[BANK3 ] unsigned char 
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  3   53[BANK3 ] unsigned char 
 10087 ;; Registers used:
 10088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10094 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10095 ;;      Locals:         0       0       0       0      11       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10096 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10097 ;;      Totals:         0       0       0       0      18       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10098 ;;Total ram usage:       18 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    9
 10101 ;; This function calls:
 10102 ;;		___ftge
 10103 ;;		___ftmul
 10104 ;;		___ftneg
 10105 ;;		___fttol
 10106 ;;		___lltoft
 10107 ;;		_exp
 10108 ;;		_log
 10109 ;; This function is called by:
 10110 ;;		_scaleA100kPot
 10111 ;;		_scaleA10kPot
 10112 ;;		_scaleiA10kPot
 10113 ;;		_scaleiA100kPot
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function _pow
 10119  06B0                     _pow:	
 10120                           
 10121                           ;incstack = 0
 10122                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10123  06B0  0023               	movlb	3	; select bank3
 10124  06B1  01E2               	clrf	pow@sign^(0+384)
 10125  06B2  0857               	movf	(pow@x+2)^(0+384),w
 10126  06B3  0456               	iorwf	(pow@x+1)^(0+384),w
 10127  06B4  0455               	iorwf	pow@x^(0+384),w
 10128  06B5  1D03               	skipz
 10129  06B6  2EDC               	goto	l8649
 10130  06B7  3000               	movlw	0
 10131  06B8  0022               	movlb	2	; select bank2
 10132  06B9  00A0               	movwf	___ftge@ff1^(0+256)
 10133  06BA  3000               	movlw	0
 10134  06BB  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 10135  06BC  3000               	movlw	0
 10136  06BD  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 10137  06BE  0023               	movlb	3	; select bank3
 10138  06BF  0858               	movf	pow@y^(0+384),w
 10139  06C0  0022               	movlb	2	; select bank2
 10140  06C1  00A3               	movwf	___ftge@ff2^(0+256)
 10141  06C2  0023               	movlb	3	; select bank3
 10142  06C3  0859               	movf	(pow@y+1)^(0+384),w
 10143  06C4  0022               	movlb	2	; select bank2
 10144  06C5  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 10145  06C6  0023               	movlb	3	; select bank3
 10146  06C7  085A               	movf	(pow@y+2)^(0+384),w
 10147  06C8  0022               	movlb	2	; select bank2
 10148  06C9  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 10149  06CA  31AE  2685  3186   	fcall	___ftge
 10150  06CD  1C03               	btfss	3,0
 10151  06CE  2ED4               	goto	l2286
 10152  06CF  3021               	movlw	33
 10153  06D0  0025               	movlb	5	; select bank5
 10154  06D1  00CF               	movwf	_errno^(0+640)
 10155  06D2  3000               	movlw	0
 10156  06D3  00D0               	movwf	(_errno^(0+640)+1)
 10157  06D4                     l2286:	
 10158  06D4  3000               	movlw	0
 10159  06D5  0023               	movlb	3	; select bank3
 10160  06D6  00D5               	movwf	?_pow^(0+384)
 10161  06D7  3000               	movlw	0
 10162  06D8  00D6               	movwf	(?_pow+1)^(0+384)
 10163  06D9  3000               	movlw	0
 10164  06DA  00D7               	movwf	(?_pow+2)^(0+384)
 10165  06DB  0008               	return
 10166  06DC                     l8649:	
 10167  06DC  085A               	movf	(pow@y+2)^(0+384),w
 10168  06DD  0459               	iorwf	(pow@y+1)^(0+384),w
 10169  06DE  0458               	iorwf	pow@y^(0+384),w
 10170  06DF  1D03               	skipz
 10171  06E0  2EE8               	goto	l8655
 10172  06E1  3000               	movlw	0
 10173  06E2  00D5               	movwf	?_pow^(0+384)
 10174  06E3  3080               	movlw	128
 10175  06E4  00D6               	movwf	(?_pow+1)^(0+384)
 10176  06E5  303F               	movlw	63
 10177  06E6  00D7               	movwf	(?_pow+2)^(0+384)
 10178  06E7  0008               	return
 10179  06E8                     l8655:	
 10180  06E8  0855               	movf	pow@x^(0+384),w
 10181  06E9  0022               	movlb	2	; select bank2
 10182  06EA  00A0               	movwf	___ftge@ff1^(0+256)
 10183  06EB  0023               	movlb	3	; select bank3
 10184  06EC  0856               	movf	(pow@x+1)^(0+384),w
 10185  06ED  0022               	movlb	2	; select bank2
 10186  06EE  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 10187  06EF  0023               	movlb	3	; select bank3
 10188  06F0  0857               	movf	(pow@x+2)^(0+384),w
 10189  06F1  0022               	movlb	2	; select bank2
 10190  06F2  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 10191  06F3  3000               	movlw	0
 10192  06F4  00A3               	movwf	___ftge@ff2^(0+256)
 10193  06F5  3000               	movlw	0
 10194  06F6  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 10195  06F7  3000               	movlw	0
 10196  06F8  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 10197  06F9  31AE  2685  3186   	fcall	___ftge
 10198  06FC  1803               	btfsc	3,0
 10199  06FD  2F62               	goto	l8667
 10200  06FE  0023               	movlb	3	; select bank3
 10201  06FF  0858               	movf	pow@y^(0+384),w
 10202  0700  00A0               	movwf	___fttol@f1^(0+384)
 10203  0701  0859               	movf	(pow@y+1)^(0+384),w
 10204  0702  00A1               	movwf	(___fttol@f1+1)^(0+384)
 10205  0703  085A               	movf	(pow@y+2)^(0+384),w
 10206  0704  00A2               	movwf	(___fttol@f1+2)^(0+384)
 10207  0705  31A6  2667  3186   	fcall	___fttol
 10208  0708  0023               	movlb	3	; select bank3
 10209  0709  0823               	movf	(?___fttol+3)^(0+384),w
 10210  070A  00E6               	movwf	(pow@yi+3)^(0+384)
 10211  070B  0822               	movf	(?___fttol+2)^(0+384),w
 10212  070C  00E5               	movwf	(pow@yi+2)^(0+384)
 10213  070D  0821               	movf	(?___fttol+1)^(0+384),w
 10214  070E  00E4               	movwf	(pow@yi+1)^(0+384)
 10215  070F  0820               	movf	?___fttol^(0+384),w
 10216  0710  00E3               	movwf	pow@yi^(0+384)
 10217  0711  0866               	movf	(pow@yi+3)^(0+384),w
 10218  0712  0022               	movlb	2	; select bank2
 10219  0713  00AB               	movwf	(___lltoft@c+3)^(0+256)
 10220  0714  0023               	movlb	3	; select bank3
 10221  0715  0865               	movf	(pow@yi+2)^(0+384),w
 10222  0716  0022               	movlb	2	; select bank2
 10223  0717  00AA               	movwf	(___lltoft@c+2)^(0+256)
 10224  0718  0023               	movlb	3	; select bank3
 10225  0719  0864               	movf	(pow@yi+1)^(0+384),w
 10226  071A  0022               	movlb	2	; select bank2
 10227  071B  00A9               	movwf	(___lltoft@c+1)^(0+256)
 10228  071C  0023               	movlb	3	; select bank3
 10229  071D  0863               	movf	pow@yi^(0+384),w
 10230  071E  0022               	movlb	2	; select bank2
 10231  071F  00A8               	movwf	___lltoft@c^(0+256)
 10232  0720  31AC  24C5  3186   	fcall	___lltoft
 10233  0723  0023               	movlb	3	; select bank3
 10234  0724  085A               	movf	(pow@y+2)^(0+384),w
 10235  0725  0022               	movlb	2	; select bank2
 10236  0726  062A               	xorwf	(?___lltoft+2)^(0+256),w
 10237  0727  1D03               	skipz
 10238  0728  2F33               	goto	u9825
 10239  0729  0023               	movlb	3	; select bank3
 10240  072A  0859               	movf	(pow@y+1)^(0+384),w
 10241  072B  0022               	movlb	2	; select bank2
 10242  072C  0629               	xorwf	(?___lltoft+1)^(0+256),w
 10243  072D  1D03               	skipz
 10244  072E  2F33               	goto	u9825
 10245  072F  0023               	movlb	3	; select bank3
 10246  0730  0858               	movf	pow@y^(0+384),w
 10247  0731  0022               	movlb	2	; select bank2
 10248  0732  0628               	xorwf	?___lltoft^(0+256),w
 10249  0733                     u9825:	
 10250  0733  1903               	skipnz
 10251  0734  2F42               	goto	l8663
 10252  0735  3021               	movlw	33
 10253  0736  0025               	movlb	5	; select bank5
 10254  0737  00CF               	movwf	_errno^(0+640)
 10255  0738  3000               	movlw	0
 10256  0739  00D0               	movwf	(_errno^(0+640)+1)
 10257  073A  3000               	movlw	0
 10258  073B  0023               	movlb	3	; select bank3
 10259  073C  00D5               	movwf	?_pow^(0+384)
 10260  073D  3000               	movlw	0
 10261  073E  00D6               	movwf	(?_pow+1)^(0+384)
 10262  073F  3000               	movlw	0
 10263  0740  00D7               	movwf	(?_pow+2)^(0+384)
 10264  0741  0008               	return
 10265  0742                     l8663:	
 10266  0742  0023               	movlb	3	; select bank3
 10267  0743  0863               	movf	pow@yi^(0+384),w
 10268  0744  3901               	andlw	1
 10269  0745  00DB               	movwf	??_pow^(0+384)
 10270  0746  085B               	movf	??_pow^(0+384),w
 10271  0747  00E2               	movwf	pow@sign^(0+384)
 10272  0748  0855               	movf	pow@x^(0+384),w
 10273  0749  0022               	movlb	2	; select bank2
 10274  074A  00BE               	movwf	___ftneg@f1^(0+256)
 10275  074B  0023               	movlb	3	; select bank3
 10276  074C  0856               	movf	(pow@x+1)^(0+384),w
 10277  074D  0022               	movlb	2	; select bank2
 10278  074E  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 10279  074F  0023               	movlb	3	; select bank3
 10280  0750  0857               	movf	(pow@x+2)^(0+384),w
 10281  0751  0022               	movlb	2	; select bank2
 10282  0752  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 10283  0753  31AA  22E9  3186   	fcall	___ftneg
 10284  0756  0022               	movlb	2	; select bank2
 10285  0757  083E               	movf	?___ftneg^(0+256),w
 10286  0758  0023               	movlb	3	; select bank3
 10287  0759  00D5               	movwf	pow@x^(0+384)
 10288  075A  0022               	movlb	2	; select bank2
 10289  075B  083F               	movf	(?___ftneg+1)^(0+256),w
 10290  075C  0023               	movlb	3	; select bank3
 10291  075D  00D6               	movwf	(pow@x+1)^(0+384)
 10292  075E  0022               	movlb	2	; select bank2
 10293  075F  0840               	movf	(?___ftneg+2)^(0+256),w
 10294  0760  0023               	movlb	3	; select bank3
 10295  0761  00D7               	movwf	(pow@x+2)^(0+384)
 10296  0762                     l8667:	
 10297  0762  0023               	movlb	3	; select bank3
 10298  0763  0855               	movf	pow@x^(0+384),w
 10299  0764  00BE               	movwf	log@x^(0+384)
 10300  0765  0856               	movf	(pow@x+1)^(0+384),w
 10301  0766  00BF               	movwf	(log@x+1)^(0+384)
 10302  0767  0857               	movf	(pow@x+2)^(0+384),w
 10303  0768  00C0               	movwf	(log@x+2)^(0+384)
 10304  0769  319E  2644  3186   	fcall	_log
 10305  076C  0023               	movlb	3	; select bank3
 10306  076D  083E               	movf	?_log^(0+384),w
 10307  076E  00DC               	movwf	_pow$2806^(0+384)
 10308  076F  083F               	movf	(?_log+1)^(0+384),w
 10309  0770  00DD               	movwf	(_pow$2806+1)^(0+384)
 10310  0771  0840               	movf	(?_log+2)^(0+384),w
 10311  0772  00DE               	movwf	(_pow$2806+2)^(0+384)
 10312  0773  0858               	movf	pow@y^(0+384),w
 10313  0774  0022               	movlb	2	; select bank2
 10314  0775  00CE               	movwf	___ftmul@f1^(0+256)
 10315  0776  0023               	movlb	3	; select bank3
 10316  0777  0859               	movf	(pow@y+1)^(0+384),w
 10317  0778  0022               	movlb	2	; select bank2
 10318  0779  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 10319  077A  0023               	movlb	3	; select bank3
 10320  077B  085A               	movf	(pow@y+2)^(0+384),w
 10321  077C  0022               	movlb	2	; select bank2
 10322  077D  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 10323  077E  0023               	movlb	3	; select bank3
 10324  077F  085C               	movf	_pow$2806^(0+384),w
 10325  0780  0022               	movlb	2	; select bank2
 10326  0781  00D1               	movwf	___ftmul@f2^(0+256)
 10327  0782  0023               	movlb	3	; select bank3
 10328  0783  085D               	movf	(_pow$2806+1)^(0+384),w
 10329  0784  0022               	movlb	2	; select bank2
 10330  0785  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 10331  0786  0023               	movlb	3	; select bank3
 10332  0787  085E               	movf	(_pow$2806+2)^(0+384),w
 10333  0788  0022               	movlb	2	; select bank2
 10334  0789  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 10335  078A  319C  24D5  3186   	fcall	___ftmul
 10336  078D  0022               	movlb	2	; select bank2
 10337  078E  084E               	movf	?___ftmul^(0+256),w
 10338  078F  0023               	movlb	3	; select bank3
 10339  0790  00DF               	movwf	_pow$2807^(0+384)
 10340  0791  0022               	movlb	2	; select bank2
 10341  0792  084F               	movf	(?___ftmul+1)^(0+256),w
 10342  0793  0023               	movlb	3	; select bank3
 10343  0794  00E0               	movwf	(_pow$2807+1)^(0+384)
 10344  0795  0022               	movlb	2	; select bank2
 10345  0796  0850               	movf	(?___ftmul+2)^(0+256),w
 10346  0797  0023               	movlb	3	; select bank3
 10347  0798  00E1               	movwf	(_pow$2807+2)^(0+384)
 10348  0799  085F               	movf	_pow$2807^(0+384),w
 10349  079A  00C8               	movwf	exp@x^(0+384)
 10350  079B  0860               	movf	(_pow$2807+1)^(0+384),w
 10351  079C  00C9               	movwf	(exp@x+1)^(0+384)
 10352  079D  0861               	movf	(_pow$2807+2)^(0+384),w
 10353  079E  00CA               	movwf	(exp@x+2)^(0+384)
 10354  079F  3192  220C  3186   	fcall	_exp
 10355  07A2  0023               	movlb	3	; select bank3
 10356  07A3  0848               	movf	?_exp^(0+384),w
 10357  07A4  00D5               	movwf	pow@x^(0+384)
 10358  07A5  0849               	movf	(?_exp+1)^(0+384),w
 10359  07A6  00D6               	movwf	(pow@x+1)^(0+384)
 10360  07A7  084A               	movf	(?_exp+2)^(0+384),w
 10361  07A8  00D7               	movwf	(pow@x+2)^(0+384)
 10362  07A9  0862               	movf	pow@sign^(0+384),w
 10363  07AA  1903               	btfsc	3,2
 10364  07AB  0008               	return
 10365  07AC  0855               	movf	pow@x^(0+384),w
 10366  07AD  0022               	movlb	2	; select bank2
 10367  07AE  00BE               	movwf	___ftneg@f1^(0+256)
 10368  07AF  0023               	movlb	3	; select bank3
 10369  07B0  0856               	movf	(pow@x+1)^(0+384),w
 10370  07B1  0022               	movlb	2	; select bank2
 10371  07B2  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 10372  07B3  0023               	movlb	3	; select bank3
 10373  07B4  0857               	movf	(pow@x+2)^(0+384),w
 10374  07B5  0022               	movlb	2	; select bank2
 10375  07B6  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 10376  07B7  31AA  22E9         	fcall	___ftneg
 10377  07B9  0022               	movlb	2	; select bank2
 10378  07BA  083E               	movf	?___ftneg^(0+256),w
 10379  07BB  0023               	movlb	3	; select bank3
 10380  07BC  00D5               	movwf	?_pow^(0+384)
 10381  07BD  0022               	movlb	2	; select bank2
 10382  07BE  083F               	movf	(?___ftneg+1)^(0+256),w
 10383  07BF  0023               	movlb	3	; select bank3
 10384  07C0  00D6               	movwf	(?_pow+1)^(0+384)
 10385  07C1  0022               	movlb	2	; select bank2
 10386  07C2  0840               	movf	(?___ftneg+2)^(0+256),w
 10387  07C3  0023               	movlb	3	; select bank3
 10388  07C4  00D7               	movwf	(?_pow+2)^(0+384)
 10389  07C5  0008               	return
 10390  07C6                     __end_of_pow:	
 10391                           
 10392                           	psect	text22
 10393  1E44                     __ptext22:	
 10394 ;; *************** function _log *****************
 10395 ;; Defined at:
 10396 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;  x               3   30[BANK3 ] unsigned char 
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;  exponent        2   34[BANK3 ] int 
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  3   30[BANK3 ] int 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10410 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10411 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10412 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10413 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10414 ;;Total ram usage:        6 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    8
 10417 ;; This function calls:
 10418 ;;		___awtoft
 10419 ;;		___ftadd
 10420 ;;		___ftge
 10421 ;;		___ftmul
 10422 ;;		_eval_poly
 10423 ;;		_frexp
 10424 ;; This function is called by:
 10425 ;;		_pow
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           
 10430                           ;psect for function _log
 10431  1E44                     _log:	
 10432                           
 10433                           ;incstack = 0
 10434                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10435  1E44  0023               	movlb	3	; select bank3
 10436  1E45  083E               	movf	log@x^(0+384),w
 10437  1E46  0022               	movlb	2	; select bank2
 10438  1E47  00A0               	movwf	___ftge@ff1^(0+256)
 10439  1E48  0023               	movlb	3	; select bank3
 10440  1E49  083F               	movf	(log@x+1)^(0+384),w
 10441  1E4A  0022               	movlb	2	; select bank2
 10442  1E4B  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 10443  1E4C  0023               	movlb	3	; select bank3
 10444  1E4D  0840               	movf	(log@x+2)^(0+384),w
 10445  1E4E  0022               	movlb	2	; select bank2
 10446  1E4F  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 10447  1E50  3000               	movlw	0
 10448  1E51  00A3               	movwf	___ftge@ff2^(0+256)
 10449  1E52  3000               	movlw	0
 10450  1E53  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 10451  1E54  3000               	movlw	0
 10452  1E55  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 10453  1E56  31AE  2685  319E   	fcall	___ftge
 10454  1E59  1803               	btfsc	3,0
 10455  1E5A  2E68               	goto	l8523
 10456  1E5B  3021               	movlw	33
 10457  1E5C  0025               	movlb	5	; select bank5
 10458  1E5D  00CF               	movwf	_errno^(0+640)
 10459  1E5E  3000               	movlw	0
 10460  1E5F  00D0               	movwf	(_errno^(0+640)+1)
 10461  1E60  3000               	movlw	0
 10462  1E61  0023               	movlb	3	; select bank3
 10463  1E62  00BE               	movwf	?_log^(0+384)
 10464  1E63  3000               	movlw	0
 10465  1E64  00BF               	movwf	(?_log+1)^(0+384)
 10466  1E65  3000               	movlw	0
 10467  1E66  00C0               	movwf	(?_log+2)^(0+384)
 10468  1E67  0008               	return
 10469  1E68                     l8523:	
 10470  1E68  0023               	movlb	3	; select bank3
 10471  1E69  0840               	movf	(log@x+2)^(0+384),w
 10472  1E6A  043F               	iorwf	(log@x+1)^(0+384),w
 10473  1E6B  043E               	iorwf	log@x^(0+384),w
 10474  1E6C  1D03               	skipz
 10475  1E6D  2E7B               	goto	l8529
 10476  1E6E  3022               	movlw	34
 10477  1E6F  0025               	movlb	5	; select bank5
 10478  1E70  00CF               	movwf	_errno^(0+640)
 10479  1E71  3000               	movlw	0
 10480  1E72  00D0               	movwf	(_errno^(0+640)+1)
 10481  1E73  3000               	movlw	0
 10482  1E74  0023               	movlb	3	; select bank3
 10483  1E75  00BE               	movwf	?_log^(0+384)
 10484  1E76  3000               	movlw	0
 10485  1E77  00BF               	movwf	(?_log+1)^(0+384)
 10486  1E78  3000               	movlw	0
 10487  1E79  00C0               	movwf	(?_log+2)^(0+384)
 10488  1E7A  0008               	return
 10489  1E7B                     l8529:	
 10490  1E7B  3000               	movlw	0
 10491  1E7C  0022               	movlb	2	; select bank2
 10492  1E7D  00C1               	movwf	___ftadd@f1^(0+256)
 10493  1E7E  3080               	movlw	128
 10494  1E7F  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 10495  1E80  30BF               	movlw	191
 10496  1E81  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 10497  1E82  3000               	movlw	0
 10498  1E83  00CE               	movwf	___ftmul@f1^(0+256)
 10499  1E84  3000               	movlw	0
 10500  1E85  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 10501  1E86  3040               	movlw	64
 10502  1E87  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 10503  1E88  30C2               	movlw	(low (log@exponent| (0+256)))& (0+255)
 10504  1E89  0023               	movlb	3	; select bank3
 10505  1E8A  00C1               	movwf	??_log^(0+384)
 10506  1E8B  0841               	movf	??_log^(0+384),w
 10507  1E8C  0022               	movlb	2	; select bank2
 10508  1E8D  00A3               	movwf	frexp@eptr^(0+256)
 10509  1E8E  0023               	movlb	3	; select bank3
 10510  1E8F  083E               	movf	log@x^(0+384),w
 10511  1E90  0022               	movlb	2	; select bank2
 10512  1E91  00A0               	movwf	frexp@value^(0+256)
 10513  1E92  0023               	movlb	3	; select bank3
 10514  1E93  083F               	movf	(log@x+1)^(0+384),w
 10515  1E94  0022               	movlb	2	; select bank2
 10516  1E95  00A1               	movwf	(frexp@value+1)^(0+256)
 10517  1E96  0023               	movlb	3	; select bank3
 10518  1E97  0840               	movf	(log@x+2)^(0+384),w
 10519  1E98  0022               	movlb	2	; select bank2
 10520  1E99  00A2               	movwf	(frexp@value+2)^(0+256)
 10521  1E9A  31AE  26FE  319E   	fcall	_frexp
 10522  1E9D  0022               	movlb	2	; select bank2
 10523  1E9E  0820               	movf	?_frexp^(0+256),w
 10524  1E9F  00D1               	movwf	___ftmul@f2^(0+256)
 10525  1EA0  0821               	movf	(?_frexp+1)^(0+256),w
 10526  1EA1  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 10527  1EA2  0822               	movf	(?_frexp+2)^(0+256),w
 10528  1EA3  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 10529  1EA4  319C  24D5  319E   	fcall	___ftmul
 10530  1EA7  0022               	movlb	2	; select bank2
 10531  1EA8  084E               	movf	?___ftmul^(0+256),w
 10532  1EA9  00C4               	movwf	___ftadd@f2^(0+256)
 10533  1EAA  084F               	movf	(?___ftmul+1)^(0+256),w
 10534  1EAB  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 10535  1EAC  0850               	movf	(?___ftmul+2)^(0+256),w
 10536  1EAD  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 10537  1EAE  3191  2116  319E   	fcall	___ftadd
 10538  1EB1  0022               	movlb	2	; select bank2
 10539  1EB2  0841               	movf	?___ftadd^(0+256),w
 10540  1EB3  0023               	movlb	3	; select bank3
 10541  1EB4  00BE               	movwf	log@x^(0+384)
 10542  1EB5  0022               	movlb	2	; select bank2
 10543  1EB6  0842               	movf	(?___ftadd+1)^(0+256),w
 10544  1EB7  0023               	movlb	3	; select bank3
 10545  1EB8  00BF               	movwf	(log@x+1)^(0+384)
 10546  1EB9  0022               	movlb	2	; select bank2
 10547  1EBA  0843               	movf	(?___ftadd+2)^(0+256),w
 10548  1EBB  0023               	movlb	3	; select bank3
 10549  1EBC  00C0               	movwf	(log@x+2)^(0+384)
 10550  1EBD  30FF               	movlw	255
 10551  1EBE  07C2               	addwf	log@exponent^(0+384),f
 10552  1EBF  30FF               	movlw	255
 10553  1EC0  3DC3               	addwfc	(log@exponent+1)^(0+384),f
 10554  1EC1  083E               	movf	log@x^(0+384),w
 10555  1EC2  00B4               	movwf	eval_poly@x^(0+384)
 10556  1EC3  083F               	movf	(log@x+1)^(0+384),w
 10557  1EC4  00B5               	movwf	(eval_poly@x+1)^(0+384)
 10558  1EC5  0840               	movf	(log@x+2)^(0+384),w
 10559  1EC6  00B6               	movwf	(eval_poly@x+2)^(0+384)
 10560  1EC7  301E               	movlw	low (log@coeff| (0+32768))
 10561  1EC8  00B7               	movwf	eval_poly@d^(0+384)
 10562  1EC9  30A8               	movlw	high (log@coeff| (0+32768))
 10563  1ECA  00B8               	movwf	(eval_poly@d^(0+384)+1)
 10564  1ECB  3008               	movlw	8
 10565  1ECC  00B9               	movwf	eval_poly@n^(0+384)
 10566  1ECD  3000               	movlw	0
 10567  1ECE  00BA               	movwf	(eval_poly@n^(0+384)+1)
 10568  1ECF  31A3  23E5  319E   	fcall	_eval_poly
 10569  1ED2  0023               	movlb	3	; select bank3
 10570  1ED3  0834               	movf	?_eval_poly^(0+384),w
 10571  1ED4  00BE               	movwf	log@x^(0+384)
 10572  1ED5  0835               	movf	(?_eval_poly+1)^(0+384),w
 10573  1ED6  00BF               	movwf	(log@x+1)^(0+384)
 10574  1ED7  0836               	movf	(?_eval_poly+2)^(0+384),w
 10575  1ED8  00C0               	movwf	(log@x+2)^(0+384)
 10576  1ED9  083E               	movf	log@x^(0+384),w
 10577  1EDA  0022               	movlb	2	; select bank2
 10578  1EDB  00C1               	movwf	___ftadd@f1^(0+256)
 10579  1EDC  0023               	movlb	3	; select bank3
 10580  1EDD  083F               	movf	(log@x+1)^(0+384),w
 10581  1EDE  0022               	movlb	2	; select bank2
 10582  1EDF  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 10583  1EE0  0023               	movlb	3	; select bank3
 10584  1EE1  0840               	movf	(log@x+2)^(0+384),w
 10585  1EE2  0022               	movlb	2	; select bank2
 10586  1EE3  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 10587  1EE4  3072               	movlw	114
 10588  1EE5  00CE               	movwf	___ftmul@f1^(0+256)
 10589  1EE6  3031               	movlw	49
 10590  1EE7  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 10591  1EE8  303F               	movlw	63
 10592  1EE9  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 10593  1EEA  0023               	movlb	3	; select bank3
 10594  1EEB  0843               	movf	(log@exponent+1)^(0+384),w
 10595  1EEC  0022               	movlb	2	; select bank2
 10596  1EED  00A9               	movwf	(___awtoft@c+1)^(0+256)
 10597  1EEE  0023               	movlb	3	; select bank3
 10598  1EEF  0842               	movf	log@exponent^(0+384),w
 10599  1EF0  0022               	movlb	2	; select bank2
 10600  1EF1  00A8               	movwf	___awtoft@c^(0+256)
 10601  1EF2  31A0  2000  319E   	fcall	___awtoft
 10602  1EF5  0022               	movlb	2	; select bank2
 10603  1EF6  0828               	movf	?___awtoft^(0+256),w
 10604  1EF7  00D1               	movwf	___ftmul@f2^(0+256)
 10605  1EF8  0829               	movf	(?___awtoft+1)^(0+256),w
 10606  1EF9  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 10607  1EFA  082A               	movf	(?___awtoft+2)^(0+256),w
 10608  1EFB  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 10609  1EFC  319C  24D5  319E   	fcall	___ftmul
 10610  1EFF  0022               	movlb	2	; select bank2
 10611  1F00  084E               	movf	?___ftmul^(0+256),w
 10612  1F01  00C4               	movwf	___ftadd@f2^(0+256)
 10613  1F02  084F               	movf	(?___ftmul+1)^(0+256),w
 10614  1F03  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 10615  1F04  0850               	movf	(?___ftmul+2)^(0+256),w
 10616  1F05  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 10617  1F06  3191  2116         	fcall	___ftadd
 10618  1F08  0022               	movlb	2	; select bank2
 10619  1F09  0841               	movf	?___ftadd^(0+256),w
 10620  1F0A  0023               	movlb	3	; select bank3
 10621  1F0B  00BE               	movwf	?_log^(0+384)
 10622  1F0C  0022               	movlb	2	; select bank2
 10623  1F0D  0842               	movf	(?___ftadd+1)^(0+256),w
 10624  1F0E  0023               	movlb	3	; select bank3
 10625  1F0F  00BF               	movwf	(?_log+1)^(0+384)
 10626  1F10  0022               	movlb	2	; select bank2
 10627  1F11  0843               	movf	(?___ftadd+2)^(0+256),w
 10628  1F12  0023               	movlb	3	; select bank3
 10629  1F13  00C0               	movwf	(?_log+2)^(0+384)
 10630  1F14  0008               	return
 10631  1F15                     __end_of_log:	
 10632                           
 10633                           	psect	text23
 10634  120C                     __ptext23:	
 10635 ;; *************** function _exp *****************
 10636 ;; Defined at:
 10637 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  x               3   40[BANK3 ] int 
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  exponent        2   50[BANK3 ] int 
 10642 ;;  sign            1   52[BANK3 ] unsigned char 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  3   40[BANK3 ] unsigned char 
 10645 ;; Registers used:
 10646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10652 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10653 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10654 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10655 ;;      Totals:         0       0       0       0      13       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10656 ;;Total ram usage:       13 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    8
 10659 ;; This function calls:
 10660 ;;		___awtoft
 10661 ;;		___ftdiv
 10662 ;;		___ftge
 10663 ;;		___ftmul
 10664 ;;		___ftneg
 10665 ;;		___ftsub
 10666 ;;		___fttol
 10667 ;;		_eval_poly
 10668 ;;		_floor
 10669 ;;		_ldexp
 10670 ;; This function is called by:
 10671 ;;		_pow
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           
 10676                           ;psect for function _exp
 10677  120C                     _exp:	
 10678                           
 10679                           ;incstack = 0
 10680                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10681  120C  0023               	movlb	3	; select bank3
 10682  120D  084A               	movf	(exp@x+2)^(0+384),w
 10683  120E  0449               	iorwf	(exp@x+1)^(0+384),w
 10684  120F  0448               	iorwf	exp@x^(0+384),w
 10685  1210  1D03               	skipz
 10686  1211  2A19               	goto	l8545
 10687  1212  3000               	movlw	0
 10688  1213  00C8               	movwf	?_exp^(0+384)
 10689  1214  3080               	movlw	128
 10690  1215  00C9               	movwf	(?_exp+1)^(0+384)
 10691  1216  303F               	movlw	63
 10692  1217  00CA               	movwf	(?_exp+2)^(0+384)
 10693  1218  0008               	return
 10694  1219                     l8545:	
 10695  1219  3072               	movlw	114
 10696  121A  0022               	movlb	2	; select bank2
 10697  121B  00A0               	movwf	___ftge@ff1^(0+256)
 10698  121C  3031               	movlw	49
 10699  121D  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 10700  121E  3044               	movlw	68
 10701  121F  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 10702  1220  0023               	movlb	3	; select bank3
 10703  1221  0848               	movf	exp@x^(0+384),w
 10704  1222  0022               	movlb	2	; select bank2
 10705  1223  00A3               	movwf	___ftge@ff2^(0+256)
 10706  1224  0023               	movlb	3	; select bank3
 10707  1225  0849               	movf	(exp@x+1)^(0+384),w
 10708  1226  0022               	movlb	2	; select bank2
 10709  1227  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 10710  1228  0023               	movlb	3	; select bank3
 10711  1229  084A               	movf	(exp@x+2)^(0+384),w
 10712  122A  0022               	movlb	2	; select bank2
 10713  122B  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 10714  122C  31AE  2685  3192   	fcall	___ftge
 10715  122F  1803               	btfsc	3,0
 10716  1230  2A3E               	goto	l8555
 10717  1231  3022               	movlw	34
 10718  1232  0025               	movlb	5	; select bank5
 10719  1233  00CF               	movwf	_errno^(0+640)
 10720  1234  3000               	movlw	0
 10721  1235  00D0               	movwf	(_errno^(0+640)+1)
 10722  1236  30FF               	movlw	255
 10723  1237  0023               	movlb	3	; select bank3
 10724  1238  00C8               	movwf	?_exp^(0+384)
 10725  1239  307F               	movlw	127
 10726  123A  00C9               	movwf	(?_exp+1)^(0+384)
 10727  123B  307F               	movlw	127
 10728  123C  00CA               	movwf	(?_exp+2)^(0+384)
 10729  123D  0008               	return
 10730  123E                     l8555:	
 10731  123E  0023               	movlb	3	; select bank3
 10732  123F  0848               	movf	exp@x^(0+384),w
 10733  1240  0022               	movlb	2	; select bank2
 10734  1241  00A0               	movwf	___ftge@ff1^(0+256)
 10735  1242  0023               	movlb	3	; select bank3
 10736  1243  0849               	movf	(exp@x+1)^(0+384),w
 10737  1244  0022               	movlb	2	; select bank2
 10738  1245  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 10739  1246  0023               	movlb	3	; select bank3
 10740  1247  084A               	movf	(exp@x+2)^(0+384),w
 10741  1248  0022               	movlb	2	; select bank2
 10742  1249  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 10743  124A  3049               	movlw	73
 10744  124B  00A3               	movwf	___ftge@ff2^(0+256)
 10745  124C  303A               	movlw	58
 10746  124D  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 10747  124E  30C4               	movlw	196
 10748  124F  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 10749  1250  31AE  2685  3192   	fcall	___ftge
 10750  1253  1803               	btfsc	3,0
 10751  1254  2A62               	goto	l8561
 10752  1255  3022               	movlw	34
 10753  1256  0025               	movlb	5	; select bank5
 10754  1257  00CF               	movwf	_errno^(0+640)
 10755  1258  3000               	movlw	0
 10756  1259  00D0               	movwf	(_errno^(0+640)+1)
 10757  125A  3000               	movlw	0
 10758  125B  0023               	movlb	3	; select bank3
 10759  125C  00C8               	movwf	?_exp^(0+384)
 10760  125D  3000               	movlw	0
 10761  125E  00C9               	movwf	(?_exp+1)^(0+384)
 10762  125F  3000               	movlw	0
 10763  1260  00CA               	movwf	(?_exp+2)^(0+384)
 10764  1261  0008               	return
 10765  1262                     l8561:	
 10766  1262  0023               	movlb	3	; select bank3
 10767  1263  0848               	movf	exp@x^(0+384),w
 10768  1264  0022               	movlb	2	; select bank2
 10769  1265  00A0               	movwf	___ftge@ff1^(0+256)
 10770  1266  0023               	movlb	3	; select bank3
 10771  1267  0849               	movf	(exp@x+1)^(0+384),w
 10772  1268  0022               	movlb	2	; select bank2
 10773  1269  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 10774  126A  0023               	movlb	3	; select bank3
 10775  126B  084A               	movf	(exp@x+2)^(0+384),w
 10776  126C  0022               	movlb	2	; select bank2
 10777  126D  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 10778  126E  3000               	movlw	0
 10779  126F  00A3               	movwf	___ftge@ff2^(0+256)
 10780  1270  3000               	movlw	0
 10781  1271  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 10782  1272  3000               	movlw	0
 10783  1273  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 10784  1274  31AE  2685  3192   	fcall	___ftge
 10785  1277  1803               	btfsc	3,0
 10786  1278  2A7B               	goto	u9710
 10787  1279  3001               	movlw	1
 10788  127A  2A7C               	goto	u9720
 10789  127B                     u9710:	
 10790  127B  3000               	movlw	0
 10791  127C                     u9720:	
 10792  127C  0023               	movlb	3	; select bank3
 10793  127D  00CB               	movwf	??_exp^(0+384)
 10794  127E  084B               	movf	??_exp^(0+384),w
 10795  127F  00D4               	movwf	exp@sign^(0+384)
 10796  1280  0854               	movf	exp@sign^(0+384),w
 10797  1281  1903               	btfsc	3,2
 10798  1282  2A9D               	goto	l8567
 10799  1283  0848               	movf	exp@x^(0+384),w
 10800  1284  0022               	movlb	2	; select bank2
 10801  1285  00BE               	movwf	___ftneg@f1^(0+256)
 10802  1286  0023               	movlb	3	; select bank3
 10803  1287  0849               	movf	(exp@x+1)^(0+384),w
 10804  1288  0022               	movlb	2	; select bank2
 10805  1289  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 10806  128A  0023               	movlb	3	; select bank3
 10807  128B  084A               	movf	(exp@x+2)^(0+384),w
 10808  128C  0022               	movlb	2	; select bank2
 10809  128D  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 10810  128E  31AA  22E9  3192   	fcall	___ftneg
 10811  1291  0022               	movlb	2	; select bank2
 10812  1292  083E               	movf	?___ftneg^(0+256),w
 10813  1293  0023               	movlb	3	; select bank3
 10814  1294  00C8               	movwf	exp@x^(0+384)
 10815  1295  0022               	movlb	2	; select bank2
 10816  1296  083F               	movf	(?___ftneg+1)^(0+256),w
 10817  1297  0023               	movlb	3	; select bank3
 10818  1298  00C9               	movwf	(exp@x+1)^(0+384)
 10819  1299  0022               	movlb	2	; select bank2
 10820  129A  0840               	movf	(?___ftneg+2)^(0+256),w
 10821  129B  0023               	movlb	3	; select bank3
 10822  129C  00CA               	movwf	(exp@x+2)^(0+384)
 10823  129D                     l8567:	
 10824  129D  30AA               	movlw	170
 10825  129E  0022               	movlb	2	; select bank2
 10826  129F  00CE               	movwf	___ftmul@f1^(0+256)
 10827  12A0  30B8               	movlw	184
 10828  12A1  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 10829  12A2  303F               	movlw	63
 10830  12A3  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 10831  12A4  0023               	movlb	3	; select bank3
 10832  12A5  0848               	movf	exp@x^(0+384),w
 10833  12A6  0022               	movlb	2	; select bank2
 10834  12A7  00D1               	movwf	___ftmul@f2^(0+256)
 10835  12A8  0023               	movlb	3	; select bank3
 10836  12A9  0849               	movf	(exp@x+1)^(0+384),w
 10837  12AA  0022               	movlb	2	; select bank2
 10838  12AB  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 10839  12AC  0023               	movlb	3	; select bank3
 10840  12AD  084A               	movf	(exp@x+2)^(0+384),w
 10841  12AE  0022               	movlb	2	; select bank2
 10842  12AF  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 10843  12B0  319C  24D5  3192   	fcall	___ftmul
 10844  12B3  0022               	movlb	2	; select bank2
 10845  12B4  084E               	movf	?___ftmul^(0+256),w
 10846  12B5  0023               	movlb	3	; select bank3
 10847  12B6  00C8               	movwf	exp@x^(0+384)
 10848  12B7  0022               	movlb	2	; select bank2
 10849  12B8  084F               	movf	(?___ftmul+1)^(0+256),w
 10850  12B9  0023               	movlb	3	; select bank3
 10851  12BA  00C9               	movwf	(exp@x+1)^(0+384)
 10852  12BB  0022               	movlb	2	; select bank2
 10853  12BC  0850               	movf	(?___ftmul+2)^(0+256),w
 10854  12BD  0023               	movlb	3	; select bank3
 10855  12BE  00CA               	movwf	(exp@x+2)^(0+384)
 10856  12BF  0848               	movf	exp@x^(0+384),w
 10857  12C0  00B6               	movwf	floor@x^(0+384)
 10858  12C1  0849               	movf	(exp@x+1)^(0+384),w
 10859  12C2  00B7               	movwf	(floor@x+1)^(0+384)
 10860  12C3  084A               	movf	(exp@x+2)^(0+384),w
 10861  12C4  00B8               	movwf	(floor@x+2)^(0+384)
 10862  12C5  3199  217E  3192   	fcall	_floor
 10863  12C8  0023               	movlb	3	; select bank3
 10864  12C9  0836               	movf	?_floor^(0+384),w
 10865  12CA  00CC               	movwf	_exp$2809^(0+384)
 10866  12CB  0837               	movf	(?_floor+1)^(0+384),w
 10867  12CC  00CD               	movwf	(_exp$2809+1)^(0+384)
 10868  12CD  0838               	movf	(?_floor+2)^(0+384),w
 10869  12CE  00CE               	movwf	(_exp$2809+2)^(0+384)
 10870  12CF  084C               	movf	_exp$2809^(0+384),w
 10871  12D0  00A0               	movwf	___fttol@f1^(0+384)
 10872  12D1  084D               	movf	(_exp$2809+1)^(0+384),w
 10873  12D2  00A1               	movwf	(___fttol@f1+1)^(0+384)
 10874  12D3  084E               	movf	(_exp$2809+2)^(0+384),w
 10875  12D4  00A2               	movwf	(___fttol@f1+2)^(0+384)
 10876  12D5  31A6  2667  3192   	fcall	___fttol
 10877  12D8  0023               	movlb	3	; select bank3
 10878  12D9  0821               	movf	(?___fttol^(0+384)+1),w
 10879  12DA  00D3               	movwf	(exp@exponent+1)^(0+384)
 10880  12DB  0820               	movf	?___fttol^(0+384),w
 10881  12DC  00D2               	movwf	exp@exponent^(0+384)
 10882  12DD  0853               	movf	(exp@exponent+1)^(0+384),w
 10883  12DE  0022               	movlb	2	; select bank2
 10884  12DF  00A9               	movwf	(___awtoft@c+1)^(0+256)
 10885  12E0  0023               	movlb	3	; select bank3
 10886  12E1  0852               	movf	exp@exponent^(0+384),w
 10887  12E2  0022               	movlb	2	; select bank2
 10888  12E3  00A8               	movwf	___awtoft@c^(0+256)
 10889  12E4  31A0  2000  3192   	fcall	___awtoft
 10890  12E7  0022               	movlb	2	; select bank2
 10891  12E8  0828               	movf	?___awtoft^(0+256),w
 10892  12E9  0023               	movlb	3	; select bank3
 10893  12EA  00BF               	movwf	___ftsub@f2^(0+384)
 10894  12EB  0022               	movlb	2	; select bank2
 10895  12EC  0829               	movf	(?___awtoft+1)^(0+256),w
 10896  12ED  0023               	movlb	3	; select bank3
 10897  12EE  00C0               	movwf	(___ftsub@f2+1)^(0+384)
 10898  12EF  0022               	movlb	2	; select bank2
 10899  12F0  082A               	movf	(?___awtoft+2)^(0+256),w
 10900  12F1  0023               	movlb	3	; select bank3
 10901  12F2  00C1               	movwf	(___ftsub@f2+2)^(0+384)
 10902  12F3  0848               	movf	exp@x^(0+384),w
 10903  12F4  00C2               	movwf	___ftsub@f1^(0+384)
 10904  12F5  0849               	movf	(exp@x+1)^(0+384),w
 10905  12F6  00C3               	movwf	(___ftsub@f1+1)^(0+384)
 10906  12F7  084A               	movf	(exp@x+2)^(0+384),w
 10907  12F8  00C4               	movwf	(___ftsub@f1+2)^(0+384)
 10908  12F9  31AC  24EF  3192   	fcall	___ftsub
 10909  12FC  0023               	movlb	3	; select bank3
 10910  12FD  083F               	movf	?___ftsub^(0+384),w
 10911  12FE  00C8               	movwf	exp@x^(0+384)
 10912  12FF  0840               	movf	(?___ftsub+1)^(0+384),w
 10913  1300  00C9               	movwf	(exp@x+1)^(0+384)
 10914  1301  0841               	movf	(?___ftsub+2)^(0+384),w
 10915  1302  00CA               	movwf	(exp@x+2)^(0+384)
 10916  1303  0848               	movf	exp@x^(0+384),w
 10917  1304  00B4               	movwf	eval_poly@x^(0+384)
 10918  1305  0849               	movf	(exp@x+1)^(0+384),w
 10919  1306  00B5               	movwf	(eval_poly@x+1)^(0+384)
 10920  1307  084A               	movf	(exp@x+2)^(0+384),w
 10921  1308  00B6               	movwf	(eval_poly@x+2)^(0+384)
 10922  1309  3000               	movlw	low (exp@coeff| (0+32768))
 10923  130A  00B7               	movwf	eval_poly@d^(0+384)
 10924  130B  30A8               	movlw	high (exp@coeff| (0+32768))
 10925  130C  00B8               	movwf	(eval_poly@d^(0+384)+1)
 10926  130D  3009               	movlw	9
 10927  130E  00B9               	movwf	eval_poly@n^(0+384)
 10928  130F  3000               	movlw	0
 10929  1310  00BA               	movwf	(eval_poly@n^(0+384)+1)
 10930  1311  31A3  23E5  3192   	fcall	_eval_poly
 10931  1314  0023               	movlb	3	; select bank3
 10932  1315  0834               	movf	?_eval_poly^(0+384),w
 10933  1316  00BE               	movwf	ldexp@value^(0+384)
 10934  1317  0835               	movf	(?_eval_poly+1)^(0+384),w
 10935  1318  00BF               	movwf	(ldexp@value+1)^(0+384)
 10936  1319  0836               	movf	(?_eval_poly+2)^(0+384),w
 10937  131A  00C0               	movwf	(ldexp@value+2)^(0+384)
 10938  131B  0853               	movf	(exp@exponent+1)^(0+384),w
 10939  131C  00C2               	movwf	(ldexp@newexp+1)^(0+384)
 10940  131D  0852               	movf	exp@exponent^(0+384),w
 10941  131E  00C1               	movwf	ldexp@newexp^(0+384)
 10942  131F  3198  20E7  3192   	fcall	_ldexp
 10943  1322  0023               	movlb	3	; select bank3
 10944  1323  083E               	movf	?_ldexp^(0+384),w
 10945  1324  00C8               	movwf	exp@x^(0+384)
 10946  1325  083F               	movf	(?_ldexp+1)^(0+384),w
 10947  1326  00C9               	movwf	(exp@x+1)^(0+384)
 10948  1327  0840               	movf	(?_ldexp+2)^(0+384),w
 10949  1328  00CA               	movwf	(exp@x+2)^(0+384)
 10950  1329  0854               	movf	exp@sign^(0+384),w
 10951  132A  1903               	btfsc	3,2
 10952  132B  0008               	return
 10953  132C  30FF               	movlw	255
 10954  132D  00CF               	movwf	_exp$2564^(0+384)
 10955  132E  307F               	movlw	127
 10956  132F  00D0               	movwf	(_exp$2564+1)^(0+384)
 10957  1330  307F               	movlw	127
 10958  1331  00D1               	movwf	(_exp$2564+2)^(0+384)
 10959  1332  084A               	movf	(exp@x+2)^(0+384),w
 10960  1333  0651               	xorwf	(_exp$2564+2)^(0+384),w
 10961  1334  1D03               	skipz
 10962  1335  2B3C               	goto	u9755
 10963  1336  0849               	movf	(exp@x+1)^(0+384),w
 10964  1337  0650               	xorwf	(_exp$2564+1)^(0+384),w
 10965  1338  1D03               	skipz
 10966  1339  2B3C               	goto	u9755
 10967  133A  0848               	movf	exp@x^(0+384),w
 10968  133B  064F               	xorwf	_exp$2564^(0+384),w
 10969  133C                     u9755:	
 10970  133C  1D03               	skipz
 10971  133D  2B45               	goto	l8589
 10972  133E  3000               	movlw	0
 10973  133F  00C8               	movwf	?_exp^(0+384)
 10974  1340  3000               	movlw	0
 10975  1341  00C9               	movwf	(?_exp+1)^(0+384)
 10976  1342  3000               	movlw	0
 10977  1343  00CA               	movwf	(?_exp+2)^(0+384)
 10978  1344  0008               	return
 10979  1345                     l8589:	
 10980  1345  0848               	movf	exp@x^(0+384),w
 10981  1346  0022               	movlb	2	; select bank2
 10982  1347  00AE               	movwf	___ftdiv@f2^(0+256)
 10983  1348  0023               	movlb	3	; select bank3
 10984  1349  0849               	movf	(exp@x+1)^(0+384),w
 10985  134A  0022               	movlb	2	; select bank2
 10986  134B  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 10987  134C  0023               	movlb	3	; select bank3
 10988  134D  084A               	movf	(exp@x+2)^(0+384),w
 10989  134E  0022               	movlb	2	; select bank2
 10990  134F  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 10991  1350  3000               	movlw	0
 10992  1351  00B1               	movwf	___ftdiv@f1^(0+256)
 10993  1352  3080               	movlw	128
 10994  1353  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 10995  1354  303F               	movlw	63
 10996  1355  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 10997  1356  319A  22CE         	fcall	___ftdiv
 10998  1358  0022               	movlb	2	; select bank2
 10999  1359  082E               	movf	?___ftdiv^(0+256),w
 11000  135A  0023               	movlb	3	; select bank3
 11001  135B  00C8               	movwf	?_exp^(0+384)
 11002  135C  0022               	movlb	2	; select bank2
 11003  135D  082F               	movf	(?___ftdiv+1)^(0+256),w
 11004  135E  0023               	movlb	3	; select bank3
 11005  135F  00C9               	movwf	(?_exp+1)^(0+384)
 11006  1360  0022               	movlb	2	; select bank2
 11007  1361  0830               	movf	(?___ftdiv+2)^(0+256),w
 11008  1362  0023               	movlb	3	; select bank3
 11009  1363  00CA               	movwf	(?_exp+2)^(0+384)
 11010  1364  0008               	return
 11011  1365                     __end_of_exp:	
 11012                           
 11013                           	psect	text24
 11014  18E7                     __ptext24:	
 11015 ;; *************** function _ldexp *****************
 11016 ;; Defined at:
 11017 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  value           3   30[BANK3 ] unsigned char 
 11020 ;;  newexp          2   33[BANK3 ] int 
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;		None
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  3   30[BANK3 ] int 
 11025 ;; Registers used:
 11026 ;;		wreg, status,2, status,0, pclath, cstack
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11032 ;;      Params:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11033 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11034 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11035 ;;      Totals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11036 ;;Total ram usage:       10 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    6
 11039 ;; This function calls:
 11040 ;;		___ftge
 11041 ;;		___ftneg
 11042 ;; This function is called by:
 11043 ;;		_exp
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           
 11048                           ;psect for function _ldexp
 11049  18E7                     _ldexp:	
 11050                           
 11051                           ;incstack = 0
 11052                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 11053  18E7  0023               	movlb	3	; select bank3
 11054  18E8  0840               	movf	(ldexp@value+2)^(0+384),w
 11055  18E9  043F               	iorwf	(ldexp@value+1)^(0+384),w
 11056  18EA  043E               	iorwf	ldexp@value^(0+384),w
 11057  18EB  1D03               	skipz
 11058  18EC  28F4               	goto	l8435
 11059  18ED  3000               	movlw	0
 11060  18EE  00BE               	movwf	?_ldexp^(0+384)
 11061  18EF  3000               	movlw	0
 11062  18F0  00BF               	movwf	(?_ldexp+1)^(0+384)
 11063  18F1  3000               	movlw	0
 11064  18F2  00C0               	movwf	(?_ldexp+2)^(0+384)
 11065  18F3  0008               	return
 11066  18F4                     l8435:	
 11067  18F4  0840               	movf	(ldexp@value^(0+384)+2),w
 11068  18F5  397F               	andlw	127
 11069  18F6  00C3               	movwf	??_ldexp^(0+384)
 11070  18F7  01C4               	clrf	(??_ldexp^(0+384)+1)
 11071  18F8  35C3               	lslf	??_ldexp^(0+384),f
 11072  18F9  0DC4               	rlf	(??_ldexp^(0+384)+1),f
 11073  18FA  0843               	movf	??_ldexp^(0+384),w
 11074  18FB  07C1               	addwf	ldexp@newexp^(0+384),f
 11075  18FC  0844               	movf	(??_ldexp+1)^(0+384),w
 11076  18FD  3DC2               	addwfc	(ldexp@newexp+1)^(0+384),f
 11077  18FE  0D3F               	rlf	(ldexp@value^(0+384)+1),w
 11078  18FF  0D3F               	rlf	(ldexp@value^(0+384)+1),w
 11079  1900  3901               	andlw	1
 11080  1901  00C3               	movwf	??_ldexp^(0+384)
 11081  1902  01C4               	clrf	(??_ldexp^(0+384)+1)
 11082  1903  0843               	movf	??_ldexp^(0+384),w
 11083  1904  07C1               	addwf	ldexp@newexp^(0+384),f
 11084  1905  0844               	movf	(??_ldexp+1)^(0+384),w
 11085  1906  3DC2               	addwfc	(ldexp@newexp+1)^(0+384),f
 11086  1907  1FC2               	btfss	(ldexp@newexp+1)^(0+384),7
 11087  1908  2916               	goto	l8445
 11088  1909  3022               	movlw	34
 11089  190A  0025               	movlb	5	; select bank5
 11090  190B  00CF               	movwf	_errno^(0+640)
 11091  190C  3000               	movlw	0
 11092  190D  00D0               	movwf	(_errno^(0+640)+1)
 11093  190E  3000               	movlw	0
 11094  190F  0023               	movlb	3	; select bank3
 11095  1910  00BE               	movwf	?_ldexp^(0+384)
 11096  1911  3000               	movlw	0
 11097  1912  00BF               	movwf	(?_ldexp+1)^(0+384)
 11098  1913  3000               	movlw	0
 11099  1914  00C0               	movwf	(?_ldexp+2)^(0+384)
 11100  1915  0008               	return
 11101  1916                     l8445:	
 11102  1916  0842               	movf	(ldexp@newexp+1)^(0+384),w
 11103  1917  3A80               	xorlw	128
 11104  1918  00C3               	movwf	??_ldexp^(0+384)
 11105  1919  3081               	movlw	129
 11106  191A  0243               	subwf	??_ldexp^(0+384),w
 11107  191B  1D03               	skipz
 11108  191C  291F               	goto	u9625
 11109  191D  3000               	movlw	0
 11110  191E  0241               	subwf	ldexp@newexp^(0+384),w
 11111  191F                     u9625:	
 11112  191F  1C03               	skipc
 11113  1920  2966               	goto	l8469
 11114  1921  3022               	movlw	34
 11115  1922  0025               	movlb	5	; select bank5
 11116  1923  00CF               	movwf	_errno^(0+640)
 11117  1924  3000               	movlw	0
 11118  1925  00D0               	movwf	(_errno^(0+640)+1)
 11119  1926  0023               	movlb	3	; select bank3
 11120  1927  083E               	movf	ldexp@value^(0+384),w
 11121  1928  0022               	movlb	2	; select bank2
 11122  1929  00A0               	movwf	___ftge@ff1^(0+256)
 11123  192A  0023               	movlb	3	; select bank3
 11124  192B  083F               	movf	(ldexp@value+1)^(0+384),w
 11125  192C  0022               	movlb	2	; select bank2
 11126  192D  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 11127  192E  0023               	movlb	3	; select bank3
 11128  192F  0840               	movf	(ldexp@value+2)^(0+384),w
 11129  1930  0022               	movlb	2	; select bank2
 11130  1931  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 11131  1932  3000               	movlw	0
 11132  1933  00A3               	movwf	___ftge@ff2^(0+256)
 11133  1934  3000               	movlw	0
 11134  1935  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 11135  1936  3000               	movlw	0
 11136  1937  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 11137  1938  31AE  2685  3198   	fcall	___ftge
 11138  193B  1803               	btfsc	3,0
 11139  193C  295E               	goto	l8465
 11140  193D  30FF               	movlw	255
 11141  193E  0023               	movlb	3	; select bank3
 11142  193F  00C5               	movwf	_ldexp$2596^(0+384)
 11143  1940  307F               	movlw	127
 11144  1941  00C6               	movwf	(_ldexp$2596+1)^(0+384)
 11145  1942  307F               	movlw	127
 11146  1943  00C7               	movwf	(_ldexp$2596+2)^(0+384)
 11147  1944  0845               	movf	_ldexp$2596^(0+384),w
 11148  1945  0022               	movlb	2	; select bank2
 11149  1946  00BE               	movwf	___ftneg@f1^(0+256)
 11150  1947  0023               	movlb	3	; select bank3
 11151  1948  0846               	movf	(_ldexp$2596+1)^(0+384),w
 11152  1949  0022               	movlb	2	; select bank2
 11153  194A  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 11154  194B  0023               	movlb	3	; select bank3
 11155  194C  0847               	movf	(_ldexp$2596+2)^(0+384),w
 11156  194D  0022               	movlb	2	; select bank2
 11157  194E  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 11158  194F  31AA  22E9         	fcall	___ftneg
 11159  1951  0022               	movlb	2	; select bank2
 11160  1952  083E               	movf	?___ftneg^(0+256),w
 11161  1953  0023               	movlb	3	; select bank3
 11162  1954  00BE               	movwf	?_ldexp^(0+384)
 11163  1955  0022               	movlb	2	; select bank2
 11164  1956  083F               	movf	(?___ftneg+1)^(0+256),w
 11165  1957  0023               	movlb	3	; select bank3
 11166  1958  00BF               	movwf	(?_ldexp+1)^(0+384)
 11167  1959  0022               	movlb	2	; select bank2
 11168  195A  0840               	movf	(?___ftneg+2)^(0+256),w
 11169  195B  0023               	movlb	3	; select bank3
 11170  195C  00C0               	movwf	(?_ldexp+2)^(0+384)
 11171  195D  0008               	return
 11172  195E                     l8465:	
 11173  195E  30FF               	movlw	255
 11174  195F  0023               	movlb	3	; select bank3
 11175  1960  00BE               	movwf	?_ldexp^(0+384)
 11176  1961  307F               	movlw	127
 11177  1962  00BF               	movwf	(?_ldexp+1)^(0+384)
 11178  1963  307F               	movlw	127
 11179  1964  00C0               	movwf	(?_ldexp+2)^(0+384)
 11180  1965  0008               	return
 11181  1966                     l8469:	
 11182  1966  0023               	movlb	3	; select bank3
 11183  1967  0842               	movf	(ldexp@newexp+1)^(0+384),w
 11184  1968  00C4               	movwf	(??_ldexp^(0+384)+1)
 11185  1969  0841               	movf	ldexp@newexp^(0+384),w
 11186  196A  00C3               	movwf	??_ldexp^(0+384)
 11187  196B  0D44               	rlf	(??_ldexp^(0+384)+1),w
 11188  196C  0CC4               	rrf	(??_ldexp^(0+384)+1),f
 11189  196D  0CC3               	rrf	??_ldexp^(0+384),f
 11190  196E  0840               	movf	(ldexp@value^(0+384)+2),w
 11191  196F  0643               	xorwf	??_ldexp^(0+384),w
 11192  1970  3980               	andlw	-128
 11193  1971  0643               	xorwf	??_ldexp^(0+384),w
 11194  1972  00C0               	movwf	(ldexp@value^(0+384)+2)
 11195  1973  0841               	movf	ldexp@newexp^(0+384),w
 11196  1974  3901               	andlw	1
 11197  1975  00C3               	movwf	??_ldexp^(0+384)
 11198  1976  0CC3               	rrf	??_ldexp^(0+384),f
 11199  1977  0CC3               	rrf	??_ldexp^(0+384),f
 11200  1978  083F               	movf	(ldexp@value^(0+384)+1),w
 11201  1979  0643               	xorwf	??_ldexp^(0+384),w
 11202  197A  397F               	andlw	-129
 11203  197B  0643               	xorwf	??_ldexp^(0+384),w
 11204  197C  00BF               	movwf	(ldexp@value^(0+384)+1)
 11205  197D  0008               	return
 11206  197E                     __end_of_ldexp:	
 11207                           
 11208                           	psect	text25
 11209  2CC5                     __ptext25:	
 11210 ;; *************** function ___lltoft *****************
 11211 ;; Defined at:
 11212 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  c               4    8[BANK2 ] unsigned long 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  exp             1   13[BANK2 ] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  3    8[BANK2 ] float 
 11219 ;; Registers used:
 11220 ;;		wreg, status,2, status,0, pclath, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11226 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11227 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11228 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11229 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11230 ;;Total ram usage:        6 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    6
 11233 ;; This function calls:
 11234 ;;		___ftpack
 11235 ;; This function is called by:
 11236 ;;		_pow
 11237 ;; This function uses a non-reentrant model
 11238 ;;
 11239                           
 11240                           
 11241                           ;psect for function ___lltoft
 11242  2CC5                     ___lltoft:	
 11243                           
 11244                           ;incstack = 0
 11245                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 11246  2CC5  308E               	movlw	142
 11247  2CC6  0022               	movlb	2	; select bank2
 11248  2CC7  00AC               	movwf	??___lltoft^(0+256)
 11249  2CC8  082C               	movf	??___lltoft^(0+256),w
 11250  2CC9  00AD               	movwf	___lltoft@exp^(0+256)
 11251  2CCA                     l8511:	
 11252  2CCA  30FF               	movlw	255
 11253  2CCB  052B               	andwf	(___lltoft@c+3)^(0+256),w
 11254  2CCC  1903               	btfsc	3,2
 11255  2CCD  2CDA               	goto	l8513
 11256  2CCE  3001               	movlw	1
 11257  2CCF                     u9645:	
 11258  2CCF  36AB               	lsrf	(___lltoft@c+3)^(0+256),f
 11259  2CD0  0CAA               	rrf	(___lltoft@c+2)^(0+256),f
 11260  2CD1  0CA9               	rrf	(___lltoft@c+1)^(0+256),f
 11261  2CD2  0CA8               	rrf	___lltoft@c^(0+256),f
 11262  2CD3  0B89               	decfsz	9,f
 11263  2CD4  2CCF               	goto	u9645
 11264  2CD5  3001               	movlw	1
 11265  2CD6  00AC               	movwf	??___lltoft^(0+256)
 11266  2CD7  082C               	movf	??___lltoft^(0+256),w
 11267  2CD8  07AD               	addwf	___lltoft@exp^(0+256),f
 11268  2CD9  2CCA               	goto	l8511
 11269  2CDA                     l8513:	
 11270  2CDA  0828               	movf	___lltoft@c^(0+256),w
 11271  2CDB  00A0               	movwf	___ftpack@arg^(0+256)
 11272  2CDC  0829               	movf	(___lltoft@c+1)^(0+256),w
 11273  2CDD  00A1               	movwf	(___ftpack@arg+1)^(0+256)
 11274  2CDE  082A               	movf	(___lltoft@c+2)^(0+256),w
 11275  2CDF  00A2               	movwf	(___ftpack@arg+2)^(0+256)
 11276  2CE0  082D               	movf	___lltoft@exp^(0+256),w
 11277  2CE1  00AC               	movwf	??___lltoft^(0+256)
 11278  2CE2  082C               	movf	??___lltoft^(0+256),w
 11279  2CE3  00A3               	movwf	___ftpack@exp^(0+256)
 11280  2CE4  01A4               	clrf	___ftpack@sign^(0+256)
 11281  2CE5  31A3  2380         	fcall	___ftpack
 11282  2CE7  0022               	movlb	2	; select bank2
 11283  2CE8  0820               	movf	?___ftpack^(0+256),w
 11284  2CE9  00A8               	movwf	?___lltoft^(0+256)
 11285  2CEA  0821               	movf	(?___ftpack+1)^(0+256),w
 11286  2CEB  00A9               	movwf	(?___lltoft+1)^(0+256)
 11287  2CEC  0822               	movf	(?___ftpack+2)^(0+256),w
 11288  2CED  00AA               	movwf	(?___lltoft+2)^(0+256)
 11289  2CEE  0008               	return
 11290  2CEF                     __end_of___lltoft:	
 11291                           
 11292                           	psect	text26
 11293  21D3                     __ptext26:	
 11294 ;; *************** function _read_top_tactile *****************
 11295 ;; Defined at:
 11296 ;;		line 50 in file "tactiles.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;		None
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;		None
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      void 
 11303 ;; Registers used:
 11304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11312 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11313 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11314 ;;Total ram usage:        1 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    7
 11317 ;; This function calls:
 11318 ;;		_set_leds_top
 11319 ;;		_wait_ms
 11320 ;; This function is called by:
 11321 ;;		_main
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function _read_top_tactile
 11327  21D3                     _read_top_tactile:	
 11328                           
 11329                           ;tactiles.c: 60: if (PORTDbits.RD5 == 0) {
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11333  21D3  0020               	movlb	0	; select bank0
 11334  21D4  1A8F               	btfsc	15,5	;volatile
 11335  21D5  29DD               	goto	l9235
 11336                           
 11337                           ;tactiles.c: 61: if (topTactile_pressed > 0) {
 11338  21D6  0024               	movlb	4	; select bank4
 11339  21D7  0848               	movf	_topTactile_pressed^(0+512),w
 11340  21D8  1903               	btfsc	3,2
 11341  21D9  29E8               	goto	l993
 11342                           
 11343                           ;tactiles.c: 62: topTactile_pressed--;
 11344  21DA  3001               	movlw	1
 11345  21DB  02C8               	subwf	_topTactile_pressed^(0+512),f
 11346                           
 11347                           ;tactiles.c: 63: }
 11348                           ;tactiles.c: 64: } else if (topTactile_pressed < 25) {
 11349  21DC  29E8               	goto	l993
 11350  21DD                     l9235:	
 11351  21DD  3019               	movlw	25
 11352  21DE  0024               	movlb	4	; select bank4
 11353  21DF  0248               	subwf	_topTactile_pressed^(0+512),w
 11354  21E0  1803               	skipnc
 11355  21E1  29E8               	goto	l993
 11356                           
 11357                           ;tactiles.c: 65: topTactile_pressed++;
 11358  21E2  3001               	movlw	1
 11359  21E3  0022               	movlb	2	; select bank2
 11360  21E4  00B2               	movwf	??_read_top_tactile^(0+256)
 11361  21E5  0832               	movf	??_read_top_tactile^(0+256),w
 11362  21E6  0024               	movlb	4	; select bank4
 11363  21E7  07C8               	addwf	_topTactile_pressed^(0+512),f
 11364  21E8                     l993:	
 11365                           
 11366                           ;tactiles.c: 66: }
 11367                           ;tactiles.c: 71: if (topTactile_pressed == 0) {
 11368  21E8  0848               	movf	_topTactile_pressed^(0+512),w
 11369  21E9  1D03               	btfss	3,2
 11370  21EA  0008               	return
 11371                           
 11372                           ;tactiles.c: 73: top_push_state = top_push_state + 1;
 11373  21EB  0021               	movlb	1	; select bank1
 11374  21EC  085B               	movf	_top_push_state^(0+128),w
 11375  21ED  3E01               	addlw	1
 11376  21EE  00DB               	movwf	_top_push_state^(0+128)
 11377  21EF  3000               	movlw	0
 11378  21F0  3D5C               	addwfc	(_top_push_state+1)^(0+128),w
 11379  21F1  00DC               	movwf	(_top_push_state+1)^(0+128)
 11380                           
 11381                           ;tactiles.c: 74: if (top_push_state >= 7) {
 11382  21F2  085C               	movf	(_top_push_state+1)^(0+128),w
 11383  21F3  3A80               	xorlw	128
 11384  21F4  0022               	movlb	2	; select bank2
 11385  21F5  00B2               	movwf	??_read_top_tactile^(0+256)
 11386  21F6  3080               	movlw	128
 11387  21F7  0232               	subwf	??_read_top_tactile^(0+256),w
 11388  21F8  1D03               	skipz
 11389  21F9  29FD               	goto	u10905
 11390  21FA  3007               	movlw	7
 11391  21FB  0021               	movlb	1	; select bank1
 11392  21FC  025B               	subwf	_top_push_state^(0+128),w
 11393  21FD                     u10905:	
 11394  21FD  1C03               	skipc
 11395  21FE  2A04               	goto	l9245
 11396                           
 11397                           ;tactiles.c: 75: top_push_state = 1;
 11398  21FF  3001               	movlw	1
 11399  2200  0021               	movlb	1	; select bank1
 11400  2201  00DB               	movwf	_top_push_state^(0+128)
 11401  2202  3000               	movlw	0
 11402  2203  00DC               	movwf	(_top_push_state^(0+128)+1)
 11403  2204                     l9245:	
 11404                           
 11405                           ;tactiles.c: 76: }
 11406                           ;tactiles.c: 77: set_leds_top(top_push_state, 1);
 11407  2204  0021               	movlb	1	; select bank1
 11408  2205  085C               	movf	(_top_push_state+1)^(0+128),w
 11409  2206  0022               	movlb	2	; select bank2
 11410  2207  00A1               	movwf	(set_leds_top@x+1)^(0+256)
 11411  2208  0021               	movlb	1	; select bank1
 11412  2209  085B               	movf	_top_push_state^(0+128),w
 11413  220A  0022               	movlb	2	; select bank2
 11414  220B  00A0               	movwf	set_leds_top@x^(0+256)
 11415  220C  3001               	movlw	1
 11416  220D  00A2               	movwf	set_leds_top@ledState^(0+256)
 11417  220E  3000               	movlw	0
 11418  220F  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
 11419  2210  3198  2002  31A1   	fcall	_set_leds_top
 11420                           
 11421                           ;tactiles.c: 78: delay_time_changed = 1;
 11422  2213  0024               	movlb	4	; select bank4
 11423  2214  01E1               	clrf	_delay_time_changed^(0+512)
 11424  2215  0AE1               	incf	_delay_time_changed^(0+512),f
 11425  2216                     l997:	
 11426                           ;tactiles.c: 81: while (PORTDbits.RD5 == 0) {
 11427                           
 11428  2216  0020               	movlb	0	; select bank0
 11429  2217  1E8F               	btfss	15,5	;volatile
 11430  2218  2A16               	goto	l997
 11431                           
 11432                           ;tactiles.c: 82: }
 11433                           ;tactiles.c: 83: wait_ms(20);
 11434  2219  3014               	movlw	20
 11435  221A  0022               	movlb	2	; select bank2
 11436  221B  00AC               	movwf	wait_ms@timeSec^(0+256)
 11437  221C  3000               	movlw	0
 11438  221D  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
 11439  221E  31AD  25AC         	fcall	_wait_ms
 11440  2220  0008               	return
 11441  2221                     __end_of_read_top_tactile:	
 11442                           
 11443                           	psect	text27
 11444  213E                     __ptext27:	
 11445 ;; *************** function _read_bottom_tactile *****************
 11446 ;; Defined at:
 11447 ;;		line 18 in file "tactiles.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;		None
 11450 ;; Auto vars:     Size  Location     Type
 11451 ;;		None
 11452 ;; Return value:  Size  Location     Type
 11453 ;;                  1    wreg      void 
 11454 ;; Registers used:
 11455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11456 ;; Tracked objects:
 11457 ;;		On entry : 0/0
 11458 ;;		On exit  : 0/0
 11459 ;;		Unchanged: 0/0
 11460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11463 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11464 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11465 ;;Total ram usage:        1 bytes
 11466 ;; Hardware stack levels used:    1
 11467 ;; Hardware stack levels required when called:    7
 11468 ;; This function calls:
 11469 ;;		_set_leds_bottom
 11470 ;;		_wait_ms
 11471 ;; This function is called by:
 11472 ;;		_main
 11473 ;; This function uses a non-reentrant model
 11474 ;;
 11475                           
 11476                           
 11477                           ;psect for function _read_bottom_tactile
 11478  213E                     _read_bottom_tactile:	
 11479                           
 11480                           ;tactiles.c: 27: if (PORTDbits.RD6 == 0) {
 11481                           
 11482                           ;incstack = 0
 11483                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11484  213E  0020               	movlb	0	; select bank0
 11485  213F  1B0F               	btfsc	15,6	;volatile
 11486  2140  2948               	goto	l9213
 11487                           
 11488                           ;tactiles.c: 28: if (bottomTactile_pressed > 0) {
 11489  2141  0024               	movlb	4	; select bank4
 11490  2142  083F               	movf	_bottomTactile_pressed^(0+512),w
 11491  2143  1903               	btfsc	3,2
 11492  2144  2953               	goto	l981
 11493                           
 11494                           ;tactiles.c: 29: bottomTactile_pressed--;
 11495  2145  3001               	movlw	1
 11496  2146  02BF               	subwf	_bottomTactile_pressed^(0+512),f
 11497                           
 11498                           ;tactiles.c: 30: }
 11499                           ;tactiles.c: 31: } else if (bottomTactile_pressed < 25) {
 11500  2147  2953               	goto	l981
 11501  2148                     l9213:	
 11502  2148  3019               	movlw	25
 11503  2149  0024               	movlb	4	; select bank4
 11504  214A  023F               	subwf	_bottomTactile_pressed^(0+512),w
 11505  214B  1803               	skipnc
 11506  214C  2953               	goto	l981
 11507                           
 11508                           ;tactiles.c: 32: bottomTactile_pressed++;
 11509  214D  3001               	movlw	1
 11510  214E  0022               	movlb	2	; select bank2
 11511  214F  00B2               	movwf	??_read_bottom_tactile^(0+256)
 11512  2150  0832               	movf	??_read_bottom_tactile^(0+256),w
 11513  2151  0024               	movlb	4	; select bank4
 11514  2152  07BF               	addwf	_bottomTactile_pressed^(0+512),f
 11515  2153                     l981:	
 11516                           
 11517                           ;tactiles.c: 33: }
 11518                           ;tactiles.c: 36: if (bottomTactile_pressed == 0) {
 11519  2153  083F               	movf	_bottomTactile_pressed^(0+512),w
 11520  2154  1D03               	btfss	3,2
 11521  2155  0008               	return
 11522                           
 11523                           ;tactiles.c: 37: bottom_push_state = bottom_push_state + 1;
 11524  2156  0021               	movlb	1	; select bank1
 11525  2157  0857               	movf	_bottom_push_state^(0+128),w
 11526  2158  3E01               	addlw	1
 11527  2159  00D7               	movwf	_bottom_push_state^(0+128)
 11528  215A  3000               	movlw	0
 11529  215B  3D58               	addwfc	(_bottom_push_state+1)^(0+128),w
 11530  215C  00D8               	movwf	(_bottom_push_state+1)^(0+128)
 11531                           
 11532                           ;tactiles.c: 38: if (bottom_push_state > 5) {
 11533  215D  0858               	movf	(_bottom_push_state+1)^(0+128),w
 11534  215E  3A80               	xorlw	128
 11535  215F  0022               	movlb	2	; select bank2
 11536  2160  00B2               	movwf	??_read_bottom_tactile^(0+256)
 11537  2161  3080               	movlw	128
 11538  2162  0232               	subwf	??_read_bottom_tactile^(0+256),w
 11539  2163  1D03               	skipz
 11540  2164  2968               	goto	u10845
 11541  2165  3006               	movlw	6
 11542  2166  0021               	movlb	1	; select bank1
 11543  2167  0257               	subwf	_bottom_push_state^(0+128),w
 11544  2168                     u10845:	
 11545  2168  1C03               	skipc
 11546  2169  296F               	goto	l9223
 11547                           
 11548                           ;tactiles.c: 39: bottom_push_state = 1;
 11549  216A  3001               	movlw	1
 11550  216B  0021               	movlb	1	; select bank1
 11551  216C  00D7               	movwf	_bottom_push_state^(0+128)
 11552  216D  3000               	movlw	0
 11553  216E  00D8               	movwf	(_bottom_push_state^(0+128)+1)
 11554  216F                     l9223:	
 11555                           
 11556                           ;tactiles.c: 40: }
 11557                           ;tactiles.c: 41: modulation_changed = 1;
 11558  216F  0024               	movlb	4	; select bank4
 11559  2170  01C3               	clrf	_modulation_changed^(0+512)
 11560  2171  0AC3               	incf	_modulation_changed^(0+512),f
 11561                           
 11562                           ;tactiles.c: 42: set_leds_bottom(bottom_push_state);
 11563  2172  0021               	movlb	1	; select bank1
 11564  2173  0858               	movf	(_bottom_push_state+1)^(0+128),w
 11565  2174  0022               	movlb	2	; select bank2
 11566  2175  00A1               	movwf	(set_leds_bottom@x+1)^(0+256)
 11567  2176  0021               	movlb	1	; select bank1
 11568  2177  0857               	movf	_bottom_push_state^(0+128),w
 11569  2178  0022               	movlb	2	; select bank2
 11570  2179  00A0               	movwf	set_leds_bottom@x^(0+256)
 11571  217A  31AD  25DE  31A1   	fcall	_set_leds_bottom
 11572  217D                     l985:	
 11573                           ;tactiles.c: 44: while (PORTDbits.RD6 == 0) {
 11574                           
 11575  217D  0020               	movlb	0	; select bank0
 11576  217E  1F0F               	btfss	15,6	;volatile
 11577  217F  297D               	goto	l985
 11578                           
 11579                           ;tactiles.c: 45: }
 11580                           ;tactiles.c: 46: wait_ms(20);
 11581  2180  3014               	movlw	20
 11582  2181  0022               	movlb	2	; select bank2
 11583  2182  00AC               	movwf	wait_ms@timeSec^(0+256)
 11584  2183  3000               	movlw	0
 11585  2184  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
 11586  2185  31AD  25AC         	fcall	_wait_ms
 11587  2187  0008               	return
 11588  2188                     __end_of_read_bottom_tactile:	
 11589                           
 11590                           	psect	text28
 11591  1654                     __ptext28:	
 11592 ;; *************** function _modSin *****************
 11593 ;; Defined at:
 11594 ;;		line 52 in file "modulation.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;  angle           3   20[BANK3 ] void 
 11597 ;;  inflection      3   23[BANK3 ] void 
 11598 ;; Auto vars:     Size  Location     Type
 11599 ;;  tmpVal          3   37[BANK3 ] void 
 11600 ;;  period          3   34[BANK3 ] void 
 11601 ;;  shift           3   31[BANK3 ] void 
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  2   20[BANK3 ] int 
 11604 ;; Registers used:
 11605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11611 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11612 ;;      Locals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11613 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11614 ;;      Totals:         0       0       0       0      20       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11615 ;;Total ram usage:       20 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    7
 11618 ;; This function calls:
 11619 ;;		___ftadd
 11620 ;;		___ftdiv
 11621 ;;		___ftge
 11622 ;;		___ftmul
 11623 ;;		___ftneg
 11624 ;;		___fttol
 11625 ;;		___wmul
 11626 ;; This function is called by:
 11627 ;;		_main
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           
 11632                           ;psect for function _modSin
 11633  1654                     _modSin:	
 11634                           
 11635                           ;modulation.c: 53: double period = 1.0;
 11636                           
 11637                           ;incstack = 0
 11638                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11639  1654  3000               	movlw	0
 11640  1655  0023               	movlb	3	; select bank3
 11641  1656  00C2               	movwf	modSin@period^(0+384)
 11642  1657  3080               	movlw	128
 11643  1658  00C3               	movwf	(modSin@period+1)^(0+384)
 11644  1659  303F               	movlw	63
 11645  165A  00C4               	movwf	(modSin@period+2)^(0+384)
 11646                           
 11647                           ;modulation.c: 54: double shift = 0.0;
 11648  165B  3000               	movlw	0
 11649  165C  00BF               	movwf	modSin@shift^(0+384)
 11650  165D  3000               	movlw	0
 11651  165E  00C0               	movwf	(modSin@shift+1)^(0+384)
 11652  165F  3000               	movlw	0
 11653  1660  00C1               	movwf	(modSin@shift+2)^(0+384)
 11654                           
 11655                           ;modulation.c: 56: if(angle<=inflection) {
 11656  1661  0837               	movf	modSin@inflection^(0+384),w
 11657  1662  0022               	movlb	2	; select bank2
 11658  1663  00A0               	movwf	___ftge@ff1^(0+256)
 11659  1664  0023               	movlb	3	; select bank3
 11660  1665  0838               	movf	(modSin@inflection+1)^(0+384),w
 11661  1666  0022               	movlb	2	; select bank2
 11662  1667  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 11663  1668  0023               	movlb	3	; select bank3
 11664  1669  0839               	movf	(modSin@inflection+2)^(0+384),w
 11665  166A  0022               	movlb	2	; select bank2
 11666  166B  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 11667  166C  0023               	movlb	3	; select bank3
 11668  166D  0834               	movf	modSin@angle^(0+384),w
 11669  166E  0022               	movlb	2	; select bank2
 11670  166F  00A3               	movwf	___ftge@ff2^(0+256)
 11671  1670  0023               	movlb	3	; select bank3
 11672  1671  0835               	movf	(modSin@angle+1)^(0+384),w
 11673  1672  0022               	movlb	2	; select bank2
 11674  1673  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 11675  1674  0023               	movlb	3	; select bank3
 11676  1675  0836               	movf	(modSin@angle+2)^(0+384),w
 11677  1676  0022               	movlb	2	; select bank2
 11678  1677  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 11679  1678  31AE  2685  3196   	fcall	___ftge
 11680  167B  1C03               	btfss	3,0
 11681  167C  2E89               	goto	l8853
 11682                           
 11683                           ;modulation.c: 57: period = 180.0/inflection;
 11684  167D  0023               	movlb	3	; select bank3
 11685  167E  0837               	movf	modSin@inflection^(0+384),w
 11686  167F  0022               	movlb	2	; select bank2
 11687  1680  00AE               	movwf	___ftdiv@f2^(0+256)
 11688  1681  0023               	movlb	3	; select bank3
 11689  1682  0838               	movf	(modSin@inflection+1)^(0+384),w
 11690  1683  0022               	movlb	2	; select bank2
 11691  1684  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 11692  1685  0023               	movlb	3	; select bank3
 11693  1686  0839               	movf	(modSin@inflection+2)^(0+384),w
 11694  1687  0022               	movlb	2	; select bank2
 11695  1688  2F44               	goto	L12
 11696  1689                     l8853:	
 11697                           ;modulation.c: 58: } else {
 11698                           
 11699                           
 11700                           ;modulation.c: 59: shift = -(360-inflection*2)*(180/(360-inflection));
 11701  1689  0023               	movlb	3	; select bank3
 11702  168A  0837               	movf	modSin@inflection^(0+384),w
 11703  168B  0022               	movlb	2	; select bank2
 11704  168C  00D1               	movwf	___ftmul@f2^(0+256)
 11705  168D  0023               	movlb	3	; select bank3
 11706  168E  0838               	movf	(modSin@inflection+1)^(0+384),w
 11707  168F  0022               	movlb	2	; select bank2
 11708  1690  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 11709  1691  0023               	movlb	3	; select bank3
 11710  1692  0839               	movf	(modSin@inflection+2)^(0+384),w
 11711  1693  0022               	movlb	2	; select bank2
 11712  1694  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 11713  1695  3000               	movlw	0
 11714  1696  00CE               	movwf	___ftmul@f1^(0+256)
 11715  1697  3000               	movlw	0
 11716  1698  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 11717  1699  3040               	movlw	64
 11718  169A  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 11719  169B  319C  24D5  3196   	fcall	___ftmul
 11720  169E  0022               	movlb	2	; select bank2
 11721  169F  084E               	movf	?___ftmul^(0+256),w
 11722  16A0  00BE               	movwf	___ftneg@f1^(0+256)
 11723  16A1  084F               	movf	(?___ftmul+1)^(0+256),w
 11724  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 11725  16A3  0850               	movf	(?___ftmul+2)^(0+256),w
 11726  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 11727  16A5  31AA  22E9  3196   	fcall	___ftneg
 11728  16A8  0022               	movlb	2	; select bank2
 11729  16A9  083E               	movf	?___ftneg^(0+256),w
 11730  16AA  00C4               	movwf	___ftadd@f2^(0+256)
 11731  16AB  083F               	movf	(?___ftneg+1)^(0+256),w
 11732  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 11733  16AD  0840               	movf	(?___ftneg+2)^(0+256),w
 11734  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 11735  16AF  3000               	movlw	0
 11736  16B0  00C1               	movwf	___ftadd@f1^(0+256)
 11737  16B1  30B4               	movlw	180
 11738  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 11739  16B3  3043               	movlw	67
 11740  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 11741  16B5  3191  2116  3196   	fcall	___ftadd
 11742  16B8  0022               	movlb	2	; select bank2
 11743  16B9  0841               	movf	?___ftadd^(0+256),w
 11744  16BA  0023               	movlb	3	; select bank3
 11745  16BB  00BC               	movwf	_modSin$2801^(0+384)
 11746  16BC  0022               	movlb	2	; select bank2
 11747  16BD  0842               	movf	(?___ftadd+1)^(0+256),w
 11748  16BE  0023               	movlb	3	; select bank3
 11749  16BF  00BD               	movwf	(_modSin$2801+1)^(0+384)
 11750  16C0  0022               	movlb	2	; select bank2
 11751  16C1  0843               	movf	(?___ftadd+2)^(0+256),w
 11752  16C2  0023               	movlb	3	; select bank3
 11753  16C3  00BE               	movwf	(_modSin$2801+2)^(0+384)
 11754                           
 11755                           ;modulation.c: 59: shift = -(360-inflection*2)*(180/(360-inflection));
 11756  16C4  083C               	movf	_modSin$2801^(0+384),w
 11757  16C5  0022               	movlb	2	; select bank2
 11758  16C6  00BE               	movwf	___ftneg@f1^(0+256)
 11759  16C7  0023               	movlb	3	; select bank3
 11760  16C8  083D               	movf	(_modSin$2801+1)^(0+384),w
 11761  16C9  0022               	movlb	2	; select bank2
 11762  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 11763  16CB  0023               	movlb	3	; select bank3
 11764  16CC  083E               	movf	(_modSin$2801+2)^(0+384),w
 11765  16CD  0022               	movlb	2	; select bank2
 11766  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 11767  16CF  31AA  22E9  3196   	fcall	___ftneg
 11768  16D2  0022               	movlb	2	; select bank2
 11769  16D3  083E               	movf	?___ftneg^(0+256),w
 11770  16D4  00CE               	movwf	___ftmul@f1^(0+256)
 11771  16D5  083F               	movf	(?___ftneg+1)^(0+256),w
 11772  16D6  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 11773  16D7  0840               	movf	(?___ftneg+2)^(0+256),w
 11774  16D8  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 11775  16D9  3000               	movlw	0
 11776  16DA  00C1               	movwf	___ftadd@f1^(0+256)
 11777  16DB  30B4               	movlw	180
 11778  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 11779  16DD  3043               	movlw	67
 11780  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 11781  16DF  0023               	movlb	3	; select bank3
 11782  16E0  0837               	movf	modSin@inflection^(0+384),w
 11783  16E1  0022               	movlb	2	; select bank2
 11784  16E2  00BE               	movwf	___ftneg@f1^(0+256)
 11785  16E3  0023               	movlb	3	; select bank3
 11786  16E4  0838               	movf	(modSin@inflection+1)^(0+384),w
 11787  16E5  0022               	movlb	2	; select bank2
 11788  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 11789  16E7  0023               	movlb	3	; select bank3
 11790  16E8  0839               	movf	(modSin@inflection+2)^(0+384),w
 11791  16E9  0022               	movlb	2	; select bank2
 11792  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 11793  16EB  31AA  22E9  3196   	fcall	___ftneg
 11794  16EE  0022               	movlb	2	; select bank2
 11795  16EF  083E               	movf	?___ftneg^(0+256),w
 11796  16F0  00C4               	movwf	___ftadd@f2^(0+256)
 11797  16F1  083F               	movf	(?___ftneg+1)^(0+256),w
 11798  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 11799  16F3  0840               	movf	(?___ftneg+2)^(0+256),w
 11800  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 11801  16F5  3191  2116  3196   	fcall	___ftadd
 11802  16F8  0022               	movlb	2	; select bank2
 11803  16F9  0841               	movf	?___ftadd^(0+256),w
 11804  16FA  00AE               	movwf	___ftdiv@f2^(0+256)
 11805  16FB  0842               	movf	(?___ftadd+1)^(0+256),w
 11806  16FC  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 11807  16FD  0843               	movf	(?___ftadd+2)^(0+256),w
 11808  16FE  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 11809  16FF  3000               	movlw	0
 11810  1700  00B1               	movwf	___ftdiv@f1^(0+256)
 11811  1701  3034               	movlw	52
 11812  1702  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 11813  1703  3043               	movlw	67
 11814  1704  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 11815  1705  319A  22CE  3196   	fcall	___ftdiv
 11816  1708  0022               	movlb	2	; select bank2
 11817  1709  082E               	movf	?___ftdiv^(0+256),w
 11818  170A  00D1               	movwf	___ftmul@f2^(0+256)
 11819  170B  082F               	movf	(?___ftdiv+1)^(0+256),w
 11820  170C  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 11821  170D  0830               	movf	(?___ftdiv+2)^(0+256),w
 11822  170E  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 11823  170F  319C  24D5  3196   	fcall	___ftmul
 11824  1712  0022               	movlb	2	; select bank2
 11825  1713  084E               	movf	?___ftmul^(0+256),w
 11826  1714  0023               	movlb	3	; select bank3
 11827  1715  00BF               	movwf	modSin@shift^(0+384)
 11828  1716  0022               	movlb	2	; select bank2
 11829  1717  084F               	movf	(?___ftmul+1)^(0+256),w
 11830  1718  0023               	movlb	3	; select bank3
 11831  1719  00C0               	movwf	(modSin@shift+1)^(0+384)
 11832  171A  0022               	movlb	2	; select bank2
 11833  171B  0850               	movf	(?___ftmul+2)^(0+256),w
 11834  171C  0023               	movlb	3	; select bank3
 11835  171D  00C1               	movwf	(modSin@shift+2)^(0+384)
 11836                           
 11837                           ;modulation.c: 60: period = 180/(360-inflection);
 11838  171E  3000               	movlw	0
 11839  171F  0022               	movlb	2	; select bank2
 11840  1720  00C1               	movwf	___ftadd@f1^(0+256)
 11841  1721  30B4               	movlw	180
 11842  1722  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 11843  1723  3043               	movlw	67
 11844  1724  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 11845  1725  0023               	movlb	3	; select bank3
 11846  1726  0837               	movf	modSin@inflection^(0+384),w
 11847  1727  0022               	movlb	2	; select bank2
 11848  1728  00BE               	movwf	___ftneg@f1^(0+256)
 11849  1729  0023               	movlb	3	; select bank3
 11850  172A  0838               	movf	(modSin@inflection+1)^(0+384),w
 11851  172B  0022               	movlb	2	; select bank2
 11852  172C  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 11853  172D  0023               	movlb	3	; select bank3
 11854  172E  0839               	movf	(modSin@inflection+2)^(0+384),w
 11855  172F  0022               	movlb	2	; select bank2
 11856  1730  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 11857  1731  31AA  22E9  3196   	fcall	___ftneg
 11858  1734  0022               	movlb	2	; select bank2
 11859  1735  083E               	movf	?___ftneg^(0+256),w
 11860  1736  00C4               	movwf	___ftadd@f2^(0+256)
 11861  1737  083F               	movf	(?___ftneg+1)^(0+256),w
 11862  1738  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 11863  1739  0840               	movf	(?___ftneg+2)^(0+256),w
 11864  173A  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 11865  173B  3191  2116  3196   	fcall	___ftadd
 11866  173E  0022               	movlb	2	; select bank2
 11867  173F  0841               	movf	?___ftadd^(0+256),w
 11868  1740  00AE               	movwf	___ftdiv@f2^(0+256)
 11869  1741  0842               	movf	(?___ftadd+1)^(0+256),w
 11870  1742  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 11871  1743  0843               	movf	(?___ftadd+2)^(0+256),w
 11872  1744                     L12:	
 11873  1744  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 11874  1745  3000               	movlw	0
 11875  1746  00B1               	movwf	___ftdiv@f1^(0+256)
 11876  1747  3034               	movlw	52
 11877  1748  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 11878  1749  3043               	movlw	67
 11879  174A  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 11880  174B  319A  22CE  3196   	fcall	___ftdiv
 11881  174E  0022               	movlb	2	; select bank2
 11882  174F  082E               	movf	?___ftdiv^(0+256),w
 11883  1750  0023               	movlb	3	; select bank3
 11884  1751  00C2               	movwf	modSin@period^(0+384)
 11885  1752  0022               	movlb	2	; select bank2
 11886  1753  082F               	movf	(?___ftdiv+1)^(0+256),w
 11887  1754  0023               	movlb	3	; select bank3
 11888  1755  00C3               	movwf	(modSin@period+1)^(0+384)
 11889  1756  0022               	movlb	2	; select bank2
 11890  1757  0830               	movf	(?___ftdiv+2)^(0+256),w
 11891  1758  0023               	movlb	3	; select bank3
 11892  1759  00C4               	movwf	(modSin@period+2)^(0+384)
 11893                           
 11894                           ;modulation.c: 62: }
 11895                           ;modulation.c: 63: double tmpVal = (period*angle-shift) /3;
 11896  175A  3000               	movlw	0
 11897  175B  0022               	movlb	2	; select bank2
 11898  175C  00AE               	movwf	___ftdiv@f2^(0+256)
 11899  175D  3040               	movlw	64
 11900  175E  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 11901  175F  3040               	movlw	64
 11902  1760  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 11903  1761  0023               	movlb	3	; select bank3
 11904  1762  083F               	movf	modSin@shift^(0+384),w
 11905  1763  0022               	movlb	2	; select bank2
 11906  1764  00BE               	movwf	___ftneg@f1^(0+256)
 11907  1765  0023               	movlb	3	; select bank3
 11908  1766  0840               	movf	(modSin@shift+1)^(0+384),w
 11909  1767  0022               	movlb	2	; select bank2
 11910  1768  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 11911  1769  0023               	movlb	3	; select bank3
 11912  176A  0841               	movf	(modSin@shift+2)^(0+384),w
 11913  176B  0022               	movlb	2	; select bank2
 11914  176C  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 11915  176D  31AA  22E9  3196   	fcall	___ftneg
 11916  1770  0022               	movlb	2	; select bank2
 11917  1771  083E               	movf	?___ftneg^(0+256),w
 11918  1772  00C1               	movwf	___ftadd@f1^(0+256)
 11919  1773  083F               	movf	(?___ftneg+1)^(0+256),w
 11920  1774  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 11921  1775  0840               	movf	(?___ftneg+2)^(0+256),w
 11922  1776  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 11923  1777  0023               	movlb	3	; select bank3
 11924  1778  0834               	movf	modSin@angle^(0+384),w
 11925  1779  0022               	movlb	2	; select bank2
 11926  177A  00CE               	movwf	___ftmul@f1^(0+256)
 11927  177B  0023               	movlb	3	; select bank3
 11928  177C  0835               	movf	(modSin@angle+1)^(0+384),w
 11929  177D  0022               	movlb	2	; select bank2
 11930  177E  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 11931  177F  0023               	movlb	3	; select bank3
 11932  1780  0836               	movf	(modSin@angle+2)^(0+384),w
 11933  1781  0022               	movlb	2	; select bank2
 11934  1782  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 11935  1783  0023               	movlb	3	; select bank3
 11936  1784  0842               	movf	modSin@period^(0+384),w
 11937  1785  0022               	movlb	2	; select bank2
 11938  1786  00D1               	movwf	___ftmul@f2^(0+256)
 11939  1787  0023               	movlb	3	; select bank3
 11940  1788  0843               	movf	(modSin@period+1)^(0+384),w
 11941  1789  0022               	movlb	2	; select bank2
 11942  178A  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 11943  178B  0023               	movlb	3	; select bank3
 11944  178C  0844               	movf	(modSin@period+2)^(0+384),w
 11945  178D  0022               	movlb	2	; select bank2
 11946  178E  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 11947  178F  319C  24D5  3196   	fcall	___ftmul
 11948  1792  0022               	movlb	2	; select bank2
 11949  1793  084E               	movf	?___ftmul^(0+256),w
 11950  1794  00C4               	movwf	___ftadd@f2^(0+256)
 11951  1795  084F               	movf	(?___ftmul+1)^(0+256),w
 11952  1796  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 11953  1797  0850               	movf	(?___ftmul+2)^(0+256),w
 11954  1798  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 11955  1799  3191  2116  3196   	fcall	___ftadd
 11956  179C  0022               	movlb	2	; select bank2
 11957  179D  0841               	movf	?___ftadd^(0+256),w
 11958  179E  00B1               	movwf	___ftdiv@f1^(0+256)
 11959  179F  0842               	movf	(?___ftadd+1)^(0+256),w
 11960  17A0  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 11961  17A1  0843               	movf	(?___ftadd+2)^(0+256),w
 11962  17A2  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 11963  17A3  319A  22CE  3196   	fcall	___ftdiv
 11964  17A6  0022               	movlb	2	; select bank2
 11965  17A7  082E               	movf	?___ftdiv^(0+256),w
 11966  17A8  0023               	movlb	3	; select bank3
 11967  17A9  00C5               	movwf	modSin@tmpVal^(0+384)
 11968  17AA  0022               	movlb	2	; select bank2
 11969  17AB  082F               	movf	(?___ftdiv+1)^(0+256),w
 11970  17AC  0023               	movlb	3	; select bank3
 11971  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+384)
 11972  17AE  0022               	movlb	2	; select bank2
 11973  17AF  0830               	movf	(?___ftdiv+2)^(0+256),w
 11974  17B0  0023               	movlb	3	; select bank3
 11975  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+384)
 11976                           
 11977                           ;modulation.c: 64: tmpVal = sinArray[(int)(tmpVal)];
 11978  17B2  0845               	movf	modSin@tmpVal^(0+384),w
 11979  17B3  00A0               	movwf	___fttol@f1^(0+384)
 11980  17B4  0846               	movf	(modSin@tmpVal+1)^(0+384),w
 11981  17B5  00A1               	movwf	(___fttol@f1+1)^(0+384)
 11982  17B6  0847               	movf	(modSin@tmpVal+2)^(0+384),w
 11983  17B7  00A2               	movwf	(___fttol@f1+2)^(0+384)
 11984  17B8  31A6  2667  3196   	fcall	___fttol
 11985  17BB  0023               	movlb	3	; select bank3
 11986  17BC  0821               	movf	(?___fttol^(0+384)+1),w
 11987  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+384)
 11988  17BE  0820               	movf	?___fttol^(0+384),w
 11989  17BF  00AE               	movwf	___wmul@multiplier^(0+384)
 11990  17C0  3003               	movlw	3
 11991  17C1  00B0               	movwf	___wmul@multiplicand^(0+384)
 11992  17C2  3000               	movlw	0
 11993  17C3  00B1               	movwf	(___wmul@multiplicand^(0+384)+1)
 11994  17C4  31AB  23DF  3196   	fcall	___wmul
 11995  17C7  3082               	movlw	130
 11996  17C8  0023               	movlb	3	; select bank3
 11997  17C9  00BA               	movwf	??_modSin^(0+384)
 11998  17CA  3024               	movlw	36
 11999  17CB  00BB               	movwf	(??_modSin^(0+384)+1)
 12000  17CC  082E               	movf	?___wmul^(0+384),w
 12001  17CD  073A               	addwf	??_modSin^(0+384),w
 12002  17CE  0086               	movwf	6
 12003  17CF  082F               	movf	(?___wmul+1)^(0+384),w
 12004  17D0  3D3B               	addwfc	(??_modSin+1)^(0+384),w
 12005  17D1  0087               	movwf	7
 12006  17D2  3F40               	moviw [0]fsr1
 12007  17D3  00C5               	movwf	modSin@tmpVal^(0+384)
 12008  17D4  3F41               	moviw [1]fsr1
 12009  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+384)
 12010  17D6  3F42               	moviw [2]fsr1
 12011  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+384)
 12012                           
 12013                           ;modulation.c: 65: return (int)(100.0 * tmpVal);
 12014  17D8  0845               	movf	modSin@tmpVal^(0+384),w
 12015  17D9  0022               	movlb	2	; select bank2
 12016  17DA  00D1               	movwf	___ftmul@f2^(0+256)
 12017  17DB  0023               	movlb	3	; select bank3
 12018  17DC  0846               	movf	(modSin@tmpVal+1)^(0+384),w
 12019  17DD  0022               	movlb	2	; select bank2
 12020  17DE  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 12021  17DF  0023               	movlb	3	; select bank3
 12022  17E0  0847               	movf	(modSin@tmpVal+2)^(0+384),w
 12023  17E1  0022               	movlb	2	; select bank2
 12024  17E2  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 12025  17E3  3000               	movlw	0
 12026  17E4  00CE               	movwf	___ftmul@f1^(0+256)
 12027  17E5  30C8               	movlw	200
 12028  17E6  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 12029  17E7  3042               	movlw	66
 12030  17E8  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 12031  17E9  319C  24D5  3196   	fcall	___ftmul
 12032  17EC  0022               	movlb	2	; select bank2
 12033  17ED  084E               	movf	?___ftmul^(0+256),w
 12034  17EE  0023               	movlb	3	; select bank3
 12035  17EF  00A0               	movwf	___fttol@f1^(0+384)
 12036  17F0  0022               	movlb	2	; select bank2
 12037  17F1  084F               	movf	(?___ftmul+1)^(0+256),w
 12038  17F2  0023               	movlb	3	; select bank3
 12039  17F3  00A1               	movwf	(___fttol@f1+1)^(0+384)
 12040  17F4  0022               	movlb	2	; select bank2
 12041  17F5  0850               	movf	(?___ftmul+2)^(0+256),w
 12042  17F6  0023               	movlb	3	; select bank3
 12043  17F7  00A2               	movwf	(___fttol@f1+2)^(0+384)
 12044  17F8  31A6  2667         	fcall	___fttol
 12045  17FA  0023               	movlb	3	; select bank3
 12046  17FB  0821               	movf	(?___fttol^(0+384)+1),w
 12047  17FC  00B5               	movwf	(?_modSin+1)^(0+384)
 12048  17FD  0820               	movf	?___fttol^(0+384),w
 12049  17FE  00B4               	movwf	?_modSin^(0+384)
 12050  17FF  0008               	return
 12051  1800                     __end_of_modSin:	
 12052                           
 12053                           	psect	text29
 12054  2775                     __ptext29:	
 12055 ;; *************** function _map *****************
 12056 ;; Defined at:
 12057 ;;		line 177 in file "user.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;  x               3   62[BANK2 ] float 
 12060 ;;  in_min          3   65[BANK2 ] float 
 12061 ;;  in_max          3   68[BANK2 ] float 
 12062 ;;  out_min         3   71[BANK2 ] float 
 12063 ;;  out_max         3   74[BANK2 ] float 
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;		None
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  3   62[BANK2 ] float 
 12068 ;; Registers used:
 12069 ;;		wreg, status,2, status,0, pclath, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12075 ;;      Params:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12076 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12078 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12079 ;;Total ram usage:       18 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:    7
 12082 ;; This function calls:
 12083 ;;		___ftadd
 12084 ;;		___ftdiv
 12085 ;;		___ftmul
 12086 ;;		___ftneg
 12087 ;; This function is called by:
 12088 ;;		_main
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           
 12093                           ;psect for function _map
 12094  2775                     _map:	
 12095                           
 12096                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12097                           
 12098                           ;incstack = 0
 12099                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 12100  2775  0022               	movlb	2	; select bank2
 12101  2776  0864               	movf	map@in_max^(0+256),w
 12102  2777  00C1               	movwf	___ftadd@f1^(0+256)
 12103  2778  0865               	movf	(map@in_max+1)^(0+256),w
 12104  2779  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 12105  277A  0866               	movf	(map@in_max+2)^(0+256),w
 12106  277B  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 12107  277C  0861               	movf	map@in_min^(0+256),w
 12108  277D  00BE               	movwf	___ftneg@f1^(0+256)
 12109  277E  0862               	movf	(map@in_min+1)^(0+256),w
 12110  277F  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 12111  2780  0863               	movf	(map@in_min+2)^(0+256),w
 12112  2781  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 12113  2782  31AA  22E9  31A7   	fcall	___ftneg
 12114  2785  0022               	movlb	2	; select bank2
 12115  2786  083E               	movf	?___ftneg^(0+256),w
 12116  2787  00C4               	movwf	___ftadd@f2^(0+256)
 12117  2788  083F               	movf	(?___ftneg+1)^(0+256),w
 12118  2789  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 12119  278A  0840               	movf	(?___ftneg+2)^(0+256),w
 12120  278B  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 12121  278C  3191  2116  31A7   	fcall	___ftadd
 12122  278F  0022               	movlb	2	; select bank2
 12123  2790  0841               	movf	?___ftadd^(0+256),w
 12124  2791  00AE               	movwf	___ftdiv@f2^(0+256)
 12125  2792  0842               	movf	(?___ftadd+1)^(0+256),w
 12126  2793  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 12127  2794  0843               	movf	(?___ftadd+2)^(0+256),w
 12128  2795  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 12129  2796  086A               	movf	map@out_max^(0+256),w
 12130  2797  00C1               	movwf	___ftadd@f1^(0+256)
 12131  2798  086B               	movf	(map@out_max+1)^(0+256),w
 12132  2799  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 12133  279A  086C               	movf	(map@out_max+2)^(0+256),w
 12134  279B  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 12135  279C  0867               	movf	map@out_min^(0+256),w
 12136  279D  00BE               	movwf	___ftneg@f1^(0+256)
 12137  279E  0868               	movf	(map@out_min+1)^(0+256),w
 12138  279F  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 12139  27A0  0869               	movf	(map@out_min+2)^(0+256),w
 12140  27A1  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 12141  27A2  31AA  22E9  31A7   	fcall	___ftneg
 12142  27A5  0022               	movlb	2	; select bank2
 12143  27A6  083E               	movf	?___ftneg^(0+256),w
 12144  27A7  00C4               	movwf	___ftadd@f2^(0+256)
 12145  27A8  083F               	movf	(?___ftneg+1)^(0+256),w
 12146  27A9  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 12147  27AA  0840               	movf	(?___ftneg+2)^(0+256),w
 12148  27AB  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 12149  27AC  3191  2116  31A7   	fcall	___ftadd
 12150  27AF  0022               	movlb	2	; select bank2
 12151  27B0  0841               	movf	?___ftadd^(0+256),w
 12152  27B1  00CE               	movwf	___ftmul@f1^(0+256)
 12153  27B2  0842               	movf	(?___ftadd+1)^(0+256),w
 12154  27B3  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 12155  27B4  0843               	movf	(?___ftadd+2)^(0+256),w
 12156  27B5  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 12157  27B6  085E               	movf	map@x^(0+256),w
 12158  27B7  00C1               	movwf	___ftadd@f1^(0+256)
 12159  27B8  085F               	movf	(map@x+1)^(0+256),w
 12160  27B9  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 12161  27BA  0860               	movf	(map@x+2)^(0+256),w
 12162  27BB  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 12163  27BC  0861               	movf	map@in_min^(0+256),w
 12164  27BD  00BE               	movwf	___ftneg@f1^(0+256)
 12165  27BE  0862               	movf	(map@in_min+1)^(0+256),w
 12166  27BF  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 12167  27C0  0863               	movf	(map@in_min+2)^(0+256),w
 12168  27C1  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 12169  27C2  31AA  22E9  31A7   	fcall	___ftneg
 12170  27C5  0022               	movlb	2	; select bank2
 12171  27C6  083E               	movf	?___ftneg^(0+256),w
 12172  27C7  00C4               	movwf	___ftadd@f2^(0+256)
 12173  27C8  083F               	movf	(?___ftneg+1)^(0+256),w
 12174  27C9  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 12175  27CA  0840               	movf	(?___ftneg+2)^(0+256),w
 12176  27CB  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 12177  27CC  3191  2116  31A7   	fcall	___ftadd
 12178  27CF  0022               	movlb	2	; select bank2
 12179  27D0  0841               	movf	?___ftadd^(0+256),w
 12180  27D1  00D1               	movwf	___ftmul@f2^(0+256)
 12181  27D2  0842               	movf	(?___ftadd+1)^(0+256),w
 12182  27D3  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 12183  27D4  0843               	movf	(?___ftadd+2)^(0+256),w
 12184  27D5  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 12185  27D6  319C  24D5  31A7   	fcall	___ftmul
 12186  27D9  0022               	movlb	2	; select bank2
 12187  27DA  084E               	movf	?___ftmul^(0+256),w
 12188  27DB  00B1               	movwf	___ftdiv@f1^(0+256)
 12189  27DC  084F               	movf	(?___ftmul+1)^(0+256),w
 12190  27DD  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 12191  27DE  0850               	movf	(?___ftmul+2)^(0+256),w
 12192  27DF  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 12193  27E0  319A  22CE  31A7   	fcall	___ftdiv
 12194  27E3  0022               	movlb	2	; select bank2
 12195  27E4  082E               	movf	?___ftdiv^(0+256),w
 12196  27E5  00ED               	movwf	_map$2791^(0+256)
 12197  27E6  082F               	movf	(?___ftdiv+1)^(0+256),w
 12198  27E7  00EE               	movwf	(_map$2791+1)^(0+256)
 12199  27E8  0830               	movf	(?___ftdiv+2)^(0+256),w
 12200  27E9  00EF               	movwf	(_map$2791+2)^(0+256)
 12201                           
 12202                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 12203  27EA  0867               	movf	map@out_min^(0+256),w
 12204  27EB  00C1               	movwf	___ftadd@f1^(0+256)
 12205  27EC  0868               	movf	(map@out_min+1)^(0+256),w
 12206  27ED  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 12207  27EE  0869               	movf	(map@out_min+2)^(0+256),w
 12208  27EF  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 12209  27F0  086D               	movf	_map$2791^(0+256),w
 12210  27F1  00C4               	movwf	___ftadd@f2^(0+256)
 12211  27F2  086E               	movf	(_map$2791+1)^(0+256),w
 12212  27F3  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 12213  27F4  086F               	movf	(_map$2791+2)^(0+256),w
 12214  27F5  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 12215  27F6  3191  2116         	fcall	___ftadd
 12216  27F8  0022               	movlb	2	; select bank2
 12217  27F9  0841               	movf	?___ftadd^(0+256),w
 12218  27FA  00DE               	movwf	?_map^(0+256)
 12219  27FB  0842               	movf	(?___ftadd+1)^(0+256),w
 12220  27FC  00DF               	movwf	(?_map+1)^(0+256)
 12221  27FD  0843               	movf	(?___ftadd+2)^(0+256),w
 12222  27FE  00E0               	movwf	(?_map+2)^(0+256)
 12223  27FF  0008               	return
 12224  2800                     __end_of_map:	
 12225                           
 12226                           	psect	text30
 12227  2B14                     __ptext30:	
 12228 ;; *************** function _initSwitchBypass *****************
 12229 ;; Defined at:
 12230 ;;		line 29 in file "SwitchBypass.c"
 12231 ;; Parameters:    Size  Location     Type
 12232 ;;		None
 12233 ;; Auto vars:     Size  Location     Type
 12234 ;;  initState       2   22[BANK2 ] int 
 12235 ;; Return value:  Size  Location     Type
 12236 ;;                  1    wreg      void 
 12237 ;; Registers used:
 12238 ;;		wreg, status,2, status,0, pclath, cstack
 12239 ;; Tracked objects:
 12240 ;;		On entry : 0/0
 12241 ;;		On exit  : 0/0
 12242 ;;		Unchanged: 0/0
 12243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12245 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12247 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12248 ;;Total ram usage:        2 bytes
 12249 ;; Hardware stack levels used:    1
 12250 ;; Hardware stack levels required when called:    8
 12251 ;; This function calls:
 12252 ;;		_getSwitchBypassState
 12253 ;;		_setSwitchBypassState
 12254 ;; This function is called by:
 12255 ;;		_main
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           
 12260                           ;psect for function _initSwitchBypass
 12261  2B14                     _initSwitchBypass:	
 12262                           
 12263                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 12264                           
 12265                           ;incstack = 0
 12266                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 12267  2B14  31AA  22D3  31AB   	fcall	_getSwitchBypassState
 12268  2B17  0022               	movlb	2	; select bank2
 12269  2B18  0821               	movf	(?_getSwitchBypassState+1)^(0+256),w
 12270  2B19  00B7               	movwf	(initSwitchBypass@initState+1)^(0+256)
 12271  2B1A  0820               	movf	?_getSwitchBypassState^(0+256),w
 12272  2B1B  00B6               	movwf	initSwitchBypass@initState^(0+256)
 12273                           
 12274                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 12275  2B1C  0837               	movf	(initSwitchBypass@initState+1)^(0+256),w
 12276  2B1D  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+256)
 12277  2B1E  0836               	movf	initSwitchBypass@initState^(0+256),w
 12278  2B1F  00B2               	movwf	setSwitchBypassState@f_state^(0+256)
 12279  2B20  31A0  20AE         	fcall	_setSwitchBypassState
 12280  2B22  0008               	return
 12281  2B23                     __end_of_initSwitchBypass:	
 12282                           
 12283                           	psect	text31
 12284  20AE                     __ptext31:	
 12285 ;; *************** function _setSwitchBypassState *****************
 12286 ;; Defined at:
 12287 ;;		line 134 in file "SwitchBypass.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;  f_state         2   18[BANK2 ] int 
 12290 ;; Auto vars:     Size  Location     Type
 12291 ;;		None
 12292 ;; Return value:  Size  Location     Type
 12293 ;;                  1    wreg      void 
 12294 ;; Registers used:
 12295 ;;		wreg, status,2, status,0, pclath, cstack
 12296 ;; Tracked objects:
 12297 ;;		On entry : 0/0
 12298 ;;		On exit  : 0/0
 12299 ;;		Unchanged: 0/0
 12300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12301 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12303 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12304 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12305 ;;Total ram usage:        4 bytes
 12306 ;; Hardware stack levels used:    1
 12307 ;; Hardware stack levels required when called:    7
 12308 ;; This function calls:
 12309 ;;		_updateSwitchBypassState
 12310 ;;		_wait_ms
 12311 ;; This function is called by:
 12312 ;;		_initSwitchBypass
 12313 ;;		_updateSwitchBypass
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           
 12318                           ;psect for function _setSwitchBypassState
 12319  20AE                     _setSwitchBypassState:	
 12320                           
 12321                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 12322                           
 12323                           ;incstack = 0
 12324                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 12325  20AE  0021               	movlb	1	; select bank1
 12326  20AF  0861               	movf	_switchBypass_state^(0+128),w
 12327  20B0  0022               	movlb	2	; select bank2
 12328  20B1  00B4               	movwf	??_setSwitchBypassState^(0+256)
 12329  20B2  01B5               	clrf	(??_setSwitchBypassState^(0+256)+1)
 12330  20B3  0833               	movf	(setSwitchBypassState@f_state+1)^(0+256),w
 12331  20B4  0635               	xorwf	(??_setSwitchBypassState+1)^(0+256),w
 12332  20B5  1D03               	skipz
 12333  20B6  28B9               	goto	u9845
 12334  20B7  0832               	movf	setSwitchBypassState@f_state^(0+256),w
 12335  20B8  0634               	xorwf	??_setSwitchBypassState^(0+256),w
 12336  20B9                     u9845:	
 12337  20B9  1903               	btfsc	3,2
 12338  20BA  0008               	return
 12339                           
 12340                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 12341  20BB  0832               	movf	setSwitchBypassState@f_state^(0+256),w
 12342  20BC  00B4               	movwf	??_setSwitchBypassState^(0+256)
 12343  20BD  0834               	movf	??_setSwitchBypassState^(0+256),w
 12344  20BE  0021               	movlb	1	; select bank1
 12345  20BF  00E1               	movwf	_switchBypass_state^(0+128)
 12346                           
 12347                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 12348  20C0  0022               	movlb	2	; select bank2
 12349  20C1  0C32               	rrf	setSwitchBypassState@f_state^(0+256),w
 12350  20C2  1C03               	skipc
 12351  20C3  110D               	bcf	13,2	;volatile
 12352  20C4  1803               	skipnc
 12353  20C5  150D               	bsf	13,2	;volatile
 12354                           
 12355                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 12356  20C6  118D               	bcf	13,3	;volatile
 12357                           
 12358                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 12359  20C7  0C32               	rrf	setSwitchBypassState@f_state^(0+256),w
 12360  20C8  0027               	movlb	7	; select bank7
 12361  20C9  1C03               	skipc
 12362  20CA  110D               	bcf	13,2	;volatile
 12363  20CB  1803               	skipnc
 12364  20CC  150D               	bsf	13,2	;volatile
 12365                           
 12366                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 12367  20CD  0022               	movlb	2	; select bank2
 12368  20CE  0832               	movf	setSwitchBypassState@f_state^(0+256),w
 12369  20CF  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+256),w
 12370  20D0  1D03               	btfss	3,2
 12371  20D1  28D5               	goto	u9850
 12372  20D2  0027               	movlb	7	; select bank7
 12373  20D3  148D               	bsf	13,1	;volatile
 12374  20D4  28D7               	goto	l8719
 12375  20D5                     u9850:	
 12376  20D5  0027               	movlb	7	; select bank7
 12377  20D6  108D               	bcf	13,1	;volatile
 12378  20D7                     l8719:	
 12379                           
 12380                           ;SwitchBypass.c: 142: wait_ms(20);
 12381  20D7  3014               	movlw	20
 12382  20D8  0022               	movlb	2	; select bank2
 12383  20D9  00AC               	movwf	wait_ms@timeSec^(0+256)
 12384  20DA  3000               	movlw	0
 12385  20DB  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
 12386  20DC  31AD  25AC  31A0   	fcall	_wait_ms
 12387                           
 12388                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 12389  20DF  0027               	movlb	7	; select bank7
 12390  20E0  110D               	bcf	13,2	;volatile
 12391                           
 12392                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 12393  20E1  108D               	bcf	13,1	;volatile
 12394                           
 12395                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 12396  20E2  0021               	movlb	1	; select bank1
 12397  20E3  0861               	movf	_switchBypass_state^(0+128),w
 12398  20E4  0022               	movlb	2	; select bank2
 12399  20E5  00B4               	movwf	??_setSwitchBypassState^(0+256)
 12400  20E6  01B5               	clrf	(??_setSwitchBypassState^(0+256)+1)
 12401  20E7  0834               	movf	??_setSwitchBypassState^(0+256),w
 12402  20E8  00A0               	movwf	updateSwitchBypassState@state^(0+256)
 12403  20E9  0835               	movf	(??_setSwitchBypassState+1)^(0+256),w
 12404  20EA  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+256)
 12405  20EB  3198  2000  31A0   	fcall	_updateSwitchBypassState
 12406                           
 12407                           ;SwitchBypass.c: 148: wait_ms(20);
 12408  20EE  3014               	movlw	20
 12409  20EF  0022               	movlb	2	; select bank2
 12410  20F0  00AC               	movwf	wait_ms@timeSec^(0+256)
 12411  20F1  3000               	movlw	0
 12412  20F2  00AD               	movwf	(wait_ms@timeSec^(0+256)+1)
 12413  20F3  31AD  25AC         	fcall	_wait_ms
 12414  20F5  0008               	return
 12415  20F6                     __end_of_setSwitchBypassState:	
 12416                           
 12417                           	psect	text32
 12418  2DAC                     __ptext32:	
 12419 ;; *************** function _wait_ms *****************
 12420 ;; Defined at:
 12421 ;;		line 23 in file "system.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;  timeSec         2   12[BANK2 ] unsigned int 
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;  timemsl         4   14[BANK2 ] long 
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  1    wreg      void 
 12428 ;; Registers used:
 12429 ;;		wreg, status,2, status,0, pclath, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12435 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12436 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12438 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12439 ;;Total ram usage:        6 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    6
 12442 ;; This function calls:
 12443 ;;		___lmul
 12444 ;; This function is called by:
 12445 ;;		_ring_tactiles
 12446 ;;		_solidring_tactiles
 12447 ;;		_read_bottom_tactile
 12448 ;;		_read_top_tactile
 12449 ;;		_setSwitchBypassState
 12450 ;;		_setDoublePressState
 12451 ;;		_showError_Alternating
 12452 ;;		_show_error
 12453 ;;		_show_cancel
 12454 ;;		_star_tactiles
 12455 ;;		_initExpModeState
 12456 ;; This function uses a non-reentrant model
 12457 ;;
 12458                           
 12459                           
 12460                           ;psect for function _wait_ms
 12461  2DAC                     _wait_ms:	
 12462                           
 12463                           ;system.c: 25: long timemsl = 0;
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 12467  2DAC  3000               	movlw	0
 12468  2DAD  0022               	movlb	2	; select bank2
 12469  2DAE  00B1               	movwf	(wait_ms@timemsl+3)^(0+256)
 12470  2DAF  3000               	movlw	0
 12471  2DB0  00B0               	movwf	(wait_ms@timemsl+2)^(0+256)
 12472  2DB1  3000               	movlw	0
 12473  2DB2  00AF               	movwf	(wait_ms@timemsl+1)^(0+256)
 12474  2DB3  3000               	movlw	0
 12475  2DB4  00AE               	movwf	wait_ms@timemsl^(0+256)
 12476                           
 12477                           ;system.c: 26: timemsl = timeSec * 1000l;
 12478  2DB5  082C               	movf	wait_ms@timeSec^(0+256),w
 12479  2DB6  00A0               	movwf	___lmul@multiplier^(0+256)
 12480  2DB7  082D               	movf	(wait_ms@timeSec+1)^(0+256),w
 12481  2DB8  00A1               	movwf	(___lmul@multiplier^(0+256)+1)
 12482  2DB9  01A2               	clrf	(___lmul@multiplier^(0+256)+2)
 12483  2DBA  01A3               	clrf	(___lmul@multiplier^(0+256)+3)
 12484  2DBB  3000               	movlw	0
 12485  2DBC  00A7               	movwf	(___lmul@multiplicand+3)^(0+256)
 12486  2DBD  3000               	movlw	0
 12487  2DBE  00A6               	movwf	(___lmul@multiplicand+2)^(0+256)
 12488  2DBF  3003               	movlw	3
 12489  2DC0  00A5               	movwf	(___lmul@multiplicand+1)^(0+256)
 12490  2DC1  30E8               	movlw	232
 12491  2DC2  00A4               	movwf	___lmul@multiplicand^(0+256)
 12492  2DC3  31AD  257C  31AD   	fcall	___lmul
 12493  2DC6  0022               	movlb	2	; select bank2
 12494  2DC7  0823               	movf	(?___lmul+3)^(0+256),w
 12495  2DC8  00B1               	movwf	(wait_ms@timemsl+3)^(0+256)
 12496  2DC9  0822               	movf	(?___lmul+2)^(0+256),w
 12497  2DCA  00B0               	movwf	(wait_ms@timemsl+2)^(0+256)
 12498  2DCB  0821               	movf	(?___lmul+1)^(0+256),w
 12499  2DCC  00AF               	movwf	(wait_ms@timemsl+1)^(0+256)
 12500  2DCD  0820               	movf	?___lmul^(0+256),w
 12501  2DCE  00AE               	movwf	wait_ms@timemsl^(0+256)
 12502  2DCF                     l401:	
 12503                           ;system.c: 27: for( ; timemsl; timemsl--);
 12504                           
 12505  2DCF  0831               	movf	(wait_ms@timemsl+3)^(0+256),w
 12506  2DD0  0430               	iorwf	(wait_ms@timemsl+2)^(0+256),w
 12507  2DD1  042F               	iorwf	(wait_ms@timemsl+1)^(0+256),w
 12508  2DD2  042E               	iorwf	wait_ms@timemsl^(0+256),w
 12509  2DD3  1903               	btfsc	3,2
 12510  2DD4  0008               	return
 12511  2DD5  30FF               	movlw	255
 12512  2DD6  07AE               	addwf	wait_ms@timemsl^(0+256),f
 12513  2DD7  30FF               	movlw	255
 12514  2DD8  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+256),f
 12515  2DD9  30FF               	movlw	255
 12516  2DDA  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+256),f
 12517  2DDB  30FF               	movlw	255
 12518  2DDC  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+256),f
 12519  2DDD  2DCF               	goto	l401
 12520  2DDE                     __end_of_wait_ms:	
 12521                           
 12522                           	psect	text33
 12523  2D7C                     __ptext33:	
 12524 ;; *************** function ___lmul *****************
 12525 ;; Defined at:
 12526 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;  multiplier      4    0[BANK2 ] unsigned long 
 12529 ;;  multiplicand    4    4[BANK2 ] unsigned long 
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;  product         4    8[BANK2 ] unsigned long 
 12532 ;; Return value:  Size  Location     Type
 12533 ;;                  4    0[BANK2 ] unsigned long 
 12534 ;; Registers used:
 12535 ;;		wreg, status,2, status,0
 12536 ;; Tracked objects:
 12537 ;;		On entry : 0/0
 12538 ;;		On exit  : 0/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12541 ;;      Params:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12542 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12544 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12545 ;;Total ram usage:       12 bytes
 12546 ;; Hardware stack levels used:    1
 12547 ;; Hardware stack levels required when called:    5
 12548 ;; This function calls:
 12549 ;;		Nothing
 12550 ;; This function is called by:
 12551 ;;		_wait_ms
 12552 ;; This function uses a non-reentrant model
 12553 ;;
 12554                           
 12555                           
 12556                           ;psect for function ___lmul
 12557  2D7C                     ___lmul:	
 12558                           
 12559                           ;incstack = 0
 12560                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12561  2D7C  3000               	movlw	0
 12562  2D7D  0022               	movlb	2	; select bank2
 12563  2D7E  00AB               	movwf	(___lmul@product+3)^(0+256)
 12564  2D7F  3000               	movlw	0
 12565  2D80  00AA               	movwf	(___lmul@product+2)^(0+256)
 12566  2D81  3000               	movlw	0
 12567  2D82  00A9               	movwf	(___lmul@product+1)^(0+256)
 12568  2D83  3000               	movlw	0
 12569  2D84  00A8               	movwf	___lmul@product^(0+256)
 12570  2D85                     l7959:	
 12571  2D85  1C20               	btfss	___lmul@multiplier^(0+256),0
 12572  2D86  2D8F               	goto	l7963
 12573  2D87  0824               	movf	___lmul@multiplicand^(0+256),w
 12574  2D88  07A8               	addwf	___lmul@product^(0+256),f
 12575  2D89  0825               	movf	(___lmul@multiplicand+1)^(0+256),w
 12576  2D8A  3DA9               	addwfc	(___lmul@product+1)^(0+256),f
 12577  2D8B  0826               	movf	(___lmul@multiplicand+2)^(0+256),w
 12578  2D8C  3DAA               	addwfc	(___lmul@product+2)^(0+256),f
 12579  2D8D  0827               	movf	(___lmul@multiplicand+3)^(0+256),w
 12580  2D8E  3DAB               	addwfc	(___lmul@product+3)^(0+256),f
 12581  2D8F                     l7963:	
 12582  2D8F  3001               	movlw	1
 12583  2D90                     u8675:	
 12584  2D90  35A4               	lslf	___lmul@multiplicand^(0+256),f
 12585  2D91  0DA5               	rlf	(___lmul@multiplicand+1)^(0+256),f
 12586  2D92  0DA6               	rlf	(___lmul@multiplicand+2)^(0+256),f
 12587  2D93  0DA7               	rlf	(___lmul@multiplicand+3)^(0+256),f
 12588  2D94  0B89               	decfsz	9,f
 12589  2D95  2D90               	goto	u8675
 12590  2D96  3001               	movlw	1
 12591  2D97                     u8685:	
 12592  2D97  36A3               	lsrf	(___lmul@multiplier+3)^(0+256),f
 12593  2D98  0CA2               	rrf	(___lmul@multiplier+2)^(0+256),f
 12594  2D99  0CA1               	rrf	(___lmul@multiplier+1)^(0+256),f
 12595  2D9A  0CA0               	rrf	___lmul@multiplier^(0+256),f
 12596  2D9B  0B89               	decfsz	9,f
 12597  2D9C  2D97               	goto	u8685
 12598  2D9D  0823               	movf	(___lmul@multiplier+3)^(0+256),w
 12599  2D9E  0422               	iorwf	(___lmul@multiplier+2)^(0+256),w
 12600  2D9F  0421               	iorwf	(___lmul@multiplier+1)^(0+256),w
 12601  2DA0  0420               	iorwf	___lmul@multiplier^(0+256),w
 12602  2DA1  1D03               	skipz
 12603  2DA2  2D85               	goto	l7959
 12604  2DA3  082B               	movf	(___lmul@product+3)^(0+256),w
 12605  2DA4  00A3               	movwf	(?___lmul+3)^(0+256)
 12606  2DA5  082A               	movf	(___lmul@product+2)^(0+256),w
 12607  2DA6  00A2               	movwf	(?___lmul+2)^(0+256)
 12608  2DA7  0829               	movf	(___lmul@product+1)^(0+256),w
 12609  2DA8  00A1               	movwf	(?___lmul+1)^(0+256)
 12610  2DA9  0828               	movf	___lmul@product^(0+256),w
 12611  2DAA  00A0               	movwf	?___lmul^(0+256)
 12612  2DAB  0008               	return
 12613  2DAC                     __end_of___lmul:	
 12614                           
 12615                           	psect	text34
 12616  1800                     __ptext34:	
 12617 ;; *************** function _updateSwitchBypassState *****************
 12618 ;; Defined at:
 12619 ;;		line 96 in file "state_manager.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  state           2    0[BANK2 ] int 
 12622 ;; Auto vars:     Size  Location     Type
 12623 ;;		None
 12624 ;; Return value:  Size  Location     Type
 12625 ;;                  1    wreg      void 
 12626 ;; Registers used:
 12627 ;;		None
 12628 ;; Tracked objects:
 12629 ;;		On entry : 0/0
 12630 ;;		On exit  : 0/0
 12631 ;;		Unchanged: 0/0
 12632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12633 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12636 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12637 ;;Total ram usage:        2 bytes
 12638 ;; Hardware stack levels used:    1
 12639 ;; Hardware stack levels required when called:    5
 12640 ;; This function calls:
 12641 ;;		Nothing
 12642 ;; This function is called by:
 12643 ;;		_setSwitchBypassState
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           
 12648                           ;psect for function _updateSwitchBypassState
 12649  1800                     _updateSwitchBypassState:	
 12650                           
 12651                           ;incstack = 0
 12652                           ; Regs used in _updateSwitchBypassState: []
 12653  1800  0008               	return
 12654  1801                     __end_of_updateSwitchBypassState:	
 12655                           
 12656                           	psect	text35
 12657  2AD3                     __ptext35:	
 12658 ;; *************** function _getSwitchBypassState *****************
 12659 ;; Defined at:
 12660 ;;		line 103 in file "state_manager.c"
 12661 ;; Parameters:    Size  Location     Type
 12662 ;;		None
 12663 ;; Auto vars:     Size  Location     Type
 12664 ;;		None
 12665 ;; Return value:  Size  Location     Type
 12666 ;;                  2    0[BANK2 ] int 
 12667 ;; Registers used:
 12668 ;;		status,2
 12669 ;; Tracked objects:
 12670 ;;		On entry : 0/0
 12671 ;;		On exit  : 0/0
 12672 ;;		Unchanged: 0/0
 12673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12674 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12677 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12678 ;;Total ram usage:        2 bytes
 12679 ;; Hardware stack levels used:    1
 12680 ;; Hardware stack levels required when called:    5
 12681 ;; This function calls:
 12682 ;;		Nothing
 12683 ;; This function is called by:
 12684 ;;		_initSwitchBypass
 12685 ;; This function uses a non-reentrant model
 12686 ;;
 12687                           
 12688                           
 12689                           ;psect for function _getSwitchBypassState
 12690  2AD3                     _getSwitchBypassState:	
 12691                           
 12692                           ;state_manager.c: 108: return 0;
 12693                           
 12694                           ;incstack = 0
 12695                           ; Regs used in _getSwitchBypassState: [status,2]
 12696  2AD3  0022               	movlb	2	; select bank2
 12697  2AD4  01A0               	clrf	?_getSwitchBypassState^(0+256)
 12698  2AD5  01A1               	clrf	(?_getSwitchBypassState+1)^(0+256)
 12699  2AD6  0008               	return
 12700  2AD7                     __end_of_getSwitchBypassState:	
 12701                           
 12702                           	psect	text36
 12703  26EE                     __ptext36:	
 12704 ;; *************** function _calcSinArray *****************
 12705 ;; Defined at:
 12706 ;;		line 15 in file "modulation.c"
 12707 ;; Parameters:    Size  Location     Type
 12708 ;;		None
 12709 ;; Auto vars:     Size  Location     Type
 12710 ;;  tmpVal          3   56[BANK3 ] int 
 12711 ;;  iAngle          1   59[BANK3 ] unsigned char 
 12712 ;;  x               1   55[BANK3 ] unsigned char 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12723 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12724 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12725 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12726 ;;Total ram usage:        9 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    9
 12729 ;; This function calls:
 12730 ;;		___awtoft
 12731 ;;		___ftdiv
 12732 ;;		___ftmul
 12733 ;;		___wmul
 12734 ;;		_sin
 12735 ;; This function is called by:
 12736 ;;		_main
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           
 12741                           ;psect for function _calcSinArray
 12742  26EE                     _calcSinArray:	
 12743                           
 12744                           ;modulation.c: 16: for (char iAngle = 0; iAngle < 120; iAngle++) {
 12745                           
 12746                           ;incstack = 0
 12747                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12748  26EE  0023               	movlb	3	; select bank3
 12749  26EF  01DB               	clrf	calcSinArray@iAngle^(0+384)
 12750  26F0  3078               	movlw	120
 12751  26F1  025B               	subwf	calcSinArray@iAngle^(0+384),w
 12752  26F2  1803               	btfsc	3,0
 12753  26F3  2F72               	goto	l1889
 12754  26F4                     l8867:	
 12755                           
 12756                           ;modulation.c: 17: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 12757  26F4  3000               	movlw	0
 12758  26F5  0022               	movlb	2	; select bank2
 12759  26F6  00AE               	movwf	___ftdiv@f2^(0+256)
 12760  26F7  3034               	movlw	52
 12761  26F8  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 12762  26F9  3043               	movlw	67
 12763  26FA  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 12764  26FB  3010               	movlw	16
 12765  26FC  00CE               	movwf	___ftmul@f1^(0+256)
 12766  26FD  3049               	movlw	73
 12767  26FE  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 12768  26FF  3040               	movlw	64
 12769  2700  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 12770  2701  0023               	movlb	3	; select bank3
 12771  2702  085B               	movf	calcSinArray@iAngle^(0+384),w
 12772  2703  00D3               	movwf	??_calcSinArray^(0+384)
 12773  2704  01D4               	clrf	(??_calcSinArray^(0+384)+1)
 12774  2705  0853               	movf	??_calcSinArray^(0+384),w
 12775  2706  00AE               	movwf	___wmul@multiplier^(0+384)
 12776  2707  0854               	movf	(??_calcSinArray+1)^(0+384),w
 12777  2708  00AF               	movwf	(___wmul@multiplier+1)^(0+384)
 12778  2709  3003               	movlw	3
 12779  270A  00B0               	movwf	___wmul@multiplicand^(0+384)
 12780  270B  3000               	movlw	0
 12781  270C  00B1               	movwf	(___wmul@multiplicand^(0+384)+1)
 12782  270D  31AB  23DF  31A6   	fcall	___wmul
 12783  2710  0023               	movlb	3	; select bank3
 12784  2711  082F               	movf	(?___wmul+1)^(0+384),w
 12785  2712  0022               	movlb	2	; select bank2
 12786  2713  00A9               	movwf	(___awtoft@c+1)^(0+256)
 12787  2714  0023               	movlb	3	; select bank3
 12788  2715  082E               	movf	?___wmul^(0+384),w
 12789  2716  0022               	movlb	2	; select bank2
 12790  2717  00A8               	movwf	___awtoft@c^(0+256)
 12791  2718  31A0  2000  31A6   	fcall	___awtoft
 12792  271B  0022               	movlb	2	; select bank2
 12793  271C  0828               	movf	?___awtoft^(0+256),w
 12794  271D  00D1               	movwf	___ftmul@f2^(0+256)
 12795  271E  0829               	movf	(?___awtoft+1)^(0+256),w
 12796  271F  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 12797  2720  082A               	movf	(?___awtoft+2)^(0+256),w
 12798  2721  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 12799  2722  319C  24D5  31A6   	fcall	___ftmul
 12800  2725  0022               	movlb	2	; select bank2
 12801  2726  084E               	movf	?___ftmul^(0+256),w
 12802  2727  00B1               	movwf	___ftdiv@f1^(0+256)
 12803  2728  084F               	movf	(?___ftmul+1)^(0+256),w
 12804  2729  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 12805  272A  0850               	movf	(?___ftmul+2)^(0+256),w
 12806  272B  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 12807  272C  319A  22CE  31A6   	fcall	___ftdiv
 12808  272F  0022               	movlb	2	; select bank2
 12809  2730  082E               	movf	?___ftdiv^(0+256),w
 12810  2731  0023               	movlb	3	; select bank3
 12811  2732  00D8               	movwf	calcSinArray@tmpVal^(0+384)
 12812  2733  0022               	movlb	2	; select bank2
 12813  2734  082F               	movf	(?___ftdiv+1)^(0+256),w
 12814  2735  0023               	movlb	3	; select bank3
 12815  2736  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+384)
 12816  2737  0022               	movlb	2	; select bank2
 12817  2738  0830               	movf	(?___ftdiv+2)^(0+256),w
 12818  2739  0023               	movlb	3	; select bank3
 12819  273A  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+384)
 12820                           
 12821                           ;modulation.c: 18: tmpVal = sin(tmpVal);
 12822  273B  0858               	movf	calcSinArray@tmpVal^(0+384),w
 12823  273C  00C5               	movwf	sin@f^(0+384)
 12824  273D  0859               	movf	(calcSinArray@tmpVal+1)^(0+384),w
 12825  273E  00C6               	movwf	(sin@f+1)^(0+384)
 12826  273F  085A               	movf	(calcSinArray@tmpVal+2)^(0+384),w
 12827  2740  00C7               	movwf	(sin@f+2)^(0+384)
 12828  2741  318A  223B  31A6   	fcall	_sin
 12829  2744  0023               	movlb	3	; select bank3
 12830  2745  0845               	movf	?_sin^(0+384),w
 12831  2746  00D8               	movwf	calcSinArray@tmpVal^(0+384)
 12832  2747  0846               	movf	(?_sin+1)^(0+384),w
 12833  2748  00D9               	movwf	(calcSinArray@tmpVal+1)^(0+384)
 12834  2749  0847               	movf	(?_sin+2)^(0+384),w
 12835  274A  00DA               	movwf	(calcSinArray@tmpVal+2)^(0+384)
 12836                           
 12837                           ;modulation.c: 19: sinArray[iAngle] = tmpVal;
 12838  274B  085B               	movf	calcSinArray@iAngle^(0+384),w
 12839  274C  00D3               	movwf	??_calcSinArray^(0+384)
 12840  274D  01D4               	clrf	(??_calcSinArray^(0+384)+1)
 12841  274E  0853               	movf	??_calcSinArray^(0+384),w
 12842  274F  00AE               	movwf	___wmul@multiplier^(0+384)
 12843  2750  0854               	movf	(??_calcSinArray+1)^(0+384),w
 12844  2751  00AF               	movwf	(___wmul@multiplier+1)^(0+384)
 12845  2752  3003               	movlw	3
 12846  2753  00B0               	movwf	___wmul@multiplicand^(0+384)
 12847  2754  3000               	movlw	0
 12848  2755  00B1               	movwf	(___wmul@multiplicand^(0+384)+1)
 12849  2756  31AB  23DF  31A6   	fcall	___wmul
 12850  2759  3082               	movlw	130
 12851  275A  0023               	movlb	3	; select bank3
 12852  275B  00D5               	movwf	(??_calcSinArray+2)^(0+384)
 12853  275C  3024               	movlw	36
 12854  275D  00D6               	movwf	((??_calcSinArray+2)^(0+384)+1)
 12855  275E  082E               	movf	?___wmul^(0+384),w
 12856  275F  0755               	addwf	(??_calcSinArray+2)^(0+384),w
 12857  2760  0086               	movwf	6
 12858  2761  082F               	movf	(?___wmul+1)^(0+384),w
 12859  2762  3D56               	addwfc	(??_calcSinArray+3)^(0+384),w
 12860  2763  0087               	movwf	7
 12861  2764  0858               	movf	calcSinArray@tmpVal^(0+384),w
 12862  2765  3FC0               	movwi [0]fsr1
 12863  2766  0859               	movf	(calcSinArray@tmpVal+1)^(0+384),w
 12864  2767  3FC1               	movwi [1]fsr1
 12865  2768  085A               	movf	(calcSinArray@tmpVal+2)^(0+384),w
 12866  2769  3FC2               	movwi [2]fsr1
 12867  276A  3001               	movlw	1
 12868  276B  00D3               	movwf	??_calcSinArray^(0+384)
 12869  276C  0853               	movf	??_calcSinArray^(0+384),w
 12870  276D  07DB               	addwf	calcSinArray@iAngle^(0+384),f
 12871  276E  3078               	movlw	120
 12872  276F  025B               	subwf	calcSinArray@iAngle^(0+384),w
 12873  2770  1C03               	skipc
 12874  2771  2EF4               	goto	l8867
 12875  2772                     l1889:	
 12876                           
 12877                           ;modulation.c: 20: }
 12878                           ;modulation.c: 21: char x = 1;
 12879  2772  01D7               	clrf	calcSinArray@x^(0+384)
 12880  2773  0AD7               	incf	calcSinArray@x^(0+384),f
 12881  2774  0008               	return
 12882  2775                     __end_of_calcSinArray:	
 12883                           
 12884                           	psect	text37
 12885  0A3B                     __ptext37:	
 12886 ;; *************** function _sin *****************
 12887 ;; Defined at:
 12888 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;  f               3   37[BANK3 ] void 
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;  x2              3   47[BANK3 ] void 
 12893 ;;  y               3   41[BANK3 ] void 
 12894 ;;  sgn             1   50[BANK3 ] unsigned char 
 12895 ;; Return value:  Size  Location     Type
 12896 ;;                  3   37[BANK3 ] unsigned char 
 12897 ;; Registers used:
 12898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12899 ;; Tracked objects:
 12900 ;;		On entry : 0/0
 12901 ;;		On exit  : 0/0
 12902 ;;		Unchanged: 0/0
 12903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12904 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12905 ;;      Locals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12906 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12907 ;;      Totals:         0       0       0       0      14       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12908 ;;Total ram usage:       14 bytes
 12909 ;; Hardware stack levels used:    1
 12910 ;; Hardware stack levels required when called:    8
 12911 ;; This function calls:
 12912 ;;		___ftadd
 12913 ;;		___ftdiv
 12914 ;;		___ftge
 12915 ;;		___ftmul
 12916 ;;		___ftneg
 12917 ;;		___ftsub
 12918 ;;		_eval_poly
 12919 ;;		_floor
 12920 ;; This function is called by:
 12921 ;;		_calcSinArray
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           
 12926                           ;psect for function _sin
 12927  0A3B                     _sin:	
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12931  0A3B  0023               	movlb	3	; select bank3
 12932  0A3C  01D2               	clrf	sin@sgn^(0+384)
 12933  0A3D  0845               	movf	sin@f^(0+384),w
 12934  0A3E  0022               	movlb	2	; select bank2
 12935  0A3F  00A0               	movwf	___ftge@ff1^(0+256)
 12936  0A40  0023               	movlb	3	; select bank3
 12937  0A41  0846               	movf	(sin@f+1)^(0+384),w
 12938  0A42  0022               	movlb	2	; select bank2
 12939  0A43  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 12940  0A44  0023               	movlb	3	; select bank3
 12941  0A45  0847               	movf	(sin@f+2)^(0+384),w
 12942  0A46  0022               	movlb	2	; select bank2
 12943  0A47  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 12944  0A48  3000               	movlw	0
 12945  0A49  00A3               	movwf	___ftge@ff2^(0+256)
 12946  0A4A  3000               	movlw	0
 12947  0A4B  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 12948  0A4C  3000               	movlw	0
 12949  0A4D  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 12950  0A4E  31AE  2685  318A   	fcall	___ftge
 12951  0A51  1803               	btfsc	3,0
 12952  0A52  2A70               	goto	l8781
 12953  0A53  0023               	movlb	3	; select bank3
 12954  0A54  0845               	movf	sin@f^(0+384),w
 12955  0A55  0022               	movlb	2	; select bank2
 12956  0A56  00BE               	movwf	___ftneg@f1^(0+256)
 12957  0A57  0023               	movlb	3	; select bank3
 12958  0A58  0846               	movf	(sin@f+1)^(0+384),w
 12959  0A59  0022               	movlb	2	; select bank2
 12960  0A5A  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 12961  0A5B  0023               	movlb	3	; select bank3
 12962  0A5C  0847               	movf	(sin@f+2)^(0+384),w
 12963  0A5D  0022               	movlb	2	; select bank2
 12964  0A5E  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 12965  0A5F  31AA  22E9  318A   	fcall	___ftneg
 12966  0A62  0022               	movlb	2	; select bank2
 12967  0A63  083E               	movf	?___ftneg^(0+256),w
 12968  0A64  0023               	movlb	3	; select bank3
 12969  0A65  00C5               	movwf	sin@f^(0+384)
 12970  0A66  0022               	movlb	2	; select bank2
 12971  0A67  083F               	movf	(?___ftneg+1)^(0+256),w
 12972  0A68  0023               	movlb	3	; select bank3
 12973  0A69  00C6               	movwf	(sin@f+1)^(0+384)
 12974  0A6A  0022               	movlb	2	; select bank2
 12975  0A6B  0840               	movf	(?___ftneg+2)^(0+256),w
 12976  0A6C  0023               	movlb	3	; select bank3
 12977  0A6D  00C7               	movwf	(sin@f+2)^(0+384)
 12978  0A6E  01D2               	clrf	sin@sgn^(0+384)
 12979  0A6F  0AD2               	incf	sin@sgn^(0+384),f
 12980  0A70                     l8781:	
 12981  0A70  30FA               	movlw	250
 12982  0A71  0022               	movlb	2	; select bank2
 12983  0A72  00CE               	movwf	___ftmul@f1^(0+256)
 12984  0A73  3022               	movlw	34
 12985  0A74  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 12986  0A75  303E               	movlw	62
 12987  0A76  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 12988  0A77  0023               	movlb	3	; select bank3
 12989  0A78  0845               	movf	sin@f^(0+384),w
 12990  0A79  0022               	movlb	2	; select bank2
 12991  0A7A  00D1               	movwf	___ftmul@f2^(0+256)
 12992  0A7B  0023               	movlb	3	; select bank3
 12993  0A7C  0846               	movf	(sin@f+1)^(0+384),w
 12994  0A7D  0022               	movlb	2	; select bank2
 12995  0A7E  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 12996  0A7F  0023               	movlb	3	; select bank3
 12997  0A80  0847               	movf	(sin@f+2)^(0+384),w
 12998  0A81  0022               	movlb	2	; select bank2
 12999  0A82  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 13000  0A83  319C  24D5  318A   	fcall	___ftmul
 13001  0A86  0022               	movlb	2	; select bank2
 13002  0A87  084E               	movf	?___ftmul^(0+256),w
 13003  0A88  0023               	movlb	3	; select bank3
 13004  0A89  00C5               	movwf	sin@f^(0+384)
 13005  0A8A  0022               	movlb	2	; select bank2
 13006  0A8B  084F               	movf	(?___ftmul+1)^(0+256),w
 13007  0A8C  0023               	movlb	3	; select bank3
 13008  0A8D  00C6               	movwf	(sin@f+1)^(0+384)
 13009  0A8E  0022               	movlb	2	; select bank2
 13010  0A8F  0850               	movf	(?___ftmul+2)^(0+256),w
 13011  0A90  0023               	movlb	3	; select bank3
 13012  0A91  00C7               	movwf	(sin@f+2)^(0+384)
 13013  0A92  0845               	movf	sin@f^(0+384),w
 13014  0A93  00B6               	movwf	floor@x^(0+384)
 13015  0A94  0846               	movf	(sin@f+1)^(0+384),w
 13016  0A95  00B7               	movwf	(floor@x+1)^(0+384)
 13017  0A96  0847               	movf	(sin@f+2)^(0+384),w
 13018  0A97  00B8               	movwf	(floor@x+2)^(0+384)
 13019  0A98  3199  217E  318A   	fcall	_floor
 13020  0A9B  0023               	movlb	3	; select bank3
 13021  0A9C  0836               	movf	?_floor^(0+384),w
 13022  0A9D  00BF               	movwf	___ftsub@f2^(0+384)
 13023  0A9E  0837               	movf	(?_floor+1)^(0+384),w
 13024  0A9F  00C0               	movwf	(___ftsub@f2+1)^(0+384)
 13025  0AA0  0838               	movf	(?_floor+2)^(0+384),w
 13026  0AA1  00C1               	movwf	(___ftsub@f2+2)^(0+384)
 13027  0AA2  0845               	movf	sin@f^(0+384),w
 13028  0AA3  00C2               	movwf	___ftsub@f1^(0+384)
 13029  0AA4  0846               	movf	(sin@f+1)^(0+384),w
 13030  0AA5  00C3               	movwf	(___ftsub@f1+1)^(0+384)
 13031  0AA6  0847               	movf	(sin@f+2)^(0+384),w
 13032  0AA7  00C4               	movwf	(___ftsub@f1+2)^(0+384)
 13033  0AA8  31AC  24EF  318A   	fcall	___ftsub
 13034  0AAB  0023               	movlb	3	; select bank3
 13035  0AAC  083F               	movf	?___ftsub^(0+384),w
 13036  0AAD  00C5               	movwf	sin@f^(0+384)
 13037  0AAE  0840               	movf	(?___ftsub+1)^(0+384),w
 13038  0AAF  00C6               	movwf	(sin@f+1)^(0+384)
 13039  0AB0  0841               	movf	(?___ftsub+2)^(0+384),w
 13040  0AB1  00C7               	movwf	(sin@f+2)^(0+384)
 13041  0AB2  3000               	movlw	0
 13042  0AB3  0022               	movlb	2	; select bank2
 13043  0AB4  00CE               	movwf	___ftmul@f1^(0+256)
 13044  0AB5  3080               	movlw	128
 13045  0AB6  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 13046  0AB7  3040               	movlw	64
 13047  0AB8  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 13048  0AB9  0023               	movlb	3	; select bank3
 13049  0ABA  0845               	movf	sin@f^(0+384),w
 13050  0ABB  0022               	movlb	2	; select bank2
 13051  0ABC  00D1               	movwf	___ftmul@f2^(0+256)
 13052  0ABD  0023               	movlb	3	; select bank3
 13053  0ABE  0846               	movf	(sin@f+1)^(0+384),w
 13054  0ABF  0022               	movlb	2	; select bank2
 13055  0AC0  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 13056  0AC1  0023               	movlb	3	; select bank3
 13057  0AC2  0847               	movf	(sin@f+2)^(0+384),w
 13058  0AC3  0022               	movlb	2	; select bank2
 13059  0AC4  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 13060  0AC5  319C  24D5  318A   	fcall	___ftmul
 13061  0AC8  0022               	movlb	2	; select bank2
 13062  0AC9  084E               	movf	?___ftmul^(0+256),w
 13063  0ACA  0023               	movlb	3	; select bank3
 13064  0ACB  00C5               	movwf	sin@f^(0+384)
 13065  0ACC  0022               	movlb	2	; select bank2
 13066  0ACD  084F               	movf	(?___ftmul+1)^(0+256),w
 13067  0ACE  0023               	movlb	3	; select bank3
 13068  0ACF  00C6               	movwf	(sin@f+1)^(0+384)
 13069  0AD0  0022               	movlb	2	; select bank2
 13070  0AD1  0850               	movf	(?___ftmul+2)^(0+256),w
 13071  0AD2  0023               	movlb	3	; select bank3
 13072  0AD3  00C7               	movwf	(sin@f+2)^(0+384)
 13073  0AD4  3000               	movlw	0
 13074  0AD5  0022               	movlb	2	; select bank2
 13075  0AD6  00A0               	movwf	___ftge@ff1^(0+256)
 13076  0AD7  3000               	movlw	0
 13077  0AD8  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 13078  0AD9  3040               	movlw	64
 13079  0ADA  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 13080  0ADB  0023               	movlb	3	; select bank3
 13081  0ADC  0845               	movf	sin@f^(0+384),w
 13082  0ADD  0022               	movlb	2	; select bank2
 13083  0ADE  00A3               	movwf	___ftge@ff2^(0+256)
 13084  0ADF  0023               	movlb	3	; select bank3
 13085  0AE0  0846               	movf	(sin@f+1)^(0+384),w
 13086  0AE1  0022               	movlb	2	; select bank2
 13087  0AE2  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 13088  0AE3  0023               	movlb	3	; select bank3
 13089  0AE4  0847               	movf	(sin@f+2)^(0+384),w
 13090  0AE5  0022               	movlb	2	; select bank2
 13091  0AE6  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 13092  0AE7  31AE  2685  318A   	fcall	___ftge
 13093  0AEA  1803               	btfsc	3,0
 13094  0AEB  2B0C               	goto	l8793
 13095  0AEC  3000               	movlw	0
 13096  0AED  0023               	movlb	3	; select bank3
 13097  0AEE  00BF               	movwf	___ftsub@f2^(0+384)
 13098  0AEF  3000               	movlw	0
 13099  0AF0  00C0               	movwf	(___ftsub@f2+1)^(0+384)
 13100  0AF1  3040               	movlw	64
 13101  0AF2  00C1               	movwf	(___ftsub@f2+2)^(0+384)
 13102  0AF3  0845               	movf	sin@f^(0+384),w
 13103  0AF4  00C2               	movwf	___ftsub@f1^(0+384)
 13104  0AF5  0846               	movf	(sin@f+1)^(0+384),w
 13105  0AF6  00C3               	movwf	(___ftsub@f1+1)^(0+384)
 13106  0AF7  0847               	movf	(sin@f+2)^(0+384),w
 13107  0AF8  00C4               	movwf	(___ftsub@f1+2)^(0+384)
 13108  0AF9  31AC  24EF  318A   	fcall	___ftsub
 13109  0AFC  0023               	movlb	3	; select bank3
 13110  0AFD  083F               	movf	?___ftsub^(0+384),w
 13111  0AFE  00C5               	movwf	sin@f^(0+384)
 13112  0AFF  0840               	movf	(?___ftsub+1)^(0+384),w
 13113  0B00  00C6               	movwf	(sin@f+1)^(0+384)
 13114  0B01  0841               	movf	(?___ftsub+2)^(0+384),w
 13115  0B02  00C7               	movwf	(sin@f+2)^(0+384)
 13116  0B03  0852               	movf	sin@sgn^(0+384),w
 13117  0B04  1D03               	btfss	3,2
 13118  0B05  2B08               	goto	u9950
 13119  0B06  3001               	movlw	1
 13120  0B07  2B09               	goto	u9960
 13121  0B08                     u9950:	
 13122  0B08  3000               	movlw	0
 13123  0B09                     u9960:	
 13124  0B09  00C8               	movwf	??_sin^(0+384)
 13125  0B0A  0848               	movf	??_sin^(0+384),w
 13126  0B0B  00D2               	movwf	sin@sgn^(0+384)
 13127  0B0C                     l8793:	
 13128  0B0C  3000               	movlw	0
 13129  0B0D  0022               	movlb	2	; select bank2
 13130  0B0E  00A0               	movwf	___ftge@ff1^(0+256)
 13131  0B0F  3080               	movlw	128
 13132  0B10  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 13133  0B11  303F               	movlw	63
 13134  0B12  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 13135  0B13  0023               	movlb	3	; select bank3
 13136  0B14  0845               	movf	sin@f^(0+384),w
 13137  0B15  0022               	movlb	2	; select bank2
 13138  0B16  00A3               	movwf	___ftge@ff2^(0+256)
 13139  0B17  0023               	movlb	3	; select bank3
 13140  0B18  0846               	movf	(sin@f+1)^(0+384),w
 13141  0B19  0022               	movlb	2	; select bank2
 13142  0B1A  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 13143  0B1B  0023               	movlb	3	; select bank3
 13144  0B1C  0847               	movf	(sin@f+2)^(0+384),w
 13145  0B1D  0022               	movlb	2	; select bank2
 13146  0B1E  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 13147  0B1F  31AE  2685  318A   	fcall	___ftge
 13148  0B22  1803               	btfsc	3,0
 13149  0B23  2B50               	goto	l2304
 13150  0B24  3000               	movlw	0
 13151  0B25  0022               	movlb	2	; select bank2
 13152  0B26  00C1               	movwf	___ftadd@f1^(0+256)
 13153  0B27  3000               	movlw	0
 13154  0B28  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 13155  0B29  3040               	movlw	64
 13156  0B2A  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 13157  0B2B  0023               	movlb	3	; select bank3
 13158  0B2C  0845               	movf	sin@f^(0+384),w
 13159  0B2D  0022               	movlb	2	; select bank2
 13160  0B2E  00BE               	movwf	___ftneg@f1^(0+256)
 13161  0B2F  0023               	movlb	3	; select bank3
 13162  0B30  0846               	movf	(sin@f+1)^(0+384),w
 13163  0B31  0022               	movlb	2	; select bank2
 13164  0B32  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 13165  0B33  0023               	movlb	3	; select bank3
 13166  0B34  0847               	movf	(sin@f+2)^(0+384),w
 13167  0B35  0022               	movlb	2	; select bank2
 13168  0B36  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 13169  0B37  31AA  22E9  318A   	fcall	___ftneg
 13170  0B3A  0022               	movlb	2	; select bank2
 13171  0B3B  083E               	movf	?___ftneg^(0+256),w
 13172  0B3C  00C4               	movwf	___ftadd@f2^(0+256)
 13173  0B3D  083F               	movf	(?___ftneg+1)^(0+256),w
 13174  0B3E  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 13175  0B3F  0840               	movf	(?___ftneg+2)^(0+256),w
 13176  0B40  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 13177  0B41  3191  2116  318A   	fcall	___ftadd
 13178  0B44  0022               	movlb	2	; select bank2
 13179  0B45  0841               	movf	?___ftadd^(0+256),w
 13180  0B46  0023               	movlb	3	; select bank3
 13181  0B47  00C5               	movwf	sin@f^(0+384)
 13182  0B48  0022               	movlb	2	; select bank2
 13183  0B49  0842               	movf	(?___ftadd+1)^(0+256),w
 13184  0B4A  0023               	movlb	3	; select bank3
 13185  0B4B  00C6               	movwf	(sin@f+1)^(0+384)
 13186  0B4C  0022               	movlb	2	; select bank2
 13187  0B4D  0843               	movf	(?___ftadd+2)^(0+256),w
 13188  0B4E  0023               	movlb	3	; select bank3
 13189  0B4F  00C7               	movwf	(sin@f+2)^(0+384)
 13190  0B50                     l2304:	
 13191  0B50  0023               	movlb	3	; select bank3
 13192  0B51  0845               	movf	sin@f^(0+384),w
 13193  0B52  0022               	movlb	2	; select bank2
 13194  0B53  00CE               	movwf	___ftmul@f1^(0+256)
 13195  0B54  0023               	movlb	3	; select bank3
 13196  0B55  0846               	movf	(sin@f+1)^(0+384),w
 13197  0B56  0022               	movlb	2	; select bank2
 13198  0B57  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 13199  0B58  0023               	movlb	3	; select bank3
 13200  0B59  0847               	movf	(sin@f+2)^(0+384),w
 13201  0B5A  0022               	movlb	2	; select bank2
 13202  0B5B  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 13203  0B5C  0023               	movlb	3	; select bank3
 13204  0B5D  0845               	movf	sin@f^(0+384),w
 13205  0B5E  0022               	movlb	2	; select bank2
 13206  0B5F  00D1               	movwf	___ftmul@f2^(0+256)
 13207  0B60  0023               	movlb	3	; select bank3
 13208  0B61  0846               	movf	(sin@f+1)^(0+384),w
 13209  0B62  0022               	movlb	2	; select bank2
 13210  0B63  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 13211  0B64  0023               	movlb	3	; select bank3
 13212  0B65  0847               	movf	(sin@f+2)^(0+384),w
 13213  0B66  0022               	movlb	2	; select bank2
 13214  0B67  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 13215  0B68  319C  24D5  318A   	fcall	___ftmul
 13216  0B6B  0022               	movlb	2	; select bank2
 13217  0B6C  084E               	movf	?___ftmul^(0+256),w
 13218  0B6D  0023               	movlb	3	; select bank3
 13219  0B6E  00CF               	movwf	sin@x2^(0+384)
 13220  0B6F  0022               	movlb	2	; select bank2
 13221  0B70  084F               	movf	(?___ftmul+1)^(0+256),w
 13222  0B71  0023               	movlb	3	; select bank3
 13223  0B72  00D0               	movwf	(sin@x2+1)^(0+384)
 13224  0B73  0022               	movlb	2	; select bank2
 13225  0B74  0850               	movf	(?___ftmul+2)^(0+256),w
 13226  0B75  0023               	movlb	3	; select bank3
 13227  0B76  00D1               	movwf	(sin@x2+2)^(0+384)
 13228  0B77  084F               	movf	sin@x2^(0+384),w
 13229  0B78  00B4               	movwf	eval_poly@x^(0+384)
 13230  0B79  0850               	movf	(sin@x2+1)^(0+384),w
 13231  0B7A  00B5               	movwf	(eval_poly@x+1)^(0+384)
 13232  0B7B  0851               	movf	(sin@x2+2)^(0+384),w
 13233  0B7C  00B6               	movwf	(eval_poly@x+2)^(0+384)
 13234  0B7D  3048               	movlw	low (sin@coeff_b| (0+32768))
 13235  0B7E  00B7               	movwf	eval_poly@d^(0+384)
 13236  0B7F  30A8               	movlw	high (sin@coeff_b| (0+32768))
 13237  0B80  00B8               	movwf	(eval_poly@d^(0+384)+1)
 13238  0B81  3003               	movlw	3
 13239  0B82  00B9               	movwf	eval_poly@n^(0+384)
 13240  0B83  3000               	movlw	0
 13241  0B84  00BA               	movwf	(eval_poly@n^(0+384)+1)
 13242  0B85  31A3  23E5  318A   	fcall	_eval_poly
 13243  0B88  0023               	movlb	3	; select bank3
 13244  0B89  0834               	movf	?_eval_poly^(0+384),w
 13245  0B8A  00C9               	movwf	sin@y^(0+384)
 13246  0B8B  0835               	movf	(?_eval_poly+1)^(0+384),w
 13247  0B8C  00CA               	movwf	(sin@y+1)^(0+384)
 13248  0B8D  0836               	movf	(?_eval_poly+2)^(0+384),w
 13249  0B8E  00CB               	movwf	(sin@y+2)^(0+384)
 13250  0B8F  3004               	movlw	4
 13251  0B90  00B9               	movwf	eval_poly@n^(0+384)
 13252  0B91  3000               	movlw	0
 13253  0B92  00BA               	movwf	(eval_poly@n^(0+384)+1)
 13254  0B93  3039               	movlw	low (sin@coeff_a| (0+32768))
 13255  0B94  00B7               	movwf	eval_poly@d^(0+384)
 13256  0B95  30A8               	movlw	high (sin@coeff_a| (0+32768))
 13257  0B96  00B8               	movwf	(eval_poly@d^(0+384)+1)
 13258  0B97  084F               	movf	sin@x2^(0+384),w
 13259  0B98  00B4               	movwf	eval_poly@x^(0+384)
 13260  0B99  0850               	movf	(sin@x2+1)^(0+384),w
 13261  0B9A  00B5               	movwf	(eval_poly@x+1)^(0+384)
 13262  0B9B  0851               	movf	(sin@x2+2)^(0+384),w
 13263  0B9C  00B6               	movwf	(eval_poly@x+2)^(0+384)
 13264  0B9D  31A3  23E5  318A   	fcall	_eval_poly
 13265  0BA0  0023               	movlb	3	; select bank3
 13266  0BA1  0834               	movf	?_eval_poly^(0+384),w
 13267  0BA2  0022               	movlb	2	; select bank2
 13268  0BA3  00B1               	movwf	___ftdiv@f1^(0+256)
 13269  0BA4  0023               	movlb	3	; select bank3
 13270  0BA5  0835               	movf	(?_eval_poly+1)^(0+384),w
 13271  0BA6  0022               	movlb	2	; select bank2
 13272  0BA7  00B2               	movwf	(___ftdiv@f1+1)^(0+256)
 13273  0BA8  0023               	movlb	3	; select bank3
 13274  0BA9  0836               	movf	(?_eval_poly+2)^(0+384),w
 13275  0BAA  0022               	movlb	2	; select bank2
 13276  0BAB  00B3               	movwf	(___ftdiv@f1+2)^(0+256)
 13277  0BAC  0023               	movlb	3	; select bank3
 13278  0BAD  0849               	movf	sin@y^(0+384),w
 13279  0BAE  0022               	movlb	2	; select bank2
 13280  0BAF  00AE               	movwf	___ftdiv@f2^(0+256)
 13281  0BB0  0023               	movlb	3	; select bank3
 13282  0BB1  084A               	movf	(sin@y+1)^(0+384),w
 13283  0BB2  0022               	movlb	2	; select bank2
 13284  0BB3  00AF               	movwf	(___ftdiv@f2+1)^(0+256)
 13285  0BB4  0023               	movlb	3	; select bank3
 13286  0BB5  084B               	movf	(sin@y+2)^(0+384),w
 13287  0BB6  0022               	movlb	2	; select bank2
 13288  0BB7  00B0               	movwf	(___ftdiv@f2+2)^(0+256)
 13289  0BB8  319A  22CE  318A   	fcall	___ftdiv
 13290  0BBB  0022               	movlb	2	; select bank2
 13291  0BBC  082E               	movf	?___ftdiv^(0+256),w
 13292  0BBD  0023               	movlb	3	; select bank3
 13293  0BBE  00CC               	movwf	_sin$2808^(0+384)
 13294  0BBF  0022               	movlb	2	; select bank2
 13295  0BC0  082F               	movf	(?___ftdiv+1)^(0+256),w
 13296  0BC1  0023               	movlb	3	; select bank3
 13297  0BC2  00CD               	movwf	(_sin$2808+1)^(0+384)
 13298  0BC3  0022               	movlb	2	; select bank2
 13299  0BC4  0830               	movf	(?___ftdiv+2)^(0+256),w
 13300  0BC5  0023               	movlb	3	; select bank3
 13301  0BC6  00CE               	movwf	(_sin$2808+2)^(0+384)
 13302  0BC7  084C               	movf	_sin$2808^(0+384),w
 13303  0BC8  0022               	movlb	2	; select bank2
 13304  0BC9  00CE               	movwf	___ftmul@f1^(0+256)
 13305  0BCA  0023               	movlb	3	; select bank3
 13306  0BCB  084D               	movf	(_sin$2808+1)^(0+384),w
 13307  0BCC  0022               	movlb	2	; select bank2
 13308  0BCD  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 13309  0BCE  0023               	movlb	3	; select bank3
 13310  0BCF  084E               	movf	(_sin$2808+2)^(0+384),w
 13311  0BD0  0022               	movlb	2	; select bank2
 13312  0BD1  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 13313  0BD2  0023               	movlb	3	; select bank3
 13314  0BD3  0845               	movf	sin@f^(0+384),w
 13315  0BD4  0022               	movlb	2	; select bank2
 13316  0BD5  00D1               	movwf	___ftmul@f2^(0+256)
 13317  0BD6  0023               	movlb	3	; select bank3
 13318  0BD7  0846               	movf	(sin@f+1)^(0+384),w
 13319  0BD8  0022               	movlb	2	; select bank2
 13320  0BD9  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 13321  0BDA  0023               	movlb	3	; select bank3
 13322  0BDB  0847               	movf	(sin@f+2)^(0+384),w
 13323  0BDC  0022               	movlb	2	; select bank2
 13324  0BDD  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 13325  0BDE  319C  24D5  318A   	fcall	___ftmul
 13326  0BE1  0022               	movlb	2	; select bank2
 13327  0BE2  084E               	movf	?___ftmul^(0+256),w
 13328  0BE3  0023               	movlb	3	; select bank3
 13329  0BE4  00C5               	movwf	sin@f^(0+384)
 13330  0BE5  0022               	movlb	2	; select bank2
 13331  0BE6  084F               	movf	(?___ftmul+1)^(0+256),w
 13332  0BE7  0023               	movlb	3	; select bank3
 13333  0BE8  00C6               	movwf	(sin@f+1)^(0+384)
 13334  0BE9  0022               	movlb	2	; select bank2
 13335  0BEA  0850               	movf	(?___ftmul+2)^(0+256),w
 13336  0BEB  0023               	movlb	3	; select bank3
 13337  0BEC  00C7               	movwf	(sin@f+2)^(0+384)
 13338  0BED  0852               	movf	sin@sgn^(0+384),w
 13339  0BEE  1903               	btfsc	3,2
 13340  0BEF  0008               	return
 13341  0BF0  0845               	movf	sin@f^(0+384),w
 13342  0BF1  0022               	movlb	2	; select bank2
 13343  0BF2  00BE               	movwf	___ftneg@f1^(0+256)
 13344  0BF3  0023               	movlb	3	; select bank3
 13345  0BF4  0846               	movf	(sin@f+1)^(0+384),w
 13346  0BF5  0022               	movlb	2	; select bank2
 13347  0BF6  00BF               	movwf	(___ftneg@f1+1)^(0+256)
 13348  0BF7  0023               	movlb	3	; select bank3
 13349  0BF8  0847               	movf	(sin@f+2)^(0+384),w
 13350  0BF9  0022               	movlb	2	; select bank2
 13351  0BFA  00C0               	movwf	(___ftneg@f1+2)^(0+256)
 13352  0BFB  31AA  22E9         	fcall	___ftneg
 13353  0BFD  0022               	movlb	2	; select bank2
 13354  0BFE  083E               	movf	?___ftneg^(0+256),w
 13355  0BFF  0023               	movlb	3	; select bank3
 13356  0C00  00C5               	movwf	?_sin^(0+384)
 13357  0C01  0022               	movlb	2	; select bank2
 13358  0C02  083F               	movf	(?___ftneg+1)^(0+256),w
 13359  0C03  0023               	movlb	3	; select bank3
 13360  0C04  00C6               	movwf	(?_sin+1)^(0+384)
 13361  0C05  0022               	movlb	2	; select bank2
 13362  0C06  0840               	movf	(?___ftneg+2)^(0+256),w
 13363  0C07  0023               	movlb	3	; select bank3
 13364  0C08  00C7               	movwf	(?_sin+2)^(0+384)
 13365  0C09  0008               	return
 13366  0C0A                     __end_of_sin:	
 13367                           
 13368                           	psect	text38
 13369  197E                     __ptext38:	
 13370 ;; *************** function _floor *****************
 13371 ;; Defined at:
 13372 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;  x               3   22[BANK3 ] unsigned char 
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  i               3   26[BANK3 ] unsigned char 
 13377 ;;  expon           2   29[BANK3 ] int 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  3   22[BANK3 ] int 
 13380 ;; Registers used:
 13381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13387 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13388 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13389 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13390 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13391 ;;Total ram usage:        9 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    7
 13394 ;; This function calls:
 13395 ;;		___altoft
 13396 ;;		___ftadd
 13397 ;;		___ftge
 13398 ;;		___fttol
 13399 ;;		_frexp
 13400 ;; This function is called by:
 13401 ;;		_sin
 13402 ;;		_exp
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           
 13407                           ;psect for function _floor
 13408  197E                     _floor:	
 13409                           
 13410                           ;incstack = 0
 13411                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13412  197E  0023               	movlb	3	; select bank3
 13413  197F  0836               	movf	floor@x^(0+384),w
 13414  1980  0022               	movlb	2	; select bank2
 13415  1981  00A0               	movwf	frexp@value^(0+256)
 13416  1982  0023               	movlb	3	; select bank3
 13417  1983  0837               	movf	(floor@x+1)^(0+384),w
 13418  1984  0022               	movlb	2	; select bank2
 13419  1985  00A1               	movwf	(frexp@value+1)^(0+256)
 13420  1986  0023               	movlb	3	; select bank3
 13421  1987  0838               	movf	(floor@x+2)^(0+384),w
 13422  1988  0022               	movlb	2	; select bank2
 13423  1989  00A2               	movwf	(frexp@value+2)^(0+256)
 13424  198A  30BD               	movlw	(low (floor@expon| (0+256)))& (0+255)
 13425  198B  0023               	movlb	3	; select bank3
 13426  198C  00B9               	movwf	??_floor^(0+384)
 13427  198D  0839               	movf	??_floor^(0+384),w
 13428  198E  0022               	movlb	2	; select bank2
 13429  198F  00A3               	movwf	frexp@eptr^(0+256)
 13430  1990  31AE  26FE  3199   	fcall	_frexp
 13431  1993  0023               	movlb	3	; select bank3
 13432  1994  1FBE               	btfss	(floor@expon+1)^(0+384),7
 13433  1995  29BC               	goto	l8405
 13434  1996  0836               	movf	floor@x^(0+384),w
 13435  1997  0022               	movlb	2	; select bank2
 13436  1998  00A0               	movwf	___ftge@ff1^(0+256)
 13437  1999  0023               	movlb	3	; select bank3
 13438  199A  0837               	movf	(floor@x+1)^(0+384),w
 13439  199B  0022               	movlb	2	; select bank2
 13440  199C  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 13441  199D  0023               	movlb	3	; select bank3
 13442  199E  0838               	movf	(floor@x+2)^(0+384),w
 13443  199F  0022               	movlb	2	; select bank2
 13444  19A0  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 13445  19A1  3000               	movlw	0
 13446  19A2  00A3               	movwf	___ftge@ff2^(0+256)
 13447  19A3  3000               	movlw	0
 13448  19A4  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 13449  19A5  3000               	movlw	0
 13450  19A6  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 13451  19A7  31AE  2685  3199   	fcall	___ftge
 13452  19AA  1803               	btfsc	3,0
 13453  19AB  29B4               	goto	l8401
 13454  19AC  3000               	movlw	0
 13455  19AD  0023               	movlb	3	; select bank3
 13456  19AE  00B6               	movwf	?_floor^(0+384)
 13457  19AF  3080               	movlw	128
 13458  19B0  00B7               	movwf	(?_floor+1)^(0+384)
 13459  19B1  30BF               	movlw	191
 13460  19B2  00B8               	movwf	(?_floor+2)^(0+384)
 13461  19B3  0008               	return
 13462  19B4                     l8401:	
 13463  19B4  3000               	movlw	0
 13464  19B5  0023               	movlb	3	; select bank3
 13465  19B6  00B6               	movwf	?_floor^(0+384)
 13466  19B7  3000               	movlw	0
 13467  19B8  00B7               	movwf	(?_floor+1)^(0+384)
 13468  19B9  3000               	movlw	0
 13469  19BA  00B8               	movwf	(?_floor+2)^(0+384)
 13470  19BB  0008               	return
 13471  19BC                     l8405:	
 13472  19BC  3000               	movlw	0
 13473  19BD  023E               	subwf	(floor@expon+1)^(0+384),w
 13474  19BE  3015               	movlw	21
 13475  19BF  1903               	skipnz
 13476  19C0  023D               	subwf	floor@expon^(0+384),w
 13477  19C1  1803               	btfsc	3,0
 13478  19C2  0008               	return
 13479  19C3  0836               	movf	floor@x^(0+384),w
 13480  19C4  00A0               	movwf	___fttol@f1^(0+384)
 13481  19C5  0837               	movf	(floor@x+1)^(0+384),w
 13482  19C6  00A1               	movwf	(___fttol@f1+1)^(0+384)
 13483  19C7  0838               	movf	(floor@x+2)^(0+384),w
 13484  19C8  00A2               	movwf	(___fttol@f1+2)^(0+384)
 13485  19C9  31A6  2667  3199   	fcall	___fttol
 13486  19CC  0023               	movlb	3	; select bank3
 13487  19CD  0823               	movf	(?___fttol+3)^(0+384),w
 13488  19CE  00B1               	movwf	(___altoft@c+3)^(0+384)
 13489  19CF  0822               	movf	(?___fttol+2)^(0+384),w
 13490  19D0  00B0               	movwf	(___altoft@c+2)^(0+384)
 13491  19D1  0821               	movf	(?___fttol+1)^(0+384),w
 13492  19D2  00AF               	movwf	(___altoft@c+1)^(0+384)
 13493  19D3  0820               	movf	?___fttol^(0+384),w
 13494  19D4  00AE               	movwf	___altoft@c^(0+384)
 13495  19D5  31A1  2188  3199   	fcall	___altoft
 13496  19D8  0023               	movlb	3	; select bank3
 13497  19D9  082E               	movf	?___altoft^(0+384),w
 13498  19DA  00BA               	movwf	floor@i^(0+384)
 13499  19DB  082F               	movf	(?___altoft+1)^(0+384),w
 13500  19DC  00BB               	movwf	(floor@i+1)^(0+384)
 13501  19DD  0830               	movf	(?___altoft+2)^(0+384),w
 13502  19DE  00BC               	movwf	(floor@i+2)^(0+384)
 13503  19DF  0836               	movf	floor@x^(0+384),w
 13504  19E0  0022               	movlb	2	; select bank2
 13505  19E1  00A0               	movwf	___ftge@ff1^(0+256)
 13506  19E2  0023               	movlb	3	; select bank3
 13507  19E3  0837               	movf	(floor@x+1)^(0+384),w
 13508  19E4  0022               	movlb	2	; select bank2
 13509  19E5  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 13510  19E6  0023               	movlb	3	; select bank3
 13511  19E7  0838               	movf	(floor@x+2)^(0+384),w
 13512  19E8  0022               	movlb	2	; select bank2
 13513  19E9  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 13514  19EA  0023               	movlb	3	; select bank3
 13515  19EB  083A               	movf	floor@i^(0+384),w
 13516  19EC  0022               	movlb	2	; select bank2
 13517  19ED  00A3               	movwf	___ftge@ff2^(0+256)
 13518  19EE  0023               	movlb	3	; select bank3
 13519  19EF  083B               	movf	(floor@i+1)^(0+384),w
 13520  19F0  0022               	movlb	2	; select bank2
 13521  19F1  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 13522  19F2  0023               	movlb	3	; select bank3
 13523  19F3  083C               	movf	(floor@i+2)^(0+384),w
 13524  19F4  0022               	movlb	2	; select bank2
 13525  19F5  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 13526  19F6  31AE  2685  3199   	fcall	___ftge
 13527  19F9  1803               	btfsc	3,0
 13528  19FA  2A1D               	goto	l8415
 13529  19FB  3000               	movlw	0
 13530  19FC  0022               	movlb	2	; select bank2
 13531  19FD  00C1               	movwf	___ftadd@f1^(0+256)
 13532  19FE  3080               	movlw	128
 13533  19FF  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 13534  1A00  30BF               	movlw	191
 13535  1A01  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 13536  1A02  0023               	movlb	3	; select bank3
 13537  1A03  083A               	movf	floor@i^(0+384),w
 13538  1A04  0022               	movlb	2	; select bank2
 13539  1A05  00C4               	movwf	___ftadd@f2^(0+256)
 13540  1A06  0023               	movlb	3	; select bank3
 13541  1A07  083B               	movf	(floor@i+1)^(0+384),w
 13542  1A08  0022               	movlb	2	; select bank2
 13543  1A09  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 13544  1A0A  0023               	movlb	3	; select bank3
 13545  1A0B  083C               	movf	(floor@i+2)^(0+384),w
 13546  1A0C  0022               	movlb	2	; select bank2
 13547  1A0D  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 13548  1A0E  3191  2116         	fcall	___ftadd
 13549  1A10  0022               	movlb	2	; select bank2
 13550  1A11  0841               	movf	?___ftadd^(0+256),w
 13551  1A12  0023               	movlb	3	; select bank3
 13552  1A13  00B6               	movwf	?_floor^(0+384)
 13553  1A14  0022               	movlb	2	; select bank2
 13554  1A15  0842               	movf	(?___ftadd+1)^(0+256),w
 13555  1A16  0023               	movlb	3	; select bank3
 13556  1A17  00B7               	movwf	(?_floor+1)^(0+384)
 13557  1A18  0022               	movlb	2	; select bank2
 13558  1A19  0843               	movf	(?___ftadd+2)^(0+256),w
 13559  1A1A  0023               	movlb	3	; select bank3
 13560  1A1B  00B8               	movwf	(?_floor+2)^(0+384)
 13561  1A1C  0008               	return
 13562  1A1D                     l8415:	
 13563  1A1D  0023               	movlb	3	; select bank3
 13564  1A1E  083A               	movf	floor@i^(0+384),w
 13565  1A1F  00B6               	movwf	?_floor^(0+384)
 13566  1A20  083B               	movf	(floor@i+1)^(0+384),w
 13567  1A21  00B7               	movwf	(?_floor+1)^(0+384)
 13568  1A22  083C               	movf	(floor@i+2)^(0+384),w
 13569  1A23  00B8               	movwf	(?_floor+2)^(0+384)
 13570  1A24  0008               	return
 13571  1A25                     __end_of_floor:	
 13572                           
 13573                           	psect	text39
 13574  2EFE                     __ptext39:	
 13575 ;; *************** function _frexp *****************
 13576 ;; Defined at:
 13577 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;  value           3    0[BANK2 ] int 
 13580 ;;  eptr            1    3[BANK2 ] PTR int 
 13581 ;;		 -> log@exponent(2), floor@expon(2), trunc@expon(2), 
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;		None
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  3    0[BANK2 ] PTR int 
 13586 ;; Registers used:
 13587 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13593 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13595 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13596 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13597 ;;Total ram usage:        6 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    5
 13600 ;; This function calls:
 13601 ;;		Nothing
 13602 ;; This function is called by:
 13603 ;;		_trunc
 13604 ;;		_floor
 13605 ;;		_log
 13606 ;; This function uses a non-reentrant model
 13607 ;;
 13608                           
 13609                           
 13610                           ;psect for function _frexp
 13611  2EFE                     _frexp:	
 13612                           
 13613                           ;incstack = 0
 13614                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 13615  2EFE  0022               	movlb	2	; select bank2
 13616  2EFF  0822               	movf	(frexp@value+2)^(0+256),w
 13617  2F00  0421               	iorwf	(frexp@value+1)^(0+256),w
 13618  2F01  0420               	iorwf	frexp@value^(0+256),w
 13619  2F02  1D03               	skipz
 13620  2F03  2F12               	goto	l8267
 13621  2F04  0823               	movf	frexp@eptr^(0+256),w
 13622  2F05  0086               	movwf	6
 13623  2F06  3001               	movlw	1	; select bank2/3
 13624  2F07  0087               	movwf	7
 13625  2F08  3000               	movlw	0
 13626  2F09  3FC0               	movwi [0]fsr1
 13627  2F0A  3FC1               	movwi [1]fsr1
 13628  2F0B  3000               	movlw	0
 13629  2F0C  00A0               	movwf	?_frexp^(0+256)
 13630  2F0D  3000               	movlw	0
 13631  2F0E  00A1               	movwf	(?_frexp+1)^(0+256)
 13632  2F0F  3000               	movlw	0
 13633  2F10  00A2               	movwf	(?_frexp+2)^(0+256)
 13634  2F11  0008               	return
 13635  2F12                     l8267:	
 13636  2F12  0822               	movf	(frexp@value^(0+256)+2),w
 13637  2F13  397F               	andlw	127
 13638  2F14  00A4               	movwf	??_frexp^(0+256)
 13639  2F15  01A5               	clrf	(??_frexp^(0+256)+1)
 13640  2F16  35A4               	lslf	??_frexp^(0+256),f
 13641  2F17  0DA5               	rlf	(??_frexp^(0+256)+1),f
 13642  2F18  0823               	movf	frexp@eptr^(0+256),w
 13643  2F19  0086               	movwf	6
 13644  2F1A  3001               	movlw	1	; select bank2/3
 13645  2F1B  0087               	movwf	7
 13646  2F1C  0824               	movf	??_frexp^(0+256),w
 13647  2F1D  3FC0               	movwi [0]fsr1
 13648  2F1E  0825               	movf	(??_frexp+1)^(0+256),w
 13649  2F1F  3FC1               	movwi [1]fsr1
 13650  2F20  0D21               	rlf	(frexp@value^(0+256)+1),w
 13651  2F21  0D21               	rlf	(frexp@value^(0+256)+1),w
 13652  2F22  3901               	andlw	1
 13653  2F23  00A4               	movwf	??_frexp^(0+256)
 13654  2F24  01A5               	clrf	(??_frexp^(0+256)+1)
 13655  2F25  0823               	movf	frexp@eptr^(0+256),w
 13656  2F26  0086               	movwf	6
 13657  2F27  3001               	movlw	1	; select bank2/3
 13658  2F28  0087               	movwf	7
 13659  2F29  0824               	movf	??_frexp^(0+256),w
 13660  2F2A  0481               	iorwf	1,f
 13661  2F2B  3141               	addfsr 1,1
 13662  2F2C  0825               	movf	(??_frexp+1)^(0+256),w
 13663  2F2D  0481               	iorwf	1,f
 13664  2F2E  0823               	movf	frexp@eptr^(0+256),w
 13665  2F2F  0086               	movwf	6
 13666  2F30  3001               	movlw	1	; select bank2/3
 13667  2F31  0087               	movwf	7
 13668  2F32  3082               	movlw	130
 13669  2F33  0781               	addwf	1,f
 13670  2F34  3141               	addfsr 1,1
 13671  2F35  30FF               	movlw	255
 13672  2F36  3D81               	addwfc	1,f
 13673  2F37  317F               	addfsr 1,-1
 13674  2F38  0822               	movf	(frexp@value^(0+256)+2),w
 13675  2F39  3980               	andlw	-128
 13676  2F3A  383F               	iorlw	63
 13677  2F3B  00A2               	movwf	(frexp@value^(0+256)+2)
 13678  2F3C  13A1               	bcf	(frexp@value^(0+256)+1),7
 13679  2F3D  0008               	return
 13680  2F3E                     __end_of_frexp:	
 13681                           
 13682                           	psect	text40
 13683  2667                     __ptext40:	
 13684 ;; *************** function ___fttol *****************
 13685 ;; Defined at:
 13686 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;  f1              3    0[BANK3 ] float 
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;  lval            4    9[BANK3 ] unsigned long 
 13691 ;;  exp1            1   13[BANK3 ] unsigned char 
 13692 ;;  sign1           1    8[BANK3 ] unsigned char 
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  4    0[BANK3 ] long 
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13702 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13703 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13704 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13705 ;;      Totals:         0       0       0       0      14       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13706 ;;Total ram usage:       14 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    5
 13709 ;; This function calls:
 13710 ;;		Nothing
 13711 ;; This function is called by:
 13712 ;;		_main
 13713 ;;		_set_subdivision
 13714 ;;		_scaleA100kPot
 13715 ;;		_scaleA10kPot
 13716 ;;		_scaleiA10kPot
 13717 ;;		_modSin
 13718 ;;		_pow
 13719 ;;		_trunc
 13720 ;;		_exp
 13721 ;;		_floor
 13722 ;;		_scaleiA100kPot
 13723 ;; This function uses a non-reentrant model
 13724 ;;
 13725                           
 13726                           
 13727                           ;psect for function ___fttol
 13728  2667                     ___fttol:	
 13729                           
 13730                           ;incstack = 0
 13731                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13732  2667  0023               	movlb	3	; select bank3
 13733  2668  0820               	movf	___fttol@f1^(0+384),w
 13734  2669  00A4               	movwf	??___fttol^(0+384)
 13735  266A  0821               	movf	(___fttol@f1+1)^(0+384),w
 13736  266B  00A5               	movwf	(??___fttol^(0+384)+1)
 13737  266C  0822               	movf	(___fttol@f1+2)^(0+384),w
 13738  266D  00A6               	movwf	(??___fttol^(0+384)+2)
 13739  266E  1003               	clrc
 13740  266F  0D25               	rlf	(??___fttol^(0+384)+1),w
 13741  2670  0D26               	rlf	(??___fttol^(0+384)+2),w
 13742  2671  00A7               	movwf	(??___fttol+3)^(0+384)
 13743  2672  0827               	movf	(??___fttol+3)^(0+384),w
 13744  2673  00AD               	movwf	___fttol@exp1^(0+384)
 13745  2674  082D               	movf	___fttol@exp1^(0+384),w
 13746  2675  1D03               	btfss	3,2
 13747  2676  2E80               	goto	l8223
 13748  2677  3000               	movlw	0
 13749  2678  00A3               	movwf	(?___fttol+3)^(0+384)
 13750  2679  3000               	movlw	0
 13751  267A  00A2               	movwf	(?___fttol+2)^(0+384)
 13752  267B  3000               	movlw	0
 13753  267C  00A1               	movwf	(?___fttol+1)^(0+384)
 13754  267D  3000               	movlw	0
 13755  267E  00A0               	movwf	?___fttol^(0+384)
 13756  267F  0008               	return
 13757  2680                     l8223:	
 13758  2680  0820               	movf	___fttol@f1^(0+384),w
 13759  2681  00A4               	movwf	??___fttol^(0+384)
 13760  2682  0821               	movf	(___fttol@f1+1)^(0+384),w
 13761  2683  00A5               	movwf	(??___fttol^(0+384)+1)
 13762  2684  0822               	movf	(___fttol@f1+2)^(0+384),w
 13763  2685  00A6               	movwf	(??___fttol^(0+384)+2)
 13764  2686  3017               	movlw	23
 13765  2687                     u9305:	
 13766  2687  36A6               	lsrf	(??___fttol^(0+384)+2),f
 13767  2688  0CA5               	rrf	(??___fttol^(0+384)+1),f
 13768  2689  0CA4               	rrf	??___fttol^(0+384),f
 13769  268A  0B89               	decfsz	9,f
 13770  268B  2E87               	goto	u9305
 13771  268C  0824               	movf	??___fttol^(0+384),w
 13772  268D  00A7               	movwf	(??___fttol+3)^(0+384)
 13773  268E  0827               	movf	(??___fttol+3)^(0+384),w
 13774  268F  00A8               	movwf	___fttol@sign1^(0+384)
 13775  2690  17A1               	bsf	(___fttol@f1^(0+384)+1),7
 13776  2691  30FF               	movlw	255
 13777  2692  05A0               	andwf	___fttol@f1^(0+384),f
 13778  2693  30FF               	movlw	255
 13779  2694  05A1               	andwf	(___fttol@f1+1)^(0+384),f
 13780  2695  3000               	movlw	0
 13781  2696  05A2               	andwf	(___fttol@f1+2)^(0+384),f
 13782  2697  0820               	movf	___fttol@f1^(0+384),w
 13783  2698  00A9               	movwf	___fttol@lval^(0+384)
 13784  2699  0821               	movf	(___fttol@f1+1)^(0+384),w
 13785  269A  00AA               	movwf	(___fttol@lval^(0+384)+1)
 13786  269B  0822               	movf	(___fttol@f1+2)^(0+384),w
 13787  269C  00AB               	movwf	(___fttol@lval^(0+384)+2)
 13788  269D  01AC               	clrf	(___fttol@lval^(0+384)+3)
 13789  269E  308E               	movlw	142
 13790  269F  02AD               	subwf	___fttol@exp1^(0+384),f
 13791  26A0  1FAD               	btfss	___fttol@exp1^(0+384),7
 13792  26A1  2EBE               	goto	l8243
 13793  26A2  082D               	movf	___fttol@exp1^(0+384),w
 13794  26A3  3A80               	xorlw	128
 13795  26A4  3E8F               	addlw	143
 13796  26A5  1803               	skipnc
 13797  26A6  2EB0               	goto	l8241
 13798  26A7  3000               	movlw	0
 13799  26A8  00A3               	movwf	(?___fttol+3)^(0+384)
 13800  26A9  3000               	movlw	0
 13801  26AA  00A2               	movwf	(?___fttol+2)^(0+384)
 13802  26AB  3000               	movlw	0
 13803  26AC  00A1               	movwf	(?___fttol+1)^(0+384)
 13804  26AD  3000               	movlw	0
 13805  26AE  00A0               	movwf	?___fttol^(0+384)
 13806  26AF  0008               	return
 13807  26B0                     l8241:	
 13808  26B0  3001               	movlw	1
 13809  26B1                     u9335:	
 13810  26B1  36AC               	lsrf	(___fttol@lval+3)^(0+384),f
 13811  26B2  0CAB               	rrf	(___fttol@lval+2)^(0+384),f
 13812  26B3  0CAA               	rrf	(___fttol@lval+1)^(0+384),f
 13813  26B4  0CA9               	rrf	___fttol@lval^(0+384),f
 13814  26B5  0B89               	decfsz	9,f
 13815  26B6  2EB1               	goto	u9335
 13816  26B7  3001               	movlw	1
 13817  26B8  00A4               	movwf	??___fttol^(0+384)
 13818  26B9  0824               	movf	??___fttol^(0+384),w
 13819  26BA  07AD               	addwf	___fttol@exp1^(0+384),f
 13820  26BB  1903               	btfsc	3,2
 13821  26BC  2ED7               	goto	l8251
 13822  26BD  2EB0               	goto	l8241
 13823  26BE                     l8243:	
 13824  26BE  3018               	movlw	24
 13825  26BF  022D               	subwf	___fttol@exp1^(0+384),w
 13826  26C0  1C03               	skipc
 13827  26C1  2ED4               	goto	l2174
 13828  26C2  3000               	movlw	0
 13829  26C3  00A3               	movwf	(?___fttol+3)^(0+384)
 13830  26C4  3000               	movlw	0
 13831  26C5  00A2               	movwf	(?___fttol+2)^(0+384)
 13832  26C6  3000               	movlw	0
 13833  26C7  00A1               	movwf	(?___fttol+1)^(0+384)
 13834  26C8  3000               	movlw	0
 13835  26C9  00A0               	movwf	?___fttol^(0+384)
 13836  26CA  0008               	return
 13837  26CB                     l8249:	
 13838  26CB  3001               	movlw	1
 13839  26CC                     u9365:	
 13840  26CC  35A9               	lslf	___fttol@lval^(0+384),f
 13841  26CD  0DAA               	rlf	(___fttol@lval+1)^(0+384),f
 13842  26CE  0DAB               	rlf	(___fttol@lval+2)^(0+384),f
 13843  26CF  0DAC               	rlf	(___fttol@lval+3)^(0+384),f
 13844  26D0  0B89               	decfsz	9,f
 13845  26D1  2ECC               	goto	u9365
 13846  26D2  3001               	movlw	1
 13847  26D3  02AD               	subwf	___fttol@exp1^(0+384),f
 13848  26D4                     l2174:	
 13849  26D4  082D               	movf	___fttol@exp1^(0+384),w
 13850  26D5  1D03               	btfss	3,2
 13851  26D6  2ECB               	goto	l8249
 13852  26D7                     l8251:	
 13853  26D7  0828               	movf	___fttol@sign1^(0+384),w
 13854  26D8  1903               	btfsc	3,2
 13855  26D9  2EE5               	goto	l8255
 13856  26DA  09A9               	comf	___fttol@lval^(0+384),f
 13857  26DB  09AA               	comf	(___fttol@lval+1)^(0+384),f
 13858  26DC  09AB               	comf	(___fttol@lval+2)^(0+384),f
 13859  26DD  09AC               	comf	(___fttol@lval+3)^(0+384),f
 13860  26DE  0AA9               	incf	___fttol@lval^(0+384),f
 13861  26DF  1903               	skipnz
 13862  26E0  0AAA               	incf	(___fttol@lval+1)^(0+384),f
 13863  26E1  1903               	skipnz
 13864  26E2  0AAB               	incf	(___fttol@lval+2)^(0+384),f
 13865  26E3  1903               	skipnz
 13866  26E4  0AAC               	incf	(___fttol@lval+3)^(0+384),f
 13867  26E5                     l8255:	
 13868  26E5  082C               	movf	(___fttol@lval+3)^(0+384),w
 13869  26E6  00A3               	movwf	(?___fttol+3)^(0+384)
 13870  26E7  082B               	movf	(___fttol@lval+2)^(0+384),w
 13871  26E8  00A2               	movwf	(?___fttol+2)^(0+384)
 13872  26E9  082A               	movf	(___fttol@lval+1)^(0+384),w
 13873  26EA  00A1               	movwf	(?___fttol+1)^(0+384)
 13874  26EB  0829               	movf	___fttol@lval^(0+384),w
 13875  26EC  00A0               	movwf	?___fttol^(0+384)
 13876  26ED  0008               	return
 13877  26EE                     __end_of___fttol:	
 13878                           
 13879                           	psect	text41
 13880  2E85                     __ptext41:	
 13881 ;; *************** function ___ftge *****************
 13882 ;; Defined at:
 13883 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 13884 ;; Parameters:    Size  Location     Type
 13885 ;;  ff1             3    0[BANK2 ] float 
 13886 ;;  ff2             3    3[BANK2 ] float 
 13887 ;; Auto vars:     Size  Location     Type
 13888 ;;		None
 13889 ;; Return value:  Size  Location     Type
 13890 ;;		None               void
 13891 ;; Registers used:
 13892 ;;		wreg, status,2, status,0
 13893 ;; Tracked objects:
 13894 ;;		On entry : 0/0
 13895 ;;		On exit  : 0/0
 13896 ;;		Unchanged: 0/0
 13897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13898 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13900 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13901 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13902 ;;Total ram usage:        9 bytes
 13903 ;; Hardware stack levels used:    1
 13904 ;; Hardware stack levels required when called:    5
 13905 ;; This function calls:
 13906 ;;		Nothing
 13907 ;; This function is called by:
 13908 ;;		_modSin
 13909 ;;		_pow
 13910 ;;		_sin
 13911 ;;		_exp
 13912 ;;		_floor
 13913 ;;		_ldexp
 13914 ;;		_log
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           
 13919                           ;psect for function ___ftge
 13920  2E85                     ___ftge:	
 13921                           
 13922                           ;incstack = 0
 13923                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 13924  2E85  0022               	movlb	2	; select bank2
 13925  2E86  1FA2               	btfss	(___ftge@ff1+2)^(0+256),7
 13926  2E87  2E9C               	goto	l8143
 13927  2E88  0920               	comf	___ftge@ff1^(0+256),w
 13928  2E89  00A6               	movwf	??___ftge^(0+256)
 13929  2E8A  0921               	comf	(___ftge@ff1+1)^(0+256),w
 13930  2E8B  00A7               	movwf	(??___ftge^(0+256)+1)
 13931  2E8C  0922               	comf	(___ftge@ff1+2)^(0+256),w
 13932  2E8D  00A8               	movwf	(??___ftge^(0+256)+2)
 13933  2E8E  0AA6               	incf	??___ftge^(0+256),f
 13934  2E8F  1903               	skipnz
 13935  2E90  0AA7               	incf	(??___ftge^(0+256)+1),f
 13936  2E91  1903               	skipnz
 13937  2E92  0AA8               	incf	(??___ftge^(0+256)+2),f
 13938  2E93  3000               	movlw	0
 13939  2E94  0726               	addwf	??___ftge^(0+256),w
 13940  2E95  00A0               	movwf	___ftge@ff1^(0+256)
 13941  2E96  3000               	movlw	0
 13942  2E97  3D27               	addwfc	(??___ftge+1)^(0+256),w
 13943  2E98  00A1               	movwf	(___ftge@ff1+1)^(0+256)
 13944  2E99  3080               	movlw	128
 13945  2E9A  3D28               	addwfc	(??___ftge+2)^(0+256),w
 13946  2E9B  00A2               	movwf	(___ftge@ff1+2)^(0+256)
 13947  2E9C                     l8143:	
 13948  2E9C  1FA5               	btfss	(___ftge@ff2+2)^(0+256),7
 13949  2E9D  2EB2               	goto	l8147
 13950  2E9E  0923               	comf	___ftge@ff2^(0+256),w
 13951  2E9F  00A6               	movwf	??___ftge^(0+256)
 13952  2EA0  0924               	comf	(___ftge@ff2+1)^(0+256),w
 13953  2EA1  00A7               	movwf	(??___ftge^(0+256)+1)
 13954  2EA2  0925               	comf	(___ftge@ff2+2)^(0+256),w
 13955  2EA3  00A8               	movwf	(??___ftge^(0+256)+2)
 13956  2EA4  0AA6               	incf	??___ftge^(0+256),f
 13957  2EA5  1903               	skipnz
 13958  2EA6  0AA7               	incf	(??___ftge^(0+256)+1),f
 13959  2EA7  1903               	skipnz
 13960  2EA8  0AA8               	incf	(??___ftge^(0+256)+2),f
 13961  2EA9  3000               	movlw	0
 13962  2EAA  0726               	addwf	??___ftge^(0+256),w
 13963  2EAB  00A3               	movwf	___ftge@ff2^(0+256)
 13964  2EAC  3000               	movlw	0
 13965  2EAD  3D27               	addwfc	(??___ftge+1)^(0+256),w
 13966  2EAE  00A4               	movwf	(___ftge@ff2+1)^(0+256)
 13967  2EAF  3080               	movlw	128
 13968  2EB0  3D28               	addwfc	(??___ftge+2)^(0+256),w
 13969  2EB1  00A5               	movwf	(___ftge@ff2+2)^(0+256)
 13970  2EB2                     l8147:	
 13971  2EB2  3080               	movlw	128
 13972  2EB3  06A2               	xorwf	(___ftge@ff1+2)^(0+256),f
 13973  2EB4  3080               	movlw	128
 13974  2EB5  06A5               	xorwf	(___ftge@ff2+2)^(0+256),f
 13975  2EB6  0825               	movf	(___ftge@ff2+2)^(0+256),w
 13976  2EB7  0222               	subwf	(___ftge@ff1+2)^(0+256),w
 13977  2EB8  1D03               	skipz
 13978  2EB9  0008               	return
 13979  2EBA  0824               	movf	(___ftge@ff2+1)^(0+256),w
 13980  2EBB  0221               	subwf	(___ftge@ff1+1)^(0+256),w
 13981  2EBC  1D03               	skipz
 13982  2EBD  0008               	return
 13983  2EBE  0823               	movf	___ftge@ff2^(0+256),w
 13984  2EBF  0220               	subwf	___ftge@ff1^(0+256),w
 13985  2EC0  0008               	return
 13986  2EC1                     __end_of___ftge:	
 13987                           
 13988                           	psect	text42
 13989  2188                     __ptext42:	
 13990 ;; *************** function ___altoft *****************
 13991 ;; Defined at:
 13992 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  c               4   14[BANK3 ] long 
 13995 ;; Auto vars:     Size  Location     Type
 13996 ;;  sign            1   21[BANK3 ] unsigned char 
 13997 ;;  exp             1   20[BANK3 ] unsigned char 
 13998 ;; Return value:  Size  Location     Type
 13999 ;;                  3   14[BANK3 ] float 
 14000 ;; Registers used:
 14001 ;;		wreg, status,2, status,0, pclath, cstack
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14007 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14008 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14009 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14010 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14011 ;;Total ram usage:        8 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    6
 14014 ;; This function calls:
 14015 ;;		___ftpack
 14016 ;; This function is called by:
 14017 ;;		_trunc
 14018 ;;		_floor
 14019 ;; This function uses a non-reentrant model
 14020 ;;
 14021                           
 14022                           
 14023                           ;psect for function ___altoft
 14024  2188                     ___altoft:	
 14025                           
 14026                           ;incstack = 0
 14027                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 14028  2188  0023               	movlb	3	; select bank3
 14029  2189  01B5               	clrf	___altoft@sign^(0+384)
 14030  218A  308E               	movlw	142
 14031  218B  00B2               	movwf	??___altoft^(0+384)
 14032  218C  0832               	movf	??___altoft^(0+384),w
 14033  218D  00B4               	movwf	___altoft@exp^(0+384)
 14034  218E  1FB1               	btfss	(___altoft@c+3)^(0+384),7
 14035  218F  299D               	goto	l8063
 14036  2190  09AE               	comf	___altoft@c^(0+384),f
 14037  2191  09AF               	comf	(___altoft@c+1)^(0+384),f
 14038  2192  09B0               	comf	(___altoft@c+2)^(0+384),f
 14039  2193  09B1               	comf	(___altoft@c+3)^(0+384),f
 14040  2194  0AAE               	incf	___altoft@c^(0+384),f
 14041  2195  1903               	skipnz
 14042  2196  0AAF               	incf	(___altoft@c+1)^(0+384),f
 14043  2197  1903               	skipnz
 14044  2198  0AB0               	incf	(___altoft@c+2)^(0+384),f
 14045  2199  1903               	skipnz
 14046  219A  0AB1               	incf	(___altoft@c+3)^(0+384),f
 14047  219B  01B5               	clrf	___altoft@sign^(0+384)
 14048  219C  0AB5               	incf	___altoft@sign^(0+384),f
 14049  219D                     l8063:	
 14050  219D  30FF               	movlw	255
 14051  219E  0531               	andwf	(___altoft@c+3)^(0+384),w
 14052  219F  1903               	btfsc	3,2
 14053  21A0  29AD               	goto	l8065
 14054  21A1  3001               	movlw	1
 14055  21A2                     u8885:	
 14056  21A2  36B1               	lsrf	(___altoft@c+3)^(0+384),f
 14057  21A3  0CB0               	rrf	(___altoft@c+2)^(0+384),f
 14058  21A4  0CAF               	rrf	(___altoft@c+1)^(0+384),f
 14059  21A5  0CAE               	rrf	___altoft@c^(0+384),f
 14060  21A6  0B89               	decfsz	9,f
 14061  21A7  29A2               	goto	u8885
 14062  21A8  3001               	movlw	1
 14063  21A9  00B2               	movwf	??___altoft^(0+384)
 14064  21AA  0832               	movf	??___altoft^(0+384),w
 14065  21AB  07B4               	addwf	___altoft@exp^(0+384),f
 14066  21AC  299D               	goto	l8063
 14067  21AD                     l8065:	
 14068  21AD  082E               	movf	___altoft@c^(0+384),w
 14069  21AE  0022               	movlb	2	; select bank2
 14070  21AF  00A0               	movwf	___ftpack@arg^(0+256)
 14071  21B0  0023               	movlb	3	; select bank3
 14072  21B1  082F               	movf	(___altoft@c+1)^(0+384),w
 14073  21B2  0022               	movlb	2	; select bank2
 14074  21B3  00A1               	movwf	(___ftpack@arg+1)^(0+256)
 14075  21B4  0023               	movlb	3	; select bank3
 14076  21B5  0830               	movf	(___altoft@c+2)^(0+384),w
 14077  21B6  0022               	movlb	2	; select bank2
 14078  21B7  00A2               	movwf	(___ftpack@arg+2)^(0+256)
 14079  21B8  0023               	movlb	3	; select bank3
 14080  21B9  0834               	movf	___altoft@exp^(0+384),w
 14081  21BA  00B2               	movwf	??___altoft^(0+384)
 14082  21BB  0832               	movf	??___altoft^(0+384),w
 14083  21BC  0022               	movlb	2	; select bank2
 14084  21BD  00A3               	movwf	___ftpack@exp^(0+256)
 14085  21BE  0023               	movlb	3	; select bank3
 14086  21BF  0835               	movf	___altoft@sign^(0+384),w
 14087  21C0  00B3               	movwf	(??___altoft+1)^(0+384)
 14088  21C1  0833               	movf	(??___altoft+1)^(0+384),w
 14089  21C2  0022               	movlb	2	; select bank2
 14090  21C3  00A4               	movwf	___ftpack@sign^(0+256)
 14091  21C4  31A3  2380         	fcall	___ftpack
 14092  21C6  0022               	movlb	2	; select bank2
 14093  21C7  0820               	movf	?___ftpack^(0+256),w
 14094  21C8  0023               	movlb	3	; select bank3
 14095  21C9  00AE               	movwf	?___altoft^(0+384)
 14096  21CA  0022               	movlb	2	; select bank2
 14097  21CB  0821               	movf	(?___ftpack+1)^(0+256),w
 14098  21CC  0023               	movlb	3	; select bank3
 14099  21CD  00AF               	movwf	(?___altoft+1)^(0+384)
 14100  21CE  0022               	movlb	2	; select bank2
 14101  21CF  0822               	movf	(?___ftpack+2)^(0+256),w
 14102  21D0  0023               	movlb	3	; select bank3
 14103  21D1  00B0               	movwf	(?___altoft+2)^(0+384)
 14104  21D2  0008               	return
 14105  21D3                     __end_of___altoft:	
 14106                           
 14107                           	psect	text43
 14108  23E5                     __ptext43:	
 14109 ;; *************** function _eval_poly *****************
 14110 ;; Defined at:
 14111 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 14112 ;; Parameters:    Size  Location     Type
 14113 ;;  x               3   20[BANK3 ] float 
 14114 ;;  d               2   23[BANK3 ] PTR const 
 14115 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 14116 ;;  n               2   25[BANK3 ] int 
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;  res             3   27[BANK3 ] int 
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  3   20[BANK3 ] int 
 14121 ;; Registers used:
 14122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14128 ;;      Params:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14129 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14131 ;;      Totals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14132 ;;Total ram usage:       10 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; Hardware stack levels required when called:    7
 14135 ;; This function calls:
 14136 ;;		___ftadd
 14137 ;;		___ftmul
 14138 ;;		___wmul
 14139 ;; This function is called by:
 14140 ;;		_sin
 14141 ;;		_exp
 14142 ;;		_log
 14143 ;; This function uses a non-reentrant model
 14144 ;;
 14145                           
 14146                           
 14147                           ;psect for function _eval_poly
 14148  23E5                     _eval_poly:	
 14149                           
 14150                           ;incstack = 0
 14151                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14152  23E5  0023               	movlb	3	; select bank3
 14153  23E6  083A               	movf	(eval_poly@n+1)^(0+384),w
 14154  23E7  00AF               	movwf	(___wmul@multiplier+1)^(0+384)
 14155  23E8  0839               	movf	eval_poly@n^(0+384),w
 14156  23E9  00AE               	movwf	___wmul@multiplier^(0+384)
 14157  23EA  3003               	movlw	3
 14158  23EB  00B0               	movwf	___wmul@multiplicand^(0+384)
 14159  23EC  3000               	movlw	0
 14160  23ED  00B1               	movwf	(___wmul@multiplicand^(0+384)+1)
 14161  23EE  31AB  23DF  31A3   	fcall	___wmul
 14162  23F1  0023               	movlb	3	; select bank3
 14163  23F2  0837               	movf	eval_poly@d^(0+384),w
 14164  23F3  072E               	addwf	?___wmul^(0+384),w
 14165  23F4  0084               	movwf	4
 14166  23F5  0838               	movf	(eval_poly@d+1)^(0+384),w
 14167  23F6  3D2F               	addwfc	(?___wmul+1)^(0+384),w
 14168  23F7  0085               	movwf	5
 14169  23F8  3F00               	moviw [0]fsr0
 14170  23F9  00BB               	movwf	eval_poly@res^(0+384)
 14171  23FA  3F01               	moviw [1]fsr0
 14172  23FB  00BC               	movwf	(eval_poly@res+1)^(0+384)
 14173  23FC  3F02               	moviw [2]fsr0
 14174  23FD                     L14:	
 14175  23FD  00BD               	movwf	(eval_poly@res+2)^(0+384)
 14176  23FE  0839               	movf	eval_poly@n^(0+384),w
 14177  23FF  043A               	iorwf	(eval_poly@n+1)^(0+384),w
 14178  2400  1903               	btfsc	3,2
 14179  2401  2C50               	goto	l8425
 14180  2402  30FF               	movlw	255
 14181  2403  07B9               	addwf	eval_poly@n^(0+384),f
 14182  2404  30FF               	movlw	255
 14183  2405  3DBA               	addwfc	(eval_poly@n+1)^(0+384),f
 14184  2406  083A               	movf	(eval_poly@n+1)^(0+384),w
 14185  2407  00AF               	movwf	(___wmul@multiplier+1)^(0+384)
 14186  2408  0839               	movf	eval_poly@n^(0+384),w
 14187  2409  00AE               	movwf	___wmul@multiplier^(0+384)
 14188  240A  3003               	movlw	3
 14189  240B  00B0               	movwf	___wmul@multiplicand^(0+384)
 14190  240C  3000               	movlw	0
 14191  240D  00B1               	movwf	(___wmul@multiplicand^(0+384)+1)
 14192  240E  31AB  23DF  31A3   	fcall	___wmul
 14193  2411  0023               	movlb	3	; select bank3
 14194  2412  0837               	movf	eval_poly@d^(0+384),w
 14195  2413  072E               	addwf	?___wmul^(0+384),w
 14196  2414  0084               	movwf	4
 14197  2415  0838               	movf	(eval_poly@d+1)^(0+384),w
 14198  2416  3D2F               	addwfc	(?___wmul+1)^(0+384),w
 14199  2417  0085               	movwf	5
 14200  2418  3F00               	moviw [0]fsr0
 14201  2419  0022               	movlb	2	; select bank2
 14202  241A  00C1               	movwf	___ftadd@f1^(0+256)
 14203  241B  3F01               	moviw [1]fsr0
 14204  241C  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 14205  241D  3F02               	moviw [2]fsr0
 14206  241E  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 14207  241F  0023               	movlb	3	; select bank3
 14208  2420  083B               	movf	eval_poly@res^(0+384),w
 14209  2421  0022               	movlb	2	; select bank2
 14210  2422  00CE               	movwf	___ftmul@f1^(0+256)
 14211  2423  0023               	movlb	3	; select bank3
 14212  2424  083C               	movf	(eval_poly@res+1)^(0+384),w
 14213  2425  0022               	movlb	2	; select bank2
 14214  2426  00CF               	movwf	(___ftmul@f1+1)^(0+256)
 14215  2427  0023               	movlb	3	; select bank3
 14216  2428  083D               	movf	(eval_poly@res+2)^(0+384),w
 14217  2429  0022               	movlb	2	; select bank2
 14218  242A  00D0               	movwf	(___ftmul@f1+2)^(0+256)
 14219  242B  0023               	movlb	3	; select bank3
 14220  242C  0834               	movf	eval_poly@x^(0+384),w
 14221  242D  0022               	movlb	2	; select bank2
 14222  242E  00D1               	movwf	___ftmul@f2^(0+256)
 14223  242F  0023               	movlb	3	; select bank3
 14224  2430  0835               	movf	(eval_poly@x+1)^(0+384),w
 14225  2431  0022               	movlb	2	; select bank2
 14226  2432  00D2               	movwf	(___ftmul@f2+1)^(0+256)
 14227  2433  0023               	movlb	3	; select bank3
 14228  2434  0836               	movf	(eval_poly@x+2)^(0+384),w
 14229  2435  0022               	movlb	2	; select bank2
 14230  2436  00D3               	movwf	(___ftmul@f2+2)^(0+256)
 14231  2437  319C  24D5  31A3   	fcall	___ftmul
 14232  243A  0022               	movlb	2	; select bank2
 14233  243B  084E               	movf	?___ftmul^(0+256),w
 14234  243C  00C4               	movwf	___ftadd@f2^(0+256)
 14235  243D  084F               	movf	(?___ftmul+1)^(0+256),w
 14236  243E  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 14237  243F  0850               	movf	(?___ftmul+2)^(0+256),w
 14238  2440  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 14239  2441  3191  2116  31A3   	fcall	___ftadd
 14240  2444  0022               	movlb	2	; select bank2
 14241  2445  0841               	movf	?___ftadd^(0+256),w
 14242  2446  0023               	movlb	3	; select bank3
 14243  2447  00BB               	movwf	eval_poly@res^(0+384)
 14244  2448  0022               	movlb	2	; select bank2
 14245  2449  0842               	movf	(?___ftadd+1)^(0+256),w
 14246  244A  0023               	movlb	3	; select bank3
 14247  244B  00BC               	movwf	(eval_poly@res+1)^(0+384)
 14248  244C  0022               	movlb	2	; select bank2
 14249  244D  0843               	movf	(?___ftadd+2)^(0+256),w
 14250  244E  0023               	movlb	3	; select bank3
 14251  244F  2BFD               	goto	L14
 14252  2450                     l8425:	
 14253  2450  083B               	movf	eval_poly@res^(0+384),w
 14254  2451  00B4               	movwf	?_eval_poly^(0+384)
 14255  2452  083C               	movf	(eval_poly@res+1)^(0+384),w
 14256  2453  00B5               	movwf	(?_eval_poly+1)^(0+384)
 14257  2454  083D               	movf	(eval_poly@res+2)^(0+384),w
 14258  2455  00B6               	movwf	(?_eval_poly+2)^(0+384)
 14259  2456  0008               	return
 14260  2457                     __end_of_eval_poly:	
 14261                           
 14262                           	psect	text44
 14263  2BDF                     __ptext44:	
 14264 ;; *************** function ___wmul *****************
 14265 ;; Defined at:
 14266 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;  multiplier      2   14[BANK3 ] unsigned int 
 14269 ;;  multiplicand    2   16[BANK3 ] unsigned int 
 14270 ;; Auto vars:     Size  Location     Type
 14271 ;;  product         2   18[BANK3 ] unsigned int 
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  2   14[BANK3 ] unsigned int 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14281 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14282 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14284 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14285 ;;Total ram usage:        6 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    5
 14288 ;; This function calls:
 14289 ;;		Nothing
 14290 ;; This function is called by:
 14291 ;;		_calcSinArray
 14292 ;;		_modSin
 14293 ;;		_eval_poly
 14294 ;; This function uses a non-reentrant model
 14295 ;;
 14296                           
 14297                           
 14298                           ;psect for function ___wmul
 14299  2BDF                     ___wmul:	
 14300                           
 14301                           ;incstack = 0
 14302                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14303  2BDF  0023               	movlb	3	; select bank3
 14304  2BE0  01B2               	clrf	___wmul@product^(0+384)
 14305  2BE1  01B3               	clrf	(___wmul@product+1)^(0+384)
 14306  2BE2                     l8041:	
 14307  2BE2  1C2E               	btfss	___wmul@multiplier^(0+384),0
 14308  2BE3  2BE8               	goto	l1922
 14309  2BE4  0830               	movf	___wmul@multiplicand^(0+384),w
 14310  2BE5  07B2               	addwf	___wmul@product^(0+384),f
 14311  2BE6  0831               	movf	(___wmul@multiplicand+1)^(0+384),w
 14312  2BE7  3DB3               	addwfc	(___wmul@product+1)^(0+384),f
 14313  2BE8                     l1922:	
 14314  2BE8  3001               	movlw	1
 14315  2BE9                     u8845:	
 14316  2BE9  35B0               	lslf	___wmul@multiplicand^(0+384),f
 14317  2BEA  0DB1               	rlf	(___wmul@multiplicand+1)^(0+384),f
 14318  2BEB  0B89               	decfsz	9,f
 14319  2BEC  2BE9               	goto	u8845
 14320  2BED  3001               	movlw	1
 14321  2BEE                     u8855:	
 14322  2BEE  36AF               	lsrf	(___wmul@multiplier+1)^(0+384),f
 14323  2BEF  0CAE               	rrf	___wmul@multiplier^(0+384),f
 14324  2BF0  0B89               	decfsz	9,f
 14325  2BF1  2BEE               	goto	u8855
 14326  2BF2  082E               	movf	___wmul@multiplier^(0+384),w
 14327  2BF3  042F               	iorwf	(___wmul@multiplier+1)^(0+384),w
 14328  2BF4  1D03               	btfss	3,2
 14329  2BF5  2BE2               	goto	l8041
 14330  2BF6  0833               	movf	(___wmul@product+1)^(0+384),w
 14331  2BF7  00AF               	movwf	(?___wmul+1)^(0+384)
 14332  2BF8  0832               	movf	___wmul@product^(0+384),w
 14333  2BF9  00AE               	movwf	?___wmul^(0+384)
 14334  2BFA  0008               	return
 14335  2BFB                     __end_of___wmul:	
 14336                           
 14337                           	psect	text45
 14338  1CD5                     __ptext45:	
 14339 ;; *************** function ___ftmul *****************
 14340 ;; Defined at:
 14341 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 14342 ;; Parameters:    Size  Location     Type
 14343 ;;  f1              3   46[BANK2 ] float 
 14344 ;;  f2              3   49[BANK2 ] float 
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;  f3_as_produc    3   57[BANK2 ] unsigned um
 14347 ;;  sign            1   61[BANK2 ] unsigned char 
 14348 ;;  cntr            1   60[BANK2 ] unsigned char 
 14349 ;;  exp             1   56[BANK2 ] unsigned char 
 14350 ;; Return value:  Size  Location     Type
 14351 ;;                  3   46[BANK2 ] float 
 14352 ;; Registers used:
 14353 ;;		wreg, status,2, status,0, pclath, cstack
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14359 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14360 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14361 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14362 ;;      Totals:         0       0       0      16       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14363 ;;Total ram usage:       16 bytes
 14364 ;; Hardware stack levels used:    1
 14365 ;; Hardware stack levels required when called:    6
 14366 ;; This function calls:
 14367 ;;		___ftpack
 14368 ;; This function is called by:
 14369 ;;		_set_subdivision
 14370 ;;		_map
 14371 ;;		_scaleA100kPot
 14372 ;;		_scaleA10kPot
 14373 ;;		_scaleiA10kPot
 14374 ;;		_calcSinArray
 14375 ;;		_modSin
 14376 ;;		_pow
 14377 ;;		_sin
 14378 ;;		_eval_poly
 14379 ;;		_exp
 14380 ;;		_log
 14381 ;;		_scalePotValue
 14382 ;;		_scaleiA100kPot
 14383 ;; This function uses a non-reentrant model
 14384 ;;
 14385                           
 14386                           
 14387                           ;psect for function ___ftmul
 14388  1CD5                     ___ftmul:	
 14389                           
 14390                           ;incstack = 0
 14391                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14392  1CD5  0022               	movlb	2	; select bank2
 14393  1CD6  084E               	movf	___ftmul@f1^(0+256),w
 14394  1CD7  00D4               	movwf	??___ftmul^(0+256)
 14395  1CD8  084F               	movf	(___ftmul@f1+1)^(0+256),w
 14396  1CD9  00D5               	movwf	(??___ftmul^(0+256)+1)
 14397  1CDA  0850               	movf	(___ftmul@f1+2)^(0+256),w
 14398  1CDB  00D6               	movwf	(??___ftmul^(0+256)+2)
 14399  1CDC  1003               	clrc
 14400  1CDD  0D55               	rlf	(??___ftmul^(0+256)+1),w
 14401  1CDE  0D56               	rlf	(??___ftmul^(0+256)+2),w
 14402  1CDF  00D7               	movwf	(??___ftmul+3)^(0+256)
 14403  1CE0  0857               	movf	(??___ftmul+3)^(0+256),w
 14404  1CE1  00D8               	movwf	___ftmul@exp^(0+256)
 14405  1CE2  0858               	movf	___ftmul@exp^(0+256),w
 14406  1CE3  1D03               	btfss	3,2
 14407  1CE4  2CEC               	goto	l8165
 14408  1CE5  3000               	movlw	0
 14409  1CE6  00CE               	movwf	?___ftmul^(0+256)
 14410  1CE7  3000               	movlw	0
 14411  1CE8  00CF               	movwf	(?___ftmul+1)^(0+256)
 14412  1CE9  3000               	movlw	0
 14413  1CEA  00D0               	movwf	(?___ftmul+2)^(0+256)
 14414  1CEB  0008               	return
 14415  1CEC                     l8165:	
 14416  1CEC  0851               	movf	___ftmul@f2^(0+256),w
 14417  1CED  00D4               	movwf	??___ftmul^(0+256)
 14418  1CEE  0852               	movf	(___ftmul@f2+1)^(0+256),w
 14419  1CEF  00D5               	movwf	(??___ftmul^(0+256)+1)
 14420  1CF0  0853               	movf	(___ftmul@f2+2)^(0+256),w
 14421  1CF1  00D6               	movwf	(??___ftmul^(0+256)+2)
 14422  1CF2  1003               	clrc
 14423  1CF3  0D55               	rlf	(??___ftmul^(0+256)+1),w
 14424  1CF4  0D56               	rlf	(??___ftmul^(0+256)+2),w
 14425  1CF5  00D7               	movwf	(??___ftmul+3)^(0+256)
 14426  1CF6  0857               	movf	(??___ftmul+3)^(0+256),w
 14427  1CF7  00DD               	movwf	___ftmul@sign^(0+256)
 14428  1CF8  085D               	movf	___ftmul@sign^(0+256),w
 14429  1CF9  1D03               	btfss	3,2
 14430  1CFA  2D02               	goto	l8171
 14431  1CFB  3000               	movlw	0
 14432  1CFC  00CE               	movwf	?___ftmul^(0+256)
 14433  1CFD  3000               	movlw	0
 14434  1CFE  00CF               	movwf	(?___ftmul+1)^(0+256)
 14435  1CFF  3000               	movlw	0
 14436  1D00  00D0               	movwf	(?___ftmul+2)^(0+256)
 14437  1D01  0008               	return
 14438  1D02                     l8171:	
 14439  1D02  085D               	movf	___ftmul@sign^(0+256),w
 14440  1D03  3E7B               	addlw	123
 14441  1D04  00D4               	movwf	??___ftmul^(0+256)
 14442  1D05  0854               	movf	??___ftmul^(0+256),w
 14443  1D06  07D8               	addwf	___ftmul@exp^(0+256),f
 14444  1D07  084E               	movf	___ftmul@f1^(0+256),w
 14445  1D08  00D4               	movwf	??___ftmul^(0+256)
 14446  1D09  084F               	movf	(___ftmul@f1+1)^(0+256),w
 14447  1D0A  00D5               	movwf	(??___ftmul^(0+256)+1)
 14448  1D0B  0850               	movf	(___ftmul@f1+2)^(0+256),w
 14449  1D0C  00D6               	movwf	(??___ftmul^(0+256)+2)
 14450  1D0D  3010               	movlw	16
 14451  1D0E                     u9185:	
 14452  1D0E  36D6               	lsrf	(??___ftmul^(0+256)+2),f
 14453  1D0F  0CD5               	rrf	(??___ftmul^(0+256)+1),f
 14454  1D10  0CD4               	rrf	??___ftmul^(0+256),f
 14455  1D11  0B89               	decfsz	9,f
 14456  1D12  2D0E               	goto	u9185
 14457  1D13  0854               	movf	??___ftmul^(0+256),w
 14458  1D14  00D7               	movwf	(??___ftmul+3)^(0+256)
 14459  1D15  0857               	movf	(??___ftmul+3)^(0+256),w
 14460  1D16  00DD               	movwf	___ftmul@sign^(0+256)
 14461  1D17  0851               	movf	___ftmul@f2^(0+256),w
 14462  1D18  00D4               	movwf	??___ftmul^(0+256)
 14463  1D19  0852               	movf	(___ftmul@f2+1)^(0+256),w
 14464  1D1A  00D5               	movwf	(??___ftmul^(0+256)+1)
 14465  1D1B  0853               	movf	(___ftmul@f2+2)^(0+256),w
 14466  1D1C  00D6               	movwf	(??___ftmul^(0+256)+2)
 14467  1D1D  3010               	movlw	16
 14468  1D1E                     u9195:	
 14469  1D1E  36D6               	lsrf	(??___ftmul^(0+256)+2),f
 14470  1D1F  0CD5               	rrf	(??___ftmul^(0+256)+1),f
 14471  1D20  0CD4               	rrf	??___ftmul^(0+256),f
 14472  1D21  0B89               	decfsz	9,f
 14473  1D22  2D1E               	goto	u9195
 14474  1D23  0854               	movf	??___ftmul^(0+256),w
 14475  1D24  00D7               	movwf	(??___ftmul+3)^(0+256)
 14476  1D25  0857               	movf	(??___ftmul+3)^(0+256),w
 14477  1D26  06DD               	xorwf	___ftmul@sign^(0+256),f
 14478  1D27  3080               	movlw	128
 14479  1D28  00D4               	movwf	??___ftmul^(0+256)
 14480  1D29  0854               	movf	??___ftmul^(0+256),w
 14481  1D2A  05DD               	andwf	___ftmul@sign^(0+256),f
 14482  1D2B  17CF               	bsf	(___ftmul@f1^(0+256)+1),7
 14483  1D2C  17D2               	bsf	(___ftmul@f2^(0+256)+1),7
 14484  1D2D  30FF               	movlw	255
 14485  1D2E  05D1               	andwf	___ftmul@f2^(0+256),f
 14486  1D2F  30FF               	movlw	255
 14487  1D30  05D2               	andwf	(___ftmul@f2+1)^(0+256),f
 14488  1D31  3000               	movlw	0
 14489  1D32  05D3               	andwf	(___ftmul@f2+2)^(0+256),f
 14490  1D33  3000               	movlw	0
 14491  1D34  00D9               	movwf	___ftmul@f3_as_product^(0+256)
 14492  1D35  3000               	movlw	0
 14493  1D36  00DA               	movwf	(___ftmul@f3_as_product+1)^(0+256)
 14494  1D37  3000               	movlw	0
 14495  1D38  00DB               	movwf	(___ftmul@f3_as_product+2)^(0+256)
 14496  1D39  3007               	movlw	7
 14497  1D3A  00D4               	movwf	??___ftmul^(0+256)
 14498  1D3B  0854               	movf	??___ftmul^(0+256),w
 14499  1D3C  00DC               	movwf	___ftmul@cntr^(0+256)
 14500  1D3D                     l8183:	
 14501  1D3D  1C4E               	btfss	___ftmul@f1^(0+256),0
 14502  1D3E  2D45               	goto	l8187
 14503  1D3F  0851               	movf	___ftmul@f2^(0+256),w
 14504  1D40  07D9               	addwf	___ftmul@f3_as_product^(0+256),f
 14505  1D41  0852               	movf	(___ftmul@f2+1)^(0+256),w
 14506  1D42  3DDA               	addwfc	(___ftmul@f3_as_product+1)^(0+256),f
 14507  1D43  0853               	movf	(___ftmul@f2+2)^(0+256),w
 14508  1D44  3DDB               	addwfc	(___ftmul@f3_as_product+2)^(0+256),f
 14509  1D45                     l8187:	
 14510  1D45  3001               	movlw	1
 14511  1D46                     u9215:	
 14512  1D46  36D0               	lsrf	(___ftmul@f1+2)^(0+256),f
 14513  1D47  0CCF               	rrf	(___ftmul@f1+1)^(0+256),f
 14514  1D48  0CCE               	rrf	___ftmul@f1^(0+256),f
 14515  1D49  0B89               	decfsz	9,f
 14516  1D4A  2D46               	goto	u9215
 14517  1D4B  3001               	movlw	1
 14518  1D4C                     u9225:	
 14519  1D4C  35D1               	lslf	___ftmul@f2^(0+256),f
 14520  1D4D  0DD2               	rlf	(___ftmul@f2+1)^(0+256),f
 14521  1D4E  0DD3               	rlf	(___ftmul@f2+2)^(0+256),f
 14522  1D4F  0B89               	decfsz	9,f
 14523  1D50  2D4C               	goto	u9225
 14524  1D51  3001               	movlw	1
 14525  1D52  02DC               	subwf	___ftmul@cntr^(0+256),f
 14526  1D53  1D03               	btfss	3,2
 14527  1D54  2D3D               	goto	l8183
 14528  1D55  3009               	movlw	9
 14529  1D56  00D4               	movwf	??___ftmul^(0+256)
 14530  1D57  0854               	movf	??___ftmul^(0+256),w
 14531  1D58  00DC               	movwf	___ftmul@cntr^(0+256)
 14532  1D59                     l8195:	
 14533  1D59  1C4E               	btfss	___ftmul@f1^(0+256),0
 14534  1D5A  2D61               	goto	l8199
 14535  1D5B  0851               	movf	___ftmul@f2^(0+256),w
 14536  1D5C  07D9               	addwf	___ftmul@f3_as_product^(0+256),f
 14537  1D5D  0852               	movf	(___ftmul@f2+1)^(0+256),w
 14538  1D5E  3DDA               	addwfc	(___ftmul@f3_as_product+1)^(0+256),f
 14539  1D5F  0853               	movf	(___ftmul@f2+2)^(0+256),w
 14540  1D60  3DDB               	addwfc	(___ftmul@f3_as_product+2)^(0+256),f
 14541  1D61                     l8199:	
 14542  1D61  3001               	movlw	1
 14543  1D62                     u9255:	
 14544  1D62  36D0               	lsrf	(___ftmul@f1+2)^(0+256),f
 14545  1D63  0CCF               	rrf	(___ftmul@f1+1)^(0+256),f
 14546  1D64  0CCE               	rrf	___ftmul@f1^(0+256),f
 14547  1D65  0B89               	decfsz	9,f
 14548  1D66  2D62               	goto	u9255
 14549  1D67  3001               	movlw	1
 14550  1D68                     u9265:	
 14551  1D68  36DB               	lsrf	(___ftmul@f3_as_product+2)^(0+256),f
 14552  1D69  0CDA               	rrf	(___ftmul@f3_as_product+1)^(0+256),f
 14553  1D6A  0CD9               	rrf	___ftmul@f3_as_product^(0+256),f
 14554  1D6B  0B89               	decfsz	9,f
 14555  1D6C  2D68               	goto	u9265
 14556  1D6D  3001               	movlw	1
 14557  1D6E  02DC               	subwf	___ftmul@cntr^(0+256),f
 14558  1D6F  1D03               	btfss	3,2
 14559  1D70  2D59               	goto	l8195
 14560  1D71  0859               	movf	___ftmul@f3_as_product^(0+256),w
 14561  1D72  00A0               	movwf	___ftpack@arg^(0+256)
 14562  1D73  085A               	movf	(___ftmul@f3_as_product+1)^(0+256),w
 14563  1D74  00A1               	movwf	(___ftpack@arg+1)^(0+256)
 14564  1D75  085B               	movf	(___ftmul@f3_as_product+2)^(0+256),w
 14565  1D76  00A2               	movwf	(___ftpack@arg+2)^(0+256)
 14566  1D77  0858               	movf	___ftmul@exp^(0+256),w
 14567  1D78  00D4               	movwf	??___ftmul^(0+256)
 14568  1D79  0854               	movf	??___ftmul^(0+256),w
 14569  1D7A  00A3               	movwf	___ftpack@exp^(0+256)
 14570  1D7B  085D               	movf	___ftmul@sign^(0+256),w
 14571  1D7C  00D5               	movwf	(??___ftmul+1)^(0+256)
 14572  1D7D  0855               	movf	(??___ftmul+1)^(0+256),w
 14573  1D7E  00A4               	movwf	___ftpack@sign^(0+256)
 14574  1D7F  31A3  2380         	fcall	___ftpack
 14575  1D81  0022               	movlb	2	; select bank2
 14576  1D82  0820               	movf	?___ftpack^(0+256),w
 14577  1D83  00CE               	movwf	?___ftmul^(0+256)
 14578  1D84  0821               	movf	(?___ftpack+1)^(0+256),w
 14579  1D85  00CF               	movwf	(?___ftmul+1)^(0+256)
 14580  1D86  0822               	movf	(?___ftpack+2)^(0+256),w
 14581  1D87  00D0               	movwf	(?___ftmul+2)^(0+256)
 14582  1D88  0008               	return
 14583  1D89                     __end_of___ftmul:	
 14584                           
 14585                           	psect	text46
 14586  2CEF                     __ptext46:	
 14587 ;; *************** function ___ftsub *****************
 14588 ;; Defined at:
 14589 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 14590 ;; Parameters:    Size  Location     Type
 14591 ;;  f2              3   31[BANK3 ] float 
 14592 ;;  f1              3   34[BANK3 ] float 
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;		None
 14595 ;; Return value:  Size  Location     Type
 14596 ;;                  3   31[BANK3 ] float 
 14597 ;; Registers used:
 14598 ;;		wreg, status,2, status,0, pclath, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14604 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14607 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14608 ;;Total ram usage:        6 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:    7
 14611 ;; This function calls:
 14612 ;;		___ftadd
 14613 ;; This function is called by:
 14614 ;;		_sin
 14615 ;;		_exp
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           
 14620                           ;psect for function ___ftsub
 14621  2CEF                     ___ftsub:	
 14622                           
 14623                           ;incstack = 0
 14624                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 14625  2CEF  0023               	movlb	3	; select bank3
 14626  2CF0  0841               	movf	(___ftsub@f2+2)^(0+384),w
 14627  2CF1  0440               	iorwf	(___ftsub@f2+1)^(0+384),w
 14628  2CF2  043F               	iorwf	___ftsub@f2^(0+384),w
 14629  2CF3  1903               	skipnz
 14630  2CF4  2CF7               	goto	l8387
 14631  2CF5  3080               	movlw	128
 14632  2CF6  06C1               	xorwf	(___ftsub@f2+2)^(0+384),f
 14633  2CF7                     l8387:	
 14634  2CF7  0842               	movf	___ftsub@f1^(0+384),w
 14635  2CF8  0022               	movlb	2	; select bank2
 14636  2CF9  00C1               	movwf	___ftadd@f1^(0+256)
 14637  2CFA  0023               	movlb	3	; select bank3
 14638  2CFB  0843               	movf	(___ftsub@f1+1)^(0+384),w
 14639  2CFC  0022               	movlb	2	; select bank2
 14640  2CFD  00C2               	movwf	(___ftadd@f1+1)^(0+256)
 14641  2CFE  0023               	movlb	3	; select bank3
 14642  2CFF  0844               	movf	(___ftsub@f1+2)^(0+384),w
 14643  2D00  0022               	movlb	2	; select bank2
 14644  2D01  00C3               	movwf	(___ftadd@f1+2)^(0+256)
 14645  2D02  0023               	movlb	3	; select bank3
 14646  2D03  083F               	movf	___ftsub@f2^(0+384),w
 14647  2D04  0022               	movlb	2	; select bank2
 14648  2D05  00C4               	movwf	___ftadd@f2^(0+256)
 14649  2D06  0023               	movlb	3	; select bank3
 14650  2D07  0840               	movf	(___ftsub@f2+1)^(0+384),w
 14651  2D08  0022               	movlb	2	; select bank2
 14652  2D09  00C5               	movwf	(___ftadd@f2+1)^(0+256)
 14653  2D0A  0023               	movlb	3	; select bank3
 14654  2D0B  0841               	movf	(___ftsub@f2+2)^(0+384),w
 14655  2D0C  0022               	movlb	2	; select bank2
 14656  2D0D  00C6               	movwf	(___ftadd@f2+2)^(0+256)
 14657  2D0E  3191  2116         	fcall	___ftadd
 14658  2D10  0022               	movlb	2	; select bank2
 14659  2D11  0841               	movf	?___ftadd^(0+256),w
 14660  2D12  0023               	movlb	3	; select bank3
 14661  2D13  00BF               	movwf	?___ftsub^(0+384)
 14662  2D14  0022               	movlb	2	; select bank2
 14663  2D15  0842               	movf	(?___ftadd+1)^(0+256),w
 14664  2D16  0023               	movlb	3	; select bank3
 14665  2D17  00C0               	movwf	(?___ftsub+1)^(0+384)
 14666  2D18  0022               	movlb	2	; select bank2
 14667  2D19  0843               	movf	(?___ftadd+2)^(0+256),w
 14668  2D1A  0023               	movlb	3	; select bank3
 14669  2D1B  00C1               	movwf	(?___ftsub+2)^(0+384)
 14670  2D1C  0008               	return
 14671  2D1D                     __end_of___ftsub:	
 14672                           
 14673                           	psect	text47
 14674  1116                     __ptext47:	
 14675 ;; *************** function ___ftadd *****************
 14676 ;; Defined at:
 14677 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;  f1              3   33[BANK2 ] float 
 14680 ;;  f2              3   36[BANK2 ] float 
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  exp1            1   45[BANK2 ] unsigned char 
 14683 ;;  exp2            1   44[BANK2 ] unsigned char 
 14684 ;;  sign            1   43[BANK2 ] unsigned char 
 14685 ;; Return value:  Size  Location     Type
 14686 ;;                  3   33[BANK2 ] float 
 14687 ;; Registers used:
 14688 ;;		wreg, status,2, status,0, pclath, cstack
 14689 ;; Tracked objects:
 14690 ;;		On entry : 0/0
 14691 ;;		On exit  : 0/0
 14692 ;;		Unchanged: 0/0
 14693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14694 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14695 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14696 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14697 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14698 ;;Total ram usage:       13 bytes
 14699 ;; Hardware stack levels used:    1
 14700 ;; Hardware stack levels required when called:    6
 14701 ;; This function calls:
 14702 ;;		___ftpack
 14703 ;; This function is called by:
 14704 ;;		_map
 14705 ;;		_scaleiA10kPot
 14706 ;;		_modSin
 14707 ;;		___ftsub
 14708 ;;		_sin
 14709 ;;		_eval_poly
 14710 ;;		_floor
 14711 ;;		_log
 14712 ;;		_scalePotValue
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function ___ftadd
 14718  1116                     ___ftadd:	
 14719                           
 14720                           ;incstack = 0
 14721                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14722  1116  0022               	movlb	2	; select bank2
 14723  1117  0841               	movf	___ftadd@f1^(0+256),w
 14724  1118  00C7               	movwf	??___ftadd^(0+256)
 14725  1119  0842               	movf	(___ftadd@f1+1)^(0+256),w
 14726  111A  00C8               	movwf	(??___ftadd^(0+256)+1)
 14727  111B  0843               	movf	(___ftadd@f1+2)^(0+256),w
 14728  111C  00C9               	movwf	(??___ftadd^(0+256)+2)
 14729  111D  1003               	clrc
 14730  111E  0D48               	rlf	(??___ftadd^(0+256)+1),w
 14731  111F  0D49               	rlf	(??___ftadd^(0+256)+2),w
 14732  1120  00CA               	movwf	(??___ftadd+3)^(0+256)
 14733  1121  084A               	movf	(??___ftadd+3)^(0+256),w
 14734  1122  00CD               	movwf	___ftadd@exp1^(0+256)
 14735  1123  0844               	movf	___ftadd@f2^(0+256),w
 14736  1124  00C7               	movwf	??___ftadd^(0+256)
 14737  1125  0845               	movf	(___ftadd@f2+1)^(0+256),w
 14738  1126  00C8               	movwf	(??___ftadd^(0+256)+1)
 14739  1127  0846               	movf	(___ftadd@f2+2)^(0+256),w
 14740  1128  00C9               	movwf	(??___ftadd^(0+256)+2)
 14741  1129  1003               	clrc
 14742  112A  0D48               	rlf	(??___ftadd^(0+256)+1),w
 14743  112B  0D49               	rlf	(??___ftadd^(0+256)+2),w
 14744  112C  00CA               	movwf	(??___ftadd+3)^(0+256)
 14745  112D  084A               	movf	(??___ftadd+3)^(0+256),w
 14746  112E  00CC               	movwf	___ftadd@exp2^(0+256)
 14747  112F  084D               	movf	___ftadd@exp1^(0+256),w
 14748  1130  1903               	btfsc	3,2
 14749  1131  293E               	goto	l8075
 14750  1132  084C               	movf	___ftadd@exp2^(0+256),w
 14751  1133  024D               	subwf	___ftadd@exp1^(0+256),w
 14752  1134  1803               	skipnc
 14753  1135  2945               	goto	l8079
 14754  1136  034D               	decf	___ftadd@exp1^(0+256),w
 14755  1137  3AFF               	xorlw	255
 14756  1138  074C               	addwf	___ftadd@exp2^(0+256),w
 14757  1139  00C7               	movwf	??___ftadd^(0+256)
 14758  113A  3019               	movlw	25
 14759  113B  0247               	subwf	??___ftadd^(0+256),w
 14760  113C  1C03               	skipc
 14761  113D  2945               	goto	l8079
 14762  113E                     l8075:	
 14763  113E  0844               	movf	___ftadd@f2^(0+256),w
 14764  113F  00C1               	movwf	?___ftadd^(0+256)
 14765  1140  0845               	movf	(___ftadd@f2+1)^(0+256),w
 14766  1141  00C2               	movwf	(?___ftadd+1)^(0+256)
 14767  1142  0846               	movf	(___ftadd@f2+2)^(0+256),w
 14768  1143  00C3               	movwf	(?___ftadd+2)^(0+256)
 14769  1144  0008               	return
 14770  1145                     l8079:	
 14771  1145  084C               	movf	___ftadd@exp2^(0+256),w
 14772  1146  1903               	btfsc	3,2
 14773  1147  0008               	return
 14774  1148  084D               	movf	___ftadd@exp1^(0+256),w
 14775  1149  024C               	subwf	___ftadd@exp2^(0+256),w
 14776  114A  1803               	skipnc
 14777  114B  2954               	goto	l8085
 14778  114C  034C               	decf	___ftadd@exp2^(0+256),w
 14779  114D  3AFF               	xorlw	255
 14780  114E  074D               	addwf	___ftadd@exp1^(0+256),w
 14781  114F  00C7               	movwf	??___ftadd^(0+256)
 14782  1150  3019               	movlw	25
 14783  1151  0247               	subwf	??___ftadd^(0+256),w
 14784  1152  1803               	btfsc	3,0
 14785  1153  0008               	return
 14786  1154                     l8085:	
 14787  1154  3006               	movlw	6
 14788  1155  00C7               	movwf	??___ftadd^(0+256)
 14789  1156  0847               	movf	??___ftadd^(0+256),w
 14790  1157  00CB               	movwf	___ftadd@sign^(0+256)
 14791  1158  1BC3               	btfsc	(___ftadd@f1+2)^(0+256),7
 14792  1159  17CB               	bsf	___ftadd@sign^(0+256),7
 14793  115A  1BC6               	btfsc	(___ftadd@f2+2)^(0+256),7
 14794  115B  174B               	bsf	___ftadd@sign^(0+256),6
 14795  115C  17C2               	bsf	(___ftadd@f1^(0+256)+1),7
 14796  115D  30FF               	movlw	255
 14797  115E  05C1               	andwf	___ftadd@f1^(0+256),f
 14798  115F  30FF               	movlw	255
 14799  1160  05C2               	andwf	(___ftadd@f1+1)^(0+256),f
 14800  1161  3000               	movlw	0
 14801  1162  05C3               	andwf	(___ftadd@f1+2)^(0+256),f
 14802  1163  17C5               	bsf	(___ftadd@f2^(0+256)+1),7
 14803  1164  30FF               	movlw	255
 14804  1165  05C4               	andwf	___ftadd@f2^(0+256),f
 14805  1166  30FF               	movlw	255
 14806  1167  05C5               	andwf	(___ftadd@f2+1)^(0+256),f
 14807  1168  3000               	movlw	0
 14808  1169  05C6               	andwf	(___ftadd@f2+2)^(0+256),f
 14809  116A  084C               	movf	___ftadd@exp2^(0+256),w
 14810  116B  024D               	subwf	___ftadd@exp1^(0+256),w
 14811  116C  1803               	skipnc
 14812  116D  2990               	goto	l8107
 14813  116E                     l8097:	
 14814  116E  3001               	movlw	1
 14815  116F                     u8995:	
 14816  116F  35C4               	lslf	___ftadd@f2^(0+256),f
 14817  1170  0DC5               	rlf	(___ftadd@f2+1)^(0+256),f
 14818  1171  0DC6               	rlf	(___ftadd@f2+2)^(0+256),f
 14819  1172  0B89               	decfsz	9,f
 14820  1173  296F               	goto	u8995
 14821  1174  3001               	movlw	1
 14822  1175  02CC               	subwf	___ftadd@exp2^(0+256),f
 14823  1176  084C               	movf	___ftadd@exp2^(0+256),w
 14824  1177  064D               	xorwf	___ftadd@exp1^(0+256),w
 14825  1178  1903               	skipnz
 14826  1179  298B               	goto	l8105
 14827  117A  3001               	movlw	1
 14828  117B  02CB               	subwf	___ftadd@sign^(0+256),f
 14829  117C  084B               	movf	___ftadd@sign^(0+256),w
 14830  117D  3907               	andlw	7
 14831  117E  1903               	btfsc	3,2
 14832  117F  298B               	goto	l8105
 14833  1180  296E               	goto	l8097
 14834  1181                     l8103:	
 14835  1181  3001               	movlw	1
 14836  1182                     u9025:	
 14837  1182  36C3               	lsrf	(___ftadd@f1+2)^(0+256),f
 14838  1183  0CC2               	rrf	(___ftadd@f1+1)^(0+256),f
 14839  1184  0CC1               	rrf	___ftadd@f1^(0+256),f
 14840  1185  0B89               	decfsz	9,f
 14841  1186  2982               	goto	u9025
 14842  1187  3001               	movlw	1
 14843  1188  00C7               	movwf	??___ftadd^(0+256)
 14844  1189  0847               	movf	??___ftadd^(0+256),w
 14845  118A  07CD               	addwf	___ftadd@exp1^(0+256),f
 14846  118B                     l8105:	
 14847  118B  084D               	movf	___ftadd@exp1^(0+256),w
 14848  118C  064C               	xorwf	___ftadd@exp2^(0+256),w
 14849  118D  1903               	btfsc	3,2
 14850  118E  29B5               	goto	l2114
 14851  118F  2981               	goto	l8103
 14852  1190                     l8107:	
 14853  1190  084D               	movf	___ftadd@exp1^(0+256),w
 14854  1191  024C               	subwf	___ftadd@exp2^(0+256),w
 14855  1192  1803               	skipnc
 14856  1193  29B5               	goto	l2114
 14857  1194                     l8109:	
 14858  1194  3001               	movlw	1
 14859  1195                     u9055:	
 14860  1195  35C1               	lslf	___ftadd@f1^(0+256),f
 14861  1196  0DC2               	rlf	(___ftadd@f1+1)^(0+256),f
 14862  1197  0DC3               	rlf	(___ftadd@f1+2)^(0+256),f
 14863  1198  0B89               	decfsz	9,f
 14864  1199  2995               	goto	u9055
 14865  119A  3001               	movlw	1
 14866  119B  02CD               	subwf	___ftadd@exp1^(0+256),f
 14867  119C  084C               	movf	___ftadd@exp2^(0+256),w
 14868  119D  064D               	xorwf	___ftadd@exp1^(0+256),w
 14869  119E  1903               	skipnz
 14870  119F  29B1               	goto	l8117
 14871  11A0  3001               	movlw	1
 14872  11A1  02CB               	subwf	___ftadd@sign^(0+256),f
 14873  11A2  084B               	movf	___ftadd@sign^(0+256),w
 14874  11A3  3907               	andlw	7
 14875  11A4  1903               	btfsc	3,2
 14876  11A5  29B1               	goto	l8117
 14877  11A6  2994               	goto	l8109
 14878  11A7                     l8115:	
 14879  11A7  3001               	movlw	1
 14880  11A8                     u9085:	
 14881  11A8  36C6               	lsrf	(___ftadd@f2+2)^(0+256),f
 14882  11A9  0CC5               	rrf	(___ftadd@f2+1)^(0+256),f
 14883  11AA  0CC4               	rrf	___ftadd@f2^(0+256),f
 14884  11AB  0B89               	decfsz	9,f
 14885  11AC  29A8               	goto	u9085
 14886  11AD  3001               	movlw	1
 14887  11AE  00C7               	movwf	??___ftadd^(0+256)
 14888  11AF  0847               	movf	??___ftadd^(0+256),w
 14889  11B0  07CC               	addwf	___ftadd@exp2^(0+256),f
 14890  11B1                     l8117:	
 14891  11B1  084D               	movf	___ftadd@exp1^(0+256),w
 14892  11B2  064C               	xorwf	___ftadd@exp2^(0+256),w
 14893  11B3  1D03               	skipz
 14894  11B4  29A7               	goto	l8115
 14895  11B5                     l2114:	
 14896  11B5  1FCB               	btfss	___ftadd@sign^(0+256),7
 14897  11B6  29C7               	goto	l8121
 14898  11B7  30FF               	movlw	255
 14899  11B8  06C1               	xorwf	___ftadd@f1^(0+256),f
 14900  11B9  30FF               	movlw	255
 14901  11BA  06C2               	xorwf	(___ftadd@f1+1)^(0+256),f
 14902  11BB  30FF               	movlw	255
 14903  11BC  06C3               	xorwf	(___ftadd@f1+2)^(0+256),f
 14904  11BD  3001               	movlw	1
 14905  11BE  07C1               	addwf	___ftadd@f1^(0+256),f
 14906  11BF  3000               	movlw	0
 14907  11C0  1803               	skipnc
 14908  11C1  3001               	movlw	1
 14909  11C2  07C2               	addwf	(___ftadd@f1+1)^(0+256),f
 14910  11C3  3000               	movlw	0
 14911  11C4  1803               	skipnc
 14912  11C5  3001               	movlw	1
 14913  11C6  07C3               	addwf	(___ftadd@f1+2)^(0+256),f
 14914  11C7                     l8121:	
 14915  11C7  1F4B               	btfss	___ftadd@sign^(0+256),6
 14916  11C8  29D9               	goto	l8125
 14917  11C9  30FF               	movlw	255
 14918  11CA  06C4               	xorwf	___ftadd@f2^(0+256),f
 14919  11CB  30FF               	movlw	255
 14920  11CC  06C5               	xorwf	(___ftadd@f2+1)^(0+256),f
 14921  11CD  30FF               	movlw	255
 14922  11CE  06C6               	xorwf	(___ftadd@f2+2)^(0+256),f
 14923  11CF  3001               	movlw	1
 14924  11D0  07C4               	addwf	___ftadd@f2^(0+256),f
 14925  11D1  3000               	movlw	0
 14926  11D2  1803               	skipnc
 14927  11D3  3001               	movlw	1
 14928  11D4  07C5               	addwf	(___ftadd@f2+1)^(0+256),f
 14929  11D5  3000               	movlw	0
 14930  11D6  1803               	skipnc
 14931  11D7  3001               	movlw	1
 14932  11D8  07C6               	addwf	(___ftadd@f2+2)^(0+256),f
 14933  11D9                     l8125:	
 14934  11D9  01CB               	clrf	___ftadd@sign^(0+256)
 14935  11DA  0841               	movf	___ftadd@f1^(0+256),w
 14936  11DB  07C4               	addwf	___ftadd@f2^(0+256),f
 14937  11DC  0842               	movf	(___ftadd@f1+1)^(0+256),w
 14938  11DD  3DC5               	addwfc	(___ftadd@f2+1)^(0+256),f
 14939  11DE  0843               	movf	(___ftadd@f1+2)^(0+256),w
 14940  11DF  3DC6               	addwfc	(___ftadd@f2+2)^(0+256),f
 14941  11E0  1FC6               	btfss	(___ftadd@f2+2)^(0+256),7
 14942  11E1  29F4               	goto	l8135
 14943  11E2  30FF               	movlw	255
 14944  11E3  06C4               	xorwf	___ftadd@f2^(0+256),f
 14945  11E4  30FF               	movlw	255
 14946  11E5  06C5               	xorwf	(___ftadd@f2+1)^(0+256),f
 14947  11E6  30FF               	movlw	255
 14948  11E7  06C6               	xorwf	(___ftadd@f2+2)^(0+256),f
 14949  11E8  3001               	movlw	1
 14950  11E9  07C4               	addwf	___ftadd@f2^(0+256),f
 14951  11EA  3000               	movlw	0
 14952  11EB  1803               	skipnc
 14953  11EC  3001               	movlw	1
 14954  11ED  07C5               	addwf	(___ftadd@f2+1)^(0+256),f
 14955  11EE  3000               	movlw	0
 14956  11EF  1803               	skipnc
 14957  11F0  3001               	movlw	1
 14958  11F1  07C6               	addwf	(___ftadd@f2+2)^(0+256),f
 14959  11F2  01CB               	clrf	___ftadd@sign^(0+256)
 14960  11F3  0ACB               	incf	___ftadd@sign^(0+256),f
 14961  11F4                     l8135:	
 14962  11F4  0844               	movf	___ftadd@f2^(0+256),w
 14963  11F5  00A0               	movwf	___ftpack@arg^(0+256)
 14964  11F6  0845               	movf	(___ftadd@f2+1)^(0+256),w
 14965  11F7  00A1               	movwf	(___ftpack@arg+1)^(0+256)
 14966  11F8  0846               	movf	(___ftadd@f2+2)^(0+256),w
 14967  11F9  00A2               	movwf	(___ftpack@arg+2)^(0+256)
 14968  11FA  084D               	movf	___ftadd@exp1^(0+256),w
 14969  11FB  00C7               	movwf	??___ftadd^(0+256)
 14970  11FC  0847               	movf	??___ftadd^(0+256),w
 14971  11FD  00A3               	movwf	___ftpack@exp^(0+256)
 14972  11FE  084B               	movf	___ftadd@sign^(0+256),w
 14973  11FF  00C8               	movwf	(??___ftadd+1)^(0+256)
 14974  1200  0848               	movf	(??___ftadd+1)^(0+256),w
 14975  1201  00A4               	movwf	___ftpack@sign^(0+256)
 14976  1202  31A3  2380         	fcall	___ftpack
 14977  1204  0022               	movlb	2	; select bank2
 14978  1205  0820               	movf	?___ftpack^(0+256),w
 14979  1206  00C1               	movwf	?___ftadd^(0+256)
 14980  1207  0821               	movf	(?___ftpack+1)^(0+256),w
 14981  1208  00C2               	movwf	(?___ftadd+1)^(0+256)
 14982  1209  0822               	movf	(?___ftpack+2)^(0+256),w
 14983  120A  00C3               	movwf	(?___ftadd+2)^(0+256)
 14984  120B  0008               	return
 14985  120C                     __end_of___ftadd:	
 14986                           
 14987                           	psect	text48
 14988  2AE9                     __ptext48:	
 14989 ;; *************** function ___ftneg *****************
 14990 ;; Defined at:
 14991 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 14992 ;; Parameters:    Size  Location     Type
 14993 ;;  f1              3   30[BANK2 ] float 
 14994 ;; Auto vars:     Size  Location     Type
 14995 ;;		None
 14996 ;; Return value:  Size  Location     Type
 14997 ;;                  3   30[BANK2 ] float 
 14998 ;; Registers used:
 14999 ;;		wreg
 15000 ;; Tracked objects:
 15001 ;;		On entry : 0/0
 15002 ;;		On exit  : 0/0
 15003 ;;		Unchanged: 0/0
 15004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15005 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15008 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15009 ;;Total ram usage:        3 bytes
 15010 ;; Hardware stack levels used:    1
 15011 ;; Hardware stack levels required when called:    5
 15012 ;; This function calls:
 15013 ;;		Nothing
 15014 ;; This function is called by:
 15015 ;;		_map
 15016 ;;		_scaleiA10kPot
 15017 ;;		_modSin
 15018 ;;		_pow
 15019 ;;		_sin
 15020 ;;		_exp
 15021 ;;		_ldexp
 15022 ;;		_scalePotValue
 15023 ;; This function uses a non-reentrant model
 15024 ;;
 15025                           
 15026                           
 15027                           ;psect for function ___ftneg
 15028  2AE9                     ___ftneg:	
 15029                           
 15030                           ;incstack = 0
 15031                           ; Regs used in ___ftneg: [wreg]
 15032  2AE9  0022               	movlb	2	; select bank2
 15033  2AEA  0840               	movf	(___ftneg@f1+2)^(0+256),w
 15034  2AEB  043F               	iorwf	(___ftneg@f1+1)^(0+256),w
 15035  2AEC  043E               	iorwf	___ftneg@f1^(0+256),w
 15036  2AED  1903               	skipnz
 15037  2AEE  0008               	return
 15038  2AEF  3080               	movlw	128
 15039  2AF0  06C0               	xorwf	(___ftneg@f1+2)^(0+256),f
 15040  2AF1  0008               	return
 15041  2AF2                     __end_of___ftneg:	
 15042                           
 15043                           	psect	text49
 15044  1ACE                     __ptext49:	
 15045 ;; *************** function ___ftdiv *****************
 15046 ;; Defined at:
 15047 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;  f2              3   14[BANK2 ] float 
 15050 ;;  f1              3   17[BANK2 ] float 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  f3              3   25[BANK2 ] float 
 15053 ;;  sign            1   29[BANK2 ] unsigned char 
 15054 ;;  exp             1   28[BANK2 ] unsigned char 
 15055 ;;  cntr            1   24[BANK2 ] unsigned char 
 15056 ;; Return value:  Size  Location     Type
 15057 ;;                  3   14[BANK2 ] float 
 15058 ;; Registers used:
 15059 ;;		wreg, status,2, status,0, pclath, cstack
 15060 ;; Tracked objects:
 15061 ;;		On entry : 0/0
 15062 ;;		On exit  : 0/0
 15063 ;;		Unchanged: 0/0
 15064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15065 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15066 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15067 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15068 ;;      Totals:         0       0       0      16       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15069 ;;Total ram usage:       16 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:    6
 15072 ;; This function calls:
 15073 ;;		___ftpack
 15074 ;; This function is called by:
 15075 ;;		_map
 15076 ;;		_scaleA100kPot
 15077 ;;		_scaleA10kPot
 15078 ;;		_scaleiA10kPot
 15079 ;;		_calcSinArray
 15080 ;;		_modSin
 15081 ;;		_sin
 15082 ;;		_exp
 15083 ;;		_scalePotValue
 15084 ;;		_scaleiA100kPot
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           
 15089                           ;psect for function ___ftdiv
 15090  1ACE                     ___ftdiv:	
 15091                           
 15092                           ;incstack = 0
 15093                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15094  1ACE  0022               	movlb	2	; select bank2
 15095  1ACF  0831               	movf	___ftdiv@f1^(0+256),w
 15096  1AD0  00B4               	movwf	??___ftdiv^(0+256)
 15097  1AD1  0832               	movf	(___ftdiv@f1+1)^(0+256),w
 15098  1AD2  00B5               	movwf	(??___ftdiv^(0+256)+1)
 15099  1AD3  0833               	movf	(___ftdiv@f1+2)^(0+256),w
 15100  1AD4  00B6               	movwf	(??___ftdiv^(0+256)+2)
 15101  1AD5  1003               	clrc
 15102  1AD6  0D35               	rlf	(??___ftdiv^(0+256)+1),w
 15103  1AD7  0D36               	rlf	(??___ftdiv^(0+256)+2),w
 15104  1AD8  00B7               	movwf	(??___ftdiv+3)^(0+256)
 15105  1AD9  0837               	movf	(??___ftdiv+3)^(0+256),w
 15106  1ADA  00BC               	movwf	___ftdiv@exp^(0+256)
 15107  1ADB  083C               	movf	___ftdiv@exp^(0+256),w
 15108  1ADC  1D03               	btfss	3,2
 15109  1ADD  2AE5               	goto	l8347
 15110  1ADE  3000               	movlw	0
 15111  1ADF  00AE               	movwf	?___ftdiv^(0+256)
 15112  1AE0  3000               	movlw	0
 15113  1AE1  00AF               	movwf	(?___ftdiv+1)^(0+256)
 15114  1AE2  3000               	movlw	0
 15115  1AE3  00B0               	movwf	(?___ftdiv+2)^(0+256)
 15116  1AE4  0008               	return
 15117  1AE5                     l8347:	
 15118  1AE5  082E               	movf	___ftdiv@f2^(0+256),w
 15119  1AE6  00B4               	movwf	??___ftdiv^(0+256)
 15120  1AE7  082F               	movf	(___ftdiv@f2+1)^(0+256),w
 15121  1AE8  00B5               	movwf	(??___ftdiv^(0+256)+1)
 15122  1AE9  0830               	movf	(___ftdiv@f2+2)^(0+256),w
 15123  1AEA  00B6               	movwf	(??___ftdiv^(0+256)+2)
 15124  1AEB  1003               	clrc
 15125  1AEC  0D35               	rlf	(??___ftdiv^(0+256)+1),w
 15126  1AED  0D36               	rlf	(??___ftdiv^(0+256)+2),w
 15127  1AEE  00B7               	movwf	(??___ftdiv+3)^(0+256)
 15128  1AEF  0837               	movf	(??___ftdiv+3)^(0+256),w
 15129  1AF0  00BD               	movwf	___ftdiv@sign^(0+256)
 15130  1AF1  083D               	movf	___ftdiv@sign^(0+256),w
 15131  1AF2  1D03               	btfss	3,2
 15132  1AF3  2AFB               	goto	l8353
 15133  1AF4  3000               	movlw	0
 15134  1AF5  00AE               	movwf	?___ftdiv^(0+256)
 15135  1AF6  3000               	movlw	0
 15136  1AF7  00AF               	movwf	(?___ftdiv+1)^(0+256)
 15137  1AF8  3000               	movlw	0
 15138  1AF9  00B0               	movwf	(?___ftdiv+2)^(0+256)
 15139  1AFA  0008               	return
 15140  1AFB                     l8353:	
 15141  1AFB  3000               	movlw	0
 15142  1AFC  00B9               	movwf	___ftdiv@f3^(0+256)
 15143  1AFD  3000               	movlw	0
 15144  1AFE  00BA               	movwf	(___ftdiv@f3+1)^(0+256)
 15145  1AFF  3000               	movlw	0
 15146  1B00  00BB               	movwf	(___ftdiv@f3+2)^(0+256)
 15147  1B01  3089               	movlw	137
 15148  1B02  073D               	addwf	___ftdiv@sign^(0+256),w
 15149  1B03  00B4               	movwf	??___ftdiv^(0+256)
 15150  1B04  0834               	movf	??___ftdiv^(0+256),w
 15151  1B05  02BC               	subwf	___ftdiv@exp^(0+256),f
 15152  1B06  0831               	movf	___ftdiv@f1^(0+256),w
 15153  1B07  00B4               	movwf	??___ftdiv^(0+256)
 15154  1B08  0832               	movf	(___ftdiv@f1+1)^(0+256),w
 15155  1B09  00B5               	movwf	(??___ftdiv^(0+256)+1)
 15156  1B0A  0833               	movf	(___ftdiv@f1+2)^(0+256),w
 15157  1B0B  00B6               	movwf	(??___ftdiv^(0+256)+2)
 15158  1B0C  3010               	movlw	16
 15159  1B0D                     u9485:	
 15160  1B0D  36B6               	lsrf	(??___ftdiv^(0+256)+2),f
 15161  1B0E  0CB5               	rrf	(??___ftdiv^(0+256)+1),f
 15162  1B0F  0CB4               	rrf	??___ftdiv^(0+256),f
 15163  1B10  0B89               	decfsz	9,f
 15164  1B11  2B0D               	goto	u9485
 15165  1B12  0834               	movf	??___ftdiv^(0+256),w
 15166  1B13  00B7               	movwf	(??___ftdiv+3)^(0+256)
 15167  1B14  0837               	movf	(??___ftdiv+3)^(0+256),w
 15168  1B15  00BD               	movwf	___ftdiv@sign^(0+256)
 15169  1B16  082E               	movf	___ftdiv@f2^(0+256),w
 15170  1B17  00B4               	movwf	??___ftdiv^(0+256)
 15171  1B18  082F               	movf	(___ftdiv@f2+1)^(0+256),w
 15172  1B19  00B5               	movwf	(??___ftdiv^(0+256)+1)
 15173  1B1A  0830               	movf	(___ftdiv@f2+2)^(0+256),w
 15174  1B1B  00B6               	movwf	(??___ftdiv^(0+256)+2)
 15175  1B1C  3010               	movlw	16
 15176  1B1D                     u9495:	
 15177  1B1D  36B6               	lsrf	(??___ftdiv^(0+256)+2),f
 15178  1B1E  0CB5               	rrf	(??___ftdiv^(0+256)+1),f
 15179  1B1F  0CB4               	rrf	??___ftdiv^(0+256),f
 15180  1B20  0B89               	decfsz	9,f
 15181  1B21  2B1D               	goto	u9495
 15182  1B22  0834               	movf	??___ftdiv^(0+256),w
 15183  1B23  00B7               	movwf	(??___ftdiv+3)^(0+256)
 15184  1B24  0837               	movf	(??___ftdiv+3)^(0+256),w
 15185  1B25  06BD               	xorwf	___ftdiv@sign^(0+256),f
 15186  1B26  3080               	movlw	128
 15187  1B27  00B4               	movwf	??___ftdiv^(0+256)
 15188  1B28  0834               	movf	??___ftdiv^(0+256),w
 15189  1B29  05BD               	andwf	___ftdiv@sign^(0+256),f
 15190  1B2A  17B2               	bsf	(___ftdiv@f1^(0+256)+1),7
 15191  1B2B  30FF               	movlw	255
 15192  1B2C  05B1               	andwf	___ftdiv@f1^(0+256),f
 15193  1B2D  30FF               	movlw	255
 15194  1B2E  05B2               	andwf	(___ftdiv@f1+1)^(0+256),f
 15195  1B2F  3000               	movlw	0
 15196  1B30  05B3               	andwf	(___ftdiv@f1+2)^(0+256),f
 15197  1B31  17AF               	bsf	(___ftdiv@f2^(0+256)+1),7
 15198  1B32  30FF               	movlw	255
 15199  1B33  05AE               	andwf	___ftdiv@f2^(0+256),f
 15200  1B34  30FF               	movlw	255
 15201  1B35  05AF               	andwf	(___ftdiv@f2+1)^(0+256),f
 15202  1B36  3000               	movlw	0
 15203  1B37  05B0               	andwf	(___ftdiv@f2+2)^(0+256),f
 15204  1B38  3018               	movlw	24
 15205  1B39  00B4               	movwf	??___ftdiv^(0+256)
 15206  1B3A  0834               	movf	??___ftdiv^(0+256),w
 15207  1B3B  00B8               	movwf	___ftdiv@cntr^(0+256)
 15208  1B3C                     l8367:	
 15209  1B3C  3001               	movlw	1
 15210  1B3D                     u9505:	
 15211  1B3D  35B9               	lslf	___ftdiv@f3^(0+256),f
 15212  1B3E  0DBA               	rlf	(___ftdiv@f3+1)^(0+256),f
 15213  1B3F  0DBB               	rlf	(___ftdiv@f3+2)^(0+256),f
 15214  1B40  0B89               	decfsz	9,f
 15215  1B41  2B3D               	goto	u9505
 15216  1B42  0830               	movf	(___ftdiv@f2+2)^(0+256),w
 15217  1B43  0233               	subwf	(___ftdiv@f1+2)^(0+256),w
 15218  1B44  1D03               	skipz
 15219  1B45  2B4C               	goto	u9515
 15220  1B46  082F               	movf	(___ftdiv@f2+1)^(0+256),w
 15221  1B47  0232               	subwf	(___ftdiv@f1+1)^(0+256),w
 15222  1B48  1D03               	skipz
 15223  1B49  2B4C               	goto	u9515
 15224  1B4A  082E               	movf	___ftdiv@f2^(0+256),w
 15225  1B4B  0231               	subwf	___ftdiv@f1^(0+256),w
 15226  1B4C                     u9515:	
 15227  1B4C  1C03               	skipc
 15228  1B4D  2B55               	goto	l8375
 15229  1B4E  082E               	movf	___ftdiv@f2^(0+256),w
 15230  1B4F  02B1               	subwf	___ftdiv@f1^(0+256),f
 15231  1B50  082F               	movf	(___ftdiv@f2+1)^(0+256),w
 15232  1B51  3BB2               	subwfb	(___ftdiv@f1+1)^(0+256),f
 15233  1B52  0830               	movf	(___ftdiv@f2+2)^(0+256),w
 15234  1B53  3BB3               	subwfb	(___ftdiv@f1+2)^(0+256),f
 15235  1B54  1439               	bsf	___ftdiv@f3^(0+256),0
 15236  1B55                     l8375:	
 15237  1B55  3001               	movlw	1
 15238  1B56                     u9525:	
 15239  1B56  35B1               	lslf	___ftdiv@f1^(0+256),f
 15240  1B57  0DB2               	rlf	(___ftdiv@f1+1)^(0+256),f
 15241  1B58  0DB3               	rlf	(___ftdiv@f1+2)^(0+256),f
 15242  1B59  0B89               	decfsz	9,f
 15243  1B5A  2B56               	goto	u9525
 15244  1B5B  3001               	movlw	1
 15245  1B5C  02B8               	subwf	___ftdiv@cntr^(0+256),f
 15246  1B5D  1D03               	btfss	3,2
 15247  1B5E  2B3C               	goto	l8367
 15248  1B5F  0839               	movf	___ftdiv@f3^(0+256),w
 15249  1B60  00A0               	movwf	___ftpack@arg^(0+256)
 15250  1B61  083A               	movf	(___ftdiv@f3+1)^(0+256),w
 15251  1B62  00A1               	movwf	(___ftpack@arg+1)^(0+256)
 15252  1B63  083B               	movf	(___ftdiv@f3+2)^(0+256),w
 15253  1B64  00A2               	movwf	(___ftpack@arg+2)^(0+256)
 15254  1B65  083C               	movf	___ftdiv@exp^(0+256),w
 15255  1B66  00B4               	movwf	??___ftdiv^(0+256)
 15256  1B67  0834               	movf	??___ftdiv^(0+256),w
 15257  1B68  00A3               	movwf	___ftpack@exp^(0+256)
 15258  1B69  083D               	movf	___ftdiv@sign^(0+256),w
 15259  1B6A  00B5               	movwf	(??___ftdiv+1)^(0+256)
 15260  1B6B  0835               	movf	(??___ftdiv+1)^(0+256),w
 15261  1B6C  00A4               	movwf	___ftpack@sign^(0+256)
 15262  1B6D  31A3  2380         	fcall	___ftpack
 15263  1B6F  0022               	movlb	2	; select bank2
 15264  1B70  0820               	movf	?___ftpack^(0+256),w
 15265  1B71  00AE               	movwf	?___ftdiv^(0+256)
 15266  1B72  0821               	movf	(?___ftpack+1)^(0+256),w
 15267  1B73  00AF               	movwf	(?___ftdiv+1)^(0+256)
 15268  1B74  0822               	movf	(?___ftpack+2)^(0+256),w
 15269  1B75  00B0               	movwf	(?___ftdiv+2)^(0+256)
 15270  1B76  0008               	return
 15271  1B77                     __end_of___ftdiv:	
 15272                           
 15273                           	psect	text50
 15274  2000                     __ptext50:	
 15275 ;; *************** function ___awtoft *****************
 15276 ;; Defined at:
 15277 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;  c               2    8[BANK2 ] int 
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;  sign            1   13[BANK2 ] unsigned char 
 15282 ;; Return value:  Size  Location     Type
 15283 ;;                  3    8[BANK2 ] float 
 15284 ;; Registers used:
 15285 ;;		wreg, status,2, status,0, pclath, cstack
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15291 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15292 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15293 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15294 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15295 ;;Total ram usage:        6 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:    6
 15298 ;; This function calls:
 15299 ;;		___ftpack
 15300 ;; This function is called by:
 15301 ;;		_main
 15302 ;;		_set_subdivision
 15303 ;;		_calcSinArray
 15304 ;;		_exp
 15305 ;;		_log
 15306 ;; This function uses a non-reentrant model
 15307 ;;
 15308                           
 15309                           
 15310                           ;psect for function ___awtoft
 15311  2000                     ___awtoft:	
 15312                           
 15313                           ;incstack = 0
 15314                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15315  2000  0022               	movlb	2	; select bank2
 15316  2001  01AD               	clrf	___awtoft@sign^(0+256)
 15317  2002  1FA9               	btfss	(___awtoft@c+1)^(0+256),7
 15318  2003  280B               	goto	l8337
 15319  2004  09A8               	comf	___awtoft@c^(0+256),f
 15320  2005  09A9               	comf	(___awtoft@c+1)^(0+256),f
 15321  2006  0AA8               	incf	___awtoft@c^(0+256),f
 15322  2007  1903               	skipnz
 15323  2008  0AA9               	incf	(___awtoft@c+1)^(0+256),f
 15324  2009  01AD               	clrf	___awtoft@sign^(0+256)
 15325  200A  0AAD               	incf	___awtoft@sign^(0+256),f
 15326  200B                     l8337:	
 15327  200B  0828               	movf	___awtoft@c^(0+256),w
 15328  200C  00A0               	movwf	___ftpack@arg^(0+256)
 15329  200D  0829               	movf	(___awtoft@c+1)^(0+256),w
 15330  200E  00A1               	movwf	(___ftpack@arg+1)^(0+256)
 15331  200F  01A2               	clrf	(___ftpack@arg+2)^(0+256)
 15332  2010  308E               	movlw	142
 15333  2011  00AB               	movwf	??___awtoft^(0+256)
 15334  2012  082B               	movf	??___awtoft^(0+256),w
 15335  2013  00A3               	movwf	___ftpack@exp^(0+256)
 15336  2014  082D               	movf	___awtoft@sign^(0+256),w
 15337  2015  00AC               	movwf	(??___awtoft+1)^(0+256)
 15338  2016  082C               	movf	(??___awtoft+1)^(0+256),w
 15339  2017  00A4               	movwf	___ftpack@sign^(0+256)
 15340  2018  31A3  2380         	fcall	___ftpack
 15341  201A  0022               	movlb	2	; select bank2
 15342  201B  0820               	movf	?___ftpack^(0+256),w
 15343  201C  00A8               	movwf	?___awtoft^(0+256)
 15344  201D  0821               	movf	(?___ftpack+1)^(0+256),w
 15345  201E  00A9               	movwf	(?___awtoft+1)^(0+256)
 15346  201F  0822               	movf	(?___ftpack+2)^(0+256),w
 15347  2020  00AA               	movwf	(?___awtoft+2)^(0+256)
 15348  2021  0008               	return
 15349  2022                     __end_of___awtoft:	
 15350                           
 15351                           	psect	text51
 15352  2380                     __ptext51:	
 15353 ;; *************** function ___ftpack *****************
 15354 ;; Defined at:
 15355 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 15356 ;; Parameters:    Size  Location     Type
 15357 ;;  arg             3    0[BANK2 ] unsigned um
 15358 ;;  exp             1    3[BANK2 ] unsigned char 
 15359 ;;  sign            1    4[BANK2 ] unsigned char 
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;		None
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  3    0[BANK2 ] float 
 15364 ;; Registers used:
 15365 ;;		wreg, status,2, status,0
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15371 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15373 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15374 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15375 ;;Total ram usage:        8 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; Hardware stack levels required when called:    5
 15378 ;; This function calls:
 15379 ;;		Nothing
 15380 ;; This function is called by:
 15381 ;;		___altoft
 15382 ;;		___awtoft
 15383 ;;		___ftadd
 15384 ;;		___ftdiv
 15385 ;;		___ftmul
 15386 ;;		___lltoft
 15387 ;; This function uses a non-reentrant model
 15388 ;;
 15389                           
 15390                           
 15391                           ;psect for function ___ftpack
 15392  2380                     ___ftpack:	
 15393                           
 15394                           ;incstack = 0
 15395                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15396  2380  0022               	movlb	2	; select bank2
 15397  2381  0823               	movf	___ftpack@exp^(0+256),w
 15398  2382  1903               	btfsc	3,2
 15399  2383  2B89               	goto	l7975
 15400  2384  0822               	movf	(___ftpack@arg+2)^(0+256),w
 15401  2385  0421               	iorwf	(___ftpack@arg+1)^(0+256),w
 15402  2386  0420               	iorwf	___ftpack@arg^(0+256),w
 15403  2387  1D03               	skipz
 15404  2388  2B9A               	goto	l7981
 15405  2389                     l7975:	
 15406  2389  3000               	movlw	0
 15407  238A  00A0               	movwf	?___ftpack^(0+256)
 15408  238B  3000               	movlw	0
 15409  238C  00A1               	movwf	(?___ftpack+1)^(0+256)
 15410  238D  3000               	movlw	0
 15411  238E  00A2               	movwf	(?___ftpack+2)^(0+256)
 15412  238F  0008               	return
 15413  2390                     l7979:	
 15414  2390  3001               	movlw	1
 15415  2391  00A5               	movwf	??___ftpack^(0+256)
 15416  2392  0825               	movf	??___ftpack^(0+256),w
 15417  2393  07A3               	addwf	___ftpack@exp^(0+256),f
 15418  2394  3001               	movlw	1
 15419  2395                     u8725:	
 15420  2395  36A2               	lsrf	(___ftpack@arg+2)^(0+256),f
 15421  2396  0CA1               	rrf	(___ftpack@arg+1)^(0+256),f
 15422  2397  0CA0               	rrf	___ftpack@arg^(0+256),f
 15423  2398  0B89               	decfsz	9,f
 15424  2399  2B95               	goto	u8725
 15425  239A                     l7981:	
 15426  239A  30FE               	movlw	254
 15427  239B  0522               	andwf	(___ftpack@arg+2)^(0+256),w
 15428  239C  1903               	btfsc	3,2
 15429  239D  2BB3               	goto	l2083
 15430  239E  2B90               	goto	l7979
 15431  239F                     l7983:	
 15432  239F  3001               	movlw	1
 15433  23A0  00A5               	movwf	??___ftpack^(0+256)
 15434  23A1  0825               	movf	??___ftpack^(0+256),w
 15435  23A2  07A3               	addwf	___ftpack@exp^(0+256),f
 15436  23A3  3001               	movlw	1
 15437  23A4  07A0               	addwf	___ftpack@arg^(0+256),f
 15438  23A5  3000               	movlw	0
 15439  23A6  1803               	skipnc
 15440  23A7  3001               	movlw	1
 15441  23A8  07A1               	addwf	(___ftpack@arg+1)^(0+256),f
 15442  23A9  3000               	movlw	0
 15443  23AA  1803               	skipnc
 15444  23AB  3001               	movlw	1
 15445  23AC  07A2               	addwf	(___ftpack@arg+2)^(0+256),f
 15446  23AD  3001               	movlw	1
 15447  23AE                     u8745:	
 15448  23AE  36A2               	lsrf	(___ftpack@arg+2)^(0+256),f
 15449  23AF  0CA1               	rrf	(___ftpack@arg+1)^(0+256),f
 15450  23B0  0CA0               	rrf	___ftpack@arg^(0+256),f
 15451  23B1  0B89               	decfsz	9,f
 15452  23B2  2BAE               	goto	u8745
 15453  23B3                     l2083:	
 15454  23B3  30FF               	movlw	255
 15455  23B4  0522               	andwf	(___ftpack@arg+2)^(0+256),w
 15456  23B5  1903               	btfsc	3,2
 15457  23B6  2BC0               	goto	l7991
 15458  23B7  2B9F               	goto	l7983
 15459  23B8                     l7989:	
 15460  23B8  3001               	movlw	1
 15461  23B9  02A3               	subwf	___ftpack@exp^(0+256),f
 15462  23BA  3001               	movlw	1
 15463  23BB                     u8765:	
 15464  23BB  35A0               	lslf	___ftpack@arg^(0+256),f
 15465  23BC  0DA1               	rlf	(___ftpack@arg+1)^(0+256),f
 15466  23BD  0DA2               	rlf	(___ftpack@arg+2)^(0+256),f
 15467  23BE  0B89               	decfsz	9,f
 15468  23BF  2BBB               	goto	u8765
 15469  23C0                     l7991:	
 15470  23C0  1BA1               	btfsc	(___ftpack@arg+1)^(0+256),7
 15471  23C1  2BC6               	goto	l2090
 15472  23C2  3002               	movlw	2
 15473  23C3  0223               	subwf	___ftpack@exp^(0+256),w
 15474  23C4  1803               	skipnc
 15475  23C5  2BB8               	goto	l7989
 15476  23C6                     l2090:	
 15477  23C6  1823               	btfsc	___ftpack@exp^(0+256),0
 15478  23C7  2BCE               	goto	l2091
 15479  23C8  30FF               	movlw	255
 15480  23C9  05A0               	andwf	___ftpack@arg^(0+256),f
 15481  23CA  307F               	movlw	127
 15482  23CB  05A1               	andwf	(___ftpack@arg+1)^(0+256),f
 15483  23CC  30FF               	movlw	255
 15484  23CD  05A2               	andwf	(___ftpack@arg+2)^(0+256),f
 15485  23CE                     l2091:	
 15486  23CE  1003               	clrc
 15487  23CF  0CA3               	rrf	___ftpack@exp^(0+256),f
 15488  23D0  0823               	movf	___ftpack@exp^(0+256),w
 15489  23D1  00A5               	movwf	??___ftpack^(0+256)
 15490  23D2  01A6               	clrf	(??___ftpack^(0+256)+1)
 15491  23D3  01A7               	clrf	(??___ftpack^(0+256)+2)
 15492  23D4  3010               	movlw	16
 15493  23D5                     u8805:	
 15494  23D5  35A5               	lslf	??___ftpack^(0+256),f
 15495  23D6  0DA6               	rlf	(??___ftpack^(0+256)+1),f
 15496  23D7  0DA7               	rlf	(??___ftpack^(0+256)+2),f
 15497  23D8  0B89               	decfsz	9,f
 15498  23D9  2BD5               	goto	u8805
 15499  23DA  0825               	movf	??___ftpack^(0+256),w
 15500  23DB  04A0               	iorwf	___ftpack@arg^(0+256),f
 15501  23DC  0826               	movf	(??___ftpack+1)^(0+256),w
 15502  23DD  04A1               	iorwf	(___ftpack@arg+1)^(0+256),f
 15503  23DE  0827               	movf	(??___ftpack+2)^(0+256),w
 15504  23DF  04A2               	iorwf	(___ftpack@arg+2)^(0+256),f
 15505  23E0  0824               	movf	___ftpack@sign^(0+256),w
 15506  23E1  1903               	btfsc	3,2
 15507  23E2  0008               	return
 15508  23E3  17A2               	bsf	(___ftpack@arg^(0+256)+2),7
 15509  23E4  0008               	return
 15510  23E5                     __end_of___ftpack:	
 15511                           
 15512                           	psect	text52
 15513  2B5E                     __ptext52:	
 15514 ;; *************** function _adc_convert *****************
 15515 ;; Defined at:
 15516 ;;		line 122 in file "user.c"
 15517 ;; Parameters:    Size  Location     Type
 15518 ;;  channel         1    wreg     unsigned char 
 15519 ;; Auto vars:     Size  Location     Type
 15520 ;;  channel         1    3[BANK2 ] unsigned char 
 15521 ;; Return value:  Size  Location     Type
 15522 ;;                  2    0[BANK2 ] unsigned int 
 15523 ;; Registers used:
 15524 ;;		wreg, status,2, status,0
 15525 ;; Tracked objects:
 15526 ;;		On entry : 0/0
 15527 ;;		On exit  : 0/0
 15528 ;;		Unchanged: 0/0
 15529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15530 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15531 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15532 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15533 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15534 ;;Total ram usage:        4 bytes
 15535 ;; Hardware stack levels used:    1
 15536 ;; Hardware stack levels required when called:    5
 15537 ;; This function calls:
 15538 ;;		Nothing
 15539 ;; This function is called by:
 15540 ;;		_main
 15541 ;; This function uses a non-reentrant model
 15542 ;;
 15543                           
 15544                           
 15545                           ;psect for function _adc_convert
 15546  2B5E                     _adc_convert:	
 15547                           
 15548                           ;incstack = 0
 15549                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 15550                           ;adc_convert@channel stored from wreg
 15551  2B5E  0022               	movlb	2	; select bank2
 15552  2B5F  00A3               	movwf	adc_convert@channel^(0+256)
 15553                           
 15554                           ;user.c: 123: ADCON0bits.CHS = channel;
 15555  2B60  0823               	movf	adc_convert@channel^(0+256),w
 15556  2B61  00A2               	movwf	??_adc_convert^(0+256)
 15557  2B62  0DA2               	rlf	??_adc_convert^(0+256),f
 15558  2B63  0DA2               	rlf	??_adc_convert^(0+256),f
 15559  2B64  0021               	movlb	1	; select bank1
 15560  2B65  081D               	movf	29,w	;volatile
 15561  2B66  0022               	movlb	2	; select bank2
 15562  2B67  0622               	xorwf	??_adc_convert^(0+256),w
 15563  2B68  3983               	andlw	-125
 15564  2B69  0622               	xorwf	??_adc_convert^(0+256),w
 15565  2B6A  0021               	movlb	1	; select bank1
 15566  2B6B  009D               	movwf	29	;volatile
 15567                           
 15568                           ;user.c: 124: ADCON0bits.GO = 0b1;
 15569  2B6C  149D               	bsf	29,1	;volatile
 15570  2B6D                     l605:	
 15571                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 15572                           
 15573  2B6D  189D               	btfsc	29,1	;volatile
 15574  2B6E  2B6D               	goto	l605
 15575                           
 15576                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 15577  2B6F  081C               	movf	28,w	;volatile
 15578  2B70  0022               	movlb	2	; select bank2
 15579  2B71  00A1               	movwf	(?_adc_convert+1)^(0+256)
 15580  2B72  0021               	movlb	1	; select bank1
 15581  2B73  081B               	movf	27,w	;volatile
 15582  2B74  0022               	movlb	2	; select bank2
 15583  2B75  00A0               	movwf	?_adc_convert^(0+256)
 15584  2B76  0008               	return
 15585  2B77                     __end_of_adc_convert:	
 15586                           
 15587                           	psect	text53
 15588  2022                     __ptext53:	
 15589 ;; *************** function _USARTInit *****************
 15590 ;; Defined at:
 15591 ;;		line 31 in file "usart_pic16.c"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;  baud_rate       2    0[BANK2 ] unsigned int 
 15594 ;; Auto vars:     Size  Location     Type
 15595 ;;		None
 15596 ;; Return value:  Size  Location     Type
 15597 ;;                  1    wreg      void 
 15598 ;; Registers used:
 15599 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15600 ;; Tracked objects:
 15601 ;;		On entry : 0/0
 15602 ;;		On exit  : 0/0
 15603 ;;		Unchanged: 0/0
 15604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15605 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15607 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15608 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15609 ;;Total ram usage:        3 bytes
 15610 ;; Hardware stack levels used:    1
 15611 ;; Hardware stack levels required when called:    5
 15612 ;; This function calls:
 15613 ;;		Nothing
 15614 ;; This function is called by:
 15615 ;;		_main
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           
 15620                           ;psect for function _USARTInit
 15621  2022                     _USARTInit:	
 15622                           
 15623                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 15627  2022  30FF               	movlw	255
 15628  2023  0021               	movlb	1	; select bank1
 15629  2024  00CD               	movwf	_UQEnd^(0+128)	;volatile
 15630  2025  0022               	movlb	2	; select bank2
 15631  2026  00A2               	movwf	??_USARTInit^(0+256)
 15632  2027  0822               	movf	??_USARTInit^(0+256),w
 15633  2028  0021               	movlb	1	; select bank1
 15634  2029  00CE               	movwf	_UQFront^(0+128)	;volatile
 15635                           
 15636                           ;usart_pic16.c: 37: switch(baud_rate)
 15637  202A  2835               	goto	l8889
 15638  202B                     l8879:	
 15639                           ;usart_pic16.c: 38: {
 15640                           ;usart_pic16.c: 39: case 9600:
 15641                           
 15642                           
 15643                           ;usart_pic16.c: 40: SPBRG=103;
 15644  202B  3067               	movlw	103
 15645  202C  2832               	goto	L17
 15646  202D                     l8881:	
 15647                           ;usart_pic16.c: 42: case 19200:
 15648                           
 15649                           ;usart_pic16.c: 41: break;
 15650                           
 15651                           
 15652                           ;usart_pic16.c: 43: SPBRG=51;
 15653  202D  3033               	movlw	51
 15654  202E  2832               	goto	L17
 15655  202F                     l8883:	
 15656                           ;usart_pic16.c: 45: case 31250:
 15657                           
 15658                           ;usart_pic16.c: 44: break;
 15659                           
 15660                           
 15661                           ;usart_pic16.c: 46: SPBRG = 31;
 15662  202F  301F               	movlw	31
 15663  2030  2832               	goto	L17
 15664  2031                     l8885:	
 15665                           ;usart_pic16.c: 48: case 38400:
 15666                           
 15667                           ;usart_pic16.c: 47: break;
 15668                           
 15669                           
 15670                           ;usart_pic16.c: 49: SPBRG=25;
 15671  2031  3019               	movlw	25
 15672  2032                     L17:	
 15673  2032  0023               	movlb	3	; select bank3
 15674  2033  009B               	movwf	27	;volatile
 15675                           
 15676                           ;usart_pic16.c: 51: }
 15677                           
 15678                           ;usart_pic16.c: 50: break;
 15679  2034  2858               	goto	l1714
 15680  2035                     l8889:	
 15681                           
 15682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 15683                           ; Switch size 1, requested type "space"
 15684                           ; Number of cases is 4, Range of values is 37 to 150
 15685                           ; switch strategies available:
 15686                           ; Name         Instructions Cycles
 15687                           ; simple_byte           13     7 (average)
 15688                           ; direct_byte          237     9 (fixed)
 15689                           ; jumptable            263     9 (fixed)
 15690                           ;	Chosen strategy is simple_byte
 15691  2035  0022               	movlb	2	; select bank2
 15692  2036  0821               	movf	(USARTInit@baud_rate+1)^(0+256),w
 15693  2037  3A25               	xorlw	37	; case 37
 15694  2038  1903               	skipnz
 15695  2039  2844               	goto	l9865
 15696  203A  3A6E               	xorlw	110	; case 75
 15697  203B  1903               	skipnz
 15698  203C  2849               	goto	l9867
 15699  203D  3A31               	xorlw	49	; case 122
 15700  203E  1903               	skipnz
 15701  203F  284E               	goto	l9869
 15702  2040  3AEC               	xorlw	236	; case 150
 15703  2041  1903               	skipnz
 15704  2042  2853               	goto	l9871
 15705  2043  2858               	goto	l1714
 15706  2044                     l9865:	
 15707                           
 15708                           ; Switch size 1, requested type "space"
 15709                           ; Number of cases is 1, Range of values is 128 to 128
 15710                           ; switch strategies available:
 15711                           ; Name         Instructions Cycles
 15712                           ; simple_byte            4     3 (average)
 15713                           ; direct_byte           11     9 (fixed)
 15714                           ; jumptable            263     9 (fixed)
 15715                           ;	Chosen strategy is simple_byte
 15716  2044  0820               	movf	USARTInit@baud_rate^(0+256),w
 15717  2045  3A80               	xorlw	128	; case 128
 15718  2046  1903               	skipnz
 15719  2047  282B               	goto	l8879
 15720  2048  2858               	goto	l1714
 15721  2049                     l9867:	
 15722                           
 15723                           ; Switch size 1, requested type "space"
 15724                           ; Number of cases is 1, Range of values is 0 to 0
 15725                           ; switch strategies available:
 15726                           ; Name         Instructions Cycles
 15727                           ; simple_byte            4     3 (average)
 15728                           ; direct_byte            8     6 (fixed)
 15729                           ; jumptable            260     6 (fixed)
 15730                           ;	Chosen strategy is simple_byte
 15731  2049  0820               	movf	USARTInit@baud_rate^(0+256),w
 15732  204A  3A00               	xorlw	0	; case 0
 15733  204B  1903               	skipnz
 15734  204C  282D               	goto	l8881
 15735  204D  2858               	goto	l1714
 15736  204E                     l9869:	
 15737                           
 15738                           ; Switch size 1, requested type "space"
 15739                           ; Number of cases is 1, Range of values is 18 to 18
 15740                           ; switch strategies available:
 15741                           ; Name         Instructions Cycles
 15742                           ; simple_byte            4     3 (average)
 15743                           ; direct_byte           11     9 (fixed)
 15744                           ; jumptable            263     9 (fixed)
 15745                           ;	Chosen strategy is simple_byte
 15746  204E  0820               	movf	USARTInit@baud_rate^(0+256),w
 15747  204F  3A12               	xorlw	18	; case 18
 15748  2050  1903               	skipnz
 15749  2051  282F               	goto	l8883
 15750  2052  2858               	goto	l1714
 15751  2053                     l9871:	
 15752                           
 15753                           ; Switch size 1, requested type "space"
 15754                           ; Number of cases is 1, Range of values is 0 to 0
 15755                           ; switch strategies available:
 15756                           ; Name         Instructions Cycles
 15757                           ; simple_byte            4     3 (average)
 15758                           ; direct_byte            8     6 (fixed)
 15759                           ; jumptable            260     6 (fixed)
 15760                           ;	Chosen strategy is simple_byte
 15761  2053  0820               	movf	USARTInit@baud_rate^(0+256),w
 15762  2054  3A00               	xorlw	0	; case 0
 15763  2055  1903               	skipnz
 15764  2056  2831               	goto	l8885
 15765  2057  2858               	goto	l1714
 15766  2058                     l1714:	
 15767                           
 15768                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 15769  2058  0023               	movlb	3	; select bank3
 15770  2059  131E               	bcf	30,6	;volatile
 15771                           
 15772                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 15773  205A  169E               	bsf	30,5	;volatile
 15774                           
 15775                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 15776  205B  121E               	bcf	30,4	;volatile
 15777                           
 15778                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 15779  205C  151E               	bsf	30,2	;volatile
 15780                           
 15781                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 15782  205D  179D               	bsf	29,7	;volatile
 15783                           
 15784                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 15785  205E  131D               	bcf	29,6	;volatile
 15786                           
 15787                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 15788  205F  161D               	bsf	29,4	;volatile
 15789                           
 15790                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 15791  2060  119D               	bcf	29,3	;volatile
 15792                           
 15793                           ;usart_pic16.c: 65: RCIE=1;
 15794  2061  0021               	movlb	1	; select bank1
 15795  2062  1691               	bsf	17,5	;volatile
 15796                           
 15797                           ;usart_pic16.c: 66: PEIE=1;
 15798  2063  170B               	bsf	11,6	;volatile
 15799                           
 15800                           ;usart_pic16.c: 68: (GIE = 1);
 15801  2064  178B               	bsf	11,7	;volatile
 15802  2065  0008               	return
 15803  2066                     __end_of_USARTInit:	
 15804                           
 15805                           	psect	text54
 15806  0807                     __ptext54:	
 15807 ;; *************** function _ReadSavedSettings *****************
 15808 ;; Defined at:
 15809 ;;		line 234 in file "user.c"
 15810 ;; Parameters:    Size  Location     Type
 15811 ;;		None
 15812 ;; Auto vars:     Size  Location     Type
 15813 ;;		None
 15814 ;; Return value:  Size  Location     Type
 15815 ;;                  1    wreg      void 
 15816 ;; Registers used:
 15817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15818 ;; Tracked objects:
 15819 ;;		On entry : 0/0
 15820 ;;		On exit  : 0/0
 15821 ;;		Unchanged: 0/0
 15822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15825 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15826 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15827 ;;Total ram usage:        1 bytes
 15828 ;; Hardware stack levels used:    1
 15829 ;; Hardware stack levels required when called:    6
 15830 ;; This function calls:
 15831 ;;		_FLASH_ReadWord
 15832 ;;		_set_leds_bottom
 15833 ;;		_set_leds_top
 15834 ;; This function is called by:
 15835 ;;		_main
 15836 ;; This function uses a non-reentrant model
 15837 ;;
 15838                           
 15839                           
 15840                           ;psect for function _ReadSavedSettings
 15841  0807                     _ReadSavedSettings:	
 15842                           
 15843                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 15844                           
 15845                           ;incstack = 0
 15846                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15847  0807  3081               	movlw	129
 15848  0808  0022               	movlb	2	; select bank2
 15849  0809  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+256)
 15850  080A  301F               	movlw	31
 15851  080B  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+256)+1)
 15852  080C  3190  2000  3188   	fcall	_FLASH_ReadWord
 15853  080F  0022               	movlb	2	; select bank2
 15854  0810  0821               	movf	(?_FLASH_ReadWord+1)^(0+256),w
 15855  0811  0021               	movlb	1	; select bank1
 15856  0812  00DC               	movwf	(_top_push_state+1)^(0+128)
 15857  0813  0022               	movlb	2	; select bank2
 15858  0814  0820               	movf	?_FLASH_ReadWord^(0+256),w
 15859  0815  0021               	movlb	1	; select bank1
 15860  0816  00DB               	movwf	_top_push_state^(0+128)
 15861                           
 15862                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 15863  0817  3082               	movlw	130
 15864  0818  0022               	movlb	2	; select bank2
 15865  0819  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+256)
 15866  081A  301F               	movlw	31
 15867  081B  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+256)+1)
 15868  081C  3190  2000  3188   	fcall	_FLASH_ReadWord
 15869  081F  0022               	movlb	2	; select bank2
 15870  0820  0821               	movf	(?_FLASH_ReadWord+1)^(0+256),w
 15871  0821  0021               	movlb	1	; select bank1
 15872  0822  00D8               	movwf	(_bottom_push_state+1)^(0+128)
 15873  0823  0022               	movlb	2	; select bank2
 15874  0824  0820               	movf	?_FLASH_ReadWord^(0+256),w
 15875  0825  0021               	movlb	1	; select bank1
 15876  0826  00D7               	movwf	_bottom_push_state^(0+128)
 15877                           
 15878                           ;user.c: 239: if (top_push_state > 6) {
 15879  0827  085C               	movf	(_top_push_state+1)^(0+128),w
 15880  0828  3A80               	xorlw	128
 15881  0829  0022               	movlb	2	; select bank2
 15882  082A  00A4               	movwf	??_ReadSavedSettings^(0+256)
 15883  082B  3080               	movlw	128
 15884  082C  0224               	subwf	??_ReadSavedSettings^(0+256),w
 15885  082D  1D03               	skipz
 15886  082E  2832               	goto	u10155
 15887  082F  3007               	movlw	7
 15888  0830  0021               	movlb	1	; select bank1
 15889  0831  025B               	subwf	_top_push_state^(0+128),w
 15890  0832                     u10155:	
 15891  0832  1C03               	skipc
 15892  0833  2839               	goto	l652
 15893                           
 15894                           ;user.c: 241: top_push_state = 6;
 15895  0834  3006               	movlw	6
 15896  0835  0021               	movlb	1	; select bank1
 15897  0836  00DB               	movwf	_top_push_state^(0+128)
 15898  0837  3000               	movlw	0
 15899  0838  00DC               	movwf	(_top_push_state^(0+128)+1)
 15900  0839                     l652:	
 15901                           
 15902                           ;user.c: 242: }
 15903                           ;user.c: 243: if (bottom_push_state > 5) {
 15904  0839  0021               	movlb	1	; select bank1
 15905  083A  0858               	movf	(_bottom_push_state+1)^(0+128),w
 15906  083B  3A80               	xorlw	128
 15907  083C  0022               	movlb	2	; select bank2
 15908  083D  00A4               	movwf	??_ReadSavedSettings^(0+256)
 15909  083E  3080               	movlw	128
 15910  083F  0224               	subwf	??_ReadSavedSettings^(0+256),w
 15911  0840  1D03               	skipz
 15912  0841  2845               	goto	u10165
 15913  0842  3006               	movlw	6
 15914  0843  0021               	movlb	1	; select bank1
 15915  0844  0257               	subwf	_bottom_push_state^(0+128),w
 15916  0845                     u10165:	
 15917  0845  1C03               	skipc
 15918  0846  284C               	goto	l8943
 15919                           
 15920                           ;user.c: 245: bottom_push_state = 1;
 15921  0847  3001               	movlw	1
 15922  0848  0021               	movlb	1	; select bank1
 15923  0849  00D7               	movwf	_bottom_push_state^(0+128)
 15924  084A  3000               	movlw	0
 15925  084B  00D8               	movwf	(_bottom_push_state^(0+128)+1)
 15926  084C                     l8943:	
 15927                           
 15928                           ;user.c: 246: }
 15929                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 15930  084C  0021               	movlb	1	; select bank1
 15931  084D  0861               	movf	_switchBypass_state^(0+128),w
 15932  084E  1D03               	btfss	3,2
 15933  084F  2853               	goto	u10170
 15934  0850  0027               	movlb	7	; select bank7
 15935  0851  148D               	bsf	13,1	;volatile
 15936  0852  2855               	goto	l8945
 15937  0853                     u10170:	
 15938  0853  0027               	movlb	7	; select bank7
 15939  0854  108D               	bcf	13,1	;volatile
 15940  0855                     l8945:	
 15941                           
 15942                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 15943  0855  0021               	movlb	1	; select bank1
 15944  0856  0C61               	rrf	_switchBypass_state^(0+128),w
 15945  0857  0027               	movlb	7	; select bank7
 15946  0858  1C03               	skipc
 15947  0859  110D               	bcf	13,2	;volatile
 15948  085A  1803               	skipnc
 15949  085B  150D               	bsf	13,2	;volatile
 15950                           
 15951                           ;user.c: 251: LATBbits.LATB2 = 0;
 15952  085C  0022               	movlb	2	; select bank2
 15953  085D  110D               	bcf	13,2	;volatile
 15954                           
 15955                           ;user.c: 252: LATBbits.LATB3 = 0;
 15956  085E  118D               	bcf	13,3	;volatile
 15957                           
 15958                           ;user.c: 254: LATBbits.LATB4 = 0;
 15959  085F  120D               	bcf	13,4	;volatile
 15960                           
 15961                           ;user.c: 255: LATBbits.LATB5 = 0;
 15962  0860  128D               	bcf	13,5	;volatile
 15963                           
 15964                           ;user.c: 257: LATBbits.LATB1 = 0;
 15965  0861  108D               	bcf	13,1	;volatile
 15966                           
 15967                           ;user.c: 258: LATBbits.LATB0 = 0;
 15968  0862  100D               	bcf	13,0	;volatile
 15969                           
 15970                           ;user.c: 261: set_leds_top(top_push_state, 1);
 15971  0863  0021               	movlb	1	; select bank1
 15972  0864  085C               	movf	(_top_push_state+1)^(0+128),w
 15973  0865  0022               	movlb	2	; select bank2
 15974  0866  00A1               	movwf	(set_leds_top@x+1)^(0+256)
 15975  0867  0021               	movlb	1	; select bank1
 15976  0868  085B               	movf	_top_push_state^(0+128),w
 15977  0869  0022               	movlb	2	; select bank2
 15978  086A  00A0               	movwf	set_leds_top@x^(0+256)
 15979  086B  3001               	movlw	1
 15980  086C  00A2               	movwf	set_leds_top@ledState^(0+256)
 15981  086D  3000               	movlw	0
 15982  086E  00A3               	movwf	(set_leds_top@ledState^(0+256)+1)
 15983  086F  3198  2002  3188   	fcall	_set_leds_top
 15984                           
 15985                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 15986  0872  0021               	movlb	1	; select bank1
 15987  0873  0858               	movf	(_bottom_push_state+1)^(0+128),w
 15988  0874  0022               	movlb	2	; select bank2
 15989  0875  00A1               	movwf	(set_leds_bottom@x+1)^(0+256)
 15990  0876  0021               	movlb	1	; select bank1
 15991  0877  0857               	movf	_bottom_push_state^(0+128),w
 15992  0878  0022               	movlb	2	; select bank2
 15993  0879  00A0               	movwf	set_leds_bottom@x^(0+256)
 15994  087A  31AD  25DE         	fcall	_set_leds_bottom
 15995  087C  0008               	return
 15996  087D                     __end_of_ReadSavedSettings:	
 15997                           
 15998                           	psect	text55
 15999  1802                     __ptext55:	
 16000 ;; *************** function _set_leds_top *****************
 16001 ;; Defined at:
 16002 ;;		line 16 in file "LEDs.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;  x               2    0[BANK2 ] int 
 16005 ;;  ledState        2    2[BANK2 ] int 
 16006 ;; Auto vars:     Size  Location     Type
 16007 ;;		None
 16008 ;; Return value:  Size  Location     Type
 16009 ;;                  1    wreg      void 
 16010 ;; Registers used:
 16011 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16012 ;; Tracked objects:
 16013 ;;		On entry : 0/0
 16014 ;;		On exit  : 0/0
 16015 ;;		Unchanged: 0/0
 16016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16017 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16020 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16021 ;;Total ram usage:        4 bytes
 16022 ;; Hardware stack levels used:    1
 16023 ;; Hardware stack levels required when called:    5
 16024 ;; This function calls:
 16025 ;;		Nothing
 16026 ;; This function is called by:
 16027 ;;		_ReadSavedSettings
 16028 ;;		_ring_tactiles
 16029 ;;		_solidring_tactiles
 16030 ;;		_read_top_tactile
 16031 ;;		_setPresetDisplay
 16032 ;;		_resetRingLEDs
 16033 ;;		_setExpressionDisplay
 16034 ;;		_star_tactiles
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           
 16039                           ;psect for function _set_leds_top
 16040  1802                     _set_leds_top:	
 16041                           
 16042                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 16043                           
 16044                           ;incstack = 0
 16045                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 16046  1802  0027               	movlb	7	; select bank7
 16047  1803  100C               	bcf	12,0	;volatile
 16048                           
 16049                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 16050  1804  108C               	bcf	12,1	;volatile
 16051                           
 16052                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 16053  1805  110C               	bcf	12,2	;volatile
 16054                           
 16055                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 16056  1806  118C               	bcf	12,3	;volatile
 16057                           
 16058                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 16059  1807  120C               	bcf	12,4	;volatile
 16060                           
 16061                           ;LEDs.c: 22: switch (x) {
 16062  1808  2838               	goto	l8017
 16063  1809                     l8005:	
 16064                           ;LEDs.c: 23: case 1:
 16065                           
 16066                           
 16067                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 16068  1809  0022               	movlb	2	; select bank2
 16069  180A  0C22               	rrf	set_leds_top@ledState^(0+256),w
 16070  180B  0027               	movlb	7	; select bank7
 16071  180C  1C03               	skipc
 16072  180D  100C               	bcf	12,0	;volatile
 16073  180E  1803               	skipnc
 16074  180F  140C               	bsf	12,0	;volatile
 16075                           
 16076                           ;LEDs.c: 25: break;
 16077  1810  0008               	return
 16078  1811                     l8007:	
 16079                           ;LEDs.c: 26: case 2:
 16080                           
 16081                           
 16082                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 16083  1811  0022               	movlb	2	; select bank2
 16084  1812  0C22               	rrf	set_leds_top@ledState^(0+256),w
 16085  1813  0027               	movlb	7	; select bank7
 16086  1814  1C03               	skipc
 16087  1815  108C               	bcf	12,1	;volatile
 16088  1816  1803               	skipnc
 16089  1817  148C               	bsf	12,1	;volatile
 16090                           
 16091                           ;LEDs.c: 28: break;
 16092  1818  0008               	return
 16093  1819                     l8009:	
 16094                           ;LEDs.c: 29: case 3:
 16095                           
 16096                           
 16097                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 16098  1819  0022               	movlb	2	; select bank2
 16099  181A  0C22               	rrf	set_leds_top@ledState^(0+256),w
 16100  181B  0027               	movlb	7	; select bank7
 16101  181C  1C03               	skipc
 16102  181D  110C               	bcf	12,2	;volatile
 16103  181E  1803               	skipnc
 16104  181F  150C               	bsf	12,2	;volatile
 16105                           
 16106                           ;LEDs.c: 31: break;
 16107  1820  0008               	return
 16108  1821                     l8011:	
 16109                           ;LEDs.c: 32: case 4:
 16110                           
 16111                           
 16112                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 16113  1821  0022               	movlb	2	; select bank2
 16114  1822  0C22               	rrf	set_leds_top@ledState^(0+256),w
 16115  1823  0027               	movlb	7	; select bank7
 16116  1824  1C03               	skipc
 16117  1825  118C               	bcf	12,3	;volatile
 16118  1826  1803               	skipnc
 16119  1827  158C               	bsf	12,3	;volatile
 16120                           
 16121                           ;LEDs.c: 34: break;
 16122  1828  0008               	return
 16123  1829                     l8013:	
 16124                           ;LEDs.c: 35: case 5:
 16125                           
 16126                           
 16127                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 16128  1829  0022               	movlb	2	; select bank2
 16129  182A  0C22               	rrf	set_leds_top@ledState^(0+256),w
 16130  182B  0027               	movlb	7	; select bank7
 16131  182C  1C03               	skipc
 16132  182D  120C               	bcf	12,4	;volatile
 16133  182E  1803               	skipnc
 16134  182F  160C               	bsf	12,4	;volatile
 16135                           
 16136                           ;LEDs.c: 39: break;
 16137                           
 16138                           ;LEDs.c: 38: case 6:
 16139                           
 16140                           ;LEDs.c: 37: break;
 16141  1830  0008               	return
 16142  1831                     l811:	
 16143                           ;LEDs.c: 40: case 100:
 16144                           
 16145                           
 16146                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 16147  1831  0027               	movlb	7	; select bank7
 16148  1832  140C               	bsf	12,0	;volatile
 16149                           
 16150                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 16151  1833  148C               	bsf	12,1	;volatile
 16152                           
 16153                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 16154  1834  150C               	bsf	12,2	;volatile
 16155                           
 16156                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 16157  1835  158C               	bsf	12,3	;volatile
 16158                           
 16159                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 16160  1836  160C               	bsf	12,4	;volatile
 16161                           
 16162                           ;LEDs.c: 47: }
 16163                           
 16164                           ;LEDs.c: 46: break;
 16165  1837  0008               	return
 16166  1838                     l8017:	
 16167                           
 16168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16169                           ; Switch size 1, requested type "space"
 16170                           ; Number of cases is 1, Range of values is 0 to 0
 16171                           ; switch strategies available:
 16172                           ; Name         Instructions Cycles
 16173                           ; simple_byte            4     3 (average)
 16174                           ; direct_byte            8     6 (fixed)
 16175                           ; jumptable            260     6 (fixed)
 16176                           ;	Chosen strategy is simple_byte
 16177  1838  0022               	movlb	2	; select bank2
 16178  1839  0821               	movf	(set_leds_top@x+1)^(0+256),w
 16179  183A  3A00               	xorlw	0	; case 0
 16180  183B  1903               	skipnz
 16181  183C  283E               	goto	l9873
 16182  183D  2855               	goto	l812
 16183  183E                     l9873:	
 16184                           
 16185                           ; Switch size 1, requested type "space"
 16186                           ; Number of cases is 7, Range of values is 1 to 100
 16187                           ; switch strategies available:
 16188                           ; Name         Instructions Cycles
 16189                           ; simple_byte           22    12 (average)
 16190                           ; direct_byte          209     9 (fixed)
 16191                           ; jumptable            263     9 (fixed)
 16192                           ;	Chosen strategy is simple_byte
 16193  183E  0820               	movf	set_leds_top@x^(0+256),w
 16194  183F  3A01               	xorlw	1	; case 1
 16195  1840  1903               	skipnz
 16196  1841  2809               	goto	l8005
 16197  1842  3A03               	xorlw	3	; case 2
 16198  1843  1903               	skipnz
 16199  1844  2811               	goto	l8007
 16200  1845  3A01               	xorlw	1	; case 3
 16201  1846  1903               	skipnz
 16202  1847  2819               	goto	l8009
 16203  1848  3A07               	xorlw	7	; case 4
 16204  1849  1903               	skipnz
 16205  184A  2821               	goto	l8011
 16206  184B  3A01               	xorlw	1	; case 5
 16207  184C  1903               	skipnz
 16208  184D  2829               	goto	l8013
 16209  184E  3A03               	xorlw	3	; case 6
 16210  184F  1903               	skipnz
 16211  1850  2855               	goto	l812
 16212  1851  3A62               	xorlw	98	; case 100
 16213  1852  1903               	skipnz
 16214  1853  2831               	goto	l811
 16215  1854  2855               	goto	l812
 16216  1855                     l812:	
 16217  1855  0008               	return
 16218  1856                     __end_of_set_leds_top:	
 16219                           
 16220                           	psect	text56
 16221  2DDE                     __ptext56:	
 16222 ;; *************** function _set_leds_bottom *****************
 16223 ;; Defined at:
 16224 ;;		line 51 in file "LEDs.c"
 16225 ;; Parameters:    Size  Location     Type
 16226 ;;  x               2    0[BANK2 ] int 
 16227 ;; Auto vars:     Size  Location     Type
 16228 ;;		None
 16229 ;; Return value:  Size  Location     Type
 16230 ;;                  1    wreg      void 
 16231 ;; Registers used:
 16232 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16233 ;; Tracked objects:
 16234 ;;		On entry : 0/0
 16235 ;;		On exit  : 0/0
 16236 ;;		Unchanged: 0/0
 16237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16238 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16241 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16242 ;;Total ram usage:        2 bytes
 16243 ;; Hardware stack levels used:    1
 16244 ;; Hardware stack levels required when called:    5
 16245 ;; This function calls:
 16246 ;;		Nothing
 16247 ;; This function is called by:
 16248 ;;		_ReadSavedSettings
 16249 ;;		_ring_tactiles
 16250 ;;		_solidring_tactiles
 16251 ;;		_read_bottom_tactile
 16252 ;;		_setPresetDisplay
 16253 ;;		_resetRingLEDs
 16254 ;;		_setExpressionDisplay
 16255 ;;		_star_tactiles
 16256 ;; This function uses a non-reentrant model
 16257 ;;
 16258                           
 16259                           
 16260                           ;psect for function _set_leds_bottom
 16261  2DDE                     _set_leds_bottom:	
 16262                           
 16263                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 16264                           
 16265                           ;incstack = 0
 16266                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 16267  2DDE  0022               	movlb	2	; select bank2
 16268  2DDF  100F               	bcf	15,0	;volatile
 16269                           
 16270                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 16271  2DE0  108F               	bcf	15,1	;volatile
 16272                           
 16273                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 16274  2DE1  110F               	bcf	15,2	;volatile
 16275                           
 16276                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 16277  2DE2  118F               	bcf	15,3	;volatile
 16278                           
 16279                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 16280  2DE3  120F               	bcf	15,4	;volatile
 16281                           
 16282                           ;LEDs.c: 57: switch (x) {
 16283  2DE4  2DF5               	goto	l8033
 16284  2DE5                     l816:	
 16285                           ;LEDs.c: 58: case 1:
 16286                           
 16287                           
 16288                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 16289  2DE5  140F               	bsf	15,0	;volatile
 16290                           
 16291                           ;LEDs.c: 60: break;
 16292  2DE6  0008               	return
 16293  2DE7                     l818:	
 16294                           ;LEDs.c: 61: case 2:
 16295                           
 16296                           
 16297                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 16298  2DE7  148F               	bsf	15,1	;volatile
 16299                           
 16300                           ;LEDs.c: 63: break;
 16301  2DE8  0008               	return
 16302  2DE9                     l819:	
 16303                           ;LEDs.c: 64: case 3:
 16304                           
 16305                           
 16306                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 16307  2DE9  150F               	bsf	15,2	;volatile
 16308                           
 16309                           ;LEDs.c: 66: break;
 16310  2DEA  0008               	return
 16311  2DEB                     l820:	
 16312                           ;LEDs.c: 67: case 4:
 16313                           
 16314                           
 16315                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 16316  2DEB  158F               	bsf	15,3	;volatile
 16317                           
 16318                           ;LEDs.c: 69: break;
 16319  2DEC  0008               	return
 16320  2DED                     l821:	
 16321                           ;LEDs.c: 70: case 5:
 16322                           
 16323                           
 16324                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 16325  2DED  160F               	bsf	15,4	;volatile
 16326                           
 16327                           ;LEDs.c: 74: break;
 16328                           
 16329                           ;LEDs.c: 73: case 6:
 16330                           
 16331                           ;LEDs.c: 72: break;
 16332  2DEE  0008               	return
 16333  2DEF                     l823:	
 16334                           ;LEDs.c: 75: case 100:
 16335                           
 16336                           
 16337                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 16338  2DEF  140F               	bsf	15,0	;volatile
 16339                           
 16340                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 16341  2DF0  148F               	bsf	15,1	;volatile
 16342                           
 16343                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 16344  2DF1  150F               	bsf	15,2	;volatile
 16345                           
 16346                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 16347  2DF2  158F               	bsf	15,3	;volatile
 16348                           
 16349                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 16350  2DF3  160F               	bsf	15,4	;volatile
 16351                           
 16352                           ;LEDs.c: 82: }
 16353                           
 16354                           ;LEDs.c: 81: break;
 16355  2DF4  0008               	return
 16356  2DF5                     l8033:	
 16357                           
 16358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16359                           ; Switch size 1, requested type "space"
 16360                           ; Number of cases is 1, Range of values is 0 to 0
 16361                           ; switch strategies available:
 16362                           ; Name         Instructions Cycles
 16363                           ; simple_byte            4     3 (average)
 16364                           ; direct_byte            8     6 (fixed)
 16365                           ; jumptable            260     6 (fixed)
 16366                           ;	Chosen strategy is simple_byte
 16367  2DF5  0821               	movf	(set_leds_bottom@x+1)^(0+256),w
 16368  2DF6  3A00               	xorlw	0	; case 0
 16369  2DF7  1903               	skipnz
 16370  2DF8  2DFA               	goto	l9875
 16371  2DF9  2E11               	goto	l824
 16372  2DFA                     l9875:	
 16373                           
 16374                           ; Switch size 1, requested type "space"
 16375                           ; Number of cases is 7, Range of values is 1 to 100
 16376                           ; switch strategies available:
 16377                           ; Name         Instructions Cycles
 16378                           ; simple_byte           22    12 (average)
 16379                           ; direct_byte          209     9 (fixed)
 16380                           ; jumptable            263     9 (fixed)
 16381                           ;	Chosen strategy is simple_byte
 16382  2DFA  0820               	movf	set_leds_bottom@x^(0+256),w
 16383  2DFB  3A01               	xorlw	1	; case 1
 16384  2DFC  1903               	skipnz
 16385  2DFD  2DE5               	goto	l816
 16386  2DFE  3A03               	xorlw	3	; case 2
 16387  2DFF  1903               	skipnz
 16388  2E00  2DE7               	goto	l818
 16389  2E01  3A01               	xorlw	1	; case 3
 16390  2E02  1903               	skipnz
 16391  2E03  2DE9               	goto	l819
 16392  2E04  3A07               	xorlw	7	; case 4
 16393  2E05  1903               	skipnz
 16394  2E06  2DEB               	goto	l820
 16395  2E07  3A01               	xorlw	1	; case 5
 16396  2E08  1903               	skipnz
 16397  2E09  2DED               	goto	l821
 16398  2E0A  3A03               	xorlw	3	; case 6
 16399  2E0B  1903               	skipnz
 16400  2E0C  2E11               	goto	l824
 16401  2E0D  3A62               	xorlw	98	; case 100
 16402  2E0E  1903               	skipnz
 16403  2E0F  2DEF               	goto	l823
 16404  2E10  2E11               	goto	l824
 16405  2E11                     l824:	
 16406  2E11  0008               	return
 16407  2E12                     __end_of_set_leds_bottom:	
 16408                           
 16409                           	psect	text57
 16410  1000                     __ptext57:	
 16411 ;; *************** function _FLASH_ReadWord *****************
 16412 ;; Defined at:
 16413 ;;		line 58 in file "memory.c"
 16414 ;; Parameters:    Size  Location     Type
 16415 ;;  flashAddr       2    0[BANK2 ] unsigned int 
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;  GIEBitValue     1    2[BANK2 ] unsigned char 
 16418 ;; Return value:  Size  Location     Type
 16419 ;;                  2    0[BANK2 ] unsigned int 
 16420 ;; Registers used:
 16421 ;;		wreg, status,2, status,0
 16422 ;; Tracked objects:
 16423 ;;		On entry : 0/0
 16424 ;;		On exit  : 0/0
 16425 ;;		Unchanged: 0/0
 16426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16427 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16428 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16430 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16431 ;;Total ram usage:        3 bytes
 16432 ;; Hardware stack levels used:    1
 16433 ;; Hardware stack levels required when called:    5
 16434 ;; This function calls:
 16435 ;;		Nothing
 16436 ;; This function is called by:
 16437 ;;		_ReadSavedSettings
 16438 ;;		_FLASH_WriteWord
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           
 16443                           ;psect for function _FLASH_ReadWord
 16444  1000                     _FLASH_ReadWord:	
 16445                           
 16446                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 16447                           
 16448                           ;incstack = 0
 16449                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 16450  1000  3000               	movlw	0
 16451  1001  1B8B               	btfsc	11,7	;volatile
 16452  1002  3001               	movlw	1
 16453  1003  0022               	movlb	2	; select bank2
 16454  1004  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+256)
 16455                           
 16456                           ;memory.c: 61: INTCONbits.GIE = 0;
 16457  1005  138B               	bcf	11,7	;volatile
 16458                           
 16459                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 16460  1006  0820               	movf	FLASH_ReadWord@flashAddr^(0+256),w
 16461  1007  0023               	movlb	3	; select bank3
 16462  1008  0091               	movwf	17	;volatile
 16463                           
 16464                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 16465  1009  0022               	movlb	2	; select bank2
 16466  100A  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+256),w
 16467  100B  0023               	movlb	3	; select bank3
 16468  100C  0092               	movwf	18	;volatile
 16469                           
 16470                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 16471  100D  1315               	bcf	21,6	;volatile
 16472                           
 16473                           ;memory.c: 66: PMCON1bits.RD = 1;
 16474  100E  1415               	bsf	21,0	;volatile
 16475                           
 16476                           ;memory.c: 67: __nop();
 16477  100F  0000               	nop
 16478                           
 16479                           ;memory.c: 68: __nop();
 16480  1010  0000               	nop
 16481                           
 16482                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 16483  1011  0022               	movlb	2	; select bank2
 16484  1012  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+256),w
 16485  1013  1C03               	skipc
 16486  1014  138B               	bcf	11,7	;volatile
 16487  1015  1803               	skipnc
 16488  1016  178B               	bsf	11,7	;volatile
 16489                           
 16490                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 16491  1017  0023               	movlb	3	; select bank3
 16492  1018  0814               	movf	20,w	;volatile
 16493  1019  0022               	movlb	2	; select bank2
 16494  101A  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+256)
 16495  101B  0023               	movlb	3	; select bank3
 16496  101C  0813               	movf	19,w	;volatile
 16497  101D  0022               	movlb	2	; select bank2
 16498  101E  00A0               	movwf	?_FLASH_ReadWord^(0+256)
 16499  101F  0008               	return
 16500  1020                     __end_of_FLASH_ReadWord:	
 16501                           
 16502                           	psect	text58
 16503  2C9F                     __ptext58:	
 16504 ;; *************** function _InitializeTaps *****************
 16505 ;; Defined at:
 16506 ;;		line 228 in file "user.c"
 16507 ;; Parameters:    Size  Location     Type
 16508 ;;		None
 16509 ;; Auto vars:     Size  Location     Type
 16510 ;;  itap            2    1[BANK2 ] int 
 16511 ;; Return value:  Size  Location     Type
 16512 ;;                  1    wreg      void 
 16513 ;; Registers used:
 16514 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16515 ;; Tracked objects:
 16516 ;;		On entry : 0/0
 16517 ;;		On exit  : 0/0
 16518 ;;		Unchanged: 0/0
 16519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16521 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16522 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16523 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16524 ;;Total ram usage:        3 bytes
 16525 ;; Hardware stack levels used:    1
 16526 ;; Hardware stack levels required when called:    5
 16527 ;; This function calls:
 16528 ;;		Nothing
 16529 ;; This function is called by:
 16530 ;;		_main
 16531 ;; This function uses a non-reentrant model
 16532 ;;
 16533                           
 16534                           
 16535                           ;psect for function _InitializeTaps
 16536  2C9F                     _InitializeTaps:	
 16537                           
 16538                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 16539                           
 16540                           ;incstack = 0
 16541                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 16542  2C9F  0022               	movlb	2	; select bank2
 16543  2CA0  01A1               	clrf	InitializeTaps@itap^(0+256)
 16544  2CA1  01A2               	clrf	(InitializeTaps@itap+1)^(0+256)
 16545  2CA2                     L18:	
 16546  2CA2  0822               	movf	(InitializeTaps@itap+1)^(0+256),w
 16547  2CA3  3A80               	xorlw	128
 16548  2CA4  00A0               	movwf	??_InitializeTaps^(0+256)
 16549  2CA5  3080               	movlw	128
 16550  2CA6  0220               	subwf	??_InitializeTaps^(0+256),w
 16551  2CA7  1D03               	skipz
 16552  2CA8  2CAB               	goto	u10125
 16553  2CA9  300C               	movlw	12
 16554  2CAA  0221               	subwf	InitializeTaps@itap^(0+256),w
 16555  2CAB                     u10125:	
 16556  2CAB  1803               	btfsc	3,0
 16557  2CAC  0008               	return
 16558                           
 16559                           ;user.c: 230: tap[itap] = 0;
 16560  2CAD  0022               	movlb	2	; select bank2
 16561  2CAE  0821               	movf	InitializeTaps@itap^(0+256),w
 16562  2CAF  00A0               	movwf	??_InitializeTaps^(0+256)
 16563  2CB0  3001               	movlw	1
 16564  2CB1                     u10135:	
 16565  2CB1  35A0               	lslf	??_InitializeTaps^(0+256),f
 16566  2CB2  3EFF               	addlw	-1
 16567  2CB3  1D03               	skipz
 16568  2CB4  2CB1               	goto	u10135
 16569  2CB5  3520               	lslf	??_InitializeTaps^(0+256),w
 16570  2CB6  3E20               	addlw	(low (_tap| (0+768)))& (0+255)
 16571  2CB7  0086               	movwf	6
 16572  2CB8  3003               	movlw	3	; select bank6/7
 16573  2CB9  0087               	movwf	7
 16574  2CBA  3000               	movlw	0
 16575  2CBB  3FC0               	movwi [0]fsr1
 16576  2CBC  3000               	movlw	0
 16577  2CBD  3FC1               	movwi [1]fsr1
 16578  2CBE  3FC2               	movwi [2]fsr1
 16579  2CBF  3FC3               	movwi [3]fsr1
 16580  2CC0  3001               	movlw	1
 16581  2CC1  07A1               	addwf	InitializeTaps@itap^(0+256),f
 16582  2CC2  3000               	movlw	0
 16583  2CC3  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+256),f
 16584  2CC4  2CA2               	goto	L18
 16585  2CC5                     __end_of_InitializeTaps:	
 16586                           
 16587                           	psect	text59
 16588  2D4C                     __ptext59:	
 16589 ;; *************** function _InitApp *****************
 16590 ;; Defined at:
 16591 ;;		line 23 in file "user.c"
 16592 ;; Parameters:    Size  Location     Type
 16593 ;;		None
 16594 ;; Auto vars:     Size  Location     Type
 16595 ;;		None
 16596 ;; Return value:  Size  Location     Type
 16597 ;;                  1    wreg      void 
 16598 ;; Registers used:
 16599 ;;		wreg, status,2, status,0, pclath, cstack
 16600 ;; Tracked objects:
 16601 ;;		On entry : 0/0
 16602 ;;		On exit  : 0/0
 16603 ;;		Unchanged: 0/0
 16604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16609 ;;Total ram usage:        0 bytes
 16610 ;; Hardware stack levels used:    1
 16611 ;; Hardware stack levels required when called:    7
 16612 ;; This function calls:
 16613 ;;		_init_adc
 16614 ;;		_init_pwm
 16615 ;; This function is called by:
 16616 ;;		_main
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           
 16621                           ;psect for function _InitApp
 16622  2D4C                     _InitApp:	
 16623                           
 16624                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 16625                           
 16626                           ;incstack = 0
 16627                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 16628  2D4C  0021               	movlb	1	; select bank1
 16629  2D4D  100D               	bcf	13,0	;volatile
 16630                           
 16631                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 16632  2D4E  108D               	bcf	13,1	;volatile
 16633                           
 16634                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 16635  2D4F  110D               	bcf	13,2	;volatile
 16636                           
 16637                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 16638  2D50  118D               	bcf	13,3	;volatile
 16639                           
 16640                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 16641  2D51  120D               	bcf	13,4	;volatile
 16642                           
 16643                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 16644  2D52  128D               	bcf	13,5	;volatile
 16645                           
 16646                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 16647  2D53  140E               	bsf	14,0	;volatile
 16648                           
 16649                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 16650  2D54  120E               	bcf	14,4	;volatile
 16651                           
 16652                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 16653  2D55  128E               	bcf	14,5	;volatile
 16654                           
 16655                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 16656  2D56  100F               	bcf	15,0	;volatile
 16657                           
 16658                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 16659  2D57  108F               	bcf	15,1	;volatile
 16660                           
 16661                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 16662  2D58  110F               	bcf	15,2	;volatile
 16663                           
 16664                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 16665  2D59  118F               	bcf	15,3	;volatile
 16666                           
 16667                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 16668  2D5A  120F               	bcf	15,4	;volatile
 16669                           
 16670                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 16671  2D5B  168F               	bsf	15,5	;volatile
 16672                           
 16673                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 16674  2D5C  170F               	bsf	15,6	;volatile
 16675                           
 16676                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 16677  2D5D  178F               	bsf	15,7	;volatile
 16678                           
 16679                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 16680  2D5E  1410               	bsf	16,0	;volatile
 16681                           
 16682                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 16683  2D5F  1490               	bsf	16,1	;volatile
 16684                           
 16685                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 16686  2D60  0023               	movlb	3	; select bank3
 16687  2D61  1010               	bcf	16,0	;volatile
 16688                           
 16689                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 16690  2D62  1090               	bcf	16,1	;volatile
 16691                           
 16692                           ;user.c: 53: PORTEbits.RE0 = 0;
 16693  2D63  0020               	movlb	0	; select bank0
 16694  2D64  1010               	bcf	16,0	;volatile
 16695                           
 16696                           ;user.c: 54: PORTEbits.RE1 = 0;
 16697  2D65  1090               	bcf	16,1	;volatile
 16698                           
 16699                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 16700  2D66  0026               	movlb	6	; select bank6
 16701  2D67  100C               	bcf	12,0	;volatile
 16702                           
 16703                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 16704  2D68  108C               	bcf	12,1	;volatile
 16705                           
 16706                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 16707  2D69  110C               	bcf	12,2	;volatile
 16708                           
 16709                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 16710  2D6A  118C               	bcf	12,3	;volatile
 16711                           
 16712                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 16713  2D6B  120C               	bcf	12,4	;volatile
 16714                           
 16715                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 16716  2D6C  128C               	bcf	12,5	;volatile
 16717                           
 16718                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 16719  2D6D  170C               	bsf	12,6	;volatile
 16720                           
 16721                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 16722  2D6E  0028               	movlb	8	; select bank8
 16723  2D6F  130C               	bcf	12,6	;volatile
 16724                           
 16725                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 16726  2D70  0026               	movlb	6	; select bank6
 16727  2D71  108D               	bcf	13,1	;volatile
 16728                           
 16729                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 16730  2D72  110D               	bcf	13,2	;volatile
 16731                           
 16732                           ;user.c: 68: init_adc();
 16733  2D73  31AA  22F2  31AD   	fcall	_init_adc
 16734                           
 16735                           ;user.c: 69: init_pwm();
 16736  2D76  31AF  27BF         	fcall	_init_pwm
 16737                           
 16738                           ;user.c: 71: INTCONbits.GIE = 0b1;
 16739  2D78  178B               	bsf	11,7	;volatile
 16740                           
 16741                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 16742  2D79  168B               	bsf	11,5	;volatile
 16743                           
 16744                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 16745  2D7A  110B               	bcf	11,2	;volatile
 16746  2D7B  0008               	return
 16747  2D7C                     __end_of_InitApp:	
 16748                           
 16749                           	psect	text60
 16750  2FBF                     __ptext60:	
 16751 ;; *************** function _init_pwm *****************
 16752 ;; Defined at:
 16753 ;;		line 129 in file "user.c"
 16754 ;; Parameters:    Size  Location     Type
 16755 ;;		None
 16756 ;; Auto vars:     Size  Location     Type
 16757 ;;		None
 16758 ;; Return value:  Size  Location     Type
 16759 ;;                  1    wreg      void 
 16760 ;; Registers used:
 16761 ;;		wreg, status,2, status,0, pclath, cstack
 16762 ;; Tracked objects:
 16763 ;;		On entry : 0/0
 16764 ;;		On exit  : 0/0
 16765 ;;		Unchanged: 0/0
 16766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16771 ;;Total ram usage:        0 bytes
 16772 ;; Hardware stack levels used:    1
 16773 ;; Hardware stack levels required when called:    6
 16774 ;; This function calls:
 16775 ;;		_init_timer0
 16776 ;;		_init_timer2
 16777 ;; This function is called by:
 16778 ;;		_InitApp
 16779 ;; This function uses a non-reentrant model
 16780 ;;
 16781                           
 16782                           
 16783                           ;psect for function _init_pwm
 16784  2FBF                     _init_pwm:	
 16785                           
 16786                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 16787                           
 16788                           ;incstack = 0
 16789                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 16790  2FBF  0022               	movlb	2	; select bank2
 16791  2FC0  101D               	bcf	29,0	;volatile
 16792                           
 16793                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 16794  2FC1  0021               	movlb	1	; select bank1
 16795  2FC2  110E               	bcf	14,2	;volatile
 16796                           
 16797                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 16798  2FC3  108E               	bcf	14,1	;volatile
 16799                           
 16800                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 16801  2FC4  0026               	movlb	6	; select bank6
 16802  2FC5  100D               	bcf	13,0	;volatile
 16803                           
 16804                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 16805  2FC6  118D               	bcf	13,3	;volatile
 16806                           
 16807                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 16808  2FC7  120D               	bcf	13,4	;volatile
 16809                           
 16810                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 16811  2FC8  0021               	movlb	1	; select bank1
 16812  2FC9  1310               	bcf	16,6	;volatile
 16813                           
 16814                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 16815  2FCA  1290               	bcf	16,5	;volatile
 16816                           
 16817                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 16818  2FCB  1210               	bcf	16,4	;volatile
 16819                           
 16820                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 16821  2FCC  1190               	bcf	16,3	;volatile
 16822                           
 16823                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 16824  2FCD  1110               	bcf	16,2	;volatile
 16825                           
 16826                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 16827  2FCE  300F               	movlw	15
 16828  2FCF  0025               	movlb	5	; select bank5
 16829  2FD0  0493               	iorwf	19,f	;volatile
 16830                           
 16831                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 16832  2FD1  300F               	movlw	15
 16833  2FD2  049A               	iorwf	26,f	;volatile
 16834                           
 16835                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 16836  2FD3  300F               	movlw	15
 16837  2FD4  0026               	movlb	6	; select bank6
 16838  2FD5  0493               	iorwf	19,f	;volatile
 16839                           
 16840                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 16841  2FD6  300F               	movlw	15
 16842  2FD7  049A               	iorwf	26,f	;volatile
 16843                           
 16844                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 16845  2FD8  300F               	movlw	15
 16846  2FD9  049E               	iorwf	30,f	;volatile
 16847                           
 16848                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 16849  2FDA  300F               	movlw	15
 16850  2FDB  002C               	movlb	12	; select bank12
 16851  2FDC  0493               	iorwf	19,f	;volatile
 16852                           
 16853                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 16854  2FDD  300F               	movlw	15
 16855  2FDE  0496               	iorwf	22,f	;volatile
 16856                           
 16857                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 16858  2FDF  300F               	movlw	15
 16859  2FE0  0499               	iorwf	25,f	;volatile
 16860                           
 16861                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 16862  2FE1  300F               	movlw	15
 16863  2FE2  049C               	iorwf	28,f	;volatile
 16864                           
 16865                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 16866  2FE3  300F               	movlw	15
 16867  2FE4  049F               	iorwf	31,f	;volatile
 16868                           
 16869                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 16870  2FE5  0025               	movlb	5	; select bank5
 16871  2FE6  019D               	clrf	29	;volatile
 16872                           
 16873                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 16874  2FE7  019E               	clrf	30	;volatile
 16875                           
 16876                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 16877  2FE8  019F               	clrf	31	;volatile
 16878                           
 16879                           ;user.c: 154: CCPR1 = 50;
 16880  2FE9  3000               	movlw	0
 16881  2FEA  0092               	movwf	18	;volatile
 16882  2FEB  3032               	movlw	50
 16883  2FEC  0091               	movwf	17	;volatile
 16884                           
 16885                           ;user.c: 155: CCPR2 = 100;
 16886  2FED  3000               	movlw	0
 16887  2FEE  0099               	movwf	25	;volatile
 16888  2FEF  3064               	movlw	100
 16889  2FF0  0098               	movwf	24	;volatile
 16890                           
 16891                           ;user.c: 156: CCPR3 = 150;
 16892  2FF1  3000               	movlw	0
 16893  2FF2  0026               	movlb	6	; select bank6
 16894  2FF3  0092               	movwf	18	;volatile
 16895  2FF4  3096               	movlw	150
 16896  2FF5  0091               	movwf	17	;volatile
 16897                           
 16898                           ;user.c: 157: CCPR4 = 200;
 16899  2FF6  3000               	movlw	0
 16900  2FF7  0099               	movwf	25	;volatile
 16901  2FF8  30C8               	movlw	200
 16902  2FF9  0098               	movwf	24	;volatile
 16903                           
 16904                           ;user.c: 158: init_timer2();
 16905  2FFA  31AA  22E0  31AF   	fcall	_init_timer2
 16906                           
 16907                           ;user.c: 159: init_timer0();
 16908  2FFD  3188  2000         	fcall	_init_timer0
 16909  2FFF  0008               	return
 16910  3000                     __end_of_init_pwm:	
 16911                           
 16912                           	psect	text61
 16913  2AE0                     __ptext61:	
 16914 ;; *************** function _init_timer2 *****************
 16915 ;; Defined at:
 16916 ;;		line 162 in file "user.c"
 16917 ;; Parameters:    Size  Location     Type
 16918 ;;		None
 16919 ;; Auto vars:     Size  Location     Type
 16920 ;;		None
 16921 ;; Return value:  Size  Location     Type
 16922 ;;                  1    wreg      void 
 16923 ;; Registers used:
 16924 ;;		wreg, status,2, status,0
 16925 ;; Tracked objects:
 16926 ;;		On entry : 0/0
 16927 ;;		On exit  : 0/0
 16928 ;;		Unchanged: 0/0
 16929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16934 ;;Total ram usage:        0 bytes
 16935 ;; Hardware stack levels used:    1
 16936 ;; Hardware stack levels required when called:    5
 16937 ;; This function calls:
 16938 ;;		Nothing
 16939 ;; This function is called by:
 16940 ;;		_init_pwm
 16941 ;; This function uses a non-reentrant model
 16942 ;;
 16943                           
 16944                           
 16945                           ;psect for function _init_timer2
 16946  2AE0                     _init_timer2:	
 16947                           
 16948                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 16949                           
 16950                           ;incstack = 0
 16951                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 16952  2AE0  3087               	movlw	-121
 16953  2AE1  0020               	movlb	0	; select bank0
 16954  2AE2  059C               	andwf	28,f	;volatile
 16955                           
 16956                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 16957  2AE3  30FC               	movlw	-4
 16958  2AE4  059C               	andwf	28,f	;volatile
 16959                           
 16960                           ;user.c: 165: PR2 = 0xFF;
 16961  2AE5  30FF               	movlw	255
 16962  2AE6  009B               	movwf	27	;volatile
 16963                           
 16964                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 16965  2AE7  151C               	bsf	28,2	;volatile
 16966  2AE8  0008               	return
 16967  2AE9                     __end_of_init_timer2:	
 16968                           
 16969                           	psect	text62
 16970  0800                     __ptext62:	
 16971 ;; *************** function _init_timer0 *****************
 16972 ;; Defined at:
 16973 ;;		line 169 in file "user.c"
 16974 ;; Parameters:    Size  Location     Type
 16975 ;;		None
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;		None
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  1    wreg      void 
 16980 ;; Registers used:
 16981 ;;		None
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16991 ;;Total ram usage:        0 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    5
 16994 ;; This function calls:
 16995 ;;		Nothing
 16996 ;; This function is called by:
 16997 ;;		_init_pwm
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           
 17002                           ;psect for function _init_timer0
 17003  0800                     _init_timer0:	
 17004                           
 17005                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 17006                           
 17007                           ;incstack = 0
 17008                           ; Regs used in _init_timer0: []
 17009  0800  0021               	movlb	1	; select bank1
 17010  0801  1295               	bcf	21,5	;volatile
 17011                           
 17012                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 17013  0802  1195               	bcf	21,3	;volatile
 17014                           
 17015                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 17016  0803  1015               	bcf	21,0	;volatile
 17017                           
 17018                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 17019  0804  1495               	bsf	21,1	;volatile
 17020                           
 17021                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 17022  0805  1115               	bcf	21,2	;volatile
 17023  0806  0008               	return
 17024  0807                     __end_of_init_timer0:	
 17025                           
 17026                           	psect	text63
 17027  2AF2                     __ptext63:	
 17028 ;; *************** function _init_adc *****************
 17029 ;; Defined at:
 17030 ;;		line 115 in file "user.c"
 17031 ;; Parameters:    Size  Location     Type
 17032 ;;		None
 17033 ;; Auto vars:     Size  Location     Type
 17034 ;;		None
 17035 ;; Return value:  Size  Location     Type
 17036 ;;                  1    wreg      void 
 17037 ;; Registers used:
 17038 ;;		wreg, status,2, status,0
 17039 ;; Tracked objects:
 17040 ;;		On entry : 0/0
 17041 ;;		On exit  : 0/0
 17042 ;;		Unchanged: 0/0
 17043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17048 ;;Total ram usage:        0 bytes
 17049 ;; Hardware stack levels used:    1
 17050 ;; Hardware stack levels required when called:    5
 17051 ;; This function calls:
 17052 ;;		Nothing
 17053 ;; This function is called by:
 17054 ;;		_InitApp
 17055 ;; This function uses a non-reentrant model
 17056 ;;
 17057                           
 17058                           
 17059                           ;psect for function _init_adc
 17060  2AF2                     _init_adc:	
 17061                           
 17062                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 17063                           
 17064                           ;incstack = 0
 17065                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 17066  2AF2  0021               	movlb	1	; select bank1
 17067  2AF3  179E               	bsf	30,7	;volatile
 17068                           
 17069                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 17070  2AF4  081E               	movf	30,w	;volatile
 17071  2AF5  398F               	andlw	-113
 17072  2AF6  3860               	iorlw	96
 17073  2AF7  009E               	movwf	30	;volatile
 17074                           
 17075                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 17076  2AF8  30FC               	movlw	-4
 17077  2AF9  059E               	andwf	30,f	;volatile
 17078                           
 17079                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 17080  2AFA  141D               	bsf	29,0	;volatile
 17081  2AFB  0008               	return
 17082  2AFC                     __end_of_init_adc:	
 17083                           
 17084                           	psect	text64
 17085  2ACF                     __ptext64:	
 17086 ;; *************** function _ConfigureOscillator *****************
 17087 ;; Defined at:
 17088 ;;		line 18 in file "system.c"
 17089 ;; Parameters:    Size  Location     Type
 17090 ;;		None
 17091 ;; Auto vars:     Size  Location     Type
 17092 ;;		None
 17093 ;; Return value:  Size  Location     Type
 17094 ;;                  1    wreg      void 
 17095 ;; Registers used:
 17096 ;;		wreg, status,2, status,0
 17097 ;; Tracked objects:
 17098 ;;		On entry : 0/0
 17099 ;;		On exit  : 0/0
 17100 ;;		Unchanged: 0/0
 17101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17106 ;;Total ram usage:        0 bytes
 17107 ;; Hardware stack levels used:    1
 17108 ;; Hardware stack levels required when called:    5
 17109 ;; This function calls:
 17110 ;;		Nothing
 17111 ;; This function is called by:
 17112 ;;		_main
 17113 ;; This function uses a non-reentrant model
 17114 ;;
 17115                           
 17116                           
 17117                           ;psect for function _ConfigureOscillator
 17118  2ACF                     _ConfigureOscillator:	
 17119                           
 17120                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 17121                           
 17122                           ;incstack = 0
 17123                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 17124  2ACF  30FC               	movlw	-4
 17125  2AD0  0021               	movlb	1	; select bank1
 17126  2AD1  0599               	andwf	25,f	;volatile
 17127  2AD2  0008               	return
 17128  2AD3                     __end_of_ConfigureOscillator:	
 17129                           
 17130                           	psect	intentry
 17131  0004                     __pintentry:	
 17132 ;; *************** function _isr *****************
 17133 ;; Defined at:
 17134 ;;		line 28 in file "interrupts.c"
 17135 ;; Parameters:    Size  Location     Type
 17136 ;;		None
 17137 ;; Auto vars:     Size  Location     Type
 17138 ;;  tmpSubDelay     2   31[BANK1 ] int 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;                  1    wreg      void 
 17141 ;; Registers used:
 17142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17149 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17150 ;;      Temps:          0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17151 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17152 ;;Total ram usage:       14 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:    4
 17155 ;; This function calls:
 17156 ;;		___awdiv
 17157 ;;		_modSaw
 17158 ;;		_modSawRev
 17159 ;;		_modSquare
 17160 ;;		_modTri
 17161 ;;		_modulation
 17162 ;;		i1___awtoft
 17163 ;;		i1___wmul
 17164 ;;		i1_modSin
 17165 ;;		i1_set_leds_top
 17166 ;; This function is called by:
 17167 ;;		Interrupt level 1
 17168 ;; This function uses a non-reentrant model
 17169 ;;
 17170                           
 17171  0004                     _isr:	
 17172                           
 17173                           ;incstack = 0
 17174                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17175  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17176  0005  3180               	pagesel	$
 17177  0006  0020               	movlb	0	; select bank0
 17178  0007  087F               	movf	127,w
 17179  0008  0021               	movlb	1	; select bank1
 17180  0009  00BB               	movwf	(??_isr+8)^(0+128)
 17181                           
 17182                           ;interrupts.c: 29: int tmpSubDelay;
 17183                           ;interrupts.c: 32: extern volatile long timer;
 17184                           ;interrupts.c: 33: extern volatile long sub_timer;
 17185                           ;interrupts.c: 34: extern volatile long tap_timer;
 17186                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 17187                           ;interrupts.c: 36: extern int mod_delay_time;
 17188                           ;interrupts.c: 38: extern volatile long baseline_delay_time;
 17189                           ;interrupts.c: 40: extern int top_push_state;
 17190                           ;interrupts.c: 41: extern uint8_t feedback_start;
 17191                           ;interrupts.c: 42: extern volatile long mod_timer;
 17192                           ;interrupts.c: 43: extern volatile long delay_time;
 17193  000A  1D0B               	btfss	11,2	;volatile
 17194  000B  292D               	goto	i1l145
 17195                           
 17196                           ;interrupts.c: 47: test_timer++;
 17197  000C  3001               	movlw	1
 17198  000D  0025               	movlb	5	; select bank5
 17199  000E  07C1               	addwf	_test_timer^(0+640),f
 17200  000F  3000               	movlw	0
 17201  0010  3DC2               	addwfc	(_test_timer+1)^(0+640),f
 17202  0011  3000               	movlw	0
 17203  0012  3DC3               	addwfc	(_test_timer+2)^(0+640),f
 17204  0013  3000               	movlw	0
 17205  0014  3DC4               	addwfc	(_test_timer+3)^(0+640),f
 17206                           
 17207                           ;interrupts.c: 48: tmpSubDelay = delay_time;
 17208  0015  0024               	movlb	4	; select bank4
 17209  0016  084A               	movf	(_delay_time+1)^(0+512),w	;volatile
 17210  0017  0021               	movlb	1	; select bank1
 17211  0018  00C0               	movwf	(isr@tmpSubDelay+1)^(0+128)
 17212  0019  0024               	movlb	4	; select bank4
 17213  001A  0849               	movf	_delay_time^(0+512),w	;volatile
 17214  001B  0021               	movlb	1	; select bank1
 17215  001C  00BF               	movwf	isr@tmpSubDelay^(0+128)
 17216                           
 17217                           ;interrupts.c: 49: timer = timer + 1;
 17218  001D  3001               	movlw	1
 17219  001E  00B3               	movwf	??_isr^(0+128)
 17220  001F  3000               	movlw	0
 17221  0020  00B4               	movwf	(??_isr^(0+128)+1)
 17222  0021  3000               	movlw	0
 17223  0022  00B5               	movwf	(??_isr^(0+128)+2)
 17224  0023  3000               	movlw	0
 17225  0024  00B6               	movwf	(??_isr^(0+128)+3)
 17226  0025  0849               	movf	_timer^(0+128),w	;volatile
 17227  0026  07B3               	addwf	??_isr^(0+128),f
 17228  0027  084A               	movf	(_timer+1)^(0+128),w	;volatile
 17229  0028  3DB4               	addwfc	(??_isr^(0+128)+1),f
 17230  0029  084B               	movf	(_timer+2)^(0+128),w	;volatile
 17231  002A  3DB5               	addwfc	(??_isr^(0+128)+2),f
 17232  002B  084C               	movf	(_timer+3)^(0+128),w	;volatile
 17233  002C  3DB6               	addwfc	(??_isr^(0+128)+3),f
 17234  002D  0836               	movf	(??_isr+3)^(0+128),w
 17235  002E  00CC               	movwf	(_timer+3)^(0+128)	;volatile
 17236  002F  0835               	movf	(??_isr+2)^(0+128),w
 17237  0030  00CB               	movwf	(_timer+2)^(0+128)	;volatile
 17238  0031  0834               	movf	(??_isr+1)^(0+128),w
 17239  0032  00CA               	movwf	(_timer+1)^(0+128)	;volatile
 17240  0033  0833               	movf	??_isr^(0+128),w
 17241  0034  00C9               	movwf	_timer^(0+128)	;volatile
 17242                           
 17243                           ;interrupts.c: 50: sub_timer = sub_timer + 1;
 17244  0035  3001               	movlw	1
 17245  0036  00B3               	movwf	??_isr^(0+128)
 17246  0037  3000               	movlw	0
 17247  0038  00B4               	movwf	(??_isr^(0+128)+1)
 17248  0039  3000               	movlw	0
 17249  003A  00B5               	movwf	(??_isr^(0+128)+2)
 17250  003B  3000               	movlw	0
 17251  003C  00B6               	movwf	(??_isr^(0+128)+3)
 17252  003D  0841               	movf	_sub_timer^(0+128),w	;volatile
 17253  003E  07B3               	addwf	??_isr^(0+128),f
 17254  003F  0842               	movf	(_sub_timer+1)^(0+128),w	;volatile
 17255  0040  3DB4               	addwfc	(??_isr^(0+128)+1),f
 17256  0041  0843               	movf	(_sub_timer+2)^(0+128),w	;volatile
 17257  0042  3DB5               	addwfc	(??_isr^(0+128)+2),f
 17258  0043  0844               	movf	(_sub_timer+3)^(0+128),w	;volatile
 17259  0044  3DB6               	addwfc	(??_isr^(0+128)+3),f
 17260  0045  0836               	movf	(??_isr+3)^(0+128),w
 17261  0046  00C4               	movwf	(_sub_timer+3)^(0+128)	;volatile
 17262  0047  0835               	movf	(??_isr+2)^(0+128),w
 17263  0048  00C3               	movwf	(_sub_timer+2)^(0+128)	;volatile
 17264  0049  0834               	movf	(??_isr+1)^(0+128),w
 17265  004A  00C2               	movwf	(_sub_timer+1)^(0+128)	;volatile
 17266  004B  0833               	movf	??_isr^(0+128),w
 17267  004C  00C1               	movwf	_sub_timer^(0+128)	;volatile
 17268                           
 17269                           ;interrupts.c: 51: tap_timer = tap_timer + 1;
 17270  004D  3001               	movlw	1
 17271  004E  00B3               	movwf	??_isr^(0+128)
 17272  004F  3000               	movlw	0
 17273  0050  00B4               	movwf	(??_isr^(0+128)+1)
 17274  0051  3000               	movlw	0
 17275  0052  00B5               	movwf	(??_isr^(0+128)+2)
 17276  0053  3000               	movlw	0
 17277  0054  00B6               	movwf	(??_isr^(0+128)+3)
 17278  0055  0845               	movf	_tap_timer^(0+128),w	;volatile
 17279  0056  07B3               	addwf	??_isr^(0+128),f
 17280  0057  0846               	movf	(_tap_timer+1)^(0+128),w	;volatile
 17281  0058  3DB4               	addwfc	(??_isr^(0+128)+1),f
 17282  0059  0847               	movf	(_tap_timer+2)^(0+128),w	;volatile
 17283  005A  3DB5               	addwfc	(??_isr^(0+128)+2),f
 17284  005B  0848               	movf	(_tap_timer+3)^(0+128),w	;volatile
 17285  005C  3DB6               	addwfc	(??_isr^(0+128)+3),f
 17286  005D  0836               	movf	(??_isr+3)^(0+128),w
 17287  005E  00C8               	movwf	(_tap_timer+3)^(0+128)	;volatile
 17288  005F  0835               	movf	(??_isr+2)^(0+128),w
 17289  0060  00C7               	movwf	(_tap_timer+2)^(0+128)	;volatile
 17290  0061  0834               	movf	(??_isr+1)^(0+128),w
 17291  0062  00C6               	movwf	(_tap_timer+1)^(0+128)	;volatile
 17292  0063  0833               	movf	??_isr^(0+128),w
 17293  0064  00C5               	movwf	_tap_timer^(0+128)	;volatile
 17294                           
 17295                           ;interrupts.c: 52: mod_timer = mod_timer + 1;
 17296  0065  3001               	movlw	1
 17297  0066  00B3               	movwf	??_isr^(0+128)
 17298  0067  3000               	movlw	0
 17299  0068  00B4               	movwf	(??_isr^(0+128)+1)
 17300  0069  3000               	movlw	0
 17301  006A  00B5               	movwf	(??_isr^(0+128)+2)
 17302  006B  3000               	movlw	0
 17303  006C  00B6               	movwf	(??_isr^(0+128)+3)
 17304  006D  0024               	movlb	4	; select bank4
 17305  006E  0824               	movf	_mod_timer^(0+512),w	;volatile
 17306  006F  0021               	movlb	1	; select bank1
 17307  0070  07B3               	addwf	??_isr^(0+128),f
 17308  0071  0024               	movlb	4	; select bank4
 17309  0072  0825               	movf	(_mod_timer+1)^(0+512),w	;volatile
 17310  0073  0021               	movlb	1	; select bank1
 17311  0074  3DB4               	addwfc	(??_isr^(0+128)+1),f
 17312  0075  0024               	movlb	4	; select bank4
 17313  0076  0826               	movf	(_mod_timer+2)^(0+512),w	;volatile
 17314  0077  0021               	movlb	1	; select bank1
 17315  0078  3DB5               	addwfc	(??_isr^(0+128)+2),f
 17316  0079  0024               	movlb	4	; select bank4
 17317  007A  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 17318  007B  0021               	movlb	1	; select bank1
 17319  007C  3DB6               	addwfc	(??_isr^(0+128)+3),f
 17320  007D  0836               	movf	(??_isr+3)^(0+128),w
 17321  007E  0024               	movlb	4	; select bank4
 17322  007F  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 17323  0080  0021               	movlb	1	; select bank1
 17324  0081  0835               	movf	(??_isr+2)^(0+128),w
 17325  0082  0024               	movlb	4	; select bank4
 17326  0083  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 17327  0084  0021               	movlb	1	; select bank1
 17328  0085  0834               	movf	(??_isr+1)^(0+128),w
 17329  0086  0024               	movlb	4	; select bank4
 17330  0087  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 17331  0088  0021               	movlb	1	; select bank1
 17332  0089  0833               	movf	??_isr^(0+128),w
 17333  008A  0024               	movlb	4	; select bank4
 17334  008B  00A4               	movwf	_mod_timer^(0+512)	;volatile
 17335                           
 17336                           ;interrupts.c: 53: double_timer++;
 17337  008C  3001               	movlw	1
 17338  008D  07A0               	addwf	_double_timer^(0+512),f	;volatile
 17339  008E  3000               	movlw	0
 17340  008F  3DA1               	addwfc	(_double_timer+1)^(0+512),f	;volatile
 17341  0090  3000               	movlw	0
 17342  0091  3DA2               	addwfc	(_double_timer+2)^(0+512),f	;volatile
 17343  0092  3000               	movlw	0
 17344  0093  3DA3               	addwfc	(_double_timer+3)^(0+512),f	;volatile
 17345                           
 17346                           ;interrupts.c: 58: if (feedback_start == 1) {
 17347  0094  0023               	movlb	3	; select bank3
 17348  0095  036C               	decf	_feedback_start^(0+384),w
 17349  0096  1D03               	btfss	3,2
 17350  0097  28AF               	goto	i1l7161
 17351                           
 17352                           ;interrupts.c: 59: feedback_timer++;
 17353  0098  3001               	movlw	1
 17354  0099  0024               	movlb	4	; select bank4
 17355  009A  07AC               	addwf	_feedback_timer^(0+512),f	;volatile
 17356  009B  3000               	movlw	0
 17357  009C  3DAD               	addwfc	(_feedback_timer+1)^(0+512),f	;volatile
 17358                           
 17359                           ;interrupts.c: 60: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 17360  009D  082D               	movf	(_feedback_timer+1)^(0+512),w	;volatile
 17361  009E  0021               	movlb	1	; select bank1
 17362  009F  025A               	subwf	(_long_press_limit+1)^(0+128),w
 17363  00A0  1D03               	skipz
 17364  00A1  28A6               	goto	u778_25
 17365  00A2  0024               	movlb	4	; select bank4
 17366  00A3  082C               	movf	_feedback_timer^(0+512),w	;volatile
 17367  00A4  0021               	movlb	1	; select bank1
 17368  00A5  0259               	subwf	_long_press_limit^(0+128),w
 17369  00A6                     u778_25:	
 17370  00A6  1803               	skipnc
 17371  00A7  28AF               	goto	i1l7161
 17372  00A8  085A               	movf	(_long_press_limit+1)^(0+128),w
 17373  00A9  0024               	movlb	4	; select bank4
 17374  00AA  00AD               	movwf	(_feedback_timer+1)^(0+512)	;volatile
 17375  00AB  0021               	movlb	1	; select bank1
 17376  00AC  0859               	movf	_long_press_limit^(0+128),w
 17377  00AD  0024               	movlb	4	; select bank4
 17378  00AE  00AC               	movwf	_feedback_timer^(0+512)	;volatile
 17379  00AF                     i1l7161:	
 17380                           
 17381                           ;interrupts.c: 61: }
 17382                           ;interrupts.c: 62: if (longTap_start == 1) {
 17383  00AF  0023               	movlb	3	; select bank3
 17384  00B0  036D               	decf	_longTap_start^(0+384),w
 17385  00B1  1D03               	btfss	3,2
 17386  00B2  28CA               	goto	i1l7167
 17387                           
 17388                           ;interrupts.c: 63: longTap_timer++;
 17389  00B3  3001               	movlw	1
 17390  00B4  0024               	movlb	4	; select bank4
 17391  00B5  07B8               	addwf	_longTap_timer^(0+512),f	;volatile
 17392  00B6  3000               	movlw	0
 17393  00B7  3DB9               	addwfc	(_longTap_timer+1)^(0+512),f	;volatile
 17394                           
 17395                           ;interrupts.c: 64: if (longTap_timer > long_press_limit) {
 17396  00B8  0839               	movf	(_longTap_timer+1)^(0+512),w	;volatile
 17397  00B9  0021               	movlb	1	; select bank1
 17398  00BA  025A               	subwf	(_long_press_limit+1)^(0+128),w
 17399  00BB  1D03               	skipz
 17400  00BC  28C1               	goto	u780_25
 17401  00BD  0024               	movlb	4	; select bank4
 17402  00BE  0838               	movf	_longTap_timer^(0+512),w	;volatile
 17403  00BF  0021               	movlb	1	; select bank1
 17404  00C0  0259               	subwf	_long_press_limit^(0+128),w
 17405  00C1                     u780_25:	
 17406  00C1  1803               	skipnc
 17407  00C2  28CA               	goto	i1l7167
 17408                           
 17409                           ;interrupts.c: 65: longTap_timer = long_press_limit;
 17410  00C3  085A               	movf	(_long_press_limit+1)^(0+128),w
 17411  00C4  0024               	movlb	4	; select bank4
 17412  00C5  00B9               	movwf	(_longTap_timer+1)^(0+512)	;volatile
 17413  00C6  0021               	movlb	1	; select bank1
 17414  00C7  0859               	movf	_long_press_limit^(0+128),w
 17415  00C8  0024               	movlb	4	; select bank4
 17416  00C9  00B8               	movwf	_longTap_timer^(0+512)	;volatile
 17417  00CA                     i1l7167:	
 17418                           
 17419                           ;interrupts.c: 66: }
 17420                           ;interrupts.c: 67: }
 17421                           ;interrupts.c: 68: INTCONbits.TMR0IF = 0;
 17422  00CA  110B               	bcf	11,2	;volatile
 17423                           
 17424                           ;interrupts.c: 70: if (adjust_sub_delay == 1) {
 17425  00CB  0024               	movlb	4	; select bank4
 17426  00CC  033E               	decf	_adjust_sub_delay^(0+512),w
 17427  00CD  1D03               	btfss	3,2
 17428  00CE  292D               	goto	i1l145
 17429                           
 17430                           ;interrupts.c: 71: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 17431  00CF  0021               	movlb	1	; select bank1
 17432  00D0  0844               	movf	(_sub_timer+3)^(0+128),w	;volatile
 17433  00D1  3A80               	xorlw	128
 17434  00D2  00B3               	movwf	??_isr^(0+128)
 17435  00D3  0024               	movlb	4	; select bank4
 17436  00D4  084C               	movf	(_delay_time+3)^(0+512),w	;volatile
 17437  00D5  3A80               	xorlw	128
 17438  00D6  0021               	movlb	1	; select bank1
 17439  00D7  0233               	subwf	??_isr^(0+128),w
 17440  00D8  1D03               	skipz
 17441  00D9  28EA               	goto	u782_23
 17442  00DA  0024               	movlb	4	; select bank4
 17443  00DB  084B               	movf	(_delay_time+2)^(0+512),w	;volatile
 17444  00DC  0021               	movlb	1	; select bank1
 17445  00DD  0243               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 17446  00DE  1D03               	skipz
 17447  00DF  28EA               	goto	u782_23
 17448  00E0  0024               	movlb	4	; select bank4
 17449  00E1  084A               	movf	(_delay_time+1)^(0+512),w	;volatile
 17450  00E2  0021               	movlb	1	; select bank1
 17451  00E3  0242               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 17452  00E4  1D03               	skipz
 17453  00E5  28EA               	goto	u782_23
 17454  00E6  0024               	movlb	4	; select bank4
 17455  00E7  0849               	movf	_delay_time^(0+512),w	;volatile
 17456  00E8  0021               	movlb	1	; select bank1
 17457  00E9  0241               	subwf	_sub_timer^(0+128),w	;volatile
 17458  00EA                     u782_23:	
 17459  00EA  1C03               	skipc
 17460  00EB  292D               	goto	i1l145
 17461  00EC  0853               	movf	_baseline_delay_time^(0+128),w	;volatile
 17462  00ED  00B3               	movwf	??_isr^(0+128)
 17463  00EE  0854               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 17464  00EF  00B4               	movwf	(??_isr^(0+128)+1)
 17465  00F0  0855               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 17466  00F1  00B5               	movwf	(??_isr^(0+128)+2)
 17467  00F2  0856               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 17468  00F3  00B6               	movwf	(??_isr^(0+128)+3)
 17469  00F4  0949               	comf	_timer^(0+128),w	;volatile
 17470  00F5  00B7               	movwf	(??_isr+4)^(0+128)
 17471  00F6  094A               	comf	(_timer+1)^(0+128),w	;volatile
 17472  00F7  00B8               	movwf	((??_isr+4)^(0+128)+1)
 17473  00F8  094B               	comf	(_timer+2)^(0+128),w	;volatile
 17474  00F9  00B9               	movwf	((??_isr+4)^(0+128)+2)
 17475  00FA  094C               	comf	(_timer+3)^(0+128),w	;volatile
 17476  00FB  00BA               	movwf	((??_isr+4)^(0+128)+3)
 17477  00FC  0AB7               	incf	(??_isr+4)^(0+128),f
 17478  00FD  1903               	skipnz
 17479  00FE  0AB8               	incf	((??_isr+4)^(0+128)+1),f
 17480  00FF  1903               	skipnz
 17481  0100  0AB9               	incf	((??_isr+4)^(0+128)+2),f
 17482  0101  1903               	skipnz
 17483  0102  0ABA               	incf	((??_isr+4)^(0+128)+3),f
 17484  0103  0837               	movf	(??_isr+4)^(0+128),w
 17485  0104  07B3               	addwf	??_isr^(0+128),f
 17486  0105  0838               	movf	(??_isr+5)^(0+128),w
 17487  0106  3DB4               	addwfc	(??_isr^(0+128)+1),f
 17488  0107  0839               	movf	(??_isr+6)^(0+128),w
 17489  0108  3DB5               	addwfc	(??_isr^(0+128)+2),f
 17490  0109  083A               	movf	(??_isr+7)^(0+128),w
 17491  010A  3DB6               	addwfc	(??_isr^(0+128)+3),f
 17492  010B  1BB6               	btfsc	(??_isr^(0+128)+3),7
 17493  010C  291A               	goto	i1l7175
 17494  010D  0836               	movf	(??_isr^(0+128)+3),w
 17495  010E  1D03               	btfss	3,2
 17496  010F  292D               	goto	i1l145
 17497  0110  0835               	movf	(??_isr^(0+128)+2),w
 17498  0111  1D03               	btfss	3,2
 17499  0112  292D               	goto	i1l145
 17500  0113  0834               	movf	(??_isr^(0+128)+1),w
 17501  0114  1D03               	btfss	3,2
 17502  0115  292D               	goto	i1l145
 17503  0116  3004               	movlw	4
 17504  0117  0233               	subwf	??_isr^(0+128),w
 17505  0118  1803               	btfsc	3,0
 17506  0119  292D               	goto	i1l145
 17507  011A                     i1l7175:	
 17508                           
 17509                           ;interrupts.c: 72: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 17510  011A  0949               	comf	_timer^(0+128),w	;volatile
 17511  011B  00B3               	movwf	??_isr^(0+128)
 17512  011C  094A               	comf	(_timer+1)^(0+128),w	;volatile
 17513  011D  00B4               	movwf	(??_isr^(0+128)+1)
 17514  011E  0AB3               	incf	??_isr^(0+128),f
 17515  011F  1903               	skipnz
 17516  0120  0AB4               	incf	(??_isr^(0+128)+1),f
 17517  0121  0853               	movf	_baseline_delay_time^(0+128),w	;volatile
 17518  0122  0733               	addwf	??_isr^(0+128),w
 17519  0123  00B5               	movwf	(??_isr+2)^(0+128)
 17520  0124  0854               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 17521  0125  3D34               	addwfc	(??_isr+1)^(0+128),w
 17522  0126  00B6               	movwf	(??_isr+3)^(0+128)
 17523  0127  0841               	movf	_sub_timer^(0+128),w	;volatile
 17524  0128  0735               	addwf	(??_isr+2)^(0+128),w
 17525  0129  00BF               	movwf	isr@tmpSubDelay^(0+128)
 17526  012A  0842               	movf	(_sub_timer+1)^(0+128),w	;volatile
 17527  012B  3D36               	addwfc	(??_isr+3)^(0+128),w
 17528  012C  00C0               	movwf	(isr@tmpSubDelay+1)^(0+128)
 17529  012D                     i1l145:	
 17530                           
 17531                           ;interrupts.c: 73: }
 17532                           ;interrupts.c: 74: }
 17533                           ;interrupts.c: 75: }
 17534                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 17535  012D  0021               	movlb	1	; select bank1
 17536  012E  085F               	movf	_longTap_state^(0+128),w	;volatile
 17537  012F  1D03               	btfss	3,2
 17538  0130  298C               	goto	i1l7201
 17539  0131  084F               	movf	_doubleTap_state^(0+128),w	;volatile
 17540  0132  1D03               	btfss	3,2
 17541  0133  298C               	goto	i1l7201
 17542  0134  0851               	movf	_presetSaveMode^(0+128),w
 17543  0135  1D03               	btfss	3,2
 17544  0136  298C               	goto	i1l7201
 17545                           
 17546                           ;interrupts.c: 81: if (timer >= baseline_delay_time) {
 17547  0137  084C               	movf	(_timer+3)^(0+128),w	;volatile
 17548  0138  3A80               	xorlw	128
 17549  0139  00B3               	movwf	??_isr^(0+128)
 17550  013A  0856               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 17551  013B  3A80               	xorlw	128
 17552  013C  0233               	subwf	??_isr^(0+128),w
 17553  013D  1D03               	skipz
 17554  013E  2949               	goto	u787_23
 17555  013F  0855               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 17556  0140  024B               	subwf	(_timer+2)^(0+128),w	;volatile
 17557  0141  1D03               	skipz
 17558  0142  2949               	goto	u787_23
 17559  0143  0854               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 17560  0144  024A               	subwf	(_timer+1)^(0+128),w	;volatile
 17561  0145  1D03               	skipz
 17562  0146  2949               	goto	u787_23
 17563  0147  0853               	movf	_baseline_delay_time^(0+128),w	;volatile
 17564  0148  0249               	subwf	_timer^(0+128),w	;volatile
 17565  0149                     u787_23:	
 17566  0149  1C03               	skipc
 17567  014A  297A               	goto	i1l7197
 17568                           
 17569                           ;interrupts.c: 84: LATBbits.LATB4 = 1;
 17570  014B  0022               	movlb	2	; select bank2
 17571  014C  160D               	bsf	13,4	;volatile
 17572                           
 17573                           ;interrupts.c: 86: timer = 0;
 17574  014D  3000               	movlw	0
 17575  014E  0021               	movlb	1	; select bank1
 17576  014F  00CC               	movwf	(_timer+3)^(0+128)	;volatile
 17577  0150  3000               	movlw	0
 17578  0151  00CB               	movwf	(_timer+2)^(0+128)	;volatile
 17579  0152  3000               	movlw	0
 17580  0153  00CA               	movwf	(_timer+1)^(0+128)	;volatile
 17581  0154  3000               	movlw	0
 17582  0155  00C9               	movwf	_timer^(0+128)	;volatile
 17583                           
 17584                           ;interrupts.c: 88: if (reset_sub_delay == 1 || modulation_changed == 1) {
 17585  0156  0024               	movlb	4	; select bank4
 17586  0157  0346               	decf	_reset_sub_delay^(0+512),w
 17587  0158  1D03               	btfss	3,2
 17588  0159  0343               	decf	_modulation_changed^(0+512),w
 17589  015A  1D03               	btfss	3,2
 17590  015B  297A               	goto	i1l7197
 17591                           
 17592                           ;interrupts.c: 93: mod_counter = 0;
 17593  015C  0023               	movlb	3	; select bank3
 17594  015D  01EA               	clrf	_mod_counter^(0+384)
 17595  015E  01EB               	clrf	(_mod_counter+1)^(0+384)
 17596                           
 17597                           ;interrupts.c: 94: modulation_changed = 0;
 17598  015F  0024               	movlb	4	; select bank4
 17599  0160  01C3               	clrf	_modulation_changed^(0+512)
 17600                           
 17601                           ;interrupts.c: 95: mod_timer = mod_delay_time;
 17602  0161  0859               	movf	_mod_delay_time^(0+512),w
 17603  0162  00A4               	movwf	_mod_timer^(0+512)	;volatile
 17604  0163  085A               	movf	(_mod_delay_time+1)^(0+512),w
 17605  0164  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 17606  0165  0D89               	rlf	9,f
 17607  0166  3B89               	subwfb	9,f
 17608  0167  0989               	comf	9,f
 17609  0168  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 17610  0169  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 17611                           
 17612                           ;interrupts.c: 97: reset_sub_delay = 0;
 17613  016A  01C6               	clrf	_reset_sub_delay^(0+512)
 17614                           
 17615                           ;interrupts.c: 98: sub_timer = delay_time;
 17616  016B  084C               	movf	(_delay_time+3)^(0+512),w	;volatile
 17617  016C  0021               	movlb	1	; select bank1
 17618  016D  00C4               	movwf	(_sub_timer+3)^(0+128)	;volatile
 17619  016E  0024               	movlb	4	; select bank4
 17620  016F  084B               	movf	(_delay_time+2)^(0+512),w	;volatile
 17621  0170  0021               	movlb	1	; select bank1
 17622  0171  00C3               	movwf	(_sub_timer+2)^(0+128)	;volatile
 17623  0172  0024               	movlb	4	; select bank4
 17624  0173  084A               	movf	(_delay_time+1)^(0+512),w	;volatile
 17625  0174  0021               	movlb	1	; select bank1
 17626  0175  00C2               	movwf	(_sub_timer+1)^(0+128)	;volatile
 17627  0176  0024               	movlb	4	; select bank4
 17628  0177  0849               	movf	_delay_time^(0+512),w	;volatile
 17629  0178  0021               	movlb	1	; select bank1
 17630  0179  00C1               	movwf	_sub_timer^(0+128)	;volatile
 17631  017A                     i1l7197:	
 17632                           
 17633                           ;interrupts.c: 99: }
 17634                           ;interrupts.c: 100: }
 17635                           ;interrupts.c: 102: if (timer >= 30) {
 17636  017A  0021               	movlb	1	; select bank1
 17637  017B  1BCC               	btfsc	(_timer+3)^(0+128),7	;volatile
 17638  017C  298C               	goto	i1l7201
 17639  017D  084C               	movf	(_timer+3)^(0+128),w	;volatile
 17640  017E  1D03               	btfss	3,2
 17641  017F  298A               	goto	i1l7199
 17642  0180  084B               	movf	(_timer+2)^(0+128),w	;volatile
 17643  0181  1D03               	btfss	3,2
 17644  0182  298A               	goto	i1l7199
 17645  0183  084A               	movf	(_timer+1)^(0+128),w	;volatile
 17646  0184  1D03               	btfss	3,2
 17647  0185  298A               	goto	i1l7199
 17648  0186  301E               	movlw	30
 17649  0187  0249               	subwf	_timer^(0+128),w	;volatile
 17650  0188  1C03               	btfss	3,0
 17651  0189  298C               	goto	i1l7201
 17652  018A                     i1l7199:	
 17653                           
 17654                           ;interrupts.c: 104: LATBbits.LATB4 = 0;
 17655  018A  0022               	movlb	2	; select bank2
 17656  018B  120D               	bcf	13,4	;volatile
 17657  018C                     i1l7201:	
 17658                           
 17659                           ;interrupts.c: 106: }
 17660                           ;interrupts.c: 107: }
 17661                           ;interrupts.c: 110: if (presetSaveMode == 1) {
 17662  018C  0021               	movlb	1	; select bank1
 17663  018D  0351               	decf	_presetSaveMode^(0+128),w
 17664  018E  1D03               	btfss	3,2
 17665  018F  29BC               	goto	i1l7213
 17666                           
 17667                           ;interrupts.c: 113: if (double_timer >= 250) {
 17668  0190  0024               	movlb	4	; select bank4
 17669  0191  1BA3               	btfsc	(_double_timer+3)^(0+512),7	;volatile
 17670  0192  29AB               	goto	i1l7209
 17671  0193  0823               	movf	(_double_timer+3)^(0+512),w	;volatile
 17672  0194  1D03               	btfss	3,2
 17673  0195  29A0               	goto	i1l7205
 17674  0196  0822               	movf	(_double_timer+2)^(0+512),w	;volatile
 17675  0197  1D03               	btfss	3,2
 17676  0198  29A0               	goto	i1l7205
 17677  0199  0821               	movf	(_double_timer+1)^(0+512),w	;volatile
 17678  019A  1D03               	btfss	3,2
 17679  019B  29A0               	goto	i1l7205
 17680  019C  30FA               	movlw	250
 17681  019D  0220               	subwf	_double_timer^(0+512),w	;volatile
 17682  019E  1C03               	btfss	3,0
 17683  019F  29AB               	goto	i1l7209
 17684  01A0                     i1l7205:	
 17685                           
 17686                           ;interrupts.c: 114: LATBbits.LATB0 = 1;
 17687  01A0  0022               	movlb	2	; select bank2
 17688  01A1  140D               	bsf	13,0	;volatile
 17689                           
 17690                           ;interrupts.c: 115: double_timer = 0;
 17691  01A2  3000               	movlw	0
 17692  01A3  0024               	movlb	4	; select bank4
 17693  01A4  00A3               	movwf	(_double_timer+3)^(0+512)	;volatile
 17694  01A5  3000               	movlw	0
 17695  01A6  00A2               	movwf	(_double_timer+2)^(0+512)	;volatile
 17696  01A7  3000               	movlw	0
 17697  01A8  00A1               	movwf	(_double_timer+1)^(0+512)	;volatile
 17698  01A9  3000               	movlw	0
 17699  01AA  00A0               	movwf	_double_timer^(0+512)	;volatile
 17700  01AB                     i1l7209:	
 17701                           
 17702                           ;interrupts.c: 117: }
 17703                           ;interrupts.c: 118: if (double_timer >= 30) {
 17704  01AB  1BA3               	btfsc	(_double_timer+3)^(0+512),7	;volatile
 17705  01AC  29BC               	goto	i1l7213
 17706  01AD  0823               	movf	(_double_timer+3)^(0+512),w	;volatile
 17707  01AE  1D03               	btfss	3,2
 17708  01AF  29BA               	goto	i1l7211
 17709  01B0  0822               	movf	(_double_timer+2)^(0+512),w	;volatile
 17710  01B1  1D03               	btfss	3,2
 17711  01B2  29BA               	goto	i1l7211
 17712  01B3  0821               	movf	(_double_timer+1)^(0+512),w	;volatile
 17713  01B4  1D03               	btfss	3,2
 17714  01B5  29BA               	goto	i1l7211
 17715  01B6  301E               	movlw	30
 17716  01B7  0220               	subwf	_double_timer^(0+512),w	;volatile
 17717  01B8  1C03               	btfss	3,0
 17718  01B9  29BC               	goto	i1l7213
 17719  01BA                     i1l7211:	
 17720                           
 17721                           ;interrupts.c: 120: LATBbits.LATB0 = 0;
 17722  01BA  0022               	movlb	2	; select bank2
 17723  01BB  100D               	bcf	13,0	;volatile
 17724  01BC                     i1l7213:	
 17725                           
 17726                           ;interrupts.c: 121: }
 17727                           ;interrupts.c: 122: }
 17728                           ;interrupts.c: 124: if (presetSaveMode < 1 && mode2_state == 0) {
 17729  01BC  0021               	movlb	1	; select bank1
 17730  01BD  0851               	movf	_presetSaveMode^(0+128),w
 17731  01BE  1D03               	btfss	3,2
 17732  01BF  2A1A               	goto	i1l7233
 17733  01C0  0850               	movf	_mode2_state^(0+128),w
 17734  01C1  1D03               	btfss	3,2
 17735  01C2  2A1A               	goto	i1l7233
 17736                           
 17737                           ;interrupts.c: 125: if (sub_timer >= tmpSubDelay ) {
 17738  01C3  083F               	movf	isr@tmpSubDelay^(0+128),w
 17739  01C4  00B3               	movwf	??_isr^(0+128)
 17740  01C5  0840               	movf	(isr@tmpSubDelay+1)^(0+128),w
 17741  01C6  00B4               	movwf	(??_isr^(0+128)+1)
 17742  01C7  3000               	movlw	0
 17743  01C8  1BB4               	btfsc	(??_isr^(0+128)+1),7
 17744  01C9  30FF               	movlw	255
 17745  01CA  00B5               	movwf	(??_isr^(0+128)+2)
 17746  01CB  00B6               	movwf	(??_isr^(0+128)+3)
 17747  01CC  0844               	movf	(_sub_timer+3)^(0+128),w	;volatile
 17748  01CD  3A80               	xorlw	128
 17749  01CE  00B7               	movwf	(??_isr+4)^(0+128)
 17750  01CF  0836               	movf	(??_isr+3)^(0+128),w
 17751  01D0  3A80               	xorlw	128
 17752  01D1  0237               	subwf	(??_isr+4)^(0+128),w
 17753  01D2  1D03               	skipz
 17754  01D3  29DE               	goto	u796_23
 17755  01D4  0835               	movf	(??_isr+2)^(0+128),w
 17756  01D5  0243               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 17757  01D6  1D03               	skipz
 17758  01D7  29DE               	goto	u796_23
 17759  01D8  0834               	movf	(??_isr+1)^(0+128),w
 17760  01D9  0242               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 17761  01DA  1D03               	skipz
 17762  01DB  29DE               	goto	u796_23
 17763  01DC  0833               	movf	??_isr^(0+128),w
 17764  01DD  0241               	subwf	_sub_timer^(0+128),w	;volatile
 17765  01DE                     u796_23:	
 17766  01DE  1C03               	skipc
 17767  01DF  29FE               	goto	i1l7227
 17768                           
 17769                           ;interrupts.c: 126: if (suspend_blink == 0) {
 17770  01E0  0852               	movf	_suspend_blink^(0+128),w	;volatile
 17771  01E1  1D03               	btfss	3,2
 17772  01E2  29EE               	goto	i1l7223
 17773                           
 17774                           ;interrupts.c: 127: set_leds_top(top_push_state, 1);
 17775  01E3  085C               	movf	(_top_push_state+1)^(0+128),w
 17776  01E4  00F1               	movwf	i1set_leds_top@x+1
 17777  01E5  085B               	movf	_top_push_state^(0+128),w
 17778  01E6  00F0               	movwf	i1set_leds_top@x
 17779  01E7  3001               	movlw	1
 17780  01E8  00F2               	movwf	i1set_leds_top@ledState
 17781  01E9  3000               	movlw	0
 17782  01EA  00F3               	movwf	i1set_leds_top@ledState+1
 17783  01EB  31A0  2066  3180   	fcall	i1_set_leds_top
 17784  01EE                     i1l7223:	
 17785                           
 17786                           ;interrupts.c: 128: }
 17787                           ;interrupts.c: 129: tmpSubDelay = delay_time;
 17788  01EE  0024               	movlb	4	; select bank4
 17789  01EF  084A               	movf	(_delay_time+1)^(0+512),w	;volatile
 17790  01F0  0021               	movlb	1	; select bank1
 17791  01F1  00C0               	movwf	(isr@tmpSubDelay+1)^(0+128)
 17792  01F2  0024               	movlb	4	; select bank4
 17793  01F3  0849               	movf	_delay_time^(0+512),w	;volatile
 17794  01F4  0021               	movlb	1	; select bank1
 17795  01F5  00BF               	movwf	isr@tmpSubDelay^(0+128)
 17796                           
 17797                           ;interrupts.c: 130: sub_timer = 0;
 17798  01F6  3000               	movlw	0
 17799  01F7  00C4               	movwf	(_sub_timer+3)^(0+128)	;volatile
 17800  01F8  3000               	movlw	0
 17801  01F9  00C3               	movwf	(_sub_timer+2)^(0+128)	;volatile
 17802  01FA  3000               	movlw	0
 17803  01FB  00C2               	movwf	(_sub_timer+1)^(0+128)	;volatile
 17804  01FC  3000               	movlw	0
 17805  01FD  00C1               	movwf	_sub_timer^(0+128)	;volatile
 17806  01FE                     i1l7227:	
 17807                           
 17808                           ;interrupts.c: 131: }
 17809                           ;interrupts.c: 133: if (sub_timer >= 20) {
 17810  01FE  1BC4               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 17811  01FF  2A1A               	goto	i1l7233
 17812  0200  0844               	movf	(_sub_timer+3)^(0+128),w	;volatile
 17813  0201  1D03               	btfss	3,2
 17814  0202  2A0D               	goto	i1l7229
 17815  0203  0843               	movf	(_sub_timer+2)^(0+128),w	;volatile
 17816  0204  1D03               	btfss	3,2
 17817  0205  2A0D               	goto	i1l7229
 17818  0206  0842               	movf	(_sub_timer+1)^(0+128),w	;volatile
 17819  0207  1D03               	btfss	3,2
 17820  0208  2A0D               	goto	i1l7229
 17821  0209  3014               	movlw	20
 17822  020A  0241               	subwf	_sub_timer^(0+128),w	;volatile
 17823  020B  1C03               	btfss	3,0
 17824  020C  2A1A               	goto	i1l7233
 17825  020D                     i1l7229:	
 17826                           
 17827                           ;interrupts.c: 134: if (suspend_blink == 0) {
 17828  020D  0852               	movf	_suspend_blink^(0+128),w	;volatile
 17829  020E  1D03               	btfss	3,2
 17830  020F  2A1A               	goto	i1l7233
 17831                           
 17832                           ;interrupts.c: 135: set_leds_top(top_push_state, 0);
 17833  0210  085C               	movf	(_top_push_state+1)^(0+128),w
 17834  0211  00F1               	movwf	i1set_leds_top@x+1
 17835  0212  085B               	movf	_top_push_state^(0+128),w
 17836  0213  00F0               	movwf	i1set_leds_top@x
 17837  0214  3000               	movlw	0
 17838  0215  00F2               	movwf	i1set_leds_top@ledState
 17839  0216  00F3               	movwf	i1set_leds_top@ledState+1
 17840  0217  31A0  2066  3180   	fcall	i1_set_leds_top
 17841  021A                     i1l7233:	
 17842                           
 17843                           ;interrupts.c: 136: }
 17844                           ;interrupts.c: 137: }
 17845                           ;interrupts.c: 138: }
 17846                           ;interrupts.c: 154: if (mod_timer >= mod_delay_time) {
 17847  021A  0024               	movlb	4	; select bank4
 17848  021B  0859               	movf	_mod_delay_time^(0+512),w
 17849  021C  0021               	movlb	1	; select bank1
 17850  021D  00B3               	movwf	??_isr^(0+128)
 17851  021E  0024               	movlb	4	; select bank4
 17852  021F  085A               	movf	(_mod_delay_time+1)^(0+512),w
 17853  0220  0021               	movlb	1	; select bank1
 17854  0221  00B4               	movwf	(??_isr^(0+128)+1)
 17855  0222  3000               	movlw	0
 17856  0223  1BB4               	btfsc	(??_isr^(0+128)+1),7
 17857  0224  30FF               	movlw	255
 17858  0225  00B5               	movwf	(??_isr^(0+128)+2)
 17859  0226  00B6               	movwf	(??_isr^(0+128)+3)
 17860  0227  0024               	movlb	4	; select bank4
 17861  0228  0827               	movf	(_mod_timer+3)^(0+512),w	;volatile
 17862  0229  3A80               	xorlw	128
 17863  022A  0021               	movlb	1	; select bank1
 17864  022B  00B7               	movwf	(??_isr+4)^(0+128)
 17865  022C  0836               	movf	(??_isr+3)^(0+128),w
 17866  022D  3A80               	xorlw	128
 17867  022E  0237               	subwf	(??_isr+4)^(0+128),w
 17868  022F  0024               	movlb	4	; select bank4
 17869  0230  1D03               	skipz
 17870  0231  2A42               	goto	u800_23
 17871  0232  0021               	movlb	1	; select bank1
 17872  0233  0835               	movf	(??_isr+2)^(0+128),w
 17873  0234  0024               	movlb	4	; select bank4
 17874  0235  0226               	subwf	(_mod_timer+2)^(0+512),w	;volatile
 17875  0236  1D03               	skipz
 17876  0237  2A42               	goto	u800_23
 17877  0238  0021               	movlb	1	; select bank1
 17878  0239  0834               	movf	(??_isr+1)^(0+128),w
 17879  023A  0024               	movlb	4	; select bank4
 17880  023B  0225               	subwf	(_mod_timer+1)^(0+512),w	;volatile
 17881  023C  1D03               	skipz
 17882  023D  2A42               	goto	u800_23
 17883  023E  0021               	movlb	1	; select bank1
 17884  023F  0833               	movf	??_isr^(0+128),w
 17885  0240  0024               	movlb	4	; select bank4
 17886  0241  0224               	subwf	_mod_timer^(0+512),w	;volatile
 17887  0242                     u800_23:	
 17888  0242  1C03               	skipc
 17889  0243  2C0A               	goto	i1l7269
 17890                           
 17891                           ;interrupts.c: 155: mod_timer = 0;
 17892  0244  3000               	movlw	0
 17893  0245  00A7               	movwf	(_mod_timer+3)^(0+512)	;volatile
 17894  0246  3000               	movlw	0
 17895  0247  00A6               	movwf	(_mod_timer+2)^(0+512)	;volatile
 17896  0248  3000               	movlw	0
 17897  0249  00A5               	movwf	(_mod_timer+1)^(0+512)	;volatile
 17898  024A  3000               	movlw	0
 17899  024B  00A4               	movwf	_mod_timer^(0+512)	;volatile
 17900                           
 17901                           ;interrupts.c: 159: if (mod_counter >= 60) {
 17902  024C  0023               	movlb	3	; select bank3
 17903  024D  086B               	movf	(_mod_counter+1)^(0+384),w
 17904  024E  3A80               	xorlw	128
 17905  024F  0021               	movlb	1	; select bank1
 17906  0250  00B3               	movwf	??_isr^(0+128)
 17907  0251  3080               	movlw	128
 17908  0252  0233               	subwf	??_isr^(0+128),w
 17909  0253  1D03               	skipz
 17910  0254  2A58               	goto	u801_25
 17911  0255  303C               	movlw	60
 17912  0256  0023               	movlb	3	; select bank3
 17913  0257  026A               	subwf	_mod_counter^(0+384),w
 17914  0258                     u801_25:	
 17915  0258  1C03               	skipc
 17916  0259  2A69               	goto	i1l167
 17917                           
 17918                           ;interrupts.c: 160: mod_counter = 0;
 17919  025A  0023               	movlb	3	; select bank3
 17920  025B  01EA               	clrf	_mod_counter^(0+384)
 17921  025C  01EB               	clrf	(_mod_counter+1)^(0+384)
 17922                           
 17923                           ;interrupts.c: 161: test_timer = 0;
 17924  025D  3000               	movlw	0
 17925  025E  0025               	movlb	5	; select bank5
 17926  025F  00C4               	movwf	(_test_timer+3)^(0+640)
 17927  0260  3000               	movlw	0
 17928  0261  00C3               	movwf	(_test_timer+2)^(0+640)
 17929  0262  3000               	movlw	0
 17930  0263  00C2               	movwf	(_test_timer+1)^(0+640)
 17931  0264  3000               	movlw	0
 17932  0265  00C1               	movwf	_test_timer^(0+640)
 17933                           
 17934                           ;interrupts.c: 162: LATBbits.LATB0 = 1;
 17935  0266  0022               	movlb	2	; select bank2
 17936  0267  140D               	bsf	13,0	;volatile
 17937                           
 17938                           ;interrupts.c: 163: } else {
 17939  0268  2A6B               	goto	i1l168
 17940  0269                     i1l167:	
 17941                           
 17942                           ;interrupts.c: 164: LATBbits.LATB0 = 0;
 17943  0269  0022               	movlb	2	; select bank2
 17944  026A  100D               	bcf	13,0	;volatile
 17945  026B                     i1l168:	
 17946                           
 17947                           ;interrupts.c: 165: }
 17948                           ;interrupts.c: 169: PORTCbits.RC4 = 0;
 17949  026B  0020               	movlb	0	; select bank0
 17950  026C  120E               	bcf	14,4	;volatile
 17951                           
 17952                           ;interrupts.c: 170: switch (bottom_push_state) {
 17953  026D  2BA6               	goto	i1l7259
 17954  026E                     i1l7243:	
 17955                           ;interrupts.c: 171: case 1:
 17956                           
 17957                           
 17958                           ;interrupts.c: 172: mod_value = modSin(6*mod_counter, symmetry);
 17959  026E  0023               	movlb	3	; select bank3
 17960  026F  086B               	movf	(_mod_counter+1)^(0+384),w
 17961  0270  0020               	movlb	0	; select bank0
 17962  0271  00D9               	movwf	i1___wmul@multiplier+1
 17963  0272  0023               	movlb	3	; select bank3
 17964  0273  086A               	movf	_mod_counter^(0+384),w
 17965  0274  0020               	movlb	0	; select bank0
 17966  0275  00D8               	movwf	i1___wmul@multiplier
 17967  0276  3006               	movlw	6
 17968  0277  00DA               	movwf	i1___wmul@multiplicand
 17969  0278  3000               	movlw	0
 17970  0279  00DB               	movwf	i1___wmul@multiplicand+1
 17971  027A  31AB  23C3  3180   	fcall	i1___wmul
 17972  027D  0020               	movlb	0	; select bank0
 17973  027E  0859               	movf	?i1___wmul+1,w
 17974  027F  00DF               	movwf	i1___awtoft@c+1
 17975  0280  0858               	movf	?i1___wmul,w
 17976  0281  00DE               	movwf	i1___awtoft@c
 17977  0282  31AC  2459  3180   	fcall	i1___awtoft
 17978  0285  0020               	movlb	0	; select bank0
 17979  0286  085E               	movf	?i1___awtoft,w
 17980  0287  0021               	movlb	1	; select bank1
 17981  0288  00BC               	movwf	_isr$2911^(0+128)
 17982  0289  0020               	movlb	0	; select bank0
 17983  028A  085F               	movf	?i1___awtoft+1,w
 17984  028B  0021               	movlb	1	; select bank1
 17985  028C  00BD               	movwf	(_isr$2911+1)^(0+128)
 17986  028D  0020               	movlb	0	; select bank0
 17987  028E  0860               	movf	?i1___awtoft+2,w
 17988  028F  0021               	movlb	1	; select bank1
 17989  0290  00BE               	movwf	(_isr$2911+2)^(0+128)
 17990                           
 17991                           ;interrupts.c: 172: mod_value = modSin(6*mod_counter, symmetry);
 17992  0291  083C               	movf	_isr$2911^(0+128),w
 17993  0292  0020               	movlb	0	; select bank0
 17994  0293  00E4               	movwf	i1modSin@angle
 17995  0294  0021               	movlb	1	; select bank1
 17996  0295  083D               	movf	(_isr$2911+1)^(0+128),w
 17997  0296  0020               	movlb	0	; select bank0
 17998  0297  00E5               	movwf	i1modSin@angle+1
 17999  0298  0021               	movlb	1	; select bank1
 18000  0299  083E               	movf	(_isr$2911+2)^(0+128),w
 18001  029A  0020               	movlb	0	; select bank0
 18002  029B  00E6               	movwf	i1modSin@angle+2
 18003  029C  0024               	movlb	4	; select bank4
 18004  029D  085C               	movf	(_symmetry+1)^(0+512),w
 18005  029E  0020               	movlb	0	; select bank0
 18006  029F  00DF               	movwf	i1___awtoft@c+1
 18007  02A0  0024               	movlb	4	; select bank4
 18008  02A1  085B               	movf	_symmetry^(0+512),w
 18009  02A2  0020               	movlb	0	; select bank0
 18010  02A3  00DE               	movwf	i1___awtoft@c
 18011  02A4  31AC  2459  3180   	fcall	i1___awtoft
 18012  02A7  0020               	movlb	0	; select bank0
 18013  02A8  085E               	movf	?i1___awtoft,w
 18014  02A9  00E7               	movwf	i1modSin@inflection
 18015  02AA  085F               	movf	?i1___awtoft+1,w
 18016  02AB  00E8               	movwf	i1modSin@inflection+1
 18017  02AC  0860               	movf	?i1___awtoft+2,w
 18018  02AD  00E9               	movwf	i1modSin@inflection+2
 18019  02AE  3194  24DC  3180   	fcall	i1_modSin
 18020  02B1  0020               	movlb	0	; select bank0
 18021  02B2  0865               	movf	?i1_modSin+1,w
 18022  02B3  0024               	movlb	4	; select bank4
 18023  02B4  00BB               	movwf	(_mod_value+1)^(0+512)
 18024  02B5  0020               	movlb	0	; select bank0
 18025  02B6  0864               	movf	?i1_modSin,w
 18026  02B7  2B9F               	goto	L22
 18027  02B8                     i1l7247:	
 18028                           ;interrupts.c: 174: case 2:
 18029                           
 18030                           ;interrupts.c: 173: break;
 18031                           
 18032                           
 18033                           ;interrupts.c: 175: mod_value = modTri(6*mod_counter, symmetry);
 18034  02B8  0023               	movlb	3	; select bank3
 18035  02B9  086B               	movf	(_mod_counter+1)^(0+384),w
 18036  02BA  0020               	movlb	0	; select bank0
 18037  02BB  00D9               	movwf	i1___wmul@multiplier+1
 18038  02BC  0023               	movlb	3	; select bank3
 18039  02BD  086A               	movf	_mod_counter^(0+384),w
 18040  02BE  0020               	movlb	0	; select bank0
 18041  02BF  00D8               	movwf	i1___wmul@multiplier
 18042  02C0  3006               	movlw	6
 18043  02C1  00DA               	movwf	i1___wmul@multiplicand
 18044  02C2  3000               	movlw	0
 18045  02C3  00DB               	movwf	i1___wmul@multiplicand+1
 18046  02C4  31AB  23C3  3180   	fcall	i1___wmul
 18047  02C7  0020               	movlb	0	; select bank0
 18048  02C8  0859               	movf	?i1___wmul+1,w
 18049  02C9  00DF               	movwf	i1___awtoft@c+1
 18050  02CA  0858               	movf	?i1___wmul,w
 18051  02CB  00DE               	movwf	i1___awtoft@c
 18052  02CC  31AC  2459  3180   	fcall	i1___awtoft
 18053  02CF  0020               	movlb	0	; select bank0
 18054  02D0  085E               	movf	?i1___awtoft,w
 18055  02D1  00E4               	movwf	modTri@angle
 18056  02D2  085F               	movf	?i1___awtoft+1,w
 18057  02D3  00E5               	movwf	modTri@angle+1
 18058  02D4  0860               	movf	?i1___awtoft+2,w
 18059  02D5  00E6               	movwf	modTri@angle+2
 18060  02D6  0024               	movlb	4	; select bank4
 18061  02D7  085C               	movf	(_symmetry+1)^(0+512),w
 18062  02D8  0020               	movlb	0	; select bank0
 18063  02D9  00DF               	movwf	i1___awtoft@c+1
 18064  02DA  0024               	movlb	4	; select bank4
 18065  02DB  085B               	movf	_symmetry^(0+512),w
 18066  02DC  0020               	movlb	0	; select bank0
 18067  02DD  00DE               	movwf	i1___awtoft@c
 18068  02DE  31AC  2459  3180   	fcall	i1___awtoft
 18069  02E1  0020               	movlb	0	; select bank0
 18070  02E2  085E               	movf	?i1___awtoft,w
 18071  02E3  00E7               	movwf	modTri@inflection
 18072  02E4  085F               	movf	?i1___awtoft+1,w
 18073  02E5  00E8               	movwf	modTri@inflection+1
 18074  02E6  0860               	movf	?i1___awtoft+2,w
 18075  02E7  00E9               	movwf	modTri@inflection+2
 18076  02E8  3188  207D  3180   	fcall	_modTri
 18077  02EB  0020               	movlb	0	; select bank0
 18078  02EC  0865               	movf	?_modTri+1,w
 18079  02ED  0024               	movlb	4	; select bank4
 18080  02EE  00BB               	movwf	(_mod_value+1)^(0+512)
 18081  02EF  0020               	movlb	0	; select bank0
 18082  02F0  0864               	movf	?_modTri,w
 18083  02F1  2B9F               	goto	L22
 18084  02F2                     i1l7249:	
 18085                           ;interrupts.c: 177: case 3:
 18086                           
 18087                           ;interrupts.c: 176: break;
 18088                           
 18089                           
 18090                           ;interrupts.c: 178: mod_value = modSquare(6*mod_counter, symmetry);
 18091  02F2  0023               	movlb	3	; select bank3
 18092  02F3  086B               	movf	(_mod_counter+1)^(0+384),w
 18093  02F4  0020               	movlb	0	; select bank0
 18094  02F5  00D9               	movwf	i1___wmul@multiplier+1
 18095  02F6  0023               	movlb	3	; select bank3
 18096  02F7  086A               	movf	_mod_counter^(0+384),w
 18097  02F8  0020               	movlb	0	; select bank0
 18098  02F9  00D8               	movwf	i1___wmul@multiplier
 18099  02FA  3006               	movlw	6
 18100  02FB  00DA               	movwf	i1___wmul@multiplicand
 18101  02FC  3000               	movlw	0
 18102  02FD  00DB               	movwf	i1___wmul@multiplicand+1
 18103  02FE  31AB  23C3  3180   	fcall	i1___wmul
 18104  0301  0020               	movlb	0	; select bank0
 18105  0302  0859               	movf	?i1___wmul+1,w
 18106  0303  00DF               	movwf	i1___awtoft@c+1
 18107  0304  0858               	movf	?i1___wmul,w
 18108  0305  00DE               	movwf	i1___awtoft@c
 18109  0306  31AC  2459  3180   	fcall	i1___awtoft
 18110  0309  0020               	movlb	0	; select bank0
 18111  030A  085E               	movf	?i1___awtoft,w
 18112  030B  00E4               	movwf	modSquare@angle
 18113  030C  085F               	movf	?i1___awtoft+1,w
 18114  030D  00E5               	movwf	modSquare@angle+1
 18115  030E  0860               	movf	?i1___awtoft+2,w
 18116  030F  00E6               	movwf	modSquare@angle+2
 18117  0310  0024               	movlb	4	; select bank4
 18118  0311  085C               	movf	(_symmetry+1)^(0+512),w
 18119  0312  0020               	movlb	0	; select bank0
 18120  0313  00DF               	movwf	i1___awtoft@c+1
 18121  0314  0024               	movlb	4	; select bank4
 18122  0315  085B               	movf	_symmetry^(0+512),w
 18123  0316  0020               	movlb	0	; select bank0
 18124  0317  00DE               	movwf	i1___awtoft@c
 18125  0318  31AC  2459  3180   	fcall	i1___awtoft
 18126  031B  0020               	movlb	0	; select bank0
 18127  031C  085E               	movf	?i1___awtoft,w
 18128  031D  00E7               	movwf	modSquare@inflection
 18129  031E  085F               	movf	?i1___awtoft+1,w
 18130  031F  00E8               	movwf	modSquare@inflection+1
 18131  0320  0860               	movf	?i1___awtoft+2,w
 18132  0321  00E9               	movwf	modSquare@inflection+2
 18133  0322  31AB  23FB  3180   	fcall	_modSquare
 18134  0325  0020               	movlb	0	; select bank0
 18135  0326  0865               	movf	?_modSquare+1,w
 18136  0327  0024               	movlb	4	; select bank4
 18137  0328  00BB               	movwf	(_mod_value+1)^(0+512)
 18138  0329  0020               	movlb	0	; select bank0
 18139  032A  0864               	movf	?_modSquare,w
 18140  032B  2B9F               	goto	L22
 18141  032C                     i1l7251:	
 18142                           ;interrupts.c: 180: case 4:
 18143                           
 18144                           ;interrupts.c: 179: break;
 18145                           
 18146                           
 18147                           ;interrupts.c: 181: mod_value = modSaw(6*mod_counter, symmetry);
 18148  032C  0023               	movlb	3	; select bank3
 18149  032D  086B               	movf	(_mod_counter+1)^(0+384),w
 18150  032E  0020               	movlb	0	; select bank0
 18151  032F  00D9               	movwf	i1___wmul@multiplier+1
 18152  0330  0023               	movlb	3	; select bank3
 18153  0331  086A               	movf	_mod_counter^(0+384),w
 18154  0332  0020               	movlb	0	; select bank0
 18155  0333  00D8               	movwf	i1___wmul@multiplier
 18156  0334  3006               	movlw	6
 18157  0335  00DA               	movwf	i1___wmul@multiplicand
 18158  0336  3000               	movlw	0
 18159  0337  00DB               	movwf	i1___wmul@multiplicand+1
 18160  0338  31AB  23C3  3180   	fcall	i1___wmul
 18161  033B  0020               	movlb	0	; select bank0
 18162  033C  0859               	movf	?i1___wmul+1,w
 18163  033D  00DF               	movwf	i1___awtoft@c+1
 18164  033E  0858               	movf	?i1___wmul,w
 18165  033F  00DE               	movwf	i1___awtoft@c
 18166  0340  31AC  2459  3180   	fcall	i1___awtoft
 18167  0343  0020               	movlb	0	; select bank0
 18168  0344  085E               	movf	?i1___awtoft,w
 18169  0345  00E4               	movwf	modSaw@angle
 18170  0346  085F               	movf	?i1___awtoft+1,w
 18171  0347  00E5               	movwf	modSaw@angle+1
 18172  0348  0860               	movf	?i1___awtoft+2,w
 18173  0349  00E6               	movwf	modSaw@angle+2
 18174  034A  0024               	movlb	4	; select bank4
 18175  034B  085C               	movf	(_symmetry+1)^(0+512),w
 18176  034C  0020               	movlb	0	; select bank0
 18177  034D  00DF               	movwf	i1___awtoft@c+1
 18178  034E  0024               	movlb	4	; select bank4
 18179  034F  085B               	movf	_symmetry^(0+512),w
 18180  0350  0020               	movlb	0	; select bank0
 18181  0351  00DE               	movwf	i1___awtoft@c
 18182  0352  31AC  2459  3180   	fcall	i1___awtoft
 18183  0355  0020               	movlb	0	; select bank0
 18184  0356  085E               	movf	?i1___awtoft,w
 18185  0357  00E7               	movwf	modSaw@inflection
 18186  0358  085F               	movf	?i1___awtoft+1,w
 18187  0359  00E8               	movwf	modSaw@inflection+1
 18188  035A  0860               	movf	?i1___awtoft+2,w
 18189  035B  00E9               	movwf	modSaw@inflection+2
 18190  035C  3193  2365  3180   	fcall	_modSaw
 18191  035F  0020               	movlb	0	; select bank0
 18192  0360  0865               	movf	?_modSaw+1,w
 18193  0361  0024               	movlb	4	; select bank4
 18194  0362  00BB               	movwf	(_mod_value+1)^(0+512)
 18195  0363  0020               	movlb	0	; select bank0
 18196  0364  0864               	movf	?_modSaw,w
 18197  0365  2B9F               	goto	L22
 18198  0366                     i1l7253:	
 18199                           ;interrupts.c: 183: case 5:
 18200                           
 18201                           ;interrupts.c: 182: break;
 18202                           
 18203                           
 18204                           ;interrupts.c: 184: mod_value = modSawRev(6*mod_counter, symmetry);
 18205  0366  0023               	movlb	3	; select bank3
 18206  0367  086B               	movf	(_mod_counter+1)^(0+384),w
 18207  0368  0020               	movlb	0	; select bank0
 18208  0369  00D9               	movwf	i1___wmul@multiplier+1
 18209  036A  0023               	movlb	3	; select bank3
 18210  036B  086A               	movf	_mod_counter^(0+384),w
 18211  036C  0020               	movlb	0	; select bank0
 18212  036D  00D8               	movwf	i1___wmul@multiplier
 18213  036E  3006               	movlw	6
 18214  036F  00DA               	movwf	i1___wmul@multiplicand
 18215  0370  3000               	movlw	0
 18216  0371  00DB               	movwf	i1___wmul@multiplicand+1
 18217  0372  31AB  23C3  3180   	fcall	i1___wmul
 18218  0375  0020               	movlb	0	; select bank0
 18219  0376  0859               	movf	?i1___wmul+1,w
 18220  0377  00DF               	movwf	i1___awtoft@c+1
 18221  0378  0858               	movf	?i1___wmul,w
 18222  0379  00DE               	movwf	i1___awtoft@c
 18223  037A  31AC  2459  3180   	fcall	i1___awtoft
 18224  037D  0020               	movlb	0	; select bank0
 18225  037E  085E               	movf	?i1___awtoft,w
 18226  037F  00EA               	movwf	modSawRev@angle
 18227  0380  085F               	movf	?i1___awtoft+1,w
 18228  0381  00EB               	movwf	modSawRev@angle+1
 18229  0382  0860               	movf	?i1___awtoft+2,w
 18230  0383  00EC               	movwf	modSawRev@angle+2
 18231  0384  0024               	movlb	4	; select bank4
 18232  0385  085C               	movf	(_symmetry+1)^(0+512),w
 18233  0386  0020               	movlb	0	; select bank0
 18234  0387  00DF               	movwf	i1___awtoft@c+1
 18235  0388  0024               	movlb	4	; select bank4
 18236  0389  085B               	movf	_symmetry^(0+512),w
 18237  038A  0020               	movlb	0	; select bank0
 18238  038B  00DE               	movwf	i1___awtoft@c
 18239  038C  31AC  2459  3180   	fcall	i1___awtoft
 18240  038F  0020               	movlb	0	; select bank0
 18241  0390  085E               	movf	?i1___awtoft,w
 18242  0391  00ED               	movwf	modSawRev@inflection
 18243  0392  085F               	movf	?i1___awtoft+1,w
 18244  0393  00EE               	movwf	modSawRev@inflection+1
 18245  0394  0860               	movf	?i1___awtoft+2,w
 18246  0395  00EF               	movwf	modSawRev@inflection+2
 18247  0396  31AC  2437  3180   	fcall	_modSawRev
 18248  0399  0020               	movlb	0	; select bank0
 18249  039A  086B               	movf	?_modSawRev+1,w
 18250  039B  0024               	movlb	4	; select bank4
 18251  039C  00BB               	movwf	(_mod_value+1)^(0+512)
 18252  039D  0020               	movlb	0	; select bank0
 18253  039E  086A               	movf	?_modSawRev,w
 18254  039F                     L22:	
 18255  039F  0024               	movlb	4	; select bank4
 18256  03A0  00BA               	movwf	_mod_value^(0+512)
 18257                           
 18258                           ;interrupts.c: 185: break;
 18259  03A1  2BBD               	goto	i1l7261
 18260  03A2                     i1l7255:	
 18261                           ;interrupts.c: 186: default:
 18262                           
 18263                           
 18264                           ;interrupts.c: 187: mod_value = 0;
 18265  03A2  0024               	movlb	4	; select bank4
 18266  03A3  01BA               	clrf	_mod_value^(0+512)
 18267  03A4  01BB               	clrf	(_mod_value+1)^(0+512)
 18268                           
 18269                           ;interrupts.c: 189: }
 18270                           
 18271                           ;interrupts.c: 188: break;
 18272  03A5  2BBD               	goto	i1l7261
 18273  03A6                     i1l7259:	
 18274                           
 18275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18276                           ; Switch size 1, requested type "space"
 18277                           ; Number of cases is 1, Range of values is 0 to 0
 18278                           ; switch strategies available:
 18279                           ; Name         Instructions Cycles
 18280                           ; simple_byte            4     3 (average)
 18281                           ; direct_byte            8     6 (fixed)
 18282                           ; jumptable            260     6 (fixed)
 18283                           ;	Chosen strategy is simple_byte
 18284  03A6  0021               	movlb	1	; select bank1
 18285  03A7  0858               	movf	(_bottom_push_state+1)^(0+128),w
 18286  03A8  3A00               	xorlw	0	; case 0
 18287  03A9  1903               	skipnz
 18288  03AA  2BAC               	goto	i1l9877
 18289  03AB  2BA2               	goto	i1l7255
 18290  03AC                     i1l9877:	
 18291                           
 18292                           ; Switch size 1, requested type "space"
 18293                           ; Number of cases is 5, Range of values is 1 to 5
 18294                           ; switch strategies available:
 18295                           ; Name         Instructions Cycles
 18296                           ; simple_byte           16     9 (average)
 18297                           ; direct_byte           19     9 (fixed)
 18298                           ; jumptable            263     9 (fixed)
 18299                           ;	Chosen strategy is simple_byte
 18300  03AC  0857               	movf	_bottom_push_state^(0+128),w
 18301  03AD  3A01               	xorlw	1	; case 1
 18302  03AE  1903               	skipnz
 18303  03AF  2A6E               	goto	i1l7243
 18304  03B0  3A03               	xorlw	3	; case 2
 18305  03B1  1903               	skipnz
 18306  03B2  2AB8               	goto	i1l7247
 18307  03B3  3A01               	xorlw	1	; case 3
 18308  03B4  1903               	skipnz
 18309  03B5  2AF2               	goto	i1l7249
 18310  03B6  3A07               	xorlw	7	; case 4
 18311  03B7  1903               	skipnz
 18312  03B8  2B2C               	goto	i1l7251
 18313  03B9  3A01               	xorlw	1	; case 5
 18314  03BA  1903               	skipnz
 18315  03BB  2B66               	goto	i1l7253
 18316  03BC  2BA2               	goto	i1l7255
 18317  03BD                     i1l7261:	
 18318                           
 18319                           ;interrupts.c: 190: if (mod_value > 90) {
 18320  03BD  0024               	movlb	4	; select bank4
 18321  03BE  083B               	movf	(_mod_value+1)^(0+512),w
 18322  03BF  3A80               	xorlw	128
 18323  03C0  0021               	movlb	1	; select bank1
 18324  03C1  00B3               	movwf	??_isr^(0+128)
 18325  03C2  3080               	movlw	128
 18326  03C3  0233               	subwf	??_isr^(0+128),w
 18327  03C4  1D03               	skipz
 18328  03C5  2BC9               	goto	u802_25
 18329  03C6  305B               	movlw	91
 18330  03C7  0024               	movlb	4	; select bank4
 18331  03C8  023A               	subwf	_mod_value^(0+512),w
 18332  03C9                     u802_25:	
 18333  03C9  1C03               	skipc
 18334  03CA  2BCE               	goto	i1l177
 18335                           
 18336                           ;interrupts.c: 191: LATBbits.LATB1 = 1;
 18337  03CB  0022               	movlb	2	; select bank2
 18338  03CC  148D               	bsf	13,1	;volatile
 18339                           
 18340                           ;interrupts.c: 192: } else {
 18341  03CD  2BD0               	goto	i1l7265
 18342  03CE                     i1l177:	
 18343                           
 18344                           ;interrupts.c: 193: LATBbits.LATB1 = 0;
 18345  03CE  0022               	movlb	2	; select bank2
 18346  03CF  108D               	bcf	13,1	;volatile
 18347  03D0                     i1l7265:	
 18348                           
 18349                           ;interrupts.c: 194: }
 18350                           ;interrupts.c: 196: mod_value = modulation(mod_value, adjusted_pot_value);
 18351  03D0  0024               	movlb	4	; select bank4
 18352  03D1  083A               	movf	_mod_value^(0+512),w
 18353  03D2  0020               	movlb	0	; select bank0
 18354  03D3  00AE               	movwf	modulation@x
 18355  03D4  0024               	movlb	4	; select bank4
 18356  03D5  083B               	movf	(_mod_value+1)^(0+512),w
 18357  03D6  0020               	movlb	0	; select bank0
 18358  03D7  00AF               	movwf	modulation@x+1
 18359  03D8  0D89               	rlf	9,f
 18360  03D9  3B89               	subwfb	9,f
 18361  03DA  0989               	comf	9,f
 18362  03DB  00B0               	movwf	modulation@x+2
 18363  03DC  00B1               	movwf	modulation@x+3
 18364  03DD  0025               	movlb	5	; select bank5
 18365  03DE  0845               	movf	_adjusted_pot_value^(0+640),w
 18366  03DF  0020               	movlb	0	; select bank0
 18367  03E0  00B2               	movwf	modulation@y
 18368  03E1  0025               	movlb	5	; select bank5
 18369  03E2  0846               	movf	(_adjusted_pot_value+1)^(0+640),w
 18370  03E3  0020               	movlb	0	; select bank0
 18371  03E4  00B3               	movwf	modulation@y+1
 18372  03E5  0D89               	rlf	9,f
 18373  03E6  3B89               	subwfb	9,f
 18374  03E7  0989               	comf	9,f
 18375  03E8  00B4               	movwf	modulation@y+2
 18376  03E9  00B5               	movwf	modulation@y+3
 18377  03EA  31AF  277E  3180   	fcall	_modulation
 18378  03ED  0020               	movlb	0	; select bank0
 18379  03EE  082F               	movf	?_modulation+1,w
 18380  03EF  0024               	movlb	4	; select bank4
 18381  03F0  00BB               	movwf	(_mod_value+1)^(0+512)
 18382  03F1  0020               	movlb	0	; select bank0
 18383  03F2  082E               	movf	?_modulation,w
 18384  03F3  0024               	movlb	4	; select bank4
 18385  03F4  00BA               	movwf	_mod_value^(0+512)
 18386                           
 18387                           ;interrupts.c: 197: CCPR3 = mod_value / 2;
 18388  03F5  3002               	movlw	2
 18389  03F6  00F0               	movwf	___awdiv@divisor
 18390  03F7  3000               	movlw	0
 18391  03F8  00F1               	movwf	___awdiv@divisor+1
 18392  03F9  083B               	movf	(_mod_value+1)^(0+512),w
 18393  03FA  00F3               	movwf	___awdiv@dividend+1
 18394  03FB  083A               	movf	_mod_value^(0+512),w
 18395  03FC  00F2               	movwf	___awdiv@dividend
 18396  03FD  31A2  2271  3180   	fcall	___awdiv
 18397  0400  0871               	movf	?___awdiv+1,w
 18398  0401  0026               	movlb	6	; select bank6
 18399  0402  0092               	movwf	18	;volatile
 18400  0403  0870               	movf	?___awdiv,w
 18401  0404  0091               	movwf	17	;volatile
 18402                           
 18403                           ;interrupts.c: 198: mod_counter++;
 18404  0405  3001               	movlw	1
 18405  0406  0023               	movlb	3	; select bank3
 18406  0407  07EA               	addwf	_mod_counter^(0+384),f
 18407  0408  3000               	movlw	0
 18408  0409  3DEB               	addwfc	(_mod_counter+1)^(0+384),f
 18409  040A                     i1l7269:	
 18410                           
 18411                           ;interrupts.c: 202: }
 18412                           ;interrupts.c: 206: if (preset_programmning_on == 1) {
 18413  040A  0024               	movlb	4	; select bank4
 18414  040B  0345               	decf	_preset_programmning_on^(0+512),w
 18415  040C  1D03               	btfss	3,2
 18416  040D  2C39               	goto	i1l7281
 18417                           
 18418                           ;interrupts.c: 207: preset_blink++;
 18419  040E  3001               	movlw	1
 18420  040F  0021               	movlb	1	; select bank1
 18421  0410  00B3               	movwf	??_isr^(0+128)
 18422  0411  0833               	movf	??_isr^(0+128),w
 18423  0412  0024               	movlb	4	; select bank4
 18424  0413  07C4               	addwf	_preset_blink^(0+512),f
 18425                           
 18426                           ;interrupts.c: 209: if (preset_blink >= blink_delay) {
 18427  0414  084E               	movf	(_blink_delay+1)^(0+512),w
 18428  0415  3A80               	xorlw	128
 18429  0416  3C80               	sublw	128
 18430  0417  1D03               	skipz
 18431  0418  2C1B               	goto	u804_25
 18432  0419  084D               	movf	_blink_delay^(0+512),w
 18433  041A  0244               	subwf	_preset_blink^(0+512),w
 18434  041B                     u804_25:	
 18435  041B  1C03               	skipc
 18436  041C  2C3E               	goto	i1l7285
 18437                           
 18438                           ;interrupts.c: 210: LATBbits.LATB1 = 1;
 18439  041D  0022               	movlb	2	; select bank2
 18440  041E  148D               	bsf	13,1	;volatile
 18441                           
 18442                           ;interrupts.c: 211: if (preset_blink > blink_delay*2) {
 18443  041F  0024               	movlb	4	; select bank4
 18444  0420  084E               	movf	(_blink_delay+1)^(0+512),w
 18445  0421  0021               	movlb	1	; select bank1
 18446  0422  00B4               	movwf	(??_isr^(0+128)+1)
 18447  0423  0024               	movlb	4	; select bank4
 18448  0424  084D               	movf	_blink_delay^(0+512),w
 18449  0425  0021               	movlb	1	; select bank1
 18450  0426  00B3               	movwf	??_isr^(0+128)
 18451  0427  35B3               	lslf	??_isr^(0+128),f
 18452  0428  0DB4               	rlf	(??_isr^(0+128)+1),f
 18453  0429  0834               	movf	(??_isr+1)^(0+128),w
 18454  042A  3A80               	xorlw	128
 18455  042B  00B5               	movwf	(??_isr+2)^(0+128)
 18456  042C  3080               	movlw	128
 18457  042D  0235               	subwf	(??_isr+2)^(0+128),w
 18458  042E  1D03               	skipz
 18459  042F  2C34               	goto	u805_25
 18460  0430  0024               	movlb	4	; select bank4
 18461  0431  0844               	movf	_preset_blink^(0+512),w
 18462  0432  0021               	movlb	1	; select bank1
 18463  0433  0233               	subwf	??_isr^(0+128),w
 18464  0434                     u805_25:	
 18465  0434  1803               	skipnc
 18466  0435  2C40               	goto	i1l185
 18467                           
 18468                           ;interrupts.c: 212: preset_blink = 0;
 18469  0436  0024               	movlb	4	; select bank4
 18470  0437  01C4               	clrf	_preset_blink^(0+512)
 18471                           
 18472                           ;interrupts.c: 213: }
 18473                           ;interrupts.c: 215: } else {
 18474  0438  2C40               	goto	i1l185
 18475  0439                     i1l7281:	
 18476                           ;interrupts.c: 217: }
 18477                           ;interrupts.c: 219: } else {
 18478                           
 18479                           ;interrupts.c: 216: LATBbits.LATB1 = 0;
 18480                           
 18481                           
 18482                           ;interrupts.c: 220: if (preset_blink > 0) {
 18483  0439  0024               	movlb	4	; select bank4
 18484  043A  0844               	movf	_preset_blink^(0+512),w
 18485  043B  1903               	btfsc	3,2
 18486  043C  2C40               	goto	i1l185
 18487                           
 18488                           ;interrupts.c: 221: preset_blink = 0;
 18489  043D  01C4               	clrf	_preset_blink^(0+512)
 18490  043E                     i1l7285:	
 18491                           
 18492                           ;interrupts.c: 222: LATBbits.LATB1 = 0;
 18493  043E  0022               	movlb	2	; select bank2
 18494  043F  108D               	bcf	13,1	;volatile
 18495  0440                     i1l185:	
 18496  0440  0021               	movlb	1	; select bank1
 18497  0441  083B               	movf	(??_isr+8)^(0+128),w
 18498  0442  0020               	movlb	0	; select bank0
 18499  0443  00FF               	movwf	127
 18500  0444  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 18501  0445  0009               	retfie
 18502  0446                     __end_of_isr:	
 18503                           
 18504                           	psect	text66
 18505  2066                     __ptext66:	
 18506 ;; *************** function i1_set_leds_top *****************
 18507 ;; Defined at:
 18508 ;;		line 16 in file "LEDs.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;  x               2    0[COMMON] int 
 18511 ;;  ledState        2    2[COMMON] int 
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;		None
 18514 ;; Return value:  Size  Location     Type
 18515 ;;                  1    wreg      void 
 18516 ;; Registers used:
 18517 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18518 ;; Tracked objects:
 18519 ;;		On entry : 0/0
 18520 ;;		On exit  : 0/0
 18521 ;;		Unchanged: 0/0
 18522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18527 ;;Total ram usage:        4 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; This function calls:
 18530 ;;		Nothing
 18531 ;; This function is called by:
 18532 ;;		_isr
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           
 18537                           ;psect for function i1_set_leds_top
 18538  2066                     i1_set_leds_top:	
 18539                           
 18540                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 18541                           
 18542                           ;incstack = 0
 18543                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 18544  2066  0027               	movlb	7	; select bank7
 18545  2067  100C               	bcf	12,0	;volatile
 18546                           
 18547                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 18548  2068  108C               	bcf	12,1	;volatile
 18549                           
 18550                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 18551  2069  110C               	bcf	12,2	;volatile
 18552                           
 18553                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 18554  206A  118C               	bcf	12,3	;volatile
 18555                           
 18556                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 18557  206B  120C               	bcf	12,4	;volatile
 18558                           
 18559                           ;LEDs.c: 22: switch (x) {
 18560  206C  2891               	goto	i1l7119
 18561  206D                     i1l7107:	
 18562                           ;LEDs.c: 23: case 1:
 18563                           
 18564                           
 18565                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 18566  206D  0C72               	rrf	i1set_leds_top@ledState,w
 18567  206E  1C03               	skipc
 18568  206F  100C               	bcf	12,0	;volatile
 18569  2070  1803               	skipnc
 18570  2071  140C               	bsf	12,0	;volatile
 18571                           
 18572                           ;LEDs.c: 25: break;
 18573  2072  0008               	return
 18574  2073                     i1l7109:	
 18575                           ;LEDs.c: 26: case 2:
 18576                           
 18577                           
 18578                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 18579  2073  0C72               	rrf	i1set_leds_top@ledState,w
 18580  2074  1C03               	skipc
 18581  2075  108C               	bcf	12,1	;volatile
 18582  2076  1803               	skipnc
 18583  2077  148C               	bsf	12,1	;volatile
 18584                           
 18585                           ;LEDs.c: 28: break;
 18586  2078  0008               	return
 18587  2079                     i1l7111:	
 18588                           ;LEDs.c: 29: case 3:
 18589                           
 18590                           
 18591                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 18592  2079  0C72               	rrf	i1set_leds_top@ledState,w
 18593  207A  1C03               	skipc
 18594  207B  110C               	bcf	12,2	;volatile
 18595  207C  1803               	skipnc
 18596  207D  150C               	bsf	12,2	;volatile
 18597                           
 18598                           ;LEDs.c: 31: break;
 18599  207E  0008               	return
 18600  207F                     i1l7113:	
 18601                           ;LEDs.c: 32: case 4:
 18602                           
 18603                           
 18604                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 18605  207F  0C72               	rrf	i1set_leds_top@ledState,w
 18606  2080  1C03               	skipc
 18607  2081  118C               	bcf	12,3	;volatile
 18608  2082  1803               	skipnc
 18609  2083  158C               	bsf	12,3	;volatile
 18610                           
 18611                           ;LEDs.c: 34: break;
 18612  2084  0008               	return
 18613  2085                     i1l7115:	
 18614                           ;LEDs.c: 35: case 5:
 18615                           
 18616                           
 18617                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 18618  2085  0C72               	rrf	i1set_leds_top@ledState,w
 18619  2086  1C03               	skipc
 18620  2087  120C               	bcf	12,4	;volatile
 18621  2088  1803               	skipnc
 18622  2089  160C               	bsf	12,4	;volatile
 18623                           
 18624                           ;LEDs.c: 39: break;
 18625                           
 18626                           ;LEDs.c: 38: case 6:
 18627                           
 18628                           ;LEDs.c: 37: break;
 18629  208A  0008               	return
 18630  208B                     i1l811:	
 18631                           ;LEDs.c: 40: case 100:
 18632                           
 18633                           
 18634                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 18635  208B  140C               	bsf	12,0	;volatile
 18636                           
 18637                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 18638  208C  148C               	bsf	12,1	;volatile
 18639                           
 18640                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 18641  208D  150C               	bsf	12,2	;volatile
 18642                           
 18643                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 18644  208E  158C               	bsf	12,3	;volatile
 18645                           
 18646                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 18647  208F  160C               	bsf	12,4	;volatile
 18648                           
 18649                           ;LEDs.c: 47: }
 18650                           
 18651                           ;LEDs.c: 46: break;
 18652  2090  0008               	return
 18653  2091                     i1l7119:	
 18654                           
 18655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18656                           ; Switch size 1, requested type "space"
 18657                           ; Number of cases is 1, Range of values is 0 to 0
 18658                           ; switch strategies available:
 18659                           ; Name         Instructions Cycles
 18660                           ; simple_byte            4     3 (average)
 18661                           ; direct_byte            8     6 (fixed)
 18662                           ; jumptable            260     6 (fixed)
 18663                           ;	Chosen strategy is simple_byte
 18664  2091  0871               	movf	i1set_leds_top@x+1,w
 18665  2092  3A00               	xorlw	0	; case 0
 18666  2093  1903               	skipnz
 18667  2094  2896               	goto	i1l9879
 18668  2095  28AD               	goto	i1l812
 18669  2096                     i1l9879:	
 18670                           
 18671                           ; Switch size 1, requested type "space"
 18672                           ; Number of cases is 7, Range of values is 1 to 100
 18673                           ; switch strategies available:
 18674                           ; Name         Instructions Cycles
 18675                           ; simple_byte           22    12 (average)
 18676                           ; direct_byte          209     9 (fixed)
 18677                           ; jumptable            263     9 (fixed)
 18678                           ;	Chosen strategy is simple_byte
 18679  2096  0870               	movf	i1set_leds_top@x,w
 18680  2097  3A01               	xorlw	1	; case 1
 18681  2098  1903               	skipnz
 18682  2099  286D               	goto	i1l7107
 18683  209A  3A03               	xorlw	3	; case 2
 18684  209B  1903               	skipnz
 18685  209C  2873               	goto	i1l7109
 18686  209D  3A01               	xorlw	1	; case 3
 18687  209E  1903               	skipnz
 18688  209F  2879               	goto	i1l7111
 18689  20A0  3A07               	xorlw	7	; case 4
 18690  20A1  1903               	skipnz
 18691  20A2  287F               	goto	i1l7113
 18692  20A3  3A01               	xorlw	1	; case 5
 18693  20A4  1903               	skipnz
 18694  20A5  2885               	goto	i1l7115
 18695  20A6  3A03               	xorlw	3	; case 6
 18696  20A7  1903               	skipnz
 18697  20A8  28AD               	goto	i1l812
 18698  20A9  3A62               	xorlw	98	; case 100
 18699  20AA  1903               	skipnz
 18700  20AB  288B               	goto	i1l811
 18701  20AC  28AD               	goto	i1l812
 18702  20AD                     i1l812:	
 18703  20AD  0008               	return
 18704  20AE                     __end_ofi1_set_leds_top:	
 18705                           
 18706                           	psect	text67
 18707  14DC                     __ptext67:	
 18708 ;; *************** function i1_modSin *****************
 18709 ;; Defined at:
 18710 ;;		line 52 in file "modulation.c"
 18711 ;; Parameters:    Size  Location     Type
 18712 ;;  angle           3   68[BANK0 ] void 
 18713 ;;  inflection      3   71[BANK0 ] void 
 18714 ;; Auto vars:     Size  Location     Type
 18715 ;;  modSin          3    9[BANK1 ] void 
 18716 ;;  modSin          3    6[BANK1 ] void 
 18717 ;;  modSin          3    3[BANK1 ] void 
 18718 ;; Return value:  Size  Location     Type
 18719 ;;                  2   68[BANK0 ] int 
 18720 ;; Registers used:
 18721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18727 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18728 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18729 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18730 ;;      Totals:         0       8      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18731 ;;Total ram usage:       20 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    2
 18734 ;; This function calls:
 18735 ;;		i1___ftadd
 18736 ;;		i1___ftdiv
 18737 ;;		i1___ftge
 18738 ;;		i1___ftmul
 18739 ;;		i1___ftneg
 18740 ;;		i1___fttol
 18741 ;;		i1___wmul
 18742 ;; This function is called by:
 18743 ;;		_isr
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           
 18748                           ;psect for function i1_modSin
 18749  14DC                     i1_modSin:	
 18750                           
 18751                           ;modulation.c: 53: double period = 1.0;
 18752                           
 18753                           ;incstack = 0
 18754                           ; Regs used in i1_modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18755  14DC  3000               	movlw	0
 18756  14DD  0021               	movlb	1	; select bank1
 18757  14DE  00A6               	movwf	i1modSin@period^(0+128)
 18758  14DF  3080               	movlw	128
 18759  14E0  00A7               	movwf	(i1modSin@period+1)^(0+128)
 18760  14E1  303F               	movlw	63
 18761  14E2  00A8               	movwf	(i1modSin@period+2)^(0+128)
 18762                           
 18763                           ;modulation.c: 54: double shift = 0.0;
 18764  14E3  3000               	movlw	0
 18765  14E4  00A3               	movwf	i1modSin@shift^(0+128)
 18766  14E5  3000               	movlw	0
 18767  14E6  00A4               	movwf	(i1modSin@shift+1)^(0+128)
 18768  14E7  3000               	movlw	0
 18769  14E8  00A5               	movwf	(i1modSin@shift+2)^(0+128)
 18770                           
 18771                           ;modulation.c: 56: if(angle<=inflection) {
 18772  14E9  0020               	movlb	0	; select bank0
 18773  14EA  0867               	movf	i1modSin@inflection,w
 18774  14EB  00F0               	movwf	i1___ftge@ff1
 18775  14EC  0868               	movf	i1modSin@inflection+1,w
 18776  14ED  00F1               	movwf	i1___ftge@ff1+1
 18777  14EE  0869               	movf	i1modSin@inflection+2,w
 18778  14EF  00F2               	movwf	i1___ftge@ff1+2
 18779  14F0  0864               	movf	i1modSin@angle,w
 18780  14F1  00F3               	movwf	i1___ftge@ff2
 18781  14F2  0865               	movf	i1modSin@angle+1,w
 18782  14F3  00F4               	movwf	i1___ftge@ff2+1
 18783  14F4  0866               	movf	i1modSin@angle+2,w
 18784  14F5  00F5               	movwf	i1___ftge@ff2+2
 18785  14F6  31AE  264A  3194   	fcall	i1___ftge
 18786  14F9  1C03               	btfss	3,0
 18787  14FA  2D02               	goto	i1l7131
 18788                           
 18789                           ;modulation.c: 57: period = 180.0/inflection;
 18790  14FB  0020               	movlb	0	; select bank0
 18791  14FC  0867               	movf	i1modSin@inflection,w
 18792  14FD  00BA               	movwf	i1___ftdiv@f2
 18793  14FE  0868               	movf	i1modSin@inflection+1,w
 18794  14FF  00BB               	movwf	i1___ftdiv@f2+1
 18795  1500  0869               	movf	i1modSin@inflection+2,w
 18796  1501  2DA7               	goto	L23
 18797  1502                     i1l7131:	
 18798                           ;modulation.c: 58: } else {
 18799                           
 18800                           
 18801                           ;modulation.c: 59: shift = -(360-inflection*2)*(180/(360-inflection));
 18802  1502  0020               	movlb	0	; select bank0
 18803  1503  0867               	movf	i1modSin@inflection,w
 18804  1504  00FB               	movwf	i1___ftmul@f2
 18805  1505  0868               	movf	i1modSin@inflection+1,w
 18806  1506  00FC               	movwf	i1___ftmul@f2+1
 18807  1507  0869               	movf	i1modSin@inflection+2,w
 18808  1508  00FD               	movwf	i1___ftmul@f2+2
 18809  1509  3000               	movlw	0
 18810  150A  00F8               	movwf	i1___ftmul@f1
 18811  150B  3000               	movlw	0
 18812  150C  00F9               	movwf	i1___ftmul@f1+1
 18813  150D  3040               	movlw	64
 18814  150E  00FA               	movwf	i1___ftmul@f1+2
 18815  150F  319C  2422  3194   	fcall	i1___ftmul
 18816  1512  0878               	movf	?i1___ftmul,w
 18817  1513  0020               	movlb	0	; select bank0
 18818  1514  00AA               	movwf	i1___ftneg@f1
 18819  1515  0879               	movf	?i1___ftmul+1,w
 18820  1516  00AB               	movwf	i1___ftneg@f1+1
 18821  1517  087A               	movf	?i1___ftmul+2,w
 18822  1518  00AC               	movwf	i1___ftneg@f1+2
 18823  1519  31AA  22D7  3194   	fcall	i1___ftneg
 18824  151C  0020               	movlb	0	; select bank0
 18825  151D  082A               	movf	?i1___ftneg,w
 18826  151E  00B0               	movwf	i1___ftadd@f2
 18827  151F  082B               	movf	?i1___ftneg+1,w
 18828  1520  00B1               	movwf	i1___ftadd@f2+1
 18829  1521  082C               	movf	?i1___ftneg+2,w
 18830  1522  00B2               	movwf	i1___ftadd@f2+2
 18831  1523  3000               	movlw	0
 18832  1524  00AD               	movwf	i1___ftadd@f1
 18833  1525  30B4               	movlw	180
 18834  1526  00AE               	movwf	i1___ftadd@f1+1
 18835  1527  3043               	movlw	67
 18836  1528  00AF               	movwf	i1___ftadd@f1+2
 18837  1529  3190  2020  3194   	fcall	i1___ftadd
 18838  152C  0020               	movlb	0	; select bank0
 18839  152D  082D               	movf	?i1___ftadd,w
 18840  152E  0021               	movlb	1	; select bank1
 18841  152F  00A0               	movwf	i1_modSin$2916^(0+128)
 18842  1530  0020               	movlb	0	; select bank0
 18843  1531  082E               	movf	?i1___ftadd+1,w
 18844  1532  0021               	movlb	1	; select bank1
 18845  1533  00A1               	movwf	(i1_modSin$2916+1)^(0+128)
 18846  1534  0020               	movlb	0	; select bank0
 18847  1535  082F               	movf	?i1___ftadd+2,w
 18848  1536  0021               	movlb	1	; select bank1
 18849  1537  00A2               	movwf	(i1_modSin$2916+2)^(0+128)
 18850                           
 18851                           ;modulation.c: 59: shift = -(360-inflection*2)*(180/(360-inflection));
 18852  1538  0820               	movf	i1_modSin$2916^(0+128),w
 18853  1539  0020               	movlb	0	; select bank0
 18854  153A  00AA               	movwf	i1___ftneg@f1
 18855  153B  0021               	movlb	1	; select bank1
 18856  153C  0821               	movf	(i1_modSin$2916+1)^(0+128),w
 18857  153D  0020               	movlb	0	; select bank0
 18858  153E  00AB               	movwf	i1___ftneg@f1+1
 18859  153F  0021               	movlb	1	; select bank1
 18860  1540  0822               	movf	(i1_modSin$2916+2)^(0+128),w
 18861  1541  0020               	movlb	0	; select bank0
 18862  1542  00AC               	movwf	i1___ftneg@f1+2
 18863  1543  31AA  22D7  3194   	fcall	i1___ftneg
 18864  1546  0020               	movlb	0	; select bank0
 18865  1547  082A               	movf	?i1___ftneg,w
 18866  1548  00F8               	movwf	i1___ftmul@f1
 18867  1549  082B               	movf	?i1___ftneg+1,w
 18868  154A  00F9               	movwf	i1___ftmul@f1+1
 18869  154B  082C               	movf	?i1___ftneg+2,w
 18870  154C  00FA               	movwf	i1___ftmul@f1+2
 18871  154D  3000               	movlw	0
 18872  154E  00AD               	movwf	i1___ftadd@f1
 18873  154F  30B4               	movlw	180
 18874  1550  00AE               	movwf	i1___ftadd@f1+1
 18875  1551  3043               	movlw	67
 18876  1552  00AF               	movwf	i1___ftadd@f1+2
 18877  1553  0867               	movf	i1modSin@inflection,w
 18878  1554  00AA               	movwf	i1___ftneg@f1
 18879  1555  0868               	movf	i1modSin@inflection+1,w
 18880  1556  00AB               	movwf	i1___ftneg@f1+1
 18881  1557  0869               	movf	i1modSin@inflection+2,w
 18882  1558  00AC               	movwf	i1___ftneg@f1+2
 18883  1559  31AA  22D7  3194   	fcall	i1___ftneg
 18884  155C  0020               	movlb	0	; select bank0
 18885  155D  082A               	movf	?i1___ftneg,w
 18886  155E  00B0               	movwf	i1___ftadd@f2
 18887  155F  082B               	movf	?i1___ftneg+1,w
 18888  1560  00B1               	movwf	i1___ftadd@f2+1
 18889  1561  082C               	movf	?i1___ftneg+2,w
 18890  1562  00B2               	movwf	i1___ftadd@f2+2
 18891  1563  3190  2020  3194   	fcall	i1___ftadd
 18892  1566  0020               	movlb	0	; select bank0
 18893  1567  082D               	movf	?i1___ftadd,w
 18894  1568  00BA               	movwf	i1___ftdiv@f2
 18895  1569  082E               	movf	?i1___ftadd+1,w
 18896  156A  00BB               	movwf	i1___ftdiv@f2+1
 18897  156B  082F               	movf	?i1___ftadd+2,w
 18898  156C  00BC               	movwf	i1___ftdiv@f2+2
 18899  156D  3000               	movlw	0
 18900  156E  00BD               	movwf	i1___ftdiv@f1
 18901  156F  3034               	movlw	52
 18902  1570  00BE               	movwf	i1___ftdiv@f1+1
 18903  1571  3043               	movlw	67
 18904  1572  00BF               	movwf	i1___ftdiv@f1+2
 18905  1573  319A  2225  3194   	fcall	i1___ftdiv
 18906  1576  0020               	movlb	0	; select bank0
 18907  1577  083A               	movf	?i1___ftdiv,w
 18908  1578  00FB               	movwf	i1___ftmul@f2
 18909  1579  083B               	movf	?i1___ftdiv+1,w
 18910  157A  00FC               	movwf	i1___ftmul@f2+1
 18911  157B  083C               	movf	?i1___ftdiv+2,w
 18912  157C  00FD               	movwf	i1___ftmul@f2+2
 18913  157D  319C  2422  3194   	fcall	i1___ftmul
 18914  1580  0878               	movf	?i1___ftmul,w
 18915  1581  0021               	movlb	1	; select bank1
 18916  1582  00A3               	movwf	i1modSin@shift^(0+128)
 18917  1583  0879               	movf	?i1___ftmul+1,w
 18918  1584  00A4               	movwf	(i1modSin@shift+1)^(0+128)
 18919  1585  087A               	movf	?i1___ftmul+2,w
 18920  1586  00A5               	movwf	(i1modSin@shift+2)^(0+128)
 18921                           
 18922                           ;modulation.c: 60: period = 180/(360-inflection);
 18923  1587  3000               	movlw	0
 18924  1588  0020               	movlb	0	; select bank0
 18925  1589  00AD               	movwf	i1___ftadd@f1
 18926  158A  30B4               	movlw	180
 18927  158B  00AE               	movwf	i1___ftadd@f1+1
 18928  158C  3043               	movlw	67
 18929  158D  00AF               	movwf	i1___ftadd@f1+2
 18930  158E  0867               	movf	i1modSin@inflection,w
 18931  158F  00AA               	movwf	i1___ftneg@f1
 18932  1590  0868               	movf	i1modSin@inflection+1,w
 18933  1591  00AB               	movwf	i1___ftneg@f1+1
 18934  1592  0869               	movf	i1modSin@inflection+2,w
 18935  1593  00AC               	movwf	i1___ftneg@f1+2
 18936  1594  31AA  22D7  3194   	fcall	i1___ftneg
 18937  1597  0020               	movlb	0	; select bank0
 18938  1598  082A               	movf	?i1___ftneg,w
 18939  1599  00B0               	movwf	i1___ftadd@f2
 18940  159A  082B               	movf	?i1___ftneg+1,w
 18941  159B  00B1               	movwf	i1___ftadd@f2+1
 18942  159C  082C               	movf	?i1___ftneg+2,w
 18943  159D  00B2               	movwf	i1___ftadd@f2+2
 18944  159E  3190  2020  3194   	fcall	i1___ftadd
 18945  15A1  0020               	movlb	0	; select bank0
 18946  15A2  082D               	movf	?i1___ftadd,w
 18947  15A3  00BA               	movwf	i1___ftdiv@f2
 18948  15A4  082E               	movf	?i1___ftadd+1,w
 18949  15A5  00BB               	movwf	i1___ftdiv@f2+1
 18950  15A6  082F               	movf	?i1___ftadd+2,w
 18951  15A7                     L23:	
 18952  15A7  00BC               	movwf	i1___ftdiv@f2+2
 18953  15A8  3000               	movlw	0
 18954  15A9  00BD               	movwf	i1___ftdiv@f1
 18955  15AA  3034               	movlw	52
 18956  15AB  00BE               	movwf	i1___ftdiv@f1+1
 18957  15AC  3043               	movlw	67
 18958  15AD  00BF               	movwf	i1___ftdiv@f1+2
 18959  15AE  319A  2225  3194   	fcall	i1___ftdiv
 18960  15B1  0020               	movlb	0	; select bank0
 18961  15B2  083A               	movf	?i1___ftdiv,w
 18962  15B3  0021               	movlb	1	; select bank1
 18963  15B4  00A6               	movwf	i1modSin@period^(0+128)
 18964  15B5  0020               	movlb	0	; select bank0
 18965  15B6  083B               	movf	?i1___ftdiv+1,w
 18966  15B7  0021               	movlb	1	; select bank1
 18967  15B8  00A7               	movwf	(i1modSin@period+1)^(0+128)
 18968  15B9  0020               	movlb	0	; select bank0
 18969  15BA  083C               	movf	?i1___ftdiv+2,w
 18970  15BB  0021               	movlb	1	; select bank1
 18971  15BC  00A8               	movwf	(i1modSin@period+2)^(0+128)
 18972                           
 18973                           ;modulation.c: 62: }
 18974                           ;modulation.c: 63: double tmpVal = (period*angle-shift) /3;
 18975  15BD  3000               	movlw	0
 18976  15BE  0020               	movlb	0	; select bank0
 18977  15BF  00BA               	movwf	i1___ftdiv@f2
 18978  15C0  3040               	movlw	64
 18979  15C1  00BB               	movwf	i1___ftdiv@f2+1
 18980  15C2  3040               	movlw	64
 18981  15C3  00BC               	movwf	i1___ftdiv@f2+2
 18982  15C4  0021               	movlb	1	; select bank1
 18983  15C5  0823               	movf	i1modSin@shift^(0+128),w
 18984  15C6  0020               	movlb	0	; select bank0
 18985  15C7  00AA               	movwf	i1___ftneg@f1
 18986  15C8  0021               	movlb	1	; select bank1
 18987  15C9  0824               	movf	(i1modSin@shift+1)^(0+128),w
 18988  15CA  0020               	movlb	0	; select bank0
 18989  15CB  00AB               	movwf	i1___ftneg@f1+1
 18990  15CC  0021               	movlb	1	; select bank1
 18991  15CD  0825               	movf	(i1modSin@shift+2)^(0+128),w
 18992  15CE  0020               	movlb	0	; select bank0
 18993  15CF  00AC               	movwf	i1___ftneg@f1+2
 18994  15D0  31AA  22D7  3194   	fcall	i1___ftneg
 18995  15D3  0020               	movlb	0	; select bank0
 18996  15D4  082A               	movf	?i1___ftneg,w
 18997  15D5  00AD               	movwf	i1___ftadd@f1
 18998  15D6  082B               	movf	?i1___ftneg+1,w
 18999  15D7  00AE               	movwf	i1___ftadd@f1+1
 19000  15D8  082C               	movf	?i1___ftneg+2,w
 19001  15D9  00AF               	movwf	i1___ftadd@f1+2
 19002  15DA  0864               	movf	i1modSin@angle,w
 19003  15DB  00F8               	movwf	i1___ftmul@f1
 19004  15DC  0865               	movf	i1modSin@angle+1,w
 19005  15DD  00F9               	movwf	i1___ftmul@f1+1
 19006  15DE  0866               	movf	i1modSin@angle+2,w
 19007  15DF  00FA               	movwf	i1___ftmul@f1+2
 19008  15E0  0021               	movlb	1	; select bank1
 19009  15E1  0826               	movf	i1modSin@period^(0+128),w
 19010  15E2  00FB               	movwf	i1___ftmul@f2
 19011  15E3  0827               	movf	(i1modSin@period+1)^(0+128),w
 19012  15E4  00FC               	movwf	i1___ftmul@f2+1
 19013  15E5  0828               	movf	(i1modSin@period+2)^(0+128),w
 19014  15E6  00FD               	movwf	i1___ftmul@f2+2
 19015  15E7  319C  2422  3194   	fcall	i1___ftmul
 19016  15EA  0878               	movf	?i1___ftmul,w
 19017  15EB  0020               	movlb	0	; select bank0
 19018  15EC  00B0               	movwf	i1___ftadd@f2
 19019  15ED  0879               	movf	?i1___ftmul+1,w
 19020  15EE  00B1               	movwf	i1___ftadd@f2+1
 19021  15EF  087A               	movf	?i1___ftmul+2,w
 19022  15F0  00B2               	movwf	i1___ftadd@f2+2
 19023  15F1  3190  2020  3194   	fcall	i1___ftadd
 19024  15F4  0020               	movlb	0	; select bank0
 19025  15F5  082D               	movf	?i1___ftadd,w
 19026  15F6  00BD               	movwf	i1___ftdiv@f1
 19027  15F7  082E               	movf	?i1___ftadd+1,w
 19028  15F8  00BE               	movwf	i1___ftdiv@f1+1
 19029  15F9  082F               	movf	?i1___ftadd+2,w
 19030  15FA  00BF               	movwf	i1___ftdiv@f1+2
 19031  15FB  319A  2225  3194   	fcall	i1___ftdiv
 19032  15FE  0020               	movlb	0	; select bank0
 19033  15FF  083A               	movf	?i1___ftdiv,w
 19034  1600  0021               	movlb	1	; select bank1
 19035  1601  00A9               	movwf	i1modSin@tmpVal^(0+128)
 19036  1602  0020               	movlb	0	; select bank0
 19037  1603  083B               	movf	?i1___ftdiv+1,w
 19038  1604  0021               	movlb	1	; select bank1
 19039  1605  00AA               	movwf	(i1modSin@tmpVal+1)^(0+128)
 19040  1606  0020               	movlb	0	; select bank0
 19041  1607  083C               	movf	?i1___ftdiv+2,w
 19042  1608  0021               	movlb	1	; select bank1
 19043  1609  00AB               	movwf	(i1modSin@tmpVal+2)^(0+128)
 19044                           
 19045                           ;modulation.c: 64: tmpVal = sinArray[(int)(tmpVal)];
 19046  160A  0829               	movf	i1modSin@tmpVal^(0+128),w
 19047  160B  0020               	movlb	0	; select bank0
 19048  160C  00CA               	movwf	i1___fttol@f1
 19049  160D  0021               	movlb	1	; select bank1
 19050  160E  082A               	movf	(i1modSin@tmpVal+1)^(0+128),w
 19051  160F  0020               	movlb	0	; select bank0
 19052  1610  00CB               	movwf	i1___fttol@f1+1
 19053  1611  0021               	movlb	1	; select bank1
 19054  1612  082B               	movf	(i1modSin@tmpVal+2)^(0+128),w
 19055  1613  0020               	movlb	0	; select bank0
 19056  1614  00CC               	movwf	i1___fttol@f1+2
 19057  1615  31A5  25E0  3194   	fcall	i1___fttol
 19058  1618  0020               	movlb	0	; select bank0
 19059  1619  084B               	movf	?i1___fttol+1,w
 19060  161A  00D9               	movwf	i1___wmul@multiplier+1
 19061  161B  084A               	movf	?i1___fttol,w
 19062  161C  00D8               	movwf	i1___wmul@multiplier
 19063  161D  3003               	movlw	3
 19064  161E  00DA               	movwf	i1___wmul@multiplicand
 19065  161F  3000               	movlw	0
 19066  1620  00DB               	movwf	i1___wmul@multiplicand+1
 19067  1621  31AB  23C3  3194   	fcall	i1___wmul
 19068  1624  3082               	movlw	130
 19069  1625  0020               	movlb	0	; select bank0
 19070  1626  00EA               	movwf	??i1_modSin
 19071  1627  3024               	movlw	36
 19072  1628  00EB               	movwf	??i1_modSin+1
 19073  1629  0858               	movf	?i1___wmul,w
 19074  162A  076A               	addwf	??i1_modSin,w
 19075  162B  0086               	movwf	6
 19076  162C  0859               	movf	?i1___wmul+1,w
 19077  162D  3D6B               	addwfc	??i1_modSin+1,w
 19078  162E  0087               	movwf	7
 19079  162F  3F40               	moviw [0]fsr1
 19080  1630  0021               	movlb	1	; select bank1
 19081  1631  00A9               	movwf	i1modSin@tmpVal^(0+128)
 19082  1632  3F41               	moviw [1]fsr1
 19083  1633  00AA               	movwf	(i1modSin@tmpVal+1)^(0+128)
 19084  1634  3F42               	moviw [2]fsr1
 19085  1635  00AB               	movwf	(i1modSin@tmpVal+2)^(0+128)
 19086                           
 19087                           ;modulation.c: 65: return (int)(100.0 * tmpVal);
 19088  1636  0829               	movf	i1modSin@tmpVal^(0+128),w
 19089  1637  00FB               	movwf	i1___ftmul@f2
 19090  1638  082A               	movf	(i1modSin@tmpVal+1)^(0+128),w
 19091  1639  00FC               	movwf	i1___ftmul@f2+1
 19092  163A  082B               	movf	(i1modSin@tmpVal+2)^(0+128),w
 19093  163B  00FD               	movwf	i1___ftmul@f2+2
 19094  163C  3000               	movlw	0
 19095  163D  00F8               	movwf	i1___ftmul@f1
 19096  163E  30C8               	movlw	200
 19097  163F  00F9               	movwf	i1___ftmul@f1+1
 19098  1640  3042               	movlw	66
 19099  1641  00FA               	movwf	i1___ftmul@f1+2
 19100  1642  319C  2422  3194   	fcall	i1___ftmul
 19101  1645  0878               	movf	?i1___ftmul,w
 19102  1646  0020               	movlb	0	; select bank0
 19103  1647  00CA               	movwf	i1___fttol@f1
 19104  1648  0879               	movf	?i1___ftmul+1,w
 19105  1649  00CB               	movwf	i1___fttol@f1+1
 19106  164A  087A               	movf	?i1___ftmul+2,w
 19107  164B  00CC               	movwf	i1___fttol@f1+2
 19108  164C  31A5  25E0         	fcall	i1___fttol
 19109  164E  0020               	movlb	0	; select bank0
 19110  164F  084B               	movf	?i1___fttol+1,w
 19111  1650  00E5               	movwf	?i1_modSin+1
 19112  1651  084A               	movf	?i1___fttol,w
 19113  1652  00E4               	movwf	?i1_modSin
 19114  1653  0008               	return
 19115  1654                     __end_ofi1_modSin:	
 19116                           
 19117                           	psect	text68
 19118  2BC3                     __ptext68:	
 19119 ;; *************** function i1___wmul *****************
 19120 ;; Defined at:
 19121 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 19122 ;; Parameters:    Size  Location     Type
 19123 ;;  multiplier      2   56[BANK0 ] unsigned int 
 19124 ;;  multiplicand    2   58[BANK0 ] unsigned int 
 19125 ;; Auto vars:     Size  Location     Type
 19126 ;;  __wmul          2   60[BANK0 ] unsigned int 
 19127 ;; Return value:  Size  Location     Type
 19128 ;;                  2   56[BANK0 ] unsigned int 
 19129 ;; Registers used:
 19130 ;;		wreg, status,2, status,0
 19131 ;; Tracked objects:
 19132 ;;		On entry : 0/0
 19133 ;;		On exit  : 0/0
 19134 ;;		Unchanged: 0/0
 19135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19139 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19140 ;;Total ram usage:        6 bytes
 19141 ;; Hardware stack levels used:    1
 19142 ;; This function calls:
 19143 ;;		Nothing
 19144 ;; This function is called by:
 19145 ;;		_isr
 19146 ;;		i1_modSin
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           
 19151                           ;psect for function i1___wmul
 19152  2BC3                     i1___wmul:	
 19153                           
 19154                           ;incstack = 0
 19155                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 19156  2BC3  0020               	movlb	0	; select bank0
 19157  2BC4  01DC               	clrf	i1___wmul@product
 19158  2BC5  01DD               	clrf	i1___wmul@product+1
 19159  2BC6                     i1l6397:	
 19160  2BC6  1C58               	btfss	i1___wmul@multiplier,0
 19161  2BC7  2BCC               	goto	i1l1922
 19162  2BC8  085A               	movf	i1___wmul@multiplicand,w
 19163  2BC9  07DC               	addwf	i1___wmul@product,f
 19164  2BCA  085B               	movf	i1___wmul@multiplicand+1,w
 19165  2BCB  3DDD               	addwfc	i1___wmul@product+1,f
 19166  2BCC                     i1l1922:	
 19167  2BCC  3001               	movlw	1
 19168  2BCD                     u645_25:	
 19169  2BCD  35DA               	lslf	i1___wmul@multiplicand,f
 19170  2BCE  0DDB               	rlf	i1___wmul@multiplicand+1,f
 19171  2BCF  0B89               	decfsz	9,f
 19172  2BD0  2BCD               	goto	u645_25
 19173  2BD1  3001               	movlw	1
 19174  2BD2                     u646_25:	
 19175  2BD2  36D9               	lsrf	i1___wmul@multiplier+1,f
 19176  2BD3  0CD8               	rrf	i1___wmul@multiplier,f
 19177  2BD4  0B89               	decfsz	9,f
 19178  2BD5  2BD2               	goto	u646_25
 19179  2BD6  0858               	movf	i1___wmul@multiplier,w
 19180  2BD7  0459               	iorwf	i1___wmul@multiplier+1,w
 19181  2BD8  1D03               	btfss	3,2
 19182  2BD9  2BC6               	goto	i1l6397
 19183  2BDA  085D               	movf	i1___wmul@product+1,w
 19184  2BDB  00D9               	movwf	?i1___wmul+1
 19185  2BDC  085C               	movf	i1___wmul@product,w
 19186  2BDD  00D8               	movwf	?i1___wmul
 19187  2BDE  0008               	return
 19188  2BDF                     __end_ofi1___wmul:	
 19189                           
 19190                           	psect	text69
 19191  2C59                     __ptext69:	
 19192 ;; *************** function i1___awtoft *****************
 19193 ;; Defined at:
 19194 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 19195 ;; Parameters:    Size  Location     Type
 19196 ;;  c               2   62[BANK0 ] int 
 19197 ;; Auto vars:     Size  Location     Type
 19198 ;;  __awtoft        1   67[BANK0 ] unsigned char 
 19199 ;; Return value:  Size  Location     Type
 19200 ;;                  3   62[BANK0 ] float 
 19201 ;; Registers used:
 19202 ;;		wreg, status,2, status,0, pclath, cstack
 19203 ;; Tracked objects:
 19204 ;;		On entry : 0/0
 19205 ;;		On exit  : 0/0
 19206 ;;		Unchanged: 0/0
 19207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19208 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19211 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19212 ;;Total ram usage:        6 bytes
 19213 ;; Hardware stack levels used:    1
 19214 ;; Hardware stack levels required when called:    1
 19215 ;; This function calls:
 19216 ;;		i1___ftpack
 19217 ;; This function is called by:
 19218 ;;		_isr
 19219 ;; This function uses a non-reentrant model
 19220 ;;
 19221                           
 19222                           
 19223                           ;psect for function i1___awtoft
 19224  2C59                     i1___awtoft:	
 19225                           
 19226                           ;incstack = 0
 19227                           ; Regs used in i1___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19228  2C59  0020               	movlb	0	; select bank0
 19229  2C5A  01E3               	clrf	i1___awtoft@sign
 19230  2C5B  1FDF               	btfss	i1___awtoft@c+1,7
 19231  2C5C  2C64               	goto	i1l7147
 19232  2C5D  09DE               	comf	i1___awtoft@c,f
 19233  2C5E  09DF               	comf	i1___awtoft@c+1,f
 19234  2C5F  0ADE               	incf	i1___awtoft@c,f
 19235  2C60  1903               	skipnz
 19236  2C61  0ADF               	incf	i1___awtoft@c+1,f
 19237  2C62  01E3               	clrf	i1___awtoft@sign
 19238  2C63  0AE3               	incf	i1___awtoft@sign,f
 19239  2C64                     i1l7147:	
 19240  2C64  085E               	movf	i1___awtoft@c,w
 19241  2C65  00F0               	movwf	i1___ftpack@arg
 19242  2C66  085F               	movf	i1___awtoft@c+1,w
 19243  2C67  00F1               	movwf	i1___ftpack@arg+1
 19244  2C68  01F2               	clrf	i1___ftpack@arg+2
 19245  2C69  308E               	movlw	142
 19246  2C6A  00E1               	movwf	??i1___awtoft
 19247  2C6B  0861               	movf	??i1___awtoft,w
 19248  2C6C  00F3               	movwf	i1___ftpack@exp
 19249  2C6D  0863               	movf	i1___awtoft@sign,w
 19250  2C6E  00E2               	movwf	??i1___awtoft+1
 19251  2C6F  0862               	movf	??i1___awtoft+1,w
 19252  2C70  00F4               	movwf	i1___ftpack@sign
 19253  2C71  31A3  231C         	fcall	i1___ftpack
 19254  2C73  0870               	movf	?i1___ftpack,w
 19255  2C74  0020               	movlb	0	; select bank0
 19256  2C75  00DE               	movwf	?i1___awtoft
 19257  2C76  0871               	movf	?i1___ftpack+1,w
 19258  2C77  00DF               	movwf	?i1___awtoft+1
 19259  2C78  0872               	movf	?i1___ftpack+2,w
 19260  2C79  00E0               	movwf	?i1___awtoft+2
 19261  2C7A  0008               	return
 19262  2C7B                     __end_ofi1___awtoft:	
 19263                           
 19264                           	psect	text70
 19265  2F7E                     __ptext70:	
 19266 ;; *************** function _modulation *****************
 19267 ;; Defined at:
 19268 ;;		line 222 in file "user.c"
 19269 ;; Parameters:    Size  Location     Type
 19270 ;;  x               4   14[BANK0 ] long 
 19271 ;;  y               4   18[BANK0 ] long 
 19272 ;; Auto vars:     Size  Location     Type
 19273 ;;		None
 19274 ;; Return value:  Size  Location     Type
 19275 ;;                  4   14[BANK0 ] long 
 19276 ;; Registers used:
 19277 ;;		wreg, status,2, status,0, pclath, cstack
 19278 ;; Tracked objects:
 19279 ;;		On entry : 0/0
 19280 ;;		On exit  : 0/0
 19281 ;;		Unchanged: 0/0
 19282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19283 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19285 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19286 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19287 ;;Total ram usage:       12 bytes
 19288 ;; Hardware stack levels used:    1
 19289 ;; Hardware stack levels required when called:    1
 19290 ;; This function calls:
 19291 ;;		i1___aldiv
 19292 ;;		i1___lmul
 19293 ;; This function is called by:
 19294 ;;		_isr
 19295 ;; This function uses a non-reentrant model
 19296 ;;
 19297                           
 19298                           
 19299                           ;psect for function _modulation
 19300  2F7E                     _modulation:	
 19301                           
 19302                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 19303                           
 19304                           ;incstack = 0
 19305                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 19306  2F7E  3000               	movlw	0
 19307  2F7F  0020               	movlb	0	; select bank0
 19308  2F80  00A3               	movwf	i1___aldiv@divisor+3
 19309  2F81  3000               	movlw	0
 19310  2F82  00A2               	movwf	i1___aldiv@divisor+2
 19311  2F83  3003               	movlw	3
 19312  2F84  00A1               	movwf	i1___aldiv@divisor+1
 19313  2F85  30E8               	movlw	232
 19314  2F86  00A0               	movwf	i1___aldiv@divisor
 19315  2F87  300C               	movlw	12
 19316  2F88  00B6               	movwf	??_modulation
 19317  2F89  30F2               	movlw	242
 19318  2F8A  00B7               	movwf	??_modulation+1
 19319  2F8B  3001               	movlw	1
 19320  2F8C  00B8               	movwf	??_modulation+2
 19321  2F8D  3000               	movlw	0
 19322  2F8E  00B9               	movwf	??_modulation+3
 19323  2F8F  0835               	movf	modulation@y+3,w
 19324  2F90  00F3               	movwf	i1___lmul@multiplier+3
 19325  2F91  0834               	movf	modulation@y+2,w
 19326  2F92  00F2               	movwf	i1___lmul@multiplier+2
 19327  2F93  0833               	movf	modulation@y+1,w
 19328  2F94  00F1               	movwf	i1___lmul@multiplier+1
 19329  2F95  0832               	movf	modulation@y,w
 19330  2F96  00F0               	movwf	i1___lmul@multiplier
 19331  2F97  0831               	movf	modulation@x+3,w
 19332  2F98  00F7               	movwf	i1___lmul@multiplicand+3
 19333  2F99  0830               	movf	modulation@x+2,w
 19334  2F9A  00F6               	movwf	i1___lmul@multiplicand+2
 19335  2F9B  082F               	movf	modulation@x+1,w
 19336  2F9C  00F5               	movwf	i1___lmul@multiplicand+1
 19337  2F9D  082E               	movf	modulation@x,w
 19338  2F9E  00F4               	movwf	i1___lmul@multiplicand
 19339  2F9F  31AD  251D  31AF   	fcall	i1___lmul
 19340  2FA2  0870               	movf	?i1___lmul,w
 19341  2FA3  0020               	movlb	0	; select bank0
 19342  2FA4  07B6               	addwf	??_modulation,f
 19343  2FA5  0871               	movf	?i1___lmul+1,w
 19344  2FA6  3DB7               	addwfc	??_modulation+1,f
 19345  2FA7  0872               	movf	?i1___lmul+2,w
 19346  2FA8  3DB8               	addwfc	??_modulation+2,f
 19347  2FA9  0873               	movf	?i1___lmul+3,w
 19348  2FAA  3DB9               	addwfc	??_modulation+3,f
 19349  2FAB  0839               	movf	??_modulation+3,w
 19350  2FAC  00A7               	movwf	i1___aldiv@dividend+3
 19351  2FAD  0838               	movf	??_modulation+2,w
 19352  2FAE  00A6               	movwf	i1___aldiv@dividend+2
 19353  2FAF  0837               	movf	??_modulation+1,w
 19354  2FB0  00A5               	movwf	i1___aldiv@dividend+1
 19355  2FB1  0836               	movf	??_modulation,w
 19356  2FB2  00A4               	movwf	i1___aldiv@dividend
 19357  2FB3  31A4  2457         	fcall	i1___aldiv
 19358  2FB5  0020               	movlb	0	; select bank0
 19359  2FB6  0823               	movf	?i1___aldiv+3,w
 19360  2FB7  00B1               	movwf	?_modulation+3
 19361  2FB8  0822               	movf	?i1___aldiv+2,w
 19362  2FB9  00B0               	movwf	?_modulation+2
 19363  2FBA  0821               	movf	?i1___aldiv+1,w
 19364  2FBB  00AF               	movwf	?_modulation+1
 19365  2FBC  0820               	movf	?i1___aldiv,w
 19366  2FBD  00AE               	movwf	?_modulation
 19367  2FBE  0008               	return
 19368  2FBF                     __end_of_modulation:	
 19369                           
 19370                           	psect	text71
 19371  2D1D                     __ptext71:	
 19372 ;; *************** function i1___lmul *****************
 19373 ;; Defined at:
 19374 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 19375 ;; Parameters:    Size  Location     Type
 19376 ;;  multiplier      4    0[COMMON] unsigned long 
 19377 ;;  multiplicand    4    4[COMMON] unsigned long 
 19378 ;; Auto vars:     Size  Location     Type
 19379 ;;  __lmul          4    8[COMMON] unsigned long 
 19380 ;; Return value:  Size  Location     Type
 19381 ;;                  4    0[COMMON] unsigned long 
 19382 ;; Registers used:
 19383 ;;		wreg, status,2, status,0
 19384 ;; Tracked objects:
 19385 ;;		On entry : 0/0
 19386 ;;		On exit  : 0/0
 19387 ;;		Unchanged: 0/0
 19388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19389 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19390 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19392 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19393 ;;Total ram usage:       12 bytes
 19394 ;; Hardware stack levels used:    1
 19395 ;; This function calls:
 19396 ;;		Nothing
 19397 ;; This function is called by:
 19398 ;;		_modulation
 19399 ;; This function uses a non-reentrant model
 19400 ;;
 19401                           
 19402                           
 19403                           ;psect for function i1___lmul
 19404  2D1D                     i1___lmul:	
 19405                           
 19406                           ;incstack = 0
 19407                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 19408  2D1D  3000               	movlw	0
 19409  2D1E  00FB               	movwf	i1___lmul@product+3
 19410  2D1F  3000               	movlw	0
 19411  2D20  00FA               	movwf	i1___lmul@product+2
 19412  2D21  3000               	movlw	0
 19413  2D22  00F9               	movwf	i1___lmul@product+1
 19414  2D23  3000               	movlw	0
 19415  2D24  00F8               	movwf	i1___lmul@product
 19416  2D25                     i1l6411:	
 19417  2D25  1C70               	btfss	i1___lmul@multiplier,0
 19418  2D26  2D2F               	goto	i1l6415
 19419  2D27  0874               	movf	i1___lmul@multiplicand,w
 19420  2D28  07F8               	addwf	i1___lmul@product,f
 19421  2D29  0875               	movf	i1___lmul@multiplicand+1,w
 19422  2D2A  3DF9               	addwfc	i1___lmul@product+1,f
 19423  2D2B  0876               	movf	i1___lmul@multiplicand+2,w
 19424  2D2C  3DFA               	addwfc	i1___lmul@product+2,f
 19425  2D2D  0877               	movf	i1___lmul@multiplicand+3,w
 19426  2D2E  3DFB               	addwfc	i1___lmul@product+3,f
 19427  2D2F                     i1l6415:	
 19428  2D2F  3001               	movlw	1
 19429  2D30                     u649_25:	
 19430  2D30  35F4               	lslf	i1___lmul@multiplicand,f
 19431  2D31  0DF5               	rlf	i1___lmul@multiplicand+1,f
 19432  2D32  0DF6               	rlf	i1___lmul@multiplicand+2,f
 19433  2D33  0DF7               	rlf	i1___lmul@multiplicand+3,f
 19434  2D34  0B89               	decfsz	9,f
 19435  2D35  2D30               	goto	u649_25
 19436  2D36  3001               	movlw	1
 19437  2D37                     u650_25:	
 19438  2D37  36F3               	lsrf	i1___lmul@multiplier+3,f
 19439  2D38  0CF2               	rrf	i1___lmul@multiplier+2,f
 19440  2D39  0CF1               	rrf	i1___lmul@multiplier+1,f
 19441  2D3A  0CF0               	rrf	i1___lmul@multiplier,f
 19442  2D3B  0B89               	decfsz	9,f
 19443  2D3C  2D37               	goto	u650_25
 19444  2D3D  0873               	movf	i1___lmul@multiplier+3,w
 19445  2D3E  0472               	iorwf	i1___lmul@multiplier+2,w
 19446  2D3F  0471               	iorwf	i1___lmul@multiplier+1,w
 19447  2D40  0470               	iorwf	i1___lmul@multiplier,w
 19448  2D41  1D03               	skipz
 19449  2D42  2D25               	goto	i1l6411
 19450  2D43  087B               	movf	i1___lmul@product+3,w
 19451  2D44  00F3               	movwf	?i1___lmul+3
 19452  2D45  087A               	movf	i1___lmul@product+2,w
 19453  2D46  00F2               	movwf	?i1___lmul+2
 19454  2D47  0879               	movf	i1___lmul@product+1,w
 19455  2D48  00F1               	movwf	?i1___lmul+1
 19456  2D49  0878               	movf	i1___lmul@product,w
 19457  2D4A  00F0               	movwf	?i1___lmul
 19458  2D4B  0008               	return
 19459  2D4C                     __end_ofi1___lmul:	
 19460                           
 19461                           	psect	text72
 19462  2457                     __ptext72:	
 19463 ;; *************** function i1___aldiv *****************
 19464 ;; Defined at:
 19465 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 19466 ;; Parameters:    Size  Location     Type
 19467 ;;  divisor         4    0[BANK0 ] long 
 19468 ;;  dividend        4    4[BANK0 ] long 
 19469 ;; Auto vars:     Size  Location     Type
 19470 ;;  __aldiv         4   10[BANK0 ] long 
 19471 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 19472 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 19473 ;; Return value:  Size  Location     Type
 19474 ;;                  4    0[BANK0 ] long 
 19475 ;; Registers used:
 19476 ;;		wreg, status,2, status,0
 19477 ;; Tracked objects:
 19478 ;;		On entry : 0/0
 19479 ;;		On exit  : 0/0
 19480 ;;		Unchanged: 0/0
 19481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19482 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19483 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19485 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19486 ;;Total ram usage:       15 bytes
 19487 ;; Hardware stack levels used:    1
 19488 ;; This function calls:
 19489 ;;		Nothing
 19490 ;; This function is called by:
 19491 ;;		_modulation
 19492 ;; This function uses a non-reentrant model
 19493 ;;
 19494                           
 19495                           
 19496                           ;psect for function i1___aldiv
 19497  2457                     i1___aldiv:	
 19498                           
 19499                           ;incstack = 0
 19500                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 19501  2457  0020               	movlb	0	; select bank0
 19502  2458  01A9               	clrf	i1___aldiv@sign
 19503  2459  1FA3               	btfss	i1___aldiv@divisor+3,7
 19504  245A  2C68               	goto	i1l1977
 19505  245B  09A0               	comf	i1___aldiv@divisor,f
 19506  245C  09A1               	comf	i1___aldiv@divisor+1,f
 19507  245D  09A2               	comf	i1___aldiv@divisor+2,f
 19508  245E  09A3               	comf	i1___aldiv@divisor+3,f
 19509  245F  0AA0               	incf	i1___aldiv@divisor,f
 19510  2460  1903               	skipnz
 19511  2461  0AA1               	incf	i1___aldiv@divisor+1,f
 19512  2462  1903               	skipnz
 19513  2463  0AA2               	incf	i1___aldiv@divisor+2,f
 19514  2464  1903               	skipnz
 19515  2465  0AA3               	incf	i1___aldiv@divisor+3,f
 19516  2466  01A9               	clrf	i1___aldiv@sign
 19517  2467  0AA9               	incf	i1___aldiv@sign,f
 19518  2468                     i1l1977:	
 19519  2468  1FA7               	btfss	i1___aldiv@dividend+3,7
 19520  2469  2C79               	goto	i1l6433
 19521  246A  09A4               	comf	i1___aldiv@dividend,f
 19522  246B  09A5               	comf	i1___aldiv@dividend+1,f
 19523  246C  09A6               	comf	i1___aldiv@dividend+2,f
 19524  246D  09A7               	comf	i1___aldiv@dividend+3,f
 19525  246E  0AA4               	incf	i1___aldiv@dividend,f
 19526  246F  1903               	skipnz
 19527  2470  0AA5               	incf	i1___aldiv@dividend+1,f
 19528  2471  1903               	skipnz
 19529  2472  0AA6               	incf	i1___aldiv@dividend+2,f
 19530  2473  1903               	skipnz
 19531  2474  0AA7               	incf	i1___aldiv@dividend+3,f
 19532  2475  3001               	movlw	1
 19533  2476  00FC               	movwf	??i1___aldiv
 19534  2477  087C               	movf	??i1___aldiv,w
 19535  2478  06A9               	xorwf	i1___aldiv@sign,f
 19536  2479                     i1l6433:	
 19537  2479  3000               	movlw	0
 19538  247A  00AD               	movwf	i1___aldiv@quotient+3
 19539  247B  3000               	movlw	0
 19540  247C  00AC               	movwf	i1___aldiv@quotient+2
 19541  247D  3000               	movlw	0
 19542  247E  00AB               	movwf	i1___aldiv@quotient+1
 19543  247F  3000               	movlw	0
 19544  2480  00AA               	movwf	i1___aldiv@quotient
 19545  2481  0823               	movf	i1___aldiv@divisor+3,w
 19546  2482  0422               	iorwf	i1___aldiv@divisor+2,w
 19547  2483  0421               	iorwf	i1___aldiv@divisor+1,w
 19548  2484  0420               	iorwf	i1___aldiv@divisor,w
 19549  2485  1903               	skipnz
 19550  2486  2CC2               	goto	i1l6455
 19551  2487  01A8               	clrf	i1___aldiv@counter
 19552  2488  0AA8               	incf	i1___aldiv@counter,f
 19553  2489                     i1l6441:	
 19554  2489  1BA3               	btfsc	i1___aldiv@divisor+3,7
 19555  248A  2C97               	goto	i1l6443
 19556  248B  3001               	movlw	1
 19557  248C                     u655_25:	
 19558  248C  35A0               	lslf	i1___aldiv@divisor,f
 19559  248D  0DA1               	rlf	i1___aldiv@divisor+1,f
 19560  248E  0DA2               	rlf	i1___aldiv@divisor+2,f
 19561  248F  0DA3               	rlf	i1___aldiv@divisor+3,f
 19562  2490  0B89               	decfsz	9,f
 19563  2491  2C8C               	goto	u655_25
 19564  2492  3001               	movlw	1
 19565  2493  00FC               	movwf	??i1___aldiv
 19566  2494  087C               	movf	??i1___aldiv,w
 19567  2495  07A8               	addwf	i1___aldiv@counter,f
 19568  2496  2C89               	goto	i1l6441
 19569  2497                     i1l6443:	
 19570  2497  3001               	movlw	1
 19571  2498                     u657_25:	
 19572  2498  35AA               	lslf	i1___aldiv@quotient,f
 19573  2499  0DAB               	rlf	i1___aldiv@quotient+1,f
 19574  249A  0DAC               	rlf	i1___aldiv@quotient+2,f
 19575  249B  0DAD               	rlf	i1___aldiv@quotient+3,f
 19576  249C  0B89               	decfsz	9,f
 19577  249D  2C98               	goto	u657_25
 19578  249E  0823               	movf	i1___aldiv@divisor+3,w
 19579  249F  0227               	subwf	i1___aldiv@dividend+3,w
 19580  24A0  1D03               	skipz
 19581  24A1  2CAC               	goto	u658_25
 19582  24A2  0822               	movf	i1___aldiv@divisor+2,w
 19583  24A3  0226               	subwf	i1___aldiv@dividend+2,w
 19584  24A4  1D03               	skipz
 19585  24A5  2CAC               	goto	u658_25
 19586  24A6  0821               	movf	i1___aldiv@divisor+1,w
 19587  24A7  0225               	subwf	i1___aldiv@dividend+1,w
 19588  24A8  1D03               	skipz
 19589  24A9  2CAC               	goto	u658_25
 19590  24AA  0820               	movf	i1___aldiv@divisor,w
 19591  24AB  0224               	subwf	i1___aldiv@dividend,w
 19592  24AC                     u658_25:	
 19593  24AC  1C03               	skipc
 19594  24AD  2CB7               	goto	i1l6451
 19595  24AE  0820               	movf	i1___aldiv@divisor,w
 19596  24AF  02A4               	subwf	i1___aldiv@dividend,f
 19597  24B0  0821               	movf	i1___aldiv@divisor+1,w
 19598  24B1  3BA5               	subwfb	i1___aldiv@dividend+1,f
 19599  24B2  0822               	movf	i1___aldiv@divisor+2,w
 19600  24B3  3BA6               	subwfb	i1___aldiv@dividend+2,f
 19601  24B4  0823               	movf	i1___aldiv@divisor+3,w
 19602  24B5  3BA7               	subwfb	i1___aldiv@dividend+3,f
 19603  24B6  142A               	bsf	i1___aldiv@quotient,0
 19604  24B7                     i1l6451:	
 19605  24B7  3001               	movlw	1
 19606  24B8                     u659_25:	
 19607  24B8  36A3               	lsrf	i1___aldiv@divisor+3,f
 19608  24B9  0CA2               	rrf	i1___aldiv@divisor+2,f
 19609  24BA  0CA1               	rrf	i1___aldiv@divisor+1,f
 19610  24BB  0CA0               	rrf	i1___aldiv@divisor,f
 19611  24BC  0B89               	decfsz	9,f
 19612  24BD  2CB8               	goto	u659_25
 19613  24BE  3001               	movlw	1
 19614  24BF  02A8               	subwf	i1___aldiv@counter,f
 19615  24C0  1D03               	btfss	3,2
 19616  24C1  2C97               	goto	i1l6443
 19617  24C2                     i1l6455:	
 19618  24C2  0829               	movf	i1___aldiv@sign,w
 19619  24C3  1903               	btfsc	3,2
 19620  24C4  2CD0               	goto	i1l6459
 19621  24C5  09AA               	comf	i1___aldiv@quotient,f
 19622  24C6  09AB               	comf	i1___aldiv@quotient+1,f
 19623  24C7  09AC               	comf	i1___aldiv@quotient+2,f
 19624  24C8  09AD               	comf	i1___aldiv@quotient+3,f
 19625  24C9  0AAA               	incf	i1___aldiv@quotient,f
 19626  24CA  1903               	skipnz
 19627  24CB  0AAB               	incf	i1___aldiv@quotient+1,f
 19628  24CC  1903               	skipnz
 19629  24CD  0AAC               	incf	i1___aldiv@quotient+2,f
 19630  24CE  1903               	skipnz
 19631  24CF  0AAD               	incf	i1___aldiv@quotient+3,f
 19632  24D0                     i1l6459:	
 19633  24D0  082D               	movf	i1___aldiv@quotient+3,w
 19634  24D1  00A3               	movwf	?i1___aldiv+3
 19635  24D2  082C               	movf	i1___aldiv@quotient+2,w
 19636  24D3  00A2               	movwf	?i1___aldiv+2
 19637  24D4  082B               	movf	i1___aldiv@quotient+1,w
 19638  24D5  00A1               	movwf	?i1___aldiv+1
 19639  24D6  082A               	movf	i1___aldiv@quotient,w
 19640  24D7  00A0               	movwf	?i1___aldiv
 19641  24D8  0008               	return
 19642  24D9                     __end_ofi1___aldiv:	
 19643                           
 19644                           	psect	text73
 19645  087D                     __ptext73:	
 19646 ;; *************** function _modTri *****************
 19647 ;; Defined at:
 19648 ;;		line 68 in file "modulation.c"
 19649 ;; Parameters:    Size  Location     Type
 19650 ;;  angle           3   68[BANK0 ] long 
 19651 ;;  inflection      3   71[BANK0 ] long 
 19652 ;; Auto vars:     Size  Location     Type
 19653 ;;  tmpVal          3    9[BANK1 ] long 
 19654 ;;  period          3    6[BANK1 ] long 
 19655 ;;  shift           3    3[BANK1 ] long 
 19656 ;; Return value:  Size  Location     Type
 19657 ;;                  2   68[BANK0 ] int 
 19658 ;; Registers used:
 19659 ;;		wreg, status,2, status,0, pclath, cstack
 19660 ;; Tracked objects:
 19661 ;;		On entry : 0/0
 19662 ;;		On exit  : 0/0
 19663 ;;		Unchanged: 0/0
 19664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19665 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19666 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19668 ;;      Totals:         0       6      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19669 ;;Total ram usage:       18 bytes
 19670 ;; Hardware stack levels used:    1
 19671 ;; Hardware stack levels required when called:    2
 19672 ;; This function calls:
 19673 ;;		i1___ftadd
 19674 ;;		i1___ftdiv
 19675 ;;		i1___ftge
 19676 ;;		i1___ftmul
 19677 ;;		i1___ftneg
 19678 ;;		i1___fttol
 19679 ;; This function is called by:
 19680 ;;		_isr
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           
 19685                           ;psect for function _modTri
 19686  087D                     _modTri:	
 19687                           
 19688                           ;modulation.c: 69: double period = 1.0;
 19689                           
 19690                           ;incstack = 0
 19691                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
 19692  087D  3000               	movlw	0
 19693  087E  0021               	movlb	1	; select bank1
 19694  087F  00A6               	movwf	modTri@period^(0+128)
 19695  0880  3080               	movlw	128
 19696  0881  00A7               	movwf	(modTri@period+1)^(0+128)
 19697  0882  303F               	movlw	63
 19698  0883  00A8               	movwf	(modTri@period+2)^(0+128)
 19699                           
 19700                           ;modulation.c: 70: double shift = 0;
 19701  0884  3000               	movlw	0
 19702  0885  00A3               	movwf	modTri@shift^(0+128)
 19703  0886  3000               	movlw	0
 19704  0887  00A4               	movwf	(modTri@shift+1)^(0+128)
 19705  0888  3000               	movlw	0
 19706  0889  00A5               	movwf	(modTri@shift+2)^(0+128)
 19707                           
 19708                           ;modulation.c: 72: if(angle<=inflection) {
 19709  088A  0020               	movlb	0	; select bank0
 19710  088B  0867               	movf	modTri@inflection,w
 19711  088C  00F0               	movwf	i1___ftge@ff1
 19712  088D  0868               	movf	modTri@inflection+1,w
 19713  088E  00F1               	movwf	i1___ftge@ff1+1
 19714  088F  0869               	movf	modTri@inflection+2,w
 19715  0890  00F2               	movwf	i1___ftge@ff1+2
 19716  0891  0864               	movf	modTri@angle,w
 19717  0892  00F3               	movwf	i1___ftge@ff2
 19718  0893  0865               	movf	modTri@angle+1,w
 19719  0894  00F4               	movwf	i1___ftge@ff2+1
 19720  0895  0866               	movf	modTri@angle+2,w
 19721  0896  00F5               	movwf	i1___ftge@ff2+2
 19722  0897  31AE  264A  3188   	fcall	i1___ftge
 19723  089A  1C03               	btfss	3,0
 19724  089B  28A3               	goto	i1l6483
 19725                           
 19726                           ;modulation.c: 73: period = 180.0/inflection;
 19727  089C  0020               	movlb	0	; select bank0
 19728  089D  0867               	movf	modTri@inflection,w
 19729  089E  00BA               	movwf	i1___ftdiv@f2
 19730  089F  0868               	movf	modTri@inflection+1,w
 19731  08A0  00BB               	movwf	i1___ftdiv@f2+1
 19732  08A1  0869               	movf	modTri@inflection+2,w
 19733  08A2  2948               	goto	L24
 19734  08A3                     i1l6483:	
 19735                           ;modulation.c: 74: } else {
 19736                           
 19737                           
 19738                           ;modulation.c: 75: shift = -(360-inflection*2)*(180/(360-inflection));
 19739  08A3  0020               	movlb	0	; select bank0
 19740  08A4  0867               	movf	modTri@inflection,w
 19741  08A5  00FB               	movwf	i1___ftmul@f2
 19742  08A6  0868               	movf	modTri@inflection+1,w
 19743  08A7  00FC               	movwf	i1___ftmul@f2+1
 19744  08A8  0869               	movf	modTri@inflection+2,w
 19745  08A9  00FD               	movwf	i1___ftmul@f2+2
 19746  08AA  3000               	movlw	0
 19747  08AB  00F8               	movwf	i1___ftmul@f1
 19748  08AC  3000               	movlw	0
 19749  08AD  00F9               	movwf	i1___ftmul@f1+1
 19750  08AE  3040               	movlw	64
 19751  08AF  00FA               	movwf	i1___ftmul@f1+2
 19752  08B0  319C  2422  3188   	fcall	i1___ftmul
 19753  08B3  0878               	movf	?i1___ftmul,w
 19754  08B4  0020               	movlb	0	; select bank0
 19755  08B5  00AA               	movwf	i1___ftneg@f1
 19756  08B6  0879               	movf	?i1___ftmul+1,w
 19757  08B7  00AB               	movwf	i1___ftneg@f1+1
 19758  08B8  087A               	movf	?i1___ftmul+2,w
 19759  08B9  00AC               	movwf	i1___ftneg@f1+2
 19760  08BA  31AA  22D7  3188   	fcall	i1___ftneg
 19761  08BD  0020               	movlb	0	; select bank0
 19762  08BE  082A               	movf	?i1___ftneg,w
 19763  08BF  00B0               	movwf	i1___ftadd@f2
 19764  08C0  082B               	movf	?i1___ftneg+1,w
 19765  08C1  00B1               	movwf	i1___ftadd@f2+1
 19766  08C2  082C               	movf	?i1___ftneg+2,w
 19767  08C3  00B2               	movwf	i1___ftadd@f2+2
 19768  08C4  3000               	movlw	0
 19769  08C5  00AD               	movwf	i1___ftadd@f1
 19770  08C6  30B4               	movlw	180
 19771  08C7  00AE               	movwf	i1___ftadd@f1+1
 19772  08C8  3043               	movlw	67
 19773  08C9  00AF               	movwf	i1___ftadd@f1+2
 19774  08CA  3190  2020  3188   	fcall	i1___ftadd
 19775  08CD  0020               	movlb	0	; select bank0
 19776  08CE  082D               	movf	?i1___ftadd,w
 19777  08CF  0021               	movlb	1	; select bank1
 19778  08D0  00A0               	movwf	_modTri$2912^(0+128)
 19779  08D1  0020               	movlb	0	; select bank0
 19780  08D2  082E               	movf	?i1___ftadd+1,w
 19781  08D3  0021               	movlb	1	; select bank1
 19782  08D4  00A1               	movwf	(_modTri$2912+1)^(0+128)
 19783  08D5  0020               	movlb	0	; select bank0
 19784  08D6  082F               	movf	?i1___ftadd+2,w
 19785  08D7  0021               	movlb	1	; select bank1
 19786  08D8  00A2               	movwf	(_modTri$2912+2)^(0+128)
 19787                           
 19788                           ;modulation.c: 75: shift = -(360-inflection*2)*(180/(360-inflection));
 19789  08D9  0820               	movf	_modTri$2912^(0+128),w
 19790  08DA  0020               	movlb	0	; select bank0
 19791  08DB  00AA               	movwf	i1___ftneg@f1
 19792  08DC  0021               	movlb	1	; select bank1
 19793  08DD  0821               	movf	(_modTri$2912+1)^(0+128),w
 19794  08DE  0020               	movlb	0	; select bank0
 19795  08DF  00AB               	movwf	i1___ftneg@f1+1
 19796  08E0  0021               	movlb	1	; select bank1
 19797  08E1  0822               	movf	(_modTri$2912+2)^(0+128),w
 19798  08E2  0020               	movlb	0	; select bank0
 19799  08E3  00AC               	movwf	i1___ftneg@f1+2
 19800  08E4  31AA  22D7  3188   	fcall	i1___ftneg
 19801  08E7  0020               	movlb	0	; select bank0
 19802  08E8  082A               	movf	?i1___ftneg,w
 19803  08E9  00F8               	movwf	i1___ftmul@f1
 19804  08EA  082B               	movf	?i1___ftneg+1,w
 19805  08EB  00F9               	movwf	i1___ftmul@f1+1
 19806  08EC  082C               	movf	?i1___ftneg+2,w
 19807  08ED  00FA               	movwf	i1___ftmul@f1+2
 19808  08EE  3000               	movlw	0
 19809  08EF  00AD               	movwf	i1___ftadd@f1
 19810  08F0  30B4               	movlw	180
 19811  08F1  00AE               	movwf	i1___ftadd@f1+1
 19812  08F2  3043               	movlw	67
 19813  08F3  00AF               	movwf	i1___ftadd@f1+2
 19814  08F4  0867               	movf	modTri@inflection,w
 19815  08F5  00AA               	movwf	i1___ftneg@f1
 19816  08F6  0868               	movf	modTri@inflection+1,w
 19817  08F7  00AB               	movwf	i1___ftneg@f1+1
 19818  08F8  0869               	movf	modTri@inflection+2,w
 19819  08F9  00AC               	movwf	i1___ftneg@f1+2
 19820  08FA  31AA  22D7  3188   	fcall	i1___ftneg
 19821  08FD  0020               	movlb	0	; select bank0
 19822  08FE  082A               	movf	?i1___ftneg,w
 19823  08FF  00B0               	movwf	i1___ftadd@f2
 19824  0900  082B               	movf	?i1___ftneg+1,w
 19825  0901  00B1               	movwf	i1___ftadd@f2+1
 19826  0902  082C               	movf	?i1___ftneg+2,w
 19827  0903  00B2               	movwf	i1___ftadd@f2+2
 19828  0904  3190  2020  3188   	fcall	i1___ftadd
 19829  0907  0020               	movlb	0	; select bank0
 19830  0908  082D               	movf	?i1___ftadd,w
 19831  0909  00BA               	movwf	i1___ftdiv@f2
 19832  090A  082E               	movf	?i1___ftadd+1,w
 19833  090B  00BB               	movwf	i1___ftdiv@f2+1
 19834  090C  082F               	movf	?i1___ftadd+2,w
 19835  090D  00BC               	movwf	i1___ftdiv@f2+2
 19836  090E  3000               	movlw	0
 19837  090F  00BD               	movwf	i1___ftdiv@f1
 19838  0910  3034               	movlw	52
 19839  0911  00BE               	movwf	i1___ftdiv@f1+1
 19840  0912  3043               	movlw	67
 19841  0913  00BF               	movwf	i1___ftdiv@f1+2
 19842  0914  319A  2225  3188   	fcall	i1___ftdiv
 19843  0917  0020               	movlb	0	; select bank0
 19844  0918  083A               	movf	?i1___ftdiv,w
 19845  0919  00FB               	movwf	i1___ftmul@f2
 19846  091A  083B               	movf	?i1___ftdiv+1,w
 19847  091B  00FC               	movwf	i1___ftmul@f2+1
 19848  091C  083C               	movf	?i1___ftdiv+2,w
 19849  091D  00FD               	movwf	i1___ftmul@f2+2
 19850  091E  319C  2422  3188   	fcall	i1___ftmul
 19851  0921  0878               	movf	?i1___ftmul,w
 19852  0922  0021               	movlb	1	; select bank1
 19853  0923  00A3               	movwf	modTri@shift^(0+128)
 19854  0924  0879               	movf	?i1___ftmul+1,w
 19855  0925  00A4               	movwf	(modTri@shift+1)^(0+128)
 19856  0926  087A               	movf	?i1___ftmul+2,w
 19857  0927  00A5               	movwf	(modTri@shift+2)^(0+128)
 19858                           
 19859                           ;modulation.c: 76: period = 180/(360-inflection);
 19860  0928  3000               	movlw	0
 19861  0929  0020               	movlb	0	; select bank0
 19862  092A  00AD               	movwf	i1___ftadd@f1
 19863  092B  30B4               	movlw	180
 19864  092C  00AE               	movwf	i1___ftadd@f1+1
 19865  092D  3043               	movlw	67
 19866  092E  00AF               	movwf	i1___ftadd@f1+2
 19867  092F  0867               	movf	modTri@inflection,w
 19868  0930  00AA               	movwf	i1___ftneg@f1
 19869  0931  0868               	movf	modTri@inflection+1,w
 19870  0932  00AB               	movwf	i1___ftneg@f1+1
 19871  0933  0869               	movf	modTri@inflection+2,w
 19872  0934  00AC               	movwf	i1___ftneg@f1+2
 19873  0935  31AA  22D7  3188   	fcall	i1___ftneg
 19874  0938  0020               	movlb	0	; select bank0
 19875  0939  082A               	movf	?i1___ftneg,w
 19876  093A  00B0               	movwf	i1___ftadd@f2
 19877  093B  082B               	movf	?i1___ftneg+1,w
 19878  093C  00B1               	movwf	i1___ftadd@f2+1
 19879  093D  082C               	movf	?i1___ftneg+2,w
 19880  093E  00B2               	movwf	i1___ftadd@f2+2
 19881  093F  3190  2020  3188   	fcall	i1___ftadd
 19882  0942  0020               	movlb	0	; select bank0
 19883  0943  082D               	movf	?i1___ftadd,w
 19884  0944  00BA               	movwf	i1___ftdiv@f2
 19885  0945  082E               	movf	?i1___ftadd+1,w
 19886  0946  00BB               	movwf	i1___ftdiv@f2+1
 19887  0947  082F               	movf	?i1___ftadd+2,w
 19888  0948                     L24:	
 19889  0948  00BC               	movwf	i1___ftdiv@f2+2
 19890  0949  3000               	movlw	0
 19891  094A  00BD               	movwf	i1___ftdiv@f1
 19892  094B  3034               	movlw	52
 19893  094C  00BE               	movwf	i1___ftdiv@f1+1
 19894  094D  3043               	movlw	67
 19895  094E  00BF               	movwf	i1___ftdiv@f1+2
 19896  094F  319A  2225  3188   	fcall	i1___ftdiv
 19897  0952  0020               	movlb	0	; select bank0
 19898  0953  083A               	movf	?i1___ftdiv,w
 19899  0954  0021               	movlb	1	; select bank1
 19900  0955  00A6               	movwf	modTri@period^(0+128)
 19901  0956  0020               	movlb	0	; select bank0
 19902  0957  083B               	movf	?i1___ftdiv+1,w
 19903  0958  0021               	movlb	1	; select bank1
 19904  0959  00A7               	movwf	(modTri@period+1)^(0+128)
 19905  095A  0020               	movlb	0	; select bank0
 19906  095B  083C               	movf	?i1___ftdiv+2,w
 19907  095C  0021               	movlb	1	; select bank1
 19908  095D  00A8               	movwf	(modTri@period+2)^(0+128)
 19909                           
 19910                           ;modulation.c: 78: }
 19911                           ;modulation.c: 79: double tmpVal = (period*angle-shift) ;
 19912  095E  0823               	movf	modTri@shift^(0+128),w
 19913  095F  0020               	movlb	0	; select bank0
 19914  0960  00AA               	movwf	i1___ftneg@f1
 19915  0961  0021               	movlb	1	; select bank1
 19916  0962  0824               	movf	(modTri@shift+1)^(0+128),w
 19917  0963  0020               	movlb	0	; select bank0
 19918  0964  00AB               	movwf	i1___ftneg@f1+1
 19919  0965  0021               	movlb	1	; select bank1
 19920  0966  0825               	movf	(modTri@shift+2)^(0+128),w
 19921  0967  0020               	movlb	0	; select bank0
 19922  0968  00AC               	movwf	i1___ftneg@f1+2
 19923  0969  31AA  22D7  3188   	fcall	i1___ftneg
 19924  096C  0020               	movlb	0	; select bank0
 19925  096D  082A               	movf	?i1___ftneg,w
 19926  096E  00AD               	movwf	i1___ftadd@f1
 19927  096F  082B               	movf	?i1___ftneg+1,w
 19928  0970  00AE               	movwf	i1___ftadd@f1+1
 19929  0971  082C               	movf	?i1___ftneg+2,w
 19930  0972  00AF               	movwf	i1___ftadd@f1+2
 19931  0973  0864               	movf	modTri@angle,w
 19932  0974  00F8               	movwf	i1___ftmul@f1
 19933  0975  0865               	movf	modTri@angle+1,w
 19934  0976  00F9               	movwf	i1___ftmul@f1+1
 19935  0977  0866               	movf	modTri@angle+2,w
 19936  0978  00FA               	movwf	i1___ftmul@f1+2
 19937  0979  0021               	movlb	1	; select bank1
 19938  097A  0826               	movf	modTri@period^(0+128),w
 19939  097B  00FB               	movwf	i1___ftmul@f2
 19940  097C  0827               	movf	(modTri@period+1)^(0+128),w
 19941  097D  00FC               	movwf	i1___ftmul@f2+1
 19942  097E  0828               	movf	(modTri@period+2)^(0+128),w
 19943  097F  00FD               	movwf	i1___ftmul@f2+2
 19944  0980  319C  2422  3188   	fcall	i1___ftmul
 19945  0983  0878               	movf	?i1___ftmul,w
 19946  0984  0020               	movlb	0	; select bank0
 19947  0985  00B0               	movwf	i1___ftadd@f2
 19948  0986  0879               	movf	?i1___ftmul+1,w
 19949  0987  00B1               	movwf	i1___ftadd@f2+1
 19950  0988  087A               	movf	?i1___ftmul+2,w
 19951  0989  00B2               	movwf	i1___ftadd@f2+2
 19952  098A  3190  2020  3188   	fcall	i1___ftadd
 19953  098D  0020               	movlb	0	; select bank0
 19954  098E  082D               	movf	?i1___ftadd,w
 19955  098F  0021               	movlb	1	; select bank1
 19956  0990  00A9               	movwf	modTri@tmpVal^(0+128)
 19957  0991  0020               	movlb	0	; select bank0
 19958  0992  082E               	movf	?i1___ftadd+1,w
 19959  0993  0021               	movlb	1	; select bank1
 19960  0994  00AA               	movwf	(modTri@tmpVal+1)^(0+128)
 19961  0995  0020               	movlb	0	; select bank0
 19962  0996  082F               	movf	?i1___ftadd+2,w
 19963  0997  0021               	movlb	1	; select bank1
 19964  0998  00AB               	movwf	(modTri@tmpVal+2)^(0+128)
 19965                           
 19966                           ;modulation.c: 80: if (tmpVal > 270) {
 19967  0999  3000               	movlw	0
 19968  099A  00F0               	movwf	i1___ftge@ff1
 19969  099B  3087               	movlw	135
 19970  099C  00F1               	movwf	i1___ftge@ff1+1
 19971  099D  3043               	movlw	67
 19972  099E  00F2               	movwf	i1___ftge@ff1+2
 19973  099F  0829               	movf	modTri@tmpVal^(0+128),w
 19974  09A0  00F3               	movwf	i1___ftge@ff2
 19975  09A1  082A               	movf	(modTri@tmpVal+1)^(0+128),w
 19976  09A2  00F4               	movwf	i1___ftge@ff2+1
 19977  09A3  082B               	movf	(modTri@tmpVal+2)^(0+128),w
 19978  09A4  00F5               	movwf	i1___ftge@ff2+2
 19979  09A5  31AE  264A  3188   	fcall	i1___ftge
 19980  09A8  1803               	btfsc	3,0
 19981  09A9  29BD               	goto	i1l6487
 19982                           
 19983                           ;modulation.c: 81: tmpVal = tmpVal - 360.0;
 19984  09AA  3000               	movlw	0
 19985  09AB  0020               	movlb	0	; select bank0
 19986  09AC  00AD               	movwf	i1___ftadd@f1
 19987  09AD  30B4               	movlw	180
 19988  09AE  00AE               	movwf	i1___ftadd@f1+1
 19989  09AF  30C3               	movlw	195
 19990  09B0  00AF               	movwf	i1___ftadd@f1+2
 19991  09B1  0021               	movlb	1	; select bank1
 19992  09B2  0829               	movf	modTri@tmpVal^(0+128),w
 19993  09B3  0020               	movlb	0	; select bank0
 19994  09B4  00B0               	movwf	i1___ftadd@f2
 19995  09B5  0021               	movlb	1	; select bank1
 19996  09B6  082A               	movf	(modTri@tmpVal+1)^(0+128),w
 19997  09B7  0020               	movlb	0	; select bank0
 19998  09B8  00B1               	movwf	i1___ftadd@f2+1
 19999  09B9  0021               	movlb	1	; select bank1
 20000  09BA  082B               	movf	(modTri@tmpVal+2)^(0+128),w
 20001  09BB  0020               	movlb	0	; select bank0
 20002  09BC  29EB               	goto	L26
 20003  09BD                     i1l6487:	
 20004                           ;modulation.c: 82: } else if (tmpVal > 90) {
 20005                           
 20006  09BD  3000               	movlw	0
 20007  09BE  00F0               	movwf	i1___ftge@ff1
 20008  09BF  30B4               	movlw	180
 20009  09C0  00F1               	movwf	i1___ftge@ff1+1
 20010  09C1  3042               	movlw	66
 20011  09C2  00F2               	movwf	i1___ftge@ff1+2
 20012  09C3  0021               	movlb	1	; select bank1
 20013  09C4  0829               	movf	modTri@tmpVal^(0+128),w
 20014  09C5  00F3               	movwf	i1___ftge@ff2
 20015  09C6  082A               	movf	(modTri@tmpVal+1)^(0+128),w
 20016  09C7  00F4               	movwf	i1___ftge@ff2+1
 20017  09C8  082B               	movf	(modTri@tmpVal+2)^(0+128),w
 20018  09C9  00F5               	movwf	i1___ftge@ff2+2
 20019  09CA  31AE  264A  3188   	fcall	i1___ftge
 20020  09CD  1803               	btfsc	3,0
 20021  09CE  29FB               	goto	i1l1901
 20022                           
 20023                           ;modulation.c: 83: tmpVal = 180 - tmpVal;
 20024  09CF  3000               	movlw	0
 20025  09D0  0020               	movlb	0	; select bank0
 20026  09D1  00AD               	movwf	i1___ftadd@f1
 20027  09D2  3034               	movlw	52
 20028  09D3  00AE               	movwf	i1___ftadd@f1+1
 20029  09D4  3043               	movlw	67
 20030  09D5  00AF               	movwf	i1___ftadd@f1+2
 20031  09D6  0021               	movlb	1	; select bank1
 20032  09D7  0829               	movf	modTri@tmpVal^(0+128),w
 20033  09D8  0020               	movlb	0	; select bank0
 20034  09D9  00AA               	movwf	i1___ftneg@f1
 20035  09DA  0021               	movlb	1	; select bank1
 20036  09DB  082A               	movf	(modTri@tmpVal+1)^(0+128),w
 20037  09DC  0020               	movlb	0	; select bank0
 20038  09DD  00AB               	movwf	i1___ftneg@f1+1
 20039  09DE  0021               	movlb	1	; select bank1
 20040  09DF  082B               	movf	(modTri@tmpVal+2)^(0+128),w
 20041  09E0  0020               	movlb	0	; select bank0
 20042  09E1  00AC               	movwf	i1___ftneg@f1+2
 20043  09E2  31AA  22D7  3188   	fcall	i1___ftneg
 20044  09E5  0020               	movlb	0	; select bank0
 20045  09E6  082A               	movf	?i1___ftneg,w
 20046  09E7  00B0               	movwf	i1___ftadd@f2
 20047  09E8  082B               	movf	?i1___ftneg+1,w
 20048  09E9  00B1               	movwf	i1___ftadd@f2+1
 20049  09EA  082C               	movf	?i1___ftneg+2,w
 20050  09EB                     L26:	
 20051  09EB  00B2               	movwf	i1___ftadd@f2+2
 20052  09EC  3190  2020  3188   	fcall	i1___ftadd
 20053  09EF  0020               	movlb	0	; select bank0
 20054  09F0  082D               	movf	?i1___ftadd,w
 20055  09F1  0021               	movlb	1	; select bank1
 20056  09F2  00A9               	movwf	modTri@tmpVal^(0+128)
 20057  09F3  0020               	movlb	0	; select bank0
 20058  09F4  082E               	movf	?i1___ftadd+1,w
 20059  09F5  0021               	movlb	1	; select bank1
 20060  09F6  00AA               	movwf	(modTri@tmpVal+1)^(0+128)
 20061  09F7  0020               	movlb	0	; select bank0
 20062  09F8  082F               	movf	?i1___ftadd+2,w
 20063  09F9  0021               	movlb	1	; select bank1
 20064  09FA  00AB               	movwf	(modTri@tmpVal+2)^(0+128)
 20065  09FB                     i1l1901:	
 20066                           
 20067                           ;modulation.c: 84: }
 20068                           ;modulation.c: 85: tmpVal = tmpVal * 10/9;
 20069  09FB  3000               	movlw	0
 20070  09FC  0020               	movlb	0	; select bank0
 20071  09FD  00BA               	movwf	i1___ftdiv@f2
 20072  09FE  3010               	movlw	16
 20073  09FF  00BB               	movwf	i1___ftdiv@f2+1
 20074  0A00  3041               	movlw	65
 20075  0A01  00BC               	movwf	i1___ftdiv@f2+2
 20076  0A02  3000               	movlw	0
 20077  0A03  00F8               	movwf	i1___ftmul@f1
 20078  0A04  3020               	movlw	32
 20079  0A05  00F9               	movwf	i1___ftmul@f1+1
 20080  0A06  3041               	movlw	65
 20081  0A07  00FA               	movwf	i1___ftmul@f1+2
 20082  0A08  0021               	movlb	1	; select bank1
 20083  0A09  0829               	movf	modTri@tmpVal^(0+128),w
 20084  0A0A  00FB               	movwf	i1___ftmul@f2
 20085  0A0B  082A               	movf	(modTri@tmpVal+1)^(0+128),w
 20086  0A0C  00FC               	movwf	i1___ftmul@f2+1
 20087  0A0D  082B               	movf	(modTri@tmpVal+2)^(0+128),w
 20088  0A0E  00FD               	movwf	i1___ftmul@f2+2
 20089  0A0F  319C  2422  3188   	fcall	i1___ftmul
 20090  0A12  0878               	movf	?i1___ftmul,w
 20091  0A13  0020               	movlb	0	; select bank0
 20092  0A14  00BD               	movwf	i1___ftdiv@f1
 20093  0A15  0879               	movf	?i1___ftmul+1,w
 20094  0A16  00BE               	movwf	i1___ftdiv@f1+1
 20095  0A17  087A               	movf	?i1___ftmul+2,w
 20096  0A18  00BF               	movwf	i1___ftdiv@f1+2
 20097  0A19  319A  2225  3188   	fcall	i1___ftdiv
 20098  0A1C  0020               	movlb	0	; select bank0
 20099  0A1D  083A               	movf	?i1___ftdiv,w
 20100  0A1E  0021               	movlb	1	; select bank1
 20101  0A1F  00A9               	movwf	modTri@tmpVal^(0+128)
 20102  0A20  0020               	movlb	0	; select bank0
 20103  0A21  083B               	movf	?i1___ftdiv+1,w
 20104  0A22  0021               	movlb	1	; select bank1
 20105  0A23  00AA               	movwf	(modTri@tmpVal+1)^(0+128)
 20106  0A24  0020               	movlb	0	; select bank0
 20107  0A25  083C               	movf	?i1___ftdiv+2,w
 20108  0A26  0021               	movlb	1	; select bank1
 20109  0A27  00AB               	movwf	(modTri@tmpVal+2)^(0+128)
 20110                           
 20111                           ;modulation.c: 87: return (int)(tmpVal);
 20112  0A28  0829               	movf	modTri@tmpVal^(0+128),w
 20113  0A29  0020               	movlb	0	; select bank0
 20114  0A2A  00CA               	movwf	i1___fttol@f1
 20115  0A2B  0021               	movlb	1	; select bank1
 20116  0A2C  082A               	movf	(modTri@tmpVal+1)^(0+128),w
 20117  0A2D  0020               	movlb	0	; select bank0
 20118  0A2E  00CB               	movwf	i1___fttol@f1+1
 20119  0A2F  0021               	movlb	1	; select bank1
 20120  0A30  082B               	movf	(modTri@tmpVal+2)^(0+128),w
 20121  0A31  0020               	movlb	0	; select bank0
 20122  0A32  00CC               	movwf	i1___fttol@f1+2
 20123  0A33  31A5  25E0         	fcall	i1___fttol
 20124  0A35  0020               	movlb	0	; select bank0
 20125  0A36  084B               	movf	?i1___fttol+1,w
 20126  0A37  00E5               	movwf	?_modTri+1
 20127  0A38  084A               	movf	?i1___fttol,w
 20128  0A39  00E4               	movwf	?_modTri
 20129  0A3A  0008               	return
 20130  0A3B                     __end_of_modTri:	
 20131                           
 20132                           	psect	text74
 20133  2BFB                     __ptext74:	
 20134 ;; *************** function _modSquare *****************
 20135 ;; Defined at:
 20136 ;;		line 113 in file "modulation.c"
 20137 ;; Parameters:    Size  Location     Type
 20138 ;;  angle           3   68[BANK0 ] int 
 20139 ;;  inflection      3   71[BANK0 ] int 
 20140 ;; Auto vars:     Size  Location     Type
 20141 ;;		None
 20142 ;; Return value:  Size  Location     Type
 20143 ;;                  2   68[BANK0 ] int 
 20144 ;; Registers used:
 20145 ;;		wreg, status,2, status,0, pclath, cstack
 20146 ;; Tracked objects:
 20147 ;;		On entry : 0/0
 20148 ;;		On exit  : 0/0
 20149 ;;		Unchanged: 0/0
 20150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20151 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20154 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20155 ;;Total ram usage:        6 bytes
 20156 ;; Hardware stack levels used:    1
 20157 ;; Hardware stack levels required when called:    1
 20158 ;; This function calls:
 20159 ;;		i1___ftge
 20160 ;; This function is called by:
 20161 ;;		_isr
 20162 ;; This function uses a non-reentrant model
 20163 ;;
 20164                           
 20165                           
 20166                           ;psect for function _modSquare
 20167  2BFB                     _modSquare:	
 20168                           
 20169                           ;modulation.c: 114: return (angle <= inflection) ? 100 : -100;
 20170                           
 20171                           ;incstack = 0
 20172                           ; Regs used in _modSquare: [wreg+status,2+status,0+pclath+cstack]
 20173  2BFB  0020               	movlb	0	; select bank0
 20174  2BFC  0867               	movf	modSquare@inflection,w
 20175  2BFD  00F0               	movwf	i1___ftge@ff1
 20176  2BFE  0868               	movf	modSquare@inflection+1,w
 20177  2BFF  00F1               	movwf	i1___ftge@ff1+1
 20178  2C00  0869               	movf	modSquare@inflection+2,w
 20179  2C01  00F2               	movwf	i1___ftge@ff1+2
 20180  2C02  0864               	movf	modSquare@angle,w
 20181  2C03  00F3               	movwf	i1___ftge@ff2
 20182  2C04  0865               	movf	modSquare@angle+1,w
 20183  2C05  00F4               	movwf	i1___ftge@ff2+1
 20184  2C06  0866               	movf	modSquare@angle+2,w
 20185  2C07  00F5               	movwf	i1___ftge@ff2+2
 20186  2C08  31AE  264A  31AB   	fcall	i1___ftge
 20187  2C0B  1803               	btfsc	3,0
 20188  2C0C  2C13               	goto	i1l6497
 20189  2C0D  309C               	movlw	156
 20190  2C0E  0020               	movlb	0	; select bank0
 20191  2C0F  00E4               	movwf	?_modSquare
 20192  2C10  30FF               	movlw	255
 20193  2C11  00E5               	movwf	?_modSquare+1
 20194  2C12  0008               	return
 20195  2C13                     i1l6497:	
 20196  2C13  3064               	movlw	100
 20197  2C14  0020               	movlb	0	; select bank0
 20198  2C15  00E4               	movwf	?_modSquare
 20199  2C16  3000               	movlw	0
 20200  2C17  00E5               	movwf	?_modSquare+1
 20201  2C18  0008               	return
 20202  2C19                     __end_of_modSquare:	
 20203                           
 20204                           	psect	text75
 20205  2C37                     __ptext75:	
 20206 ;; *************** function _modSawRev *****************
 20207 ;; Defined at:
 20208 ;;		line 107 in file "modulation.c"
 20209 ;; Parameters:    Size  Location     Type
 20210 ;;  angle           3   74[BANK0 ] int 
 20211 ;;  inflection      3   77[BANK0 ] int 
 20212 ;; Auto vars:     Size  Location     Type
 20213 ;;		None
 20214 ;; Return value:  Size  Location     Type
 20215 ;;                  2   74[BANK0 ] int 
 20216 ;; Registers used:
 20217 ;;		wreg, status,2, status,0, pclath, cstack
 20218 ;; Tracked objects:
 20219 ;;		On entry : 0/0
 20220 ;;		On exit  : 0/0
 20221 ;;		Unchanged: 0/0
 20222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20223 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20225 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20226 ;;      Totals:         0       6       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20227 ;;Total ram usage:        8 bytes
 20228 ;; Hardware stack levels used:    1
 20229 ;; Hardware stack levels required when called:    3
 20230 ;; This function calls:
 20231 ;;		_modSaw
 20232 ;; This function is called by:
 20233 ;;		_isr
 20234 ;; This function uses a non-reentrant model
 20235 ;;
 20236                           
 20237                           
 20238                           ;psect for function _modSawRev
 20239  2C37                     _modSawRev:	
 20240                           
 20241                           ;modulation.c: 108: return -1 * modSaw(angle, inflection);
 20242                           
 20243                           ;incstack = 0
 20244                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 20245  2C37  0020               	movlb	0	; select bank0
 20246  2C38  086A               	movf	modSawRev@angle,w
 20247  2C39  00E4               	movwf	modSaw@angle
 20248  2C3A  086B               	movf	modSawRev@angle+1,w
 20249  2C3B  00E5               	movwf	modSaw@angle+1
 20250  2C3C  086C               	movf	modSawRev@angle+2,w
 20251  2C3D  00E6               	movwf	modSaw@angle+2
 20252  2C3E  086D               	movf	modSawRev@inflection,w
 20253  2C3F  00E7               	movwf	modSaw@inflection
 20254  2C40  086E               	movf	modSawRev@inflection+1,w
 20255  2C41  00E8               	movwf	modSaw@inflection+1
 20256  2C42  086F               	movf	modSawRev@inflection+2,w
 20257  2C43  00E9               	movwf	modSaw@inflection+2
 20258  2C44  3193  2365         	fcall	_modSaw
 20259  2C46  0020               	movlb	0	; select bank0
 20260  2C47  0964               	comf	?_modSaw,w
 20261  2C48  0021               	movlb	1	; select bank1
 20262  2C49  00B1               	movwf	??_modSawRev^(0+128)
 20263  2C4A  0020               	movlb	0	; select bank0
 20264  2C4B  0965               	comf	?_modSaw+1,w
 20265  2C4C  0021               	movlb	1	; select bank1
 20266  2C4D  00B2               	movwf	(??_modSawRev^(0+128)+1)
 20267  2C4E  0AB1               	incf	??_modSawRev^(0+128),f
 20268  2C4F  1903               	skipnz
 20269  2C50  0AB2               	incf	(??_modSawRev^(0+128)+1),f
 20270  2C51  0831               	movf	??_modSawRev^(0+128),w
 20271  2C52  0020               	movlb	0	; select bank0
 20272  2C53  00EA               	movwf	?_modSawRev
 20273  2C54  0021               	movlb	1	; select bank1
 20274  2C55  0832               	movf	(??_modSawRev+1)^(0+128),w
 20275  2C56  0020               	movlb	0	; select bank0
 20276  2C57  00EB               	movwf	?_modSawRev+1
 20277  2C58  0008               	return
 20278  2C59                     __end_of_modSawRev:	
 20279                           
 20280                           	psect	text76
 20281  1365                     __ptext76:	
 20282 ;; *************** function _modSaw *****************
 20283 ;; Defined at:
 20284 ;;		line 91 in file "modulation.c"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;  angle           3   68[BANK0 ] int 
 20287 ;;  inflection      3   71[BANK0 ] int 
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;  period          3   14[BANK1 ] int 
 20290 ;;  shift           3   11[BANK1 ] int 
 20291 ;;  mod             2    9[BANK1 ] int 
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  2   68[BANK0 ] int 
 20294 ;; Registers used:
 20295 ;;		wreg, status,2, status,0, pclath, cstack
 20296 ;; Tracked objects:
 20297 ;;		On entry : 0/0
 20298 ;;		On exit  : 0/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20301 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20302 ;;      Locals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20304 ;;      Totals:         0       6      17       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20305 ;;Total ram usage:       23 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; Hardware stack levels required when called:    2
 20308 ;; This function calls:
 20309 ;;		i1___ftadd
 20310 ;;		i1___ftdiv
 20311 ;;		i1___ftge
 20312 ;;		i1___ftmul
 20313 ;;		i1___ftneg
 20314 ;;		i1___fttol
 20315 ;; This function is called by:
 20316 ;;		_isr
 20317 ;;		_modSawRev
 20318 ;; This function uses a non-reentrant model
 20319 ;;
 20320                           
 20321                           
 20322                           ;psect for function _modSaw
 20323  1365                     _modSaw:	
 20324                           
 20325                           ;modulation.c: 92: double period = 1.0;
 20326                           
 20327                           ;incstack = 0
 20328                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 20329  1365  3000               	movlw	0
 20330  1366  0021               	movlb	1	; select bank1
 20331  1367  00AE               	movwf	modSaw@period^(0+128)
 20332  1368  3080               	movlw	128
 20333  1369  00AF               	movwf	(modSaw@period+1)^(0+128)
 20334  136A  303F               	movlw	63
 20335  136B  00B0               	movwf	(modSaw@period+2)^(0+128)
 20336                           
 20337                           ;modulation.c: 93: double shift = 0;
 20338  136C  3000               	movlw	0
 20339  136D  00AB               	movwf	modSaw@shift^(0+128)
 20340  136E  3000               	movlw	0
 20341  136F  00AC               	movwf	(modSaw@shift+1)^(0+128)
 20342  1370  3000               	movlw	0
 20343  1371  00AD               	movwf	(modSaw@shift+2)^(0+128)
 20344                           
 20345                           ;modulation.c: 95: if(angle<=inflection) {
 20346  1372  0020               	movlb	0	; select bank0
 20347  1373  0867               	movf	modSaw@inflection,w
 20348  1374  00F0               	movwf	i1___ftge@ff1
 20349  1375  0868               	movf	modSaw@inflection+1,w
 20350  1376  00F1               	movwf	i1___ftge@ff1+1
 20351  1377  0869               	movf	modSaw@inflection+2,w
 20352  1378  00F2               	movwf	i1___ftge@ff1+2
 20353  1379  0864               	movf	modSaw@angle,w
 20354  137A  00F3               	movwf	i1___ftge@ff2
 20355  137B  0865               	movf	modSaw@angle+1,w
 20356  137C  00F4               	movwf	i1___ftge@ff2+1
 20357  137D  0866               	movf	modSaw@angle+2,w
 20358  137E  00F5               	movwf	i1___ftge@ff2+2
 20359  137F  31AE  264A  3193   	fcall	i1___ftge
 20360  1382  1C03               	btfss	3,0
 20361  1383  2B8B               	goto	i1l6135
 20362                           
 20363                           ;modulation.c: 96: period = 180.0/inflection;
 20364  1384  0020               	movlb	0	; select bank0
 20365  1385  0867               	movf	modSaw@inflection,w
 20366  1386  00BA               	movwf	i1___ftdiv@f2
 20367  1387  0868               	movf	modSaw@inflection+1,w
 20368  1388  00BB               	movwf	i1___ftdiv@f2+1
 20369  1389  0869               	movf	modSaw@inflection+2,w
 20370  138A  2C52               	goto	L27
 20371  138B                     i1l6135:	
 20372                           ;modulation.c: 97: } else {
 20373                           
 20374                           
 20375                           ;modulation.c: 98: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 20376  138B  0020               	movlb	0	; select bank0
 20377  138C  0867               	movf	modSaw@inflection,w
 20378  138D  00FB               	movwf	i1___ftmul@f2
 20379  138E  0868               	movf	modSaw@inflection+1,w
 20380  138F  00FC               	movwf	i1___ftmul@f2+1
 20381  1390  0869               	movf	modSaw@inflection+2,w
 20382  1391  00FD               	movwf	i1___ftmul@f2+2
 20383  1392  3000               	movlw	0
 20384  1393  00F8               	movwf	i1___ftmul@f1
 20385  1394  3000               	movlw	0
 20386  1395  00F9               	movwf	i1___ftmul@f1+1
 20387  1396  3040               	movlw	64
 20388  1397  00FA               	movwf	i1___ftmul@f1+2
 20389  1398  319C  2422  3193   	fcall	i1___ftmul
 20390  139B  0878               	movf	?i1___ftmul,w
 20391  139C  0020               	movlb	0	; select bank0
 20392  139D  00AA               	movwf	i1___ftneg@f1
 20393  139E  0879               	movf	?i1___ftmul+1,w
 20394  139F  00AB               	movwf	i1___ftneg@f1+1
 20395  13A0  087A               	movf	?i1___ftmul+2,w
 20396  13A1  00AC               	movwf	i1___ftneg@f1+2
 20397  13A2  31AA  22D7  3193   	fcall	i1___ftneg
 20398  13A5  0020               	movlb	0	; select bank0
 20399  13A6  082A               	movf	?i1___ftneg,w
 20400  13A7  00B0               	movwf	i1___ftadd@f2
 20401  13A8  082B               	movf	?i1___ftneg+1,w
 20402  13A9  00B1               	movwf	i1___ftadd@f2+1
 20403  13AA  082C               	movf	?i1___ftneg+2,w
 20404  13AB  00B2               	movwf	i1___ftadd@f2+2
 20405  13AC  3000               	movlw	0
 20406  13AD  00AD               	movwf	i1___ftadd@f1
 20407  13AE  30B4               	movlw	180
 20408  13AF  00AE               	movwf	i1___ftadd@f1+1
 20409  13B0  3043               	movlw	67
 20410  13B1  00AF               	movwf	i1___ftadd@f1+2
 20411  13B2  3190  2020  3193   	fcall	i1___ftadd
 20412  13B5  0020               	movlb	0	; select bank0
 20413  13B6  082D               	movf	?i1___ftadd,w
 20414  13B7  0021               	movlb	1	; select bank1
 20415  13B8  00A0               	movwf	_modSaw$2913^(0+128)
 20416  13B9  0020               	movlb	0	; select bank0
 20417  13BA  082E               	movf	?i1___ftadd+1,w
 20418  13BB  0021               	movlb	1	; select bank1
 20419  13BC  00A1               	movwf	(_modSaw$2913+1)^(0+128)
 20420  13BD  0020               	movlb	0	; select bank0
 20421  13BE  082F               	movf	?i1___ftadd+2,w
 20422  13BF  0021               	movlb	1	; select bank1
 20423  13C0  00A2               	movwf	(_modSaw$2913+2)^(0+128)
 20424                           
 20425                           ;modulation.c: 98: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 20426  13C1  0820               	movf	_modSaw$2913^(0+128),w
 20427  13C2  0020               	movlb	0	; select bank0
 20428  13C3  00AA               	movwf	i1___ftneg@f1
 20429  13C4  0021               	movlb	1	; select bank1
 20430  13C5  0821               	movf	(_modSaw$2913+1)^(0+128),w
 20431  13C6  0020               	movlb	0	; select bank0
 20432  13C7  00AB               	movwf	i1___ftneg@f1+1
 20433  13C8  0021               	movlb	1	; select bank1
 20434  13C9  0822               	movf	(_modSaw$2913+2)^(0+128),w
 20435  13CA  0020               	movlb	0	; select bank0
 20436  13CB  00AC               	movwf	i1___ftneg@f1+2
 20437  13CC  31AA  22D7  3193   	fcall	i1___ftneg
 20438  13CF  0020               	movlb	0	; select bank0
 20439  13D0  082A               	movf	?i1___ftneg,w
 20440  13D1  00F8               	movwf	i1___ftmul@f1
 20441  13D2  082B               	movf	?i1___ftneg+1,w
 20442  13D3  00F9               	movwf	i1___ftmul@f1+1
 20443  13D4  082C               	movf	?i1___ftneg+2,w
 20444  13D5  00FA               	movwf	i1___ftmul@f1+2
 20445  13D6  3000               	movlw	0
 20446  13D7  00AD               	movwf	i1___ftadd@f1
 20447  13D8  30B4               	movlw	180
 20448  13D9  00AE               	movwf	i1___ftadd@f1+1
 20449  13DA  3043               	movlw	67
 20450  13DB  00AF               	movwf	i1___ftadd@f1+2
 20451  13DC  0867               	movf	modSaw@inflection,w
 20452  13DD  00AA               	movwf	i1___ftneg@f1
 20453  13DE  0868               	movf	modSaw@inflection+1,w
 20454  13DF  00AB               	movwf	i1___ftneg@f1+1
 20455  13E0  0869               	movf	modSaw@inflection+2,w
 20456  13E1  00AC               	movwf	i1___ftneg@f1+2
 20457  13E2  31AA  22D7  3193   	fcall	i1___ftneg
 20458  13E5  0020               	movlb	0	; select bank0
 20459  13E6  082A               	movf	?i1___ftneg,w
 20460  13E7  00B0               	movwf	i1___ftadd@f2
 20461  13E8  082B               	movf	?i1___ftneg+1,w
 20462  13E9  00B1               	movwf	i1___ftadd@f2+1
 20463  13EA  082C               	movf	?i1___ftneg+2,w
 20464  13EB  00B2               	movwf	i1___ftadd@f2+2
 20465  13EC  3190  2020  3193   	fcall	i1___ftadd
 20466  13EF  0020               	movlb	0	; select bank0
 20467  13F0  082D               	movf	?i1___ftadd,w
 20468  13F1  00BA               	movwf	i1___ftdiv@f2
 20469  13F2  082E               	movf	?i1___ftadd+1,w
 20470  13F3  00BB               	movwf	i1___ftdiv@f2+1
 20471  13F4  082F               	movf	?i1___ftadd+2,w
 20472  13F5  00BC               	movwf	i1___ftdiv@f2+2
 20473  13F6  3000               	movlw	0
 20474  13F7  00BD               	movwf	i1___ftdiv@f1
 20475  13F8  3034               	movlw	52
 20476  13F9  00BE               	movwf	i1___ftdiv@f1+1
 20477  13FA  3043               	movlw	67
 20478  13FB  00BF               	movwf	i1___ftdiv@f1+2
 20479  13FC  319A  2225  3193   	fcall	i1___ftdiv
 20480  13FF  0020               	movlb	0	; select bank0
 20481  1400  083A               	movf	?i1___ftdiv,w
 20482  1401  00FB               	movwf	i1___ftmul@f2
 20483  1402  083B               	movf	?i1___ftdiv+1,w
 20484  1403  00FC               	movwf	i1___ftmul@f2+1
 20485  1404  083C               	movf	?i1___ftdiv+2,w
 20486  1405  00FD               	movwf	i1___ftmul@f2+2
 20487  1406  319C  2422  3193   	fcall	i1___ftmul
 20488  1409  0878               	movf	?i1___ftmul,w
 20489  140A  0021               	movlb	1	; select bank1
 20490  140B  00A3               	movwf	_modSaw$2914^(0+128)
 20491  140C  0879               	movf	?i1___ftmul+1,w
 20492  140D  00A4               	movwf	(_modSaw$2914+1)^(0+128)
 20493  140E  087A               	movf	?i1___ftmul+2,w
 20494  140F  00A5               	movwf	(_modSaw$2914+2)^(0+128)
 20495                           
 20496                           ;modulation.c: 98: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 20497  1410  3000               	movlw	0
 20498  1411  0020               	movlb	0	; select bank0
 20499  1412  00AD               	movwf	i1___ftadd@f1
 20500  1413  30B4               	movlw	180
 20501  1414  00AE               	movwf	i1___ftadd@f1+1
 20502  1415  3043               	movlw	67
 20503  1416  00AF               	movwf	i1___ftadd@f1+2
 20504  1417  0021               	movlb	1	; select bank1
 20505  1418  0823               	movf	_modSaw$2914^(0+128),w
 20506  1419  0020               	movlb	0	; select bank0
 20507  141A  00B0               	movwf	i1___ftadd@f2
 20508  141B  0021               	movlb	1	; select bank1
 20509  141C  0824               	movf	(_modSaw$2914+1)^(0+128),w
 20510  141D  0020               	movlb	0	; select bank0
 20511  141E  00B1               	movwf	i1___ftadd@f2+1
 20512  141F  0021               	movlb	1	; select bank1
 20513  1420  0825               	movf	(_modSaw$2914+2)^(0+128),w
 20514  1421  0020               	movlb	0	; select bank0
 20515  1422  00B2               	movwf	i1___ftadd@f2+2
 20516  1423  3190  2020  3193   	fcall	i1___ftadd
 20517  1426  0020               	movlb	0	; select bank0
 20518  1427  082D               	movf	?i1___ftadd,w
 20519  1428  0021               	movlb	1	; select bank1
 20520  1429  00AB               	movwf	modSaw@shift^(0+128)
 20521  142A  0020               	movlb	0	; select bank0
 20522  142B  082E               	movf	?i1___ftadd+1,w
 20523  142C  0021               	movlb	1	; select bank1
 20524  142D  00AC               	movwf	(modSaw@shift+1)^(0+128)
 20525  142E  0020               	movlb	0	; select bank0
 20526  142F  082F               	movf	?i1___ftadd+2,w
 20527  1430  0021               	movlb	1	; select bank1
 20528  1431  00AD               	movwf	(modSaw@shift+2)^(0+128)
 20529                           
 20530                           ;modulation.c: 99: period = 180/(360-inflection);
 20531  1432  3000               	movlw	0
 20532  1433  0020               	movlb	0	; select bank0
 20533  1434  00AD               	movwf	i1___ftadd@f1
 20534  1435  30B4               	movlw	180
 20535  1436  00AE               	movwf	i1___ftadd@f1+1
 20536  1437  3043               	movlw	67
 20537  1438  00AF               	movwf	i1___ftadd@f1+2
 20538  1439  0867               	movf	modSaw@inflection,w
 20539  143A  00AA               	movwf	i1___ftneg@f1
 20540  143B  0868               	movf	modSaw@inflection+1,w
 20541  143C  00AB               	movwf	i1___ftneg@f1+1
 20542  143D  0869               	movf	modSaw@inflection+2,w
 20543  143E  00AC               	movwf	i1___ftneg@f1+2
 20544  143F  31AA  22D7  3193   	fcall	i1___ftneg
 20545  1442  0020               	movlb	0	; select bank0
 20546  1443  082A               	movf	?i1___ftneg,w
 20547  1444  00B0               	movwf	i1___ftadd@f2
 20548  1445  082B               	movf	?i1___ftneg+1,w
 20549  1446  00B1               	movwf	i1___ftadd@f2+1
 20550  1447  082C               	movf	?i1___ftneg+2,w
 20551  1448  00B2               	movwf	i1___ftadd@f2+2
 20552  1449  3190  2020  3193   	fcall	i1___ftadd
 20553  144C  0020               	movlb	0	; select bank0
 20554  144D  082D               	movf	?i1___ftadd,w
 20555  144E  00BA               	movwf	i1___ftdiv@f2
 20556  144F  082E               	movf	?i1___ftadd+1,w
 20557  1450  00BB               	movwf	i1___ftdiv@f2+1
 20558  1451  082F               	movf	?i1___ftadd+2,w
 20559  1452                     L27:	
 20560  1452  00BC               	movwf	i1___ftdiv@f2+2
 20561  1453  3000               	movlw	0
 20562  1454  00BD               	movwf	i1___ftdiv@f1
 20563  1455  3034               	movlw	52
 20564  1456  00BE               	movwf	i1___ftdiv@f1+1
 20565  1457  3043               	movlw	67
 20566  1458  00BF               	movwf	i1___ftdiv@f1+2
 20567  1459  319A  2225  3193   	fcall	i1___ftdiv
 20568  145C  0020               	movlb	0	; select bank0
 20569  145D  083A               	movf	?i1___ftdiv,w
 20570  145E  0021               	movlb	1	; select bank1
 20571  145F  00AE               	movwf	modSaw@period^(0+128)
 20572  1460  0020               	movlb	0	; select bank0
 20573  1461  083B               	movf	?i1___ftdiv+1,w
 20574  1462  0021               	movlb	1	; select bank1
 20575  1463  00AF               	movwf	(modSaw@period+1)^(0+128)
 20576  1464  0020               	movlb	0	; select bank0
 20577  1465  083C               	movf	?i1___ftdiv+2,w
 20578  1466  0021               	movlb	1	; select bank1
 20579  1467  00B0               	movwf	(modSaw@period+2)^(0+128)
 20580                           
 20581                           ;modulation.c: 100: }
 20582                           ;modulation.c: 103: int mod = (int)((period*angle-shift)*5/9);
 20583  1468  082E               	movf	modSaw@period^(0+128),w
 20584  1469  00FB               	movwf	i1___ftmul@f2
 20585  146A  082F               	movf	(modSaw@period+1)^(0+128),w
 20586  146B  00FC               	movwf	i1___ftmul@f2+1
 20587  146C  0830               	movf	(modSaw@period+2)^(0+128),w
 20588  146D  00FD               	movwf	i1___ftmul@f2+2
 20589  146E  0020               	movlb	0	; select bank0
 20590  146F  0864               	movf	modSaw@angle,w
 20591  1470  00F8               	movwf	i1___ftmul@f1
 20592  1471  0865               	movf	modSaw@angle+1,w
 20593  1472  00F9               	movwf	i1___ftmul@f1+1
 20594  1473  0866               	movf	modSaw@angle+2,w
 20595  1474  00FA               	movwf	i1___ftmul@f1+2
 20596  1475  319C  2422  3193   	fcall	i1___ftmul
 20597  1478  0878               	movf	?i1___ftmul,w
 20598  1479  0020               	movlb	0	; select bank0
 20599  147A  00B0               	movwf	i1___ftadd@f2
 20600  147B  0879               	movf	?i1___ftmul+1,w
 20601  147C  00B1               	movwf	i1___ftadd@f2+1
 20602  147D  087A               	movf	?i1___ftmul+2,w
 20603  147E  00B2               	movwf	i1___ftadd@f2+2
 20604  147F  0021               	movlb	1	; select bank1
 20605  1480  082B               	movf	modSaw@shift^(0+128),w
 20606  1481  0020               	movlb	0	; select bank0
 20607  1482  00AA               	movwf	i1___ftneg@f1
 20608  1483  0021               	movlb	1	; select bank1
 20609  1484  082C               	movf	(modSaw@shift+1)^(0+128),w
 20610  1485  0020               	movlb	0	; select bank0
 20611  1486  00AB               	movwf	i1___ftneg@f1+1
 20612  1487  0021               	movlb	1	; select bank1
 20613  1488  082D               	movf	(modSaw@shift+2)^(0+128),w
 20614  1489  0020               	movlb	0	; select bank0
 20615  148A  00AC               	movwf	i1___ftneg@f1+2
 20616  148B  31AA  22D7  3193   	fcall	i1___ftneg
 20617  148E  0020               	movlb	0	; select bank0
 20618  148F  082A               	movf	?i1___ftneg,w
 20619  1490  00AD               	movwf	i1___ftadd@f1
 20620  1491  082B               	movf	?i1___ftneg+1,w
 20621  1492  00AE               	movwf	i1___ftadd@f1+1
 20622  1493  082C               	movf	?i1___ftneg+2,w
 20623  1494  00AF               	movwf	i1___ftadd@f1+2
 20624  1495  3190  2020  3193   	fcall	i1___ftadd
 20625  1498  0020               	movlb	0	; select bank0
 20626  1499  082D               	movf	?i1___ftadd,w
 20627  149A  0021               	movlb	1	; select bank1
 20628  149B  00A6               	movwf	_modSaw$2915^(0+128)
 20629  149C  0020               	movlb	0	; select bank0
 20630  149D  082E               	movf	?i1___ftadd+1,w
 20631  149E  0021               	movlb	1	; select bank1
 20632  149F  00A7               	movwf	(_modSaw$2915+1)^(0+128)
 20633  14A0  0020               	movlb	0	; select bank0
 20634  14A1  082F               	movf	?i1___ftadd+2,w
 20635  14A2  0021               	movlb	1	; select bank1
 20636  14A3  00A8               	movwf	(_modSaw$2915+2)^(0+128)
 20637                           
 20638                           ;modulation.c: 100: }
 20639                           ;modulation.c: 103: int mod = (int)((period*angle-shift)*5/9);
 20640  14A4  0826               	movf	_modSaw$2915^(0+128),w
 20641  14A5  00FB               	movwf	i1___ftmul@f2
 20642  14A6  0827               	movf	(_modSaw$2915+1)^(0+128),w
 20643  14A7  00FC               	movwf	i1___ftmul@f2+1
 20644  14A8  0828               	movf	(_modSaw$2915+2)^(0+128),w
 20645  14A9  00FD               	movwf	i1___ftmul@f2+2
 20646  14AA  3000               	movlw	0
 20647  14AB  00F8               	movwf	i1___ftmul@f1
 20648  14AC  30A0               	movlw	160
 20649  14AD  00F9               	movwf	i1___ftmul@f1+1
 20650  14AE  3040               	movlw	64
 20651  14AF  00FA               	movwf	i1___ftmul@f1+2
 20652  14B0  319C  2422  3193   	fcall	i1___ftmul
 20653  14B3  0878               	movf	?i1___ftmul,w
 20654  14B4  0020               	movlb	0	; select bank0
 20655  14B5  00BD               	movwf	i1___ftdiv@f1
 20656  14B6  0879               	movf	?i1___ftmul+1,w
 20657  14B7  00BE               	movwf	i1___ftdiv@f1+1
 20658  14B8  087A               	movf	?i1___ftmul+2,w
 20659  14B9  00BF               	movwf	i1___ftdiv@f1+2
 20660  14BA  3000               	movlw	0
 20661  14BB  00BA               	movwf	i1___ftdiv@f2
 20662  14BC  3010               	movlw	16
 20663  14BD  00BB               	movwf	i1___ftdiv@f2+1
 20664  14BE  3041               	movlw	65
 20665  14BF  00BC               	movwf	i1___ftdiv@f2+2
 20666  14C0  319A  2225  3193   	fcall	i1___ftdiv
 20667  14C3  0020               	movlb	0	; select bank0
 20668  14C4  083A               	movf	?i1___ftdiv,w
 20669  14C5  00CA               	movwf	i1___fttol@f1
 20670  14C6  083B               	movf	?i1___ftdiv+1,w
 20671  14C7  00CB               	movwf	i1___fttol@f1+1
 20672  14C8  083C               	movf	?i1___ftdiv+2,w
 20673  14C9  00CC               	movwf	i1___fttol@f1+2
 20674  14CA  31A5  25E0         	fcall	i1___fttol
 20675  14CC  0020               	movlb	0	; select bank0
 20676  14CD  084B               	movf	?i1___fttol+1,w
 20677  14CE  0021               	movlb	1	; select bank1
 20678  14CF  00AA               	movwf	(modSaw@mod+1)^(0+128)
 20679  14D0  0020               	movlb	0	; select bank0
 20680  14D1  084A               	movf	?i1___fttol,w
 20681  14D2  0021               	movlb	1	; select bank1
 20682  14D3  00A9               	movwf	modSaw@mod^(0+128)
 20683                           
 20684                           ;modulation.c: 104: return mod;
 20685  14D4  082A               	movf	(modSaw@mod+1)^(0+128),w
 20686  14D5  0020               	movlb	0	; select bank0
 20687  14D6  00E5               	movwf	?_modSaw+1
 20688  14D7  0021               	movlb	1	; select bank1
 20689  14D8  0829               	movf	modSaw@mod^(0+128),w
 20690  14D9  0020               	movlb	0	; select bank0
 20691  14DA  00E4               	movwf	?_modSaw
 20692  14DB  0008               	return
 20693  14DC                     __end_of_modSaw:	
 20694                           
 20695                           	psect	text77
 20696  25E0                     __ptext77:	
 20697 ;; *************** function i1___fttol *****************
 20698 ;; Defined at:
 20699 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 20700 ;; Parameters:    Size  Location     Type
 20701 ;;  f1              3   42[BANK0 ] float 
 20702 ;; Auto vars:     Size  Location     Type
 20703 ;;  __fttol         4   51[BANK0 ] unsigned long 
 20704 ;;  __fttol         1   55[BANK0 ] unsigned char 
 20705 ;;  __fttol         1   50[BANK0 ] unsigned char 
 20706 ;; Return value:  Size  Location     Type
 20707 ;;                  4   42[BANK0 ] long 
 20708 ;; Registers used:
 20709 ;;		wreg, status,2, status,0
 20710 ;; Tracked objects:
 20711 ;;		On entry : 0/0
 20712 ;;		On exit  : 0/0
 20713 ;;		Unchanged: 0/0
 20714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20716 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20718 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20719 ;;Total ram usage:       14 bytes
 20720 ;; Hardware stack levels used:    1
 20721 ;; This function calls:
 20722 ;;		Nothing
 20723 ;; This function is called by:
 20724 ;;		_modTri
 20725 ;;		_modSaw
 20726 ;;		i1_modSin
 20727 ;; This function uses a non-reentrant model
 20728 ;;
 20729                           
 20730                           
 20731                           ;psect for function i1___fttol
 20732  25E0                     i1___fttol:	
 20733                           
 20734                           ;incstack = 0
 20735                           ; Regs used in i1___fttol: [wreg+status,2+status,0]
 20736  25E0  0020               	movlb	0	; select bank0
 20737  25E1  084A               	movf	i1___fttol@f1,w
 20738  25E2  00CE               	movwf	??i1___fttol
 20739  25E3  084B               	movf	i1___fttol@f1+1,w
 20740  25E4  00CF               	movwf	??i1___fttol+1
 20741  25E5  084C               	movf	i1___fttol@f1+2,w
 20742  25E6  00D0               	movwf	??i1___fttol+2
 20743  25E7  1003               	clrc
 20744  25E8  0D4F               	rlf	??i1___fttol+1,w
 20745  25E9  0D50               	rlf	??i1___fttol+2,w
 20746  25EA  00D1               	movwf	??i1___fttol+3
 20747  25EB  0851               	movf	??i1___fttol+3,w
 20748  25EC  00D7               	movwf	i1___fttol@exp1
 20749  25ED  0857               	movf	i1___fttol@exp1,w
 20750  25EE  1D03               	btfss	3,2
 20751  25EF  2DF9               	goto	i1l6093
 20752  25F0  3000               	movlw	0
 20753  25F1  00CD               	movwf	?i1___fttol+3
 20754  25F2  3000               	movlw	0
 20755  25F3  00CC               	movwf	?i1___fttol+2
 20756  25F4  3000               	movlw	0
 20757  25F5  00CB               	movwf	?i1___fttol+1
 20758  25F6  3000               	movlw	0
 20759  25F7  00CA               	movwf	?i1___fttol
 20760  25F8  0008               	return
 20761  25F9                     i1l6093:	
 20762  25F9  084A               	movf	i1___fttol@f1,w
 20763  25FA  00CE               	movwf	??i1___fttol
 20764  25FB  084B               	movf	i1___fttol@f1+1,w
 20765  25FC  00CF               	movwf	??i1___fttol+1
 20766  25FD  084C               	movf	i1___fttol@f1+2,w
 20767  25FE  00D0               	movwf	??i1___fttol+2
 20768  25FF  3017               	movlw	23
 20769  2600                     u601_25:	
 20770  2600  36D0               	lsrf	??i1___fttol+2,f
 20771  2601  0CCF               	rrf	??i1___fttol+1,f
 20772  2602  0CCE               	rrf	??i1___fttol,f
 20773  2603  0B89               	decfsz	9,f
 20774  2604  2E00               	goto	u601_25
 20775  2605  084E               	movf	??i1___fttol,w
 20776  2606  00D1               	movwf	??i1___fttol+3
 20777  2607  0851               	movf	??i1___fttol+3,w
 20778  2608  00D2               	movwf	i1___fttol@sign1
 20779  2609  17CB               	bsf	i1___fttol@f1+1,7
 20780  260A  30FF               	movlw	255
 20781  260B  05CA               	andwf	i1___fttol@f1,f
 20782  260C  30FF               	movlw	255
 20783  260D  05CB               	andwf	i1___fttol@f1+1,f
 20784  260E  3000               	movlw	0
 20785  260F  05CC               	andwf	i1___fttol@f1+2,f
 20786  2610  084A               	movf	i1___fttol@f1,w
 20787  2611  00D3               	movwf	i1___fttol@lval
 20788  2612  084B               	movf	i1___fttol@f1+1,w
 20789  2613  00D4               	movwf	i1___fttol@lval+1
 20790  2614  084C               	movf	i1___fttol@f1+2,w
 20791  2615  00D5               	movwf	i1___fttol@lval+2
 20792  2616  01D6               	clrf	i1___fttol@lval+3
 20793  2617  308E               	movlw	142
 20794  2618  02D7               	subwf	i1___fttol@exp1,f
 20795  2619  1FD7               	btfss	i1___fttol@exp1,7
 20796  261A  2E37               	goto	i1l6113
 20797  261B  0857               	movf	i1___fttol@exp1,w
 20798  261C  3A80               	xorlw	128
 20799  261D  3E8F               	addlw	143
 20800  261E  1803               	skipnc
 20801  261F  2E29               	goto	i1l6111
 20802  2620  3000               	movlw	0
 20803  2621  00CD               	movwf	?i1___fttol+3
 20804  2622  3000               	movlw	0
 20805  2623  00CC               	movwf	?i1___fttol+2
 20806  2624  3000               	movlw	0
 20807  2625  00CB               	movwf	?i1___fttol+1
 20808  2626  3000               	movlw	0
 20809  2627  00CA               	movwf	?i1___fttol
 20810  2628  0008               	return
 20811  2629                     i1l6111:	
 20812  2629  3001               	movlw	1
 20813  262A                     u604_25:	
 20814  262A  36D6               	lsrf	i1___fttol@lval+3,f
 20815  262B  0CD5               	rrf	i1___fttol@lval+2,f
 20816  262C  0CD4               	rrf	i1___fttol@lval+1,f
 20817  262D  0CD3               	rrf	i1___fttol@lval,f
 20818  262E  0B89               	decfsz	9,f
 20819  262F  2E2A               	goto	u604_25
 20820  2630  3001               	movlw	1
 20821  2631  00CE               	movwf	??i1___fttol
 20822  2632  084E               	movf	??i1___fttol,w
 20823  2633  07D7               	addwf	i1___fttol@exp1,f
 20824  2634  1903               	btfsc	3,2
 20825  2635  2E50               	goto	i1l6121
 20826  2636  2E29               	goto	i1l6111
 20827  2637                     i1l6113:	
 20828  2637  3018               	movlw	24
 20829  2638  0257               	subwf	i1___fttol@exp1,w
 20830  2639  1C03               	skipc
 20831  263A  2E4D               	goto	i1l2174
 20832  263B  3000               	movlw	0
 20833  263C  00CD               	movwf	?i1___fttol+3
 20834  263D  3000               	movlw	0
 20835  263E  00CC               	movwf	?i1___fttol+2
 20836  263F  3000               	movlw	0
 20837  2640  00CB               	movwf	?i1___fttol+1
 20838  2641  3000               	movlw	0
 20839  2642  00CA               	movwf	?i1___fttol
 20840  2643  0008               	return
 20841  2644                     i1l6119:	
 20842  2644  3001               	movlw	1
 20843  2645                     u607_25:	
 20844  2645  35D3               	lslf	i1___fttol@lval,f
 20845  2646  0DD4               	rlf	i1___fttol@lval+1,f
 20846  2647  0DD5               	rlf	i1___fttol@lval+2,f
 20847  2648  0DD6               	rlf	i1___fttol@lval+3,f
 20848  2649  0B89               	decfsz	9,f
 20849  264A  2E45               	goto	u607_25
 20850  264B  3001               	movlw	1
 20851  264C  02D7               	subwf	i1___fttol@exp1,f
 20852  264D                     i1l2174:	
 20853  264D  0857               	movf	i1___fttol@exp1,w
 20854  264E  1D03               	btfss	3,2
 20855  264F  2E44               	goto	i1l6119
 20856  2650                     i1l6121:	
 20857  2650  0852               	movf	i1___fttol@sign1,w
 20858  2651  1903               	btfsc	3,2
 20859  2652  2E5E               	goto	i1l6125
 20860  2653  09D3               	comf	i1___fttol@lval,f
 20861  2654  09D4               	comf	i1___fttol@lval+1,f
 20862  2655  09D5               	comf	i1___fttol@lval+2,f
 20863  2656  09D6               	comf	i1___fttol@lval+3,f
 20864  2657  0AD3               	incf	i1___fttol@lval,f
 20865  2658  1903               	skipnz
 20866  2659  0AD4               	incf	i1___fttol@lval+1,f
 20867  265A  1903               	skipnz
 20868  265B  0AD5               	incf	i1___fttol@lval+2,f
 20869  265C  1903               	skipnz
 20870  265D  0AD6               	incf	i1___fttol@lval+3,f
 20871  265E                     i1l6125:	
 20872  265E  0856               	movf	i1___fttol@lval+3,w
 20873  265F  00CD               	movwf	?i1___fttol+3
 20874  2660  0855               	movf	i1___fttol@lval+2,w
 20875  2661  00CC               	movwf	?i1___fttol+2
 20876  2662  0854               	movf	i1___fttol@lval+1,w
 20877  2663  00CB               	movwf	?i1___fttol+1
 20878  2664  0853               	movf	i1___fttol@lval,w
 20879  2665  00CA               	movwf	?i1___fttol
 20880  2666  0008               	return
 20881  2667                     __end_ofi1___fttol:	
 20882                           
 20883                           	psect	text78
 20884  2AD7                     __ptext78:	
 20885 ;; *************** function i1___ftneg *****************
 20886 ;; Defined at:
 20887 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 20888 ;; Parameters:    Size  Location     Type
 20889 ;;  f1              3   10[BANK0 ] float 
 20890 ;; Auto vars:     Size  Location     Type
 20891 ;;		None
 20892 ;; Return value:  Size  Location     Type
 20893 ;;                  3   10[BANK0 ] float 
 20894 ;; Registers used:
 20895 ;;		wreg
 20896 ;; Tracked objects:
 20897 ;;		On entry : 0/0
 20898 ;;		On exit  : 0/0
 20899 ;;		Unchanged: 0/0
 20900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20901 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20904 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20905 ;;Total ram usage:        3 bytes
 20906 ;; Hardware stack levels used:    1
 20907 ;; This function calls:
 20908 ;;		Nothing
 20909 ;; This function is called by:
 20910 ;;		_modTri
 20911 ;;		_modSaw
 20912 ;;		i1_modSin
 20913 ;; This function uses a non-reentrant model
 20914 ;;
 20915                           
 20916                           
 20917                           ;psect for function i1___ftneg
 20918  2AD7                     i1___ftneg:	
 20919                           
 20920                           ;incstack = 0
 20921                           ; Regs used in i1___ftneg: [wreg]
 20922  2AD7  0020               	movlb	0	; select bank0
 20923  2AD8  082C               	movf	i1___ftneg@f1+2,w
 20924  2AD9  042B               	iorwf	i1___ftneg@f1+1,w
 20925  2ADA  042A               	iorwf	i1___ftneg@f1,w
 20926  2ADB  1903               	skipnz
 20927  2ADC  0008               	return
 20928  2ADD  3080               	movlw	128
 20929  2ADE  06AC               	xorwf	i1___ftneg@f1+2,f
 20930  2ADF  0008               	return
 20931  2AE0                     __end_ofi1___ftneg:	
 20932                           
 20933                           	psect	text79
 20934  1C22                     __ptext79:	
 20935 ;; *************** function i1___ftmul *****************
 20936 ;; Defined at:
 20937 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 20938 ;; Parameters:    Size  Location     Type
 20939 ;;  f1              3    8[COMMON] float 
 20940 ;;  f2              3   11[COMMON] float 
 20941 ;; Auto vars:     Size  Location     Type
 20942 ;;  __ftmul         3    5[BANK0 ] unsigned um
 20943 ;;  __ftmul         1    9[BANK0 ] unsigned char 
 20944 ;;  __ftmul         1    8[BANK0 ] unsigned char 
 20945 ;;  __ftmul         1    4[BANK0 ] unsigned char 
 20946 ;; Return value:  Size  Location     Type
 20947 ;;                  3    8[COMMON] float 
 20948 ;; Registers used:
 20949 ;;		wreg, status,2, status,0, pclath, cstack
 20950 ;; Tracked objects:
 20951 ;;		On entry : 0/0
 20952 ;;		On exit  : 0/0
 20953 ;;		Unchanged: 0/0
 20954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20955 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20956 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20957 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20958 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20959 ;;Total ram usage:       16 bytes
 20960 ;; Hardware stack levels used:    1
 20961 ;; Hardware stack levels required when called:    1
 20962 ;; This function calls:
 20963 ;;		i1___ftpack
 20964 ;; This function is called by:
 20965 ;;		_modTri
 20966 ;;		_modSaw
 20967 ;;		i1_modSin
 20968 ;; This function uses a non-reentrant model
 20969 ;;
 20970                           
 20971                           
 20972                           ;psect for function i1___ftmul
 20973  1C22                     i1___ftmul:	
 20974                           
 20975                           ;incstack = 0
 20976                           ; Regs used in i1___ftmul: [wreg+status,2+status,0+pclath+cstack]
 20977  1C22  0878               	movf	i1___ftmul@f1,w
 20978  1C23  0020               	movlb	0	; select bank0
 20979  1C24  00A0               	movwf	??i1___ftmul
 20980  1C25  0879               	movf	i1___ftmul@f1+1,w
 20981  1C26  00A1               	movwf	??i1___ftmul+1
 20982  1C27  087A               	movf	i1___ftmul@f1+2,w
 20983  1C28  00A2               	movwf	??i1___ftmul+2
 20984  1C29  1003               	clrc
 20985  1C2A  0D21               	rlf	??i1___ftmul+1,w
 20986  1C2B  0D22               	rlf	??i1___ftmul+2,w
 20987  1C2C  00A3               	movwf	??i1___ftmul+3
 20988  1C2D  0823               	movf	??i1___ftmul+3,w
 20989  1C2E  00A4               	movwf	i1___ftmul@exp
 20990  1C2F  0824               	movf	i1___ftmul@exp,w
 20991  1C30  1D03               	btfss	3,2
 20992  1C31  2C39               	goto	i1l6035
 20993  1C32  3000               	movlw	0
 20994  1C33  00F8               	movwf	?i1___ftmul
 20995  1C34  3000               	movlw	0
 20996  1C35  00F9               	movwf	?i1___ftmul+1
 20997  1C36  3000               	movlw	0
 20998  1C37  00FA               	movwf	?i1___ftmul+2
 20999  1C38  0008               	return
 21000  1C39                     i1l6035:	
 21001  1C39  087B               	movf	i1___ftmul@f2,w
 21002  1C3A  00A0               	movwf	??i1___ftmul
 21003  1C3B  087C               	movf	i1___ftmul@f2+1,w
 21004  1C3C  00A1               	movwf	??i1___ftmul+1
 21005  1C3D  087D               	movf	i1___ftmul@f2+2,w
 21006  1C3E  00A2               	movwf	??i1___ftmul+2
 21007  1C3F  1003               	clrc
 21008  1C40  0D21               	rlf	??i1___ftmul+1,w
 21009  1C41  0D22               	rlf	??i1___ftmul+2,w
 21010  1C42  00A3               	movwf	??i1___ftmul+3
 21011  1C43  0823               	movf	??i1___ftmul+3,w
 21012  1C44  00A9               	movwf	i1___ftmul@sign
 21013  1C45  0829               	movf	i1___ftmul@sign,w
 21014  1C46  1D03               	btfss	3,2
 21015  1C47  2C4F               	goto	i1l6041
 21016  1C48  3000               	movlw	0
 21017  1C49  00F8               	movwf	?i1___ftmul
 21018  1C4A  3000               	movlw	0
 21019  1C4B  00F9               	movwf	?i1___ftmul+1
 21020  1C4C  3000               	movlw	0
 21021  1C4D  00FA               	movwf	?i1___ftmul+2
 21022  1C4E  0008               	return
 21023  1C4F                     i1l6041:	
 21024  1C4F  0829               	movf	i1___ftmul@sign,w
 21025  1C50  3E7B               	addlw	123
 21026  1C51  00A0               	movwf	??i1___ftmul
 21027  1C52  0820               	movf	??i1___ftmul,w
 21028  1C53  07A4               	addwf	i1___ftmul@exp,f
 21029  1C54  0878               	movf	i1___ftmul@f1,w
 21030  1C55  00A0               	movwf	??i1___ftmul
 21031  1C56  0879               	movf	i1___ftmul@f1+1,w
 21032  1C57  00A1               	movwf	??i1___ftmul+1
 21033  1C58  087A               	movf	i1___ftmul@f1+2,w
 21034  1C59  00A2               	movwf	??i1___ftmul+2
 21035  1C5A  3010               	movlw	16
 21036  1C5B                     u589_25:	
 21037  1C5B  36A2               	lsrf	??i1___ftmul+2,f
 21038  1C5C  0CA1               	rrf	??i1___ftmul+1,f
 21039  1C5D  0CA0               	rrf	??i1___ftmul,f
 21040  1C5E  0B89               	decfsz	9,f
 21041  1C5F  2C5B               	goto	u589_25
 21042  1C60  0820               	movf	??i1___ftmul,w
 21043  1C61  00A3               	movwf	??i1___ftmul+3
 21044  1C62  0823               	movf	??i1___ftmul+3,w
 21045  1C63  00A9               	movwf	i1___ftmul@sign
 21046  1C64  087B               	movf	i1___ftmul@f2,w
 21047  1C65  00A0               	movwf	??i1___ftmul
 21048  1C66  087C               	movf	i1___ftmul@f2+1,w
 21049  1C67  00A1               	movwf	??i1___ftmul+1
 21050  1C68  087D               	movf	i1___ftmul@f2+2,w
 21051  1C69  00A2               	movwf	??i1___ftmul+2
 21052  1C6A  3010               	movlw	16
 21053  1C6B                     u590_25:	
 21054  1C6B  36A2               	lsrf	??i1___ftmul+2,f
 21055  1C6C  0CA1               	rrf	??i1___ftmul+1,f
 21056  1C6D  0CA0               	rrf	??i1___ftmul,f
 21057  1C6E  0B89               	decfsz	9,f
 21058  1C6F  2C6B               	goto	u590_25
 21059  1C70  0820               	movf	??i1___ftmul,w
 21060  1C71  00A3               	movwf	??i1___ftmul+3
 21061  1C72  0823               	movf	??i1___ftmul+3,w
 21062  1C73  06A9               	xorwf	i1___ftmul@sign,f
 21063  1C74  3080               	movlw	128
 21064  1C75  00A0               	movwf	??i1___ftmul
 21065  1C76  0820               	movf	??i1___ftmul,w
 21066  1C77  05A9               	andwf	i1___ftmul@sign,f
 21067  1C78  17F9               	bsf	i1___ftmul@f1+1,7
 21068  1C79  17FC               	bsf	i1___ftmul@f2+1,7
 21069  1C7A  30FF               	movlw	255
 21070  1C7B  05FB               	andwf	i1___ftmul@f2,f
 21071  1C7C  30FF               	movlw	255
 21072  1C7D  05FC               	andwf	i1___ftmul@f2+1,f
 21073  1C7E  3000               	movlw	0
 21074  1C7F  05FD               	andwf	i1___ftmul@f2+2,f
 21075  1C80  3000               	movlw	0
 21076  1C81  00A5               	movwf	i1___ftmul@f3_as_product
 21077  1C82  3000               	movlw	0
 21078  1C83  00A6               	movwf	i1___ftmul@f3_as_product+1
 21079  1C84  3000               	movlw	0
 21080  1C85  00A7               	movwf	i1___ftmul@f3_as_product+2
 21081  1C86  3007               	movlw	7
 21082  1C87  00A0               	movwf	??i1___ftmul
 21083  1C88  0820               	movf	??i1___ftmul,w
 21084  1C89  00A8               	movwf	i1___ftmul@cntr
 21085  1C8A                     i1l6053:	
 21086  1C8A  1C78               	btfss	i1___ftmul@f1,0
 21087  1C8B  2C92               	goto	i1l6057
 21088  1C8C  087B               	movf	i1___ftmul@f2,w
 21089  1C8D  07A5               	addwf	i1___ftmul@f3_as_product,f
 21090  1C8E  087C               	movf	i1___ftmul@f2+1,w
 21091  1C8F  3DA6               	addwfc	i1___ftmul@f3_as_product+1,f
 21092  1C90  087D               	movf	i1___ftmul@f2+2,w
 21093  1C91  3DA7               	addwfc	i1___ftmul@f3_as_product+2,f
 21094  1C92                     i1l6057:	
 21095  1C92  3001               	movlw	1
 21096  1C93                     u592_25:	
 21097  1C93  36FA               	lsrf	i1___ftmul@f1+2,f
 21098  1C94  0CF9               	rrf	i1___ftmul@f1+1,f
 21099  1C95  0CF8               	rrf	i1___ftmul@f1,f
 21100  1C96  0B89               	decfsz	9,f
 21101  1C97  2C93               	goto	u592_25
 21102  1C98  3001               	movlw	1
 21103  1C99                     u593_25:	
 21104  1C99  35FB               	lslf	i1___ftmul@f2,f
 21105  1C9A  0DFC               	rlf	i1___ftmul@f2+1,f
 21106  1C9B  0DFD               	rlf	i1___ftmul@f2+2,f
 21107  1C9C  0B89               	decfsz	9,f
 21108  1C9D  2C99               	goto	u593_25
 21109  1C9E  3001               	movlw	1
 21110  1C9F  02A8               	subwf	i1___ftmul@cntr,f
 21111  1CA0  1D03               	btfss	3,2
 21112  1CA1  2C8A               	goto	i1l6053
 21113  1CA2  3009               	movlw	9
 21114  1CA3  00A0               	movwf	??i1___ftmul
 21115  1CA4  0820               	movf	??i1___ftmul,w
 21116  1CA5  00A8               	movwf	i1___ftmul@cntr
 21117  1CA6                     i1l6065:	
 21118  1CA6  1C78               	btfss	i1___ftmul@f1,0
 21119  1CA7  2CAE               	goto	i1l6069
 21120  1CA8  087B               	movf	i1___ftmul@f2,w
 21121  1CA9  07A5               	addwf	i1___ftmul@f3_as_product,f
 21122  1CAA  087C               	movf	i1___ftmul@f2+1,w
 21123  1CAB  3DA6               	addwfc	i1___ftmul@f3_as_product+1,f
 21124  1CAC  087D               	movf	i1___ftmul@f2+2,w
 21125  1CAD  3DA7               	addwfc	i1___ftmul@f3_as_product+2,f
 21126  1CAE                     i1l6069:	
 21127  1CAE  3001               	movlw	1
 21128  1CAF                     u596_25:	
 21129  1CAF  36FA               	lsrf	i1___ftmul@f1+2,f
 21130  1CB0  0CF9               	rrf	i1___ftmul@f1+1,f
 21131  1CB1  0CF8               	rrf	i1___ftmul@f1,f
 21132  1CB2  0B89               	decfsz	9,f
 21133  1CB3  2CAF               	goto	u596_25
 21134  1CB4  3001               	movlw	1
 21135  1CB5                     u597_25:	
 21136  1CB5  36A7               	lsrf	i1___ftmul@f3_as_product+2,f
 21137  1CB6  0CA6               	rrf	i1___ftmul@f3_as_product+1,f
 21138  1CB7  0CA5               	rrf	i1___ftmul@f3_as_product,f
 21139  1CB8  0B89               	decfsz	9,f
 21140  1CB9  2CB5               	goto	u597_25
 21141  1CBA  3001               	movlw	1
 21142  1CBB  02A8               	subwf	i1___ftmul@cntr,f
 21143  1CBC  1D03               	btfss	3,2
 21144  1CBD  2CA6               	goto	i1l6065
 21145  1CBE  0825               	movf	i1___ftmul@f3_as_product,w
 21146  1CBF  00F0               	movwf	i1___ftpack@arg
 21147  1CC0  0826               	movf	i1___ftmul@f3_as_product+1,w
 21148  1CC1  00F1               	movwf	i1___ftpack@arg+1
 21149  1CC2  0827               	movf	i1___ftmul@f3_as_product+2,w
 21150  1CC3  00F2               	movwf	i1___ftpack@arg+2
 21151  1CC4  0824               	movf	i1___ftmul@exp,w
 21152  1CC5  00A0               	movwf	??i1___ftmul
 21153  1CC6  0820               	movf	??i1___ftmul,w
 21154  1CC7  00F3               	movwf	i1___ftpack@exp
 21155  1CC8  0829               	movf	i1___ftmul@sign,w
 21156  1CC9  00A1               	movwf	??i1___ftmul+1
 21157  1CCA  0821               	movf	??i1___ftmul+1,w
 21158  1CCB  00F4               	movwf	i1___ftpack@sign
 21159  1CCC  31A3  231C         	fcall	i1___ftpack
 21160  1CCE  0870               	movf	?i1___ftpack,w
 21161  1CCF  00F8               	movwf	?i1___ftmul
 21162  1CD0  0871               	movf	?i1___ftpack+1,w
 21163  1CD1  00F9               	movwf	?i1___ftmul+1
 21164  1CD2  0872               	movf	?i1___ftpack+2,w
 21165  1CD3  00FA               	movwf	?i1___ftmul+2
 21166  1CD4  0008               	return
 21167  1CD5                     __end_ofi1___ftmul:	
 21168                           
 21169                           	psect	text80
 21170  2E4A                     __ptext80:	
 21171 ;; *************** function i1___ftge *****************
 21172 ;; Defined at:
 21173 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 21174 ;; Parameters:    Size  Location     Type
 21175 ;;  ff1             3    0[COMMON] float 
 21176 ;;  ff2             3    3[COMMON] float 
 21177 ;; Auto vars:     Size  Location     Type
 21178 ;;		None
 21179 ;; Return value:  Size  Location     Type
 21180 ;;		None               void
 21181 ;; Registers used:
 21182 ;;		wreg, status,2, status,0
 21183 ;; Tracked objects:
 21184 ;;		On entry : 0/0
 21185 ;;		On exit  : 0/0
 21186 ;;		Unchanged: 0/0
 21187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21188 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21190 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21191 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21192 ;;Total ram usage:        9 bytes
 21193 ;; Hardware stack levels used:    1
 21194 ;; This function calls:
 21195 ;;		Nothing
 21196 ;; This function is called by:
 21197 ;;		_modTri
 21198 ;;		_modSaw
 21199 ;;		_modSquare
 21200 ;;		i1_modSin
 21201 ;; This function uses a non-reentrant model
 21202 ;;
 21203                           
 21204                           
 21205                           ;psect for function i1___ftge
 21206  2E4A                     i1___ftge:	
 21207                           
 21208                           ;incstack = 0
 21209                           ; Regs used in i1___ftge: [wreg+status,2+status,0]
 21210  2E4A  1FF2               	btfss	i1___ftge@ff1+2,7
 21211  2E4B  2E60               	goto	i1l6013
 21212  2E4C  0970               	comf	i1___ftge@ff1,w
 21213  2E4D  00F6               	movwf	??i1___ftge
 21214  2E4E  0971               	comf	i1___ftge@ff1+1,w
 21215  2E4F  00F7               	movwf	??i1___ftge+1
 21216  2E50  0972               	comf	i1___ftge@ff1+2,w
 21217  2E51  00F8               	movwf	??i1___ftge+2
 21218  2E52  0AF6               	incf	??i1___ftge,f
 21219  2E53  1903               	skipnz
 21220  2E54  0AF7               	incf	??i1___ftge+1,f
 21221  2E55  1903               	skipnz
 21222  2E56  0AF8               	incf	??i1___ftge+2,f
 21223  2E57  3000               	movlw	0
 21224  2E58  0776               	addwf	??i1___ftge,w
 21225  2E59  00F0               	movwf	i1___ftge@ff1
 21226  2E5A  3000               	movlw	0
 21227  2E5B  3D77               	addwfc	??i1___ftge+1,w
 21228  2E5C  00F1               	movwf	i1___ftge@ff1+1
 21229  2E5D  3080               	movlw	128
 21230  2E5E  3D78               	addwfc	??i1___ftge+2,w
 21231  2E5F  00F2               	movwf	i1___ftge@ff1+2
 21232  2E60                     i1l6013:	
 21233  2E60  1FF5               	btfss	i1___ftge@ff2+2,7
 21234  2E61  2E76               	goto	i1l6017
 21235  2E62  0973               	comf	i1___ftge@ff2,w
 21236  2E63  00F6               	movwf	??i1___ftge
 21237  2E64  0974               	comf	i1___ftge@ff2+1,w
 21238  2E65  00F7               	movwf	??i1___ftge+1
 21239  2E66  0975               	comf	i1___ftge@ff2+2,w
 21240  2E67  00F8               	movwf	??i1___ftge+2
 21241  2E68  0AF6               	incf	??i1___ftge,f
 21242  2E69  1903               	skipnz
 21243  2E6A  0AF7               	incf	??i1___ftge+1,f
 21244  2E6B  1903               	skipnz
 21245  2E6C  0AF8               	incf	??i1___ftge+2,f
 21246  2E6D  3000               	movlw	0
 21247  2E6E  0776               	addwf	??i1___ftge,w
 21248  2E6F  00F3               	movwf	i1___ftge@ff2
 21249  2E70  3000               	movlw	0
 21250  2E71  3D77               	addwfc	??i1___ftge+1,w
 21251  2E72  00F4               	movwf	i1___ftge@ff2+1
 21252  2E73  3080               	movlw	128
 21253  2E74  3D78               	addwfc	??i1___ftge+2,w
 21254  2E75  00F5               	movwf	i1___ftge@ff2+2
 21255  2E76                     i1l6017:	
 21256  2E76  3080               	movlw	128
 21257  2E77  06F2               	xorwf	i1___ftge@ff1+2,f
 21258  2E78  3080               	movlw	128
 21259  2E79  06F5               	xorwf	i1___ftge@ff2+2,f
 21260  2E7A  0875               	movf	i1___ftge@ff2+2,w
 21261  2E7B  0272               	subwf	i1___ftge@ff1+2,w
 21262  2E7C  1D03               	skipz
 21263  2E7D  0008               	return
 21264  2E7E  0874               	movf	i1___ftge@ff2+1,w
 21265  2E7F  0271               	subwf	i1___ftge@ff1+1,w
 21266  2E80  1D03               	skipz
 21267  2E81  0008               	return
 21268  2E82  0873               	movf	i1___ftge@ff2,w
 21269  2E83  0270               	subwf	i1___ftge@ff1,w
 21270  2E84  0008               	return
 21271  2E85                     __end_ofi1___ftge:	
 21272                           
 21273                           	psect	text81
 21274  1A25                     __ptext81:	
 21275 ;; *************** function i1___ftdiv *****************
 21276 ;; Defined at:
 21277 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 21278 ;; Parameters:    Size  Location     Type
 21279 ;;  f2              3   26[BANK0 ] float 
 21280 ;;  f1              3   29[BANK0 ] float 
 21281 ;; Auto vars:     Size  Location     Type
 21282 ;;  __ftdiv         3   37[BANK0 ] float 
 21283 ;;  __ftdiv         1   41[BANK0 ] unsigned char 
 21284 ;;  __ftdiv         1   40[BANK0 ] unsigned char 
 21285 ;;  __ftdiv         1   36[BANK0 ] unsigned char 
 21286 ;; Return value:  Size  Location     Type
 21287 ;;                  3   26[BANK0 ] float 
 21288 ;; Registers used:
 21289 ;;		wreg, status,2, status,0, pclath, cstack
 21290 ;; Tracked objects:
 21291 ;;		On entry : 0/0
 21292 ;;		On exit  : 0/0
 21293 ;;		Unchanged: 0/0
 21294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21295 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21296 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21297 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21298 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21299 ;;Total ram usage:       16 bytes
 21300 ;; Hardware stack levels used:    1
 21301 ;; Hardware stack levels required when called:    1
 21302 ;; This function calls:
 21303 ;;		i1___ftpack
 21304 ;; This function is called by:
 21305 ;;		_modTri
 21306 ;;		_modSaw
 21307 ;;		i1_modSin
 21308 ;; This function uses a non-reentrant model
 21309 ;;
 21310                           
 21311                           
 21312                           ;psect for function i1___ftdiv
 21313  1A25                     i1___ftdiv:	
 21314                           
 21315                           ;incstack = 0
 21316                           ; Regs used in i1___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 21317  1A25  0020               	movlb	0	; select bank0
 21318  1A26  083D               	movf	i1___ftdiv@f1,w
 21319  1A27  00C0               	movwf	??i1___ftdiv
 21320  1A28  083E               	movf	i1___ftdiv@f1+1,w
 21321  1A29  00C1               	movwf	??i1___ftdiv+1
 21322  1A2A  083F               	movf	i1___ftdiv@f1+2,w
 21323  1A2B  00C2               	movwf	??i1___ftdiv+2
 21324  1A2C  1003               	clrc
 21325  1A2D  0D41               	rlf	??i1___ftdiv+1,w
 21326  1A2E  0D42               	rlf	??i1___ftdiv+2,w
 21327  1A2F  00C3               	movwf	??i1___ftdiv+3
 21328  1A30  0843               	movf	??i1___ftdiv+3,w
 21329  1A31  00C8               	movwf	i1___ftdiv@exp
 21330  1A32  0848               	movf	i1___ftdiv@exp,w
 21331  1A33  1D03               	btfss	3,2
 21332  1A34  2A3C               	goto	i1l5973
 21333  1A35  3000               	movlw	0
 21334  1A36  00BA               	movwf	?i1___ftdiv
 21335  1A37  3000               	movlw	0
 21336  1A38  00BB               	movwf	?i1___ftdiv+1
 21337  1A39  3000               	movlw	0
 21338  1A3A  00BC               	movwf	?i1___ftdiv+2
 21339  1A3B  0008               	return
 21340  1A3C                     i1l5973:	
 21341  1A3C  083A               	movf	i1___ftdiv@f2,w
 21342  1A3D  00C0               	movwf	??i1___ftdiv
 21343  1A3E  083B               	movf	i1___ftdiv@f2+1,w
 21344  1A3F  00C1               	movwf	??i1___ftdiv+1
 21345  1A40  083C               	movf	i1___ftdiv@f2+2,w
 21346  1A41  00C2               	movwf	??i1___ftdiv+2
 21347  1A42  1003               	clrc
 21348  1A43  0D41               	rlf	??i1___ftdiv+1,w
 21349  1A44  0D42               	rlf	??i1___ftdiv+2,w
 21350  1A45  00C3               	movwf	??i1___ftdiv+3
 21351  1A46  0843               	movf	??i1___ftdiv+3,w
 21352  1A47  00C9               	movwf	i1___ftdiv@sign
 21353  1A48  0849               	movf	i1___ftdiv@sign,w
 21354  1A49  1D03               	btfss	3,2
 21355  1A4A  2A52               	goto	i1l5979
 21356  1A4B  3000               	movlw	0
 21357  1A4C  00BA               	movwf	?i1___ftdiv
 21358  1A4D  3000               	movlw	0
 21359  1A4E  00BB               	movwf	?i1___ftdiv+1
 21360  1A4F  3000               	movlw	0
 21361  1A50  00BC               	movwf	?i1___ftdiv+2
 21362  1A51  0008               	return
 21363  1A52                     i1l5979:	
 21364  1A52  3000               	movlw	0
 21365  1A53  00C5               	movwf	i1___ftdiv@f3
 21366  1A54  3000               	movlw	0
 21367  1A55  00C6               	movwf	i1___ftdiv@f3+1
 21368  1A56  3000               	movlw	0
 21369  1A57  00C7               	movwf	i1___ftdiv@f3+2
 21370  1A58  3089               	movlw	137
 21371  1A59  0749               	addwf	i1___ftdiv@sign,w
 21372  1A5A  00C0               	movwf	??i1___ftdiv
 21373  1A5B  0840               	movf	??i1___ftdiv,w
 21374  1A5C  02C8               	subwf	i1___ftdiv@exp,f
 21375  1A5D  083D               	movf	i1___ftdiv@f1,w
 21376  1A5E  00C0               	movwf	??i1___ftdiv
 21377  1A5F  083E               	movf	i1___ftdiv@f1+1,w
 21378  1A60  00C1               	movwf	??i1___ftdiv+1
 21379  1A61  083F               	movf	i1___ftdiv@f1+2,w
 21380  1A62  00C2               	movwf	??i1___ftdiv+2
 21381  1A63  3010               	movlw	16
 21382  1A64                     u578_25:	
 21383  1A64  36C2               	lsrf	??i1___ftdiv+2,f
 21384  1A65  0CC1               	rrf	??i1___ftdiv+1,f
 21385  1A66  0CC0               	rrf	??i1___ftdiv,f
 21386  1A67  0B89               	decfsz	9,f
 21387  1A68  2A64               	goto	u578_25
 21388  1A69  0840               	movf	??i1___ftdiv,w
 21389  1A6A  00C3               	movwf	??i1___ftdiv+3
 21390  1A6B  0843               	movf	??i1___ftdiv+3,w
 21391  1A6C  00C9               	movwf	i1___ftdiv@sign
 21392  1A6D  083A               	movf	i1___ftdiv@f2,w
 21393  1A6E  00C0               	movwf	??i1___ftdiv
 21394  1A6F  083B               	movf	i1___ftdiv@f2+1,w
 21395  1A70  00C1               	movwf	??i1___ftdiv+1
 21396  1A71  083C               	movf	i1___ftdiv@f2+2,w
 21397  1A72  00C2               	movwf	??i1___ftdiv+2
 21398  1A73  3010               	movlw	16
 21399  1A74                     u579_25:	
 21400  1A74  36C2               	lsrf	??i1___ftdiv+2,f
 21401  1A75  0CC1               	rrf	??i1___ftdiv+1,f
 21402  1A76  0CC0               	rrf	??i1___ftdiv,f
 21403  1A77  0B89               	decfsz	9,f
 21404  1A78  2A74               	goto	u579_25
 21405  1A79  0840               	movf	??i1___ftdiv,w
 21406  1A7A  00C3               	movwf	??i1___ftdiv+3
 21407  1A7B  0843               	movf	??i1___ftdiv+3,w
 21408  1A7C  06C9               	xorwf	i1___ftdiv@sign,f
 21409  1A7D  3080               	movlw	128
 21410  1A7E  00C0               	movwf	??i1___ftdiv
 21411  1A7F  0840               	movf	??i1___ftdiv,w
 21412  1A80  05C9               	andwf	i1___ftdiv@sign,f
 21413  1A81  17BE               	bsf	i1___ftdiv@f1+1,7
 21414  1A82  30FF               	movlw	255
 21415  1A83  05BD               	andwf	i1___ftdiv@f1,f
 21416  1A84  30FF               	movlw	255
 21417  1A85  05BE               	andwf	i1___ftdiv@f1+1,f
 21418  1A86  3000               	movlw	0
 21419  1A87  05BF               	andwf	i1___ftdiv@f1+2,f
 21420  1A88  17BB               	bsf	i1___ftdiv@f2+1,7
 21421  1A89  30FF               	movlw	255
 21422  1A8A  05BA               	andwf	i1___ftdiv@f2,f
 21423  1A8B  30FF               	movlw	255
 21424  1A8C  05BB               	andwf	i1___ftdiv@f2+1,f
 21425  1A8D  3000               	movlw	0
 21426  1A8E  05BC               	andwf	i1___ftdiv@f2+2,f
 21427  1A8F  3018               	movlw	24
 21428  1A90  00C0               	movwf	??i1___ftdiv
 21429  1A91  0840               	movf	??i1___ftdiv,w
 21430  1A92  00C4               	movwf	i1___ftdiv@cntr
 21431  1A93                     i1l5993:	
 21432  1A93  3001               	movlw	1
 21433  1A94                     u580_25:	
 21434  1A94  35C5               	lslf	i1___ftdiv@f3,f
 21435  1A95  0DC6               	rlf	i1___ftdiv@f3+1,f
 21436  1A96  0DC7               	rlf	i1___ftdiv@f3+2,f
 21437  1A97  0B89               	decfsz	9,f
 21438  1A98  2A94               	goto	u580_25
 21439  1A99  083C               	movf	i1___ftdiv@f2+2,w
 21440  1A9A  023F               	subwf	i1___ftdiv@f1+2,w
 21441  1A9B  1D03               	skipz
 21442  1A9C  2AA3               	goto	u581_25
 21443  1A9D  083B               	movf	i1___ftdiv@f2+1,w
 21444  1A9E  023E               	subwf	i1___ftdiv@f1+1,w
 21445  1A9F  1D03               	skipz
 21446  1AA0  2AA3               	goto	u581_25
 21447  1AA1  083A               	movf	i1___ftdiv@f2,w
 21448  1AA2  023D               	subwf	i1___ftdiv@f1,w
 21449  1AA3                     u581_25:	
 21450  1AA3  1C03               	skipc
 21451  1AA4  2AAC               	goto	i1l6001
 21452  1AA5  083A               	movf	i1___ftdiv@f2,w
 21453  1AA6  02BD               	subwf	i1___ftdiv@f1,f
 21454  1AA7  083B               	movf	i1___ftdiv@f2+1,w
 21455  1AA8  3BBE               	subwfb	i1___ftdiv@f1+1,f
 21456  1AA9  083C               	movf	i1___ftdiv@f2+2,w
 21457  1AAA  3BBF               	subwfb	i1___ftdiv@f1+2,f
 21458  1AAB  1445               	bsf	i1___ftdiv@f3,0
 21459  1AAC                     i1l6001:	
 21460  1AAC  3001               	movlw	1
 21461  1AAD                     u582_25:	
 21462  1AAD  35BD               	lslf	i1___ftdiv@f1,f
 21463  1AAE  0DBE               	rlf	i1___ftdiv@f1+1,f
 21464  1AAF  0DBF               	rlf	i1___ftdiv@f1+2,f
 21465  1AB0  0B89               	decfsz	9,f
 21466  1AB1  2AAD               	goto	u582_25
 21467  1AB2  3001               	movlw	1
 21468  1AB3  02C4               	subwf	i1___ftdiv@cntr,f
 21469  1AB4  1D03               	btfss	3,2
 21470  1AB5  2A93               	goto	i1l5993
 21471  1AB6  0845               	movf	i1___ftdiv@f3,w
 21472  1AB7  00F0               	movwf	i1___ftpack@arg
 21473  1AB8  0846               	movf	i1___ftdiv@f3+1,w
 21474  1AB9  00F1               	movwf	i1___ftpack@arg+1
 21475  1ABA  0847               	movf	i1___ftdiv@f3+2,w
 21476  1ABB  00F2               	movwf	i1___ftpack@arg+2
 21477  1ABC  0848               	movf	i1___ftdiv@exp,w
 21478  1ABD  00C0               	movwf	??i1___ftdiv
 21479  1ABE  0840               	movf	??i1___ftdiv,w
 21480  1ABF  00F3               	movwf	i1___ftpack@exp
 21481  1AC0  0849               	movf	i1___ftdiv@sign,w
 21482  1AC1  00C1               	movwf	??i1___ftdiv+1
 21483  1AC2  0841               	movf	??i1___ftdiv+1,w
 21484  1AC3  00F4               	movwf	i1___ftpack@sign
 21485  1AC4  31A3  231C         	fcall	i1___ftpack
 21486  1AC6  0870               	movf	?i1___ftpack,w
 21487  1AC7  0020               	movlb	0	; select bank0
 21488  1AC8  00BA               	movwf	?i1___ftdiv
 21489  1AC9  0871               	movf	?i1___ftpack+1,w
 21490  1ACA  00BB               	movwf	?i1___ftdiv+1
 21491  1ACB  0872               	movf	?i1___ftpack+2,w
 21492  1ACC  00BC               	movwf	?i1___ftdiv+2
 21493  1ACD  0008               	return
 21494  1ACE                     __end_ofi1___ftdiv:	
 21495                           
 21496                           	psect	text82
 21497  1020                     __ptext82:	
 21498 ;; *************** function i1___ftadd *****************
 21499 ;; Defined at:
 21500 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 21501 ;; Parameters:    Size  Location     Type
 21502 ;;  f1              3   13[BANK0 ] float 
 21503 ;;  f2              3   16[BANK0 ] float 
 21504 ;; Auto vars:     Size  Location     Type
 21505 ;;  __ftadd         1   25[BANK0 ] unsigned char 
 21506 ;;  __ftadd         1   24[BANK0 ] unsigned char 
 21507 ;;  __ftadd         1   23[BANK0 ] unsigned char 
 21508 ;; Return value:  Size  Location     Type
 21509 ;;                  3   13[BANK0 ] float 
 21510 ;; Registers used:
 21511 ;;		wreg, status,2, status,0, pclath, cstack
 21512 ;; Tracked objects:
 21513 ;;		On entry : 0/0
 21514 ;;		On exit  : 0/0
 21515 ;;		Unchanged: 0/0
 21516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21517 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21518 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21519 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21520 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21521 ;;Total ram usage:       13 bytes
 21522 ;; Hardware stack levels used:    1
 21523 ;; Hardware stack levels required when called:    1
 21524 ;; This function calls:
 21525 ;;		i1___ftpack
 21526 ;; This function is called by:
 21527 ;;		_modTri
 21528 ;;		_modSaw
 21529 ;;		i1_modSin
 21530 ;; This function uses a non-reentrant model
 21531 ;;
 21532                           
 21533                           
 21534                           ;psect for function i1___ftadd
 21535  1020                     i1___ftadd:	
 21536                           
 21537                           ;incstack = 0
 21538                           ; Regs used in i1___ftadd: [wreg+status,2+status,0+pclath+cstack]
 21539  1020  0020               	movlb	0	; select bank0
 21540  1021  082D               	movf	i1___ftadd@f1,w
 21541  1022  00B3               	movwf	??i1___ftadd
 21542  1023  082E               	movf	i1___ftadd@f1+1,w
 21543  1024  00B4               	movwf	??i1___ftadd+1
 21544  1025  082F               	movf	i1___ftadd@f1+2,w
 21545  1026  00B5               	movwf	??i1___ftadd+2
 21546  1027  1003               	clrc
 21547  1028  0D34               	rlf	??i1___ftadd+1,w
 21548  1029  0D35               	rlf	??i1___ftadd+2,w
 21549  102A  00B6               	movwf	??i1___ftadd+3
 21550  102B  0836               	movf	??i1___ftadd+3,w
 21551  102C  00B9               	movwf	i1___ftadd@exp1
 21552  102D  0830               	movf	i1___ftadd@f2,w
 21553  102E  00B3               	movwf	??i1___ftadd
 21554  102F  0831               	movf	i1___ftadd@f2+1,w
 21555  1030  00B4               	movwf	??i1___ftadd+1
 21556  1031  0832               	movf	i1___ftadd@f2+2,w
 21557  1032  00B5               	movwf	??i1___ftadd+2
 21558  1033  1003               	clrc
 21559  1034  0D34               	rlf	??i1___ftadd+1,w
 21560  1035  0D35               	rlf	??i1___ftadd+2,w
 21561  1036  00B6               	movwf	??i1___ftadd+3
 21562  1037  0836               	movf	??i1___ftadd+3,w
 21563  1038  00B8               	movwf	i1___ftadd@exp2
 21564  1039  0839               	movf	i1___ftadd@exp1,w
 21565  103A  1903               	btfsc	3,2
 21566  103B  2848               	goto	i1l5903
 21567  103C  0838               	movf	i1___ftadd@exp2,w
 21568  103D  0239               	subwf	i1___ftadd@exp1,w
 21569  103E  1803               	skipnc
 21570  103F  284F               	goto	i1l5907
 21571  1040  0339               	decf	i1___ftadd@exp1,w
 21572  1041  3AFF               	xorlw	255
 21573  1042  0738               	addwf	i1___ftadd@exp2,w
 21574  1043  00B3               	movwf	??i1___ftadd
 21575  1044  3019               	movlw	25
 21576  1045  0233               	subwf	??i1___ftadd,w
 21577  1046  1C03               	skipc
 21578  1047  284F               	goto	i1l5907
 21579  1048                     i1l5903:	
 21580  1048  0830               	movf	i1___ftadd@f2,w
 21581  1049  00AD               	movwf	?i1___ftadd
 21582  104A  0831               	movf	i1___ftadd@f2+1,w
 21583  104B  00AE               	movwf	?i1___ftadd+1
 21584  104C  0832               	movf	i1___ftadd@f2+2,w
 21585  104D  00AF               	movwf	?i1___ftadd+2
 21586  104E  0008               	return
 21587  104F                     i1l5907:	
 21588  104F  0838               	movf	i1___ftadd@exp2,w
 21589  1050  1903               	btfsc	3,2
 21590  1051  0008               	return
 21591  1052  0839               	movf	i1___ftadd@exp1,w
 21592  1053  0238               	subwf	i1___ftadd@exp2,w
 21593  1054  1803               	skipnc
 21594  1055  285E               	goto	i1l5913
 21595  1056  0338               	decf	i1___ftadd@exp2,w
 21596  1057  3AFF               	xorlw	255
 21597  1058  0739               	addwf	i1___ftadd@exp1,w
 21598  1059  00B3               	movwf	??i1___ftadd
 21599  105A  3019               	movlw	25
 21600  105B  0233               	subwf	??i1___ftadd,w
 21601  105C  1803               	btfsc	3,0
 21602  105D  0008               	return
 21603  105E                     i1l5913:	
 21604  105E  3006               	movlw	6
 21605  105F  00B3               	movwf	??i1___ftadd
 21606  1060  0833               	movf	??i1___ftadd,w
 21607  1061  00B7               	movwf	i1___ftadd@sign
 21608  1062  1BAF               	btfsc	i1___ftadd@f1+2,7
 21609  1063  17B7               	bsf	i1___ftadd@sign,7
 21610  1064  1BB2               	btfsc	i1___ftadd@f2+2,7
 21611  1065  1737               	bsf	i1___ftadd@sign,6
 21612  1066  17AE               	bsf	i1___ftadd@f1+1,7
 21613  1067  30FF               	movlw	255
 21614  1068  05AD               	andwf	i1___ftadd@f1,f
 21615  1069  30FF               	movlw	255
 21616  106A  05AE               	andwf	i1___ftadd@f1+1,f
 21617  106B  3000               	movlw	0
 21618  106C  05AF               	andwf	i1___ftadd@f1+2,f
 21619  106D  17B1               	bsf	i1___ftadd@f2+1,7
 21620  106E  30FF               	movlw	255
 21621  106F  05B0               	andwf	i1___ftadd@f2,f
 21622  1070  30FF               	movlw	255
 21623  1071  05B1               	andwf	i1___ftadd@f2+1,f
 21624  1072  3000               	movlw	0
 21625  1073  05B2               	andwf	i1___ftadd@f2+2,f
 21626  1074  0838               	movf	i1___ftadd@exp2,w
 21627  1075  0239               	subwf	i1___ftadd@exp1,w
 21628  1076  1803               	skipnc
 21629  1077  289A               	goto	i1l5935
 21630  1078                     i1l5925:	
 21631  1078  3001               	movlw	1
 21632  1079                     u562_25:	
 21633  1079  35B0               	lslf	i1___ftadd@f2,f
 21634  107A  0DB1               	rlf	i1___ftadd@f2+1,f
 21635  107B  0DB2               	rlf	i1___ftadd@f2+2,f
 21636  107C  0B89               	decfsz	9,f
 21637  107D  2879               	goto	u562_25
 21638  107E  3001               	movlw	1
 21639  107F  02B8               	subwf	i1___ftadd@exp2,f
 21640  1080  0838               	movf	i1___ftadd@exp2,w
 21641  1081  0639               	xorwf	i1___ftadd@exp1,w
 21642  1082  1903               	skipnz
 21643  1083  2895               	goto	i1l5933
 21644  1084  3001               	movlw	1
 21645  1085  02B7               	subwf	i1___ftadd@sign,f
 21646  1086  0837               	movf	i1___ftadd@sign,w
 21647  1087  3907               	andlw	7
 21648  1088  1903               	btfsc	3,2
 21649  1089  2895               	goto	i1l5933
 21650  108A  2878               	goto	i1l5925
 21651  108B                     i1l5931:	
 21652  108B  3001               	movlw	1
 21653  108C                     u565_25:	
 21654  108C  36AF               	lsrf	i1___ftadd@f1+2,f
 21655  108D  0CAE               	rrf	i1___ftadd@f1+1,f
 21656  108E  0CAD               	rrf	i1___ftadd@f1,f
 21657  108F  0B89               	decfsz	9,f
 21658  1090  288C               	goto	u565_25
 21659  1091  3001               	movlw	1
 21660  1092  00B3               	movwf	??i1___ftadd
 21661  1093  0833               	movf	??i1___ftadd,w
 21662  1094  07B9               	addwf	i1___ftadd@exp1,f
 21663  1095                     i1l5933:	
 21664  1095  0839               	movf	i1___ftadd@exp1,w
 21665  1096  0638               	xorwf	i1___ftadd@exp2,w
 21666  1097  1903               	btfsc	3,2
 21667  1098  28BF               	goto	i1l2114
 21668  1099  288B               	goto	i1l5931
 21669  109A                     i1l5935:	
 21670  109A  0839               	movf	i1___ftadd@exp1,w
 21671  109B  0238               	subwf	i1___ftadd@exp2,w
 21672  109C  1803               	skipnc
 21673  109D  28BF               	goto	i1l2114
 21674  109E                     i1l5937:	
 21675  109E  3001               	movlw	1
 21676  109F                     u568_25:	
 21677  109F  35AD               	lslf	i1___ftadd@f1,f
 21678  10A0  0DAE               	rlf	i1___ftadd@f1+1,f
 21679  10A1  0DAF               	rlf	i1___ftadd@f1+2,f
 21680  10A2  0B89               	decfsz	9,f
 21681  10A3  289F               	goto	u568_25
 21682  10A4  3001               	movlw	1
 21683  10A5  02B9               	subwf	i1___ftadd@exp1,f
 21684  10A6  0838               	movf	i1___ftadd@exp2,w
 21685  10A7  0639               	xorwf	i1___ftadd@exp1,w
 21686  10A8  1903               	skipnz
 21687  10A9  28BB               	goto	i1l5945
 21688  10AA  3001               	movlw	1
 21689  10AB  02B7               	subwf	i1___ftadd@sign,f
 21690  10AC  0837               	movf	i1___ftadd@sign,w
 21691  10AD  3907               	andlw	7
 21692  10AE  1903               	btfsc	3,2
 21693  10AF  28BB               	goto	i1l5945
 21694  10B0  289E               	goto	i1l5937
 21695  10B1                     i1l5943:	
 21696  10B1  3001               	movlw	1
 21697  10B2                     u571_25:	
 21698  10B2  36B2               	lsrf	i1___ftadd@f2+2,f
 21699  10B3  0CB1               	rrf	i1___ftadd@f2+1,f
 21700  10B4  0CB0               	rrf	i1___ftadd@f2,f
 21701  10B5  0B89               	decfsz	9,f
 21702  10B6  28B2               	goto	u571_25
 21703  10B7  3001               	movlw	1
 21704  10B8  00B3               	movwf	??i1___ftadd
 21705  10B9  0833               	movf	??i1___ftadd,w
 21706  10BA  07B8               	addwf	i1___ftadd@exp2,f
 21707  10BB                     i1l5945:	
 21708  10BB  0839               	movf	i1___ftadd@exp1,w
 21709  10BC  0638               	xorwf	i1___ftadd@exp2,w
 21710  10BD  1D03               	skipz
 21711  10BE  28B1               	goto	i1l5943
 21712  10BF                     i1l2114:	
 21713  10BF  1FB7               	btfss	i1___ftadd@sign,7
 21714  10C0  28D1               	goto	i1l5949
 21715  10C1  30FF               	movlw	255
 21716  10C2  06AD               	xorwf	i1___ftadd@f1,f
 21717  10C3  30FF               	movlw	255
 21718  10C4  06AE               	xorwf	i1___ftadd@f1+1,f
 21719  10C5  30FF               	movlw	255
 21720  10C6  06AF               	xorwf	i1___ftadd@f1+2,f
 21721  10C7  3001               	movlw	1
 21722  10C8  07AD               	addwf	i1___ftadd@f1,f
 21723  10C9  3000               	movlw	0
 21724  10CA  1803               	skipnc
 21725  10CB  3001               	movlw	1
 21726  10CC  07AE               	addwf	i1___ftadd@f1+1,f
 21727  10CD  3000               	movlw	0
 21728  10CE  1803               	skipnc
 21729  10CF  3001               	movlw	1
 21730  10D0  07AF               	addwf	i1___ftadd@f1+2,f
 21731  10D1                     i1l5949:	
 21732  10D1  1F37               	btfss	i1___ftadd@sign,6
 21733  10D2  28E3               	goto	i1l5953
 21734  10D3  30FF               	movlw	255
 21735  10D4  06B0               	xorwf	i1___ftadd@f2,f
 21736  10D5  30FF               	movlw	255
 21737  10D6  06B1               	xorwf	i1___ftadd@f2+1,f
 21738  10D7  30FF               	movlw	255
 21739  10D8  06B2               	xorwf	i1___ftadd@f2+2,f
 21740  10D9  3001               	movlw	1
 21741  10DA  07B0               	addwf	i1___ftadd@f2,f
 21742  10DB  3000               	movlw	0
 21743  10DC  1803               	skipnc
 21744  10DD  3001               	movlw	1
 21745  10DE  07B1               	addwf	i1___ftadd@f2+1,f
 21746  10DF  3000               	movlw	0
 21747  10E0  1803               	skipnc
 21748  10E1  3001               	movlw	1
 21749  10E2  07B2               	addwf	i1___ftadd@f2+2,f
 21750  10E3                     i1l5953:	
 21751  10E3  01B7               	clrf	i1___ftadd@sign
 21752  10E4  082D               	movf	i1___ftadd@f1,w
 21753  10E5  07B0               	addwf	i1___ftadd@f2,f
 21754  10E6  082E               	movf	i1___ftadd@f1+1,w
 21755  10E7  3DB1               	addwfc	i1___ftadd@f2+1,f
 21756  10E8  082F               	movf	i1___ftadd@f1+2,w
 21757  10E9  3DB2               	addwfc	i1___ftadd@f2+2,f
 21758  10EA  1FB2               	btfss	i1___ftadd@f2+2,7
 21759  10EB  28FE               	goto	i1l5963
 21760  10EC  30FF               	movlw	255
 21761  10ED  06B0               	xorwf	i1___ftadd@f2,f
 21762  10EE  30FF               	movlw	255
 21763  10EF  06B1               	xorwf	i1___ftadd@f2+1,f
 21764  10F0  30FF               	movlw	255
 21765  10F1  06B2               	xorwf	i1___ftadd@f2+2,f
 21766  10F2  3001               	movlw	1
 21767  10F3  07B0               	addwf	i1___ftadd@f2,f
 21768  10F4  3000               	movlw	0
 21769  10F5  1803               	skipnc
 21770  10F6  3001               	movlw	1
 21771  10F7  07B1               	addwf	i1___ftadd@f2+1,f
 21772  10F8  3000               	movlw	0
 21773  10F9  1803               	skipnc
 21774  10FA  3001               	movlw	1
 21775  10FB  07B2               	addwf	i1___ftadd@f2+2,f
 21776  10FC  01B7               	clrf	i1___ftadd@sign
 21777  10FD  0AB7               	incf	i1___ftadd@sign,f
 21778  10FE                     i1l5963:	
 21779  10FE  0830               	movf	i1___ftadd@f2,w
 21780  10FF  00F0               	movwf	i1___ftpack@arg
 21781  1100  0831               	movf	i1___ftadd@f2+1,w
 21782  1101  00F1               	movwf	i1___ftpack@arg+1
 21783  1102  0832               	movf	i1___ftadd@f2+2,w
 21784  1103  00F2               	movwf	i1___ftpack@arg+2
 21785  1104  0839               	movf	i1___ftadd@exp1,w
 21786  1105  00B3               	movwf	??i1___ftadd
 21787  1106  0833               	movf	??i1___ftadd,w
 21788  1107  00F3               	movwf	i1___ftpack@exp
 21789  1108  0837               	movf	i1___ftadd@sign,w
 21790  1109  00B4               	movwf	??i1___ftadd+1
 21791  110A  0834               	movf	??i1___ftadd+1,w
 21792  110B  00F4               	movwf	i1___ftpack@sign
 21793  110C  31A3  231C         	fcall	i1___ftpack
 21794  110E  0870               	movf	?i1___ftpack,w
 21795  110F  0020               	movlb	0	; select bank0
 21796  1110  00AD               	movwf	?i1___ftadd
 21797  1111  0871               	movf	?i1___ftpack+1,w
 21798  1112  00AE               	movwf	?i1___ftadd+1
 21799  1113  0872               	movf	?i1___ftpack+2,w
 21800  1114  00AF               	movwf	?i1___ftadd+2
 21801  1115  0008               	return
 21802  1116                     __end_ofi1___ftadd:	
 21803                           
 21804                           	psect	text83
 21805  231C                     __ptext83:	
 21806 ;; *************** function i1___ftpack *****************
 21807 ;; Defined at:
 21808 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 21809 ;; Parameters:    Size  Location     Type
 21810 ;;  arg             3    0[COMMON] unsigned um
 21811 ;;  exp             1    3[COMMON] unsigned char 
 21812 ;;  sign            1    4[COMMON] unsigned char 
 21813 ;; Auto vars:     Size  Location     Type
 21814 ;;		None
 21815 ;; Return value:  Size  Location     Type
 21816 ;;                  3    0[COMMON] float 
 21817 ;; Registers used:
 21818 ;;		wreg, status,2, status,0
 21819 ;; Tracked objects:
 21820 ;;		On entry : 0/0
 21821 ;;		On exit  : 0/0
 21822 ;;		Unchanged: 0/0
 21823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21824 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21826 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21827 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21828 ;;Total ram usage:        8 bytes
 21829 ;; Hardware stack levels used:    1
 21830 ;; This function calls:
 21831 ;;		Nothing
 21832 ;; This function is called by:
 21833 ;;		i1___awtoft
 21834 ;;		i1___ftadd
 21835 ;;		i1___ftdiv
 21836 ;;		i1___ftmul
 21837 ;; This function uses a non-reentrant model
 21838 ;;
 21839                           
 21840                           
 21841                           ;psect for function i1___ftpack
 21842  231C                     i1___ftpack:	
 21843                           
 21844                           ;incstack = 0
 21845                           ; Regs used in i1___ftpack: [wreg+status,2+status,0]
 21846  231C  0873               	movf	i1___ftpack@exp,w
 21847  231D  1903               	btfsc	3,2
 21848  231E  2B24               	goto	i1l5751
 21849  231F  0872               	movf	i1___ftpack@arg+2,w
 21850  2320  0471               	iorwf	i1___ftpack@arg+1,w
 21851  2321  0470               	iorwf	i1___ftpack@arg,w
 21852  2322  1D03               	skipz
 21853  2323  2B35               	goto	i1l5757
 21854  2324                     i1l5751:	
 21855  2324  3000               	movlw	0
 21856  2325  00F0               	movwf	?i1___ftpack
 21857  2326  3000               	movlw	0
 21858  2327  00F1               	movwf	?i1___ftpack+1
 21859  2328  3000               	movlw	0
 21860  2329  00F2               	movwf	?i1___ftpack+2
 21861  232A  0008               	return
 21862  232B                     i1l5755:	
 21863  232B  3001               	movlw	1
 21864  232C  00F5               	movwf	??i1___ftpack
 21865  232D  0875               	movf	??i1___ftpack,w
 21866  232E  07F3               	addwf	i1___ftpack@exp,f
 21867  232F  3001               	movlw	1
 21868  2330                     u531_25:	
 21869  2330  36F2               	lsrf	i1___ftpack@arg+2,f
 21870  2331  0CF1               	rrf	i1___ftpack@arg+1,f
 21871  2332  0CF0               	rrf	i1___ftpack@arg,f
 21872  2333  0B89               	decfsz	9,f
 21873  2334  2B30               	goto	u531_25
 21874  2335                     i1l5757:	
 21875  2335  30FE               	movlw	254
 21876  2336  0572               	andwf	i1___ftpack@arg+2,w
 21877  2337  1903               	btfsc	3,2
 21878  2338  2B4E               	goto	i1l2083
 21879  2339  2B2B               	goto	i1l5755
 21880  233A                     i1l5759:	
 21881  233A  3001               	movlw	1
 21882  233B  00F5               	movwf	??i1___ftpack
 21883  233C  0875               	movf	??i1___ftpack,w
 21884  233D  07F3               	addwf	i1___ftpack@exp,f
 21885  233E  3001               	movlw	1
 21886  233F  07F0               	addwf	i1___ftpack@arg,f
 21887  2340  3000               	movlw	0
 21888  2341  1803               	skipnc
 21889  2342  3001               	movlw	1
 21890  2343  07F1               	addwf	i1___ftpack@arg+1,f
 21891  2344  3000               	movlw	0
 21892  2345  1803               	skipnc
 21893  2346  3001               	movlw	1
 21894  2347  07F2               	addwf	i1___ftpack@arg+2,f
 21895  2348  3001               	movlw	1
 21896  2349                     u533_25:	
 21897  2349  36F2               	lsrf	i1___ftpack@arg+2,f
 21898  234A  0CF1               	rrf	i1___ftpack@arg+1,f
 21899  234B  0CF0               	rrf	i1___ftpack@arg,f
 21900  234C  0B89               	decfsz	9,f
 21901  234D  2B49               	goto	u533_25
 21902  234E                     i1l2083:	
 21903  234E  30FF               	movlw	255
 21904  234F  0572               	andwf	i1___ftpack@arg+2,w
 21905  2350  1903               	btfsc	3,2
 21906  2351  2B5B               	goto	i1l5767
 21907  2352  2B3A               	goto	i1l5759
 21908  2353                     i1l5765:	
 21909  2353  3001               	movlw	1
 21910  2354  02F3               	subwf	i1___ftpack@exp,f
 21911  2355  3001               	movlw	1
 21912  2356                     u535_25:	
 21913  2356  35F0               	lslf	i1___ftpack@arg,f
 21914  2357  0DF1               	rlf	i1___ftpack@arg+1,f
 21915  2358  0DF2               	rlf	i1___ftpack@arg+2,f
 21916  2359  0B89               	decfsz	9,f
 21917  235A  2B56               	goto	u535_25
 21918  235B                     i1l5767:	
 21919  235B  1BF1               	btfsc	i1___ftpack@arg+1,7
 21920  235C  2B61               	goto	i1l2090
 21921  235D  3002               	movlw	2
 21922  235E  0273               	subwf	i1___ftpack@exp,w
 21923  235F  1803               	skipnc
 21924  2360  2B53               	goto	i1l5765
 21925  2361                     i1l2090:	
 21926  2361  1873               	btfsc	i1___ftpack@exp,0
 21927  2362  2B69               	goto	i1l2091
 21928  2363  30FF               	movlw	255
 21929  2364  05F0               	andwf	i1___ftpack@arg,f
 21930  2365  307F               	movlw	127
 21931  2366  05F1               	andwf	i1___ftpack@arg+1,f
 21932  2367  30FF               	movlw	255
 21933  2368  05F2               	andwf	i1___ftpack@arg+2,f
 21934  2369                     i1l2091:	
 21935  2369  1003               	clrc
 21936  236A  0CF3               	rrf	i1___ftpack@exp,f
 21937  236B  0873               	movf	i1___ftpack@exp,w
 21938  236C  00F5               	movwf	??i1___ftpack
 21939  236D  01F6               	clrf	??i1___ftpack+1
 21940  236E  01F7               	clrf	??i1___ftpack+2
 21941  236F  3010               	movlw	16
 21942  2370                     u539_25:	
 21943  2370  35F5               	lslf	??i1___ftpack,f
 21944  2371  0DF6               	rlf	??i1___ftpack+1,f
 21945  2372  0DF7               	rlf	??i1___ftpack+2,f
 21946  2373  0B89               	decfsz	9,f
 21947  2374  2B70               	goto	u539_25
 21948  2375  0875               	movf	??i1___ftpack,w
 21949  2376  04F0               	iorwf	i1___ftpack@arg,f
 21950  2377  0876               	movf	??i1___ftpack+1,w
 21951  2378  04F1               	iorwf	i1___ftpack@arg+1,f
 21952  2379  0877               	movf	??i1___ftpack+2,w
 21953  237A  04F2               	iorwf	i1___ftpack@arg+2,f
 21954  237B  0874               	movf	i1___ftpack@sign,w
 21955  237C  1903               	btfsc	3,2
 21956  237D  0008               	return
 21957  237E  17F2               	bsf	i1___ftpack@arg+2,7
 21958  237F  0008               	return
 21959  2380                     __end_ofi1___ftpack:	
 21960                           
 21961                           	psect	text84
 21962  2271                     __ptext84:	
 21963 ;; *************** function ___awdiv *****************
 21964 ;; Defined at:
 21965 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 21966 ;; Parameters:    Size  Location     Type
 21967 ;;  divisor         2    0[COMMON] int 
 21968 ;;  dividend        2    2[COMMON] int 
 21969 ;; Auto vars:     Size  Location     Type
 21970 ;;  quotient        2    7[COMMON] int 
 21971 ;;  sign            1    6[COMMON] unsigned char 
 21972 ;;  counter         1    5[COMMON] unsigned char 
 21973 ;; Return value:  Size  Location     Type
 21974 ;;                  2    0[COMMON] int 
 21975 ;; Registers used:
 21976 ;;		wreg, status,2, status,0
 21977 ;; Tracked objects:
 21978 ;;		On entry : 0/0
 21979 ;;		On exit  : 0/0
 21980 ;;		Unchanged: 0/0
 21981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 21982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21983 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21985 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 21986 ;;Total ram usage:        9 bytes
 21987 ;; Hardware stack levels used:    1
 21988 ;; This function calls:
 21989 ;;		Nothing
 21990 ;; This function is called by:
 21991 ;;		_isr
 21992 ;;		_USARTWriteInt
 21993 ;; This function uses a non-reentrant model
 21994 ;;
 21995                           
 21996                           
 21997                           ;psect for function ___awdiv
 21998  2271                     ___awdiv:	
 21999                           
 22000                           ;incstack = 0
 22001                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 22002  2271  01F6               	clrf	___awdiv@sign
 22003  2272  1FF1               	btfss	___awdiv@divisor+1,7
 22004  2273  2A7B               	goto	i1l7069
 22005  2274  09F0               	comf	___awdiv@divisor,f
 22006  2275  09F1               	comf	___awdiv@divisor+1,f
 22007  2276  0AF0               	incf	___awdiv@divisor,f
 22008  2277  1903               	skipnz
 22009  2278  0AF1               	incf	___awdiv@divisor+1,f
 22010  2279  01F6               	clrf	___awdiv@sign
 22011  227A  0AF6               	incf	___awdiv@sign,f
 22012  227B                     i1l7069:	
 22013  227B  1FF3               	btfss	___awdiv@dividend+1,7
 22014  227C  2A86               	goto	i1l7075
 22015  227D  09F2               	comf	___awdiv@dividend,f
 22016  227E  09F3               	comf	___awdiv@dividend+1,f
 22017  227F  0AF2               	incf	___awdiv@dividend,f
 22018  2280  1903               	skipnz
 22019  2281  0AF3               	incf	___awdiv@dividend+1,f
 22020  2282  3001               	movlw	1
 22021  2283  00F4               	movwf	??___awdiv
 22022  2284  0874               	movf	??___awdiv,w
 22023  2285  06F6               	xorwf	___awdiv@sign,f
 22024  2286                     i1l7075:	
 22025  2286  01F7               	clrf	___awdiv@quotient
 22026  2287  01F8               	clrf	___awdiv@quotient+1
 22027  2288  0870               	movf	___awdiv@divisor,w
 22028  2289  0471               	iorwf	___awdiv@divisor+1,w
 22029  228A  1903               	btfsc	3,2
 22030  228B  2AB5               	goto	i1l7097
 22031  228C  01F5               	clrf	___awdiv@counter
 22032  228D  0AF5               	incf	___awdiv@counter,f
 22033  228E                     i1l7085:	
 22034  228E  1BF1               	btfsc	___awdiv@divisor+1,7
 22035  228F  2A9A               	goto	i1l7087
 22036  2290  3001               	movlw	1
 22037  2291                     u767_25:	
 22038  2291  35F0               	lslf	___awdiv@divisor,f
 22039  2292  0DF1               	rlf	___awdiv@divisor+1,f
 22040  2293  0B89               	decfsz	9,f
 22041  2294  2A91               	goto	u767_25
 22042  2295  3001               	movlw	1
 22043  2296  00F4               	movwf	??___awdiv
 22044  2297  0874               	movf	??___awdiv,w
 22045  2298  07F5               	addwf	___awdiv@counter,f
 22046  2299  2A8E               	goto	i1l7085
 22047  229A                     i1l7087:	
 22048  229A  3001               	movlw	1
 22049  229B                     u769_25:	
 22050  229B  35F7               	lslf	___awdiv@quotient,f
 22051  229C  0DF8               	rlf	___awdiv@quotient+1,f
 22052  229D  0B89               	decfsz	9,f
 22053  229E  2A9B               	goto	u769_25
 22054  229F  0871               	movf	___awdiv@divisor+1,w
 22055  22A0  0273               	subwf	___awdiv@dividend+1,w
 22056  22A1  1D03               	skipz
 22057  22A2  2AA5               	goto	u770_25
 22058  22A3  0870               	movf	___awdiv@divisor,w
 22059  22A4  0272               	subwf	___awdiv@dividend,w
 22060  22A5                     u770_25:	
 22061  22A5  1C03               	skipc
 22062  22A6  2AAC               	goto	i1l7093
 22063  22A7  0870               	movf	___awdiv@divisor,w
 22064  22A8  02F2               	subwf	___awdiv@dividend,f
 22065  22A9  0871               	movf	___awdiv@divisor+1,w
 22066  22AA  3BF3               	subwfb	___awdiv@dividend+1,f
 22067  22AB  1477               	bsf	___awdiv@quotient,0
 22068  22AC                     i1l7093:	
 22069  22AC  3001               	movlw	1
 22070  22AD                     u771_25:	
 22071  22AD  36F1               	lsrf	___awdiv@divisor+1,f
 22072  22AE  0CF0               	rrf	___awdiv@divisor,f
 22073  22AF  0B89               	decfsz	9,f
 22074  22B0  2AAD               	goto	u771_25
 22075  22B1  3001               	movlw	1
 22076  22B2  02F5               	subwf	___awdiv@counter,f
 22077  22B3  1D03               	btfss	3,2
 22078  22B4  2A9A               	goto	i1l7087
 22079  22B5                     i1l7097:	
 22080  22B5  0876               	movf	___awdiv@sign,w
 22081  22B6  1903               	btfsc	3,2
 22082  22B7  2ABD               	goto	i1l7101
 22083  22B8  09F7               	comf	___awdiv@quotient,f
 22084  22B9  09F8               	comf	___awdiv@quotient+1,f
 22085  22BA  0AF7               	incf	___awdiv@quotient,f
 22086  22BB  1903               	skipnz
 22087  22BC  0AF8               	incf	___awdiv@quotient+1,f
 22088  22BD                     i1l7101:	
 22089  22BD  0878               	movf	___awdiv@quotient+1,w
 22090  22BE  00F1               	movwf	?___awdiv+1
 22091  22BF  0877               	movf	___awdiv@quotient,w
 22092  22C0  00F0               	movwf	?___awdiv
 22093  22C1  0008               	return
 22094  22C2                     __end_of___awdiv:	
 22095  007E                     btemp	set	126	;btemp
 22096  007E                     int$flags	set	126
 22097  007E                     wtemp	set	126
 22098  007E                     wtemp0	set	126
 22099  0080                     wtemp1	set	128
 22100  0082                     wtemp2	set	130
 22101  0084                     wtemp3	set	132
 22102  0086                     wtemp4	set	134
 22103  0088                     wtemp5	set	136
 22104  007F                     wtemp6	set	127
 22105  007E                     ttemp	set	126
 22106  007E                     ttemp0	set	126
 22107  0081                     ttemp1	set	129
 22108  0084                     ttemp2	set	132
 22109  0087                     ttemp3	set	135
 22110  007F                     ttemp4	set	127
 22111  007E                     ltemp	set	126
 22112  007E                     ltemp0	set	126
 22113  0082                     ltemp1	set	130
 22114  0086                     ltemp2	set	134
 22115  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        48
    BSS         289
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     33      66
    BANK2            80     80      80
    BANK3            80     74      80
    BANK4            80      9      80
    BANK5            80     14      69
    BANK6            80      0      44
    BANK7            80      0      64
    BANK8            80      0      64
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           72      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK3[2]), floor@expon(BANK3[2]), trunc@expon(BANK3[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_modSin->i1___ftmul
    _modulation->i1___aldiv
    i1___aldiv->i1___lmul
    _modTri->i1___ftmul
    _modSaw->i1___ftmul
    i1___fttol->i1___ftmul
    i1___ftneg->i1___ftmul
    i1___ftmul->i1___ftpack
    i1___ftmul->i1___ftpack
    i1___ftdiv->i1___ftmul
    i1___ftadd->i1___ftmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modSawRev
    i1_modSin->i1___awtoft
    i1___wmul->i1___fttol
    i1___awtoft->i1___wmul
    _modulation->i1___aldiv
    _modTri->i1___awtoft
    _modSquare->i1___awtoft
    _modSawRev->_modSaw
    _modSaw->i1___awtoft
    i1___fttol->i1___ftdiv
    i1___ftneg->i1___ftmul
    i1___ftdiv->i1___ftadd
    i1___ftadd->i1___ftneg

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _isr->_modSawRev
    _modSawRev->_modSaw

Critical Paths under _main in BANK2

    _main->_map
    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftmul
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___ftmul->___ftadd
    ___ftadd->___ftneg
    ___ftneg->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _set_subdivision->_trunc
    _trunc->___altoft
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _modSin->___wmul
    _calcSinArray->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  677732
                                              0 BANK5     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
                   _initSwitchBypass
                                _map
                             _modSin
                _read_bottom_tactile
                   _read_top_tactile
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK2      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK2      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK2      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK2      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK2     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK2      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK2      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK2      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK2      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK2      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK2      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK2      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK2      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   18738
                                             31 BANK3     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    5580
                                             22 BANK3      9     6      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  149228
                                             71 BANK3      3     0      3
                                              0 BANK4      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  140041
                                             71 BANK3      3     0      3
                                              0 BANK4      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  140090
                                             71 BANK3      3     0      3
                                              0 BANK4      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  125466
                                             53 BANK3     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   39316
                                             30 BANK3      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   69173
                                             40 BANK3     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5006
                                             30 BANK3     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK2      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK2      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK2      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modSin                                              20    14      6   28378
                                             20 BANK3     20    14      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   23363
                                             62 BANK2     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK2      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK2      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK2      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK2     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK2      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK2      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         9     9      0   84387
                                             51 BANK3      9     9      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   65952
                                             37 BANK3     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   15752
                                             22 BANK3      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     784
                                              0 BANK2      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1533
                                              0 BANK3     14    10      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2620
                                              0 BANK2      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2942
                                             14 BANK3      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   16947
                                             20 BANK3     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1326
                                             14 BANK3      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    7092
                                             46 BANK2     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    7909
                                             31 BANK3      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    7351
                                             33 BANK2     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3    1836
                                             30 BANK2      3     0      3
                            ___ftdiv (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    5678
                                             14 BANK2     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4138
                                              8 BANK2      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK2      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK2      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK2      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK2      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK2      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK2      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK2      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK2      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 14    14      0   31390
                                             19 BANK1     14    14      0
                            ___awdiv
                             _modSaw
                          _modSawRev
                          _modSquare
                             _modTri
                         _modulation
                         i1___awtoft
                           i1___wmul
                           i1_modSin
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_modSin                                            20    14      6    7096
                                             68 BANK0      8     2      6
                                              0 BANK1     12    12      0
                         i1___awtoft (ARG)
                          i1___ftadd
                          i1___ftdiv
                           i1___ftge
                          i1___ftmul
                          i1___ftneg
                          i1___fttol
                           i1___wmul
 ---------------------------------------------------------------------------------
 (9) i1___wmul                                             6     2      4     404
                                             56 BANK0      6     2      4
                          i1___fttol (ARG)
 ---------------------------------------------------------------------------------
 (8) i1___awtoft                                           6     3      3     894
                                             62 BANK0      6     3      3
                         i1___ftpack
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _modTri                                              18    12      6    6858
                                             68 BANK0      6     0      6
                                              0 BANK1     12    12      0
                         i1___awtoft (ARG)
                          i1___ftadd
                          i1___ftdiv
                           i1___ftge
                          i1___ftmul
                          i1___ftneg
                          i1___fttol
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _modSquare                                            6     0      6     620
                                             68 BANK0      6     0      6
                         i1___awtoft (ARG)
                           i1___ftge
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _modSawRev                                            8     2      6    7091
                                             74 BANK0      6     0      6
                                             17 BANK1      2     2      0
                             _modSaw
                         i1___awtoft (ARG)
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _modSaw                                              23    17      6    6919
                                             68 BANK0      6     0      6
                                              0 BANK1     17    17      0
                         i1___awtoft (ARG)
                          i1___ftadd
                          i1___ftdiv
                           i1___ftge
                          i1___ftmul
                          i1___ftneg
                          i1___fttol
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___fttol                                           14    10      4     356
                                             42 BANK0     14    10      4
                          i1___ftdiv (ARG)
                          i1___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___ftneg                                            3     0      3     461
                                             10 BANK0      3     0      3
                          i1___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           16    10      6    1493
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                         i1___ftpack
                         i1___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     448
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (9) i1___ftdiv                                           16    10      6    1447
                                             26 BANK0     16    10      6
                          i1___ftadd (ARG)
                          i1___ftmul (ARG)
                          i1___ftneg (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftadd                                           13     7      6    2163
                                             13 BANK0     13     7      6
                          i1___ftmul (ARG)
                          i1___ftneg (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     543
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
         _frexp
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
   _modSin
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _scaleA100kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
       _frexp (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modSaw
     i1___awtoft (ARG)
       i1___ftpack
       i1___wmul (ARG)
         i1___fttol (ARG)
           i1___ftdiv (ARG)
             i1___ftadd (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
     i1___ftadd (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___ftpack (ARG)
     i1___ftdiv (ARG)
       i1___ftadd (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___ftpack (ARG)
     i1___ftge (ARG)
     i1___ftmul (ARG)
       i1___ftpack
       i1___ftpack (ARG)
     i1___ftneg (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
     i1___fttol (ARG)
       i1___ftdiv (ARG)
         i1___ftadd (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
     i1___wmul (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
   _modSawRev
     _modSaw
       i1___awtoft (ARG)
         i1___ftpack
         i1___wmul (ARG)
           i1___fttol (ARG)
             i1___ftdiv (ARG)
               i1___ftadd (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
                 i1___ftneg (ARG)
                   i1___ftmul (ARG)
                     i1___ftpack
                     i1___ftpack (ARG)
                 i1___ftpack (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
       i1___ftadd (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftdiv (ARG)
         i1___ftadd (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftge (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___wmul (ARG)
         i1___fttol (ARG)
           i1___ftdiv (ARG)
             i1___ftadd (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
     i1___awtoft (ARG)
       i1___ftpack
       i1___wmul (ARG)
         i1___fttol (ARG)
           i1___ftdiv (ARG)
             i1___ftadd (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
     i1___wmul (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
   _modSquare
     i1___awtoft (ARG)
       i1___ftpack
       i1___wmul (ARG)
         i1___fttol (ARG)
           i1___ftdiv (ARG)
             i1___ftadd (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
     i1___ftge (ARG)
     i1___wmul (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
   _modTri
     i1___awtoft (ARG)
       i1___ftpack
       i1___wmul (ARG)
         i1___fttol (ARG)
           i1___ftdiv (ARG)
             i1___ftadd (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
     i1___ftadd (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___ftpack (ARG)
     i1___ftdiv (ARG)
       i1___ftadd (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___ftpack (ARG)
     i1___ftge (ARG)
     i1___ftmul (ARG)
       i1___ftpack
       i1___ftpack (ARG)
     i1___ftneg (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
     i1___fttol (ARG)
       i1___ftdiv (ARG)
         i1___ftadd (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
     i1___wmul (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awtoft
     i1___ftpack
     i1___wmul (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
   i1___wmul
     i1___fttol (ARG)
       i1___ftdiv (ARG)
         i1___ftadd (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
   i1_modSin
     i1___awtoft (ARG)
       i1___ftpack
       i1___wmul (ARG)
         i1___fttol (ARG)
           i1___ftdiv (ARG)
             i1___ftadd (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
               i1___ftneg (ARG)
                 i1___ftmul (ARG)
                   i1___ftpack
                   i1___ftpack (ARG)
               i1___ftpack (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
     i1___ftadd (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___ftpack (ARG)
     i1___ftdiv (ARG)
       i1___ftadd (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
       i1___ftneg (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
       i1___ftpack (ARG)
     i1___ftge (ARG)
     i1___ftmul (ARG)
       i1___ftpack
       i1___ftpack (ARG)
     i1___ftneg (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
     i1___fttol (ARG)
       i1___ftdiv (ARG)
         i1___ftadd (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
         i1___ftneg (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
         i1___ftpack (ARG)
       i1___ftmul (ARG)
         i1___ftpack
         i1___ftpack (ARG)
     i1___wmul (ARG)
       i1___fttol (ARG)
         i1___ftdiv (ARG)
           i1___ftadd (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
             i1___ftneg (ARG)
               i1___ftmul (ARG)
                 i1___ftpack
                 i1___ftpack (ARG)
             i1___ftpack (ARG)
           i1___ftmul (ARG)
             i1___ftpack
             i1___ftpack (ARG)
           i1___ftneg (ARG)
             i1___ftmul (ARG)
               i1___ftpack
               i1___ftpack (ARG)
           i1___ftpack (ARG)
         i1___ftmul (ARG)
           i1___ftpack
           i1___ftpack (ARG)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     21      42       7       82.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     50      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     4A      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      9      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      E      45      15       86.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     281      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      2C      18       55.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      40      22       80.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     281      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              48      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Jan 11 20:46:19 2017

                     _update_mode 2E12                      ___altoft@exp 01B4                        i1___awtoft 2C59  
                      i1___ftpack 231C                       __CFG_CP$OFF 0000                     ___altoft@sign 01B5  
                modSaw@inflection 0067                  scaleA100kPot@pwm 0267                      ___awdiv@sign 0076  
              _topTactile_pressed 0248        setDoublePressState@f_state 0138               ___wmul@multiplicand 01B0  
              USARTInit@baud_rate 0120                  i1___wmul@product 005C                   _updateSwitchTap 04C7  
                    ___ftadd@exp1 014D                      ___ftadd@exp2 014C                      ___ftadd@sign 014B  
                             l401 2DCF                               l605 2B6D                               l811 1831  
            __size_of_adc_convert 0019                               l820 2DEB                               l812 1855  
                             l652 0839                               l821 2DED                               l823 2DEF  
                             l824 2E11                               l816 2DE5                               l818 2DE7  
                             l819 2DE9                      i1___ftadd@f1 002D                      i1___ftadd@f2 0030  
                             l981 2153                               l985 217D                               l993 21E8  
                             _GIE 005F                               l997 2216                               _RB1 0069  
                             _PR2 001B                      i1___ftge@ff1 0070                      i1___ftge@ff2 0073  
    solidring_tactiles@ring_delay 0134                               _map 2775                               _exp 120C  
                             _log 1E44                               _isr 0004                               _tap 0320  
                             _sin 0A3B                               _pow 06B0                      i1___ftdiv@f1 003D  
                    i1___ftdiv@f2 003A                      i1___ftdiv@f3 0045                      __CFG_BORV$LO 0000  
                    i1___ftneg@f1 002A                               wreg 0009                      __CFG_IESO$ON 0000  
                    i1___awtoft@c 005E                      __CFG_FOSC$HS 0000               set_subdivision@tmpX 01C9  
         __end_of_set_leds_bottom 2E12                      i1___ftmul@f1 0078                      i1___ftmul@f2 007B  
                    i1___fttol@f1 004A                      __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029  
                    ___ftdiv@cntr 0138                      ___ftdiv@sign 013D                              l1020 2C9E  
                            l1023 22C9                              l1016 2C7C                              l1008 2E42  
                            l1018 2C82                              l1034 2314                              l1019 2C8A  
                            l2114 11B5                              l1420 04DE                              l2304 0B50  
                            l2090 23C6                              l1434 0599                              l2091 23CE  
                            l2083 23B3                              l2174 26D4                              l1278 1F9C  
                            l1714 2058                              l2286 06D4                              l1922 2BE8  
                            ?_map 015E                              l1889 2772                              l1977 24EA  
                            l8011 1821                              l8013 1829                              l8005 1809  
                            l8007 1811                              l8103 1181                              l8033 2DF5  
                            l8009 1819                              l8017 1838                              l8121 11C7  
                            l8105 118B                              l8041 2BE2                              l8115 11A7  
                            l8107 1190                              l9003 22F9                              ?_exp 01C8  
                            l8125 11D9                              l8117 11B1                              l8109 1194  
                            l9013 2310                              l9005 22FE                              ?_log 01BE  
                            l8135 11F4                              l8063 219D                              l8143 2E9C  
                            l8223 2680                              l9023 1F2B                              l9111 04D3  
                            l9015 2318                              l8065 21AD                              l8241 26B0  
                            l8401 19B4                              l8305 2255                              l8075 113E  
                            l8171 1D02                              l8147 2EB2                              l8251 26D7  
                            l8243 26BE                              l9035 1F4C                              l9027 1F3E  
                            l9131 0512                              ?_isr 0070                              l8085 1154  
                            l8165 1CEC                              l8405 19BC                              l9213 2148  
                            l8325 07E2                              l9061 1F8E                              l9133 052F  
                            l9117 04F0                              l8079 1145                              l8183 1D3D  
                            l8255 26E5                              l8415 1A1D                              l9223 216F  
                            l8511 2CCA                              l9047 1F6E                              l8337 200B  
                            l8353 1AFB                              l8097 116E                              l8425 2450  
                            l8249 26CB                              l8513 2CDA                              l8505 2C92  
                            l9073 1FBB                              l9049 1F76                              l9153 0562  
                            l8347 1AE5                              l8195 1D59                              l8187 1D45  
                            l8267 2F12                              l9235 21DD                              l8435 18F4  
                            l8523 1E68                              l9307 2567                              l9331 1DA1  
                            l9067 1FA0                              l9139 053A                              l9155 056A  
                            l9245 2204                              l8445 1916                              l9333 1DA7  
                            l9341 1DCB                              l9077 1FC3                              l9181 05E8  
                            l9173 05DC                              l9165 0591                              l9157 0579  
                            l9405 0C95                              l8375 1B55                              l8367 1B3C  
                            l8199 1D61                              l9271 186E                              l9335 1DAB  
                            l9327 1D97                              l9079 1FC9                              l9087 1FDC  
                            l9183 0632                              l8465 195E                              l8561 1262  
                            l8545 1219                              l8529 1E7B                              l9265 1861  
                            l9329 1D9D                              l8297 2231                              l9433 0DAE  
                            l8387 2CF7                              l8555 123E                              l9347 1E3E  
                            l9339 1DB2                              l9187 0658                              l9195 0696  
                            l9451 0EAE                              l9443 0E24                              l9419 0D10  
                            ?_sin 01C5                              l8469 1966                              l9293 1B8F  
                            l8629 2115                              l9429 0D6E                              l8719 20D7  
                            l8567 129D                              l8663 0742                              l8655 06E8  
                            l9287 1B80                              l9463 0F78                              l9455 0EEE  
                            l9447 0E64                              l8649 06DC                              l8825 250B  
                            l8817 24FB                              l7963 2D8F                              l8667 0762  
                            l8755 2EEB                              l8763 2EF6                              l8747 2EDA  
                            l8843 2552                              l8835 2539                              l8827 2519  
                            l9467 0FC2                              l9459 0F38                              l7981 239A  
                            l8781 0A70                              l8853 1689                              l8589 1345  
                            l9389 0C76                              ?_pow 01D5                              l8943 084C  
                            l7991 23C0                              l7983 239F                              l7975 2389  
                            l7959 2D85                              l8839 2544                              l9399 0C86  
                            l8945 0855                              l8881 202D                              l8793 0B0C  
                            l8883 202F                              l7979 2390                              l8867 26F4  
                            l8885 2031                              l7989 23B8                              l8981 2E3F  
                            l9871 2053                              l8879 202B                              l9863 1DB7  
                            l8975 2E35                              l8983 2E46                              l9873 183E  
                            l9865 2044                              l8889 2035                              l9875 2DFA  
                            l9867 2049                              l9869 204E                              l8997 22ED  
                            _PEIE 005E                              _RCIE 048D                              u9025 1182  
                            u9055 1195                              u9215 1D46                              u9225 1D4C  
                            u9305 2687                              u9085 11A8                              u9405 222F  
                            u9255 1D62                              u9335 26B1                              u9415 2253  
                            u9505 1B3D                              u9265 1D68                              u9185 1D0E  
                            u9515 1B4C                              u9195 1D1E                              u8805 23D5  
                            u8725 2395                              u9525 1B56                              u9365 26CC  
                            u9710 127B                              u9720 127C                              u8745 23AE  
                            u9625 191F                              u8675 2D90                              u8765 23BB  
                            u9485 1B0D                              u8845 2BE9                              u8685 2D97  
                            u9645 2CCF                              u9495 1B1D                              u8855 2BEE  
                            u9825 0733                              u9850 20D5                              u9755 133C  
                            u8885 21A2                              u9845 20B9                              u9925 2B9B  
                            u9950 0B08                              u9960 0B09                              u8995 116F  
                            u9875 2B82                              u9885 2ECC                scaleA100kPot@input 01E7  
                    __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000                 _scaleA10kPot$2797 026A  
               _scaleA10kPot$2798 026D                              _iCnt 0241                              _main 0C0A  
                    ___ftpack@arg 0120                      ___ftpack@exp 0123                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              map@x 015E  
                            btemp 007E                              exp@x 01C8                              log@x 01BE  
                   __CFG_BOREN$ON 0000                              sin@f 01C5                              sin@y 01C9  
                   i1___ftdiv@exp 0048                              ltemp 007E                              pow@x 01D5  
                            pow@y 01D8          __end_of_setFeedbackState 2B90                              start 0446  
                            ttemp 007E                              wtemp 007E      __end_of_getSwitchBypassState 2AD7  
                 _expressModeCnst 0263      updateSwitchTap@tapCntDivisor 0142      __end_of_setSwitchBypassState 20F6  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 015C  
                    ___ftmul@sign 015D                     i1___ftmul@exp 0024                   __end_of_InitApp 2D7C  
                    ___fttol@exp1 01AD                             ??_map 016D                             ??_exp 01CB  
                           ??_log 01C1                      ___fttol@lval 01A9                             ??_isr 00B3  
                           ??_sin 01C8                             ??_pow 01DB                   _switchBypass_up 02E3  
         i1___ftmul@f3_as_product 0025         __size_of_initSwitchBypass 000F                   __end_of___aldiv 255B  
                           ?_main 0070                   __end_of___awdiv 22C2                   __end_of___ftadd 120C  
                           _CCPR1 0291                             _CCPR2 0298                             _CCPR3 0311  
                           _CCPR4 0318                             _CCPR5 031C                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 1B77                   __end_of___ftneg 2AF2                             u10025 250E  
                           u10125 2CAB                             u10045 251A                             u10205 2E25  
                           u10135 2CB1                             u10055 252E                             u10065 253A  
                           u11105 0F56                             u11025 0CEE                             u10170 0853  
                           u10155 0832                             u11115 0F76                             u11035 0D0E  
                           u10165 0845                   __end_of___ftmul 1D89                             u11045 0D8C  
                           u11055 0DAC                             u11065 0E42                             u10355 1F24  
                           u10275 22DC                             u11075 0E62                   ___awdiv@divisor 0070  
                           u10365 1F37                             u11085 0ECC                             u10615 051B  
                           u11095 0EEC                   __end_of___ftsub 2D1D                             u10395 1F56  
                 __end_of___fttol 26EE                             u10485 1FAC                             u10725 05AA  
                           u10645 0544                             u10735 05C1                             u10905 21FD  
                           u10745 05F1                             u10755 0606                             u10845 2168  
                           u10765 061A                             u10785 0637                             u10985 1E39  
                           i1l145 012D                             i1l167 0269                             i1l168 026B  
                           i1l185 0440                             i1l177 03CE                             i1l811 208B  
                           i1l812 20AD                   ___awdiv@counter 0075                             _RCREG 0199  
                           _SPBRG 019B                    i1___ftadd@exp1 0039                    i1___ftadd@exp2 0038  
              __end_ofsin@coeff_a 2848                __end_ofsin@coeff_b 2854                             _TXREG 019A  
                  i1___ftadd@sign 0037                             _UQEnd 00CD               _ConfigureOscillator 2ACF  
                _setPresetDisplay 07C6                      ?_init_timer0 0070                      ?_init_timer2 0070  
             ___lmul@multiplicand 0124                      ___lltoft@exp 012D             __size_of_calcSinArray 0087  
                 _switchTap_state 0266                 ??_setLongTapState 0122                     ___awtoft@sign 012D  
                           _floor 197E                             _ldexp 18E7                             _frexp 2EFE  
                           _myBuf 0420                             _errno 02CF                     ___ftpack@sign 0124  
                           _timer 00C9                             _trunc 20F6                  __end_ofi1___ftge 2E85  
                __end_ofi1___lmul 2D4C                             sin@x2 01CF                  __end_ofi1___wmul 2BDF  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                    i1___ftdiv@cntr 0044                   __end_of_wait_ms 2DDE  
                           pow@yi 01E3                    i1___ftdiv@sign 0049                   scaleA10kPot@pwm 0267  
              __size_of_USARTInit 0044                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 2188               i1___wmul@multiplier 0058  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                  __end_ofi1_modSin 1654  
              __size_ofi1___ftadd 00F6             set_subdivision@scalar 01C6                __size_ofi1___ftdiv 00A9  
              __size_ofi1___ftneg 0009                __size_ofi1___ftmul 00B3                __size_ofi1___fttol 0087  
                     exp@exponent 01D2              ?_ConfigureOscillator 0070                    i1___ftpack@arg 0070  
                  i1___ftpack@exp 0073                _updateSwitchBypass 1F15                       ldexp@newexp 01C1  
         __end_of_updateSwitchTap 06B0                   __initialization 0448                       log@exponent 01C2  
         _updateSwitchBypassState 1800                      __end_of_main 1000           __size_of_InitializeTaps 0026  
             i1___lmul@multiplier 0070                       ?i1___awtoft 005E                       ?i1___ftpack 0070  
                  i1___ftmul@cntr 0028            __size_of_scaleA100kPot 0085                    i1___ftmul@sign 0029  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000            ring_tactiles@iLed_1557 0135  
                 _set_subdivision 1D89                    i1___fttol@exp1 0057                    i1___fttol@lval 0053  
                    _calcSinArray 26EE                            ??_main 02D5                     ___fttol@sign1 01A8  
                   ?_scaleA10kPot 01E7           __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 2F7E  
                  _feedback_timer 022C                    _feedback_state 00DE                    _feedback_start 01EC  
                ?_set_leds_bottom 0120                            ?_floor 01B6                            ?_ldexp 01BE  
                          ?_frexp 0120                  __end_of___altoft 21D3                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0072               _baseline_delay_time 00D3  
                __end_of___awtoft 2022                  __end_of___ftpack 23E5              ??_updateSwitchBypass 013C  
                          ?_trunc 01B6                  __end_of___lltoft 2CEF                            i1l2114 10BF  
                          i1l2090 2361                            i1l2091 2369                            i1l2083 234E  
                          i1l2174 264D                            i1l1901 09FB                            i1l6001 1AAC  
                          i1l1922 2BCC                            i1l6013 2E60                            i1l6111 2629  
                          i1l6017 2E76                            i1l6041 1C4F                            i1l6121 2650  
                          i1l6113 2637                            i1l6035 1C39                            i1l7101 22BD  
                          i1l6053 1C8A                            i1l6125 265E                            i1l6119 2644  
                          i1l6135 138B                            i1l7111 2079                            i1l6065 1CA6  
                          i1l6057 1C92                            i1l1977 2468                            i1l7113 207F  
                          i1l7201 018C                            i1l6411 2D25                            i1l7131 1502  
                          i1l7115 2085                            i1l7107 206D                            i1l7211 01BA  
                          i1l6069 1CAE                            i1l6093 25F9                            i1l7109 2073  
                          i1l7205 01A0                            i1l7213 01BC                            i1l6415 2D2F  
                          i1l7119 2091                            i1l7223 01EE                            i1l6441 2489  
                          i1l6433 2479                            i1l7233 021A                            i1l7209 01AB  
                          i1l7161 00AF                            i1l7075 2286                            i1l6451 24B7  
                          i1l6443 2497                            i1l7147 2C64                            i1l7251 032C  
                          i1l7243 026E                            i1l7227 01FE                            i1l7093 22AC  
                          i1l7085 228E                            i1l7069 227B                            i1l7253 0366  
                          i1l7261 03BD                            i1l7229 020D                            i1l7087 229A  
                          i1l5751 2324                            i1l5903 1048                            i1l6455 24C2  
                          i1l7255 03A2                            i1l7247 02B8                            i1l7175 011A  
                          i1l7167 00CA                            i1l7097 22B5                            i1l5913 105E  
                          i1l7281 0439                            i1l7265 03D0                            i1l7249 02F2  
                          i1l5755 232B                            i1l5931 108B                            i1l5907 104F  
                          i1l6483 08A3                            i1l6459 24D0                            i1l7259 03A6  
                          i1l5765 2353                            i1l5757 2335                            i1l5933 1095  
                          i1l5925 1078                            i1l6397 2BC6                            i1l7285 043E  
                          i1l7269 040A                            i1l7197 017A                            i1l5767 235B  
                          i1l5759 233A                            i1l5943 10B1                            i1l5935 109A  
                          i1l6487 09BD                            i1l7199 018A                            i1l5953 10E3  
                          i1l5945 10BB                            i1l5937 109E                            i1l6497 2C13  
                          i1l5963 10FE                            i1l5949 10D1                            i1l5973 1A3C  
                          i1l5993 1A93                            i1l5979 1A52                            i1l9877 03AC  
                          i1l9879 2096                            _PMADRH 0192                            _PMADRL 0191  
                          u601_25 2600                            _PMDATH 0194                            _PMDATL 0193  
                          u531_25 2330                            _PMCON2 0196                            u604_25 262A  
                          u533_25 2349                            u535_25 2356                            u607_25 2645  
                          u800_23 0242                            u801_25 0258                            u562_25 1079  
                          u650_25 2D37                            u802_25 03C9                            u539_25 2370  
                          u571_25 10B2                            u580_25 1A94                            u804_25 041B  
                          u565_25 108C                            u581_25 1AA3                            u645_25 2BCD  
                          u805_25 0434                            u582_25 1AAD                            u590_25 1C6B  
                          u646_25 2BD2                            u655_25 248C                            u568_25 109F  
                          u592_25 1C93                            u593_25 1C99                            u657_25 2498  
                          u649_25 2D30                            u770_25 22A5                            u578_25 1A64  
                          u658_25 24AC                            u771_25 22AD                            u579_25 1A74  
                          u659_25 24B8                            u596_25 1CAF                            u780_25 00C1  
                          u597_25 1CB5                            u589_25 1C5B                            u782_23 00EA  
                          u767_25 2291                            u769_25 229B                            u778_25 00A6  
                          u787_23 0149                            u796_23 01DE                    _debounce_count 02C9  
                     modSaw@angle 0064                    _debounce_mode1 0228                    _debounce_mode2 022A  
                     modSaw@shift 00AB                            _URBuff 03A0                         ??_InitApp 0120  
           ??_ConfigureOscillator 0120          __end_of_read_top_tactile 2221                       modSin@angle 01B4  
                  __CFG_PWRTE$OFF 0000                       modSin@shift 01BF                            ___ftge 2E85  
                          ___lmul 2D7C                         ??___aldiv 0128                            ___wmul 2BDF  
               _update_selectMode 22C2                         ??___awdiv 0074                         ??___ftadd 0147  
                  __CFG_STVREN$ON 0000                         ??___ftdiv 0134                         ??___ftneg 0141  
                       ??___ftmul 0154                         ??___ftsub 0170                         ??___fttol 01A4  
                     modTri@angle 0064                  __end_of_init_adc 2AFC                            _modSaw 1365  
                          _modSin 1654                            _modTri 087D                  __end_of_init_pwm 3000  
              ?_update_selectMode 0070                       modTri@shift 00A3                  ___awdiv@quotient 0077  
           __end_of_resetRingLEDs 2BC3                            _tmpVal 02D3                 __end_of_USARTInit 2066  
                  ??_scaleA10kPot 0170                 __end_ofi1___aldiv 24D9                            floor@i 01BA  
                          floor@x 01B6             ___ftmul@f3_as_product 0159                 __end_ofi1___ftadd 1116  
               __end_ofi1___ftdiv 1ACE                 __end_ofi1___ftneg 2AE0                 __end_ofi1___ftmul 1CD5  
               __end_ofi1___fttol 2667           FLASH_ReadWord@flashAddr 0120                            sin@sgn 01D2  
                __end_of_showSave 2B46               ??_update_selectMode 0127              _getSwitchBypassState 2AD3  
                       ??_wait_ms 012E              _setSwitchBypassState 20AE                            trunc@i 01BA  
                          trunc@x 01B6                     _scaleA100kPot 255B      __end_of_setExpressionDisplay 2B5E  
          __size_of_scaleiA10kPot 00AB               __size_ofi1___awtoft 0022               __size_ofi1___ftpack 0064  
          setLongTapState@f_state 0120                  modSin@inflection 01B7                  __end_ofexp@coeff 281E  
                __end_oflog@coeff 2839           __end_of__initialization 04C3                        ___altoft@c 01AE  
                 i1___awtoft@sign 0063                        ___ftadd@f1 0141                        ___ftadd@f2 0144  
                      ___ftge@ff1 0120                        ___ftge@ff2 0123                   i1___ftpack@sign 0074  
               _bypass_turning_on 0240                      eval_poly@res 01BB                        ___ftdiv@f1 0131  
                      ___ftdiv@f2 012E                        ___ftdiv@f3 0139                    _top_push_state 00DB  
       ??_updateSwitchBypassState 0122                        ___ftneg@f1 013E               _switchBypass_toggle 02D1  
                      ___awtoft@c 0128             __end_of_ring_tactiles 2271         __end_of_update_selectMode 231C  
         __end_of_set_subdivision 1E44                        ___ftmul@f1 014E                        ___ftmul@f2 0151  
                      ___ftsub@f1 01C2                        ___ftsub@f2 01BF                        ___fttol@f1 01A0  
                ?_updateSwitchTap 0070                      ?_update_mode 0070                    __pcstackCOMMON 0070  
                    __pidataBANK1 2B23                      __pidataBANK3 1801                      __pidataBANK4 2C19  
                    __pidataBANK5 0002                        ___lltoft@c 0128                     __end_of_floor 1A25  
                   __end_of_ldexp 197E                     __end_of_frexp 2F3E                     __end_of_trunc 213E  
                _initSwitchBypass 2B14                         ?i1___ftge 0070                         ?i1___lmul 0070  
                       ?i1___wmul 0058                   _doubleTap_state 00CF                    _OPTION_REGbits 0095  
                       ?i1_modSin 0064             ?_getSwitchBypassState 0120             ?_setSwitchBypassState 0132  
                 i1___fttol@sign1 0052                    ?_scaleA100kPot 01E7                           ??_floor 01B9  
                         ??_ldexp 01C3                           ??_frexp 0124              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                 i1___aldiv@divisor 0020                 i1___aldiv@counter 0028  
                         ??_trunc 01B9                     ?_setPedalMode 0070                        __pbssBANK1 00C1  
                      __pbssBANK3 01EA                        __pbssBANK4 0220                        __pbssBANK5 02A0  
                      __pbssBANK6 0320                        __pbssBANK7 03A0                        __pbssBANK8 0420  
              __size_of_eval_poly 0072                  ??i1_set_leds_top 0074                   __CFG_VCAPEN$OFF 0000  
              __size_of_modSawRev 0022                __size_of_modSquare 001E                 ?_setFeedbackState 0120  
                   i1_modSin$2916 00A0          __end_of_setPresetDisplay 0800                        _delay_time 0249  
                _long_press_limit 00D9      __size_of_setDoublePressState 003D                        _delayfound 02CD  
                      __pmaintext 0C0A                ??_setFeedbackState 0122                    _InitializeTaps 2C9F  
                         ?___ftge 0120                           ?___lmul 0120                           ?___wmul 01AE  
                      __pintentry 0004                     _scaleiA10kPot 1B77                        _blink_rate 00DD  
                   ??_adc_convert 0122                         ?___altoft 01AE                           ?_modSaw 0064  
                         ?_modSin 01B4                           ?_modTri 0064                    ___lmul@product 0128  
                 _setLongTapState 2B90                         ?___awtoft 0128                         ?___ftpack 0120  
             modSquare@inflection 0067                        ??i1___ftge 0076                         ?___lltoft 0128  
                      ??i1___lmul 0078                        ??i1___wmul 007E                    _FLASH_ReadWord 1000  
 __end_of_updateSwitchBypassState 1801                       modulation@x 002E                       modulation@y 0032  
                      ??i1_modSin 006A                        _ldexp$2596 01C5                   _debounce_bypass 02C7  
                  ??_setPedalMode 0127                USARTWriteInt@F3536 02B4                     _suspend_blink 00D2  
                    modSaw@period 00AE                           _UQFront 00CE                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 2D4C              __end_of_scaleA10kPot 18E7  
                    modSin@period 01C2            __end_of_InitializeTaps 2CC5                      modSin@tmpVal 01C5  
                   ?_set_leds_top 0120                        _knob1_prev 024F        __size_of_update_selectMode 005A  
                      _knob2_prev 0251                        _knob3_prev 0253                        _knob4_prev 0255  
                      _knob5_prev 0257                  ?_set_subdivision 01BF                         ?_showSave 0070  
                         ___aldiv 24D9                    ?_scaleiA10kPot 01E7                   __size_of___ftge 003C  
                    ??i1___awtoft 0061                      ??i1___ftpack 0075                           ___awdiv 2271  
                 __size_of___lmul 0030                           ___ftadd 1116                           ___ftdiv 1ACE  
                         ___ftneg 2AE9                        _knob_1_pos 022E                        _knob_2_pos 0230  
                 __size_of___wmul 001C                           ___ftmul 1CD5                        _knob_3_pos 0232  
                         ___ftsub 2CEF                           ___fttol 2667                        _knob_4_pos 0234  
                      _knob_5_pos 0236                 _switchTap_pressed 01EE                        ??___altoft 01B2  
            _setExpressionDisplay 2B46            __end_of_FLASH_ReadWord 1020                   __size_of_modSaw 0177  
                 __size_of_modSin 01AC                        ??___awtoft 012B                        ??___ftpack 0125  
                 __size_of_modTri 01BE                 __end_of_eval_poly 2457                InitializeTaps@itap 0121  
                      ??___lltoft 012C                           __ptext1 22C2                           __ptext2 2E12  
                         __ptext3 04C7                           __ptext4 2B90                           __ptext5 24D9  
                         __ptext6 1F15                           __ptext7 2B77                           __ptext8 2EC1  
                         __ptext9 2B32            ??_getSwitchBypassState 0122                 __end_of_modSawRev 2C59  
                       _T2CONbits 001C                  _adjust_sub_delay 023E                      __size_of_map 008B  
                    __size_of_exp 0159                      __size_of_log 00D1                      __size_of_isr 0442  
          ??_setSwitchBypassState 0134                      __size_of_sin 01CF                      __size_of_pow 0116  
             __end_of_adc_convert 2B77                      modTri@period 00A6                 __end_of_modSquare 2C19  
                 ??_scaleA100kPot 0170                  ___aldiv@dividend 0124                i1modSin@inflection 0067  
                    modTri@tmpVal 00A9                           _wait_ms 2DAC                           clrloop0 2B09  
            end_of_initialization 04C3                           exp@sign 01D4                        _modulation 2F7E  
              __end_ofi1___awtoft 2C7B                __end_ofi1___ftpack 2380                           init_ram 2AFC  
                      ??_init_adc 0120                           initloop 2AFD                        ??_init_pwm 0120  
    updateSwitchBypassState@state 0120                _solidring_tactiles 2F3E                     _longTap_timer 0238  
                   _longTap_state 00DF                     _longTap_start 01ED                    ??_set_leds_top 0124  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070                           pow@sign 01E2  
               scaleA10kPot@input 01E7           __end_of_setLongTapState 2BA9                    i1modSin@period 00A6  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 0132                         _RCSTAbits 019D  
                  i1modSin@tmpVal 00A9                        ??_showSave 0137                  ___aldiv@quotient 012B  
    __size_of_read_bottom_tactile 004A               ?_solidring_tactiles 0070                      __pstringtext 2800  
       FLASH_ReadWord@GIEBitValue 0122             ?_setExpressionDisplay 0070              __size_of_update_mode 0038  
           i1___wmul@multiplicand 005A                   ?_FLASH_ReadWord 0120                 _expressionChannel 0264  
                       _PORTAbits 000C                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010                        _test_timer 02C1                         _USARTInit 2022  
                       _TRISBbits 008D                         _TRISCbits 008E                         _TRISDbits 008F  
                       _TRISEbits 0090                         _TRISFbits 030C                         _TRISGbits 030D  
                       i1___aldiv 2457                         i1___ftadd 1020           setFeedbackState@f_state 0120  
                       i1___ftdiv 1A25                         i1___ftneg 2AD7                         i1___ftmul 1C22  
            ??_solidring_tactiles 0132                         i1___fttol 25E0       __end_of_ConfigureOscillator 2AD3  
                      map@out_max 016A                        map@out_min 0167       __size_of_updateSwitchBypass 00EB  
        __end_of_initSwitchBypass 2B23                       _CCP1CONbits 0293                       ___ftdiv@exp 013C  
        __size_of_set_leds_bottom 0034                       _CCP2CONbits 029A                         _TXSTAbits 019E  
            _switchBypass_pressed 023C                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                   ??_scaleiA10kPot 0170  
                     _CCP7CONbits 0616                       ___ftmul@exp 0158                adc_convert@channel 0123  
                     _CCP8CONbits 0619                       _CCP9CONbits 061C              set_leds_top@ledState 0122  
                  __end_of___ftge 2EC1              __end_of_setPedalMode 2C9F                    __end_of___lmul 2DAC  
                  __end_of___wmul 2BFB                      _double_timer 0220                       _adc_convert 2B5E  
                  _switchTap_down 0247                    __end_of_modSaw 14DC                    __end_of_modSin 1800  
                  __end_of_modTri 0A3B                    modSawRev@angle 006A                        floor@expon 01BD  
               __size_ofi1___ftge 003B             i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F  
             start_initialization 0448                 __size_ofi1___wmul 001C                        ?_USARTInit 0120  
                      eval_poly@d 01B7                        eval_poly@n 01B9                        eval_poly@x 01B4  
           _bottomTactile_pressed 023F               _setDoublePressState 2EC1                        ldexp@value 01BE  
                      ?i1___aldiv 0020                       __end_of_map 2800                       __end_of_exp 1365  
                     __end_of_log 1F15                       __end_of_isr 0446                       __end_of_sin 0C0A  
                      ?i1___ftadd 002D                       __end_of_pow 07C6                        ?i1___ftdiv 003A  
                      ?i1___ftneg 002A                 __size_ofi1_modSin 0178                        ?i1___ftmul 0078  
                      ?i1___fttol 004A             __size_of_scaleA10kPot 0091                _adjusted_pot_value 02C5  
                     ?_modulation 002E                scaleiA10kPot@input 01E7                        frexp@value 0120  
          __size_of_resetRingLEDs 001A              ?_setDoublePressState 0138                  ?_setLongTapState 0120  
               ?_setPresetDisplay 0070                          ??___ftge 0126                          ??___lmul 0128  
          ??_setExpressionDisplay 0124                          ??___wmul 0170                ??_setPresetDisplay 0124  
                     __pdataBANK1 00D3                       __pdataBANK3 01EF                       __pdataBANK4 0249  
                     __pdataBANK5 02E3                          ??_modSaw 007E                          ??_modSin 01BA  
              i1___aldiv@dividend 0024                          ??_modTri 007E                     _tap_iteration 025D  
        __size_of_updateSwitchTap 01E9                 __size_of___altoft 004B         __size_of_setFeedbackState 0019  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                       __pbssBIGRAM 2408  
                    _scaleA10kPot 1856                 __size_of___lltoft 002A                     ??_init_timer0 0120  
                   ??_init_timer2 0120              __end_of_set_leds_top 1856                         ___latbits 0003  
  setExpressionDisplay@ledChannel 0126                _switchBypass_state 00E1                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK3 01A0  
                   __pcstackBANK4 0267                     __pcstackBANK5 02D5            __size_of_ring_tactiles 0050  
                  _expSwitchState 0262                     _delay_counter 02CB                  i1___lmul@product 0078  
                scaleiA10kPot@pwm 0267          ?_updateSwitchBypassState 0120                        sin@coeff_a 2839  
                      sin@coeff_b 2848                i1___aldiv@quotient 002A                    isr@tmpSubDelay 00BF  
                        ?_InitApp 0070             ??_setDoublePressState 013A                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                         _main$2790 02E0                         _main$2788 02DA  
                       _main$2789 02DD                          ?___aldiv 0120                 ??_set_leds_bottom 0122  
              _currentBypassState 0260                          ?___awdiv 0070                          ?___ftadd 0141  
                        ?___ftdiv 012E                          ?___ftneg 013E                          ?___ftmul 014E  
                        ?___ftsub 01BF                          ?___fttol 01A0                 __size_of_showSave 0014  
              _modulation_changed 0243                _scaleA100kPot$2793 026A                _scaleA100kPot$2794 026D  
                   ?_calcSinArray 0070                       _blink_delay 024D               __size_of_modulation 0041  
                   _resetRingLEDs 2BA9                       _blink_state 025F                         _eval_poly 23E5  
                     ??_USARTInit 0122                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                       ??i1___aldiv 007C                          ?_wait_ms 012C  
                     ??i1___ftadd 0033                       ??i1___ftdiv 0040                       ??i1___ftneg 007E  
                       _modSawRev 2C37                       ??i1___ftmul 0020                       ??i1___fttol 004E  
             _read_bottom_tactile 213E                    __size_of_floor 00A7                    __size_of_ldexp 0097  
                  __size_of_frexp 0040                         _modSquare 2BFB                    _presetModeCnst 0265  
                  __size_of_trunc 0048               __end_of_init_timer0 0807               __end_of_init_timer2 2AE9  
                       _mod_value 023A                         _mod_timer 0224                  ??_InitializeTaps 0120  
                 ___aldiv@divisor 0120                   ___aldiv@counter 0129                    _presetSaveMode 00D1  
                  ___wmul@product 01B2                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 0259  
                       clear_ram0 2B08                         _tap_timer 00C5                         _tap_total 02BD  
           __size_of_setPedalMode 0024                     i1modSin@angle 0064                     set_leds_top@x 0120  
                        _PIR1bits 0011                     _ring_tactiles 2221                     i1modSin@shift 00A3  
                ??_FLASH_ReadWord 0122              ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048  
                  ??_calcSinArray 01D3         initSwitchBypass@initState 0136                         map@in_max 0164  
                       map@in_min 0161                    ?_resetRingLEDs 0070                         _sub_timer 00C1  
                        i1___ftge 2E4A                        _ADCON0bits 009D                          i1___lmul 2D1D  
                      _ADCON1bits 009E          __size_of_set_subdivision 00BB                 ___wmul@multiplier 01AE  
                set_subdivision@x 01BF                  set_subdivision@y 01C1                          i1___wmul 2BC3  
       __size_of_read_top_tactile 004E                          i1_modSin 14DC                        ?_eval_poly 01B4  
   __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 0048                        ?_modSawRev 006A  
           __end_of_scaleA100kPot 25E0                 ??_updateSwitchTap 013C                 ___lmul@multiplier 0120  
                      ?_modSquare 0064                      _setPedalMode 2C7B                 _ReadSavedSettings 0807  
               ?_initSwitchBypass 0070                 ring_tactiles@iLed 0133                    wait_ms@timeSec 012C  
              ?_ReadSavedSettings 0070                       _modSaw$2913 00A0                       _modSaw$2914 00A3  
                     _modSaw$2915 00A6                    wait_ms@timemsl 012E                         frexp@eptr 0123  
     setSwitchBypassState@f_state 0132                       _modSin$2801 01BC                ??_initSwitchBypass 0136  
                __size_of_InitApp 0030                    ?_ring_tactiles 0070                         modSaw@mod 00A9  
                     _mode1_state 0242                     ??_update_mode 0127                       _mode2_state 00D0  
           ??_read_bottom_tactile 0132                       _modTri$2912 00A0               updateSwitchTap@iCnt 0144  
             ??_ReadSavedSettings 0124                        _APFCONbits 011D                  __size_of___aldiv 0082  
                __size_of___awdiv 0051                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 0120                  __size_of___ftneg 0009                          ___altoft 2188  
                __size_of___ftmul 00B4                  __size_of___ftsub 002E                  __size_of___fttol 0087  
                        ___awtoft 2000             __size_of_set_leds_top 0054                          ___ftpack 2380  
                        _map$2791 016D                          ___lltoft 2CC5            _preset_programmning_on 0245  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  modTri@inflection 0067  
                set_leds_bottom@x 0120                  _setFeedbackState 2B77                          _exp$2564 01CF  
                        _exp$2809 01CC                          _isr$2911 00BC                       _init_timer0 0800  
                     _init_timer2 2AE0                _delay_time_changed 0261        __end_of_updateSwitchBypass 2000  
                        __ptext10 2F3E                          __ptext11 2221                          __ptext20 255B  
                        __ptext12 2C7B                          __ptext21 06B0                          __ptext13 07C6  
                        __ptext30 2B14                          __ptext22 1E44                          __ptext14 2B46  
                        __ptext31 20AE                          __ptext23 120C                          __ptext15 2BA9  
                        __ptext40 2667                          __ptext32 2DAC                          __ptext24 18E7  
                        __ptext16 1D89                          __ptext41 2E85                          __ptext33 2D7C  
                        __ptext25 2CC5                          __ptext17 20F6                          __ptext50 2000  
                        __ptext42 2188                          __ptext34 1800                          __ptext26 21D3  
                        __ptext18 1B77                          __ptext51 2380                          __ptext43 23E5  
                        __ptext35 2AD3                          __ptext27 213E                          __ptext19 1856  
                        __ptext60 2FBF                          __ptext52 2B5E                          __ptext44 2BDF  
                        __ptext36 26EE                          __ptext28 1654                          __ptext61 2AE0  
                        __ptext53 2022                          __ptext45 1CD5                          __ptext37 0A3B  
                        __ptext29 2775                          __ptext70 2F7E                          __ptext62 0800  
                        __ptext54 0807                          __ptext46 2CEF                          __ptext38 197E  
                        __ptext71 2D1D                          __ptext63 2AF2                          __ptext55 1802  
                        __ptext47 1116                          __ptext39 2EFE                          __ptext80 2E4A  
                        __ptext72 2457                          __ptext64 2ACF                          __ptext56 2DDE  
                        __ptext48 2AE9                          __ptext81 1A25                          __ptext73 087D  
                        __ptext57 1000                          __ptext49 1ACE                          __ptext82 1020  
                        __ptext74 2BFB                          __ptext66 2066                          __ptext58 2C9F  
                        __ptext83 231C                          __ptext75 2C37                          __ptext67 14DC  
                        __ptext59 2D4C                          __ptext84 2271                          __ptext76 1365  
                        __ptext68 2BC3                          __ptext77 25E0                          __ptext69 2C59  
                        __ptext78 2AD7                          __ptext79 1C22                          _sin$2808 01CC  
       __end_of_ReadSavedSettings 087D                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 02B9                          _pow$2806 01DC                          _pow$2807 01DF  
                   _presetChannel 01EF                      ??_modulation 0036                       _mod_counter 01EA  
                        _modArray 2408                        trunc@expon 01BD                          _init_adc 2AF2  
                   __size_of_main 03F6                          _init_pwm 2FBF                          _sinArray 2482  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 1802                          _showSave 2B32  
                        _num_taps 00E0                     calcSinArray@x 01D7             __end_of_scaleiA10kPot 1C22  
                        int$flags 007E                   ??_resetRingLEDs 0124                   i1set_leds_top@x 0070  
                  modSquare@angle 0064               __end_of_update_mode 2E4A                          exp@coeff 2800  
                        _symmetry 025B               modSawRev@inflection 006D                          log@coeff 281E  
              __end_of_modulation 2FBF                calcSinArray@iAngle 01DB                        _INTCONbits 000B  
                     ??_eval_poly 0170         __size_of_setPresetDisplay 003A                       _tap_history 02A0  
                     ??_modSawRev 00B1                 ??_set_subdivision 01C3                       ??_modSquare 007E  
              calcSinArray@tmpVal 01D8                          intlevel1 0000              __end_of_calcSinArray 2775  
                 _set_leds_bottom 2DDE                        _PMCON1bits 0195                   ??_ring_tactiles 0132  
               __CFG_CLKOUTEN$OFF 0000                   _reset_sub_delay 0246                        _OSCCONbits 0099  
                    _preset_blink 0244                    i1_set_leds_top 2066  __size_of_updateSwitchBypassState 0001  
   __size_of_setExpressionDisplay 0018                _scaleiA10kPot$2800 026D                _scaleiA10kPot$2799 026A  
        __size_of_setLongTapState 0019                  _read_top_tactile 21D3                      ___aldiv@sign 012A  
      __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 2EFE                      _CCP10CONbits 061F  
               _bottom_push_state 00D7        setPresetDisplay@ledChannel 0126            __end_ofi1_set_leds_top 20AE  
