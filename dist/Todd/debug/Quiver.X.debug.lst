

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jan 14 20:46:37 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	dabs	1,0x920,80
   106                           	dabs	1,0x8A0,80
   107                           	dabs	1,0x820,80
   108                           	dabs	1,0x7A0,80
   109                           	dabs	1,0x742,46
   110                           	dabs	1,0x720,34
   111                           	dabs	1,0x6A0,80
   112                           	dabs	1,0x620,80
   113                           	dabs	1,0x5BA,54
   114                           	dabs	1,0x2482,0,_sinArray
   115                           	dabs	1,0x238A,0,_modArray
   116                           	dabs	1,0x7E,2
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  008F                     	;# 
   151  0090                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0095                     	;# 
   157  0096                     	;# 
   158  0097                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  0110                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  011D                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  018F                     	;# 
   177  0190                     	;# 
   178  0191                     	;# 
   179  0191                     	;# 
   180  0192                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0197                     	;# 
   187  0199                     	;# 
   188  0199                     	;# 
   189  0199                     	;# 
   190  019A                     	;# 
   191  019A                     	;# 
   192  019A                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019D                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019E                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  019F                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  020F                     	;# 
   212  0210                     	;# 
   213  0211                     	;# 
   214  0211                     	;# 
   215  0212                     	;# 
   216  0212                     	;# 
   217  0213                     	;# 
   218  0213                     	;# 
   219  0214                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0216                     	;# 
   225  0216                     	;# 
   226  0217                     	;# 
   227  0217                     	;# 
   228  0219                     	;# 
   229  021A                     	;# 
   230  021B                     	;# 
   231  021C                     	;# 
   232  021D                     	;# 
   233  021E                     	;# 
   234  021F                     	;# 
   235  028C                     	;# 
   236  028D                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029D                     	;# 
   246  029E                     	;# 
   247  029F                     	;# 
   248  030C                     	;# 
   249  030D                     	;# 
   250  0311                     	;# 
   251  0311                     	;# 
   252  0312                     	;# 
   253  0313                     	;# 
   254  0318                     	;# 
   255  0318                     	;# 
   256  0319                     	;# 
   257  031A                     	;# 
   258  031C                     	;# 
   259  031C                     	;# 
   260  031D                     	;# 
   261  031E                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  040C                     	;# 
   268  040D                     	;# 
   269  0411                     	;# 
   270  0411                     	;# 
   271  0412                     	;# 
   272  0413                     	;# 
   273  0414                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  0418                     	;# 
   278  0418                     	;# 
   279  0419                     	;# 
   280  041A                     	;# 
   281  041B                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  048D                     	;# 
   286  0491                     	;# 
   287  0491                     	;# 
   288  0492                     	;# 
   289  0492                     	;# 
   290  0493                     	;# 
   291  0493                     	;# 
   292  0493                     	;# 
   293  0494                     	;# 
   294  0494                     	;# 
   295  0495                     	;# 
   296  0495                     	;# 
   297  0496                     	;# 
   298  0496                     	;# 
   299  0497                     	;# 
   300  0497                     	;# 
   301  0595                     	;# 
   302  0596                     	;# 
   303  0597                     	;# 
   304  059C                     	;# 
   305  059D                     	;# 
   306  059E                     	;# 
   307  0611                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  0614                     	;# 
   313  0615                     	;# 
   314  0616                     	;# 
   315  0617                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061A                     	;# 
   321  061B                     	;# 
   322  061C                     	;# 
   323  061D                     	;# 
   324  061D                     	;# 
   325  061E                     	;# 
   326  061F                     	;# 
   327  0FE4                     	;# 
   328  0FE5                     	;# 
   329  0FE6                     	;# 
   330  0FE7                     	;# 
   331  0FE8                     	;# 
   332  0FE9                     	;# 
   333  0FEA                     	;# 
   334  0FEB                     	;# 
   335  0FED                     	;# 
   336  0FEE                     	;# 
   337  0FEF                     	;# 
   338  0000                     	;# 
   339  0001                     	;# 
   340  0002                     	;# 
   341  0003                     	;# 
   342  0004                     	;# 
   343  0005                     	;# 
   344  0006                     	;# 
   345  0007                     	;# 
   346  0008                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000F                     	;# 
   354  0010                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0014                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  008F                     	;# 
   372  0090                     	;# 
   373  0091                     	;# 
   374  0092                     	;# 
   375  0093                     	;# 
   376  0094                     	;# 
   377  0095                     	;# 
   378  0096                     	;# 
   379  0097                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009B                     	;# 
   384  009C                     	;# 
   385  009D                     	;# 
   386  009E                     	;# 
   387  010C                     	;# 
   388  010D                     	;# 
   389  010E                     	;# 
   390  010F                     	;# 
   391  0110                     	;# 
   392  0116                     	;# 
   393  0117                     	;# 
   394  011D                     	;# 
   395  018C                     	;# 
   396  018D                     	;# 
   397  018F                     	;# 
   398  0190                     	;# 
   399  0191                     	;# 
   400  0191                     	;# 
   401  0192                     	;# 
   402  0193                     	;# 
   403  0193                     	;# 
   404  0194                     	;# 
   405  0195                     	;# 
   406  0196                     	;# 
   407  0197                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  0199                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019A                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019C                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019D                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  019F                     	;# 
   431  020D                     	;# 
   432  020F                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0219                     	;# 
   450  021A                     	;# 
   451  021B                     	;# 
   452  021C                     	;# 
   453  021D                     	;# 
   454  021E                     	;# 
   455  021F                     	;# 
   456  028C                     	;# 
   457  028D                     	;# 
   458  0291                     	;# 
   459  0291                     	;# 
   460  0292                     	;# 
   461  0293                     	;# 
   462  0298                     	;# 
   463  0298                     	;# 
   464  0299                     	;# 
   465  029A                     	;# 
   466  029D                     	;# 
   467  029E                     	;# 
   468  029F                     	;# 
   469  030C                     	;# 
   470  030D                     	;# 
   471  0311                     	;# 
   472  0311                     	;# 
   473  0312                     	;# 
   474  0313                     	;# 
   475  0318                     	;# 
   476  0318                     	;# 
   477  0319                     	;# 
   478  031A                     	;# 
   479  031C                     	;# 
   480  031C                     	;# 
   481  031D                     	;# 
   482  031E                     	;# 
   483  038C                     	;# 
   484  038D                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  040C                     	;# 
   489  040D                     	;# 
   490  0411                     	;# 
   491  0411                     	;# 
   492  0412                     	;# 
   493  0413                     	;# 
   494  0414                     	;# 
   495  0415                     	;# 
   496  0416                     	;# 
   497  0417                     	;# 
   498  0418                     	;# 
   499  0418                     	;# 
   500  0419                     	;# 
   501  041A                     	;# 
   502  041B                     	;# 
   503  041C                     	;# 
   504  041D                     	;# 
   505  041E                     	;# 
   506  048D                     	;# 
   507  0491                     	;# 
   508  0491                     	;# 
   509  0492                     	;# 
   510  0492                     	;# 
   511  0493                     	;# 
   512  0493                     	;# 
   513  0493                     	;# 
   514  0494                     	;# 
   515  0494                     	;# 
   516  0495                     	;# 
   517  0495                     	;# 
   518  0496                     	;# 
   519  0496                     	;# 
   520  0497                     	;# 
   521  0497                     	;# 
   522  0595                     	;# 
   523  0596                     	;# 
   524  0597                     	;# 
   525  059C                     	;# 
   526  059D                     	;# 
   527  059E                     	;# 
   528  0611                     	;# 
   529  0611                     	;# 
   530  0612                     	;# 
   531  0613                     	;# 
   532  0614                     	;# 
   533  0614                     	;# 
   534  0615                     	;# 
   535  0616                     	;# 
   536  0617                     	;# 
   537  0617                     	;# 
   538  0618                     	;# 
   539  0619                     	;# 
   540  061A                     	;# 
   541  061A                     	;# 
   542  061B                     	;# 
   543  061C                     	;# 
   544  061D                     	;# 
   545  061D                     	;# 
   546  061E                     	;# 
   547  061F                     	;# 
   548  0FE4                     	;# 
   549  0FE5                     	;# 
   550  0FE6                     	;# 
   551  0FE7                     	;# 
   552  0FE8                     	;# 
   553  0FE9                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEF                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0008                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  000F                     	;# 
   575  0010                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0013                     	;# 
   579  0014                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  008F                     	;# 
   593  0090                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0093                     	;# 
   597  0094                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0097                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  010C                     	;# 
   609  010D                     	;# 
   610  010E                     	;# 
   611  010F                     	;# 
   612  0110                     	;# 
   613  0116                     	;# 
   614  0117                     	;# 
   615  011D                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018F                     	;# 
   619  0190                     	;# 
   620  0191                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0197                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  020F                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  028C                     	;# 
   678  028D                     	;# 
   679  0291                     	;# 
   680  0291                     	;# 
   681  0292                     	;# 
   682  0293                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  029D                     	;# 
   688  029E                     	;# 
   689  029F                     	;# 
   690  030C                     	;# 
   691  030D                     	;# 
   692  0311                     	;# 
   693  0311                     	;# 
   694  0312                     	;# 
   695  0313                     	;# 
   696  0318                     	;# 
   697  0318                     	;# 
   698  0319                     	;# 
   699  031A                     	;# 
   700  031C                     	;# 
   701  031C                     	;# 
   702  031D                     	;# 
   703  031E                     	;# 
   704  038C                     	;# 
   705  038D                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  040C                     	;# 
   710  040D                     	;# 
   711  0411                     	;# 
   712  0411                     	;# 
   713  0412                     	;# 
   714  0413                     	;# 
   715  0414                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  0418                     	;# 
   720  0418                     	;# 
   721  0419                     	;# 
   722  041A                     	;# 
   723  041B                     	;# 
   724  041C                     	;# 
   725  041D                     	;# 
   726  041E                     	;# 
   727  048D                     	;# 
   728  0491                     	;# 
   729  0491                     	;# 
   730  0492                     	;# 
   731  0492                     	;# 
   732  0493                     	;# 
   733  0493                     	;# 
   734  0493                     	;# 
   735  0494                     	;# 
   736  0494                     	;# 
   737  0495                     	;# 
   738  0495                     	;# 
   739  0496                     	;# 
   740  0496                     	;# 
   741  0497                     	;# 
   742  0497                     	;# 
   743  0595                     	;# 
   744  0596                     	;# 
   745  0597                     	;# 
   746  059C                     	;# 
   747  059D                     	;# 
   748  059E                     	;# 
   749  0611                     	;# 
   750  0611                     	;# 
   751  0612                     	;# 
   752  0613                     	;# 
   753  0614                     	;# 
   754  0614                     	;# 
   755  0615                     	;# 
   756  0616                     	;# 
   757  0617                     	;# 
   758  0617                     	;# 
   759  0618                     	;# 
   760  0619                     	;# 
   761  061A                     	;# 
   762  061A                     	;# 
   763  061B                     	;# 
   764  061C                     	;# 
   765  061D                     	;# 
   766  061D                     	;# 
   767  061E                     	;# 
   768  061F                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000F                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0096                     	;# 
   821  0097                     	;# 
   822  0099                     	;# 
   823  009A                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010E                     	;# 
   832  010F                     	;# 
   833  0110                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  011D                     	;# 
   837  018C                     	;# 
   838  018D                     	;# 
   839  018F                     	;# 
   840  0190                     	;# 
   841  0191                     	;# 
   842  0191                     	;# 
   843  0192                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0197                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019A                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019C                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019D                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  020D                     	;# 
   874  020F                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0219                     	;# 
   892  021A                     	;# 
   893  021B                     	;# 
   894  021C                     	;# 
   895  021D                     	;# 
   896  021E                     	;# 
   897  021F                     	;# 
   898  028C                     	;# 
   899  028D                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0298                     	;# 
   905  0298                     	;# 
   906  0299                     	;# 
   907  029A                     	;# 
   908  029D                     	;# 
   909  029E                     	;# 
   910  029F                     	;# 
   911  030C                     	;# 
   912  030D                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  031C                     	;# 
   922  031C                     	;# 
   923  031D                     	;# 
   924  031E                     	;# 
   925  038C                     	;# 
   926  038D                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  040C                     	;# 
   931  040D                     	;# 
   932  0411                     	;# 
   933  0411                     	;# 
   934  0412                     	;# 
   935  0413                     	;# 
   936  0414                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  0418                     	;# 
   941  0418                     	;# 
   942  0419                     	;# 
   943  041A                     	;# 
   944  041B                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  048D                     	;# 
   949  0491                     	;# 
   950  0491                     	;# 
   951  0492                     	;# 
   952  0492                     	;# 
   953  0493                     	;# 
   954  0493                     	;# 
   955  0493                     	;# 
   956  0494                     	;# 
   957  0494                     	;# 
   958  0495                     	;# 
   959  0495                     	;# 
   960  0496                     	;# 
   961  0496                     	;# 
   962  0497                     	;# 
   963  0497                     	;# 
   964  0595                     	;# 
   965  0596                     	;# 
   966  0597                     	;# 
   967  059C                     	;# 
   968  059D                     	;# 
   969  059E                     	;# 
   970  0611                     	;# 
   971  0611                     	;# 
   972  0612                     	;# 
   973  0613                     	;# 
   974  0614                     	;# 
   975  0614                     	;# 
   976  0615                     	;# 
   977  0616                     	;# 
   978  0617                     	;# 
   979  0617                     	;# 
   980  0618                     	;# 
   981  0619                     	;# 
   982  061A                     	;# 
   983  061A                     	;# 
   984  061B                     	;# 
   985  061C                     	;# 
   986  061D                     	;# 
   987  061D                     	;# 
   988  061E                     	;# 
   989  061F                     	;# 
   990  0FE4                     	;# 
   991  0FE5                     	;# 
   992  0FE6                     	;# 
   993  0FE7                     	;# 
   994  0FE8                     	;# 
   995  0FE9                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEF                     	;# 
  1001  0000                     	;# 
  1002  0001                     	;# 
  1003  0002                     	;# 
  1004  0003                     	;# 
  1005  0004                     	;# 
  1006  0005                     	;# 
  1007  0006                     	;# 
  1008  0007                     	;# 
  1009  0008                     	;# 
  1010  0009                     	;# 
  1011  000A                     	;# 
  1012  000B                     	;# 
  1013  000C                     	;# 
  1014  000D                     	;# 
  1015  000E                     	;# 
  1016  000F                     	;# 
  1017  0010                     	;# 
  1018  0011                     	;# 
  1019  0012                     	;# 
  1020  0013                     	;# 
  1021  0014                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  008C                     	;# 
  1032  008D                     	;# 
  1033  008E                     	;# 
  1034  008F                     	;# 
  1035  0090                     	;# 
  1036  0091                     	;# 
  1037  0092                     	;# 
  1038  0093                     	;# 
  1039  0094                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0099                     	;# 
  1044  009A                     	;# 
  1045  009B                     	;# 
  1046  009B                     	;# 
  1047  009C                     	;# 
  1048  009D                     	;# 
  1049  009E                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0110                     	;# 
  1055  0116                     	;# 
  1056  0117                     	;# 
  1057  011D                     	;# 
  1058  018C                     	;# 
  1059  018D                     	;# 
  1060  018F                     	;# 
  1061  0190                     	;# 
  1062  0191                     	;# 
  1063  0191                     	;# 
  1064  0192                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0197                     	;# 
  1071  0199                     	;# 
  1072  0199                     	;# 
  1073  0199                     	;# 
  1074  019A                     	;# 
  1075  019A                     	;# 
  1076  019A                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019C                     	;# 
  1085  019D                     	;# 
  1086  019D                     	;# 
  1087  019D                     	;# 
  1088  019E                     	;# 
  1089  019E                     	;# 
  1090  019E                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  019F                     	;# 
  1094  020D                     	;# 
  1095  020F                     	;# 
  1096  0210                     	;# 
  1097  0211                     	;# 
  1098  0211                     	;# 
  1099  0212                     	;# 
  1100  0212                     	;# 
  1101  0213                     	;# 
  1102  0213                     	;# 
  1103  0214                     	;# 
  1104  0214                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0216                     	;# 
  1109  0216                     	;# 
  1110  0217                     	;# 
  1111  0217                     	;# 
  1112  0219                     	;# 
  1113  021A                     	;# 
  1114  021B                     	;# 
  1115  021C                     	;# 
  1116  021D                     	;# 
  1117  021E                     	;# 
  1118  021F                     	;# 
  1119  028C                     	;# 
  1120  028D                     	;# 
  1121  0291                     	;# 
  1122  0291                     	;# 
  1123  0292                     	;# 
  1124  0293                     	;# 
  1125  0298                     	;# 
  1126  0298                     	;# 
  1127  0299                     	;# 
  1128  029A                     	;# 
  1129  029D                     	;# 
  1130  029E                     	;# 
  1131  029F                     	;# 
  1132  030C                     	;# 
  1133  030D                     	;# 
  1134  0311                     	;# 
  1135  0311                     	;# 
  1136  0312                     	;# 
  1137  0313                     	;# 
  1138  0318                     	;# 
  1139  0318                     	;# 
  1140  0319                     	;# 
  1141  031A                     	;# 
  1142  031C                     	;# 
  1143  031C                     	;# 
  1144  031D                     	;# 
  1145  031E                     	;# 
  1146  038C                     	;# 
  1147  038D                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  040C                     	;# 
  1152  040D                     	;# 
  1153  0411                     	;# 
  1154  0411                     	;# 
  1155  0412                     	;# 
  1156  0413                     	;# 
  1157  0414                     	;# 
  1158  0415                     	;# 
  1159  0416                     	;# 
  1160  0417                     	;# 
  1161  0418                     	;# 
  1162  0418                     	;# 
  1163  0419                     	;# 
  1164  041A                     	;# 
  1165  041B                     	;# 
  1166  041C                     	;# 
  1167  041D                     	;# 
  1168  041E                     	;# 
  1169  048D                     	;# 
  1170  0491                     	;# 
  1171  0491                     	;# 
  1172  0492                     	;# 
  1173  0492                     	;# 
  1174  0493                     	;# 
  1175  0493                     	;# 
  1176  0493                     	;# 
  1177  0494                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0495                     	;# 
  1181  0496                     	;# 
  1182  0496                     	;# 
  1183  0497                     	;# 
  1184  0497                     	;# 
  1185  0595                     	;# 
  1186  0596                     	;# 
  1187  0597                     	;# 
  1188  059C                     	;# 
  1189  059D                     	;# 
  1190  059E                     	;# 
  1191  0611                     	;# 
  1192  0611                     	;# 
  1193  0612                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0614                     	;# 
  1197  0615                     	;# 
  1198  0616                     	;# 
  1199  0617                     	;# 
  1200  0617                     	;# 
  1201  0618                     	;# 
  1202  0619                     	;# 
  1203  061A                     	;# 
  1204  061A                     	;# 
  1205  061B                     	;# 
  1206  061C                     	;# 
  1207  061D                     	;# 
  1208  061D                     	;# 
  1209  061E                     	;# 
  1210  061F                     	;# 
  1211  0FE4                     	;# 
  1212  0FE5                     	;# 
  1213  0FE6                     	;# 
  1214  0FE7                     	;# 
  1215  0FE8                     	;# 
  1216  0FE9                     	;# 
  1217  0FEA                     	;# 
  1218  0FEB                     	;# 
  1219  0FED                     	;# 
  1220  0FEE                     	;# 
  1221  0FEF                     	;# 
  1222  0000                     	;# 
  1223  0001                     	;# 
  1224  0002                     	;# 
  1225  0003                     	;# 
  1226  0004                     	;# 
  1227  0005                     	;# 
  1228  0006                     	;# 
  1229  0007                     	;# 
  1230  0008                     	;# 
  1231  0009                     	;# 
  1232  000A                     	;# 
  1233  000B                     	;# 
  1234  000C                     	;# 
  1235  000D                     	;# 
  1236  000E                     	;# 
  1237  000F                     	;# 
  1238  0010                     	;# 
  1239  0011                     	;# 
  1240  0012                     	;# 
  1241  0013                     	;# 
  1242  0014                     	;# 
  1243  0015                     	;# 
  1244  0016                     	;# 
  1245  0016                     	;# 
  1246  0017                     	;# 
  1247  0018                     	;# 
  1248  0019                     	;# 
  1249  001A                     	;# 
  1250  001B                     	;# 
  1251  001C                     	;# 
  1252  008C                     	;# 
  1253  008D                     	;# 
  1254  008E                     	;# 
  1255  008F                     	;# 
  1256  0090                     	;# 
  1257  0091                     	;# 
  1258  0092                     	;# 
  1259  0093                     	;# 
  1260  0094                     	;# 
  1261  0095                     	;# 
  1262  0096                     	;# 
  1263  0097                     	;# 
  1264  0099                     	;# 
  1265  009A                     	;# 
  1266  009B                     	;# 
  1267  009B                     	;# 
  1268  009C                     	;# 
  1269  009D                     	;# 
  1270  009E                     	;# 
  1271  010C                     	;# 
  1272  010D                     	;# 
  1273  010E                     	;# 
  1274  010F                     	;# 
  1275  0110                     	;# 
  1276  0116                     	;# 
  1277  0117                     	;# 
  1278  011D                     	;# 
  1279  018C                     	;# 
  1280  018D                     	;# 
  1281  018F                     	;# 
  1282  0190                     	;# 
  1283  0191                     	;# 
  1284  0191                     	;# 
  1285  0192                     	;# 
  1286  0193                     	;# 
  1287  0193                     	;# 
  1288  0194                     	;# 
  1289  0195                     	;# 
  1290  0196                     	;# 
  1291  0197                     	;# 
  1292  0199                     	;# 
  1293  0199                     	;# 
  1294  0199                     	;# 
  1295  019A                     	;# 
  1296  019A                     	;# 
  1297  019A                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019B                     	;# 
  1303  019C                     	;# 
  1304  019C                     	;# 
  1305  019C                     	;# 
  1306  019D                     	;# 
  1307  019D                     	;# 
  1308  019D                     	;# 
  1309  019E                     	;# 
  1310  019E                     	;# 
  1311  019E                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  019F                     	;# 
  1315  020D                     	;# 
  1316  020F                     	;# 
  1317  0210                     	;# 
  1318  0211                     	;# 
  1319  0211                     	;# 
  1320  0212                     	;# 
  1321  0212                     	;# 
  1322  0213                     	;# 
  1323  0213                     	;# 
  1324  0214                     	;# 
  1325  0214                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0219                     	;# 
  1334  021A                     	;# 
  1335  021B                     	;# 
  1336  021C                     	;# 
  1337  021D                     	;# 
  1338  021E                     	;# 
  1339  021F                     	;# 
  1340  028C                     	;# 
  1341  028D                     	;# 
  1342  0291                     	;# 
  1343  0291                     	;# 
  1344  0292                     	;# 
  1345  0293                     	;# 
  1346  0298                     	;# 
  1347  0298                     	;# 
  1348  0299                     	;# 
  1349  029A                     	;# 
  1350  029D                     	;# 
  1351  029E                     	;# 
  1352  029F                     	;# 
  1353  030C                     	;# 
  1354  030D                     	;# 
  1355  0311                     	;# 
  1356  0311                     	;# 
  1357  0312                     	;# 
  1358  0313                     	;# 
  1359  0318                     	;# 
  1360  0318                     	;# 
  1361  0319                     	;# 
  1362  031A                     	;# 
  1363  031C                     	;# 
  1364  031C                     	;# 
  1365  031D                     	;# 
  1366  031E                     	;# 
  1367  038C                     	;# 
  1368  038D                     	;# 
  1369  0394                     	;# 
  1370  0395                     	;# 
  1371  0396                     	;# 
  1372  040C                     	;# 
  1373  040D                     	;# 
  1374  0411                     	;# 
  1375  0411                     	;# 
  1376  0412                     	;# 
  1377  0413                     	;# 
  1378  0414                     	;# 
  1379  0415                     	;# 
  1380  0416                     	;# 
  1381  0417                     	;# 
  1382  0418                     	;# 
  1383  0418                     	;# 
  1384  0419                     	;# 
  1385  041A                     	;# 
  1386  041B                     	;# 
  1387  041C                     	;# 
  1388  041D                     	;# 
  1389  041E                     	;# 
  1390  048D                     	;# 
  1391  0491                     	;# 
  1392  0491                     	;# 
  1393  0492                     	;# 
  1394  0492                     	;# 
  1395  0493                     	;# 
  1396  0493                     	;# 
  1397  0493                     	;# 
  1398  0494                     	;# 
  1399  0494                     	;# 
  1400  0495                     	;# 
  1401  0495                     	;# 
  1402  0496                     	;# 
  1403  0496                     	;# 
  1404  0497                     	;# 
  1405  0497                     	;# 
  1406  0595                     	;# 
  1407  0596                     	;# 
  1408  0597                     	;# 
  1409  059C                     	;# 
  1410  059D                     	;# 
  1411  059E                     	;# 
  1412  0611                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0614                     	;# 
  1418  0615                     	;# 
  1419  0616                     	;# 
  1420  0617                     	;# 
  1421  0617                     	;# 
  1422  0618                     	;# 
  1423  0619                     	;# 
  1424  061A                     	;# 
  1425  061A                     	;# 
  1426  061B                     	;# 
  1427  061C                     	;# 
  1428  061D                     	;# 
  1429  061D                     	;# 
  1430  061E                     	;# 
  1431  061F                     	;# 
  1432  0FE4                     	;# 
  1433  0FE5                     	;# 
  1434  0FE6                     	;# 
  1435  0FE7                     	;# 
  1436  0FE8                     	;# 
  1437  0FE9                     	;# 
  1438  0FEA                     	;# 
  1439  0FEB                     	;# 
  1440  0FED                     	;# 
  1441  0FEE                     	;# 
  1442  0FEF                     	;# 
  1443  0000                     	;# 
  1444  0001                     	;# 
  1445  0002                     	;# 
  1446  0003                     	;# 
  1447  0004                     	;# 
  1448  0005                     	;# 
  1449  0006                     	;# 
  1450  0007                     	;# 
  1451  0008                     	;# 
  1452  0009                     	;# 
  1453  000A                     	;# 
  1454  000B                     	;# 
  1455  000C                     	;# 
  1456  000D                     	;# 
  1457  000E                     	;# 
  1458  000F                     	;# 
  1459  0010                     	;# 
  1460  0011                     	;# 
  1461  0012                     	;# 
  1462  0013                     	;# 
  1463  0014                     	;# 
  1464  0015                     	;# 
  1465  0016                     	;# 
  1466  0016                     	;# 
  1467  0017                     	;# 
  1468  0018                     	;# 
  1469  0019                     	;# 
  1470  001A                     	;# 
  1471  001B                     	;# 
  1472  001C                     	;# 
  1473  008C                     	;# 
  1474  008D                     	;# 
  1475  008E                     	;# 
  1476  008F                     	;# 
  1477  0090                     	;# 
  1478  0091                     	;# 
  1479  0092                     	;# 
  1480  0093                     	;# 
  1481  0094                     	;# 
  1482  0095                     	;# 
  1483  0096                     	;# 
  1484  0097                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  010F                     	;# 
  1496  0110                     	;# 
  1497  0116                     	;# 
  1498  0117                     	;# 
  1499  011D                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018F                     	;# 
  1503  0190                     	;# 
  1504  0191                     	;# 
  1505  0191                     	;# 
  1506  0192                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0197                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019A                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019C                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019E                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  020D                     	;# 
  1537  020F                     	;# 
  1538  0210                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0216                     	;# 
  1551  0216                     	;# 
  1552  0217                     	;# 
  1553  0217                     	;# 
  1554  0219                     	;# 
  1555  021A                     	;# 
  1556  021B                     	;# 
  1557  021C                     	;# 
  1558  021D                     	;# 
  1559  021E                     	;# 
  1560  021F                     	;# 
  1561  028C                     	;# 
  1562  028D                     	;# 
  1563  0291                     	;# 
  1564  0291                     	;# 
  1565  0292                     	;# 
  1566  0293                     	;# 
  1567  0298                     	;# 
  1568  0298                     	;# 
  1569  0299                     	;# 
  1570  029A                     	;# 
  1571  029D                     	;# 
  1572  029E                     	;# 
  1573  029F                     	;# 
  1574  030C                     	;# 
  1575  030D                     	;# 
  1576  0311                     	;# 
  1577  0311                     	;# 
  1578  0312                     	;# 
  1579  0313                     	;# 
  1580  0318                     	;# 
  1581  0318                     	;# 
  1582  0319                     	;# 
  1583  031A                     	;# 
  1584  031C                     	;# 
  1585  031C                     	;# 
  1586  031D                     	;# 
  1587  031E                     	;# 
  1588  038C                     	;# 
  1589  038D                     	;# 
  1590  0394                     	;# 
  1591  0395                     	;# 
  1592  0396                     	;# 
  1593  040C                     	;# 
  1594  040D                     	;# 
  1595  0411                     	;# 
  1596  0411                     	;# 
  1597  0412                     	;# 
  1598  0413                     	;# 
  1599  0414                     	;# 
  1600  0415                     	;# 
  1601  0416                     	;# 
  1602  0417                     	;# 
  1603  0418                     	;# 
  1604  0418                     	;# 
  1605  0419                     	;# 
  1606  041A                     	;# 
  1607  041B                     	;# 
  1608  041C                     	;# 
  1609  041D                     	;# 
  1610  041E                     	;# 
  1611  048D                     	;# 
  1612  0491                     	;# 
  1613  0491                     	;# 
  1614  0492                     	;# 
  1615  0492                     	;# 
  1616  0493                     	;# 
  1617  0493                     	;# 
  1618  0493                     	;# 
  1619  0494                     	;# 
  1620  0494                     	;# 
  1621  0495                     	;# 
  1622  0495                     	;# 
  1623  0496                     	;# 
  1624  0496                     	;# 
  1625  0497                     	;# 
  1626  0497                     	;# 
  1627  0595                     	;# 
  1628  0596                     	;# 
  1629  0597                     	;# 
  1630  059C                     	;# 
  1631  059D                     	;# 
  1632  059E                     	;# 
  1633  0611                     	;# 
  1634  0611                     	;# 
  1635  0612                     	;# 
  1636  0613                     	;# 
  1637  0614                     	;# 
  1638  0614                     	;# 
  1639  0615                     	;# 
  1640  0616                     	;# 
  1641  0617                     	;# 
  1642  0617                     	;# 
  1643  0618                     	;# 
  1644  0619                     	;# 
  1645  061A                     	;# 
  1646  061A                     	;# 
  1647  061B                     	;# 
  1648  061C                     	;# 
  1649  061D                     	;# 
  1650  061D                     	;# 
  1651  061E                     	;# 
  1652  061F                     	;# 
  1653  0FE4                     	;# 
  1654  0FE5                     	;# 
  1655  0FE6                     	;# 
  1656  0FE7                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEB                     	;# 
  1661  0FED                     	;# 
  1662  0FEE                     	;# 
  1663  0FEF                     	;# 
  1664  0000                     	;# 
  1665  0001                     	;# 
  1666  0002                     	;# 
  1667  0003                     	;# 
  1668  0004                     	;# 
  1669  0005                     	;# 
  1670  0006                     	;# 
  1671  0007                     	;# 
  1672  0008                     	;# 
  1673  0009                     	;# 
  1674  000A                     	;# 
  1675  000B                     	;# 
  1676  000C                     	;# 
  1677  000D                     	;# 
  1678  000E                     	;# 
  1679  000F                     	;# 
  1680  0010                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0014                     	;# 
  1685  0015                     	;# 
  1686  0016                     	;# 
  1687  0016                     	;# 
  1688  0017                     	;# 
  1689  0018                     	;# 
  1690  0019                     	;# 
  1691  001A                     	;# 
  1692  001B                     	;# 
  1693  001C                     	;# 
  1694  008C                     	;# 
  1695  008D                     	;# 
  1696  008E                     	;# 
  1697  008F                     	;# 
  1698  0090                     	;# 
  1699  0091                     	;# 
  1700  0092                     	;# 
  1701  0093                     	;# 
  1702  0094                     	;# 
  1703  0095                     	;# 
  1704  0096                     	;# 
  1705  0097                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009B                     	;# 
  1710  009C                     	;# 
  1711  009D                     	;# 
  1712  009E                     	;# 
  1713  010C                     	;# 
  1714  010D                     	;# 
  1715  010E                     	;# 
  1716  010F                     	;# 
  1717  0110                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  011D                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018F                     	;# 
  1724  0190                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0197                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  0199                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019D                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  020D                     	;# 
  1758  020F                     	;# 
  1759  0210                     	;# 
  1760  0211                     	;# 
  1761  0211                     	;# 
  1762  0212                     	;# 
  1763  0212                     	;# 
  1764  0213                     	;# 
  1765  0213                     	;# 
  1766  0214                     	;# 
  1767  0214                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0216                     	;# 
  1772  0216                     	;# 
  1773  0217                     	;# 
  1774  0217                     	;# 
  1775  0219                     	;# 
  1776  021A                     	;# 
  1777  021B                     	;# 
  1778  021C                     	;# 
  1779  021D                     	;# 
  1780  021E                     	;# 
  1781  021F                     	;# 
  1782  028C                     	;# 
  1783  028D                     	;# 
  1784  0291                     	;# 
  1785  0291                     	;# 
  1786  0292                     	;# 
  1787  0293                     	;# 
  1788  0298                     	;# 
  1789  0298                     	;# 
  1790  0299                     	;# 
  1791  029A                     	;# 
  1792  029D                     	;# 
  1793  029E                     	;# 
  1794  029F                     	;# 
  1795  030C                     	;# 
  1796  030D                     	;# 
  1797  0311                     	;# 
  1798  0311                     	;# 
  1799  0312                     	;# 
  1800  0313                     	;# 
  1801  0318                     	;# 
  1802  0318                     	;# 
  1803  0319                     	;# 
  1804  031A                     	;# 
  1805  031C                     	;# 
  1806  031C                     	;# 
  1807  031D                     	;# 
  1808  031E                     	;# 
  1809  038C                     	;# 
  1810  038D                     	;# 
  1811  0394                     	;# 
  1812  0395                     	;# 
  1813  0396                     	;# 
  1814  040C                     	;# 
  1815  040D                     	;# 
  1816  0411                     	;# 
  1817  0411                     	;# 
  1818  0412                     	;# 
  1819  0413                     	;# 
  1820  0414                     	;# 
  1821  0415                     	;# 
  1822  0416                     	;# 
  1823  0417                     	;# 
  1824  0418                     	;# 
  1825  0418                     	;# 
  1826  0419                     	;# 
  1827  041A                     	;# 
  1828  041B                     	;# 
  1829  041C                     	;# 
  1830  041D                     	;# 
  1831  041E                     	;# 
  1832  048D                     	;# 
  1833  0491                     	;# 
  1834  0491                     	;# 
  1835  0492                     	;# 
  1836  0492                     	;# 
  1837  0493                     	;# 
  1838  0493                     	;# 
  1839  0493                     	;# 
  1840  0494                     	;# 
  1841  0494                     	;# 
  1842  0495                     	;# 
  1843  0495                     	;# 
  1844  0496                     	;# 
  1845  0496                     	;# 
  1846  0497                     	;# 
  1847  0497                     	;# 
  1848  0595                     	;# 
  1849  0596                     	;# 
  1850  0597                     	;# 
  1851  059C                     	;# 
  1852  059D                     	;# 
  1853  059E                     	;# 
  1854  0611                     	;# 
  1855  0611                     	;# 
  1856  0612                     	;# 
  1857  0613                     	;# 
  1858  0614                     	;# 
  1859  0614                     	;# 
  1860  0615                     	;# 
  1861  0616                     	;# 
  1862  0617                     	;# 
  1863  0617                     	;# 
  1864  0618                     	;# 
  1865  0619                     	;# 
  1866  061A                     	;# 
  1867  061A                     	;# 
  1868  061B                     	;# 
  1869  061C                     	;# 
  1870  061D                     	;# 
  1871  061D                     	;# 
  1872  061E                     	;# 
  1873  061F                     	;# 
  1874  0FE4                     	;# 
  1875  0FE5                     	;# 
  1876  0FE6                     	;# 
  1877  0FE7                     	;# 
  1878  0FE8                     	;# 
  1879  0FE9                     	;# 
  1880  0FEA                     	;# 
  1881  0FEB                     	;# 
  1882  0FED                     	;# 
  1883  0FEE                     	;# 
  1884  0FEF                     	;# 
  1885  0000                     	;# 
  1886  0001                     	;# 
  1887  0002                     	;# 
  1888  0003                     	;# 
  1889  0004                     	;# 
  1890  0005                     	;# 
  1891  0006                     	;# 
  1892  0007                     	;# 
  1893  0008                     	;# 
  1894  0009                     	;# 
  1895  000A                     	;# 
  1896  000B                     	;# 
  1897  000C                     	;# 
  1898  000D                     	;# 
  1899  000E                     	;# 
  1900  000F                     	;# 
  1901  0010                     	;# 
  1902  0011                     	;# 
  1903  0012                     	;# 
  1904  0013                     	;# 
  1905  0014                     	;# 
  1906  0015                     	;# 
  1907  0016                     	;# 
  1908  0016                     	;# 
  1909  0017                     	;# 
  1910  0018                     	;# 
  1911  0019                     	;# 
  1912  001A                     	;# 
  1913  001B                     	;# 
  1914  001C                     	;# 
  1915  008C                     	;# 
  1916  008D                     	;# 
  1917  008E                     	;# 
  1918  008F                     	;# 
  1919  0090                     	;# 
  1920  0091                     	;# 
  1921  0092                     	;# 
  1922  0093                     	;# 
  1923  0094                     	;# 
  1924  0095                     	;# 
  1925  0096                     	;# 
  1926  0097                     	;# 
  1927  0099                     	;# 
  1928  009A                     	;# 
  1929  009B                     	;# 
  1930  009B                     	;# 
  1931  009C                     	;# 
  1932  009D                     	;# 
  1933  009E                     	;# 
  1934  010C                     	;# 
  1935  010D                     	;# 
  1936  010E                     	;# 
  1937  010F                     	;# 
  1938  0110                     	;# 
  1939  0116                     	;# 
  1940  0117                     	;# 
  1941  011D                     	;# 
  1942  018C                     	;# 
  1943  018D                     	;# 
  1944  018F                     	;# 
  1945  0190                     	;# 
  1946  0191                     	;# 
  1947  0191                     	;# 
  1948  0192                     	;# 
  1949  0193                     	;# 
  1950  0193                     	;# 
  1951  0194                     	;# 
  1952  0195                     	;# 
  1953  0196                     	;# 
  1954  0197                     	;# 
  1955  0199                     	;# 
  1956  0199                     	;# 
  1957  0199                     	;# 
  1958  019A                     	;# 
  1959  019A                     	;# 
  1960  019A                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019B                     	;# 
  1964  019B                     	;# 
  1965  019B                     	;# 
  1966  019C                     	;# 
  1967  019C                     	;# 
  1968  019C                     	;# 
  1969  019D                     	;# 
  1970  019D                     	;# 
  1971  019D                     	;# 
  1972  019E                     	;# 
  1973  019E                     	;# 
  1974  019E                     	;# 
  1975  019F                     	;# 
  1976  019F                     	;# 
  1977  019F                     	;# 
  1978  020D                     	;# 
  1979  020F                     	;# 
  1980  0210                     	;# 
  1981  0211                     	;# 
  1982  0211                     	;# 
  1983  0212                     	;# 
  1984  0212                     	;# 
  1985  0213                     	;# 
  1986  0213                     	;# 
  1987  0214                     	;# 
  1988  0214                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0215                     	;# 
  1992  0216                     	;# 
  1993  0216                     	;# 
  1994  0217                     	;# 
  1995  0217                     	;# 
  1996  0219                     	;# 
  1997  021A                     	;# 
  1998  021B                     	;# 
  1999  021C                     	;# 
  2000  021D                     	;# 
  2001  021E                     	;# 
  2002  021F                     	;# 
  2003  028C                     	;# 
  2004  028D                     	;# 
  2005  0291                     	;# 
  2006  0291                     	;# 
  2007  0292                     	;# 
  2008  0293                     	;# 
  2009  0298                     	;# 
  2010  0298                     	;# 
  2011  0299                     	;# 
  2012  029A                     	;# 
  2013  029D                     	;# 
  2014  029E                     	;# 
  2015  029F                     	;# 
  2016  030C                     	;# 
  2017  030D                     	;# 
  2018  0311                     	;# 
  2019  0311                     	;# 
  2020  0312                     	;# 
  2021  0313                     	;# 
  2022  0318                     	;# 
  2023  0318                     	;# 
  2024  0319                     	;# 
  2025  031A                     	;# 
  2026  031C                     	;# 
  2027  031C                     	;# 
  2028  031D                     	;# 
  2029  031E                     	;# 
  2030  038C                     	;# 
  2031  038D                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  040C                     	;# 
  2036  040D                     	;# 
  2037  0411                     	;# 
  2038  0411                     	;# 
  2039  0412                     	;# 
  2040  0413                     	;# 
  2041  0414                     	;# 
  2042  0415                     	;# 
  2043  0416                     	;# 
  2044  0417                     	;# 
  2045  0418                     	;# 
  2046  0418                     	;# 
  2047  0419                     	;# 
  2048  041A                     	;# 
  2049  041B                     	;# 
  2050  041C                     	;# 
  2051  041D                     	;# 
  2052  041E                     	;# 
  2053  048D                     	;# 
  2054  0491                     	;# 
  2055  0491                     	;# 
  2056  0492                     	;# 
  2057  0492                     	;# 
  2058  0493                     	;# 
  2059  0493                     	;# 
  2060  0493                     	;# 
  2061  0494                     	;# 
  2062  0494                     	;# 
  2063  0495                     	;# 
  2064  0495                     	;# 
  2065  0496                     	;# 
  2066  0496                     	;# 
  2067  0497                     	;# 
  2068  0497                     	;# 
  2069  0595                     	;# 
  2070  0596                     	;# 
  2071  0597                     	;# 
  2072  059C                     	;# 
  2073  059D                     	;# 
  2074  059E                     	;# 
  2075  0611                     	;# 
  2076  0611                     	;# 
  2077  0612                     	;# 
  2078  0613                     	;# 
  2079  0614                     	;# 
  2080  0614                     	;# 
  2081  0615                     	;# 
  2082  0616                     	;# 
  2083  0617                     	;# 
  2084  0617                     	;# 
  2085  0618                     	;# 
  2086  0619                     	;# 
  2087  061A                     	;# 
  2088  061A                     	;# 
  2089  061B                     	;# 
  2090  061C                     	;# 
  2091  061D                     	;# 
  2092  061D                     	;# 
  2093  061E                     	;# 
  2094  061F                     	;# 
  2095  0FE4                     	;# 
  2096  0FE5                     	;# 
  2097  0FE6                     	;# 
  2098  0FE7                     	;# 
  2099  0FE8                     	;# 
  2100  0FE9                     	;# 
  2101  0FEA                     	;# 
  2102  0FEB                     	;# 
  2103  0FED                     	;# 
  2104  0FEE                     	;# 
  2105  0FEF                     	;# 
  2106  0000                     	;# 
  2107  0001                     	;# 
  2108  0002                     	;# 
  2109  0003                     	;# 
  2110  0004                     	;# 
  2111  0005                     	;# 
  2112  0006                     	;# 
  2113  0007                     	;# 
  2114  0008                     	;# 
  2115  0009                     	;# 
  2116  000A                     	;# 
  2117  000B                     	;# 
  2118  000C                     	;# 
  2119  000D                     	;# 
  2120  000E                     	;# 
  2121  000F                     	;# 
  2122  0010                     	;# 
  2123  0011                     	;# 
  2124  0012                     	;# 
  2125  0013                     	;# 
  2126  0014                     	;# 
  2127  0015                     	;# 
  2128  0016                     	;# 
  2129  0016                     	;# 
  2130  0017                     	;# 
  2131  0018                     	;# 
  2132  0019                     	;# 
  2133  001A                     	;# 
  2134  001B                     	;# 
  2135  001C                     	;# 
  2136  008C                     	;# 
  2137  008D                     	;# 
  2138  008E                     	;# 
  2139  008F                     	;# 
  2140  0090                     	;# 
  2141  0091                     	;# 
  2142  0092                     	;# 
  2143  0093                     	;# 
  2144  0094                     	;# 
  2145  0095                     	;# 
  2146  0096                     	;# 
  2147  0097                     	;# 
  2148  0099                     	;# 
  2149  009A                     	;# 
  2150  009B                     	;# 
  2151  009B                     	;# 
  2152  009C                     	;# 
  2153  009D                     	;# 
  2154  009E                     	;# 
  2155  010C                     	;# 
  2156  010D                     	;# 
  2157  010E                     	;# 
  2158  010F                     	;# 
  2159  0110                     	;# 
  2160  0116                     	;# 
  2161  0117                     	;# 
  2162  011D                     	;# 
  2163  018C                     	;# 
  2164  018D                     	;# 
  2165  018F                     	;# 
  2166  0190                     	;# 
  2167  0191                     	;# 
  2168  0191                     	;# 
  2169  0192                     	;# 
  2170  0193                     	;# 
  2171  0193                     	;# 
  2172  0194                     	;# 
  2173  0195                     	;# 
  2174  0196                     	;# 
  2175  0197                     	;# 
  2176  0199                     	;# 
  2177  0199                     	;# 
  2178  0199                     	;# 
  2179  019A                     	;# 
  2180  019A                     	;# 
  2181  019A                     	;# 
  2182  019B                     	;# 
  2183  019B                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019B                     	;# 
  2187  019C                     	;# 
  2188  019C                     	;# 
  2189  019C                     	;# 
  2190  019D                     	;# 
  2191  019D                     	;# 
  2192  019D                     	;# 
  2193  019E                     	;# 
  2194  019E                     	;# 
  2195  019E                     	;# 
  2196  019F                     	;# 
  2197  019F                     	;# 
  2198  019F                     	;# 
  2199  020D                     	;# 
  2200  020F                     	;# 
  2201  0210                     	;# 
  2202  0211                     	;# 
  2203  0211                     	;# 
  2204  0212                     	;# 
  2205  0212                     	;# 
  2206  0213                     	;# 
  2207  0213                     	;# 
  2208  0214                     	;# 
  2209  0214                     	;# 
  2210  0215                     	;# 
  2211  0215                     	;# 
  2212  0215                     	;# 
  2213  0216                     	;# 
  2214  0216                     	;# 
  2215  0217                     	;# 
  2216  0217                     	;# 
  2217  0219                     	;# 
  2218  021A                     	;# 
  2219  021B                     	;# 
  2220  021C                     	;# 
  2221  021D                     	;# 
  2222  021E                     	;# 
  2223  021F                     	;# 
  2224  028C                     	;# 
  2225  028D                     	;# 
  2226  0291                     	;# 
  2227  0291                     	;# 
  2228  0292                     	;# 
  2229  0293                     	;# 
  2230  0298                     	;# 
  2231  0298                     	;# 
  2232  0299                     	;# 
  2233  029A                     	;# 
  2234  029D                     	;# 
  2235  029E                     	;# 
  2236  029F                     	;# 
  2237  030C                     	;# 
  2238  030D                     	;# 
  2239  0311                     	;# 
  2240  0311                     	;# 
  2241  0312                     	;# 
  2242  0313                     	;# 
  2243  0318                     	;# 
  2244  0318                     	;# 
  2245  0319                     	;# 
  2246  031A                     	;# 
  2247  031C                     	;# 
  2248  031C                     	;# 
  2249  031D                     	;# 
  2250  031E                     	;# 
  2251  038C                     	;# 
  2252  038D                     	;# 
  2253  0394                     	;# 
  2254  0395                     	;# 
  2255  0396                     	;# 
  2256  040C                     	;# 
  2257  040D                     	;# 
  2258  0411                     	;# 
  2259  0411                     	;# 
  2260  0412                     	;# 
  2261  0413                     	;# 
  2262  0414                     	;# 
  2263  0415                     	;# 
  2264  0416                     	;# 
  2265  0417                     	;# 
  2266  0418                     	;# 
  2267  0418                     	;# 
  2268  0419                     	;# 
  2269  041A                     	;# 
  2270  041B                     	;# 
  2271  041C                     	;# 
  2272  041D                     	;# 
  2273  041E                     	;# 
  2274  048D                     	;# 
  2275  0491                     	;# 
  2276  0491                     	;# 
  2277  0492                     	;# 
  2278  0492                     	;# 
  2279  0493                     	;# 
  2280  0493                     	;# 
  2281  0493                     	;# 
  2282  0494                     	;# 
  2283  0494                     	;# 
  2284  0495                     	;# 
  2285  0495                     	;# 
  2286  0496                     	;# 
  2287  0496                     	;# 
  2288  0497                     	;# 
  2289  0497                     	;# 
  2290  0595                     	;# 
  2291  0596                     	;# 
  2292  0597                     	;# 
  2293  059C                     	;# 
  2294  059D                     	;# 
  2295  059E                     	;# 
  2296  0611                     	;# 
  2297  0611                     	;# 
  2298  0612                     	;# 
  2299  0613                     	;# 
  2300  0614                     	;# 
  2301  0614                     	;# 
  2302  0615                     	;# 
  2303  0616                     	;# 
  2304  0617                     	;# 
  2305  0617                     	;# 
  2306  0618                     	;# 
  2307  0619                     	;# 
  2308  061A                     	;# 
  2309  061A                     	;# 
  2310  061B                     	;# 
  2311  061C                     	;# 
  2312  061D                     	;# 
  2313  061D                     	;# 
  2314  061E                     	;# 
  2315  061F                     	;# 
  2316  0FE4                     	;# 
  2317  0FE5                     	;# 
  2318  0FE6                     	;# 
  2319  0FE7                     	;# 
  2320  0FE8                     	;# 
  2321  0FE9                     	;# 
  2322  0FEA                     	;# 
  2323  0FEB                     	;# 
  2324  0FED                     	;# 
  2325  0FEE                     	;# 
  2326  0FEF                     	;# 
  2327  0000                     	;# 
  2328  0001                     	;# 
  2329  0002                     	;# 
  2330  0003                     	;# 
  2331  0004                     	;# 
  2332  0005                     	;# 
  2333  0006                     	;# 
  2334  0007                     	;# 
  2335  0008                     	;# 
  2336  0009                     	;# 
  2337  000A                     	;# 
  2338  000B                     	;# 
  2339  000C                     	;# 
  2340  000D                     	;# 
  2341  000E                     	;# 
  2342  000F                     	;# 
  2343  0010                     	;# 
  2344  0011                     	;# 
  2345  0012                     	;# 
  2346  0013                     	;# 
  2347  0014                     	;# 
  2348  0015                     	;# 
  2349  0016                     	;# 
  2350  0016                     	;# 
  2351  0017                     	;# 
  2352  0018                     	;# 
  2353  0019                     	;# 
  2354  001A                     	;# 
  2355  001B                     	;# 
  2356  001C                     	;# 
  2357  008C                     	;# 
  2358  008D                     	;# 
  2359  008E                     	;# 
  2360  008F                     	;# 
  2361  0090                     	;# 
  2362  0091                     	;# 
  2363  0092                     	;# 
  2364  0093                     	;# 
  2365  0094                     	;# 
  2366  0095                     	;# 
  2367  0096                     	;# 
  2368  0097                     	;# 
  2369  0099                     	;# 
  2370  009A                     	;# 
  2371  009B                     	;# 
  2372  009B                     	;# 
  2373  009C                     	;# 
  2374  009D                     	;# 
  2375  009E                     	;# 
  2376  010C                     	;# 
  2377  010D                     	;# 
  2378  010E                     	;# 
  2379  010F                     	;# 
  2380  0110                     	;# 
  2381  0116                     	;# 
  2382  0117                     	;# 
  2383  011D                     	;# 
  2384  018C                     	;# 
  2385  018D                     	;# 
  2386  018F                     	;# 
  2387  0190                     	;# 
  2388  0191                     	;# 
  2389  0191                     	;# 
  2390  0192                     	;# 
  2391  0193                     	;# 
  2392  0193                     	;# 
  2393  0194                     	;# 
  2394  0195                     	;# 
  2395  0196                     	;# 
  2396  0197                     	;# 
  2397  0199                     	;# 
  2398  0199                     	;# 
  2399  0199                     	;# 
  2400  019A                     	;# 
  2401  019A                     	;# 
  2402  019A                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019B                     	;# 
  2408  019C                     	;# 
  2409  019C                     	;# 
  2410  019C                     	;# 
  2411  019D                     	;# 
  2412  019D                     	;# 
  2413  019D                     	;# 
  2414  019E                     	;# 
  2415  019E                     	;# 
  2416  019E                     	;# 
  2417  019F                     	;# 
  2418  019F                     	;# 
  2419  019F                     	;# 
  2420  020D                     	;# 
  2421  020F                     	;# 
  2422  0210                     	;# 
  2423  0211                     	;# 
  2424  0211                     	;# 
  2425  0212                     	;# 
  2426  0212                     	;# 
  2427  0213                     	;# 
  2428  0213                     	;# 
  2429  0214                     	;# 
  2430  0214                     	;# 
  2431  0215                     	;# 
  2432  0215                     	;# 
  2433  0215                     	;# 
  2434  0216                     	;# 
  2435  0216                     	;# 
  2436  0217                     	;# 
  2437  0217                     	;# 
  2438  0219                     	;# 
  2439  021A                     	;# 
  2440  021B                     	;# 
  2441  021C                     	;# 
  2442  021D                     	;# 
  2443  021E                     	;# 
  2444  021F                     	;# 
  2445  028C                     	;# 
  2446  028D                     	;# 
  2447  0291                     	;# 
  2448  0291                     	;# 
  2449  0292                     	;# 
  2450  0293                     	;# 
  2451  0298                     	;# 
  2452  0298                     	;# 
  2453  0299                     	;# 
  2454  029A                     	;# 
  2455  029D                     	;# 
  2456  029E                     	;# 
  2457  029F                     	;# 
  2458  030C                     	;# 
  2459  030D                     	;# 
  2460  0311                     	;# 
  2461  0311                     	;# 
  2462  0312                     	;# 
  2463  0313                     	;# 
  2464  0318                     	;# 
  2465  0318                     	;# 
  2466  0319                     	;# 
  2467  031A                     	;# 
  2468  031C                     	;# 
  2469  031C                     	;# 
  2470  031D                     	;# 
  2471  031E                     	;# 
  2472  038C                     	;# 
  2473  038D                     	;# 
  2474  0394                     	;# 
  2475  0395                     	;# 
  2476  0396                     	;# 
  2477  040C                     	;# 
  2478  040D                     	;# 
  2479  0411                     	;# 
  2480  0411                     	;# 
  2481  0412                     	;# 
  2482  0413                     	;# 
  2483  0414                     	;# 
  2484  0415                     	;# 
  2485  0416                     	;# 
  2486  0417                     	;# 
  2487  0418                     	;# 
  2488  0418                     	;# 
  2489  0419                     	;# 
  2490  041A                     	;# 
  2491  041B                     	;# 
  2492  041C                     	;# 
  2493  041D                     	;# 
  2494  041E                     	;# 
  2495  048D                     	;# 
  2496  0491                     	;# 
  2497  0491                     	;# 
  2498  0492                     	;# 
  2499  0492                     	;# 
  2500  0493                     	;# 
  2501  0493                     	;# 
  2502  0493                     	;# 
  2503  0494                     	;# 
  2504  0494                     	;# 
  2505  0495                     	;# 
  2506  0495                     	;# 
  2507  0496                     	;# 
  2508  0496                     	;# 
  2509  0497                     	;# 
  2510  0497                     	;# 
  2511  0595                     	;# 
  2512  0596                     	;# 
  2513  0597                     	;# 
  2514  059C                     	;# 
  2515  059D                     	;# 
  2516  059E                     	;# 
  2517  0611                     	;# 
  2518  0611                     	;# 
  2519  0612                     	;# 
  2520  0613                     	;# 
  2521  0614                     	;# 
  2522  0614                     	;# 
  2523  0615                     	;# 
  2524  0616                     	;# 
  2525  0617                     	;# 
  2526  0617                     	;# 
  2527  0618                     	;# 
  2528  0619                     	;# 
  2529  061A                     	;# 
  2530  061A                     	;# 
  2531  061B                     	;# 
  2532  061C                     	;# 
  2533  061D                     	;# 
  2534  061D                     	;# 
  2535  061E                     	;# 
  2536  061F                     	;# 
  2537  0FE4                     	;# 
  2538  0FE5                     	;# 
  2539  0FE6                     	;# 
  2540  0FE7                     	;# 
  2541  0FE8                     	;# 
  2542  0FE9                     	;# 
  2543  0FEA                     	;# 
  2544  0FEB                     	;# 
  2545  0FED                     	;# 
  2546  0FEE                     	;# 
  2547  0FEF                     	;# 
  2548  0000                     	;# 
  2549  0001                     	;# 
  2550  0002                     	;# 
  2551  0003                     	;# 
  2552  0004                     	;# 
  2553  0005                     	;# 
  2554  0006                     	;# 
  2555  0007                     	;# 
  2556  0008                     	;# 
  2557  0009                     	;# 
  2558  000A                     	;# 
  2559  000B                     	;# 
  2560  000C                     	;# 
  2561  000D                     	;# 
  2562  000E                     	;# 
  2563  000F                     	;# 
  2564  0010                     	;# 
  2565  0011                     	;# 
  2566  0012                     	;# 
  2567  0013                     	;# 
  2568  0014                     	;# 
  2569  0015                     	;# 
  2570  0016                     	;# 
  2571  0016                     	;# 
  2572  0017                     	;# 
  2573  0018                     	;# 
  2574  0019                     	;# 
  2575  001A                     	;# 
  2576  001B                     	;# 
  2577  001C                     	;# 
  2578  008C                     	;# 
  2579  008D                     	;# 
  2580  008E                     	;# 
  2581  008F                     	;# 
  2582  0090                     	;# 
  2583  0091                     	;# 
  2584  0092                     	;# 
  2585  0093                     	;# 
  2586  0094                     	;# 
  2587  0095                     	;# 
  2588  0096                     	;# 
  2589  0097                     	;# 
  2590  0099                     	;# 
  2591  009A                     	;# 
  2592  009B                     	;# 
  2593  009B                     	;# 
  2594  009C                     	;# 
  2595  009D                     	;# 
  2596  009E                     	;# 
  2597  010C                     	;# 
  2598  010D                     	;# 
  2599  010E                     	;# 
  2600  010F                     	;# 
  2601  0110                     	;# 
  2602  0116                     	;# 
  2603  0117                     	;# 
  2604  011D                     	;# 
  2605  018C                     	;# 
  2606  018D                     	;# 
  2607  018F                     	;# 
  2608  0190                     	;# 
  2609  0191                     	;# 
  2610  0191                     	;# 
  2611  0192                     	;# 
  2612  0193                     	;# 
  2613  0193                     	;# 
  2614  0194                     	;# 
  2615  0195                     	;# 
  2616  0196                     	;# 
  2617  0197                     	;# 
  2618  0199                     	;# 
  2619  0199                     	;# 
  2620  0199                     	;# 
  2621  019A                     	;# 
  2622  019A                     	;# 
  2623  019A                     	;# 
  2624  019B                     	;# 
  2625  019B                     	;# 
  2626  019B                     	;# 
  2627  019B                     	;# 
  2628  019B                     	;# 
  2629  019C                     	;# 
  2630  019C                     	;# 
  2631  019C                     	;# 
  2632  019D                     	;# 
  2633  019D                     	;# 
  2634  019D                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019E                     	;# 
  2638  019F                     	;# 
  2639  019F                     	;# 
  2640  019F                     	;# 
  2641  020D                     	;# 
  2642  020F                     	;# 
  2643  0210                     	;# 
  2644  0211                     	;# 
  2645  0211                     	;# 
  2646  0212                     	;# 
  2647  0212                     	;# 
  2648  0213                     	;# 
  2649  0213                     	;# 
  2650  0214                     	;# 
  2651  0214                     	;# 
  2652  0215                     	;# 
  2653  0215                     	;# 
  2654  0215                     	;# 
  2655  0216                     	;# 
  2656  0216                     	;# 
  2657  0217                     	;# 
  2658  0217                     	;# 
  2659  0219                     	;# 
  2660  021A                     	;# 
  2661  021B                     	;# 
  2662  021C                     	;# 
  2663  021D                     	;# 
  2664  021E                     	;# 
  2665  021F                     	;# 
  2666  028C                     	;# 
  2667  028D                     	;# 
  2668  0291                     	;# 
  2669  0291                     	;# 
  2670  0292                     	;# 
  2671  0293                     	;# 
  2672  0298                     	;# 
  2673  0298                     	;# 
  2674  0299                     	;# 
  2675  029A                     	;# 
  2676  029D                     	;# 
  2677  029E                     	;# 
  2678  029F                     	;# 
  2679  030C                     	;# 
  2680  030D                     	;# 
  2681  0311                     	;# 
  2682  0311                     	;# 
  2683  0312                     	;# 
  2684  0313                     	;# 
  2685  0318                     	;# 
  2686  0318                     	;# 
  2687  0319                     	;# 
  2688  031A                     	;# 
  2689  031C                     	;# 
  2690  031C                     	;# 
  2691  031D                     	;# 
  2692  031E                     	;# 
  2693  038C                     	;# 
  2694  038D                     	;# 
  2695  0394                     	;# 
  2696  0395                     	;# 
  2697  0396                     	;# 
  2698  040C                     	;# 
  2699  040D                     	;# 
  2700  0411                     	;# 
  2701  0411                     	;# 
  2702  0412                     	;# 
  2703  0413                     	;# 
  2704  0414                     	;# 
  2705  0415                     	;# 
  2706  0416                     	;# 
  2707  0417                     	;# 
  2708  0418                     	;# 
  2709  0418                     	;# 
  2710  0419                     	;# 
  2711  041A                     	;# 
  2712  041B                     	;# 
  2713  041C                     	;# 
  2714  041D                     	;# 
  2715  041E                     	;# 
  2716  048D                     	;# 
  2717  0491                     	;# 
  2718  0491                     	;# 
  2719  0492                     	;# 
  2720  0492                     	;# 
  2721  0493                     	;# 
  2722  0493                     	;# 
  2723  0493                     	;# 
  2724  0494                     	;# 
  2725  0494                     	;# 
  2726  0495                     	;# 
  2727  0495                     	;# 
  2728  0496                     	;# 
  2729  0496                     	;# 
  2730  0497                     	;# 
  2731  0497                     	;# 
  2732  0595                     	;# 
  2733  0596                     	;# 
  2734  0597                     	;# 
  2735  059C                     	;# 
  2736  059D                     	;# 
  2737  059E                     	;# 
  2738  0611                     	;# 
  2739  0611                     	;# 
  2740  0612                     	;# 
  2741  0613                     	;# 
  2742  0614                     	;# 
  2743  0614                     	;# 
  2744  0615                     	;# 
  2745  0616                     	;# 
  2746  0617                     	;# 
  2747  0617                     	;# 
  2748  0618                     	;# 
  2749  0619                     	;# 
  2750  061A                     	;# 
  2751  061A                     	;# 
  2752  061B                     	;# 
  2753  061C                     	;# 
  2754  061D                     	;# 
  2755  061D                     	;# 
  2756  061E                     	;# 
  2757  061F                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769  0000                     	;# 
  2770  0001                     	;# 
  2771  0002                     	;# 
  2772  0003                     	;# 
  2773  0004                     	;# 
  2774  0005                     	;# 
  2775  0006                     	;# 
  2776  0007                     	;# 
  2777  0008                     	;# 
  2778  0009                     	;# 
  2779  000A                     	;# 
  2780  000B                     	;# 
  2781  000C                     	;# 
  2782  000D                     	;# 
  2783  000E                     	;# 
  2784  000F                     	;# 
  2785  0010                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0014                     	;# 
  2790  0015                     	;# 
  2791  0016                     	;# 
  2792  0016                     	;# 
  2793  0017                     	;# 
  2794  0018                     	;# 
  2795  0019                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001C                     	;# 
  2799  008C                     	;# 
  2800  008D                     	;# 
  2801  008E                     	;# 
  2802  008F                     	;# 
  2803  0090                     	;# 
  2804  0091                     	;# 
  2805  0092                     	;# 
  2806  0093                     	;# 
  2807  0094                     	;# 
  2808  0095                     	;# 
  2809  0096                     	;# 
  2810  0097                     	;# 
  2811  0099                     	;# 
  2812  009A                     	;# 
  2813  009B                     	;# 
  2814  009B                     	;# 
  2815  009C                     	;# 
  2816  009D                     	;# 
  2817  009E                     	;# 
  2818  010C                     	;# 
  2819  010D                     	;# 
  2820  010E                     	;# 
  2821  010F                     	;# 
  2822  0110                     	;# 
  2823  0116                     	;# 
  2824  0117                     	;# 
  2825  011D                     	;# 
  2826  018C                     	;# 
  2827  018D                     	;# 
  2828  018F                     	;# 
  2829  0190                     	;# 
  2830  0191                     	;# 
  2831  0191                     	;# 
  2832  0192                     	;# 
  2833  0193                     	;# 
  2834  0193                     	;# 
  2835  0194                     	;# 
  2836  0195                     	;# 
  2837  0196                     	;# 
  2838  0197                     	;# 
  2839  0199                     	;# 
  2840  0199                     	;# 
  2841  0199                     	;# 
  2842  019A                     	;# 
  2843  019A                     	;# 
  2844  019A                     	;# 
  2845  019B                     	;# 
  2846  019B                     	;# 
  2847  019B                     	;# 
  2848  019B                     	;# 
  2849  019B                     	;# 
  2850  019C                     	;# 
  2851  019C                     	;# 
  2852  019C                     	;# 
  2853  019D                     	;# 
  2854  019D                     	;# 
  2855  019D                     	;# 
  2856  019E                     	;# 
  2857  019E                     	;# 
  2858  019E                     	;# 
  2859  019F                     	;# 
  2860  019F                     	;# 
  2861  019F                     	;# 
  2862  020D                     	;# 
  2863  020F                     	;# 
  2864  0210                     	;# 
  2865  0211                     	;# 
  2866  0211                     	;# 
  2867  0212                     	;# 
  2868  0212                     	;# 
  2869  0213                     	;# 
  2870  0213                     	;# 
  2871  0214                     	;# 
  2872  0214                     	;# 
  2873  0215                     	;# 
  2874  0215                     	;# 
  2875  0215                     	;# 
  2876  0216                     	;# 
  2877  0216                     	;# 
  2878  0217                     	;# 
  2879  0217                     	;# 
  2880  0219                     	;# 
  2881  021A                     	;# 
  2882  021B                     	;# 
  2883  021C                     	;# 
  2884  021D                     	;# 
  2885  021E                     	;# 
  2886  021F                     	;# 
  2887  028C                     	;# 
  2888  028D                     	;# 
  2889  0291                     	;# 
  2890  0291                     	;# 
  2891  0292                     	;# 
  2892  0293                     	;# 
  2893  0298                     	;# 
  2894  0298                     	;# 
  2895  0299                     	;# 
  2896  029A                     	;# 
  2897  029D                     	;# 
  2898  029E                     	;# 
  2899  029F                     	;# 
  2900  030C                     	;# 
  2901  030D                     	;# 
  2902  0311                     	;# 
  2903  0311                     	;# 
  2904  0312                     	;# 
  2905  0313                     	;# 
  2906  0318                     	;# 
  2907  0318                     	;# 
  2908  0319                     	;# 
  2909  031A                     	;# 
  2910  031C                     	;# 
  2911  031C                     	;# 
  2912  031D                     	;# 
  2913  031E                     	;# 
  2914  038C                     	;# 
  2915  038D                     	;# 
  2916  0394                     	;# 
  2917  0395                     	;# 
  2918  0396                     	;# 
  2919  040C                     	;# 
  2920  040D                     	;# 
  2921  0411                     	;# 
  2922  0411                     	;# 
  2923  0412                     	;# 
  2924  0413                     	;# 
  2925  0414                     	;# 
  2926  0415                     	;# 
  2927  0416                     	;# 
  2928  0417                     	;# 
  2929  0418                     	;# 
  2930  0418                     	;# 
  2931  0419                     	;# 
  2932  041A                     	;# 
  2933  041B                     	;# 
  2934  041C                     	;# 
  2935  041D                     	;# 
  2936  041E                     	;# 
  2937  048D                     	;# 
  2938  0491                     	;# 
  2939  0491                     	;# 
  2940  0492                     	;# 
  2941  0492                     	;# 
  2942  0493                     	;# 
  2943  0493                     	;# 
  2944  0493                     	;# 
  2945  0494                     	;# 
  2946  0494                     	;# 
  2947  0495                     	;# 
  2948  0495                     	;# 
  2949  0496                     	;# 
  2950  0496                     	;# 
  2951  0497                     	;# 
  2952  0497                     	;# 
  2953  0595                     	;# 
  2954  0596                     	;# 
  2955  0597                     	;# 
  2956  059C                     	;# 
  2957  059D                     	;# 
  2958  059E                     	;# 
  2959  0611                     	;# 
  2960  0611                     	;# 
  2961  0612                     	;# 
  2962  0613                     	;# 
  2963  0614                     	;# 
  2964  0614                     	;# 
  2965  0615                     	;# 
  2966  0616                     	;# 
  2967  0617                     	;# 
  2968  0617                     	;# 
  2969  0618                     	;# 
  2970  0619                     	;# 
  2971  061A                     	;# 
  2972  061A                     	;# 
  2973  061B                     	;# 
  2974  061C                     	;# 
  2975  061D                     	;# 
  2976  061D                     	;# 
  2977  061E                     	;# 
  2978  061F                     	;# 
  2979  0FE4                     	;# 
  2980  0FE5                     	;# 
  2981  0FE6                     	;# 
  2982  0FE7                     	;# 
  2983  0FE8                     	;# 
  2984  0FE9                     	;# 
  2985  0FEA                     	;# 
  2986  0FEB                     	;# 
  2987  0FED                     	;# 
  2988  0FEE                     	;# 
  2989  0FEF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000D                     	;# 
  3004  000E                     	;# 
  3005  000F                     	;# 
  3006  0010                     	;# 
  3007  0011                     	;# 
  3008  0012                     	;# 
  3009  0013                     	;# 
  3010  0014                     	;# 
  3011  0015                     	;# 
  3012  0016                     	;# 
  3013  0016                     	;# 
  3014  0017                     	;# 
  3015  0018                     	;# 
  3016  0019                     	;# 
  3017  001A                     	;# 
  3018  001B                     	;# 
  3019  001C                     	;# 
  3020  008C                     	;# 
  3021  008D                     	;# 
  3022  008E                     	;# 
  3023  008F                     	;# 
  3024  0090                     	;# 
  3025  0091                     	;# 
  3026  0092                     	;# 
  3027  0093                     	;# 
  3028  0094                     	;# 
  3029  0095                     	;# 
  3030  0096                     	;# 
  3031  0097                     	;# 
  3032  0099                     	;# 
  3033  009A                     	;# 
  3034  009B                     	;# 
  3035  009B                     	;# 
  3036  009C                     	;# 
  3037  009D                     	;# 
  3038  009E                     	;# 
  3039  010C                     	;# 
  3040  010D                     	;# 
  3041  010E                     	;# 
  3042  010F                     	;# 
  3043  0110                     	;# 
  3044  0116                     	;# 
  3045  0117                     	;# 
  3046  011D                     	;# 
  3047  018C                     	;# 
  3048  018D                     	;# 
  3049  018F                     	;# 
  3050  0190                     	;# 
  3051  0191                     	;# 
  3052  0191                     	;# 
  3053  0192                     	;# 
  3054  0193                     	;# 
  3055  0193                     	;# 
  3056  0194                     	;# 
  3057  0195                     	;# 
  3058  0196                     	;# 
  3059  0197                     	;# 
  3060  0199                     	;# 
  3061  0199                     	;# 
  3062  0199                     	;# 
  3063  019A                     	;# 
  3064  019A                     	;# 
  3065  019A                     	;# 
  3066  019B                     	;# 
  3067  019B                     	;# 
  3068  019B                     	;# 
  3069  019B                     	;# 
  3070  019B                     	;# 
  3071  019C                     	;# 
  3072  019C                     	;# 
  3073  019C                     	;# 
  3074  019D                     	;# 
  3075  019D                     	;# 
  3076  019D                     	;# 
  3077  019E                     	;# 
  3078  019E                     	;# 
  3079  019E                     	;# 
  3080  019F                     	;# 
  3081  019F                     	;# 
  3082  019F                     	;# 
  3083  020D                     	;# 
  3084  020F                     	;# 
  3085  0210                     	;# 
  3086  0211                     	;# 
  3087  0211                     	;# 
  3088  0212                     	;# 
  3089  0212                     	;# 
  3090  0213                     	;# 
  3091  0213                     	;# 
  3092  0214                     	;# 
  3093  0214                     	;# 
  3094  0215                     	;# 
  3095  0215                     	;# 
  3096  0215                     	;# 
  3097  0216                     	;# 
  3098  0216                     	;# 
  3099  0217                     	;# 
  3100  0217                     	;# 
  3101  0219                     	;# 
  3102  021A                     	;# 
  3103  021B                     	;# 
  3104  021C                     	;# 
  3105  021D                     	;# 
  3106  021E                     	;# 
  3107  021F                     	;# 
  3108  028C                     	;# 
  3109  028D                     	;# 
  3110  0291                     	;# 
  3111  0291                     	;# 
  3112  0292                     	;# 
  3113  0293                     	;# 
  3114  0298                     	;# 
  3115  0298                     	;# 
  3116  0299                     	;# 
  3117  029A                     	;# 
  3118  029D                     	;# 
  3119  029E                     	;# 
  3120  029F                     	;# 
  3121  030C                     	;# 
  3122  030D                     	;# 
  3123  0311                     	;# 
  3124  0311                     	;# 
  3125  0312                     	;# 
  3126  0313                     	;# 
  3127  0318                     	;# 
  3128  0318                     	;# 
  3129  0319                     	;# 
  3130  031A                     	;# 
  3131  031C                     	;# 
  3132  031C                     	;# 
  3133  031D                     	;# 
  3134  031E                     	;# 
  3135  038C                     	;# 
  3136  038D                     	;# 
  3137  0394                     	;# 
  3138  0395                     	;# 
  3139  0396                     	;# 
  3140  040C                     	;# 
  3141  040D                     	;# 
  3142  0411                     	;# 
  3143  0411                     	;# 
  3144  0412                     	;# 
  3145  0413                     	;# 
  3146  0414                     	;# 
  3147  0415                     	;# 
  3148  0416                     	;# 
  3149  0417                     	;# 
  3150  0418                     	;# 
  3151  0418                     	;# 
  3152  0419                     	;# 
  3153  041A                     	;# 
  3154  041B                     	;# 
  3155  041C                     	;# 
  3156  041D                     	;# 
  3157  041E                     	;# 
  3158  048D                     	;# 
  3159  0491                     	;# 
  3160  0491                     	;# 
  3161  0492                     	;# 
  3162  0492                     	;# 
  3163  0493                     	;# 
  3164  0493                     	;# 
  3165  0493                     	;# 
  3166  0494                     	;# 
  3167  0494                     	;# 
  3168  0495                     	;# 
  3169  0495                     	;# 
  3170  0496                     	;# 
  3171  0496                     	;# 
  3172  0497                     	;# 
  3173  0497                     	;# 
  3174  0595                     	;# 
  3175  0596                     	;# 
  3176  0597                     	;# 
  3177  059C                     	;# 
  3178  059D                     	;# 
  3179  059E                     	;# 
  3180  0611                     	;# 
  3181  0611                     	;# 
  3182  0612                     	;# 
  3183  0613                     	;# 
  3184  0614                     	;# 
  3185  0614                     	;# 
  3186  0615                     	;# 
  3187  0616                     	;# 
  3188  0617                     	;# 
  3189  0617                     	;# 
  3190  0618                     	;# 
  3191  0619                     	;# 
  3192  061A                     	;# 
  3193  061A                     	;# 
  3194  061B                     	;# 
  3195  061C                     	;# 
  3196  061D                     	;# 
  3197  061D                     	;# 
  3198  061E                     	;# 
  3199  061F                     	;# 
  3200  0FE4                     	;# 
  3201  0FE5                     	;# 
  3202  0FE6                     	;# 
  3203  0FE7                     	;# 
  3204  0FE8                     	;# 
  3205  0FE9                     	;# 
  3206  0FEA                     	;# 
  3207  0FEB                     	;# 
  3208  0FED                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000D                     	;# 
  3225  000E                     	;# 
  3226  000F                     	;# 
  3227  0010                     	;# 
  3228  0011                     	;# 
  3229  0012                     	;# 
  3230  0013                     	;# 
  3231  0014                     	;# 
  3232  0015                     	;# 
  3233  0016                     	;# 
  3234  0016                     	;# 
  3235  0017                     	;# 
  3236  0018                     	;# 
  3237  0019                     	;# 
  3238  001A                     	;# 
  3239  001B                     	;# 
  3240  001C                     	;# 
  3241  008C                     	;# 
  3242  008D                     	;# 
  3243  008E                     	;# 
  3244  008F                     	;# 
  3245  0090                     	;# 
  3246  0091                     	;# 
  3247  0092                     	;# 
  3248  0093                     	;# 
  3249  0094                     	;# 
  3250  0095                     	;# 
  3251  0096                     	;# 
  3252  0097                     	;# 
  3253  0099                     	;# 
  3254  009A                     	;# 
  3255  009B                     	;# 
  3256  009B                     	;# 
  3257  009C                     	;# 
  3258  009D                     	;# 
  3259  009E                     	;# 
  3260  010C                     	;# 
  3261  010D                     	;# 
  3262  010E                     	;# 
  3263  010F                     	;# 
  3264  0110                     	;# 
  3265  0116                     	;# 
  3266  0117                     	;# 
  3267  011D                     	;# 
  3268  018C                     	;# 
  3269  018D                     	;# 
  3270  018F                     	;# 
  3271  0190                     	;# 
  3272  0191                     	;# 
  3273  0191                     	;# 
  3274  0192                     	;# 
  3275  0193                     	;# 
  3276  0193                     	;# 
  3277  0194                     	;# 
  3278  0195                     	;# 
  3279  0196                     	;# 
  3280  0197                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  0199                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019A                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019B                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019C                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019D                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019E                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  019F                     	;# 
  3304  020D                     	;# 
  3305  020F                     	;# 
  3306  0210                     	;# 
  3307  0211                     	;# 
  3308  0211                     	;# 
  3309  0212                     	;# 
  3310  0212                     	;# 
  3311  0213                     	;# 
  3312  0213                     	;# 
  3313  0214                     	;# 
  3314  0214                     	;# 
  3315  0215                     	;# 
  3316  0215                     	;# 
  3317  0215                     	;# 
  3318  0216                     	;# 
  3319  0216                     	;# 
  3320  0217                     	;# 
  3321  0217                     	;# 
  3322  0219                     	;# 
  3323  021A                     	;# 
  3324  021B                     	;# 
  3325  021C                     	;# 
  3326  021D                     	;# 
  3327  021E                     	;# 
  3328  021F                     	;# 
  3329  028C                     	;# 
  3330  028D                     	;# 
  3331  0291                     	;# 
  3332  0291                     	;# 
  3333  0292                     	;# 
  3334  0293                     	;# 
  3335  0298                     	;# 
  3336  0298                     	;# 
  3337  0299                     	;# 
  3338  029A                     	;# 
  3339  029D                     	;# 
  3340  029E                     	;# 
  3341  029F                     	;# 
  3342  030C                     	;# 
  3343  030D                     	;# 
  3344  0311                     	;# 
  3345  0311                     	;# 
  3346  0312                     	;# 
  3347  0313                     	;# 
  3348  0318                     	;# 
  3349  0318                     	;# 
  3350  0319                     	;# 
  3351  031A                     	;# 
  3352  031C                     	;# 
  3353  031C                     	;# 
  3354  031D                     	;# 
  3355  031E                     	;# 
  3356  038C                     	;# 
  3357  038D                     	;# 
  3358  0394                     	;# 
  3359  0395                     	;# 
  3360  0396                     	;# 
  3361  040C                     	;# 
  3362  040D                     	;# 
  3363  0411                     	;# 
  3364  0411                     	;# 
  3365  0412                     	;# 
  3366  0413                     	;# 
  3367  0414                     	;# 
  3368  0415                     	;# 
  3369  0416                     	;# 
  3370  0417                     	;# 
  3371  0418                     	;# 
  3372  0418                     	;# 
  3373  0419                     	;# 
  3374  041A                     	;# 
  3375  041B                     	;# 
  3376  041C                     	;# 
  3377  041D                     	;# 
  3378  041E                     	;# 
  3379  048D                     	;# 
  3380  0491                     	;# 
  3381  0491                     	;# 
  3382  0492                     	;# 
  3383  0492                     	;# 
  3384  0493                     	;# 
  3385  0493                     	;# 
  3386  0493                     	;# 
  3387  0494                     	;# 
  3388  0494                     	;# 
  3389  0495                     	;# 
  3390  0495                     	;# 
  3391  0496                     	;# 
  3392  0496                     	;# 
  3393  0497                     	;# 
  3394  0497                     	;# 
  3395  0595                     	;# 
  3396  0596                     	;# 
  3397  0597                     	;# 
  3398  059C                     	;# 
  3399  059D                     	;# 
  3400  059E                     	;# 
  3401  0611                     	;# 
  3402  0611                     	;# 
  3403  0612                     	;# 
  3404  0613                     	;# 
  3405  0614                     	;# 
  3406  0614                     	;# 
  3407  0615                     	;# 
  3408  0616                     	;# 
  3409  0617                     	;# 
  3410  0617                     	;# 
  3411  0618                     	;# 
  3412  0619                     	;# 
  3413  061A                     	;# 
  3414  061A                     	;# 
  3415  061B                     	;# 
  3416  061C                     	;# 
  3417  061D                     	;# 
  3418  061D                     	;# 
  3419  061E                     	;# 
  3420  061F                     	;# 
  3421  0FE4                     	;# 
  3422  0FE5                     	;# 
  3423  0FE6                     	;# 
  3424  0FE7                     	;# 
  3425  0FE8                     	;# 
  3426  0FE9                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEF                     	;_modArray
  3432                           
  3433                           	psect	idataBANK0
  3434  2F5E                     __pidataBANK0:	
  3435                           
  3436                           ;initializer for _delay_time
  3437  2F5E  34D0               	retlw	208
  3438  2F5F  3407               	retlw	7
  3439  2F60  3400               	retlw	0
  3440  2F61  3400               	retlw	0
  3441                           
  3442                           ;initializer for _bottom_push_state
  3443  2F62  3401               	retlw	1
  3444  2F63  3400               	retlw	0
  3445                           
  3446                           ;initializer for _long_press_limit
  3447  2F64  34E8               	retlw	232
  3448  2F65  3403               	retlw	3
  3449                           
  3450                           ;initializer for _top_push_state
  3451  2F66  3406               	retlw	6
  3452  2F67  3400               	retlw	0
  3453                           
  3454                           ;initializer for _blink_rate
  3455  2F68  3414               	retlw	20
  3456                           
  3457                           ;initializer for _longTap_state
  3458  2F69  34FF               	retlw	255
  3459                           
  3460                           ;initializer for _num_taps
  3461  2F6A  3404               	retlw	4
  3462                           
  3463                           ;initializer for _presetChannel
  3464  2F6B  3401               	retlw	1
  3465                           
  3466                           ;initializer for _switchBypass_state
  3467  2F6C  34FF               	retlw	255
  3468                           
  3469                           	psect	idataBANK2
  3470  07FF                     __pidataBANK2:	
  3471                           
  3472                           ;initializer for _expressionChannel
  3473  07FF  3401               	retlw	1
  3474                           
  3475                           	psect	idataBANK3
  3476  1000                     __pidataBANK3:	
  3477                           
  3478                           ;initializer for _baseline_mod_time
  3479  1000  34D0               	retlw	208
  3480  1001  3407               	retlw	7
  3481  1002  3400               	retlw	0
  3482  1003  3400               	retlw	0
  3483                           
  3484                           ;initializer for _blink_delay
  3485  1004  3464               	retlw	100
  3486  1005  3400               	retlw	0
  3487                           
  3488                           ;initializer for _knob1_prev
  3489  1006  34D0               	retlw	208
  3490  1007  3407               	retlw	7
  3491                           
  3492                           ;initializer for _knob2_prev
  3493  1008  34D0               	retlw	208
  3494  1009  3407               	retlw	7
  3495                           
  3496                           ;initializer for _knob3_prev
  3497  100A  34D0               	retlw	208
  3498  100B  3407               	retlw	7
  3499                           
  3500                           ;initializer for _knob4_prev
  3501  100C  34D0               	retlw	208
  3502  100D  3407               	retlw	7
  3503                           
  3504                           ;initializer for _knob5_prev
  3505  100E  34D0               	retlw	208
  3506  100F  3407               	retlw	7
  3507                           
  3508                           ;initializer for _mod_counter
  3509  1010  3401               	retlw	1
  3510  1011  3400               	retlw	0
  3511                           
  3512                           ;initializer for _mod_delay_time
  3513  1012  34D0               	retlw	208
  3514  1013  3407               	retlw	7
  3515                           
  3516                           ;initializer for _symmetry
  3517  1014  34B4               	retlw	180
  3518  1015  3400               	retlw	0
  3519                           
  3520                           ;initializer for _tap_iteration
  3521  1016  3401               	retlw	1
  3522  1017  3400               	retlw	0
  3523                           
  3524                           ;initializer for _blink_state
  3525  1018  3401               	retlw	1
  3526                           
  3527                           ;initializer for _currentBypassState
  3528  1019  34FF               	retlw	255
  3529                           
  3530                           ;initializer for _expSwitchState
  3531  101A  34FF               	retlw	255
  3532                           
  3533                           ;initializer for _expressModeCnst
  3534  101B  3402               	retlw	2
  3535                           
  3536                           ;initializer for _mod_time_changed
  3537  101C  3401               	retlw	1
  3538                           
  3539                           ;initializer for _presetModeCnst
  3540  101D  3401               	retlw	1
  3541                           
  3542                           ;initializer for _switchTap_state
  3543  101E  34FF               	retlw	255
  3544                           
  3545                           	psect	idataBANK4
  3546  0002                     __pidataBANK4:	
  3547                           
  3548                           ;initializer for _switchBypass_up
  3549  0002  3401               	retlw	1
  3550  0003  3400               	retlw	0
  3551                           
  3552                           	psect	stringtext
  3553  2800                     __pstringtext:	
  3554  2800                     exp@coeff:	
  3555  2800  3400               	retlw	0
  3556  2801  3480               	retlw	128
  3557  2802  343F               	retlw	63
  3558  2803  3472               	retlw	114
  3559  2804  3431               	retlw	49
  3560  2805  343F               	retlw	63
  3561  2806  34FE               	retlw	254
  3562  2807  3475               	retlw	117
  3563  2808  343E               	retlw	62
  3564  2809  3458               	retlw	88
  3565  280A  3463               	retlw	99
  3566  280B  343D               	retlw	61
  3567  280C  3495               	retlw	149
  3568  280D  341D               	retlw	29
  3569  280E  343C               	retlw	60
  3570  280F  34C5               	retlw	197
  3571  2810  34AE               	retlw	174
  3572  2811  343A               	retlw	58
  3573  2812  3479               	retlw	121
  3574  2813  3421               	retlw	33
  3575  2814  3439               	retlw	57
  3576  2815  3494               	retlw	148
  3577  2816  3480               	retlw	128
  3578  2817  3437               	retlw	55
  3579  2818  3493               	retlw	147
  3580  2819  34A7               	retlw	167
  3581  281A  3435               	retlw	53
  3582  281B  3456               	retlw	86
  3583  281C  3415               	retlw	21
  3584  281D  3434               	retlw	52
  3585  281E                     __end_ofexp@coeff:	
  3586  281E                     log@coeff:	
  3587  281E  3400               	retlw	0
  3588  281F  3400               	retlw	0
  3589  2820  3400               	retlw	0
  3590  2821  3400               	retlw	0
  3591  2822  3480               	retlw	128
  3592  2823  343F               	retlw	63
  3593  2824  34F0               	retlw	240
  3594  2825  34FF               	retlw	255
  3595  2826  34BE               	retlw	190
  3596  2827  34E2               	retlw	226
  3597  2828  34A9               	retlw	169
  3598  2829  343E               	retlw	62
  3599  282A  3483               	retlw	131
  3600  282B  3476               	retlw	118
  3601  282C  34BE               	retlw	190
  3602  282D  34AE               	retlw	174
  3603  282E  342B               	retlw	43
  3604  282F  343E               	retlw	62
  3605  2830  343C               	retlw	60
  3606  2831  34C3               	retlw	195
  3607  2832  34BD               	retlw	189
  3608  2833  34D2               	retlw	210
  3609  2834  3413               	retlw	19
  3610  2835  343D               	retlw	61
  3611  2836  3478               	retlw	120
  3612  2837  34D3               	retlw	211
  3613  2838  34BB               	retlw	187
  3614  2839                     __end_oflog@coeff:	
  3615  2839                     sin@coeff_a:	
  3616  2839  34F4               	retlw	244
  3617  283A  344A               	retlw	74
  3618  283B  3448               	retlw	72
  3619  283C  3495               	retlw	149
  3620  283D  3495               	retlw	149
  3621  283E  34C7               	retlw	199
  3622  283F  34C1               	retlw	193
  3623  2840  34DC               	retlw	220
  3624  2841  3445               	retlw	69
  3625  2842  34DC               	retlw	220
  3626  2843  346D               	retlw	109
  3627  2844  34C3               	retlw	195
  3628  2845  34B3               	retlw	179
  3629  2846  3433               	retlw	51
  3630  2847  3440               	retlw	64
  3631  2848                     __end_ofsin@coeff_a:	
  3632  2848                     sin@coeff_b:	
  3633  2848  3434               	retlw	52
  3634  2849  3401               	retlw	1
  3635  284A  3448               	retlw	72
  3636  284B  349D               	retlw	157
  3637  284C  34B0               	retlw	176
  3638  284D  3445               	retlw	69
  3639  284E  3400               	retlw	0
  3640  284F  34DA               	retlw	218
  3641  2850  3442               	retlw	66
  3642  2851  3400               	retlw	0
  3643  2852  3480               	retlw	128
  3644  2853  343F               	retlw	63
  3645  2854                     __end_ofsin@coeff_b:	
  3646  000B                     _INTCONbits	set	11
  3647  0011                     _PIR1bits	set	17
  3648  000C                     _PORTAbits	set	12
  3649  000E                     _PORTCbits	set	14
  3650  000F                     _PORTDbits	set	15
  3651  0010                     _PORTEbits	set	16
  3652  001B                     _PR2	set	27
  3653  001C                     _T2CONbits	set	28
  3654  005F                     _GIE	set	95
  3655  005E                     _PEIE	set	94
  3656  0069                     _RB1	set	105
  3657  009D                     _ADCON0bits	set	157
  3658  009E                     _ADCON1bits	set	158
  3659  009C                     _ADRESH	set	156
  3660  009B                     _ADRESL	set	155
  3661  0095                     _OPTION_REGbits	set	149
  3662  0099                     _OSCCONbits	set	153
  3663  008D                     _TRISBbits	set	141
  3664  008E                     _TRISCbits	set	142
  3665  008F                     _TRISDbits	set	143
  3666  0090                     _TRISEbits	set	144
  3667  048D                     _RCIE	set	1165
  3668  011D                     _APFCONbits	set	285
  3669  010D                     _LATBbits	set	269
  3670  010F                     _LATDbits	set	271
  3671  0190                     _ANSELEbits	set	400
  3672  0192                     _PMADRH	set	402
  3673  0191                     _PMADRL	set	401
  3674  0195                     _PMCON1bits	set	405
  3675  0196                     _PMCON2	set	406
  3676  0194                     _PMDATH	set	404
  3677  0193                     _PMDATL	set	403
  3678  0199                     _RCREG	set	409
  3679  019D                     _RCSTAbits	set	413
  3680  019B                     _SPBRG	set	411
  3681  019A                     _TXREG	set	410
  3682  019E                     _TXSTAbits	set	414
  3683  0291                     _CCPR1	set	657
  3684  0298                     _CCPR2	set	664
  3685  0293                     _CCP1CONbits	set	659
  3686  029A                     _CCP2CONbits	set	666
  3687  029D                     _CCPTMRS0	set	669
  3688  029E                     _CCPTMRS1	set	670
  3689  029F                     _CCPTMRS2	set	671
  3690  0311                     _CCPR3	set	785
  3691  0318                     _CCPR4	set	792
  3692  031C                     _CCPR5	set	796
  3693  0313                     _CCP3CONbits	set	787
  3694  031A                     _CCP4CONbits	set	794
  3695  031E                     _CCP5CONbits	set	798
  3696  030C                     _TRISFbits	set	780
  3697  030D                     _TRISGbits	set	781
  3698  038C                     _LATFbits	set	908
  3699  038D                     _LATGbits	set	909
  3700  040C                     _ANSELFbits	set	1036
  3701  061F                     _CCP10CONbits	set	1567
  3702  0613                     _CCP6CONbits	set	1555
  3703  0616                     _CCP7CONbits	set	1558
  3704  0619                     _CCP8CONbits	set	1561
  3705  061C                     _CCP9CONbits	set	1564
  3706                           
  3707                           ; #config settings
  3708  0000                     
  3709                           	psect	cinit
  3710  0312                     start_initialization:	
  3711  0312                     __initialization:		;BIGRAM
  3712                           
  3713                           ; Clear objects allocated to BIGRAM
  3714  0312  308A               	movlw	low (0+9098)
  3715  0313  0084               	movwf	4
  3716  0314  3023               	movlw	high (0+9098)
  3717  0315  0085               	movwf	5
  3718  0316  3066               	movlw	102
  3719  0317  00FE               	movwf	btemp
  3720  0318  3002               	movlw	2
  3721  0319  00FF               	movwf	btemp+1
  3722  031A  31AF  2743  3183   	fcall	clear_ram0
  3723                           
  3724                           ; Clear objects allocated to BANK0
  3725  031D  3040               	movlw	low __pbssBANK0
  3726  031E  0084               	movwf	4
  3727  031F  3000               	movlw	high __pbssBANK0
  3728  0320  0085               	movwf	5
  3729  0321  3011               	movlw	17
  3730  0322  00FE               	movwf	btemp
  3731  0323  3000               	movlw	0
  3732  0324  00FF               	movwf	btemp+1
  3733  0325  31AF  2743  3183   	fcall	clear_ram0
  3734                           
  3735                           ; Clear objects allocated to BANK2
  3736  0328  0022               	movlb	2	; select bank2
  3737  0329  01EA               	clrf	__pbssBANK2& (0+127)
  3738  032A  01EB               	clrf	(__pbssBANK2+1)& (0+127)
  3739  032B  01EC               	clrf	(__pbssBANK2+2)& (0+127)
  3740  032C  01ED               	clrf	(__pbssBANK2+3)& (0+127)
  3741  032D  01EE               	clrf	(__pbssBANK2+4)& (0+127)
  3742                           
  3743                           ; Clear objects allocated to BANK3
  3744  032E  30A0               	movlw	low __pbssBANK3
  3745  032F  0084               	movwf	4
  3746  0330  3001               	movlw	high __pbssBANK3
  3747  0331  0085               	movwf	5
  3748  0332  3028               	movlw	40
  3749  0333  00FE               	movwf	btemp
  3750  0334  3000               	movlw	0
  3751  0335  00FF               	movwf	btemp+1
  3752  0336  31AF  2743  3183   	fcall	clear_ram0
  3753                           
  3754                           ; Clear objects allocated to BANK4
  3755  0339  3020               	movlw	low __pbssBANK4
  3756  033A  0084               	movwf	4
  3757  033B  3002               	movlw	high __pbssBANK4
  3758  033C  0085               	movwf	5
  3759  033D  3035               	movlw	53
  3760  033E  00FE               	movwf	btemp
  3761  033F  3000               	movlw	0
  3762  0340  00FF               	movwf	btemp+1
  3763  0341  31AF  2743  3183   	fcall	clear_ram0
  3764                           
  3765                           ; Clear objects allocated to BANK5
  3766  0344  30A0               	movlw	low __pbssBANK5
  3767  0345  0084               	movwf	4
  3768  0346  3002               	movlw	high __pbssBANK5
  3769  0347  0085               	movwf	5
  3770  0348  302C               	movlw	44
  3771  0349  00FE               	movwf	btemp
  3772  034A  3000               	movlw	0
  3773  034B  00FF               	movwf	btemp+1
  3774  034C  31AF  2743  3183   	fcall	clear_ram0
  3775                           
  3776                           ; Clear objects allocated to BANK6
  3777  034F  3020               	movlw	low __pbssBANK6
  3778  0350  0084               	movwf	4
  3779  0351  3003               	movlw	high __pbssBANK6
  3780  0352  0085               	movwf	5
  3781  0353  3040               	movlw	64
  3782  0354  00FE               	movwf	btemp
  3783  0355  3000               	movlw	0
  3784  0356  00FF               	movwf	btemp+1
  3785  0357  31AF  2743  3183   	fcall	clear_ram0
  3786                           
  3787                           ; Clear objects allocated to BANK7
  3788  035A  30A0               	movlw	low __pbssBANK7
  3789  035B  0084               	movwf	4
  3790  035C  3003               	movlw	high __pbssBANK7
  3791  035D  0085               	movwf	5
  3792  035E  3040               	movlw	64
  3793  035F  00FE               	movwf	btemp
  3794  0360  3000               	movlw	0
  3795  0361  00FF               	movwf	btemp+1
  3796  0362  31AF  2743  3183   	fcall	clear_ram0
  3797                           
  3798                           ; Initialize objects allocated to BANK0
  3799  0365  305E               	movlw	low __pidataBANK0
  3800  0366  0084               	movwf	4
  3801  0367  30AF               	movlw	(high __pidataBANK0)| (0+128)
  3802  0368  0085               	movwf	5
  3803  0369  3051               	movlw	low __pdataBANK0
  3804  036A  0086               	movwf	6
  3805  036B  3000               	movlw	high __pdataBANK0
  3806  036C  0087               	movwf	7
  3807  036D  3000               	movlw	0
  3808  036E  00FF               	movwf	btemp+1
  3809  036F  300F               	movlw	15
  3810  0370  31AF  2737  3183   	fcall	init_ram
  3811                           
  3812                           ; Initialize objects allocated to BANK2
  3813  0373  3187  27FF  3183   	fcall	__pidataBANK2	;fetch initializer
  3814  0376  00EF               	movwf	__pdataBANK2& (0+127)
  3815                           
  3816                           ; Initialize objects allocated to BANK3
  3817  0377  3000               	movlw	low __pidataBANK3
  3818  0378  0084               	movwf	4
  3819  0379  3090               	movlw	(high __pidataBANK3)| (0+128)
  3820  037A  0085               	movwf	5
  3821  037B  30C8               	movlw	low __pdataBANK3
  3822  037C  0086               	movwf	6
  3823  037D  3001               	movlw	high __pdataBANK3
  3824  037E  0087               	movwf	7
  3825  037F  3000               	movlw	0
  3826  0380  00FF               	movwf	btemp+1
  3827  0381  301F               	movlw	31
  3828  0382  31AF  2737  3183   	fcall	init_ram
  3829                           
  3830                           ; Initialize objects allocated to BANK4
  3831  0385  0024               	movlb	4	; select bank4
  3832  0386  3180  2002  3183   	fcall	__pidataBANK4	;fetch initializer
  3833  0389  00E3               	movwf	__pdataBANK4& (0+127)
  3834  038A  3180  2003         	fcall	__pidataBANK4+1	;fetch initializer
  3835  038C  00E4               	movwf	(__pdataBANK4+1)& (0+127)
  3836  038D                     end_of_initialization:	
  3837                           ;End of C runtime variable initialization code
  3838                           
  3839  038D                     __end_of__initialization:	
  3840  038D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3841  038E  0020               	movlb	0
  3842  038F  3183  2B91         	ljmp	_main	;jump to C main() function
  3843                           
  3844                           	psect	bssBANK0
  3845  0040                     __pbssBANK0:	
  3846  0040                     _tap_timer:	
  3847  0040                     	ds	4
  3848  0044                     _timer:	
  3849  0044                     	ds	4
  3850  0048                     _UQEnd:	
  3851  0048                     	ds	1
  3852  0049                     _UQFront:	
  3853  0049                     	ds	1
  3854  004A                     _doubleTap_state:	
  3855  004A                     	ds	1
  3856  004B                     _longBypass_start:	
  3857  004B                     	ds	1
  3858  004C                     _longBypass_state:	
  3859  004C                     	ds	1
  3860  004D                     _mode2_state:	
  3861  004D                     	ds	1
  3862  004E                     _presetSaveMode:	
  3863  004E                     	ds	1
  3864  004F                     _suspend_blink:	
  3865  004F                     	ds	1
  3866  0050                     _switchTap_pressed:	
  3867  0050                     	ds	1
  3868                           
  3869                           	psect	dataBANK0
  3870  0051                     __pdataBANK0:	
  3871  0051                     _delay_time:	
  3872  0051                     	ds	4
  3873  0055                     _bottom_push_state:	
  3874  0055                     	ds	2
  3875  0057                     _long_press_limit:	
  3876  0057                     	ds	2
  3877  0059                     _top_push_state:	
  3878  0059                     	ds	2
  3879  005B                     _blink_rate:	
  3880  005B                     	ds	1
  3881  005C                     _longTap_state:	
  3882  005C                     	ds	1
  3883  005D                     _num_taps:	
  3884  005D                     	ds	1
  3885  005E                     _presetChannel:	
  3886  005E                     	ds	1
  3887  005F                     _switchBypass_state:	
  3888  005F                     	ds	1
  3889                           
  3890                           	psect	bssBANK2
  3891  016A                     __pbssBANK2:	
  3892  016A                     _bottomTactile_pressed:	
  3893  016A                     	ds	1
  3894  016B                     _longBypass_down:	
  3895  016B                     	ds	1
  3896  016C                     _longTap_start:	
  3897  016C                     	ds	1
  3898  016D                     _preset_blink:	
  3899  016D                     	ds	1
  3900  016E                     _topTactile_pressed:	
  3901  016E                     	ds	1
  3902                           
  3903                           	psect	dataBANK2
  3904  016F                     __pdataBANK2:	
  3905  016F                     _expressionChannel:	
  3906  016F                     	ds	1
  3907                           
  3908                           	psect	bssBANK3
  3909  01A0                     __pbssBANK3:	
  3910  01A0                     _double_timer:	
  3911  01A0                     	ds	4
  3912  01A4                     _mod_timer:	
  3913  01A4                     	ds	4
  3914  01A8                     _sub_timer:	
  3915  01A8                     	ds	4
  3916  01AC                     _knob_1_pos:	
  3917  01AC                     	ds	2
  3918  01AE                     _knob_2_pos:	
  3919  01AE                     	ds	2
  3920  01B0                     _knob_3_pos:	
  3921  01B0                     	ds	2
  3922  01B2                     _knob_4_pos:	
  3923  01B2                     	ds	2
  3924  01B4                     _knob_5_pos:	
  3925  01B4                     	ds	2
  3926  01B6                     _longBypass_timer:	
  3927  01B6                     	ds	2
  3928  01B8                     _longTap_timer:	
  3929  01B8                     	ds	2
  3930  01BA                     _switchBypass_pressed:	
  3931  01BA                     	ds	2
  3932  01BC                     _tmpModDelay:	
  3933  01BC                     	ds	2
  3934  01BE                     _adjust_mod_delay:	
  3935  01BE                     	ds	1
  3936  01BF                     _bypass_turning_on:	
  3937  01BF                     	ds	1
  3938  01C0                     _iCnt:	
  3939  01C0                     	ds	1
  3940  01C1                     _isInitialized:	
  3941  01C1                     	ds	1
  3942  01C2                     _longBypass_save:	
  3943  01C2                     	ds	1
  3944  01C3                     _mode1_state:	
  3945  01C3                     	ds	1
  3946  01C4                     _modulation_changed:	
  3947  01C4                     	ds	1
  3948  01C5                     _preset_programmning_on:	
  3949  01C5                     	ds	1
  3950  01C6                     _reset_sub_delay:	
  3951  01C6                     	ds	1
  3952  01C7                     _switchTap_down:	
  3953  01C7                     	ds	1
  3954                           
  3955                           	psect	dataBANK3
  3956  01C8                     __pdataBANK3:	
  3957  01C8                     _baseline_mod_time:	
  3958  01C8                     	ds	4
  3959  01CC                     _blink_delay:	
  3960  01CC                     	ds	2
  3961  01CE                     _knob1_prev:	
  3962  01CE                     	ds	2
  3963  01D0                     _knob2_prev:	
  3964  01D0                     	ds	2
  3965  01D2                     _knob3_prev:	
  3966  01D2                     	ds	2
  3967  01D4                     _knob4_prev:	
  3968  01D4                     	ds	2
  3969  01D6                     _knob5_prev:	
  3970  01D6                     	ds	2
  3971  01D8                     _mod_counter:	
  3972  01D8                     	ds	2
  3973  01DA                     _mod_delay_time:	
  3974  01DA                     	ds	2
  3975  01DC                     _symmetry:	
  3976  01DC                     	ds	2
  3977  01DE                     _tap_iteration:	
  3978  01DE                     	ds	2
  3979  01E0                     _blink_state:	
  3980  01E0                     	ds	1
  3981  01E1                     _currentBypassState:	
  3982  01E1                     	ds	1
  3983  01E2                     _expSwitchState:	
  3984  01E2                     	ds	1
  3985  01E3                     _expressModeCnst:	
  3986  01E3                     	ds	1
  3987  01E4                     _mod_time_changed:	
  3988  01E4                     	ds	1
  3989  01E5                     _presetModeCnst:	
  3990  01E5                     	ds	1
  3991  01E6                     _switchTap_state:	
  3992  01E6                     	ds	1
  3993                           
  3994                           	psect	bssBANK4
  3995  0220                     __pbssBANK4:	
  3996  0220                     _tap_history:	
  3997  0220                     	ds	20
  3998  0234                     USARTWriteInt@F3536:	
  3999  0234                     	ds	5
  4000  0239                     _ledState:	
  4001  0239                     	ds	4
  4002  023D                     _tap_total:	
  4003  023D                     	ds	4
  4004  0241                     _adjusted_pot_value:	
  4005  0241                     	ds	2
  4006  0243                     _debounce_bypass:	
  4007  0243                     	ds	2
  4008  0245                     _debounce_count:	
  4009  0245                     	ds	2
  4010  0247                     _debounce_mode1:	
  4011  0247                     	ds	2
  4012  0249                     _debounce_mode2:	
  4013  0249                     	ds	2
  4014  024B                     _delayfound:	
  4015  024B                     	ds	2
  4016  024D                     _errno:	
  4017  024D                     	ds	2
  4018  024F                     _mod_value:	
  4019  024F                     	ds	2
  4020  0251                     _switchBypass_toggle:	
  4021  0251                     	ds	2
  4022  0253                     _tmpVal:	
  4023  0253                     	ds	2
  4024                           
  4025                           	psect	dataBANK4
  4026  0263                     __pdataBANK4:	
  4027  0263                     _switchBypass_up:	
  4028  0263                     	ds	2
  4029                           
  4030                           	psect	bssBANK5
  4031  02A0                     __pbssBANK5:	
  4032  02A0                     _tap:	
  4033  02A0                     	ds	44
  4034                           
  4035                           	psect	bssBANK6
  4036  0320                     __pbssBANK6:	
  4037  0320                     _URBuff:	
  4038  0320                     	ds	64
  4039                           
  4040                           	psect	bssBANK7
  4041  03A0                     __pbssBANK7:	
  4042  03A0                     _myBuf:	
  4043  03A0                     	ds	64
  4044                           
  4045                           	psect	clrtext
  4046  2F43                     clear_ram0:	
  4047                           ;	Called with FSR0 containing the base address, and
  4048                           ;	btemp/btemp+1 has the size to clear
  4049                           
  4050  2F43  0064               	clrwdt	;clear the watchdog before getting into this loop
  4051  2F44                     clrloop0:	
  4052  2F44  0180               	clrf	0	;clear RAM location pointed to by FSR
  4053  2F45  3101               	addfsr 0,1
  4054  2F46  3001               	movlw	1
  4055  2F47  02FE               	subwf	126,f
  4056  2F48  3000               	movlw	0
  4057  2F49  3BFF               	subwfb	127,f
  4058  2F4A  087F               	movf	127,w
  4059  2F4B  047E               	iorwf	126,w
  4060  2F4C  1903               	btfsc	3,2
  4061  2F4D  3400               	retlw	0	;all done for this memory range, return
  4062  2F4E  2F44               	goto	clrloop0	;have we reached the end yet?
  4063                           
  4064                           	psect	inittext
  4065  2F37                     init_ram:	
  4066  2F37  00FE               	movwf	126
  4067  2F38                     initloop:	
  4068  2F38  0012               	moviw fsr0++
  4069  2F39  001E               	movwi fsr1++
  4070  2F3A  3001               	movlw	1
  4071  2F3B  02FE               	subwf	126,f
  4072  2F3C  3000               	movlw	0
  4073  2F3D  3BFF               	subwfb	127,f
  4074  2F3E  087F               	movf	127,w
  4075  2F3F  047E               	iorwf	126,w
  4076  2F40  1903               	btfsc	3,2
  4077  2F41  3400               	retlw	0
  4078  2F42  2F38               	goto	initloop
  4079                           
  4080                           	psect	cstackBANK4
  4081  0255                     __pcstackBANK4:	
  4082  0255                     ??_main:	
  4083                           
  4084                           ; 1 bytes @ 0x0
  4085  0255                     	ds	5
  4086  025A                     _main$2829:	
  4087                           
  4088                           ; 3 bytes @ 0x5
  4089  025A                     	ds	3
  4090  025D                     _main$2830:	
  4091                           
  4092                           ; 3 bytes @ 0x8
  4093  025D                     	ds	3
  4094  0260                     _main$2831:	
  4095                           
  4096                           ; 3 bytes @ 0xB
  4097  0260                     	ds	3
  4098                           
  4099                           	psect	cstackBANK3
  4100  01E7                     __pcstackBANK3:	
  4101  01E7                     scaleA100kPot@pwm:	
  4102  01E7                     scaleA10kPot@pwm:	
  4103                           ; 3 bytes @ 0x0
  4104                           
  4105  01E7                     scaleiA10kPot@pwm:	
  4106                           ; 3 bytes @ 0x0
  4107                           
  4108                           
  4109                           ; 3 bytes @ 0x0
  4110  01E7                     	ds	3
  4111  01EA                     _scaleA100kPot$2834:	
  4112  01EA                     _scaleA10kPot$2838:	
  4113                           ; 3 bytes @ 0x3
  4114                           
  4115  01EA                     _scaleiA10kPot$2840:	
  4116                           ; 3 bytes @ 0x3
  4117                           
  4118                           
  4119                           ; 3 bytes @ 0x3
  4120  01EA                     	ds	3
  4121  01ED                     _scaleA100kPot$2835:	
  4122  01ED                     _scaleA10kPot$2839:	
  4123                           ; 3 bytes @ 0x6
  4124                           
  4125  01ED                     _scaleiA10kPot$2841:	
  4126                           ; 3 bytes @ 0x6
  4127                           
  4128                           
  4129                           ; 3 bytes @ 0x6
  4130  01ED                     	ds	3
  4131                           
  4132                           	psect	cstackBANK2
  4133  0120                     __pcstackBANK2:	
  4134  0120                     ?___fttol:	
  4135  0120                     ___fttol@f1:	
  4136                           ; 4 bytes @ 0x0
  4137                           
  4138                           
  4139                           ; 3 bytes @ 0x0
  4140  0120                     	ds	4
  4141  0124                     ??___fttol:	
  4142                           
  4143                           ; 1 bytes @ 0x4
  4144  0124                     	ds	4
  4145  0128                     ___fttol@sign1:	
  4146                           
  4147                           ; 1 bytes @ 0x8
  4148  0128                     	ds	1
  4149  0129                     ___fttol@lval:	
  4150                           
  4151                           ; 4 bytes @ 0x9
  4152  0129                     	ds	4
  4153  012D                     ___fttol@exp1:	
  4154                           
  4155                           ; 1 bytes @ 0xD
  4156  012D                     	ds	1
  4157  012E                     ?_set_subdivision:	
  4158  012E                     ?_modTri:	
  4159                           ; 2 bytes @ 0xE
  4160                           
  4161  012E                     ?_modSaw:	
  4162                           ; 2 bytes @ 0xE
  4163                           
  4164  012E                     ?___wmul:	
  4165                           ; 2 bytes @ 0xE
  4166                           
  4167  012E                     ?_floor:	
  4168                           ; 2 bytes @ 0xE
  4169                           
  4170  012E                     set_subdivision@x:	
  4171                           ; 3 bytes @ 0xE
  4172                           
  4173  012E                     getModulationDelayTime@subDiv:	
  4174                           ; 2 bytes @ 0xE
  4175                           
  4176  012E                     ___wmul@multiplier:	
  4177                           ; 2 bytes @ 0xE
  4178                           
  4179  012E                     modTri@angle:	
  4180                           ; 2 bytes @ 0xE
  4181                           
  4182  012E                     modSaw@angle:	
  4183                           ; 3 bytes @ 0xE
  4184                           
  4185  012E                     floor@x:	
  4186                           ; 3 bytes @ 0xE
  4187                           
  4188                           
  4189                           ; 3 bytes @ 0xE
  4190  012E                     	ds	2
  4191  0130                     set_subdivision@y:	
  4192  0130                     ___wmul@multiplicand:	
  4193                           ; 2 bytes @ 0x10
  4194                           
  4195                           
  4196                           ; 2 bytes @ 0x10
  4197  0130                     	ds	1
  4198  0131                     ??_floor:	
  4199  0131                     modTri@inflection:	
  4200                           ; 1 bytes @ 0x11
  4201                           
  4202  0131                     modSaw@inflection:	
  4203                           ; 3 bytes @ 0x11
  4204                           
  4205                           
  4206                           ; 3 bytes @ 0x11
  4207  0131                     	ds	1
  4208  0132                     ___wmul@product:	
  4209  0132                     set_subdivision@scalar:	
  4210                           ; 2 bytes @ 0x12
  4211                           
  4212  0132                     floor@i:	
  4213                           ; 3 bytes @ 0x12
  4214                           
  4215                           
  4216                           ; 3 bytes @ 0x12
  4217  0132                     	ds	2
  4218  0134                     ?_modSin:	
  4219  0134                     ?_eval_poly:	
  4220                           ; 2 bytes @ 0x14
  4221                           
  4222  0134                     modSin@angle:	
  4223                           ; 3 bytes @ 0x14
  4224                           
  4225  0134                     eval_poly@x:	
  4226                           ; 3 bytes @ 0x14
  4227                           
  4228  0134                     _modTri$2843:	
  4229                           ; 3 bytes @ 0x14
  4230                           
  4231  0134                     _modSaw$2844:	
  4232                           ; 3 bytes @ 0x14
  4233                           
  4234                           
  4235                           ; 3 bytes @ 0x14
  4236  0134                     	ds	1
  4237  0135                     set_subdivision@tmpX:	
  4238  0135                     floor@expon:	
  4239                           ; 2 bytes @ 0x15
  4240                           
  4241                           
  4242                           ; 2 bytes @ 0x15
  4243  0135                     	ds	2
  4244  0137                     ?___ftsub:	
  4245  0137                     eval_poly@d:	
  4246                           ; 3 bytes @ 0x17
  4247                           
  4248  0137                     modSin@inflection:	
  4249                           ; 2 bytes @ 0x17
  4250                           
  4251  0137                     modTri@shift:	
  4252                           ; 3 bytes @ 0x17
  4253                           
  4254  0137                     ___ftsub@f2:	
  4255                           ; 3 bytes @ 0x17
  4256                           
  4257  0137                     _modSaw$2845:	
  4258                           ; 3 bytes @ 0x17
  4259                           
  4260                           
  4261                           ; 3 bytes @ 0x17
  4262  0137                     	ds	2
  4263  0139                     eval_poly@n:	
  4264                           
  4265                           ; 2 bytes @ 0x19
  4266  0139                     	ds	1
  4267  013A                     ??_modSin:	
  4268  013A                     modTri@period:	
  4269                           ; 1 bytes @ 0x1A
  4270                           
  4271  013A                     ___ftsub@f1:	
  4272                           ; 3 bytes @ 0x1A
  4273                           
  4274  013A                     _modSaw$2846:	
  4275                           ; 3 bytes @ 0x1A
  4276                           
  4277                           
  4278                           ; 3 bytes @ 0x1A
  4279  013A                     	ds	1
  4280  013B                     eval_poly@res:	
  4281                           
  4282                           ; 3 bytes @ 0x1B
  4283  013B                     	ds	1
  4284  013C                     _modSin$2842:	
  4285                           
  4286                           ; 3 bytes @ 0x1C
  4287  013C                     	ds	1
  4288  013D                     modSaw@mod:	
  4289  013D                     modTri@tmpVal:	
  4290                           ; 2 bytes @ 0x1D
  4291                           
  4292                           
  4293                           ; 3 bytes @ 0x1D
  4294  013D                     	ds	1
  4295  013E                     ?_sin:	
  4296  013E                     ?_log:	
  4297                           ; 3 bytes @ 0x1E
  4298                           
  4299  013E                     ?_ldexp:	
  4300                           ; 3 bytes @ 0x1E
  4301                           
  4302  013E                     sin@f:	
  4303                           ; 3 bytes @ 0x1E
  4304                           
  4305  013E                     ldexp@value:	
  4306                           ; 3 bytes @ 0x1E
  4307                           
  4308  013E                     log@x:	
  4309                           ; 3 bytes @ 0x1E
  4310                           
  4311                           
  4312                           ; 3 bytes @ 0x1E
  4313  013E                     	ds	1
  4314  013F                     modSin@shift:	
  4315  013F                     modSaw@shift:	
  4316                           ; 3 bytes @ 0x1F
  4317                           
  4318                           
  4319                           ; 3 bytes @ 0x1F
  4320  013F                     	ds	2
  4321  0141                     ??_sin:	
  4322  0141                     ??_log:	
  4323                           ; 1 bytes @ 0x21
  4324                           
  4325  0141                     ldexp@newexp:	
  4326                           ; 1 bytes @ 0x21
  4327                           
  4328                           
  4329                           ; 2 bytes @ 0x21
  4330  0141                     	ds	1
  4331  0142                     log@exponent:	
  4332  0142                     modSin@period:	
  4333                           ; 2 bytes @ 0x22
  4334                           
  4335  0142                     modSaw@period:	
  4336                           ; 3 bytes @ 0x22
  4337                           
  4338  0142                     sin@y:	
  4339                           ; 3 bytes @ 0x22
  4340                           
  4341                           
  4342                           ; 3 bytes @ 0x22
  4343  0142                     	ds	1
  4344  0143                     ??_ldexp:	
  4345                           
  4346                           ; 1 bytes @ 0x23
  4347  0143                     	ds	2
  4348  0145                     ?_modSawRev:	
  4349  0145                     modSin@tmpVal:	
  4350                           ; 2 bytes @ 0x25
  4351                           
  4352  0145                     modSawRev@angle:	
  4353                           ; 3 bytes @ 0x25
  4354                           
  4355  0145                     _ldexp$2626:	
  4356                           ; 3 bytes @ 0x25
  4357                           
  4358  0145                     _sin$2849:	
  4359                           ; 3 bytes @ 0x25
  4360                           
  4361                           
  4362                           ; 3 bytes @ 0x25
  4363  0145                     	ds	3
  4364  0148                     ?_modSquare:	
  4365  0148                     ?_exp:	
  4366                           ; 2 bytes @ 0x28
  4367                           
  4368  0148                     modSawRev@inflection:	
  4369                           ; 3 bytes @ 0x28
  4370                           
  4371  0148                     modSquare@angle:	
  4372                           ; 3 bytes @ 0x28
  4373                           
  4374  0148                     sin@x2:	
  4375                           ; 3 bytes @ 0x28
  4376                           
  4377  0148                     exp@x:	
  4378                           ; 3 bytes @ 0x28
  4379                           
  4380                           
  4381                           ; 3 bytes @ 0x28
  4382  0148                     	ds	3
  4383  014B                     ??_modSawRev:	
  4384  014B                     ??_exp:	
  4385                           ; 1 bytes @ 0x2B
  4386                           
  4387  014B                     sin@sgn:	
  4388                           ; 1 bytes @ 0x2B
  4389                           
  4390  014B                     modSquare@inflection:	
  4391                           ; 1 bytes @ 0x2B
  4392                           
  4393                           
  4394                           ; 3 bytes @ 0x2B
  4395  014B                     	ds	1
  4396  014C                     ??_calcSinArray:	
  4397  014C                     _exp$2850:	
  4398                           ; 1 bytes @ 0x2C
  4399                           
  4400                           
  4401                           ; 3 bytes @ 0x2C
  4402  014C                     	ds	2
  4403  014E                     modSquare@tmpVal:	
  4404                           
  4405                           ; 2 bytes @ 0x2E
  4406  014E                     	ds	1
  4407  014F                     _exp$2589:	
  4408                           
  4409                           ; 3 bytes @ 0x2F
  4410  014F                     	ds	1
  4411  0150                     ??_updateModulationArray:	
  4412  0150                     calcSinArray@tmpVal:	
  4413                           ; 1 bytes @ 0x30
  4414                           
  4415                           
  4416                           ; 3 bytes @ 0x30
  4417  0150                     	ds	2
  4418  0152                     exp@exponent:	
  4419                           
  4420                           ; 2 bytes @ 0x32
  4421  0152                     	ds	1
  4422  0153                     calcSinArray@iAngle:	
  4423                           
  4424                           ; 1 bytes @ 0x33
  4425  0153                     	ds	1
  4426  0154                     exp@sign:	
  4427  0154                     updateModulationArray@angleFactor:	
  4428                           ; 1 bytes @ 0x34
  4429                           
  4430                           
  4431                           ; 2 bytes @ 0x34
  4432  0154                     	ds	1
  4433  0155                     ?_pow:	
  4434  0155                     pow@x:	
  4435                           ; 3 bytes @ 0x35
  4436                           
  4437                           
  4438                           ; 3 bytes @ 0x35
  4439  0155                     	ds	1
  4440  0156                     updateModulationArray@subDiv:	
  4441                           
  4442                           ; 2 bytes @ 0x36
  4443  0156                     	ds	2
  4444  0158                     updateModulationArray@thisAngle:	
  4445  0158                     pow@y:	
  4446                           ; 2 bytes @ 0x38
  4447                           
  4448                           
  4449                           ; 3 bytes @ 0x38
  4450  0158                     	ds	2
  4451  015A                     updateModulationArray@iAngle:	
  4452                           
  4453                           ; 1 bytes @ 0x3A
  4454  015A                     	ds	1
  4455  015B                     ??_pow:	
  4456                           
  4457                           ; 1 bytes @ 0x3B
  4458  015B                     	ds	1
  4459  015C                     _pow$2847:	
  4460                           
  4461                           ; 3 bytes @ 0x3C
  4462  015C                     	ds	3
  4463  015F                     _pow$2848:	
  4464                           
  4465                           ; 3 bytes @ 0x3F
  4466  015F                     	ds	3
  4467  0162                     pow@sign:	
  4468                           
  4469                           ; 1 bytes @ 0x42
  4470  0162                     	ds	1
  4471  0163                     pow@yi:	
  4472                           
  4473                           ; 4 bytes @ 0x43
  4474  0163                     	ds	4
  4475  0167                     ?_scaleA10kPot:	
  4476  0167                     ?_scaleiA10kPot:	
  4477                           ; 2 bytes @ 0x47
  4478                           
  4479  0167                     ?_scaleA100kPot:	
  4480                           ; 2 bytes @ 0x47
  4481                           
  4482  0167                     scaleA100kPot@input:	
  4483                           ; 2 bytes @ 0x47
  4484                           
  4485  0167                     scaleA10kPot@input:	
  4486                           ; 3 bytes @ 0x47
  4487                           
  4488  0167                     scaleiA10kPot@input:	
  4489                           ; 3 bytes @ 0x47
  4490                           
  4491                           
  4492                           ; 3 bytes @ 0x47
  4493  0167                     	ds	3
  4494                           
  4495                           	psect	cstackBANK1
  4496  00A0                     __pcstackBANK1:	
  4497  00A0                     ?___ftge:	
  4498  00A0                     ?_set_leds_top:	
  4499                           ; 1 bit 
  4500                           
  4501  00A0                     ?_USARTInit:	
  4502                           ; 1 bytes @ 0x0
  4503                           
  4504  00A0                     ??_ConfigureOscillator:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  00A0                     ??_InitApp:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  00A0                     ??_InitializeTaps:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513  00A0                     ??_init_adc:	
  4514                           ; 1 bytes @ 0x0
  4515                           
  4516  00A0                     ??_init_pwm:	
  4517                           ; 1 bytes @ 0x0
  4518                           
  4519  00A0                     ??_init_timer2:	
  4520                           ; 1 bytes @ 0x0
  4521                           
  4522  00A0                     ??_init_timer0:	
  4523                           ; 1 bytes @ 0x0
  4524                           
  4525  00A0                     ?_set_leds_bottom:	
  4526                           ; 1 bytes @ 0x0
  4527                           
  4528  00A0                     ?_setLongBypassState:	
  4529                           ; 1 bytes @ 0x0
  4530                           
  4531  00A0                     ?_setLongTapState:	
  4532                           ; 1 bytes @ 0x0
  4533                           
  4534  00A0                     ?_updateSwitchBypassState:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  00A0                     ?_getModulationSubdivision:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  00A0                     ?_adc_convert:	
  4541                           ; 2 bytes @ 0x0
  4542                           
  4543  00A0                     ?_FLASH_ReadWord:	
  4544                           ; 2 bytes @ 0x0
  4545                           
  4546  00A0                     ?_getSwitchBypassState:	
  4547                           ; 2 bytes @ 0x0
  4548                           
  4549  00A0                     ?___awdiv:	
  4550                           ; 2 bytes @ 0x0
  4551                           
  4552  00A0                     ?___ftpack:	
  4553                           ; 2 bytes @ 0x0
  4554                           
  4555  00A0                     ?_frexp:	
  4556                           ; 3 bytes @ 0x0
  4557                           
  4558  00A0                     ?___lmul:	
  4559                           ; 3 bytes @ 0x0
  4560                           
  4561  00A0                     ?___aldiv:	
  4562                           ; 4 bytes @ 0x0
  4563                           
  4564  00A0                     FLASH_ReadWord@flashAddr:	
  4565                           ; 4 bytes @ 0x0
  4566                           
  4567  00A0                     set_leds_top@x:	
  4568                           ; 2 bytes @ 0x0
  4569                           
  4570  00A0                     set_leds_bottom@x:	
  4571                           ; 2 bytes @ 0x0
  4572                           
  4573  00A0                     updateSwitchBypassState@state:	
  4574                           ; 2 bytes @ 0x0
  4575                           
  4576  00A0                     setLongBypassState@f_state:	
  4577                           ; 2 bytes @ 0x0
  4578                           
  4579  00A0                     setLongTapState@f_state:	
  4580                           ; 2 bytes @ 0x0
  4581                           
  4582  00A0                     USARTInit@baud_rate:	
  4583                           ; 2 bytes @ 0x0
  4584                           
  4585  00A0                     ___awdiv@divisor:	
  4586                           ; 2 bytes @ 0x0
  4587                           
  4588  00A0                     ___ftpack@arg:	
  4589                           ; 2 bytes @ 0x0
  4590                           
  4591  00A0                     ___ftge@ff1:	
  4592                           ; 3 bytes @ 0x0
  4593                           
  4594  00A0                     frexp@value:	
  4595                           ; 3 bytes @ 0x0
  4596                           
  4597  00A0                     ___lmul@multiplier:	
  4598                           ; 3 bytes @ 0x0
  4599                           
  4600  00A0                     ___aldiv@divisor:	
  4601                           ; 4 bytes @ 0x0
  4602                           
  4603                           
  4604                           ; 4 bytes @ 0x0
  4605  00A0                     	ds	1
  4606  00A1                     InitializeTaps@itap:	
  4607                           
  4608                           ; 2 bytes @ 0x1
  4609  00A1                     	ds	1
  4610  00A2                     ??_getModulationSubdivision:	
  4611  00A2                     ??_USARTInit:	
  4612                           ; 1 bytes @ 0x2
  4613                           
  4614  00A2                     ??_adc_convert:	
  4615                           ; 1 bytes @ 0x2
  4616                           
  4617  00A2                     ??_FLASH_ReadWord:	
  4618                           ; 1 bytes @ 0x2
  4619                           
  4620  00A2                     ??_set_leds_bottom:	
  4621                           ; 1 bytes @ 0x2
  4622                           
  4623  00A2                     ??_setLongBypassState:	
  4624                           ; 1 bytes @ 0x2
  4625                           
  4626  00A2                     ??_setLongTapState:	
  4627                           ; 1 bytes @ 0x2
  4628                           
  4629  00A2                     ??_updateSwitchBypassState:	
  4630                           ; 1 bytes @ 0x2
  4631                           
  4632  00A2                     ??_getSwitchBypassState:	
  4633                           ; 1 bytes @ 0x2
  4634                           
  4635  00A2                     FLASH_ReadWord@GIEBitValue:	
  4636                           ; 1 bytes @ 0x2
  4637                           
  4638  00A2                     set_leds_top@ledState:	
  4639                           ; 1 bytes @ 0x2
  4640                           
  4641  00A2                     ___awdiv@dividend:	
  4642                           ; 2 bytes @ 0x2
  4643                           
  4644                           
  4645                           ; 2 bytes @ 0x2
  4646  00A2                     	ds	1
  4647  00A3                     adc_convert@channel:	
  4648  00A3                     ___ftpack@exp:	
  4649                           ; 1 bytes @ 0x3
  4650                           
  4651  00A3                     frexp@eptr:	
  4652                           ; 1 bytes @ 0x3
  4653                           
  4654  00A3                     ___ftge@ff2:	
  4655                           ; 1 bytes @ 0x3
  4656                           
  4657                           
  4658                           ; 3 bytes @ 0x3
  4659  00A3                     	ds	1
  4660  00A4                     ??_set_leds_top:	
  4661  00A4                     ??_ReadSavedSettings:	
  4662                           ; 1 bytes @ 0x4
  4663                           
  4664  00A4                     ??_resetRingLEDs:	
  4665                           ; 1 bytes @ 0x4
  4666                           
  4667  00A4                     ??_setPresetDisplay:	
  4668                           ; 1 bytes @ 0x4
  4669                           
  4670  00A4                     ??_setExpressionDisplay:	
  4671                           ; 1 bytes @ 0x4
  4672                           
  4673  00A4                     ??_frexp:	
  4674                           ; 1 bytes @ 0x4
  4675                           
  4676  00A4                     ??___awdiv:	
  4677                           ; 1 bytes @ 0x4
  4678                           
  4679  00A4                     ___ftpack@sign:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  00A4                     ___lmul@multiplicand:	
  4683                           ; 1 bytes @ 0x4
  4684                           
  4685  00A4                     ___aldiv@dividend:	
  4686                           ; 4 bytes @ 0x4
  4687                           
  4688                           
  4689                           ; 4 bytes @ 0x4
  4690  00A4                     	ds	1
  4691  00A5                     ??___ftpack:	
  4692  00A5                     ___awdiv@counter:	
  4693                           ; 1 bytes @ 0x5
  4694                           
  4695                           
  4696                           ; 1 bytes @ 0x5
  4697  00A5                     	ds	1
  4698  00A6                     ??___ftge:	
  4699  00A6                     setPresetDisplay@ledChannel:	
  4700                           ; 1 bytes @ 0x6
  4701                           
  4702  00A6                     setExpressionDisplay@ledChannel:	
  4703                           ; 1 bytes @ 0x6
  4704                           
  4705  00A6                     ___awdiv@sign:	
  4706                           ; 1 bytes @ 0x6
  4707                           
  4708                           
  4709                           ; 1 bytes @ 0x6
  4710  00A6                     	ds	1
  4711  00A7                     ??_setPedalMode:	
  4712  00A7                     ___awdiv@quotient:	
  4713                           ; 1 bytes @ 0x7
  4714                           
  4715                           
  4716                           ; 2 bytes @ 0x7
  4717  00A7                     	ds	1
  4718  00A8                     ??___lmul:	
  4719  00A8                     ??___aldiv:	
  4720                           ; 1 bytes @ 0x8
  4721                           
  4722  00A8                     ?___altoft:	
  4723                           ; 1 bytes @ 0x8
  4724                           
  4725  00A8                     ?___awtoft:	
  4726                           ; 3 bytes @ 0x8
  4727                           
  4728  00A8                     ?___lltoft:	
  4729                           ; 3 bytes @ 0x8
  4730                           
  4731  00A8                     ___awtoft@c:	
  4732                           ; 3 bytes @ 0x8
  4733                           
  4734  00A8                     ___lmul@product:	
  4735                           ; 2 bytes @ 0x8
  4736                           
  4737  00A8                     ___altoft@c:	
  4738                           ; 4 bytes @ 0x8
  4739                           
  4740  00A8                     ___lltoft@c:	
  4741                           ; 4 bytes @ 0x8
  4742                           
  4743                           
  4744                           ; 4 bytes @ 0x8
  4745  00A8                     	ds	1
  4746  00A9                     ___aldiv@counter:	
  4747                           
  4748                           ; 1 bytes @ 0x9
  4749  00A9                     	ds	1
  4750  00AA                     ___aldiv@sign:	
  4751                           
  4752                           ; 1 bytes @ 0xA
  4753  00AA                     	ds	1
  4754  00AB                     ??___awtoft:	
  4755  00AB                     ___aldiv@quotient:	
  4756                           ; 1 bytes @ 0xB
  4757                           
  4758                           
  4759                           ; 4 bytes @ 0xB
  4760  00AB                     	ds	1
  4761  00AC                     ?_wait_ms:	
  4762  00AC                     ??___altoft:	
  4763                           ; 1 bytes @ 0xC
  4764                           
  4765  00AC                     ??___lltoft:	
  4766                           ; 1 bytes @ 0xC
  4767                           
  4768  00AC                     wait_ms@timeSec:	
  4769                           ; 1 bytes @ 0xC
  4770                           
  4771                           
  4772                           ; 2 bytes @ 0xC
  4773  00AC                     	ds	1
  4774  00AD                     ___awtoft@sign:	
  4775  00AD                     ___lltoft@exp:	
  4776                           ; 1 bytes @ 0xD
  4777                           
  4778                           
  4779                           ; 1 bytes @ 0xD
  4780  00AD                     	ds	1
  4781  00AE                     ??_wait_ms:	
  4782  00AE                     ?___ftmul:	
  4783                           ; 1 bytes @ 0xE
  4784                           
  4785  00AE                     ___altoft@exp:	
  4786                           ; 3 bytes @ 0xE
  4787                           
  4788  00AE                     ___ftmul@f1:	
  4789                           ; 1 bytes @ 0xE
  4790                           
  4791  00AE                     wait_ms@timemsl:	
  4792                           ; 3 bytes @ 0xE
  4793                           
  4794                           
  4795                           ; 4 bytes @ 0xE
  4796  00AE                     	ds	1
  4797  00AF                     ___altoft@sign:	
  4798                           
  4799                           ; 1 bytes @ 0xF
  4800  00AF                     	ds	2
  4801  00B1                     ___ftmul@f2:	
  4802                           
  4803                           ; 3 bytes @ 0x11
  4804  00B1                     	ds	1
  4805  00B2                     ??_solidring_tactiles:	
  4806  00B2                     ??_ring_tactiles:	
  4807                           ; 1 bytes @ 0x12
  4808                           
  4809  00B2                     ?_setSwitchBypassRelays:	
  4810                           ; 1 bytes @ 0x12
  4811                           
  4812  00B2                     setSwitchBypassRelays@f_state:	
  4813                           ; 1 bytes @ 0x12
  4814                           
  4815                           
  4816                           ; 2 bytes @ 0x12
  4817  00B2                     	ds	1
  4818  00B3                     ring_tactiles@iLed:	
  4819                           
  4820                           ; 2 bytes @ 0x13
  4821  00B3                     	ds	1
  4822  00B4                     ??_setSwitchBypassRelays:	
  4823  00B4                     ??___ftmul:	
  4824                           ; 1 bytes @ 0x14
  4825                           
  4826  00B4                     solidring_tactiles@ring_delay:	
  4827                           ; 1 bytes @ 0x14
  4828                           
  4829                           
  4830                           ; 1 bytes @ 0x14
  4831  00B4                     	ds	1
  4832  00B5                     ring_tactiles@iLed_1516:	
  4833                           
  4834                           ; 2 bytes @ 0x15
  4835  00B5                     	ds	1
  4836  00B6                     ?_setSwitchBypassState:	
  4837  00B6                     setSwitchBypassState@f_state:	
  4838                           ; 1 bytes @ 0x16
  4839                           
  4840                           
  4841                           ; 2 bytes @ 0x16
  4842  00B6                     	ds	1
  4843  00B7                     ??_showSave:	
  4844                           
  4845                           ; 1 bytes @ 0x17
  4846  00B7                     	ds	1
  4847  00B8                     ??_setSwitchBypassState:	
  4848  00B8                     ?_setDoublePressState:	
  4849                           ; 1 bytes @ 0x18
  4850                           
  4851  00B8                     ___ftmul@exp:	
  4852                           ; 1 bytes @ 0x18
  4853                           
  4854  00B8                     setDoublePressState@f_state:	
  4855                           ; 1 bytes @ 0x18
  4856                           
  4857                           
  4858                           ; 2 bytes @ 0x18
  4859  00B8                     	ds	1
  4860  00B9                     ___ftmul@f3_as_product:	
  4861                           
  4862                           ; 3 bytes @ 0x19
  4863  00B9                     	ds	1
  4864  00BA                     ??_initSwitchBypass:	
  4865  00BA                     ??_setDoublePressState:	
  4866                           ; 1 bytes @ 0x1A
  4867                           
  4868  00BA                     initSwitchBypass@initState:	
  4869                           ; 1 bytes @ 0x1A
  4870                           
  4871                           
  4872                           ; 2 bytes @ 0x1A
  4873  00BA                     	ds	2
  4874  00BC                     ??_updateSwitchBypass:	
  4875  00BC                     ??_updateSwitchTap:	
  4876                           ; 1 bytes @ 0x1C
  4877                           
  4878  00BC                     ___ftmul@cntr:	
  4879                           ; 1 bytes @ 0x1C
  4880                           
  4881                           
  4882                           ; 1 bytes @ 0x1C
  4883  00BC                     	ds	1
  4884  00BD                     ___ftmul@sign:	
  4885                           
  4886                           ; 1 bytes @ 0x1D
  4887  00BD                     	ds	1
  4888  00BE                     ?___ftneg:	
  4889  00BE                     ___ftneg@f1:	
  4890                           ; 3 bytes @ 0x1E
  4891                           
  4892                           
  4893                           ; 3 bytes @ 0x1E
  4894  00BE                     	ds	3
  4895  00C1                     ??___ftneg:	
  4896  00C1                     ?___ftadd:	
  4897                           ; 1 bytes @ 0x21
  4898                           
  4899  00C1                     ___ftadd@f1:	
  4900                           ; 3 bytes @ 0x21
  4901                           
  4902                           
  4903                           ; 3 bytes @ 0x21
  4904  00C1                     	ds	1
  4905  00C2                     updateSwitchTap@tapCntDivisor:	
  4906                           
  4907                           ; 2 bytes @ 0x22
  4908  00C2                     	ds	2
  4909  00C4                     updateSwitchTap@iCnt:	
  4910  00C4                     ___ftadd@f2:	
  4911                           ; 1 bytes @ 0x24
  4912                           
  4913                           
  4914                           ; 3 bytes @ 0x24
  4915  00C4                     	ds	3
  4916  00C7                     ??___ftadd:	
  4917                           
  4918                           ; 1 bytes @ 0x27
  4919  00C7                     	ds	4
  4920  00CB                     ___ftadd@sign:	
  4921                           
  4922                           ; 1 bytes @ 0x2B
  4923  00CB                     	ds	1
  4924  00CC                     ___ftadd@exp2:	
  4925                           
  4926                           ; 1 bytes @ 0x2C
  4927  00CC                     	ds	1
  4928  00CD                     ___ftadd@exp1:	
  4929                           
  4930                           ; 1 bytes @ 0x2D
  4931  00CD                     	ds	1
  4932  00CE                     ?___ftdiv:	
  4933  00CE                     ___ftdiv@f2:	
  4934                           ; 3 bytes @ 0x2E
  4935                           
  4936                           
  4937                           ; 3 bytes @ 0x2E
  4938  00CE                     	ds	3
  4939  00D1                     ___ftdiv@f1:	
  4940                           
  4941                           ; 3 bytes @ 0x31
  4942  00D1                     	ds	3
  4943  00D4                     ??___ftdiv:	
  4944                           
  4945                           ; 1 bytes @ 0x34
  4946  00D4                     	ds	4
  4947  00D8                     ___ftdiv@cntr:	
  4948                           
  4949                           ; 1 bytes @ 0x38
  4950  00D8                     	ds	1
  4951  00D9                     ___ftdiv@f3:	
  4952                           
  4953                           ; 3 bytes @ 0x39
  4954  00D9                     	ds	3
  4955  00DC                     ___ftdiv@exp:	
  4956                           
  4957                           ; 1 bytes @ 0x3C
  4958  00DC                     	ds	1
  4959  00DD                     ___ftdiv@sign:	
  4960                           
  4961                           ; 1 bytes @ 0x3D
  4962  00DD                     	ds	1
  4963  00DE                     ?_map:	
  4964  00DE                     map@x:	
  4965                           ; 3 bytes @ 0x3E
  4966                           
  4967                           
  4968                           ; 3 bytes @ 0x3E
  4969  00DE                     	ds	3
  4970  00E1                     map@in_min:	
  4971                           
  4972                           ; 3 bytes @ 0x41
  4973  00E1                     	ds	3
  4974  00E4                     map@in_max:	
  4975                           
  4976                           ; 3 bytes @ 0x44
  4977  00E4                     	ds	3
  4978  00E7                     map@out_min:	
  4979                           
  4980                           ; 3 bytes @ 0x47
  4981  00E7                     	ds	3
  4982  00EA                     map@out_max:	
  4983                           
  4984                           ; 3 bytes @ 0x4A
  4985  00EA                     	ds	3
  4986  00ED                     ??_map:	
  4987  00ED                     _map$2832:	
  4988                           ; 1 bytes @ 0x4D
  4989                           
  4990                           
  4991                           ; 3 bytes @ 0x4D
  4992  00ED                     	ds	3
  4993  00F0                     ??_scaleA10kPot:	
  4994  00F0                     ??_scaleiA10kPot:	
  4995                           ; 1 bytes @ 0x50
  4996                           
  4997  00F0                     ??_scaleA100kPot:	
  4998                           ; 1 bytes @ 0x50
  4999                           
  5000  00F0                     ??_set_subdivision:	
  5001                           ; 1 bytes @ 0x50
  5002                           
  5003  00F0                     ??_getModulationDelayTime:	
  5004                           ; 1 bytes @ 0x50
  5005                           
  5006  00F0                     ??_modTri:	
  5007                           ; 1 bytes @ 0x50
  5008                           
  5009  00F0                     ??_modSquare:	
  5010                           ; 1 bytes @ 0x50
  5011                           
  5012  00F0                     ??_modSaw:	
  5013                           ; 1 bytes @ 0x50
  5014                           
  5015  00F0                     ??_eval_poly:	
  5016                           ; 1 bytes @ 0x50
  5017                           
  5018  00F0                     ??___wmul:	
  5019                           ; 1 bytes @ 0x50
  5020                           
  5021  00F0                     ??___ftsub:	
  5022                           ; 1 bytes @ 0x50
  5023                           
  5024                           
  5025                           	psect	cstackCOMMON
  5026  0070                     __pcstackCOMMON:	
  5027                           ; 1 bytes @ 0x50
  5028                           
  5029  0070                     ?_calcSinArray:	
  5030  0070                     ?_ConfigureOscillator:	
  5031                           ; 1 bytes @ 0x0
  5032                           
  5033  0070                     ?_InitApp:	
  5034                           ; 1 bytes @ 0x0
  5035                           
  5036  0070                     ?_InitializeTaps:	
  5037                           ; 1 bytes @ 0x0
  5038                           
  5039  0070                     ?_initSwitchBypass:	
  5040                           ; 1 bytes @ 0x0
  5041                           
  5042  0070                     ?_ReadSavedSettings:	
  5043                           ; 1 bytes @ 0x0
  5044                           
  5045  0070                     ?_updateModulationArray:	
  5046                           ; 1 bytes @ 0x0
  5047                           
  5048  0070                     ?_updateSwitchBypass:	
  5049                           ; 1 bytes @ 0x0
  5050                           
  5051  0070                     ?_updateSwitchTap:	
  5052                           ; 1 bytes @ 0x0
  5053                           
  5054  0070                     ?_getModulationDelayTime:	
  5055                           ; 1 bytes @ 0x0
  5056                           
  5057  0070                     ?_init_adc:	
  5058                           ; 1 bytes @ 0x0
  5059                           
  5060  0070                     ?_init_pwm:	
  5061                           ; 1 bytes @ 0x0
  5062                           
  5063  0070                     ?_init_timer2:	
  5064                           ; 1 bytes @ 0x0
  5065                           
  5066  0070                     ?_init_timer0:	
  5067                           ; 1 bytes @ 0x0
  5068                           
  5069  0070                     ?_solidring_tactiles:	
  5070                           ; 1 bytes @ 0x0
  5071                           
  5072  0070                     ?_ring_tactiles:	
  5073                           ; 1 bytes @ 0x0
  5074                           
  5075  0070                     ?_resetRingLEDs:	
  5076                           ; 1 bytes @ 0x0
  5077                           
  5078  0070                     ?_setPedalMode:	
  5079                           ; 1 bytes @ 0x0
  5080                           
  5081  0070                     ?_setPresetDisplay:	
  5082                           ; 1 bytes @ 0x0
  5083                           
  5084  0070                     ?_setExpressionDisplay:	
  5085                           ; 1 bytes @ 0x0
  5086                           
  5087  0070                     ?_isr:	
  5088                           ; 1 bytes @ 0x0
  5089                           
  5090  0070                     ?_main:	
  5091                           ; 1 bytes @ 0x0
  5092                           
  5093  0070                     ?_showSave:	
  5094                           ; 1 bytes @ 0x0
  5095                           
  5096  0070                     ?i1_set_leds_top:	
  5097                           ; 1 bytes @ 0x0
  5098                           
  5099  0070                     ?i1_getModulationSubdivision:	
  5100                           ; 1 bytes @ 0x0
  5101                           
  5102  0070                     ?i1___awdiv:	
  5103                           ; 2 bytes @ 0x0
  5104                           
  5105  0070                     ?i1___lmul:	
  5106                           ; 2 bytes @ 0x0
  5107                           
  5108  0070                     i1set_leds_top@x:	
  5109                           ; 4 bytes @ 0x0
  5110                           
  5111  0070                     i1___awdiv@divisor:	
  5112                           ; 2 bytes @ 0x0
  5113                           
  5114  0070                     i1___lmul@multiplier:	
  5115                           ; 2 bytes @ 0x0
  5116                           
  5117                           
  5118                           ; 4 bytes @ 0x0
  5119  0070                     	ds	2
  5120  0072                     ??i1_getModulationSubdivision:	
  5121  0072                     i1set_leds_top@ledState:	
  5122                           ; 1 bytes @ 0x2
  5123                           
  5124  0072                     i1___awdiv@dividend:	
  5125                           ; 2 bytes @ 0x2
  5126                           
  5127                           
  5128                           ; 2 bytes @ 0x2
  5129  0072                     	ds	2
  5130  0074                     ??i1_set_leds_top:	
  5131  0074                     ??i1___awdiv:	
  5132                           ; 1 bytes @ 0x4
  5133                           
  5134  0074                     i1___lmul@multiplicand:	
  5135                           ; 1 bytes @ 0x4
  5136                           
  5137                           
  5138                           ; 4 bytes @ 0x4
  5139  0074                     	ds	1
  5140  0075                     i1___awdiv@counter:	
  5141                           
  5142                           ; 1 bytes @ 0x5
  5143  0075                     	ds	1
  5144  0076                     i1___awdiv@sign:	
  5145                           
  5146                           ; 1 bytes @ 0x6
  5147  0076                     	ds	1
  5148  0077                     i1___awdiv@quotient:	
  5149                           
  5150                           ; 2 bytes @ 0x7
  5151  0077                     	ds	1
  5152  0078                     ??i1___lmul:	
  5153  0078                     i1___lmul@product:	
  5154                           ; 1 bytes @ 0x8
  5155                           
  5156                           
  5157                           ; 4 bytes @ 0x8
  5158  0078                     	ds	4
  5159  007C                     ??i1___aldiv:	
  5160                           
  5161                           ; 1 bytes @ 0xC
  5162  007C                     	ds	1
  5163  007D                     isr@subDiv:	
  5164                           
  5165                           ; 1 bytes @ 0xD
  5166  007D                     	ds	1
  5167                           
  5168                           	psect	cstackBANK0
  5169  0020                     __pcstackBANK0:	
  5170  0020                     ?i1___aldiv:	
  5171  0020                     i1___aldiv@divisor:	
  5172                           ; 4 bytes @ 0x0
  5173                           
  5174                           
  5175                           ; 4 bytes @ 0x0
  5176  0020                     	ds	4
  5177  0024                     i1___aldiv@dividend:	
  5178                           
  5179                           ; 4 bytes @ 0x4
  5180  0024                     	ds	4
  5181  0028                     i1___aldiv@counter:	
  5182                           
  5183                           ; 1 bytes @ 0x8
  5184  0028                     	ds	1
  5185  0029                     i1___aldiv@sign:	
  5186                           
  5187                           ; 1 bytes @ 0x9
  5188  0029                     	ds	1
  5189  002A                     i1___aldiv@quotient:	
  5190                           
  5191                           ; 4 bytes @ 0xA
  5192  002A                     	ds	4
  5193  002E                     ?_modulation:	
  5194  002E                     modulation@x:	
  5195                           ; 4 bytes @ 0xE
  5196                           
  5197                           
  5198                           ; 4 bytes @ 0xE
  5199  002E                     	ds	4
  5200  0032                     modulation@y:	
  5201                           
  5202                           ; 4 bytes @ 0x12
  5203  0032                     	ds	4
  5204  0036                     ??_modulation:	
  5205                           
  5206                           ; 1 bytes @ 0x16
  5207  0036                     	ds	4
  5208  003A                     ??_isr:	
  5209                           
  5210                           ; 1 bytes @ 0x1A
  5211  003A                     	ds	6
  5212                           
  5213                           	psect	maintext
  5214  0391                     __pmaintext:	
  5215 ;;
  5216 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5217 ;;
  5218 ;; *************** function _main *****************
  5219 ;; Defined at:
  5220 ;;		line 68 in file "main.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : B1F/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       9       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       5       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0      14       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5238 ;;Total ram usage:       14 bytes
  5239 ;; Hardware stack levels required when called:    9
  5240 ;; This function calls:
  5241 ;;		_ConfigureOscillator
  5242 ;;		_InitApp
  5243 ;;		_InitializeTaps
  5244 ;;		_ReadSavedSettings
  5245 ;;		_USARTInit
  5246 ;;		___awtoft
  5247 ;;		___fttol
  5248 ;;		_adc_convert
  5249 ;;		_calcSinArray
  5250 ;;		_getModulationDelayTime
  5251 ;;		_initSwitchBypass
  5252 ;;		_map
  5253 ;;		_scaleA100kPot
  5254 ;;		_scaleA10kPot
  5255 ;;		_scaleiA10kPot
  5256 ;;		_set_subdivision
  5257 ;;		_updateModulationArray
  5258 ;;		_updateSwitchBypass
  5259 ;;		_updateSwitchTap
  5260 ;; This function is called by:
  5261 ;;		Startup code after reset
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _main
  5267  0391                     _main:	
  5268                           
  5269                           ;main.c: 70: calcSinArray();
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5273  0391  3198  203C  3183   	fcall	_calcSinArray
  5274                           
  5275                           ;main.c: 82: USARTInit(31250);
  5276  0394  3012               	movlw	18
  5277  0395  0021               	movlb	1	; select bank1
  5278  0396  00A0               	movwf	USARTInit@baud_rate^(0+128)
  5279  0397  307A               	movlw	122
  5280  0398  00A1               	movwf	(USARTInit@baud_rate^(0+128)+1)
  5281  0399  31A4  248D  3183   	fcall	_USARTInit
  5282                           
  5283                           ;main.c: 83: ConfigureOscillator();
  5284  039C  31AF  2713  3183   	fcall	_ConfigureOscillator
  5285                           
  5286                           ;main.c: 84: InitApp();
  5287  039F  31A1  2166  3183   	fcall	_InitApp
  5288                           
  5289                           ;main.c: 86: PORTEbits.RE0 = 1;
  5290  03A2  0020               	movlb	0	; select bank0
  5291  03A3  1410               	bsf	16,0	;volatile
  5292                           
  5293                           ;main.c: 87: PORTEbits.RE1 = 1;
  5294  03A4  1490               	bsf	16,1	;volatile
  5295                           
  5296                           ;main.c: 88: PORTDbits.RD6 = 1;
  5297  03A5  170F               	bsf	15,6	;volatile
  5298                           
  5299                           ;main.c: 89: PORTDbits.RD5 = 1;
  5300  03A6  168F               	bsf	15,5	;volatile
  5301                           
  5302                           ;main.c: 90: PORTCbits.RC0 = 1;
  5303  03A7  140E               	bsf	14,0	;volatile
  5304                           
  5305                           ;main.c: 91: PORTDbits.RD7 = 1;
  5306  03A8  178F               	bsf	15,7	;volatile
  5307                           
  5308                           ;main.c: 93: InitializeTaps();
  5309  03A9  31A0  20BB  3183   	fcall	_InitializeTaps
  5310                           
  5311                           ;main.c: 94: initSwitchBypass();
  5312  03AC  31AF  274F  3183   	fcall	_initSwitchBypass
  5313                           
  5314                           ;main.c: 97: ReadSavedSettings();
  5315  03AF  31A7  278A  3183   	fcall	_ReadSavedSettings
  5316                           
  5317                           ;main.c: 98: updateModulationArray();
  5318  03B2  318D  25DD  3183   	fcall	_updateModulationArray
  5319  03B5                     l9080:	
  5320                           ;main.c: 99: while (1) {
  5321                           
  5322                           
  5323                           ;main.c: 106: updateSwitchBypass();
  5324  03B5  3192  222B  3183   	fcall	_updateSwitchBypass
  5325                           
  5326                           ;main.c: 107: if (presetSaveMode != 1) {
  5327  03B8  0020               	movlb	0	; select bank0
  5328  03B9  034E               	decf	_presetSaveMode,w
  5329  03BA  1903               	btfsc	3,2
  5330  03BB  2BBF               	goto	l9090
  5331                           
  5332                           ;main.c: 108: updateSwitchTap();
  5333  03BC  3189  21FD  3183   	fcall	_updateSwitchTap
  5334  03BF                     l9090:	
  5335                           
  5336                           ;main.c: 114: }
  5337                           ;main.c: 117: knob_1_pos = adc_convert(0);
  5338  03BF  3000               	movlw	0
  5339  03C0  31AF  276D  3183   	fcall	_adc_convert
  5340  03C3  0021               	movlb	1	; select bank1
  5341  03C4  0821               	movf	(?_adc_convert+1)^(0+128),w
  5342  03C5  0023               	movlb	3	; select bank3
  5343  03C6  00AD               	movwf	(_knob_1_pos+1)^(0+384)
  5344  03C7  0021               	movlb	1	; select bank1
  5345  03C8  0820               	movf	?_adc_convert^(0+128),w
  5346  03C9  0023               	movlb	3	; select bank3
  5347  03CA  00AC               	movwf	_knob_1_pos^(0+384)
  5348                           
  5349                           ;main.c: 118: knob_2_pos = adc_convert(1);
  5350  03CB  3001               	movlw	1
  5351  03CC  31AF  276D  3183   	fcall	_adc_convert
  5352  03CF  0021               	movlb	1	; select bank1
  5353  03D0  0821               	movf	(?_adc_convert+1)^(0+128),w
  5354  03D1  0023               	movlb	3	; select bank3
  5355  03D2  00AF               	movwf	(_knob_2_pos+1)^(0+384)
  5356  03D3  0021               	movlb	1	; select bank1
  5357  03D4  0820               	movf	?_adc_convert^(0+128),w
  5358  03D5  0023               	movlb	3	; select bank3
  5359  03D6  00AE               	movwf	_knob_2_pos^(0+384)
  5360                           
  5361                           ;main.c: 119: knob_3_pos = adc_convert(2);
  5362  03D7  3002               	movlw	2
  5363  03D8  31AF  276D  3183   	fcall	_adc_convert
  5364  03DB  0021               	movlb	1	; select bank1
  5365  03DC  0821               	movf	(?_adc_convert+1)^(0+128),w
  5366  03DD  0023               	movlb	3	; select bank3
  5367  03DE  00B1               	movwf	(_knob_3_pos+1)^(0+384)
  5368  03DF  0021               	movlb	1	; select bank1
  5369  03E0  0820               	movf	?_adc_convert^(0+128),w
  5370  03E1  0023               	movlb	3	; select bank3
  5371  03E2  00B0               	movwf	_knob_3_pos^(0+384)
  5372                           
  5373                           ;main.c: 120: knob_4_pos = adc_convert(3);
  5374  03E3  3003               	movlw	3
  5375  03E4  31AF  276D  3183   	fcall	_adc_convert
  5376  03E7  0021               	movlb	1	; select bank1
  5377  03E8  0821               	movf	(?_adc_convert+1)^(0+128),w
  5378  03E9  0023               	movlb	3	; select bank3
  5379  03EA  00B3               	movwf	(_knob_4_pos+1)^(0+384)
  5380  03EB  0021               	movlb	1	; select bank1
  5381  03EC  0820               	movf	?_adc_convert^(0+128),w
  5382  03ED  0023               	movlb	3	; select bank3
  5383  03EE  00B2               	movwf	_knob_4_pos^(0+384)
  5384                           
  5385                           ;main.c: 121: knob_5_pos = adc_convert(4);
  5386  03EF  3004               	movlw	4
  5387  03F0  31AF  276D  3183   	fcall	_adc_convert
  5388  03F3  0021               	movlb	1	; select bank1
  5389  03F4  0821               	movf	(?_adc_convert+1)^(0+128),w
  5390  03F5  0023               	movlb	3	; select bank3
  5391  03F6  00B5               	movwf	(_knob_5_pos+1)^(0+384)
  5392  03F7  0021               	movlb	1	; select bank1
  5393  03F8  0820               	movf	?_adc_convert^(0+128),w
  5394  03F9  0023               	movlb	3	; select bank3
  5395  03FA  00B4               	movwf	_knob_5_pos^(0+384)
  5396                           
  5397                           ;main.c: 125: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5398  03FB  094E               	comf	_knob1_prev^(0+384),w	;volatile
  5399  03FC  0024               	movlb	4	; select bank4
  5400  03FD  00D5               	movwf	??_main^(0+512)
  5401  03FE  0023               	movlb	3	; select bank3
  5402  03FF  094F               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5403  0400  0024               	movlb	4	; select bank4
  5404  0401  00D6               	movwf	(??_main^(0+512)+1)
  5405  0402  0AD5               	incf	??_main^(0+512),f
  5406  0403  1903               	skipnz
  5407  0404  0AD6               	incf	(??_main^(0+512)+1),f
  5408  0405  0023               	movlb	3	; select bank3
  5409  0406  082C               	movf	_knob_1_pos^(0+384),w
  5410  0407  0024               	movlb	4	; select bank4
  5411  0408  0755               	addwf	??_main^(0+512),w
  5412  0409  00D7               	movwf	(??_main+2)^(0+512)
  5413  040A  0023               	movlb	3	; select bank3
  5414  040B  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5415  040C  0024               	movlb	4	; select bank4
  5416  040D  3D56               	addwfc	(??_main+1)^(0+512),w
  5417  040E  00D8               	movwf	(??_main+3)^(0+512)
  5418  040F  0858               	movf	(??_main+3)^(0+512),w
  5419  0410  3A80               	xorlw	128
  5420  0411  00D9               	movwf	(??_main+4)^(0+512)
  5421  0412  3080               	movlw	128
  5422  0413  0259               	subwf	(??_main+4)^(0+512),w
  5423  0414  1D03               	skipz
  5424  0415  2C18               	goto	u9855
  5425  0416  3004               	movlw	4
  5426  0417  0257               	subwf	(??_main+2)^(0+512),w
  5427  0418                     u9855:	
  5428  0418  1803               	skipnc
  5429  0419  2C3A               	goto	l9096
  5430  041A  0023               	movlb	3	; select bank3
  5431  041B  094E               	comf	_knob1_prev^(0+384),w	;volatile
  5432  041C  0024               	movlb	4	; select bank4
  5433  041D  00D5               	movwf	??_main^(0+512)
  5434  041E  0023               	movlb	3	; select bank3
  5435  041F  094F               	comf	(_knob1_prev+1)^(0+384),w	;volatile
  5436  0420  0024               	movlb	4	; select bank4
  5437  0421  00D6               	movwf	(??_main^(0+512)+1)
  5438  0422  0AD5               	incf	??_main^(0+512),f
  5439  0423  1903               	skipnz
  5440  0424  0AD6               	incf	(??_main^(0+512)+1),f
  5441  0425  0023               	movlb	3	; select bank3
  5442  0426  082C               	movf	_knob_1_pos^(0+384),w
  5443  0427  0024               	movlb	4	; select bank4
  5444  0428  0755               	addwf	??_main^(0+512),w
  5445  0429  00D7               	movwf	(??_main+2)^(0+512)
  5446  042A  0023               	movlb	3	; select bank3
  5447  042B  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5448  042C  0024               	movlb	4	; select bank4
  5449  042D  3D56               	addwfc	(??_main+1)^(0+512),w
  5450  042E  00D8               	movwf	(??_main+3)^(0+512)
  5451  042F  0858               	movf	(??_main+3)^(0+512),w
  5452  0430  3A80               	xorlw	128
  5453  0431  00D9               	movwf	(??_main+4)^(0+512)
  5454  0432  307F               	movlw	127
  5455  0433  0259               	subwf	(??_main+4)^(0+512),w
  5456  0434  1D03               	skipz
  5457  0435  2C38               	goto	u9865
  5458  0436  30FD               	movlw	253
  5459  0437  0257               	subwf	(??_main+2)^(0+512),w
  5460  0438                     u9865:	
  5461  0438  1803               	skipnc
  5462  0439  2C98               	goto	l9106
  5463  043A                     l9096:	
  5464                           
  5465                           ;main.c: 126: knob1_prev = knob_1_pos;
  5466  043A  0023               	movlb	3	; select bank3
  5467  043B  082D               	movf	(_knob_1_pos+1)^(0+384),w
  5468  043C  00CF               	movwf	(_knob1_prev+1)^(0+384)	;volatile
  5469  043D  082C               	movf	_knob_1_pos^(0+384),w
  5470  043E  00CE               	movwf	_knob1_prev^(0+384)	;volatile
  5471                           
  5472                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5473  043F  084F               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5474  0440  0021               	movlb	1	; select bank1
  5475  0441  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5476  0442  0023               	movlb	3	; select bank3
  5477  0443  084E               	movf	_knob1_prev^(0+384),w	;volatile
  5478  0444  0021               	movlb	1	; select bank1
  5479  0445  00A8               	movwf	___awtoft@c^(0+128)
  5480  0446  31A0  2076  3183   	fcall	___awtoft
  5481  0449  0021               	movlb	1	; select bank1
  5482  044A  0828               	movf	?___awtoft^(0+128),w
  5483  044B  0024               	movlb	4	; select bank4
  5484  044C  00DA               	movwf	_main$2829^(0+512)
  5485  044D  0021               	movlb	1	; select bank1
  5486  044E  0829               	movf	(?___awtoft+1)^(0+128),w
  5487  044F  0024               	movlb	4	; select bank4
  5488  0450  00DB               	movwf	(_main$2829+1)^(0+512)
  5489  0451  0021               	movlb	1	; select bank1
  5490  0452  082A               	movf	(?___awtoft+2)^(0+128),w
  5491  0453  0024               	movlb	4	; select bank4
  5492  0454  00DC               	movwf	(_main$2829+2)^(0+512)
  5493                           
  5494                           ;main.c: 127: CCPR4 = scaleA10kPot(knob1_prev);
  5495  0455  085A               	movf	_main$2829^(0+512),w
  5496  0456  0022               	movlb	2	; select bank2
  5497  0457  00E7               	movwf	scaleA10kPot@input^(0+256)
  5498  0458  0024               	movlb	4	; select bank4
  5499  0459  085B               	movf	(_main$2829+1)^(0+512),w
  5500  045A  0022               	movlb	2	; select bank2
  5501  045B  00E8               	movwf	(scaleA10kPot@input+1)^(0+256)
  5502  045C  0024               	movlb	4	; select bank4
  5503  045D  085C               	movf	(_main$2829+2)^(0+512),w
  5504  045E  0022               	movlb	2	; select bank2
  5505  045F  00E9               	movwf	(scaleA10kPot@input+2)^(0+256)
  5506  0460  319B  23E3  3183   	fcall	_scaleA10kPot
  5507  0463  0022               	movlb	2	; select bank2
  5508  0464  0868               	movf	(?_scaleA10kPot+1)^(0+256),w
  5509  0465  0026               	movlb	6	; select bank6
  5510  0466  0099               	movwf	25	;volatile
  5511  0467  0022               	movlb	2	; select bank2
  5512  0468  0867               	movf	?_scaleA10kPot^(0+256),w
  5513  0469  0026               	movlb	6	; select bank6
  5514  046A  0098               	movwf	24	;volatile
  5515                           
  5516                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5517  046B  0023               	movlb	3	; select bank3
  5518  046C  084F               	movf	(_knob1_prev+1)^(0+384),w	;volatile
  5519  046D  0021               	movlb	1	; select bank1
  5520  046E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5521  046F  0023               	movlb	3	; select bank3
  5522  0470  084E               	movf	_knob1_prev^(0+384),w	;volatile
  5523  0471  0021               	movlb	1	; select bank1
  5524  0472  00A8               	movwf	___awtoft@c^(0+128)
  5525  0473  31A0  2076  3183   	fcall	___awtoft
  5526  0476  0021               	movlb	1	; select bank1
  5527  0477  0828               	movf	?___awtoft^(0+128),w
  5528  0478  0024               	movlb	4	; select bank4
  5529  0479  00DD               	movwf	_main$2830^(0+512)
  5530  047A  0021               	movlb	1	; select bank1
  5531  047B  0829               	movf	(?___awtoft+1)^(0+128),w
  5532  047C  0024               	movlb	4	; select bank4
  5533  047D  00DE               	movwf	(_main$2830+1)^(0+512)
  5534  047E  0021               	movlb	1	; select bank1
  5535  047F  082A               	movf	(?___awtoft+2)^(0+128),w
  5536  0480  0024               	movlb	4	; select bank4
  5537  0481  00DF               	movwf	(_main$2830+2)^(0+512)
  5538                           
  5539                           ;main.c: 128: CCPR5 = scaleiA10kPot(knob1_prev);
  5540  0482  085D               	movf	_main$2830^(0+512),w
  5541  0483  0022               	movlb	2	; select bank2
  5542  0484  00E7               	movwf	scaleiA10kPot@input^(0+256)
  5543  0485  0024               	movlb	4	; select bank4
  5544  0486  085E               	movf	(_main$2830+1)^(0+512),w
  5545  0487  0022               	movlb	2	; select bank2
  5546  0488  00E8               	movwf	(scaleiA10kPot@input+1)^(0+256)
  5547  0489  0024               	movlb	4	; select bank4
  5548  048A  085F               	movf	(_main$2830+2)^(0+512),w
  5549  048B  0022               	movlb	2	; select bank2
  5550  048C  00E9               	movwf	(scaleiA10kPot@input+2)^(0+256)
  5551  048D  319D  251D  3183   	fcall	_scaleiA10kPot
  5552  0490  0022               	movlb	2	; select bank2
  5553  0491  0868               	movf	(?_scaleiA10kPot+1)^(0+256),w
  5554  0492  0026               	movlb	6	; select bank6
  5555  0493  009D               	movwf	29	;volatile
  5556  0494  0022               	movlb	2	; select bank2
  5557  0495  0867               	movf	?_scaleiA10kPot^(0+256),w
  5558  0496  0026               	movlb	6	; select bank6
  5559  0497  009C               	movwf	28	;volatile
  5560  0498                     l9106:	
  5561                           
  5562                           ;main.c: 130: }
  5563                           ;main.c: 134: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5564  0498  0023               	movlb	3	; select bank3
  5565  0499  0950               	comf	_knob2_prev^(0+384),w	;volatile
  5566  049A  0024               	movlb	4	; select bank4
  5567  049B  00D5               	movwf	??_main^(0+512)
  5568  049C  0023               	movlb	3	; select bank3
  5569  049D  0951               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5570  049E  0024               	movlb	4	; select bank4
  5571  049F  00D6               	movwf	(??_main^(0+512)+1)
  5572  04A0  0AD5               	incf	??_main^(0+512),f
  5573  04A1  1903               	skipnz
  5574  04A2  0AD6               	incf	(??_main^(0+512)+1),f
  5575  04A3  0023               	movlb	3	; select bank3
  5576  04A4  082E               	movf	_knob_2_pos^(0+384),w
  5577  04A5  0024               	movlb	4	; select bank4
  5578  04A6  0755               	addwf	??_main^(0+512),w
  5579  04A7  00D7               	movwf	(??_main+2)^(0+512)
  5580  04A8  0023               	movlb	3	; select bank3
  5581  04A9  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5582  04AA  0024               	movlb	4	; select bank4
  5583  04AB  3D56               	addwfc	(??_main+1)^(0+512),w
  5584  04AC  00D8               	movwf	(??_main+3)^(0+512)
  5585  04AD  0858               	movf	(??_main+3)^(0+512),w
  5586  04AE  3A80               	xorlw	128
  5587  04AF  00D9               	movwf	(??_main+4)^(0+512)
  5588  04B0  3080               	movlw	128
  5589  04B1  0259               	subwf	(??_main+4)^(0+512),w
  5590  04B2  1D03               	skipz
  5591  04B3  2CB6               	goto	u9875
  5592  04B4  3004               	movlw	4
  5593  04B5  0257               	subwf	(??_main+2)^(0+512),w
  5594  04B6                     u9875:	
  5595  04B6  1803               	skipnc
  5596  04B7  2CD8               	goto	l9110
  5597  04B8  0023               	movlb	3	; select bank3
  5598  04B9  0950               	comf	_knob2_prev^(0+384),w	;volatile
  5599  04BA  0024               	movlb	4	; select bank4
  5600  04BB  00D5               	movwf	??_main^(0+512)
  5601  04BC  0023               	movlb	3	; select bank3
  5602  04BD  0951               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5603  04BE  0024               	movlb	4	; select bank4
  5604  04BF  00D6               	movwf	(??_main^(0+512)+1)
  5605  04C0  0AD5               	incf	??_main^(0+512),f
  5606  04C1  1903               	skipnz
  5607  04C2  0AD6               	incf	(??_main^(0+512)+1),f
  5608  04C3  0023               	movlb	3	; select bank3
  5609  04C4  082E               	movf	_knob_2_pos^(0+384),w
  5610  04C5  0024               	movlb	4	; select bank4
  5611  04C6  0755               	addwf	??_main^(0+512),w
  5612  04C7  00D7               	movwf	(??_main+2)^(0+512)
  5613  04C8  0023               	movlb	3	; select bank3
  5614  04C9  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5615  04CA  0024               	movlb	4	; select bank4
  5616  04CB  3D56               	addwfc	(??_main+1)^(0+512),w
  5617  04CC  00D8               	movwf	(??_main+3)^(0+512)
  5618  04CD  0858               	movf	(??_main+3)^(0+512),w
  5619  04CE  3A80               	xorlw	128
  5620  04CF  00D9               	movwf	(??_main+4)^(0+512)
  5621  04D0  307F               	movlw	127
  5622  04D1  0259               	subwf	(??_main+4)^(0+512),w
  5623  04D2  1D03               	skipz
  5624  04D3  2CD6               	goto	u9885
  5625  04D4  30FD               	movlw	253
  5626  04D5  0257               	subwf	(??_main+2)^(0+512),w
  5627  04D6                     u9885:	
  5628  04D6  1803               	skipnc
  5629  04D7  2D4E               	goto	l9120
  5630  04D8                     l9110:	
  5631                           
  5632                           ;main.c: 135: knob2_prev = knob_2_pos;
  5633  04D8  0023               	movlb	3	; select bank3
  5634  04D9  082F               	movf	(_knob_2_pos+1)^(0+384),w
  5635  04DA  00D1               	movwf	(_knob2_prev+1)^(0+384)	;volatile
  5636  04DB  082E               	movf	_knob_2_pos^(0+384),w
  5637  04DC  00D0               	movwf	_knob2_prev^(0+384)	;volatile
  5638                           
  5639                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5640  04DD  0950               	comf	_knob2_prev^(0+384),w	;volatile
  5641  04DE  0024               	movlb	4	; select bank4
  5642  04DF  00D5               	movwf	??_main^(0+512)
  5643  04E0  0023               	movlb	3	; select bank3
  5644  04E1  0951               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5645  04E2  0024               	movlb	4	; select bank4
  5646  04E3  00D6               	movwf	(??_main^(0+512)+1)
  5647  04E4  0AD5               	incf	??_main^(0+512),f
  5648  04E5  1903               	skipnz
  5649  04E6  0AD6               	incf	(??_main^(0+512)+1),f
  5650  04E7  0855               	movf	??_main^(0+512),w
  5651  04E8  3EFF               	addlw	255
  5652  04E9  0021               	movlb	1	; select bank1
  5653  04EA  00A8               	movwf	___awtoft@c^(0+128)
  5654  04EB  3003               	movlw	3
  5655  04EC  0024               	movlb	4	; select bank4
  5656  04ED  3D56               	addwfc	(??_main+1)^(0+512),w
  5657  04EE  0021               	movlb	1	; select bank1
  5658  04EF  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5659  04F0  31A0  2076  3183   	fcall	___awtoft
  5660  04F3  0021               	movlb	1	; select bank1
  5661  04F4  0828               	movf	?___awtoft^(0+128),w
  5662  04F5  0024               	movlb	4	; select bank4
  5663  04F6  00E0               	movwf	_main$2831^(0+512)
  5664  04F7  0021               	movlb	1	; select bank1
  5665  04F8  0829               	movf	(?___awtoft+1)^(0+128),w
  5666  04F9  0024               	movlb	4	; select bank4
  5667  04FA  00E1               	movwf	(_main$2831+1)^(0+512)
  5668  04FB  0021               	movlb	1	; select bank1
  5669  04FC  082A               	movf	(?___awtoft+2)^(0+128),w
  5670  04FD  0024               	movlb	4	; select bank4
  5671  04FE  00E2               	movwf	(_main$2831+2)^(0+512)
  5672                           
  5673                           ;main.c: 136: CCPR1 = scaleA100kPot(1023-knob2_prev);
  5674  04FF  0860               	movf	_main$2831^(0+512),w
  5675  0500  0022               	movlb	2	; select bank2
  5676  0501  00E7               	movwf	scaleA100kPot@input^(0+256)
  5677  0502  0024               	movlb	4	; select bank4
  5678  0503  0861               	movf	(_main$2831+1)^(0+512),w
  5679  0504  0022               	movlb	2	; select bank2
  5680  0505  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5681  0506  0024               	movlb	4	; select bank4
  5682  0507  0862               	movf	(_main$2831+2)^(0+512),w
  5683  0508  0022               	movlb	2	; select bank2
  5684  0509  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5685  050A  3199  21C1  3183   	fcall	_scaleA100kPot
  5686  050D  0022               	movlb	2	; select bank2
  5687  050E  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5688  050F  0025               	movlb	5	; select bank5
  5689  0510  0092               	movwf	18	;volatile
  5690  0511  0022               	movlb	2	; select bank2
  5691  0512  0867               	movf	?_scaleA100kPot^(0+256),w
  5692  0513  0025               	movlb	5	; select bank5
  5693  0514  0091               	movwf	17	;volatile
  5694                           
  5695                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5696  0515  0023               	movlb	3	; select bank3
  5697  0516  0950               	comf	_knob2_prev^(0+384),w	;volatile
  5698  0517  0024               	movlb	4	; select bank4
  5699  0518  00D5               	movwf	??_main^(0+512)
  5700  0519  0023               	movlb	3	; select bank3
  5701  051A  0951               	comf	(_knob2_prev+1)^(0+384),w	;volatile
  5702  051B  0024               	movlb	4	; select bank4
  5703  051C  00D6               	movwf	(??_main^(0+512)+1)
  5704  051D  0AD5               	incf	??_main^(0+512),f
  5705  051E  1903               	skipnz
  5706  051F  0AD6               	incf	(??_main^(0+512)+1),f
  5707  0520  0855               	movf	??_main^(0+512),w
  5708  0521  3EFF               	addlw	255
  5709  0522  0021               	movlb	1	; select bank1
  5710  0523  00A8               	movwf	___awtoft@c^(0+128)
  5711  0524  3003               	movlw	3
  5712  0525  0024               	movlb	4	; select bank4
  5713  0526  3D56               	addwfc	(??_main+1)^(0+512),w
  5714  0527  0021               	movlb	1	; select bank1
  5715  0528  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5716  0529  31A0  2076  3183   	fcall	___awtoft
  5717  052C  0021               	movlb	1	; select bank1
  5718  052D  0828               	movf	?___awtoft^(0+128),w
  5719  052E  0024               	movlb	4	; select bank4
  5720  052F  00E0               	movwf	_main$2831^(0+512)
  5721  0530  0021               	movlb	1	; select bank1
  5722  0531  0829               	movf	(?___awtoft+1)^(0+128),w
  5723  0532  0024               	movlb	4	; select bank4
  5724  0533  00E1               	movwf	(_main$2831+1)^(0+512)
  5725  0534  0021               	movlb	1	; select bank1
  5726  0535  082A               	movf	(?___awtoft+2)^(0+128),w
  5727  0536  0024               	movlb	4	; select bank4
  5728  0537  00E2               	movwf	(_main$2831+2)^(0+512)
  5729                           
  5730                           ;main.c: 137: CCPR2 = scaleA100kPot(1023-knob2_prev);
  5731  0538  0860               	movf	_main$2831^(0+512),w
  5732  0539  0022               	movlb	2	; select bank2
  5733  053A  00E7               	movwf	scaleA100kPot@input^(0+256)
  5734  053B  0024               	movlb	4	; select bank4
  5735  053C  0861               	movf	(_main$2831+1)^(0+512),w
  5736  053D  0022               	movlb	2	; select bank2
  5737  053E  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
  5738  053F  0024               	movlb	4	; select bank4
  5739  0540  0862               	movf	(_main$2831+2)^(0+512),w
  5740  0541  0022               	movlb	2	; select bank2
  5741  0542  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
  5742  0543  3199  21C1  3183   	fcall	_scaleA100kPot
  5743  0546  0022               	movlb	2	; select bank2
  5744  0547  0868               	movf	(?_scaleA100kPot+1)^(0+256),w
  5745  0548  0025               	movlb	5	; select bank5
  5746  0549  0099               	movwf	25	;volatile
  5747  054A  0022               	movlb	2	; select bank2
  5748  054B  0867               	movf	?_scaleA100kPot^(0+256),w
  5749  054C  0025               	movlb	5	; select bank5
  5750  054D  0098               	movwf	24	;volatile
  5751  054E                     l9120:	
  5752                           
  5753                           ;main.c: 138: }
  5754                           ;main.c: 148: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5755  054E  0023               	movlb	3	; select bank3
  5756  054F  0952               	comf	_knob3_prev^(0+384),w	;volatile
  5757  0550  0024               	movlb	4	; select bank4
  5758  0551  00D5               	movwf	??_main^(0+512)
  5759  0552  0023               	movlb	3	; select bank3
  5760  0553  0953               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5761  0554  0024               	movlb	4	; select bank4
  5762  0555  00D6               	movwf	(??_main^(0+512)+1)
  5763  0556  0AD5               	incf	??_main^(0+512),f
  5764  0557  1903               	skipnz
  5765  0558  0AD6               	incf	(??_main^(0+512)+1),f
  5766  0559  0023               	movlb	3	; select bank3
  5767  055A  0830               	movf	_knob_3_pos^(0+384),w
  5768  055B  0024               	movlb	4	; select bank4
  5769  055C  0755               	addwf	??_main^(0+512),w
  5770  055D  00D7               	movwf	(??_main+2)^(0+512)
  5771  055E  0023               	movlb	3	; select bank3
  5772  055F  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5773  0560  0024               	movlb	4	; select bank4
  5774  0561  3D56               	addwfc	(??_main+1)^(0+512),w
  5775  0562  00D8               	movwf	(??_main+3)^(0+512)
  5776  0563  0858               	movf	(??_main+3)^(0+512),w
  5777  0564  3A80               	xorlw	128
  5778  0565  00D9               	movwf	(??_main+4)^(0+512)
  5779  0566  3080               	movlw	128
  5780  0567  0259               	subwf	(??_main+4)^(0+512),w
  5781  0568  1D03               	skipz
  5782  0569  2D6C               	goto	u9895
  5783  056A  3004               	movlw	4
  5784  056B  0257               	subwf	(??_main+2)^(0+512),w
  5785  056C                     u9895:	
  5786  056C  1803               	skipnc
  5787  056D  2D8E               	goto	l9124
  5788  056E  0023               	movlb	3	; select bank3
  5789  056F  0952               	comf	_knob3_prev^(0+384),w	;volatile
  5790  0570  0024               	movlb	4	; select bank4
  5791  0571  00D5               	movwf	??_main^(0+512)
  5792  0572  0023               	movlb	3	; select bank3
  5793  0573  0953               	comf	(_knob3_prev+1)^(0+384),w	;volatile
  5794  0574  0024               	movlb	4	; select bank4
  5795  0575  00D6               	movwf	(??_main^(0+512)+1)
  5796  0576  0AD5               	incf	??_main^(0+512),f
  5797  0577  1903               	skipnz
  5798  0578  0AD6               	incf	(??_main^(0+512)+1),f
  5799  0579  0023               	movlb	3	; select bank3
  5800  057A  0830               	movf	_knob_3_pos^(0+384),w
  5801  057B  0024               	movlb	4	; select bank4
  5802  057C  0755               	addwf	??_main^(0+512),w
  5803  057D  00D7               	movwf	(??_main+2)^(0+512)
  5804  057E  0023               	movlb	3	; select bank3
  5805  057F  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5806  0580  0024               	movlb	4	; select bank4
  5807  0581  3D56               	addwfc	(??_main+1)^(0+512),w
  5808  0582  00D8               	movwf	(??_main+3)^(0+512)
  5809  0583  0858               	movf	(??_main+3)^(0+512),w
  5810  0584  3A80               	xorlw	128
  5811  0585  00D9               	movwf	(??_main+4)^(0+512)
  5812  0586  307F               	movlw	127
  5813  0587  0259               	subwf	(??_main+4)^(0+512),w
  5814  0588  1D03               	skipz
  5815  0589  2D8C               	goto	u9905
  5816  058A  30FD               	movlw	253
  5817  058B  0257               	subwf	(??_main+2)^(0+512),w
  5818  058C                     u9905:	
  5819  058C  1803               	skipnc
  5820  058D  2DFA               	goto	l9136
  5821  058E                     l9124:	
  5822                           
  5823                           ;main.c: 149: knob3_prev = knob_3_pos;
  5824  058E  0023               	movlb	3	; select bank3
  5825  058F  0831               	movf	(_knob_3_pos+1)^(0+384),w
  5826  0590  00D3               	movwf	(_knob3_prev+1)^(0+384)	;volatile
  5827  0591  0830               	movf	_knob_3_pos^(0+384),w
  5828  0592  00D2               	movwf	_knob3_prev^(0+384)	;volatile
  5829                           
  5830                           ;main.c: 150: symmetry = (int) map(knob3_prev, 0, 1023, 45, 315);
  5831  0593  3080               	movlw	128
  5832  0594  0021               	movlb	1	; select bank1
  5833  0595  00EA               	movwf	map@out_max^(0+128)
  5834  0596  309D               	movlw	157
  5835  0597  00EB               	movwf	(map@out_max+1)^(0+128)
  5836  0598  3043               	movlw	67
  5837  0599  00EC               	movwf	(map@out_max+2)^(0+128)
  5838  059A  3000               	movlw	0
  5839  059B  00E7               	movwf	map@out_min^(0+128)
  5840  059C  3034               	movlw	52
  5841  059D  00E8               	movwf	(map@out_min+1)^(0+128)
  5842  059E  3042               	movlw	66
  5843  059F  00E9               	movwf	(map@out_min+2)^(0+128)
  5844  05A0  30C0               	movlw	192
  5845  05A1  00E4               	movwf	map@in_max^(0+128)
  5846  05A2  307F               	movlw	127
  5847  05A3  00E5               	movwf	(map@in_max+1)^(0+128)
  5848  05A4  3044               	movlw	68
  5849  05A5  00E6               	movwf	(map@in_max+2)^(0+128)
  5850  05A6  3000               	movlw	0
  5851  05A7  00E1               	movwf	map@in_min^(0+128)
  5852  05A8  3000               	movlw	0
  5853  05A9  00E2               	movwf	(map@in_min+1)^(0+128)
  5854  05AA  3000               	movlw	0
  5855  05AB  00E3               	movwf	(map@in_min+2)^(0+128)
  5856  05AC  0023               	movlb	3	; select bank3
  5857  05AD  0853               	movf	(_knob3_prev+1)^(0+384),w	;volatile
  5858  05AE  0021               	movlb	1	; select bank1
  5859  05AF  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5860  05B0  0023               	movlb	3	; select bank3
  5861  05B1  0852               	movf	_knob3_prev^(0+384),w	;volatile
  5862  05B2  0021               	movlb	1	; select bank1
  5863  05B3  00A8               	movwf	___awtoft@c^(0+128)
  5864  05B4  31A0  2076  3183   	fcall	___awtoft
  5865  05B7  0021               	movlb	1	; select bank1
  5866  05B8  0828               	movf	?___awtoft^(0+128),w
  5867  05B9  00DE               	movwf	map@x^(0+128)
  5868  05BA  0829               	movf	(?___awtoft+1)^(0+128),w
  5869  05BB  00DF               	movwf	(map@x+1)^(0+128)
  5870  05BC  082A               	movf	(?___awtoft+2)^(0+128),w
  5871  05BD  00E0               	movwf	(map@x+2)^(0+128)
  5872  05BE  319A  22CD  3183   	fcall	_map
  5873  05C1  0021               	movlb	1	; select bank1
  5874  05C2  085E               	movf	?_map^(0+128),w
  5875  05C3  0022               	movlb	2	; select bank2
  5876  05C4  00A0               	movwf	___fttol@f1^(0+256)
  5877  05C5  0021               	movlb	1	; select bank1
  5878  05C6  085F               	movf	(?_map+1)^(0+128),w
  5879  05C7  0022               	movlb	2	; select bank2
  5880  05C8  00A1               	movwf	(___fttol@f1+1)^(0+256)
  5881  05C9  0021               	movlb	1	; select bank1
  5882  05CA  0860               	movf	(?_map+2)^(0+128),w
  5883  05CB  0022               	movlb	2	; select bank2
  5884  05CC  00A2               	movwf	(___fttol@f1+2)^(0+256)
  5885  05CD  319A  2246  3183   	fcall	___fttol
  5886  05D0  0022               	movlb	2	; select bank2
  5887  05D1  0821               	movf	(?___fttol^(0+256)+1),w
  5888  05D2  0023               	movlb	3	; select bank3
  5889  05D3  00DD               	movwf	(_symmetry+1)^(0+384)
  5890  05D4  0022               	movlb	2	; select bank2
  5891  05D5  0820               	movf	?___fttol^(0+256),w
  5892  05D6  0023               	movlb	3	; select bank3
  5893  05D7  00DC               	movwf	_symmetry^(0+384)
  5894                           
  5895                           ;main.c: 152: modulation_changed = 1;
  5896  05D8  01C4               	clrf	_modulation_changed^(0+384)
  5897  05D9  0AC4               	incf	_modulation_changed^(0+384),f
  5898                           
  5899                           ;main.c: 153: if (symmetry > 174 && symmetry < 185) {
  5900  05DA  085D               	movf	(_symmetry+1)^(0+384),w
  5901  05DB  3A80               	xorlw	128
  5902  05DC  0024               	movlb	4	; select bank4
  5903  05DD  00D5               	movwf	??_main^(0+512)
  5904  05DE  3080               	movlw	128
  5905  05DF  0255               	subwf	??_main^(0+512),w
  5906  05E0  1D03               	skipz
  5907  05E1  2DE5               	goto	u9915
  5908  05E2  30AF               	movlw	175
  5909  05E3  0023               	movlb	3	; select bank3
  5910  05E4  025C               	subwf	_symmetry^(0+384),w
  5911  05E5                     u9915:	
  5912  05E5  1C03               	skipc
  5913  05E6  2DF8               	goto	l357
  5914  05E7  0023               	movlb	3	; select bank3
  5915  05E8  085D               	movf	(_symmetry+1)^(0+384),w
  5916  05E9  3A80               	xorlw	128
  5917  05EA  0024               	movlb	4	; select bank4
  5918  05EB  00D5               	movwf	??_main^(0+512)
  5919  05EC  3080               	movlw	128
  5920  05ED  0255               	subwf	??_main^(0+512),w
  5921  05EE  1D03               	skipz
  5922  05EF  2DF3               	goto	u9925
  5923  05F0  30B9               	movlw	185
  5924  05F1  0023               	movlb	3	; select bank3
  5925  05F2  025C               	subwf	_symmetry^(0+384),w
  5926  05F3                     u9925:	
  5927  05F3  1803               	skipnc
  5928  05F4  2DF8               	goto	l357
  5929                           
  5930                           ;main.c: 154: LATBbits.LATB1 = 1;
  5931  05F5  0022               	movlb	2	; select bank2
  5932  05F6  148D               	bsf	13,1	;volatile
  5933                           
  5934                           ;main.c: 155: } else {
  5935  05F7  2DFA               	goto	l9136
  5936  05F8                     l357:	
  5937                           
  5938                           ;main.c: 156: LATBbits.LATB1 = 0;
  5939  05F8  0022               	movlb	2	; select bank2
  5940  05F9  108D               	bcf	13,1	;volatile
  5941  05FA                     l9136:	
  5942                           
  5943                           ;main.c: 157: }
  5944                           ;main.c: 158: }
  5945                           ;main.c: 167: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5946  05FA  0023               	movlb	3	; select bank3
  5947  05FB  0954               	comf	_knob4_prev^(0+384),w	;volatile
  5948  05FC  0024               	movlb	4	; select bank4
  5949  05FD  00D5               	movwf	??_main^(0+512)
  5950  05FE  0023               	movlb	3	; select bank3
  5951  05FF  0955               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5952  0600  0024               	movlb	4	; select bank4
  5953  0601  00D6               	movwf	(??_main^(0+512)+1)
  5954  0602  0AD5               	incf	??_main^(0+512),f
  5955  0603  1903               	skipnz
  5956  0604  0AD6               	incf	(??_main^(0+512)+1),f
  5957  0605  0023               	movlb	3	; select bank3
  5958  0606  0832               	movf	_knob_4_pos^(0+384),w
  5959  0607  0024               	movlb	4	; select bank4
  5960  0608  0755               	addwf	??_main^(0+512),w
  5961  0609  00D7               	movwf	(??_main+2)^(0+512)
  5962  060A  0023               	movlb	3	; select bank3
  5963  060B  0833               	movf	(_knob_4_pos+1)^(0+384),w
  5964  060C  0024               	movlb	4	; select bank4
  5965  060D  3D56               	addwfc	(??_main+1)^(0+512),w
  5966  060E  00D8               	movwf	(??_main+3)^(0+512)
  5967  060F  0858               	movf	(??_main+3)^(0+512),w
  5968  0610  3A80               	xorlw	128
  5969  0611  00D9               	movwf	(??_main+4)^(0+512)
  5970  0612  3080               	movlw	128
  5971  0613  0259               	subwf	(??_main+4)^(0+512),w
  5972  0614  1D03               	skipz
  5973  0615  2E18               	goto	u9935
  5974  0616  3004               	movlw	4
  5975  0617  0257               	subwf	(??_main+2)^(0+512),w
  5976  0618                     u9935:	
  5977  0618  1803               	skipnc
  5978  0619  2E3A               	goto	l9140
  5979  061A  0023               	movlb	3	; select bank3
  5980  061B  0954               	comf	_knob4_prev^(0+384),w	;volatile
  5981  061C  0024               	movlb	4	; select bank4
  5982  061D  00D5               	movwf	??_main^(0+512)
  5983  061E  0023               	movlb	3	; select bank3
  5984  061F  0955               	comf	(_knob4_prev+1)^(0+384),w	;volatile
  5985  0620  0024               	movlb	4	; select bank4
  5986  0621  00D6               	movwf	(??_main^(0+512)+1)
  5987  0622  0AD5               	incf	??_main^(0+512),f
  5988  0623  1903               	skipnz
  5989  0624  0AD6               	incf	(??_main^(0+512)+1),f
  5990  0625  0023               	movlb	3	; select bank3
  5991  0626  0832               	movf	_knob_4_pos^(0+384),w
  5992  0627  0024               	movlb	4	; select bank4
  5993  0628  0755               	addwf	??_main^(0+512),w
  5994  0629  00D7               	movwf	(??_main+2)^(0+512)
  5995  062A  0023               	movlb	3	; select bank3
  5996  062B  0833               	movf	(_knob_4_pos+1)^(0+384),w
  5997  062C  0024               	movlb	4	; select bank4
  5998  062D  3D56               	addwfc	(??_main+1)^(0+512),w
  5999  062E  00D8               	movwf	(??_main+3)^(0+512)
  6000  062F  0858               	movf	(??_main+3)^(0+512),w
  6001  0630  3A80               	xorlw	128
  6002  0631  00D9               	movwf	(??_main+4)^(0+512)
  6003  0632  307F               	movlw	127
  6004  0633  0259               	subwf	(??_main+4)^(0+512),w
  6005  0634  1D03               	skipz
  6006  0635  2E38               	goto	u9945
  6007  0636  30FD               	movlw	253
  6008  0637  0257               	subwf	(??_main+2)^(0+512),w
  6009  0638                     u9945:	
  6010  0638  1803               	skipnc
  6011  0639  2E8B               	goto	l9146
  6012  063A                     l9140:	
  6013                           
  6014                           ;main.c: 168: knob4_prev = knob_4_pos;
  6015  063A  0023               	movlb	3	; select bank3
  6016  063B  0833               	movf	(_knob_4_pos+1)^(0+384),w
  6017  063C  00D5               	movwf	(_knob4_prev+1)^(0+384)	;volatile
  6018  063D  0832               	movf	_knob_4_pos^(0+384),w
  6019  063E  00D4               	movwf	_knob4_prev^(0+384)	;volatile
  6020                           
  6021                           ;main.c: 169: baseline_mod_time = (int)map(knob4_prev, 0, 1023, 180, 2820);
  6022  063F  3040               	movlw	64
  6023  0640  0021               	movlb	1	; select bank1
  6024  0641  00EA               	movwf	map@out_max^(0+128)
  6025  0642  3030               	movlw	48
  6026  0643  00EB               	movwf	(map@out_max+1)^(0+128)
  6027  0644  3045               	movlw	69
  6028  0645  00EC               	movwf	(map@out_max+2)^(0+128)
  6029  0646  3000               	movlw	0
  6030  0647  00E7               	movwf	map@out_min^(0+128)
  6031  0648  3034               	movlw	52
  6032  0649  00E8               	movwf	(map@out_min+1)^(0+128)
  6033  064A  3043               	movlw	67
  6034  064B  00E9               	movwf	(map@out_min+2)^(0+128)
  6035  064C  30C0               	movlw	192
  6036  064D  00E4               	movwf	map@in_max^(0+128)
  6037  064E  307F               	movlw	127
  6038  064F  00E5               	movwf	(map@in_max+1)^(0+128)
  6039  0650  3044               	movlw	68
  6040  0651  00E6               	movwf	(map@in_max+2)^(0+128)
  6041  0652  3000               	movlw	0
  6042  0653  00E1               	movwf	map@in_min^(0+128)
  6043  0654  3000               	movlw	0
  6044  0655  00E2               	movwf	(map@in_min+1)^(0+128)
  6045  0656  3000               	movlw	0
  6046  0657  00E3               	movwf	(map@in_min+2)^(0+128)
  6047  0658  0023               	movlb	3	; select bank3
  6048  0659  0855               	movf	(_knob4_prev+1)^(0+384),w	;volatile
  6049  065A  0021               	movlb	1	; select bank1
  6050  065B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6051  065C  0023               	movlb	3	; select bank3
  6052  065D  0854               	movf	_knob4_prev^(0+384),w	;volatile
  6053  065E  0021               	movlb	1	; select bank1
  6054  065F  00A8               	movwf	___awtoft@c^(0+128)
  6055  0660  31A0  2076  3183   	fcall	___awtoft
  6056  0663  0021               	movlb	1	; select bank1
  6057  0664  0828               	movf	?___awtoft^(0+128),w
  6058  0665  00DE               	movwf	map@x^(0+128)
  6059  0666  0829               	movf	(?___awtoft+1)^(0+128),w
  6060  0667  00DF               	movwf	(map@x+1)^(0+128)
  6061  0668  082A               	movf	(?___awtoft+2)^(0+128),w
  6062  0669  00E0               	movwf	(map@x+2)^(0+128)
  6063  066A  319A  22CD  3183   	fcall	_map
  6064  066D  0021               	movlb	1	; select bank1
  6065  066E  085E               	movf	?_map^(0+128),w
  6066  066F  0022               	movlb	2	; select bank2
  6067  0670  00A0               	movwf	___fttol@f1^(0+256)
  6068  0671  0021               	movlb	1	; select bank1
  6069  0672  085F               	movf	(?_map+1)^(0+128),w
  6070  0673  0022               	movlb	2	; select bank2
  6071  0674  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6072  0675  0021               	movlb	1	; select bank1
  6073  0676  0860               	movf	(?_map+2)^(0+128),w
  6074  0677  0022               	movlb	2	; select bank2
  6075  0678  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6076  0679  319A  2246  3183   	fcall	___fttol
  6077  067C  0022               	movlb	2	; select bank2
  6078  067D  0820               	movf	?___fttol^(0+256),w
  6079  067E  0023               	movlb	3	; select bank3
  6080  067F  00C8               	movwf	_baseline_mod_time^(0+384)	;volatile
  6081  0680  0022               	movlb	2	; select bank2
  6082  0681  0821               	movf	(?___fttol^(0+256)+1),w
  6083  0682  0023               	movlb	3	; select bank3
  6084  0683  00C9               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6085  0684  0D89               	rlf	9,f
  6086  0685  3B89               	subwfb	9,f
  6087  0686  0989               	comf	9,f
  6088  0687  00CA               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6089  0688  00CB               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6090                           
  6091                           ;main.c: 170: mod_time_changed = 1;
  6092  0689  01E4               	clrf	_mod_time_changed^(0+384)
  6093  068A  0AE4               	incf	_mod_time_changed^(0+384),f
  6094  068B                     l9146:	
  6095                           
  6096                           ;main.c: 172: }
  6097                           ;main.c: 175: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6098  068B  0023               	movlb	3	; select bank3
  6099  068C  0956               	comf	_knob5_prev^(0+384),w	;volatile
  6100  068D  0024               	movlb	4	; select bank4
  6101  068E  00D5               	movwf	??_main^(0+512)
  6102  068F  0023               	movlb	3	; select bank3
  6103  0690  0957               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6104  0691  0024               	movlb	4	; select bank4
  6105  0692  00D6               	movwf	(??_main^(0+512)+1)
  6106  0693  0AD5               	incf	??_main^(0+512),f
  6107  0694  1903               	skipnz
  6108  0695  0AD6               	incf	(??_main^(0+512)+1),f
  6109  0696  0023               	movlb	3	; select bank3
  6110  0697  0834               	movf	_knob_5_pos^(0+384),w
  6111  0698  0024               	movlb	4	; select bank4
  6112  0699  0755               	addwf	??_main^(0+512),w
  6113  069A  00D7               	movwf	(??_main+2)^(0+512)
  6114  069B  0023               	movlb	3	; select bank3
  6115  069C  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6116  069D  0024               	movlb	4	; select bank4
  6117  069E  3D56               	addwfc	(??_main+1)^(0+512),w
  6118  069F  00D8               	movwf	(??_main+3)^(0+512)
  6119  06A0  0858               	movf	(??_main+3)^(0+512),w
  6120  06A1  3A80               	xorlw	128
  6121  06A2  00D9               	movwf	(??_main+4)^(0+512)
  6122  06A3  3080               	movlw	128
  6123  06A4  0259               	subwf	(??_main+4)^(0+512),w
  6124  06A5  1D03               	skipz
  6125  06A6  2EA9               	goto	u9955
  6126  06A7  3004               	movlw	4
  6127  06A8  0257               	subwf	(??_main+2)^(0+512),w
  6128  06A9                     u9955:	
  6129  06A9  1803               	skipnc
  6130  06AA  2ECB               	goto	l9150
  6131  06AB  0023               	movlb	3	; select bank3
  6132  06AC  0956               	comf	_knob5_prev^(0+384),w	;volatile
  6133  06AD  0024               	movlb	4	; select bank4
  6134  06AE  00D5               	movwf	??_main^(0+512)
  6135  06AF  0023               	movlb	3	; select bank3
  6136  06B0  0957               	comf	(_knob5_prev+1)^(0+384),w	;volatile
  6137  06B1  0024               	movlb	4	; select bank4
  6138  06B2  00D6               	movwf	(??_main^(0+512)+1)
  6139  06B3  0AD5               	incf	??_main^(0+512),f
  6140  06B4  1903               	skipnz
  6141  06B5  0AD6               	incf	(??_main^(0+512)+1),f
  6142  06B6  0023               	movlb	3	; select bank3
  6143  06B7  0834               	movf	_knob_5_pos^(0+384),w
  6144  06B8  0024               	movlb	4	; select bank4
  6145  06B9  0755               	addwf	??_main^(0+512),w
  6146  06BA  00D7               	movwf	(??_main+2)^(0+512)
  6147  06BB  0023               	movlb	3	; select bank3
  6148  06BC  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6149  06BD  0024               	movlb	4	; select bank4
  6150  06BE  3D56               	addwfc	(??_main+1)^(0+512),w
  6151  06BF  00D8               	movwf	(??_main+3)^(0+512)
  6152  06C0  0858               	movf	(??_main+3)^(0+512),w
  6153  06C1  3A80               	xorlw	128
  6154  06C2  00D9               	movwf	(??_main+4)^(0+512)
  6155  06C3  307F               	movlw	127
  6156  06C4  0259               	subwf	(??_main+4)^(0+512),w
  6157  06C5  1D03               	skipz
  6158  06C6  2EC9               	goto	u9965
  6159  06C7  30FD               	movlw	253
  6160  06C8  0257               	subwf	(??_main+2)^(0+512),w
  6161  06C9                     u9965:	
  6162  06C9  1803               	skipnc
  6163  06CA  2F15               	goto	l9154
  6164  06CB                     l9150:	
  6165                           
  6166                           ;main.c: 176: knob5_prev = knob_5_pos;
  6167  06CB  0023               	movlb	3	; select bank3
  6168  06CC  0835               	movf	(_knob_5_pos+1)^(0+384),w
  6169  06CD  00D7               	movwf	(_knob5_prev+1)^(0+384)	;volatile
  6170  06CE  0834               	movf	_knob_5_pos^(0+384),w
  6171  06CF  00D6               	movwf	_knob5_prev^(0+384)	;volatile
  6172                           
  6173                           ;main.c: 177: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6174  06D0  3000               	movlw	0
  6175  06D1  0021               	movlb	1	; select bank1
  6176  06D2  00EA               	movwf	map@out_max^(0+128)
  6177  06D3  3000               	movlw	0
  6178  06D4  00EB               	movwf	(map@out_max+1)^(0+128)
  6179  06D5  3000               	movlw	0
  6180  06D6  00EC               	movwf	(map@out_max+2)^(0+128)
  6181  06D7  3060               	movlw	96
  6182  06D8  00E7               	movwf	map@out_min^(0+128)
  6183  06D9  309F               	movlw	159
  6184  06DA  00E8               	movwf	(map@out_min+1)^(0+128)
  6185  06DB  3044               	movlw	68
  6186  06DC  00E9               	movwf	(map@out_min+2)^(0+128)
  6187  06DD  30C0               	movlw	192
  6188  06DE  00E4               	movwf	map@in_max^(0+128)
  6189  06DF  307F               	movlw	127
  6190  06E0  00E5               	movwf	(map@in_max+1)^(0+128)
  6191  06E1  3044               	movlw	68
  6192  06E2  00E6               	movwf	(map@in_max+2)^(0+128)
  6193  06E3  3000               	movlw	0
  6194  06E4  00E1               	movwf	map@in_min^(0+128)
  6195  06E5  3000               	movlw	0
  6196  06E6  00E2               	movwf	(map@in_min+1)^(0+128)
  6197  06E7  3000               	movlw	0
  6198  06E8  00E3               	movwf	(map@in_min+2)^(0+128)
  6199  06E9  0023               	movlb	3	; select bank3
  6200  06EA  0857               	movf	(_knob5_prev+1)^(0+384),w	;volatile
  6201  06EB  0021               	movlb	1	; select bank1
  6202  06EC  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6203  06ED  0023               	movlb	3	; select bank3
  6204  06EE  0856               	movf	_knob5_prev^(0+384),w	;volatile
  6205  06EF  0021               	movlb	1	; select bank1
  6206  06F0  00A8               	movwf	___awtoft@c^(0+128)
  6207  06F1  31A0  2076  3183   	fcall	___awtoft
  6208  06F4  0021               	movlb	1	; select bank1
  6209  06F5  0828               	movf	?___awtoft^(0+128),w
  6210  06F6  00DE               	movwf	map@x^(0+128)
  6211  06F7  0829               	movf	(?___awtoft+1)^(0+128),w
  6212  06F8  00DF               	movwf	(map@x+1)^(0+128)
  6213  06F9  082A               	movf	(?___awtoft+2)^(0+128),w
  6214  06FA  00E0               	movwf	(map@x+2)^(0+128)
  6215  06FB  319A  22CD  3183   	fcall	_map
  6216  06FE  0021               	movlb	1	; select bank1
  6217  06FF  085E               	movf	?_map^(0+128),w
  6218  0700  0022               	movlb	2	; select bank2
  6219  0701  00A0               	movwf	___fttol@f1^(0+256)
  6220  0702  0021               	movlb	1	; select bank1
  6221  0703  085F               	movf	(?_map+1)^(0+128),w
  6222  0704  0022               	movlb	2	; select bank2
  6223  0705  00A1               	movwf	(___fttol@f1+1)^(0+256)
  6224  0706  0021               	movlb	1	; select bank1
  6225  0707  0860               	movf	(?_map+2)^(0+128),w
  6226  0708  0022               	movlb	2	; select bank2
  6227  0709  00A2               	movwf	(___fttol@f1+2)^(0+256)
  6228  070A  319A  2246  3183   	fcall	___fttol
  6229  070D  0022               	movlb	2	; select bank2
  6230  070E  0821               	movf	(?___fttol^(0+256)+1),w
  6231  070F  0024               	movlb	4	; select bank4
  6232  0710  00C2               	movwf	(_adjusted_pot_value+1)^(0+512)
  6233  0711  0022               	movlb	2	; select bank2
  6234  0712  0820               	movf	?___fttol^(0+256),w
  6235  0713  0024               	movlb	4	; select bank4
  6236  0714  00C1               	movwf	_adjusted_pot_value^(0+512)
  6237  0715                     l9154:	
  6238                           
  6239                           ;main.c: 178: }
  6240                           ;main.c: 183: if (mod_time_changed == 1) {
  6241  0715  0023               	movlb	3	; select bank3
  6242  0716  0364               	decf	_mod_time_changed^(0+384),w
  6243  0717  1D03               	btfss	3,2
  6244  0718  2F57               	goto	l9166
  6245                           
  6246                           ;main.c: 184: baseline_mod_time = 2820;
  6247  0719  3000               	movlw	0
  6248  071A  00CB               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6249  071B  3000               	movlw	0
  6250  071C  00CA               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6251  071D  300B               	movlw	11
  6252  071E  00C9               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6253  071F  3004               	movlw	4
  6254  0720  00C8               	movwf	_baseline_mod_time^(0+384)	;volatile
  6255                           
  6256                           ;main.c: 185: delay_time = baseline_mod_time;
  6257  0721  084B               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
  6258  0722  0020               	movlb	0	; select bank0
  6259  0723  00D4               	movwf	_delay_time+3	;volatile
  6260  0724  0023               	movlb	3	; select bank3
  6261  0725  084A               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
  6262  0726  0020               	movlb	0	; select bank0
  6263  0727  00D3               	movwf	_delay_time+2	;volatile
  6264  0728  0023               	movlb	3	; select bank3
  6265  0729  0849               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6266  072A  0020               	movlb	0	; select bank0
  6267  072B  00D2               	movwf	_delay_time+1	;volatile
  6268  072C  0023               	movlb	3	; select bank3
  6269  072D  0848               	movf	_baseline_mod_time^(0+384),w	;volatile
  6270  072E  0020               	movlb	0	; select bank0
  6271  072F  00D1               	movwf	_delay_time	;volatile
  6272                           
  6273                           ;main.c: 186: delay_time = set_subdivision(baseline_mod_time, top_push_state);
  6274  0730  0023               	movlb	3	; select bank3
  6275  0731  0849               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
  6276  0732  0022               	movlb	2	; select bank2
  6277  0733  00AF               	movwf	(set_subdivision@x+1)^(0+256)
  6278  0734  0023               	movlb	3	; select bank3
  6279  0735  0848               	movf	_baseline_mod_time^(0+384),w	;volatile
  6280  0736  0022               	movlb	2	; select bank2
  6281  0737  00AE               	movwf	set_subdivision@x^(0+256)
  6282  0738  0020               	movlb	0	; select bank0
  6283  0739  085A               	movf	_top_push_state+1,w
  6284  073A  0022               	movlb	2	; select bank2
  6285  073B  00B1               	movwf	(set_subdivision@y+1)^(0+256)
  6286  073C  0020               	movlb	0	; select bank0
  6287  073D  0859               	movf	_top_push_state,w
  6288  073E  0022               	movlb	2	; select bank2
  6289  073F  00B0               	movwf	set_subdivision@y^(0+256)
  6290  0740  319B  2358  3183   	fcall	_set_subdivision
  6291  0743  0022               	movlb	2	; select bank2
  6292  0744  082E               	movf	?_set_subdivision^(0+256),w
  6293  0745  0020               	movlb	0	; select bank0
  6294  0746  00D1               	movwf	_delay_time	;volatile
  6295  0747  0022               	movlb	2	; select bank2
  6296  0748  082F               	movf	(?_set_subdivision+1)^(0+256),w
  6297  0749  0020               	movlb	0	; select bank0
  6298  074A  00D2               	movwf	_delay_time+1	;volatile
  6299  074B  0D89               	rlf	9,f
  6300  074C  3B89               	subwfb	9,f
  6301  074D  0989               	comf	9,f
  6302  074E  00D3               	movwf	_delay_time+2	;volatile
  6303  074F  00D4               	movwf	_delay_time+3	;volatile
  6304                           
  6305                           ;main.c: 187: getModulationDelayTime();
  6306  0750  31A6  260C  3183   	fcall	_getModulationDelayTime
  6307                           
  6308                           ;main.c: 188: modulation_changed = 1;
  6309  0753  0023               	movlb	3	; select bank3
  6310  0754  01C4               	clrf	_modulation_changed^(0+384)
  6311  0755  0AC4               	incf	_modulation_changed^(0+384),f
  6312                           
  6313                           ;main.c: 189: mod_time_changed = 0;
  6314  0756  01E4               	clrf	_mod_time_changed^(0+384)
  6315  0757                     l9166:	
  6316                           
  6317                           ;main.c: 190: }
  6318                           ;main.c: 193: if (modulation_changed == 1) {
  6319  0757  0344               	decf	_modulation_changed^(0+384),w
  6320  0758  1D03               	btfss	3,2
  6321  0759  2BB5               	goto	l9080
  6322                           
  6323                           ;main.c: 194: updateModulationArray();
  6324  075A  318D  25DD  3183   	fcall	_updateModulationArray
  6325                           
  6326                           ;main.c: 195: isInitialized = 1;
  6327  075D  0023               	movlb	3	; select bank3
  6328  075E  01C1               	clrf	_isInitialized^(0+384)
  6329  075F  0AC1               	incf	_isInitialized^(0+384),f
  6330  0760  2BB5               	goto	l9080
  6331  0761                     __end_of_main:	
  6332                           
  6333                           	psect	text1
  6334  09FD                     __ptext1:	
  6335 ;; *************** function _updateSwitchTap *****************
  6336 ;; Defined at:
  6337 ;;		line 48 in file "SwitchTap.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;		None
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6342 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      void 
  6345 ;; Registers used:
  6346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6353 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6354 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6355 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6356 ;;Total ram usage:        9 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    8
  6359 ;; This function calls:
  6360 ;;		___aldiv
  6361 ;;		_setDoublePressState
  6362 ;;		_setLongTapState
  6363 ;; This function is called by:
  6364 ;;		_main
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _updateSwitchTap
  6370  09FD                     _updateSwitchTap:	
  6371                           
  6372                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6373                           
  6374                           ;incstack = 0
  6375                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6376  09FD  0021               	movlb	1	; select bank1
  6377  09FE  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6378                           
  6379                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6380  09FF  0020               	movlb	0	; select bank0
  6381  0A00  1810               	btfsc	16,0	;volatile
  6382  0A01  2A08               	goto	l8846
  6383                           
  6384                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6385  0A02  0850               	movf	_switchTap_pressed,w
  6386  0A03  1903               	btfsc	3,2
  6387  0A04  2A12               	goto	l1411
  6388                           
  6389                           ;SwitchTap.c: 59: switchTap_pressed--;
  6390  0A05  3001               	movlw	1
  6391  0A06  02D0               	subwf	_switchTap_pressed,f
  6392                           
  6393                           ;SwitchTap.c: 60: }
  6394                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6395  0A07  2A12               	goto	l1411
  6396  0A08                     l8846:	
  6397  0A08  3019               	movlw	25
  6398  0A09  0250               	subwf	_switchTap_pressed,w
  6399  0A0A  1803               	skipnc
  6400  0A0B  2A12               	goto	l1411
  6401                           
  6402                           ;SwitchTap.c: 62: switchTap_pressed++;
  6403  0A0C  3001               	movlw	1
  6404  0A0D  0021               	movlb	1	; select bank1
  6405  0A0E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6406  0A0F  083C               	movf	??_updateSwitchTap^(0+128),w
  6407  0A10  0020               	movlb	0	; select bank0
  6408  0A11  07D0               	addwf	_switchTap_pressed,f
  6409  0A12                     l1411:	
  6410                           
  6411                           ;SwitchTap.c: 63: }
  6412                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6413  0A12  0850               	movf	_switchTap_pressed,w
  6414  0A13  1D03               	btfss	3,2
  6415  0A14  2BC8               	goto	l8930
  6416                           
  6417                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6418  0A15  1BC3               	btfsc	_tap_timer+3,7	;volatile
  6419  0A16  2A9D               	goto	l8890
  6420  0A17  0843               	movf	_tap_timer+3,w	;volatile
  6421  0A18  1D03               	btfss	3,2
  6422  0A19  2A23               	goto	l8852
  6423  0A1A  0842               	movf	_tap_timer+2,w	;volatile
  6424  0A1B  1D03               	btfss	3,2
  6425  0A1C  2A23               	goto	l8852
  6426  0A1D  301B               	movlw	27
  6427  0A1E  0240               	subwf	_tap_timer,w	;volatile
  6428  0A1F  3006               	movlw	6
  6429  0A20  3B41               	subwfb	_tap_timer+1,w	;volatile
  6430  0A21  1C03               	btfss	3,0
  6431  0A22  2A9D               	goto	l8890
  6432  0A23                     l8852:	
  6433                           
  6434                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6435  0A23  0023               	movlb	3	; select bank3
  6436  0A24  0347               	decf	_switchTap_down^(0+384),w
  6437  0A25  1903               	btfsc	3,2
  6438  0A26  2A62               	goto	l8868
  6439                           
  6440                           ;SwitchTap.c: 78: switchTap_down = 1;
  6441  0A27  01C7               	clrf	_switchTap_down^(0+384)
  6442  0A28  0AC7               	incf	_switchTap_down^(0+384),f
  6443                           
  6444                           ;SwitchTap.c: 79: tap_timer = 0;
  6445  0A29  3000               	movlw	0
  6446  0A2A  0020               	movlb	0	; select bank0
  6447  0A2B  00C3               	movwf	_tap_timer+3	;volatile
  6448  0A2C  3000               	movlw	0
  6449  0A2D  00C2               	movwf	_tap_timer+2	;volatile
  6450  0A2E  3000               	movlw	0
  6451  0A2F  00C1               	movwf	_tap_timer+1	;volatile
  6452  0A30  3000               	movlw	0
  6453  0A31  00C0               	movwf	_tap_timer	;volatile
  6454                           
  6455                           ;SwitchTap.c: 80: tap_iteration = 1;
  6456  0A32  3001               	movlw	1
  6457  0A33  0023               	movlb	3	; select bank3
  6458  0A34  00DE               	movwf	_tap_iteration^(0+384)
  6459  0A35  3000               	movlw	0
  6460  0A36  00DF               	movwf	(_tap_iteration^(0+384)+1)
  6461                           
  6462                           ;SwitchTap.c: 81: tap_total = 0;
  6463  0A37  3000               	movlw	0
  6464  0A38  0024               	movlb	4	; select bank4
  6465  0A39  00C0               	movwf	(_tap_total+3)^(0+512)
  6466  0A3A  3000               	movlw	0
  6467  0A3B  00BF               	movwf	(_tap_total+2)^(0+512)
  6468  0A3C  3000               	movlw	0
  6469  0A3D  00BE               	movwf	(_tap_total+1)^(0+512)
  6470  0A3E  3000               	movlw	0
  6471  0A3F  00BD               	movwf	_tap_total^(0+512)
  6472                           
  6473                           ;SwitchTap.c: 82: mod_time_changed = 0;
  6474  0A40  0023               	movlb	3	; select bank3
  6475  0A41  01E4               	clrf	_mod_time_changed^(0+384)
  6476                           
  6477                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6478  0A42  0021               	movlb	1	; select bank1
  6479  0A43  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6480  0A44  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6481  0A45                     l8866:	
  6482  0A45  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6483  0A46  0020               	movlb	0	; select bank0
  6484  0A47  025D               	subwf	_num_taps,w
  6485  0A48  1C03               	btfss	3,0
  6486  0A49  2A62               	goto	l8868
  6487                           
  6488                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6489  0A4A  0021               	movlb	1	; select bank1
  6490  0A4B  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6491  0A4C  00BC               	movwf	??_updateSwitchTap^(0+128)
  6492  0A4D  3001               	movlw	1
  6493  0A4E                     u9585:	
  6494  0A4E  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6495  0A4F  3EFF               	addlw	-1
  6496  0A50  1D03               	skipz
  6497  0A51  2A4E               	goto	u9585
  6498  0A52  353C               	lslf	??_updateSwitchTap^(0+128),w
  6499  0A53  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6500  0A54  0086               	movwf	6
  6501  0A55  3002               	movlw	2	; select bank4/5
  6502  0A56  0087               	movwf	7
  6503  0A57  3000               	movlw	0
  6504  0A58  3FC0               	movwi [0]fsr1
  6505  0A59  3000               	movlw	0
  6506  0A5A  3FC1               	movwi [1]fsr1
  6507  0A5B  3FC2               	movwi [2]fsr1
  6508  0A5C  3FC3               	movwi [3]fsr1
  6509  0A5D  3001               	movlw	1
  6510  0A5E  00BC               	movwf	??_updateSwitchTap^(0+128)
  6511  0A5F  083C               	movf	??_updateSwitchTap^(0+128),w
  6512  0A60  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6513  0A61  2A45               	goto	l8866
  6514  0A62                     l8868:	
  6515                           
  6516                           ;SwitchTap.c: 86: }
  6517                           ;SwitchTap.c: 87: }
  6518                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6519  0A62  0022               	movlb	2	; select bank2
  6520  0A63  086C               	movf	_longTap_start^(0+256),w
  6521  0A64  1D03               	btfss	3,2
  6522  0A65  2A6D               	goto	l8874
  6523                           
  6524                           ;SwitchTap.c: 91: longTap_start = 1;
  6525  0A66  01EC               	clrf	_longTap_start^(0+256)
  6526  0A67  0AEC               	incf	_longTap_start^(0+256),f
  6527                           
  6528                           ;SwitchTap.c: 92: longTap_state = 0;
  6529  0A68  0020               	movlb	0	; select bank0
  6530  0A69  01DC               	clrf	_longTap_state	;volatile
  6531                           
  6532                           ;SwitchTap.c: 93: longTap_timer = 0;
  6533  0A6A  0023               	movlb	3	; select bank3
  6534  0A6B  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  6535  0A6C  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6536  0A6D                     l8874:	
  6537                           
  6538                           ;SwitchTap.c: 94: }
  6539                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6540  0A6D  0020               	movlb	0	; select bank0
  6541  0A6E  0858               	movf	_long_press_limit+1,w
  6542  0A6F  0023               	movlb	3	; select bank3
  6543  0A70  0239               	subwf	(_longTap_timer+1)^(0+384),w	;volatile
  6544  0A71  1D03               	skipz
  6545  0A72  2A77               	goto	u9615
  6546  0A73  0020               	movlb	0	; select bank0
  6547  0A74  0857               	movf	_long_press_limit,w
  6548  0A75  0023               	movlb	3	; select bank3
  6549  0A76  0238               	subwf	_longTap_timer^(0+384),w	;volatile
  6550  0A77                     u9615:	
  6551  0A77  1C03               	skipc
  6552  0A78  0008               	return
  6553  0A79  0020               	movlb	0	; select bank0
  6554  0A7A  085C               	movf	_longTap_state,w	;volatile
  6555  0A7B  1D03               	btfss	3,2
  6556  0A7C  0008               	return
  6557  0A7D  084A               	movf	_doubleTap_state,w	;volatile
  6558  0A7E  1D03               	btfss	3,2
  6559  0A7F  0008               	return
  6560                           
  6561                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6562  0A80  0858               	movf	_long_press_limit+1,w
  6563  0A81  0023               	movlb	3	; select bank3
  6564  0A82  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
  6565  0A83  0020               	movlb	0	; select bank0
  6566  0A84  0857               	movf	_long_press_limit,w
  6567  0A85  0023               	movlb	3	; select bank3
  6568  0A86  00B8               	movwf	_longTap_timer^(0+384)	;volatile
  6569                           
  6570                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6571  0A87  0022               	movlb	2	; select bank2
  6572  0A88  120D               	bcf	13,4	;volatile
  6573                           
  6574                           ;SwitchTap.c: 103: if (longBypass_start != 1) {
  6575  0A89  0020               	movlb	0	; select bank0
  6576  0A8A  034B               	decf	_longBypass_start,w
  6577  0A8B  1903               	btfsc	3,2
  6578  0A8C  2A95               	goto	l8888
  6579                           
  6580                           ;SwitchTap.c: 104: setLongTapState(1);
  6581  0A8D  3001               	movlw	1
  6582  0A8E  0021               	movlb	1	; select bank1
  6583  0A8F  00A0               	movwf	setLongTapState@f_state^(0+128)
  6584  0A90  3000               	movlw	0
  6585  0A91  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6586  0A92  31AF  27AE         	fcall	_setLongTapState
  6587                           
  6588                           ;SwitchTap.c: 105: } else {
  6589  0A94  0008               	return
  6590  0A95                     l8888:	
  6591                           
  6592                           ;SwitchTap.c: 106: setDoublePressState(1);
  6593  0A95  3001               	movlw	1
  6594  0A96  0021               	movlb	1	; select bank1
  6595  0A97  00B8               	movwf	setDoublePressState@f_state^(0+128)
  6596  0A98  3000               	movlw	0
  6597  0A99  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6598  0A9A  31A3  234D         	fcall	_setDoublePressState
  6599                           
  6600                           ;SwitchTap.c: 107: }
  6601                           ;SwitchTap.c: 108: }
  6602                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6603  0A9C  0008               	return
  6604  0A9D                     l8890:	
  6605  0A9D  0020               	movlb	0	; select bank0
  6606  0A9E  1BC3               	btfsc	_tap_timer+3,7	;volatile
  6607  0A9F  2AAC               	goto	l8892
  6608  0AA0  0843               	movf	_tap_timer+3,w	;volatile
  6609  0AA1  1D03               	btfss	3,2
  6610  0AA2  0008               	return
  6611  0AA3  0842               	movf	_tap_timer+2,w	;volatile
  6612  0AA4  1D03               	btfss	3,2
  6613  0AA5  0008               	return
  6614  0AA6  301B               	movlw	27
  6615  0AA7  0240               	subwf	_tap_timer,w	;volatile
  6616  0AA8  3006               	movlw	6
  6617  0AA9  3B41               	subwfb	_tap_timer+1,w	;volatile
  6618  0AAA  1803               	btfsc	3,0
  6619  0AAB  0008               	return
  6620  0AAC                     l8892:	
  6621  0AAC  085C               	movf	_longTap_state,w	;volatile
  6622  0AAD  1D03               	btfss	3,2
  6623  0AAE  0008               	return
  6624  0AAF  0023               	movlb	3	; select bank3
  6625  0AB0  0347               	decf	_switchTap_down^(0+384),w
  6626  0AB1  1903               	btfsc	3,2
  6627  0AB2  0008               	return
  6628                           
  6629                           ;SwitchTap.c: 112: switchTap_down = 1;
  6630  0AB3  01C7               	clrf	_switchTap_down^(0+384)
  6631  0AB4  0AC7               	incf	_switchTap_down^(0+384),f
  6632                           
  6633                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6634  0AB5  0020               	movlb	0	; select bank0
  6635  0AB6  1BC3               	btfsc	_tap_timer+3,7	;volatile
  6636  0AB7  2ACC               	goto	l1425
  6637  0AB8  0843               	movf	_tap_timer+3,w	;volatile
  6638  0AB9  1D03               	btfss	3,2
  6639  0ABA  2AC4               	goto	l8900
  6640  0ABB  0842               	movf	_tap_timer+2,w	;volatile
  6641  0ABC  1D03               	btfss	3,2
  6642  0ABD  2AC4               	goto	l8900
  6643  0ABE  3094               	movlw	148
  6644  0ABF  0240               	subwf	_tap_timer,w	;volatile
  6645  0AC0  3004               	movlw	4
  6646  0AC1  3B41               	subwfb	_tap_timer+1,w	;volatile
  6647  0AC2  1C03               	btfss	3,0
  6648  0AC3  2ACC               	goto	l1425
  6649  0AC4                     l8900:	
  6650                           
  6651                           ;SwitchTap.c: 114: tap_timer = 1172;
  6652  0AC4  3000               	movlw	0
  6653  0AC5  00C3               	movwf	_tap_timer+3	;volatile
  6654  0AC6  3000               	movlw	0
  6655  0AC7  00C2               	movwf	_tap_timer+2	;volatile
  6656  0AC8  3004               	movlw	4
  6657  0AC9  00C1               	movwf	_tap_timer+1	;volatile
  6658  0ACA  3094               	movlw	148
  6659  0ACB  00C0               	movwf	_tap_timer	;volatile
  6660  0ACC                     l1425:	
  6661                           
  6662                           ;SwitchTap.c: 115: }
  6663                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6664  0ACC  085D               	movf	_num_taps,w
  6665  0ACD  0021               	movlb	1	; select bank1
  6666  0ACE  00BC               	movwf	??_updateSwitchTap^(0+128)
  6667  0ACF  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  6668  0AD0  083C               	movf	??_updateSwitchTap^(0+128),w
  6669  0AD1  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6670  0AD2  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  6671  0AD3  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6672                           
  6673                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6674  0AD4  0023               	movlb	3	; select bank3
  6675  0AD5  085F               	movf	(_tap_iteration+1)^(0+384),w
  6676  0AD6  3A80               	xorlw	128
  6677  0AD7  3C80               	sublw	128
  6678  0AD8  1D03               	skipz
  6679  0AD9  2ADD               	goto	u9695
  6680  0ADA  085E               	movf	_tap_iteration^(0+384),w
  6681  0ADB  0020               	movlb	0	; select bank0
  6682  0ADC  025D               	subwf	_num_taps,w
  6683  0ADD                     u9695:	
  6684  0ADD  1C03               	skipc
  6685  0ADE  2B0F               	goto	l8908
  6686                           
  6687                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6688  0ADF  0020               	movlb	0	; select bank0
  6689  0AE0  0840               	movf	_tap_timer,w	;volatile
  6690  0AE1  0024               	movlb	4	; select bank4
  6691  0AE2  07BD               	addwf	_tap_total^(0+512),f
  6692  0AE3  0020               	movlb	0	; select bank0
  6693  0AE4  0841               	movf	_tap_timer+1,w	;volatile
  6694  0AE5  0024               	movlb	4	; select bank4
  6695  0AE6  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6696  0AE7  0020               	movlb	0	; select bank0
  6697  0AE8  0842               	movf	_tap_timer+2,w	;volatile
  6698  0AE9  0024               	movlb	4	; select bank4
  6699  0AEA  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6700  0AEB  0020               	movlb	0	; select bank0
  6701  0AEC  0843               	movf	_tap_timer+3,w	;volatile
  6702  0AED  0024               	movlb	4	; select bank4
  6703  0AEE  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6704                           
  6705                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6706  0AEF  0023               	movlb	3	; select bank3
  6707  0AF0  085E               	movf	_tap_iteration^(0+384),w
  6708  0AF1  0021               	movlb	1	; select bank1
  6709  0AF2  00BC               	movwf	??_updateSwitchTap^(0+128)
  6710  0AF3  3001               	movlw	1
  6711  0AF4                     u9705:	
  6712  0AF4  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6713  0AF5  3EFF               	addlw	-1
  6714  0AF6  1D03               	skipz
  6715  0AF7  2AF4               	goto	u9705
  6716  0AF8  353C               	lslf	??_updateSwitchTap^(0+128),w
  6717  0AF9  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6718  0AFA  0086               	movwf	6
  6719  0AFB  3002               	movlw	2	; select bank4/5
  6720  0AFC  0087               	movwf	7
  6721  0AFD  0020               	movlb	0	; select bank0
  6722  0AFE  0840               	movf	_tap_timer,w	;volatile
  6723  0AFF  3FC0               	movwi [0]fsr1
  6724  0B00  0841               	movf	_tap_timer+1,w	;volatile
  6725  0B01  3FC1               	movwi [1]fsr1
  6726  0B02  0842               	movf	_tap_timer+2,w	;volatile
  6727  0B03  3FC2               	movwi [2]fsr1
  6728  0B04  0843               	movf	_tap_timer+3,w	;volatile
  6729  0B05  3FC3               	movwi [3]fsr1
  6730                           
  6731                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6732  0B06  0023               	movlb	3	; select bank3
  6733  0B07  085F               	movf	(_tap_iteration+1)^(0+384),w
  6734  0B08  0021               	movlb	1	; select bank1
  6735  0B09  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6736  0B0A  0023               	movlb	3	; select bank3
  6737  0B0B  085E               	movf	_tap_iteration^(0+384),w
  6738  0B0C  0021               	movlb	1	; select bank1
  6739  0B0D  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6740                           
  6741                           ;SwitchTap.c: 122: } else {
  6742  0B0E  2B8B               	goto	l8922
  6743  0B0F                     l8908:	
  6744                           
  6745                           ;SwitchTap.c: 123: tap_total = 0;
  6746  0B0F  3000               	movlw	0
  6747  0B10  0024               	movlb	4	; select bank4
  6748  0B11  00C0               	movwf	(_tap_total+3)^(0+512)
  6749  0B12  3000               	movlw	0
  6750  0B13  00BF               	movwf	(_tap_total+2)^(0+512)
  6751  0B14  3000               	movlw	0
  6752  0B15  00BE               	movwf	(_tap_total+1)^(0+512)
  6753  0B16  3000               	movlw	0
  6754  0B17  00BD               	movwf	_tap_total^(0+512)
  6755                           
  6756                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6757  0B18  0021               	movlb	1	; select bank1
  6758  0B19  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6759  0B1A  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6760  0B1B                     l8916:	
  6761  0B1B  0020               	movlb	0	; select bank0
  6762  0B1C  085D               	movf	_num_taps,w
  6763  0B1D  0021               	movlb	1	; select bank1
  6764  0B1E  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  6765  0B1F  1803               	btfsc	3,0
  6766  0B20  2B65               	goto	l8918
  6767                           
  6768                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6769  0B21  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6770  0B22  00BC               	movwf	??_updateSwitchTap^(0+128)
  6771  0B23  3001               	movlw	1
  6772  0B24                     u9715:	
  6773  0B24  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6774  0B25  3EFF               	addlw	-1
  6775  0B26  1D03               	skipz
  6776  0B27  2B24               	goto	u9715
  6777  0B28  353C               	lslf	??_updateSwitchTap^(0+128),w
  6778  0B29  3E04               	addlw	4
  6779  0B2A  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6780  0B2B  0086               	movwf	6
  6781  0B2C  3002               	movlw	2	; select bank4/5
  6782  0B2D  0087               	movwf	7
  6783  0B2E  3F40               	moviw [0]fsr1
  6784  0B2F  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  6785  0B30  3F41               	moviw [1]fsr1
  6786  0B31  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6787  0B32  3F42               	moviw [2]fsr1
  6788  0B33  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  6789  0B34  3F43               	moviw [3]fsr1
  6790  0B35  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  6791  0B36  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6792  0B37  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  6793  0B38  3001               	movlw	1
  6794  0B39                     u9725:	
  6795  0B39  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  6796  0B3A  3EFF               	addlw	-1
  6797  0B3B  1D03               	skipz
  6798  0B3C  2B39               	goto	u9725
  6799  0B3D  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  6800  0B3E  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6801  0B3F  0086               	movwf	6
  6802  0B40  3002               	movlw	2	; select bank4/5
  6803  0B41  0087               	movwf	7
  6804  0B42  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  6805  0B43  3FC0               	movwi [0]fsr1
  6806  0B44  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  6807  0B45  3FC1               	movwi [1]fsr1
  6808  0B46  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  6809  0B47  3FC2               	movwi [2]fsr1
  6810  0B48  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  6811  0B49  3FC3               	movwi [3]fsr1
  6812                           
  6813                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  6814  0B4A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6815  0B4B  00BC               	movwf	??_updateSwitchTap^(0+128)
  6816  0B4C  3001               	movlw	1
  6817  0B4D                     u9735:	
  6818  0B4D  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6819  0B4E  3EFF               	addlw	-1
  6820  0B4F  1D03               	skipz
  6821  0B50  2B4D               	goto	u9735
  6822  0B51  353C               	lslf	??_updateSwitchTap^(0+128),w
  6823  0B52  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6824  0B53  0086               	movwf	6
  6825  0B54  3002               	movlw	2	; select bank4/5
  6826  0B55  0087               	movwf	7
  6827  0B56  3F40               	moviw [0]fsr1
  6828  0B57  0024               	movlb	4	; select bank4
  6829  0B58  07BD               	addwf	_tap_total^(0+512),f
  6830  0B59  3F41               	moviw [1]fsr1
  6831  0B5A  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6832  0B5B  3F42               	moviw [2]fsr1
  6833  0B5C  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6834  0B5D  3F43               	moviw [3]fsr1
  6835  0B5E  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6836  0B5F  3001               	movlw	1
  6837  0B60  0021               	movlb	1	; select bank1
  6838  0B61  00BC               	movwf	??_updateSwitchTap^(0+128)
  6839  0B62  083C               	movf	??_updateSwitchTap^(0+128),w
  6840  0B63  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6841  0B64  2B1B               	goto	l8916
  6842  0B65                     l8918:	
  6843                           
  6844                           ;SwitchTap.c: 127: }
  6845                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  6846  0B65  0020               	movlb	0	; select bank0
  6847  0B66  085D               	movf	_num_taps,w
  6848  0B67  0021               	movlb	1	; select bank1
  6849  0B68  00BC               	movwf	??_updateSwitchTap^(0+128)
  6850  0B69  3001               	movlw	1
  6851  0B6A                     u9755:	
  6852  0B6A  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6853  0B6B  3EFF               	addlw	-1
  6854  0B6C  1D03               	skipz
  6855  0B6D  2B6A               	goto	u9755
  6856  0B6E  353C               	lslf	??_updateSwitchTap^(0+128),w
  6857  0B6F  3E20               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6858  0B70  0086               	movwf	6
  6859  0B71  3002               	movlw	2	; select bank4/5
  6860  0B72  0087               	movwf	7
  6861  0B73  0020               	movlb	0	; select bank0
  6862  0B74  0840               	movf	_tap_timer,w	;volatile
  6863  0B75  3FC0               	movwi [0]fsr1
  6864  0B76  0841               	movf	_tap_timer+1,w	;volatile
  6865  0B77  3FC1               	movwi [1]fsr1
  6866  0B78  0842               	movf	_tap_timer+2,w	;volatile
  6867  0B79  3FC2               	movwi [2]fsr1
  6868  0B7A  0843               	movf	_tap_timer+3,w	;volatile
  6869  0B7B  3FC3               	movwi [3]fsr1
  6870                           
  6871                           ;SwitchTap.c: 129: tap_total += tap_timer;
  6872  0B7C  0840               	movf	_tap_timer,w	;volatile
  6873  0B7D  0024               	movlb	4	; select bank4
  6874  0B7E  07BD               	addwf	_tap_total^(0+512),f
  6875  0B7F  0020               	movlb	0	; select bank0
  6876  0B80  0841               	movf	_tap_timer+1,w	;volatile
  6877  0B81  0024               	movlb	4	; select bank4
  6878  0B82  3DBE               	addwfc	(_tap_total+1)^(0+512),f
  6879  0B83  0020               	movlb	0	; select bank0
  6880  0B84  0842               	movf	_tap_timer+2,w	;volatile
  6881  0B85  0024               	movlb	4	; select bank4
  6882  0B86  3DBF               	addwfc	(_tap_total+2)^(0+512),f
  6883  0B87  0020               	movlb	0	; select bank0
  6884  0B88  0843               	movf	_tap_timer+3,w	;volatile
  6885  0B89  0024               	movlb	4	; select bank4
  6886  0B8A  3DC0               	addwfc	(_tap_total+3)^(0+512),f
  6887  0B8B                     l8922:	
  6888                           
  6889                           ;SwitchTap.c: 130: }
  6890                           ;SwitchTap.c: 132: baseline_mod_time = tap_total / tapCntDivisor;
  6891  0B8B  0021               	movlb	1	; select bank1
  6892  0B8C  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  6893  0B8D  00A0               	movwf	___aldiv@divisor^(0+128)
  6894  0B8E  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  6895  0B8F  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  6896  0B90  0D89               	rlf	9,f
  6897  0B91  3B89               	subwfb	9,f
  6898  0B92  0989               	comf	9,f
  6899  0B93  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  6900  0B94  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  6901  0B95  0024               	movlb	4	; select bank4
  6902  0B96  0840               	movf	(_tap_total+3)^(0+512),w
  6903  0B97  0021               	movlb	1	; select bank1
  6904  0B98  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  6905  0B99  0024               	movlb	4	; select bank4
  6906  0B9A  083F               	movf	(_tap_total+2)^(0+512),w
  6907  0B9B  0021               	movlb	1	; select bank1
  6908  0B9C  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  6909  0B9D  0024               	movlb	4	; select bank4
  6910  0B9E  083E               	movf	(_tap_total+1)^(0+512),w
  6911  0B9F  0021               	movlb	1	; select bank1
  6912  0BA0  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  6913  0BA1  0024               	movlb	4	; select bank4
  6914  0BA2  083D               	movf	_tap_total^(0+512),w
  6915  0BA3  0021               	movlb	1	; select bank1
  6916  0BA4  00A4               	movwf	___aldiv@dividend^(0+128)
  6917  0BA5  3199  213F         	fcall	___aldiv
  6918  0BA7  0021               	movlb	1	; select bank1
  6919  0BA8  0823               	movf	(?___aldiv+3)^(0+128),w
  6920  0BA9  0023               	movlb	3	; select bank3
  6921  0BAA  00CB               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
  6922  0BAB  0021               	movlb	1	; select bank1
  6923  0BAC  0822               	movf	(?___aldiv+2)^(0+128),w
  6924  0BAD  0023               	movlb	3	; select bank3
  6925  0BAE  00CA               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
  6926  0BAF  0021               	movlb	1	; select bank1
  6927  0BB0  0821               	movf	(?___aldiv+1)^(0+128),w
  6928  0BB1  0023               	movlb	3	; select bank3
  6929  0BB2  00C9               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
  6930  0BB3  0021               	movlb	1	; select bank1
  6931  0BB4  0820               	movf	?___aldiv^(0+128),w
  6932  0BB5  0023               	movlb	3	; select bank3
  6933  0BB6  00C8               	movwf	_baseline_mod_time^(0+384)	;volatile
  6934                           
  6935                           ;SwitchTap.c: 133: mod_time_changed = 1;
  6936  0BB7  01E4               	clrf	_mod_time_changed^(0+384)
  6937  0BB8  0AE4               	incf	_mod_time_changed^(0+384),f
  6938                           
  6939                           ;SwitchTap.c: 134: tap_timer = 0;
  6940  0BB9  3000               	movlw	0
  6941  0BBA  0020               	movlb	0	; select bank0
  6942  0BBB  00C3               	movwf	_tap_timer+3	;volatile
  6943  0BBC  3000               	movlw	0
  6944  0BBD  00C2               	movwf	_tap_timer+2	;volatile
  6945  0BBE  3000               	movlw	0
  6946  0BBF  00C1               	movwf	_tap_timer+1	;volatile
  6947  0BC0  3000               	movlw	0
  6948  0BC1  00C0               	movwf	_tap_timer	;volatile
  6949                           
  6950                           ;SwitchTap.c: 136: tap_iteration++;
  6951  0BC2  3001               	movlw	1
  6952  0BC3  0023               	movlb	3	; select bank3
  6953  0BC4  07DE               	addwf	_tap_iteration^(0+384),f
  6954  0BC5  3000               	movlw	0
  6955  0BC6  3DDF               	addwfc	(_tap_iteration+1)^(0+384),f
  6956                           
  6957                           ;SwitchTap.c: 137: }
  6958                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  6959  0BC7  0008               	return
  6960  0BC8                     l8930:	
  6961  0BC8  3019               	movlw	25
  6962  0BC9  0020               	movlb	0	; select bank0
  6963  0BCA  0250               	subwf	_switchTap_pressed,w
  6964  0BCB  1C03               	skipc
  6965  0BCC  0008               	return
  6966                           
  6967                           ;SwitchTap.c: 140: switchTap_down = 0;
  6968  0BCD  0023               	movlb	3	; select bank3
  6969  0BCE  01C7               	clrf	_switchTap_down^(0+384)
  6970                           
  6971                           ;SwitchTap.c: 141: switchTap_state = 0;
  6972  0BCF  01E6               	clrf	_switchTap_state^(0+384)
  6973                           
  6974                           ;SwitchTap.c: 147: setLongTapState(0);
  6975  0BD0  3000               	movlw	0
  6976  0BD1  0021               	movlb	1	; select bank1
  6977  0BD2  00A0               	movwf	setLongTapState@f_state^(0+128)
  6978  0BD3  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  6979  0BD4  31AF  27AE         	fcall	_setLongTapState
  6980                           
  6981                           ;SwitchTap.c: 149: longTap_timer = 0;
  6982  0BD6  0023               	movlb	3	; select bank3
  6983  0BD7  01B8               	clrf	_longTap_timer^(0+384)	;volatile
  6984  0BD8  01B9               	clrf	(_longTap_timer+1)^(0+384)	;volatile
  6985                           
  6986                           ;SwitchTap.c: 150: longTap_start = 0;
  6987  0BD9  0022               	movlb	2	; select bank2
  6988  0BDA  01EC               	clrf	_longTap_start^(0+256)
  6989                           
  6990                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  6991  0BDB  3019               	movlw	25
  6992  0BDC  0021               	movlb	1	; select bank1
  6993  0BDD  00BC               	movwf	??_updateSwitchTap^(0+128)
  6994  0BDE  083C               	movf	??_updateSwitchTap^(0+128),w
  6995  0BDF  0020               	movlb	0	; select bank0
  6996  0BE0  00D0               	movwf	_switchTap_pressed
  6997  0BE1  0008               	return
  6998  0BE2                     __end_of_updateSwitchTap:	
  6999                           
  7000                           	psect	text2
  7001  2FAE                     __ptext2:	
  7002 ;; *************** function _setLongTapState *****************
  7003 ;; Defined at:
  7004 ;;		line 167 in file "SwitchTap.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  f_state         2    0[BANK1 ] int 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;		None
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      void 
  7011 ;; Registers used:
  7012 ;;		wreg, status,0
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7018 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7020 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7021 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7022 ;;Total ram usage:        4 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    3
  7025 ;; This function calls:
  7026 ;;		Nothing
  7027 ;; This function is called by:
  7028 ;;		_updateSwitchTap
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           
  7033                           ;psect for function _setLongTapState
  7034  2FAE                     _setLongTapState:	
  7035                           
  7036                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7037                           
  7038                           ;incstack = 0
  7039                           ; Regs used in _setLongTapState: [wreg+status,0]
  7040  2FAE  0020               	movlb	0	; select bank0
  7041  2FAF  085C               	movf	_longTap_state,w	;volatile
  7042  2FB0  0021               	movlb	1	; select bank1
  7043  2FB1  00A2               	movwf	??_setLongTapState^(0+128)
  7044  2FB2  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7045  2FB3  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7046  2FB4  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7047  2FB5  1D03               	skipz
  7048  2FB6  2FB9               	goto	u8845
  7049  2FB7  0820               	movf	setLongTapState@f_state^(0+128),w
  7050  2FB8  0622               	xorwf	??_setLongTapState^(0+128),w
  7051  2FB9                     u8845:	
  7052  2FB9  1903               	btfsc	3,2
  7053  2FBA  0008               	return
  7054                           
  7055                           ;SwitchTap.c: 169: longTap_state = f_state;
  7056  2FBB  0820               	movf	setLongTapState@f_state^(0+128),w
  7057  2FBC  00A2               	movwf	??_setLongTapState^(0+128)
  7058  2FBD  0822               	movf	??_setLongTapState^(0+128),w
  7059  2FBE  0020               	movlb	0	; select bank0
  7060  2FBF  00DC               	movwf	_longTap_state	;volatile
  7061                           
  7062                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7063  2FC0  0021               	movlb	1	; select bank1
  7064  2FC1  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7065  2FC2  0022               	movlb	2	; select bank2
  7066  2FC3  1C03               	skipc
  7067  2FC4  128D               	bcf	13,5	;volatile
  7068  2FC5  1803               	skipnc
  7069  2FC6  168D               	bsf	13,5	;volatile
  7070  2FC7  0008               	return
  7071  2FC8                     __end_of_setLongTapState:	
  7072                           
  7073                           	psect	text3
  7074  193F                     __ptext3:	
  7075 ;; *************** function ___aldiv *****************
  7076 ;; Defined at:
  7077 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  divisor         4    0[BANK1 ] long 
  7080 ;;  dividend        4    4[BANK1 ] long 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;  quotient        4   11[BANK1 ] long 
  7083 ;;  sign            1   10[BANK1 ] unsigned char 
  7084 ;;  counter         1    9[BANK1 ] unsigned char 
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  4    0[BANK1 ] long 
  7087 ;; Registers used:
  7088 ;;		wreg, status,2, status,0
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7094 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7095 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7096 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7097 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7098 ;;Total ram usage:       15 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    3
  7101 ;; This function calls:
  7102 ;;		Nothing
  7103 ;; This function is called by:
  7104 ;;		_updateSwitchTap
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function ___aldiv
  7110  193F                     ___aldiv:	
  7111                           
  7112                           ;incstack = 0
  7113                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7114  193F  0021               	movlb	1	; select bank1
  7115  1940  01AA               	clrf	___aldiv@sign^(0+128)
  7116  1941  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7117  1942  2950               	goto	l2007
  7118  1943  09A0               	comf	___aldiv@divisor^(0+128),f
  7119  1944  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7120  1945  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7121  1946  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7122  1947  0AA0               	incf	___aldiv@divisor^(0+128),f
  7123  1948  1903               	skipnz
  7124  1949  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7125  194A  1903               	skipnz
  7126  194B  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7127  194C  1903               	skipnz
  7128  194D  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7129  194E  01AA               	clrf	___aldiv@sign^(0+128)
  7130  194F  0AAA               	incf	___aldiv@sign^(0+128),f
  7131  1950                     l2007:	
  7132  1950  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7133  1951  2961               	goto	l8506
  7134  1952  09A4               	comf	___aldiv@dividend^(0+128),f
  7135  1953  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7136  1954  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7137  1955  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7138  1956  0AA4               	incf	___aldiv@dividend^(0+128),f
  7139  1957  1903               	skipnz
  7140  1958  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7141  1959  1903               	skipnz
  7142  195A  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7143  195B  1903               	skipnz
  7144  195C  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7145  195D  3001               	movlw	1
  7146  195E  00A8               	movwf	??___aldiv^(0+128)
  7147  195F  0828               	movf	??___aldiv^(0+128),w
  7148  1960  06AA               	xorwf	___aldiv@sign^(0+128),f
  7149  1961                     l8506:	
  7150  1961  3000               	movlw	0
  7151  1962  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7152  1963  3000               	movlw	0
  7153  1964  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7154  1965  3000               	movlw	0
  7155  1966  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7156  1967  3000               	movlw	0
  7157  1968  00AB               	movwf	___aldiv@quotient^(0+128)
  7158  1969  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7159  196A  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7160  196B  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7161  196C  0420               	iorwf	___aldiv@divisor^(0+128),w
  7162  196D  1903               	skipnz
  7163  196E  29AA               	goto	l8528
  7164  196F  01A9               	clrf	___aldiv@counter^(0+128)
  7165  1970  0AA9               	incf	___aldiv@counter^(0+128),f
  7166  1971                     l8514:	
  7167  1971  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7168  1972  297F               	goto	l8516
  7169  1973  3001               	movlw	1
  7170  1974                     u8985:	
  7171  1974  35A0               	lslf	___aldiv@divisor^(0+128),f
  7172  1975  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7173  1976  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7174  1977  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7175  1978  0B89               	decfsz	9,f
  7176  1979  2974               	goto	u8985
  7177  197A  3001               	movlw	1
  7178  197B  00A8               	movwf	??___aldiv^(0+128)
  7179  197C  0828               	movf	??___aldiv^(0+128),w
  7180  197D  07A9               	addwf	___aldiv@counter^(0+128),f
  7181  197E  2971               	goto	l8514
  7182  197F                     l8516:	
  7183  197F  3001               	movlw	1
  7184  1980                     u9005:	
  7185  1980  35AB               	lslf	___aldiv@quotient^(0+128),f
  7186  1981  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7187  1982  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7188  1983  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7189  1984  0B89               	decfsz	9,f
  7190  1985  2980               	goto	u9005
  7191  1986  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7192  1987  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7193  1988  1D03               	skipz
  7194  1989  2994               	goto	u9015
  7195  198A  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7196  198B  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7197  198C  1D03               	skipz
  7198  198D  2994               	goto	u9015
  7199  198E  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7200  198F  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7201  1990  1D03               	skipz
  7202  1991  2994               	goto	u9015
  7203  1992  0820               	movf	___aldiv@divisor^(0+128),w
  7204  1993  0224               	subwf	___aldiv@dividend^(0+128),w
  7205  1994                     u9015:	
  7206  1994  1C03               	skipc
  7207  1995  299F               	goto	l8524
  7208  1996  0820               	movf	___aldiv@divisor^(0+128),w
  7209  1997  02A4               	subwf	___aldiv@dividend^(0+128),f
  7210  1998  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7211  1999  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7212  199A  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7213  199B  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7214  199C  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7215  199D  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7216  199E  142B               	bsf	___aldiv@quotient^(0+128),0
  7217  199F                     l8524:	
  7218  199F  3001               	movlw	1
  7219  19A0                     u9025:	
  7220  19A0  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7221  19A1  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7222  19A2  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7223  19A3  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7224  19A4  0B89               	decfsz	9,f
  7225  19A5  29A0               	goto	u9025
  7226  19A6  3001               	movlw	1
  7227  19A7  02A9               	subwf	___aldiv@counter^(0+128),f
  7228  19A8  1D03               	btfss	3,2
  7229  19A9  297F               	goto	l8516
  7230  19AA                     l8528:	
  7231  19AA  082A               	movf	___aldiv@sign^(0+128),w
  7232  19AB  1903               	btfsc	3,2
  7233  19AC  29B8               	goto	l8532
  7234  19AD  09AB               	comf	___aldiv@quotient^(0+128),f
  7235  19AE  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7236  19AF  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7237  19B0  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7238  19B1  0AAB               	incf	___aldiv@quotient^(0+128),f
  7239  19B2  1903               	skipnz
  7240  19B3  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7241  19B4  1903               	skipnz
  7242  19B5  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7243  19B6  1903               	skipnz
  7244  19B7  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7245  19B8                     l8532:	
  7246  19B8  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7247  19B9  00A3               	movwf	(?___aldiv+3)^(0+128)
  7248  19BA  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7249  19BB  00A2               	movwf	(?___aldiv+2)^(0+128)
  7250  19BC  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7251  19BD  00A1               	movwf	(?___aldiv+1)^(0+128)
  7252  19BE  082B               	movf	___aldiv@quotient^(0+128),w
  7253  19BF  00A0               	movwf	?___aldiv^(0+128)
  7254  19C0  0008               	return
  7255  19C1                     __end_of___aldiv:	
  7256                           
  7257                           	psect	text4
  7258  122B                     __ptext4:	
  7259 ;; *************** function _updateSwitchBypass *****************
  7260 ;; Defined at:
  7261 ;;		line 34 in file "SwitchBypass.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;		None
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;		None
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  1    wreg      void 
  7268 ;; Registers used:
  7269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7277 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7278 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7279 ;;Total ram usage:        2 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    8
  7282 ;; This function calls:
  7283 ;;		_setDoublePressState
  7284 ;;		_setLongBypassState
  7285 ;;		_setSwitchBypassRelays
  7286 ;;		_setSwitchBypassState
  7287 ;; This function is called by:
  7288 ;;		_main
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _updateSwitchBypass
  7294  122B                     _updateSwitchBypass:	
  7295                           
  7296                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7300  122B  0020               	movlb	0	; select bank0
  7301  122C  1890               	btfsc	16,1	;volatile
  7302  122D  2A41               	goto	l8730
  7303                           
  7304                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7305  122E  0023               	movlb	3	; select bank3
  7306  122F  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7307  1230  3A80               	xorlw	128
  7308  1231  0021               	movlb	1	; select bank1
  7309  1232  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7310  1233  3080               	movlw	128
  7311  1234  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7312  1235  1D03               	skipz
  7313  1236  2A3A               	goto	u9295
  7314  1237  3001               	movlw	1
  7315  1238  0023               	movlb	3	; select bank3
  7316  1239  023A               	subwf	_switchBypass_pressed^(0+384),w
  7317  123A                     u9295:	
  7318  123A  1C03               	skipc
  7319  123B  2A54               	goto	l8734
  7320                           
  7321                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7322  123C  30FF               	movlw	255
  7323  123D  0023               	movlb	3	; select bank3
  7324  123E  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7325  123F  30FF               	movlw	255
  7326  1240  2A53               	goto	L1
  7327  1241                     l8730:	
  7328                           ;SwitchBypass.c: 44: }
  7329                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7330                           
  7331  1241  0023               	movlb	3	; select bank3
  7332  1242  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7333  1243  3A80               	xorlw	128
  7334  1244  0021               	movlb	1	; select bank1
  7335  1245  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7336  1246  3080               	movlw	128
  7337  1247  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7338  1248  1D03               	skipz
  7339  1249  2A4D               	goto	u9305
  7340  124A  3019               	movlw	25
  7341  124B  0023               	movlb	3	; select bank3
  7342  124C  023A               	subwf	_switchBypass_pressed^(0+384),w
  7343  124D                     u9305:	
  7344  124D  1803               	skipnc
  7345  124E  2A54               	goto	l8734
  7346                           
  7347                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7348  124F  3001               	movlw	1
  7349  1250  0023               	movlb	3	; select bank3
  7350  1251  07BA               	addwf	_switchBypass_pressed^(0+384),f
  7351  1252  3000               	movlw	0
  7352  1253                     L1:	
  7353  1253  3DBB               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7354  1254                     l8734:	
  7355                           
  7356                           ;SwitchBypass.c: 47: }
  7357                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7358  1254  0023               	movlb	3	; select bank3
  7359  1255  083A               	movf	_switchBypass_pressed^(0+384),w
  7360  1256  043B               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7361  1257  1D03               	btfss	3,2
  7362  1258  2ADF               	goto	l8796
  7363                           
  7364                           ;SwitchBypass.c: 56: if (longBypass_start == 0) {
  7365  1259  0020               	movlb	0	; select bank0
  7366  125A  084B               	movf	_longBypass_start,w
  7367  125B  1D03               	btfss	3,2
  7368  125C  2A62               	goto	l8742
  7369                           
  7370                           ;SwitchBypass.c: 57: longBypass_start = 1;
  7371  125D  01CB               	clrf	_longBypass_start
  7372  125E  0ACB               	incf	_longBypass_start,f
  7373                           
  7374                           ;SwitchBypass.c: 58: longBypass_timer = 0;
  7375  125F  0023               	movlb	3	; select bank3
  7376  1260  01B6               	clrf	_longBypass_timer^(0+384)	;volatile
  7377  1261  01B7               	clrf	(_longBypass_timer+1)^(0+384)	;volatile
  7378  1262                     l8742:	
  7379                           
  7380                           ;SwitchBypass.c: 59: }
  7381                           ;SwitchBypass.c: 61: if (longBypass_timer >= long_press_limit && longBypass_down == 0 &&
      +                           doubleTap_state == 0) {
  7382  1262  0020               	movlb	0	; select bank0
  7383  1263  0858               	movf	_long_press_limit+1,w
  7384  1264  0023               	movlb	3	; select bank3
  7385  1265  0237               	subwf	(_longBypass_timer+1)^(0+384),w	;volatile
  7386  1266  1D03               	skipz
  7387  1267  2A6C               	goto	u9335
  7388  1268  0020               	movlb	0	; select bank0
  7389  1269  0857               	movf	_long_press_limit,w
  7390  126A  0023               	movlb	3	; select bank3
  7391  126B  0236               	subwf	_longBypass_timer^(0+384),w	;volatile
  7392  126C                     u9335:	
  7393  126C  1C03               	skipc
  7394  126D  2AAB               	goto	l8768
  7395  126E  0022               	movlb	2	; select bank2
  7396  126F  086B               	movf	_longBypass_down^(0+256),w
  7397  1270  1D03               	btfss	3,2
  7398  1271  2AAB               	goto	l8768
  7399  1272  0020               	movlb	0	; select bank0
  7400  1273  084A               	movf	_doubleTap_state,w	;volatile
  7401  1274  1D03               	btfss	3,2
  7402  1275  2AAB               	goto	l8768
  7403                           
  7404                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7405  1276  0022               	movlb	2	; select bank2
  7406  1277  110D               	bcf	13,2	;volatile
  7407                           
  7408                           ;SwitchBypass.c: 65: if (longTap_start != 1 ) {
  7409  1278  036C               	decf	_longTap_start^(0+256),w
  7410  1279  1903               	btfsc	3,2
  7411  127A  2AA3               	goto	l8766
  7412                           
  7413                           ;SwitchBypass.c: 66: if (switchBypass_state == 1) {
  7414  127B  0020               	movlb	0	; select bank0
  7415  127C  035F               	decf	_switchBypass_state,w
  7416  127D  1D03               	btfss	3,2
  7417  127E  2AAB               	goto	l8768
  7418                           
  7419                           ;SwitchBypass.c: 67: longBypass_down = 1;
  7420  127F  0022               	movlb	2	; select bank2
  7421  1280  01EB               	clrf	_longBypass_down^(0+256)
  7422  1281  0AEB               	incf	_longBypass_down^(0+256),f
  7423                           
  7424                           ;SwitchBypass.c: 68: if (longBypass_state == 0) {
  7425  1282  0020               	movlb	0	; select bank0
  7426  1283  084C               	movf	_longBypass_state,w	;volatile
  7427  1284  1D03               	btfss	3,2
  7428  1285  2A91               	goto	l8762
  7429                           
  7430                           ;SwitchBypass.c: 69: LATBbits.LATB2 = 0;
  7431  1286  0022               	movlb	2	; select bank2
  7432  1287  110D               	bcf	13,2	;volatile
  7433                           
  7434                           ;SwitchBypass.c: 70: setLongBypassState(1);
  7435  1288  3001               	movlw	1
  7436  1289  0021               	movlb	1	; select bank1
  7437  128A  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7438  128B  3000               	movlw	0
  7439  128C  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7440  128D  31A0  2055  3192   	fcall	_setLongBypassState
  7441                           
  7442                           ;SwitchBypass.c: 71: } else {
  7443  1290  2AAB               	goto	l8768
  7444  1291                     l8762:	
  7445                           
  7446                           ;SwitchBypass.c: 72: setSwitchBypassState(1);
  7447  1291  3001               	movlw	1
  7448  1292  0021               	movlb	1	; select bank1
  7449  1293  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7450  1294  3000               	movlw	0
  7451  1295  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7452  1296  31AF  27E4  3192   	fcall	_setSwitchBypassState
  7453                           
  7454                           ;SwitchBypass.c: 73: setLongBypassState(0);
  7455  1299  3000               	movlw	0
  7456  129A  0021               	movlb	1	; select bank1
  7457  129B  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7458  129C  00A1               	movwf	(setLongBypassState@f_state+1)^(0+128)
  7459  129D  31A0  2055  3192   	fcall	_setLongBypassState
  7460                           
  7461                           ;SwitchBypass.c: 74: LATBbits.LATB2 = 1;
  7462  12A0  0022               	movlb	2	; select bank2
  7463  12A1  150D               	bsf	13,2	;volatile
  7464                           
  7465                           ;SwitchBypass.c: 75: }
  7466                           ;SwitchBypass.c: 76: }
  7467                           ;SwitchBypass.c: 77: } else {
  7468  12A2  2AAB               	goto	l8768
  7469  12A3                     l8766:	
  7470                           
  7471                           ;SwitchBypass.c: 78: setDoublePressState(1);
  7472  12A3  3001               	movlw	1
  7473  12A4  0021               	movlb	1	; select bank1
  7474  12A5  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7475  12A6  3000               	movlw	0
  7476  12A7  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7477  12A8  31A3  234D  3192   	fcall	_setDoublePressState
  7478  12AB                     l8768:	
  7479                           
  7480                           ;SwitchBypass.c: 79: }
  7481                           ;SwitchBypass.c: 80: }
  7482                           ;SwitchBypass.c: 81: LATDbits.LATD4 = 0;
  7483  12AB  0022               	movlb	2	; select bank2
  7484  12AC  120F               	bcf	15,4	;volatile
  7485                           
  7486                           ;SwitchBypass.c: 82: if (doubleTap_state == 0 && longBypass_down == 0) {
  7487  12AD  0020               	movlb	0	; select bank0
  7488  12AE  084A               	movf	_doubleTap_state,w	;volatile
  7489  12AF  1D03               	btfss	3,2
  7490  12B0  2ADB               	goto	l8794
  7491  12B1  0022               	movlb	2	; select bank2
  7492  12B2  086B               	movf	_longBypass_down^(0+256),w
  7493  12B3  1D03               	btfss	3,2
  7494  12B4  2ADB               	goto	l8794
  7495                           
  7496                           ;SwitchBypass.c: 83: if (switchBypass_state == 1) {
  7497  12B5  0020               	movlb	0	; select bank0
  7498  12B6  035F               	decf	_switchBypass_state,w
  7499  12B7  1D03               	btfss	3,2
  7500  12B8  2AC7               	goto	l8782
  7501                           
  7502                           ;SwitchBypass.c: 85: if (switchBypass_up == 1) {
  7503  12B9  0024               	movlb	4	; select bank4
  7504  12BA  0363               	decf	_switchBypass_up^(0+512),w
  7505  12BB  0464               	iorwf	(_switchBypass_up+1)^(0+512),w
  7506  12BC  1D03               	btfss	3,2
  7507  12BD  2ADB               	goto	l8794
  7508                           
  7509                           ;SwitchBypass.c: 86: currentBypassState = 1;
  7510  12BE  0023               	movlb	3	; select bank3
  7511  12BF  01E1               	clrf	_currentBypassState^(0+384)
  7512  12C0  0AE1               	incf	_currentBypassState^(0+384),f
  7513                           
  7514                           ;SwitchBypass.c: 87: switchBypass_toggle = 1;
  7515  12C1  3001               	movlw	1
  7516  12C2  0024               	movlb	4	; select bank4
  7517  12C3  00D1               	movwf	_switchBypass_toggle^(0+512)
  7518  12C4  3000               	movlw	0
  7519  12C5  00D2               	movwf	(_switchBypass_toggle^(0+512)+1)
  7520                           
  7521                           ;SwitchBypass.c: 88: }
  7522                           ;SwitchBypass.c: 89: } else {
  7523  12C6  2ADB               	goto	l8794
  7524  12C7                     l8782:	
  7525                           
  7526                           ;SwitchBypass.c: 90: if (bypass_turning_on != 1) {
  7527  12C7  0023               	movlb	3	; select bank3
  7528  12C8  033F               	decf	_bypass_turning_on^(0+384),w
  7529  12C9  1903               	btfsc	3,2
  7530  12CA  2ADB               	goto	l8794
  7531                           
  7532                           ;SwitchBypass.c: 92: currentBypassState = 0;
  7533  12CB  01E1               	clrf	_currentBypassState^(0+384)
  7534                           
  7535                           ;SwitchBypass.c: 94: bypass_turning_on = 1;
  7536  12CC  01BF               	clrf	_bypass_turning_on^(0+384)
  7537  12CD  0ABF               	incf	_bypass_turning_on^(0+384),f
  7538                           
  7539                           ;SwitchBypass.c: 95: switchBypass_toggle = 0;
  7540  12CE  0024               	movlb	4	; select bank4
  7541  12CF  01D1               	clrf	_switchBypass_toggle^(0+512)
  7542  12D0  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7543                           
  7544                           ;SwitchBypass.c: 97: longBypass_save = longBypass_state;
  7545  12D1  0020               	movlb	0	; select bank0
  7546  12D2  084C               	movf	_longBypass_state,w	;volatile
  7547  12D3  0021               	movlb	1	; select bank1
  7548  12D4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7549  12D5  083C               	movf	??_updateSwitchBypass^(0+128),w
  7550  12D6  0023               	movlb	3	; select bank3
  7551  12D7  00C2               	movwf	_longBypass_save^(0+384)
  7552                           
  7553                           ;SwitchBypass.c: 98: longBypass_state = 0;
  7554  12D8  0020               	movlb	0	; select bank0
  7555  12D9  01CC               	clrf	_longBypass_state	;volatile
  7556                           
  7557                           ;SwitchBypass.c: 99: longBypass_start = 0;
  7558  12DA  01CB               	clrf	_longBypass_start
  7559  12DB                     l8794:	
  7560                           
  7561                           ;SwitchBypass.c: 100: }
  7562                           ;SwitchBypass.c: 101: }
  7563                           ;SwitchBypass.c: 103: }
  7564                           ;SwitchBypass.c: 104: switchBypass_up = 0;
  7565  12DB  0024               	movlb	4	; select bank4
  7566  12DC  01E3               	clrf	_switchBypass_up^(0+512)
  7567  12DD  01E4               	clrf	(_switchBypass_up+1)^(0+512)
  7568                           
  7569                           ;SwitchBypass.c: 105: } else if (switchBypass_pressed >= 25) {
  7570  12DE  0008               	return
  7571  12DF                     l8796:	
  7572  12DF  0023               	movlb	3	; select bank3
  7573  12E0  083B               	movf	(_switchBypass_pressed+1)^(0+384),w
  7574  12E1  3A80               	xorlw	128
  7575  12E2  0021               	movlb	1	; select bank1
  7576  12E3  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7577  12E4  3080               	movlw	128
  7578  12E5  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7579  12E6  1D03               	skipz
  7580  12E7  2AEB               	goto	u9445
  7581  12E8  3019               	movlw	25
  7582  12E9  0023               	movlb	3	; select bank3
  7583  12EA  023A               	subwf	_switchBypass_pressed^(0+384),w
  7584  12EB                     u9445:	
  7585  12EB  1C03               	skipc
  7586  12EC  0008               	return
  7587                           
  7588                           ;SwitchBypass.c: 106: if (doubleTap_state == 1) {
  7589  12ED  0020               	movlb	0	; select bank0
  7590  12EE  034A               	decf	_doubleTap_state,w	;volatile
  7591  12EF  1D03               	btfss	3,2
  7592  12F0  2AFA               	goto	l8802
  7593                           
  7594                           ;SwitchBypass.c: 107: setSwitchBypassState(currentBypassState);
  7595  12F1  0023               	movlb	3	; select bank3
  7596  12F2  0861               	movf	_currentBypassState^(0+384),w
  7597  12F3  0021               	movlb	1	; select bank1
  7598  12F4  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7599  12F5  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7600  12F6  083C               	movf	??_updateSwitchBypass^(0+128),w
  7601  12F7  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7602  12F8  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7603  12F9  2B2A               	goto	L2
  7604  12FA                     l8802:	
  7605                           ;SwitchBypass.c: 108: } else if (bypass_turning_on == 1) {
  7606                           
  7607  12FA  0023               	movlb	3	; select bank3
  7608  12FB  033F               	decf	_bypass_turning_on^(0+384),w
  7609  12FC  1D03               	btfss	3,2
  7610  12FD  2B1A               	goto	l8812
  7611                           
  7612                           ;SwitchBypass.c: 110: if (longBypass_save == 1) {
  7613  12FE  0342               	decf	_longBypass_save^(0+384),w
  7614  12FF  1D03               	btfss	3,2
  7615  1300  2B14               	goto	l8810
  7616                           
  7617                           ;SwitchBypass.c: 111: LATBbits.LATB2 = 0;
  7618  1301  0022               	movlb	2	; select bank2
  7619  1302  110D               	bcf	13,2	;volatile
  7620                           
  7621                           ;SwitchBypass.c: 112: setLongBypassState(1);
  7622  1303  3001               	movlw	1
  7623  1304  0021               	movlb	1	; select bank1
  7624  1305  00A0               	movwf	setLongBypassState@f_state^(0+128)
  7625  1306  3000               	movlw	0
  7626  1307  00A1               	movwf	(setLongBypassState@f_state^(0+128)+1)
  7627  1308  31A0  2055  3192   	fcall	_setLongBypassState
  7628                           
  7629                           ;SwitchBypass.c: 113: setSwitchBypassRelays(1);
  7630  130B  3001               	movlw	1
  7631  130C  0021               	movlb	1	; select bank1
  7632  130D  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
  7633  130E  3000               	movlw	0
  7634  130F  00B3               	movwf	(setSwitchBypassRelays@f_state^(0+128)+1)
  7635  1310  31A2  2228  3192   	fcall	_setSwitchBypassRelays
  7636                           
  7637                           ;SwitchBypass.c: 114: } else {
  7638  1313  2B2E               	goto	l8820
  7639  1314                     l8810:	
  7640                           
  7641                           ;SwitchBypass.c: 115: setSwitchBypassState(1);
  7642  1314  3001               	movlw	1
  7643  1315  0021               	movlb	1	; select bank1
  7644  1316  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7645  1317  3000               	movlw	0
  7646  1318  00B7               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7647  1319  2B2B               	goto	L3
  7648  131A                     l8812:	
  7649                           ;SwitchBypass.c: 116: }
  7650                           ;SwitchBypass.c: 118: } else if (switchBypass_toggle == 1 && longBypass_down == 0 && dou
      +                          bleTap_state == 0) {
  7651                           
  7652  131A  0024               	movlb	4	; select bank4
  7653  131B  0351               	decf	_switchBypass_toggle^(0+512),w
  7654  131C  0452               	iorwf	(_switchBypass_toggle+1)^(0+512),w
  7655  131D  1D03               	btfss	3,2
  7656  131E  2B2E               	goto	l8820
  7657  131F  0022               	movlb	2	; select bank2
  7658  1320  086B               	movf	_longBypass_down^(0+256),w
  7659  1321  1D03               	btfss	3,2
  7660  1322  2B2E               	goto	l8820
  7661  1323  0020               	movlb	0	; select bank0
  7662  1324  084A               	movf	_doubleTap_state,w	;volatile
  7663  1325  1D03               	btfss	3,2
  7664  1326  2B2E               	goto	l8820
  7665                           
  7666                           ;SwitchBypass.c: 119: setSwitchBypassState(0);
  7667  1327  3000               	movlw	0
  7668  1328  0021               	movlb	1	; select bank1
  7669  1329  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
  7670  132A                     L2:	
  7671  132A  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7672  132B                     L3:	
  7673  132B  31AF  27E4  3192   	fcall	_setSwitchBypassState
  7674  132E                     l8820:	
  7675                           
  7676                           ;SwitchBypass.c: 120: }
  7677                           ;SwitchBypass.c: 122: longBypass_down = 0;
  7678  132E  0022               	movlb	2	; select bank2
  7679  132F  01EB               	clrf	_longBypass_down^(0+256)
  7680                           
  7681                           ;SwitchBypass.c: 123: if (longBypass_state == 0) {
  7682  1330  0020               	movlb	0	; select bank0
  7683  1331  084C               	movf	_longBypass_state,w	;volatile
  7684  1332  1D03               	btfss	3,2
  7685  1333  2B3A               	goto	l8826
  7686                           
  7687                           ;SwitchBypass.c: 124: LATBbits.LATB2 = switchBypass_state;
  7688  1334  0C5F               	rrf	_switchBypass_state,w
  7689  1335  0022               	movlb	2	; select bank2
  7690  1336  1C03               	skipc
  7691  1337  110D               	bcf	13,2	;volatile
  7692  1338  1803               	skipnc
  7693  1339  150D               	bsf	13,2	;volatile
  7694  133A                     l8826:	
  7695                           
  7696                           ;SwitchBypass.c: 125: }
  7697                           ;SwitchBypass.c: 127: setDoublePressState(0);
  7698  133A  3000               	movlw	0
  7699  133B  0021               	movlb	1	; select bank1
  7700  133C  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7701  133D  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7702  133E  31A3  234D         	fcall	_setDoublePressState
  7703                           
  7704                           ;SwitchBypass.c: 128: longBypass_start = 0;
  7705  1340  0020               	movlb	0	; select bank0
  7706  1341  01CB               	clrf	_longBypass_start
  7707                           
  7708                           ;SwitchBypass.c: 129: bypass_turning_on = 0;
  7709  1342  0023               	movlb	3	; select bank3
  7710  1343  01BF               	clrf	_bypass_turning_on^(0+384)
  7711                           
  7712                           ;SwitchBypass.c: 130: switchBypass_toggle = 0;
  7713  1344  0024               	movlb	4	; select bank4
  7714  1345  01D1               	clrf	_switchBypass_toggle^(0+512)
  7715  1346  01D2               	clrf	(_switchBypass_toggle+1)^(0+512)
  7716                           
  7717                           ;SwitchBypass.c: 131: switchBypass_up = 1;
  7718  1347  3001               	movlw	1
  7719  1348  00E3               	movwf	_switchBypass_up^(0+512)
  7720  1349  3000               	movlw	0
  7721  134A  00E4               	movwf	(_switchBypass_up^(0+512)+1)
  7722                           
  7723                           ;SwitchBypass.c: 133: switchBypass_pressed = 25;
  7724  134B  3019               	movlw	25
  7725  134C  0023               	movlb	3	; select bank3
  7726  134D  00BA               	movwf	_switchBypass_pressed^(0+384)
  7727  134E  3000               	movlw	0
  7728  134F  00BB               	movwf	(_switchBypass_pressed^(0+384)+1)
  7729  1350  0008               	return
  7730  1351                     __end_of_updateSwitchBypass:	
  7731                           
  7732                           	psect	text5
  7733  2055                     __ptext5:	
  7734 ;; *************** function _setLongBypassState *****************
  7735 ;; Defined at:
  7736 ;;		line 163 in file "SwitchBypass.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  f_state         2    0[BANK1 ] int 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  1    wreg      void 
  7743 ;; Registers used:
  7744 ;;		wreg, status,0
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7750 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7752 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7753 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7754 ;;Total ram usage:        4 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    3
  7757 ;; This function calls:
  7758 ;;		Nothing
  7759 ;; This function is called by:
  7760 ;;		_updateSwitchBypass
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _setLongBypassState
  7766  2055                     _setLongBypassState:	
  7767                           
  7768                           ;SwitchBypass.c: 164: if (longBypass_state == f_state) {return;}
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _setLongBypassState: [wreg+status,0]
  7772  2055  0020               	movlb	0	; select bank0
  7773  2056  084C               	movf	_longBypass_state,w	;volatile
  7774  2057  0021               	movlb	1	; select bank1
  7775  2058  00A2               	movwf	??_setLongBypassState^(0+128)
  7776  2059  01A3               	clrf	(??_setLongBypassState^(0+128)+1)
  7777  205A  0821               	movf	(setLongBypassState@f_state+1)^(0+128),w
  7778  205B  0623               	xorwf	(??_setLongBypassState+1)^(0+128),w
  7779  205C  1D03               	skipz
  7780  205D  2860               	goto	u8795
  7781  205E  0820               	movf	setLongBypassState@f_state^(0+128),w
  7782  205F  0622               	xorwf	??_setLongBypassState^(0+128),w
  7783  2060                     u8795:	
  7784  2060  1903               	btfsc	3,2
  7785  2061  0008               	return
  7786                           
  7787                           ;SwitchBypass.c: 165: longBypass_state = f_state;
  7788  2062  0820               	movf	setLongBypassState@f_state^(0+128),w
  7789  2063  00A2               	movwf	??_setLongBypassState^(0+128)
  7790  2064  0822               	movf	??_setLongBypassState^(0+128),w
  7791  2065  0020               	movlb	0	; select bank0
  7792  2066  00CC               	movwf	_longBypass_state	;volatile
  7793                           
  7794                           ;SwitchBypass.c: 166: LATBbits.LATB3 = f_state;
  7795  2067  0021               	movlb	1	; select bank1
  7796  2068  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  7797  2069  0022               	movlb	2	; select bank2
  7798  206A  1C03               	skipc
  7799  206B  118D               	bcf	13,3	;volatile
  7800  206C  1803               	skipnc
  7801  206D  158D               	bsf	13,3	;volatile
  7802                           
  7803                           ;SwitchBypass.c: 167: PORTCbits.RC4 = f_state;
  7804  206E  0021               	movlb	1	; select bank1
  7805  206F  0C20               	rrf	setLongBypassState@f_state^(0+128),w
  7806  2070  0020               	movlb	0	; select bank0
  7807  2071  1C03               	skipc
  7808  2072  120E               	bcf	14,4	;volatile
  7809  2073  1803               	skipnc
  7810  2074  160E               	bsf	14,4	;volatile
  7811  2075  0008               	return
  7812  2076                     __end_of_setLongBypassState:	
  7813                           
  7814                           	psect	text6
  7815  234D                     __ptext6:	
  7816 ;; *************** function _setDoublePressState *****************
  7817 ;; Defined at:
  7818 ;;		line 21 in file "preset_programming.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  f_state         2   24[BANK1 ] int 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;		None
  7823 ;; Return value:  Size  Location     Type
  7824 ;;                  1    wreg      void 
  7825 ;; Registers used:
  7826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7827 ;; Tracked objects:
  7828 ;;		On entry : 0/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: 0/0
  7831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7832 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7834 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7835 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7836 ;;Total ram usage:        4 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:    7
  7839 ;; This function calls:
  7840 ;;		_resetRingLEDs
  7841 ;;		_setPedalMode
  7842 ;;		_setPresetDisplay
  7843 ;;		_showSave
  7844 ;;		_wait_ms
  7845 ;; This function is called by:
  7846 ;;		_updateSwitchBypass
  7847 ;;		_updateSwitchTap
  7848 ;; This function uses a non-reentrant model
  7849 ;;
  7850                           
  7851                           
  7852                           ;psect for function _setDoublePressState
  7853  234D                     _setDoublePressState:	
  7854                           
  7855                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7859  234D  0020               	movlb	0	; select bank0
  7860  234E  084A               	movf	_doubleTap_state,w	;volatile
  7861  234F  0021               	movlb	1	; select bank1
  7862  2350  00BA               	movwf	??_setDoublePressState^(0+128)
  7863  2351  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  7864  2352  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7865  2353  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7866  2354  1D03               	skipz
  7867  2355  2B58               	goto	u8805
  7868  2356  0838               	movf	setDoublePressState@f_state^(0+128),w
  7869  2357  063A               	xorwf	??_setDoublePressState^(0+128),w
  7870  2358                     u8805:	
  7871  2358  1903               	btfsc	3,2
  7872  2359  0008               	return
  7873                           
  7874                           ;preset_programming.c: 23: doubleTap_state = f_state;
  7875  235A  0838               	movf	setDoublePressState@f_state^(0+128),w
  7876  235B  00BA               	movwf	??_setDoublePressState^(0+128)
  7877  235C  083A               	movf	??_setDoublePressState^(0+128),w
  7878  235D  0020               	movlb	0	; select bank0
  7879  235E  00CA               	movwf	_doubleTap_state	;volatile
  7880                           
  7881                           ;preset_programming.c: 24: if (f_state == 1) {
  7882  235F  0021               	movlb	1	; select bank1
  7883  2360  0338               	decf	setDoublePressState@f_state^(0+128),w
  7884  2361  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  7885  2362  1D03               	btfss	3,2
  7886  2363  2B67               	goto	l8406
  7887                           
  7888                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  7889  2364  0022               	movlb	2	; select bank2
  7890  2365  120D               	bcf	13,4	;volatile
  7891                           
  7892                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  7893  2366  128D               	bcf	13,5	;volatile
  7894  2367                     l8406:	
  7895                           
  7896                           ;preset_programming.c: 30: }
  7897                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  7898  2367  0020               	movlb	0	; select bank0
  7899  2368  034A               	decf	_doubleTap_state,w	;volatile
  7900  2369  1D03               	btfss	3,2
  7901  236A  2B83               	goto	l8422
  7902                           
  7903                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  7904  236B  084E               	movf	_presetSaveMode,w
  7905  236C  1D03               	btfss	3,2
  7906  236D  2B78               	goto	l8414
  7907                           
  7908                           ;preset_programming.c: 34: presetSaveMode = 1;
  7909  236E  01CE               	clrf	_presetSaveMode
  7910  236F  0ACE               	incf	_presetSaveMode,f
  7911                           
  7912                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  7913  2370  0022               	movlb	2	; select bank2
  7914  2371  108D               	bcf	13,1	;volatile
  7915                           
  7916                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  7917  2372  0020               	movlb	0	; select bank0
  7918  2373  085E               	movf	_presetChannel,w
  7919  2374  31A2  225E  31A3   	fcall	_setPresetDisplay
  7920                           
  7921                           ;preset_programming.c: 37: } else {
  7922  2377  2B83               	goto	l8422
  7923  2378                     l8414:	
  7924                           
  7925                           ;preset_programming.c: 39: presetSaveMode = 0;
  7926  2378  0020               	movlb	0	; select bank0
  7927  2379  01CE               	clrf	_presetSaveMode
  7928                           
  7929                           ;preset_programming.c: 40: setPedalMode();
  7930  237A  31A0  2098  31A3   	fcall	_setPedalMode
  7931                           
  7932                           ;preset_programming.c: 41: resetRingLEDs();
  7933  237D  31AF  2794  31A3   	fcall	_resetRingLEDs
  7934                           
  7935                           ;preset_programming.c: 42: showSave();
  7936  2380  31AF  2780  31A3   	fcall	_showSave
  7937  2383                     l8422:	
  7938                           
  7939                           ;preset_programming.c: 44: }
  7940                           ;preset_programming.c: 45: }
  7941                           ;preset_programming.c: 47: wait_ms(20);
  7942  2383  3014               	movlw	20
  7943  2384  0021               	movlb	1	; select bank1
  7944  2385  00AC               	movwf	wait_ms@timeSec^(0+128)
  7945  2386  3000               	movlw	0
  7946  2387  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7947  2388  31A1  21F6         	fcall	_wait_ms
  7948  238A  0008               	return
  7949  238B                     __end_of_setDoublePressState:	
  7950                           
  7951                           	psect	text7
  7952  2F80                     __ptext7:	
  7953 ;; *************** function _showSave *****************
  7954 ;; Defined at:
  7955 ;;		line 112 in file "LEDs.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;		None
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7971 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7972 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7973 ;;Total ram usage:        1 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    6
  7976 ;; This function calls:
  7977 ;;		_ring_tactiles
  7978 ;;		_solidring_tactiles
  7979 ;; This function is called by:
  7980 ;;		_setDoublePressState
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function _showSave
  7986  2F80                     _showSave:	
  7987                           
  7988                           ;LEDs.c: 113: suspend_blink = 1;
  7989                           
  7990                           ;incstack = 0
  7991                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7992  2F80  3001               	movlw	1
  7993  2F81  0021               	movlb	1	; select bank1
  7994  2F82  00B7               	movwf	??_showSave^(0+128)
  7995  2F83  0837               	movf	??_showSave^(0+128),w
  7996  2F84  0020               	movlb	0	; select bank0
  7997  2F85  00CF               	movwf	_suspend_blink	;volatile
  7998                           
  7999                           ;LEDs.c: 114: ring_tactiles();
  8000  2F86  31A5  2519  31AF   	fcall	_ring_tactiles
  8001                           
  8002                           ;LEDs.c: 115: ring_tactiles();
  8003  2F89  31A5  2519  31AF   	fcall	_ring_tactiles
  8004                           
  8005                           ;LEDs.c: 116: solidring_tactiles();
  8006  2F8C  31A3  23CB  31AF   	fcall	_solidring_tactiles
  8007                           
  8008                           ;LEDs.c: 117: solidring_tactiles();
  8009  2F8F  31A3  23CB         	fcall	_solidring_tactiles
  8010                           
  8011                           ;LEDs.c: 118: suspend_blink = 0;
  8012  2F91  0020               	movlb	0	; select bank0
  8013  2F92  01CF               	clrf	_suspend_blink	;volatile
  8014  2F93  0008               	return
  8015  2F94                     __end_of_showSave:	
  8016                           
  8017                           	psect	text8
  8018  23CB                     __ptext8:	
  8019 ;; *************** function _solidring_tactiles *****************
  8020 ;; Defined at:
  8021 ;;		line 208 in file "LEDs.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      void 
  8028 ;; Registers used:
  8029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8036 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8037 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8038 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8039 ;;Total ram usage:        3 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    5
  8042 ;; This function calls:
  8043 ;;		_set_leds_bottom
  8044 ;;		_set_leds_top
  8045 ;;		_wait_ms
  8046 ;; This function is called by:
  8047 ;;		_showSave
  8048 ;;		_showBootSequence
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           
  8053                           ;psect for function _solidring_tactiles
  8054  23CB                     _solidring_tactiles:	
  8055                           
  8056                           ;LEDs.c: 209: uint8_t ring_delay = 30;
  8057                           
  8058                           ;incstack = 0
  8059                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8060  23CB  301E               	movlw	30
  8061  23CC  0021               	movlb	1	; select bank1
  8062  23CD  00B2               	movwf	??_solidring_tactiles^(0+128)
  8063  23CE  0832               	movf	??_solidring_tactiles^(0+128),w
  8064  23CF  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8065                           
  8066                           ;LEDs.c: 210: set_leds_top(100, 1);
  8067  23D0  3064               	movlw	100
  8068  23D1  00A0               	movwf	set_leds_top@x^(0+128)
  8069  23D2  3000               	movlw	0
  8070  23D3  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8071  23D4  3001               	movlw	1
  8072  23D5  00A2               	movwf	set_leds_top@ledState^(0+128)
  8073  23D6  3000               	movlw	0
  8074  23D7  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8075  23D8  31A6  265F  31A3   	fcall	_set_leds_top
  8076                           
  8077                           ;LEDs.c: 211: set_leds_bottom(100);
  8078  23DB  3064               	movlw	100
  8079  23DC  0021               	movlb	1	; select bank1
  8080  23DD  00A0               	movwf	set_leds_bottom@x^(0+128)
  8081  23DE  3000               	movlw	0
  8082  23DF  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8083  23E0  31A2  2298  31A3   	fcall	_set_leds_bottom
  8084                           
  8085                           ;LEDs.c: 212: wait_ms(ring_delay);
  8086  23E3  0021               	movlb	1	; select bank1
  8087  23E4  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8088  23E5  00B2               	movwf	??_solidring_tactiles^(0+128)
  8089  23E6  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8090  23E7  0832               	movf	??_solidring_tactiles^(0+128),w
  8091  23E8  00AC               	movwf	wait_ms@timeSec^(0+128)
  8092  23E9  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8093  23EA  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8094  23EB  31A1  21F6  31A3   	fcall	_wait_ms
  8095                           
  8096                           ;LEDs.c: 214: set_leds_top(0, 1);
  8097  23EE  3000               	movlw	0
  8098  23EF  0021               	movlb	1	; select bank1
  8099  23F0  00A0               	movwf	set_leds_top@x^(0+128)
  8100  23F1  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8101  23F2  3001               	movlw	1
  8102  23F3  00A2               	movwf	set_leds_top@ledState^(0+128)
  8103  23F4  3000               	movlw	0
  8104  23F5  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8105  23F6  31A6  265F  31A3   	fcall	_set_leds_top
  8106                           
  8107                           ;LEDs.c: 215: set_leds_bottom(0);
  8108  23F9  3000               	movlw	0
  8109  23FA  0021               	movlb	1	; select bank1
  8110  23FB  00A0               	movwf	set_leds_bottom@x^(0+128)
  8111  23FC  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8112  23FD  31A2  2298  31A3   	fcall	_set_leds_bottom
  8113                           
  8114                           ;LEDs.c: 216: wait_ms(ring_delay);
  8115  2400  0021               	movlb	1	; select bank1
  8116  2401  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8117  2402  00B2               	movwf	??_solidring_tactiles^(0+128)
  8118  2403  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8119  2404  0832               	movf	??_solidring_tactiles^(0+128),w
  8120  2405  00AC               	movwf	wait_ms@timeSec^(0+128)
  8121  2406  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8122  2407  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8123  2408  31A1  21F6         	fcall	_wait_ms
  8124  240A  0008               	return
  8125  240B                     __end_of_solidring_tactiles:	
  8126                           
  8127                           	psect	text9
  8128  2519                     __ptext9:	
  8129 ;; *************** function _ring_tactiles *****************
  8130 ;; Defined at:
  8131 ;;		line 196 in file "LEDs.c"
  8132 ;; Parameters:    Size  Location     Type
  8133 ;;		None
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;  iLed            2   21[BANK1 ] int 
  8136 ;;  iLed            2   19[BANK1 ] int 
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      void 
  8139 ;; Registers used:
  8140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8147 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8148 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8149 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8150 ;;Total ram usage:        5 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; Hardware stack levels required when called:    5
  8153 ;; This function calls:
  8154 ;;		_set_leds_bottom
  8155 ;;		_set_leds_top
  8156 ;;		_wait_ms
  8157 ;; This function is called by:
  8158 ;;		_showSave
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           
  8163                           ;psect for function _ring_tactiles
  8164  2519                     _ring_tactiles:	
  8165                           
  8166                           ;LEDs.c: 197: for (int iLed = 1; iLed < 7; iLed++) {
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8170  2519  3001               	movlw	1
  8171  251A  0021               	movlb	1	; select bank1
  8172  251B  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8173  251C  3000               	movlw	0
  8174  251D  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8175  251E  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8176  251F  3A80               	xorlw	128
  8177  2520  00B2               	movwf	??_ring_tactiles^(0+128)
  8178  2521  3080               	movlw	128
  8179  2522  0232               	subwf	??_ring_tactiles^(0+128),w
  8180  2523  1D03               	skipz
  8181  2524  2D27               	goto	u8305
  8182  2525  3007               	movlw	7
  8183  2526  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8184  2527                     u8305:	
  8185  2527  1803               	btfsc	3,0
  8186  2528  2D4D               	goto	l7932
  8187  2529                     l7924:	
  8188                           
  8189                           ;LEDs.c: 198: set_leds_top(iLed, 1);
  8190  2529  0021               	movlb	1	; select bank1
  8191  252A  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8192  252B  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8193  252C  0833               	movf	ring_tactiles@iLed^(0+128),w
  8194  252D  00A0               	movwf	set_leds_top@x^(0+128)
  8195  252E  3001               	movlw	1
  8196  252F  00A2               	movwf	set_leds_top@ledState^(0+128)
  8197  2530  3000               	movlw	0
  8198  2531  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8199  2532  31A6  265F  31A5   	fcall	_set_leds_top
  8200                           
  8201                           ;LEDs.c: 199: wait_ms(5);
  8202  2535  3005               	movlw	5
  8203  2536  0021               	movlb	1	; select bank1
  8204  2537  00AC               	movwf	wait_ms@timeSec^(0+128)
  8205  2538  3000               	movlw	0
  8206  2539  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8207  253A  31A1  21F6  31A5   	fcall	_wait_ms
  8208  253D  3001               	movlw	1
  8209  253E  0021               	movlb	1	; select bank1
  8210  253F  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8211  2540  3000               	movlw	0
  8212  2541  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8213  2542  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8214  2543  3A80               	xorlw	128
  8215  2544  00B2               	movwf	??_ring_tactiles^(0+128)
  8216  2545  3080               	movlw	128
  8217  2546  0232               	subwf	??_ring_tactiles^(0+128),w
  8218  2547  1D03               	skipz
  8219  2548  2D4B               	goto	u8315
  8220  2549  3007               	movlw	7
  8221  254A  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8222  254B                     u8315:	
  8223  254B  1C03               	skipc
  8224  254C  2D29               	goto	l7924
  8225  254D                     l7932:	
  8226                           
  8227                           ;LEDs.c: 200: }
  8228                           ;LEDs.c: 201: for (int iLed = 5; iLed > -1; iLed--) {
  8229  254D  3005               	movlw	5
  8230  254E  0021               	movlb	1	; select bank1
  8231  254F  00B5               	movwf	ring_tactiles@iLed_1516^(0+128)
  8232  2550  3000               	movlw	0
  8233  2551  00B6               	movwf	(ring_tactiles@iLed_1516^(0+128)+1)
  8234  2552                     L4:	
  8235  2552  1BB6               	btfsc	(ring_tactiles@iLed_1516+1)^(0+128),7
  8236  2553  0008               	return
  8237                           
  8238                           ;LEDs.c: 202: set_leds_bottom(iLed);
  8239  2554  0836               	movf	(ring_tactiles@iLed_1516+1)^(0+128),w
  8240  2555  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8241  2556  0835               	movf	ring_tactiles@iLed_1516^(0+128),w
  8242  2557  00A0               	movwf	set_leds_bottom@x^(0+128)
  8243  2558  31A2  2298  31A5   	fcall	_set_leds_bottom
  8244                           
  8245                           ;LEDs.c: 203: wait_ms(5);
  8246  255B  3005               	movlw	5
  8247  255C  0021               	movlb	1	; select bank1
  8248  255D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8249  255E  3000               	movlw	0
  8250  255F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8251  2560  31A1  21F6  31A5   	fcall	_wait_ms
  8252  2563  30FF               	movlw	255
  8253  2564  0021               	movlb	1	; select bank1
  8254  2565  07B5               	addwf	ring_tactiles@iLed_1516^(0+128),f
  8255  2566  30FF               	movlw	255
  8256  2567  3DB6               	addwfc	(ring_tactiles@iLed_1516+1)^(0+128),f
  8257  2568  2D52               	goto	L4
  8258  2569                     __end_of_ring_tactiles:	
  8259                           
  8260                           	psect	text10
  8261  2098                     __ptext10:	
  8262 ;; *************** function _setPedalMode *****************
  8263 ;; Defined at:
  8264 ;;		line 119 in file "tactiles.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;		None
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;		None
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  1    wreg      void 
  8271 ;; Registers used:
  8272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8282 ;;Total ram usage:        0 bytes
  8283 ;; Hardware stack levels used:    1
  8284 ;; Hardware stack levels required when called:    5
  8285 ;; This function calls:
  8286 ;;		_resetRingLEDs
  8287 ;;		_setExpressionDisplay
  8288 ;;		_setPresetDisplay
  8289 ;; This function is called by:
  8290 ;;		_setDoublePressState
  8291 ;;		_update_mode
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           
  8296                           ;psect for function _setPedalMode
  8297  2098                     _setPedalMode:	
  8298                           
  8299                           ;tactiles.c: 120: switch (mode2_state) {
  8300                           
  8301                           ;incstack = 0
  8302                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8303  2098  28AE               	goto	l8132
  8304  2099                     l990:	
  8305                           ;tactiles.c: 121: case 0:
  8306                           
  8307                           
  8308                           ;tactiles.c: 122: LATBbits.LATB1 = 0;
  8309  2099  0022               	movlb	2	; select bank2
  8310  209A  108D               	bcf	13,1	;volatile
  8311                           
  8312                           ;tactiles.c: 123: LATBbits.LATB0 = 0;
  8313  209B  100D               	bcf	13,0	;volatile
  8314                           
  8315                           ;tactiles.c: 124: resetRingLEDs();
  8316  209C  31AF  2794         	fcall	_resetRingLEDs
  8317                           
  8318                           ;tactiles.c: 125: break;
  8319  209E  0008               	return
  8320  209F                     l992:	
  8321                           ;tactiles.c: 126: case 1:
  8322                           
  8323                           
  8324                           ;tactiles.c: 127: LATBbits.LATB1 = 0;
  8325  209F  0022               	movlb	2	; select bank2
  8326  20A0  108D               	bcf	13,1	;volatile
  8327                           
  8328                           ;tactiles.c: 128: LATBbits.LATB0 = 1;
  8329  20A1  140D               	bsf	13,0	;volatile
  8330                           
  8331                           ;tactiles.c: 129: setPresetDisplay(presetChannel);
  8332  20A2  0020               	movlb	0	; select bank0
  8333  20A3  085E               	movf	_presetChannel,w
  8334  20A4  31A2  225E         	fcall	_setPresetDisplay
  8335                           
  8336                           ;tactiles.c: 130: break;
  8337  20A6  0008               	return
  8338  20A7                     l993:	
  8339                           ;tactiles.c: 131: case 2:
  8340                           
  8341                           
  8342                           ;tactiles.c: 132: LATBbits.LATB1 = 1;
  8343  20A7  0022               	movlb	2	; select bank2
  8344  20A8  148D               	bsf	13,1	;volatile
  8345                           
  8346                           ;tactiles.c: 133: LATBbits.LATB0 = 0;
  8347  20A9  100D               	bcf	13,0	;volatile
  8348                           
  8349                           ;tactiles.c: 134: setExpressionDisplay(expressionChannel);
  8350  20AA  086F               	movf	_expressionChannel^(0+256),w
  8351  20AB  31A0  2001         	fcall	_setExpressionDisplay
  8352                           
  8353                           ;tactiles.c: 136: }
  8354                           
  8355                           ;tactiles.c: 135: break;
  8356  20AD  0008               	return
  8357  20AE                     l8132:	
  8358  20AE  0020               	movlb	0	; select bank0
  8359  20AF  084D               	movf	_mode2_state,w
  8360                           
  8361                           ; Switch size 1, requested type "space"
  8362                           ; Number of cases is 3, Range of values is 0 to 2
  8363                           ; switch strategies available:
  8364                           ; Name         Instructions Cycles
  8365                           ; simple_byte           10     6 (average)
  8366                           ; direct_byte           12     6 (fixed)
  8367                           ; jumptable            260     6 (fixed)
  8368                           ;	Chosen strategy is simple_byte
  8369  20B0  3A00               	xorlw	0	; case 0
  8370  20B1  1903               	skipnz
  8371  20B2  2899               	goto	l990
  8372  20B3  3A01               	xorlw	1	; case 1
  8373  20B4  1903               	skipnz
  8374  20B5  289F               	goto	l992
  8375  20B6  3A03               	xorlw	3	; case 2
  8376  20B7  1903               	skipnz
  8377  20B8  28A7               	goto	l993
  8378  20B9  28BA               	goto	l994
  8379  20BA                     l994:	
  8380  20BA  0008               	return
  8381  20BB                     __end_of_setPedalMode:	
  8382                           
  8383                           	psect	text11
  8384  225E                     __ptext11:	
  8385 ;; *************** function _setPresetDisplay *****************
  8386 ;; Defined at:
  8387 ;;		line 51 in file "preset_programming.c"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;  ledChannel      1    wreg     unsigned char 
  8390 ;; Auto vars:     Size  Location     Type
  8391 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  1    wreg      void 
  8394 ;; Registers used:
  8395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8402 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8403 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8404 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8405 ;;Total ram usage:        3 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; Hardware stack levels required when called:    4
  8408 ;; This function calls:
  8409 ;;		_set_leds_bottom
  8410 ;;		_set_leds_top
  8411 ;; This function is called by:
  8412 ;;		_setPedalMode
  8413 ;;		_setDoublePressState
  8414 ;;		_update_selectMode
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           
  8419                           ;psect for function _setPresetDisplay
  8420  225E                     _setPresetDisplay:	
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8424                           ;setPresetDisplay@ledChannel stored from wreg
  8425  225E  0021               	movlb	1	; select bank1
  8426  225F  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8427                           
  8428                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8429  2260  3006               	movlw	6
  8430  2261  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8431  2262  1803               	skipnc
  8432  2263  2A7A               	goto	l7952
  8433                           
  8434                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8435  2264  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8436  2265  00A4               	movwf	??_setPresetDisplay^(0+128)
  8437  2266  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8438  2267  0824               	movf	??_setPresetDisplay^(0+128),w
  8439  2268  00A0               	movwf	set_leds_top@x^(0+128)
  8440  2269  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8441  226A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8442  226B  3001               	movlw	1
  8443  226C  00A2               	movwf	set_leds_top@ledState^(0+128)
  8444  226D  3000               	movlw	0
  8445  226E  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8446  226F  31A6  265F  31A2   	fcall	_set_leds_top
  8447                           
  8448                           ;preset_programming.c: 54: set_leds_bottom(6);
  8449  2272  3006               	movlw	6
  8450  2273  0021               	movlb	1	; select bank1
  8451  2274  00A0               	movwf	set_leds_bottom@x^(0+128)
  8452  2275  3000               	movlw	0
  8453  2276  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8454  2277  31A2  2298         	fcall	_set_leds_bottom
  8455                           
  8456                           ;preset_programming.c: 55: } else {
  8457  2279  0008               	return
  8458  227A                     l7952:	
  8459                           
  8460                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8461  227A  3006               	movlw	6
  8462  227B  0021               	movlb	1	; select bank1
  8463  227C  00A0               	movwf	set_leds_top@x^(0+128)
  8464  227D  3000               	movlw	0
  8465  227E  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8466  227F  3001               	movlw	1
  8467  2280  00A2               	movwf	set_leds_top@ledState^(0+128)
  8468  2281  3000               	movlw	0
  8469  2282  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8470  2283  31A6  265F  31A2   	fcall	_set_leds_top
  8471                           
  8472                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8473  2286  0021               	movlb	1	; select bank1
  8474  2287  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8475  2288  00A4               	movwf	??_setPresetDisplay^(0+128)
  8476  2289  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8477  228A  09A4               	comf	??_setPresetDisplay^(0+128),f
  8478  228B  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8479  228C  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8480  228D  1903               	skipnz
  8481  228E  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8482  228F  0824               	movf	??_setPresetDisplay^(0+128),w
  8483  2290  3E0B               	addlw	11
  8484  2291  00A0               	movwf	set_leds_bottom@x^(0+128)
  8485  2292  3000               	movlw	0
  8486  2293  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8487  2294  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8488  2295  31A2  2298         	fcall	_set_leds_bottom
  8489  2297  0008               	return
  8490  2298                     __end_of_setPresetDisplay:	
  8491                           
  8492                           	psect	text12
  8493  2001                     __ptext12:	
  8494 ;; *************** function _setExpressionDisplay *****************
  8495 ;; Defined at:
  8496 ;;		line 66 in file "preset_programming.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  ledChannel      1    wreg     unsigned char 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8511 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8512 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8513 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8514 ;;Total ram usage:        3 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    4
  8517 ;; This function calls:
  8518 ;;		_set_leds_bottom
  8519 ;;		_set_leds_top
  8520 ;; This function is called by:
  8521 ;;		_setPedalMode
  8522 ;;		_update_selectMode
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function _setExpressionDisplay
  8528  2001                     _setExpressionDisplay:	
  8529                           
  8530                           ;incstack = 0
  8531                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8532                           ;setExpressionDisplay@ledChannel stored from wreg
  8533  2001  0021               	movlb	1	; select bank1
  8534  2002  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8535                           
  8536                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8537  2003  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8538  2004  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8539  2005  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8540  2006  0824               	movf	??_setExpressionDisplay^(0+128),w
  8541  2007  00A0               	movwf	set_leds_top@x^(0+128)
  8542  2008  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8543  2009  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8544  200A  3001               	movlw	1
  8545  200B  00A2               	movwf	set_leds_top@ledState^(0+128)
  8546  200C  3000               	movlw	0
  8547  200D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8548  200E  31A6  265F  31A0   	fcall	_set_leds_top
  8549                           
  8550                           ;preset_programming.c: 68: set_leds_bottom(6);
  8551  2011  3006               	movlw	6
  8552  2012  0021               	movlb	1	; select bank1
  8553  2013  00A0               	movwf	set_leds_bottom@x^(0+128)
  8554  2014  3000               	movlw	0
  8555  2015  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8556  2016  31A2  2298         	fcall	_set_leds_bottom
  8557  2018  0008               	return
  8558  2019                     __end_of_setExpressionDisplay:	
  8559                           
  8560                           	psect	text13
  8561  2F94                     __ptext13:	
  8562 ;; *************** function _resetRingLEDs *****************
  8563 ;; Defined at:
  8564 ;;		line 61 in file "preset_programming.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;		None
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  1    wreg      void 
  8571 ;; Registers used:
  8572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8582 ;;Total ram usage:        0 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    4
  8585 ;; This function calls:
  8586 ;;		_set_leds_bottom
  8587 ;;		_set_leds_top
  8588 ;; This function is called by:
  8589 ;;		_setPedalMode
  8590 ;;		_setDoublePressState
  8591 ;;		_update_mode
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _resetRingLEDs
  8597  2F94                     _resetRingLEDs:	
  8598                           
  8599                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8603  2F94  0020               	movlb	0	; select bank0
  8604  2F95  085A               	movf	_top_push_state+1,w
  8605  2F96  0021               	movlb	1	; select bank1
  8606  2F97  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8607  2F98  0020               	movlb	0	; select bank0
  8608  2F99  0859               	movf	_top_push_state,w
  8609  2F9A  0021               	movlb	1	; select bank1
  8610  2F9B  00A0               	movwf	set_leds_top@x^(0+128)
  8611  2F9C  3001               	movlw	1
  8612  2F9D  00A2               	movwf	set_leds_top@ledState^(0+128)
  8613  2F9E  3000               	movlw	0
  8614  2F9F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8615  2FA0  31A6  265F  31AF   	fcall	_set_leds_top
  8616                           
  8617                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8618  2FA3  0020               	movlb	0	; select bank0
  8619  2FA4  0856               	movf	_bottom_push_state+1,w
  8620  2FA5  0021               	movlb	1	; select bank1
  8621  2FA6  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8622  2FA7  0020               	movlb	0	; select bank0
  8623  2FA8  0855               	movf	_bottom_push_state,w
  8624  2FA9  0021               	movlb	1	; select bank1
  8625  2FAA  00A0               	movwf	set_leds_bottom@x^(0+128)
  8626  2FAB  31A2  2298         	fcall	_set_leds_bottom
  8627  2FAD  0008               	return
  8628  2FAE                     __end_of_resetRingLEDs:	
  8629                           
  8630                           	psect	text14
  8631  0DDD                     __ptext14:	
  8632 ;; *************** function _updateModulationArray *****************
  8633 ;; Defined at:
  8634 ;;		line 44 in file "modulation.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;		None
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;  thisAngle       2   56[BANK2 ] int 
  8639 ;;  iAngle          1   58[BANK2 ] unsigned char 
  8640 ;;  subDiv          2   54[BANK2 ] int 
  8641 ;;  angleFactor     2   52[BANK2 ] int 
  8642 ;; Return value:  Size  Location     Type
  8643 ;;                  1    wreg      void 
  8644 ;; Registers used:
  8645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8646 ;; Tracked objects:
  8647 ;;		On entry : 0/0
  8648 ;;		On exit  : 0/0
  8649 ;;		Unchanged: 0/0
  8650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8652 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8653 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8654 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8655 ;;Total ram usage:       11 bytes
  8656 ;; Hardware stack levels used:    1
  8657 ;; Hardware stack levels required when called:    7
  8658 ;; This function calls:
  8659 ;;		___awdiv
  8660 ;;		___awtoft
  8661 ;;		___wmul
  8662 ;;		_getModulationSubdivision
  8663 ;;		_modSaw
  8664 ;;		_modSawRev
  8665 ;;		_modSin
  8666 ;;		_modSquare
  8667 ;;		_modTri
  8668 ;; This function is called by:
  8669 ;;		_main
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           
  8674                           ;psect for function _updateModulationArray
  8675  0DDD                     _updateModulationArray:	
  8676                           
  8677                           ;modulation.c: 45: int subDiv = getModulationSubdivision();
  8678                           
  8679                           ;incstack = 0
  8680                           ; Regs used in _updateModulationArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8681  0DDD  31A1  2196  318D   	fcall	_getModulationSubdivision
  8682  0DE0  0021               	movlb	1	; select bank1
  8683  0DE1  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
  8684  0DE2  0022               	movlb	2	; select bank2
  8685  0DE3  00D7               	movwf	(updateModulationArray@subDiv+1)^(0+256)
  8686  0DE4  0021               	movlb	1	; select bank1
  8687  0DE5  0820               	movf	?_getModulationSubdivision^(0+128),w
  8688  0DE6  0022               	movlb	2	; select bank2
  8689  0DE7  00D6               	movwf	updateModulationArray@subDiv^(0+256)
  8690                           
  8691                           ;modulation.c: 46: if (modArray[120] == bottom_push_state && modArray[121] == symmetry &
      +                          & modArray[122] == subDiv) {
  8692  0DE8  307A               	movlw	122
  8693  0DE9  0086               	movwf	6
  8694  0DEA  3024               	movlw	36
  8695  0DEB  0087               	movwf	7
  8696  0DEC  3F40               	moviw [0]fsr1
  8697  0DED  00D0               	movwf	??_updateModulationArray^(0+256)
  8698  0DEE  3F41               	moviw [1]fsr1
  8699  0DEF  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8700  0DF0  0020               	movlb	0	; select bank0
  8701  0DF1  0856               	movf	_bottom_push_state+1,w
  8702  0DF2  0022               	movlb	2	; select bank2
  8703  0DF3  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8704  0DF4  1D03               	skipz
  8705  0DF5  2DFA               	goto	u9245
  8706  0DF6  0020               	movlb	0	; select bank0
  8707  0DF7  0855               	movf	_bottom_push_state,w
  8708  0DF8  0022               	movlb	2	; select bank2
  8709  0DF9  0650               	xorwf	??_updateModulationArray^(0+256),w
  8710  0DFA                     u9245:	
  8711  0DFA  1D03               	skipz
  8712  0DFB  2E20               	goto	l8692
  8713  0DFC  307C               	movlw	124
  8714  0DFD  0086               	movwf	6
  8715  0DFE  3024               	movlw	36
  8716  0DFF  0087               	movwf	7
  8717  0E00  3F40               	moviw [0]fsr1
  8718  0E01  00D0               	movwf	??_updateModulationArray^(0+256)
  8719  0E02  3F41               	moviw [1]fsr1
  8720  0E03  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8721  0E04  0023               	movlb	3	; select bank3
  8722  0E05  085D               	movf	(_symmetry+1)^(0+384),w
  8723  0E06  0022               	movlb	2	; select bank2
  8724  0E07  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8725  0E08  1D03               	skipz
  8726  0E09  2E0E               	goto	u9255
  8727  0E0A  0023               	movlb	3	; select bank3
  8728  0E0B  085C               	movf	_symmetry^(0+384),w
  8729  0E0C  0022               	movlb	2	; select bank2
  8730  0E0D  0650               	xorwf	??_updateModulationArray^(0+256),w
  8731  0E0E                     u9255:	
  8732  0E0E  1D03               	skipz
  8733  0E0F  2E20               	goto	l8692
  8734  0E10  307E               	movlw	126
  8735  0E11  0086               	movwf	6
  8736  0E12  3024               	movlw	36
  8737  0E13  0087               	movwf	7
  8738  0E14  3F40               	moviw [0]fsr1
  8739  0E15  00D0               	movwf	??_updateModulationArray^(0+256)
  8740  0E16  3F41               	moviw [1]fsr1
  8741  0E17  00D1               	movwf	(??_updateModulationArray^(0+256)+1)
  8742  0E18  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  8743  0E19  0651               	xorwf	(??_updateModulationArray+1)^(0+256),w
  8744  0E1A  1D03               	skipz
  8745  0E1B  2E1E               	goto	u9265
  8746  0E1C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  8747  0E1D  0650               	xorwf	??_updateModulationArray^(0+256),w
  8748  0E1E                     u9265:	
  8749  0E1E  1903               	btfsc	3,2
  8750  0E1F  0008               	return
  8751  0E20                     l8692:	
  8752                           ;modulation.c: 48: return;
  8753                           
  8754                           
  8755                           ;modulation.c: 49: }
  8756                           ;modulation.c: 51: int angleFactor = 360/subDiv;
  8757  0E20  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  8758  0E21  0021               	movlb	1	; select bank1
  8759  0E22  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  8760  0E23  0022               	movlb	2	; select bank2
  8761  0E24  0856               	movf	updateModulationArray@subDiv^(0+256),w
  8762  0E25  0021               	movlb	1	; select bank1
  8763  0E26  00A0               	movwf	___awdiv@divisor^(0+128)
  8764  0E27  3068               	movlw	104
  8765  0E28  00A2               	movwf	___awdiv@dividend^(0+128)
  8766  0E29  3001               	movlw	1
  8767  0E2A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  8768  0E2B  31A5  25BA  318D   	fcall	___awdiv
  8769  0E2E  0021               	movlb	1	; select bank1
  8770  0E2F  0821               	movf	(?___awdiv+1)^(0+128),w
  8771  0E30  0022               	movlb	2	; select bank2
  8772  0E31  00D5               	movwf	(updateModulationArray@angleFactor+1)^(0+256)
  8773  0E32  0021               	movlb	1	; select bank1
  8774  0E33  0820               	movf	?___awdiv^(0+128),w
  8775  0E34  0022               	movlb	2	; select bank2
  8776  0E35  00D4               	movwf	updateModulationArray@angleFactor^(0+256)
  8777                           
  8778                           ;modulation.c: 52: for (char iAngle = 0; iAngle < subDiv; iAngle++) {
  8779  0E36  01DA               	clrf	updateModulationArray@iAngle^(0+256)
  8780  0E37                     l8716:	
  8781  0E37  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  8782  0E38  3A80               	xorlw	128
  8783  0E39  3C80               	sublw	128
  8784  0E3A  1D03               	skipz
  8785  0E3B  2E3E               	goto	u9275
  8786  0E3C  0856               	movf	updateModulationArray@subDiv^(0+256),w
  8787  0E3D  025A               	subwf	updateModulationArray@iAngle^(0+256),w
  8788  0E3E                     u9275:	
  8789  0E3E  1803               	btfsc	3,0
  8790  0E3F  2FE4               	goto	l8718
  8791                           
  8792                           ;modulation.c: 53: int thisAngle = angleFactor * iAngle;
  8793  0E40  0022               	movlb	2	; select bank2
  8794  0E41  085A               	movf	updateModulationArray@iAngle^(0+256),w
  8795  0E42  00D0               	movwf	??_updateModulationArray^(0+256)
  8796  0E43  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8797  0E44  0850               	movf	??_updateModulationArray^(0+256),w
  8798  0E45  00AE               	movwf	___wmul@multiplier^(0+256)
  8799  0E46  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8800  0E47  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
  8801  0E48  0855               	movf	(updateModulationArray@angleFactor+1)^(0+256),w
  8802  0E49  00B1               	movwf	(___wmul@multiplicand+1)^(0+256)
  8803  0E4A  0854               	movf	updateModulationArray@angleFactor^(0+256),w
  8804  0E4B  00B0               	movwf	___wmul@multiplicand^(0+256)
  8805  0E4C  31AF  27C8  318D   	fcall	___wmul
  8806  0E4F  0022               	movlb	2	; select bank2
  8807  0E50  082F               	movf	(?___wmul+1)^(0+256),w
  8808  0E51  00D9               	movwf	(updateModulationArray@thisAngle+1)^(0+256)
  8809  0E52  082E               	movf	?___wmul^(0+256),w
  8810  0E53  00D8               	movwf	updateModulationArray@thisAngle^(0+256)
  8811                           
  8812                           ;modulation.c: 54: switch (bottom_push_state) {
  8813  0E54  2FC7               	goto	l8712
  8814  0E55                     l8698:	
  8815                           ;modulation.c: 55: case 1:
  8816                           
  8817                           
  8818                           ;modulation.c: 56: modArray[iAngle] = modSin(thisAngle, symmetry);
  8819  0E55  0022               	movlb	2	; select bank2
  8820  0E56  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8821  0E57  0021               	movlb	1	; select bank1
  8822  0E58  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8823  0E59  0022               	movlb	2	; select bank2
  8824  0E5A  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  8825  0E5B  0021               	movlb	1	; select bank1
  8826  0E5C  00A8               	movwf	___awtoft@c^(0+128)
  8827  0E5D  31A0  2076  318D   	fcall	___awtoft
  8828  0E60  0021               	movlb	1	; select bank1
  8829  0E61  0828               	movf	?___awtoft^(0+128),w
  8830  0E62  0022               	movlb	2	; select bank2
  8831  0E63  00B4               	movwf	modSin@angle^(0+256)
  8832  0E64  0021               	movlb	1	; select bank1
  8833  0E65  0829               	movf	(?___awtoft+1)^(0+128),w
  8834  0E66  0022               	movlb	2	; select bank2
  8835  0E67  00B5               	movwf	(modSin@angle+1)^(0+256)
  8836  0E68  0021               	movlb	1	; select bank1
  8837  0E69  082A               	movf	(?___awtoft+2)^(0+128),w
  8838  0E6A  0022               	movlb	2	; select bank2
  8839  0E6B  00B6               	movwf	(modSin@angle+2)^(0+256)
  8840  0E6C  0023               	movlb	3	; select bank3
  8841  0E6D  085D               	movf	(_symmetry+1)^(0+384),w
  8842  0E6E  0021               	movlb	1	; select bank1
  8843  0E6F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8844  0E70  0023               	movlb	3	; select bank3
  8845  0E71  085C               	movf	_symmetry^(0+384),w
  8846  0E72  0021               	movlb	1	; select bank1
  8847  0E73  00A8               	movwf	___awtoft@c^(0+128)
  8848  0E74  31A0  2076  318D   	fcall	___awtoft
  8849  0E77  0021               	movlb	1	; select bank1
  8850  0E78  0828               	movf	?___awtoft^(0+128),w
  8851  0E79  0022               	movlb	2	; select bank2
  8852  0E7A  00B7               	movwf	modSin@inflection^(0+256)
  8853  0E7B  0021               	movlb	1	; select bank1
  8854  0E7C  0829               	movf	(?___awtoft+1)^(0+128),w
  8855  0E7D  0022               	movlb	2	; select bank2
  8856  0E7E  00B8               	movwf	(modSin@inflection+1)^(0+256)
  8857  0E7F  0021               	movlb	1	; select bank1
  8858  0E80  082A               	movf	(?___awtoft+2)^(0+128),w
  8859  0E81  0022               	movlb	2	; select bank2
  8860  0E82  00B9               	movwf	(modSin@inflection+2)^(0+256)
  8861  0E83  3196  2654  318D   	fcall	_modSin
  8862  0E86  0022               	movlb	2	; select bank2
  8863  0E87  085A               	movf	updateModulationArray@iAngle^(0+256),w
  8864  0E88  00D0               	movwf	??_updateModulationArray^(0+256)
  8865  0E89  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8866  0E8A  35D0               	lslf	??_updateModulationArray^(0+256),f
  8867  0E8B  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8868  0E8C  308A               	movlw	138
  8869  0E8D  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8870  0E8E  3023               	movlw	35
  8871  0E8F  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8872  0E90  0850               	movf	??_updateModulationArray^(0+256),w
  8873  0E91  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  8874  0E92  0086               	movwf	6
  8875  0E93  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8876  0E94  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  8877  0E95  0087               	movwf	7
  8878  0E96  0834               	movf	?_modSin^(0+256),w
  8879  0E97  3FC0               	movwi [0]fsr1
  8880  0E98  0835               	movf	(?_modSin+1)^(0+256),w
  8881  0E99  3FC1               	movwi [1]fsr1
  8882                           
  8883                           ;modulation.c: 57: break;
  8884  0E9A  2FDE               	goto	l8714
  8885  0E9B                     l8700:	
  8886                           ;modulation.c: 58: case 2:
  8887                           
  8888                           
  8889                           ;modulation.c: 59: modArray[iAngle] = modTri(thisAngle, symmetry);
  8890  0E9B  0022               	movlb	2	; select bank2
  8891  0E9C  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8892  0E9D  0021               	movlb	1	; select bank1
  8893  0E9E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8894  0E9F  0022               	movlb	2	; select bank2
  8895  0EA0  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  8896  0EA1  0021               	movlb	1	; select bank1
  8897  0EA2  00A8               	movwf	___awtoft@c^(0+128)
  8898  0EA3  31A0  2076  318D   	fcall	___awtoft
  8899  0EA6  0021               	movlb	1	; select bank1
  8900  0EA7  0828               	movf	?___awtoft^(0+128),w
  8901  0EA8  0022               	movlb	2	; select bank2
  8902  0EA9  00AE               	movwf	modTri@angle^(0+256)
  8903  0EAA  0021               	movlb	1	; select bank1
  8904  0EAB  0829               	movf	(?___awtoft+1)^(0+128),w
  8905  0EAC  0022               	movlb	2	; select bank2
  8906  0EAD  00AF               	movwf	(modTri@angle+1)^(0+256)
  8907  0EAE  0021               	movlb	1	; select bank1
  8908  0EAF  082A               	movf	(?___awtoft+2)^(0+128),w
  8909  0EB0  0022               	movlb	2	; select bank2
  8910  0EB1  00B0               	movwf	(modTri@angle+2)^(0+256)
  8911  0EB2  0023               	movlb	3	; select bank3
  8912  0EB3  085D               	movf	(_symmetry+1)^(0+384),w
  8913  0EB4  0021               	movlb	1	; select bank1
  8914  0EB5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8915  0EB6  0023               	movlb	3	; select bank3
  8916  0EB7  085C               	movf	_symmetry^(0+384),w
  8917  0EB8  0021               	movlb	1	; select bank1
  8918  0EB9  00A8               	movwf	___awtoft@c^(0+128)
  8919  0EBA  31A0  2076  318D   	fcall	___awtoft
  8920  0EBD  0021               	movlb	1	; select bank1
  8921  0EBE  0828               	movf	?___awtoft^(0+128),w
  8922  0EBF  0022               	movlb	2	; select bank2
  8923  0EC0  00B1               	movwf	modTri@inflection^(0+256)
  8924  0EC1  0021               	movlb	1	; select bank1
  8925  0EC2  0829               	movf	(?___awtoft+1)^(0+128),w
  8926  0EC3  0022               	movlb	2	; select bank2
  8927  0EC4  00B2               	movwf	(modTri@inflection+1)^(0+256)
  8928  0EC5  0021               	movlb	1	; select bank1
  8929  0EC6  082A               	movf	(?___awtoft+2)^(0+128),w
  8930  0EC7  0022               	movlb	2	; select bank2
  8931  0EC8  00B3               	movwf	(modTri@inflection+2)^(0+256)
  8932  0EC9  318B  23E2  318D   	fcall	_modTri
  8933  0ECC  0022               	movlb	2	; select bank2
  8934  0ECD  085A               	movf	updateModulationArray@iAngle^(0+256),w
  8935  0ECE  00D0               	movwf	??_updateModulationArray^(0+256)
  8936  0ECF  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  8937  0ED0  35D0               	lslf	??_updateModulationArray^(0+256),f
  8938  0ED1  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  8939  0ED2  308A               	movlw	138
  8940  0ED3  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  8941  0ED4  3023               	movlw	35
  8942  0ED5  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  8943  0ED6  0850               	movf	??_updateModulationArray^(0+256),w
  8944  0ED7  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  8945  0ED8  0086               	movwf	6
  8946  0ED9  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  8947  0EDA  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  8948  0EDB  0087               	movwf	7
  8949  0EDC  082E               	movf	?_modTri^(0+256),w
  8950  0EDD  3FC0               	movwi [0]fsr1
  8951  0EDE  082F               	movf	(?_modTri+1)^(0+256),w
  8952  0EDF  3FC1               	movwi [1]fsr1
  8953                           
  8954                           ;modulation.c: 60: break;
  8955  0EE0  2FDE               	goto	l8714
  8956  0EE1                     l8702:	
  8957                           ;modulation.c: 61: case 3:
  8958                           
  8959                           
  8960                           ;modulation.c: 62: modArray[iAngle] = modSquare(thisAngle, symmetry);
  8961  0EE1  0022               	movlb	2	; select bank2
  8962  0EE2  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  8963  0EE3  0021               	movlb	1	; select bank1
  8964  0EE4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8965  0EE5  0022               	movlb	2	; select bank2
  8966  0EE6  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  8967  0EE7  0021               	movlb	1	; select bank1
  8968  0EE8  00A8               	movwf	___awtoft@c^(0+128)
  8969  0EE9  31A0  2076  318D   	fcall	___awtoft
  8970  0EEC  0021               	movlb	1	; select bank1
  8971  0EED  0828               	movf	?___awtoft^(0+128),w
  8972  0EEE  0022               	movlb	2	; select bank2
  8973  0EEF  00C8               	movwf	modSquare@angle^(0+256)
  8974  0EF0  0021               	movlb	1	; select bank1
  8975  0EF1  0829               	movf	(?___awtoft+1)^(0+128),w
  8976  0EF2  0022               	movlb	2	; select bank2
  8977  0EF3  00C9               	movwf	(modSquare@angle+1)^(0+256)
  8978  0EF4  0021               	movlb	1	; select bank1
  8979  0EF5  082A               	movf	(?___awtoft+2)^(0+128),w
  8980  0EF6  0022               	movlb	2	; select bank2
  8981  0EF7  00CA               	movwf	(modSquare@angle+2)^(0+256)
  8982  0EF8  0023               	movlb	3	; select bank3
  8983  0EF9  085D               	movf	(_symmetry+1)^(0+384),w
  8984  0EFA  0021               	movlb	1	; select bank1
  8985  0EFB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8986  0EFC  0023               	movlb	3	; select bank3
  8987  0EFD  085C               	movf	_symmetry^(0+384),w
  8988  0EFE  0021               	movlb	1	; select bank1
  8989  0EFF  00A8               	movwf	___awtoft@c^(0+128)
  8990  0F00  31A0  2076  318D   	fcall	___awtoft
  8991  0F03  0021               	movlb	1	; select bank1
  8992  0F04  0828               	movf	?___awtoft^(0+128),w
  8993  0F05  0022               	movlb	2	; select bank2
  8994  0F06  00CB               	movwf	modSquare@inflection^(0+256)
  8995  0F07  0021               	movlb	1	; select bank1
  8996  0F08  0829               	movf	(?___awtoft+1)^(0+128),w
  8997  0F09  0022               	movlb	2	; select bank2
  8998  0F0A  00CC               	movwf	(modSquare@inflection+1)^(0+256)
  8999  0F0B  0021               	movlb	1	; select bank1
  9000  0F0C  082A               	movf	(?___awtoft+2)^(0+128),w
  9001  0F0D  0022               	movlb	2	; select bank2
  9002  0F0E  00CD               	movwf	(modSquare@inflection+2)^(0+256)
  9003  0F0F  31A3  2310  318D   	fcall	_modSquare
  9004  0F12  0022               	movlb	2	; select bank2
  9005  0F13  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9006  0F14  00D0               	movwf	??_updateModulationArray^(0+256)
  9007  0F15  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9008  0F16  35D0               	lslf	??_updateModulationArray^(0+256),f
  9009  0F17  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9010  0F18  308A               	movlw	138
  9011  0F19  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9012  0F1A  3023               	movlw	35
  9013  0F1B  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9014  0F1C  0850               	movf	??_updateModulationArray^(0+256),w
  9015  0F1D  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9016  0F1E  0086               	movwf	6
  9017  0F1F  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9018  0F20  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9019  0F21  0087               	movwf	7
  9020  0F22  0848               	movf	?_modSquare^(0+256),w
  9021  0F23  3FC0               	movwi [0]fsr1
  9022  0F24  0849               	movf	(?_modSquare+1)^(0+256),w
  9023  0F25  3FC1               	movwi [1]fsr1
  9024                           
  9025                           ;modulation.c: 63: break;
  9026  0F26  2FDE               	goto	l8714
  9027  0F27                     l8704:	
  9028                           ;modulation.c: 64: case 4:
  9029                           
  9030                           
  9031                           ;modulation.c: 65: modArray[iAngle] = modSawRev(thisAngle, symmetry);
  9032  0F27  0022               	movlb	2	; select bank2
  9033  0F28  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9034  0F29  0021               	movlb	1	; select bank1
  9035  0F2A  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9036  0F2B  0022               	movlb	2	; select bank2
  9037  0F2C  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9038  0F2D  0021               	movlb	1	; select bank1
  9039  0F2E  00A8               	movwf	___awtoft@c^(0+128)
  9040  0F2F  31A0  2076  318D   	fcall	___awtoft
  9041  0F32  0021               	movlb	1	; select bank1
  9042  0F33  0828               	movf	?___awtoft^(0+128),w
  9043  0F34  0022               	movlb	2	; select bank2
  9044  0F35  00C5               	movwf	modSawRev@angle^(0+256)
  9045  0F36  0021               	movlb	1	; select bank1
  9046  0F37  0829               	movf	(?___awtoft+1)^(0+128),w
  9047  0F38  0022               	movlb	2	; select bank2
  9048  0F39  00C6               	movwf	(modSawRev@angle+1)^(0+256)
  9049  0F3A  0021               	movlb	1	; select bank1
  9050  0F3B  082A               	movf	(?___awtoft+2)^(0+128),w
  9051  0F3C  0022               	movlb	2	; select bank2
  9052  0F3D  00C7               	movwf	(modSawRev@angle+2)^(0+256)
  9053  0F3E  0023               	movlb	3	; select bank3
  9054  0F3F  085D               	movf	(_symmetry+1)^(0+384),w
  9055  0F40  0021               	movlb	1	; select bank1
  9056  0F41  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9057  0F42  0023               	movlb	3	; select bank3
  9058  0F43  085C               	movf	_symmetry^(0+384),w
  9059  0F44  0021               	movlb	1	; select bank1
  9060  0F45  00A8               	movwf	___awtoft@c^(0+128)
  9061  0F46  31A0  2076  318D   	fcall	___awtoft
  9062  0F49  0021               	movlb	1	; select bank1
  9063  0F4A  0828               	movf	?___awtoft^(0+128),w
  9064  0F4B  0022               	movlb	2	; select bank2
  9065  0F4C  00C8               	movwf	modSawRev@inflection^(0+256)
  9066  0F4D  0021               	movlb	1	; select bank1
  9067  0F4E  0829               	movf	(?___awtoft+1)^(0+128),w
  9068  0F4F  0022               	movlb	2	; select bank2
  9069  0F50  00C9               	movwf	(modSawRev@inflection+1)^(0+256)
  9070  0F51  0021               	movlb	1	; select bank1
  9071  0F52  082A               	movf	(?___awtoft+2)^(0+128),w
  9072  0F53  0022               	movlb	2	; select bank2
  9073  0F54  00CA               	movwf	(modSawRev@inflection+2)^(0+256)
  9074  0F55  31A0  2019  318D   	fcall	_modSawRev
  9075  0F58  0022               	movlb	2	; select bank2
  9076  0F59  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9077  0F5A  00D0               	movwf	??_updateModulationArray^(0+256)
  9078  0F5B  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9079  0F5C  35D0               	lslf	??_updateModulationArray^(0+256),f
  9080  0F5D  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9081  0F5E  308A               	movlw	138
  9082  0F5F  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9083  0F60  3023               	movlw	35
  9084  0F61  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9085  0F62  0850               	movf	??_updateModulationArray^(0+256),w
  9086  0F63  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9087  0F64  0086               	movwf	6
  9088  0F65  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9089  0F66  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9090  0F67  0087               	movwf	7
  9091  0F68  0845               	movf	?_modSawRev^(0+256),w
  9092  0F69  3FC0               	movwi [0]fsr1
  9093  0F6A  0846               	movf	(?_modSawRev+1)^(0+256),w
  9094  0F6B  3FC1               	movwi [1]fsr1
  9095                           
  9096                           ;modulation.c: 66: break;
  9097  0F6C  2FDE               	goto	l8714
  9098  0F6D                     l8706:	
  9099                           ;modulation.c: 67: case 5:
  9100                           
  9101                           
  9102                           ;modulation.c: 68: modArray[iAngle] = modSaw(thisAngle, symmetry);
  9103  0F6D  0022               	movlb	2	; select bank2
  9104  0F6E  0859               	movf	(updateModulationArray@thisAngle+1)^(0+256),w
  9105  0F6F  0021               	movlb	1	; select bank1
  9106  0F70  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9107  0F71  0022               	movlb	2	; select bank2
  9108  0F72  0858               	movf	updateModulationArray@thisAngle^(0+256),w
  9109  0F73  0021               	movlb	1	; select bank1
  9110  0F74  00A8               	movwf	___awtoft@c^(0+128)
  9111  0F75  31A0  2076  318D   	fcall	___awtoft
  9112  0F78  0021               	movlb	1	; select bank1
  9113  0F79  0828               	movf	?___awtoft^(0+128),w
  9114  0F7A  0022               	movlb	2	; select bank2
  9115  0F7B  00AE               	movwf	modSaw@angle^(0+256)
  9116  0F7C  0021               	movlb	1	; select bank1
  9117  0F7D  0829               	movf	(?___awtoft+1)^(0+128),w
  9118  0F7E  0022               	movlb	2	; select bank2
  9119  0F7F  00AF               	movwf	(modSaw@angle+1)^(0+256)
  9120  0F80  0021               	movlb	1	; select bank1
  9121  0F81  082A               	movf	(?___awtoft+2)^(0+128),w
  9122  0F82  0022               	movlb	2	; select bank2
  9123  0F83  00B0               	movwf	(modSaw@angle+2)^(0+256)
  9124  0F84  0023               	movlb	3	; select bank3
  9125  0F85  085D               	movf	(_symmetry+1)^(0+384),w
  9126  0F86  0021               	movlb	1	; select bank1
  9127  0F87  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9128  0F88  0023               	movlb	3	; select bank3
  9129  0F89  085C               	movf	_symmetry^(0+384),w
  9130  0F8A  0021               	movlb	1	; select bank1
  9131  0F8B  00A8               	movwf	___awtoft@c^(0+128)
  9132  0F8C  31A0  2076  318D   	fcall	___awtoft
  9133  0F8F  0021               	movlb	1	; select bank1
  9134  0F90  0828               	movf	?___awtoft^(0+128),w
  9135  0F91  0022               	movlb	2	; select bank2
  9136  0F92  00B1               	movwf	modSaw@inflection^(0+256)
  9137  0F93  0021               	movlb	1	; select bank1
  9138  0F94  0829               	movf	(?___awtoft+1)^(0+128),w
  9139  0F95  0022               	movlb	2	; select bank2
  9140  0F96  00B2               	movwf	(modSaw@inflection+1)^(0+256)
  9141  0F97  0021               	movlb	1	; select bank1
  9142  0F98  082A               	movf	(?___awtoft+2)^(0+128),w
  9143  0F99  0022               	movlb	2	; select bank2
  9144  0F9A  00B3               	movwf	(modSaw@inflection+2)^(0+256)
  9145  0F9B  3194  24AA  318D   	fcall	_modSaw
  9146  0F9E  0022               	movlb	2	; select bank2
  9147  0F9F  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9148  0FA0  00D0               	movwf	??_updateModulationArray^(0+256)
  9149  0FA1  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9150  0FA2  35D0               	lslf	??_updateModulationArray^(0+256),f
  9151  0FA3  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9152  0FA4  308A               	movlw	138
  9153  0FA5  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9154  0FA6  3023               	movlw	35
  9155  0FA7  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9156  0FA8  0850               	movf	??_updateModulationArray^(0+256),w
  9157  0FA9  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9158  0FAA  0086               	movwf	6
  9159  0FAB  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9160  0FAC  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9161  0FAD  0087               	movwf	7
  9162  0FAE  082E               	movf	?_modSaw^(0+256),w
  9163  0FAF  3FC0               	movwi [0]fsr1
  9164  0FB0  082F               	movf	(?_modSaw+1)^(0+256),w
  9165  0FB1  3FC1               	movwi [1]fsr1
  9166                           
  9167                           ;modulation.c: 69: break;
  9168  0FB2  2FDE               	goto	l8714
  9169  0FB3                     l8708:	
  9170                           ;modulation.c: 70: default:
  9171                           
  9172                           
  9173                           ;modulation.c: 71: modArray[iAngle] = 0;
  9174  0FB3  0022               	movlb	2	; select bank2
  9175  0FB4  085A               	movf	updateModulationArray@iAngle^(0+256),w
  9176  0FB5  00D0               	movwf	??_updateModulationArray^(0+256)
  9177  0FB6  01D1               	clrf	(??_updateModulationArray^(0+256)+1)
  9178  0FB7  35D0               	lslf	??_updateModulationArray^(0+256),f
  9179  0FB8  0DD1               	rlf	(??_updateModulationArray^(0+256)+1),f
  9180  0FB9  308A               	movlw	138
  9181  0FBA  00D2               	movwf	(??_updateModulationArray+2)^(0+256)
  9182  0FBB  3023               	movlw	35
  9183  0FBC  00D3               	movwf	((??_updateModulationArray+2)^(0+256)+1)
  9184  0FBD  0850               	movf	??_updateModulationArray^(0+256),w
  9185  0FBE  0752               	addwf	(??_updateModulationArray+2)^(0+256),w
  9186  0FBF  0086               	movwf	6
  9187  0FC0  0851               	movf	(??_updateModulationArray+1)^(0+256),w
  9188  0FC1  3D53               	addwfc	(??_updateModulationArray+3)^(0+256),w
  9189  0FC2  0087               	movwf	7
  9190  0FC3  3000               	movlw	0
  9191  0FC4  3FC0               	movwi [0]fsr1
  9192  0FC5  3FC1               	movwi [1]fsr1
  9193                           
  9194                           ;modulation.c: 73: }
  9195                           
  9196                           ;modulation.c: 72: break;
  9197  0FC6  2FDE               	goto	l8714
  9198  0FC7                     l8712:	
  9199                           
  9200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9201                           ; Switch size 1, requested type "space"
  9202                           ; Number of cases is 1, Range of values is 0 to 0
  9203                           ; switch strategies available:
  9204                           ; Name         Instructions Cycles
  9205                           ; simple_byte            4     3 (average)
  9206                           ; direct_byte            8     6 (fixed)
  9207                           ; jumptable            260     6 (fixed)
  9208                           ;	Chosen strategy is simple_byte
  9209  0FC7  0020               	movlb	0	; select bank0
  9210  0FC8  0856               	movf	_bottom_push_state+1,w
  9211  0FC9  3A00               	xorlw	0	; case 0
  9212  0FCA  1903               	skipnz
  9213  0FCB  2FCD               	goto	l9694
  9214  0FCC  2FB3               	goto	l8708
  9215  0FCD                     l9694:	
  9216                           
  9217                           ; Switch size 1, requested type "space"
  9218                           ; Number of cases is 5, Range of values is 1 to 5
  9219                           ; switch strategies available:
  9220                           ; Name         Instructions Cycles
  9221                           ; simple_byte           16     9 (average)
  9222                           ; direct_byte           19     9 (fixed)
  9223                           ; jumptable            263     9 (fixed)
  9224                           ;	Chosen strategy is simple_byte
  9225  0FCD  0855               	movf	_bottom_push_state,w
  9226  0FCE  3A01               	xorlw	1	; case 1
  9227  0FCF  1903               	skipnz
  9228  0FD0  2E55               	goto	l8698
  9229  0FD1  3A03               	xorlw	3	; case 2
  9230  0FD2  1903               	skipnz
  9231  0FD3  2E9B               	goto	l8700
  9232  0FD4  3A01               	xorlw	1	; case 3
  9233  0FD5  1903               	skipnz
  9234  0FD6  2EE1               	goto	l8702
  9235  0FD7  3A07               	xorlw	7	; case 4
  9236  0FD8  1903               	skipnz
  9237  0FD9  2F27               	goto	l8704
  9238  0FDA  3A01               	xorlw	1	; case 5
  9239  0FDB  1903               	skipnz
  9240  0FDC  2F6D               	goto	l8706
  9241  0FDD  2FB3               	goto	l8708
  9242  0FDE                     l8714:	
  9243  0FDE  3001               	movlw	1
  9244  0FDF  0022               	movlb	2	; select bank2
  9245  0FE0  00D0               	movwf	??_updateModulationArray^(0+256)
  9246  0FE1  0850               	movf	??_updateModulationArray^(0+256),w
  9247  0FE2  07DA               	addwf	updateModulationArray@iAngle^(0+256),f
  9248  0FE3  2E37               	goto	l8716
  9249  0FE4                     l8718:	
  9250                           
  9251                           ;modulation.c: 74: }
  9252                           ;modulation.c: 75: modArray[120] = bottom_push_state;
  9253  0FE4  307A               	movlw	122
  9254  0FE5  0086               	movwf	6
  9255  0FE6  3024               	movlw	36
  9256  0FE7  0087               	movwf	7
  9257  0FE8  0020               	movlb	0	; select bank0
  9258  0FE9  0855               	movf	_bottom_push_state,w
  9259  0FEA  3FC0               	movwi [0]fsr1
  9260  0FEB  0856               	movf	_bottom_push_state+1,w
  9261  0FEC  3FC1               	movwi [1]fsr1
  9262                           
  9263                           ;modulation.c: 76: modArray[121] = symmetry;
  9264  0FED  307C               	movlw	124
  9265  0FEE  0086               	movwf	6
  9266  0FEF  3024               	movlw	36
  9267  0FF0  0087               	movwf	7
  9268  0FF1  0023               	movlb	3	; select bank3
  9269  0FF2  085C               	movf	_symmetry^(0+384),w
  9270  0FF3  3FC0               	movwi [0]fsr1
  9271  0FF4  085D               	movf	(_symmetry+1)^(0+384),w
  9272  0FF5  3FC1               	movwi [1]fsr1
  9273                           
  9274                           ;modulation.c: 77: modArray[122] = subDiv;
  9275  0FF6  307E               	movlw	126
  9276  0FF7  0086               	movwf	6
  9277  0FF8  3024               	movlw	36
  9278  0FF9  0087               	movwf	7
  9279  0FFA  0022               	movlb	2	; select bank2
  9280  0FFB  0856               	movf	updateModulationArray@subDiv^(0+256),w
  9281  0FFC  3FC0               	movwi [0]fsr1
  9282  0FFD  0857               	movf	(updateModulationArray@subDiv+1)^(0+256),w
  9283  0FFE  3FC1               	movwi [1]fsr1
  9284  0FFF  0008               	return
  9285  1000                     __end_of_updateModulationArray:	
  9286                           
  9287                           	psect	text15
  9288  0BE2                     __ptext15:	
  9289 ;; *************** function _modTri *****************
  9290 ;; Defined at:
  9291 ;;		line 96 in file "modulation.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  angle           3   14[BANK2 ] void 
  9294 ;;  inflection      3   17[BANK2 ] void 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  tmpVal          3   29[BANK2 ] void 
  9297 ;;  period          3   26[BANK2 ] void 
  9298 ;;  shift           3   23[BANK2 ] void 
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  2   14[BANK2 ] int 
  9301 ;; Registers used:
  9302 ;;		wreg, status,2, status,0, pclath, cstack
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9308 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9309 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9311 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9312 ;;Total ram usage:       18 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; Hardware stack levels required when called:    5
  9315 ;; This function calls:
  9316 ;;		___ftadd
  9317 ;;		___ftdiv
  9318 ;;		___ftge
  9319 ;;		___ftmul
  9320 ;;		___ftneg
  9321 ;;		___fttol
  9322 ;; This function is called by:
  9323 ;;		_updateModulationArray
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           
  9328                           ;psect for function _modTri
  9329  0BE2                     _modTri:	
  9330                           
  9331                           ;modulation.c: 97: double period = 1.0;
  9332                           
  9333                           ;incstack = 0
  9334                           ; Regs used in _modTri: [wreg+status,2+status,0+pclath+cstack]
  9335  0BE2  3000               	movlw	0
  9336  0BE3  0022               	movlb	2	; select bank2
  9337  0BE4  00BA               	movwf	modTri@period^(0+256)
  9338  0BE5  3080               	movlw	128
  9339  0BE6  00BB               	movwf	(modTri@period+1)^(0+256)
  9340  0BE7  303F               	movlw	63
  9341  0BE8  00BC               	movwf	(modTri@period+2)^(0+256)
  9342                           
  9343                           ;modulation.c: 98: double shift = 0;
  9344  0BE9  3000               	movlw	0
  9345  0BEA  00B7               	movwf	modTri@shift^(0+256)
  9346  0BEB  3000               	movlw	0
  9347  0BEC  00B8               	movwf	(modTri@shift+1)^(0+256)
  9348  0BED  3000               	movlw	0
  9349  0BEE  00B9               	movwf	(modTri@shift+2)^(0+256)
  9350                           
  9351                           ;modulation.c: 100: if(angle<=inflection) {
  9352  0BEF  0831               	movf	modTri@inflection^(0+256),w
  9353  0BF0  0021               	movlb	1	; select bank1
  9354  0BF1  00A0               	movwf	___ftge@ff1^(0+128)
  9355  0BF2  0022               	movlb	2	; select bank2
  9356  0BF3  0832               	movf	(modTri@inflection+1)^(0+256),w
  9357  0BF4  0021               	movlb	1	; select bank1
  9358  0BF5  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9359  0BF6  0022               	movlb	2	; select bank2
  9360  0BF7  0833               	movf	(modTri@inflection+2)^(0+256),w
  9361  0BF8  0021               	movlb	1	; select bank1
  9362  0BF9  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9363  0BFA  0022               	movlb	2	; select bank2
  9364  0BFB  082E               	movf	modTri@angle^(0+256),w
  9365  0BFC  0021               	movlb	1	; select bank1
  9366  0BFD  00A3               	movwf	___ftge@ff2^(0+128)
  9367  0BFE  0022               	movlb	2	; select bank2
  9368  0BFF  082F               	movf	(modTri@angle+1)^(0+256),w
  9369  0C00  0021               	movlb	1	; select bank1
  9370  0C01  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9371  0C02  0022               	movlb	2	; select bank2
  9372  0C03  0830               	movf	(modTri@angle+2)^(0+256),w
  9373  0C04  0021               	movlb	1	; select bank1
  9374  0C05  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9375  0C06  3198  2000  318B   	fcall	___ftge
  9376  0C09  1C03               	btfss	3,0
  9377  0C0A  2C17               	goto	l8472
  9378                           
  9379                           ;modulation.c: 101: period = 180.0/inflection;
  9380  0C0B  0022               	movlb	2	; select bank2
  9381  0C0C  0831               	movf	modTri@inflection^(0+256),w
  9382  0C0D  0021               	movlb	1	; select bank1
  9383  0C0E  00CE               	movwf	___ftdiv@f2^(0+128)
  9384  0C0F  0022               	movlb	2	; select bank2
  9385  0C10  0832               	movf	(modTri@inflection+1)^(0+256),w
  9386  0C11  0021               	movlb	1	; select bank1
  9387  0C12  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9388  0C13  0022               	movlb	2	; select bank2
  9389  0C14  0833               	movf	(modTri@inflection+2)^(0+256),w
  9390  0C15  0021               	movlb	1	; select bank1
  9391  0C16  2CD2               	goto	L5
  9392  0C17                     l8472:	
  9393                           ;modulation.c: 102: } else {
  9394                           
  9395                           
  9396                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9397  0C17  0022               	movlb	2	; select bank2
  9398  0C18  0831               	movf	modTri@inflection^(0+256),w
  9399  0C19  0021               	movlb	1	; select bank1
  9400  0C1A  00B1               	movwf	___ftmul@f2^(0+128)
  9401  0C1B  0022               	movlb	2	; select bank2
  9402  0C1C  0832               	movf	(modTri@inflection+1)^(0+256),w
  9403  0C1D  0021               	movlb	1	; select bank1
  9404  0C1E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9405  0C1F  0022               	movlb	2	; select bank2
  9406  0C20  0833               	movf	(modTri@inflection+2)^(0+256),w
  9407  0C21  0021               	movlb	1	; select bank1
  9408  0C22  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9409  0C23  3000               	movlw	0
  9410  0C24  00AE               	movwf	___ftmul@f1^(0+128)
  9411  0C25  3000               	movlw	0
  9412  0C26  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9413  0C27  3040               	movlw	64
  9414  0C28  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9415  0C29  319E  267B  318B   	fcall	___ftmul
  9416  0C2C  0021               	movlb	1	; select bank1
  9417  0C2D  082E               	movf	?___ftmul^(0+128),w
  9418  0C2E  00BE               	movwf	___ftneg@f1^(0+128)
  9419  0C2F  082F               	movf	(?___ftmul+1)^(0+128),w
  9420  0C30  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9421  0C31  0830               	movf	(?___ftmul+2)^(0+128),w
  9422  0C32  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9423  0C33  31AF  2724  318B   	fcall	___ftneg
  9424  0C36  0021               	movlb	1	; select bank1
  9425  0C37  083E               	movf	?___ftneg^(0+128),w
  9426  0C38  00C4               	movwf	___ftadd@f2^(0+128)
  9427  0C39  083F               	movf	(?___ftneg+1)^(0+128),w
  9428  0C3A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9429  0C3B  0840               	movf	(?___ftneg+2)^(0+128),w
  9430  0C3C  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9431  0C3D  3000               	movlw	0
  9432  0C3E  00C1               	movwf	___ftadd@f1^(0+128)
  9433  0C3F  30B4               	movlw	180
  9434  0C40  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9435  0C41  3043               	movlw	67
  9436  0C42  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9437  0C43  3190  201F  318B   	fcall	___ftadd
  9438  0C46  0021               	movlb	1	; select bank1
  9439  0C47  0841               	movf	?___ftadd^(0+128),w
  9440  0C48  0022               	movlb	2	; select bank2
  9441  0C49  00B4               	movwf	_modTri$2843^(0+256)
  9442  0C4A  0021               	movlb	1	; select bank1
  9443  0C4B  0842               	movf	(?___ftadd+1)^(0+128),w
  9444  0C4C  0022               	movlb	2	; select bank2
  9445  0C4D  00B5               	movwf	(_modTri$2843+1)^(0+256)
  9446  0C4E  0021               	movlb	1	; select bank1
  9447  0C4F  0843               	movf	(?___ftadd+2)^(0+128),w
  9448  0C50  0022               	movlb	2	; select bank2
  9449  0C51  00B6               	movwf	(_modTri$2843+2)^(0+256)
  9450                           
  9451                           ;modulation.c: 103: shift = -(360-inflection*2)*(180/(360-inflection));
  9452  0C52  0834               	movf	_modTri$2843^(0+256),w
  9453  0C53  0021               	movlb	1	; select bank1
  9454  0C54  00BE               	movwf	___ftneg@f1^(0+128)
  9455  0C55  0022               	movlb	2	; select bank2
  9456  0C56  0835               	movf	(_modTri$2843+1)^(0+256),w
  9457  0C57  0021               	movlb	1	; select bank1
  9458  0C58  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9459  0C59  0022               	movlb	2	; select bank2
  9460  0C5A  0836               	movf	(_modTri$2843+2)^(0+256),w
  9461  0C5B  0021               	movlb	1	; select bank1
  9462  0C5C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9463  0C5D  31AF  2724  318B   	fcall	___ftneg
  9464  0C60  0021               	movlb	1	; select bank1
  9465  0C61  083E               	movf	?___ftneg^(0+128),w
  9466  0C62  00AE               	movwf	___ftmul@f1^(0+128)
  9467  0C63  083F               	movf	(?___ftneg+1)^(0+128),w
  9468  0C64  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9469  0C65  0840               	movf	(?___ftneg+2)^(0+128),w
  9470  0C66  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9471  0C67  3000               	movlw	0
  9472  0C68  00C1               	movwf	___ftadd@f1^(0+128)
  9473  0C69  30B4               	movlw	180
  9474  0C6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9475  0C6B  3043               	movlw	67
  9476  0C6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9477  0C6D  0022               	movlb	2	; select bank2
  9478  0C6E  0831               	movf	modTri@inflection^(0+256),w
  9479  0C6F  0021               	movlb	1	; select bank1
  9480  0C70  00BE               	movwf	___ftneg@f1^(0+128)
  9481  0C71  0022               	movlb	2	; select bank2
  9482  0C72  0832               	movf	(modTri@inflection+1)^(0+256),w
  9483  0C73  0021               	movlb	1	; select bank1
  9484  0C74  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9485  0C75  0022               	movlb	2	; select bank2
  9486  0C76  0833               	movf	(modTri@inflection+2)^(0+256),w
  9487  0C77  0021               	movlb	1	; select bank1
  9488  0C78  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9489  0C79  31AF  2724  318B   	fcall	___ftneg
  9490  0C7C  0021               	movlb	1	; select bank1
  9491  0C7D  083E               	movf	?___ftneg^(0+128),w
  9492  0C7E  00C4               	movwf	___ftadd@f2^(0+128)
  9493  0C7F  083F               	movf	(?___ftneg+1)^(0+128),w
  9494  0C80  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9495  0C81  0840               	movf	(?___ftneg+2)^(0+128),w
  9496  0C82  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9497  0C83  3190  201F  318B   	fcall	___ftadd
  9498  0C86  0021               	movlb	1	; select bank1
  9499  0C87  0841               	movf	?___ftadd^(0+128),w
  9500  0C88  00CE               	movwf	___ftdiv@f2^(0+128)
  9501  0C89  0842               	movf	(?___ftadd+1)^(0+128),w
  9502  0C8A  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9503  0C8B  0843               	movf	(?___ftadd+2)^(0+128),w
  9504  0C8C  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9505  0C8D  3000               	movlw	0
  9506  0C8E  00D1               	movwf	___ftdiv@f1^(0+128)
  9507  0C8F  3034               	movlw	52
  9508  0C90  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9509  0C91  3043               	movlw	67
  9510  0C92  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9511  0C93  319C  2474  318B   	fcall	___ftdiv
  9512  0C96  0021               	movlb	1	; select bank1
  9513  0C97  084E               	movf	?___ftdiv^(0+128),w
  9514  0C98  00B1               	movwf	___ftmul@f2^(0+128)
  9515  0C99  084F               	movf	(?___ftdiv+1)^(0+128),w
  9516  0C9A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9517  0C9B  0850               	movf	(?___ftdiv+2)^(0+128),w
  9518  0C9C  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9519  0C9D  319E  267B  318B   	fcall	___ftmul
  9520  0CA0  0021               	movlb	1	; select bank1
  9521  0CA1  082E               	movf	?___ftmul^(0+128),w
  9522  0CA2  0022               	movlb	2	; select bank2
  9523  0CA3  00B7               	movwf	modTri@shift^(0+256)
  9524  0CA4  0021               	movlb	1	; select bank1
  9525  0CA5  082F               	movf	(?___ftmul+1)^(0+128),w
  9526  0CA6  0022               	movlb	2	; select bank2
  9527  0CA7  00B8               	movwf	(modTri@shift+1)^(0+256)
  9528  0CA8  0021               	movlb	1	; select bank1
  9529  0CA9  0830               	movf	(?___ftmul+2)^(0+128),w
  9530  0CAA  0022               	movlb	2	; select bank2
  9531  0CAB  00B9               	movwf	(modTri@shift+2)^(0+256)
  9532                           
  9533                           ;modulation.c: 104: period = 180/(360-inflection);
  9534  0CAC  3000               	movlw	0
  9535  0CAD  0021               	movlb	1	; select bank1
  9536  0CAE  00C1               	movwf	___ftadd@f1^(0+128)
  9537  0CAF  30B4               	movlw	180
  9538  0CB0  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9539  0CB1  3043               	movlw	67
  9540  0CB2  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9541  0CB3  0022               	movlb	2	; select bank2
  9542  0CB4  0831               	movf	modTri@inflection^(0+256),w
  9543  0CB5  0021               	movlb	1	; select bank1
  9544  0CB6  00BE               	movwf	___ftneg@f1^(0+128)
  9545  0CB7  0022               	movlb	2	; select bank2
  9546  0CB8  0832               	movf	(modTri@inflection+1)^(0+256),w
  9547  0CB9  0021               	movlb	1	; select bank1
  9548  0CBA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9549  0CBB  0022               	movlb	2	; select bank2
  9550  0CBC  0833               	movf	(modTri@inflection+2)^(0+256),w
  9551  0CBD  0021               	movlb	1	; select bank1
  9552  0CBE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9553  0CBF  31AF  2724  318B   	fcall	___ftneg
  9554  0CC2  0021               	movlb	1	; select bank1
  9555  0CC3  083E               	movf	?___ftneg^(0+128),w
  9556  0CC4  00C4               	movwf	___ftadd@f2^(0+128)
  9557  0CC5  083F               	movf	(?___ftneg+1)^(0+128),w
  9558  0CC6  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9559  0CC7  0840               	movf	(?___ftneg+2)^(0+128),w
  9560  0CC8  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9561  0CC9  3190  201F  318B   	fcall	___ftadd
  9562  0CCC  0021               	movlb	1	; select bank1
  9563  0CCD  0841               	movf	?___ftadd^(0+128),w
  9564  0CCE  00CE               	movwf	___ftdiv@f2^(0+128)
  9565  0CCF  0842               	movf	(?___ftadd+1)^(0+128),w
  9566  0CD0  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9567  0CD1  0843               	movf	(?___ftadd+2)^(0+128),w
  9568  0CD2                     L5:	
  9569  0CD2  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9570  0CD3  3000               	movlw	0
  9571  0CD4  00D1               	movwf	___ftdiv@f1^(0+128)
  9572  0CD5  3034               	movlw	52
  9573  0CD6  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9574  0CD7  3043               	movlw	67
  9575  0CD8  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9576  0CD9  319C  2474  318B   	fcall	___ftdiv
  9577  0CDC  0021               	movlb	1	; select bank1
  9578  0CDD  084E               	movf	?___ftdiv^(0+128),w
  9579  0CDE  0022               	movlb	2	; select bank2
  9580  0CDF  00BA               	movwf	modTri@period^(0+256)
  9581  0CE0  0021               	movlb	1	; select bank1
  9582  0CE1  084F               	movf	(?___ftdiv+1)^(0+128),w
  9583  0CE2  0022               	movlb	2	; select bank2
  9584  0CE3  00BB               	movwf	(modTri@period+1)^(0+256)
  9585  0CE4  0021               	movlb	1	; select bank1
  9586  0CE5  0850               	movf	(?___ftdiv+2)^(0+128),w
  9587  0CE6  0022               	movlb	2	; select bank2
  9588  0CE7  00BC               	movwf	(modTri@period+2)^(0+256)
  9589                           
  9590                           ;modulation.c: 106: }
  9591                           ;modulation.c: 107: double tmpVal = (period*angle-shift) ;
  9592  0CE8  0837               	movf	modTri@shift^(0+256),w
  9593  0CE9  0021               	movlb	1	; select bank1
  9594  0CEA  00BE               	movwf	___ftneg@f1^(0+128)
  9595  0CEB  0022               	movlb	2	; select bank2
  9596  0CEC  0838               	movf	(modTri@shift+1)^(0+256),w
  9597  0CED  0021               	movlb	1	; select bank1
  9598  0CEE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9599  0CEF  0022               	movlb	2	; select bank2
  9600  0CF0  0839               	movf	(modTri@shift+2)^(0+256),w
  9601  0CF1  0021               	movlb	1	; select bank1
  9602  0CF2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9603  0CF3  31AF  2724  318B   	fcall	___ftneg
  9604  0CF6  0021               	movlb	1	; select bank1
  9605  0CF7  083E               	movf	?___ftneg^(0+128),w
  9606  0CF8  00C1               	movwf	___ftadd@f1^(0+128)
  9607  0CF9  083F               	movf	(?___ftneg+1)^(0+128),w
  9608  0CFA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9609  0CFB  0840               	movf	(?___ftneg+2)^(0+128),w
  9610  0CFC  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9611  0CFD  0022               	movlb	2	; select bank2
  9612  0CFE  082E               	movf	modTri@angle^(0+256),w
  9613  0CFF  0021               	movlb	1	; select bank1
  9614  0D00  00AE               	movwf	___ftmul@f1^(0+128)
  9615  0D01  0022               	movlb	2	; select bank2
  9616  0D02  082F               	movf	(modTri@angle+1)^(0+256),w
  9617  0D03  0021               	movlb	1	; select bank1
  9618  0D04  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9619  0D05  0022               	movlb	2	; select bank2
  9620  0D06  0830               	movf	(modTri@angle+2)^(0+256),w
  9621  0D07  0021               	movlb	1	; select bank1
  9622  0D08  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9623  0D09  0022               	movlb	2	; select bank2
  9624  0D0A  083A               	movf	modTri@period^(0+256),w
  9625  0D0B  0021               	movlb	1	; select bank1
  9626  0D0C  00B1               	movwf	___ftmul@f2^(0+128)
  9627  0D0D  0022               	movlb	2	; select bank2
  9628  0D0E  083B               	movf	(modTri@period+1)^(0+256),w
  9629  0D0F  0021               	movlb	1	; select bank1
  9630  0D10  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9631  0D11  0022               	movlb	2	; select bank2
  9632  0D12  083C               	movf	(modTri@period+2)^(0+256),w
  9633  0D13  0021               	movlb	1	; select bank1
  9634  0D14  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9635  0D15  319E  267B  318B   	fcall	___ftmul
  9636  0D18  0021               	movlb	1	; select bank1
  9637  0D19  082E               	movf	?___ftmul^(0+128),w
  9638  0D1A  00C4               	movwf	___ftadd@f2^(0+128)
  9639  0D1B  082F               	movf	(?___ftmul+1)^(0+128),w
  9640  0D1C  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9641  0D1D  0830               	movf	(?___ftmul+2)^(0+128),w
  9642  0D1E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9643  0D1F  3190  201F  318B   	fcall	___ftadd
  9644  0D22  0021               	movlb	1	; select bank1
  9645  0D23  0841               	movf	?___ftadd^(0+128),w
  9646  0D24  0022               	movlb	2	; select bank2
  9647  0D25  00BD               	movwf	modTri@tmpVal^(0+256)
  9648  0D26  0021               	movlb	1	; select bank1
  9649  0D27  0842               	movf	(?___ftadd+1)^(0+128),w
  9650  0D28  0022               	movlb	2	; select bank2
  9651  0D29  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9652  0D2A  0021               	movlb	1	; select bank1
  9653  0D2B  0843               	movf	(?___ftadd+2)^(0+128),w
  9654  0D2C  0022               	movlb	2	; select bank2
  9655  0D2D  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9656                           
  9657                           ;modulation.c: 108: if (tmpVal > 270) {
  9658  0D2E  3000               	movlw	0
  9659  0D2F  0021               	movlb	1	; select bank1
  9660  0D30  00A0               	movwf	___ftge@ff1^(0+128)
  9661  0D31  3087               	movlw	135
  9662  0D32  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9663  0D33  3043               	movlw	67
  9664  0D34  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9665  0D35  0022               	movlb	2	; select bank2
  9666  0D36  083D               	movf	modTri@tmpVal^(0+256),w
  9667  0D37  0021               	movlb	1	; select bank1
  9668  0D38  00A3               	movwf	___ftge@ff2^(0+128)
  9669  0D39  0022               	movlb	2	; select bank2
  9670  0D3A  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9671  0D3B  0021               	movlb	1	; select bank1
  9672  0D3C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9673  0D3D  0022               	movlb	2	; select bank2
  9674  0D3E  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9675  0D3F  0021               	movlb	1	; select bank1
  9676  0D40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9677  0D41  3198  2000  318B   	fcall	___ftge
  9678  0D44  1803               	btfsc	3,0
  9679  0D45  2D59               	goto	l8476
  9680                           
  9681                           ;modulation.c: 109: tmpVal = tmpVal - 360.0;
  9682  0D46  3000               	movlw	0
  9683  0D47  0021               	movlb	1	; select bank1
  9684  0D48  00C1               	movwf	___ftadd@f1^(0+128)
  9685  0D49  30B4               	movlw	180
  9686  0D4A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9687  0D4B  30C3               	movlw	195
  9688  0D4C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9689  0D4D  0022               	movlb	2	; select bank2
  9690  0D4E  083D               	movf	modTri@tmpVal^(0+256),w
  9691  0D4F  0021               	movlb	1	; select bank1
  9692  0D50  00C4               	movwf	___ftadd@f2^(0+128)
  9693  0D51  0022               	movlb	2	; select bank2
  9694  0D52  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9695  0D53  0021               	movlb	1	; select bank1
  9696  0D54  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9697  0D55  0022               	movlb	2	; select bank2
  9698  0D56  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9699  0D57  0021               	movlb	1	; select bank1
  9700  0D58  2D8D               	goto	L7
  9701  0D59                     l8476:	
  9702                           ;modulation.c: 110: } else if (tmpVal > 90) {
  9703                           
  9704  0D59  3000               	movlw	0
  9705  0D5A  0021               	movlb	1	; select bank1
  9706  0D5B  00A0               	movwf	___ftge@ff1^(0+128)
  9707  0D5C  30B4               	movlw	180
  9708  0D5D  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9709  0D5E  3042               	movlw	66
  9710  0D5F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9711  0D60  0022               	movlb	2	; select bank2
  9712  0D61  083D               	movf	modTri@tmpVal^(0+256),w
  9713  0D62  0021               	movlb	1	; select bank1
  9714  0D63  00A3               	movwf	___ftge@ff2^(0+128)
  9715  0D64  0022               	movlb	2	; select bank2
  9716  0D65  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9717  0D66  0021               	movlb	1	; select bank1
  9718  0D67  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9719  0D68  0022               	movlb	2	; select bank2
  9720  0D69  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9721  0D6A  0021               	movlb	1	; select bank1
  9722  0D6B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9723  0D6C  3198  2000  318B   	fcall	___ftge
  9724  0D6F  1803               	btfsc	3,0
  9725  0D70  2D9D               	goto	l1931
  9726                           
  9727                           ;modulation.c: 111: tmpVal = 180 - tmpVal;
  9728  0D71  3000               	movlw	0
  9729  0D72  0021               	movlb	1	; select bank1
  9730  0D73  00C1               	movwf	___ftadd@f1^(0+128)
  9731  0D74  3034               	movlw	52
  9732  0D75  00C2               	movwf	(___ftadd@f1+1)^(0+128)
  9733  0D76  3043               	movlw	67
  9734  0D77  00C3               	movwf	(___ftadd@f1+2)^(0+128)
  9735  0D78  0022               	movlb	2	; select bank2
  9736  0D79  083D               	movf	modTri@tmpVal^(0+256),w
  9737  0D7A  0021               	movlb	1	; select bank1
  9738  0D7B  00BE               	movwf	___ftneg@f1^(0+128)
  9739  0D7C  0022               	movlb	2	; select bank2
  9740  0D7D  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9741  0D7E  0021               	movlb	1	; select bank1
  9742  0D7F  00BF               	movwf	(___ftneg@f1+1)^(0+128)
  9743  0D80  0022               	movlb	2	; select bank2
  9744  0D81  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9745  0D82  0021               	movlb	1	; select bank1
  9746  0D83  00C0               	movwf	(___ftneg@f1+2)^(0+128)
  9747  0D84  31AF  2724  318B   	fcall	___ftneg
  9748  0D87  0021               	movlb	1	; select bank1
  9749  0D88  083E               	movf	?___ftneg^(0+128),w
  9750  0D89  00C4               	movwf	___ftadd@f2^(0+128)
  9751  0D8A  083F               	movf	(?___ftneg+1)^(0+128),w
  9752  0D8B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
  9753  0D8C  0840               	movf	(?___ftneg+2)^(0+128),w
  9754  0D8D                     L7:	
  9755  0D8D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
  9756  0D8E  3190  201F  318B   	fcall	___ftadd
  9757  0D91  0021               	movlb	1	; select bank1
  9758  0D92  0841               	movf	?___ftadd^(0+128),w
  9759  0D93  0022               	movlb	2	; select bank2
  9760  0D94  00BD               	movwf	modTri@tmpVal^(0+256)
  9761  0D95  0021               	movlb	1	; select bank1
  9762  0D96  0842               	movf	(?___ftadd+1)^(0+128),w
  9763  0D97  0022               	movlb	2	; select bank2
  9764  0D98  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9765  0D99  0021               	movlb	1	; select bank1
  9766  0D9A  0843               	movf	(?___ftadd+2)^(0+128),w
  9767  0D9B  0022               	movlb	2	; select bank2
  9768  0D9C  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9769  0D9D                     l1931:	
  9770                           
  9771                           ;modulation.c: 112: }
  9772                           ;modulation.c: 113: tmpVal = tmpVal * 10/9;
  9773  0D9D  3000               	movlw	0
  9774  0D9E  0021               	movlb	1	; select bank1
  9775  0D9F  00CE               	movwf	___ftdiv@f2^(0+128)
  9776  0DA0  3010               	movlw	16
  9777  0DA1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
  9778  0DA2  3041               	movlw	65
  9779  0DA3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
  9780  0DA4  3000               	movlw	0
  9781  0DA5  00AE               	movwf	___ftmul@f1^(0+128)
  9782  0DA6  3020               	movlw	32
  9783  0DA7  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  9784  0DA8  3041               	movlw	65
  9785  0DA9  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  9786  0DAA  0022               	movlb	2	; select bank2
  9787  0DAB  083D               	movf	modTri@tmpVal^(0+256),w
  9788  0DAC  0021               	movlb	1	; select bank1
  9789  0DAD  00B1               	movwf	___ftmul@f2^(0+128)
  9790  0DAE  0022               	movlb	2	; select bank2
  9791  0DAF  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9792  0DB0  0021               	movlb	1	; select bank1
  9793  0DB1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  9794  0DB2  0022               	movlb	2	; select bank2
  9795  0DB3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9796  0DB4  0021               	movlb	1	; select bank1
  9797  0DB5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  9798  0DB6  319E  267B  318B   	fcall	___ftmul
  9799  0DB9  0021               	movlb	1	; select bank1
  9800  0DBA  082E               	movf	?___ftmul^(0+128),w
  9801  0DBB  00D1               	movwf	___ftdiv@f1^(0+128)
  9802  0DBC  082F               	movf	(?___ftmul+1)^(0+128),w
  9803  0DBD  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
  9804  0DBE  0830               	movf	(?___ftmul+2)^(0+128),w
  9805  0DBF  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
  9806  0DC0  319C  2474  318B   	fcall	___ftdiv
  9807  0DC3  0021               	movlb	1	; select bank1
  9808  0DC4  084E               	movf	?___ftdiv^(0+128),w
  9809  0DC5  0022               	movlb	2	; select bank2
  9810  0DC6  00BD               	movwf	modTri@tmpVal^(0+256)
  9811  0DC7  0021               	movlb	1	; select bank1
  9812  0DC8  084F               	movf	(?___ftdiv+1)^(0+128),w
  9813  0DC9  0022               	movlb	2	; select bank2
  9814  0DCA  00BE               	movwf	(modTri@tmpVal+1)^(0+256)
  9815  0DCB  0021               	movlb	1	; select bank1
  9816  0DCC  0850               	movf	(?___ftdiv+2)^(0+128),w
  9817  0DCD  0022               	movlb	2	; select bank2
  9818  0DCE  00BF               	movwf	(modTri@tmpVal+2)^(0+256)
  9819                           
  9820                           ;modulation.c: 115: return (int)(tmpVal);
  9821  0DCF  083D               	movf	modTri@tmpVal^(0+256),w
  9822  0DD0  00A0               	movwf	___fttol@f1^(0+256)
  9823  0DD1  083E               	movf	(modTri@tmpVal+1)^(0+256),w
  9824  0DD2  00A1               	movwf	(___fttol@f1+1)^(0+256)
  9825  0DD3  083F               	movf	(modTri@tmpVal+2)^(0+256),w
  9826  0DD4  00A2               	movwf	(___fttol@f1+2)^(0+256)
  9827  0DD5  319A  2246         	fcall	___fttol
  9828  0DD7  0022               	movlb	2	; select bank2
  9829  0DD8  0821               	movf	(?___fttol^(0+256)+1),w
  9830  0DD9  00AF               	movwf	(?_modTri+1)^(0+256)
  9831  0DDA  0820               	movf	?___fttol^(0+256),w
  9832  0DDB  00AE               	movwf	?_modTri^(0+256)
  9833  0DDC  0008               	return
  9834  0DDD                     __end_of_modTri:	
  9835                           
  9836                           	psect	text16
  9837  2310                     __ptext16:	
  9838 ;; *************** function _modSquare *****************
  9839 ;; Defined at:
  9840 ;;		line 141 in file "modulation.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;  angle           3   40[BANK2 ] int 
  9843 ;;  inflection      3   43[BANK2 ] int 
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;  tmpVal          2   46[BANK2 ] int 
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  2   40[BANK2 ] int 
  9848 ;; Registers used:
  9849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9855 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9856 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9858 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9859 ;;Total ram usage:        8 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    6
  9862 ;; This function calls:
  9863 ;;		___ftge
  9864 ;;		_modSin
  9865 ;; This function is called by:
  9866 ;;		_updateModulationArray
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _modSquare
  9872  2310                     _modSquare:	
  9873                           
  9874                           ;modulation.c: 142: int tmpVal = modSin(angle, inflection);
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _modSquare: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9878  2310  0022               	movlb	2	; select bank2
  9879  2311  0848               	movf	modSquare@angle^(0+256),w
  9880  2312  00B4               	movwf	modSin@angle^(0+256)
  9881  2313  0849               	movf	(modSquare@angle+1)^(0+256),w
  9882  2314  00B5               	movwf	(modSin@angle+1)^(0+256)
  9883  2315  084A               	movf	(modSquare@angle+2)^(0+256),w
  9884  2316  00B6               	movwf	(modSin@angle+2)^(0+256)
  9885  2317  084B               	movf	modSquare@inflection^(0+256),w
  9886  2318  00B7               	movwf	modSin@inflection^(0+256)
  9887  2319  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9888  231A  00B8               	movwf	(modSin@inflection+1)^(0+256)
  9889  231B  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9890  231C  00B9               	movwf	(modSin@inflection+2)^(0+256)
  9891  231D  3196  2654  31A3   	fcall	_modSin
  9892  2320  0022               	movlb	2	; select bank2
  9893  2321  0835               	movf	(?_modSin+1)^(0+256),w
  9894  2322  00CF               	movwf	(modSquare@tmpVal+1)^(0+256)
  9895  2323  0834               	movf	?_modSin^(0+256),w
  9896  2324  00CE               	movwf	modSquare@tmpVal^(0+256)
  9897                           
  9898                           ;modulation.c: 144: return (angle <= inflection) ? 100 : -100;
  9899  2325  084B               	movf	modSquare@inflection^(0+256),w
  9900  2326  0021               	movlb	1	; select bank1
  9901  2327  00A0               	movwf	___ftge@ff1^(0+128)
  9902  2328  0022               	movlb	2	; select bank2
  9903  2329  084C               	movf	(modSquare@inflection+1)^(0+256),w
  9904  232A  0021               	movlb	1	; select bank1
  9905  232B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
  9906  232C  0022               	movlb	2	; select bank2
  9907  232D  084D               	movf	(modSquare@inflection+2)^(0+256),w
  9908  232E  0021               	movlb	1	; select bank1
  9909  232F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
  9910  2330  0022               	movlb	2	; select bank2
  9911  2331  0848               	movf	modSquare@angle^(0+256),w
  9912  2332  0021               	movlb	1	; select bank1
  9913  2333  00A3               	movwf	___ftge@ff2^(0+128)
  9914  2334  0022               	movlb	2	; select bank2
  9915  2335  0849               	movf	(modSquare@angle+1)^(0+256),w
  9916  2336  0021               	movlb	1	; select bank1
  9917  2337  00A4               	movwf	(___ftge@ff2+1)^(0+128)
  9918  2338  0022               	movlb	2	; select bank2
  9919  2339  084A               	movf	(modSquare@angle+2)^(0+256),w
  9920  233A  0021               	movlb	1	; select bank1
  9921  233B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
  9922  233C  3198  2000  31A3   	fcall	___ftge
  9923  233F  1803               	btfsc	3,0
  9924  2340  2B47               	goto	l8488
  9925  2341  309C               	movlw	156
  9926  2342  0022               	movlb	2	; select bank2
  9927  2343  00C8               	movwf	?_modSquare^(0+256)
  9928  2344  30FF               	movlw	255
  9929  2345  00C9               	movwf	(?_modSquare^(0+256)+1)
  9930  2346  0008               	return
  9931  2347                     l8488:	
  9932  2347  3064               	movlw	100
  9933  2348  0022               	movlb	2	; select bank2
  9934  2349  00C8               	movwf	?_modSquare^(0+256)
  9935  234A  3000               	movlw	0
  9936  234B  00C9               	movwf	(?_modSquare^(0+256)+1)
  9937  234C  0008               	return
  9938  234D                     __end_of_modSquare:	
  9939                           
  9940                           	psect	text17
  9941  1654                     __ptext17:	
  9942 ;; *************** function _modSin *****************
  9943 ;; Defined at:
  9944 ;;		line 80 in file "modulation.c"
  9945 ;; Parameters:    Size  Location     Type
  9946 ;;  angle           3   20[BANK2 ] int 
  9947 ;;  inflection      3   23[BANK2 ] int 
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;  tmpVal          3   37[BANK2 ] int 
  9950 ;;  period          3   34[BANK2 ] int 
  9951 ;;  shift           3   31[BANK2 ] int 
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  2   20[BANK2 ] int 
  9954 ;; Registers used:
  9955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9961 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9962 ;;      Locals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9963 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9964 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9965 ;;Total ram usage:       20 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    5
  9968 ;; This function calls:
  9969 ;;		___ftadd
  9970 ;;		___ftdiv
  9971 ;;		___ftge
  9972 ;;		___ftmul
  9973 ;;		___ftneg
  9974 ;;		___fttol
  9975 ;;		___wmul
  9976 ;; This function is called by:
  9977 ;;		_updateModulationArray
  9978 ;;		_modSquare
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _modSin
  9984  1654                     _modSin:	
  9985                           
  9986                           ;modulation.c: 81: double period = 1.0;
  9987                           
  9988                           ;incstack = 0
  9989                           ; Regs used in _modSin: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9990  1654  3000               	movlw	0
  9991  1655  0022               	movlb	2	; select bank2
  9992  1656  00C2               	movwf	modSin@period^(0+256)
  9993  1657  3080               	movlw	128
  9994  1658  00C3               	movwf	(modSin@period+1)^(0+256)
  9995  1659  303F               	movlw	63
  9996  165A  00C4               	movwf	(modSin@period+2)^(0+256)
  9997                           
  9998                           ;modulation.c: 82: double shift = 0.0;
  9999  165B  3000               	movlw	0
 10000  165C  00BF               	movwf	modSin@shift^(0+256)
 10001  165D  3000               	movlw	0
 10002  165E  00C0               	movwf	(modSin@shift+1)^(0+256)
 10003  165F  3000               	movlw	0
 10004  1660  00C1               	movwf	(modSin@shift+2)^(0+256)
 10005                           
 10006                           ;modulation.c: 84: if(angle<=inflection) {
 10007  1661  0837               	movf	modSin@inflection^(0+256),w
 10008  1662  0021               	movlb	1	; select bank1
 10009  1663  00A0               	movwf	___ftge@ff1^(0+128)
 10010  1664  0022               	movlb	2	; select bank2
 10011  1665  0838               	movf	(modSin@inflection+1)^(0+256),w
 10012  1666  0021               	movlb	1	; select bank1
 10013  1667  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10014  1668  0022               	movlb	2	; select bank2
 10015  1669  0839               	movf	(modSin@inflection+2)^(0+256),w
 10016  166A  0021               	movlb	1	; select bank1
 10017  166B  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10018  166C  0022               	movlb	2	; select bank2
 10019  166D  0834               	movf	modSin@angle^(0+256),w
 10020  166E  0021               	movlb	1	; select bank1
 10021  166F  00A3               	movwf	___ftge@ff2^(0+128)
 10022  1670  0022               	movlb	2	; select bank2
 10023  1671  0835               	movf	(modSin@angle+1)^(0+256),w
 10024  1672  0021               	movlb	1	; select bank1
 10025  1673  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10026  1674  0022               	movlb	2	; select bank2
 10027  1675  0836               	movf	(modSin@angle+2)^(0+256),w
 10028  1676  0021               	movlb	1	; select bank1
 10029  1677  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10030  1678  3198  2000  3196   	fcall	___ftge
 10031  167B  1C03               	btfss	3,0
 10032  167C  2E89               	goto	l8156
 10033                           
 10034                           ;modulation.c: 85: period = 180.0/inflection;
 10035  167D  0022               	movlb	2	; select bank2
 10036  167E  0837               	movf	modSin@inflection^(0+256),w
 10037  167F  0021               	movlb	1	; select bank1
 10038  1680  00CE               	movwf	___ftdiv@f2^(0+128)
 10039  1681  0022               	movlb	2	; select bank2
 10040  1682  0838               	movf	(modSin@inflection+1)^(0+256),w
 10041  1683  0021               	movlb	1	; select bank1
 10042  1684  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10043  1685  0022               	movlb	2	; select bank2
 10044  1686  0839               	movf	(modSin@inflection+2)^(0+256),w
 10045  1687  0021               	movlb	1	; select bank1
 10046  1688  2F44               	goto	L8
 10047  1689                     l8156:	
 10048                           ;modulation.c: 86: } else {
 10049                           
 10050                           
 10051                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10052  1689  0022               	movlb	2	; select bank2
 10053  168A  0837               	movf	modSin@inflection^(0+256),w
 10054  168B  0021               	movlb	1	; select bank1
 10055  168C  00B1               	movwf	___ftmul@f2^(0+128)
 10056  168D  0022               	movlb	2	; select bank2
 10057  168E  0838               	movf	(modSin@inflection+1)^(0+256),w
 10058  168F  0021               	movlb	1	; select bank1
 10059  1690  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10060  1691  0022               	movlb	2	; select bank2
 10061  1692  0839               	movf	(modSin@inflection+2)^(0+256),w
 10062  1693  0021               	movlb	1	; select bank1
 10063  1694  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10064  1695  3000               	movlw	0
 10065  1696  00AE               	movwf	___ftmul@f1^(0+128)
 10066  1697  3000               	movlw	0
 10067  1698  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10068  1699  3040               	movlw	64
 10069  169A  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10070  169B  319E  267B  3196   	fcall	___ftmul
 10071  169E  0021               	movlb	1	; select bank1
 10072  169F  082E               	movf	?___ftmul^(0+128),w
 10073  16A0  00BE               	movwf	___ftneg@f1^(0+128)
 10074  16A1  082F               	movf	(?___ftmul+1)^(0+128),w
 10075  16A2  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10076  16A3  0830               	movf	(?___ftmul+2)^(0+128),w
 10077  16A4  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10078  16A5  31AF  2724  3196   	fcall	___ftneg
 10079  16A8  0021               	movlb	1	; select bank1
 10080  16A9  083E               	movf	?___ftneg^(0+128),w
 10081  16AA  00C4               	movwf	___ftadd@f2^(0+128)
 10082  16AB  083F               	movf	(?___ftneg+1)^(0+128),w
 10083  16AC  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10084  16AD  0840               	movf	(?___ftneg+2)^(0+128),w
 10085  16AE  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10086  16AF  3000               	movlw	0
 10087  16B0  00C1               	movwf	___ftadd@f1^(0+128)
 10088  16B1  30B4               	movlw	180
 10089  16B2  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10090  16B3  3043               	movlw	67
 10091  16B4  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10092  16B5  3190  201F  3196   	fcall	___ftadd
 10093  16B8  0021               	movlb	1	; select bank1
 10094  16B9  0841               	movf	?___ftadd^(0+128),w
 10095  16BA  0022               	movlb	2	; select bank2
 10096  16BB  00BC               	movwf	_modSin$2842^(0+256)
 10097  16BC  0021               	movlb	1	; select bank1
 10098  16BD  0842               	movf	(?___ftadd+1)^(0+128),w
 10099  16BE  0022               	movlb	2	; select bank2
 10100  16BF  00BD               	movwf	(_modSin$2842+1)^(0+256)
 10101  16C0  0021               	movlb	1	; select bank1
 10102  16C1  0843               	movf	(?___ftadd+2)^(0+128),w
 10103  16C2  0022               	movlb	2	; select bank2
 10104  16C3  00BE               	movwf	(_modSin$2842+2)^(0+256)
 10105                           
 10106                           ;modulation.c: 87: shift = -(360-inflection*2)*(180/(360-inflection));
 10107  16C4  083C               	movf	_modSin$2842^(0+256),w
 10108  16C5  0021               	movlb	1	; select bank1
 10109  16C6  00BE               	movwf	___ftneg@f1^(0+128)
 10110  16C7  0022               	movlb	2	; select bank2
 10111  16C8  083D               	movf	(_modSin$2842+1)^(0+256),w
 10112  16C9  0021               	movlb	1	; select bank1
 10113  16CA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10114  16CB  0022               	movlb	2	; select bank2
 10115  16CC  083E               	movf	(_modSin$2842+2)^(0+256),w
 10116  16CD  0021               	movlb	1	; select bank1
 10117  16CE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10118  16CF  31AF  2724  3196   	fcall	___ftneg
 10119  16D2  0021               	movlb	1	; select bank1
 10120  16D3  083E               	movf	?___ftneg^(0+128),w
 10121  16D4  00AE               	movwf	___ftmul@f1^(0+128)
 10122  16D5  083F               	movf	(?___ftneg+1)^(0+128),w
 10123  16D6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10124  16D7  0840               	movf	(?___ftneg+2)^(0+128),w
 10125  16D8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10126  16D9  3000               	movlw	0
 10127  16DA  00C1               	movwf	___ftadd@f1^(0+128)
 10128  16DB  30B4               	movlw	180
 10129  16DC  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10130  16DD  3043               	movlw	67
 10131  16DE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10132  16DF  0022               	movlb	2	; select bank2
 10133  16E0  0837               	movf	modSin@inflection^(0+256),w
 10134  16E1  0021               	movlb	1	; select bank1
 10135  16E2  00BE               	movwf	___ftneg@f1^(0+128)
 10136  16E3  0022               	movlb	2	; select bank2
 10137  16E4  0838               	movf	(modSin@inflection+1)^(0+256),w
 10138  16E5  0021               	movlb	1	; select bank1
 10139  16E6  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10140  16E7  0022               	movlb	2	; select bank2
 10141  16E8  0839               	movf	(modSin@inflection+2)^(0+256),w
 10142  16E9  0021               	movlb	1	; select bank1
 10143  16EA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10144  16EB  31AF  2724  3196   	fcall	___ftneg
 10145  16EE  0021               	movlb	1	; select bank1
 10146  16EF  083E               	movf	?___ftneg^(0+128),w
 10147  16F0  00C4               	movwf	___ftadd@f2^(0+128)
 10148  16F1  083F               	movf	(?___ftneg+1)^(0+128),w
 10149  16F2  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10150  16F3  0840               	movf	(?___ftneg+2)^(0+128),w
 10151  16F4  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10152  16F5  3190  201F  3196   	fcall	___ftadd
 10153  16F8  0021               	movlb	1	; select bank1
 10154  16F9  0841               	movf	?___ftadd^(0+128),w
 10155  16FA  00CE               	movwf	___ftdiv@f2^(0+128)
 10156  16FB  0842               	movf	(?___ftadd+1)^(0+128),w
 10157  16FC  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10158  16FD  0843               	movf	(?___ftadd+2)^(0+128),w
 10159  16FE  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10160  16FF  3000               	movlw	0
 10161  1700  00D1               	movwf	___ftdiv@f1^(0+128)
 10162  1701  3034               	movlw	52
 10163  1702  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10164  1703  3043               	movlw	67
 10165  1704  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10166  1705  319C  2474  3196   	fcall	___ftdiv
 10167  1708  0021               	movlb	1	; select bank1
 10168  1709  084E               	movf	?___ftdiv^(0+128),w
 10169  170A  00B1               	movwf	___ftmul@f2^(0+128)
 10170  170B  084F               	movf	(?___ftdiv+1)^(0+128),w
 10171  170C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10172  170D  0850               	movf	(?___ftdiv+2)^(0+128),w
 10173  170E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10174  170F  319E  267B  3196   	fcall	___ftmul
 10175  1712  0021               	movlb	1	; select bank1
 10176  1713  082E               	movf	?___ftmul^(0+128),w
 10177  1714  0022               	movlb	2	; select bank2
 10178  1715  00BF               	movwf	modSin@shift^(0+256)
 10179  1716  0021               	movlb	1	; select bank1
 10180  1717  082F               	movf	(?___ftmul+1)^(0+128),w
 10181  1718  0022               	movlb	2	; select bank2
 10182  1719  00C0               	movwf	(modSin@shift+1)^(0+256)
 10183  171A  0021               	movlb	1	; select bank1
 10184  171B  0830               	movf	(?___ftmul+2)^(0+128),w
 10185  171C  0022               	movlb	2	; select bank2
 10186  171D  00C1               	movwf	(modSin@shift+2)^(0+256)
 10187                           
 10188                           ;modulation.c: 88: period = 180/(360-inflection);
 10189  171E  3000               	movlw	0
 10190  171F  0021               	movlb	1	; select bank1
 10191  1720  00C1               	movwf	___ftadd@f1^(0+128)
 10192  1721  30B4               	movlw	180
 10193  1722  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10194  1723  3043               	movlw	67
 10195  1724  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10196  1725  0022               	movlb	2	; select bank2
 10197  1726  0837               	movf	modSin@inflection^(0+256),w
 10198  1727  0021               	movlb	1	; select bank1
 10199  1728  00BE               	movwf	___ftneg@f1^(0+128)
 10200  1729  0022               	movlb	2	; select bank2
 10201  172A  0838               	movf	(modSin@inflection+1)^(0+256),w
 10202  172B  0021               	movlb	1	; select bank1
 10203  172C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10204  172D  0022               	movlb	2	; select bank2
 10205  172E  0839               	movf	(modSin@inflection+2)^(0+256),w
 10206  172F  0021               	movlb	1	; select bank1
 10207  1730  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10208  1731  31AF  2724  3196   	fcall	___ftneg
 10209  1734  0021               	movlb	1	; select bank1
 10210  1735  083E               	movf	?___ftneg^(0+128),w
 10211  1736  00C4               	movwf	___ftadd@f2^(0+128)
 10212  1737  083F               	movf	(?___ftneg+1)^(0+128),w
 10213  1738  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10214  1739  0840               	movf	(?___ftneg+2)^(0+128),w
 10215  173A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10216  173B  3190  201F  3196   	fcall	___ftadd
 10217  173E  0021               	movlb	1	; select bank1
 10218  173F  0841               	movf	?___ftadd^(0+128),w
 10219  1740  00CE               	movwf	___ftdiv@f2^(0+128)
 10220  1741  0842               	movf	(?___ftadd+1)^(0+128),w
 10221  1742  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10222  1743  0843               	movf	(?___ftadd+2)^(0+128),w
 10223  1744                     L8:	
 10224  1744  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10225  1745  3000               	movlw	0
 10226  1746  00D1               	movwf	___ftdiv@f1^(0+128)
 10227  1747  3034               	movlw	52
 10228  1748  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10229  1749  3043               	movlw	67
 10230  174A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10231  174B  319C  2474  3196   	fcall	___ftdiv
 10232  174E  0021               	movlb	1	; select bank1
 10233  174F  084E               	movf	?___ftdiv^(0+128),w
 10234  1750  0022               	movlb	2	; select bank2
 10235  1751  00C2               	movwf	modSin@period^(0+256)
 10236  1752  0021               	movlb	1	; select bank1
 10237  1753  084F               	movf	(?___ftdiv+1)^(0+128),w
 10238  1754  0022               	movlb	2	; select bank2
 10239  1755  00C3               	movwf	(modSin@period+1)^(0+256)
 10240  1756  0021               	movlb	1	; select bank1
 10241  1757  0850               	movf	(?___ftdiv+2)^(0+128),w
 10242  1758  0022               	movlb	2	; select bank2
 10243  1759  00C4               	movwf	(modSin@period+2)^(0+256)
 10244                           
 10245                           ;modulation.c: 90: }
 10246                           ;modulation.c: 91: double tmpVal = (period*angle-shift) /3;
 10247  175A  3000               	movlw	0
 10248  175B  0021               	movlb	1	; select bank1
 10249  175C  00CE               	movwf	___ftdiv@f2^(0+128)
 10250  175D  3040               	movlw	64
 10251  175E  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10252  175F  3040               	movlw	64
 10253  1760  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10254  1761  0022               	movlb	2	; select bank2
 10255  1762  083F               	movf	modSin@shift^(0+256),w
 10256  1763  0021               	movlb	1	; select bank1
 10257  1764  00BE               	movwf	___ftneg@f1^(0+128)
 10258  1765  0022               	movlb	2	; select bank2
 10259  1766  0840               	movf	(modSin@shift+1)^(0+256),w
 10260  1767  0021               	movlb	1	; select bank1
 10261  1768  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10262  1769  0022               	movlb	2	; select bank2
 10263  176A  0841               	movf	(modSin@shift+2)^(0+256),w
 10264  176B  0021               	movlb	1	; select bank1
 10265  176C  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10266  176D  31AF  2724  3196   	fcall	___ftneg
 10267  1770  0021               	movlb	1	; select bank1
 10268  1771  083E               	movf	?___ftneg^(0+128),w
 10269  1772  00C1               	movwf	___ftadd@f1^(0+128)
 10270  1773  083F               	movf	(?___ftneg+1)^(0+128),w
 10271  1774  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10272  1775  0840               	movf	(?___ftneg+2)^(0+128),w
 10273  1776  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10274  1777  0022               	movlb	2	; select bank2
 10275  1778  0834               	movf	modSin@angle^(0+256),w
 10276  1779  0021               	movlb	1	; select bank1
 10277  177A  00AE               	movwf	___ftmul@f1^(0+128)
 10278  177B  0022               	movlb	2	; select bank2
 10279  177C  0835               	movf	(modSin@angle+1)^(0+256),w
 10280  177D  0021               	movlb	1	; select bank1
 10281  177E  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10282  177F  0022               	movlb	2	; select bank2
 10283  1780  0836               	movf	(modSin@angle+2)^(0+256),w
 10284  1781  0021               	movlb	1	; select bank1
 10285  1782  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10286  1783  0022               	movlb	2	; select bank2
 10287  1784  0842               	movf	modSin@period^(0+256),w
 10288  1785  0021               	movlb	1	; select bank1
 10289  1786  00B1               	movwf	___ftmul@f2^(0+128)
 10290  1787  0022               	movlb	2	; select bank2
 10291  1788  0843               	movf	(modSin@period+1)^(0+256),w
 10292  1789  0021               	movlb	1	; select bank1
 10293  178A  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10294  178B  0022               	movlb	2	; select bank2
 10295  178C  0844               	movf	(modSin@period+2)^(0+256),w
 10296  178D  0021               	movlb	1	; select bank1
 10297  178E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10298  178F  319E  267B  3196   	fcall	___ftmul
 10299  1792  0021               	movlb	1	; select bank1
 10300  1793  082E               	movf	?___ftmul^(0+128),w
 10301  1794  00C4               	movwf	___ftadd@f2^(0+128)
 10302  1795  082F               	movf	(?___ftmul+1)^(0+128),w
 10303  1796  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10304  1797  0830               	movf	(?___ftmul+2)^(0+128),w
 10305  1798  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10306  1799  3190  201F  3196   	fcall	___ftadd
 10307  179C  0021               	movlb	1	; select bank1
 10308  179D  0841               	movf	?___ftadd^(0+128),w
 10309  179E  00D1               	movwf	___ftdiv@f1^(0+128)
 10310  179F  0842               	movf	(?___ftadd+1)^(0+128),w
 10311  17A0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10312  17A1  0843               	movf	(?___ftadd+2)^(0+128),w
 10313  17A2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10314  17A3  319C  2474  3196   	fcall	___ftdiv
 10315  17A6  0021               	movlb	1	; select bank1
 10316  17A7  084E               	movf	?___ftdiv^(0+128),w
 10317  17A8  0022               	movlb	2	; select bank2
 10318  17A9  00C5               	movwf	modSin@tmpVal^(0+256)
 10319  17AA  0021               	movlb	1	; select bank1
 10320  17AB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10321  17AC  0022               	movlb	2	; select bank2
 10322  17AD  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10323  17AE  0021               	movlb	1	; select bank1
 10324  17AF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10325  17B0  0022               	movlb	2	; select bank2
 10326  17B1  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10327                           
 10328                           ;modulation.c: 92: tmpVal = sinArray[(int)(tmpVal)];
 10329  17B2  0845               	movf	modSin@tmpVal^(0+256),w
 10330  17B3  00A0               	movwf	___fttol@f1^(0+256)
 10331  17B4  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10332  17B5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10333  17B6  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10334  17B7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10335  17B8  319A  2246  3196   	fcall	___fttol
 10336  17BB  0022               	movlb	2	; select bank2
 10337  17BC  0821               	movf	(?___fttol^(0+256)+1),w
 10338  17BD  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 10339  17BE  0820               	movf	?___fttol^(0+256),w
 10340  17BF  00AE               	movwf	___wmul@multiplier^(0+256)
 10341  17C0  3003               	movlw	3
 10342  17C1  00B0               	movwf	___wmul@multiplicand^(0+256)
 10343  17C2  3000               	movlw	0
 10344  17C3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 10345  17C4  31AF  27C8  3196   	fcall	___wmul
 10346  17C7  3082               	movlw	130
 10347  17C8  0022               	movlb	2	; select bank2
 10348  17C9  00BA               	movwf	??_modSin^(0+256)
 10349  17CA  3024               	movlw	36
 10350  17CB  00BB               	movwf	(??_modSin^(0+256)+1)
 10351  17CC  082E               	movf	?___wmul^(0+256),w
 10352  17CD  073A               	addwf	??_modSin^(0+256),w
 10353  17CE  0086               	movwf	6
 10354  17CF  082F               	movf	(?___wmul+1)^(0+256),w
 10355  17D0  3D3B               	addwfc	(??_modSin+1)^(0+256),w
 10356  17D1  0087               	movwf	7
 10357  17D2  3F40               	moviw [0]fsr1
 10358  17D3  00C5               	movwf	modSin@tmpVal^(0+256)
 10359  17D4  3F41               	moviw [1]fsr1
 10360  17D5  00C6               	movwf	(modSin@tmpVal+1)^(0+256)
 10361  17D6  3F42               	moviw [2]fsr1
 10362  17D7  00C7               	movwf	(modSin@tmpVal+2)^(0+256)
 10363                           
 10364                           ;modulation.c: 93: return (int)(100.0 * tmpVal);
 10365  17D8  0845               	movf	modSin@tmpVal^(0+256),w
 10366  17D9  0021               	movlb	1	; select bank1
 10367  17DA  00B1               	movwf	___ftmul@f2^(0+128)
 10368  17DB  0022               	movlb	2	; select bank2
 10369  17DC  0846               	movf	(modSin@tmpVal+1)^(0+256),w
 10370  17DD  0021               	movlb	1	; select bank1
 10371  17DE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10372  17DF  0022               	movlb	2	; select bank2
 10373  17E0  0847               	movf	(modSin@tmpVal+2)^(0+256),w
 10374  17E1  0021               	movlb	1	; select bank1
 10375  17E2  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10376  17E3  3000               	movlw	0
 10377  17E4  00AE               	movwf	___ftmul@f1^(0+128)
 10378  17E5  30C8               	movlw	200
 10379  17E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10380  17E7  3042               	movlw	66
 10381  17E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10382  17E9  319E  267B  3196   	fcall	___ftmul
 10383  17EC  0021               	movlb	1	; select bank1
 10384  17ED  082E               	movf	?___ftmul^(0+128),w
 10385  17EE  0022               	movlb	2	; select bank2
 10386  17EF  00A0               	movwf	___fttol@f1^(0+256)
 10387  17F0  0021               	movlb	1	; select bank1
 10388  17F1  082F               	movf	(?___ftmul+1)^(0+128),w
 10389  17F2  0022               	movlb	2	; select bank2
 10390  17F3  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10391  17F4  0021               	movlb	1	; select bank1
 10392  17F5  0830               	movf	(?___ftmul+2)^(0+128),w
 10393  17F6  0022               	movlb	2	; select bank2
 10394  17F7  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10395  17F8  319A  2246         	fcall	___fttol
 10396  17FA  0022               	movlb	2	; select bank2
 10397  17FB  0821               	movf	(?___fttol^(0+256)+1),w
 10398  17FC  00B5               	movwf	(?_modSin+1)^(0+256)
 10399  17FD  0820               	movf	?___fttol^(0+256),w
 10400  17FE  00B4               	movwf	?_modSin^(0+256)
 10401  17FF  0008               	return
 10402  1800                     __end_of_modSin:	
 10403                           
 10404                           	psect	text18
 10405  2019                     __ptext18:	
 10406 ;; *************** function _modSawRev *****************
 10407 ;; Defined at:
 10408 ;;		line 135 in file "modulation.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  angle           3   37[BANK2 ] int 
 10411 ;;  inflection      3   40[BANK2 ] int 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  2   37[BANK2 ] int 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0, pclath, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10423 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10425 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10426 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10427 ;;Total ram usage:        8 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    6
 10430 ;; This function calls:
 10431 ;;		_modSaw
 10432 ;; This function is called by:
 10433 ;;		_updateModulationArray
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           
 10438                           ;psect for function _modSawRev
 10439  2019                     _modSawRev:	
 10440                           
 10441                           ;modulation.c: 136: return -1 * modSaw(angle, inflection);
 10442                           
 10443                           ;incstack = 0
 10444                           ; Regs used in _modSawRev: [wreg+status,2+status,0+pclath+cstack]
 10445  2019  0022               	movlb	2	; select bank2
 10446  201A  0845               	movf	modSawRev@angle^(0+256),w
 10447  201B  00AE               	movwf	modSaw@angle^(0+256)
 10448  201C  0846               	movf	(modSawRev@angle+1)^(0+256),w
 10449  201D  00AF               	movwf	(modSaw@angle+1)^(0+256)
 10450  201E  0847               	movf	(modSawRev@angle+2)^(0+256),w
 10451  201F  00B0               	movwf	(modSaw@angle+2)^(0+256)
 10452  2020  0848               	movf	modSawRev@inflection^(0+256),w
 10453  2021  00B1               	movwf	modSaw@inflection^(0+256)
 10454  2022  0849               	movf	(modSawRev@inflection+1)^(0+256),w
 10455  2023  00B2               	movwf	(modSaw@inflection+1)^(0+256)
 10456  2024  084A               	movf	(modSawRev@inflection+2)^(0+256),w
 10457  2025  00B3               	movwf	(modSaw@inflection+2)^(0+256)
 10458  2026  3194  24AA         	fcall	_modSaw
 10459  2028  0022               	movlb	2	; select bank2
 10460  2029  092E               	comf	?_modSaw^(0+256),w
 10461  202A  00CB               	movwf	??_modSawRev^(0+256)
 10462  202B  092F               	comf	(?_modSaw+1)^(0+256),w
 10463  202C  00CC               	movwf	(??_modSawRev^(0+256)+1)
 10464  202D  0ACB               	incf	??_modSawRev^(0+256),f
 10465  202E  1903               	skipnz
 10466  202F  0ACC               	incf	(??_modSawRev^(0+256)+1),f
 10467  2030  084B               	movf	??_modSawRev^(0+256),w
 10468  2031  00C5               	movwf	?_modSawRev^(0+256)
 10469  2032  084C               	movf	(??_modSawRev+1)^(0+256),w
 10470  2033  00C6               	movwf	(?_modSawRev+1)^(0+256)
 10471  2034  0008               	return
 10472  2035                     __end_of_modSawRev:	
 10473                           
 10474                           	psect	text19
 10475  14AA                     __ptext19:	
 10476 ;; *************** function _modSaw *****************
 10477 ;; Defined at:
 10478 ;;		line 119 in file "modulation.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  angle           3   14[BANK2 ] int 
 10481 ;;  inflection      3   17[BANK2 ] int 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  period          3   34[BANK2 ] int 
 10484 ;;  shift           3   31[BANK2 ] int 
 10485 ;;  mod             2   29[BANK2 ] int 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  2   14[BANK2 ] int 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0, pclath, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10495 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10496 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10498 ;;      Totals:         0       0       0      23       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10499 ;;Total ram usage:       23 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    5
 10502 ;; This function calls:
 10503 ;;		___ftadd
 10504 ;;		___ftdiv
 10505 ;;		___ftge
 10506 ;;		___ftmul
 10507 ;;		___ftneg
 10508 ;;		___fttol
 10509 ;; This function is called by:
 10510 ;;		_updateModulationArray
 10511 ;;		_modSawRev
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           
 10516                           ;psect for function _modSaw
 10517  14AA                     _modSaw:	
 10518                           
 10519                           ;modulation.c: 120: double period = 1.0;
 10520                           
 10521                           ;incstack = 0
 10522                           ; Regs used in _modSaw: [wreg+status,2+status,0+pclath+cstack]
 10523  14AA  3000               	movlw	0
 10524  14AB  0022               	movlb	2	; select bank2
 10525  14AC  00C2               	movwf	modSaw@period^(0+256)
 10526  14AD  3080               	movlw	128
 10527  14AE  00C3               	movwf	(modSaw@period+1)^(0+256)
 10528  14AF  303F               	movlw	63
 10529  14B0  00C4               	movwf	(modSaw@period+2)^(0+256)
 10530                           
 10531                           ;modulation.c: 121: double shift = 0;
 10532  14B1  3000               	movlw	0
 10533  14B2  00BF               	movwf	modSaw@shift^(0+256)
 10534  14B3  3000               	movlw	0
 10535  14B4  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10536  14B5  3000               	movlw	0
 10537  14B6  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10538                           
 10539                           ;modulation.c: 123: if(angle<=inflection) {
 10540  14B7  0831               	movf	modSaw@inflection^(0+256),w
 10541  14B8  0021               	movlb	1	; select bank1
 10542  14B9  00A0               	movwf	___ftge@ff1^(0+128)
 10543  14BA  0022               	movlb	2	; select bank2
 10544  14BB  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10545  14BC  0021               	movlb	1	; select bank1
 10546  14BD  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 10547  14BE  0022               	movlb	2	; select bank2
 10548  14BF  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10549  14C0  0021               	movlb	1	; select bank1
 10550  14C1  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 10551  14C2  0022               	movlb	2	; select bank2
 10552  14C3  082E               	movf	modSaw@angle^(0+256),w
 10553  14C4  0021               	movlb	1	; select bank1
 10554  14C5  00A3               	movwf	___ftge@ff2^(0+128)
 10555  14C6  0022               	movlb	2	; select bank2
 10556  14C7  082F               	movf	(modSaw@angle+1)^(0+256),w
 10557  14C8  0021               	movlb	1	; select bank1
 10558  14C9  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 10559  14CA  0022               	movlb	2	; select bank2
 10560  14CB  0830               	movf	(modSaw@angle+2)^(0+256),w
 10561  14CC  0021               	movlb	1	; select bank1
 10562  14CD  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 10563  14CE  3198  2000  3194   	fcall	___ftge
 10564  14D1  1C03               	btfss	3,0
 10565  14D2  2CDF               	goto	l8170
 10566                           
 10567                           ;modulation.c: 124: period = 180.0/inflection;
 10568  14D3  0022               	movlb	2	; select bank2
 10569  14D4  0831               	movf	modSaw@inflection^(0+256),w
 10570  14D5  0021               	movlb	1	; select bank1
 10571  14D6  00CE               	movwf	___ftdiv@f2^(0+128)
 10572  14D7  0022               	movlb	2	; select bank2
 10573  14D8  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10574  14D9  0021               	movlb	1	; select bank1
 10575  14DA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10576  14DB  0022               	movlb	2	; select bank2
 10577  14DC  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10578  14DD  0021               	movlb	1	; select bank1
 10579  14DE  2DBC               	goto	L9
 10580  14DF                     l8170:	
 10581                           ;modulation.c: 125: } else {
 10582                           
 10583                           
 10584                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10585  14DF  0022               	movlb	2	; select bank2
 10586  14E0  0831               	movf	modSaw@inflection^(0+256),w
 10587  14E1  0021               	movlb	1	; select bank1
 10588  14E2  00B1               	movwf	___ftmul@f2^(0+128)
 10589  14E3  0022               	movlb	2	; select bank2
 10590  14E4  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10591  14E5  0021               	movlb	1	; select bank1
 10592  14E6  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10593  14E7  0022               	movlb	2	; select bank2
 10594  14E8  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10595  14E9  0021               	movlb	1	; select bank1
 10596  14EA  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10597  14EB  3000               	movlw	0
 10598  14EC  00AE               	movwf	___ftmul@f1^(0+128)
 10599  14ED  3000               	movlw	0
 10600  14EE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10601  14EF  3040               	movlw	64
 10602  14F0  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10603  14F1  319E  267B  3194   	fcall	___ftmul
 10604  14F4  0021               	movlb	1	; select bank1
 10605  14F5  082E               	movf	?___ftmul^(0+128),w
 10606  14F6  00BE               	movwf	___ftneg@f1^(0+128)
 10607  14F7  082F               	movf	(?___ftmul+1)^(0+128),w
 10608  14F8  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10609  14F9  0830               	movf	(?___ftmul+2)^(0+128),w
 10610  14FA  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10611  14FB  31AF  2724  3194   	fcall	___ftneg
 10612  14FE  0021               	movlb	1	; select bank1
 10613  14FF  083E               	movf	?___ftneg^(0+128),w
 10614  1500  00C4               	movwf	___ftadd@f2^(0+128)
 10615  1501  083F               	movf	(?___ftneg+1)^(0+128),w
 10616  1502  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10617  1503  0840               	movf	(?___ftneg+2)^(0+128),w
 10618  1504  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10619  1505  3000               	movlw	0
 10620  1506  00C1               	movwf	___ftadd@f1^(0+128)
 10621  1507  30B4               	movlw	180
 10622  1508  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10623  1509  3043               	movlw	67
 10624  150A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10625  150B  3190  201F  3194   	fcall	___ftadd
 10626  150E  0021               	movlb	1	; select bank1
 10627  150F  0841               	movf	?___ftadd^(0+128),w
 10628  1510  0022               	movlb	2	; select bank2
 10629  1511  00B4               	movwf	_modSaw$2844^(0+256)
 10630  1512  0021               	movlb	1	; select bank1
 10631  1513  0842               	movf	(?___ftadd+1)^(0+128),w
 10632  1514  0022               	movlb	2	; select bank2
 10633  1515  00B5               	movwf	(_modSaw$2844+1)^(0+256)
 10634  1516  0021               	movlb	1	; select bank1
 10635  1517  0843               	movf	(?___ftadd+2)^(0+128),w
 10636  1518  0022               	movlb	2	; select bank2
 10637  1519  00B6               	movwf	(_modSaw$2844+2)^(0+256)
 10638                           
 10639                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10640  151A  0834               	movf	_modSaw$2844^(0+256),w
 10641  151B  0021               	movlb	1	; select bank1
 10642  151C  00BE               	movwf	___ftneg@f1^(0+128)
 10643  151D  0022               	movlb	2	; select bank2
 10644  151E  0835               	movf	(_modSaw$2844+1)^(0+256),w
 10645  151F  0021               	movlb	1	; select bank1
 10646  1520  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10647  1521  0022               	movlb	2	; select bank2
 10648  1522  0836               	movf	(_modSaw$2844+2)^(0+256),w
 10649  1523  0021               	movlb	1	; select bank1
 10650  1524  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10651  1525  31AF  2724  3194   	fcall	___ftneg
 10652  1528  0021               	movlb	1	; select bank1
 10653  1529  083E               	movf	?___ftneg^(0+128),w
 10654  152A  00AE               	movwf	___ftmul@f1^(0+128)
 10655  152B  083F               	movf	(?___ftneg+1)^(0+128),w
 10656  152C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10657  152D  0840               	movf	(?___ftneg+2)^(0+128),w
 10658  152E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10659  152F  3000               	movlw	0
 10660  1530  00C1               	movwf	___ftadd@f1^(0+128)
 10661  1531  30B4               	movlw	180
 10662  1532  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10663  1533  3043               	movlw	67
 10664  1534  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10665  1535  0022               	movlb	2	; select bank2
 10666  1536  0831               	movf	modSaw@inflection^(0+256),w
 10667  1537  0021               	movlb	1	; select bank1
 10668  1538  00BE               	movwf	___ftneg@f1^(0+128)
 10669  1539  0022               	movlb	2	; select bank2
 10670  153A  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10671  153B  0021               	movlb	1	; select bank1
 10672  153C  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10673  153D  0022               	movlb	2	; select bank2
 10674  153E  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10675  153F  0021               	movlb	1	; select bank1
 10676  1540  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10677  1541  31AF  2724  3194   	fcall	___ftneg
 10678  1544  0021               	movlb	1	; select bank1
 10679  1545  083E               	movf	?___ftneg^(0+128),w
 10680  1546  00C4               	movwf	___ftadd@f2^(0+128)
 10681  1547  083F               	movf	(?___ftneg+1)^(0+128),w
 10682  1548  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10683  1549  0840               	movf	(?___ftneg+2)^(0+128),w
 10684  154A  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10685  154B  3190  201F  3194   	fcall	___ftadd
 10686  154E  0021               	movlb	1	; select bank1
 10687  154F  0841               	movf	?___ftadd^(0+128),w
 10688  1550  00CE               	movwf	___ftdiv@f2^(0+128)
 10689  1551  0842               	movf	(?___ftadd+1)^(0+128),w
 10690  1552  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10691  1553  0843               	movf	(?___ftadd+2)^(0+128),w
 10692  1554  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10693  1555  3000               	movlw	0
 10694  1556  00D1               	movwf	___ftdiv@f1^(0+128)
 10695  1557  3034               	movlw	52
 10696  1558  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10697  1559  3043               	movlw	67
 10698  155A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10699  155B  319C  2474  3194   	fcall	___ftdiv
 10700  155E  0021               	movlb	1	; select bank1
 10701  155F  084E               	movf	?___ftdiv^(0+128),w
 10702  1560  00B1               	movwf	___ftmul@f2^(0+128)
 10703  1561  084F               	movf	(?___ftdiv+1)^(0+128),w
 10704  1562  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10705  1563  0850               	movf	(?___ftdiv+2)^(0+128),w
 10706  1564  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10707  1565  319E  267B  3194   	fcall	___ftmul
 10708  1568  0021               	movlb	1	; select bank1
 10709  1569  082E               	movf	?___ftmul^(0+128),w
 10710  156A  0022               	movlb	2	; select bank2
 10711  156B  00B7               	movwf	_modSaw$2845^(0+256)
 10712  156C  0021               	movlb	1	; select bank1
 10713  156D  082F               	movf	(?___ftmul+1)^(0+128),w
 10714  156E  0022               	movlb	2	; select bank2
 10715  156F  00B8               	movwf	(_modSaw$2845+1)^(0+256)
 10716  1570  0021               	movlb	1	; select bank1
 10717  1571  0830               	movf	(?___ftmul+2)^(0+128),w
 10718  1572  0022               	movlb	2	; select bank2
 10719  1573  00B9               	movwf	(_modSaw$2845+2)^(0+256)
 10720                           
 10721                           ;modulation.c: 126: shift = -(360-inflection*2)*(180/(360-inflection)) + 360;
 10722  1574  3000               	movlw	0
 10723  1575  0021               	movlb	1	; select bank1
 10724  1576  00C1               	movwf	___ftadd@f1^(0+128)
 10725  1577  30B4               	movlw	180
 10726  1578  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10727  1579  3043               	movlw	67
 10728  157A  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10729  157B  0022               	movlb	2	; select bank2
 10730  157C  0837               	movf	_modSaw$2845^(0+256),w
 10731  157D  0021               	movlb	1	; select bank1
 10732  157E  00C4               	movwf	___ftadd@f2^(0+128)
 10733  157F  0022               	movlb	2	; select bank2
 10734  1580  0838               	movf	(_modSaw$2845+1)^(0+256),w
 10735  1581  0021               	movlb	1	; select bank1
 10736  1582  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10737  1583  0022               	movlb	2	; select bank2
 10738  1584  0839               	movf	(_modSaw$2845+2)^(0+256),w
 10739  1585  0021               	movlb	1	; select bank1
 10740  1586  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10741  1587  3190  201F  3194   	fcall	___ftadd
 10742  158A  0021               	movlb	1	; select bank1
 10743  158B  0841               	movf	?___ftadd^(0+128),w
 10744  158C  0022               	movlb	2	; select bank2
 10745  158D  00BF               	movwf	modSaw@shift^(0+256)
 10746  158E  0021               	movlb	1	; select bank1
 10747  158F  0842               	movf	(?___ftadd+1)^(0+128),w
 10748  1590  0022               	movlb	2	; select bank2
 10749  1591  00C0               	movwf	(modSaw@shift+1)^(0+256)
 10750  1592  0021               	movlb	1	; select bank1
 10751  1593  0843               	movf	(?___ftadd+2)^(0+128),w
 10752  1594  0022               	movlb	2	; select bank2
 10753  1595  00C1               	movwf	(modSaw@shift+2)^(0+256)
 10754                           
 10755                           ;modulation.c: 127: period = 180/(360-inflection);
 10756  1596  3000               	movlw	0
 10757  1597  0021               	movlb	1	; select bank1
 10758  1598  00C1               	movwf	___ftadd@f1^(0+128)
 10759  1599  30B4               	movlw	180
 10760  159A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10761  159B  3043               	movlw	67
 10762  159C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10763  159D  0022               	movlb	2	; select bank2
 10764  159E  0831               	movf	modSaw@inflection^(0+256),w
 10765  159F  0021               	movlb	1	; select bank1
 10766  15A0  00BE               	movwf	___ftneg@f1^(0+128)
 10767  15A1  0022               	movlb	2	; select bank2
 10768  15A2  0832               	movf	(modSaw@inflection+1)^(0+256),w
 10769  15A3  0021               	movlb	1	; select bank1
 10770  15A4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10771  15A5  0022               	movlb	2	; select bank2
 10772  15A6  0833               	movf	(modSaw@inflection+2)^(0+256),w
 10773  15A7  0021               	movlb	1	; select bank1
 10774  15A8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10775  15A9  31AF  2724  3194   	fcall	___ftneg
 10776  15AC  0021               	movlb	1	; select bank1
 10777  15AD  083E               	movf	?___ftneg^(0+128),w
 10778  15AE  00C4               	movwf	___ftadd@f2^(0+128)
 10779  15AF  083F               	movf	(?___ftneg+1)^(0+128),w
 10780  15B0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10781  15B1  0840               	movf	(?___ftneg+2)^(0+128),w
 10782  15B2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10783  15B3  3190  201F  3194   	fcall	___ftadd
 10784  15B6  0021               	movlb	1	; select bank1
 10785  15B7  0841               	movf	?___ftadd^(0+128),w
 10786  15B8  00CE               	movwf	___ftdiv@f2^(0+128)
 10787  15B9  0842               	movf	(?___ftadd+1)^(0+128),w
 10788  15BA  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10789  15BB  0843               	movf	(?___ftadd+2)^(0+128),w
 10790  15BC                     L9:	
 10791  15BC  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10792  15BD  3000               	movlw	0
 10793  15BE  00D1               	movwf	___ftdiv@f1^(0+128)
 10794  15BF  3034               	movlw	52
 10795  15C0  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10796  15C1  3043               	movlw	67
 10797  15C2  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10798  15C3  319C  2474  3194   	fcall	___ftdiv
 10799  15C6  0021               	movlb	1	; select bank1
 10800  15C7  084E               	movf	?___ftdiv^(0+128),w
 10801  15C8  0022               	movlb	2	; select bank2
 10802  15C9  00C2               	movwf	modSaw@period^(0+256)
 10803  15CA  0021               	movlb	1	; select bank1
 10804  15CB  084F               	movf	(?___ftdiv+1)^(0+128),w
 10805  15CC  0022               	movlb	2	; select bank2
 10806  15CD  00C3               	movwf	(modSaw@period+1)^(0+256)
 10807  15CE  0021               	movlb	1	; select bank1
 10808  15CF  0850               	movf	(?___ftdiv+2)^(0+128),w
 10809  15D0  0022               	movlb	2	; select bank2
 10810  15D1  00C4               	movwf	(modSaw@period+2)^(0+256)
 10811                           
 10812                           ;modulation.c: 128: }
 10813                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 10814  15D2  0842               	movf	modSaw@period^(0+256),w
 10815  15D3  0021               	movlb	1	; select bank1
 10816  15D4  00B1               	movwf	___ftmul@f2^(0+128)
 10817  15D5  0022               	movlb	2	; select bank2
 10818  15D6  0843               	movf	(modSaw@period+1)^(0+256),w
 10819  15D7  0021               	movlb	1	; select bank1
 10820  15D8  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10821  15D9  0022               	movlb	2	; select bank2
 10822  15DA  0844               	movf	(modSaw@period+2)^(0+256),w
 10823  15DB  0021               	movlb	1	; select bank1
 10824  15DC  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10825  15DD  0022               	movlb	2	; select bank2
 10826  15DE  082E               	movf	modSaw@angle^(0+256),w
 10827  15DF  0021               	movlb	1	; select bank1
 10828  15E0  00AE               	movwf	___ftmul@f1^(0+128)
 10829  15E1  0022               	movlb	2	; select bank2
 10830  15E2  082F               	movf	(modSaw@angle+1)^(0+256),w
 10831  15E3  0021               	movlb	1	; select bank1
 10832  15E4  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10833  15E5  0022               	movlb	2	; select bank2
 10834  15E6  0830               	movf	(modSaw@angle+2)^(0+256),w
 10835  15E7  0021               	movlb	1	; select bank1
 10836  15E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10837  15E9  319E  267B  3194   	fcall	___ftmul
 10838  15EC  0021               	movlb	1	; select bank1
 10839  15ED  082E               	movf	?___ftmul^(0+128),w
 10840  15EE  00C4               	movwf	___ftadd@f2^(0+128)
 10841  15EF  082F               	movf	(?___ftmul+1)^(0+128),w
 10842  15F0  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 10843  15F1  0830               	movf	(?___ftmul+2)^(0+128),w
 10844  15F2  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 10845  15F3  0022               	movlb	2	; select bank2
 10846  15F4  083F               	movf	modSaw@shift^(0+256),w
 10847  15F5  0021               	movlb	1	; select bank1
 10848  15F6  00BE               	movwf	___ftneg@f1^(0+128)
 10849  15F7  0022               	movlb	2	; select bank2
 10850  15F8  0840               	movf	(modSaw@shift+1)^(0+256),w
 10851  15F9  0021               	movlb	1	; select bank1
 10852  15FA  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 10853  15FB  0022               	movlb	2	; select bank2
 10854  15FC  0841               	movf	(modSaw@shift+2)^(0+256),w
 10855  15FD  0021               	movlb	1	; select bank1
 10856  15FE  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 10857  15FF  31AF  2724  3194   	fcall	___ftneg
 10858  1602  0021               	movlb	1	; select bank1
 10859  1603  083E               	movf	?___ftneg^(0+128),w
 10860  1604  00C1               	movwf	___ftadd@f1^(0+128)
 10861  1605  083F               	movf	(?___ftneg+1)^(0+128),w
 10862  1606  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 10863  1607  0840               	movf	(?___ftneg+2)^(0+128),w
 10864  1608  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 10865  1609  3190  201F  3194   	fcall	___ftadd
 10866  160C  0021               	movlb	1	; select bank1
 10867  160D  0841               	movf	?___ftadd^(0+128),w
 10868  160E  0022               	movlb	2	; select bank2
 10869  160F  00BA               	movwf	_modSaw$2846^(0+256)
 10870  1610  0021               	movlb	1	; select bank1
 10871  1611  0842               	movf	(?___ftadd+1)^(0+128),w
 10872  1612  0022               	movlb	2	; select bank2
 10873  1613  00BB               	movwf	(_modSaw$2846+1)^(0+256)
 10874  1614  0021               	movlb	1	; select bank1
 10875  1615  0843               	movf	(?___ftadd+2)^(0+128),w
 10876  1616  0022               	movlb	2	; select bank2
 10877  1617  00BC               	movwf	(_modSaw$2846+2)^(0+256)
 10878                           
 10879                           ;modulation.c: 128: }
 10880                           ;modulation.c: 131: int mod = (int)((period*angle-shift)*5/9);
 10881  1618  083A               	movf	_modSaw$2846^(0+256),w
 10882  1619  0021               	movlb	1	; select bank1
 10883  161A  00B1               	movwf	___ftmul@f2^(0+128)
 10884  161B  0022               	movlb	2	; select bank2
 10885  161C  083B               	movf	(_modSaw$2846+1)^(0+256),w
 10886  161D  0021               	movlb	1	; select bank1
 10887  161E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 10888  161F  0022               	movlb	2	; select bank2
 10889  1620  083C               	movf	(_modSaw$2846+2)^(0+256),w
 10890  1621  0021               	movlb	1	; select bank1
 10891  1622  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 10892  1623  3000               	movlw	0
 10893  1624  00AE               	movwf	___ftmul@f1^(0+128)
 10894  1625  30A0               	movlw	160
 10895  1626  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 10896  1627  3040               	movlw	64
 10897  1628  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 10898  1629  319E  267B  3194   	fcall	___ftmul
 10899  162C  0021               	movlb	1	; select bank1
 10900  162D  082E               	movf	?___ftmul^(0+128),w
 10901  162E  00D1               	movwf	___ftdiv@f1^(0+128)
 10902  162F  082F               	movf	(?___ftmul+1)^(0+128),w
 10903  1630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 10904  1631  0830               	movf	(?___ftmul+2)^(0+128),w
 10905  1632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 10906  1633  3000               	movlw	0
 10907  1634  00CE               	movwf	___ftdiv@f2^(0+128)
 10908  1635  3010               	movlw	16
 10909  1636  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 10910  1637  3041               	movlw	65
 10911  1638  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 10912  1639  319C  2474  3194   	fcall	___ftdiv
 10913  163C  0021               	movlb	1	; select bank1
 10914  163D  084E               	movf	?___ftdiv^(0+128),w
 10915  163E  0022               	movlb	2	; select bank2
 10916  163F  00A0               	movwf	___fttol@f1^(0+256)
 10917  1640  0021               	movlb	1	; select bank1
 10918  1641  084F               	movf	(?___ftdiv+1)^(0+128),w
 10919  1642  0022               	movlb	2	; select bank2
 10920  1643  00A1               	movwf	(___fttol@f1+1)^(0+256)
 10921  1644  0021               	movlb	1	; select bank1
 10922  1645  0850               	movf	(?___ftdiv+2)^(0+128),w
 10923  1646  0022               	movlb	2	; select bank2
 10924  1647  00A2               	movwf	(___fttol@f1+2)^(0+256)
 10925  1648  319A  2246         	fcall	___fttol
 10926  164A  0022               	movlb	2	; select bank2
 10927  164B  0821               	movf	(?___fttol^(0+256)+1),w
 10928  164C  00BE               	movwf	(modSaw@mod+1)^(0+256)
 10929  164D  0820               	movf	?___fttol^(0+256),w
 10930  164E  00BD               	movwf	modSaw@mod^(0+256)
 10931                           
 10932                           ;modulation.c: 132: return mod;
 10933  164F  083E               	movf	(modSaw@mod+1)^(0+256),w
 10934  1650  00AF               	movwf	(?_modSaw+1)^(0+256)
 10935  1651  083D               	movf	modSaw@mod^(0+256),w
 10936  1652  00AE               	movwf	?_modSaw^(0+256)
 10937  1653  0008               	return
 10938  1654                     __end_of_modSaw:	
 10939                           
 10940                           	psect	text20
 10941  25BA                     __ptext20:	
 10942 ;; *************** function ___awdiv *****************
 10943 ;; Defined at:
 10944 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  divisor         2    0[BANK1 ] int 
 10947 ;;  dividend        2    2[BANK1 ] int 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  quotient        2    7[BANK1 ] int 
 10950 ;;  sign            1    6[BANK1 ] unsigned char 
 10951 ;;  counter         1    5[BANK1 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  2    0[BANK1 ] int 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10961 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10962 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10963 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10964 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10965 ;;Total ram usage:        9 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    3
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_updateModulationArray
 10972 ;;		_USARTWriteInt
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function ___awdiv
 10978  25BA                     ___awdiv:	
 10979                           
 10980                           ;incstack = 0
 10981                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10982  25BA  0021               	movlb	1	; select bank1
 10983  25BB  01A6               	clrf	___awdiv@sign^(0+128)
 10984  25BC  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
 10985  25BD  2DC5               	goto	l8544
 10986  25BE  09A0               	comf	___awdiv@divisor^(0+128),f
 10987  25BF  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
 10988  25C0  0AA0               	incf	___awdiv@divisor^(0+128),f
 10989  25C1  1903               	skipnz
 10990  25C2  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
 10991  25C3  01A6               	clrf	___awdiv@sign^(0+128)
 10992  25C4  0AA6               	incf	___awdiv@sign^(0+128),f
 10993  25C5                     l8544:	
 10994  25C5  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
 10995  25C6  2DD0               	goto	l8550
 10996  25C7  09A2               	comf	___awdiv@dividend^(0+128),f
 10997  25C8  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
 10998  25C9  0AA2               	incf	___awdiv@dividend^(0+128),f
 10999  25CA  1903               	skipnz
 11000  25CB  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
 11001  25CC  3001               	movlw	1
 11002  25CD  00A4               	movwf	??___awdiv^(0+128)
 11003  25CE  0824               	movf	??___awdiv^(0+128),w
 11004  25CF  06A6               	xorwf	___awdiv@sign^(0+128),f
 11005  25D0                     l8550:	
 11006  25D0  01A7               	clrf	___awdiv@quotient^(0+128)
 11007  25D1  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
 11008  25D2  0820               	movf	___awdiv@divisor^(0+128),w
 11009  25D3  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
 11010  25D4  1903               	btfsc	3,2
 11011  25D5  2DFF               	goto	l8572
 11012  25D6  01A5               	clrf	___awdiv@counter^(0+128)
 11013  25D7  0AA5               	incf	___awdiv@counter^(0+128),f
 11014  25D8                     l8560:	
 11015  25D8  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
 11016  25D9  2DE4               	goto	l8562
 11017  25DA  3001               	movlw	1
 11018  25DB                     u9085:	
 11019  25DB  35A0               	lslf	___awdiv@divisor^(0+128),f
 11020  25DC  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
 11021  25DD  0B89               	decfsz	9,f
 11022  25DE  2DDB               	goto	u9085
 11023  25DF  3001               	movlw	1
 11024  25E0  00A4               	movwf	??___awdiv^(0+128)
 11025  25E1  0824               	movf	??___awdiv^(0+128),w
 11026  25E2  07A5               	addwf	___awdiv@counter^(0+128),f
 11027  25E3  2DD8               	goto	l8560
 11028  25E4                     l8562:	
 11029  25E4  3001               	movlw	1
 11030  25E5                     u9105:	
 11031  25E5  35A7               	lslf	___awdiv@quotient^(0+128),f
 11032  25E6  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
 11033  25E7  0B89               	decfsz	9,f
 11034  25E8  2DE5               	goto	u9105
 11035  25E9  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11036  25EA  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
 11037  25EB  1D03               	skipz
 11038  25EC  2DEF               	goto	u9115
 11039  25ED  0820               	movf	___awdiv@divisor^(0+128),w
 11040  25EE  0222               	subwf	___awdiv@dividend^(0+128),w
 11041  25EF                     u9115:	
 11042  25EF  1C03               	skipc
 11043  25F0  2DF6               	goto	l8568
 11044  25F1  0820               	movf	___awdiv@divisor^(0+128),w
 11045  25F2  02A2               	subwf	___awdiv@dividend^(0+128),f
 11046  25F3  0821               	movf	(___awdiv@divisor+1)^(0+128),w
 11047  25F4  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
 11048  25F5  1427               	bsf	___awdiv@quotient^(0+128),0
 11049  25F6                     l8568:	
 11050  25F6  3001               	movlw	1
 11051  25F7                     u9125:	
 11052  25F7  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
 11053  25F8  0CA0               	rrf	___awdiv@divisor^(0+128),f
 11054  25F9  0B89               	decfsz	9,f
 11055  25FA  2DF7               	goto	u9125
 11056  25FB  3001               	movlw	1
 11057  25FC  02A5               	subwf	___awdiv@counter^(0+128),f
 11058  25FD  1D03               	btfss	3,2
 11059  25FE  2DE4               	goto	l8562
 11060  25FF                     l8572:	
 11061  25FF  0826               	movf	___awdiv@sign^(0+128),w
 11062  2600  1903               	btfsc	3,2
 11063  2601  2E07               	goto	l8576
 11064  2602  09A7               	comf	___awdiv@quotient^(0+128),f
 11065  2603  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
 11066  2604  0AA7               	incf	___awdiv@quotient^(0+128),f
 11067  2605  1903               	skipnz
 11068  2606  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
 11069  2607                     l8576:	
 11070  2607  0828               	movf	(___awdiv@quotient+1)^(0+128),w
 11071  2608  00A1               	movwf	(?___awdiv+1)^(0+128)
 11072  2609  0827               	movf	___awdiv@quotient^(0+128),w
 11073  260A  00A0               	movwf	?___awdiv^(0+128)
 11074  260B  0008               	return
 11075  260C                     __end_of___awdiv:	
 11076                           
 11077                           	psect	text21
 11078  1B58                     __ptext21:	
 11079 ;; *************** function _set_subdivision *****************
 11080 ;; Defined at:
 11081 ;;		line 77 in file "user.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;  x               2   14[BANK2 ] int 
 11084 ;;  y               2   16[BANK2 ] int 
 11085 ;; Auto vars:     Size  Location     Type
 11086 ;;  scalar          3   18[BANK2 ] float 
 11087 ;;  tmpX            2   21[BANK2 ] int 
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  2   14[BANK2 ] int 
 11090 ;; Registers used:
 11091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11092 ;; Tracked objects:
 11093 ;;		On entry : 0/0
 11094 ;;		On exit  : 0/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11097 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11098 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11100 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11101 ;;Total ram usage:        9 bytes
 11102 ;; Hardware stack levels used:    1
 11103 ;; Hardware stack levels required when called:    5
 11104 ;; This function calls:
 11105 ;;		___awtoft
 11106 ;;		___ftmul
 11107 ;;		___fttol
 11108 ;; This function is called by:
 11109 ;;		_main
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           
 11114                           ;psect for function _set_subdivision
 11115  1B58                     _set_subdivision:	
 11116                           
 11117                           ;user.c: 81: adjust_mod_delay = 0;
 11118                           
 11119                           ;incstack = 0
 11120                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11121  1B58  0023               	movlb	3	; select bank3
 11122  1B59  01BE               	clrf	_adjust_mod_delay^(0+384)
 11123                           
 11124                           ;user.c: 82: int tmpX = x;
 11125  1B5A  0022               	movlb	2	; select bank2
 11126  1B5B  082F               	movf	(set_subdivision@x+1)^(0+256),w
 11127  1B5C  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11128  1B5D  082E               	movf	set_subdivision@x^(0+256),w
 11129  1B5E  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11130                           
 11131                           ;user.c: 83: float scalar = 1.0;
 11132  1B5F  3000               	movlw	0
 11133  1B60  00B2               	movwf	set_subdivision@scalar^(0+256)
 11134  1B61  3080               	movlw	128
 11135  1B62  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11136  1B63  303F               	movlw	63
 11137  1B64  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11138                           
 11139                           ;user.c: 85: switch (y) {
 11140  1B65  2B85               	goto	l9032
 11141  1B66                     l9018:	
 11142                           ;user.c: 86: case 1:
 11143                           
 11144                           
 11145                           ;user.c: 87: scalar = 2.0;
 11146  1B66  3000               	movlw	0
 11147  1B67  00B2               	movwf	set_subdivision@scalar^(0+256)
 11148  1B68  3000               	movlw	0
 11149  1B69  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11150  1B6A  3040               	movlw	64
 11151  1B6B  2B83               	goto	L14
 11152  1B6C                     l9020:	
 11153                           ;user.c: 89: case 2:
 11154                           
 11155                           ;user.c: 88: break;
 11156                           
 11157                           
 11158                           ;user.c: 90: scalar = 0.6666;
 11159  1B6C  30A6               	movlw	166
 11160  1B6D  00B2               	movwf	set_subdivision@scalar^(0+256)
 11161  1B6E  302A               	movlw	42
 11162  1B6F  2B81               	goto	L15
 11163  1B70                     l9022:	
 11164                           ;user.c: 92: case 3:
 11165                           
 11166                           ;user.c: 91: break;
 11167                           
 11168                           
 11169                           ;user.c: 93: scalar = .5;
 11170  1B70  3000               	movlw	0
 11171  1B71  00B2               	movwf	set_subdivision@scalar^(0+256)
 11172  1B72  3000               	movlw	0
 11173  1B73  2B81               	goto	L15
 11174  1B74                     l9024:	
 11175                           ;user.c: 95: case 4:
 11176                           
 11177                           ;user.c: 94: break;
 11178                           
 11179                           
 11180                           ;user.c: 96: scalar = 0.3333;
 11181  1B74  30A6               	movlw	166
 11182  1B75  00B2               	movwf	set_subdivision@scalar^(0+256)
 11183  1B76  30AA               	movlw	170
 11184  1B77  2B7B               	goto	L16
 11185  1B78                     l9026:	
 11186                           ;user.c: 98: case 5:
 11187                           
 11188                           ;user.c: 97: break;
 11189                           
 11190                           
 11191                           ;user.c: 99: scalar = 0.25;
 11192  1B78  3000               	movlw	0
 11193  1B79  00B2               	movwf	set_subdivision@scalar^(0+256)
 11194  1B7A  3080               	movlw	128
 11195  1B7B                     L16:	
 11196  1B7B  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11197  1B7C  303E               	movlw	62
 11198  1B7D  2B83               	goto	L14
 11199  1B7E                     l9028:	
 11200                           ;user.c: 101: case 6:
 11201                           
 11202                           ;user.c: 100: break;
 11203                           
 11204                           
 11205                           ;user.c: 102: scalar = 1.0;
 11206  1B7E  3000               	movlw	0
 11207  1B7F  00B2               	movwf	set_subdivision@scalar^(0+256)
 11208  1B80  3080               	movlw	128
 11209  1B81                     L15:	
 11210  1B81  00B3               	movwf	(set_subdivision@scalar+1)^(0+256)
 11211  1B82  303F               	movlw	63
 11212  1B83                     L14:	
 11213  1B83  00B4               	movwf	(set_subdivision@scalar+2)^(0+256)
 11214                           
 11215                           ;user.c: 104: }
 11216                           
 11217                           ;user.c: 103: break;
 11218  1B84  2B9E               	goto	l9034
 11219  1B85                     l9032:	
 11220                           
 11221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11222                           ; Switch size 1, requested type "space"
 11223                           ; Number of cases is 1, Range of values is 0 to 0
 11224                           ; switch strategies available:
 11225                           ; Name         Instructions Cycles
 11226                           ; simple_byte            4     3 (average)
 11227                           ; direct_byte            8     6 (fixed)
 11228                           ; jumptable            260     6 (fixed)
 11229                           ;	Chosen strategy is simple_byte
 11230  1B85  0831               	movf	(set_subdivision@y+1)^(0+256),w
 11231  1B86  3A00               	xorlw	0	; case 0
 11232  1B87  1903               	skipnz
 11233  1B88  2B8A               	goto	l9696
 11234  1B89  2B9E               	goto	l9034
 11235  1B8A                     l9696:	
 11236                           
 11237                           ; Switch size 1, requested type "space"
 11238                           ; Number of cases is 6, Range of values is 1 to 6
 11239                           ; switch strategies available:
 11240                           ; Name         Instructions Cycles
 11241                           ; simple_byte           19    10 (average)
 11242                           ; direct_byte           21     9 (fixed)
 11243                           ; jumptable            263     9 (fixed)
 11244                           ;	Chosen strategy is simple_byte
 11245  1B8A  0830               	movf	set_subdivision@y^(0+256),w
 11246  1B8B  3A01               	xorlw	1	; case 1
 11247  1B8C  1903               	skipnz
 11248  1B8D  2B66               	goto	l9018
 11249  1B8E  3A03               	xorlw	3	; case 2
 11250  1B8F  1903               	skipnz
 11251  1B90  2B6C               	goto	l9020
 11252  1B91  3A01               	xorlw	1	; case 3
 11253  1B92  1903               	skipnz
 11254  1B93  2B70               	goto	l9022
 11255  1B94  3A07               	xorlw	7	; case 4
 11256  1B95  1903               	skipnz
 11257  1B96  2B74               	goto	l9024
 11258  1B97  3A01               	xorlw	1	; case 5
 11259  1B98  1903               	skipnz
 11260  1B99  2B78               	goto	l9026
 11261  1B9A  3A03               	xorlw	3	; case 6
 11262  1B9B  1903               	skipnz
 11263  1B9C  2B7E               	goto	l9028
 11264  1B9D  2B9E               	goto	l9034
 11265  1B9E                     l9034:	
 11266                           
 11267                           ;user.c: 106: tmpX = (int)((float)tmpX * scalar);
 11268  1B9E  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11269  1B9F  0021               	movlb	1	; select bank1
 11270  1BA0  00A9               	movwf	(___awtoft@c+1)^(0+128)
 11271  1BA1  0022               	movlb	2	; select bank2
 11272  1BA2  0835               	movf	set_subdivision@tmpX^(0+256),w
 11273  1BA3  0021               	movlb	1	; select bank1
 11274  1BA4  00A8               	movwf	___awtoft@c^(0+128)
 11275  1BA5  31A0  2076  319B   	fcall	___awtoft
 11276  1BA8  0021               	movlb	1	; select bank1
 11277  1BA9  0828               	movf	?___awtoft^(0+128),w
 11278  1BAA  00B1               	movwf	___ftmul@f2^(0+128)
 11279  1BAB  0829               	movf	(?___awtoft+1)^(0+128),w
 11280  1BAC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11281  1BAD  082A               	movf	(?___awtoft+2)^(0+128),w
 11282  1BAE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11283  1BAF  0022               	movlb	2	; select bank2
 11284  1BB0  0832               	movf	set_subdivision@scalar^(0+256),w
 11285  1BB1  0021               	movlb	1	; select bank1
 11286  1BB2  00AE               	movwf	___ftmul@f1^(0+128)
 11287  1BB3  0022               	movlb	2	; select bank2
 11288  1BB4  0833               	movf	(set_subdivision@scalar+1)^(0+256),w
 11289  1BB5  0021               	movlb	1	; select bank1
 11290  1BB6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11291  1BB7  0022               	movlb	2	; select bank2
 11292  1BB8  0834               	movf	(set_subdivision@scalar+2)^(0+256),w
 11293  1BB9  0021               	movlb	1	; select bank1
 11294  1BBA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11295  1BBB  319E  267B  319B   	fcall	___ftmul
 11296  1BBE  0021               	movlb	1	; select bank1
 11297  1BBF  082E               	movf	?___ftmul^(0+128),w
 11298  1BC0  0022               	movlb	2	; select bank2
 11299  1BC1  00A0               	movwf	___fttol@f1^(0+256)
 11300  1BC2  0021               	movlb	1	; select bank1
 11301  1BC3  082F               	movf	(?___ftmul+1)^(0+128),w
 11302  1BC4  0022               	movlb	2	; select bank2
 11303  1BC5  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11304  1BC6  0021               	movlb	1	; select bank1
 11305  1BC7  0830               	movf	(?___ftmul+2)^(0+128),w
 11306  1BC8  0022               	movlb	2	; select bank2
 11307  1BC9  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11308  1BCA  319A  2246  319B   	fcall	___fttol
 11309  1BCD  0022               	movlb	2	; select bank2
 11310  1BCE  0821               	movf	(?___fttol^(0+256)+1),w
 11311  1BCF  00B6               	movwf	(set_subdivision@tmpX+1)^(0+256)
 11312  1BD0  0820               	movf	?___fttol^(0+256),w
 11313  1BD1  00B5               	movwf	set_subdivision@tmpX^(0+256)
 11314                           
 11315                           ;user.c: 108: if ((int)(tmpX) != tmpX) {
 11316  1BD2  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11317  1BD3  0636               	xorwf	(set_subdivision@tmpX+1)^(0+256),w
 11318  1BD4  1D03               	skipz
 11319  1BD5  2BD8               	goto	u9835
 11320  1BD6  0835               	movf	set_subdivision@tmpX^(0+256),w
 11321  1BD7  0635               	xorwf	set_subdivision@tmpX^(0+256),w
 11322  1BD8                     u9835:	
 11323  1BD8  1903               	skipnz
 11324  1BD9  2BDD               	goto	l9040
 11325                           
 11326                           ;user.c: 109: adjust_mod_delay = 1;
 11327  1BDA  0023               	movlb	3	; select bank3
 11328  1BDB  01BE               	clrf	_adjust_mod_delay^(0+384)
 11329  1BDC  0ABE               	incf	_adjust_mod_delay^(0+384),f
 11330  1BDD                     l9040:	
 11331                           
 11332                           ;user.c: 110: }
 11333                           ;user.c: 112: return tmpX;
 11334  1BDD  0022               	movlb	2	; select bank2
 11335  1BDE  0836               	movf	(set_subdivision@tmpX+1)^(0+256),w
 11336  1BDF  00AF               	movwf	(?_set_subdivision+1)^(0+256)
 11337  1BE0  0835               	movf	set_subdivision@tmpX^(0+256),w
 11338  1BE1  00AE               	movwf	?_set_subdivision^(0+256)
 11339  1BE2  0008               	return
 11340  1BE3                     __end_of_set_subdivision:	
 11341                           
 11342                           	psect	text22
 11343  1D1D                     __ptext22:	
 11344 ;; *************** function _scaleiA10kPot *****************
 11345 ;; Defined at:
 11346 ;;		line 211 in file "user.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  input           3   71[BANK2 ] int 
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;  pwm             3    0[BANK3 ] float 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  2   71[BANK2 ] int 
 11353 ;; Registers used:
 11354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11360 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11361 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11363 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11364 ;;Total ram usage:       12 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    8
 11367 ;; This function calls:
 11368 ;;		___ftadd
 11369 ;;		___ftdiv
 11370 ;;		___ftmul
 11371 ;;		___ftneg
 11372 ;;		___fttol
 11373 ;;		_pow
 11374 ;; This function is called by:
 11375 ;;		_main
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _scaleiA10kPot
 11381  1D1D                     _scaleiA10kPot:	
 11382                           
 11383                           ;user.c: 214: if (input == 0.0) {return 0;}
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _scaleiA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11387  1D1D  0022               	movlb	2	; select bank2
 11388  1D1E  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11389  1D1F  0468               	iorwf	(scaleiA10kPot@input+1)^(0+256),w
 11390  1D20  0467               	iorwf	scaleiA10kPot@input^(0+256),w
 11391  1D21  1D03               	skipz
 11392  1D22  2D26               	goto	l8978
 11393  1D23  01E7               	clrf	?_scaleiA10kPot^(0+256)
 11394  1D24  01E8               	clrf	(?_scaleiA10kPot+1)^(0+256)
 11395  1D25  0008               	return
 11396  1D26                     l8978:	
 11397                           
 11398                           ;user.c: 216: if (input == 1023.0) {return 255;}
 11399  1D26  30C0               	movlw	192
 11400  1D27  0667               	xorwf	scaleiA10kPot@input^(0+256),w
 11401  1D28  307F               	movlw	127
 11402  1D29  1903               	skipnz
 11403  1D2A  0668               	xorwf	(scaleiA10kPot@input+1)^(0+256),w
 11404  1D2B  3044               	movlw	68
 11405  1D2C  1903               	skipnz
 11406  1D2D  0669               	xorwf	(scaleiA10kPot@input+2)^(0+256),w
 11407  1D2E  1D03               	btfss	3,2
 11408  1D2F  2D35               	goto	l8984
 11409  1D30  30FF               	movlw	255
 11410  1D31  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11411  1D32  3000               	movlw	0
 11412  1D33  00E8               	movwf	(?_scaleiA10kPot^(0+256)+1)
 11413  1D34  0008               	return
 11414  1D35                     l8984:	
 11415                           
 11416                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11417  1D35  3000               	movlw	0
 11418  1D36  0021               	movlb	1	; select bank1
 11419  1D37  00C1               	movwf	___ftadd@f1^(0+128)
 11420  1D38  3080               	movlw	128
 11421  1D39  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 11422  1D3A  303F               	movlw	63
 11423  1D3B  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 11424  1D3C  0022               	movlb	2	; select bank2
 11425  1D3D  0867               	movf	scaleiA10kPot@input^(0+256),w
 11426  1D3E  0021               	movlb	1	; select bank1
 11427  1D3F  00D1               	movwf	___ftdiv@f1^(0+128)
 11428  1D40  0022               	movlb	2	; select bank2
 11429  1D41  0868               	movf	(scaleiA10kPot@input+1)^(0+256),w
 11430  1D42  0021               	movlb	1	; select bank1
 11431  1D43  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11432  1D44  0022               	movlb	2	; select bank2
 11433  1D45  0869               	movf	(scaleiA10kPot@input+2)^(0+256),w
 11434  1D46  0021               	movlb	1	; select bank1
 11435  1D47  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11436  1D48  30C0               	movlw	192
 11437  1D49  00CE               	movwf	___ftdiv@f2^(0+128)
 11438  1D4A  307F               	movlw	127
 11439  1D4B  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11440  1D4C  3044               	movlw	68
 11441  1D4D  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11442  1D4E  319C  2474  319D   	fcall	___ftdiv
 11443  1D51  0021               	movlb	1	; select bank1
 11444  1D52  084E               	movf	?___ftdiv^(0+128),w
 11445  1D53  00BE               	movwf	___ftneg@f1^(0+128)
 11446  1D54  084F               	movf	(?___ftdiv+1)^(0+128),w
 11447  1D55  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 11448  1D56  0850               	movf	(?___ftdiv+2)^(0+128),w
 11449  1D57  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 11450  1D58  31AF  2724  319D   	fcall	___ftneg
 11451  1D5B  0021               	movlb	1	; select bank1
 11452  1D5C  083E               	movf	?___ftneg^(0+128),w
 11453  1D5D  00C4               	movwf	___ftadd@f2^(0+128)
 11454  1D5E  083F               	movf	(?___ftneg+1)^(0+128),w
 11455  1D5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 11456  1D60  0840               	movf	(?___ftneg+2)^(0+128),w
 11457  1D61  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 11458  1D62  3190  201F  319D   	fcall	___ftadd
 11459  1D65  0021               	movlb	1	; select bank1
 11460  1D66  0841               	movf	?___ftadd^(0+128),w
 11461  1D67  0023               	movlb	3	; select bank3
 11462  1D68  00EA               	movwf	_scaleiA10kPot$2840^(0+384)
 11463  1D69  0021               	movlb	1	; select bank1
 11464  1D6A  0842               	movf	(?___ftadd+1)^(0+128),w
 11465  1D6B  0023               	movlb	3	; select bank3
 11466  1D6C  00EB               	movwf	(_scaleiA10kPot$2840+1)^(0+384)
 11467  1D6D  0021               	movlb	1	; select bank1
 11468  1D6E  0843               	movf	(?___ftadd+2)^(0+128),w
 11469  1D6F  0023               	movlb	3	; select bank3
 11470  1D70  00EC               	movwf	(_scaleiA10kPot$2840+2)^(0+384)
 11471                           
 11472                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11473  1D71  306A               	movlw	106
 11474  1D72  0022               	movlb	2	; select bank2
 11475  1D73  00D8               	movwf	pow@y^(0+256)
 11476  1D74  309C               	movlw	156
 11477  1D75  00D9               	movwf	(pow@y+1)^(0+256)
 11478  1D76  30BF               	movlw	191
 11479  1D77  00DA               	movwf	(pow@y+2)^(0+256)
 11480  1D78  0023               	movlb	3	; select bank3
 11481  1D79  086A               	movf	_scaleiA10kPot$2840^(0+384),w
 11482  1D7A  0022               	movlb	2	; select bank2
 11483  1D7B  00D5               	movwf	pow@x^(0+256)
 11484  1D7C  0023               	movlb	3	; select bank3
 11485  1D7D  086B               	movf	(_scaleiA10kPot$2840+1)^(0+384),w
 11486  1D7E  0022               	movlb	2	; select bank2
 11487  1D7F  00D6               	movwf	(pow@x+1)^(0+256)
 11488  1D80  0023               	movlb	3	; select bank3
 11489  1D81  086C               	movf	(_scaleiA10kPot$2840+2)^(0+384),w
 11490  1D82  0022               	movlb	2	; select bank2
 11491  1D83  00D7               	movwf	(pow@x+2)^(0+256)
 11492  1D84  3191  2115  319D   	fcall	_pow
 11493  1D87  0022               	movlb	2	; select bank2
 11494  1D88  0855               	movf	?_pow^(0+256),w
 11495  1D89  0023               	movlb	3	; select bank3
 11496  1D8A  00ED               	movwf	_scaleiA10kPot$2841^(0+384)
 11497  1D8B  0022               	movlb	2	; select bank2
 11498  1D8C  0856               	movf	(?_pow+1)^(0+256),w
 11499  1D8D  0023               	movlb	3	; select bank3
 11500  1D8E  00EE               	movwf	(_scaleiA10kPot$2841+1)^(0+384)
 11501  1D8F  0022               	movlb	2	; select bank2
 11502  1D90  0857               	movf	(?_pow+2)^(0+256),w
 11503  1D91  0023               	movlb	3	; select bank3
 11504  1D92  00EF               	movwf	(_scaleiA10kPot$2841+2)^(0+384)
 11505                           
 11506                           ;user.c: 218: float pwm = 8.7428 * (pow((1-(input/1023.0)), -1.222));
 11507  1D93  30E3               	movlw	227
 11508  1D94  0021               	movlb	1	; select bank1
 11509  1D95  00AE               	movwf	___ftmul@f1^(0+128)
 11510  1D96  300B               	movlw	11
 11511  1D97  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11512  1D98  3041               	movlw	65
 11513  1D99  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11514  1D9A  0023               	movlb	3	; select bank3
 11515  1D9B  086D               	movf	_scaleiA10kPot$2841^(0+384),w
 11516  1D9C  0021               	movlb	1	; select bank1
 11517  1D9D  00B1               	movwf	___ftmul@f2^(0+128)
 11518  1D9E  0023               	movlb	3	; select bank3
 11519  1D9F  086E               	movf	(_scaleiA10kPot$2841+1)^(0+384),w
 11520  1DA0  0021               	movlb	1	; select bank1
 11521  1DA1  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11522  1DA2  0023               	movlb	3	; select bank3
 11523  1DA3  086F               	movf	(_scaleiA10kPot$2841+2)^(0+384),w
 11524  1DA4  0021               	movlb	1	; select bank1
 11525  1DA5  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11526  1DA6  319E  267B  319D   	fcall	___ftmul
 11527  1DA9  0021               	movlb	1	; select bank1
 11528  1DAA  082E               	movf	?___ftmul^(0+128),w
 11529  1DAB  0023               	movlb	3	; select bank3
 11530  1DAC  00E7               	movwf	scaleiA10kPot@pwm^(0+384)
 11531  1DAD  0021               	movlb	1	; select bank1
 11532  1DAE  082F               	movf	(?___ftmul+1)^(0+128),w
 11533  1DAF  0023               	movlb	3	; select bank3
 11534  1DB0  00E8               	movwf	(scaleiA10kPot@pwm+1)^(0+384)
 11535  1DB1  0021               	movlb	1	; select bank1
 11536  1DB2  0830               	movf	(?___ftmul+2)^(0+128),w
 11537  1DB3  0023               	movlb	3	; select bank3
 11538  1DB4  00E9               	movwf	(scaleiA10kPot@pwm+2)^(0+384)
 11539                           
 11540                           ;user.c: 219: return (int)(pwm);
 11541  1DB5  0867               	movf	scaleiA10kPot@pwm^(0+384),w
 11542  1DB6  0022               	movlb	2	; select bank2
 11543  1DB7  00A0               	movwf	___fttol@f1^(0+256)
 11544  1DB8  0023               	movlb	3	; select bank3
 11545  1DB9  0868               	movf	(scaleiA10kPot@pwm+1)^(0+384),w
 11546  1DBA  0022               	movlb	2	; select bank2
 11547  1DBB  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11548  1DBC  0023               	movlb	3	; select bank3
 11549  1DBD  0869               	movf	(scaleiA10kPot@pwm+2)^(0+384),w
 11550  1DBE  0022               	movlb	2	; select bank2
 11551  1DBF  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11552  1DC0  319A  2246         	fcall	___fttol
 11553  1DC2  0022               	movlb	2	; select bank2
 11554  1DC3  0821               	movf	(?___fttol^(0+256)+1),w
 11555  1DC4  00E8               	movwf	(?_scaleiA10kPot+1)^(0+256)
 11556  1DC5  0820               	movf	?___fttol^(0+256),w
 11557  1DC6  00E7               	movwf	?_scaleiA10kPot^(0+256)
 11558  1DC7  0008               	return
 11559  1DC8                     __end_of_scaleiA10kPot:	
 11560                           
 11561                           	psect	text23
 11562  1BE3                     __ptext23:	
 11563 ;; *************** function _scaleA10kPot *****************
 11564 ;; Defined at:
 11565 ;;		line 202 in file "user.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  input           3   71[BANK2 ] int 
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;  pwm             3    0[BANK3 ] float 
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  2   71[BANK2 ] int 
 11572 ;; Registers used:
 11573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11579 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11580 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11582 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11583 ;;Total ram usage:       12 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    8
 11586 ;; This function calls:
 11587 ;;		___ftdiv
 11588 ;;		___ftmul
 11589 ;;		___fttol
 11590 ;;		_pow
 11591 ;; This function is called by:
 11592 ;;		_main
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           
 11597                           ;psect for function _scaleA10kPot
 11598  1BE3                     _scaleA10kPot:	
 11599                           
 11600                           ;user.c: 204: if (input == 0.0) {return 255;}
 11601                           
 11602                           ;incstack = 0
 11603                           ; Regs used in _scaleA10kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11604  1BE3  0022               	movlb	2	; select bank2
 11605  1BE4  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11606  1BE5  0468               	iorwf	(scaleA10kPot@input+1)^(0+256),w
 11607  1BE6  0467               	iorwf	scaleA10kPot@input^(0+256),w
 11608  1BE7  1D03               	skipz
 11609  1BE8  2BEE               	goto	l8956
 11610  1BE9  30FF               	movlw	255
 11611  1BEA  00E7               	movwf	?_scaleA10kPot^(0+256)
 11612  1BEB  3000               	movlw	0
 11613  1BEC  00E8               	movwf	(?_scaleA10kPot^(0+256)+1)
 11614  1BED  0008               	return
 11615  1BEE                     l8956:	
 11616                           
 11617                           ;user.c: 205: if (input == 1023.0) {return 0;}
 11618  1BEE  30C0               	movlw	192
 11619  1BEF  0667               	xorwf	scaleA10kPot@input^(0+256),w
 11620  1BF0  307F               	movlw	127
 11621  1BF1  1903               	skipnz
 11622  1BF2  0668               	xorwf	(scaleA10kPot@input+1)^(0+256),w
 11623  1BF3  3044               	movlw	68
 11624  1BF4  1903               	skipnz
 11625  1BF5  0669               	xorwf	(scaleA10kPot@input+2)^(0+256),w
 11626  1BF6  1D03               	btfss	3,2
 11627  1BF7  2BFB               	goto	l8962
 11628  1BF8  01E7               	clrf	?_scaleA10kPot^(0+256)
 11629  1BF9  01E8               	clrf	(?_scaleA10kPot+1)^(0+256)
 11630  1BFA  0008               	return
 11631  1BFB                     l8962:	
 11632                           
 11633                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11634  1BFB  30C0               	movlw	192
 11635  1BFC  0021               	movlb	1	; select bank1
 11636  1BFD  00CE               	movwf	___ftdiv@f2^(0+128)
 11637  1BFE  307F               	movlw	127
 11638  1BFF  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11639  1C00  3044               	movlw	68
 11640  1C01  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11641  1C02  0022               	movlb	2	; select bank2
 11642  1C03  0867               	movf	scaleA10kPot@input^(0+256),w
 11643  1C04  0021               	movlb	1	; select bank1
 11644  1C05  00D1               	movwf	___ftdiv@f1^(0+128)
 11645  1C06  0022               	movlb	2	; select bank2
 11646  1C07  0868               	movf	(scaleA10kPot@input+1)^(0+256),w
 11647  1C08  0021               	movlb	1	; select bank1
 11648  1C09  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11649  1C0A  0022               	movlb	2	; select bank2
 11650  1C0B  0869               	movf	(scaleA10kPot@input+2)^(0+256),w
 11651  1C0C  0021               	movlb	1	; select bank1
 11652  1C0D  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11653  1C0E  319C  2474  319B   	fcall	___ftdiv
 11654  1C11  0021               	movlb	1	; select bank1
 11655  1C12  084E               	movf	?___ftdiv^(0+128),w
 11656  1C13  0023               	movlb	3	; select bank3
 11657  1C14  00EA               	movwf	_scaleA10kPot$2838^(0+384)
 11658  1C15  0021               	movlb	1	; select bank1
 11659  1C16  084F               	movf	(?___ftdiv+1)^(0+128),w
 11660  1C17  0023               	movlb	3	; select bank3
 11661  1C18  00EB               	movwf	(_scaleA10kPot$2838+1)^(0+384)
 11662  1C19  0021               	movlb	1	; select bank1
 11663  1C1A  0850               	movf	(?___ftdiv+2)^(0+128),w
 11664  1C1B  0023               	movlb	3	; select bank3
 11665  1C1C  00EC               	movwf	(_scaleA10kPot$2838+2)^(0+384)
 11666                           
 11667                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11668  1C1D  306A               	movlw	106
 11669  1C1E  0022               	movlb	2	; select bank2
 11670  1C1F  00D8               	movwf	pow@y^(0+256)
 11671  1C20  309C               	movlw	156
 11672  1C21  00D9               	movwf	(pow@y+1)^(0+256)
 11673  1C22  30BF               	movlw	191
 11674  1C23  00DA               	movwf	(pow@y+2)^(0+256)
 11675  1C24  0023               	movlb	3	; select bank3
 11676  1C25  086A               	movf	_scaleA10kPot$2838^(0+384),w
 11677  1C26  0022               	movlb	2	; select bank2
 11678  1C27  00D5               	movwf	pow@x^(0+256)
 11679  1C28  0023               	movlb	3	; select bank3
 11680  1C29  086B               	movf	(_scaleA10kPot$2838+1)^(0+384),w
 11681  1C2A  0022               	movlb	2	; select bank2
 11682  1C2B  00D6               	movwf	(pow@x+1)^(0+256)
 11683  1C2C  0023               	movlb	3	; select bank3
 11684  1C2D  086C               	movf	(_scaleA10kPot$2838+2)^(0+384),w
 11685  1C2E  0022               	movlb	2	; select bank2
 11686  1C2F  00D7               	movwf	(pow@x+2)^(0+256)
 11687  1C30  3191  2115  319B   	fcall	_pow
 11688  1C33  0022               	movlb	2	; select bank2
 11689  1C34  0855               	movf	?_pow^(0+256),w
 11690  1C35  0023               	movlb	3	; select bank3
 11691  1C36  00ED               	movwf	_scaleA10kPot$2839^(0+384)
 11692  1C37  0022               	movlb	2	; select bank2
 11693  1C38  0856               	movf	(?_pow+1)^(0+256),w
 11694  1C39  0023               	movlb	3	; select bank3
 11695  1C3A  00EE               	movwf	(_scaleA10kPot$2839+1)^(0+384)
 11696  1C3B  0022               	movlb	2	; select bank2
 11697  1C3C  0857               	movf	(?_pow+2)^(0+256),w
 11698  1C3D  0023               	movlb	3	; select bank3
 11699  1C3E  00EF               	movwf	(_scaleA10kPot$2839+2)^(0+384)
 11700                           
 11701                           ;user.c: 206: float pwm = 8.7428 * (pow((input/1023.0), -1.222));
 11702  1C3F  30E3               	movlw	227
 11703  1C40  0021               	movlb	1	; select bank1
 11704  1C41  00AE               	movwf	___ftmul@f1^(0+128)
 11705  1C42  300B               	movlw	11
 11706  1C43  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11707  1C44  3041               	movlw	65
 11708  1C45  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11709  1C46  0023               	movlb	3	; select bank3
 11710  1C47  086D               	movf	_scaleA10kPot$2839^(0+384),w
 11711  1C48  0021               	movlb	1	; select bank1
 11712  1C49  00B1               	movwf	___ftmul@f2^(0+128)
 11713  1C4A  0023               	movlb	3	; select bank3
 11714  1C4B  086E               	movf	(_scaleA10kPot$2839+1)^(0+384),w
 11715  1C4C  0021               	movlb	1	; select bank1
 11716  1C4D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11717  1C4E  0023               	movlb	3	; select bank3
 11718  1C4F  086F               	movf	(_scaleA10kPot$2839+2)^(0+384),w
 11719  1C50  0021               	movlb	1	; select bank1
 11720  1C51  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11721  1C52  319E  267B  319B   	fcall	___ftmul
 11722  1C55  0021               	movlb	1	; select bank1
 11723  1C56  082E               	movf	?___ftmul^(0+128),w
 11724  1C57  0023               	movlb	3	; select bank3
 11725  1C58  00E7               	movwf	scaleA10kPot@pwm^(0+384)
 11726  1C59  0021               	movlb	1	; select bank1
 11727  1C5A  082F               	movf	(?___ftmul+1)^(0+128),w
 11728  1C5B  0023               	movlb	3	; select bank3
 11729  1C5C  00E8               	movwf	(scaleA10kPot@pwm+1)^(0+384)
 11730  1C5D  0021               	movlb	1	; select bank1
 11731  1C5E  0830               	movf	(?___ftmul+2)^(0+128),w
 11732  1C5F  0023               	movlb	3	; select bank3
 11733  1C60  00E9               	movwf	(scaleA10kPot@pwm+2)^(0+384)
 11734                           
 11735                           ;user.c: 207: return (int)(pwm);
 11736  1C61  0867               	movf	scaleA10kPot@pwm^(0+384),w
 11737  1C62  0022               	movlb	2	; select bank2
 11738  1C63  00A0               	movwf	___fttol@f1^(0+256)
 11739  1C64  0023               	movlb	3	; select bank3
 11740  1C65  0868               	movf	(scaleA10kPot@pwm+1)^(0+384),w
 11741  1C66  0022               	movlb	2	; select bank2
 11742  1C67  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11743  1C68  0023               	movlb	3	; select bank3
 11744  1C69  0869               	movf	(scaleA10kPot@pwm+2)^(0+384),w
 11745  1C6A  0022               	movlb	2	; select bank2
 11746  1C6B  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11747  1C6C  319A  2246         	fcall	___fttol
 11748  1C6E  0022               	movlb	2	; select bank2
 11749  1C6F  0821               	movf	(?___fttol^(0+256)+1),w
 11750  1C70  00E8               	movwf	(?_scaleA10kPot+1)^(0+256)
 11751  1C71  0820               	movf	?___fttol^(0+256),w
 11752  1C72  00E7               	movwf	?_scaleA10kPot^(0+256)
 11753  1C73  0008               	return
 11754  1C74                     __end_of_scaleA10kPot:	
 11755                           
 11756                           	psect	text24
 11757  19C1                     __ptext24:	
 11758 ;; *************** function _scaleA100kPot *****************
 11759 ;; Defined at:
 11760 ;;		line 188 in file "user.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;  input           3   71[BANK2 ] int 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;  pwm             3    0[BANK3 ] float 
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  2   71[BANK2 ] int 
 11767 ;; Registers used:
 11768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11774 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11775 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11777 ;;      Totals:         0       0       0       3       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11778 ;;Total ram usage:       12 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; Hardware stack levels required when called:    8
 11781 ;; This function calls:
 11782 ;;		___ftdiv
 11783 ;;		___ftmul
 11784 ;;		___fttol
 11785 ;;		_pow
 11786 ;; This function is called by:
 11787 ;;		_main
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           
 11792                           ;psect for function _scaleA100kPot
 11793  19C1                     _scaleA100kPot:	
 11794                           
 11795                           ;user.c: 190: if (input == 0.0) {input = 1.0;}
 11796                           
 11797                           ;incstack = 0
 11798                           ; Regs used in _scaleA100kPot: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11799  19C1  0022               	movlb	2	; select bank2
 11800  19C2  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11801  19C3  0468               	iorwf	(scaleA100kPot@input+1)^(0+256),w
 11802  19C4  0467               	iorwf	scaleA100kPot@input^(0+256),w
 11803  19C5  1D03               	skipz
 11804  19C6  29CD               	goto	l8998
 11805  19C7  3000               	movlw	0
 11806  19C8  00E7               	movwf	scaleA100kPot@input^(0+256)
 11807  19C9  3080               	movlw	128
 11808  19CA  00E8               	movwf	(scaleA100kPot@input+1)^(0+256)
 11809  19CB  303F               	movlw	63
 11810  19CC  00E9               	movwf	(scaleA100kPot@input+2)^(0+256)
 11811  19CD                     l8998:	
 11812                           
 11813                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11814  19CD  30C0               	movlw	192
 11815  19CE  0021               	movlb	1	; select bank1
 11816  19CF  00CE               	movwf	___ftdiv@f2^(0+128)
 11817  19D0  307F               	movlw	127
 11818  19D1  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 11819  19D2  3044               	movlw	68
 11820  19D3  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 11821  19D4  0022               	movlb	2	; select bank2
 11822  19D5  0867               	movf	scaleA100kPot@input^(0+256),w
 11823  19D6  0021               	movlb	1	; select bank1
 11824  19D7  00D1               	movwf	___ftdiv@f1^(0+128)
 11825  19D8  0022               	movlb	2	; select bank2
 11826  19D9  0868               	movf	(scaleA100kPot@input+1)^(0+256),w
 11827  19DA  0021               	movlb	1	; select bank1
 11828  19DB  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 11829  19DC  0022               	movlb	2	; select bank2
 11830  19DD  0869               	movf	(scaleA100kPot@input+2)^(0+256),w
 11831  19DE  0021               	movlb	1	; select bank1
 11832  19DF  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 11833  19E0  319C  2474  3199   	fcall	___ftdiv
 11834  19E3  0021               	movlb	1	; select bank1
 11835  19E4  084E               	movf	?___ftdiv^(0+128),w
 11836  19E5  0023               	movlb	3	; select bank3
 11837  19E6  00EA               	movwf	_scaleA100kPot$2834^(0+384)
 11838  19E7  0021               	movlb	1	; select bank1
 11839  19E8  084F               	movf	(?___ftdiv+1)^(0+128),w
 11840  19E9  0023               	movlb	3	; select bank3
 11841  19EA  00EB               	movwf	(_scaleA100kPot$2834+1)^(0+384)
 11842  19EB  0021               	movlb	1	; select bank1
 11843  19EC  0850               	movf	(?___ftdiv+2)^(0+128),w
 11844  19ED  0023               	movlb	3	; select bank3
 11845  19EE  00EC               	movwf	(_scaleA100kPot$2834+2)^(0+384)
 11846                           
 11847                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11848  19EF  3056               	movlw	86
 11849  19F0  0022               	movlb	2	; select bank2
 11850  19F1  00D8               	movwf	pow@y^(0+256)
 11851  19F2  308E               	movlw	142
 11852  19F3  00D9               	movwf	(pow@y+1)^(0+256)
 11853  19F4  30BF               	movlw	191
 11854  19F5  00DA               	movwf	(pow@y+2)^(0+256)
 11855  19F6  0023               	movlb	3	; select bank3
 11856  19F7  086A               	movf	_scaleA100kPot$2834^(0+384),w
 11857  19F8  0022               	movlb	2	; select bank2
 11858  19F9  00D5               	movwf	pow@x^(0+256)
 11859  19FA  0023               	movlb	3	; select bank3
 11860  19FB  086B               	movf	(_scaleA100kPot$2834+1)^(0+384),w
 11861  19FC  0022               	movlb	2	; select bank2
 11862  19FD  00D6               	movwf	(pow@x+1)^(0+256)
 11863  19FE  0023               	movlb	3	; select bank3
 11864  19FF  086C               	movf	(_scaleA100kPot$2834+2)^(0+384),w
 11865  1A00  0022               	movlb	2	; select bank2
 11866  1A01  00D7               	movwf	(pow@x+2)^(0+256)
 11867  1A02  3191  2115  3199   	fcall	_pow
 11868  1A05  0022               	movlb	2	; select bank2
 11869  1A06  0855               	movf	?_pow^(0+256),w
 11870  1A07  0023               	movlb	3	; select bank3
 11871  1A08  00ED               	movwf	_scaleA100kPot$2835^(0+384)
 11872  1A09  0022               	movlb	2	; select bank2
 11873  1A0A  0856               	movf	(?_pow+1)^(0+256),w
 11874  1A0B  0023               	movlb	3	; select bank3
 11875  1A0C  00EE               	movwf	(_scaleA100kPot$2835+1)^(0+384)
 11876  1A0D  0022               	movlb	2	; select bank2
 11877  1A0E  0857               	movf	(?_pow+2)^(0+256),w
 11878  1A0F  0023               	movlb	3	; select bank3
 11879  1A10  00EF               	movwf	(_scaleA100kPot$2835+2)^(0+384)
 11880                           
 11881                           ;user.c: 191: float pwm = 3.6347 * (pow((input/1023.0), -1.112));
 11882  1A11  309F               	movlw	159
 11883  1A12  0021               	movlb	1	; select bank1
 11884  1A13  00AE               	movwf	___ftmul@f1^(0+128)
 11885  1A14  3068               	movlw	104
 11886  1A15  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 11887  1A16  3040               	movlw	64
 11888  1A17  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 11889  1A18  0023               	movlb	3	; select bank3
 11890  1A19  086D               	movf	_scaleA100kPot$2835^(0+384),w
 11891  1A1A  0021               	movlb	1	; select bank1
 11892  1A1B  00B1               	movwf	___ftmul@f2^(0+128)
 11893  1A1C  0023               	movlb	3	; select bank3
 11894  1A1D  086E               	movf	(_scaleA100kPot$2835+1)^(0+384),w
 11895  1A1E  0021               	movlb	1	; select bank1
 11896  1A1F  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 11897  1A20  0023               	movlb	3	; select bank3
 11898  1A21  086F               	movf	(_scaleA100kPot$2835+2)^(0+384),w
 11899  1A22  0021               	movlb	1	; select bank1
 11900  1A23  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 11901  1A24  319E  267B  3199   	fcall	___ftmul
 11902  1A27  0021               	movlb	1	; select bank1
 11903  1A28  082E               	movf	?___ftmul^(0+128),w
 11904  1A29  0023               	movlb	3	; select bank3
 11905  1A2A  00E7               	movwf	scaleA100kPot@pwm^(0+384)
 11906  1A2B  0021               	movlb	1	; select bank1
 11907  1A2C  082F               	movf	(?___ftmul+1)^(0+128),w
 11908  1A2D  0023               	movlb	3	; select bank3
 11909  1A2E  00E8               	movwf	(scaleA100kPot@pwm+1)^(0+384)
 11910  1A2F  0021               	movlb	1	; select bank1
 11911  1A30  0830               	movf	(?___ftmul+2)^(0+128),w
 11912  1A31  0023               	movlb	3	; select bank3
 11913  1A32  00E9               	movwf	(scaleA100kPot@pwm+2)^(0+384)
 11914                           
 11915                           ;user.c: 192: return (int)(pwm);
 11916  1A33  0867               	movf	scaleA100kPot@pwm^(0+384),w
 11917  1A34  0022               	movlb	2	; select bank2
 11918  1A35  00A0               	movwf	___fttol@f1^(0+256)
 11919  1A36  0023               	movlb	3	; select bank3
 11920  1A37  0868               	movf	(scaleA100kPot@pwm+1)^(0+384),w
 11921  1A38  0022               	movlb	2	; select bank2
 11922  1A39  00A1               	movwf	(___fttol@f1+1)^(0+256)
 11923  1A3A  0023               	movlb	3	; select bank3
 11924  1A3B  0869               	movf	(scaleA100kPot@pwm+2)^(0+384),w
 11925  1A3C  0022               	movlb	2	; select bank2
 11926  1A3D  00A2               	movwf	(___fttol@f1+2)^(0+256)
 11927  1A3E  319A  2246         	fcall	___fttol
 11928  1A40  0022               	movlb	2	; select bank2
 11929  1A41  0821               	movf	(?___fttol^(0+256)+1),w
 11930  1A42  00E8               	movwf	(?_scaleA100kPot+1)^(0+256)
 11931  1A43  0820               	movf	?___fttol^(0+256),w
 11932  1A44  00E7               	movwf	?_scaleA100kPot^(0+256)
 11933  1A45  0008               	return
 11934  1A46                     __end_of_scaleA100kPot:	
 11935                           
 11936                           	psect	text25
 11937  1115                     __ptext25:	
 11938 ;; *************** function _pow *****************
 11939 ;; Defined at:
 11940 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 11941 ;; Parameters:    Size  Location     Type
 11942 ;;  x               3   53[BANK2 ] int 
 11943 ;;  y               3   56[BANK2 ] int 
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;  yi              4   67[BANK2 ] unsigned long 
 11946 ;;  sign            1   66[BANK2 ] unsigned char 
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  3   53[BANK2 ] unsigned char 
 11949 ;; Registers used:
 11950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11956 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11957 ;;      Locals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11958 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11959 ;;      Totals:         0       0       0      18       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11960 ;;Total ram usage:       18 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    7
 11963 ;; This function calls:
 11964 ;;		___ftge
 11965 ;;		___ftmul
 11966 ;;		___ftneg
 11967 ;;		___fttol
 11968 ;;		___lltoft
 11969 ;;		_exp
 11970 ;;		_log
 11971 ;; This function is called by:
 11972 ;;		_scaleA100kPot
 11973 ;;		_scaleA10kPot
 11974 ;;		_scaleiA10kPot
 11975 ;;		_scaleiA100kPot
 11976 ;; This function uses a non-reentrant model
 11977 ;;
 11978                           
 11979                           
 11980                           ;psect for function _pow
 11981  1115                     _pow:	
 11982                           
 11983                           ;incstack = 0
 11984                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11985  1115  0022               	movlb	2	; select bank2
 11986  1116  01E2               	clrf	pow@sign^(0+256)
 11987  1117  0857               	movf	(pow@x+2)^(0+256),w
 11988  1118  0456               	iorwf	(pow@x+1)^(0+256),w
 11989  1119  0455               	iorwf	pow@x^(0+256),w
 11990  111A  1D03               	skipz
 11991  111B  2941               	goto	l8320
 11992  111C  3000               	movlw	0
 11993  111D  0021               	movlb	1	; select bank1
 11994  111E  00A0               	movwf	___ftge@ff1^(0+128)
 11995  111F  3000               	movlw	0
 11996  1120  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 11997  1121  3000               	movlw	0
 11998  1122  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 11999  1123  0022               	movlb	2	; select bank2
 12000  1124  0858               	movf	pow@y^(0+256),w
 12001  1125  0021               	movlb	1	; select bank1
 12002  1126  00A3               	movwf	___ftge@ff2^(0+128)
 12003  1127  0022               	movlb	2	; select bank2
 12004  1128  0859               	movf	(pow@y+1)^(0+256),w
 12005  1129  0021               	movlb	1	; select bank1
 12006  112A  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12007  112B  0022               	movlb	2	; select bank2
 12008  112C  085A               	movf	(pow@y+2)^(0+256),w
 12009  112D  0021               	movlb	1	; select bank1
 12010  112E  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12011  112F  3198  2000  3191   	fcall	___ftge
 12012  1132  1C03               	btfss	3,0
 12013  1133  2939               	goto	l2316
 12014  1134  3021               	movlw	33
 12015  1135  0024               	movlb	4	; select bank4
 12016  1136  00CD               	movwf	_errno^(0+512)
 12017  1137  3000               	movlw	0
 12018  1138  00CE               	movwf	(_errno^(0+512)+1)
 12019  1139                     l2316:	
 12020  1139  3000               	movlw	0
 12021  113A  0022               	movlb	2	; select bank2
 12022  113B  00D5               	movwf	?_pow^(0+256)
 12023  113C  3000               	movlw	0
 12024  113D  00D6               	movwf	(?_pow+1)^(0+256)
 12025  113E  3000               	movlw	0
 12026  113F  00D7               	movwf	(?_pow+2)^(0+256)
 12027  1140  0008               	return
 12028  1141                     l8320:	
 12029  1141  085A               	movf	(pow@y+2)^(0+256),w
 12030  1142  0459               	iorwf	(pow@y+1)^(0+256),w
 12031  1143  0458               	iorwf	pow@y^(0+256),w
 12032  1144  1D03               	skipz
 12033  1145  294D               	goto	l8326
 12034  1146  3000               	movlw	0
 12035  1147  00D5               	movwf	?_pow^(0+256)
 12036  1148  3080               	movlw	128
 12037  1149  00D6               	movwf	(?_pow+1)^(0+256)
 12038  114A  303F               	movlw	63
 12039  114B  00D7               	movwf	(?_pow+2)^(0+256)
 12040  114C  0008               	return
 12041  114D                     l8326:	
 12042  114D  0855               	movf	pow@x^(0+256),w
 12043  114E  0021               	movlb	1	; select bank1
 12044  114F  00A0               	movwf	___ftge@ff1^(0+128)
 12045  1150  0022               	movlb	2	; select bank2
 12046  1151  0856               	movf	(pow@x+1)^(0+256),w
 12047  1152  0021               	movlb	1	; select bank1
 12048  1153  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12049  1154  0022               	movlb	2	; select bank2
 12050  1155  0857               	movf	(pow@x+2)^(0+256),w
 12051  1156  0021               	movlb	1	; select bank1
 12052  1157  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12053  1158  3000               	movlw	0
 12054  1159  00A3               	movwf	___ftge@ff2^(0+128)
 12055  115A  3000               	movlw	0
 12056  115B  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12057  115C  3000               	movlw	0
 12058  115D  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12059  115E  3198  2000  3191   	fcall	___ftge
 12060  1161  1803               	btfsc	3,0
 12061  1162  29C7               	goto	l8338
 12062  1163  0022               	movlb	2	; select bank2
 12063  1164  0858               	movf	pow@y^(0+256),w
 12064  1165  00A0               	movwf	___fttol@f1^(0+256)
 12065  1166  0859               	movf	(pow@y+1)^(0+256),w
 12066  1167  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12067  1168  085A               	movf	(pow@y+2)^(0+256),w
 12068  1169  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12069  116A  319A  2246  3191   	fcall	___fttol
 12070  116D  0022               	movlb	2	; select bank2
 12071  116E  0823               	movf	(?___fttol+3)^(0+256),w
 12072  116F  00E6               	movwf	(pow@yi+3)^(0+256)
 12073  1170  0822               	movf	(?___fttol+2)^(0+256),w
 12074  1171  00E5               	movwf	(pow@yi+2)^(0+256)
 12075  1172  0821               	movf	(?___fttol+1)^(0+256),w
 12076  1173  00E4               	movwf	(pow@yi+1)^(0+256)
 12077  1174  0820               	movf	?___fttol^(0+256),w
 12078  1175  00E3               	movwf	pow@yi^(0+256)
 12079  1176  0866               	movf	(pow@yi+3)^(0+256),w
 12080  1177  0021               	movlb	1	; select bank1
 12081  1178  00AB               	movwf	(___lltoft@c+3)^(0+128)
 12082  1179  0022               	movlb	2	; select bank2
 12083  117A  0865               	movf	(pow@yi+2)^(0+256),w
 12084  117B  0021               	movlb	1	; select bank1
 12085  117C  00AA               	movwf	(___lltoft@c+2)^(0+128)
 12086  117D  0022               	movlb	2	; select bank2
 12087  117E  0864               	movf	(pow@yi+1)^(0+256),w
 12088  117F  0021               	movlb	1	; select bank1
 12089  1180  00A9               	movwf	(___lltoft@c+1)^(0+128)
 12090  1181  0022               	movlb	2	; select bank2
 12091  1182  0863               	movf	pow@yi^(0+256),w
 12092  1183  0021               	movlb	1	; select bank1
 12093  1184  00A8               	movwf	___lltoft@c^(0+128)
 12094  1185  31A0  20E1  3191   	fcall	___lltoft
 12095  1188  0022               	movlb	2	; select bank2
 12096  1189  085A               	movf	(pow@y+2)^(0+256),w
 12097  118A  0021               	movlb	1	; select bank1
 12098  118B  062A               	xorwf	(?___lltoft+2)^(0+128),w
 12099  118C  1D03               	skipz
 12100  118D  2998               	goto	u8765
 12101  118E  0022               	movlb	2	; select bank2
 12102  118F  0859               	movf	(pow@y+1)^(0+256),w
 12103  1190  0021               	movlb	1	; select bank1
 12104  1191  0629               	xorwf	(?___lltoft+1)^(0+128),w
 12105  1192  1D03               	skipz
 12106  1193  2998               	goto	u8765
 12107  1194  0022               	movlb	2	; select bank2
 12108  1195  0858               	movf	pow@y^(0+256),w
 12109  1196  0021               	movlb	1	; select bank1
 12110  1197  0628               	xorwf	?___lltoft^(0+128),w
 12111  1198                     u8765:	
 12112  1198  1903               	skipnz
 12113  1199  29A7               	goto	l8334
 12114  119A  3021               	movlw	33
 12115  119B  0024               	movlb	4	; select bank4
 12116  119C  00CD               	movwf	_errno^(0+512)
 12117  119D  3000               	movlw	0
 12118  119E  00CE               	movwf	(_errno^(0+512)+1)
 12119  119F  3000               	movlw	0
 12120  11A0  0022               	movlb	2	; select bank2
 12121  11A1  00D5               	movwf	?_pow^(0+256)
 12122  11A2  3000               	movlw	0
 12123  11A3  00D6               	movwf	(?_pow+1)^(0+256)
 12124  11A4  3000               	movlw	0
 12125  11A5  00D7               	movwf	(?_pow+2)^(0+256)
 12126  11A6  0008               	return
 12127  11A7                     l8334:	
 12128  11A7  0022               	movlb	2	; select bank2
 12129  11A8  0863               	movf	pow@yi^(0+256),w
 12130  11A9  3901               	andlw	1
 12131  11AA  00DB               	movwf	??_pow^(0+256)
 12132  11AB  085B               	movf	??_pow^(0+256),w
 12133  11AC  00E2               	movwf	pow@sign^(0+256)
 12134  11AD  0855               	movf	pow@x^(0+256),w
 12135  11AE  0021               	movlb	1	; select bank1
 12136  11AF  00BE               	movwf	___ftneg@f1^(0+128)
 12137  11B0  0022               	movlb	2	; select bank2
 12138  11B1  0856               	movf	(pow@x+1)^(0+256),w
 12139  11B2  0021               	movlb	1	; select bank1
 12140  11B3  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12141  11B4  0022               	movlb	2	; select bank2
 12142  11B5  0857               	movf	(pow@x+2)^(0+256),w
 12143  11B6  0021               	movlb	1	; select bank1
 12144  11B7  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12145  11B8  31AF  2724  3191   	fcall	___ftneg
 12146  11BB  0021               	movlb	1	; select bank1
 12147  11BC  083E               	movf	?___ftneg^(0+128),w
 12148  11BD  0022               	movlb	2	; select bank2
 12149  11BE  00D5               	movwf	pow@x^(0+256)
 12150  11BF  0021               	movlb	1	; select bank1
 12151  11C0  083F               	movf	(?___ftneg+1)^(0+128),w
 12152  11C1  0022               	movlb	2	; select bank2
 12153  11C2  00D6               	movwf	(pow@x+1)^(0+256)
 12154  11C3  0021               	movlb	1	; select bank1
 12155  11C4  0840               	movf	(?___ftneg+2)^(0+128),w
 12156  11C5  0022               	movlb	2	; select bank2
 12157  11C6  00D7               	movwf	(pow@x+2)^(0+256)
 12158  11C7                     l8338:	
 12159  11C7  0022               	movlb	2	; select bank2
 12160  11C8  0855               	movf	pow@x^(0+256),w
 12161  11C9  00BE               	movwf	log@x^(0+256)
 12162  11CA  0856               	movf	(pow@x+1)^(0+256),w
 12163  11CB  00BF               	movwf	(log@x+1)^(0+256)
 12164  11CC  0857               	movf	(pow@x+2)^(0+256),w
 12165  11CD  00C0               	movwf	(log@x+2)^(0+256)
 12166  11CE  319F  272F  3191   	fcall	_log
 12167  11D1  0022               	movlb	2	; select bank2
 12168  11D2  083E               	movf	?_log^(0+256),w
 12169  11D3  00DC               	movwf	_pow$2847^(0+256)
 12170  11D4  083F               	movf	(?_log+1)^(0+256),w
 12171  11D5  00DD               	movwf	(_pow$2847+1)^(0+256)
 12172  11D6  0840               	movf	(?_log+2)^(0+256),w
 12173  11D7  00DE               	movwf	(_pow$2847+2)^(0+256)
 12174  11D8  0858               	movf	pow@y^(0+256),w
 12175  11D9  0021               	movlb	1	; select bank1
 12176  11DA  00AE               	movwf	___ftmul@f1^(0+128)
 12177  11DB  0022               	movlb	2	; select bank2
 12178  11DC  0859               	movf	(pow@y+1)^(0+256),w
 12179  11DD  0021               	movlb	1	; select bank1
 12180  11DE  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12181  11DF  0022               	movlb	2	; select bank2
 12182  11E0  085A               	movf	(pow@y+2)^(0+256),w
 12183  11E1  0021               	movlb	1	; select bank1
 12184  11E2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12185  11E3  0022               	movlb	2	; select bank2
 12186  11E4  085C               	movf	_pow$2847^(0+256),w
 12187  11E5  0021               	movlb	1	; select bank1
 12188  11E6  00B1               	movwf	___ftmul@f2^(0+128)
 12189  11E7  0022               	movlb	2	; select bank2
 12190  11E8  085D               	movf	(_pow$2847+1)^(0+256),w
 12191  11E9  0021               	movlb	1	; select bank1
 12192  11EA  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12193  11EB  0022               	movlb	2	; select bank2
 12194  11EC  085E               	movf	(_pow$2847+2)^(0+256),w
 12195  11ED  0021               	movlb	1	; select bank1
 12196  11EE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12197  11EF  319E  267B  3191   	fcall	___ftmul
 12198  11F2  0021               	movlb	1	; select bank1
 12199  11F3  082E               	movf	?___ftmul^(0+128),w
 12200  11F4  0022               	movlb	2	; select bank2
 12201  11F5  00DF               	movwf	_pow$2848^(0+256)
 12202  11F6  0021               	movlb	1	; select bank1
 12203  11F7  082F               	movf	(?___ftmul+1)^(0+128),w
 12204  11F8  0022               	movlb	2	; select bank2
 12205  11F9  00E0               	movwf	(_pow$2848+1)^(0+256)
 12206  11FA  0021               	movlb	1	; select bank1
 12207  11FB  0830               	movf	(?___ftmul+2)^(0+128),w
 12208  11FC  0022               	movlb	2	; select bank2
 12209  11FD  00E1               	movwf	(_pow$2848+2)^(0+256)
 12210  11FE  085F               	movf	_pow$2848^(0+256),w
 12211  11FF  00C8               	movwf	exp@x^(0+256)
 12212  1200  0860               	movf	(_pow$2848+1)^(0+256),w
 12213  1201  00C9               	movwf	(exp@x+1)^(0+256)
 12214  1202  0861               	movf	(_pow$2848+2)^(0+256),w
 12215  1203  00CA               	movwf	(exp@x+2)^(0+256)
 12216  1204  3193  2351  3191   	fcall	_exp
 12217  1207  0022               	movlb	2	; select bank2
 12218  1208  0848               	movf	?_exp^(0+256),w
 12219  1209  00D5               	movwf	pow@x^(0+256)
 12220  120A  0849               	movf	(?_exp+1)^(0+256),w
 12221  120B  00D6               	movwf	(pow@x+1)^(0+256)
 12222  120C  084A               	movf	(?_exp+2)^(0+256),w
 12223  120D  00D7               	movwf	(pow@x+2)^(0+256)
 12224  120E  0862               	movf	pow@sign^(0+256),w
 12225  120F  1903               	btfsc	3,2
 12226  1210  0008               	return
 12227  1211  0855               	movf	pow@x^(0+256),w
 12228  1212  0021               	movlb	1	; select bank1
 12229  1213  00BE               	movwf	___ftneg@f1^(0+128)
 12230  1214  0022               	movlb	2	; select bank2
 12231  1215  0856               	movf	(pow@x+1)^(0+256),w
 12232  1216  0021               	movlb	1	; select bank1
 12233  1217  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12234  1218  0022               	movlb	2	; select bank2
 12235  1219  0857               	movf	(pow@x+2)^(0+256),w
 12236  121A  0021               	movlb	1	; select bank1
 12237  121B  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12238  121C  31AF  2724         	fcall	___ftneg
 12239  121E  0021               	movlb	1	; select bank1
 12240  121F  083E               	movf	?___ftneg^(0+128),w
 12241  1220  0022               	movlb	2	; select bank2
 12242  1221  00D5               	movwf	?_pow^(0+256)
 12243  1222  0021               	movlb	1	; select bank1
 12244  1223  083F               	movf	(?___ftneg+1)^(0+128),w
 12245  1224  0022               	movlb	2	; select bank2
 12246  1225  00D6               	movwf	(?_pow+1)^(0+256)
 12247  1226  0021               	movlb	1	; select bank1
 12248  1227  0840               	movf	(?___ftneg+2)^(0+128),w
 12249  1228  0022               	movlb	2	; select bank2
 12250  1229  00D7               	movwf	(?_pow+2)^(0+256)
 12251  122A  0008               	return
 12252  122B                     __end_of_pow:	
 12253                           
 12254                           	psect	text26
 12255  1F2F                     __ptext26:	
 12256 ;; *************** function _log *****************
 12257 ;; Defined at:
 12258 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;  x               3   30[BANK2 ] unsigned char 
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;  exponent        2   34[BANK2 ] int 
 12263 ;; Return value:  Size  Location     Type
 12264 ;;                  3   30[BANK2 ] int 
 12265 ;; Registers used:
 12266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12267 ;; Tracked objects:
 12268 ;;		On entry : 0/0
 12269 ;;		On exit  : 0/0
 12270 ;;		Unchanged: 0/0
 12271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12272 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12273 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12274 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12275 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12276 ;;Total ram usage:        6 bytes
 12277 ;; Hardware stack levels used:    1
 12278 ;; Hardware stack levels required when called:    6
 12279 ;; This function calls:
 12280 ;;		___awtoft
 12281 ;;		___ftadd
 12282 ;;		___ftge
 12283 ;;		___ftmul
 12284 ;;		_eval_poly
 12285 ;;		_frexp
 12286 ;; This function is called by:
 12287 ;;		_pow
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291                           
 12292                           ;psect for function _log
 12293  1F2F                     _log:	
 12294                           
 12295                           ;incstack = 0
 12296                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12297  1F2F  0022               	movlb	2	; select bank2
 12298  1F30  083E               	movf	log@x^(0+256),w
 12299  1F31  0021               	movlb	1	; select bank1
 12300  1F32  00A0               	movwf	___ftge@ff1^(0+128)
 12301  1F33  0022               	movlb	2	; select bank2
 12302  1F34  083F               	movf	(log@x+1)^(0+256),w
 12303  1F35  0021               	movlb	1	; select bank1
 12304  1F36  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12305  1F37  0022               	movlb	2	; select bank2
 12306  1F38  0840               	movf	(log@x+2)^(0+256),w
 12307  1F39  0021               	movlb	1	; select bank1
 12308  1F3A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12309  1F3B  3000               	movlw	0
 12310  1F3C  00A3               	movwf	___ftge@ff2^(0+128)
 12311  1F3D  3000               	movlw	0
 12312  1F3E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12313  1F3F  3000               	movlw	0
 12314  1F40  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12315  1F41  3198  2000  319F   	fcall	___ftge
 12316  1F44  1803               	btfsc	3,0
 12317  1F45  2F53               	goto	l8192
 12318  1F46  3021               	movlw	33
 12319  1F47  0024               	movlb	4	; select bank4
 12320  1F48  00CD               	movwf	_errno^(0+512)
 12321  1F49  3000               	movlw	0
 12322  1F4A  00CE               	movwf	(_errno^(0+512)+1)
 12323  1F4B  3000               	movlw	0
 12324  1F4C  0022               	movlb	2	; select bank2
 12325  1F4D  00BE               	movwf	?_log^(0+256)
 12326  1F4E  3000               	movlw	0
 12327  1F4F  00BF               	movwf	(?_log+1)^(0+256)
 12328  1F50  3000               	movlw	0
 12329  1F51  00C0               	movwf	(?_log+2)^(0+256)
 12330  1F52  0008               	return
 12331  1F53                     l8192:	
 12332  1F53  0022               	movlb	2	; select bank2
 12333  1F54  0840               	movf	(log@x+2)^(0+256),w
 12334  1F55  043F               	iorwf	(log@x+1)^(0+256),w
 12335  1F56  043E               	iorwf	log@x^(0+256),w
 12336  1F57  1D03               	skipz
 12337  1F58  2F66               	goto	l8198
 12338  1F59  3022               	movlw	34
 12339  1F5A  0024               	movlb	4	; select bank4
 12340  1F5B  00CD               	movwf	_errno^(0+512)
 12341  1F5C  3000               	movlw	0
 12342  1F5D  00CE               	movwf	(_errno^(0+512)+1)
 12343  1F5E  3000               	movlw	0
 12344  1F5F  0022               	movlb	2	; select bank2
 12345  1F60  00BE               	movwf	?_log^(0+256)
 12346  1F61  3000               	movlw	0
 12347  1F62  00BF               	movwf	(?_log+1)^(0+256)
 12348  1F63  3000               	movlw	0
 12349  1F64  00C0               	movwf	(?_log+2)^(0+256)
 12350  1F65  0008               	return
 12351  1F66                     l8198:	
 12352  1F66  3000               	movlw	0
 12353  1F67  0021               	movlb	1	; select bank1
 12354  1F68  00C1               	movwf	___ftadd@f1^(0+128)
 12355  1F69  3080               	movlw	128
 12356  1F6A  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12357  1F6B  30BF               	movlw	191
 12358  1F6C  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12359  1F6D  3000               	movlw	0
 12360  1F6E  00AE               	movwf	___ftmul@f1^(0+128)
 12361  1F6F  3000               	movlw	0
 12362  1F70  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12363  1F71  3040               	movlw	64
 12364  1F72  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12365  1F73  3042               	movlw	(low (log@exponent| (0+256)))& (0+255)
 12366  1F74  0022               	movlb	2	; select bank2
 12367  1F75  00C1               	movwf	??_log^(0+256)
 12368  1F76  0841               	movf	??_log^(0+256),w
 12369  1F77  0021               	movlb	1	; select bank1
 12370  1F78  00A3               	movwf	frexp@eptr^(0+128)
 12371  1F79  0022               	movlb	2	; select bank2
 12372  1F7A  083E               	movf	log@x^(0+256),w
 12373  1F7B  0021               	movlb	1	; select bank1
 12374  1F7C  00A0               	movwf	frexp@value^(0+128)
 12375  1F7D  0022               	movlb	2	; select bank2
 12376  1F7E  083F               	movf	(log@x+1)^(0+256),w
 12377  1F7F  0021               	movlb	1	; select bank1
 12378  1F80  00A1               	movwf	(frexp@value+1)^(0+128)
 12379  1F81  0022               	movlb	2	; select bank2
 12380  1F82  0840               	movf	(log@x+2)^(0+256),w
 12381  1F83  0021               	movlb	1	; select bank1
 12382  1F84  00A2               	movwf	(frexp@value+2)^(0+128)
 12383  1F85  31A3  238B  319F   	fcall	_frexp
 12384  1F88  0021               	movlb	1	; select bank1
 12385  1F89  0820               	movf	?_frexp^(0+128),w
 12386  1F8A  00B1               	movwf	___ftmul@f2^(0+128)
 12387  1F8B  0821               	movf	(?_frexp+1)^(0+128),w
 12388  1F8C  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12389  1F8D  0822               	movf	(?_frexp+2)^(0+128),w
 12390  1F8E  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12391  1F8F  319E  267B  319F   	fcall	___ftmul
 12392  1F92  0021               	movlb	1	; select bank1
 12393  1F93  082E               	movf	?___ftmul^(0+128),w
 12394  1F94  00C4               	movwf	___ftadd@f2^(0+128)
 12395  1F95  082F               	movf	(?___ftmul+1)^(0+128),w
 12396  1F96  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12397  1F97  0830               	movf	(?___ftmul+2)^(0+128),w
 12398  1F98  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12399  1F99  3190  201F  319F   	fcall	___ftadd
 12400  1F9C  0021               	movlb	1	; select bank1
 12401  1F9D  0841               	movf	?___ftadd^(0+128),w
 12402  1F9E  0022               	movlb	2	; select bank2
 12403  1F9F  00BE               	movwf	log@x^(0+256)
 12404  1FA0  0021               	movlb	1	; select bank1
 12405  1FA1  0842               	movf	(?___ftadd+1)^(0+128),w
 12406  1FA2  0022               	movlb	2	; select bank2
 12407  1FA3  00BF               	movwf	(log@x+1)^(0+256)
 12408  1FA4  0021               	movlb	1	; select bank1
 12409  1FA5  0843               	movf	(?___ftadd+2)^(0+128),w
 12410  1FA6  0022               	movlb	2	; select bank2
 12411  1FA7  00C0               	movwf	(log@x+2)^(0+256)
 12412  1FA8  30FF               	movlw	255
 12413  1FA9  07C2               	addwf	log@exponent^(0+256),f
 12414  1FAA  30FF               	movlw	255
 12415  1FAB  3DC3               	addwfc	(log@exponent+1)^(0+256),f
 12416  1FAC  083E               	movf	log@x^(0+256),w
 12417  1FAD  00B4               	movwf	eval_poly@x^(0+256)
 12418  1FAE  083F               	movf	(log@x+1)^(0+256),w
 12419  1FAF  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12420  1FB0  0840               	movf	(log@x+2)^(0+256),w
 12421  1FB1  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12422  1FB2  301E               	movlw	low (log@coeff| (0+32768))
 12423  1FB3  00B7               	movwf	eval_poly@d^(0+256)
 12424  1FB4  30A8               	movlw	high (log@coeff| (0+32768))
 12425  1FB5  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12426  1FB6  3008               	movlw	8
 12427  1FB7  00B9               	movwf	eval_poly@n^(0+256)
 12428  1FB8  3000               	movlw	0
 12429  1FB9  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12430  1FBA  31A7  2718  319F   	fcall	_eval_poly
 12431  1FBD  0022               	movlb	2	; select bank2
 12432  1FBE  0834               	movf	?_eval_poly^(0+256),w
 12433  1FBF  00BE               	movwf	log@x^(0+256)
 12434  1FC0  0835               	movf	(?_eval_poly+1)^(0+256),w
 12435  1FC1  00BF               	movwf	(log@x+1)^(0+256)
 12436  1FC2  0836               	movf	(?_eval_poly+2)^(0+256),w
 12437  1FC3  00C0               	movwf	(log@x+2)^(0+256)
 12438  1FC4  083E               	movf	log@x^(0+256),w
 12439  1FC5  0021               	movlb	1	; select bank1
 12440  1FC6  00C1               	movwf	___ftadd@f1^(0+128)
 12441  1FC7  0022               	movlb	2	; select bank2
 12442  1FC8  083F               	movf	(log@x+1)^(0+256),w
 12443  1FC9  0021               	movlb	1	; select bank1
 12444  1FCA  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 12445  1FCB  0022               	movlb	2	; select bank2
 12446  1FCC  0840               	movf	(log@x+2)^(0+256),w
 12447  1FCD  0021               	movlb	1	; select bank1
 12448  1FCE  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 12449  1FCF  3072               	movlw	114
 12450  1FD0  00AE               	movwf	___ftmul@f1^(0+128)
 12451  1FD1  3031               	movlw	49
 12452  1FD2  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12453  1FD3  303F               	movlw	63
 12454  1FD4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12455  1FD5  0022               	movlb	2	; select bank2
 12456  1FD6  0843               	movf	(log@exponent+1)^(0+256),w
 12457  1FD7  0021               	movlb	1	; select bank1
 12458  1FD8  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12459  1FD9  0022               	movlb	2	; select bank2
 12460  1FDA  0842               	movf	log@exponent^(0+256),w
 12461  1FDB  0021               	movlb	1	; select bank1
 12462  1FDC  00A8               	movwf	___awtoft@c^(0+128)
 12463  1FDD  31A0  2076  319F   	fcall	___awtoft
 12464  1FE0  0021               	movlb	1	; select bank1
 12465  1FE1  0828               	movf	?___awtoft^(0+128),w
 12466  1FE2  00B1               	movwf	___ftmul@f2^(0+128)
 12467  1FE3  0829               	movf	(?___awtoft+1)^(0+128),w
 12468  1FE4  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12469  1FE5  082A               	movf	(?___awtoft+2)^(0+128),w
 12470  1FE6  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12471  1FE7  319E  267B  319F   	fcall	___ftmul
 12472  1FEA  0021               	movlb	1	; select bank1
 12473  1FEB  082E               	movf	?___ftmul^(0+128),w
 12474  1FEC  00C4               	movwf	___ftadd@f2^(0+128)
 12475  1FED  082F               	movf	(?___ftmul+1)^(0+128),w
 12476  1FEE  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 12477  1FEF  0830               	movf	(?___ftmul+2)^(0+128),w
 12478  1FF0  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 12479  1FF1  3190  201F         	fcall	___ftadd
 12480  1FF3  0021               	movlb	1	; select bank1
 12481  1FF4  0841               	movf	?___ftadd^(0+128),w
 12482  1FF5  0022               	movlb	2	; select bank2
 12483  1FF6  00BE               	movwf	?_log^(0+256)
 12484  1FF7  0021               	movlb	1	; select bank1
 12485  1FF8  0842               	movf	(?___ftadd+1)^(0+128),w
 12486  1FF9  0022               	movlb	2	; select bank2
 12487  1FFA  00BF               	movwf	(?_log+1)^(0+256)
 12488  1FFB  0021               	movlb	1	; select bank1
 12489  1FFC  0843               	movf	(?___ftadd+2)^(0+128),w
 12490  1FFD  0022               	movlb	2	; select bank2
 12491  1FFE  00C0               	movwf	(?_log+2)^(0+256)
 12492  1FFF  0008               	return
 12493  2000                     __end_of_log:	
 12494                           
 12495                           	psect	text27
 12496  1351                     __ptext27:	
 12497 ;; *************** function _exp *****************
 12498 ;; Defined at:
 12499 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 12500 ;; Parameters:    Size  Location     Type
 12501 ;;  x               3   40[BANK2 ] int 
 12502 ;; Auto vars:     Size  Location     Type
 12503 ;;  exponent        2   50[BANK2 ] int 
 12504 ;;  sign            1   52[BANK2 ] unsigned char 
 12505 ;; Return value:  Size  Location     Type
 12506 ;;                  3   40[BANK2 ] unsigned char 
 12507 ;; Registers used:
 12508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12509 ;; Tracked objects:
 12510 ;;		On entry : 0/0
 12511 ;;		On exit  : 0/0
 12512 ;;		Unchanged: 0/0
 12513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12514 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12515 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12516 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12517 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12518 ;;Total ram usage:       13 bytes
 12519 ;; Hardware stack levels used:    1
 12520 ;; Hardware stack levels required when called:    6
 12521 ;; This function calls:
 12522 ;;		___awtoft
 12523 ;;		___ftdiv
 12524 ;;		___ftge
 12525 ;;		___ftmul
 12526 ;;		___ftneg
 12527 ;;		___ftsub
 12528 ;;		___fttol
 12529 ;;		_eval_poly
 12530 ;;		_floor
 12531 ;;		_ldexp
 12532 ;; This function is called by:
 12533 ;;		_pow
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _exp
 12539  1351                     _exp:	
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12543  1351  0022               	movlb	2	; select bank2
 12544  1352  084A               	movf	(exp@x+2)^(0+256),w
 12545  1353  0449               	iorwf	(exp@x+1)^(0+256),w
 12546  1354  0448               	iorwf	exp@x^(0+256),w
 12547  1355  1D03               	skipz
 12548  1356  2B5E               	goto	l8214
 12549  1357  3000               	movlw	0
 12550  1358  00C8               	movwf	?_exp^(0+256)
 12551  1359  3080               	movlw	128
 12552  135A  00C9               	movwf	(?_exp+1)^(0+256)
 12553  135B  303F               	movlw	63
 12554  135C  00CA               	movwf	(?_exp+2)^(0+256)
 12555  135D  0008               	return
 12556  135E                     l8214:	
 12557  135E  3072               	movlw	114
 12558  135F  0021               	movlb	1	; select bank1
 12559  1360  00A0               	movwf	___ftge@ff1^(0+128)
 12560  1361  3031               	movlw	49
 12561  1362  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12562  1363  3044               	movlw	68
 12563  1364  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12564  1365  0022               	movlb	2	; select bank2
 12565  1366  0848               	movf	exp@x^(0+256),w
 12566  1367  0021               	movlb	1	; select bank1
 12567  1368  00A3               	movwf	___ftge@ff2^(0+128)
 12568  1369  0022               	movlb	2	; select bank2
 12569  136A  0849               	movf	(exp@x+1)^(0+256),w
 12570  136B  0021               	movlb	1	; select bank1
 12571  136C  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12572  136D  0022               	movlb	2	; select bank2
 12573  136E  084A               	movf	(exp@x+2)^(0+256),w
 12574  136F  0021               	movlb	1	; select bank1
 12575  1370  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12576  1371  3198  2000  3193   	fcall	___ftge
 12577  1374  1803               	btfsc	3,0
 12578  1375  2B83               	goto	l8224
 12579  1376  3022               	movlw	34
 12580  1377  0024               	movlb	4	; select bank4
 12581  1378  00CD               	movwf	_errno^(0+512)
 12582  1379  3000               	movlw	0
 12583  137A  00CE               	movwf	(_errno^(0+512)+1)
 12584  137B  30FF               	movlw	255
 12585  137C  0022               	movlb	2	; select bank2
 12586  137D  00C8               	movwf	?_exp^(0+256)
 12587  137E  307F               	movlw	127
 12588  137F  00C9               	movwf	(?_exp+1)^(0+256)
 12589  1380  307F               	movlw	127
 12590  1381  00CA               	movwf	(?_exp+2)^(0+256)
 12591  1382  0008               	return
 12592  1383                     l8224:	
 12593  1383  0022               	movlb	2	; select bank2
 12594  1384  0848               	movf	exp@x^(0+256),w
 12595  1385  0021               	movlb	1	; select bank1
 12596  1386  00A0               	movwf	___ftge@ff1^(0+128)
 12597  1387  0022               	movlb	2	; select bank2
 12598  1388  0849               	movf	(exp@x+1)^(0+256),w
 12599  1389  0021               	movlb	1	; select bank1
 12600  138A  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12601  138B  0022               	movlb	2	; select bank2
 12602  138C  084A               	movf	(exp@x+2)^(0+256),w
 12603  138D  0021               	movlb	1	; select bank1
 12604  138E  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12605  138F  3049               	movlw	73
 12606  1390  00A3               	movwf	___ftge@ff2^(0+128)
 12607  1391  303A               	movlw	58
 12608  1392  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12609  1393  30C4               	movlw	196
 12610  1394  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12611  1395  3198  2000  3193   	fcall	___ftge
 12612  1398  1803               	btfsc	3,0
 12613  1399  2BA7               	goto	l8230
 12614  139A  3022               	movlw	34
 12615  139B  0024               	movlb	4	; select bank4
 12616  139C  00CD               	movwf	_errno^(0+512)
 12617  139D  3000               	movlw	0
 12618  139E  00CE               	movwf	(_errno^(0+512)+1)
 12619  139F  3000               	movlw	0
 12620  13A0  0022               	movlb	2	; select bank2
 12621  13A1  00C8               	movwf	?_exp^(0+256)
 12622  13A2  3000               	movlw	0
 12623  13A3  00C9               	movwf	(?_exp+1)^(0+256)
 12624  13A4  3000               	movlw	0
 12625  13A5  00CA               	movwf	(?_exp+2)^(0+256)
 12626  13A6  0008               	return
 12627  13A7                     l8230:	
 12628  13A7  0022               	movlb	2	; select bank2
 12629  13A8  0848               	movf	exp@x^(0+256),w
 12630  13A9  0021               	movlb	1	; select bank1
 12631  13AA  00A0               	movwf	___ftge@ff1^(0+128)
 12632  13AB  0022               	movlb	2	; select bank2
 12633  13AC  0849               	movf	(exp@x+1)^(0+256),w
 12634  13AD  0021               	movlb	1	; select bank1
 12635  13AE  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12636  13AF  0022               	movlb	2	; select bank2
 12637  13B0  084A               	movf	(exp@x+2)^(0+256),w
 12638  13B1  0021               	movlb	1	; select bank1
 12639  13B2  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12640  13B3  3000               	movlw	0
 12641  13B4  00A3               	movwf	___ftge@ff2^(0+128)
 12642  13B5  3000               	movlw	0
 12643  13B6  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12644  13B7  3000               	movlw	0
 12645  13B8  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12646  13B9  3198  2000  3193   	fcall	___ftge
 12647  13BC  1803               	btfsc	3,0
 12648  13BD  2BC0               	goto	u8650
 12649  13BE  3001               	movlw	1
 12650  13BF  2BC1               	goto	u8660
 12651  13C0                     u8650:	
 12652  13C0  3000               	movlw	0
 12653  13C1                     u8660:	
 12654  13C1  0022               	movlb	2	; select bank2
 12655  13C2  00CB               	movwf	??_exp^(0+256)
 12656  13C3  084B               	movf	??_exp^(0+256),w
 12657  13C4  00D4               	movwf	exp@sign^(0+256)
 12658  13C5  0854               	movf	exp@sign^(0+256),w
 12659  13C6  1903               	btfsc	3,2
 12660  13C7  2BE2               	goto	l8236
 12661  13C8  0848               	movf	exp@x^(0+256),w
 12662  13C9  0021               	movlb	1	; select bank1
 12663  13CA  00BE               	movwf	___ftneg@f1^(0+128)
 12664  13CB  0022               	movlb	2	; select bank2
 12665  13CC  0849               	movf	(exp@x+1)^(0+256),w
 12666  13CD  0021               	movlb	1	; select bank1
 12667  13CE  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 12668  13CF  0022               	movlb	2	; select bank2
 12669  13D0  084A               	movf	(exp@x+2)^(0+256),w
 12670  13D1  0021               	movlb	1	; select bank1
 12671  13D2  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 12672  13D3  31AF  2724  3193   	fcall	___ftneg
 12673  13D6  0021               	movlb	1	; select bank1
 12674  13D7  083E               	movf	?___ftneg^(0+128),w
 12675  13D8  0022               	movlb	2	; select bank2
 12676  13D9  00C8               	movwf	exp@x^(0+256)
 12677  13DA  0021               	movlb	1	; select bank1
 12678  13DB  083F               	movf	(?___ftneg+1)^(0+128),w
 12679  13DC  0022               	movlb	2	; select bank2
 12680  13DD  00C9               	movwf	(exp@x+1)^(0+256)
 12681  13DE  0021               	movlb	1	; select bank1
 12682  13DF  0840               	movf	(?___ftneg+2)^(0+128),w
 12683  13E0  0022               	movlb	2	; select bank2
 12684  13E1  00CA               	movwf	(exp@x+2)^(0+256)
 12685  13E2                     l8236:	
 12686  13E2  30AA               	movlw	170
 12687  13E3  0021               	movlb	1	; select bank1
 12688  13E4  00AE               	movwf	___ftmul@f1^(0+128)
 12689  13E5  30B8               	movlw	184
 12690  13E6  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 12691  13E7  303F               	movlw	63
 12692  13E8  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 12693  13E9  0022               	movlb	2	; select bank2
 12694  13EA  0848               	movf	exp@x^(0+256),w
 12695  13EB  0021               	movlb	1	; select bank1
 12696  13EC  00B1               	movwf	___ftmul@f2^(0+128)
 12697  13ED  0022               	movlb	2	; select bank2
 12698  13EE  0849               	movf	(exp@x+1)^(0+256),w
 12699  13EF  0021               	movlb	1	; select bank1
 12700  13F0  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 12701  13F1  0022               	movlb	2	; select bank2
 12702  13F2  084A               	movf	(exp@x+2)^(0+256),w
 12703  13F3  0021               	movlb	1	; select bank1
 12704  13F4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 12705  13F5  319E  267B  3193   	fcall	___ftmul
 12706  13F8  0021               	movlb	1	; select bank1
 12707  13F9  082E               	movf	?___ftmul^(0+128),w
 12708  13FA  0022               	movlb	2	; select bank2
 12709  13FB  00C8               	movwf	exp@x^(0+256)
 12710  13FC  0021               	movlb	1	; select bank1
 12711  13FD  082F               	movf	(?___ftmul+1)^(0+128),w
 12712  13FE  0022               	movlb	2	; select bank2
 12713  13FF  00C9               	movwf	(exp@x+1)^(0+256)
 12714  1400  0021               	movlb	1	; select bank1
 12715  1401  0830               	movf	(?___ftmul+2)^(0+128),w
 12716  1402  0022               	movlb	2	; select bank2
 12717  1403  00CA               	movwf	(exp@x+2)^(0+256)
 12718  1404  0848               	movf	exp@x^(0+256),w
 12719  1405  00AE               	movwf	floor@x^(0+256)
 12720  1406  0849               	movf	(exp@x+1)^(0+256),w
 12721  1407  00AF               	movwf	(floor@x+1)^(0+256)
 12722  1408  084A               	movf	(exp@x+2)^(0+256),w
 12723  1409  00B0               	movwf	(floor@x+2)^(0+256)
 12724  140A  319D  25C8  3193   	fcall	_floor
 12725  140D  0022               	movlb	2	; select bank2
 12726  140E  082E               	movf	?_floor^(0+256),w
 12727  140F  00CC               	movwf	_exp$2850^(0+256)
 12728  1410  082F               	movf	(?_floor+1)^(0+256),w
 12729  1411  00CD               	movwf	(_exp$2850+1)^(0+256)
 12730  1412  0830               	movf	(?_floor+2)^(0+256),w
 12731  1413  00CE               	movwf	(_exp$2850+2)^(0+256)
 12732  1414  084C               	movf	_exp$2850^(0+256),w
 12733  1415  00A0               	movwf	___fttol@f1^(0+256)
 12734  1416  084D               	movf	(_exp$2850+1)^(0+256),w
 12735  1417  00A1               	movwf	(___fttol@f1+1)^(0+256)
 12736  1418  084E               	movf	(_exp$2850+2)^(0+256),w
 12737  1419  00A2               	movwf	(___fttol@f1+2)^(0+256)
 12738  141A  319A  2246  3193   	fcall	___fttol
 12739  141D  0022               	movlb	2	; select bank2
 12740  141E  0821               	movf	(?___fttol^(0+256)+1),w
 12741  141F  00D3               	movwf	(exp@exponent+1)^(0+256)
 12742  1420  0820               	movf	?___fttol^(0+256),w
 12743  1421  00D2               	movwf	exp@exponent^(0+256)
 12744  1422  0853               	movf	(exp@exponent+1)^(0+256),w
 12745  1423  0021               	movlb	1	; select bank1
 12746  1424  00A9               	movwf	(___awtoft@c+1)^(0+128)
 12747  1425  0022               	movlb	2	; select bank2
 12748  1426  0852               	movf	exp@exponent^(0+256),w
 12749  1427  0021               	movlb	1	; select bank1
 12750  1428  00A8               	movwf	___awtoft@c^(0+128)
 12751  1429  31A0  2076  3193   	fcall	___awtoft
 12752  142C  0021               	movlb	1	; select bank1
 12753  142D  0828               	movf	?___awtoft^(0+128),w
 12754  142E  0022               	movlb	2	; select bank2
 12755  142F  00B7               	movwf	___ftsub@f2^(0+256)
 12756  1430  0021               	movlb	1	; select bank1
 12757  1431  0829               	movf	(?___awtoft+1)^(0+128),w
 12758  1432  0022               	movlb	2	; select bank2
 12759  1433  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 12760  1434  0021               	movlb	1	; select bank1
 12761  1435  082A               	movf	(?___awtoft+2)^(0+128),w
 12762  1436  0022               	movlb	2	; select bank2
 12763  1437  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 12764  1438  0848               	movf	exp@x^(0+256),w
 12765  1439  00BA               	movwf	___ftsub@f1^(0+256)
 12766  143A  0849               	movf	(exp@x+1)^(0+256),w
 12767  143B  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 12768  143C  084A               	movf	(exp@x+2)^(0+256),w
 12769  143D  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 12770  143E  3188  2000  3193   	fcall	___ftsub
 12771  1441  0022               	movlb	2	; select bank2
 12772  1442  0837               	movf	?___ftsub^(0+256),w
 12773  1443  00C8               	movwf	exp@x^(0+256)
 12774  1444  0838               	movf	(?___ftsub+1)^(0+256),w
 12775  1445  00C9               	movwf	(exp@x+1)^(0+256)
 12776  1446  0839               	movf	(?___ftsub+2)^(0+256),w
 12777  1447  00CA               	movwf	(exp@x+2)^(0+256)
 12778  1448  0848               	movf	exp@x^(0+256),w
 12779  1449  00B4               	movwf	eval_poly@x^(0+256)
 12780  144A  0849               	movf	(exp@x+1)^(0+256),w
 12781  144B  00B5               	movwf	(eval_poly@x+1)^(0+256)
 12782  144C  084A               	movf	(exp@x+2)^(0+256),w
 12783  144D  00B6               	movwf	(eval_poly@x+2)^(0+256)
 12784  144E  3000               	movlw	low (exp@coeff| (0+32768))
 12785  144F  00B7               	movwf	eval_poly@d^(0+256)
 12786  1450  30A8               	movlw	high (exp@coeff| (0+32768))
 12787  1451  00B8               	movwf	(eval_poly@d^(0+256)+1)
 12788  1452  3009               	movlw	9
 12789  1453  00B9               	movwf	eval_poly@n^(0+256)
 12790  1454  3000               	movlw	0
 12791  1455  00BA               	movwf	(eval_poly@n^(0+256)+1)
 12792  1456  31A7  2718  3193   	fcall	_eval_poly
 12793  1459  0022               	movlb	2	; select bank2
 12794  145A  0834               	movf	?_eval_poly^(0+256),w
 12795  145B  00BE               	movwf	ldexp@value^(0+256)
 12796  145C  0835               	movf	(?_eval_poly+1)^(0+256),w
 12797  145D  00BF               	movwf	(ldexp@value+1)^(0+256)
 12798  145E  0836               	movf	(?_eval_poly+2)^(0+256),w
 12799  145F  00C0               	movwf	(ldexp@value+2)^(0+256)
 12800  1460  0853               	movf	(exp@exponent+1)^(0+256),w
 12801  1461  00C2               	movwf	(ldexp@newexp+1)^(0+256)
 12802  1462  0852               	movf	exp@exponent^(0+256),w
 12803  1463  00C1               	movwf	ldexp@newexp^(0+256)
 12804  1464  3187  2761  3193   	fcall	_ldexp
 12805  1467  0022               	movlb	2	; select bank2
 12806  1468  083E               	movf	?_ldexp^(0+256),w
 12807  1469  00C8               	movwf	exp@x^(0+256)
 12808  146A  083F               	movf	(?_ldexp+1)^(0+256),w
 12809  146B  00C9               	movwf	(exp@x+1)^(0+256)
 12810  146C  0840               	movf	(?_ldexp+2)^(0+256),w
 12811  146D  00CA               	movwf	(exp@x+2)^(0+256)
 12812  146E  0854               	movf	exp@sign^(0+256),w
 12813  146F  1903               	btfsc	3,2
 12814  1470  0008               	return
 12815  1471  30FF               	movlw	255
 12816  1472  00CF               	movwf	_exp$2589^(0+256)
 12817  1473  307F               	movlw	127
 12818  1474  00D0               	movwf	(_exp$2589+1)^(0+256)
 12819  1475  307F               	movlw	127
 12820  1476  00D1               	movwf	(_exp$2589+2)^(0+256)
 12821  1477  084A               	movf	(exp@x+2)^(0+256),w
 12822  1478  0651               	xorwf	(_exp$2589+2)^(0+256),w
 12823  1479  1D03               	skipz
 12824  147A  2C81               	goto	u8695
 12825  147B  0849               	movf	(exp@x+1)^(0+256),w
 12826  147C  0650               	xorwf	(_exp$2589+1)^(0+256),w
 12827  147D  1D03               	skipz
 12828  147E  2C81               	goto	u8695
 12829  147F  0848               	movf	exp@x^(0+256),w
 12830  1480  064F               	xorwf	_exp$2589^(0+256),w
 12831  1481                     u8695:	
 12832  1481  1D03               	skipz
 12833  1482  2C8A               	goto	l8258
 12834  1483  3000               	movlw	0
 12835  1484  00C8               	movwf	?_exp^(0+256)
 12836  1485  3000               	movlw	0
 12837  1486  00C9               	movwf	(?_exp+1)^(0+256)
 12838  1487  3000               	movlw	0
 12839  1488  00CA               	movwf	(?_exp+2)^(0+256)
 12840  1489  0008               	return
 12841  148A                     l8258:	
 12842  148A  0848               	movf	exp@x^(0+256),w
 12843  148B  0021               	movlb	1	; select bank1
 12844  148C  00CE               	movwf	___ftdiv@f2^(0+128)
 12845  148D  0022               	movlb	2	; select bank2
 12846  148E  0849               	movf	(exp@x+1)^(0+256),w
 12847  148F  0021               	movlb	1	; select bank1
 12848  1490  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 12849  1491  0022               	movlb	2	; select bank2
 12850  1492  084A               	movf	(exp@x+2)^(0+256),w
 12851  1493  0021               	movlb	1	; select bank1
 12852  1494  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 12853  1495  3000               	movlw	0
 12854  1496  00D1               	movwf	___ftdiv@f1^(0+128)
 12855  1497  3080               	movlw	128
 12856  1498  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 12857  1499  303F               	movlw	63
 12858  149A  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 12859  149B  319C  2474         	fcall	___ftdiv
 12860  149D  0021               	movlb	1	; select bank1
 12861  149E  084E               	movf	?___ftdiv^(0+128),w
 12862  149F  0022               	movlb	2	; select bank2
 12863  14A0  00C8               	movwf	?_exp^(0+256)
 12864  14A1  0021               	movlb	1	; select bank1
 12865  14A2  084F               	movf	(?___ftdiv+1)^(0+128),w
 12866  14A3  0022               	movlb	2	; select bank2
 12867  14A4  00C9               	movwf	(?_exp+1)^(0+256)
 12868  14A5  0021               	movlb	1	; select bank1
 12869  14A6  0850               	movf	(?___ftdiv+2)^(0+128),w
 12870  14A7  0022               	movlb	2	; select bank2
 12871  14A8  00CA               	movwf	(?_exp+2)^(0+256)
 12872  14A9  0008               	return
 12873  14AA                     __end_of_exp:	
 12874                           
 12875                           	psect	text28
 12876  0761                     __ptext28:	
 12877 ;; *************** function _ldexp *****************
 12878 ;; Defined at:
 12879 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 12880 ;; Parameters:    Size  Location     Type
 12881 ;;  value           3   30[BANK2 ] unsigned char 
 12882 ;;  newexp          2   33[BANK2 ] int 
 12883 ;; Auto vars:     Size  Location     Type
 12884 ;;		None
 12885 ;; Return value:  Size  Location     Type
 12886 ;;                  3   30[BANK2 ] int 
 12887 ;; Registers used:
 12888 ;;		wreg, status,2, status,0, pclath, cstack
 12889 ;; Tracked objects:
 12890 ;;		On entry : 0/0
 12891 ;;		On exit  : 0/0
 12892 ;;		Unchanged: 0/0
 12893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12894 ;;      Params:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12895 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12896 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12897 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12898 ;;Total ram usage:       10 bytes
 12899 ;; Hardware stack levels used:    1
 12900 ;; Hardware stack levels required when called:    4
 12901 ;; This function calls:
 12902 ;;		___ftge
 12903 ;;		___ftneg
 12904 ;; This function is called by:
 12905 ;;		_exp
 12906 ;; This function uses a non-reentrant model
 12907 ;;
 12908                           
 12909                           
 12910                           ;psect for function _ldexp
 12911  0761                     _ldexp:	
 12912                           
 12913                           ;incstack = 0
 12914                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
 12915  0761  0022               	movlb	2	; select bank2
 12916  0762  0840               	movf	(ldexp@value+2)^(0+256),w
 12917  0763  043F               	iorwf	(ldexp@value+1)^(0+256),w
 12918  0764  043E               	iorwf	ldexp@value^(0+256),w
 12919  0765  1D03               	skipz
 12920  0766  2F6E               	goto	l8062
 12921  0767  3000               	movlw	0
 12922  0768  00BE               	movwf	?_ldexp^(0+256)
 12923  0769  3000               	movlw	0
 12924  076A  00BF               	movwf	(?_ldexp+1)^(0+256)
 12925  076B  3000               	movlw	0
 12926  076C  00C0               	movwf	(?_ldexp+2)^(0+256)
 12927  076D  0008               	return
 12928  076E                     l8062:	
 12929  076E  0840               	movf	(ldexp@value^(0+256)+2),w
 12930  076F  397F               	andlw	127
 12931  0770  00C3               	movwf	??_ldexp^(0+256)
 12932  0771  01C4               	clrf	(??_ldexp^(0+256)+1)
 12933  0772  35C3               	lslf	??_ldexp^(0+256),f
 12934  0773  0DC4               	rlf	(??_ldexp^(0+256)+1),f
 12935  0774  0843               	movf	??_ldexp^(0+256),w
 12936  0775  07C1               	addwf	ldexp@newexp^(0+256),f
 12937  0776  0844               	movf	(??_ldexp+1)^(0+256),w
 12938  0777  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 12939  0778  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 12940  0779  0D3F               	rlf	(ldexp@value^(0+256)+1),w
 12941  077A  3901               	andlw	1
 12942  077B  00C3               	movwf	??_ldexp^(0+256)
 12943  077C  01C4               	clrf	(??_ldexp^(0+256)+1)
 12944  077D  0843               	movf	??_ldexp^(0+256),w
 12945  077E  07C1               	addwf	ldexp@newexp^(0+256),f
 12946  077F  0844               	movf	(??_ldexp+1)^(0+256),w
 12947  0780  3DC2               	addwfc	(ldexp@newexp+1)^(0+256),f
 12948  0781  1FC2               	btfss	(ldexp@newexp+1)^(0+256),7
 12949  0782  2F90               	goto	l8072
 12950  0783  3022               	movlw	34
 12951  0784  0024               	movlb	4	; select bank4
 12952  0785  00CD               	movwf	_errno^(0+512)
 12953  0786  3000               	movlw	0
 12954  0787  00CE               	movwf	(_errno^(0+512)+1)
 12955  0788  3000               	movlw	0
 12956  0789  0022               	movlb	2	; select bank2
 12957  078A  00BE               	movwf	?_ldexp^(0+256)
 12958  078B  3000               	movlw	0
 12959  078C  00BF               	movwf	(?_ldexp+1)^(0+256)
 12960  078D  3000               	movlw	0
 12961  078E  00C0               	movwf	(?_ldexp+2)^(0+256)
 12962  078F  0008               	return
 12963  0790                     l8072:	
 12964  0790  0842               	movf	(ldexp@newexp+1)^(0+256),w
 12965  0791  3A80               	xorlw	128
 12966  0792  00C3               	movwf	??_ldexp^(0+256)
 12967  0793  3081               	movlw	129
 12968  0794  0243               	subwf	??_ldexp^(0+256),w
 12969  0795  1D03               	skipz
 12970  0796  2F99               	goto	u8525
 12971  0797  3000               	movlw	0
 12972  0798  0241               	subwf	ldexp@newexp^(0+256),w
 12973  0799                     u8525:	
 12974  0799  1C03               	skipc
 12975  079A  2FE0               	goto	l8096
 12976  079B  3022               	movlw	34
 12977  079C  0024               	movlb	4	; select bank4
 12978  079D  00CD               	movwf	_errno^(0+512)
 12979  079E  3000               	movlw	0
 12980  079F  00CE               	movwf	(_errno^(0+512)+1)
 12981  07A0  0022               	movlb	2	; select bank2
 12982  07A1  083E               	movf	ldexp@value^(0+256),w
 12983  07A2  0021               	movlb	1	; select bank1
 12984  07A3  00A0               	movwf	___ftge@ff1^(0+128)
 12985  07A4  0022               	movlb	2	; select bank2
 12986  07A5  083F               	movf	(ldexp@value+1)^(0+256),w
 12987  07A6  0021               	movlb	1	; select bank1
 12988  07A7  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 12989  07A8  0022               	movlb	2	; select bank2
 12990  07A9  0840               	movf	(ldexp@value+2)^(0+256),w
 12991  07AA  0021               	movlb	1	; select bank1
 12992  07AB  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 12993  07AC  3000               	movlw	0
 12994  07AD  00A3               	movwf	___ftge@ff2^(0+128)
 12995  07AE  3000               	movlw	0
 12996  07AF  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 12997  07B0  3000               	movlw	0
 12998  07B1  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 12999  07B2  3198  2000  3187   	fcall	___ftge
 13000  07B5  1803               	btfsc	3,0
 13001  07B6  2FD8               	goto	l8092
 13002  07B7  30FF               	movlw	255
 13003  07B8  0022               	movlb	2	; select bank2
 13004  07B9  00C5               	movwf	_ldexp$2626^(0+256)
 13005  07BA  307F               	movlw	127
 13006  07BB  00C6               	movwf	(_ldexp$2626+1)^(0+256)
 13007  07BC  307F               	movlw	127
 13008  07BD  00C7               	movwf	(_ldexp$2626+2)^(0+256)
 13009  07BE  0845               	movf	_ldexp$2626^(0+256),w
 13010  07BF  0021               	movlb	1	; select bank1
 13011  07C0  00BE               	movwf	___ftneg@f1^(0+128)
 13012  07C1  0022               	movlb	2	; select bank2
 13013  07C2  0846               	movf	(_ldexp$2626+1)^(0+256),w
 13014  07C3  0021               	movlb	1	; select bank1
 13015  07C4  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13016  07C5  0022               	movlb	2	; select bank2
 13017  07C6  0847               	movf	(_ldexp$2626+2)^(0+256),w
 13018  07C7  0021               	movlb	1	; select bank1
 13019  07C8  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13020  07C9  31AF  2724         	fcall	___ftneg
 13021  07CB  0021               	movlb	1	; select bank1
 13022  07CC  083E               	movf	?___ftneg^(0+128),w
 13023  07CD  0022               	movlb	2	; select bank2
 13024  07CE  00BE               	movwf	?_ldexp^(0+256)
 13025  07CF  0021               	movlb	1	; select bank1
 13026  07D0  083F               	movf	(?___ftneg+1)^(0+128),w
 13027  07D1  0022               	movlb	2	; select bank2
 13028  07D2  00BF               	movwf	(?_ldexp+1)^(0+256)
 13029  07D3  0021               	movlb	1	; select bank1
 13030  07D4  0840               	movf	(?___ftneg+2)^(0+128),w
 13031  07D5  0022               	movlb	2	; select bank2
 13032  07D6  00C0               	movwf	(?_ldexp+2)^(0+256)
 13033  07D7  0008               	return
 13034  07D8                     l8092:	
 13035  07D8  30FF               	movlw	255
 13036  07D9  0022               	movlb	2	; select bank2
 13037  07DA  00BE               	movwf	?_ldexp^(0+256)
 13038  07DB  307F               	movlw	127
 13039  07DC  00BF               	movwf	(?_ldexp+1)^(0+256)
 13040  07DD  307F               	movlw	127
 13041  07DE  00C0               	movwf	(?_ldexp+2)^(0+256)
 13042  07DF  0008               	return
 13043  07E0                     l8096:	
 13044  07E0  0022               	movlb	2	; select bank2
 13045  07E1  0842               	movf	(ldexp@newexp+1)^(0+256),w
 13046  07E2  00C4               	movwf	(??_ldexp^(0+256)+1)
 13047  07E3  0841               	movf	ldexp@newexp^(0+256),w
 13048  07E4  00C3               	movwf	??_ldexp^(0+256)
 13049  07E5  0D44               	rlf	(??_ldexp^(0+256)+1),w
 13050  07E6  0CC4               	rrf	(??_ldexp^(0+256)+1),f
 13051  07E7  0CC3               	rrf	??_ldexp^(0+256),f
 13052  07E8  0840               	movf	(ldexp@value^(0+256)+2),w
 13053  07E9  0643               	xorwf	??_ldexp^(0+256),w
 13054  07EA  3980               	andlw	-128
 13055  07EB  0643               	xorwf	??_ldexp^(0+256),w
 13056  07EC  00C0               	movwf	(ldexp@value^(0+256)+2)
 13057  07ED  0841               	movf	ldexp@newexp^(0+256),w
 13058  07EE  3901               	andlw	1
 13059  07EF  00C3               	movwf	??_ldexp^(0+256)
 13060  07F0  0CC3               	rrf	??_ldexp^(0+256),f
 13061  07F1  0CC3               	rrf	??_ldexp^(0+256),f
 13062  07F2  083F               	movf	(ldexp@value^(0+256)+1),w
 13063  07F3  0643               	xorwf	??_ldexp^(0+256),w
 13064  07F4  397F               	andlw	-129
 13065  07F5  0643               	xorwf	??_ldexp^(0+256),w
 13066  07F6  00BF               	movwf	(ldexp@value^(0+256)+1)
 13067  07F7  0008               	return
 13068  07F8                     __end_of_ldexp:	
 13069                           
 13070                           	psect	text29
 13071  20E1                     __ptext29:	
 13072 ;; *************** function ___lltoft *****************
 13073 ;; Defined at:
 13074 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;  c               4    8[BANK1 ] unsigned long 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  exp             1   13[BANK1 ] unsigned char 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  3    8[BANK1 ] float 
 13081 ;; Registers used:
 13082 ;;		wreg, status,2, status,0, pclath, cstack
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13088 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13089 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13090 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13091 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13092 ;;Total ram usage:        6 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    4
 13095 ;; This function calls:
 13096 ;;		___ftpack
 13097 ;; This function is called by:
 13098 ;;		_pow
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function ___lltoft
 13104  20E1                     ___lltoft:	
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 13108  20E1  308E               	movlw	142
 13109  20E2  0021               	movlb	1	; select bank1
 13110  20E3  00AC               	movwf	??___lltoft^(0+128)
 13111  20E4  082C               	movf	??___lltoft^(0+128),w
 13112  20E5  00AD               	movwf	___lltoft@exp^(0+128)
 13113  20E6                     l8180:	
 13114  20E6  30FF               	movlw	255
 13115  20E7  052B               	andwf	(___lltoft@c+3)^(0+128),w
 13116  20E8  1903               	btfsc	3,2
 13117  20E9  28F6               	goto	l8182
 13118  20EA  3001               	movlw	1
 13119  20EB                     u8585:	
 13120  20EB  36AB               	lsrf	(___lltoft@c+3)^(0+128),f
 13121  20EC  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
 13122  20ED  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
 13123  20EE  0CA8               	rrf	___lltoft@c^(0+128),f
 13124  20EF  0B89               	decfsz	9,f
 13125  20F0  28EB               	goto	u8585
 13126  20F1  3001               	movlw	1
 13127  20F2  00AC               	movwf	??___lltoft^(0+128)
 13128  20F3  082C               	movf	??___lltoft^(0+128),w
 13129  20F4  07AD               	addwf	___lltoft@exp^(0+128),f
 13130  20F5  28E6               	goto	l8180
 13131  20F6                     l8182:	
 13132  20F6  0828               	movf	___lltoft@c^(0+128),w
 13133  20F7  00A0               	movwf	___ftpack@arg^(0+128)
 13134  20F8  0829               	movf	(___lltoft@c+1)^(0+128),w
 13135  20F9  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 13136  20FA  082A               	movf	(___lltoft@c+2)^(0+128),w
 13137  20FB  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 13138  20FC  082D               	movf	___lltoft@exp^(0+128),w
 13139  20FD  00AC               	movwf	??___lltoft^(0+128)
 13140  20FE  082C               	movf	??___lltoft^(0+128),w
 13141  20FF  00A3               	movwf	___ftpack@exp^(0+128)
 13142  2100  01A4               	clrf	___ftpack@sign^(0+128)
 13143  2101  31A6  26B3         	fcall	___ftpack
 13144  2103  0021               	movlb	1	; select bank1
 13145  2104  0820               	movf	?___ftpack^(0+128),w
 13146  2105  00A8               	movwf	?___lltoft^(0+128)
 13147  2106  0821               	movf	(?___ftpack+1)^(0+128),w
 13148  2107  00A9               	movwf	(?___lltoft+1)^(0+128)
 13149  2108  0822               	movf	(?___ftpack+2)^(0+128),w
 13150  2109  00AA               	movwf	(?___lltoft+2)^(0+128)
 13151  210A  0008               	return
 13152  210B                     __end_of___lltoft:	
 13153                           
 13154                           	psect	text30
 13155  1ACD                     __ptext30:	
 13156 ;; *************** function _map *****************
 13157 ;; Defined at:
 13158 ;;		line 177 in file "user.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;  x               3   62[BANK1 ] float 
 13161 ;;  in_min          3   65[BANK1 ] float 
 13162 ;;  in_max          3   68[BANK1 ] float 
 13163 ;;  out_min         3   71[BANK1 ] float 
 13164 ;;  out_max         3   74[BANK1 ] float 
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;		None
 13167 ;; Return value:  Size  Location     Type
 13168 ;;                  3   62[BANK1 ] float 
 13169 ;; Registers used:
 13170 ;;		wreg, status,2, status,0, pclath, cstack
 13171 ;; Tracked objects:
 13172 ;;		On entry : 0/0
 13173 ;;		On exit  : 0/0
 13174 ;;		Unchanged: 0/0
 13175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13176 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13177 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13179 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13180 ;;Total ram usage:       18 bytes
 13181 ;; Hardware stack levels used:    1
 13182 ;; Hardware stack levels required when called:    5
 13183 ;; This function calls:
 13184 ;;		___ftadd
 13185 ;;		___ftdiv
 13186 ;;		___ftmul
 13187 ;;		___ftneg
 13188 ;; This function is called by:
 13189 ;;		_main
 13190 ;; This function uses a non-reentrant model
 13191 ;;
 13192                           
 13193                           
 13194                           ;psect for function _map
 13195  1ACD                     _map:	
 13196                           
 13197                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13198                           
 13199                           ;incstack = 0
 13200                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 13201  1ACD  0021               	movlb	1	; select bank1
 13202  1ACE  0864               	movf	map@in_max^(0+128),w
 13203  1ACF  00C1               	movwf	___ftadd@f1^(0+128)
 13204  1AD0  0865               	movf	(map@in_max+1)^(0+128),w
 13205  1AD1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13206  1AD2  0866               	movf	(map@in_max+2)^(0+128),w
 13207  1AD3  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13208  1AD4  0861               	movf	map@in_min^(0+128),w
 13209  1AD5  00BE               	movwf	___ftneg@f1^(0+128)
 13210  1AD6  0862               	movf	(map@in_min+1)^(0+128),w
 13211  1AD7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13212  1AD8  0863               	movf	(map@in_min+2)^(0+128),w
 13213  1AD9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13214  1ADA  31AF  2724  319A   	fcall	___ftneg
 13215  1ADD  0021               	movlb	1	; select bank1
 13216  1ADE  083E               	movf	?___ftneg^(0+128),w
 13217  1ADF  00C4               	movwf	___ftadd@f2^(0+128)
 13218  1AE0  083F               	movf	(?___ftneg+1)^(0+128),w
 13219  1AE1  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13220  1AE2  0840               	movf	(?___ftneg+2)^(0+128),w
 13221  1AE3  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13222  1AE4  3190  201F  319A   	fcall	___ftadd
 13223  1AE7  0021               	movlb	1	; select bank1
 13224  1AE8  0841               	movf	?___ftadd^(0+128),w
 13225  1AE9  00CE               	movwf	___ftdiv@f2^(0+128)
 13226  1AEA  0842               	movf	(?___ftadd+1)^(0+128),w
 13227  1AEB  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13228  1AEC  0843               	movf	(?___ftadd+2)^(0+128),w
 13229  1AED  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13230  1AEE  086A               	movf	map@out_max^(0+128),w
 13231  1AEF  00C1               	movwf	___ftadd@f1^(0+128)
 13232  1AF0  086B               	movf	(map@out_max+1)^(0+128),w
 13233  1AF1  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13234  1AF2  086C               	movf	(map@out_max+2)^(0+128),w
 13235  1AF3  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13236  1AF4  0867               	movf	map@out_min^(0+128),w
 13237  1AF5  00BE               	movwf	___ftneg@f1^(0+128)
 13238  1AF6  0868               	movf	(map@out_min+1)^(0+128),w
 13239  1AF7  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13240  1AF8  0869               	movf	(map@out_min+2)^(0+128),w
 13241  1AF9  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13242  1AFA  31AF  2724  319A   	fcall	___ftneg
 13243  1AFD  0021               	movlb	1	; select bank1
 13244  1AFE  083E               	movf	?___ftneg^(0+128),w
 13245  1AFF  00C4               	movwf	___ftadd@f2^(0+128)
 13246  1B00  083F               	movf	(?___ftneg+1)^(0+128),w
 13247  1B01  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13248  1B02  0840               	movf	(?___ftneg+2)^(0+128),w
 13249  1B03  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13250  1B04  3190  201F  319A   	fcall	___ftadd
 13251  1B07  0021               	movlb	1	; select bank1
 13252  1B08  0841               	movf	?___ftadd^(0+128),w
 13253  1B09  00AE               	movwf	___ftmul@f1^(0+128)
 13254  1B0A  0842               	movf	(?___ftadd+1)^(0+128),w
 13255  1B0B  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 13256  1B0C  0843               	movf	(?___ftadd+2)^(0+128),w
 13257  1B0D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 13258  1B0E  085E               	movf	map@x^(0+128),w
 13259  1B0F  00C1               	movwf	___ftadd@f1^(0+128)
 13260  1B10  085F               	movf	(map@x+1)^(0+128),w
 13261  1B11  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13262  1B12  0860               	movf	(map@x+2)^(0+128),w
 13263  1B13  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13264  1B14  0861               	movf	map@in_min^(0+128),w
 13265  1B15  00BE               	movwf	___ftneg@f1^(0+128)
 13266  1B16  0862               	movf	(map@in_min+1)^(0+128),w
 13267  1B17  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 13268  1B18  0863               	movf	(map@in_min+2)^(0+128),w
 13269  1B19  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 13270  1B1A  31AF  2724  319A   	fcall	___ftneg
 13271  1B1D  0021               	movlb	1	; select bank1
 13272  1B1E  083E               	movf	?___ftneg^(0+128),w
 13273  1B1F  00C4               	movwf	___ftadd@f2^(0+128)
 13274  1B20  083F               	movf	(?___ftneg+1)^(0+128),w
 13275  1B21  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13276  1B22  0840               	movf	(?___ftneg+2)^(0+128),w
 13277  1B23  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13278  1B24  3190  201F  319A   	fcall	___ftadd
 13279  1B27  0021               	movlb	1	; select bank1
 13280  1B28  0841               	movf	?___ftadd^(0+128),w
 13281  1B29  00B1               	movwf	___ftmul@f2^(0+128)
 13282  1B2A  0842               	movf	(?___ftadd+1)^(0+128),w
 13283  1B2B  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 13284  1B2C  0843               	movf	(?___ftadd+2)^(0+128),w
 13285  1B2D  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 13286  1B2E  319E  267B  319A   	fcall	___ftmul
 13287  1B31  0021               	movlb	1	; select bank1
 13288  1B32  082E               	movf	?___ftmul^(0+128),w
 13289  1B33  00D1               	movwf	___ftdiv@f1^(0+128)
 13290  1B34  082F               	movf	(?___ftmul+1)^(0+128),w
 13291  1B35  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13292  1B36  0830               	movf	(?___ftmul+2)^(0+128),w
 13293  1B37  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13294  1B38  319C  2474  319A   	fcall	___ftdiv
 13295  1B3B  0021               	movlb	1	; select bank1
 13296  1B3C  084E               	movf	?___ftdiv^(0+128),w
 13297  1B3D  00ED               	movwf	_map$2832^(0+128)
 13298  1B3E  084F               	movf	(?___ftdiv+1)^(0+128),w
 13299  1B3F  00EE               	movwf	(_map$2832+1)^(0+128)
 13300  1B40  0850               	movf	(?___ftdiv+2)^(0+128),w
 13301  1B41  00EF               	movwf	(_map$2832+2)^(0+128)
 13302                           
 13303                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 13304  1B42  0867               	movf	map@out_min^(0+128),w
 13305  1B43  00C1               	movwf	___ftadd@f1^(0+128)
 13306  1B44  0868               	movf	(map@out_min+1)^(0+128),w
 13307  1B45  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 13308  1B46  0869               	movf	(map@out_min+2)^(0+128),w
 13309  1B47  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 13310  1B48  086D               	movf	_map$2832^(0+128),w
 13311  1B49  00C4               	movwf	___ftadd@f2^(0+128)
 13312  1B4A  086E               	movf	(_map$2832+1)^(0+128),w
 13313  1B4B  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 13314  1B4C  086F               	movf	(_map$2832+2)^(0+128),w
 13315  1B4D  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 13316  1B4E  3190  201F         	fcall	___ftadd
 13317  1B50  0021               	movlb	1	; select bank1
 13318  1B51  0841               	movf	?___ftadd^(0+128),w
 13319  1B52  00DE               	movwf	?_map^(0+128)
 13320  1B53  0842               	movf	(?___ftadd+1)^(0+128),w
 13321  1B54  00DF               	movwf	(?_map+1)^(0+128)
 13322  1B55  0843               	movf	(?___ftadd+2)^(0+128),w
 13323  1B56  00E0               	movwf	(?_map+2)^(0+128)
 13324  1B57  0008               	return
 13325  1B58                     __end_of_map:	
 13326                           
 13327                           	psect	text31
 13328  2F4F                     __ptext31:	
 13329 ;; *************** function _initSwitchBypass *****************
 13330 ;; Defined at:
 13331 ;;		line 29 in file "SwitchBypass.c"
 13332 ;; Parameters:    Size  Location     Type
 13333 ;;		None
 13334 ;; Auto vars:     Size  Location     Type
 13335 ;;  initState       2   26[BANK1 ] int 
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  1    wreg      void 
 13338 ;; Registers used:
 13339 ;;		wreg, status,2, status,0, pclath, cstack
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13346 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13348 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13349 ;;Total ram usage:        2 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; Hardware stack levels required when called:    7
 13352 ;; This function calls:
 13353 ;;		_getSwitchBypassState
 13354 ;;		_setSwitchBypassState
 13355 ;; This function is called by:
 13356 ;;		_main
 13357 ;; This function uses a non-reentrant model
 13358 ;;
 13359                           
 13360                           
 13361                           ;psect for function _initSwitchBypass
 13362  2F4F                     _initSwitchBypass:	
 13363                           
 13364                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 13365                           
 13366                           ;incstack = 0
 13367                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 13368  2F4F  31AF  2717  31AF   	fcall	_getSwitchBypassState
 13369  2F52  0021               	movlb	1	; select bank1
 13370  2F53  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 13371  2F54  00BB               	movwf	(initSwitchBypass@initState+1)^(0+128)
 13372  2F55  0820               	movf	?_getSwitchBypassState^(0+128),w
 13373  2F56  00BA               	movwf	initSwitchBypass@initState^(0+128)
 13374                           
 13375                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 13376  2F57  083B               	movf	(initSwitchBypass@initState+1)^(0+128),w
 13377  2F58  00B7               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 13378  2F59  083A               	movf	initSwitchBypass@initState^(0+128),w
 13379  2F5A  00B6               	movwf	setSwitchBypassState@f_state^(0+128)
 13380  2F5B  31AF  27E4         	fcall	_setSwitchBypassState
 13381  2F5D  0008               	return
 13382  2F5E                     __end_of_initSwitchBypass:	
 13383                           
 13384                           	psect	text32
 13385  2FE4                     __ptext32:	
 13386 ;; *************** function _setSwitchBypassState *****************
 13387 ;; Defined at:
 13388 ;;		line 140 in file "SwitchBypass.c"
 13389 ;; Parameters:    Size  Location     Type
 13390 ;;  f_state         2   22[BANK1 ] int 
 13391 ;; Auto vars:     Size  Location     Type
 13392 ;;		None
 13393 ;; Return value:  Size  Location     Type
 13394 ;;                  1    wreg      void 
 13395 ;; Registers used:
 13396 ;;		wreg, status,2, status,0, pclath, cstack
 13397 ;; Tracked objects:
 13398 ;;		On entry : 0/0
 13399 ;;		On exit  : 0/0
 13400 ;;		Unchanged: 0/0
 13401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13402 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13404 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13405 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13406 ;;Total ram usage:        4 bytes
 13407 ;; Hardware stack levels used:    1
 13408 ;; Hardware stack levels required when called:    6
 13409 ;; This function calls:
 13410 ;;		_setSwitchBypassRelays
 13411 ;; This function is called by:
 13412 ;;		_initSwitchBypass
 13413 ;;		_updateSwitchBypass
 13414 ;; This function uses a non-reentrant model
 13415 ;;
 13416                           
 13417                           
 13418                           ;psect for function _setSwitchBypassState
 13419  2FE4                     _setSwitchBypassState:	
 13420                           
 13421                           ;SwitchBypass.c: 141: if (switchBypass_state == f_state) {return;}
 13422                           
 13423                           ;incstack = 0
 13424                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 13425  2FE4  0020               	movlb	0	; select bank0
 13426  2FE5  085F               	movf	_switchBypass_state,w
 13427  2FE6  0021               	movlb	1	; select bank1
 13428  2FE7  00B8               	movwf	??_setSwitchBypassState^(0+128)
 13429  2FE8  01B9               	clrf	(??_setSwitchBypassState^(0+128)+1)
 13430  2FE9  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13431  2FEA  0639               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 13432  2FEB  1D03               	skipz
 13433  2FEC  2FEF               	goto	u8785
 13434  2FED  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 13435  2FEE  0638               	xorwf	??_setSwitchBypassState^(0+128),w
 13436  2FEF                     u8785:	
 13437  2FEF  1903               	btfsc	3,2
 13438  2FF0  0008               	return
 13439                           
 13440                           ;SwitchBypass.c: 143: LATBbits.LATB2 = f_state;
 13441  2FF1  0C36               	rrf	setSwitchBypassState@f_state^(0+128),w
 13442  2FF2  0022               	movlb	2	; select bank2
 13443  2FF3  1C03               	skipc
 13444  2FF4  110D               	bcf	13,2	;volatile
 13445  2FF5  1803               	skipnc
 13446  2FF6  150D               	bsf	13,2	;volatile
 13447                           
 13448                           ;SwitchBypass.c: 144: LATBbits.LATB3 = 0;
 13449  2FF7  118D               	bcf	13,3	;volatile
 13450                           
 13451                           ;SwitchBypass.c: 145: setSwitchBypassRelays(f_state);
 13452  2FF8  0021               	movlb	1	; select bank1
 13453  2FF9  0837               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 13454  2FFA  00B3               	movwf	(setSwitchBypassRelays@f_state+1)^(0+128)
 13455  2FFB  0836               	movf	setSwitchBypassState@f_state^(0+128),w
 13456  2FFC  00B2               	movwf	setSwitchBypassRelays@f_state^(0+128)
 13457  2FFD  31A2  2228         	fcall	_setSwitchBypassRelays
 13458  2FFF  0008               	return
 13459  3000                     __end_of_setSwitchBypassState:	
 13460                           
 13461                           	psect	text33
 13462  2228                     __ptext33:	
 13463 ;; *************** function _setSwitchBypassRelays *****************
 13464 ;; Defined at:
 13465 ;;		line 148 in file "SwitchBypass.c"
 13466 ;; Parameters:    Size  Location     Type
 13467 ;;  f_state         2   18[BANK1 ] int 
 13468 ;; Auto vars:     Size  Location     Type
 13469 ;;		None
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      void 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0, pclath, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13479 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13481 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13482 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13483 ;;Total ram usage:        4 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    5
 13486 ;; This function calls:
 13487 ;;		_updateSwitchBypassState
 13488 ;;		_wait_ms
 13489 ;; This function is called by:
 13490 ;;		_updateSwitchBypass
 13491 ;;		_setSwitchBypassState
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           
 13496                           ;psect for function _setSwitchBypassRelays
 13497  2228                     _setSwitchBypassRelays:	
 13498                           
 13499                           ;SwitchBypass.c: 149: switchBypass_state = f_state;
 13500                           
 13501                           ;incstack = 0
 13502                           ; Regs used in _setSwitchBypassRelays: [wreg+status,2+status,0+pclath+cstack]
 13503  2228  0021               	movlb	1	; select bank1
 13504  2229  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 13505  222A  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 13506  222B  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 13507  222C  0020               	movlb	0	; select bank0
 13508  222D  00DF               	movwf	_switchBypass_state
 13509                           
 13510                           ;SwitchBypass.c: 150: LATGbits.LATG2 = f_state;
 13511  222E  0021               	movlb	1	; select bank1
 13512  222F  0C32               	rrf	setSwitchBypassRelays@f_state^(0+128),w
 13513  2230  0027               	movlb	7	; select bank7
 13514  2231  1C03               	skipc
 13515  2232  110D               	bcf	13,2	;volatile
 13516  2233  1803               	skipnc
 13517  2234  150D               	bsf	13,2	;volatile
 13518                           
 13519                           ;SwitchBypass.c: 151: LATGbits.LATG1 = !f_state;
 13520  2235  0021               	movlb	1	; select bank1
 13521  2236  0832               	movf	setSwitchBypassRelays@f_state^(0+128),w
 13522  2237  0433               	iorwf	(setSwitchBypassRelays@f_state+1)^(0+128),w
 13523  2238  1D03               	btfss	3,2
 13524  2239  2A3D               	goto	u8540
 13525  223A  0027               	movlb	7	; select bank7
 13526  223B  148D               	bsf	13,1	;volatile
 13527  223C  2A3F               	goto	l8140
 13528  223D                     u8540:	
 13529  223D  0027               	movlb	7	; select bank7
 13530  223E  108D               	bcf	13,1	;volatile
 13531  223F                     l8140:	
 13532                           
 13533                           ;SwitchBypass.c: 153: wait_ms(20);
 13534  223F  3014               	movlw	20
 13535  2240  0021               	movlb	1	; select bank1
 13536  2241  00AC               	movwf	wait_ms@timeSec^(0+128)
 13537  2242  3000               	movlw	0
 13538  2243  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13539  2244  31A1  21F6  31A2   	fcall	_wait_ms
 13540                           
 13541                           ;SwitchBypass.c: 155: LATGbits.LATG2 = 0;
 13542  2247  0027               	movlb	7	; select bank7
 13543  2248  110D               	bcf	13,2	;volatile
 13544                           
 13545                           ;SwitchBypass.c: 156: LATGbits.LATG1 = 0;
 13546  2249  108D               	bcf	13,1	;volatile
 13547                           
 13548                           ;SwitchBypass.c: 158: updateSwitchBypassState(switchBypass_state);
 13549  224A  0020               	movlb	0	; select bank0
 13550  224B  085F               	movf	_switchBypass_state,w
 13551  224C  0021               	movlb	1	; select bank1
 13552  224D  00B4               	movwf	??_setSwitchBypassRelays^(0+128)
 13553  224E  01B5               	clrf	(??_setSwitchBypassRelays^(0+128)+1)
 13554  224F  0834               	movf	??_setSwitchBypassRelays^(0+128),w
 13555  2250  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 13556  2251  0835               	movf	(??_setSwitchBypassRelays+1)^(0+128),w
 13557  2252  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 13558  2253  31A0  2000  31A2   	fcall	_updateSwitchBypassState
 13559                           
 13560                           ;SwitchBypass.c: 159: wait_ms(20);
 13561  2256  3014               	movlw	20
 13562  2257  0021               	movlb	1	; select bank1
 13563  2258  00AC               	movwf	wait_ms@timeSec^(0+128)
 13564  2259  3000               	movlw	0
 13565  225A  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 13566  225B  31A1  21F6         	fcall	_wait_ms
 13567  225D  0008               	return
 13568  225E                     __end_of_setSwitchBypassRelays:	
 13569                           
 13570                           	psect	text34
 13571  21F6                     __ptext34:	
 13572 ;; *************** function _wait_ms *****************
 13573 ;; Defined at:
 13574 ;;		line 23 in file "system.c"
 13575 ;; Parameters:    Size  Location     Type
 13576 ;;  timeSec         2   12[BANK1 ] unsigned int 
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;  timemsl         4   14[BANK1 ] long 
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  1    wreg      void 
 13581 ;; Registers used:
 13582 ;;		wreg, status,2, status,0, pclath, cstack
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13588 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13589 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13591 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13592 ;;Total ram usage:        6 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; Hardware stack levels required when called:    4
 13595 ;; This function calls:
 13596 ;;		___lmul
 13597 ;; This function is called by:
 13598 ;;		_ring_tactiles
 13599 ;;		_solidring_tactiles
 13600 ;;		_setSwitchBypassRelays
 13601 ;;		_setDoublePressState
 13602 ;;		_showError_Alternating
 13603 ;;		_show_error
 13604 ;;		_show_cancel
 13605 ;;		_star_tactiles
 13606 ;;		_read_bottom_tactile
 13607 ;;		_read_top_tactile
 13608 ;;		_initExpModeState
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function _wait_ms
 13614  21F6                     _wait_ms:	
 13615                           
 13616                           ;system.c: 25: long timemsl = 0;
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 13620  21F6  3000               	movlw	0
 13621  21F7  0021               	movlb	1	; select bank1
 13622  21F8  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13623  21F9  3000               	movlw	0
 13624  21FA  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13625  21FB  3000               	movlw	0
 13626  21FC  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13627  21FD  3000               	movlw	0
 13628  21FE  00AE               	movwf	wait_ms@timemsl^(0+128)
 13629                           
 13630                           ;system.c: 26: timemsl = timeSec * 1000l;
 13631  21FF  082C               	movf	wait_ms@timeSec^(0+128),w
 13632  2200  00A0               	movwf	___lmul@multiplier^(0+128)
 13633  2201  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 13634  2202  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 13635  2203  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 13636  2204  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 13637  2205  3000               	movlw	0
 13638  2206  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 13639  2207  3000               	movlw	0
 13640  2208  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 13641  2209  3003               	movlw	3
 13642  220A  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 13643  220B  30E8               	movlw	232
 13644  220C  00A4               	movwf	___lmul@multiplicand^(0+128)
 13645  220D  31A1  21C6  31A1   	fcall	___lmul
 13646  2210  0021               	movlb	1	; select bank1
 13647  2211  0823               	movf	(?___lmul+3)^(0+128),w
 13648  2212  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 13649  2213  0822               	movf	(?___lmul+2)^(0+128),w
 13650  2214  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 13651  2215  0821               	movf	(?___lmul+1)^(0+128),w
 13652  2216  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 13653  2217  0820               	movf	?___lmul^(0+128),w
 13654  2218  00AE               	movwf	wait_ms@timemsl^(0+128)
 13655  2219                     l377:	
 13656                           ;system.c: 27: for( ; timemsl; timemsl--);
 13657                           
 13658  2219  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 13659  221A  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 13660  221B  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 13661  221C  042E               	iorwf	wait_ms@timemsl^(0+128),w
 13662  221D  1903               	btfsc	3,2
 13663  221E  0008               	return
 13664  221F  30FF               	movlw	255
 13665  2220  07AE               	addwf	wait_ms@timemsl^(0+128),f
 13666  2221  30FF               	movlw	255
 13667  2222  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 13668  2223  30FF               	movlw	255
 13669  2224  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 13670  2225  30FF               	movlw	255
 13671  2226  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 13672  2227  2A19               	goto	l377
 13673  2228                     __end_of_wait_ms:	
 13674                           
 13675                           	psect	text35
 13676  21C6                     __ptext35:	
 13677 ;; *************** function ___lmul *****************
 13678 ;; Defined at:
 13679 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;  multiplier      4    0[BANK1 ] unsigned long 
 13682 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 13683 ;; Auto vars:     Size  Location     Type
 13684 ;;  product         4    8[BANK1 ] unsigned long 
 13685 ;; Return value:  Size  Location     Type
 13686 ;;                  4    0[BANK1 ] unsigned long 
 13687 ;; Registers used:
 13688 ;;		wreg, status,2, status,0
 13689 ;; Tracked objects:
 13690 ;;		On entry : 0/0
 13691 ;;		On exit  : 0/0
 13692 ;;		Unchanged: 0/0
 13693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13694 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13695 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13697 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13698 ;;Total ram usage:       12 bytes
 13699 ;; Hardware stack levels used:    1
 13700 ;; Hardware stack levels required when called:    3
 13701 ;; This function calls:
 13702 ;;		Nothing
 13703 ;; This function is called by:
 13704 ;;		_wait_ms
 13705 ;; This function uses a non-reentrant model
 13706 ;;
 13707                           
 13708                           
 13709                           ;psect for function ___lmul
 13710  21C6                     ___lmul:	
 13711                           
 13712                           ;incstack = 0
 13713                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13714  21C6  3000               	movlw	0
 13715  21C7  0021               	movlb	1	; select bank1
 13716  21C8  00AB               	movwf	(___lmul@product+3)^(0+128)
 13717  21C9  3000               	movlw	0
 13718  21CA  00AA               	movwf	(___lmul@product+2)^(0+128)
 13719  21CB  3000               	movlw	0
 13720  21CC  00A9               	movwf	(___lmul@product+1)^(0+128)
 13721  21CD  3000               	movlw	0
 13722  21CE  00A8               	movwf	___lmul@product^(0+128)
 13723  21CF                     l7586:	
 13724  21CF  1C20               	btfss	___lmul@multiplier^(0+128),0
 13725  21D0  29D9               	goto	l7590
 13726  21D1  0824               	movf	___lmul@multiplicand^(0+128),w
 13727  21D2  07A8               	addwf	___lmul@product^(0+128),f
 13728  21D3  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 13729  21D4  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 13730  21D5  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 13731  21D6  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 13732  21D7  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 13733  21D8  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 13734  21D9                     l7590:	
 13735  21D9  3001               	movlw	1
 13736  21DA                     u7575:	
 13737  21DA  35A4               	lslf	___lmul@multiplicand^(0+128),f
 13738  21DB  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 13739  21DC  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 13740  21DD  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 13741  21DE  0B89               	decfsz	9,f
 13742  21DF  29DA               	goto	u7575
 13743  21E0  3001               	movlw	1
 13744  21E1                     u7585:	
 13745  21E1  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 13746  21E2  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 13747  21E3  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 13748  21E4  0CA0               	rrf	___lmul@multiplier^(0+128),f
 13749  21E5  0B89               	decfsz	9,f
 13750  21E6  29E1               	goto	u7585
 13751  21E7  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 13752  21E8  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 13753  21E9  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 13754  21EA  0420               	iorwf	___lmul@multiplier^(0+128),w
 13755  21EB  1D03               	skipz
 13756  21EC  29CF               	goto	l7586
 13757  21ED  082B               	movf	(___lmul@product+3)^(0+128),w
 13758  21EE  00A3               	movwf	(?___lmul+3)^(0+128)
 13759  21EF  082A               	movf	(___lmul@product+2)^(0+128),w
 13760  21F0  00A2               	movwf	(?___lmul+2)^(0+128)
 13761  21F1  0829               	movf	(___lmul@product+1)^(0+128),w
 13762  21F2  00A1               	movwf	(?___lmul+1)^(0+128)
 13763  21F3  0828               	movf	___lmul@product^(0+128),w
 13764  21F4  00A0               	movwf	?___lmul^(0+128)
 13765  21F5  0008               	return
 13766  21F6                     __end_of___lmul:	
 13767                           
 13768                           	psect	text36
 13769  2000                     __ptext36:	
 13770 ;; *************** function _updateSwitchBypassState *****************
 13771 ;; Defined at:
 13772 ;;		line 96 in file "state_manager.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  state           2    0[BANK1 ] int 
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;		None
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  1    wreg      void 
 13779 ;; Registers used:
 13780 ;;		None
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13786 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13789 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13790 ;;Total ram usage:        2 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    3
 13793 ;; This function calls:
 13794 ;;		Nothing
 13795 ;; This function is called by:
 13796 ;;		_setSwitchBypassRelays
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           
 13801                           ;psect for function _updateSwitchBypassState
 13802  2000                     _updateSwitchBypassState:	
 13803                           
 13804                           ;incstack = 0
 13805                           ; Regs used in _updateSwitchBypassState: []
 13806  2000  0008               	return
 13807  2001                     __end_of_updateSwitchBypassState:	
 13808                           
 13809                           	psect	text37
 13810  2F17                     __ptext37:	
 13811 ;; *************** function _getSwitchBypassState *****************
 13812 ;; Defined at:
 13813 ;;		line 103 in file "state_manager.c"
 13814 ;; Parameters:    Size  Location     Type
 13815 ;;		None
 13816 ;; Auto vars:     Size  Location     Type
 13817 ;;		None
 13818 ;; Return value:  Size  Location     Type
 13819 ;;                  2    0[BANK1 ] int 
 13820 ;; Registers used:
 13821 ;;		status,2
 13822 ;; Tracked objects:
 13823 ;;		On entry : 0/0
 13824 ;;		On exit  : 0/0
 13825 ;;		Unchanged: 0/0
 13826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13827 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13830 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13831 ;;Total ram usage:        2 bytes
 13832 ;; Hardware stack levels used:    1
 13833 ;; Hardware stack levels required when called:    3
 13834 ;; This function calls:
 13835 ;;		Nothing
 13836 ;; This function is called by:
 13837 ;;		_initSwitchBypass
 13838 ;; This function uses a non-reentrant model
 13839 ;;
 13840                           
 13841                           
 13842                           ;psect for function _getSwitchBypassState
 13843  2F17                     _getSwitchBypassState:	
 13844                           
 13845                           ;state_manager.c: 108: return 0;
 13846                           
 13847                           ;incstack = 0
 13848                           ; Regs used in _getSwitchBypassState: [status,2]
 13849  2F17  0021               	movlb	1	; select bank1
 13850  2F18  01A0               	clrf	?_getSwitchBypassState^(0+128)
 13851  2F19  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 13852  2F1A  0008               	return
 13853  2F1B                     __end_of_getSwitchBypassState:	
 13854                           
 13855                           	psect	text38
 13856  260C                     __ptext38:	
 13857 ;; *************** function _getModulationDelayTime *****************
 13858 ;; Defined at:
 13859 ;;		line 35 in file "modulation.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;		None
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;  subDiv          2   14[BANK2 ] int 
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1    wreg      void 
 13866 ;; Registers used:
 13867 ;;		wreg, status,2, status,0, pclath, cstack
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13874 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13876 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13877 ;;Total ram usage:        2 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    5
 13880 ;; This function calls:
 13881 ;;		___altoft
 13882 ;;		___awtoft
 13883 ;;		___ftdiv
 13884 ;;		___fttol
 13885 ;;		_getModulationSubdivision
 13886 ;; This function is called by:
 13887 ;;		_main
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           
 13892                           ;psect for function _getModulationDelayTime
 13893  260C                     _getModulationDelayTime:	
 13894                           
 13895                           ;modulation.c: 36: adjust_mod_delay = 0;
 13896                           
 13897                           ;incstack = 0
 13898                           ; Regs used in _getModulationDelayTime: [wreg+status,2+status,0+pclath+cstack]
 13899  260C  0023               	movlb	3	; select bank3
 13900  260D  01BE               	clrf	_adjust_mod_delay^(0+384)
 13901                           
 13902                           ;modulation.c: 37: int subDiv = getModulationSubdivision();
 13903  260E  31A1  2196  31A6   	fcall	_getModulationSubdivision
 13904  2611  0021               	movlb	1	; select bank1
 13905  2612  0821               	movf	(?_getModulationSubdivision+1)^(0+128),w
 13906  2613  0022               	movlb	2	; select bank2
 13907  2614  00AF               	movwf	(getModulationDelayTime@subDiv+1)^(0+256)
 13908  2615  0021               	movlb	1	; select bank1
 13909  2616  0820               	movf	?_getModulationSubdivision^(0+128),w
 13910  2617  0022               	movlb	2	; select bank2
 13911  2618  00AE               	movwf	getModulationDelayTime@subDiv^(0+256)
 13912                           
 13913                           ;modulation.c: 38: mod_delay_time = (int)((float)delay_time/(float)subDiv);
 13914  2619  0020               	movlb	0	; select bank0
 13915  261A  0854               	movf	_delay_time+3,w	;volatile
 13916  261B  0021               	movlb	1	; select bank1
 13917  261C  00AB               	movwf	(___altoft@c+3)^(0+128)
 13918  261D  0020               	movlb	0	; select bank0
 13919  261E  0853               	movf	_delay_time+2,w	;volatile
 13920  261F  0021               	movlb	1	; select bank1
 13921  2620  00AA               	movwf	(___altoft@c+2)^(0+128)
 13922  2621  0020               	movlb	0	; select bank0
 13923  2622  0852               	movf	_delay_time+1,w	;volatile
 13924  2623  0021               	movlb	1	; select bank1
 13925  2624  00A9               	movwf	(___altoft@c+1)^(0+128)
 13926  2625  0020               	movlb	0	; select bank0
 13927  2626  0851               	movf	_delay_time,w	;volatile
 13928  2627  0021               	movlb	1	; select bank1
 13929  2628  00A8               	movwf	___altoft@c^(0+128)
 13930  2629  31A2  22D3  31A6   	fcall	___altoft
 13931  262C  0021               	movlb	1	; select bank1
 13932  262D  0828               	movf	?___altoft^(0+128),w
 13933  262E  00D1               	movwf	___ftdiv@f1^(0+128)
 13934  262F  0829               	movf	(?___altoft+1)^(0+128),w
 13935  2630  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 13936  2631  082A               	movf	(?___altoft+2)^(0+128),w
 13937  2632  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 13938  2633  0022               	movlb	2	; select bank2
 13939  2634  082F               	movf	(getModulationDelayTime@subDiv+1)^(0+256),w
 13940  2635  0021               	movlb	1	; select bank1
 13941  2636  00A9               	movwf	(___awtoft@c+1)^(0+128)
 13942  2637  0022               	movlb	2	; select bank2
 13943  2638  082E               	movf	getModulationDelayTime@subDiv^(0+256),w
 13944  2639  0021               	movlb	1	; select bank1
 13945  263A  00A8               	movwf	___awtoft@c^(0+128)
 13946  263B  31A0  2076  31A6   	fcall	___awtoft
 13947  263E  0021               	movlb	1	; select bank1
 13948  263F  0828               	movf	?___awtoft^(0+128),w
 13949  2640  00CE               	movwf	___ftdiv@f2^(0+128)
 13950  2641  0829               	movf	(?___awtoft+1)^(0+128),w
 13951  2642  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 13952  2643  082A               	movf	(?___awtoft+2)^(0+128),w
 13953  2644  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 13954  2645  319C  2474  31A6   	fcall	___ftdiv
 13955  2648  0021               	movlb	1	; select bank1
 13956  2649  084E               	movf	?___ftdiv^(0+128),w
 13957  264A  0022               	movlb	2	; select bank2
 13958  264B  00A0               	movwf	___fttol@f1^(0+256)
 13959  264C  0021               	movlb	1	; select bank1
 13960  264D  084F               	movf	(?___ftdiv+1)^(0+128),w
 13961  264E  0022               	movlb	2	; select bank2
 13962  264F  00A1               	movwf	(___fttol@f1+1)^(0+256)
 13963  2650  0021               	movlb	1	; select bank1
 13964  2651  0850               	movf	(?___ftdiv+2)^(0+128),w
 13965  2652  0022               	movlb	2	; select bank2
 13966  2653  00A2               	movwf	(___fttol@f1+2)^(0+256)
 13967  2654  319A  2246         	fcall	___fttol
 13968  2656  0022               	movlb	2	; select bank2
 13969  2657  0821               	movf	(?___fttol^(0+256)+1),w
 13970  2658  0023               	movlb	3	; select bank3
 13971  2659  00DB               	movwf	(_mod_delay_time+1)^(0+384)
 13972  265A  0022               	movlb	2	; select bank2
 13973  265B  0820               	movf	?___fttol^(0+256),w
 13974  265C  0023               	movlb	3	; select bank3
 13975  265D  00DA               	movwf	_mod_delay_time^(0+384)
 13976  265E  0008               	return
 13977  265F                     __end_of_getModulationDelayTime:	
 13978                           
 13979                           	psect	text39
 13980  2196                     __ptext39:	
 13981 ;; *************** function _getModulationSubdivision *****************
 13982 ;; Defined at:
 13983 ;;		line 26 in file "modulation.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;		None
 13986 ;; Auto vars:     Size  Location     Type
 13987 ;;		None
 13988 ;; Return value:  Size  Location     Type
 13989 ;;                  2    0[BANK1 ] int 
 13990 ;; Registers used:
 13991 ;;		wreg, status,2, status,0
 13992 ;; Tracked objects:
 13993 ;;		On entry : 0/0
 13994 ;;		On exit  : 0/0
 13995 ;;		Unchanged: 0/0
 13996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13997 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14000 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14001 ;;Total ram usage:        2 bytes
 14002 ;; Hardware stack levels used:    1
 14003 ;; Hardware stack levels required when called:    3
 14004 ;; This function calls:
 14005 ;;		Nothing
 14006 ;; This function is called by:
 14007 ;;		_getModulationDelayTime
 14008 ;;		_updateModulationArray
 14009 ;; This function uses a non-reentrant model
 14010 ;;
 14011                           
 14012                           
 14013                           ;psect for function _getModulationSubdivision
 14014  2196                     _getModulationSubdivision:	
 14015                           
 14016                           ;modulation.c: 27: if (delay_time >= 2400) {
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in _getModulationSubdivision: [wreg+status,2+status,0]
 14020  2196  0020               	movlb	0	; select bank0
 14021  2197  1BD4               	btfsc	_delay_time+3,7	;volatile
 14022  2198  29AB               	goto	l8270
 14023  2199  0854               	movf	_delay_time+3,w	;volatile
 14024  219A  1D03               	btfss	3,2
 14025  219B  29A5               	goto	l8264
 14026  219C  0853               	movf	_delay_time+2,w	;volatile
 14027  219D  1D03               	btfss	3,2
 14028  219E  29A5               	goto	l8264
 14029  219F  3060               	movlw	96
 14030  21A0  0251               	subwf	_delay_time,w	;volatile
 14031  21A1  3009               	movlw	9
 14032  21A2  3B52               	subwfb	_delay_time+1,w	;volatile
 14033  21A3  1C03               	btfss	3,0
 14034  21A4  29AB               	goto	l8270
 14035  21A5                     l8264:	
 14036                           
 14037                           ;modulation.c: 28: return 120;
 14038  21A5  3078               	movlw	120
 14039  21A6  0021               	movlb	1	; select bank1
 14040  21A7  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14041  21A8  3000               	movlw	0
 14042  21A9  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14043                           
 14044                           ;modulation.c: 29: } else if (delay_time >= 600) {
 14045  21AA  0008               	return
 14046  21AB                     l8270:	
 14047  21AB  0020               	movlb	0	; select bank0
 14048  21AC  1BD4               	btfsc	_delay_time+3,7	;volatile
 14049  21AD  29C0               	goto	l8278
 14050  21AE  0854               	movf	_delay_time+3,w	;volatile
 14051  21AF  1D03               	btfss	3,2
 14052  21B0  29BA               	goto	l8272
 14053  21B1  0853               	movf	_delay_time+2,w	;volatile
 14054  21B2  1D03               	btfss	3,2
 14055  21B3  29BA               	goto	l8272
 14056  21B4  3058               	movlw	88
 14057  21B5  0251               	subwf	_delay_time,w	;volatile
 14058  21B6  3002               	movlw	2
 14059  21B7  3B52               	subwfb	_delay_time+1,w	;volatile
 14060  21B8  1C03               	btfss	3,0
 14061  21B9  29C0               	goto	l8278
 14062  21BA                     l8272:	
 14063                           
 14064                           ;modulation.c: 30: return 60;
 14065  21BA  303C               	movlw	60
 14066  21BB  0021               	movlb	1	; select bank1
 14067  21BC  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14068  21BD  3000               	movlw	0
 14069  21BE  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14070                           
 14071                           ;modulation.c: 31: } else {
 14072  21BF  0008               	return
 14073  21C0                     l8278:	
 14074                           
 14075                           ;modulation.c: 32: return 30;
 14076  21C0  301E               	movlw	30
 14077  21C1  0021               	movlb	1	; select bank1
 14078  21C2  00A0               	movwf	?_getModulationSubdivision^(0+128)
 14079  21C3  3000               	movlw	0
 14080  21C4  00A1               	movwf	(?_getModulationSubdivision^(0+128)+1)
 14081  21C5  0008               	return
 14082  21C6                     __end_of_getModulationSubdivision:	
 14083                           
 14084                           	psect	text40
 14085  183C                     __ptext40:	
 14086 ;; *************** function _calcSinArray *****************
 14087 ;; Defined at:
 14088 ;;		line 18 in file "modulation.c"
 14089 ;; Parameters:    Size  Location     Type
 14090 ;;		None
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;  tmpVal          3   48[BANK2 ] int 
 14093 ;;  iAngle          1   51[BANK2 ] unsigned char 
 14094 ;; Return value:  Size  Location     Type
 14095 ;;                  1    wreg      void 
 14096 ;; Registers used:
 14097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14098 ;; Tracked objects:
 14099 ;;		On entry : 0/0
 14100 ;;		On exit  : 0/0
 14101 ;;		Unchanged: 0/0
 14102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14104 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14105 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14106 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14107 ;;Total ram usage:        8 bytes
 14108 ;; Hardware stack levels used:    1
 14109 ;; Hardware stack levels required when called:    7
 14110 ;; This function calls:
 14111 ;;		___awtoft
 14112 ;;		___ftdiv
 14113 ;;		___ftmul
 14114 ;;		___wmul
 14115 ;;		_sin
 14116 ;; This function is called by:
 14117 ;;		_main
 14118 ;; This function uses a non-reentrant model
 14119 ;;
 14120                           
 14121                           
 14122                           ;psect for function _calcSinArray
 14123  183C                     _calcSinArray:	
 14124                           
 14125                           ;modulation.c: 19: for (char iAngle = 0; iAngle < 120; iAngle++) {
 14126                           
 14127                           ;incstack = 0
 14128                           ; Regs used in _calcSinArray: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14129  183C  0022               	movlb	2	; select bank2
 14130  183D  01D3               	clrf	calcSinArray@iAngle^(0+256)
 14131  183E                     L18:	
 14132  183E  3078               	movlw	120
 14133  183F  0253               	subwf	calcSinArray@iAngle^(0+256),w
 14134  1840  1803               	btfsc	3,0
 14135  1841  0008               	return
 14136                           
 14137                           ;modulation.c: 20: double tmpVal = 3 * iAngle * 3.14159265358979323846/180.0;
 14138  1842  3000               	movlw	0
 14139  1843  0021               	movlb	1	; select bank1
 14140  1844  00CE               	movwf	___ftdiv@f2^(0+128)
 14141  1845  3034               	movlw	52
 14142  1846  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14143  1847  3043               	movlw	67
 14144  1848  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14145  1849  3010               	movlw	16
 14146  184A  00AE               	movwf	___ftmul@f1^(0+128)
 14147  184B  3049               	movlw	73
 14148  184C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14149  184D  3040               	movlw	64
 14150  184E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14151  184F  0022               	movlb	2	; select bank2
 14152  1850  0853               	movf	calcSinArray@iAngle^(0+256),w
 14153  1851  00CC               	movwf	??_calcSinArray^(0+256)
 14154  1852  01CD               	clrf	(??_calcSinArray^(0+256)+1)
 14155  1853  084C               	movf	??_calcSinArray^(0+256),w
 14156  1854  00AE               	movwf	___wmul@multiplier^(0+256)
 14157  1855  084D               	movf	(??_calcSinArray+1)^(0+256),w
 14158  1856  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14159  1857  3003               	movlw	3
 14160  1858  00B0               	movwf	___wmul@multiplicand^(0+256)
 14161  1859  3000               	movlw	0
 14162  185A  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14163  185B  31AF  27C8  3198   	fcall	___wmul
 14164  185E  0022               	movlb	2	; select bank2
 14165  185F  082F               	movf	(?___wmul+1)^(0+256),w
 14166  1860  0021               	movlb	1	; select bank1
 14167  1861  00A9               	movwf	(___awtoft@c+1)^(0+128)
 14168  1862  0022               	movlb	2	; select bank2
 14169  1863  082E               	movf	?___wmul^(0+256),w
 14170  1864  0021               	movlb	1	; select bank1
 14171  1865  00A8               	movwf	___awtoft@c^(0+128)
 14172  1866  31A0  2076  3198   	fcall	___awtoft
 14173  1869  0021               	movlb	1	; select bank1
 14174  186A  0828               	movf	?___awtoft^(0+128),w
 14175  186B  00B1               	movwf	___ftmul@f2^(0+128)
 14176  186C  0829               	movf	(?___awtoft+1)^(0+128),w
 14177  186D  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14178  186E  082A               	movf	(?___awtoft+2)^(0+128),w
 14179  186F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14180  1870  319E  267B  3198   	fcall	___ftmul
 14181  1873  0021               	movlb	1	; select bank1
 14182  1874  082E               	movf	?___ftmul^(0+128),w
 14183  1875  00D1               	movwf	___ftdiv@f1^(0+128)
 14184  1876  082F               	movf	(?___ftmul+1)^(0+128),w
 14185  1877  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14186  1878  0830               	movf	(?___ftmul+2)^(0+128),w
 14187  1879  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14188  187A  319C  2474  3198   	fcall	___ftdiv
 14189  187D  0021               	movlb	1	; select bank1
 14190  187E  084E               	movf	?___ftdiv^(0+128),w
 14191  187F  0022               	movlb	2	; select bank2
 14192  1880  00D0               	movwf	calcSinArray@tmpVal^(0+256)
 14193  1881  0021               	movlb	1	; select bank1
 14194  1882  084F               	movf	(?___ftdiv+1)^(0+128),w
 14195  1883  0022               	movlb	2	; select bank2
 14196  1884  00D1               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14197  1885  0021               	movlb	1	; select bank1
 14198  1886  0850               	movf	(?___ftdiv+2)^(0+128),w
 14199  1887  0022               	movlb	2	; select bank2
 14200  1888  00D2               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14201                           
 14202                           ;modulation.c: 21: tmpVal = sin(tmpVal);
 14203  1889  0850               	movf	calcSinArray@tmpVal^(0+256),w
 14204  188A  00BE               	movwf	sin@f^(0+256)
 14205  188B  0851               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14206  188C  00BF               	movwf	(sin@f+1)^(0+256)
 14207  188D  0852               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14208  188E  00C0               	movwf	(sin@f+2)^(0+256)
 14209  188F  3188  202E  3198   	fcall	_sin
 14210  1892  0022               	movlb	2	; select bank2
 14211  1893  083E               	movf	?_sin^(0+256),w
 14212  1894  00D0               	movwf	calcSinArray@tmpVal^(0+256)
 14213  1895  083F               	movf	(?_sin+1)^(0+256),w
 14214  1896  00D1               	movwf	(calcSinArray@tmpVal+1)^(0+256)
 14215  1897  0840               	movf	(?_sin+2)^(0+256),w
 14216  1898  00D2               	movwf	(calcSinArray@tmpVal+2)^(0+256)
 14217                           
 14218                           ;modulation.c: 22: sinArray[iAngle] = tmpVal;
 14219  1899  0853               	movf	calcSinArray@iAngle^(0+256),w
 14220  189A  00CC               	movwf	??_calcSinArray^(0+256)
 14221  189B  01CD               	clrf	(??_calcSinArray^(0+256)+1)
 14222  189C  084C               	movf	??_calcSinArray^(0+256),w
 14223  189D  00AE               	movwf	___wmul@multiplier^(0+256)
 14224  189E  084D               	movf	(??_calcSinArray+1)^(0+256),w
 14225  189F  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 14226  18A0  3003               	movlw	3
 14227  18A1  00B0               	movwf	___wmul@multiplicand^(0+256)
 14228  18A2  3000               	movlw	0
 14229  18A3  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 14230  18A4  31AF  27C8  3198   	fcall	___wmul
 14231  18A7  3082               	movlw	130
 14232  18A8  0022               	movlb	2	; select bank2
 14233  18A9  00CE               	movwf	(??_calcSinArray+2)^(0+256)
 14234  18AA  3024               	movlw	36
 14235  18AB  00CF               	movwf	((??_calcSinArray+2)^(0+256)+1)
 14236  18AC  082E               	movf	?___wmul^(0+256),w
 14237  18AD  074E               	addwf	(??_calcSinArray+2)^(0+256),w
 14238  18AE  0086               	movwf	6
 14239  18AF  082F               	movf	(?___wmul+1)^(0+256),w
 14240  18B0  3D4F               	addwfc	(??_calcSinArray+3)^(0+256),w
 14241  18B1  0087               	movwf	7
 14242  18B2  0850               	movf	calcSinArray@tmpVal^(0+256),w
 14243  18B3  3FC0               	movwi [0]fsr1
 14244  18B4  0851               	movf	(calcSinArray@tmpVal+1)^(0+256),w
 14245  18B5  3FC1               	movwi [1]fsr1
 14246  18B6  0852               	movf	(calcSinArray@tmpVal+2)^(0+256),w
 14247  18B7  3FC2               	movwi [2]fsr1
 14248  18B8  3001               	movlw	1
 14249  18B9  00CC               	movwf	??_calcSinArray^(0+256)
 14250  18BA  084C               	movf	??_calcSinArray^(0+256),w
 14251  18BB  07D3               	addwf	calcSinArray@iAngle^(0+256),f
 14252  18BC  283E               	goto	L18
 14253  18BD                     __end_of_calcSinArray:	
 14254                           
 14255                           	psect	text41
 14256  082E                     __ptext41:	
 14257 ;; *************** function _sin *****************
 14258 ;; Defined at:
 14259 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;  f               3   30[BANK2 ] void 
 14262 ;; Auto vars:     Size  Location     Type
 14263 ;;  x2              3   40[BANK2 ] void 
 14264 ;;  y               3   34[BANK2 ] void 
 14265 ;;  sgn             1   43[BANK2 ] unsigned char 
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  3   30[BANK2 ] unsigned char 
 14268 ;; Registers used:
 14269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14270 ;; Tracked objects:
 14271 ;;		On entry : 0/0
 14272 ;;		On exit  : 0/0
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14275 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14276 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14277 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14278 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14279 ;;Total ram usage:       14 bytes
 14280 ;; Hardware stack levels used:    1
 14281 ;; Hardware stack levels required when called:    6
 14282 ;; This function calls:
 14283 ;;		___ftadd
 14284 ;;		___ftdiv
 14285 ;;		___ftge
 14286 ;;		___ftmul
 14287 ;;		___ftneg
 14288 ;;		___ftsub
 14289 ;;		_eval_poly
 14290 ;;		_floor
 14291 ;; This function is called by:
 14292 ;;		_calcSinArray
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296                           
 14297                           ;psect for function _sin
 14298  082E                     _sin:	
 14299                           
 14300                           ;incstack = 0
 14301                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14302  082E  0022               	movlb	2	; select bank2
 14303  082F  01CB               	clrf	sin@sgn^(0+256)
 14304  0830  083E               	movf	sin@f^(0+256),w
 14305  0831  0021               	movlb	1	; select bank1
 14306  0832  00A0               	movwf	___ftge@ff1^(0+128)
 14307  0833  0022               	movlb	2	; select bank2
 14308  0834  083F               	movf	(sin@f+1)^(0+256),w
 14309  0835  0021               	movlb	1	; select bank1
 14310  0836  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14311  0837  0022               	movlb	2	; select bank2
 14312  0838  0840               	movf	(sin@f+2)^(0+256),w
 14313  0839  0021               	movlb	1	; select bank1
 14314  083A  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14315  083B  3000               	movlw	0
 14316  083C  00A3               	movwf	___ftge@ff2^(0+128)
 14317  083D  3000               	movlw	0
 14318  083E  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14319  083F  3000               	movlw	0
 14320  0840  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14321  0841  3198  2000  3188   	fcall	___ftge
 14322  0844  1803               	btfsc	3,0
 14323  0845  2863               	goto	l8440
 14324  0846  0022               	movlb	2	; select bank2
 14325  0847  083E               	movf	sin@f^(0+256),w
 14326  0848  0021               	movlb	1	; select bank1
 14327  0849  00BE               	movwf	___ftneg@f1^(0+128)
 14328  084A  0022               	movlb	2	; select bank2
 14329  084B  083F               	movf	(sin@f+1)^(0+256),w
 14330  084C  0021               	movlb	1	; select bank1
 14331  084D  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14332  084E  0022               	movlb	2	; select bank2
 14333  084F  0840               	movf	(sin@f+2)^(0+256),w
 14334  0850  0021               	movlb	1	; select bank1
 14335  0851  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14336  0852  31AF  2724  3188   	fcall	___ftneg
 14337  0855  0021               	movlb	1	; select bank1
 14338  0856  083E               	movf	?___ftneg^(0+128),w
 14339  0857  0022               	movlb	2	; select bank2
 14340  0858  00BE               	movwf	sin@f^(0+256)
 14341  0859  0021               	movlb	1	; select bank1
 14342  085A  083F               	movf	(?___ftneg+1)^(0+128),w
 14343  085B  0022               	movlb	2	; select bank2
 14344  085C  00BF               	movwf	(sin@f+1)^(0+256)
 14345  085D  0021               	movlb	1	; select bank1
 14346  085E  0840               	movf	(?___ftneg+2)^(0+128),w
 14347  085F  0022               	movlb	2	; select bank2
 14348  0860  00C0               	movwf	(sin@f+2)^(0+256)
 14349  0861  01CB               	clrf	sin@sgn^(0+256)
 14350  0862  0ACB               	incf	sin@sgn^(0+256),f
 14351  0863                     l8440:	
 14352  0863  30FA               	movlw	250
 14353  0864  0021               	movlb	1	; select bank1
 14354  0865  00AE               	movwf	___ftmul@f1^(0+128)
 14355  0866  3022               	movlw	34
 14356  0867  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14357  0868  303E               	movlw	62
 14358  0869  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14359  086A  0022               	movlb	2	; select bank2
 14360  086B  083E               	movf	sin@f^(0+256),w
 14361  086C  0021               	movlb	1	; select bank1
 14362  086D  00B1               	movwf	___ftmul@f2^(0+128)
 14363  086E  0022               	movlb	2	; select bank2
 14364  086F  083F               	movf	(sin@f+1)^(0+256),w
 14365  0870  0021               	movlb	1	; select bank1
 14366  0871  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14367  0872  0022               	movlb	2	; select bank2
 14368  0873  0840               	movf	(sin@f+2)^(0+256),w
 14369  0874  0021               	movlb	1	; select bank1
 14370  0875  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14371  0876  319E  267B  3188   	fcall	___ftmul
 14372  0879  0021               	movlb	1	; select bank1
 14373  087A  082E               	movf	?___ftmul^(0+128),w
 14374  087B  0022               	movlb	2	; select bank2
 14375  087C  00BE               	movwf	sin@f^(0+256)
 14376  087D  0021               	movlb	1	; select bank1
 14377  087E  082F               	movf	(?___ftmul+1)^(0+128),w
 14378  087F  0022               	movlb	2	; select bank2
 14379  0880  00BF               	movwf	(sin@f+1)^(0+256)
 14380  0881  0021               	movlb	1	; select bank1
 14381  0882  0830               	movf	(?___ftmul+2)^(0+128),w
 14382  0883  0022               	movlb	2	; select bank2
 14383  0884  00C0               	movwf	(sin@f+2)^(0+256)
 14384  0885  083E               	movf	sin@f^(0+256),w
 14385  0886  00AE               	movwf	floor@x^(0+256)
 14386  0887  083F               	movf	(sin@f+1)^(0+256),w
 14387  0888  00AF               	movwf	(floor@x+1)^(0+256)
 14388  0889  0840               	movf	(sin@f+2)^(0+256),w
 14389  088A  00B0               	movwf	(floor@x+2)^(0+256)
 14390  088B  319D  25C8  3188   	fcall	_floor
 14391  088E  0022               	movlb	2	; select bank2
 14392  088F  082E               	movf	?_floor^(0+256),w
 14393  0890  00B7               	movwf	___ftsub@f2^(0+256)
 14394  0891  082F               	movf	(?_floor+1)^(0+256),w
 14395  0892  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 14396  0893  0830               	movf	(?_floor+2)^(0+256),w
 14397  0894  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 14398  0895  083E               	movf	sin@f^(0+256),w
 14399  0896  00BA               	movwf	___ftsub@f1^(0+256)
 14400  0897  083F               	movf	(sin@f+1)^(0+256),w
 14401  0898  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 14402  0899  0840               	movf	(sin@f+2)^(0+256),w
 14403  089A  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 14404  089B  3188  2000  3188   	fcall	___ftsub
 14405  089E  0022               	movlb	2	; select bank2
 14406  089F  0837               	movf	?___ftsub^(0+256),w
 14407  08A0  00BE               	movwf	sin@f^(0+256)
 14408  08A1  0838               	movf	(?___ftsub+1)^(0+256),w
 14409  08A2  00BF               	movwf	(sin@f+1)^(0+256)
 14410  08A3  0839               	movf	(?___ftsub+2)^(0+256),w
 14411  08A4  00C0               	movwf	(sin@f+2)^(0+256)
 14412  08A5  3000               	movlw	0
 14413  08A6  0021               	movlb	1	; select bank1
 14414  08A7  00AE               	movwf	___ftmul@f1^(0+128)
 14415  08A8  3080               	movlw	128
 14416  08A9  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14417  08AA  3040               	movlw	64
 14418  08AB  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14419  08AC  0022               	movlb	2	; select bank2
 14420  08AD  083E               	movf	sin@f^(0+256),w
 14421  08AE  0021               	movlb	1	; select bank1
 14422  08AF  00B1               	movwf	___ftmul@f2^(0+128)
 14423  08B0  0022               	movlb	2	; select bank2
 14424  08B1  083F               	movf	(sin@f+1)^(0+256),w
 14425  08B2  0021               	movlb	1	; select bank1
 14426  08B3  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14427  08B4  0022               	movlb	2	; select bank2
 14428  08B5  0840               	movf	(sin@f+2)^(0+256),w
 14429  08B6  0021               	movlb	1	; select bank1
 14430  08B7  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14431  08B8  319E  267B  3188   	fcall	___ftmul
 14432  08BB  0021               	movlb	1	; select bank1
 14433  08BC  082E               	movf	?___ftmul^(0+128),w
 14434  08BD  0022               	movlb	2	; select bank2
 14435  08BE  00BE               	movwf	sin@f^(0+256)
 14436  08BF  0021               	movlb	1	; select bank1
 14437  08C0  082F               	movf	(?___ftmul+1)^(0+128),w
 14438  08C1  0022               	movlb	2	; select bank2
 14439  08C2  00BF               	movwf	(sin@f+1)^(0+256)
 14440  08C3  0021               	movlb	1	; select bank1
 14441  08C4  0830               	movf	(?___ftmul+2)^(0+128),w
 14442  08C5  0022               	movlb	2	; select bank2
 14443  08C6  00C0               	movwf	(sin@f+2)^(0+256)
 14444  08C7  3000               	movlw	0
 14445  08C8  0021               	movlb	1	; select bank1
 14446  08C9  00A0               	movwf	___ftge@ff1^(0+128)
 14447  08CA  3000               	movlw	0
 14448  08CB  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14449  08CC  3040               	movlw	64
 14450  08CD  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14451  08CE  0022               	movlb	2	; select bank2
 14452  08CF  083E               	movf	sin@f^(0+256),w
 14453  08D0  0021               	movlb	1	; select bank1
 14454  08D1  00A3               	movwf	___ftge@ff2^(0+128)
 14455  08D2  0022               	movlb	2	; select bank2
 14456  08D3  083F               	movf	(sin@f+1)^(0+256),w
 14457  08D4  0021               	movlb	1	; select bank1
 14458  08D5  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14459  08D6  0022               	movlb	2	; select bank2
 14460  08D7  0840               	movf	(sin@f+2)^(0+256),w
 14461  08D8  0021               	movlb	1	; select bank1
 14462  08D9  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14463  08DA  3198  2000  3188   	fcall	___ftge
 14464  08DD  1803               	btfsc	3,0
 14465  08DE  28FF               	goto	l8452
 14466  08DF  3000               	movlw	0
 14467  08E0  0022               	movlb	2	; select bank2
 14468  08E1  00B7               	movwf	___ftsub@f2^(0+256)
 14469  08E2  3000               	movlw	0
 14470  08E3  00B8               	movwf	(___ftsub@f2+1)^(0+256)
 14471  08E4  3040               	movlw	64
 14472  08E5  00B9               	movwf	(___ftsub@f2+2)^(0+256)
 14473  08E6  083E               	movf	sin@f^(0+256),w
 14474  08E7  00BA               	movwf	___ftsub@f1^(0+256)
 14475  08E8  083F               	movf	(sin@f+1)^(0+256),w
 14476  08E9  00BB               	movwf	(___ftsub@f1+1)^(0+256)
 14477  08EA  0840               	movf	(sin@f+2)^(0+256),w
 14478  08EB  00BC               	movwf	(___ftsub@f1+2)^(0+256)
 14479  08EC  3188  2000  3188   	fcall	___ftsub
 14480  08EF  0022               	movlb	2	; select bank2
 14481  08F0  0837               	movf	?___ftsub^(0+256),w
 14482  08F1  00BE               	movwf	sin@f^(0+256)
 14483  08F2  0838               	movf	(?___ftsub+1)^(0+256),w
 14484  08F3  00BF               	movwf	(sin@f+1)^(0+256)
 14485  08F4  0839               	movf	(?___ftsub+2)^(0+256),w
 14486  08F5  00C0               	movwf	(sin@f+2)^(0+256)
 14487  08F6  084B               	movf	sin@sgn^(0+256),w
 14488  08F7  1D03               	btfss	3,2
 14489  08F8  28FB               	goto	u8870
 14490  08F9  3001               	movlw	1
 14491  08FA  28FC               	goto	u8880
 14492  08FB                     u8870:	
 14493  08FB  3000               	movlw	0
 14494  08FC                     u8880:	
 14495  08FC  00C1               	movwf	??_sin^(0+256)
 14496  08FD  0841               	movf	??_sin^(0+256),w
 14497  08FE  00CB               	movwf	sin@sgn^(0+256)
 14498  08FF                     l8452:	
 14499  08FF  3000               	movlw	0
 14500  0900  0021               	movlb	1	; select bank1
 14501  0901  00A0               	movwf	___ftge@ff1^(0+128)
 14502  0902  3080               	movlw	128
 14503  0903  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14504  0904  303F               	movlw	63
 14505  0905  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14506  0906  0022               	movlb	2	; select bank2
 14507  0907  083E               	movf	sin@f^(0+256),w
 14508  0908  0021               	movlb	1	; select bank1
 14509  0909  00A3               	movwf	___ftge@ff2^(0+128)
 14510  090A  0022               	movlb	2	; select bank2
 14511  090B  083F               	movf	(sin@f+1)^(0+256),w
 14512  090C  0021               	movlb	1	; select bank1
 14513  090D  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14514  090E  0022               	movlb	2	; select bank2
 14515  090F  0840               	movf	(sin@f+2)^(0+256),w
 14516  0910  0021               	movlb	1	; select bank1
 14517  0911  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14518  0912  3198  2000  3188   	fcall	___ftge
 14519  0915  1803               	btfsc	3,0
 14520  0916  2943               	goto	l2334
 14521  0917  3000               	movlw	0
 14522  0918  0021               	movlb	1	; select bank1
 14523  0919  00C1               	movwf	___ftadd@f1^(0+128)
 14524  091A  3000               	movlw	0
 14525  091B  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14526  091C  3040               	movlw	64
 14527  091D  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14528  091E  0022               	movlb	2	; select bank2
 14529  091F  083E               	movf	sin@f^(0+256),w
 14530  0920  0021               	movlb	1	; select bank1
 14531  0921  00BE               	movwf	___ftneg@f1^(0+128)
 14532  0922  0022               	movlb	2	; select bank2
 14533  0923  083F               	movf	(sin@f+1)^(0+256),w
 14534  0924  0021               	movlb	1	; select bank1
 14535  0925  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14536  0926  0022               	movlb	2	; select bank2
 14537  0927  0840               	movf	(sin@f+2)^(0+256),w
 14538  0928  0021               	movlb	1	; select bank1
 14539  0929  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14540  092A  31AF  2724  3188   	fcall	___ftneg
 14541  092D  0021               	movlb	1	; select bank1
 14542  092E  083E               	movf	?___ftneg^(0+128),w
 14543  092F  00C4               	movwf	___ftadd@f2^(0+128)
 14544  0930  083F               	movf	(?___ftneg+1)^(0+128),w
 14545  0931  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14546  0932  0840               	movf	(?___ftneg+2)^(0+128),w
 14547  0933  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14548  0934  3190  201F  3188   	fcall	___ftadd
 14549  0937  0021               	movlb	1	; select bank1
 14550  0938  0841               	movf	?___ftadd^(0+128),w
 14551  0939  0022               	movlb	2	; select bank2
 14552  093A  00BE               	movwf	sin@f^(0+256)
 14553  093B  0021               	movlb	1	; select bank1
 14554  093C  0842               	movf	(?___ftadd+1)^(0+128),w
 14555  093D  0022               	movlb	2	; select bank2
 14556  093E  00BF               	movwf	(sin@f+1)^(0+256)
 14557  093F  0021               	movlb	1	; select bank1
 14558  0940  0843               	movf	(?___ftadd+2)^(0+128),w
 14559  0941  0022               	movlb	2	; select bank2
 14560  0942  00C0               	movwf	(sin@f+2)^(0+256)
 14561  0943                     l2334:	
 14562  0943  0022               	movlb	2	; select bank2
 14563  0944  083E               	movf	sin@f^(0+256),w
 14564  0945  0021               	movlb	1	; select bank1
 14565  0946  00AE               	movwf	___ftmul@f1^(0+128)
 14566  0947  0022               	movlb	2	; select bank2
 14567  0948  083F               	movf	(sin@f+1)^(0+256),w
 14568  0949  0021               	movlb	1	; select bank1
 14569  094A  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14570  094B  0022               	movlb	2	; select bank2
 14571  094C  0840               	movf	(sin@f+2)^(0+256),w
 14572  094D  0021               	movlb	1	; select bank1
 14573  094E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14574  094F  0022               	movlb	2	; select bank2
 14575  0950  083E               	movf	sin@f^(0+256),w
 14576  0951  0021               	movlb	1	; select bank1
 14577  0952  00B1               	movwf	___ftmul@f2^(0+128)
 14578  0953  0022               	movlb	2	; select bank2
 14579  0954  083F               	movf	(sin@f+1)^(0+256),w
 14580  0955  0021               	movlb	1	; select bank1
 14581  0956  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14582  0957  0022               	movlb	2	; select bank2
 14583  0958  0840               	movf	(sin@f+2)^(0+256),w
 14584  0959  0021               	movlb	1	; select bank1
 14585  095A  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14586  095B  319E  267B  3188   	fcall	___ftmul
 14587  095E  0021               	movlb	1	; select bank1
 14588  095F  082E               	movf	?___ftmul^(0+128),w
 14589  0960  0022               	movlb	2	; select bank2
 14590  0961  00C8               	movwf	sin@x2^(0+256)
 14591  0962  0021               	movlb	1	; select bank1
 14592  0963  082F               	movf	(?___ftmul+1)^(0+128),w
 14593  0964  0022               	movlb	2	; select bank2
 14594  0965  00C9               	movwf	(sin@x2+1)^(0+256)
 14595  0966  0021               	movlb	1	; select bank1
 14596  0967  0830               	movf	(?___ftmul+2)^(0+128),w
 14597  0968  0022               	movlb	2	; select bank2
 14598  0969  00CA               	movwf	(sin@x2+2)^(0+256)
 14599  096A  0848               	movf	sin@x2^(0+256),w
 14600  096B  00B4               	movwf	eval_poly@x^(0+256)
 14601  096C  0849               	movf	(sin@x2+1)^(0+256),w
 14602  096D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14603  096E  084A               	movf	(sin@x2+2)^(0+256),w
 14604  096F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14605  0970  3048               	movlw	low (sin@coeff_b| (0+32768))
 14606  0971  00B7               	movwf	eval_poly@d^(0+256)
 14607  0972  30A8               	movlw	high (sin@coeff_b| (0+32768))
 14608  0973  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14609  0974  3003               	movlw	3
 14610  0975  00B9               	movwf	eval_poly@n^(0+256)
 14611  0976  3000               	movlw	0
 14612  0977  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14613  0978  31A7  2718  3188   	fcall	_eval_poly
 14614  097B  0022               	movlb	2	; select bank2
 14615  097C  0834               	movf	?_eval_poly^(0+256),w
 14616  097D  00C2               	movwf	sin@y^(0+256)
 14617  097E  0835               	movf	(?_eval_poly+1)^(0+256),w
 14618  097F  00C3               	movwf	(sin@y+1)^(0+256)
 14619  0980  0836               	movf	(?_eval_poly+2)^(0+256),w
 14620  0981  00C4               	movwf	(sin@y+2)^(0+256)
 14621  0982  3004               	movlw	4
 14622  0983  00B9               	movwf	eval_poly@n^(0+256)
 14623  0984  3000               	movlw	0
 14624  0985  00BA               	movwf	(eval_poly@n^(0+256)+1)
 14625  0986  3039               	movlw	low (sin@coeff_a| (0+32768))
 14626  0987  00B7               	movwf	eval_poly@d^(0+256)
 14627  0988  30A8               	movlw	high (sin@coeff_a| (0+32768))
 14628  0989  00B8               	movwf	(eval_poly@d^(0+256)+1)
 14629  098A  0848               	movf	sin@x2^(0+256),w
 14630  098B  00B4               	movwf	eval_poly@x^(0+256)
 14631  098C  0849               	movf	(sin@x2+1)^(0+256),w
 14632  098D  00B5               	movwf	(eval_poly@x+1)^(0+256)
 14633  098E  084A               	movf	(sin@x2+2)^(0+256),w
 14634  098F  00B6               	movwf	(eval_poly@x+2)^(0+256)
 14635  0990  31A7  2718  3188   	fcall	_eval_poly
 14636  0993  0022               	movlb	2	; select bank2
 14637  0994  0834               	movf	?_eval_poly^(0+256),w
 14638  0995  0021               	movlb	1	; select bank1
 14639  0996  00D1               	movwf	___ftdiv@f1^(0+128)
 14640  0997  0022               	movlb	2	; select bank2
 14641  0998  0835               	movf	(?_eval_poly+1)^(0+256),w
 14642  0999  0021               	movlb	1	; select bank1
 14643  099A  00D2               	movwf	(___ftdiv@f1+1)^(0+128)
 14644  099B  0022               	movlb	2	; select bank2
 14645  099C  0836               	movf	(?_eval_poly+2)^(0+256),w
 14646  099D  0021               	movlb	1	; select bank1
 14647  099E  00D3               	movwf	(___ftdiv@f1+2)^(0+128)
 14648  099F  0022               	movlb	2	; select bank2
 14649  09A0  0842               	movf	sin@y^(0+256),w
 14650  09A1  0021               	movlb	1	; select bank1
 14651  09A2  00CE               	movwf	___ftdiv@f2^(0+128)
 14652  09A3  0022               	movlb	2	; select bank2
 14653  09A4  0843               	movf	(sin@y+1)^(0+256),w
 14654  09A5  0021               	movlb	1	; select bank1
 14655  09A6  00CF               	movwf	(___ftdiv@f2+1)^(0+128)
 14656  09A7  0022               	movlb	2	; select bank2
 14657  09A8  0844               	movf	(sin@y+2)^(0+256),w
 14658  09A9  0021               	movlb	1	; select bank1
 14659  09AA  00D0               	movwf	(___ftdiv@f2+2)^(0+128)
 14660  09AB  319C  2474  3188   	fcall	___ftdiv
 14661  09AE  0021               	movlb	1	; select bank1
 14662  09AF  084E               	movf	?___ftdiv^(0+128),w
 14663  09B0  0022               	movlb	2	; select bank2
 14664  09B1  00C5               	movwf	_sin$2849^(0+256)
 14665  09B2  0021               	movlb	1	; select bank1
 14666  09B3  084F               	movf	(?___ftdiv+1)^(0+128),w
 14667  09B4  0022               	movlb	2	; select bank2
 14668  09B5  00C6               	movwf	(_sin$2849+1)^(0+256)
 14669  09B6  0021               	movlb	1	; select bank1
 14670  09B7  0850               	movf	(?___ftdiv+2)^(0+128),w
 14671  09B8  0022               	movlb	2	; select bank2
 14672  09B9  00C7               	movwf	(_sin$2849+2)^(0+256)
 14673  09BA  0845               	movf	_sin$2849^(0+256),w
 14674  09BB  0021               	movlb	1	; select bank1
 14675  09BC  00AE               	movwf	___ftmul@f1^(0+128)
 14676  09BD  0022               	movlb	2	; select bank2
 14677  09BE  0846               	movf	(_sin$2849+1)^(0+256),w
 14678  09BF  0021               	movlb	1	; select bank1
 14679  09C0  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 14680  09C1  0022               	movlb	2	; select bank2
 14681  09C2  0847               	movf	(_sin$2849+2)^(0+256),w
 14682  09C3  0021               	movlb	1	; select bank1
 14683  09C4  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 14684  09C5  0022               	movlb	2	; select bank2
 14685  09C6  083E               	movf	sin@f^(0+256),w
 14686  09C7  0021               	movlb	1	; select bank1
 14687  09C8  00B1               	movwf	___ftmul@f2^(0+128)
 14688  09C9  0022               	movlb	2	; select bank2
 14689  09CA  083F               	movf	(sin@f+1)^(0+256),w
 14690  09CB  0021               	movlb	1	; select bank1
 14691  09CC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 14692  09CD  0022               	movlb	2	; select bank2
 14693  09CE  0840               	movf	(sin@f+2)^(0+256),w
 14694  09CF  0021               	movlb	1	; select bank1
 14695  09D0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 14696  09D1  319E  267B  3188   	fcall	___ftmul
 14697  09D4  0021               	movlb	1	; select bank1
 14698  09D5  082E               	movf	?___ftmul^(0+128),w
 14699  09D6  0022               	movlb	2	; select bank2
 14700  09D7  00BE               	movwf	sin@f^(0+256)
 14701  09D8  0021               	movlb	1	; select bank1
 14702  09D9  082F               	movf	(?___ftmul+1)^(0+128),w
 14703  09DA  0022               	movlb	2	; select bank2
 14704  09DB  00BF               	movwf	(sin@f+1)^(0+256)
 14705  09DC  0021               	movlb	1	; select bank1
 14706  09DD  0830               	movf	(?___ftmul+2)^(0+128),w
 14707  09DE  0022               	movlb	2	; select bank2
 14708  09DF  00C0               	movwf	(sin@f+2)^(0+256)
 14709  09E0  084B               	movf	sin@sgn^(0+256),w
 14710  09E1  1903               	btfsc	3,2
 14711  09E2  0008               	return
 14712  09E3  083E               	movf	sin@f^(0+256),w
 14713  09E4  0021               	movlb	1	; select bank1
 14714  09E5  00BE               	movwf	___ftneg@f1^(0+128)
 14715  09E6  0022               	movlb	2	; select bank2
 14716  09E7  083F               	movf	(sin@f+1)^(0+256),w
 14717  09E8  0021               	movlb	1	; select bank1
 14718  09E9  00BF               	movwf	(___ftneg@f1+1)^(0+128)
 14719  09EA  0022               	movlb	2	; select bank2
 14720  09EB  0840               	movf	(sin@f+2)^(0+256),w
 14721  09EC  0021               	movlb	1	; select bank1
 14722  09ED  00C0               	movwf	(___ftneg@f1+2)^(0+128)
 14723  09EE  31AF  2724         	fcall	___ftneg
 14724  09F0  0021               	movlb	1	; select bank1
 14725  09F1  083E               	movf	?___ftneg^(0+128),w
 14726  09F2  0022               	movlb	2	; select bank2
 14727  09F3  00BE               	movwf	?_sin^(0+256)
 14728  09F4  0021               	movlb	1	; select bank1
 14729  09F5  083F               	movf	(?___ftneg+1)^(0+128),w
 14730  09F6  0022               	movlb	2	; select bank2
 14731  09F7  00BF               	movwf	(?_sin+1)^(0+256)
 14732  09F8  0021               	movlb	1	; select bank1
 14733  09F9  0840               	movf	(?___ftneg+2)^(0+128),w
 14734  09FA  0022               	movlb	2	; select bank2
 14735  09FB  00C0               	movwf	(?_sin+2)^(0+256)
 14736  09FC  0008               	return
 14737  09FD                     __end_of_sin:	
 14738                           
 14739                           	psect	text42
 14740  1DC8                     __ptext42:	
 14741 ;; *************** function _floor *****************
 14742 ;; Defined at:
 14743 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  x               3   14[BANK2 ] unsigned char 
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;  i               3   18[BANK2 ] unsigned char 
 14748 ;;  expon           2   21[BANK2 ] int 
 14749 ;; Return value:  Size  Location     Type
 14750 ;;                  3   14[BANK2 ] int 
 14751 ;; Registers used:
 14752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14753 ;; Tracked objects:
 14754 ;;		On entry : 0/0
 14755 ;;		On exit  : 0/0
 14756 ;;		Unchanged: 0/0
 14757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14758 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14759 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14760 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14761 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14762 ;;Total ram usage:        9 bytes
 14763 ;; Hardware stack levels used:    1
 14764 ;; Hardware stack levels required when called:    5
 14765 ;; This function calls:
 14766 ;;		___altoft
 14767 ;;		___ftadd
 14768 ;;		___ftge
 14769 ;;		___fttol
 14770 ;;		_frexp
 14771 ;; This function is called by:
 14772 ;;		_sin
 14773 ;;		_exp
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _floor
 14779  1DC8                     _floor:	
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14783  1DC8  0022               	movlb	2	; select bank2
 14784  1DC9  082E               	movf	floor@x^(0+256),w
 14785  1DCA  0021               	movlb	1	; select bank1
 14786  1DCB  00A0               	movwf	frexp@value^(0+128)
 14787  1DCC  0022               	movlb	2	; select bank2
 14788  1DCD  082F               	movf	(floor@x+1)^(0+256),w
 14789  1DCE  0021               	movlb	1	; select bank1
 14790  1DCF  00A1               	movwf	(frexp@value+1)^(0+128)
 14791  1DD0  0022               	movlb	2	; select bank2
 14792  1DD1  0830               	movf	(floor@x+2)^(0+256),w
 14793  1DD2  0021               	movlb	1	; select bank1
 14794  1DD3  00A2               	movwf	(frexp@value+2)^(0+128)
 14795  1DD4  3035               	movlw	(low (floor@expon| (0+256)))& (0+255)
 14796  1DD5  0022               	movlb	2	; select bank2
 14797  1DD6  00B1               	movwf	??_floor^(0+256)
 14798  1DD7  0831               	movf	??_floor^(0+256),w
 14799  1DD8  0021               	movlb	1	; select bank1
 14800  1DD9  00A3               	movwf	frexp@eptr^(0+128)
 14801  1DDA  31A3  238B  319D   	fcall	_frexp
 14802  1DDD  0022               	movlb	2	; select bank2
 14803  1DDE  1FB6               	btfss	(floor@expon+1)^(0+256),7
 14804  1DDF  2E06               	goto	l8032
 14805  1DE0  082E               	movf	floor@x^(0+256),w
 14806  1DE1  0021               	movlb	1	; select bank1
 14807  1DE2  00A0               	movwf	___ftge@ff1^(0+128)
 14808  1DE3  0022               	movlb	2	; select bank2
 14809  1DE4  082F               	movf	(floor@x+1)^(0+256),w
 14810  1DE5  0021               	movlb	1	; select bank1
 14811  1DE6  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14812  1DE7  0022               	movlb	2	; select bank2
 14813  1DE8  0830               	movf	(floor@x+2)^(0+256),w
 14814  1DE9  0021               	movlb	1	; select bank1
 14815  1DEA  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14816  1DEB  3000               	movlw	0
 14817  1DEC  00A3               	movwf	___ftge@ff2^(0+128)
 14818  1DED  3000               	movlw	0
 14819  1DEE  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14820  1DEF  3000               	movlw	0
 14821  1DF0  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14822  1DF1  3198  2000  319D   	fcall	___ftge
 14823  1DF4  1803               	btfsc	3,0
 14824  1DF5  2DFE               	goto	l8028
 14825  1DF6  3000               	movlw	0
 14826  1DF7  0022               	movlb	2	; select bank2
 14827  1DF8  00AE               	movwf	?_floor^(0+256)
 14828  1DF9  3080               	movlw	128
 14829  1DFA  00AF               	movwf	(?_floor+1)^(0+256)
 14830  1DFB  30BF               	movlw	191
 14831  1DFC  00B0               	movwf	(?_floor+2)^(0+256)
 14832  1DFD  0008               	return
 14833  1DFE                     l8028:	
 14834  1DFE  3000               	movlw	0
 14835  1DFF  0022               	movlb	2	; select bank2
 14836  1E00  00AE               	movwf	?_floor^(0+256)
 14837  1E01  3000               	movlw	0
 14838  1E02  00AF               	movwf	(?_floor+1)^(0+256)
 14839  1E03  3000               	movlw	0
 14840  1E04  00B0               	movwf	(?_floor+2)^(0+256)
 14841  1E05  0008               	return
 14842  1E06                     l8032:	
 14843  1E06  3000               	movlw	0
 14844  1E07  0236               	subwf	(floor@expon+1)^(0+256),w
 14845  1E08  3015               	movlw	21
 14846  1E09  1903               	skipnz
 14847  1E0A  0235               	subwf	floor@expon^(0+256),w
 14848  1E0B  1803               	btfsc	3,0
 14849  1E0C  0008               	return
 14850  1E0D  082E               	movf	floor@x^(0+256),w
 14851  1E0E  00A0               	movwf	___fttol@f1^(0+256)
 14852  1E0F  082F               	movf	(floor@x+1)^(0+256),w
 14853  1E10  00A1               	movwf	(___fttol@f1+1)^(0+256)
 14854  1E11  0830               	movf	(floor@x+2)^(0+256),w
 14855  1E12  00A2               	movwf	(___fttol@f1+2)^(0+256)
 14856  1E13  319A  2246  319D   	fcall	___fttol
 14857  1E16  0022               	movlb	2	; select bank2
 14858  1E17  0823               	movf	(?___fttol+3)^(0+256),w
 14859  1E18  0021               	movlb	1	; select bank1
 14860  1E19  00AB               	movwf	(___altoft@c+3)^(0+128)
 14861  1E1A  0022               	movlb	2	; select bank2
 14862  1E1B  0822               	movf	(?___fttol+2)^(0+256),w
 14863  1E1C  0021               	movlb	1	; select bank1
 14864  1E1D  00AA               	movwf	(___altoft@c+2)^(0+128)
 14865  1E1E  0022               	movlb	2	; select bank2
 14866  1E1F  0821               	movf	(?___fttol+1)^(0+256),w
 14867  1E20  0021               	movlb	1	; select bank1
 14868  1E21  00A9               	movwf	(___altoft@c+1)^(0+128)
 14869  1E22  0022               	movlb	2	; select bank2
 14870  1E23  0820               	movf	?___fttol^(0+256),w
 14871  1E24  0021               	movlb	1	; select bank1
 14872  1E25  00A8               	movwf	___altoft@c^(0+128)
 14873  1E26  31A2  22D3  319D   	fcall	___altoft
 14874  1E29  0021               	movlb	1	; select bank1
 14875  1E2A  0828               	movf	?___altoft^(0+128),w
 14876  1E2B  0022               	movlb	2	; select bank2
 14877  1E2C  00B2               	movwf	floor@i^(0+256)
 14878  1E2D  0021               	movlb	1	; select bank1
 14879  1E2E  0829               	movf	(?___altoft+1)^(0+128),w
 14880  1E2F  0022               	movlb	2	; select bank2
 14881  1E30  00B3               	movwf	(floor@i+1)^(0+256)
 14882  1E31  0021               	movlb	1	; select bank1
 14883  1E32  082A               	movf	(?___altoft+2)^(0+128),w
 14884  1E33  0022               	movlb	2	; select bank2
 14885  1E34  00B4               	movwf	(floor@i+2)^(0+256)
 14886  1E35  082E               	movf	floor@x^(0+256),w
 14887  1E36  0021               	movlb	1	; select bank1
 14888  1E37  00A0               	movwf	___ftge@ff1^(0+128)
 14889  1E38  0022               	movlb	2	; select bank2
 14890  1E39  082F               	movf	(floor@x+1)^(0+256),w
 14891  1E3A  0021               	movlb	1	; select bank1
 14892  1E3B  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 14893  1E3C  0022               	movlb	2	; select bank2
 14894  1E3D  0830               	movf	(floor@x+2)^(0+256),w
 14895  1E3E  0021               	movlb	1	; select bank1
 14896  1E3F  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 14897  1E40  0022               	movlb	2	; select bank2
 14898  1E41  0832               	movf	floor@i^(0+256),w
 14899  1E42  0021               	movlb	1	; select bank1
 14900  1E43  00A3               	movwf	___ftge@ff2^(0+128)
 14901  1E44  0022               	movlb	2	; select bank2
 14902  1E45  0833               	movf	(floor@i+1)^(0+256),w
 14903  1E46  0021               	movlb	1	; select bank1
 14904  1E47  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 14905  1E48  0022               	movlb	2	; select bank2
 14906  1E49  0834               	movf	(floor@i+2)^(0+256),w
 14907  1E4A  0021               	movlb	1	; select bank1
 14908  1E4B  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 14909  1E4C  3198  2000  319D   	fcall	___ftge
 14910  1E4F  1803               	btfsc	3,0
 14911  1E50  2E73               	goto	l8042
 14912  1E51  3000               	movlw	0
 14913  1E52  0021               	movlb	1	; select bank1
 14914  1E53  00C1               	movwf	___ftadd@f1^(0+128)
 14915  1E54  3080               	movlw	128
 14916  1E55  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 14917  1E56  30BF               	movlw	191
 14918  1E57  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 14919  1E58  0022               	movlb	2	; select bank2
 14920  1E59  0832               	movf	floor@i^(0+256),w
 14921  1E5A  0021               	movlb	1	; select bank1
 14922  1E5B  00C4               	movwf	___ftadd@f2^(0+128)
 14923  1E5C  0022               	movlb	2	; select bank2
 14924  1E5D  0833               	movf	(floor@i+1)^(0+256),w
 14925  1E5E  0021               	movlb	1	; select bank1
 14926  1E5F  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 14927  1E60  0022               	movlb	2	; select bank2
 14928  1E61  0834               	movf	(floor@i+2)^(0+256),w
 14929  1E62  0021               	movlb	1	; select bank1
 14930  1E63  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 14931  1E64  3190  201F         	fcall	___ftadd
 14932  1E66  0021               	movlb	1	; select bank1
 14933  1E67  0841               	movf	?___ftadd^(0+128),w
 14934  1E68  0022               	movlb	2	; select bank2
 14935  1E69  00AE               	movwf	?_floor^(0+256)
 14936  1E6A  0021               	movlb	1	; select bank1
 14937  1E6B  0842               	movf	(?___ftadd+1)^(0+128),w
 14938  1E6C  0022               	movlb	2	; select bank2
 14939  1E6D  00AF               	movwf	(?_floor+1)^(0+256)
 14940  1E6E  0021               	movlb	1	; select bank1
 14941  1E6F  0843               	movf	(?___ftadd+2)^(0+128),w
 14942  1E70  0022               	movlb	2	; select bank2
 14943  1E71  00B0               	movwf	(?_floor+2)^(0+256)
 14944  1E72  0008               	return
 14945  1E73                     l8042:	
 14946  1E73  0022               	movlb	2	; select bank2
 14947  1E74  0832               	movf	floor@i^(0+256),w
 14948  1E75  00AE               	movwf	?_floor^(0+256)
 14949  1E76  0833               	movf	(floor@i+1)^(0+256),w
 14950  1E77  00AF               	movwf	(?_floor+1)^(0+256)
 14951  1E78  0834               	movf	(floor@i+2)^(0+256),w
 14952  1E79  00B0               	movwf	(?_floor+2)^(0+256)
 14953  1E7A  0008               	return
 14954  1E7B                     __end_of_floor:	
 14955                           
 14956                           	psect	text43
 14957  238B                     __ptext43:	
 14958 ;; *************** function _frexp *****************
 14959 ;; Defined at:
 14960 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 14961 ;; Parameters:    Size  Location     Type
 14962 ;;  value           3    0[BANK1 ] int 
 14963 ;;  eptr            1    3[BANK1 ] PTR int 
 14964 ;;		 -> log@exponent(2), floor@expon(2), 
 14965 ;; Auto vars:     Size  Location     Type
 14966 ;;		None
 14967 ;; Return value:  Size  Location     Type
 14968 ;;                  3    0[BANK1 ] PTR int 
 14969 ;; Registers used:
 14970 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14971 ;; Tracked objects:
 14972 ;;		On entry : 0/0
 14973 ;;		On exit  : 0/0
 14974 ;;		Unchanged: 0/0
 14975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14976 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14978 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14979 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14980 ;;Total ram usage:        6 bytes
 14981 ;; Hardware stack levels used:    1
 14982 ;; Hardware stack levels required when called:    3
 14983 ;; This function calls:
 14984 ;;		Nothing
 14985 ;; This function is called by:
 14986 ;;		_floor
 14987 ;;		_log
 14988 ;; This function uses a non-reentrant model
 14989 ;;
 14990                           
 14991                           
 14992                           ;psect for function _frexp
 14993  238B                     _frexp:	
 14994                           
 14995                           ;incstack = 0
 14996                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 14997  238B  0021               	movlb	1	; select bank1
 14998  238C  0822               	movf	(frexp@value+2)^(0+128),w
 14999  238D  0421               	iorwf	(frexp@value+1)^(0+128),w
 15000  238E  0420               	iorwf	frexp@value^(0+128),w
 15001  238F  1D03               	skipz
 15002  2390  2B9F               	goto	l7894
 15003  2391  0823               	movf	frexp@eptr^(0+128),w
 15004  2392  0086               	movwf	6
 15005  2393  3001               	movlw	1	; select bank2/3
 15006  2394  0087               	movwf	7
 15007  2395  3000               	movlw	0
 15008  2396  3FC0               	movwi [0]fsr1
 15009  2397  3FC1               	movwi [1]fsr1
 15010  2398  3000               	movlw	0
 15011  2399  00A0               	movwf	?_frexp^(0+128)
 15012  239A  3000               	movlw	0
 15013  239B  00A1               	movwf	(?_frexp+1)^(0+128)
 15014  239C  3000               	movlw	0
 15015  239D  00A2               	movwf	(?_frexp+2)^(0+128)
 15016  239E  0008               	return
 15017  239F                     l7894:	
 15018  239F  0822               	movf	(frexp@value^(0+128)+2),w
 15019  23A0  397F               	andlw	127
 15020  23A1  00A4               	movwf	??_frexp^(0+128)
 15021  23A2  01A5               	clrf	(??_frexp^(0+128)+1)
 15022  23A3  35A4               	lslf	??_frexp^(0+128),f
 15023  23A4  0DA5               	rlf	(??_frexp^(0+128)+1),f
 15024  23A5  0823               	movf	frexp@eptr^(0+128),w
 15025  23A6  0086               	movwf	6
 15026  23A7  3001               	movlw	1	; select bank2/3
 15027  23A8  0087               	movwf	7
 15028  23A9  0824               	movf	??_frexp^(0+128),w
 15029  23AA  3FC0               	movwi [0]fsr1
 15030  23AB  0825               	movf	(??_frexp+1)^(0+128),w
 15031  23AC  3FC1               	movwi [1]fsr1
 15032  23AD  0D21               	rlf	(frexp@value^(0+128)+1),w
 15033  23AE  0D21               	rlf	(frexp@value^(0+128)+1),w
 15034  23AF  3901               	andlw	1
 15035  23B0  00A4               	movwf	??_frexp^(0+128)
 15036  23B1  01A5               	clrf	(??_frexp^(0+128)+1)
 15037  23B2  0823               	movf	frexp@eptr^(0+128),w
 15038  23B3  0086               	movwf	6
 15039  23B4  3001               	movlw	1	; select bank2/3
 15040  23B5  0087               	movwf	7
 15041  23B6  0824               	movf	??_frexp^(0+128),w
 15042  23B7  0481               	iorwf	1,f
 15043  23B8  3141               	addfsr 1,1
 15044  23B9  0825               	movf	(??_frexp+1)^(0+128),w
 15045  23BA  0481               	iorwf	1,f
 15046  23BB  0823               	movf	frexp@eptr^(0+128),w
 15047  23BC  0086               	movwf	6
 15048  23BD  3001               	movlw	1	; select bank2/3
 15049  23BE  0087               	movwf	7
 15050  23BF  3082               	movlw	130
 15051  23C0  0781               	addwf	1,f
 15052  23C1  3141               	addfsr 1,1
 15053  23C2  30FF               	movlw	255
 15054  23C3  3D81               	addwfc	1,f
 15055  23C4  317F               	addfsr 1,-1
 15056  23C5  0822               	movf	(frexp@value^(0+128)+2),w
 15057  23C6  3980               	andlw	-128
 15058  23C7  383F               	iorlw	63
 15059  23C8  00A2               	movwf	(frexp@value^(0+128)+2)
 15060  23C9  13A1               	bcf	(frexp@value^(0+128)+1),7
 15061  23CA  0008               	return
 15062  23CB                     __end_of_frexp:	
 15063                           
 15064                           	psect	text44
 15065  1A46                     __ptext44:	
 15066 ;; *************** function ___fttol *****************
 15067 ;; Defined at:
 15068 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 15069 ;; Parameters:    Size  Location     Type
 15070 ;;  f1              3    0[BANK2 ] float 
 15071 ;; Auto vars:     Size  Location     Type
 15072 ;;  lval            4    9[BANK2 ] unsigned long 
 15073 ;;  exp1            1   13[BANK2 ] unsigned char 
 15074 ;;  sign1           1    8[BANK2 ] unsigned char 
 15075 ;; Return value:  Size  Location     Type
 15076 ;;                  4    0[BANK2 ] long 
 15077 ;; Registers used:
 15078 ;;		wreg, status,2, status,0
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15084 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15085 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15086 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15087 ;;      Totals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15088 ;;Total ram usage:       14 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    3
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_main
 15095 ;;		_set_subdivision
 15096 ;;		_scaleA100kPot
 15097 ;;		_scaleA10kPot
 15098 ;;		_scaleiA10kPot
 15099 ;;		_getModulationDelayTime
 15100 ;;		_modSin
 15101 ;;		_modTri
 15102 ;;		_modSaw
 15103 ;;		_pow
 15104 ;;		_exp
 15105 ;;		_floor
 15106 ;;		_scaleiA100kPot
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           
 15111                           ;psect for function ___fttol
 15112  1A46                     ___fttol:	
 15113                           
 15114                           ;incstack = 0
 15115                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15116  1A46  0022               	movlb	2	; select bank2
 15117  1A47  0820               	movf	___fttol@f1^(0+256),w
 15118  1A48  00A4               	movwf	??___fttol^(0+256)
 15119  1A49  0821               	movf	(___fttol@f1+1)^(0+256),w
 15120  1A4A  00A5               	movwf	(??___fttol^(0+256)+1)
 15121  1A4B  0822               	movf	(___fttol@f1+2)^(0+256),w
 15122  1A4C  00A6               	movwf	(??___fttol^(0+256)+2)
 15123  1A4D  1003               	clrc
 15124  1A4E  0D25               	rlf	(??___fttol^(0+256)+1),w
 15125  1A4F  0D26               	rlf	(??___fttol^(0+256)+2),w
 15126  1A50  00A7               	movwf	(??___fttol+3)^(0+256)
 15127  1A51  0827               	movf	(??___fttol+3)^(0+256),w
 15128  1A52  00AD               	movwf	___fttol@exp1^(0+256)
 15129  1A53  082D               	movf	___fttol@exp1^(0+256),w
 15130  1A54  1D03               	btfss	3,2
 15131  1A55  2A5F               	goto	l7850
 15132  1A56  3000               	movlw	0
 15133  1A57  00A3               	movwf	(?___fttol+3)^(0+256)
 15134  1A58  3000               	movlw	0
 15135  1A59  00A2               	movwf	(?___fttol+2)^(0+256)
 15136  1A5A  3000               	movlw	0
 15137  1A5B  00A1               	movwf	(?___fttol+1)^(0+256)
 15138  1A5C  3000               	movlw	0
 15139  1A5D  00A0               	movwf	?___fttol^(0+256)
 15140  1A5E  0008               	return
 15141  1A5F                     l7850:	
 15142  1A5F  0820               	movf	___fttol@f1^(0+256),w
 15143  1A60  00A4               	movwf	??___fttol^(0+256)
 15144  1A61  0821               	movf	(___fttol@f1+1)^(0+256),w
 15145  1A62  00A5               	movwf	(??___fttol^(0+256)+1)
 15146  1A63  0822               	movf	(___fttol@f1+2)^(0+256),w
 15147  1A64  00A6               	movwf	(??___fttol^(0+256)+2)
 15148  1A65  3017               	movlw	23
 15149  1A66                     u8205:	
 15150  1A66  36A6               	lsrf	(??___fttol^(0+256)+2),f
 15151  1A67  0CA5               	rrf	(??___fttol^(0+256)+1),f
 15152  1A68  0CA4               	rrf	??___fttol^(0+256),f
 15153  1A69  0B89               	decfsz	9,f
 15154  1A6A  2A66               	goto	u8205
 15155  1A6B  0824               	movf	??___fttol^(0+256),w
 15156  1A6C  00A7               	movwf	(??___fttol+3)^(0+256)
 15157  1A6D  0827               	movf	(??___fttol+3)^(0+256),w
 15158  1A6E  00A8               	movwf	___fttol@sign1^(0+256)
 15159  1A6F  17A1               	bsf	(___fttol@f1^(0+256)+1),7
 15160  1A70  30FF               	movlw	255
 15161  1A71  05A0               	andwf	___fttol@f1^(0+256),f
 15162  1A72  30FF               	movlw	255
 15163  1A73  05A1               	andwf	(___fttol@f1+1)^(0+256),f
 15164  1A74  3000               	movlw	0
 15165  1A75  05A2               	andwf	(___fttol@f1+2)^(0+256),f
 15166  1A76  0820               	movf	___fttol@f1^(0+256),w
 15167  1A77  00A9               	movwf	___fttol@lval^(0+256)
 15168  1A78  0821               	movf	(___fttol@f1+1)^(0+256),w
 15169  1A79  00AA               	movwf	(___fttol@lval^(0+256)+1)
 15170  1A7A  0822               	movf	(___fttol@f1+2)^(0+256),w
 15171  1A7B  00AB               	movwf	(___fttol@lval^(0+256)+2)
 15172  1A7C  01AC               	clrf	(___fttol@lval^(0+256)+3)
 15173  1A7D  308E               	movlw	142
 15174  1A7E  02AD               	subwf	___fttol@exp1^(0+256),f
 15175  1A7F  1FAD               	btfss	___fttol@exp1^(0+256),7
 15176  1A80  2A9D               	goto	l7870
 15177  1A81  082D               	movf	___fttol@exp1^(0+256),w
 15178  1A82  3A80               	xorlw	128
 15179  1A83  3E8F               	addlw	143
 15180  1A84  1803               	skipnc
 15181  1A85  2A8F               	goto	l7868
 15182  1A86  3000               	movlw	0
 15183  1A87  00A3               	movwf	(?___fttol+3)^(0+256)
 15184  1A88  3000               	movlw	0
 15185  1A89  00A2               	movwf	(?___fttol+2)^(0+256)
 15186  1A8A  3000               	movlw	0
 15187  1A8B  00A1               	movwf	(?___fttol+1)^(0+256)
 15188  1A8C  3000               	movlw	0
 15189  1A8D  00A0               	movwf	?___fttol^(0+256)
 15190  1A8E  0008               	return
 15191  1A8F                     l7868:	
 15192  1A8F  3001               	movlw	1
 15193  1A90                     u8235:	
 15194  1A90  36AC               	lsrf	(___fttol@lval+3)^(0+256),f
 15195  1A91  0CAB               	rrf	(___fttol@lval+2)^(0+256),f
 15196  1A92  0CAA               	rrf	(___fttol@lval+1)^(0+256),f
 15197  1A93  0CA9               	rrf	___fttol@lval^(0+256),f
 15198  1A94  0B89               	decfsz	9,f
 15199  1A95  2A90               	goto	u8235
 15200  1A96  3001               	movlw	1
 15201  1A97  00A4               	movwf	??___fttol^(0+256)
 15202  1A98  0824               	movf	??___fttol^(0+256),w
 15203  1A99  07AD               	addwf	___fttol@exp1^(0+256),f
 15204  1A9A  1903               	btfsc	3,2
 15205  1A9B  2AB6               	goto	l7878
 15206  1A9C  2A8F               	goto	l7868
 15207  1A9D                     l7870:	
 15208  1A9D  3018               	movlw	24
 15209  1A9E  022D               	subwf	___fttol@exp1^(0+256),w
 15210  1A9F  1C03               	skipc
 15211  1AA0  2AB3               	goto	l2204
 15212  1AA1  3000               	movlw	0
 15213  1AA2  00A3               	movwf	(?___fttol+3)^(0+256)
 15214  1AA3  3000               	movlw	0
 15215  1AA4  00A2               	movwf	(?___fttol+2)^(0+256)
 15216  1AA5  3000               	movlw	0
 15217  1AA6  00A1               	movwf	(?___fttol+1)^(0+256)
 15218  1AA7  3000               	movlw	0
 15219  1AA8  00A0               	movwf	?___fttol^(0+256)
 15220  1AA9  0008               	return
 15221  1AAA                     l7876:	
 15222  1AAA  3001               	movlw	1
 15223  1AAB                     u8265:	
 15224  1AAB  35A9               	lslf	___fttol@lval^(0+256),f
 15225  1AAC  0DAA               	rlf	(___fttol@lval+1)^(0+256),f
 15226  1AAD  0DAB               	rlf	(___fttol@lval+2)^(0+256),f
 15227  1AAE  0DAC               	rlf	(___fttol@lval+3)^(0+256),f
 15228  1AAF  0B89               	decfsz	9,f
 15229  1AB0  2AAB               	goto	u8265
 15230  1AB1  3001               	movlw	1
 15231  1AB2  02AD               	subwf	___fttol@exp1^(0+256),f
 15232  1AB3                     l2204:	
 15233  1AB3  082D               	movf	___fttol@exp1^(0+256),w
 15234  1AB4  1D03               	btfss	3,2
 15235  1AB5  2AAA               	goto	l7876
 15236  1AB6                     l7878:	
 15237  1AB6  0828               	movf	___fttol@sign1^(0+256),w
 15238  1AB7  1903               	btfsc	3,2
 15239  1AB8  2AC4               	goto	l7882
 15240  1AB9  09A9               	comf	___fttol@lval^(0+256),f
 15241  1ABA  09AA               	comf	(___fttol@lval+1)^(0+256),f
 15242  1ABB  09AB               	comf	(___fttol@lval+2)^(0+256),f
 15243  1ABC  09AC               	comf	(___fttol@lval+3)^(0+256),f
 15244  1ABD  0AA9               	incf	___fttol@lval^(0+256),f
 15245  1ABE  1903               	skipnz
 15246  1ABF  0AAA               	incf	(___fttol@lval+1)^(0+256),f
 15247  1AC0  1903               	skipnz
 15248  1AC1  0AAB               	incf	(___fttol@lval+2)^(0+256),f
 15249  1AC2  1903               	skipnz
 15250  1AC3  0AAC               	incf	(___fttol@lval+3)^(0+256),f
 15251  1AC4                     l7882:	
 15252  1AC4  082C               	movf	(___fttol@lval+3)^(0+256),w
 15253  1AC5  00A3               	movwf	(?___fttol+3)^(0+256)
 15254  1AC6  082B               	movf	(___fttol@lval+2)^(0+256),w
 15255  1AC7  00A2               	movwf	(?___fttol+2)^(0+256)
 15256  1AC8  082A               	movf	(___fttol@lval+1)^(0+256),w
 15257  1AC9  00A1               	movwf	(?___fttol+1)^(0+256)
 15258  1ACA  0829               	movf	___fttol@lval^(0+256),w
 15259  1ACB  00A0               	movwf	?___fttol^(0+256)
 15260  1ACC  0008               	return
 15261  1ACD                     __end_of___fttol:	
 15262                           
 15263                           	psect	text45
 15264  1800                     __ptext45:	
 15265 ;; *************** function ___ftge *****************
 15266 ;; Defined at:
 15267 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 15268 ;; Parameters:    Size  Location     Type
 15269 ;;  ff1             3    0[BANK1 ] float 
 15270 ;;  ff2             3    3[BANK1 ] float 
 15271 ;; Auto vars:     Size  Location     Type
 15272 ;;		None
 15273 ;; Return value:  Size  Location     Type
 15274 ;;		None               void
 15275 ;; Registers used:
 15276 ;;		wreg, status,2, status,0
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15282 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15284 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15285 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15286 ;;Total ram usage:        9 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:    3
 15289 ;; This function calls:
 15290 ;;		Nothing
 15291 ;; This function is called by:
 15292 ;;		_modSin
 15293 ;;		_modTri
 15294 ;;		_modSaw
 15295 ;;		_modSquare
 15296 ;;		_pow
 15297 ;;		_sin
 15298 ;;		_exp
 15299 ;;		_floor
 15300 ;;		_ldexp
 15301 ;;		_log
 15302 ;; This function uses a non-reentrant model
 15303 ;;
 15304                           
 15305                           
 15306                           ;psect for function ___ftge
 15307  1800                     ___ftge:	
 15308                           
 15309                           ;incstack = 0
 15310                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 15311  1800  0021               	movlb	1	; select bank1
 15312  1801  1FA2               	btfss	(___ftge@ff1+2)^(0+128),7
 15313  1802  2817               	goto	l7770
 15314  1803  0920               	comf	___ftge@ff1^(0+128),w
 15315  1804  00A6               	movwf	??___ftge^(0+128)
 15316  1805  0921               	comf	(___ftge@ff1+1)^(0+128),w
 15317  1806  00A7               	movwf	(??___ftge^(0+128)+1)
 15318  1807  0922               	comf	(___ftge@ff1+2)^(0+128),w
 15319  1808  00A8               	movwf	(??___ftge^(0+128)+2)
 15320  1809  0AA6               	incf	??___ftge^(0+128),f
 15321  180A  1903               	skipnz
 15322  180B  0AA7               	incf	(??___ftge^(0+128)+1),f
 15323  180C  1903               	skipnz
 15324  180D  0AA8               	incf	(??___ftge^(0+128)+2),f
 15325  180E  3000               	movlw	0
 15326  180F  0726               	addwf	??___ftge^(0+128),w
 15327  1810  00A0               	movwf	___ftge@ff1^(0+128)
 15328  1811  3000               	movlw	0
 15329  1812  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15330  1813  00A1               	movwf	(___ftge@ff1+1)^(0+128)
 15331  1814  3080               	movlw	128
 15332  1815  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15333  1816  00A2               	movwf	(___ftge@ff1+2)^(0+128)
 15334  1817                     l7770:	
 15335  1817  1FA5               	btfss	(___ftge@ff2+2)^(0+128),7
 15336  1818  282D               	goto	l7774
 15337  1819  0923               	comf	___ftge@ff2^(0+128),w
 15338  181A  00A6               	movwf	??___ftge^(0+128)
 15339  181B  0924               	comf	(___ftge@ff2+1)^(0+128),w
 15340  181C  00A7               	movwf	(??___ftge^(0+128)+1)
 15341  181D  0925               	comf	(___ftge@ff2+2)^(0+128),w
 15342  181E  00A8               	movwf	(??___ftge^(0+128)+2)
 15343  181F  0AA6               	incf	??___ftge^(0+128),f
 15344  1820  1903               	skipnz
 15345  1821  0AA7               	incf	(??___ftge^(0+128)+1),f
 15346  1822  1903               	skipnz
 15347  1823  0AA8               	incf	(??___ftge^(0+128)+2),f
 15348  1824  3000               	movlw	0
 15349  1825  0726               	addwf	??___ftge^(0+128),w
 15350  1826  00A3               	movwf	___ftge@ff2^(0+128)
 15351  1827  3000               	movlw	0
 15352  1828  3D27               	addwfc	(??___ftge+1)^(0+128),w
 15353  1829  00A4               	movwf	(___ftge@ff2+1)^(0+128)
 15354  182A  3080               	movlw	128
 15355  182B  3D28               	addwfc	(??___ftge+2)^(0+128),w
 15356  182C  00A5               	movwf	(___ftge@ff2+2)^(0+128)
 15357  182D                     l7774:	
 15358  182D  3080               	movlw	128
 15359  182E  06A2               	xorwf	(___ftge@ff1+2)^(0+128),f
 15360  182F  3080               	movlw	128
 15361  1830  06A5               	xorwf	(___ftge@ff2+2)^(0+128),f
 15362  1831  0825               	movf	(___ftge@ff2+2)^(0+128),w
 15363  1832  0222               	subwf	(___ftge@ff1+2)^(0+128),w
 15364  1833  1D03               	skipz
 15365  1834  0008               	return
 15366  1835  0824               	movf	(___ftge@ff2+1)^(0+128),w
 15367  1836  0221               	subwf	(___ftge@ff1+1)^(0+128),w
 15368  1837  1D03               	skipz
 15369  1838  0008               	return
 15370  1839  0823               	movf	___ftge@ff2^(0+128),w
 15371  183A  0220               	subwf	___ftge@ff1^(0+128),w
 15372  183B  0008               	return
 15373  183C                     __end_of___ftge:	
 15374                           
 15375                           	psect	text46
 15376  22D3                     __ptext46:	
 15377 ;; *************** function ___altoft *****************
 15378 ;; Defined at:
 15379 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 15380 ;; Parameters:    Size  Location     Type
 15381 ;;  c               4    8[BANK1 ] long 
 15382 ;; Auto vars:     Size  Location     Type
 15383 ;;  sign            1   15[BANK1 ] unsigned char 
 15384 ;;  exp             1   14[BANK1 ] unsigned char 
 15385 ;; Return value:  Size  Location     Type
 15386 ;;                  3    8[BANK1 ] float 
 15387 ;; Registers used:
 15388 ;;		wreg, status,2, status,0, pclath, cstack
 15389 ;; Tracked objects:
 15390 ;;		On entry : 0/0
 15391 ;;		On exit  : 0/0
 15392 ;;		Unchanged: 0/0
 15393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15394 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15395 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15396 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15397 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15398 ;;Total ram usage:        8 bytes
 15399 ;; Hardware stack levels used:    1
 15400 ;; Hardware stack levels required when called:    4
 15401 ;; This function calls:
 15402 ;;		___ftpack
 15403 ;; This function is called by:
 15404 ;;		_getModulationDelayTime
 15405 ;;		_floor
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           
 15410                           ;psect for function ___altoft
 15411  22D3                     ___altoft:	
 15412                           
 15413                           ;incstack = 0
 15414                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15415  22D3  0021               	movlb	1	; select bank1
 15416  22D4  01AF               	clrf	___altoft@sign^(0+128)
 15417  22D5  308E               	movlw	142
 15418  22D6  00AC               	movwf	??___altoft^(0+128)
 15419  22D7  082C               	movf	??___altoft^(0+128),w
 15420  22D8  00AE               	movwf	___altoft@exp^(0+128)
 15421  22D9  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 15422  22DA  2AE8               	goto	l7690
 15423  22DB  09A8               	comf	___altoft@c^(0+128),f
 15424  22DC  09A9               	comf	(___altoft@c+1)^(0+128),f
 15425  22DD  09AA               	comf	(___altoft@c+2)^(0+128),f
 15426  22DE  09AB               	comf	(___altoft@c+3)^(0+128),f
 15427  22DF  0AA8               	incf	___altoft@c^(0+128),f
 15428  22E0  1903               	skipnz
 15429  22E1  0AA9               	incf	(___altoft@c+1)^(0+128),f
 15430  22E2  1903               	skipnz
 15431  22E3  0AAA               	incf	(___altoft@c+2)^(0+128),f
 15432  22E4  1903               	skipnz
 15433  22E5  0AAB               	incf	(___altoft@c+3)^(0+128),f
 15434  22E6  01AF               	clrf	___altoft@sign^(0+128)
 15435  22E7  0AAF               	incf	___altoft@sign^(0+128),f
 15436  22E8                     l7690:	
 15437  22E8  30FF               	movlw	255
 15438  22E9  052B               	andwf	(___altoft@c+3)^(0+128),w
 15439  22EA  1903               	btfsc	3,2
 15440  22EB  2AF8               	goto	l7692
 15441  22EC  3001               	movlw	1
 15442  22ED                     u7785:	
 15443  22ED  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 15444  22EE  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 15445  22EF  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 15446  22F0  0CA8               	rrf	___altoft@c^(0+128),f
 15447  22F1  0B89               	decfsz	9,f
 15448  22F2  2AED               	goto	u7785
 15449  22F3  3001               	movlw	1
 15450  22F4  00AC               	movwf	??___altoft^(0+128)
 15451  22F5  082C               	movf	??___altoft^(0+128),w
 15452  22F6  07AE               	addwf	___altoft@exp^(0+128),f
 15453  22F7  2AE8               	goto	l7690
 15454  22F8                     l7692:	
 15455  22F8  0828               	movf	___altoft@c^(0+128),w
 15456  22F9  00A0               	movwf	___ftpack@arg^(0+128)
 15457  22FA  0829               	movf	(___altoft@c+1)^(0+128),w
 15458  22FB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15459  22FC  082A               	movf	(___altoft@c+2)^(0+128),w
 15460  22FD  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15461  22FE  082E               	movf	___altoft@exp^(0+128),w
 15462  22FF  00AC               	movwf	??___altoft^(0+128)
 15463  2300  082C               	movf	??___altoft^(0+128),w
 15464  2301  00A3               	movwf	___ftpack@exp^(0+128)
 15465  2302  082F               	movf	___altoft@sign^(0+128),w
 15466  2303  00AD               	movwf	(??___altoft+1)^(0+128)
 15467  2304  082D               	movf	(??___altoft+1)^(0+128),w
 15468  2305  00A4               	movwf	___ftpack@sign^(0+128)
 15469  2306  31A6  26B3         	fcall	___ftpack
 15470  2308  0021               	movlb	1	; select bank1
 15471  2309  0820               	movf	?___ftpack^(0+128),w
 15472  230A  00A8               	movwf	?___altoft^(0+128)
 15473  230B  0821               	movf	(?___ftpack+1)^(0+128),w
 15474  230C  00A9               	movwf	(?___altoft+1)^(0+128)
 15475  230D  0822               	movf	(?___ftpack+2)^(0+128),w
 15476  230E  00AA               	movwf	(?___altoft+2)^(0+128)
 15477  230F  0008               	return
 15478  2310                     __end_of___altoft:	
 15479                           
 15480                           	psect	text47
 15481  2718                     __ptext47:	
 15482 ;; *************** function _eval_poly *****************
 15483 ;; Defined at:
 15484 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;  x               3   20[BANK2 ] float 
 15487 ;;  d               2   23[BANK2 ] PTR const 
 15488 ;;		 -> log@coeff(27), exp@coeff(30), sin@coeff_a(15), sin@coeff_b(12), 
 15489 ;;  n               2   25[BANK2 ] int 
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;  res             3   27[BANK2 ] int 
 15492 ;; Return value:  Size  Location     Type
 15493 ;;                  3   20[BANK2 ] int 
 15494 ;; Registers used:
 15495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15501 ;;      Params:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15502 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15504 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15505 ;;Total ram usage:       10 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; Hardware stack levels required when called:    5
 15508 ;; This function calls:
 15509 ;;		___ftadd
 15510 ;;		___ftmul
 15511 ;;		___wmul
 15512 ;; This function is called by:
 15513 ;;		_sin
 15514 ;;		_exp
 15515 ;;		_log
 15516 ;; This function uses a non-reentrant model
 15517 ;;
 15518                           
 15519                           
 15520                           ;psect for function _eval_poly
 15521  2718                     _eval_poly:	
 15522                           
 15523                           ;incstack = 0
 15524                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15525  2718  0022               	movlb	2	; select bank2
 15526  2719  083A               	movf	(eval_poly@n+1)^(0+256),w
 15527  271A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15528  271B  0839               	movf	eval_poly@n^(0+256),w
 15529  271C  00AE               	movwf	___wmul@multiplier^(0+256)
 15530  271D  3003               	movlw	3
 15531  271E  00B0               	movwf	___wmul@multiplicand^(0+256)
 15532  271F  3000               	movlw	0
 15533  2720  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15534  2721  31AF  27C8  31A7   	fcall	___wmul
 15535  2724  0022               	movlb	2	; select bank2
 15536  2725  0837               	movf	eval_poly@d^(0+256),w
 15537  2726  072E               	addwf	?___wmul^(0+256),w
 15538  2727  0084               	movwf	4
 15539  2728  0838               	movf	(eval_poly@d+1)^(0+256),w
 15540  2729  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15541  272A  0085               	movwf	5
 15542  272B  3F00               	moviw [0]fsr0
 15543  272C  00BB               	movwf	eval_poly@res^(0+256)
 15544  272D  3F01               	moviw [1]fsr0
 15545  272E  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15546  272F  3F02               	moviw [2]fsr0
 15547  2730                     L20:	
 15548  2730  00BD               	movwf	(eval_poly@res+2)^(0+256)
 15549  2731  0839               	movf	eval_poly@n^(0+256),w
 15550  2732  043A               	iorwf	(eval_poly@n+1)^(0+256),w
 15551  2733  1903               	btfsc	3,2
 15552  2734  2F83               	goto	l8052
 15553  2735  30FF               	movlw	255
 15554  2736  07B9               	addwf	eval_poly@n^(0+256),f
 15555  2737  30FF               	movlw	255
 15556  2738  3DBA               	addwfc	(eval_poly@n+1)^(0+256),f
 15557  2739  083A               	movf	(eval_poly@n+1)^(0+256),w
 15558  273A  00AF               	movwf	(___wmul@multiplier+1)^(0+256)
 15559  273B  0839               	movf	eval_poly@n^(0+256),w
 15560  273C  00AE               	movwf	___wmul@multiplier^(0+256)
 15561  273D  3003               	movlw	3
 15562  273E  00B0               	movwf	___wmul@multiplicand^(0+256)
 15563  273F  3000               	movlw	0
 15564  2740  00B1               	movwf	(___wmul@multiplicand^(0+256)+1)
 15565  2741  31AF  27C8  31A7   	fcall	___wmul
 15566  2744  0022               	movlb	2	; select bank2
 15567  2745  0837               	movf	eval_poly@d^(0+256),w
 15568  2746  072E               	addwf	?___wmul^(0+256),w
 15569  2747  0084               	movwf	4
 15570  2748  0838               	movf	(eval_poly@d+1)^(0+256),w
 15571  2749  3D2F               	addwfc	(?___wmul+1)^(0+256),w
 15572  274A  0085               	movwf	5
 15573  274B  3F00               	moviw [0]fsr0
 15574  274C  0021               	movlb	1	; select bank1
 15575  274D  00C1               	movwf	___ftadd@f1^(0+128)
 15576  274E  3F01               	moviw [1]fsr0
 15577  274F  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 15578  2750  3F02               	moviw [2]fsr0
 15579  2751  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 15580  2752  0022               	movlb	2	; select bank2
 15581  2753  083B               	movf	eval_poly@res^(0+256),w
 15582  2754  0021               	movlb	1	; select bank1
 15583  2755  00AE               	movwf	___ftmul@f1^(0+128)
 15584  2756  0022               	movlb	2	; select bank2
 15585  2757  083C               	movf	(eval_poly@res+1)^(0+256),w
 15586  2758  0021               	movlb	1	; select bank1
 15587  2759  00AF               	movwf	(___ftmul@f1+1)^(0+128)
 15588  275A  0022               	movlb	2	; select bank2
 15589  275B  083D               	movf	(eval_poly@res+2)^(0+256),w
 15590  275C  0021               	movlb	1	; select bank1
 15591  275D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
 15592  275E  0022               	movlb	2	; select bank2
 15593  275F  0834               	movf	eval_poly@x^(0+256),w
 15594  2760  0021               	movlb	1	; select bank1
 15595  2761  00B1               	movwf	___ftmul@f2^(0+128)
 15596  2762  0022               	movlb	2	; select bank2
 15597  2763  0835               	movf	(eval_poly@x+1)^(0+256),w
 15598  2764  0021               	movlb	1	; select bank1
 15599  2765  00B2               	movwf	(___ftmul@f2+1)^(0+128)
 15600  2766  0022               	movlb	2	; select bank2
 15601  2767  0836               	movf	(eval_poly@x+2)^(0+256),w
 15602  2768  0021               	movlb	1	; select bank1
 15603  2769  00B3               	movwf	(___ftmul@f2+2)^(0+128)
 15604  276A  319E  267B  31A7   	fcall	___ftmul
 15605  276D  0021               	movlb	1	; select bank1
 15606  276E  082E               	movf	?___ftmul^(0+128),w
 15607  276F  00C4               	movwf	___ftadd@f2^(0+128)
 15608  2770  082F               	movf	(?___ftmul+1)^(0+128),w
 15609  2771  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 15610  2772  0830               	movf	(?___ftmul+2)^(0+128),w
 15611  2773  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 15612  2774  3190  201F  31A7   	fcall	___ftadd
 15613  2777  0021               	movlb	1	; select bank1
 15614  2778  0841               	movf	?___ftadd^(0+128),w
 15615  2779  0022               	movlb	2	; select bank2
 15616  277A  00BB               	movwf	eval_poly@res^(0+256)
 15617  277B  0021               	movlb	1	; select bank1
 15618  277C  0842               	movf	(?___ftadd+1)^(0+128),w
 15619  277D  0022               	movlb	2	; select bank2
 15620  277E  00BC               	movwf	(eval_poly@res+1)^(0+256)
 15621  277F  0021               	movlb	1	; select bank1
 15622  2780  0843               	movf	(?___ftadd+2)^(0+128),w
 15623  2781  0022               	movlb	2	; select bank2
 15624  2782  2F30               	goto	L20
 15625  2783                     l8052:	
 15626  2783  083B               	movf	eval_poly@res^(0+256),w
 15627  2784  00B4               	movwf	?_eval_poly^(0+256)
 15628  2785  083C               	movf	(eval_poly@res+1)^(0+256),w
 15629  2786  00B5               	movwf	(?_eval_poly+1)^(0+256)
 15630  2787  083D               	movf	(eval_poly@res+2)^(0+256),w
 15631  2788  00B6               	movwf	(?_eval_poly+2)^(0+256)
 15632  2789  0008               	return
 15633  278A                     __end_of_eval_poly:	
 15634                           
 15635                           	psect	text48
 15636  2FC8                     __ptext48:	
 15637 ;; *************** function ___wmul *****************
 15638 ;; Defined at:
 15639 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 15640 ;; Parameters:    Size  Location     Type
 15641 ;;  multiplier      2   14[BANK2 ] unsigned int 
 15642 ;;  multiplicand    2   16[BANK2 ] unsigned int 
 15643 ;; Auto vars:     Size  Location     Type
 15644 ;;  product         2   18[BANK2 ] unsigned int 
 15645 ;; Return value:  Size  Location     Type
 15646 ;;                  2   14[BANK2 ] unsigned int 
 15647 ;; Registers used:
 15648 ;;		wreg, status,2, status,0
 15649 ;; Tracked objects:
 15650 ;;		On entry : 0/0
 15651 ;;		On exit  : 0/0
 15652 ;;		Unchanged: 0/0
 15653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15654 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15655 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15657 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15658 ;;Total ram usage:        6 bytes
 15659 ;; Hardware stack levels used:    1
 15660 ;; Hardware stack levels required when called:    3
 15661 ;; This function calls:
 15662 ;;		Nothing
 15663 ;; This function is called by:
 15664 ;;		_calcSinArray
 15665 ;;		_updateModulationArray
 15666 ;;		_modSin
 15667 ;;		_eval_poly
 15668 ;; This function uses a non-reentrant model
 15669 ;;
 15670                           
 15671                           
 15672                           ;psect for function ___wmul
 15673  2FC8                     ___wmul:	
 15674                           
 15675                           ;incstack = 0
 15676                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15677  2FC8  0022               	movlb	2	; select bank2
 15678  2FC9  01B2               	clrf	___wmul@product^(0+256)
 15679  2FCA  01B3               	clrf	(___wmul@product+1)^(0+256)
 15680  2FCB                     l7668:	
 15681  2FCB  1C2E               	btfss	___wmul@multiplier^(0+256),0
 15682  2FCC  2FD1               	goto	l1952
 15683  2FCD  0830               	movf	___wmul@multiplicand^(0+256),w
 15684  2FCE  07B2               	addwf	___wmul@product^(0+256),f
 15685  2FCF  0831               	movf	(___wmul@multiplicand+1)^(0+256),w
 15686  2FD0  3DB3               	addwfc	(___wmul@product+1)^(0+256),f
 15687  2FD1                     l1952:	
 15688  2FD1  3001               	movlw	1
 15689  2FD2                     u7745:	
 15690  2FD2  35B0               	lslf	___wmul@multiplicand^(0+256),f
 15691  2FD3  0DB1               	rlf	(___wmul@multiplicand+1)^(0+256),f
 15692  2FD4  0B89               	decfsz	9,f
 15693  2FD5  2FD2               	goto	u7745
 15694  2FD6  3001               	movlw	1
 15695  2FD7                     u7755:	
 15696  2FD7  36AF               	lsrf	(___wmul@multiplier+1)^(0+256),f
 15697  2FD8  0CAE               	rrf	___wmul@multiplier^(0+256),f
 15698  2FD9  0B89               	decfsz	9,f
 15699  2FDA  2FD7               	goto	u7755
 15700  2FDB  082E               	movf	___wmul@multiplier^(0+256),w
 15701  2FDC  042F               	iorwf	(___wmul@multiplier+1)^(0+256),w
 15702  2FDD  1D03               	btfss	3,2
 15703  2FDE  2FCB               	goto	l7668
 15704  2FDF  0833               	movf	(___wmul@product+1)^(0+256),w
 15705  2FE0  00AF               	movwf	(?___wmul+1)^(0+256)
 15706  2FE1  0832               	movf	___wmul@product^(0+256),w
 15707  2FE2  00AE               	movwf	?___wmul^(0+256)
 15708  2FE3  0008               	return
 15709  2FE4                     __end_of___wmul:	
 15710                           
 15711                           	psect	text49
 15712  1E7B                     __ptext49:	
 15713 ;; *************** function ___ftmul *****************
 15714 ;; Defined at:
 15715 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 15716 ;; Parameters:    Size  Location     Type
 15717 ;;  f1              3   14[BANK1 ] float 
 15718 ;;  f2              3   17[BANK1 ] float 
 15719 ;; Auto vars:     Size  Location     Type
 15720 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
 15721 ;;  sign            1   29[BANK1 ] unsigned char 
 15722 ;;  cntr            1   28[BANK1 ] unsigned char 
 15723 ;;  exp             1   24[BANK1 ] unsigned char 
 15724 ;; Return value:  Size  Location     Type
 15725 ;;                  3   14[BANK1 ] float 
 15726 ;; Registers used:
 15727 ;;		wreg, status,2, status,0, pclath, cstack
 15728 ;; Tracked objects:
 15729 ;;		On entry : 0/0
 15730 ;;		On exit  : 0/0
 15731 ;;		Unchanged: 0/0
 15732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15733 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15734 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15735 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15736 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15737 ;;Total ram usage:       16 bytes
 15738 ;; Hardware stack levels used:    1
 15739 ;; Hardware stack levels required when called:    4
 15740 ;; This function calls:
 15741 ;;		___ftpack
 15742 ;; This function is called by:
 15743 ;;		_set_subdivision
 15744 ;;		_map
 15745 ;;		_scaleA100kPot
 15746 ;;		_scaleA10kPot
 15747 ;;		_scaleiA10kPot
 15748 ;;		_calcSinArray
 15749 ;;		_modSin
 15750 ;;		_modTri
 15751 ;;		_modSaw
 15752 ;;		_pow
 15753 ;;		_sin
 15754 ;;		_eval_poly
 15755 ;;		_exp
 15756 ;;		_log
 15757 ;;		_scalePotValue
 15758 ;;		_scaleiA100kPot
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function ___ftmul
 15764  1E7B                     ___ftmul:	
 15765                           
 15766                           ;incstack = 0
 15767                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15768  1E7B  0021               	movlb	1	; select bank1
 15769  1E7C  082E               	movf	___ftmul@f1^(0+128),w
 15770  1E7D  00B4               	movwf	??___ftmul^(0+128)
 15771  1E7E  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15772  1E7F  00B5               	movwf	(??___ftmul^(0+128)+1)
 15773  1E80  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15774  1E81  00B6               	movwf	(??___ftmul^(0+128)+2)
 15775  1E82  1003               	clrc
 15776  1E83  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15777  1E84  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15778  1E85  00B7               	movwf	(??___ftmul+3)^(0+128)
 15779  1E86  0837               	movf	(??___ftmul+3)^(0+128),w
 15780  1E87  00B8               	movwf	___ftmul@exp^(0+128)
 15781  1E88  0838               	movf	___ftmul@exp^(0+128),w
 15782  1E89  1D03               	btfss	3,2
 15783  1E8A  2E92               	goto	l7792
 15784  1E8B  3000               	movlw	0
 15785  1E8C  00AE               	movwf	?___ftmul^(0+128)
 15786  1E8D  3000               	movlw	0
 15787  1E8E  00AF               	movwf	(?___ftmul+1)^(0+128)
 15788  1E8F  3000               	movlw	0
 15789  1E90  00B0               	movwf	(?___ftmul+2)^(0+128)
 15790  1E91  0008               	return
 15791  1E92                     l7792:	
 15792  1E92  0831               	movf	___ftmul@f2^(0+128),w
 15793  1E93  00B4               	movwf	??___ftmul^(0+128)
 15794  1E94  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15795  1E95  00B5               	movwf	(??___ftmul^(0+128)+1)
 15796  1E96  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15797  1E97  00B6               	movwf	(??___ftmul^(0+128)+2)
 15798  1E98  1003               	clrc
 15799  1E99  0D35               	rlf	(??___ftmul^(0+128)+1),w
 15800  1E9A  0D36               	rlf	(??___ftmul^(0+128)+2),w
 15801  1E9B  00B7               	movwf	(??___ftmul+3)^(0+128)
 15802  1E9C  0837               	movf	(??___ftmul+3)^(0+128),w
 15803  1E9D  00BD               	movwf	___ftmul@sign^(0+128)
 15804  1E9E  083D               	movf	___ftmul@sign^(0+128),w
 15805  1E9F  1D03               	btfss	3,2
 15806  1EA0  2EA8               	goto	l7798
 15807  1EA1  3000               	movlw	0
 15808  1EA2  00AE               	movwf	?___ftmul^(0+128)
 15809  1EA3  3000               	movlw	0
 15810  1EA4  00AF               	movwf	(?___ftmul+1)^(0+128)
 15811  1EA5  3000               	movlw	0
 15812  1EA6  00B0               	movwf	(?___ftmul+2)^(0+128)
 15813  1EA7  0008               	return
 15814  1EA8                     l7798:	
 15815  1EA8  083D               	movf	___ftmul@sign^(0+128),w
 15816  1EA9  3E7B               	addlw	123
 15817  1EAA  00B4               	movwf	??___ftmul^(0+128)
 15818  1EAB  0834               	movf	??___ftmul^(0+128),w
 15819  1EAC  07B8               	addwf	___ftmul@exp^(0+128),f
 15820  1EAD  082E               	movf	___ftmul@f1^(0+128),w
 15821  1EAE  00B4               	movwf	??___ftmul^(0+128)
 15822  1EAF  082F               	movf	(___ftmul@f1+1)^(0+128),w
 15823  1EB0  00B5               	movwf	(??___ftmul^(0+128)+1)
 15824  1EB1  0830               	movf	(___ftmul@f1+2)^(0+128),w
 15825  1EB2  00B6               	movwf	(??___ftmul^(0+128)+2)
 15826  1EB3  3010               	movlw	16
 15827  1EB4                     u8085:	
 15828  1EB4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15829  1EB5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15830  1EB6  0CB4               	rrf	??___ftmul^(0+128),f
 15831  1EB7  0B89               	decfsz	9,f
 15832  1EB8  2EB4               	goto	u8085
 15833  1EB9  0834               	movf	??___ftmul^(0+128),w
 15834  1EBA  00B7               	movwf	(??___ftmul+3)^(0+128)
 15835  1EBB  0837               	movf	(??___ftmul+3)^(0+128),w
 15836  1EBC  00BD               	movwf	___ftmul@sign^(0+128)
 15837  1EBD  0831               	movf	___ftmul@f2^(0+128),w
 15838  1EBE  00B4               	movwf	??___ftmul^(0+128)
 15839  1EBF  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15840  1EC0  00B5               	movwf	(??___ftmul^(0+128)+1)
 15841  1EC1  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15842  1EC2  00B6               	movwf	(??___ftmul^(0+128)+2)
 15843  1EC3  3010               	movlw	16
 15844  1EC4                     u8095:	
 15845  1EC4  36B6               	lsrf	(??___ftmul^(0+128)+2),f
 15846  1EC5  0CB5               	rrf	(??___ftmul^(0+128)+1),f
 15847  1EC6  0CB4               	rrf	??___ftmul^(0+128),f
 15848  1EC7  0B89               	decfsz	9,f
 15849  1EC8  2EC4               	goto	u8095
 15850  1EC9  0834               	movf	??___ftmul^(0+128),w
 15851  1ECA  00B7               	movwf	(??___ftmul+3)^(0+128)
 15852  1ECB  0837               	movf	(??___ftmul+3)^(0+128),w
 15853  1ECC  06BD               	xorwf	___ftmul@sign^(0+128),f
 15854  1ECD  3080               	movlw	128
 15855  1ECE  00B4               	movwf	??___ftmul^(0+128)
 15856  1ECF  0834               	movf	??___ftmul^(0+128),w
 15857  1ED0  05BD               	andwf	___ftmul@sign^(0+128),f
 15858  1ED1  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
 15859  1ED2  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
 15860  1ED3  30FF               	movlw	255
 15861  1ED4  05B1               	andwf	___ftmul@f2^(0+128),f
 15862  1ED5  30FF               	movlw	255
 15863  1ED6  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
 15864  1ED7  3000               	movlw	0
 15865  1ED8  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
 15866  1ED9  3000               	movlw	0
 15867  1EDA  00B9               	movwf	___ftmul@f3_as_product^(0+128)
 15868  1EDB  3000               	movlw	0
 15869  1EDC  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 15870  1EDD  3000               	movlw	0
 15871  1EDE  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 15872  1EDF  3007               	movlw	7
 15873  1EE0  00B4               	movwf	??___ftmul^(0+128)
 15874  1EE1  0834               	movf	??___ftmul^(0+128),w
 15875  1EE2  00BC               	movwf	___ftmul@cntr^(0+128)
 15876  1EE3                     l7810:	
 15877  1EE3  1C2E               	btfss	___ftmul@f1^(0+128),0
 15878  1EE4  2EEB               	goto	l7814
 15879  1EE5  0831               	movf	___ftmul@f2^(0+128),w
 15880  1EE6  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 15881  1EE7  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15882  1EE8  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 15883  1EE9  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15884  1EEA  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 15885  1EEB                     l7814:	
 15886  1EEB  3001               	movlw	1
 15887  1EEC                     u8115:	
 15888  1EEC  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 15889  1EED  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 15890  1EEE  0CAE               	rrf	___ftmul@f1^(0+128),f
 15891  1EEF  0B89               	decfsz	9,f
 15892  1EF0  2EEC               	goto	u8115
 15893  1EF1  3001               	movlw	1
 15894  1EF2                     u8125:	
 15895  1EF2  35B1               	lslf	___ftmul@f2^(0+128),f
 15896  1EF3  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
 15897  1EF4  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
 15898  1EF5  0B89               	decfsz	9,f
 15899  1EF6  2EF2               	goto	u8125
 15900  1EF7  3001               	movlw	1
 15901  1EF8  02BC               	subwf	___ftmul@cntr^(0+128),f
 15902  1EF9  1D03               	btfss	3,2
 15903  1EFA  2EE3               	goto	l7810
 15904  1EFB  3009               	movlw	9
 15905  1EFC  00B4               	movwf	??___ftmul^(0+128)
 15906  1EFD  0834               	movf	??___ftmul^(0+128),w
 15907  1EFE  00BC               	movwf	___ftmul@cntr^(0+128)
 15908  1EFF                     l7822:	
 15909  1EFF  1C2E               	btfss	___ftmul@f1^(0+128),0
 15910  1F00  2F07               	goto	l7826
 15911  1F01  0831               	movf	___ftmul@f2^(0+128),w
 15912  1F02  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
 15913  1F03  0832               	movf	(___ftmul@f2+1)^(0+128),w
 15914  1F04  3DBA               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 15915  1F05  0833               	movf	(___ftmul@f2+2)^(0+128),w
 15916  1F06  3DBB               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 15917  1F07                     l7826:	
 15918  1F07  3001               	movlw	1
 15919  1F08                     u8155:	
 15920  1F08  36B0               	lsrf	(___ftmul@f1+2)^(0+128),f
 15921  1F09  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
 15922  1F0A  0CAE               	rrf	___ftmul@f1^(0+128),f
 15923  1F0B  0B89               	decfsz	9,f
 15924  1F0C  2F08               	goto	u8155
 15925  1F0D  3001               	movlw	1
 15926  1F0E                     u8165:	
 15927  1F0E  36BB               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 15928  1F0F  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 15929  1F10  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
 15930  1F11  0B89               	decfsz	9,f
 15931  1F12  2F0E               	goto	u8165
 15932  1F13  3001               	movlw	1
 15933  1F14  02BC               	subwf	___ftmul@cntr^(0+128),f
 15934  1F15  1D03               	btfss	3,2
 15935  1F16  2EFF               	goto	l7822
 15936  1F17  0839               	movf	___ftmul@f3_as_product^(0+128),w
 15937  1F18  00A0               	movwf	___ftpack@arg^(0+128)
 15938  1F19  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 15939  1F1A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 15940  1F1B  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 15941  1F1C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 15942  1F1D  0838               	movf	___ftmul@exp^(0+128),w
 15943  1F1E  00B4               	movwf	??___ftmul^(0+128)
 15944  1F1F  0834               	movf	??___ftmul^(0+128),w
 15945  1F20  00A3               	movwf	___ftpack@exp^(0+128)
 15946  1F21  083D               	movf	___ftmul@sign^(0+128),w
 15947  1F22  00B5               	movwf	(??___ftmul+1)^(0+128)
 15948  1F23  0835               	movf	(??___ftmul+1)^(0+128),w
 15949  1F24  00A4               	movwf	___ftpack@sign^(0+128)
 15950  1F25  31A6  26B3         	fcall	___ftpack
 15951  1F27  0021               	movlb	1	; select bank1
 15952  1F28  0820               	movf	?___ftpack^(0+128),w
 15953  1F29  00AE               	movwf	?___ftmul^(0+128)
 15954  1F2A  0821               	movf	(?___ftpack+1)^(0+128),w
 15955  1F2B  00AF               	movwf	(?___ftmul+1)^(0+128)
 15956  1F2C  0822               	movf	(?___ftpack+2)^(0+128),w
 15957  1F2D  00B0               	movwf	(?___ftmul+2)^(0+128)
 15958  1F2E  0008               	return
 15959  1F2F                     __end_of___ftmul:	
 15960                           
 15961                           	psect	text50
 15962  0800                     __ptext50:	
 15963 ;; *************** function ___ftsub *****************
 15964 ;; Defined at:
 15965 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 15966 ;; Parameters:    Size  Location     Type
 15967 ;;  f2              3   23[BANK2 ] float 
 15968 ;;  f1              3   26[BANK2 ] float 
 15969 ;; Auto vars:     Size  Location     Type
 15970 ;;		None
 15971 ;; Return value:  Size  Location     Type
 15972 ;;                  3   23[BANK2 ] float 
 15973 ;; Registers used:
 15974 ;;		wreg, status,2, status,0, pclath, cstack
 15975 ;; Tracked objects:
 15976 ;;		On entry : 0/0
 15977 ;;		On exit  : 0/0
 15978 ;;		Unchanged: 0/0
 15979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 15980 ;;      Params:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15983 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 15984 ;;Total ram usage:        6 bytes
 15985 ;; Hardware stack levels used:    1
 15986 ;; Hardware stack levels required when called:    5
 15987 ;; This function calls:
 15988 ;;		___ftadd
 15989 ;; This function is called by:
 15990 ;;		_sin
 15991 ;;		_exp
 15992 ;; This function uses a non-reentrant model
 15993 ;;
 15994                           
 15995                           
 15996                           ;psect for function ___ftsub
 15997  0800                     ___ftsub:	
 15998                           
 15999                           ;incstack = 0
 16000                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 16001  0800  0022               	movlb	2	; select bank2
 16002  0801  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16003  0802  0438               	iorwf	(___ftsub@f2+1)^(0+256),w
 16004  0803  0437               	iorwf	___ftsub@f2^(0+256),w
 16005  0804  1903               	skipnz
 16006  0805  2808               	goto	l8014
 16007  0806  3080               	movlw	128
 16008  0807  06B9               	xorwf	(___ftsub@f2+2)^(0+256),f
 16009  0808                     l8014:	
 16010  0808  083A               	movf	___ftsub@f1^(0+256),w
 16011  0809  0021               	movlb	1	; select bank1
 16012  080A  00C1               	movwf	___ftadd@f1^(0+128)
 16013  080B  0022               	movlb	2	; select bank2
 16014  080C  083B               	movf	(___ftsub@f1+1)^(0+256),w
 16015  080D  0021               	movlb	1	; select bank1
 16016  080E  00C2               	movwf	(___ftadd@f1+1)^(0+128)
 16017  080F  0022               	movlb	2	; select bank2
 16018  0810  083C               	movf	(___ftsub@f1+2)^(0+256),w
 16019  0811  0021               	movlb	1	; select bank1
 16020  0812  00C3               	movwf	(___ftadd@f1+2)^(0+128)
 16021  0813  0022               	movlb	2	; select bank2
 16022  0814  0837               	movf	___ftsub@f2^(0+256),w
 16023  0815  0021               	movlb	1	; select bank1
 16024  0816  00C4               	movwf	___ftadd@f2^(0+128)
 16025  0817  0022               	movlb	2	; select bank2
 16026  0818  0838               	movf	(___ftsub@f2+1)^(0+256),w
 16027  0819  0021               	movlb	1	; select bank1
 16028  081A  00C5               	movwf	(___ftadd@f2+1)^(0+128)
 16029  081B  0022               	movlb	2	; select bank2
 16030  081C  0839               	movf	(___ftsub@f2+2)^(0+256),w
 16031  081D  0021               	movlb	1	; select bank1
 16032  081E  00C6               	movwf	(___ftadd@f2+2)^(0+128)
 16033  081F  3190  201F         	fcall	___ftadd
 16034  0821  0021               	movlb	1	; select bank1
 16035  0822  0841               	movf	?___ftadd^(0+128),w
 16036  0823  0022               	movlb	2	; select bank2
 16037  0824  00B7               	movwf	?___ftsub^(0+256)
 16038  0825  0021               	movlb	1	; select bank1
 16039  0826  0842               	movf	(?___ftadd+1)^(0+128),w
 16040  0827  0022               	movlb	2	; select bank2
 16041  0828  00B8               	movwf	(?___ftsub+1)^(0+256)
 16042  0829  0021               	movlb	1	; select bank1
 16043  082A  0843               	movf	(?___ftadd+2)^(0+128),w
 16044  082B  0022               	movlb	2	; select bank2
 16045  082C  00B9               	movwf	(?___ftsub+2)^(0+256)
 16046  082D  0008               	return
 16047  082E                     __end_of___ftsub:	
 16048                           
 16049                           	psect	text51
 16050  101F                     __ptext51:	
 16051 ;; *************** function ___ftadd *****************
 16052 ;; Defined at:
 16053 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  f1              3   33[BANK1 ] float 
 16056 ;;  f2              3   36[BANK1 ] float 
 16057 ;; Auto vars:     Size  Location     Type
 16058 ;;  exp1            1   45[BANK1 ] unsigned char 
 16059 ;;  exp2            1   44[BANK1 ] unsigned char 
 16060 ;;  sign            1   43[BANK1 ] unsigned char 
 16061 ;; Return value:  Size  Location     Type
 16062 ;;                  3   33[BANK1 ] float 
 16063 ;; Registers used:
 16064 ;;		wreg, status,2, status,0, pclath, cstack
 16065 ;; Tracked objects:
 16066 ;;		On entry : 0/0
 16067 ;;		On exit  : 0/0
 16068 ;;		Unchanged: 0/0
 16069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16070 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16071 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16072 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16073 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16074 ;;Total ram usage:       13 bytes
 16075 ;; Hardware stack levels used:    1
 16076 ;; Hardware stack levels required when called:    4
 16077 ;; This function calls:
 16078 ;;		___ftpack
 16079 ;; This function is called by:
 16080 ;;		_map
 16081 ;;		_scaleiA10kPot
 16082 ;;		_modSin
 16083 ;;		_modTri
 16084 ;;		_modSaw
 16085 ;;		___ftsub
 16086 ;;		_sin
 16087 ;;		_eval_poly
 16088 ;;		_floor
 16089 ;;		_log
 16090 ;;		_scalePotValue
 16091 ;; This function uses a non-reentrant model
 16092 ;;
 16093                           
 16094                           
 16095                           ;psect for function ___ftadd
 16096  101F                     ___ftadd:	
 16097                           
 16098                           ;incstack = 0
 16099                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16100  101F  0021               	movlb	1	; select bank1
 16101  1020  0841               	movf	___ftadd@f1^(0+128),w
 16102  1021  00C7               	movwf	??___ftadd^(0+128)
 16103  1022  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16104  1023  00C8               	movwf	(??___ftadd^(0+128)+1)
 16105  1024  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16106  1025  00C9               	movwf	(??___ftadd^(0+128)+2)
 16107  1026  1003               	clrc
 16108  1027  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16109  1028  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16110  1029  00CA               	movwf	(??___ftadd+3)^(0+128)
 16111  102A  084A               	movf	(??___ftadd+3)^(0+128),w
 16112  102B  00CD               	movwf	___ftadd@exp1^(0+128)
 16113  102C  0844               	movf	___ftadd@f2^(0+128),w
 16114  102D  00C7               	movwf	??___ftadd^(0+128)
 16115  102E  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16116  102F  00C8               	movwf	(??___ftadd^(0+128)+1)
 16117  1030  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16118  1031  00C9               	movwf	(??___ftadd^(0+128)+2)
 16119  1032  1003               	clrc
 16120  1033  0D48               	rlf	(??___ftadd^(0+128)+1),w
 16121  1034  0D49               	rlf	(??___ftadd^(0+128)+2),w
 16122  1035  00CA               	movwf	(??___ftadd+3)^(0+128)
 16123  1036  084A               	movf	(??___ftadd+3)^(0+128),w
 16124  1037  00CC               	movwf	___ftadd@exp2^(0+128)
 16125  1038  084D               	movf	___ftadd@exp1^(0+128),w
 16126  1039  1903               	btfsc	3,2
 16127  103A  2847               	goto	l7702
 16128  103B  084C               	movf	___ftadd@exp2^(0+128),w
 16129  103C  024D               	subwf	___ftadd@exp1^(0+128),w
 16130  103D  1803               	skipnc
 16131  103E  284E               	goto	l7706
 16132  103F  034D               	decf	___ftadd@exp1^(0+128),w
 16133  1040  3AFF               	xorlw	255
 16134  1041  074C               	addwf	___ftadd@exp2^(0+128),w
 16135  1042  00C7               	movwf	??___ftadd^(0+128)
 16136  1043  3019               	movlw	25
 16137  1044  0247               	subwf	??___ftadd^(0+128),w
 16138  1045  1C03               	skipc
 16139  1046  284E               	goto	l7706
 16140  1047                     l7702:	
 16141  1047  0844               	movf	___ftadd@f2^(0+128),w
 16142  1048  00C1               	movwf	?___ftadd^(0+128)
 16143  1049  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16144  104A  00C2               	movwf	(?___ftadd+1)^(0+128)
 16145  104B  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16146  104C  00C3               	movwf	(?___ftadd+2)^(0+128)
 16147  104D  0008               	return
 16148  104E                     l7706:	
 16149  104E  084C               	movf	___ftadd@exp2^(0+128),w
 16150  104F  1903               	btfsc	3,2
 16151  1050  0008               	return
 16152  1051  084D               	movf	___ftadd@exp1^(0+128),w
 16153  1052  024C               	subwf	___ftadd@exp2^(0+128),w
 16154  1053  1803               	skipnc
 16155  1054  285D               	goto	l7712
 16156  1055  034C               	decf	___ftadd@exp2^(0+128),w
 16157  1056  3AFF               	xorlw	255
 16158  1057  074D               	addwf	___ftadd@exp1^(0+128),w
 16159  1058  00C7               	movwf	??___ftadd^(0+128)
 16160  1059  3019               	movlw	25
 16161  105A  0247               	subwf	??___ftadd^(0+128),w
 16162  105B  1803               	btfsc	3,0
 16163  105C  0008               	return
 16164  105D                     l7712:	
 16165  105D  3006               	movlw	6
 16166  105E  00C7               	movwf	??___ftadd^(0+128)
 16167  105F  0847               	movf	??___ftadd^(0+128),w
 16168  1060  00CB               	movwf	___ftadd@sign^(0+128)
 16169  1061  1BC3               	btfsc	(___ftadd@f1+2)^(0+128),7
 16170  1062  17CB               	bsf	___ftadd@sign^(0+128),7
 16171  1063  1BC6               	btfsc	(___ftadd@f2+2)^(0+128),7
 16172  1064  174B               	bsf	___ftadd@sign^(0+128),6
 16173  1065  17C2               	bsf	(___ftadd@f1^(0+128)+1),7
 16174  1066  30FF               	movlw	255
 16175  1067  05C1               	andwf	___ftadd@f1^(0+128),f
 16176  1068  30FF               	movlw	255
 16177  1069  05C2               	andwf	(___ftadd@f1+1)^(0+128),f
 16178  106A  3000               	movlw	0
 16179  106B  05C3               	andwf	(___ftadd@f1+2)^(0+128),f
 16180  106C  17C5               	bsf	(___ftadd@f2^(0+128)+1),7
 16181  106D  30FF               	movlw	255
 16182  106E  05C4               	andwf	___ftadd@f2^(0+128),f
 16183  106F  30FF               	movlw	255
 16184  1070  05C5               	andwf	(___ftadd@f2+1)^(0+128),f
 16185  1071  3000               	movlw	0
 16186  1072  05C6               	andwf	(___ftadd@f2+2)^(0+128),f
 16187  1073  084C               	movf	___ftadd@exp2^(0+128),w
 16188  1074  024D               	subwf	___ftadd@exp1^(0+128),w
 16189  1075  1803               	skipnc
 16190  1076  2899               	goto	l7734
 16191  1077                     l7724:	
 16192  1077  3001               	movlw	1
 16193  1078                     u7895:	
 16194  1078  35C4               	lslf	___ftadd@f2^(0+128),f
 16195  1079  0DC5               	rlf	(___ftadd@f2+1)^(0+128),f
 16196  107A  0DC6               	rlf	(___ftadd@f2+2)^(0+128),f
 16197  107B  0B89               	decfsz	9,f
 16198  107C  2878               	goto	u7895
 16199  107D  3001               	movlw	1
 16200  107E  02CC               	subwf	___ftadd@exp2^(0+128),f
 16201  107F  084C               	movf	___ftadd@exp2^(0+128),w
 16202  1080  064D               	xorwf	___ftadd@exp1^(0+128),w
 16203  1081  1903               	skipnz
 16204  1082  2894               	goto	l7732
 16205  1083  3001               	movlw	1
 16206  1084  02CB               	subwf	___ftadd@sign^(0+128),f
 16207  1085  084B               	movf	___ftadd@sign^(0+128),w
 16208  1086  3907               	andlw	7
 16209  1087  1903               	btfsc	3,2
 16210  1088  2894               	goto	l7732
 16211  1089  2877               	goto	l7724
 16212  108A                     l7730:	
 16213  108A  3001               	movlw	1
 16214  108B                     u7925:	
 16215  108B  36C3               	lsrf	(___ftadd@f1+2)^(0+128),f
 16216  108C  0CC2               	rrf	(___ftadd@f1+1)^(0+128),f
 16217  108D  0CC1               	rrf	___ftadd@f1^(0+128),f
 16218  108E  0B89               	decfsz	9,f
 16219  108F  288B               	goto	u7925
 16220  1090  3001               	movlw	1
 16221  1091  00C7               	movwf	??___ftadd^(0+128)
 16222  1092  0847               	movf	??___ftadd^(0+128),w
 16223  1093  07CD               	addwf	___ftadd@exp1^(0+128),f
 16224  1094                     l7732:	
 16225  1094  084D               	movf	___ftadd@exp1^(0+128),w
 16226  1095  064C               	xorwf	___ftadd@exp2^(0+128),w
 16227  1096  1903               	btfsc	3,2
 16228  1097  28BE               	goto	l2144
 16229  1098  288A               	goto	l7730
 16230  1099                     l7734:	
 16231  1099  084D               	movf	___ftadd@exp1^(0+128),w
 16232  109A  024C               	subwf	___ftadd@exp2^(0+128),w
 16233  109B  1803               	skipnc
 16234  109C  28BE               	goto	l2144
 16235  109D                     l7736:	
 16236  109D  3001               	movlw	1
 16237  109E                     u7955:	
 16238  109E  35C1               	lslf	___ftadd@f1^(0+128),f
 16239  109F  0DC2               	rlf	(___ftadd@f1+1)^(0+128),f
 16240  10A0  0DC3               	rlf	(___ftadd@f1+2)^(0+128),f
 16241  10A1  0B89               	decfsz	9,f
 16242  10A2  289E               	goto	u7955
 16243  10A3  3001               	movlw	1
 16244  10A4  02CD               	subwf	___ftadd@exp1^(0+128),f
 16245  10A5  084C               	movf	___ftadd@exp2^(0+128),w
 16246  10A6  064D               	xorwf	___ftadd@exp1^(0+128),w
 16247  10A7  1903               	skipnz
 16248  10A8  28BA               	goto	l7744
 16249  10A9  3001               	movlw	1
 16250  10AA  02CB               	subwf	___ftadd@sign^(0+128),f
 16251  10AB  084B               	movf	___ftadd@sign^(0+128),w
 16252  10AC  3907               	andlw	7
 16253  10AD  1903               	btfsc	3,2
 16254  10AE  28BA               	goto	l7744
 16255  10AF  289D               	goto	l7736
 16256  10B0                     l7742:	
 16257  10B0  3001               	movlw	1
 16258  10B1                     u7985:	
 16259  10B1  36C6               	lsrf	(___ftadd@f2+2)^(0+128),f
 16260  10B2  0CC5               	rrf	(___ftadd@f2+1)^(0+128),f
 16261  10B3  0CC4               	rrf	___ftadd@f2^(0+128),f
 16262  10B4  0B89               	decfsz	9,f
 16263  10B5  28B1               	goto	u7985
 16264  10B6  3001               	movlw	1
 16265  10B7  00C7               	movwf	??___ftadd^(0+128)
 16266  10B8  0847               	movf	??___ftadd^(0+128),w
 16267  10B9  07CC               	addwf	___ftadd@exp2^(0+128),f
 16268  10BA                     l7744:	
 16269  10BA  084D               	movf	___ftadd@exp1^(0+128),w
 16270  10BB  064C               	xorwf	___ftadd@exp2^(0+128),w
 16271  10BC  1D03               	skipz
 16272  10BD  28B0               	goto	l7742
 16273  10BE                     l2144:	
 16274  10BE  1FCB               	btfss	___ftadd@sign^(0+128),7
 16275  10BF  28D0               	goto	l7748
 16276  10C0  30FF               	movlw	255
 16277  10C1  06C1               	xorwf	___ftadd@f1^(0+128),f
 16278  10C2  30FF               	movlw	255
 16279  10C3  06C2               	xorwf	(___ftadd@f1+1)^(0+128),f
 16280  10C4  30FF               	movlw	255
 16281  10C5  06C3               	xorwf	(___ftadd@f1+2)^(0+128),f
 16282  10C6  3001               	movlw	1
 16283  10C7  07C1               	addwf	___ftadd@f1^(0+128),f
 16284  10C8  3000               	movlw	0
 16285  10C9  1803               	skipnc
 16286  10CA  3001               	movlw	1
 16287  10CB  07C2               	addwf	(___ftadd@f1+1)^(0+128),f
 16288  10CC  3000               	movlw	0
 16289  10CD  1803               	skipnc
 16290  10CE  3001               	movlw	1
 16291  10CF  07C3               	addwf	(___ftadd@f1+2)^(0+128),f
 16292  10D0                     l7748:	
 16293  10D0  1F4B               	btfss	___ftadd@sign^(0+128),6
 16294  10D1  28E2               	goto	l7752
 16295  10D2  30FF               	movlw	255
 16296  10D3  06C4               	xorwf	___ftadd@f2^(0+128),f
 16297  10D4  30FF               	movlw	255
 16298  10D5  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16299  10D6  30FF               	movlw	255
 16300  10D7  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16301  10D8  3001               	movlw	1
 16302  10D9  07C4               	addwf	___ftadd@f2^(0+128),f
 16303  10DA  3000               	movlw	0
 16304  10DB  1803               	skipnc
 16305  10DC  3001               	movlw	1
 16306  10DD  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16307  10DE  3000               	movlw	0
 16308  10DF  1803               	skipnc
 16309  10E0  3001               	movlw	1
 16310  10E1  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16311  10E2                     l7752:	
 16312  10E2  01CB               	clrf	___ftadd@sign^(0+128)
 16313  10E3  0841               	movf	___ftadd@f1^(0+128),w
 16314  10E4  07C4               	addwf	___ftadd@f2^(0+128),f
 16315  10E5  0842               	movf	(___ftadd@f1+1)^(0+128),w
 16316  10E6  3DC5               	addwfc	(___ftadd@f2+1)^(0+128),f
 16317  10E7  0843               	movf	(___ftadd@f1+2)^(0+128),w
 16318  10E8  3DC6               	addwfc	(___ftadd@f2+2)^(0+128),f
 16319  10E9  1FC6               	btfss	(___ftadd@f2+2)^(0+128),7
 16320  10EA  28FD               	goto	l7762
 16321  10EB  30FF               	movlw	255
 16322  10EC  06C4               	xorwf	___ftadd@f2^(0+128),f
 16323  10ED  30FF               	movlw	255
 16324  10EE  06C5               	xorwf	(___ftadd@f2+1)^(0+128),f
 16325  10EF  30FF               	movlw	255
 16326  10F0  06C6               	xorwf	(___ftadd@f2+2)^(0+128),f
 16327  10F1  3001               	movlw	1
 16328  10F2  07C4               	addwf	___ftadd@f2^(0+128),f
 16329  10F3  3000               	movlw	0
 16330  10F4  1803               	skipnc
 16331  10F5  3001               	movlw	1
 16332  10F6  07C5               	addwf	(___ftadd@f2+1)^(0+128),f
 16333  10F7  3000               	movlw	0
 16334  10F8  1803               	skipnc
 16335  10F9  3001               	movlw	1
 16336  10FA  07C6               	addwf	(___ftadd@f2+2)^(0+128),f
 16337  10FB  01CB               	clrf	___ftadd@sign^(0+128)
 16338  10FC  0ACB               	incf	___ftadd@sign^(0+128),f
 16339  10FD                     l7762:	
 16340  10FD  0844               	movf	___ftadd@f2^(0+128),w
 16341  10FE  00A0               	movwf	___ftpack@arg^(0+128)
 16342  10FF  0845               	movf	(___ftadd@f2+1)^(0+128),w
 16343  1100  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16344  1101  0846               	movf	(___ftadd@f2+2)^(0+128),w
 16345  1102  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16346  1103  084D               	movf	___ftadd@exp1^(0+128),w
 16347  1104  00C7               	movwf	??___ftadd^(0+128)
 16348  1105  0847               	movf	??___ftadd^(0+128),w
 16349  1106  00A3               	movwf	___ftpack@exp^(0+128)
 16350  1107  084B               	movf	___ftadd@sign^(0+128),w
 16351  1108  00C8               	movwf	(??___ftadd+1)^(0+128)
 16352  1109  0848               	movf	(??___ftadd+1)^(0+128),w
 16353  110A  00A4               	movwf	___ftpack@sign^(0+128)
 16354  110B  31A6  26B3         	fcall	___ftpack
 16355  110D  0021               	movlb	1	; select bank1
 16356  110E  0820               	movf	?___ftpack^(0+128),w
 16357  110F  00C1               	movwf	?___ftadd^(0+128)
 16358  1110  0821               	movf	(?___ftpack+1)^(0+128),w
 16359  1111  00C2               	movwf	(?___ftadd+1)^(0+128)
 16360  1112  0822               	movf	(?___ftpack+2)^(0+128),w
 16361  1113  00C3               	movwf	(?___ftadd+2)^(0+128)
 16362  1114  0008               	return
 16363  1115                     __end_of___ftadd:	
 16364                           
 16365                           	psect	text52
 16366  2F24                     __ptext52:	
 16367 ;; *************** function ___ftneg *****************
 16368 ;; Defined at:
 16369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 16370 ;; Parameters:    Size  Location     Type
 16371 ;;  f1              3   30[BANK1 ] float 
 16372 ;; Auto vars:     Size  Location     Type
 16373 ;;		None
 16374 ;; Return value:  Size  Location     Type
 16375 ;;                  3   30[BANK1 ] float 
 16376 ;; Registers used:
 16377 ;;		wreg
 16378 ;; Tracked objects:
 16379 ;;		On entry : 0/0
 16380 ;;		On exit  : 0/0
 16381 ;;		Unchanged: 0/0
 16382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16383 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16386 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16387 ;;Total ram usage:        3 bytes
 16388 ;; Hardware stack levels used:    1
 16389 ;; Hardware stack levels required when called:    3
 16390 ;; This function calls:
 16391 ;;		Nothing
 16392 ;; This function is called by:
 16393 ;;		_map
 16394 ;;		_scaleiA10kPot
 16395 ;;		_modSin
 16396 ;;		_modTri
 16397 ;;		_modSaw
 16398 ;;		_pow
 16399 ;;		_sin
 16400 ;;		_exp
 16401 ;;		_ldexp
 16402 ;;		_scalePotValue
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           
 16407                           ;psect for function ___ftneg
 16408  2F24                     ___ftneg:	
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in ___ftneg: [wreg]
 16412  2F24  0021               	movlb	1	; select bank1
 16413  2F25  0840               	movf	(___ftneg@f1+2)^(0+128),w
 16414  2F26  043F               	iorwf	(___ftneg@f1+1)^(0+128),w
 16415  2F27  043E               	iorwf	___ftneg@f1^(0+128),w
 16416  2F28  1903               	skipnz
 16417  2F29  0008               	return
 16418  2F2A  3080               	movlw	128
 16419  2F2B  06C0               	xorwf	(___ftneg@f1+2)^(0+128),f
 16420  2F2C  0008               	return
 16421  2F2D                     __end_of___ftneg:	
 16422                           
 16423                           	psect	text53
 16424  1C74                     __ptext53:	
 16425 ;; *************** function ___ftdiv *****************
 16426 ;; Defined at:
 16427 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;  f2              3   46[BANK1 ] float 
 16430 ;;  f1              3   49[BANK1 ] float 
 16431 ;; Auto vars:     Size  Location     Type
 16432 ;;  f3              3   57[BANK1 ] float 
 16433 ;;  sign            1   61[BANK1 ] unsigned char 
 16434 ;;  exp             1   60[BANK1 ] unsigned char 
 16435 ;;  cntr            1   56[BANK1 ] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  3   46[BANK1 ] float 
 16438 ;; Registers used:
 16439 ;;		wreg, status,2, status,0, pclath, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16445 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16446 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16447 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16448 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16449 ;;Total ram usage:       16 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    4
 16452 ;; This function calls:
 16453 ;;		___ftpack
 16454 ;; This function is called by:
 16455 ;;		_map
 16456 ;;		_scaleA100kPot
 16457 ;;		_scaleA10kPot
 16458 ;;		_scaleiA10kPot
 16459 ;;		_calcSinArray
 16460 ;;		_getModulationDelayTime
 16461 ;;		_modSin
 16462 ;;		_modTri
 16463 ;;		_modSaw
 16464 ;;		_sin
 16465 ;;		_exp
 16466 ;;		_scalePotValue
 16467 ;;		_scaleiA100kPot
 16468 ;; This function uses a non-reentrant model
 16469 ;;
 16470                           
 16471                           
 16472                           ;psect for function ___ftdiv
 16473  1C74                     ___ftdiv:	
 16474                           
 16475                           ;incstack = 0
 16476                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16477  1C74  0021               	movlb	1	; select bank1
 16478  1C75  0851               	movf	___ftdiv@f1^(0+128),w
 16479  1C76  00D4               	movwf	??___ftdiv^(0+128)
 16480  1C77  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16481  1C78  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16482  1C79  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16483  1C7A  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16484  1C7B  1003               	clrc
 16485  1C7C  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16486  1C7D  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16487  1C7E  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16488  1C7F  0857               	movf	(??___ftdiv+3)^(0+128),w
 16489  1C80  00DC               	movwf	___ftdiv@exp^(0+128)
 16490  1C81  085C               	movf	___ftdiv@exp^(0+128),w
 16491  1C82  1D03               	btfss	3,2
 16492  1C83  2C8B               	goto	l7974
 16493  1C84  3000               	movlw	0
 16494  1C85  00CE               	movwf	?___ftdiv^(0+128)
 16495  1C86  3000               	movlw	0
 16496  1C87  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16497  1C88  3000               	movlw	0
 16498  1C89  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16499  1C8A  0008               	return
 16500  1C8B                     l7974:	
 16501  1C8B  084E               	movf	___ftdiv@f2^(0+128),w
 16502  1C8C  00D4               	movwf	??___ftdiv^(0+128)
 16503  1C8D  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16504  1C8E  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16505  1C8F  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16506  1C90  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16507  1C91  1003               	clrc
 16508  1C92  0D55               	rlf	(??___ftdiv^(0+128)+1),w
 16509  1C93  0D56               	rlf	(??___ftdiv^(0+128)+2),w
 16510  1C94  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16511  1C95  0857               	movf	(??___ftdiv+3)^(0+128),w
 16512  1C96  00DD               	movwf	___ftdiv@sign^(0+128)
 16513  1C97  085D               	movf	___ftdiv@sign^(0+128),w
 16514  1C98  1D03               	btfss	3,2
 16515  1C99  2CA1               	goto	l7980
 16516  1C9A  3000               	movlw	0
 16517  1C9B  00CE               	movwf	?___ftdiv^(0+128)
 16518  1C9C  3000               	movlw	0
 16519  1C9D  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16520  1C9E  3000               	movlw	0
 16521  1C9F  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16522  1CA0  0008               	return
 16523  1CA1                     l7980:	
 16524  1CA1  3000               	movlw	0
 16525  1CA2  00D9               	movwf	___ftdiv@f3^(0+128)
 16526  1CA3  3000               	movlw	0
 16527  1CA4  00DA               	movwf	(___ftdiv@f3+1)^(0+128)
 16528  1CA5  3000               	movlw	0
 16529  1CA6  00DB               	movwf	(___ftdiv@f3+2)^(0+128)
 16530  1CA7  3089               	movlw	137
 16531  1CA8  075D               	addwf	___ftdiv@sign^(0+128),w
 16532  1CA9  00D4               	movwf	??___ftdiv^(0+128)
 16533  1CAA  0854               	movf	??___ftdiv^(0+128),w
 16534  1CAB  02DC               	subwf	___ftdiv@exp^(0+128),f
 16535  1CAC  0851               	movf	___ftdiv@f1^(0+128),w
 16536  1CAD  00D4               	movwf	??___ftdiv^(0+128)
 16537  1CAE  0852               	movf	(___ftdiv@f1+1)^(0+128),w
 16538  1CAF  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16539  1CB0  0853               	movf	(___ftdiv@f1+2)^(0+128),w
 16540  1CB1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16541  1CB2  3010               	movlw	16
 16542  1CB3                     u8385:	
 16543  1CB3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16544  1CB4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16545  1CB5  0CD4               	rrf	??___ftdiv^(0+128),f
 16546  1CB6  0B89               	decfsz	9,f
 16547  1CB7  2CB3               	goto	u8385
 16548  1CB8  0854               	movf	??___ftdiv^(0+128),w
 16549  1CB9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16550  1CBA  0857               	movf	(??___ftdiv+3)^(0+128),w
 16551  1CBB  00DD               	movwf	___ftdiv@sign^(0+128)
 16552  1CBC  084E               	movf	___ftdiv@f2^(0+128),w
 16553  1CBD  00D4               	movwf	??___ftdiv^(0+128)
 16554  1CBE  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16555  1CBF  00D5               	movwf	(??___ftdiv^(0+128)+1)
 16556  1CC0  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16557  1CC1  00D6               	movwf	(??___ftdiv^(0+128)+2)
 16558  1CC2  3010               	movlw	16
 16559  1CC3                     u8395:	
 16560  1CC3  36D6               	lsrf	(??___ftdiv^(0+128)+2),f
 16561  1CC4  0CD5               	rrf	(??___ftdiv^(0+128)+1),f
 16562  1CC5  0CD4               	rrf	??___ftdiv^(0+128),f
 16563  1CC6  0B89               	decfsz	9,f
 16564  1CC7  2CC3               	goto	u8395
 16565  1CC8  0854               	movf	??___ftdiv^(0+128),w
 16566  1CC9  00D7               	movwf	(??___ftdiv+3)^(0+128)
 16567  1CCA  0857               	movf	(??___ftdiv+3)^(0+128),w
 16568  1CCB  06DD               	xorwf	___ftdiv@sign^(0+128),f
 16569  1CCC  3080               	movlw	128
 16570  1CCD  00D4               	movwf	??___ftdiv^(0+128)
 16571  1CCE  0854               	movf	??___ftdiv^(0+128),w
 16572  1CCF  05DD               	andwf	___ftdiv@sign^(0+128),f
 16573  1CD0  17D2               	bsf	(___ftdiv@f1^(0+128)+1),7
 16574  1CD1  30FF               	movlw	255
 16575  1CD2  05D1               	andwf	___ftdiv@f1^(0+128),f
 16576  1CD3  30FF               	movlw	255
 16577  1CD4  05D2               	andwf	(___ftdiv@f1+1)^(0+128),f
 16578  1CD5  3000               	movlw	0
 16579  1CD6  05D3               	andwf	(___ftdiv@f1+2)^(0+128),f
 16580  1CD7  17CF               	bsf	(___ftdiv@f2^(0+128)+1),7
 16581  1CD8  30FF               	movlw	255
 16582  1CD9  05CE               	andwf	___ftdiv@f2^(0+128),f
 16583  1CDA  30FF               	movlw	255
 16584  1CDB  05CF               	andwf	(___ftdiv@f2+1)^(0+128),f
 16585  1CDC  3000               	movlw	0
 16586  1CDD  05D0               	andwf	(___ftdiv@f2+2)^(0+128),f
 16587  1CDE  3018               	movlw	24
 16588  1CDF  00D4               	movwf	??___ftdiv^(0+128)
 16589  1CE0  0854               	movf	??___ftdiv^(0+128),w
 16590  1CE1  00D8               	movwf	___ftdiv@cntr^(0+128)
 16591  1CE2                     l7994:	
 16592  1CE2  3001               	movlw	1
 16593  1CE3                     u8405:	
 16594  1CE3  35D9               	lslf	___ftdiv@f3^(0+128),f
 16595  1CE4  0DDA               	rlf	(___ftdiv@f3+1)^(0+128),f
 16596  1CE5  0DDB               	rlf	(___ftdiv@f3+2)^(0+128),f
 16597  1CE6  0B89               	decfsz	9,f
 16598  1CE7  2CE3               	goto	u8405
 16599  1CE8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16600  1CE9  0253               	subwf	(___ftdiv@f1+2)^(0+128),w
 16601  1CEA  1D03               	skipz
 16602  1CEB  2CF2               	goto	u8415
 16603  1CEC  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16604  1CED  0252               	subwf	(___ftdiv@f1+1)^(0+128),w
 16605  1CEE  1D03               	skipz
 16606  1CEF  2CF2               	goto	u8415
 16607  1CF0  084E               	movf	___ftdiv@f2^(0+128),w
 16608  1CF1  0251               	subwf	___ftdiv@f1^(0+128),w
 16609  1CF2                     u8415:	
 16610  1CF2  1C03               	skipc
 16611  1CF3  2CFB               	goto	l8002
 16612  1CF4  084E               	movf	___ftdiv@f2^(0+128),w
 16613  1CF5  02D1               	subwf	___ftdiv@f1^(0+128),f
 16614  1CF6  084F               	movf	(___ftdiv@f2+1)^(0+128),w
 16615  1CF7  3BD2               	subwfb	(___ftdiv@f1+1)^(0+128),f
 16616  1CF8  0850               	movf	(___ftdiv@f2+2)^(0+128),w
 16617  1CF9  3BD3               	subwfb	(___ftdiv@f1+2)^(0+128),f
 16618  1CFA  1459               	bsf	___ftdiv@f3^(0+128),0
 16619  1CFB                     l8002:	
 16620  1CFB  3001               	movlw	1
 16621  1CFC                     u8425:	
 16622  1CFC  35D1               	lslf	___ftdiv@f1^(0+128),f
 16623  1CFD  0DD2               	rlf	(___ftdiv@f1+1)^(0+128),f
 16624  1CFE  0DD3               	rlf	(___ftdiv@f1+2)^(0+128),f
 16625  1CFF  0B89               	decfsz	9,f
 16626  1D00  2CFC               	goto	u8425
 16627  1D01  3001               	movlw	1
 16628  1D02  02D8               	subwf	___ftdiv@cntr^(0+128),f
 16629  1D03  1D03               	btfss	3,2
 16630  1D04  2CE2               	goto	l7994
 16631  1D05  0859               	movf	___ftdiv@f3^(0+128),w
 16632  1D06  00A0               	movwf	___ftpack@arg^(0+128)
 16633  1D07  085A               	movf	(___ftdiv@f3+1)^(0+128),w
 16634  1D08  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16635  1D09  085B               	movf	(___ftdiv@f3+2)^(0+128),w
 16636  1D0A  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 16637  1D0B  085C               	movf	___ftdiv@exp^(0+128),w
 16638  1D0C  00D4               	movwf	??___ftdiv^(0+128)
 16639  1D0D  0854               	movf	??___ftdiv^(0+128),w
 16640  1D0E  00A3               	movwf	___ftpack@exp^(0+128)
 16641  1D0F  085D               	movf	___ftdiv@sign^(0+128),w
 16642  1D10  00D5               	movwf	(??___ftdiv+1)^(0+128)
 16643  1D11  0855               	movf	(??___ftdiv+1)^(0+128),w
 16644  1D12  00A4               	movwf	___ftpack@sign^(0+128)
 16645  1D13  31A6  26B3         	fcall	___ftpack
 16646  1D15  0021               	movlb	1	; select bank1
 16647  1D16  0820               	movf	?___ftpack^(0+128),w
 16648  1D17  00CE               	movwf	?___ftdiv^(0+128)
 16649  1D18  0821               	movf	(?___ftpack+1)^(0+128),w
 16650  1D19  00CF               	movwf	(?___ftdiv+1)^(0+128)
 16651  1D1A  0822               	movf	(?___ftpack+2)^(0+128),w
 16652  1D1B  00D0               	movwf	(?___ftdiv+2)^(0+128)
 16653  1D1C  0008               	return
 16654  1D1D                     __end_of___ftdiv:	
 16655                           
 16656                           	psect	text54
 16657  2076                     __ptext54:	
 16658 ;; *************** function ___awtoft *****************
 16659 ;; Defined at:
 16660 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 16661 ;; Parameters:    Size  Location     Type
 16662 ;;  c               2    8[BANK1 ] int 
 16663 ;; Auto vars:     Size  Location     Type
 16664 ;;  sign            1   13[BANK1 ] unsigned char 
 16665 ;; Return value:  Size  Location     Type
 16666 ;;                  3    8[BANK1 ] float 
 16667 ;; Registers used:
 16668 ;;		wreg, status,2, status,0, pclath, cstack
 16669 ;; Tracked objects:
 16670 ;;		On entry : 0/0
 16671 ;;		On exit  : 0/0
 16672 ;;		Unchanged: 0/0
 16673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16674 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16675 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16676 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16677 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16678 ;;Total ram usage:        6 bytes
 16679 ;; Hardware stack levels used:    1
 16680 ;; Hardware stack levels required when called:    4
 16681 ;; This function calls:
 16682 ;;		___ftpack
 16683 ;; This function is called by:
 16684 ;;		_main
 16685 ;;		_set_subdivision
 16686 ;;		_calcSinArray
 16687 ;;		_getModulationDelayTime
 16688 ;;		_updateModulationArray
 16689 ;;		_exp
 16690 ;;		_log
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           
 16695                           ;psect for function ___awtoft
 16696  2076                     ___awtoft:	
 16697                           
 16698                           ;incstack = 0
 16699                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16700  2076  0021               	movlb	1	; select bank1
 16701  2077  01AD               	clrf	___awtoft@sign^(0+128)
 16702  2078  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
 16703  2079  2881               	goto	l7964
 16704  207A  09A8               	comf	___awtoft@c^(0+128),f
 16705  207B  09A9               	comf	(___awtoft@c+1)^(0+128),f
 16706  207C  0AA8               	incf	___awtoft@c^(0+128),f
 16707  207D  1903               	skipnz
 16708  207E  0AA9               	incf	(___awtoft@c+1)^(0+128),f
 16709  207F  01AD               	clrf	___awtoft@sign^(0+128)
 16710  2080  0AAD               	incf	___awtoft@sign^(0+128),f
 16711  2081                     l7964:	
 16712  2081  0828               	movf	___awtoft@c^(0+128),w
 16713  2082  00A0               	movwf	___ftpack@arg^(0+128)
 16714  2083  0829               	movf	(___awtoft@c+1)^(0+128),w
 16715  2084  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 16716  2085  01A2               	clrf	(___ftpack@arg+2)^(0+128)
 16717  2086  308E               	movlw	142
 16718  2087  00AB               	movwf	??___awtoft^(0+128)
 16719  2088  082B               	movf	??___awtoft^(0+128),w
 16720  2089  00A3               	movwf	___ftpack@exp^(0+128)
 16721  208A  082D               	movf	___awtoft@sign^(0+128),w
 16722  208B  00AC               	movwf	(??___awtoft+1)^(0+128)
 16723  208C  082C               	movf	(??___awtoft+1)^(0+128),w
 16724  208D  00A4               	movwf	___ftpack@sign^(0+128)
 16725  208E  31A6  26B3         	fcall	___ftpack
 16726  2090  0021               	movlb	1	; select bank1
 16727  2091  0820               	movf	?___ftpack^(0+128),w
 16728  2092  00A8               	movwf	?___awtoft^(0+128)
 16729  2093  0821               	movf	(?___ftpack+1)^(0+128),w
 16730  2094  00A9               	movwf	(?___awtoft+1)^(0+128)
 16731  2095  0822               	movf	(?___ftpack+2)^(0+128),w
 16732  2096  00AA               	movwf	(?___awtoft+2)^(0+128)
 16733  2097  0008               	return
 16734  2098                     __end_of___awtoft:	
 16735                           
 16736                           	psect	text55
 16737  26B3                     __ptext55:	
 16738 ;; *************** function ___ftpack *****************
 16739 ;; Defined at:
 16740 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 16741 ;; Parameters:    Size  Location     Type
 16742 ;;  arg             3    0[BANK1 ] unsigned um
 16743 ;;  exp             1    3[BANK1 ] unsigned char 
 16744 ;;  sign            1    4[BANK1 ] unsigned char 
 16745 ;; Auto vars:     Size  Location     Type
 16746 ;;		None
 16747 ;; Return value:  Size  Location     Type
 16748 ;;                  3    0[BANK1 ] float 
 16749 ;; Registers used:
 16750 ;;		wreg, status,2, status,0
 16751 ;; Tracked objects:
 16752 ;;		On entry : 0/0
 16753 ;;		On exit  : 0/0
 16754 ;;		Unchanged: 0/0
 16755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16756 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16758 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16759 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16760 ;;Total ram usage:        8 bytes
 16761 ;; Hardware stack levels used:    1
 16762 ;; Hardware stack levels required when called:    3
 16763 ;; This function calls:
 16764 ;;		Nothing
 16765 ;; This function is called by:
 16766 ;;		___altoft
 16767 ;;		___awtoft
 16768 ;;		___ftadd
 16769 ;;		___ftdiv
 16770 ;;		___ftmul
 16771 ;;		___lltoft
 16772 ;; This function uses a non-reentrant model
 16773 ;;
 16774                           
 16775                           
 16776                           ;psect for function ___ftpack
 16777  26B3                     ___ftpack:	
 16778                           
 16779                           ;incstack = 0
 16780                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16781  26B3  0021               	movlb	1	; select bank1
 16782  26B4  0823               	movf	___ftpack@exp^(0+128),w
 16783  26B5  1903               	btfsc	3,2
 16784  26B6  2EBC               	goto	l7602
 16785  26B7  0822               	movf	(___ftpack@arg+2)^(0+128),w
 16786  26B8  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 16787  26B9  0420               	iorwf	___ftpack@arg^(0+128),w
 16788  26BA  1D03               	skipz
 16789  26BB  2ECD               	goto	l7608
 16790  26BC                     l7602:	
 16791  26BC  3000               	movlw	0
 16792  26BD  00A0               	movwf	?___ftpack^(0+128)
 16793  26BE  3000               	movlw	0
 16794  26BF  00A1               	movwf	(?___ftpack+1)^(0+128)
 16795  26C0  3000               	movlw	0
 16796  26C1  00A2               	movwf	(?___ftpack+2)^(0+128)
 16797  26C2  0008               	return
 16798  26C3                     l7606:	
 16799  26C3  3001               	movlw	1
 16800  26C4  00A5               	movwf	??___ftpack^(0+128)
 16801  26C5  0825               	movf	??___ftpack^(0+128),w
 16802  26C6  07A3               	addwf	___ftpack@exp^(0+128),f
 16803  26C7  3001               	movlw	1
 16804  26C8                     u7625:	
 16805  26C8  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16806  26C9  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16807  26CA  0CA0               	rrf	___ftpack@arg^(0+128),f
 16808  26CB  0B89               	decfsz	9,f
 16809  26CC  2EC8               	goto	u7625
 16810  26CD                     l7608:	
 16811  26CD  30FE               	movlw	254
 16812  26CE  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16813  26CF  1903               	btfsc	3,2
 16814  26D0  2EE6               	goto	l2113
 16815  26D1  2EC3               	goto	l7606
 16816  26D2                     l7610:	
 16817  26D2  3001               	movlw	1
 16818  26D3  00A5               	movwf	??___ftpack^(0+128)
 16819  26D4  0825               	movf	??___ftpack^(0+128),w
 16820  26D5  07A3               	addwf	___ftpack@exp^(0+128),f
 16821  26D6  3001               	movlw	1
 16822  26D7  07A0               	addwf	___ftpack@arg^(0+128),f
 16823  26D8  3000               	movlw	0
 16824  26D9  1803               	skipnc
 16825  26DA  3001               	movlw	1
 16826  26DB  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 16827  26DC  3000               	movlw	0
 16828  26DD  1803               	skipnc
 16829  26DE  3001               	movlw	1
 16830  26DF  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 16831  26E0  3001               	movlw	1
 16832  26E1                     u7645:	
 16833  26E1  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 16834  26E2  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 16835  26E3  0CA0               	rrf	___ftpack@arg^(0+128),f
 16836  26E4  0B89               	decfsz	9,f
 16837  26E5  2EE1               	goto	u7645
 16838  26E6                     l2113:	
 16839  26E6  30FF               	movlw	255
 16840  26E7  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 16841  26E8  1903               	btfsc	3,2
 16842  26E9  2EF3               	goto	l7618
 16843  26EA  2ED2               	goto	l7610
 16844  26EB                     l7616:	
 16845  26EB  3001               	movlw	1
 16846  26EC  02A3               	subwf	___ftpack@exp^(0+128),f
 16847  26ED  3001               	movlw	1
 16848  26EE                     u7665:	
 16849  26EE  35A0               	lslf	___ftpack@arg^(0+128),f
 16850  26EF  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 16851  26F0  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 16852  26F1  0B89               	decfsz	9,f
 16853  26F2  2EEE               	goto	u7665
 16854  26F3                     l7618:	
 16855  26F3  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 16856  26F4  2EF9               	goto	l2120
 16857  26F5  3002               	movlw	2
 16858  26F6  0223               	subwf	___ftpack@exp^(0+128),w
 16859  26F7  1803               	skipnc
 16860  26F8  2EEB               	goto	l7616
 16861  26F9                     l2120:	
 16862  26F9  1823               	btfsc	___ftpack@exp^(0+128),0
 16863  26FA  2F01               	goto	l2121
 16864  26FB  30FF               	movlw	255
 16865  26FC  05A0               	andwf	___ftpack@arg^(0+128),f
 16866  26FD  307F               	movlw	127
 16867  26FE  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 16868  26FF  30FF               	movlw	255
 16869  2700  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 16870  2701                     l2121:	
 16871  2701  1003               	clrc
 16872  2702  0CA3               	rrf	___ftpack@exp^(0+128),f
 16873  2703  0823               	movf	___ftpack@exp^(0+128),w
 16874  2704  00A5               	movwf	??___ftpack^(0+128)
 16875  2705  01A6               	clrf	(??___ftpack^(0+128)+1)
 16876  2706  01A7               	clrf	(??___ftpack^(0+128)+2)
 16877  2707  3010               	movlw	16
 16878  2708                     u7705:	
 16879  2708  35A5               	lslf	??___ftpack^(0+128),f
 16880  2709  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 16881  270A  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 16882  270B  0B89               	decfsz	9,f
 16883  270C  2F08               	goto	u7705
 16884  270D  0825               	movf	??___ftpack^(0+128),w
 16885  270E  04A0               	iorwf	___ftpack@arg^(0+128),f
 16886  270F  0826               	movf	(??___ftpack+1)^(0+128),w
 16887  2710  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 16888  2711  0827               	movf	(??___ftpack+2)^(0+128),w
 16889  2712  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 16890  2713  0824               	movf	___ftpack@sign^(0+128),w
 16891  2714  1903               	btfsc	3,2
 16892  2715  0008               	return
 16893  2716  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 16894  2717  0008               	return
 16895  2718                     __end_of___ftpack:	
 16896                           
 16897                           	psect	text56
 16898  2F6D                     __ptext56:	
 16899 ;; *************** function _adc_convert *****************
 16900 ;; Defined at:
 16901 ;;		line 122 in file "user.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;  channel         1    wreg     unsigned char 
 16904 ;; Auto vars:     Size  Location     Type
 16905 ;;  channel         1    3[BANK1 ] unsigned char 
 16906 ;; Return value:  Size  Location     Type
 16907 ;;                  2    0[BANK1 ] unsigned int 
 16908 ;; Registers used:
 16909 ;;		wreg, status,2, status,0
 16910 ;; Tracked objects:
 16911 ;;		On entry : 0/0
 16912 ;;		On exit  : 0/0
 16913 ;;		Unchanged: 0/0
 16914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16915 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16916 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16917 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16918 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16919 ;;Total ram usage:        4 bytes
 16920 ;; Hardware stack levels used:    1
 16921 ;; Hardware stack levels required when called:    3
 16922 ;; This function calls:
 16923 ;;		Nothing
 16924 ;; This function is called by:
 16925 ;;		_main
 16926 ;; This function uses a non-reentrant model
 16927 ;;
 16928                           
 16929                           
 16930                           ;psect for function _adc_convert
 16931  2F6D                     _adc_convert:	
 16932                           
 16933                           ;incstack = 0
 16934                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 16935                           ;adc_convert@channel stored from wreg
 16936  2F6D  0021               	movlb	1	; select bank1
 16937  2F6E  00A3               	movwf	adc_convert@channel^(0+128)
 16938                           
 16939                           ;user.c: 123: ADCON0bits.CHS = channel;
 16940  2F6F  0823               	movf	adc_convert@channel^(0+128),w
 16941  2F70  00A2               	movwf	??_adc_convert^(0+128)
 16942  2F71  0DA2               	rlf	??_adc_convert^(0+128),f
 16943  2F72  0DA2               	rlf	??_adc_convert^(0+128),f
 16944  2F73  081D               	movf	29,w	;volatile
 16945  2F74  0622               	xorwf	??_adc_convert^(0+128),w
 16946  2F75  3983               	andlw	-125
 16947  2F76  0622               	xorwf	??_adc_convert^(0+128),w
 16948  2F77  009D               	movwf	29	;volatile
 16949                           
 16950                           ;user.c: 124: ADCON0bits.GO = 0b1;
 16951  2F78  149D               	bsf	29,1	;volatile
 16952  2F79                     l579:	
 16953                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 16954                           
 16955  2F79  189D               	btfsc	29,1	;volatile
 16956  2F7A  2F79               	goto	l579
 16957                           
 16958                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 16959  2F7B  081C               	movf	28,w	;volatile
 16960  2F7C  00A1               	movwf	(?_adc_convert+1)^(0+128)
 16961  2F7D  081B               	movf	27,w	;volatile
 16962  2F7E  00A0               	movwf	?_adc_convert^(0+128)
 16963  2F7F  0008               	return
 16964  2F80                     __end_of_adc_convert:	
 16965                           
 16966                           	psect	text57
 16967  248D                     __ptext57:	
 16968 ;; *************** function _USARTInit *****************
 16969 ;; Defined at:
 16970 ;;		line 31 in file "usart_pic16.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;  baud_rate       2    0[BANK1 ] unsigned int 
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;		None
 16975 ;; Return value:  Size  Location     Type
 16976 ;;                  1    wreg      void 
 16977 ;; Registers used:
 16978 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 16984 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16986 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16987 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 16988 ;;Total ram usage:        3 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    3
 16991 ;; This function calls:
 16992 ;;		Nothing
 16993 ;; This function is called by:
 16994 ;;		_main
 16995 ;; This function uses a non-reentrant model
 16996 ;;
 16997                           
 16998                           
 16999                           ;psect for function _USARTInit
 17000  248D                     _USARTInit:	
 17001                           
 17002                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
 17003                           
 17004                           ;incstack = 0
 17005                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 17006  248D  30FF               	movlw	255
 17007  248E  0020               	movlb	0	; select bank0
 17008  248F  00C8               	movwf	_UQEnd	;volatile
 17009  2490  0021               	movlb	1	; select bank1
 17010  2491  00A2               	movwf	??_USARTInit^(0+128)
 17011  2492  0822               	movf	??_USARTInit^(0+128),w
 17012  2493  0020               	movlb	0	; select bank0
 17013  2494  00C9               	movwf	_UQFront	;volatile
 17014                           
 17015                           ;usart_pic16.c: 37: switch(baud_rate)
 17016  2495  2CA0               	goto	l8608
 17017  2496                     l8598:	
 17018                           ;usart_pic16.c: 38: {
 17019                           ;usart_pic16.c: 39: case 9600:
 17020                           
 17021                           
 17022                           ;usart_pic16.c: 40: SPBRG=103;
 17023  2496  3067               	movlw	103
 17024  2497  2C9D               	goto	L23
 17025  2498                     l8600:	
 17026                           ;usart_pic16.c: 42: case 19200:
 17027                           
 17028                           ;usart_pic16.c: 41: break;
 17029                           
 17030                           
 17031                           ;usart_pic16.c: 43: SPBRG=51;
 17032  2498  3033               	movlw	51
 17033  2499  2C9D               	goto	L23
 17034  249A                     l8602:	
 17035                           ;usart_pic16.c: 45: case 31250:
 17036                           
 17037                           ;usart_pic16.c: 44: break;
 17038                           
 17039                           
 17040                           ;usart_pic16.c: 46: SPBRG = 31;
 17041  249A  301F               	movlw	31
 17042  249B  2C9D               	goto	L23
 17043  249C                     l8604:	
 17044                           ;usart_pic16.c: 48: case 38400:
 17045                           
 17046                           ;usart_pic16.c: 47: break;
 17047                           
 17048                           
 17049                           ;usart_pic16.c: 49: SPBRG=25;
 17050  249C  3019               	movlw	25
 17051  249D                     L23:	
 17052  249D  0023               	movlb	3	; select bank3
 17053  249E  009B               	movwf	27	;volatile
 17054                           
 17055                           ;usart_pic16.c: 51: }
 17056                           
 17057                           ;usart_pic16.c: 50: break;
 17058  249F  2CC3               	goto	l1705
 17059  24A0                     l8608:	
 17060                           
 17061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17062                           ; Switch size 1, requested type "space"
 17063                           ; Number of cases is 4, Range of values is 37 to 150
 17064                           ; switch strategies available:
 17065                           ; Name         Instructions Cycles
 17066                           ; simple_byte           13     7 (average)
 17067                           ; direct_byte          237     9 (fixed)
 17068                           ; jumptable            263     9 (fixed)
 17069                           ;	Chosen strategy is simple_byte
 17070  24A0  0021               	movlb	1	; select bank1
 17071  24A1  0821               	movf	(USARTInit@baud_rate+1)^(0+128),w
 17072  24A2  3A25               	xorlw	37	; case 37
 17073  24A3  1903               	skipnz
 17074  24A4  2CAF               	goto	l9698
 17075  24A5  3A6E               	xorlw	110	; case 75
 17076  24A6  1903               	skipnz
 17077  24A7  2CB4               	goto	l9700
 17078  24A8  3A31               	xorlw	49	; case 122
 17079  24A9  1903               	skipnz
 17080  24AA  2CB9               	goto	l9702
 17081  24AB  3AEC               	xorlw	236	; case 150
 17082  24AC  1903               	skipnz
 17083  24AD  2CBE               	goto	l9704
 17084  24AE  2CC3               	goto	l1705
 17085  24AF                     l9698:	
 17086                           
 17087                           ; Switch size 1, requested type "space"
 17088                           ; Number of cases is 1, Range of values is 128 to 128
 17089                           ; switch strategies available:
 17090                           ; Name         Instructions Cycles
 17091                           ; simple_byte            4     3 (average)
 17092                           ; direct_byte           11     9 (fixed)
 17093                           ; jumptable            263     9 (fixed)
 17094                           ;	Chosen strategy is simple_byte
 17095  24AF  0820               	movf	USARTInit@baud_rate^(0+128),w
 17096  24B0  3A80               	xorlw	128	; case 128
 17097  24B1  1903               	skipnz
 17098  24B2  2C96               	goto	l8598
 17099  24B3  2CC3               	goto	l1705
 17100  24B4                     l9700:	
 17101                           
 17102                           ; Switch size 1, requested type "space"
 17103                           ; Number of cases is 1, Range of values is 0 to 0
 17104                           ; switch strategies available:
 17105                           ; Name         Instructions Cycles
 17106                           ; simple_byte            4     3 (average)
 17107                           ; direct_byte            8     6 (fixed)
 17108                           ; jumptable            260     6 (fixed)
 17109                           ;	Chosen strategy is simple_byte
 17110  24B4  0820               	movf	USARTInit@baud_rate^(0+128),w
 17111  24B5  3A00               	xorlw	0	; case 0
 17112  24B6  1903               	skipnz
 17113  24B7  2C98               	goto	l8600
 17114  24B8  2CC3               	goto	l1705
 17115  24B9                     l9702:	
 17116                           
 17117                           ; Switch size 1, requested type "space"
 17118                           ; Number of cases is 1, Range of values is 18 to 18
 17119                           ; switch strategies available:
 17120                           ; Name         Instructions Cycles
 17121                           ; simple_byte            4     3 (average)
 17122                           ; direct_byte           11     9 (fixed)
 17123                           ; jumptable            263     9 (fixed)
 17124                           ;	Chosen strategy is simple_byte
 17125  24B9  0820               	movf	USARTInit@baud_rate^(0+128),w
 17126  24BA  3A12               	xorlw	18	; case 18
 17127  24BB  1903               	skipnz
 17128  24BC  2C9A               	goto	l8602
 17129  24BD  2CC3               	goto	l1705
 17130  24BE                     l9704:	
 17131                           
 17132                           ; Switch size 1, requested type "space"
 17133                           ; Number of cases is 1, Range of values is 0 to 0
 17134                           ; switch strategies available:
 17135                           ; Name         Instructions Cycles
 17136                           ; simple_byte            4     3 (average)
 17137                           ; direct_byte            8     6 (fixed)
 17138                           ; jumptable            260     6 (fixed)
 17139                           ;	Chosen strategy is simple_byte
 17140  24BE  0820               	movf	USARTInit@baud_rate^(0+128),w
 17141  24BF  3A00               	xorlw	0	; case 0
 17142  24C0  1903               	skipnz
 17143  24C1  2C9C               	goto	l8604
 17144  24C2  2CC3               	goto	l1705
 17145  24C3                     l1705:	
 17146                           
 17147                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
 17148  24C3  0023               	movlb	3	; select bank3
 17149  24C4  131E               	bcf	30,6	;volatile
 17150                           
 17151                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
 17152  24C5  169E               	bsf	30,5	;volatile
 17153                           
 17154                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
 17155  24C6  121E               	bcf	30,4	;volatile
 17156                           
 17157                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
 17158  24C7  151E               	bsf	30,2	;volatile
 17159                           
 17160                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
 17161  24C8  179D               	bsf	29,7	;volatile
 17162                           
 17163                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
 17164  24C9  131D               	bcf	29,6	;volatile
 17165                           
 17166                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
 17167  24CA  161D               	bsf	29,4	;volatile
 17168                           
 17169                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
 17170  24CB  119D               	bcf	29,3	;volatile
 17171                           
 17172                           ;usart_pic16.c: 65: RCIE=1;
 17173  24CC  0021               	movlb	1	; select bank1
 17174  24CD  1691               	bsf	17,5	;volatile
 17175                           
 17176                           ;usart_pic16.c: 66: PEIE=1;
 17177  24CE  170B               	bsf	11,6	;volatile
 17178                           
 17179                           ;usart_pic16.c: 68: (GIE = 1);
 17180  24CF  178B               	bsf	11,7	;volatile
 17181  24D0  0008               	return
 17182  24D1                     __end_of_USARTInit:	
 17183                           
 17184                           	psect	text58
 17185  278A                     __ptext58:	
 17186 ;; *************** function _ReadSavedSettings *****************
 17187 ;; Defined at:
 17188 ;;		line 234 in file "user.c"
 17189 ;; Parameters:    Size  Location     Type
 17190 ;;		None
 17191 ;; Auto vars:     Size  Location     Type
 17192 ;;		None
 17193 ;; Return value:  Size  Location     Type
 17194 ;;                  1    wreg      void 
 17195 ;; Registers used:
 17196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17197 ;; Tracked objects:
 17198 ;;		On entry : 0/0
 17199 ;;		On exit  : 0/0
 17200 ;;		Unchanged: 0/0
 17201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17204 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17205 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17206 ;;Total ram usage:        1 bytes
 17207 ;; Hardware stack levels used:    1
 17208 ;; Hardware stack levels required when called:    4
 17209 ;; This function calls:
 17210 ;;		_FLASH_ReadWord
 17211 ;;		_set_leds_bottom
 17212 ;;		_set_leds_top
 17213 ;; This function is called by:
 17214 ;;		_main
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           
 17219                           ;psect for function _ReadSavedSettings
 17220  278A                     _ReadSavedSettings:	
 17221                           
 17222                           ;user.c: 236: top_push_state = FLASH_ReadWord(0x1F81);
 17223                           
 17224                           ;incstack = 0
 17225                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17226  278A  3081               	movlw	129
 17227  278B  0021               	movlb	1	; select bank1
 17228  278C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17229  278D  301F               	movlw	31
 17230  278E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17231  278F  31A0  2035  31A7   	fcall	_FLASH_ReadWord
 17232  2792  0021               	movlb	1	; select bank1
 17233  2793  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17234  2794  0020               	movlb	0	; select bank0
 17235  2795  00DA               	movwf	_top_push_state+1
 17236  2796  0021               	movlb	1	; select bank1
 17237  2797  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17238  2798  0020               	movlb	0	; select bank0
 17239  2799  00D9               	movwf	_top_push_state
 17240                           
 17241                           ;user.c: 237: bottom_push_state = FLASH_ReadWord(0x1F82);
 17242  279A  3082               	movlw	130
 17243  279B  0021               	movlb	1	; select bank1
 17244  279C  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 17245  279D  301F               	movlw	31
 17246  279E  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 17247  279F  31A0  2035  31A7   	fcall	_FLASH_ReadWord
 17248  27A2  0021               	movlb	1	; select bank1
 17249  27A3  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 17250  27A4  0020               	movlb	0	; select bank0
 17251  27A5  00D6               	movwf	_bottom_push_state+1
 17252  27A6  0021               	movlb	1	; select bank1
 17253  27A7  0820               	movf	?_FLASH_ReadWord^(0+128),w
 17254  27A8  0020               	movlb	0	; select bank0
 17255  27A9  00D5               	movwf	_bottom_push_state
 17256                           
 17257                           ;user.c: 239: if (top_push_state > 6) {
 17258  27AA  085A               	movf	_top_push_state+1,w
 17259  27AB  3A80               	xorlw	128
 17260  27AC  0021               	movlb	1	; select bank1
 17261  27AD  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17262  27AE  3080               	movlw	128
 17263  27AF  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17264  27B0  1D03               	skipz
 17265  27B1  2FB5               	goto	u9205
 17266  27B2  3007               	movlw	7
 17267  27B3  0020               	movlb	0	; select bank0
 17268  27B4  0259               	subwf	_top_push_state,w
 17269  27B5                     u9205:	
 17270  27B5  1C03               	skipc
 17271  27B6  2FBC               	goto	l626
 17272                           
 17273                           ;user.c: 241: top_push_state = 6;
 17274  27B7  3006               	movlw	6
 17275  27B8  0020               	movlb	0	; select bank0
 17276  27B9  00D9               	movwf	_top_push_state
 17277  27BA  3000               	movlw	0
 17278  27BB  00DA               	movwf	_top_push_state+1
 17279  27BC                     l626:	
 17280                           
 17281                           ;user.c: 242: }
 17282                           ;user.c: 243: if (bottom_push_state > 5) {
 17283  27BC  0020               	movlb	0	; select bank0
 17284  27BD  0856               	movf	_bottom_push_state+1,w
 17285  27BE  3A80               	xorlw	128
 17286  27BF  0021               	movlb	1	; select bank1
 17287  27C0  00A4               	movwf	??_ReadSavedSettings^(0+128)
 17288  27C1  3080               	movlw	128
 17289  27C2  0224               	subwf	??_ReadSavedSettings^(0+128),w
 17290  27C3  1D03               	skipz
 17291  27C4  2FC8               	goto	u9215
 17292  27C5  3006               	movlw	6
 17293  27C6  0020               	movlb	0	; select bank0
 17294  27C7  0255               	subwf	_bottom_push_state,w
 17295  27C8                     u9215:	
 17296  27C8  1C03               	skipc
 17297  27C9  2FCF               	goto	l8662
 17298                           
 17299                           ;user.c: 245: bottom_push_state = 1;
 17300  27CA  3001               	movlw	1
 17301  27CB  0020               	movlb	0	; select bank0
 17302  27CC  00D5               	movwf	_bottom_push_state
 17303  27CD  3000               	movlw	0
 17304  27CE  00D6               	movwf	_bottom_push_state+1
 17305  27CF                     l8662:	
 17306                           
 17307                           ;user.c: 246: }
 17308                           ;user.c: 249: LATGbits.LATG1 = !switchBypass_state;
 17309  27CF  0020               	movlb	0	; select bank0
 17310  27D0  085F               	movf	_switchBypass_state,w
 17311  27D1  1D03               	btfss	3,2
 17312  27D2  2FD6               	goto	u9220
 17313  27D3  0027               	movlb	7	; select bank7
 17314  27D4  148D               	bsf	13,1	;volatile
 17315  27D5  2FD8               	goto	l8664
 17316  27D6                     u9220:	
 17317  27D6  0027               	movlb	7	; select bank7
 17318  27D7  108D               	bcf	13,1	;volatile
 17319  27D8                     l8664:	
 17320                           
 17321                           ;user.c: 250: LATGbits.LATG2 = switchBypass_state;
 17322  27D8  0020               	movlb	0	; select bank0
 17323  27D9  0C5F               	rrf	_switchBypass_state,w
 17324  27DA  0027               	movlb	7	; select bank7
 17325  27DB  1C03               	skipc
 17326  27DC  110D               	bcf	13,2	;volatile
 17327  27DD  1803               	skipnc
 17328  27DE  150D               	bsf	13,2	;volatile
 17329                           
 17330                           ;user.c: 251: LATBbits.LATB2 = 0;
 17331  27DF  0022               	movlb	2	; select bank2
 17332  27E0  110D               	bcf	13,2	;volatile
 17333                           
 17334                           ;user.c: 252: LATBbits.LATB3 = 0;
 17335  27E1  118D               	bcf	13,3	;volatile
 17336                           
 17337                           ;user.c: 254: LATBbits.LATB4 = 0;
 17338  27E2  120D               	bcf	13,4	;volatile
 17339                           
 17340                           ;user.c: 255: LATBbits.LATB5 = 0;
 17341  27E3  128D               	bcf	13,5	;volatile
 17342                           
 17343                           ;user.c: 257: LATBbits.LATB1 = 0;
 17344  27E4  108D               	bcf	13,1	;volatile
 17345                           
 17346                           ;user.c: 258: LATBbits.LATB0 = 0;
 17347  27E5  100D               	bcf	13,0	;volatile
 17348                           
 17349                           ;user.c: 261: set_leds_top(top_push_state, 1);
 17350  27E6  0020               	movlb	0	; select bank0
 17351  27E7  085A               	movf	_top_push_state+1,w
 17352  27E8  0021               	movlb	1	; select bank1
 17353  27E9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 17354  27EA  0020               	movlb	0	; select bank0
 17355  27EB  0859               	movf	_top_push_state,w
 17356  27EC  0021               	movlb	1	; select bank1
 17357  27ED  00A0               	movwf	set_leds_top@x^(0+128)
 17358  27EE  3001               	movlw	1
 17359  27EF  00A2               	movwf	set_leds_top@ledState^(0+128)
 17360  27F0  3000               	movlw	0
 17361  27F1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 17362  27F2  31A6  265F  31A7   	fcall	_set_leds_top
 17363                           
 17364                           ;user.c: 262: set_leds_bottom(bottom_push_state);
 17365  27F5  0020               	movlb	0	; select bank0
 17366  27F6  0856               	movf	_bottom_push_state+1,w
 17367  27F7  0021               	movlb	1	; select bank1
 17368  27F8  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 17369  27F9  0020               	movlb	0	; select bank0
 17370  27FA  0855               	movf	_bottom_push_state,w
 17371  27FB  0021               	movlb	1	; select bank1
 17372  27FC  00A0               	movwf	set_leds_bottom@x^(0+128)
 17373  27FD  31A2  2298         	fcall	_set_leds_bottom
 17374  27FF  0008               	return
 17375  2800                     __end_of_ReadSavedSettings:	
 17376                           
 17377                           	psect	text59
 17378  265F                     __ptext59:	
 17379 ;; *************** function _set_leds_top *****************
 17380 ;; Defined at:
 17381 ;;		line 16 in file "LEDs.c"
 17382 ;; Parameters:    Size  Location     Type
 17383 ;;  x               2    0[BANK1 ] int 
 17384 ;;  ledState        2    2[BANK1 ] int 
 17385 ;; Auto vars:     Size  Location     Type
 17386 ;;		None
 17387 ;; Return value:  Size  Location     Type
 17388 ;;                  1    wreg      void 
 17389 ;; Registers used:
 17390 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17391 ;; Tracked objects:
 17392 ;;		On entry : 0/0
 17393 ;;		On exit  : 0/0
 17394 ;;		Unchanged: 0/0
 17395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17396 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17399 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17400 ;;Total ram usage:        4 bytes
 17401 ;; Hardware stack levels used:    1
 17402 ;; Hardware stack levels required when called:    3
 17403 ;; This function calls:
 17404 ;;		Nothing
 17405 ;; This function is called by:
 17406 ;;		_ReadSavedSettings
 17407 ;;		_ring_tactiles
 17408 ;;		_solidring_tactiles
 17409 ;;		_setPresetDisplay
 17410 ;;		_resetRingLEDs
 17411 ;;		_setExpressionDisplay
 17412 ;;		_star_tactiles
 17413 ;;		_read_top_tactile
 17414 ;; This function uses a non-reentrant model
 17415 ;;
 17416                           
 17417                           
 17418                           ;psect for function _set_leds_top
 17419  265F                     _set_leds_top:	
 17420                           
 17421                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 17422                           
 17423                           ;incstack = 0
 17424                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 17425  265F  0027               	movlb	7	; select bank7
 17426  2660  100C               	bcf	12,0	;volatile
 17427                           
 17428                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 17429  2661  108C               	bcf	12,1	;volatile
 17430                           
 17431                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 17432  2662  110C               	bcf	12,2	;volatile
 17433                           
 17434                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 17435  2663  118C               	bcf	12,3	;volatile
 17436                           
 17437                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 17438  2664  120C               	bcf	12,4	;volatile
 17439                           
 17440                           ;LEDs.c: 22: switch (x) {
 17441  2665  2E95               	goto	l7644
 17442  2666                     l7632:	
 17443                           ;LEDs.c: 23: case 1:
 17444                           
 17445                           
 17446                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 17447  2666  0021               	movlb	1	; select bank1
 17448  2667  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17449  2668  0027               	movlb	7	; select bank7
 17450  2669  1C03               	skipc
 17451  266A  100C               	bcf	12,0	;volatile
 17452  266B  1803               	skipnc
 17453  266C  140C               	bsf	12,0	;volatile
 17454                           
 17455                           ;LEDs.c: 25: break;
 17456  266D  0008               	return
 17457  266E                     l7634:	
 17458                           ;LEDs.c: 26: case 2:
 17459                           
 17460                           
 17461                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 17462  266E  0021               	movlb	1	; select bank1
 17463  266F  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17464  2670  0027               	movlb	7	; select bank7
 17465  2671  1C03               	skipc
 17466  2672  108C               	bcf	12,1	;volatile
 17467  2673  1803               	skipnc
 17468  2674  148C               	bsf	12,1	;volatile
 17469                           
 17470                           ;LEDs.c: 28: break;
 17471  2675  0008               	return
 17472  2676                     l7636:	
 17473                           ;LEDs.c: 29: case 3:
 17474                           
 17475                           
 17476                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 17477  2676  0021               	movlb	1	; select bank1
 17478  2677  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17479  2678  0027               	movlb	7	; select bank7
 17480  2679  1C03               	skipc
 17481  267A  110C               	bcf	12,2	;volatile
 17482  267B  1803               	skipnc
 17483  267C  150C               	bsf	12,2	;volatile
 17484                           
 17485                           ;LEDs.c: 31: break;
 17486  267D  0008               	return
 17487  267E                     l7638:	
 17488                           ;LEDs.c: 32: case 4:
 17489                           
 17490                           
 17491                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 17492  267E  0021               	movlb	1	; select bank1
 17493  267F  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17494  2680  0027               	movlb	7	; select bank7
 17495  2681  1C03               	skipc
 17496  2682  118C               	bcf	12,3	;volatile
 17497  2683  1803               	skipnc
 17498  2684  158C               	bsf	12,3	;volatile
 17499                           
 17500                           ;LEDs.c: 34: break;
 17501  2685  0008               	return
 17502  2686                     l7640:	
 17503                           ;LEDs.c: 35: case 5:
 17504                           
 17505                           
 17506                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 17507  2686  0021               	movlb	1	; select bank1
 17508  2687  0C22               	rrf	set_leds_top@ledState^(0+128),w
 17509  2688  0027               	movlb	7	; select bank7
 17510  2689  1C03               	skipc
 17511  268A  120C               	bcf	12,4	;volatile
 17512  268B  1803               	skipnc
 17513  268C  160C               	bsf	12,4	;volatile
 17514                           
 17515                           ;LEDs.c: 39: break;
 17516                           
 17517                           ;LEDs.c: 38: case 6:
 17518                           
 17519                           ;LEDs.c: 37: break;
 17520  268D  0008               	return
 17521  268E                     l785:	
 17522                           ;LEDs.c: 40: case 100:
 17523                           
 17524                           
 17525                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 17526  268E  0027               	movlb	7	; select bank7
 17527  268F  140C               	bsf	12,0	;volatile
 17528                           
 17529                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 17530  2690  148C               	bsf	12,1	;volatile
 17531                           
 17532                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 17533  2691  150C               	bsf	12,2	;volatile
 17534                           
 17535                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 17536  2692  158C               	bsf	12,3	;volatile
 17537                           
 17538                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 17539  2693  160C               	bsf	12,4	;volatile
 17540                           
 17541                           ;LEDs.c: 47: }
 17542                           
 17543                           ;LEDs.c: 46: break;
 17544  2694  0008               	return
 17545  2695                     l7644:	
 17546                           
 17547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17548                           ; Switch size 1, requested type "space"
 17549                           ; Number of cases is 1, Range of values is 0 to 0
 17550                           ; switch strategies available:
 17551                           ; Name         Instructions Cycles
 17552                           ; simple_byte            4     3 (average)
 17553                           ; direct_byte            8     6 (fixed)
 17554                           ; jumptable            260     6 (fixed)
 17555                           ;	Chosen strategy is simple_byte
 17556  2695  0021               	movlb	1	; select bank1
 17557  2696  0821               	movf	(set_leds_top@x+1)^(0+128),w
 17558  2697  3A00               	xorlw	0	; case 0
 17559  2698  1903               	skipnz
 17560  2699  2E9B               	goto	l9706
 17561  269A  2EB2               	goto	l786
 17562  269B                     l9706:	
 17563                           
 17564                           ; Switch size 1, requested type "space"
 17565                           ; Number of cases is 7, Range of values is 1 to 100
 17566                           ; switch strategies available:
 17567                           ; Name         Instructions Cycles
 17568                           ; simple_byte           22    12 (average)
 17569                           ; direct_byte          209     9 (fixed)
 17570                           ; jumptable            263     9 (fixed)
 17571                           ;	Chosen strategy is simple_byte
 17572  269B  0820               	movf	set_leds_top@x^(0+128),w
 17573  269C  3A01               	xorlw	1	; case 1
 17574  269D  1903               	skipnz
 17575  269E  2E66               	goto	l7632
 17576  269F  3A03               	xorlw	3	; case 2
 17577  26A0  1903               	skipnz
 17578  26A1  2E6E               	goto	l7634
 17579  26A2  3A01               	xorlw	1	; case 3
 17580  26A3  1903               	skipnz
 17581  26A4  2E76               	goto	l7636
 17582  26A5  3A07               	xorlw	7	; case 4
 17583  26A6  1903               	skipnz
 17584  26A7  2E7E               	goto	l7638
 17585  26A8  3A01               	xorlw	1	; case 5
 17586  26A9  1903               	skipnz
 17587  26AA  2E86               	goto	l7640
 17588  26AB  3A03               	xorlw	3	; case 6
 17589  26AC  1903               	skipnz
 17590  26AD  2EB2               	goto	l786
 17591  26AE  3A62               	xorlw	98	; case 100
 17592  26AF  1903               	skipnz
 17593  26B0  2E8E               	goto	l785
 17594  26B1  2EB2               	goto	l786
 17595  26B2                     l786:	
 17596  26B2  0008               	return
 17597  26B3                     __end_of_set_leds_top:	
 17598                           
 17599                           	psect	text60
 17600  2298                     __ptext60:	
 17601 ;; *************** function _set_leds_bottom *****************
 17602 ;; Defined at:
 17603 ;;		line 51 in file "LEDs.c"
 17604 ;; Parameters:    Size  Location     Type
 17605 ;;  x               2    0[BANK1 ] int 
 17606 ;; Auto vars:     Size  Location     Type
 17607 ;;		None
 17608 ;; Return value:  Size  Location     Type
 17609 ;;                  1    wreg      void 
 17610 ;; Registers used:
 17611 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17617 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17620 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17621 ;;Total ram usage:        2 bytes
 17622 ;; Hardware stack levels used:    1
 17623 ;; Hardware stack levels required when called:    3
 17624 ;; This function calls:
 17625 ;;		Nothing
 17626 ;; This function is called by:
 17627 ;;		_ReadSavedSettings
 17628 ;;		_ring_tactiles
 17629 ;;		_solidring_tactiles
 17630 ;;		_setPresetDisplay
 17631 ;;		_resetRingLEDs
 17632 ;;		_setExpressionDisplay
 17633 ;;		_star_tactiles
 17634 ;;		_read_bottom_tactile
 17635 ;; This function uses a non-reentrant model
 17636 ;;
 17637                           
 17638                           
 17639                           ;psect for function _set_leds_bottom
 17640  2298                     _set_leds_bottom:	
 17641                           
 17642                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 17643                           
 17644                           ;incstack = 0
 17645                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 17646  2298  0022               	movlb	2	; select bank2
 17647  2299  100F               	bcf	15,0	;volatile
 17648                           
 17649                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 17650  229A  108F               	bcf	15,1	;volatile
 17651                           
 17652                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 17653  229B  110F               	bcf	15,2	;volatile
 17654                           
 17655                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 17656  229C  118F               	bcf	15,3	;volatile
 17657                           
 17658                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 17659  229D  120F               	bcf	15,4	;volatile
 17660                           
 17661                           ;LEDs.c: 57: switch (x) {
 17662  229E  2AB5               	goto	l7660
 17663  229F                     l790:	
 17664                           ;LEDs.c: 58: case 1:
 17665                           
 17666                           
 17667                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 17668  229F  0022               	movlb	2	; select bank2
 17669  22A0  140F               	bsf	15,0	;volatile
 17670                           
 17671                           ;LEDs.c: 60: break;
 17672  22A1  0008               	return
 17673  22A2                     l792:	
 17674                           ;LEDs.c: 61: case 2:
 17675                           
 17676                           
 17677                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 17678  22A2  0022               	movlb	2	; select bank2
 17679  22A3  148F               	bsf	15,1	;volatile
 17680                           
 17681                           ;LEDs.c: 63: break;
 17682  22A4  0008               	return
 17683  22A5                     l793:	
 17684                           ;LEDs.c: 64: case 3:
 17685                           
 17686                           
 17687                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 17688  22A5  0022               	movlb	2	; select bank2
 17689  22A6  150F               	bsf	15,2	;volatile
 17690                           
 17691                           ;LEDs.c: 66: break;
 17692  22A7  0008               	return
 17693  22A8                     l794:	
 17694                           ;LEDs.c: 67: case 4:
 17695                           
 17696                           
 17697                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 17698  22A8  0022               	movlb	2	; select bank2
 17699  22A9  158F               	bsf	15,3	;volatile
 17700                           
 17701                           ;LEDs.c: 69: break;
 17702  22AA  0008               	return
 17703  22AB                     l795:	
 17704                           ;LEDs.c: 70: case 5:
 17705                           
 17706                           
 17707                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 17708  22AB  0022               	movlb	2	; select bank2
 17709  22AC  160F               	bsf	15,4	;volatile
 17710                           
 17711                           ;LEDs.c: 74: break;
 17712                           
 17713                           ;LEDs.c: 73: case 6:
 17714                           
 17715                           ;LEDs.c: 72: break;
 17716  22AD  0008               	return
 17717  22AE                     l797:	
 17718                           ;LEDs.c: 75: case 100:
 17719                           
 17720                           
 17721                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 17722  22AE  0022               	movlb	2	; select bank2
 17723  22AF  140F               	bsf	15,0	;volatile
 17724                           
 17725                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 17726  22B0  148F               	bsf	15,1	;volatile
 17727                           
 17728                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 17729  22B1  150F               	bsf	15,2	;volatile
 17730                           
 17731                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 17732  22B2  158F               	bsf	15,3	;volatile
 17733                           
 17734                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 17735  22B3  160F               	bsf	15,4	;volatile
 17736                           
 17737                           ;LEDs.c: 82: }
 17738                           
 17739                           ;LEDs.c: 81: break;
 17740  22B4  0008               	return
 17741  22B5                     l7660:	
 17742                           
 17743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17744                           ; Switch size 1, requested type "space"
 17745                           ; Number of cases is 1, Range of values is 0 to 0
 17746                           ; switch strategies available:
 17747                           ; Name         Instructions Cycles
 17748                           ; simple_byte            4     3 (average)
 17749                           ; direct_byte            8     6 (fixed)
 17750                           ; jumptable            260     6 (fixed)
 17751                           ;	Chosen strategy is simple_byte
 17752  22B5  0021               	movlb	1	; select bank1
 17753  22B6  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 17754  22B7  3A00               	xorlw	0	; case 0
 17755  22B8  1903               	skipnz
 17756  22B9  2ABB               	goto	l9708
 17757  22BA  2AD2               	goto	l798
 17758  22BB                     l9708:	
 17759                           
 17760                           ; Switch size 1, requested type "space"
 17761                           ; Number of cases is 7, Range of values is 1 to 100
 17762                           ; switch strategies available:
 17763                           ; Name         Instructions Cycles
 17764                           ; simple_byte           22    12 (average)
 17765                           ; direct_byte          209     9 (fixed)
 17766                           ; jumptable            263     9 (fixed)
 17767                           ;	Chosen strategy is simple_byte
 17768  22BB  0820               	movf	set_leds_bottom@x^(0+128),w
 17769  22BC  3A01               	xorlw	1	; case 1
 17770  22BD  1903               	skipnz
 17771  22BE  2A9F               	goto	l790
 17772  22BF  3A03               	xorlw	3	; case 2
 17773  22C0  1903               	skipnz
 17774  22C1  2AA2               	goto	l792
 17775  22C2  3A01               	xorlw	1	; case 3
 17776  22C3  1903               	skipnz
 17777  22C4  2AA5               	goto	l793
 17778  22C5  3A07               	xorlw	7	; case 4
 17779  22C6  1903               	skipnz
 17780  22C7  2AA8               	goto	l794
 17781  22C8  3A01               	xorlw	1	; case 5
 17782  22C9  1903               	skipnz
 17783  22CA  2AAB               	goto	l795
 17784  22CB  3A03               	xorlw	3	; case 6
 17785  22CC  1903               	skipnz
 17786  22CD  2AD2               	goto	l798
 17787  22CE  3A62               	xorlw	98	; case 100
 17788  22CF  1903               	skipnz
 17789  22D0  2AAE               	goto	l797
 17790  22D1  2AD2               	goto	l798
 17791  22D2                     l798:	
 17792  22D2  0008               	return
 17793  22D3                     __end_of_set_leds_bottom:	
 17794                           
 17795                           	psect	text61
 17796  2035                     __ptext61:	
 17797 ;; *************** function _FLASH_ReadWord *****************
 17798 ;; Defined at:
 17799 ;;		line 58 in file "memory.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 17804 ;; Return value:  Size  Location     Type
 17805 ;;                  2    0[BANK1 ] unsigned int 
 17806 ;; Registers used:
 17807 ;;		wreg, status,2, status,0
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17813 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17814 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17816 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17817 ;;Total ram usage:        3 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    3
 17820 ;; This function calls:
 17821 ;;		Nothing
 17822 ;; This function is called by:
 17823 ;;		_ReadSavedSettings
 17824 ;;		_FLASH_WriteWord
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           
 17829                           ;psect for function _FLASH_ReadWord
 17830  2035                     _FLASH_ReadWord:	
 17831                           
 17832                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 17833                           
 17834                           ;incstack = 0
 17835                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 17836  2035  3000               	movlw	0
 17837  2036  1B8B               	btfsc	11,7	;volatile
 17838  2037  3001               	movlw	1
 17839  2038  0021               	movlb	1	; select bank1
 17840  2039  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 17841                           
 17842                           ;memory.c: 61: INTCONbits.GIE = 0;
 17843  203A  138B               	bcf	11,7	;volatile
 17844                           
 17845                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 17846  203B  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 17847  203C  0023               	movlb	3	; select bank3
 17848  203D  0091               	movwf	17	;volatile
 17849                           
 17850                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 17851  203E  0021               	movlb	1	; select bank1
 17852  203F  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 17853  2040  0023               	movlb	3	; select bank3
 17854  2041  0092               	movwf	18	;volatile
 17855                           
 17856                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 17857  2042  1315               	bcf	21,6	;volatile
 17858                           
 17859                           ;memory.c: 66: PMCON1bits.RD = 1;
 17860  2043  1415               	bsf	21,0	;volatile
 17861                           
 17862                           ;memory.c: 67: __nop();
 17863  2044  0000               	nop
 17864                           
 17865                           ;memory.c: 68: __nop();
 17866  2045  0000               	nop
 17867                           
 17868                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 17869  2046  0021               	movlb	1	; select bank1
 17870  2047  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 17871  2048  1C03               	skipc
 17872  2049  138B               	bcf	11,7	;volatile
 17873  204A  1803               	skipnc
 17874  204B  178B               	bsf	11,7	;volatile
 17875                           
 17876                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 17877  204C  0023               	movlb	3	; select bank3
 17878  204D  0814               	movf	20,w	;volatile
 17879  204E  0021               	movlb	1	; select bank1
 17880  204F  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 17881  2050  0023               	movlb	3	; select bank3
 17882  2051  0813               	movf	19,w	;volatile
 17883  2052  0021               	movlb	1	; select bank1
 17884  2053  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 17885  2054  0008               	return
 17886  2055                     __end_of_FLASH_ReadWord:	
 17887                           
 17888                           	psect	text62
 17889  20BB                     __ptext62:	
 17890 ;; *************** function _InitializeTaps *****************
 17891 ;; Defined at:
 17892 ;;		line 228 in file "user.c"
 17893 ;; Parameters:    Size  Location     Type
 17894 ;;		None
 17895 ;; Auto vars:     Size  Location     Type
 17896 ;;  itap            2    1[BANK1 ] int 
 17897 ;; Return value:  Size  Location     Type
 17898 ;;                  1    wreg      void 
 17899 ;; Registers used:
 17900 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17901 ;; Tracked objects:
 17902 ;;		On entry : 0/0
 17903 ;;		On exit  : 0/0
 17904 ;;		Unchanged: 0/0
 17905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17907 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17908 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17909 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17910 ;;Total ram usage:        3 bytes
 17911 ;; Hardware stack levels used:    1
 17912 ;; Hardware stack levels required when called:    3
 17913 ;; This function calls:
 17914 ;;		Nothing
 17915 ;; This function is called by:
 17916 ;;		_main
 17917 ;; This function uses a non-reentrant model
 17918 ;;
 17919                           
 17920                           
 17921                           ;psect for function _InitializeTaps
 17922  20BB                     _InitializeTaps:	
 17923                           
 17924                           ;user.c: 229: for (int itap = 0; itap < 12; itap++) {
 17925                           
 17926                           ;incstack = 0
 17927                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 17928  20BB  0021               	movlb	1	; select bank1
 17929  20BC  01A1               	clrf	InitializeTaps@itap^(0+128)
 17930  20BD  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 17931  20BE                     L24:	
 17932  20BE  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 17933  20BF  3A80               	xorlw	128
 17934  20C0  00A0               	movwf	??_InitializeTaps^(0+128)
 17935  20C1  3080               	movlw	128
 17936  20C2  0220               	subwf	??_InitializeTaps^(0+128),w
 17937  20C3  1D03               	skipz
 17938  20C4  28C7               	goto	u9175
 17939  20C5  300C               	movlw	12
 17940  20C6  0221               	subwf	InitializeTaps@itap^(0+128),w
 17941  20C7                     u9175:	
 17942  20C7  1803               	btfsc	3,0
 17943  20C8  0008               	return
 17944                           
 17945                           ;user.c: 230: tap[itap] = 0;
 17946  20C9  0021               	movlb	1	; select bank1
 17947  20CA  0821               	movf	InitializeTaps@itap^(0+128),w
 17948  20CB  00A0               	movwf	??_InitializeTaps^(0+128)
 17949  20CC  3001               	movlw	1
 17950  20CD                     u9185:	
 17951  20CD  35A0               	lslf	??_InitializeTaps^(0+128),f
 17952  20CE  3EFF               	addlw	-1
 17953  20CF  1D03               	skipz
 17954  20D0  28CD               	goto	u9185
 17955  20D1  3520               	lslf	??_InitializeTaps^(0+128),w
 17956  20D2  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 17957  20D3  0086               	movwf	6
 17958  20D4  3002               	movlw	2	; select bank5/6
 17959  20D5  0087               	movwf	7
 17960  20D6  3000               	movlw	0
 17961  20D7  3FC0               	movwi [0]fsr1
 17962  20D8  3000               	movlw	0
 17963  20D9  3FC1               	movwi [1]fsr1
 17964  20DA  3FC2               	movwi [2]fsr1
 17965  20DB  3FC3               	movwi [3]fsr1
 17966  20DC  3001               	movlw	1
 17967  20DD  07A1               	addwf	InitializeTaps@itap^(0+128),f
 17968  20DE  3000               	movlw	0
 17969  20DF  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 17970  20E0  28BE               	goto	L24
 17971  20E1                     __end_of_InitializeTaps:	
 17972                           
 17973                           	psect	text63
 17974  2166                     __ptext63:	
 17975 ;; *************** function _InitApp *****************
 17976 ;; Defined at:
 17977 ;;		line 23 in file "user.c"
 17978 ;; Parameters:    Size  Location     Type
 17979 ;;		None
 17980 ;; Auto vars:     Size  Location     Type
 17981 ;;		None
 17982 ;; Return value:  Size  Location     Type
 17983 ;;                  1    wreg      void 
 17984 ;; Registers used:
 17985 ;;		wreg, status,2, status,0, pclath, cstack
 17986 ;; Tracked objects:
 17987 ;;		On entry : 0/0
 17988 ;;		On exit  : 0/0
 17989 ;;		Unchanged: 0/0
 17990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 17991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 17995 ;;Total ram usage:        0 bytes
 17996 ;; Hardware stack levels used:    1
 17997 ;; Hardware stack levels required when called:    5
 17998 ;; This function calls:
 17999 ;;		_init_adc
 18000 ;;		_init_pwm
 18001 ;; This function is called by:
 18002 ;;		_main
 18003 ;; This function uses a non-reentrant model
 18004 ;;
 18005                           
 18006                           
 18007                           ;psect for function _InitApp
 18008  2166                     _InitApp:	
 18009                           
 18010                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 18011                           
 18012                           ;incstack = 0
 18013                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 18014  2166  0021               	movlb	1	; select bank1
 18015  2167  100D               	bcf	13,0	;volatile
 18016                           
 18017                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 18018  2168  108D               	bcf	13,1	;volatile
 18019                           
 18020                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 18021  2169  110D               	bcf	13,2	;volatile
 18022                           
 18023                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 18024  216A  118D               	bcf	13,3	;volatile
 18025                           
 18026                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 18027  216B  120D               	bcf	13,4	;volatile
 18028                           
 18029                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 18030  216C  128D               	bcf	13,5	;volatile
 18031                           
 18032                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 18033  216D  140E               	bsf	14,0	;volatile
 18034                           
 18035                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 18036  216E  120E               	bcf	14,4	;volatile
 18037                           
 18038                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 18039  216F  128E               	bcf	14,5	;volatile
 18040                           
 18041                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 18042  2170  100F               	bcf	15,0	;volatile
 18043                           
 18044                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 18045  2171  108F               	bcf	15,1	;volatile
 18046                           
 18047                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 18048  2172  110F               	bcf	15,2	;volatile
 18049                           
 18050                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 18051  2173  118F               	bcf	15,3	;volatile
 18052                           
 18053                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 18054  2174  120F               	bcf	15,4	;volatile
 18055                           
 18056                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 18057  2175  168F               	bsf	15,5	;volatile
 18058                           
 18059                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 18060  2176  170F               	bsf	15,6	;volatile
 18061                           
 18062                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 18063  2177  178F               	bsf	15,7	;volatile
 18064                           
 18065                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 18066  2178  1410               	bsf	16,0	;volatile
 18067                           
 18068                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 18069  2179  1490               	bsf	16,1	;volatile
 18070                           
 18071                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 18072  217A  0023               	movlb	3	; select bank3
 18073  217B  1010               	bcf	16,0	;volatile
 18074                           
 18075                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 18076  217C  1090               	bcf	16,1	;volatile
 18077                           
 18078                           ;user.c: 53: PORTEbits.RE0 = 0;
 18079  217D  0020               	movlb	0	; select bank0
 18080  217E  1010               	bcf	16,0	;volatile
 18081                           
 18082                           ;user.c: 54: PORTEbits.RE1 = 0;
 18083  217F  1090               	bcf	16,1	;volatile
 18084                           
 18085                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 18086  2180  0026               	movlb	6	; select bank6
 18087  2181  100C               	bcf	12,0	;volatile
 18088                           
 18089                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 18090  2182  108C               	bcf	12,1	;volatile
 18091                           
 18092                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 18093  2183  110C               	bcf	12,2	;volatile
 18094                           
 18095                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 18096  2184  118C               	bcf	12,3	;volatile
 18097                           
 18098                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 18099  2185  120C               	bcf	12,4	;volatile
 18100                           
 18101                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 18102  2186  128C               	bcf	12,5	;volatile
 18103                           
 18104                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 18105  2187  170C               	bsf	12,6	;volatile
 18106                           
 18107                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 18108  2188  0028               	movlb	8	; select bank8
 18109  2189  130C               	bcf	12,6	;volatile
 18110                           
 18111                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 18112  218A  0026               	movlb	6	; select bank6
 18113  218B  108D               	bcf	13,1	;volatile
 18114                           
 18115                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 18116  218C  110D               	bcf	13,2	;volatile
 18117                           
 18118                           ;user.c: 68: init_adc();
 18119  218D  31AF  272D  31A1   	fcall	_init_adc
 18120                           
 18121                           ;user.c: 69: init_pwm();
 18122  2190  31A4  244C         	fcall	_init_pwm
 18123                           
 18124                           ;user.c: 71: INTCONbits.GIE = 0b1;
 18125  2192  178B               	bsf	11,7	;volatile
 18126                           
 18127                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 18128  2193  168B               	bsf	11,5	;volatile
 18129                           
 18130                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 18131  2194  110B               	bcf	11,2	;volatile
 18132  2195  0008               	return
 18133  2196                     __end_of_InitApp:	
 18134                           
 18135                           	psect	text64
 18136  244C                     __ptext64:	
 18137 ;; *************** function _init_pwm *****************
 18138 ;; Defined at:
 18139 ;;		line 129 in file "user.c"
 18140 ;; Parameters:    Size  Location     Type
 18141 ;;		None
 18142 ;; Auto vars:     Size  Location     Type
 18143 ;;		None
 18144 ;; Return value:  Size  Location     Type
 18145 ;;                  1    wreg      void 
 18146 ;; Registers used:
 18147 ;;		wreg, status,2, status,0, pclath, cstack
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18157 ;;Total ram usage:        0 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    4
 18160 ;; This function calls:
 18161 ;;		_init_timer0
 18162 ;;		_init_timer2
 18163 ;; This function is called by:
 18164 ;;		_InitApp
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           
 18169                           ;psect for function _init_pwm
 18170  244C                     _init_pwm:	
 18171                           
 18172                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 18173                           
 18174                           ;incstack = 0
 18175                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 18176  244C  0022               	movlb	2	; select bank2
 18177  244D  101D               	bcf	29,0	;volatile
 18178                           
 18179                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 18180  244E  0021               	movlb	1	; select bank1
 18181  244F  110E               	bcf	14,2	;volatile
 18182                           
 18183                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 18184  2450  108E               	bcf	14,1	;volatile
 18185                           
 18186                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 18187  2451  0026               	movlb	6	; select bank6
 18188  2452  100D               	bcf	13,0	;volatile
 18189                           
 18190                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 18191  2453  118D               	bcf	13,3	;volatile
 18192                           
 18193                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 18194  2454  120D               	bcf	13,4	;volatile
 18195                           
 18196                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 18197  2455  0021               	movlb	1	; select bank1
 18198  2456  1310               	bcf	16,6	;volatile
 18199                           
 18200                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 18201  2457  1290               	bcf	16,5	;volatile
 18202                           
 18203                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 18204  2458  1210               	bcf	16,4	;volatile
 18205                           
 18206                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 18207  2459  1190               	bcf	16,3	;volatile
 18208                           
 18209                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 18210  245A  1110               	bcf	16,2	;volatile
 18211                           
 18212                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 18213  245B  300F               	movlw	15
 18214  245C  0025               	movlb	5	; select bank5
 18215  245D  0493               	iorwf	19,f	;volatile
 18216                           
 18217                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 18218  245E  300F               	movlw	15
 18219  245F  049A               	iorwf	26,f	;volatile
 18220                           
 18221                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 18222  2460  300F               	movlw	15
 18223  2461  0026               	movlb	6	; select bank6
 18224  2462  0493               	iorwf	19,f	;volatile
 18225                           
 18226                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 18227  2463  300F               	movlw	15
 18228  2464  049A               	iorwf	26,f	;volatile
 18229                           
 18230                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 18231  2465  300F               	movlw	15
 18232  2466  049E               	iorwf	30,f	;volatile
 18233                           
 18234                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 18235  2467  300F               	movlw	15
 18236  2468  002C               	movlb	12	; select bank12
 18237  2469  0493               	iorwf	19,f	;volatile
 18238                           
 18239                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 18240  246A  300F               	movlw	15
 18241  246B  0496               	iorwf	22,f	;volatile
 18242                           
 18243                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 18244  246C  300F               	movlw	15
 18245  246D  0499               	iorwf	25,f	;volatile
 18246                           
 18247                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 18248  246E  300F               	movlw	15
 18249  246F  049C               	iorwf	28,f	;volatile
 18250                           
 18251                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 18252  2470  300F               	movlw	15
 18253  2471  049F               	iorwf	31,f	;volatile
 18254                           
 18255                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 18256  2472  0025               	movlb	5	; select bank5
 18257  2473  019D               	clrf	29	;volatile
 18258                           
 18259                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 18260  2474  019E               	clrf	30	;volatile
 18261                           
 18262                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 18263  2475  019F               	clrf	31	;volatile
 18264                           
 18265                           ;user.c: 154: CCPR1 = 50;
 18266  2476  3000               	movlw	0
 18267  2477  0092               	movwf	18	;volatile
 18268  2478  3032               	movlw	50
 18269  2479  0091               	movwf	17	;volatile
 18270                           
 18271                           ;user.c: 155: CCPR2 = 100;
 18272  247A  3000               	movlw	0
 18273  247B  0099               	movwf	25	;volatile
 18274  247C  3064               	movlw	100
 18275  247D  0098               	movwf	24	;volatile
 18276                           
 18277                           ;user.c: 156: CCPR3 = 150;
 18278  247E  3000               	movlw	0
 18279  247F  0026               	movlb	6	; select bank6
 18280  2480  0092               	movwf	18	;volatile
 18281  2481  3096               	movlw	150
 18282  2482  0091               	movwf	17	;volatile
 18283                           
 18284                           ;user.c: 157: CCPR4 = 200;
 18285  2483  3000               	movlw	0
 18286  2484  0099               	movwf	25	;volatile
 18287  2485  30C8               	movlw	200
 18288  2486  0098               	movwf	24	;volatile
 18289                           
 18290                           ;user.c: 158: init_timer2();
 18291  2487  31AF  271B  31A4   	fcall	_init_timer2
 18292                           
 18293                           ;user.c: 159: init_timer0();
 18294  248A  3187  27F8         	fcall	_init_timer0
 18295  248C  0008               	return
 18296  248D                     __end_of_init_pwm:	
 18297                           
 18298                           	psect	text65
 18299  2F1B                     __ptext65:	
 18300 ;; *************** function _init_timer2 *****************
 18301 ;; Defined at:
 18302 ;;		line 162 in file "user.c"
 18303 ;; Parameters:    Size  Location     Type
 18304 ;;		None
 18305 ;; Auto vars:     Size  Location     Type
 18306 ;;		None
 18307 ;; Return value:  Size  Location     Type
 18308 ;;                  1    wreg      void 
 18309 ;; Registers used:
 18310 ;;		wreg, status,2, status,0
 18311 ;; Tracked objects:
 18312 ;;		On entry : 0/0
 18313 ;;		On exit  : 0/0
 18314 ;;		Unchanged: 0/0
 18315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18320 ;;Total ram usage:        0 bytes
 18321 ;; Hardware stack levels used:    1
 18322 ;; Hardware stack levels required when called:    3
 18323 ;; This function calls:
 18324 ;;		Nothing
 18325 ;; This function is called by:
 18326 ;;		_init_pwm
 18327 ;; This function uses a non-reentrant model
 18328 ;;
 18329                           
 18330                           
 18331                           ;psect for function _init_timer2
 18332  2F1B                     _init_timer2:	
 18333                           
 18334                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 18335                           
 18336                           ;incstack = 0
 18337                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 18338  2F1B  3087               	movlw	-121
 18339  2F1C  0020               	movlb	0	; select bank0
 18340  2F1D  059C               	andwf	28,f	;volatile
 18341                           
 18342                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 18343  2F1E  30FC               	movlw	-4
 18344  2F1F  059C               	andwf	28,f	;volatile
 18345                           
 18346                           ;user.c: 165: PR2 = 0xFF;
 18347  2F20  30FF               	movlw	255
 18348  2F21  009B               	movwf	27	;volatile
 18349                           
 18350                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 18351  2F22  151C               	bsf	28,2	;volatile
 18352  2F23  0008               	return
 18353  2F24                     __end_of_init_timer2:	
 18354                           
 18355                           	psect	text66
 18356  07F8                     __ptext66:	
 18357 ;; *************** function _init_timer0 *****************
 18358 ;; Defined at:
 18359 ;;		line 169 in file "user.c"
 18360 ;; Parameters:    Size  Location     Type
 18361 ;;		None
 18362 ;; Auto vars:     Size  Location     Type
 18363 ;;		None
 18364 ;; Return value:  Size  Location     Type
 18365 ;;                  1    wreg      void 
 18366 ;; Registers used:
 18367 ;;		None
 18368 ;; Tracked objects:
 18369 ;;		On entry : 0/0
 18370 ;;		On exit  : 0/0
 18371 ;;		Unchanged: 0/0
 18372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18377 ;;Total ram usage:        0 bytes
 18378 ;; Hardware stack levels used:    1
 18379 ;; Hardware stack levels required when called:    3
 18380 ;; This function calls:
 18381 ;;		Nothing
 18382 ;; This function is called by:
 18383 ;;		_init_pwm
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           
 18388                           ;psect for function _init_timer0
 18389  07F8                     _init_timer0:	
 18390                           
 18391                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 18392                           
 18393                           ;incstack = 0
 18394                           ; Regs used in _init_timer0: []
 18395  07F8  0021               	movlb	1	; select bank1
 18396  07F9  1295               	bcf	21,5	;volatile
 18397                           
 18398                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 18399  07FA  1195               	bcf	21,3	;volatile
 18400                           
 18401                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 18402  07FB  1015               	bcf	21,0	;volatile
 18403                           
 18404                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 18405  07FC  1495               	bsf	21,1	;volatile
 18406                           
 18407                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 18408  07FD  1115               	bcf	21,2	;volatile
 18409  07FE  0008               	return
 18410  07FF                     __end_of_init_timer0:	
 18411                           
 18412                           	psect	text67
 18413  2F2D                     __ptext67:	
 18414 ;; *************** function _init_adc *****************
 18415 ;; Defined at:
 18416 ;;		line 115 in file "user.c"
 18417 ;; Parameters:    Size  Location     Type
 18418 ;;		None
 18419 ;; Auto vars:     Size  Location     Type
 18420 ;;		None
 18421 ;; Return value:  Size  Location     Type
 18422 ;;                  1    wreg      void 
 18423 ;; Registers used:
 18424 ;;		wreg, status,2, status,0
 18425 ;; Tracked objects:
 18426 ;;		On entry : 0/0
 18427 ;;		On exit  : 0/0
 18428 ;;		Unchanged: 0/0
 18429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18434 ;;Total ram usage:        0 bytes
 18435 ;; Hardware stack levels used:    1
 18436 ;; Hardware stack levels required when called:    3
 18437 ;; This function calls:
 18438 ;;		Nothing
 18439 ;; This function is called by:
 18440 ;;		_InitApp
 18441 ;; This function uses a non-reentrant model
 18442 ;;
 18443                           
 18444                           
 18445                           ;psect for function _init_adc
 18446  2F2D                     _init_adc:	
 18447                           
 18448                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 18449                           
 18450                           ;incstack = 0
 18451                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 18452  2F2D  0021               	movlb	1	; select bank1
 18453  2F2E  179E               	bsf	30,7	;volatile
 18454                           
 18455                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 18456  2F2F  081E               	movf	30,w	;volatile
 18457  2F30  398F               	andlw	-113
 18458  2F31  3860               	iorlw	96
 18459  2F32  009E               	movwf	30	;volatile
 18460                           
 18461                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 18462  2F33  30FC               	movlw	-4
 18463  2F34  059E               	andwf	30,f	;volatile
 18464                           
 18465                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 18466  2F35  141D               	bsf	29,0	;volatile
 18467  2F36  0008               	return
 18468  2F37                     __end_of_init_adc:	
 18469                           
 18470                           	psect	text68
 18471  2F13                     __ptext68:	
 18472 ;; *************** function _ConfigureOscillator *****************
 18473 ;; Defined at:
 18474 ;;		line 18 in file "system.c"
 18475 ;; Parameters:    Size  Location     Type
 18476 ;;		None
 18477 ;; Auto vars:     Size  Location     Type
 18478 ;;		None
 18479 ;; Return value:  Size  Location     Type
 18480 ;;                  1    wreg      void 
 18481 ;; Registers used:
 18482 ;;		wreg, status,2, status,0
 18483 ;; Tracked objects:
 18484 ;;		On entry : 0/0
 18485 ;;		On exit  : 0/0
 18486 ;;		Unchanged: 0/0
 18487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18492 ;;Total ram usage:        0 bytes
 18493 ;; Hardware stack levels used:    1
 18494 ;; Hardware stack levels required when called:    3
 18495 ;; This function calls:
 18496 ;;		Nothing
 18497 ;; This function is called by:
 18498 ;;		_main
 18499 ;; This function uses a non-reentrant model
 18500 ;;
 18501                           
 18502                           
 18503                           ;psect for function _ConfigureOscillator
 18504  2F13                     _ConfigureOscillator:	
 18505                           
 18506                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 18507                           
 18508                           ;incstack = 0
 18509                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 18510  2F13  30FC               	movlw	-4
 18511  2F14  0021               	movlb	1	; select bank1
 18512  2F15  0599               	andwf	25,f	;volatile
 18513  2F16  0008               	return
 18514  2F17                     __end_of_ConfigureOscillator:	
 18515                           
 18516                           	psect	intentry
 18517  0004                     __pintentry:	
 18518 ;; *************** function _isr *****************
 18519 ;; Defined at:
 18520 ;;		line 28 in file "interrupts.c"
 18521 ;; Parameters:    Size  Location     Type
 18522 ;;		None
 18523 ;; Auto vars:     Size  Location     Type
 18524 ;;  subDiv          1   13[COMMON] unsigned char 
 18525 ;; Return value:  Size  Location     Type
 18526 ;;                  1    wreg      void 
 18527 ;; Registers used:
 18528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18529 ;; Tracked objects:
 18530 ;;		On entry : 0/0
 18531 ;;		On exit  : 0/0
 18532 ;;		Unchanged: 0/0
 18533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 18534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18536 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18537 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 18538 ;;Total ram usage:        7 bytes
 18539 ;; Hardware stack levels used:    1
 18540 ;; Hardware stack levels required when called:    2
 18541 ;; This function calls:
 18542 ;;		_modulation
 18543 ;;		i1___awdiv
 18544 ;;		i1_getModulationSubdivision
 18545 ;;		i1_set_leds_top
 18546 ;; This function is called by:
 18547 ;;		Interrupt level 1
 18548 ;; This function uses a non-reentrant model
 18549 ;;
 18550                           
 18551  0004                     _isr:	
 18552                           
 18553                           ;incstack = 0
 18554                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18555  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18556  0005  3180               	pagesel	$
 18557  0006  0020               	movlb	0	; select bank0
 18558  0007  087F               	movf	127,w
 18559  0008  00BF               	movwf	??_isr+5
 18560                           
 18561                           ;interrupts.c: 31: extern char isInitialized;
 18562                           ;interrupts.c: 32: extern volatile long timer;
 18563                           ;interrupts.c: 33: extern volatile long sub_timer;
 18564                           ;interrupts.c: 34: extern volatile long tap_timer;
 18565                           ;interrupts.c: 35: extern signed int adjusted_pot_value;
 18566                           ;interrupts.c: 36: extern int mod_delay_time;
 18567                           ;interrupts.c: 40: extern int top_push_state;
 18568                           ;interrupts.c: 41: extern uint8_t longBypass_start;
 18569                           ;interrupts.c: 42: extern volatile long mod_timer;
 18570                           ;interrupts.c: 43: extern volatile long delay_time;
 18571                           ;interrupts.c: 46: if (INTCONbits.TMR0IF == 1) {
 18572  0009  1D0B               	btfss	11,2	;volatile
 18573  000A  2B0B               	goto	i1l135
 18574                           
 18575                           ;interrupts.c: 47: if (isInitialized == 0) {
 18576  000B  0023               	movlb	3	; select bank3
 18577  000C  0841               	movf	_isInitialized^(0+384),w
 18578  000D  1903               	btfsc	3,2
 18579  000E  2B0A               	goto	i1l6838
 18580                           
 18581                           ;interrupts.c: 52: }
 18582                           ;interrupts.c: 54: longBypass_start = 0;
 18583                           
 18584                           ;interrupts.c: 51: return;
 18585                           
 18586                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
 18587  000F  0020               	movlb	0	; select bank0
 18588  0010  01CB               	clrf	_longBypass_start
 18589                           
 18590                           ;interrupts.c: 55: longTap_start = 0;
 18591  0011  0022               	movlb	2	; select bank2
 18592  0012  01EC               	clrf	_longTap_start^(0+256)
 18593                           
 18594                           ;interrupts.c: 56: longTap_state = 0;
 18595  0013  0020               	movlb	0	; select bank0
 18596  0014  01DC               	clrf	_longTap_state	;volatile
 18597                           
 18598                           ;interrupts.c: 57: doubleTap_state = 0;
 18599  0015  01CA               	clrf	_doubleTap_state	;volatile
 18600                           
 18601                           ;interrupts.c: 58: presetSaveMode = 0;
 18602  0016  01CE               	clrf	_presetSaveMode
 18603                           
 18604                           ;interrupts.c: 59: baseline_mod_time = 2820;
 18605  0017  3000               	movlw	0
 18606  0018  0023               	movlb	3	; select bank3
 18607  0019  00CB               	movwf	(_baseline_mod_time+3)^(0+384)	;volatile
 18608  001A  3000               	movlw	0
 18609  001B  00CA               	movwf	(_baseline_mod_time+2)^(0+384)	;volatile
 18610  001C  300B               	movlw	11
 18611  001D  00C9               	movwf	(_baseline_mod_time+1)^(0+384)	;volatile
 18612  001E  3004               	movlw	4
 18613  001F  00C8               	movwf	_baseline_mod_time^(0+384)	;volatile
 18614                           
 18615                           ;interrupts.c: 62: if (timer == 0) {
 18616  0020  0020               	movlb	0	; select bank0
 18617  0021  0847               	movf	_timer+3,w	;volatile
 18618  0022  0446               	iorwf	_timer+2,w	;volatile
 18619  0023  0445               	iorwf	_timer+1,w	;volatile
 18620  0024  0444               	iorwf	_timer,w	;volatile
 18621  0025  1D03               	skipz
 18622  0026  282C               	goto	i1l136
 18623                           
 18624                           ;interrupts.c: 63: tmpModDelay = mod_delay_time;
 18625  0027  0023               	movlb	3	; select bank3
 18626  0028  085B               	movf	(_mod_delay_time+1)^(0+384),w
 18627  0029  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 18628  002A  085A               	movf	_mod_delay_time^(0+384),w
 18629  002B  00BC               	movwf	_tmpModDelay^(0+384)
 18630  002C                     i1l136:	
 18631                           
 18632                           ;interrupts.c: 64: }
 18633                           ;interrupts.c: 65: timer = timer + 1;
 18634  002C  3001               	movlw	1
 18635  002D  0020               	movlb	0	; select bank0
 18636  002E  00BA               	movwf	??_isr
 18637  002F  3000               	movlw	0
 18638  0030  00BB               	movwf	??_isr+1
 18639  0031  3000               	movlw	0
 18640  0032  00BC               	movwf	??_isr+2
 18641  0033  3000               	movlw	0
 18642  0034  00BD               	movwf	??_isr+3
 18643  0035  0844               	movf	_timer,w	;volatile
 18644  0036  07BA               	addwf	??_isr,f
 18645  0037  0845               	movf	_timer+1,w	;volatile
 18646  0038  3DBB               	addwfc	??_isr+1,f
 18647  0039  0846               	movf	_timer+2,w	;volatile
 18648  003A  3DBC               	addwfc	??_isr+2,f
 18649  003B  0847               	movf	_timer+3,w	;volatile
 18650  003C  3DBD               	addwfc	??_isr+3,f
 18651  003D  083D               	movf	??_isr+3,w
 18652  003E  00C7               	movwf	_timer+3	;volatile
 18653  003F  083C               	movf	??_isr+2,w
 18654  0040  00C6               	movwf	_timer+2	;volatile
 18655  0041  083B               	movf	??_isr+1,w
 18656  0042  00C5               	movwf	_timer+1	;volatile
 18657  0043  083A               	movf	??_isr,w
 18658  0044  00C4               	movwf	_timer	;volatile
 18659                           
 18660                           ;interrupts.c: 66: sub_timer = sub_timer + 1;
 18661  0045  3001               	movlw	1
 18662  0046  00BA               	movwf	??_isr
 18663  0047  3000               	movlw	0
 18664  0048  00BB               	movwf	??_isr+1
 18665  0049  3000               	movlw	0
 18666  004A  00BC               	movwf	??_isr+2
 18667  004B  3000               	movlw	0
 18668  004C  00BD               	movwf	??_isr+3
 18669  004D  0023               	movlb	3	; select bank3
 18670  004E  0828               	movf	_sub_timer^(0+384),w	;volatile
 18671  004F  0020               	movlb	0	; select bank0
 18672  0050  07BA               	addwf	??_isr,f
 18673  0051  0023               	movlb	3	; select bank3
 18674  0052  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 18675  0053  0020               	movlb	0	; select bank0
 18676  0054  3DBB               	addwfc	??_isr+1,f
 18677  0055  0023               	movlb	3	; select bank3
 18678  0056  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 18679  0057  0020               	movlb	0	; select bank0
 18680  0058  3DBC               	addwfc	??_isr+2,f
 18681  0059  0023               	movlb	3	; select bank3
 18682  005A  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 18683  005B  0020               	movlb	0	; select bank0
 18684  005C  3DBD               	addwfc	??_isr+3,f
 18685  005D  083D               	movf	??_isr+3,w
 18686  005E  0023               	movlb	3	; select bank3
 18687  005F  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 18688  0060  0020               	movlb	0	; select bank0
 18689  0061  083C               	movf	??_isr+2,w
 18690  0062  0023               	movlb	3	; select bank3
 18691  0063  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 18692  0064  0020               	movlb	0	; select bank0
 18693  0065  083B               	movf	??_isr+1,w
 18694  0066  0023               	movlb	3	; select bank3
 18695  0067  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 18696  0068  0020               	movlb	0	; select bank0
 18697  0069  083A               	movf	??_isr,w
 18698  006A  0023               	movlb	3	; select bank3
 18699  006B  00A8               	movwf	_sub_timer^(0+384)	;volatile
 18700                           
 18701                           ;interrupts.c: 67: tap_timer = tap_timer + 1;
 18702  006C  3001               	movlw	1
 18703  006D  0020               	movlb	0	; select bank0
 18704  006E  00BA               	movwf	??_isr
 18705  006F  3000               	movlw	0
 18706  0070  00BB               	movwf	??_isr+1
 18707  0071  3000               	movlw	0
 18708  0072  00BC               	movwf	??_isr+2
 18709  0073  3000               	movlw	0
 18710  0074  00BD               	movwf	??_isr+3
 18711  0075  0840               	movf	_tap_timer,w	;volatile
 18712  0076  07BA               	addwf	??_isr,f
 18713  0077  0841               	movf	_tap_timer+1,w	;volatile
 18714  0078  3DBB               	addwfc	??_isr+1,f
 18715  0079  0842               	movf	_tap_timer+2,w	;volatile
 18716  007A  3DBC               	addwfc	??_isr+2,f
 18717  007B  0843               	movf	_tap_timer+3,w	;volatile
 18718  007C  3DBD               	addwfc	??_isr+3,f
 18719  007D  083D               	movf	??_isr+3,w
 18720  007E  00C3               	movwf	_tap_timer+3	;volatile
 18721  007F  083C               	movf	??_isr+2,w
 18722  0080  00C2               	movwf	_tap_timer+2	;volatile
 18723  0081  083B               	movf	??_isr+1,w
 18724  0082  00C1               	movwf	_tap_timer+1	;volatile
 18725  0083  083A               	movf	??_isr,w
 18726  0084  00C0               	movwf	_tap_timer	;volatile
 18727                           
 18728                           ;interrupts.c: 68: mod_timer = mod_timer + 1;
 18729  0085  3001               	movlw	1
 18730  0086  00BA               	movwf	??_isr
 18731  0087  3000               	movlw	0
 18732  0088  00BB               	movwf	??_isr+1
 18733  0089  3000               	movlw	0
 18734  008A  00BC               	movwf	??_isr+2
 18735  008B  3000               	movlw	0
 18736  008C  00BD               	movwf	??_isr+3
 18737  008D  0023               	movlb	3	; select bank3
 18738  008E  0824               	movf	_mod_timer^(0+384),w	;volatile
 18739  008F  0020               	movlb	0	; select bank0
 18740  0090  07BA               	addwf	??_isr,f
 18741  0091  0023               	movlb	3	; select bank3
 18742  0092  0825               	movf	(_mod_timer+1)^(0+384),w	;volatile
 18743  0093  0020               	movlb	0	; select bank0
 18744  0094  3DBB               	addwfc	??_isr+1,f
 18745  0095  0023               	movlb	3	; select bank3
 18746  0096  0826               	movf	(_mod_timer+2)^(0+384),w	;volatile
 18747  0097  0020               	movlb	0	; select bank0
 18748  0098  3DBC               	addwfc	??_isr+2,f
 18749  0099  0023               	movlb	3	; select bank3
 18750  009A  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 18751  009B  0020               	movlb	0	; select bank0
 18752  009C  3DBD               	addwfc	??_isr+3,f
 18753  009D  083D               	movf	??_isr+3,w
 18754  009E  0023               	movlb	3	; select bank3
 18755  009F  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 18756  00A0  0020               	movlb	0	; select bank0
 18757  00A1  083C               	movf	??_isr+2,w
 18758  00A2  0023               	movlb	3	; select bank3
 18759  00A3  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 18760  00A4  0020               	movlb	0	; select bank0
 18761  00A5  083B               	movf	??_isr+1,w
 18762  00A6  0023               	movlb	3	; select bank3
 18763  00A7  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 18764  00A8  0020               	movlb	0	; select bank0
 18765  00A9  083A               	movf	??_isr,w
 18766  00AA  0023               	movlb	3	; select bank3
 18767  00AB  00A4               	movwf	_mod_timer^(0+384)	;volatile
 18768                           
 18769                           ;interrupts.c: 69: double_timer++;
 18770  00AC  3001               	movlw	1
 18771  00AD  07A0               	addwf	_double_timer^(0+384),f	;volatile
 18772  00AE  3000               	movlw	0
 18773  00AF  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 18774  00B0  3000               	movlw	0
 18775  00B1  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 18776  00B2  3000               	movlw	0
 18777  00B3  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 18778                           
 18779                           ;interrupts.c: 71: char subDiv = getModulationSubdivision();
 18780  00B4  31A1  210B  3180   	fcall	i1_getModulationSubdivision
 18781  00B7  0870               	movf	?i1_getModulationSubdivision,w
 18782  00B8  0020               	movlb	0	; select bank0
 18783  00B9  00BA               	movwf	??_isr
 18784  00BA  083A               	movf	??_isr,w
 18785  00BB  00FD               	movwf	isr@subDiv
 18786                           
 18787                           ;interrupts.c: 76: if ((mod_timer >= tmpModDelay) && (mod_counter == subDiv) && (tmpModD
      +                          elay == mod_delay_time)) {
 18788  00BC  0023               	movlb	3	; select bank3
 18789  00BD  083C               	movf	_tmpModDelay^(0+384),w
 18790  00BE  0020               	movlb	0	; select bank0
 18791  00BF  00BA               	movwf	??_isr
 18792  00C0  0023               	movlb	3	; select bank3
 18793  00C1  083D               	movf	(_tmpModDelay+1)^(0+384),w
 18794  00C2  0020               	movlb	0	; select bank0
 18795  00C3  00BB               	movwf	??_isr+1
 18796  00C4  3000               	movlw	0
 18797  00C5  1BBB               	btfsc	??_isr+1,7
 18798  00C6  30FF               	movlw	255
 18799  00C7  00BC               	movwf	??_isr+2
 18800  00C8  00BD               	movwf	??_isr+3
 18801  00C9  0023               	movlb	3	; select bank3
 18802  00CA  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 18803  00CB  3A80               	xorlw	128
 18804  00CC  0020               	movlb	0	; select bank0
 18805  00CD  00BE               	movwf	??_isr+4
 18806  00CE  083D               	movf	??_isr+3,w
 18807  00CF  3A80               	xorlw	128
 18808  00D0  023E               	subwf	??_isr+4,w
 18809  00D1  0023               	movlb	3	; select bank3
 18810  00D2  1D03               	skipz
 18811  00D3  28E4               	goto	u641_23
 18812  00D4  0020               	movlb	0	; select bank0
 18813  00D5  083C               	movf	??_isr+2,w
 18814  00D6  0023               	movlb	3	; select bank3
 18815  00D7  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 18816  00D8  1D03               	skipz
 18817  00D9  28E4               	goto	u641_23
 18818  00DA  0020               	movlb	0	; select bank0
 18819  00DB  083B               	movf	??_isr+1,w
 18820  00DC  0023               	movlb	3	; select bank3
 18821  00DD  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 18822  00DE  1D03               	skipz
 18823  00DF  28E4               	goto	u641_23
 18824  00E0  0020               	movlb	0	; select bank0
 18825  00E1  083A               	movf	??_isr,w
 18826  00E2  0023               	movlb	3	; select bank3
 18827  00E3  0224               	subwf	_mod_timer^(0+384),w	;volatile
 18828  00E4                     u641_23:	
 18829  00E4  1C03               	skipc
 18830  00E5  2910               	goto	i1l137
 18831  00E6  087D               	movf	isr@subDiv,w
 18832  00E7  0020               	movlb	0	; select bank0
 18833  00E8  00BA               	movwf	??_isr
 18834  00E9  01BB               	clrf	??_isr+1
 18835  00EA  0023               	movlb	3	; select bank3
 18836  00EB  0859               	movf	(_mod_counter+1)^(0+384),w
 18837  00EC  0020               	movlb	0	; select bank0
 18838  00ED  063B               	xorwf	??_isr+1,w
 18839  00EE  1D03               	skipz
 18840  00EF  28F4               	goto	u642_25
 18841  00F0  0023               	movlb	3	; select bank3
 18842  00F1  0858               	movf	_mod_counter^(0+384),w
 18843  00F2  0020               	movlb	0	; select bank0
 18844  00F3  063A               	xorwf	??_isr,w
 18845  00F4                     u642_25:	
 18846  00F4  1D03               	skipz
 18847  00F5  2910               	goto	i1l137
 18848  00F6  0023               	movlb	3	; select bank3
 18849  00F7  085B               	movf	(_mod_delay_time+1)^(0+384),w
 18850  00F8  063D               	xorwf	(_tmpModDelay+1)^(0+384),w
 18851  00F9  1D03               	skipz
 18852  00FA  28FD               	goto	u643_25
 18853  00FB  085A               	movf	_mod_delay_time^(0+384),w
 18854  00FC  063C               	xorwf	_tmpModDelay^(0+384),w
 18855  00FD                     u643_25:	
 18856  00FD  1D03               	skipz
 18857  00FE  2910               	goto	i1l137
 18858                           
 18859                           ;interrupts.c: 77: tmpModDelay = (delay_time - timer);
 18860  00FF  0020               	movlb	0	; select bank0
 18861  0100  0944               	comf	_timer,w	;volatile
 18862  0101  00BA               	movwf	??_isr
 18863  0102  0945               	comf	_timer+1,w	;volatile
 18864  0103  00BB               	movwf	??_isr+1
 18865  0104  0ABA               	incf	??_isr,f
 18866  0105  1903               	skipnz
 18867  0106  0ABB               	incf	??_isr+1,f
 18868  0107  0851               	movf	_delay_time,w	;volatile
 18869  0108  073A               	addwf	??_isr,w
 18870  0109  0023               	movlb	3	; select bank3
 18871  010A  00BC               	movwf	_tmpModDelay^(0+384)
 18872  010B  0020               	movlb	0	; select bank0
 18873  010C  0852               	movf	_delay_time+1,w	;volatile
 18874  010D  3D3B               	addwfc	??_isr+1,w
 18875  010E  0023               	movlb	3	; select bank3
 18876  010F  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 18877  0110                     i1l137:	
 18878                           
 18879                           ;interrupts.c: 78: }
 18880                           ;interrupts.c: 80: if (longBypass_start == 1) {
 18881  0110  0020               	movlb	0	; select bank0
 18882  0111  034B               	decf	_longBypass_start,w
 18883  0112  1D03               	btfss	3,2
 18884  0113  292B               	goto	i1l6740
 18885                           
 18886                           ;interrupts.c: 81: longBypass_timer++;
 18887  0114  3001               	movlw	1
 18888  0115  0023               	movlb	3	; select bank3
 18889  0116  07B6               	addwf	_longBypass_timer^(0+384),f	;volatile
 18890  0117  3000               	movlw	0
 18891  0118  3DB7               	addwfc	(_longBypass_timer+1)^(0+384),f	;volatile
 18892                           
 18893                           ;interrupts.c: 82: if (longBypass_timer > long_press_limit) {longBypass_timer = long_pre
      +                          ss_limit;}
 18894  0119  0837               	movf	(_longBypass_timer+1)^(0+384),w	;volatile
 18895  011A  0020               	movlb	0	; select bank0
 18896  011B  0258               	subwf	_long_press_limit+1,w
 18897  011C  1D03               	skipz
 18898  011D  2922               	goto	u645_25
 18899  011E  0023               	movlb	3	; select bank3
 18900  011F  0836               	movf	_longBypass_timer^(0+384),w	;volatile
 18901  0120  0020               	movlb	0	; select bank0
 18902  0121  0257               	subwf	_long_press_limit,w
 18903  0122                     u645_25:	
 18904  0122  1803               	skipnc
 18905  0123  292B               	goto	i1l6740
 18906  0124  0858               	movf	_long_press_limit+1,w
 18907  0125  0023               	movlb	3	; select bank3
 18908  0126  00B7               	movwf	(_longBypass_timer+1)^(0+384)	;volatile
 18909  0127  0020               	movlb	0	; select bank0
 18910  0128  0857               	movf	_long_press_limit,w
 18911  0129  0023               	movlb	3	; select bank3
 18912  012A  00B6               	movwf	_longBypass_timer^(0+384)	;volatile
 18913  012B                     i1l6740:	
 18914                           
 18915                           ;interrupts.c: 83: }
 18916                           ;interrupts.c: 84: if (longTap_start == 1) {
 18917  012B  0022               	movlb	2	; select bank2
 18918  012C  036C               	decf	_longTap_start^(0+256),w
 18919  012D  1D03               	btfss	3,2
 18920  012E  2946               	goto	i1l6746
 18921                           
 18922                           ;interrupts.c: 85: longTap_timer++;
 18923  012F  3001               	movlw	1
 18924  0130  0023               	movlb	3	; select bank3
 18925  0131  07B8               	addwf	_longTap_timer^(0+384),f	;volatile
 18926  0132  3000               	movlw	0
 18927  0133  3DB9               	addwfc	(_longTap_timer+1)^(0+384),f	;volatile
 18928                           
 18929                           ;interrupts.c: 86: if (longTap_timer > long_press_limit) {
 18930  0134  0839               	movf	(_longTap_timer+1)^(0+384),w	;volatile
 18931  0135  0020               	movlb	0	; select bank0
 18932  0136  0258               	subwf	_long_press_limit+1,w
 18933  0137  1D03               	skipz
 18934  0138  293D               	goto	u647_25
 18935  0139  0023               	movlb	3	; select bank3
 18936  013A  0838               	movf	_longTap_timer^(0+384),w	;volatile
 18937  013B  0020               	movlb	0	; select bank0
 18938  013C  0257               	subwf	_long_press_limit,w
 18939  013D                     u647_25:	
 18940  013D  1803               	skipnc
 18941  013E  2946               	goto	i1l6746
 18942                           
 18943                           ;interrupts.c: 87: longTap_timer = long_press_limit;
 18944  013F  0858               	movf	_long_press_limit+1,w
 18945  0140  0023               	movlb	3	; select bank3
 18946  0141  00B9               	movwf	(_longTap_timer+1)^(0+384)	;volatile
 18947  0142  0020               	movlb	0	; select bank0
 18948  0143  0857               	movf	_long_press_limit,w
 18949  0144  0023               	movlb	3	; select bank3
 18950  0145  00B8               	movwf	_longTap_timer^(0+384)	;volatile
 18951  0146                     i1l6746:	
 18952                           
 18953                           ;interrupts.c: 88: }
 18954                           ;interrupts.c: 89: }
 18955                           ;interrupts.c: 91: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 18956  0146  0020               	movlb	0	; select bank0
 18957  0147  085C               	movf	_longTap_state,w	;volatile
 18958  0148  1D03               	btfss	3,2
 18959  0149  29AC               	goto	i1l6772
 18960  014A  084A               	movf	_doubleTap_state,w	;volatile
 18961  014B  1D03               	btfss	3,2
 18962  014C  29AC               	goto	i1l6772
 18963  014D  084E               	movf	_presetSaveMode,w
 18964  014E  1D03               	btfss	3,2
 18965  014F  29AC               	goto	i1l6772
 18966                           
 18967                           ;interrupts.c: 93: if (timer >= baseline_mod_time) {
 18968  0150  0847               	movf	_timer+3,w	;volatile
 18969  0151  3A80               	xorlw	128
 18970  0152  00BA               	movwf	??_isr
 18971  0153  0023               	movlb	3	; select bank3
 18972  0154  084B               	movf	(_baseline_mod_time+3)^(0+384),w	;volatile
 18973  0155  3A80               	xorlw	128
 18974  0156  0020               	movlb	0	; select bank0
 18975  0157  023A               	subwf	??_isr,w
 18976  0158  1D03               	skipz
 18977  0159  296A               	goto	u651_23
 18978  015A  0023               	movlb	3	; select bank3
 18979  015B  084A               	movf	(_baseline_mod_time+2)^(0+384),w	;volatile
 18980  015C  0020               	movlb	0	; select bank0
 18981  015D  0246               	subwf	_timer+2,w	;volatile
 18982  015E  1D03               	skipz
 18983  015F  296A               	goto	u651_23
 18984  0160  0023               	movlb	3	; select bank3
 18985  0161  0849               	movf	(_baseline_mod_time+1)^(0+384),w	;volatile
 18986  0162  0020               	movlb	0	; select bank0
 18987  0163  0245               	subwf	_timer+1,w	;volatile
 18988  0164  1D03               	skipz
 18989  0165  296A               	goto	u651_23
 18990  0166  0023               	movlb	3	; select bank3
 18991  0167  0848               	movf	_baseline_mod_time^(0+384),w	;volatile
 18992  0168  0020               	movlb	0	; select bank0
 18993  0169  0244               	subwf	_timer,w	;volatile
 18994  016A                     u651_23:	
 18995  016A  1C03               	skipc
 18996  016B  299A               	goto	i1l6768
 18997                           
 18998                           ;interrupts.c: 96: LATBbits.LATB4 = 1;
 18999  016C  0022               	movlb	2	; select bank2
 19000  016D  160D               	bsf	13,4	;volatile
 19001                           
 19002                           ;interrupts.c: 98: timer = 0;
 19003  016E  3000               	movlw	0
 19004  016F  0020               	movlb	0	; select bank0
 19005  0170  00C7               	movwf	_timer+3	;volatile
 19006  0171  3000               	movlw	0
 19007  0172  00C6               	movwf	_timer+2	;volatile
 19008  0173  3000               	movlw	0
 19009  0174  00C5               	movwf	_timer+1	;volatile
 19010  0175  3000               	movlw	0
 19011  0176  00C4               	movwf	_timer	;volatile
 19012                           
 19013                           ;interrupts.c: 100: if (modulation_changed == 1) {
 19014  0177  0023               	movlb	3	; select bank3
 19015  0178  0344               	decf	_modulation_changed^(0+384),w
 19016  0179  1D03               	btfss	3,2
 19017  017A  299A               	goto	i1l6768
 19018                           
 19019                           ;interrupts.c: 103: modulation_changed = 0;
 19020  017B  01C4               	clrf	_modulation_changed^(0+384)
 19021                           
 19022                           ;interrupts.c: 104: mod_time_changed = 0;
 19023  017C  01E4               	clrf	_mod_time_changed^(0+384)
 19024                           
 19025                           ;interrupts.c: 105: sub_timer = delay_time;
 19026  017D  0020               	movlb	0	; select bank0
 19027  017E  0854               	movf	_delay_time+3,w	;volatile
 19028  017F  0023               	movlb	3	; select bank3
 19029  0180  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19030  0181  0020               	movlb	0	; select bank0
 19031  0182  0853               	movf	_delay_time+2,w	;volatile
 19032  0183  0023               	movlb	3	; select bank3
 19033  0184  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19034  0185  0020               	movlb	0	; select bank0
 19035  0186  0852               	movf	_delay_time+1,w	;volatile
 19036  0187  0023               	movlb	3	; select bank3
 19037  0188  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19038  0189  0020               	movlb	0	; select bank0
 19039  018A  0851               	movf	_delay_time,w	;volatile
 19040  018B  0023               	movlb	3	; select bank3
 19041  018C  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19042                           
 19043                           ;interrupts.c: 106: tmpModDelay = mod_delay_time;
 19044  018D  085B               	movf	(_mod_delay_time+1)^(0+384),w
 19045  018E  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19046  018F  085A               	movf	_mod_delay_time^(0+384),w
 19047  0190  00BC               	movwf	_tmpModDelay^(0+384)
 19048                           
 19049                           ;interrupts.c: 107: mod_timer = tmpModDelay;
 19050  0191  083C               	movf	_tmpModDelay^(0+384),w
 19051  0192  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19052  0193  083D               	movf	(_tmpModDelay+1)^(0+384),w
 19053  0194  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19054  0195  0D89               	rlf	9,f
 19055  0196  3B89               	subwfb	9,f
 19056  0197  0989               	comf	9,f
 19057  0198  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19058  0199  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19059  019A                     i1l6768:	
 19060                           
 19061                           ;interrupts.c: 115: }
 19062                           ;interrupts.c: 116: }
 19063                           ;interrupts.c: 118: if (timer >= 30) {
 19064  019A  0020               	movlb	0	; select bank0
 19065  019B  1BC7               	btfsc	_timer+3,7	;volatile
 19066  019C  29AC               	goto	i1l6772
 19067  019D  0847               	movf	_timer+3,w	;volatile
 19068  019E  1D03               	btfss	3,2
 19069  019F  29AA               	goto	i1l6770
 19070  01A0  0846               	movf	_timer+2,w	;volatile
 19071  01A1  1D03               	btfss	3,2
 19072  01A2  29AA               	goto	i1l6770
 19073  01A3  0845               	movf	_timer+1,w	;volatile
 19074  01A4  1D03               	btfss	3,2
 19075  01A5  29AA               	goto	i1l6770
 19076  01A6  301E               	movlw	30
 19077  01A7  0244               	subwf	_timer,w	;volatile
 19078  01A8  1C03               	btfss	3,0
 19079  01A9  29AC               	goto	i1l6772
 19080  01AA                     i1l6770:	
 19081                           
 19082                           ;interrupts.c: 120: LATBbits.LATB4 = 0;
 19083  01AA  0022               	movlb	2	; select bank2
 19084  01AB  120D               	bcf	13,4	;volatile
 19085  01AC                     i1l6772:	
 19086                           
 19087                           ;interrupts.c: 122: }
 19088                           ;interrupts.c: 123: }
 19089                           ;interrupts.c: 132: if (presetSaveMode < 1 && mode2_state == 0) {
 19090  01AC  0020               	movlb	0	; select bank0
 19091  01AD  084E               	movf	_presetSaveMode,w
 19092  01AE  1D03               	btfss	3,2
 19093  01AF  2A05               	goto	i1l6790
 19094  01B0  084D               	movf	_mode2_state,w
 19095  01B1  1D03               	btfss	3,2
 19096  01B2  2A05               	goto	i1l6790
 19097                           
 19098                           ;interrupts.c: 133: if (sub_timer >= delay_time ) {
 19099  01B3  0023               	movlb	3	; select bank3
 19100  01B4  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19101  01B5  3A80               	xorlw	128
 19102  01B6  0020               	movlb	0	; select bank0
 19103  01B7  00BA               	movwf	??_isr
 19104  01B8  0854               	movf	_delay_time+3,w	;volatile
 19105  01B9  3A80               	xorlw	128
 19106  01BA  023A               	subwf	??_isr,w
 19107  01BB  0023               	movlb	3	; select bank3
 19108  01BC  1D03               	skipz
 19109  01BD  29CE               	goto	u656_23
 19110  01BE  0020               	movlb	0	; select bank0
 19111  01BF  0853               	movf	_delay_time+2,w	;volatile
 19112  01C0  0023               	movlb	3	; select bank3
 19113  01C1  022A               	subwf	(_sub_timer+2)^(0+384),w	;volatile
 19114  01C2  1D03               	skipz
 19115  01C3  29CE               	goto	u656_23
 19116  01C4  0020               	movlb	0	; select bank0
 19117  01C5  0852               	movf	_delay_time+1,w	;volatile
 19118  01C6  0023               	movlb	3	; select bank3
 19119  01C7  0229               	subwf	(_sub_timer+1)^(0+384),w	;volatile
 19120  01C8  1D03               	skipz
 19121  01C9  29CE               	goto	u656_23
 19122  01CA  0020               	movlb	0	; select bank0
 19123  01CB  0851               	movf	_delay_time,w	;volatile
 19124  01CC  0023               	movlb	3	; select bank3
 19125  01CD  0228               	subwf	_sub_timer^(0+384),w	;volatile
 19126  01CE                     u656_23:	
 19127  01CE  1C03               	skipc
 19128  01CF  29E8               	goto	i1l6784
 19129                           
 19130                           ;interrupts.c: 134: if (suspend_blink == 0) {
 19131  01D0  0020               	movlb	0	; select bank0
 19132  01D1  084F               	movf	_suspend_blink,w	;volatile
 19133  01D2  1D03               	btfss	3,2
 19134  01D3  29DF               	goto	i1l6782
 19135                           
 19136                           ;interrupts.c: 135: set_leds_top(top_push_state, 1);
 19137  01D4  085A               	movf	_top_push_state+1,w
 19138  01D5  00F1               	movwf	i1set_leds_top@x+1
 19139  01D6  0859               	movf	_top_push_state,w
 19140  01D7  00F0               	movwf	i1set_leds_top@x
 19141  01D8  3001               	movlw	1
 19142  01D9  00F2               	movwf	i1set_leds_top@ledState
 19143  01DA  3000               	movlw	0
 19144  01DB  00F3               	movwf	i1set_leds_top@ledState+1
 19145  01DC  31A4  24D1  3180   	fcall	i1_set_leds_top
 19146  01DF                     i1l6782:	
 19147                           
 19148                           ;interrupts.c: 136: }
 19149                           ;interrupts.c: 138: sub_timer = 0;
 19150  01DF  3000               	movlw	0
 19151  01E0  0023               	movlb	3	; select bank3
 19152  01E1  00AB               	movwf	(_sub_timer+3)^(0+384)	;volatile
 19153  01E2  3000               	movlw	0
 19154  01E3  00AA               	movwf	(_sub_timer+2)^(0+384)	;volatile
 19155  01E4  3000               	movlw	0
 19156  01E5  00A9               	movwf	(_sub_timer+1)^(0+384)	;volatile
 19157  01E6  3000               	movlw	0
 19158  01E7  00A8               	movwf	_sub_timer^(0+384)	;volatile
 19159  01E8                     i1l6784:	
 19160                           
 19161                           ;interrupts.c: 139: }
 19162                           ;interrupts.c: 141: if (sub_timer >= 20) {
 19163  01E8  1BAB               	btfsc	(_sub_timer+3)^(0+384),7	;volatile
 19164  01E9  2A05               	goto	i1l6790
 19165  01EA  082B               	movf	(_sub_timer+3)^(0+384),w	;volatile
 19166  01EB  1D03               	btfss	3,2
 19167  01EC  29F7               	goto	i1l6786
 19168  01ED  082A               	movf	(_sub_timer+2)^(0+384),w	;volatile
 19169  01EE  1D03               	btfss	3,2
 19170  01EF  29F7               	goto	i1l6786
 19171  01F0  0829               	movf	(_sub_timer+1)^(0+384),w	;volatile
 19172  01F1  1D03               	btfss	3,2
 19173  01F2  29F7               	goto	i1l6786
 19174  01F3  3014               	movlw	20
 19175  01F4  0228               	subwf	_sub_timer^(0+384),w	;volatile
 19176  01F5  1C03               	btfss	3,0
 19177  01F6  2A05               	goto	i1l6790
 19178  01F7                     i1l6786:	
 19179                           
 19180                           ;interrupts.c: 142: if (suspend_blink == 0) {
 19181  01F7  0020               	movlb	0	; select bank0
 19182  01F8  084F               	movf	_suspend_blink,w	;volatile
 19183  01F9  1D03               	btfss	3,2
 19184  01FA  2A05               	goto	i1l6790
 19185                           
 19186                           ;interrupts.c: 143: set_leds_top(top_push_state, 0);
 19187  01FB  085A               	movf	_top_push_state+1,w
 19188  01FC  00F1               	movwf	i1set_leds_top@x+1
 19189  01FD  0859               	movf	_top_push_state,w
 19190  01FE  00F0               	movwf	i1set_leds_top@x
 19191  01FF  3000               	movlw	0
 19192  0200  00F2               	movwf	i1set_leds_top@ledState
 19193  0201  00F3               	movwf	i1set_leds_top@ledState+1
 19194  0202  31A4  24D1  3180   	fcall	i1_set_leds_top
 19195  0205                     i1l6790:	
 19196                           
 19197                           ;interrupts.c: 144: }
 19198                           ;interrupts.c: 145: }
 19199                           ;interrupts.c: 146: }
 19200                           ;interrupts.c: 151: if (presetSaveMode == 1) {
 19201  0205  0020               	movlb	0	; select bank0
 19202  0206  034E               	decf	_presetSaveMode,w
 19203  0207  1D03               	btfss	3,2
 19204  0208  2A35               	goto	i1l6802
 19205                           
 19206                           ;interrupts.c: 152: if (double_timer >= 250) {
 19207  0209  0023               	movlb	3	; select bank3
 19208  020A  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19209  020B  2A24               	goto	i1l6798
 19210  020C  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19211  020D  1D03               	btfss	3,2
 19212  020E  2A19               	goto	i1l6794
 19213  020F  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19214  0210  1D03               	btfss	3,2
 19215  0211  2A19               	goto	i1l6794
 19216  0212  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19217  0213  1D03               	btfss	3,2
 19218  0214  2A19               	goto	i1l6794
 19219  0215  30FA               	movlw	250
 19220  0216  0220               	subwf	_double_timer^(0+384),w	;volatile
 19221  0217  1C03               	btfss	3,0
 19222  0218  2A24               	goto	i1l6798
 19223  0219                     i1l6794:	
 19224                           
 19225                           ;interrupts.c: 153: LATBbits.LATB0 = 1;
 19226  0219  0022               	movlb	2	; select bank2
 19227  021A  140D               	bsf	13,0	;volatile
 19228                           
 19229                           ;interrupts.c: 154: double_timer = 0;
 19230  021B  3000               	movlw	0
 19231  021C  0023               	movlb	3	; select bank3
 19232  021D  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 19233  021E  3000               	movlw	0
 19234  021F  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 19235  0220  3000               	movlw	0
 19236  0221  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 19237  0222  3000               	movlw	0
 19238  0223  00A0               	movwf	_double_timer^(0+384)	;volatile
 19239  0224                     i1l6798:	
 19240                           
 19241                           ;interrupts.c: 155: }
 19242                           ;interrupts.c: 156: if (double_timer >= 30) {
 19243  0224  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 19244  0225  2A35               	goto	i1l6802
 19245  0226  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 19246  0227  1D03               	btfss	3,2
 19247  0228  2A33               	goto	i1l6800
 19248  0229  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 19249  022A  1D03               	btfss	3,2
 19250  022B  2A33               	goto	i1l6800
 19251  022C  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 19252  022D  1D03               	btfss	3,2
 19253  022E  2A33               	goto	i1l6800
 19254  022F  301E               	movlw	30
 19255  0230  0220               	subwf	_double_timer^(0+384),w	;volatile
 19256  0231  1C03               	btfss	3,0
 19257  0232  2A35               	goto	i1l6802
 19258  0233                     i1l6800:	
 19259                           
 19260                           ;interrupts.c: 157: LATBbits.LATB0 = 0;
 19261  0233  0022               	movlb	2	; select bank2
 19262  0234  100D               	bcf	13,0	;volatile
 19263  0235                     i1l6802:	
 19264                           
 19265                           ;interrupts.c: 158: }
 19266                           ;interrupts.c: 159: }
 19267                           ;interrupts.c: 178: if (mod_timer >= tmpModDelay) {
 19268  0235  0023               	movlb	3	; select bank3
 19269  0236  083C               	movf	_tmpModDelay^(0+384),w
 19270  0237  0020               	movlb	0	; select bank0
 19271  0238  00BA               	movwf	??_isr
 19272  0239  0023               	movlb	3	; select bank3
 19273  023A  083D               	movf	(_tmpModDelay+1)^(0+384),w
 19274  023B  0020               	movlb	0	; select bank0
 19275  023C  00BB               	movwf	??_isr+1
 19276  023D  3000               	movlw	0
 19277  023E  1BBB               	btfsc	??_isr+1,7
 19278  023F  30FF               	movlw	255
 19279  0240  00BC               	movwf	??_isr+2
 19280  0241  00BD               	movwf	??_isr+3
 19281  0242  0023               	movlb	3	; select bank3
 19282  0243  0827               	movf	(_mod_timer+3)^(0+384),w	;volatile
 19283  0244  3A80               	xorlw	128
 19284  0245  0020               	movlb	0	; select bank0
 19285  0246  00BE               	movwf	??_isr+4
 19286  0247  083D               	movf	??_isr+3,w
 19287  0248  3A80               	xorlw	128
 19288  0249  023E               	subwf	??_isr+4,w
 19289  024A  0023               	movlb	3	; select bank3
 19290  024B  1D03               	skipz
 19291  024C  2A5D               	goto	u663_23
 19292  024D  0020               	movlb	0	; select bank0
 19293  024E  083C               	movf	??_isr+2,w
 19294  024F  0023               	movlb	3	; select bank3
 19295  0250  0226               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 19296  0251  1D03               	skipz
 19297  0252  2A5D               	goto	u663_23
 19298  0253  0020               	movlb	0	; select bank0
 19299  0254  083B               	movf	??_isr+1,w
 19300  0255  0023               	movlb	3	; select bank3
 19301  0256  0225               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 19302  0257  1D03               	skipz
 19303  0258  2A5D               	goto	u663_23
 19304  0259  0020               	movlb	0	; select bank0
 19305  025A  083A               	movf	??_isr,w
 19306  025B  0023               	movlb	3	; select bank3
 19307  025C  0224               	subwf	_mod_timer^(0+384),w	;volatile
 19308  025D                     u663_23:	
 19309  025D  1C03               	skipc
 19310  025E  2AD2               	goto	i1l6820
 19311                           
 19312                           ;interrupts.c: 179: mod_timer = 0;
 19313  025F  3000               	movlw	0
 19314  0260  00A7               	movwf	(_mod_timer+3)^(0+384)	;volatile
 19315  0261  3000               	movlw	0
 19316  0262  00A6               	movwf	(_mod_timer+2)^(0+384)	;volatile
 19317  0263  3000               	movlw	0
 19318  0264  00A5               	movwf	(_mod_timer+1)^(0+384)	;volatile
 19319  0265  3000               	movlw	0
 19320  0266  00A4               	movwf	_mod_timer^(0+384)	;volatile
 19321                           
 19322                           ;interrupts.c: 181: if (mod_counter >= subDiv) {
 19323  0267  0859               	movf	(_mod_counter+1)^(0+384),w
 19324  0268  3A80               	xorlw	128
 19325  0269  0020               	movlb	0	; select bank0
 19326  026A  00BA               	movwf	??_isr
 19327  026B  3080               	movlw	128
 19328  026C  023A               	subwf	??_isr,w
 19329  026D  1D03               	skipz
 19330  026E  2A72               	goto	u664_25
 19331  026F  087D               	movf	isr@subDiv,w
 19332  0270  0023               	movlb	3	; select bank3
 19333  0271  0258               	subwf	_mod_counter^(0+384),w
 19334  0272                     u664_25:	
 19335  0272  1C03               	skipc
 19336  0273  2A7E               	goto	i1l155
 19337                           
 19338                           ;interrupts.c: 182: mod_counter = 0;
 19339  0274  0023               	movlb	3	; select bank3
 19340  0275  01D8               	clrf	_mod_counter^(0+384)
 19341  0276  01D9               	clrf	(_mod_counter+1)^(0+384)
 19342                           
 19343                           ;interrupts.c: 183: tmpModDelay = mod_delay_time;
 19344  0277  085B               	movf	(_mod_delay_time+1)^(0+384),w
 19345  0278  00BD               	movwf	(_tmpModDelay+1)^(0+384)
 19346  0279  085A               	movf	_mod_delay_time^(0+384),w
 19347  027A  00BC               	movwf	_tmpModDelay^(0+384)
 19348                           
 19349                           ;interrupts.c: 184: LATBbits.LATB0 = 1;
 19350  027B  0022               	movlb	2	; select bank2
 19351  027C  140D               	bsf	13,0	;volatile
 19352                           
 19353                           ;interrupts.c: 185: } else {
 19354  027D  2A80               	goto	i1l6812
 19355  027E                     i1l155:	
 19356                           
 19357                           ;interrupts.c: 186: LATBbits.LATB0 = 0;
 19358  027E  0022               	movlb	2	; select bank2
 19359  027F  100D               	bcf	13,0	;volatile
 19360  0280                     i1l6812:	
 19361                           
 19362                           ;interrupts.c: 187: }
 19363                           ;interrupts.c: 191: mod_value = modArray[mod_counter];
 19364  0280  0023               	movlb	3	; select bank3
 19365  0281  0859               	movf	(_mod_counter+1)^(0+384),w
 19366  0282  0020               	movlb	0	; select bank0
 19367  0283  00BB               	movwf	??_isr+1
 19368  0284  0023               	movlb	3	; select bank3
 19369  0285  0858               	movf	_mod_counter^(0+384),w
 19370  0286  0020               	movlb	0	; select bank0
 19371  0287  00BA               	movwf	??_isr
 19372  0288  35BA               	lslf	??_isr,f
 19373  0289  0DBB               	rlf	??_isr+1,f
 19374  028A  308A               	movlw	138
 19375  028B  00BC               	movwf	??_isr+2
 19376  028C  3023               	movlw	35
 19377  028D  00BD               	movwf	??_isr+3
 19378  028E  083A               	movf	??_isr,w
 19379  028F  073C               	addwf	??_isr+2,w
 19380  0290  0086               	movwf	6
 19381  0291  083B               	movf	??_isr+1,w
 19382  0292  3D3D               	addwfc	??_isr+3,w
 19383  0293  0087               	movwf	7
 19384  0294  3F40               	moviw [0]fsr1
 19385  0295  0024               	movlb	4	; select bank4
 19386  0296  00CF               	movwf	_mod_value^(0+512)
 19387  0297  3F41               	moviw [1]fsr1
 19388  0298  00D0               	movwf	(_mod_value+1)^(0+512)
 19389                           
 19390                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 19391  0299  084F               	movf	_mod_value^(0+512),w
 19392  029A  0020               	movlb	0	; select bank0
 19393  029B  00AE               	movwf	modulation@x
 19394  029C  0024               	movlb	4	; select bank4
 19395  029D  0850               	movf	(_mod_value+1)^(0+512),w
 19396  029E  0020               	movlb	0	; select bank0
 19397  029F  00AF               	movwf	modulation@x+1
 19398  02A0  0D89               	rlf	9,f
 19399  02A1  3B89               	subwfb	9,f
 19400  02A2  0989               	comf	9,f
 19401  02A3  00B0               	movwf	modulation@x+2
 19402  02A4  00B1               	movwf	modulation@x+3
 19403  02A5  0024               	movlb	4	; select bank4
 19404  02A6  0841               	movf	_adjusted_pot_value^(0+512),w
 19405  02A7  0020               	movlb	0	; select bank0
 19406  02A8  00B2               	movwf	modulation@y
 19407  02A9  0024               	movlb	4	; select bank4
 19408  02AA  0842               	movf	(_adjusted_pot_value+1)^(0+512),w
 19409  02AB  0020               	movlb	0	; select bank0
 19410  02AC  00B3               	movwf	modulation@y+1
 19411  02AD  0D89               	rlf	9,f
 19412  02AE  3B89               	subwfb	9,f
 19413  02AF  0989               	comf	9,f
 19414  02B0  00B4               	movwf	modulation@y+2
 19415  02B1  00B5               	movwf	modulation@y+3
 19416  02B2  31A4  240B  3180   	fcall	_modulation
 19417  02B5  0020               	movlb	0	; select bank0
 19418  02B6  082F               	movf	?_modulation+1,w
 19419  02B7  0024               	movlb	4	; select bank4
 19420  02B8  00D0               	movwf	(_mod_value+1)^(0+512)
 19421  02B9  0020               	movlb	0	; select bank0
 19422  02BA  082E               	movf	?_modulation,w
 19423  02BB  0024               	movlb	4	; select bank4
 19424  02BC  00CF               	movwf	_mod_value^(0+512)
 19425                           
 19426                           ;interrupts.c: 199: CCPR3 = mod_value / 2;
 19427  02BD  3002               	movlw	2
 19428  02BE  00F0               	movwf	i1___awdiv@divisor
 19429  02BF  3000               	movlw	0
 19430  02C0  00F1               	movwf	i1___awdiv@divisor+1
 19431  02C1  0850               	movf	(_mod_value+1)^(0+512),w
 19432  02C2  00F3               	movwf	i1___awdiv@dividend+1
 19433  02C3  084F               	movf	_mod_value^(0+512),w
 19434  02C4  00F2               	movwf	i1___awdiv@dividend
 19435  02C5  31A5  2569  3180   	fcall	i1___awdiv
 19436  02C8  0871               	movf	?i1___awdiv+1,w
 19437  02C9  0026               	movlb	6	; select bank6
 19438  02CA  0092               	movwf	18	;volatile
 19439  02CB  0870               	movf	?i1___awdiv,w
 19440  02CC  0091               	movwf	17	;volatile
 19441                           
 19442                           ;interrupts.c: 200: mod_counter++;
 19443  02CD  3001               	movlw	1
 19444  02CE  0023               	movlb	3	; select bank3
 19445  02CF  07D8               	addwf	_mod_counter^(0+384),f
 19446  02D0  3000               	movlw	0
 19447  02D1  3DD9               	addwfc	(_mod_counter+1)^(0+384),f
 19448  02D2                     i1l6820:	
 19449                           
 19450                           ;interrupts.c: 202: }
 19451                           ;interrupts.c: 204: if (preset_programmning_on == 1) {
 19452  02D2  0345               	decf	_preset_programmning_on^(0+384),w
 19453  02D3  1D03               	btfss	3,2
 19454  02D4  2B04               	goto	i1l6832
 19455                           
 19456                           ;interrupts.c: 205: preset_blink++;
 19457  02D5  3001               	movlw	1
 19458  02D6  0020               	movlb	0	; select bank0
 19459  02D7  00BA               	movwf	??_isr
 19460  02D8  083A               	movf	??_isr,w
 19461  02D9  0022               	movlb	2	; select bank2
 19462  02DA  07ED               	addwf	_preset_blink^(0+256),f
 19463                           
 19464                           ;interrupts.c: 207: if (preset_blink >= blink_delay) {
 19465  02DB  0023               	movlb	3	; select bank3
 19466  02DC  084D               	movf	(_blink_delay+1)^(0+384),w
 19467  02DD  3A80               	xorlw	128
 19468  02DE  3C80               	sublw	128
 19469  02DF  1D03               	skipz
 19470  02E0  2AE4               	goto	u666_25
 19471  02E1  084C               	movf	_blink_delay^(0+384),w
 19472  02E2  0022               	movlb	2	; select bank2
 19473  02E3  026D               	subwf	_preset_blink^(0+256),w
 19474  02E4                     u666_25:	
 19475  02E4  1C03               	skipc
 19476  02E5  2B02               	goto	i1l158
 19477                           
 19478                           ;interrupts.c: 208: LATBbits.LATB1 = 1;
 19479  02E6  0022               	movlb	2	; select bank2
 19480  02E7  148D               	bsf	13,1	;volatile
 19481                           
 19482                           ;interrupts.c: 209: if (preset_blink > blink_delay*2) {
 19483  02E8  0023               	movlb	3	; select bank3
 19484  02E9  084D               	movf	(_blink_delay+1)^(0+384),w
 19485  02EA  0020               	movlb	0	; select bank0
 19486  02EB  00BB               	movwf	??_isr+1
 19487  02EC  0023               	movlb	3	; select bank3
 19488  02ED  084C               	movf	_blink_delay^(0+384),w
 19489  02EE  0020               	movlb	0	; select bank0
 19490  02EF  00BA               	movwf	??_isr
 19491  02F0  35BA               	lslf	??_isr,f
 19492  02F1  0DBB               	rlf	??_isr+1,f
 19493  02F2  083B               	movf	??_isr+1,w
 19494  02F3  3A80               	xorlw	128
 19495  02F4  00BC               	movwf	??_isr+2
 19496  02F5  3080               	movlw	128
 19497  02F6  023C               	subwf	??_isr+2,w
 19498  02F7  1D03               	skipz
 19499  02F8  2AFD               	goto	u667_25
 19500  02F9  0022               	movlb	2	; select bank2
 19501  02FA  086D               	movf	_preset_blink^(0+256),w
 19502  02FB  0020               	movlb	0	; select bank0
 19503  02FC  023A               	subwf	??_isr,w
 19504  02FD                     u667_25:	
 19505  02FD  1803               	skipnc
 19506  02FE  2B0A               	goto	i1l6838
 19507                           
 19508                           ;interrupts.c: 210: preset_blink = 0;
 19509  02FF  0022               	movlb	2	; select bank2
 19510  0300  01ED               	clrf	_preset_blink^(0+256)
 19511                           
 19512                           ;interrupts.c: 211: }
 19513                           ;interrupts.c: 213: } else {
 19514  0301  2B0A               	goto	i1l6838
 19515  0302                     i1l158:	
 19516                           
 19517                           ;interrupts.c: 214: LATBbits.LATB1 = 0;
 19518  0302  0022               	movlb	2	; select bank2
 19519  0303  2B09               	goto	i1l6836
 19520  0304                     i1l6832:	
 19521                           ;interrupts.c: 215: }
 19522                           ;interrupts.c: 217: } else {
 19523                           
 19524                           
 19525                           ;interrupts.c: 218: if (preset_blink > 0) {
 19526  0304  0022               	movlb	2	; select bank2
 19527  0305  086D               	movf	_preset_blink^(0+256),w
 19528  0306  1903               	btfsc	3,2
 19529  0307  2B0A               	goto	i1l6838
 19530                           
 19531                           ;interrupts.c: 219: preset_blink = 0;
 19532  0308  01ED               	clrf	_preset_blink^(0+256)
 19533  0309                     i1l6836:	
 19534                           
 19535                           ;interrupts.c: 220: LATBbits.LATB1 = 0;
 19536  0309  108D               	bcf	13,1	;volatile
 19537  030A                     i1l6838:	
 19538                           
 19539                           ;interrupts.c: 221: }
 19540                           ;interrupts.c: 222: }
 19541                           ;interrupts.c: 226: INTCONbits.TMR0IF = 0;
 19542  030A  110B               	bcf	11,2	;volatile
 19543  030B                     i1l135:	
 19544  030B  0020               	movlb	0	; select bank0
 19545  030C  083F               	movf	??_isr+5,w
 19546  030D  00FF               	movwf	127
 19547  030E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19548  030F  0009               	retfie
 19549  0310                     __end_of_isr:	
 19550                           
 19551                           	psect	text70
 19552  24D1                     __ptext70:	
 19553 ;; *************** function i1_set_leds_top *****************
 19554 ;; Defined at:
 19555 ;;		line 16 in file "LEDs.c"
 19556 ;; Parameters:    Size  Location     Type
 19557 ;;  x               2    0[COMMON] int 
 19558 ;;  ledState        2    2[COMMON] int 
 19559 ;; Auto vars:     Size  Location     Type
 19560 ;;		None
 19561 ;; Return value:  Size  Location     Type
 19562 ;;                  1    wreg      void 
 19563 ;; Registers used:
 19564 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 19565 ;; Tracked objects:
 19566 ;;		On entry : 0/0
 19567 ;;		On exit  : 0/0
 19568 ;;		Unchanged: 0/0
 19569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19570 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19573 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19574 ;;Total ram usage:        4 bytes
 19575 ;; Hardware stack levels used:    1
 19576 ;; This function calls:
 19577 ;;		Nothing
 19578 ;; This function is called by:
 19579 ;;		_isr
 19580 ;; This function uses a non-reentrant model
 19581 ;;
 19582                           
 19583                           
 19584                           ;psect for function i1_set_leds_top
 19585  24D1                     i1_set_leds_top:	
 19586                           
 19587                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 19588                           
 19589                           ;incstack = 0
 19590                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 19591  24D1  0027               	movlb	7	; select bank7
 19592  24D2  100C               	bcf	12,0	;volatile
 19593                           
 19594                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 19595  24D3  108C               	bcf	12,1	;volatile
 19596                           
 19597                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 19598  24D4  110C               	bcf	12,2	;volatile
 19599                           
 19600                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 19601  24D5  118C               	bcf	12,3	;volatile
 19602                           
 19603                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 19604  24D6  120C               	bcf	12,4	;volatile
 19605                           
 19606                           ;LEDs.c: 22: switch (x) {
 19607  24D7  2CFC               	goto	i1l6642
 19608  24D8                     i1l6630:	
 19609                           ;LEDs.c: 23: case 1:
 19610                           
 19611                           
 19612                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 19613  24D8  0C72               	rrf	i1set_leds_top@ledState,w
 19614  24D9  1C03               	skipc
 19615  24DA  100C               	bcf	12,0	;volatile
 19616  24DB  1803               	skipnc
 19617  24DC  140C               	bsf	12,0	;volatile
 19618                           
 19619                           ;LEDs.c: 25: break;
 19620  24DD  0008               	return
 19621  24DE                     i1l6632:	
 19622                           ;LEDs.c: 26: case 2:
 19623                           
 19624                           
 19625                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 19626  24DE  0C72               	rrf	i1set_leds_top@ledState,w
 19627  24DF  1C03               	skipc
 19628  24E0  108C               	bcf	12,1	;volatile
 19629  24E1  1803               	skipnc
 19630  24E2  148C               	bsf	12,1	;volatile
 19631                           
 19632                           ;LEDs.c: 28: break;
 19633  24E3  0008               	return
 19634  24E4                     i1l6634:	
 19635                           ;LEDs.c: 29: case 3:
 19636                           
 19637                           
 19638                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 19639  24E4  0C72               	rrf	i1set_leds_top@ledState,w
 19640  24E5  1C03               	skipc
 19641  24E6  110C               	bcf	12,2	;volatile
 19642  24E7  1803               	skipnc
 19643  24E8  150C               	bsf	12,2	;volatile
 19644                           
 19645                           ;LEDs.c: 31: break;
 19646  24E9  0008               	return
 19647  24EA                     i1l6636:	
 19648                           ;LEDs.c: 32: case 4:
 19649                           
 19650                           
 19651                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 19652  24EA  0C72               	rrf	i1set_leds_top@ledState,w
 19653  24EB  1C03               	skipc
 19654  24EC  118C               	bcf	12,3	;volatile
 19655  24ED  1803               	skipnc
 19656  24EE  158C               	bsf	12,3	;volatile
 19657                           
 19658                           ;LEDs.c: 34: break;
 19659  24EF  0008               	return
 19660  24F0                     i1l6638:	
 19661                           ;LEDs.c: 35: case 5:
 19662                           
 19663                           
 19664                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 19665  24F0  0C72               	rrf	i1set_leds_top@ledState,w
 19666  24F1  1C03               	skipc
 19667  24F2  120C               	bcf	12,4	;volatile
 19668  24F3  1803               	skipnc
 19669  24F4  160C               	bsf	12,4	;volatile
 19670                           
 19671                           ;LEDs.c: 39: break;
 19672                           
 19673                           ;LEDs.c: 38: case 6:
 19674                           
 19675                           ;LEDs.c: 37: break;
 19676  24F5  0008               	return
 19677  24F6                     i1l785:	
 19678                           ;LEDs.c: 40: case 100:
 19679                           
 19680                           
 19681                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 19682  24F6  140C               	bsf	12,0	;volatile
 19683                           
 19684                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 19685  24F7  148C               	bsf	12,1	;volatile
 19686                           
 19687                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 19688  24F8  150C               	bsf	12,2	;volatile
 19689                           
 19690                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 19691  24F9  158C               	bsf	12,3	;volatile
 19692                           
 19693                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 19694  24FA  160C               	bsf	12,4	;volatile
 19695                           
 19696                           ;LEDs.c: 47: }
 19697                           
 19698                           ;LEDs.c: 46: break;
 19699  24FB  0008               	return
 19700  24FC                     i1l6642:	
 19701                           
 19702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19703                           ; Switch size 1, requested type "space"
 19704                           ; Number of cases is 1, Range of values is 0 to 0
 19705                           ; switch strategies available:
 19706                           ; Name         Instructions Cycles
 19707                           ; simple_byte            4     3 (average)
 19708                           ; direct_byte            8     6 (fixed)
 19709                           ; jumptable            260     6 (fixed)
 19710                           ;	Chosen strategy is simple_byte
 19711  24FC  0871               	movf	i1set_leds_top@x+1,w
 19712  24FD  3A00               	xorlw	0	; case 0
 19713  24FE  1903               	skipnz
 19714  24FF  2D01               	goto	i1l9710
 19715  2500  2D18               	goto	i1l786
 19716  2501                     i1l9710:	
 19717                           
 19718                           ; Switch size 1, requested type "space"
 19719                           ; Number of cases is 7, Range of values is 1 to 100
 19720                           ; switch strategies available:
 19721                           ; Name         Instructions Cycles
 19722                           ; simple_byte           22    12 (average)
 19723                           ; direct_byte          209     9 (fixed)
 19724                           ; jumptable            263     9 (fixed)
 19725                           ;	Chosen strategy is simple_byte
 19726  2501  0870               	movf	i1set_leds_top@x,w
 19727  2502  3A01               	xorlw	1	; case 1
 19728  2503  1903               	skipnz
 19729  2504  2CD8               	goto	i1l6630
 19730  2505  3A03               	xorlw	3	; case 2
 19731  2506  1903               	skipnz
 19732  2507  2CDE               	goto	i1l6632
 19733  2508  3A01               	xorlw	1	; case 3
 19734  2509  1903               	skipnz
 19735  250A  2CE4               	goto	i1l6634
 19736  250B  3A07               	xorlw	7	; case 4
 19737  250C  1903               	skipnz
 19738  250D  2CEA               	goto	i1l6636
 19739  250E  3A01               	xorlw	1	; case 5
 19740  250F  1903               	skipnz
 19741  2510  2CF0               	goto	i1l6638
 19742  2511  3A03               	xorlw	3	; case 6
 19743  2512  1903               	skipnz
 19744  2513  2D18               	goto	i1l786
 19745  2514  3A62               	xorlw	98	; case 100
 19746  2515  1903               	skipnz
 19747  2516  2CF6               	goto	i1l785
 19748  2517  2D18               	goto	i1l786
 19749  2518                     i1l786:	
 19750  2518  0008               	return
 19751  2519                     __end_ofi1_set_leds_top:	
 19752                           
 19753                           	psect	text71
 19754  210B                     __ptext71:	
 19755 ;; *************** function i1_getModulationSubdivision *****************
 19756 ;; Defined at:
 19757 ;;		line 26 in file "modulation.c"
 19758 ;; Parameters:    Size  Location     Type
 19759 ;;		None
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;		None
 19762 ;; Return value:  Size  Location     Type
 19763 ;;                  2    0[COMMON] int 
 19764 ;; Registers used:
 19765 ;;		wreg, status,2, status,0
 19766 ;; Tracked objects:
 19767 ;;		On entry : 0/0
 19768 ;;		On exit  : 0/0
 19769 ;;		Unchanged: 0/0
 19770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19775 ;;Total ram usage:        2 bytes
 19776 ;; Hardware stack levels used:    1
 19777 ;; This function calls:
 19778 ;;		Nothing
 19779 ;; This function is called by:
 19780 ;;		_isr
 19781 ;; This function uses a non-reentrant model
 19782 ;;
 19783                           
 19784                           
 19785                           ;psect for function i1_getModulationSubdivision
 19786  210B                     i1_getModulationSubdivision:	
 19787                           
 19788                           ;modulation.c: 27: if (delay_time >= 2400) {
 19789                           
 19790                           ;incstack = 0
 19791                           ; Regs used in i1_getModulationSubdivision: [wreg+status,2+status,0]
 19792  210B  0020               	movlb	0	; select bank0
 19793  210C  1BD4               	btfsc	_delay_time+3,7	;volatile
 19794  210D  291F               	goto	i1l6656
 19795  210E  0854               	movf	_delay_time+3,w	;volatile
 19796  210F  1D03               	btfss	3,2
 19797  2110  291A               	goto	i1l6650
 19798  2111  0853               	movf	_delay_time+2,w	;volatile
 19799  2112  1D03               	btfss	3,2
 19800  2113  291A               	goto	i1l6650
 19801  2114  3060               	movlw	96
 19802  2115  0251               	subwf	_delay_time,w	;volatile
 19803  2116  3009               	movlw	9
 19804  2117  3B52               	subwfb	_delay_time+1,w	;volatile
 19805  2118  1C03               	btfss	3,0
 19806  2119  291F               	goto	i1l6656
 19807  211A                     i1l6650:	
 19808                           
 19809                           ;modulation.c: 28: return 120;
 19810  211A  3078               	movlw	120
 19811  211B  00F0               	movwf	?i1_getModulationSubdivision
 19812  211C  3000               	movlw	0
 19813  211D  00F1               	movwf	?i1_getModulationSubdivision+1
 19814                           
 19815                           ;modulation.c: 29: } else if (delay_time >= 600) {
 19816  211E  0008               	return
 19817  211F                     i1l6656:	
 19818  211F  1BD4               	btfsc	_delay_time+3,7	;volatile
 19819  2120  2932               	goto	i1l6664
 19820  2121  0854               	movf	_delay_time+3,w	;volatile
 19821  2122  1D03               	btfss	3,2
 19822  2123  292D               	goto	i1l6658
 19823  2124  0853               	movf	_delay_time+2,w	;volatile
 19824  2125  1D03               	btfss	3,2
 19825  2126  292D               	goto	i1l6658
 19826  2127  3058               	movlw	88
 19827  2128  0251               	subwf	_delay_time,w	;volatile
 19828  2129  3002               	movlw	2
 19829  212A  3B52               	subwfb	_delay_time+1,w	;volatile
 19830  212B  1C03               	btfss	3,0
 19831  212C  2932               	goto	i1l6664
 19832  212D                     i1l6658:	
 19833                           
 19834                           ;modulation.c: 30: return 60;
 19835  212D  303C               	movlw	60
 19836  212E  00F0               	movwf	?i1_getModulationSubdivision
 19837  212F  3000               	movlw	0
 19838  2130  00F1               	movwf	?i1_getModulationSubdivision+1
 19839                           
 19840                           ;modulation.c: 31: } else {
 19841  2131  0008               	return
 19842  2132                     i1l6664:	
 19843                           
 19844                           ;modulation.c: 32: return 30;
 19845  2132  301E               	movlw	30
 19846  2133  00F0               	movwf	?i1_getModulationSubdivision
 19847  2134  3000               	movlw	0
 19848  2135  00F1               	movwf	?i1_getModulationSubdivision+1
 19849  2136  0008               	return
 19850  2137                     __end_ofi1_getModulationSubdivision:	
 19851                           
 19852                           	psect	text72
 19853  2569                     __ptext72:	
 19854 ;; *************** function i1___awdiv *****************
 19855 ;; Defined at:
 19856 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 19857 ;; Parameters:    Size  Location     Type
 19858 ;;  divisor         2    0[COMMON] int 
 19859 ;;  dividend        2    2[COMMON] int 
 19860 ;; Auto vars:     Size  Location     Type
 19861 ;;  __awdiv         2    7[COMMON] int 
 19862 ;;  __awdiv         1    6[COMMON] unsigned char 
 19863 ;;  __awdiv         1    5[COMMON] unsigned char 
 19864 ;; Return value:  Size  Location     Type
 19865 ;;                  2    0[COMMON] int 
 19866 ;; Registers used:
 19867 ;;		wreg, status,2, status,0
 19868 ;; Tracked objects:
 19869 ;;		On entry : 0/0
 19870 ;;		On exit  : 0/0
 19871 ;;		Unchanged: 0/0
 19872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 19873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19874 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19876 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 19877 ;;Total ram usage:        9 bytes
 19878 ;; Hardware stack levels used:    1
 19879 ;; This function calls:
 19880 ;;		Nothing
 19881 ;; This function is called by:
 19882 ;;		_isr
 19883 ;; This function uses a non-reentrant model
 19884 ;;
 19885                           
 19886                           
 19887                           ;psect for function i1___awdiv
 19888  2569                     i1___awdiv:	
 19889                           
 19890                           ;incstack = 0
 19891                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 19892  2569  01F6               	clrf	i1___awdiv@sign
 19893  256A  1FF1               	btfss	i1___awdiv@divisor+1,7
 19894  256B  2D73               	goto	i1l6676
 19895  256C  09F0               	comf	i1___awdiv@divisor,f
 19896  256D  09F1               	comf	i1___awdiv@divisor+1,f
 19897  256E  0AF0               	incf	i1___awdiv@divisor,f
 19898  256F  1903               	skipnz
 19899  2570  0AF1               	incf	i1___awdiv@divisor+1,f
 19900  2571  01F6               	clrf	i1___awdiv@sign
 19901  2572  0AF6               	incf	i1___awdiv@sign,f
 19902  2573                     i1l6676:	
 19903  2573  1FF3               	btfss	i1___awdiv@dividend+1,7
 19904  2574  2D7E               	goto	i1l6682
 19905  2575  09F2               	comf	i1___awdiv@dividend,f
 19906  2576  09F3               	comf	i1___awdiv@dividend+1,f
 19907  2577  0AF2               	incf	i1___awdiv@dividend,f
 19908  2578  1903               	skipnz
 19909  2579  0AF3               	incf	i1___awdiv@dividend+1,f
 19910  257A  3001               	movlw	1
 19911  257B  00F4               	movwf	??i1___awdiv
 19912  257C  0874               	movf	??i1___awdiv,w
 19913  257D  06F6               	xorwf	i1___awdiv@sign,f
 19914  257E                     i1l6682:	
 19915  257E  01F7               	clrf	i1___awdiv@quotient
 19916  257F  01F8               	clrf	i1___awdiv@quotient+1
 19917  2580  0870               	movf	i1___awdiv@divisor,w
 19918  2581  0471               	iorwf	i1___awdiv@divisor+1,w
 19919  2582  1903               	btfsc	3,2
 19920  2583  2DAD               	goto	i1l6704
 19921  2584  01F5               	clrf	i1___awdiv@counter
 19922  2585  0AF5               	incf	i1___awdiv@counter,f
 19923  2586                     i1l6692:	
 19924  2586  1BF1               	btfsc	i1___awdiv@divisor+1,7
 19925  2587  2D92               	goto	i1l6694
 19926  2588  3001               	movlw	1
 19927  2589                     u631_25:	
 19928  2589  35F0               	lslf	i1___awdiv@divisor,f
 19929  258A  0DF1               	rlf	i1___awdiv@divisor+1,f
 19930  258B  0B89               	decfsz	9,f
 19931  258C  2D89               	goto	u631_25
 19932  258D  3001               	movlw	1
 19933  258E  00F4               	movwf	??i1___awdiv
 19934  258F  0874               	movf	??i1___awdiv,w
 19935  2590  07F5               	addwf	i1___awdiv@counter,f
 19936  2591  2D86               	goto	i1l6692
 19937  2592                     i1l6694:	
 19938  2592  3001               	movlw	1
 19939  2593                     u633_25:	
 19940  2593  35F7               	lslf	i1___awdiv@quotient,f
 19941  2594  0DF8               	rlf	i1___awdiv@quotient+1,f
 19942  2595  0B89               	decfsz	9,f
 19943  2596  2D93               	goto	u633_25
 19944  2597  0871               	movf	i1___awdiv@divisor+1,w
 19945  2598  0273               	subwf	i1___awdiv@dividend+1,w
 19946  2599  1D03               	skipz
 19947  259A  2D9D               	goto	u634_25
 19948  259B  0870               	movf	i1___awdiv@divisor,w
 19949  259C  0272               	subwf	i1___awdiv@dividend,w
 19950  259D                     u634_25:	
 19951  259D  1C03               	skipc
 19952  259E  2DA4               	goto	i1l6700
 19953  259F  0870               	movf	i1___awdiv@divisor,w
 19954  25A0  02F2               	subwf	i1___awdiv@dividend,f
 19955  25A1  0871               	movf	i1___awdiv@divisor+1,w
 19956  25A2  3BF3               	subwfb	i1___awdiv@dividend+1,f
 19957  25A3  1477               	bsf	i1___awdiv@quotient,0
 19958  25A4                     i1l6700:	
 19959  25A4  3001               	movlw	1
 19960  25A5                     u635_25:	
 19961  25A5  36F1               	lsrf	i1___awdiv@divisor+1,f
 19962  25A6  0CF0               	rrf	i1___awdiv@divisor,f
 19963  25A7  0B89               	decfsz	9,f
 19964  25A8  2DA5               	goto	u635_25
 19965  25A9  3001               	movlw	1
 19966  25AA  02F5               	subwf	i1___awdiv@counter,f
 19967  25AB  1D03               	btfss	3,2
 19968  25AC  2D92               	goto	i1l6694
 19969  25AD                     i1l6704:	
 19970  25AD  0876               	movf	i1___awdiv@sign,w
 19971  25AE  1903               	btfsc	3,2
 19972  25AF  2DB5               	goto	i1l6708
 19973  25B0  09F7               	comf	i1___awdiv@quotient,f
 19974  25B1  09F8               	comf	i1___awdiv@quotient+1,f
 19975  25B2  0AF7               	incf	i1___awdiv@quotient,f
 19976  25B3  1903               	skipnz
 19977  25B4  0AF8               	incf	i1___awdiv@quotient+1,f
 19978  25B5                     i1l6708:	
 19979  25B5  0878               	movf	i1___awdiv@quotient+1,w
 19980  25B6  00F1               	movwf	?i1___awdiv+1
 19981  25B7  0877               	movf	i1___awdiv@quotient,w
 19982  25B8  00F0               	movwf	?i1___awdiv
 19983  25B9  0008               	return
 19984  25BA                     __end_ofi1___awdiv:	
 19985                           
 19986                           	psect	text73
 19987  240B                     __ptext73:	
 19988 ;; *************** function _modulation *****************
 19989 ;; Defined at:
 19990 ;;		line 222 in file "user.c"
 19991 ;; Parameters:    Size  Location     Type
 19992 ;;  x               4   14[BANK0 ] long 
 19993 ;;  y               4   18[BANK0 ] long 
 19994 ;; Auto vars:     Size  Location     Type
 19995 ;;		None
 19996 ;; Return value:  Size  Location     Type
 19997 ;;                  4   14[BANK0 ] long 
 19998 ;; Registers used:
 19999 ;;		wreg, status,2, status,0, pclath, cstack
 20000 ;; Tracked objects:
 20001 ;;		On entry : 0/0
 20002 ;;		On exit  : 0/0
 20003 ;;		Unchanged: 0/0
 20004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20005 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20007 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20008 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20009 ;;Total ram usage:       12 bytes
 20010 ;; Hardware stack levels used:    1
 20011 ;; Hardware stack levels required when called:    1
 20012 ;; This function calls:
 20013 ;;		i1___aldiv
 20014 ;;		i1___lmul
 20015 ;; This function is called by:
 20016 ;;		_isr
 20017 ;; This function uses a non-reentrant model
 20018 ;;
 20019                           
 20020                           
 20021                           ;psect for function _modulation
 20022  240B                     _modulation:	
 20023                           
 20024                           ;user.c: 225: return (127500 + (y * x)) / 1000;
 20025                           
 20026                           ;incstack = 0
 20027                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 20028  240B  3000               	movlw	0
 20029  240C  0020               	movlb	0	; select bank0
 20030  240D  00A3               	movwf	i1___aldiv@divisor+3
 20031  240E  3000               	movlw	0
 20032  240F  00A2               	movwf	i1___aldiv@divisor+2
 20033  2410  3003               	movlw	3
 20034  2411  00A1               	movwf	i1___aldiv@divisor+1
 20035  2412  30E8               	movlw	232
 20036  2413  00A0               	movwf	i1___aldiv@divisor
 20037  2414  300C               	movlw	12
 20038  2415  00B6               	movwf	??_modulation
 20039  2416  30F2               	movlw	242
 20040  2417  00B7               	movwf	??_modulation+1
 20041  2418  3001               	movlw	1
 20042  2419  00B8               	movwf	??_modulation+2
 20043  241A  3000               	movlw	0
 20044  241B  00B9               	movwf	??_modulation+3
 20045  241C  0835               	movf	modulation@y+3,w
 20046  241D  00F3               	movwf	i1___lmul@multiplier+3
 20047  241E  0834               	movf	modulation@y+2,w
 20048  241F  00F2               	movwf	i1___lmul@multiplier+2
 20049  2420  0833               	movf	modulation@y+1,w
 20050  2421  00F1               	movwf	i1___lmul@multiplier+1
 20051  2422  0832               	movf	modulation@y,w
 20052  2423  00F0               	movwf	i1___lmul@multiplier
 20053  2424  0831               	movf	modulation@x+3,w
 20054  2425  00F7               	movwf	i1___lmul@multiplicand+3
 20055  2426  0830               	movf	modulation@x+2,w
 20056  2427  00F6               	movwf	i1___lmul@multiplicand+2
 20057  2428  082F               	movf	modulation@x+1,w
 20058  2429  00F5               	movwf	i1___lmul@multiplicand+1
 20059  242A  082E               	movf	modulation@x,w
 20060  242B  00F4               	movwf	i1___lmul@multiplicand
 20061  242C  31A1  2137  31A4   	fcall	i1___lmul
 20062  242F  0870               	movf	?i1___lmul,w
 20063  2430  0020               	movlb	0	; select bank0
 20064  2431  07B6               	addwf	??_modulation,f
 20065  2432  0871               	movf	?i1___lmul+1,w
 20066  2433  3DB7               	addwfc	??_modulation+1,f
 20067  2434  0872               	movf	?i1___lmul+2,w
 20068  2435  3DB8               	addwfc	??_modulation+2,f
 20069  2436  0873               	movf	?i1___lmul+3,w
 20070  2437  3DB9               	addwfc	??_modulation+3,f
 20071  2438  0839               	movf	??_modulation+3,w
 20072  2439  00A7               	movwf	i1___aldiv@dividend+3
 20073  243A  0838               	movf	??_modulation+2,w
 20074  243B  00A6               	movwf	i1___aldiv@dividend+2
 20075  243C  0837               	movf	??_modulation+1,w
 20076  243D  00A5               	movwf	i1___aldiv@dividend+1
 20077  243E  0836               	movf	??_modulation,w
 20078  243F  00A4               	movwf	i1___aldiv@dividend
 20079  2440  3198  20BD         	fcall	i1___aldiv
 20080  2442  0020               	movlb	0	; select bank0
 20081  2443  0823               	movf	?i1___aldiv+3,w
 20082  2444  00B1               	movwf	?_modulation+3
 20083  2445  0822               	movf	?i1___aldiv+2,w
 20084  2446  00B0               	movwf	?_modulation+2
 20085  2447  0821               	movf	?i1___aldiv+1,w
 20086  2448  00AF               	movwf	?_modulation+1
 20087  2449  0820               	movf	?i1___aldiv,w
 20088  244A  00AE               	movwf	?_modulation
 20089  244B  0008               	return
 20090  244C                     __end_of_modulation:	
 20091                           
 20092                           	psect	text74
 20093  2137                     __ptext74:	
 20094 ;; *************** function i1___lmul *****************
 20095 ;; Defined at:
 20096 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 20097 ;; Parameters:    Size  Location     Type
 20098 ;;  multiplier      4    0[COMMON] unsigned long 
 20099 ;;  multiplicand    4    4[COMMON] unsigned long 
 20100 ;; Auto vars:     Size  Location     Type
 20101 ;;  __lmul          4    8[COMMON] unsigned long 
 20102 ;; Return value:  Size  Location     Type
 20103 ;;                  4    0[COMMON] unsigned long 
 20104 ;; Registers used:
 20105 ;;		wreg, status,2, status,0
 20106 ;; Tracked objects:
 20107 ;;		On entry : 0/0
 20108 ;;		On exit  : 0/0
 20109 ;;		Unchanged: 0/0
 20110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20111 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20112 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20114 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20115 ;;Total ram usage:       12 bytes
 20116 ;; Hardware stack levels used:    1
 20117 ;; This function calls:
 20118 ;;		Nothing
 20119 ;; This function is called by:
 20120 ;;		_modulation
 20121 ;; This function uses a non-reentrant model
 20122 ;;
 20123                           
 20124                           
 20125                           ;psect for function i1___lmul
 20126  2137                     i1___lmul:	
 20127                           
 20128                           ;incstack = 0
 20129                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 20130  2137  3000               	movlw	0
 20131  2138  00FB               	movwf	i1___lmul@product+3
 20132  2139  3000               	movlw	0
 20133  213A  00FA               	movwf	i1___lmul@product+2
 20134  213B  3000               	movlw	0
 20135  213C  00F9               	movwf	i1___lmul@product+1
 20136  213D  3000               	movlw	0
 20137  213E  00F8               	movwf	i1___lmul@product
 20138  213F                     i1l6040:	
 20139  213F  1C70               	btfss	i1___lmul@multiplier,0
 20140  2140  2949               	goto	i1l6044
 20141  2141  0874               	movf	i1___lmul@multiplicand,w
 20142  2142  07F8               	addwf	i1___lmul@product,f
 20143  2143  0875               	movf	i1___lmul@multiplicand+1,w
 20144  2144  3DF9               	addwfc	i1___lmul@product+1,f
 20145  2145  0876               	movf	i1___lmul@multiplicand+2,w
 20146  2146  3DFA               	addwfc	i1___lmul@product+2,f
 20147  2147  0877               	movf	i1___lmul@multiplicand+3,w
 20148  2148  3DFB               	addwfc	i1___lmul@product+3,f
 20149  2149                     i1l6044:	
 20150  2149  3001               	movlw	1
 20151  214A                     u536_25:	
 20152  214A  35F4               	lslf	i1___lmul@multiplicand,f
 20153  214B  0DF5               	rlf	i1___lmul@multiplicand+1,f
 20154  214C  0DF6               	rlf	i1___lmul@multiplicand+2,f
 20155  214D  0DF7               	rlf	i1___lmul@multiplicand+3,f
 20156  214E  0B89               	decfsz	9,f
 20157  214F  294A               	goto	u536_25
 20158  2150  3001               	movlw	1
 20159  2151                     u537_25:	
 20160  2151  36F3               	lsrf	i1___lmul@multiplier+3,f
 20161  2152  0CF2               	rrf	i1___lmul@multiplier+2,f
 20162  2153  0CF1               	rrf	i1___lmul@multiplier+1,f
 20163  2154  0CF0               	rrf	i1___lmul@multiplier,f
 20164  2155  0B89               	decfsz	9,f
 20165  2156  2951               	goto	u537_25
 20166  2157  0873               	movf	i1___lmul@multiplier+3,w
 20167  2158  0472               	iorwf	i1___lmul@multiplier+2,w
 20168  2159  0471               	iorwf	i1___lmul@multiplier+1,w
 20169  215A  0470               	iorwf	i1___lmul@multiplier,w
 20170  215B  1D03               	skipz
 20171  215C  293F               	goto	i1l6040
 20172  215D  087B               	movf	i1___lmul@product+3,w
 20173  215E  00F3               	movwf	?i1___lmul+3
 20174  215F  087A               	movf	i1___lmul@product+2,w
 20175  2160  00F2               	movwf	?i1___lmul+2
 20176  2161  0879               	movf	i1___lmul@product+1,w
 20177  2162  00F1               	movwf	?i1___lmul+1
 20178  2163  0878               	movf	i1___lmul@product,w
 20179  2164  00F0               	movwf	?i1___lmul
 20180  2165  0008               	return
 20181  2166                     __end_ofi1___lmul:	
 20182                           
 20183                           	psect	text75
 20184  18BD                     __ptext75:	
 20185 ;; *************** function i1___aldiv *****************
 20186 ;; Defined at:
 20187 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 20188 ;; Parameters:    Size  Location     Type
 20189 ;;  divisor         4    0[BANK0 ] long 
 20190 ;;  dividend        4    4[BANK0 ] long 
 20191 ;; Auto vars:     Size  Location     Type
 20192 ;;  __aldiv         4   10[BANK0 ] long 
 20193 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 20194 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 20195 ;; Return value:  Size  Location     Type
 20196 ;;                  4    0[BANK0 ] long 
 20197 ;; Registers used:
 20198 ;;		wreg, status,2, status,0
 20199 ;; Tracked objects:
 20200 ;;		On entry : 0/0
 20201 ;;		On exit  : 0/0
 20202 ;;		Unchanged: 0/0
 20203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 20204 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20206 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20207 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 20208 ;;Total ram usage:       15 bytes
 20209 ;; Hardware stack levels used:    1
 20210 ;; This function calls:
 20211 ;;		Nothing
 20212 ;; This function is called by:
 20213 ;;		_modulation
 20214 ;; This function uses a non-reentrant model
 20215 ;;
 20216                           
 20217                           
 20218                           ;psect for function i1___aldiv
 20219  18BD                     i1___aldiv:	
 20220                           
 20221                           ;incstack = 0
 20222                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 20223  18BD  0020               	movlb	0	; select bank0
 20224  18BE  01A9               	clrf	i1___aldiv@sign
 20225  18BF  1FA3               	btfss	i1___aldiv@divisor+3,7
 20226  18C0  28CE               	goto	i1l2007
 20227  18C1  09A0               	comf	i1___aldiv@divisor,f
 20228  18C2  09A1               	comf	i1___aldiv@divisor+1,f
 20229  18C3  09A2               	comf	i1___aldiv@divisor+2,f
 20230  18C4  09A3               	comf	i1___aldiv@divisor+3,f
 20231  18C5  0AA0               	incf	i1___aldiv@divisor,f
 20232  18C6  1903               	skipnz
 20233  18C7  0AA1               	incf	i1___aldiv@divisor+1,f
 20234  18C8  1903               	skipnz
 20235  18C9  0AA2               	incf	i1___aldiv@divisor+2,f
 20236  18CA  1903               	skipnz
 20237  18CB  0AA3               	incf	i1___aldiv@divisor+3,f
 20238  18CC  01A9               	clrf	i1___aldiv@sign
 20239  18CD  0AA9               	incf	i1___aldiv@sign,f
 20240  18CE                     i1l2007:	
 20241  18CE  1FA7               	btfss	i1___aldiv@dividend+3,7
 20242  18CF  28DF               	goto	i1l6062
 20243  18D0  09A4               	comf	i1___aldiv@dividend,f
 20244  18D1  09A5               	comf	i1___aldiv@dividend+1,f
 20245  18D2  09A6               	comf	i1___aldiv@dividend+2,f
 20246  18D3  09A7               	comf	i1___aldiv@dividend+3,f
 20247  18D4  0AA4               	incf	i1___aldiv@dividend,f
 20248  18D5  1903               	skipnz
 20249  18D6  0AA5               	incf	i1___aldiv@dividend+1,f
 20250  18D7  1903               	skipnz
 20251  18D8  0AA6               	incf	i1___aldiv@dividend+2,f
 20252  18D9  1903               	skipnz
 20253  18DA  0AA7               	incf	i1___aldiv@dividend+3,f
 20254  18DB  3001               	movlw	1
 20255  18DC  00FC               	movwf	??i1___aldiv
 20256  18DD  087C               	movf	??i1___aldiv,w
 20257  18DE  06A9               	xorwf	i1___aldiv@sign,f
 20258  18DF                     i1l6062:	
 20259  18DF  3000               	movlw	0
 20260  18E0  00AD               	movwf	i1___aldiv@quotient+3
 20261  18E1  3000               	movlw	0
 20262  18E2  00AC               	movwf	i1___aldiv@quotient+2
 20263  18E3  3000               	movlw	0
 20264  18E4  00AB               	movwf	i1___aldiv@quotient+1
 20265  18E5  3000               	movlw	0
 20266  18E6  00AA               	movwf	i1___aldiv@quotient
 20267  18E7  0823               	movf	i1___aldiv@divisor+3,w
 20268  18E8  0422               	iorwf	i1___aldiv@divisor+2,w
 20269  18E9  0421               	iorwf	i1___aldiv@divisor+1,w
 20270  18EA  0420               	iorwf	i1___aldiv@divisor,w
 20271  18EB  1903               	skipnz
 20272  18EC  2928               	goto	i1l6084
 20273  18ED  01A8               	clrf	i1___aldiv@counter
 20274  18EE  0AA8               	incf	i1___aldiv@counter,f
 20275  18EF                     i1l6070:	
 20276  18EF  1BA3               	btfsc	i1___aldiv@divisor+3,7
 20277  18F0  28FD               	goto	i1l6072
 20278  18F1  3001               	movlw	1
 20279  18F2                     u542_25:	
 20280  18F2  35A0               	lslf	i1___aldiv@divisor,f
 20281  18F3  0DA1               	rlf	i1___aldiv@divisor+1,f
 20282  18F4  0DA2               	rlf	i1___aldiv@divisor+2,f
 20283  18F5  0DA3               	rlf	i1___aldiv@divisor+3,f
 20284  18F6  0B89               	decfsz	9,f
 20285  18F7  28F2               	goto	u542_25
 20286  18F8  3001               	movlw	1
 20287  18F9  00FC               	movwf	??i1___aldiv
 20288  18FA  087C               	movf	??i1___aldiv,w
 20289  18FB  07A8               	addwf	i1___aldiv@counter,f
 20290  18FC  28EF               	goto	i1l6070
 20291  18FD                     i1l6072:	
 20292  18FD  3001               	movlw	1
 20293  18FE                     u544_25:	
 20294  18FE  35AA               	lslf	i1___aldiv@quotient,f
 20295  18FF  0DAB               	rlf	i1___aldiv@quotient+1,f
 20296  1900  0DAC               	rlf	i1___aldiv@quotient+2,f
 20297  1901  0DAD               	rlf	i1___aldiv@quotient+3,f
 20298  1902  0B89               	decfsz	9,f
 20299  1903  28FE               	goto	u544_25
 20300  1904  0823               	movf	i1___aldiv@divisor+3,w
 20301  1905  0227               	subwf	i1___aldiv@dividend+3,w
 20302  1906  1D03               	skipz
 20303  1907  2912               	goto	u545_25
 20304  1908  0822               	movf	i1___aldiv@divisor+2,w
 20305  1909  0226               	subwf	i1___aldiv@dividend+2,w
 20306  190A  1D03               	skipz
 20307  190B  2912               	goto	u545_25
 20308  190C  0821               	movf	i1___aldiv@divisor+1,w
 20309  190D  0225               	subwf	i1___aldiv@dividend+1,w
 20310  190E  1D03               	skipz
 20311  190F  2912               	goto	u545_25
 20312  1910  0820               	movf	i1___aldiv@divisor,w
 20313  1911  0224               	subwf	i1___aldiv@dividend,w
 20314  1912                     u545_25:	
 20315  1912  1C03               	skipc
 20316  1913  291D               	goto	i1l6080
 20317  1914  0820               	movf	i1___aldiv@divisor,w
 20318  1915  02A4               	subwf	i1___aldiv@dividend,f
 20319  1916  0821               	movf	i1___aldiv@divisor+1,w
 20320  1917  3BA5               	subwfb	i1___aldiv@dividend+1,f
 20321  1918  0822               	movf	i1___aldiv@divisor+2,w
 20322  1919  3BA6               	subwfb	i1___aldiv@dividend+2,f
 20323  191A  0823               	movf	i1___aldiv@divisor+3,w
 20324  191B  3BA7               	subwfb	i1___aldiv@dividend+3,f
 20325  191C  142A               	bsf	i1___aldiv@quotient,0
 20326  191D                     i1l6080:	
 20327  191D  3001               	movlw	1
 20328  191E                     u546_25:	
 20329  191E  36A3               	lsrf	i1___aldiv@divisor+3,f
 20330  191F  0CA2               	rrf	i1___aldiv@divisor+2,f
 20331  1920  0CA1               	rrf	i1___aldiv@divisor+1,f
 20332  1921  0CA0               	rrf	i1___aldiv@divisor,f
 20333  1922  0B89               	decfsz	9,f
 20334  1923  291E               	goto	u546_25
 20335  1924  3001               	movlw	1
 20336  1925  02A8               	subwf	i1___aldiv@counter,f
 20337  1926  1D03               	btfss	3,2
 20338  1927  28FD               	goto	i1l6072
 20339  1928                     i1l6084:	
 20340  1928  0829               	movf	i1___aldiv@sign,w
 20341  1929  1903               	btfsc	3,2
 20342  192A  2936               	goto	i1l6088
 20343  192B  09AA               	comf	i1___aldiv@quotient,f
 20344  192C  09AB               	comf	i1___aldiv@quotient+1,f
 20345  192D  09AC               	comf	i1___aldiv@quotient+2,f
 20346  192E  09AD               	comf	i1___aldiv@quotient+3,f
 20347  192F  0AAA               	incf	i1___aldiv@quotient,f
 20348  1930  1903               	skipnz
 20349  1931  0AAB               	incf	i1___aldiv@quotient+1,f
 20350  1932  1903               	skipnz
 20351  1933  0AAC               	incf	i1___aldiv@quotient+2,f
 20352  1934  1903               	skipnz
 20353  1935  0AAD               	incf	i1___aldiv@quotient+3,f
 20354  1936                     i1l6088:	
 20355  1936  082D               	movf	i1___aldiv@quotient+3,w
 20356  1937  00A3               	movwf	?i1___aldiv+3
 20357  1938  082C               	movf	i1___aldiv@quotient+2,w
 20358  1939  00A2               	movwf	?i1___aldiv+2
 20359  193A  082B               	movf	i1___aldiv@quotient+1,w
 20360  193B  00A1               	movwf	?i1___aldiv+1
 20361  193C  082A               	movf	i1___aldiv@quotient,w
 20362  193D  00A0               	movwf	?i1___aldiv
 20363  193E  0008               	return
 20364  193F                     __end_ofi1___aldiv:	
 20365  007E                     btemp	set	126	;btemp
 20366  007E                     int$flags	set	126
 20367  007E                     wtemp	set	126
 20368  007E                     wtemp0	set	126
 20369  0080                     wtemp1	set	128
 20370  0082                     wtemp2	set	130
 20371  0084                     wtemp3	set	132
 20372  0086                     wtemp4	set	134
 20373  0088                     wtemp5	set	136
 20374  007F                     wtemp6	set	127
 20375  007E                     ttemp	set	126
 20376  007E                     ttemp0	set	126
 20377  0081                     ttemp1	set	129
 20378  0084                     ttemp2	set	132
 20379  0087                     ttemp3	set	135
 20380  007F                     ttemp4	set	127
 20381  007E                     ltemp	set	126
 20382  007E                     ltemp0	set	126
 20383  0082                     ltemp1	set	130
 20384  0086                     ltemp2	set	134
 20385  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    84
    Data        49
    BSS         287
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      64
    BANK1            80     80      80
    BANK2            80     74      80
    BANK3            80      9      80
    BANK4            80     14      69
    BANK5            80      0      44
    BANK6            80      0      64
    BANK7            80      0      64
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           26      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK2[2]), floor@expon(BANK2[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_map
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    ___lltoft->___ftpack
    _map->___ftdiv
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_setSwitchBypassRelays
    _setSwitchBypassRelays->_wait_ms
    _wait_ms->___lmul
    ___fttol->_map
    ___altoft->___ftpack
    ___ftmul->___awtoft
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot
    _updateModulationArray->_modSquare
    _modTri->___fttol
    _modSquare->_modSin
    _modSin->___wmul
    _modSawRev->_modSaw
    _modSaw->___fttol
    _set_subdivision->___fttol
    _scaleiA10kPot->_pow
    _scaleA10kPot->_pow
    _scaleA100kPot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _getModulationDelayTime->___fttol
    _calcSinArray->_sin
    _sin->_eval_poly
    _floor->___fttol
    _eval_poly->___wmul
    ___wmul->___fttol
    ___ftsub->_floor

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_scaleA100kPot
    _main->_scaleA10kPot
    _main->_scaleiA10kPot

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  844725
                                              0 BANK4     14    14      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                          _USARTInit
                           ___awtoft
                            ___fttol
                        _adc_convert
                       _calcSinArray
             _getModulationDelayTime
                   _initSwitchBypass
                                _map
                      _scaleA100kPot
                       _scaleA10kPot
                      _scaleiA10kPot
                    _set_subdivision
              _updateModulationArray
                 _updateSwitchBypass
                    _updateSwitchTap
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   31922
                                             28 BANK1      2     2      0
                _setDoublePressState
                 _setLongBypassState
              _setSwitchBypassRelays
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setLongBypassState                                   4     2      2     355
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (3) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (4) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (4) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _updateModulationArray                               11    11      0  160827
                                             48 BANK2     11    11      0
                            ___awdiv
                           ___awtoft
                             ___wmul
           _getModulationSubdivision
                             _modSaw
                          _modSawRev
                             _modSin
                          _modSquare
                             _modTri
 ---------------------------------------------------------------------------------
 (2) _modTri                                              18    12      6   29639
                                             14 BANK2     18    12      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _modSquare                                            8     2      6   33974
                                             40 BANK2      8     2      6
                           ___awtoft (ARG)
                             ___ftge
                             _modSin
 ---------------------------------------------------------------------------------
 (3) _modSin                                              20    14      6   30723
                                             20 BANK2     20    14      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _modSawRev                                            8     2      6   29913
                                             37 BANK2      8     2      6
                           ___awtoft (ARG)
                             _modSaw
 ---------------------------------------------------------------------------------
 (3) _modSaw                                              23    17      6   29697
                                             14 BANK2     23    17      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     837
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      9     5      4   14064
                                             14 BANK2      9     5      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _scaleiA10kPot                                       12     9      3  161912
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA10kPot                                        12     9      3  151570
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _scaleA100kPot                                       12     9      3  151619
                                             71 BANK2      3     0      3
                                              0 BANK3      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 18    12      6  135651
                                             53 BANK2     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     3      3   42179
                                             30 BANK2      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 13    10      3   75130
                                             40 BANK2     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                               10     5      5    5741
                                             30 BANK2     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   25792
                                             62 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2667
                                             26 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2633
                                             22 BANK1      4     2      2
              _setSwitchBypassRelays
 ---------------------------------------------------------------------------------
 (3) _setSwitchBypassRelays                                4     2      2    2155
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getModulationDelayTime                               2     2      0   15382
                                             14 BANK2      2     2      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
           _getModulationSubdivision
 ---------------------------------------------------------------------------------
 (2) _getModulationSubdivision                             2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _calcSinArray                                         8     8      0   91314
                                             44 BANK2      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 14    11      3   71601
                                             30 BANK2     14    11      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                9     6      3   16788
                                             14 BANK2      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1603
                                              0 BANK2     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2970
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                             8     4      4    2942
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     3      7   18011
                                             20 BANK2     10     3      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1060
                                             14 BANK2      6     2      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    7652
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8679
                                             23 BANK2      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    8121
                                             33 BANK1     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    2221
                                             30 BANK1      3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    6392
                                             46 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    4411
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2     108
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (5) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (5) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  7     7      0    1301
                                             13 COMMON     1     1      0
                                             26 BANK0      6     6      0
                         _modulation
                          i1___awdiv
         i1_getModulationSubdivision
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) i1_getModulationSubdivision                           2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   _USARTInit
   ___awtoft
     ___ftpack
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
   _adc_convert
   _calcSinArray
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _frexp
   _getModulationDelayTime
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _getModulationSubdivision
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
   _scaleA100kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleA10kPot
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _scaleiA10kPot
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
             _frexp
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
           _frexp
         _ldexp
           ___ftge
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 _map (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftneg (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               _map (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
         _frexp
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
   _updateModulationArray
     ___awdiv
     ___awtoft
       ___ftpack
     ___wmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _getModulationSubdivision
     _modSaw
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
     _modSawRev
       ___awtoft (ARG)
         ___ftpack
       _modSaw (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSin
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
       ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
     _modSquare
       ___awtoft (ARG)
         ___ftpack
       ___ftge (ARG)
       _modSin (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
         ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
     _modTri
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongBypassState
     _setSwitchBypassRelays
       _updateSwitchBypassState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _setSwitchBypassRelays
         _updateSwitchBypassState
         _wait_ms
           ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState

 _isr (ROOT)
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1___awdiv
   i1_getModulationSubdivision
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      40       5       80.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     4A      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      E      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     22F      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      40      20       80.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     22F      28        0.0%
BANK11              1A      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jan 14 20:46:37 2017

                       ___altoft@exp 00AE                          __CFG_CP$OFF 0000  
                      ___altoft@sign 00AF                     modSaw@inflection 0131  
                   scaleA100kPot@pwm 01E7                         ___awdiv@sign 00A6  
                 _topTactile_pressed 016E           setDoublePressState@f_state 00B8  
                ___wmul@multiplicand 0130                   USARTInit@baud_rate 00A0  
                    _updateSwitchTap 09FD                         ___ftadd@exp1 00CD  
                       ___ftadd@exp2 00CC                         ___ftadd@sign 00CB  
                                l357 05F8                                  l377 2219  
                                l626 27BC                 __size_of_adc_convert 0013  
                                l579 2F79                                  l790 229F  
                                l792 22A2                                  l793 22A5  
                                l785 268E                                  l794 22A8  
                                l786 26B2                                  l795 22AB  
                                l797 22AE                                  l798 22D2  
                                l990 2099                                  l992 209F  
                                l993 20A7                                  l994 20BA  
                                _GIE 005F                                  _RB1 0069  
                                _PR2 001B         solidring_tactiles@ring_delay 00B4  
                                _map 1ACD                                  _exp 1351  
                                _log 1F2F                                  _isr 0004  
                                _tap 02A0                                  _sin 082E  
                                _pow 1115                         __CFG_BORV$LO 0000  
                                wreg 0009                         __CFG_IESO$ON 0000  
                       __CFG_FOSC$HS 0000                  set_subdivision@tmpX 0135  
            __end_of_set_leds_bottom 22D3                         __CFG_LVP$OFF 0000  
                     i1___aldiv@sign 0029                         ___ftdiv@cntr 00D8  
                       ___ftdiv@sign 00DD                                 l2007 1950  
                               l2120 26F9                                 l2121 2701  
                               l2113 26E6                                 l1411 0A12  
                               l2204 1AB3                                 l2144 10BE  
                               l1425 0ACC                                 l2316 1139  
                               l2334 0943                                 l1705 24C3  
                               l1931 0D9D                                 l1952 2FD1  
                               ?_map 00DE                                 l8002 1CFB  
                               l8014 0808                                 l8032 1E06  
                               l8042 1E73                                 l8052 2783  
                               l8028 1DFE                                 l8140 223F  
                               l9020 1B6C                                 l8132 20AE  
                               ?_exp 0148                                 ?_log 013E  
                               l8062 076E                                 l8230 13A7  
                               l8214 135E                                 l9022 1B70  
                               l9110 04D8                                 l8072 0790  
                               l8224 1383                                 l8320 1141  
                               l9040 1BDD                                 l9024 1B74  
                               l9032 1B85                                 l9120 054E  
                               l7610 26D2                                 l7602 26BC  
                               l9026 1B78                                 l9034 1B9E  
                               l9018 1B66                                 l8170 14DF  
                               l9106 0498                                 l8180 20E6  
                               l8092 07D8                                 l8236 13E2  
                               l9028 1B7E                                 l8156 1689  
                               l9140 063A                                 l9124 058E  
                               ?_isr 0070                                 l7606 26C3  
                               l7702 1047                                 l8270 21AB  
                               l8182 20F6                                 l8334 11A7  
                               l8326 114D                                 l8414 2378  
                               l8422 2383                                 l8406 2367  
                               l9150 06CB                                 l7640 2686  
                               l7632 2666                                 l8600 2498  
                               l7616 26EB                                 l7608 26CD  
                               l7712 105D                                 l8440 0863  
                               l8272 21BA                                 l8264 21A5  
                               l8096 07E0                                 l8192 1F53  
                               l9136 05FA                                 l9080 03B5  
                               l7634 266E                                 l8602 249A  
                               l7618 26F3                                 l7730 108A  
                               l7706 104E                                 l7810 1EE3  
                               l8258 148A                                 l8338 11C7  
                               l8514 1971                                 l8506 1961  
                               l9154 0715                                 l9146 068B  
                               l9090 03BF                                 l7660 22B5  
                               l7636 2676                                 l7644 2695  
                               l8604 249C                                 l7732 1094  
                               l7724 1077                                 l8452 08FF  
                               l8700 0E9B                                 l8532 19B8  
                               l8524 199F                                 l8516 197F  
                               l7638 267E                                 l7742 10B0  
                               l7734 1099                                 l7822 1EFF  
                               l7814 1EEB                                 l8278 21C0  
                               l7590 21D9                                 l8198 1F66  
                               l8550 25D0                                 l8702 0EE1  
                               l9166 0757                                 l8608 24A0  
                               l7752 10E2                                 l7744 10BA  
                               l7736 109D                                 l8560 25D8  
                               l8544 25C5                                 l8472 0C17  
                               l8704 0F27                                 l8712 0FC7  
                               l8528 19AA                                 l9096 043A  
                               l7762 10FD                                 l7826 1F07  
                               l7690 22E8                                 l7770 1817  
                               l7850 1A5F                                 l7586 21CF  
                               l8562 25E4                                 l8706 0F6D  
                               l8714 0FDE                                 l8810 1314  
                               l8802 12FA                                 l8730 1241  
                               l9700 24B4                                 l7748 10D0  
                               l7668 2FCB                                 l7692 22F8  
                               l8572 25FF                                 l8476 0D59  
                               l8708 0FB3                                 l8716 0E37  
                               l7932 254D                                 l7924 2529  
                               l8812 131A                                 l8820 132E  
                               l8900 0AC4                                 ?_sin 013E  
                               l8662 27CF                                 l9702 24B9  
                               l7774 182D                                 l7870 1A9D  
                               l8718 0FE4                                 l8742 1262  
                               l8734 1254                                 l8664 27D8  
                               l9704 24BE                                 l7792 1E92  
                               l8576 2607                                 l8568 25F6  
                               l8488 2347                                 l7952 227A  
                               l9706 269B                                 l7882 1AC4  
                               l8826 133A                                 l8762 1291  
                               l8922 0B8B                                 l8930 0BC8  
                               l9708 22BB                                 l7964 2081  
                               l7980 1CA1                                 l7876 1AAA  
                               l7868 1A8F                                 l8692 0E20  
                               l8916 0B1B                                 l8908 0B0F  
                               l8852 0A23                                 ?_pow 0155  
                               l8598 2496                                 l7974 1C8B  
                               l7798 1EA8                                 l7878 1AB6  
                               l7894 239F                                 l8782 12C7  
                               l8766 12A3                                 l8918 0B65  
                               l8846 0A08                                 l8768 12AB  
                               l7994 1CE2                                 l8962 1BFB  
                               l8698 0E55                                 l8794 12DB  
                               l8874 0A6D                                 l8866 0A45  
                               l8890 0A9D                                 l8956 1BEE  
                               l8796 12DF                                 l8892 0AAC  
                               l8868 0A62                                 l9694 0FCD  
                               l8984 1D35                                 l9696 1B8A  
                               l8888 0A95                                 l9698 24AF  
                               l8978 1D26                                 l8998 19CD  
                               _PEIE 005E                                 _RCIE 048D  
                               u8115 1EEC                                 u8125 1EF2  
                               u8205 1A66                                 u9005 1980  
                               u9015 1994                                 u9105 25E5  
                               u8305 2527                                 u9025 19A0  
                               u8155 1F08                                 u8235 1A90  
                               u9115 25EF                                 u8315 254B  
                               u9220 27D6                                 u9205 27B5  
                               u8405 1CE3                                 u8165 1F0E  
                               u8085 1EB4                                 u9125 25F7  
                               u9215 27C8                                 u8415 1CF2  
                               u8095 1EC4                                 u7705 2708  
                               u7625 26C8                                 u8425 1CFC  
                               u8265 1AAB                                 u9305 124D  
                               u8540 223D                                 u7645 26E1  
                               u8525 0799                                 u9085 25DB  
                               u9245 0DFA                                 u9175 20C7  
                               u7575 21DA                                 u9255 0E0E  
                               u9335 126C                                 u9185 20CD  
                               u7665 26EE                                 u8385 1CB3  
                               u7745 2FD2                                 u7585 21E1  
                               u9265 0E1E                                 u8650 13C0  
                               u8395 1CC3                                 u7755 2FD7  
                               u9275 0E3E                                 u8660 13C1  
                               u7925 108B                                 u8805 2358  
                               u9445 12EB                                 u9295 123A  
                               u9615 0A77                                 u7785 22ED  
                               u8585 20EB                                 u9705 0AF4  
                               u7955 109E                                 u9715 0B24  
                               u8765 1198                                 u8845 2FB9  
                               u9725 0B39                                 u8870 08FB  
                               u7895 1078                                 u8695 1481  
                               u9735 0B4D                                 u8880 08FC  
                               u7985 10B1                                 u8785 2FEF  
                               u9585 0A4E                                 u9905 058C  
                               u9835 1BD8                                 u8795 2060  
                               u9755 0B6A                                 u9915 05E5  
                               u9925 05F3                                 u9695 0ADD  
                               u9935 0618                                 u9855 0418  
                               u8985 1974                                 u9945 0638  
                               u9865 0438                                 u9955 06A9  
                               u9875 04B6                                 u9965 06C9  
                               u9885 04D6                                 u9895 056C  
                 scaleA100kPot@input 0167                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                    _scaleA10kPot$2838 01EA  
                  _scaleA10kPot$2839 01ED                                 _iCnt 01C0  
                               _main 0391                         ___ftpack@arg 00A0  
                       ___ftpack@exp 00A3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 map@x 00DE  
                               btemp 007E                                 exp@x 0148  
                               log@x 013E                        __CFG_BOREN$ON 0000  
                               sin@f 013E                                 sin@y 0142  
                               ltemp 007E                                 pow@x 0155  
                               pow@y 0158                                 start 0310  
                               ttemp 007E                                 wtemp 007E  
       __end_of_getSwitchBypassState 2F1B                      _expressModeCnst 01E3  
       updateSwitchTap@tapCntDivisor 00C2         __end_of_setSwitchBypassState 3000  
                    ?i1_set_leds_top 0070                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 00BC                         ___ftmul@sign 00BD  
                    __end_of_InitApp 2196                         ___fttol@exp1 012D  
                              ??_map 00ED                                ??_exp 014B  
                              ??_log 0141                         ___fttol@lval 0129  
                              ??_isr 003A                                ??_sin 0141  
                              ??_pow 015B                      _switchBypass_up 0263  
          __size_of_initSwitchBypass 000F                      __end_of___aldiv 19C1  
                              ?_main 0070                       i1___awdiv@sign 0076  
       getModulationDelayTime@subDiv 012E                      __end_of___awdiv 260C  
                    __end_of___ftadd 1115                                _CCPR1 0291  
                              _CCPR2 0298                                _CCPR3 0311  
                              _CCPR4 0318                                _CCPR5 031C  
                      __CFG_WDTE$OFF 0000                      __end_of___ftdiv 1D1D  
                    __end_of___ftneg 2F2D                      __end_of___ftmul 1F2F  
                    ___awdiv@divisor 00A0                      __end_of___ftsub 082E  
                    __end_of___fttol 1ACD                                i1l135 030B  
                              i1l136 002C                                i1l137 0110  
                              i1l155 027E                                i1l158 0302  
                              i1l785 24F6                                i1l786 2518  
                    ___awdiv@counter 00A5                                _RCREG 0199  
                              _SPBRG 019B                   __end_ofsin@coeff_a 2848  
                 __end_ofsin@coeff_b 2854                                _TXREG 019A  
                              _UQEnd 0048                  _ConfigureOscillator 2F13  
        __size_of_setLongBypassState 0021                     _setPresetDisplay 225E  
                       ?_init_timer0 0070                         ?_init_timer2 0070  
                ___lmul@multiplicand 00A4                         ___lltoft@exp 00AD  
              __size_of_calcSinArray 0081                      _switchTap_state 01E6  
                  ??_setLongTapState 00A2                        ___awtoft@sign 00AD  
                              _floor 1DC8                                _ldexp 0761  
                              _frexp 238B                                _myBuf 03A0  
                              _errno 024D             _getModulationSubdivision 2196  
                      ___ftpack@sign 00A4                                _timer 0044  
                   __end_ofi1___lmul 2166                                sin@x2 0148  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    __end_of_wait_ms 2228                                pow@yi 0163  
                    scaleA10kPot@pwm 01E7                   __size_of_USARTInit 0044  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                 __size_ofi1___aldiv 0082                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                 __size_ofi1___awdiv 0051                set_subdivision@scalar 0132  
     __size_of_setSwitchBypassRelays 0036        __end_of_setSwitchBypassRelays 225E  
                        exp@exponent 0152                 ?_ConfigureOscillator 0070  
                 _updateSwitchBypass 122B                          ldexp@newexp 0141  
            __end_of_updateSwitchTap 0BE2                      __initialization 0312  
                        log@exponent 0142          updateModulationArray@iAngle 015A  
            _updateSwitchBypassState 2000                         __end_of_main 0761  
            __size_of_InitializeTaps 0026                  i1___lmul@multiplier 0070  
             __size_of_scaleA100kPot 0085                  ?_updateSwitchBypass 0070  
                     __CFG_LPBOR$OFF 0000               ring_tactiles@iLed_1516 00B5  
                    _set_subdivision 1B58                         _calcSinArray 183C  
        updateModulationArray@subDiv 0156                               ??_main 0255  
                      ___fttol@sign1 0128   __end_ofi1_getModulationSubdivision 2137  
         i1_getModulationSubdivision 210B                        ?_scaleA10kPot 0167  
            __size_of_FLASH_ReadWord 0020            setLongBypassState@f_state 00A0  
         __end_of_solidring_tactiles 240B                     ?_set_leds_bottom 00A0  
                             ?_floor 012E                               ?_ldexp 013E  
                             ?_frexp 00A0                     __end_of___altoft 2310  
                             _ADRESH 009C                               _ADRESL 009B  
                   ___awdiv@dividend 00A2                     __end_of___awtoft 2098  
                   __end_of___ftpack 2718                 ??_updateSwitchBypass 00BC  
                   __end_of___lltoft 210B                               i1l2007 18CE  
                             i1l6040 213F                               i1l6044 2149  
                             i1l6070 18EF                               i1l6062 18DF  
                             i1l6080 191D                               i1l6072 18FD  
                             i1l6084 1928                               i1l6088 1936  
                             i1l6700 25A4                               i1l6630 24D8  
                             i1l6704 25AD                               i1l6632 24DE  
                             i1l6800 0233                               i1l6650 211A  
                             i1l6634 24E4                               i1l6642 24FC  
                             i1l6802 0235                               i1l6708 25B5  
                             i1l6636 24EA                               i1l6812 0280  
                             i1l6820 02D2                               i1l6740 012B  
                             i1l6638 24F0                               i1l6664 2132  
                             i1l6656 211F                               i1l6832 0304  
                             i1l6682 257E                               i1l6658 212D  
                             i1l6770 01AA                               i1l6746 0146  
                             i1l6692 2586                               i1l6676 2573  
                             i1l6836 0309                               i1l6772 01AC  
                             i1l6694 2592                               i1l6838 030A  
                             i1l6782 01DF                               i1l6790 0205  
                             i1l6784 01E8                               i1l6768 019A  
                             i1l6794 0219                               i1l6786 01F7  
                             i1l9710 2501                               i1l6798 0224  
                             _PMADRH 0192                               _PMADRL 0191  
                             _PMDATH 0194                               _PMDATL 0193  
                             _PMCON2 0196                               u542_25 18F2  
                             u631_25 2589                               u544_25 18FE  
                             u536_25 214A                               u641_23 00E4  
                             u545_25 1912                               u537_25 2151  
                             u633_25 2593                               u546_25 191E  
                             u634_25 259D                               u642_25 00F4  
                             u651_23 016A                               u635_25 25A5  
                             u643_25 00FD                               u645_25 0122  
                             u663_23 025D                               u647_25 013D  
                             u656_23 01CE                               u664_25 0272  
                             u666_25 02E4                               u667_25 02FD  
                     _debounce_count 0245                          modSaw@angle 012E  
                     _debounce_mode1 0247                       _debounce_mode2 0249  
                        modSaw@shift 013F                               _URBuff 0320  
                          ??_InitApp 00A0                ??_ConfigureOscillator 00A0  
                        modSin@angle 0134              ?_getModulationDelayTime 0070  
                     __CFG_PWRTE$OFF 0000                          modSin@shift 013F  
                             ___ftge 1800                               ___lmul 21C6  
                          ??___aldiv 00A8                               ___wmul 2FC8  
                          ??___awdiv 00A4                            ??___ftadd 00C7  
                     __CFG_STVREN$ON 0000                            ??___ftdiv 00D4  
                          ??___ftneg 00C1                            ??___ftmul 00B4  
                          ??___ftsub 00F0                            ??___fttol 0124  
                        modTri@angle 012E                     __end_of_init_adc 2F37  
                             _modSaw 14AA                               _modSin 1654  
                             _modTri 0BE2                     __end_of_init_pwm 248D  
                        modTri@shift 0137                     ___awdiv@quotient 00A7  
              __end_of_resetRingLEDs 2FAE                               _tmpVal 0253  
                  __end_of_USARTInit 24D1                       ??_scaleA10kPot 00F0  
                  __end_ofi1___aldiv 193F                               floor@i 0132  
                             floor@x 012E                ___ftmul@f3_as_product 00B9  
                  __end_ofi1___awdiv 25BA              FLASH_ReadWord@flashAddr 00A0  
                             sin@sgn 014B                     __end_of_showSave 2F94  
               _getSwitchBypassState 2F17                            ??_wait_ms 00AE  
               _setSwitchBypassState 2FE4                        _scaleA100kPot 19C1  
       __end_of_setExpressionDisplay 2019               __size_of_scaleiA10kPot 00AB  
             setLongTapState@f_state 00A0                     modSin@inflection 0137  
                   __end_ofexp@coeff 281E                     __end_oflog@coeff 2839  
            __end_of__initialization 038D                           ___altoft@c 00A8  
     __end_of_getModulationDelayTime 265F                           ___ftadd@f1 00C1  
                         ___ftadd@f2 00C4                           ___ftge@ff1 00A0  
                         ___ftge@ff2 00A3                    _bypass_turning_on 01BF  
                       eval_poly@res 013B                           ___ftdiv@f1 00D1  
                         ___ftdiv@f2 00CE                           ___ftdiv@f3 00D9  
                     _top_push_state 0059            ??_updateSwitchBypassState 00A2  
                         ___ftneg@f1 00BE                  _switchBypass_toggle 0251  
                         ___awtoft@c 00A8                __end_of_ring_tactiles 2569  
            __end_of_set_subdivision 1BE3                           ___ftmul@f1 00AE  
                         ___ftmul@f2 00B1                           ___ftsub@f1 013A  
                         ___ftsub@f2 0137                           ___fttol@f1 0120  
                   ?_updateSwitchTap 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 2F5E                         __pidataBANK2 07FF  
                       __pidataBANK3 1000                         __pidataBANK4 0002  
                         ___lltoft@c 00A8                        __end_of_floor 1E7B  
                      __end_of_ldexp 07F8                        __end_of_frexp 23CB  
                   _initSwitchBypass 2F4F                            ?i1___lmul 0070  
              _updateModulationArray 0DDD                      _doubleTap_state 004A  
                     _OPTION_REGbits 0095                ?_getSwitchBypassState 00A0  
              ?_setSwitchBypassState 00B6                       ?_scaleA100kPot 0167  
                            ??_floor 0131                              ??_ldexp 0143  
                            ??_frexp 00A4                 __size_of_init_timer0 0007  
               __size_of_init_timer2 0009                    i1___aldiv@divisor 0020  
                  i1___aldiv@counter 0028                        ?_setPedalMode 0070  
                         __pbssBANK0 0040                           __pbssBANK2 016A  
                         __pbssBANK3 01A0                           __pbssBANK4 0220  
                         __pbssBANK5 02A0                           __pbssBANK6 0320  
                         __pbssBANK7 03A0                   __size_of_eval_poly 0072  
                   ??i1_set_leds_top 0074                      __CFG_VCAPEN$OFF 0000  
                 __size_of_modSawRev 001C                   __size_of_modSquare 003D  
           __end_of_setPresetDisplay 2298                           _delay_time 0051  
                   _long_press_limit 0057         __size_of_setDoublePressState 003E  
                         _delayfound 024B                           __pmaintext 0391  
                     _InitializeTaps 20BB                              ?___ftge 00A0  
                            ?___lmul 00A0                              ?___wmul 012E  
     updateModulationArray@thisAngle 0158                           __pintentry 0004  
                      _scaleiA10kPot 1D1D                           _blink_rate 005B  
                      ??_adc_convert 00A2                            ?___altoft 00A8  
                            ?_modSaw 012E                              ?_modSin 0134  
                            ?_modTri 012E                       ___lmul@product 00A8  
                    _setLongTapState 2FAE                            ?___awtoft 00A8  
                          ?___ftpack 00A0                  modSquare@inflection 014B  
                          ?___lltoft 00A8                           ??i1___lmul 0078  
         ??_getModulationSubdivision 00A2                       _FLASH_ReadWord 2035  
                 i1___awdiv@dividend 0072      __end_of_updateSwitchBypassState 2001  
                        modulation@x 002E                          modulation@y 0032  
                         _ldexp$2626 0145                      _debounce_bypass 0243  
                     ??_setPedalMode 00A7                   USARTWriteInt@F3536 0234  
                      _suspend_blink 004F         setSwitchBypassRelays@f_state 00B2  
                       modSaw@period 0142                              _UQFront 0049  
                          ?_init_adc 0070                            ?_init_pwm 0070  
                   _adjust_mod_delay 01BE                              _InitApp 2166  
               __end_of_scaleA10kPot 1C74                         modSin@period 0142  
             __end_of_InitializeTaps 20E1                         modSin@tmpVal 0145  
                      ?_set_leds_top 00A0                           _knob1_prev 01CE  
                 i1___awdiv@quotient 0077                           _knob2_prev 01D0  
                         _knob3_prev 01D2                           _knob4_prev 01D4  
                         _knob5_prev 01D6                     ?_set_subdivision 012E  
                          ?_showSave 0070                              ___aldiv 193F  
                     ?_scaleiA10kPot 0167                      __size_of___ftge 003C  
                            ___awdiv 25BA                      __size_of___lmul 0030  
                            ___ftadd 101F                              ___ftdiv 1C74  
                            ___ftneg 2F24                           _knob_1_pos 01AC  
                         _knob_2_pos 01AE                      __size_of___wmul 001C  
                            ___ftmul 1E7B                           _knob_3_pos 01B0  
                            ___ftsub 0800                              ___fttol 1A46  
                         _knob_4_pos 01B2                           _knob_5_pos 01B4  
                  _switchTap_pressed 0050                           ??___altoft 00AC  
               _setExpressionDisplay 2001               ?_updateModulationArray 0070  
             __end_of_FLASH_ReadWord 2055                      __size_of_modSaw 01AA  
                    __size_of_modSin 01AC                           ??___awtoft 00AB  
                         ??___ftpack 00A5                      __size_of_modTri 01FB  
                  __end_of_eval_poly 278A                   InitializeTaps@itap 00A1  
                         ??___lltoft 00AC                              __ptext1 09FD  
                            __ptext2 2FAE                              __ptext3 193F  
                            __ptext4 122B                              __ptext5 2055  
                            __ptext6 234D                              __ptext7 2F80  
                            __ptext8 23CB                              __ptext9 2519  
         __end_of_setLongBypassState 2076          ?i1_getModulationSubdivision 0070  
             ??_getSwitchBypassState 00A2                    __end_of_modSawRev 2035  
                          _T2CONbits 001C                         __size_of_map 008B  
                       __size_of_exp 0159                         __size_of_log 00D1  
                       __size_of_isr 030C               ??_setSwitchBypassState 00B8  
                       __size_of_sin 01CF                         __size_of_pow 0116  
                __end_of_adc_convert 2F80                         modTri@period 013A  
                  __end_of_modSquare 234D                      ??_scaleA100kPot 00F0  
                   ___aldiv@dividend 00A4                         modTri@tmpVal 013D  
                            _wait_ms 21F6                              clrloop0 2F44  
               end_of_initialization 038D                              exp@sign 0154  
                         _modulation 240B                              init_ram 2F37  
                         ??_init_adc 00A0                              initloop 2F38  
                         ??_init_pwm 00A0         updateSwitchBypassState@state 00A0  
                 _solidring_tactiles 23CB                        _longTap_timer 01B8  
                      _longTap_state 005C                        _longTap_start 016C  
                     ??_set_leds_top 00A4                      ?_InitializeTaps 0070  
                            pow@sign 0162                    scaleA10kPot@input 0167  
            __end_of_setLongTapState 2FC8                _setSwitchBypassRelays 2228  
             i1set_leds_top@ledState 0072                            _RCSTAbits 019D  
                         ??_showSave 00B7                     _mod_time_changed 01E4  
                   _longBypass_timer 01B6                     ___aldiv@quotient 00AB  
                   _longBypass_state 004C                     _longBypass_start 004B  
                ?_solidring_tactiles 0070                         __pstringtext 2800  
          FLASH_ReadWord@GIEBitValue 00A2                ?_setExpressionDisplay 0070  
                    ?_FLASH_ReadWord 00A0                    _expressionChannel 016F  
                          _PORTAbits 000C                            _PORTCbits 000E  
                          _PORTDbits 000F                            _PORTEbits 0010  
                          _USARTInit 248D                            _TRISBbits 008D  
                          _TRISCbits 008E                            _TRISDbits 008F  
                          _TRISEbits 0090                            _TRISFbits 030C  
                          _TRISGbits 030D                            i1___aldiv 18BD  
                          i1___awdiv 2569                 ??_solidring_tactiles 00B2  
        __end_of_ConfigureOscillator 2F17                           map@out_max 00EA  
                         map@out_min 00E7          __size_of_updateSwitchBypass 0126  
           __end_of_initSwitchBypass 2F5E                          _CCP1CONbits 0293  
                        ___ftdiv@exp 00DC             __size_of_set_leds_bottom 003B  
                        _CCP2CONbits 029A                            _TXSTAbits 019E  
               _switchBypass_pressed 01BA                          _CCP3CONbits 0313  
                        _CCP4CONbits 031A                          _CCP5CONbits 031E  
                        _CCP6CONbits 0613                      ??_scaleiA10kPot 00F0  
                        _CCP7CONbits 0616                          ___ftmul@exp 00B8  
                 adc_convert@channel 00A3                          _CCP8CONbits 0619  
                        _CCP9CONbits 061C                 set_leds_top@ledState 00A2  
                     __end_of___ftge 183C                 __end_of_setPedalMode 20BB  
                     __end_of___lmul 21F6                       __end_of___wmul 2FE4  
                       _double_timer 01A0                          _adc_convert 2F6D  
   __end_of_getModulationSubdivision 21C6                       _switchTap_down 01C7  
                     __end_of_modSaw 1654                       __end_of_modSin 1800  
                     __end_of_modTri 0DDD                       modSawRev@angle 0145  
                         floor@expon 0135                i1___lmul@multiplicand 0074  
                  __size_ofi1___lmul 002F                  start_initialization 0312  
                         ?_USARTInit 00A0                           eval_poly@d 0137  
                         eval_poly@n 0139                           eval_poly@x 0134  
              _bottomTactile_pressed 016A                  _setDoublePressState 234D  
                         ldexp@value 013E                           ?i1___aldiv 0020  
                        __end_of_map 1B58                          __end_of_exp 14AA  
                        __end_of_log 2000                          __end_of_isr 0310  
                         ?i1___awdiv 0070                          __end_of_sin 09FD  
                        __end_of_pow 122B                __size_of_scaleA10kPot 0091  
                 _adjusted_pot_value 0241                          ?_modulation 002E  
                 scaleiA10kPot@input 0167                           frexp@value 00A0  
             __size_of_resetRingLEDs 001A               ?_setSwitchBypassRelays 00B2  
               ?_setDoublePressState 00B8  __size_ofi1_getModulationSubdivision 002C  
                   ?_setLongTapState 00A0                    ?_setPresetDisplay 0070  
                           ??___ftge 00A6                             ??___lmul 00A8  
             ??_setExpressionDisplay 00A4                             ??___wmul 00F0  
                 ??_setPresetDisplay 00A4                          __pdataBANK0 0051  
                        __pdataBANK2 016F                          __pdataBANK3 01C8  
                        __pdataBANK4 0263                             ??_modSaw 00F0  
                           ??_modSin 013A                   i1___aldiv@dividend 0024  
                           ??_modTri 00F0                        _tap_iteration 01DE  
           __size_of_updateSwitchTap 01E5                    __size_of___altoft 003D  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                        __pbssBIGRAM 238A                         _scaleA10kPot 1BE3  
                  __size_of___lltoft 002A                        ??_init_timer0 00A0  
                      ??_init_timer2 00A0                 __end_of_set_leds_top 26B3  
                          ___latbits 0003       setExpressionDisplay@ledChannel 00A6  
                 _switchBypass_state 005F                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                        __pcstackBANK2 0120  
                      __pcstackBANK3 01E7                        __pcstackBANK4 0255  
             __size_of_ring_tactiles 0050                       _expSwitchState 01E2  
                   i1___lmul@product 0078                     scaleiA10kPot@pwm 01E7  
           ?_updateSwitchBypassState 00A0                           sin@coeff_a 2839  
                         sin@coeff_b 2848                   i1___aldiv@quotient 002A  
                           ?_InitApp 0070                ??_setDoublePressState 00BA  
                  __size_of_init_adc 000A                    __size_of_init_pwm 0041  
                          _main$2830 025D                            _main$2831 0260  
                          _main$2829 025A              ??_updateModulationArray 0150  
                           ?___aldiv 00A0                    ??_set_leds_bottom 00A2  
                 _currentBypassState 01E1                             ?___awdiv 00A0  
                           ?___ftadd 00C1                             ?___ftdiv 00CE  
                           ?___ftneg 00BE                             ?___ftmul 00AE  
                           ?___ftsub 0137                             ?___fttol 0120  
                  __size_of_showSave 0014                   _modulation_changed 01C4  
                  i1___awdiv@divisor 0070                   _scaleA100kPot$2834 01EA  
                 _scaleA100kPot$2835 01ED                        ?_calcSinArray 0070  
                  i1___awdiv@counter 0075                          _blink_delay 01CC  
                __size_of_modulation 0041                        _resetRingLEDs 2F94  
                        _blink_state 01E0                            _eval_poly 2718  
                        ??_USARTInit 00A2                             _CCPTMRS0 029D  
                           _CCPTMRS1 029E                             _CCPTMRS2 029F  
                        ??i1___aldiv 007C                             ?_wait_ms 00AC  
                        ??i1___awdiv 0074                            _modSawRev 2019  
           ??_getModulationDelayTime 00F0                       __size_of_floor 00B3  
                     __size_of_ldexp 0097                       __size_of_frexp 0040  
                          _modSquare 2310                       _presetModeCnst 01E5  
                 _setLongBypassState 2055                  __end_of_init_timer0 07FF  
                __end_of_init_timer2 2F24                            _mod_value 024F  
                          _mod_timer 01A4                     ??_InitializeTaps 00A0  
                    ___aldiv@divisor 00A0    __size_of_getModulationSubdivision 0030  
                    ___aldiv@counter 00A9            ?_getModulationSubdivision 00A0  
                     _presetSaveMode 004E                       ___wmul@product 0132  
                           _LATBbits 010D                             _LATDbits 010F  
                           _LATFbits 038C                             _LATGbits 038D  
                     _mod_delay_time 01DA                            clear_ram0 2F43  
                          _tap_timer 0040                  ?_setLongBypassState 00A0  
                          _tap_total 023D                __size_of_setPedalMode 0023  
                      set_leds_top@x 00A0                             _PIR1bits 0011  
                      _ring_tactiles 2519                      _longBypass_down 016B  
                   ??_FLASH_ReadWord 00A2                      _longBypass_save 01C2  
            __size_ofi1_set_leds_top 0048                       ??_calcSinArray 014C  
          initSwitchBypass@initState 00BA                            map@in_max 00E4  
                          map@in_min 00E1                       ?_resetRingLEDs 0070  
                          _sub_timer 01A8                           _ADCON0bits 009D  
                           i1___lmul 2137                           _ADCON1bits 009E  
           __size_of_set_subdivision 008B                    ___wmul@multiplier 012E  
                   set_subdivision@x 012E                     set_subdivision@y 0130  
               ??_setLongBypassState 00A2                           ?_eval_poly 0134  
      __size_of_getSwitchBypassState 0004        __size_of_setSwitchBypassState 001C  
                         ?_modSawRev 0145                __end_of_scaleA100kPot 1A46  
                  ??_updateSwitchTap 00BC                    ___lmul@multiplier 00A0  
                         ?_modSquare 0148                      modSquare@tmpVal 014E  
                       _setPedalMode 2098                    _ReadSavedSettings 278A  
                  ?_initSwitchBypass 0070                    ring_tactiles@iLed 00B3  
                     wait_ms@timeSec 00AC                   ?_ReadSavedSettings 0070  
                        _modSaw$2844 0134                          _modSaw$2845 0137  
                        _modSaw$2846 013A                       wait_ms@timemsl 00AE  
                          frexp@eptr 00A3          setSwitchBypassState@f_state 00B6  
                        _modSin$2842 013C                   ??_initSwitchBypass 00BA  
                   __size_of_InitApp 0030                       ?_ring_tactiles 0070  
                          modSaw@mod 013D                          _mode1_state 01C3  
                        _mode2_state 004D                            isr@subDiv 007D  
                        _modTri$2843 0134                  updateSwitchTap@iCnt 00C4  
                ??_ReadSavedSettings 00A4                           _APFCONbits 011D  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                       ?_adc_convert 00A0                     __size_of___ftneg 0009  
                           ___altoft 22D3                     __size_of___ftmul 00B4  
                   __size_of___ftsub 002E                     __size_of___fttol 0087  
                           ___awtoft 2076                __size_of_set_leds_top 0054  
                           ___ftpack 26B3                    _baseline_mod_time 01C8  
                           _map$2832 00ED                             ___lltoft 20E1  
             _preset_programmning_on 01C5                           _ANSELEbits 0190  
                         _ANSELFbits 040C                     modTri@inflection 0131  
                   set_leds_bottom@x 00A0                             _exp$2850 014C  
                           _exp$2589 014F                          _init_timer0 07F8  
                        _init_timer2 2F1B           __end_of_updateSwitchBypass 1351  
                           __ptext10 2098                             __ptext11 225E  
                           __ptext20 25BA                             __ptext12 2001  
                           __ptext21 1B58                             __ptext13 2F94  
                           __ptext30 1ACD                             __ptext22 1D1D  
                           __ptext14 0DDD                             __ptext31 2F4F  
                           __ptext23 1BE3                             __ptext15 0BE2  
                           __ptext40 183C                             __ptext32 2FE4  
                           __ptext24 19C1                             __ptext16 2310  
                           __ptext41 082E                             __ptext33 2228  
                           __ptext25 1115                             __ptext17 1654  
                           __ptext50 0800                             __ptext42 1DC8  
                           __ptext34 21F6                             __ptext26 1F2F  
                           __ptext18 2019                             __ptext51 101F  
                           __ptext43 238B                             __ptext35 21C6  
                           __ptext27 1351                             __ptext19 14AA  
                           __ptext60 2298                             __ptext52 2F24  
                           __ptext44 1A46                             __ptext36 2000  
                           __ptext28 0761                             __ptext61 2035  
                           __ptext53 1C74                             __ptext45 1800  
                           __ptext37 2F17                             __ptext29 20E1  
                           __ptext70 24D1                             __ptext62 20BB  
                           __ptext54 2076                             __ptext46 22D3  
                           __ptext38 260C                             __ptext71 210B  
                           __ptext63 2166                             __ptext55 26B3  
                           __ptext47 2718                             __ptext39 2196  
                           __ptext72 2569                             __ptext64 244C  
                           __ptext56 2F6D                             __ptext48 2FC8  
                           __ptext73 240B                             __ptext65 2F1B  
                           __ptext57 248D                             __ptext49 1E7B  
                           __ptext74 2137                             __ptext66 07F8  
                           __ptext58 278A                             __ptext75 18BD  
                           __ptext67 2F2D                             __ptext59 265F  
                           __ptext68 2F13                             _sin$2849 0145  
          __end_of_ReadSavedSettings 2800                     __size_of_wait_ms 0032  
        __size_of_solidring_tactiles 0040      __size_of_getModulationDelayTime 0053  
                           _ledState 0239                             _pow$2847 015C  
                           _pow$2848 015F                        _presetChannel 005E  
                       ??_modulation 0036                          _mod_counter 01D8  
                           _modArray 238A              ??_setSwitchBypassRelays 00B4  
                           _init_adc 2F2D                        __size_of_main 03D0  
                           _init_pwm 244C     updateModulationArray@angleFactor 0154  
                           _sinArray 2482         __size_of_ConfigureOscillator 0004  
                       _set_leds_top 265F                             _showSave 2F80  
                           _num_taps 005D                __end_of_scaleiA10kPot 1DC8  
                           int$flags 007E                      ??_resetRingLEDs 00A4  
                    i1set_leds_top@x 0070                       modSquare@angle 0148  
                           exp@coeff 2800                             _symmetry 01DC  
                modSawRev@inflection 0148                             log@coeff 281E  
                 __end_of_modulation 244C                   calcSinArray@iAngle 0153  
                         _INTCONbits 000B                          ??_eval_poly 00F0  
          __size_of_setPresetDisplay 003A                          _tap_history 0220  
                        ??_modSawRev 014B                    ??_set_subdivision 00F0  
                        ??_modSquare 00F0                   calcSinArray@tmpVal 0150  
                           intlevel1 0000                 __end_of_calcSinArray 18BD  
                    _set_leds_bottom 2298                           _PMCON1bits 0195  
                    ??_ring_tactiles 00B2                    __CFG_CLKOUTEN$OFF 0000  
                    _reset_sub_delay 01C6                           _OSCCONbits 0099  
                       _preset_blink 016D               _getModulationDelayTime 260C  
                     i1_set_leds_top 24D1       __size_of_updateModulationArray 0223  
   __size_of_updateSwitchBypassState 0001        __end_of_updateModulationArray 1000  
                      _isInitialized 01C1        __size_of_setExpressionDisplay 0018  
                 _scaleiA10kPot$2840 01EA                   _scaleiA10kPot$2841 01ED  
           __size_of_setLongTapState 001A                          _tmpModDelay 01BC  
       ??i1_getModulationSubdivision 0072                         ___aldiv@sign 00AA  
         __size_of_ReadSavedSettings 0076          __end_of_setDoublePressState 238B  
                       _CCP10CONbits 061F                    _bottom_push_state 0055  
         setPresetDisplay@ledChannel 00A6               __end_ofi1_set_leds_top 2519  
